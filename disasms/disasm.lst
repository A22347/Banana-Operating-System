
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 5f ec 00 00       	call   c000ec7f <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 88 52 02 c0       	mov    eax,0xc0025288
c0000025:	3d 88 52 02 c0       	cmp    eax,0xc0025288
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 88 52 02 c0       	push   0xc0025288
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 88 52 02 c0       	mov    eax,0xc0025288
c0000051:	2d 88 52 02 c0       	sub    eax,0xc0025288
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 88 52 02 c0       	push   0xc0025288
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 70 02 c0 00 	cmp    BYTE PTR ds:0xc00270c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 10 0e 02 c0       	mov    ebx,0xc0020e10
c0000097:	81 eb 0c 0e 02 c0    	sub    ebx,0xc0020e0c
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 0c 0e 02 c0       	mov    esi,0xc0020e0c
c00000a6:	a1 c4 70 02 c0       	mov    eax,ds:0xc00270c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 70 02 c0       	mov    ds:0xc00270c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 70 02 c0       	mov    eax,ds:0xc00270c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 88 52 02 c0       	push   0xc0025288
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 70 02 c0 01 	mov    BYTE PTR ds:0xc00270c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 70 02 c0       	push   0xc00270c8
c0000108:	68 88 52 02 c0       	push   0xc0025288
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 7f 4d 01 00       	call   c001502c <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 ec 30 01 00       	call   c00133b1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 5d 4d 01 00       	call   c001502c <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 6a 52 01 00       	call   c0015558 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 2d 57 01 00       	call   c0015a24 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 80 cd 02 c0 	lgdtd  ds:0xc002cd80
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 0e e5 00 00       	jmp    c000e88d <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 70 02 c0       	mov    ds:0xc00270e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 70 02 c0    	mov    DWORD PTR ds:0xc00270e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 70 02 c0    	mov    ebx,DWORD PTR ds:0xc00270e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 20 0e 02 c0 02 	test   BYTE PTR [edx-0x3ffdf1e0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 20 0e 02 c0 01 	test   BYTE PTR [edx-0x3ffdf1e0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 20 0e 02 c0 08 	test   BYTE PTR [edx-0x3ffdf1e0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 20 0e 02 c0 04 	test   BYTE PTR [ecx-0x3ffdf1e0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 20 0e 02 c0 01 	test   BYTE PTR [edx-0x3ffdf1e0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d5a:	85 c9                	test   ecx,ecx
c0000d5c:	0f 84 01 01 00 00    	je     c0000e63 <dlfree+0x110>
c0000d62:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d65:	8b 1d 00 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c3                	cmp    ebx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 cb 03             	or     ebx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 1d 00 71 02 c0    	mov    DWORD PTR ds:0xc0027100,ebx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 1c 85 04 71 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd8efc]
c0000d8d:	89 19                	mov    DWORD PTR [ecx],ebx
c0000d8f:	89 14 85 04 71 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8efc],edx
c0000d96:	e9 c8 00 00 00       	jmp    c0000e63 <dlfree+0x110>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 cb 01             	or     ebx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 1d 00 71 02 c0    	mov    DWORD PTR ds:0xc0027100,ebx
c0000db0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000db3:	83 e3 fc             	and    ebx,0xfffffffc
c0000db6:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000dbf:	29 ca                	sub    edx,ecx
c0000dc1:	01 c8                	add    eax,ecx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dc9:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dcc:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000dcf:	39 35 2c 71 02 c0    	cmp    DWORD PTR ds:0xc002712c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000ddb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000dde:	80 e1 01             	and    cl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000de9:	01 d8                	add    eax,ebx
c0000deb:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dee:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000df1:	8b 0d 3c 71 02 c0    	mov    ecx,DWORD PTR ds:0xc002713c
c0000df7:	c7 42 0c 34 71 02 c0 	mov    DWORD PTR [edx+0xc],0xc0027134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 d8                	add    eax,ebx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 71 02 c0    	mov    DWORD PTR ds:0xc002712c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 35                	jbe    c0000e63 <dlfree+0x110>
c0000e2e:	f6 05 00 71 02 c0 02 	test   BYTE PTR ds:0xc0027100,0x2
c0000e35:	74 2c                	je     c0000e63 <dlfree+0x110>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e47:	01 c8                	add    eax,ecx
c0000e49:	53                   	push   ebx
c0000e4a:	29 ca                	sub    edx,ecx
c0000e4c:	53                   	push   ebx
c0000e4d:	ff 0d 50 74 02 c0    	dec    DWORD PTR ds:0xc0027450
c0000e53:	50                   	push   eax
c0000e54:	29 05 64 74 02 c0    	sub    DWORD PTR ds:0xc0027464,eax
c0000e5a:	52                   	push   edx
c0000e5b:	e8 6d db 00 00       	call   c000e9cd <munmap>
c0000e60:	83 c4 10             	add    esp,0x10
c0000e63:	5b                   	pop    ebx
c0000e64:	5e                   	pop    esi
c0000e65:	5f                   	pop    edi
c0000e66:	c3                   	ret    

c0000e67 <sYSMALLOc>:
c0000e67:	55                   	push   ebp
c0000e68:	57                   	push   edi
c0000e69:	56                   	push   esi
c0000e6a:	53                   	push   ebx
c0000e6b:	89 d3                	mov    ebx,edx
c0000e6d:	83 ec 2c             	sub    esp,0x2c
c0000e70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e74:	8b aa 5c 03 00 00    	mov    ebp,DWORD PTR [edx+0x35c]
c0000e7a:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e7d:	8d 45 ff             	lea    eax,[ebp-0x1]
c0000e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e84:	74 1f                	je     c0000ea5 <sYSMALLOc+0x3e>
c0000e86:	89 d0                	mov    eax,edx
c0000e88:	e8 df fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e8d:	83 ec 0c             	sub    esp,0xc
c0000e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000e94:	83 e8 07             	sub    eax,0x7
c0000e97:	50                   	push   eax
c0000e98:	e8 7d 03 00 00       	call   c000121a <dlmalloc>
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	e9 6d 03 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0000ea5:	f7 dd                	neg    ebp
c0000ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000eab:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0000eaf:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000eb5:	0f 87 be 00 00 00    	ja     c0000f79 <sYSMALLOc+0x112>
c0000ebb:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ec1:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000ec7:	0f 8d ac 00 00 00    	jge    c0000f79 <sYSMALLOc+0x112>
c0000ecd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0000ed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ed5:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000ed9:	21 ee                	and    esi,ebp
c0000edb:	39 fe                	cmp    esi,edi
c0000edd:	0f 86 96 00 00 00    	jbe    c0000f79 <sYSMALLOc+0x112>
c0000ee3:	52                   	push   edx
c0000ee4:	52                   	push   edx
c0000ee5:	6a 00                	push   0x0
c0000ee7:	6a ff                	push   0xffffffff
c0000ee9:	6a 0c                	push   0xc
c0000eeb:	6a 03                	push   0x3
c0000eed:	56                   	push   esi
c0000eee:	6a 00                	push   0x0
c0000ef0:	e8 7a da 00 00       	call   c000e96f <mmap>
c0000ef5:	83 c4 20             	add    esp,0x20
c0000ef8:	83 f8 ff             	cmp    eax,0xffffffff
c0000efb:	74 7c                	je     c0000f79 <sYSMALLOc+0x112>
c0000efd:	89 c1                	mov    ecx,eax
c0000eff:	83 e1 07             	and    ecx,0x7
c0000f02:	74 13                	je     c0000f17 <sYSMALLOc+0xb0>
c0000f04:	ba 08 00 00 00       	mov    edx,0x8
c0000f09:	29 ca                	sub    edx,ecx
c0000f0b:	89 f1                	mov    ecx,esi
c0000f0d:	01 d0                	add    eax,edx
c0000f0f:	29 d1                	sub    ecx,edx
c0000f11:	89 10                	mov    DWORD PTR [eax],edx
c0000f13:	89 ca                	mov    edx,ecx
c0000f15:	eb 08                	jmp    c0000f1f <sYSMALLOc+0xb8>
c0000f17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f1d:	89 f2                	mov    edx,esi
c0000f1f:	83 ca 02             	or     edx,0x2
c0000f22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f25:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f2b:	8d 57 01             	lea    edx,[edi+0x1]
c0000f2e:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f34:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f3a:	7e 06                	jle    c0000f42 <sYSMALLOc+0xdb>
c0000f3c:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f42:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f48:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f4e:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f54:	76 06                	jbe    c0000f5c <sYSMALLOc+0xf5>
c0000f56:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f5c:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f62:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f68:	0f 83 3f 01 00 00    	jae    c00010ad <sYSMALLOc+0x246>
c0000f6e:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000f74:	e9 34 01 00 00       	jmp    c00010ad <sYSMALLOc+0x246>
c0000f79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000f7c:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000f86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000f89:	83 e0 fc             	and    eax,0xfffffffc
c0000f8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0000f8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f93:	03 04 24             	add    eax,DWORD PTR [esp]
c0000f96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f9e:	83 c0 10             	add    eax,0x10
c0000fa1:	01 c5                	add    ebp,eax
c0000fa3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fa7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fae:	74 03                	je     c0000fb3 <sYSMALLOc+0x14c>
c0000fb0:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c0000fb3:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0000fb7:	23 6c 24 10          	and    ebp,DWORD PTR [esp+0x10]
c0000fbb:	89 ee                	mov    esi,ebp
c0000fbd:	7f 18                	jg     c0000fd7 <sYSMALLOc+0x170>
c0000fbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fc6:	74 27                	je     c0000fef <sYSMALLOc+0x188>
c0000fc8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000fcc:	03 34 24             	add    esi,DWORD PTR [esp]
c0000fcf:	01 ee                	add    esi,ebp
c0000fd1:	23 74 24 10          	and    esi,DWORD PTR [esp+0x10]
c0000fd5:	eb 18                	jmp    c0000fef <sYSMALLOc+0x188>
c0000fd7:	83 ec 0c             	sub    esp,0xc
c0000fda:	55                   	push   ebp
c0000fdb:	e8 59 d9 00 00       	call   c000e939 <sbrk_thunk>
c0000fe0:	83 c4 10             	add    esp,0x10
c0000fe3:	89 c7                	mov    edi,eax
c0000fe5:	83 c8 ff             	or     eax,0xffffffff
c0000fe8:	83 ff ff             	cmp    edi,0xffffffff
c0000feb:	75 42                	jne    c000102f <sYSMALLOc+0x1c8>
c0000fed:	eb d0                	jmp    c0000fbf <sYSMALLOc+0x158>
c0000fef:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c0000ff5:	77 05                	ja     c0000ffc <sYSMALLOc+0x195>
c0000ff7:	be 00 c0 00 00       	mov    esi,0xc000
c0000ffc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0001000:	77 07                	ja     c0001009 <sYSMALLOc+0x1a2>
c0001002:	31 c0                	xor    eax,eax
c0001004:	e9 09 02 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0001009:	50                   	push   eax
c000100a:	50                   	push   eax
c000100b:	6a 00                	push   0x0
c000100d:	6a ff                	push   0xffffffff
c000100f:	6a 0c                	push   0xc
c0001011:	6a 03                	push   0x3
c0001013:	56                   	push   esi
c0001014:	6a 00                	push   0x0
c0001016:	e8 54 d9 00 00       	call   c000e96f <mmap>
c000101b:	83 c4 20             	add    esp,0x20
c000101e:	89 c7                	mov    edi,eax
c0001020:	83 f8 ff             	cmp    eax,0xffffffff
c0001023:	74 dd                	je     c0001002 <sYSMALLOc+0x19b>
c0001025:	8d 04 30             	lea    eax,[eax+esi*1]
c0001028:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000102f:	8b ab 68 03 00 00    	mov    ebp,DWORD PTR [ebx+0x368]
c0001035:	01 f5                	add    ebp,esi
c0001037:	83 f8 ff             	cmp    eax,0xffffffff
c000103a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0001040:	75 73                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001042:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0001046:	75 6d                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001048:	03 34 24             	add    esi,DWORD PTR [esp]
c000104b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000104f:	83 ce 01             	or     esi,0x1
c0001052:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0001055:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c000105b:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001061:	73 06                	jae    c0001069 <sYSMALLOc+0x202>
c0001063:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001069:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000106f:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001075:	73 06                	jae    c000107d <sYSMALLOc+0x216>
c0001077:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000107d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001080:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001083:	83 e2 fc             	and    edx,0xfffffffc
c0001086:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000108a:	0f 82 72 ff ff ff    	jb     c0001002 <sYSMALLOc+0x19b>
c0001090:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001094:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0001098:	01 c1                	add    ecx,eax
c000109a:	83 ca 01             	or     edx,0x1
c000109d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010a0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00010a4:	83 cb 01             	or     ebx,0x1
c00010a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010ad:	83 c0 08             	add    eax,0x8
c00010b0:	e9 5d 01 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c00010b5:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010bb:	89 d1                	mov    ecx,edx
c00010bd:	83 e1 01             	and    ecx,0x1
c00010c0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010c4:	0f 95 44 24 1c       	setne  BYTE PTR [esp+0x1c]
c00010c9:	85 4c 24 1c          	test   DWORD PTR [esp+0x1c],ecx
c00010cd:	74 14                	je     c00010e3 <sYSMALLOc+0x27c>
c00010cf:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c00010d3:	76 0e                	jbe    c00010e3 <sYSMALLOc+0x27c>
c00010d5:	83 e2 fe             	and    edx,0xfffffffe
c00010d8:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00010de:	e9 89 00 00 00       	jmp    c000116c <sYSMALLOc+0x305>
c00010e3:	85 c9                	test   ecx,ecx
c00010e5:	0f 84 81 00 00 00    	je     c000116c <sYSMALLOc+0x305>
c00010eb:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010ef:	74 0e                	je     c00010ff <sYSMALLOc+0x298>
c00010f1:	89 f8                	mov    eax,edi
c00010f3:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00010f7:	01 c5                	add    ebp,eax
c00010f9:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00010ff:	89 fa                	mov    edx,edi
c0001101:	83 e2 07             	and    edx,0x7
c0001104:	74 0c                	je     c0001112 <sYSMALLOc+0x2ab>
c0001106:	b8 08 00 00 00       	mov    eax,0x8
c000110b:	29 d0                	sub    eax,edx
c000110d:	8d 14 07             	lea    edx,[edi+eax*1]
c0001110:	eb 04                	jmp    c0001116 <sYSMALLOc+0x2af>
c0001112:	89 fa                	mov    edx,edi
c0001114:	31 c0                	xor    eax,eax
c0001116:	03 04 24             	add    eax,DWORD PTR [esp]
c0001119:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000111d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0001121:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001124:	83 ec 0c             	sub    esp,0xc
c0001127:	01 f9                	add    ecx,edi
c0001129:	01 cd                	add    ebp,ecx
c000112b:	29 c8                	sub    eax,ecx
c000112d:	23 6c 24 1c          	and    ebp,DWORD PTR [esp+0x1c]
c0001131:	01 c5                	add    ebp,eax
c0001133:	55                   	push   ebp
c0001134:	e8 00 d8 00 00       	call   c000e939 <sbrk_thunk>
c0001139:	83 c4 10             	add    esp,0x10
c000113c:	83 f8 ff             	cmp    eax,0xffffffff
c000113f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0001143:	75 17                	jne    c000115c <sYSMALLOc+0x2f5>
c0001145:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001149:	83 ec 0c             	sub    esp,0xc
c000114c:	6a 00                	push   0x0
c000114e:	e8 e6 d7 00 00       	call   c000e939 <sbrk_thunk>
c0001153:	83 c4 10             	add    esp,0x10
c0001156:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000115a:	eb 32                	jmp    c000118e <sYSMALLOc+0x327>
c000115c:	39 f8                	cmp    eax,edi
c000115e:	73 39                	jae    c0001199 <sYSMALLOc+0x332>
c0001160:	8d 04 37             	lea    eax,[edi+esi*1]
c0001163:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000116a:	eb 22                	jmp    c000118e <sYSMALLOc+0x327>
c000116c:	89 fa                	mov    edx,edi
c000116e:	83 f8 ff             	cmp    eax,0xffffffff
c0001171:	75 24                	jne    c0001197 <sYSMALLOc+0x330>
c0001173:	83 ec 0c             	sub    esp,0xc
c0001176:	6a 00                	push   0x0
c0001178:	e8 bc d7 00 00       	call   c000e939 <sbrk_thunk>
c000117d:	83 c4 10             	add    esp,0x10
c0001180:	89 c2                	mov    edx,eax
c0001182:	29 fa                	sub    edx,edi
c0001184:	29 f2                	sub    edx,esi
c0001186:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000118c:	89 fa                	mov    edx,edi
c000118e:	83 f8 ff             	cmp    eax,0xffffffff
c0001191:	0f 84 be fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c0001197:	31 ed                	xor    ebp,ebp
c0001199:	29 d0                	sub    eax,edx
c000119b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000119e:	01 e8                	add    eax,ebp
c00011a0:	83 c8 01             	or     eax,0x1
c00011a3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00011a6:	01 ab 68 03 00 00    	add    DWORD PTR [ebx+0x368],ebp
c00011ac:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00011b0:	0f 84 9f fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c00011b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00011bd:	83 ee 0c             	sub    esi,0xc
c00011c0:	83 e6 f8             	and    esi,0xfffffff8
c00011c3:	89 f0                	mov    eax,esi
c00011c5:	83 c8 01             	or     eax,0x1
c00011c8:	83 fe 0f             	cmp    esi,0xf
c00011cb:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00011ce:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c00011d6:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c00011de:	0f 86 71 fe ff ff    	jbe    c0001055 <sYSMALLOc+0x1ee>
c00011e4:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00011ea:	83 ec 0c             	sub    esp,0xc
c00011ed:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00011fb:	83 c0 08             	add    eax,0x8
c00011fe:	50                   	push   eax
c00011ff:	e8 4f fb ff ff       	call   c0000d53 <dlfree>
c0001204:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000120a:	83 c4 10             	add    esp,0x10
c000120d:	e9 43 fe ff ff       	jmp    c0001055 <sYSMALLOc+0x1ee>
c0001212:	83 c4 2c             	add    esp,0x2c
c0001215:	5b                   	pop    ebx
c0001216:	5e                   	pop    esi
c0001217:	5f                   	pop    edi
c0001218:	5d                   	pop    ebp
c0001219:	c3                   	ret    

c000121a <dlmalloc>:
c000121a:	55                   	push   ebp
c000121b:	57                   	push   edi
c000121c:	56                   	push   esi
c000121d:	53                   	push   ebx
c000121e:	83 ec 1c             	sub    esp,0x1c
c0001221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001225:	83 f8 df             	cmp    eax,0xffffffdf
c0001228:	0f 87 70 03 00 00    	ja     c000159e <dlmalloc+0x384>
c000122e:	83 c0 0b             	add    eax,0xb
c0001231:	be 10 00 00 00       	mov    esi,0x10
c0001236:	83 f8 0f             	cmp    eax,0xf
c0001239:	76 05                	jbe    c0001240 <dlmalloc+0x26>
c000123b:	83 e0 f8             	and    eax,0xfffffff8
c000123e:	89 c6                	mov    esi,eax
c0001240:	8b 3d 00 71 02 c0    	mov    edi,DWORD PTR ds:0xc0027100
c0001246:	f7 c7 01 00 00 00    	test   edi,0x1
c000124c:	75 17                	jne    c0001265 <dlmalloc+0x4b>
c000124e:	85 ff                	test   edi,edi
c0001250:	0f 85 05 03 00 00    	jne    c000155b <dlmalloc+0x341>
c0001256:	b8 00 71 02 c0       	mov    eax,0xc0027100
c000125b:	e8 0c fa ff ff       	call   c0000c6c <malloc_consolidate>
c0001260:	e9 f6 02 00 00       	jmp    c000155b <dlmalloc+0x341>
c0001265:	39 f7                	cmp    edi,esi
c0001267:	72 1f                	jb     c0001288 <dlmalloc+0x6e>
c0001269:	89 f2                	mov    edx,esi
c000126b:	c1 ea 03             	shr    edx,0x3
c000126e:	83 ea 02             	sub    edx,0x2
c0001271:	8b 04 95 04 71 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8efc]
c0001278:	85 c0                	test   eax,eax
c000127a:	74 0c                	je     c0001288 <dlmalloc+0x6e>
c000127c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000127f:	89 0c 95 04 71 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8efc],ecx
c0001286:	eb 30                	jmp    c00012b8 <dlmalloc+0x9e>
c0001288:	89 f0                	mov    eax,esi
c000128a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001290:	77 2e                	ja     c00012c0 <dlmalloc+0xa6>
c0001292:	c1 e8 03             	shr    eax,0x3
c0001295:	8d 14 c5 34 71 02 c0 	lea    edx,[eax*8-0x3ffd8ecc]
c000129c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012a0:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012a6:	39 c3                	cmp    ebx,eax
c00012a8:	74 2e                	je     c00012d8 <dlmalloc+0xbe>
c00012aa:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012ad:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012b2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012b5:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012b8:	83 c0 08             	add    eax,0x8
c00012bb:	e9 e0 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c00012c0:	e8 23 f9 ff ff       	call   c0000be8 <largebin_index>
c00012c5:	83 e7 02             	and    edi,0x2
c00012c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012cc:	74 0a                	je     c00012d8 <dlmalloc+0xbe>
c00012ce:	b8 00 71 02 c0       	mov    eax,0xc0027100
c00012d3:	e8 94 f9 ff ff       	call   c0000c6c <malloc_consolidate>
c00012d8:	8d 46 10             	lea    eax,[esi+0x10]
c00012db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012df:	8b 1d 40 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027140
c00012e5:	81 fb 34 71 02 c0    	cmp    ebx,0xc0027134
c00012eb:	0f 84 13 01 00 00    	je     c0001404 <dlmalloc+0x1ea>
c00012f1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00012f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00012f7:	83 e7 fc             	and    edi,0xfffffffc
c00012fa:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001300:	77 4c                	ja     c000134e <dlmalloc+0x134>
c0001302:	3d 34 71 02 c0       	cmp    eax,0xc0027134
c0001307:	75 45                	jne    c000134e <dlmalloc+0x134>
c0001309:	39 1d 30 71 02 c0    	cmp    DWORD PTR ds:0xc0027130,ebx
c000130f:	75 3d                	jne    c000134e <dlmalloc+0x134>
c0001311:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001315:	73 37                	jae    c000134e <dlmalloc+0x134>
c0001317:	8d 04 33             	lea    eax,[ebx+esi*1]
c000131a:	89 fa                	mov    edx,edi
c000131c:	a3 3c 71 02 c0       	mov    ds:0xc002713c,eax
c0001321:	a3 40 71 02 c0       	mov    ds:0xc0027140,eax
c0001326:	a3 30 71 02 c0       	mov    ds:0xc0027130,eax
c000132b:	29 f2                	sub    edx,esi
c000132d:	c7 40 08 34 71 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027134
c0001334:	c7 40 0c 34 71 02 c0 	mov    DWORD PTR [eax+0xc],0xc0027134
c000133b:	83 ce 01             	or     esi,0x1
c000133e:	89 d1                	mov    ecx,edx
c0001340:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001343:	83 c9 01             	or     ecx,0x1
c0001346:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001349:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000134c:	eb 15                	jmp    c0001363 <dlmalloc+0x149>
c000134e:	a3 40 71 02 c0       	mov    ds:0xc0027140,eax
c0001353:	39 fe                	cmp    esi,edi
c0001355:	c7 40 08 34 71 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027134
c000135c:	75 0d                	jne    c000136b <dlmalloc+0x151>
c000135e:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001363:	8d 43 08             	lea    eax,[ebx+0x8]
c0001366:	e9 35 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000136b:	89 f8                	mov    eax,edi
c000136d:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001373:	77 19                	ja     c000138e <dlmalloc+0x174>
c0001375:	c1 e8 03             	shr    eax,0x3
c0001378:	8d 14 00             	lea    edx,[eax+eax*1]
c000137b:	83 c2 0d             	add    edx,0xd
c000137e:	8d 2c 95 f8 70 02 c0 	lea    ebp,[edx*4-0x3ffd8f08]
c0001385:	8b 14 95 00 71 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8f00]
c000138c:	eb 46                	jmp    c00013d4 <dlmalloc+0x1ba>
c000138e:	e8 55 f8 ff ff       	call   c0000be8 <largebin_index>
c0001393:	8d 14 00             	lea    edx,[eax+eax*1]
c0001396:	83 c2 0d             	add    edx,0xd
c0001399:	8d 0c 95 00 71 02 c0 	lea    ecx,[edx*4-0x3ffd8f00]
c00013a0:	8b 14 95 00 71 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8f00]
c00013a7:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013aa:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013ae:	89 d5                	mov    ebp,edx
c00013b0:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013b4:	74 1e                	je     c00013d4 <dlmalloc+0x1ba>
c00013b6:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013b9:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013bc:	77 12                	ja     c00013d0 <dlmalloc+0x1b6>
c00013be:	83 cf 01             	or     edi,0x1
c00013c1:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013c4:	76 05                	jbe    c00013cb <dlmalloc+0x1b1>
c00013c6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013c9:	eb f6                	jmp    c00013c1 <dlmalloc+0x1a7>
c00013cb:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013ce:	eb 04                	jmp    c00013d4 <dlmalloc+0x1ba>
c00013d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00013d4:	89 c7                	mov    edi,eax
c00013d6:	88 c1                	mov    cl,al
c00013d8:	c1 ff 05             	sar    edi,0x5
c00013db:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00013df:	bf 01 00 00 00       	mov    edi,0x1
c00013e4:	d3 e7                	shl    edi,cl
c00013e6:	89 f8                	mov    eax,edi
c00013e8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00013ec:	09 04 bd 34 74 02 c0 	or     DWORD PTR [edi*4-0x3ffd8bcc],eax
c00013f3:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00013f6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00013f9:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00013fc:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00013ff:	e9 db fe ff ff       	jmp    c00012df <dlmalloc+0xc5>
c0001404:	81 fe ff 00 00 00    	cmp    esi,0xff
c000140a:	76 78                	jbe    c0001484 <dlmalloc+0x26a>
c000140c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001410:	8d 04 c5 34 71 02 c0 	lea    eax,[eax*8-0x3ffd8ecc]
c0001417:	8d 48 f8             	lea    ecx,[eax-0x8]
c000141a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000141d:	39 ca                	cmp    edx,ecx
c000141f:	74 63                	je     c0001484 <dlmalloc+0x26a>
c0001421:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001424:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001427:	83 e3 fc             	and    ebx,0xfffffffc
c000142a:	39 de                	cmp    esi,ebx
c000142c:	77 52                	ja     c0001480 <dlmalloc+0x266>
c000142e:	89 df                	mov    edi,ebx
c0001430:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001433:	29 f7                	sub    edi,esi
c0001435:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001438:	01 d3                	add    ebx,edx
c000143a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000143d:	83 ff 0f             	cmp    edi,0xf
c0001440:	8d 42 08             	lea    eax,[edx+0x8]
c0001443:	77 09                	ja     c000144e <dlmalloc+0x234>
c0001445:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001449:	e9 52 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000144e:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001451:	83 ce 01             	or     esi,0x1
c0001454:	89 0d 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,ecx
c000145a:	89 0d 40 71 02 c0    	mov    DWORD PTR ds:0xc0027140,ecx
c0001460:	c7 41 08 34 71 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0027134
c0001467:	c7 41 0c 34 71 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0027134
c000146e:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001471:	89 fa                	mov    edx,edi
c0001473:	83 ca 01             	or     edx,0x1
c0001476:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001479:	89 3b                	mov    DWORD PTR [ebx],edi
c000147b:	e9 20 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c0001480:	89 c2                	mov    edx,eax
c0001482:	eb 99                	jmp    c000141d <dlmalloc+0x203>
c0001484:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001488:	b8 01 00 00 00       	mov    eax,0x1
c000148d:	41                   	inc    ecx
c000148e:	89 cb                	mov    ebx,ecx
c0001490:	8d 14 cd 2c 71 02 c0 	lea    edx,[ecx*8-0x3ffd8ed4]
c0001497:	c1 eb 05             	shr    ebx,0x5
c000149a:	d3 e0                	shl    eax,cl
c000149c:	8b 3c 9d 34 74 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd8bcc]
c00014a3:	39 f8                	cmp    eax,edi
c00014a5:	77 04                	ja     c00014ab <dlmalloc+0x291>
c00014a7:	85 c0                	test   eax,eax
c00014a9:	75 26                	jne    c00014d1 <dlmalloc+0x2b7>
c00014ab:	43                   	inc    ebx
c00014ac:	83 fb 02             	cmp    ebx,0x2
c00014af:	0f 87 a6 00 00 00    	ja     c000155b <dlmalloc+0x341>
c00014b5:	8b 3c 9d 34 74 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd8bcc]
c00014bc:	85 ff                	test   edi,edi
c00014be:	74 eb                	je     c00014ab <dlmalloc+0x291>
c00014c0:	89 d8                	mov    eax,ebx
c00014c2:	c1 e0 06             	shl    eax,0x6
c00014c5:	8d 14 85 2c 71 02 c0 	lea    edx,[eax*4-0x3ffd8ed4]
c00014cc:	b8 01 00 00 00       	mov    eax,0x1
c00014d1:	85 f8                	test   eax,edi
c00014d3:	75 07                	jne    c00014dc <dlmalloc+0x2c2>
c00014d5:	83 c2 08             	add    edx,0x8
c00014d8:	01 c0                	add    eax,eax
c00014da:	eb f5                	jmp    c00014d1 <dlmalloc+0x2b7>
c00014dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00014df:	39 ca                	cmp    edx,ecx
c00014e1:	75 14                	jne    c00014f7 <dlmalloc+0x2dd>
c00014e3:	89 c1                	mov    ecx,eax
c00014e5:	83 c2 08             	add    edx,0x8
c00014e8:	f7 d1                	not    ecx
c00014ea:	01 c0                	add    eax,eax
c00014ec:	21 cf                	and    edi,ecx
c00014ee:	89 3c 9d 34 74 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8bcc],edi
c00014f5:	eb ac                	jmp    c00014a3 <dlmalloc+0x289>
c00014f7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00014fa:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00014fd:	83 e0 fc             	and    eax,0xfffffffc
c0001500:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001503:	89 c3                	mov    ebx,eax
c0001505:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001508:	29 f3                	sub    ebx,esi
c000150a:	8d 14 01             	lea    edx,[ecx+eax*1]
c000150d:	83 fb 0f             	cmp    ebx,0xf
c0001510:	8d 41 08             	lea    eax,[ecx+0x8]
c0001513:	77 09                	ja     c000151e <dlmalloc+0x304>
c0001515:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001519:	e9 82 00 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000151e:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001521:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001527:	89 3d 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,edi
c000152d:	89 3d 40 71 02 c0    	mov    DWORD PTR ds:0xc0027140,edi
c0001533:	c7 47 08 34 71 02 c0 	mov    DWORD PTR [edi+0x8],0xc0027134
c000153a:	c7 47 0c 34 71 02 c0 	mov    DWORD PTR [edi+0xc],0xc0027134
c0001541:	77 06                	ja     c0001549 <dlmalloc+0x32f>
c0001543:	89 3d 30 71 02 c0    	mov    DWORD PTR ds:0xc0027130,edi
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000154f:	89 d9                	mov    ecx,ebx
c0001551:	83 c9 01             	or     ecx,0x1
c0001554:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001557:	89 1a                	mov    DWORD PTR [edx],ebx
c0001559:	eb 45                	jmp    c00015a0 <dlmalloc+0x386>
c000155b:	a1 2c 71 02 c0       	mov    eax,ds:0xc002712c
c0001560:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001563:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001566:	83 e2 fc             	and    edx,0xfffffffc
c0001569:	39 d1                	cmp    ecx,edx
c000156b:	77 1e                	ja     c000158b <dlmalloc+0x371>
c000156d:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001570:	89 f3                	mov    ebx,esi
c0001572:	89 0d 2c 71 02 c0    	mov    DWORD PTR ds:0xc002712c,ecx
c0001578:	83 cb 01             	or     ebx,0x1
c000157b:	29 f2                	sub    edx,esi
c000157d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001580:	83 ca 01             	or     edx,0x1
c0001583:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001586:	e9 2d fd ff ff       	jmp    c00012b8 <dlmalloc+0x9e>
c000158b:	83 c4 1c             	add    esp,0x1c
c000158e:	89 f0                	mov    eax,esi
c0001590:	5b                   	pop    ebx
c0001591:	ba 00 71 02 c0       	mov    edx,0xc0027100
c0001596:	5e                   	pop    esi
c0001597:	5f                   	pop    edi
c0001598:	5d                   	pop    ebp
c0001599:	e9 c9 f8 ff ff       	jmp    c0000e67 <sYSMALLOc>
c000159e:	31 c0                	xor    eax,eax
c00015a0:	83 c4 1c             	add    esp,0x1c
c00015a3:	5b                   	pop    ebx
c00015a4:	5e                   	pop    esi
c00015a5:	5f                   	pop    edi
c00015a6:	5d                   	pop    ebp
c00015a7:	c3                   	ret    

c00015a8 <iALLOc>:
c00015a8:	55                   	push   ebp
c00015a9:	89 c5                	mov    ebp,eax
c00015ab:	57                   	push   edi
c00015ac:	56                   	push   esi
c00015ad:	53                   	push   ebx
c00015ae:	83 ec 2c             	sub    esp,0x2c
c00015b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015bd:	83 3d 00 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027100,0x0
c00015c4:	75 12                	jne    c00015d8 <iALLOc+0x30>
c00015c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015ca:	b8 00 71 02 c0       	mov    eax,0xc0027100
c00015cf:	e8 98 f6 ff ff       	call   c0000c6c <malloc_consolidate>
c00015d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00015d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015dd:	74 12                	je     c00015f1 <iALLOc+0x49>
c00015df:	85 ed                	test   ebp,ebp
c00015e1:	0f 84 64 01 00 00    	je     c000174b <iALLOc+0x1a3>
c00015e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00015ef:	eb 33                	jmp    c0001624 <iALLOc+0x7c>
c00015f1:	85 ed                	test   ebp,ebp
c00015f3:	75 14                	jne    c0001609 <iALLOc+0x61>
c00015f5:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00015fd:	83 c4 2c             	add    esp,0x2c
c0001600:	5b                   	pop    ebx
c0001601:	5e                   	pop    esi
c0001602:	5f                   	pop    edi
c0001603:	5d                   	pop    ebp
c0001604:	e9 11 fc ff ff       	jmp    c000121a <dlmalloc>
c0001609:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001610:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001618:	83 f8 0f             	cmp    eax,0xf
c000161b:	76 07                	jbe    c0001624 <iALLOc+0x7c>
c000161d:	83 e0 f8             	and    eax,0xfffffff8
c0001620:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001624:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001629:	75 09                	jne    c0001634 <iALLOc+0x8c>
c000162b:	89 d0                	mov    eax,edx
c000162d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001630:	31 f6                	xor    esi,esi
c0001632:	eb 3b                	jmp    c000166f <iALLOc+0xc7>
c0001634:	8b 02                	mov    eax,DWORD PTR [edx]
c0001636:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000163e:	83 c0 0b             	add    eax,0xb
c0001641:	83 f8 0f             	cmp    eax,0xf
c0001644:	76 07                	jbe    c000164d <iALLOc+0xa5>
c0001646:	83 e0 f8             	and    eax,0xfffffff8
c0001649:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000164d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001651:	0f af f5             	imul   esi,ebp
c0001654:	eb 25                	jmp    c000167b <iALLOc+0xd3>
c0001656:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001658:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000165b:	bb 10 00 00 00       	mov    ebx,0x10
c0001660:	83 f9 0f             	cmp    ecx,0xf
c0001663:	76 05                	jbe    c000166a <iALLOc+0xc2>
c0001665:	83 e1 f8             	and    ecx,0xfffffff8
c0001668:	89 cb                	mov    ebx,ecx
c000166a:	01 de                	add    esi,ebx
c000166c:	83 c0 04             	add    eax,0x4
c000166f:	39 c7                	cmp    edi,eax
c0001671:	75 e3                	jne    c0001656 <iALLOc+0xae>
c0001673:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000167b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000167f:	8b 1d 54 74 02 c0    	mov    ebx,DWORD PTR ds:0xc0027454
c0001685:	83 ec 0c             	sub    esp,0xc
c0001688:	c7 05 54 74 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027454,0x0
c0001692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001696:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000169a:	50                   	push   eax
c000169b:	e8 7a fb ff ff       	call   c000121a <dlmalloc>
c00016a0:	83 c4 10             	add    esp,0x10
c00016a3:	89 1d 54 74 02 c0    	mov    DWORD PTR ds:0xc0027454,ebx
c00016a9:	85 c0                	test   eax,eax
c00016ab:	0f 84 92 00 00 00    	je     c0001743 <iALLOc+0x19b>
c00016b1:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016b4:	8d 78 f8             	lea    edi,[eax-0x8]
c00016b7:	83 e3 fc             	and    ebx,0xfffffffc
c00016ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016be:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016c3:	74 1e                	je     c00016e3 <iALLOc+0x13b>
c00016c5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016c9:	89 d9                	mov    ecx,ebx
c00016cb:	52                   	push   edx
c00016cc:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016d0:	83 e9 04             	sub    ecx,0x4
c00016d3:	51                   	push   ecx
c00016d4:	6a 00                	push   0x0
c00016d6:	50                   	push   eax
c00016d7:	e8 14 ee ff ff       	call   c00004f0 <memset>
c00016dc:	83 c4 10             	add    esp,0x10
c00016df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00016e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00016e8:	75 14                	jne    c00016fe <iALLOc+0x156>
c00016ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ed:	29 f3                	sub    ebx,esi
c00016ef:	8d 48 08             	lea    ecx,[eax+0x8]
c00016f2:	83 cb 01             	or     ebx,0x1
c00016f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016f9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00016fc:	89 f3                	mov    ebx,esi
c00016fe:	31 c0                	xor    eax,eax
c0001700:	4d                   	dec    ebp
c0001701:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001704:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001708:	39 c5                	cmp    ebp,eax
c000170a:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000170d:	74 2c                	je     c000173b <iALLOc+0x193>
c000170f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001713:	85 c9                	test   ecx,ecx
c0001715:	75 15                	jne    c000172c <iALLOc+0x184>
c0001717:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000171a:	8d 71 0b             	lea    esi,[ecx+0xb]
c000171d:	b9 10 00 00 00       	mov    ecx,0x10
c0001722:	83 fe 0f             	cmp    esi,0xf
c0001725:	76 05                	jbe    c000172c <iALLOc+0x184>
c0001727:	83 e6 f8             	and    esi,0xfffffff8
c000172a:	89 f1                	mov    ecx,esi
c000172c:	89 ce                	mov    esi,ecx
c000172e:	29 cb                	sub    ebx,ecx
c0001730:	83 ce 01             	or     esi,0x1
c0001733:	40                   	inc    eax
c0001734:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001737:	01 cf                	add    edi,ecx
c0001739:	eb c6                	jmp    c0001701 <iALLOc+0x159>
c000173b:	83 cb 01             	or     ebx,0x1
c000173e:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001741:	eb 08                	jmp    c000174b <iALLOc+0x1a3>
c0001743:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000174b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000174f:	83 c4 2c             	add    esp,0x2c
c0001752:	5b                   	pop    ebx
c0001753:	5e                   	pop    esi
c0001754:	5f                   	pop    edi
c0001755:	5d                   	pop    ebp
c0001756:	c3                   	ret    

c0001757 <dlrealloc>:
c0001757:	55                   	push   ebp
c0001758:	57                   	push   edi
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	83 ec 1c             	sub    esp,0x1c
c000175e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001762:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001766:	85 db                	test   ebx,ebx
c0001768:	75 10                	jne    c000177a <dlrealloc+0x23>
c000176a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000176e:	83 c4 1c             	add    esp,0x1c
c0001771:	5b                   	pop    ebx
c0001772:	5e                   	pop    esi
c0001773:	5f                   	pop    edi
c0001774:	5d                   	pop    ebp
c0001775:	e9 a0 fa ff ff       	jmp    c000121a <dlmalloc>
c000177a:	83 f8 df             	cmp    eax,0xffffffdf
c000177d:	0f 87 a5 01 00 00    	ja     c0001928 <dlrealloc+0x1d1>
c0001783:	83 c0 0b             	add    eax,0xb
c0001786:	bd 10 00 00 00       	mov    ebp,0x10
c000178b:	83 f8 0f             	cmp    eax,0xf
c000178e:	76 05                	jbe    c0001795 <dlrealloc+0x3e>
c0001790:	83 e0 f8             	and    eax,0xfffffff8
c0001793:	89 c5                	mov    ebp,eax
c0001795:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001798:	89 c6                	mov    esi,eax
c000179a:	83 e6 fc             	and    esi,0xfffffffc
c000179d:	a8 02                	test   al,0x2
c000179f:	0f 85 4e 01 00 00    	jne    c00018f3 <dlrealloc+0x19c>
c00017a5:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017a8:	39 f5                	cmp    ebp,esi
c00017aa:	0f 86 04 01 00 00    	jbe    c00018b4 <dlrealloc+0x15d>
c00017b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00017b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00017b6:	39 15 2c 71 02 c0    	cmp    DWORD PTR ds:0xc002712c,edx
c00017bc:	75 33                	jne    c00017f1 <dlrealloc+0x9a>
c00017be:	83 e1 fc             	and    ecx,0xfffffffc
c00017c1:	01 f1                	add    ecx,esi
c00017c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00017ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00017ce:	77 49                	ja     c0001819 <dlrealloc+0xc2>
c00017d0:	01 ef                	add    edi,ebp
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 e8                	or     eax,ebp
c00017d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00017da:	89 3d 2c 71 02 c0    	mov    DWORD PTR ds:0xc002712c,edi
c00017e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017e4:	29 e8                	sub    eax,ebp
c00017e6:	83 c8 01             	or     eax,0x1
c00017e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00017ec:	e9 39 01 00 00       	jmp    c000192a <dlrealloc+0x1d3>
c00017f1:	89 c8                	mov    eax,ecx
c00017f3:	83 e0 fe             	and    eax,0xfffffffe
c00017f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00017fb:	75 1c                	jne    c0001819 <dlrealloc+0xc2>
c00017fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001800:	01 f1                	add    ecx,esi
c0001802:	39 cd                	cmp    ebp,ecx
c0001804:	77 13                	ja     c0001819 <dlrealloc+0xc2>
c0001806:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001809:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000180c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000180f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001812:	89 ce                	mov    esi,ecx
c0001814:	e9 9b 00 00 00       	jmp    c00018b4 <dlrealloc+0x15d>
c0001819:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000181d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001820:	83 ec 0c             	sub    esp,0xc
c0001823:	50                   	push   eax
c0001824:	e8 f1 f9 ff ff       	call   c000121a <dlmalloc>
c0001829:	83 c4 10             	add    esp,0x10
c000182c:	85 c0                	test   eax,eax
c000182e:	0f 84 f4 00 00 00    	je     c0001928 <dlrealloc+0x1d1>
c0001834:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001837:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000183b:	39 ca                	cmp    edx,ecx
c000183d:	75 0a                	jne    c0001849 <dlrealloc+0xf2>
c000183f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001842:	83 e0 fc             	and    eax,0xfffffffc
c0001845:	01 c6                	add    esi,eax
c0001847:	eb 6b                	jmp    c00018b4 <dlrealloc+0x15d>
c0001849:	8d 4e fc             	lea    ecx,[esi-0x4]
c000184c:	83 f9 27             	cmp    ecx,0x27
c000184f:	76 08                	jbe    c0001859 <dlrealloc+0x102>
c0001851:	89 de                	mov    esi,ebx
c0001853:	89 c7                	mov    edi,eax
c0001855:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001857:	eb 43                	jmp    c000189c <dlrealloc+0x145>
c0001859:	8b 13                	mov    edx,DWORD PTR [ebx]
c000185b:	83 f9 13             	cmp    ecx,0x13
c000185e:	89 10                	mov    DWORD PTR [eax],edx
c0001860:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001863:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001866:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001869:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000186c:	76 2e                	jbe    c000189c <dlrealloc+0x145>
c000186e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001871:	83 f9 1b             	cmp    ecx,0x1b
c0001874:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001877:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000187a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000187d:	76 1d                	jbe    c000189c <dlrealloc+0x145>
c000187f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001882:	83 f9 23             	cmp    ecx,0x23
c0001885:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001888:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000188b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000188e:	76 0c                	jbe    c000189c <dlrealloc+0x145>
c0001890:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001893:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001896:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001899:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000189c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018a0:	83 ec 0c             	sub    esp,0xc
c00018a3:	53                   	push   ebx
c00018a4:	e8 aa f4 ff ff       	call   c0000d53 <dlfree>
c00018a9:	83 c4 10             	add    esp,0x10
c00018ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018b0:	89 c3                	mov    ebx,eax
c00018b2:	eb 76                	jmp    c000192a <dlrealloc+0x1d3>
c00018b4:	89 f2                	mov    edx,esi
c00018b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018b9:	29 ea                	sub    edx,ebp
c00018bb:	83 e1 01             	and    ecx,0x1
c00018be:	8d 04 37             	lea    eax,[edi+esi*1]
c00018c1:	83 fa 0f             	cmp    edx,0xf
c00018c4:	77 0b                	ja     c00018d1 <dlrealloc+0x17a>
c00018c6:	09 f1                	or     ecx,esi
c00018c8:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018cf:	eb 59                	jmp    c000192a <dlrealloc+0x1d3>
c00018d1:	01 ef                	add    edi,ebp
c00018d3:	83 ec 0c             	sub    esp,0xc
c00018d6:	09 cd                	or     ebp,ecx
c00018d8:	83 ca 01             	or     edx,0x1
c00018db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00018de:	83 c7 08             	add    edi,0x8
c00018e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00018e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018e8:	57                   	push   edi
c00018e9:	e8 65 f4 ff ff       	call   c0000d53 <dlfree>
c00018ee:	83 c4 10             	add    esp,0x10
c00018f1:	eb 37                	jmp    c000192a <dlrealloc+0x1d3>
c00018f3:	8d 45 04             	lea    eax,[ebp+0x4]
c00018f6:	39 f0                	cmp    eax,esi
c00018f8:	76 30                	jbe    c000192a <dlrealloc+0x1d3>
c00018fa:	83 ec 0c             	sub    esp,0xc
c00018fd:	83 ed 07             	sub    ebp,0x7
c0001900:	55                   	push   ebp
c0001901:	e8 14 f9 ff ff       	call   c000121a <dlmalloc>
c0001906:	83 c4 10             	add    esp,0x10
c0001909:	89 c5                	mov    ebp,eax
c000190b:	85 c0                	test   eax,eax
c000190d:	74 19                	je     c0001928 <dlrealloc+0x1d1>
c000190f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001912:	89 c7                	mov    edi,eax
c0001914:	89 de                	mov    esi,ebx
c0001916:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001918:	83 ec 0c             	sub    esp,0xc
c000191b:	53                   	push   ebx
c000191c:	89 eb                	mov    ebx,ebp
c000191e:	e8 30 f4 ff ff       	call   c0000d53 <dlfree>
c0001923:	83 c4 10             	add    esp,0x10
c0001926:	eb 02                	jmp    c000192a <dlrealloc+0x1d3>
c0001928:	31 db                	xor    ebx,ebx
c000192a:	83 c4 1c             	add    esp,0x1c
c000192d:	89 d8                	mov    eax,ebx
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlmemalign>:
c0001934:	55                   	push   ebp
c0001935:	57                   	push   edi
c0001936:	56                   	push   esi
c0001937:	53                   	push   ebx
c0001938:	83 ec 0c             	sub    esp,0xc
c000193b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000193f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001943:	83 fa 08             	cmp    edx,0x8
c0001946:	77 10                	ja     c0001958 <dlmemalign+0x24>
c0001948:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000194c:	83 c4 0c             	add    esp,0xc
c000194f:	5b                   	pop    ebx
c0001950:	5e                   	pop    esi
c0001951:	5f                   	pop    edi
c0001952:	5d                   	pop    ebp
c0001953:	e9 c2 f8 ff ff       	jmp    c000121a <dlmalloc>
c0001958:	bf 10 00 00 00       	mov    edi,0x10
c000195d:	83 fa 0f             	cmp    edx,0xf
c0001960:	76 13                	jbe    c0001975 <dlmemalign+0x41>
c0001962:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001965:	85 d1                	test   ecx,edx
c0001967:	75 04                	jne    c000196d <dlmemalign+0x39>
c0001969:	89 d7                	mov    edi,edx
c000196b:	eb 08                	jmp    c0001975 <dlmemalign+0x41>
c000196d:	39 d7                	cmp    edi,edx
c000196f:	73 04                	jae    c0001975 <dlmemalign+0x41>
c0001971:	01 ff                	add    edi,edi
c0001973:	eb f8                	jmp    c000196d <dlmemalign+0x39>
c0001975:	83 f8 df             	cmp    eax,0xffffffdf
c0001978:	76 07                	jbe    c0001981 <dlmemalign+0x4d>
c000197a:	31 c0                	xor    eax,eax
c000197c:	e9 ce 00 00 00       	jmp    c0001a4f <dlmemalign+0x11b>
c0001981:	83 c0 0b             	add    eax,0xb
c0001984:	bd 10 00 00 00       	mov    ebp,0x10
c0001989:	83 f8 0f             	cmp    eax,0xf
c000198c:	76 05                	jbe    c0001993 <dlmemalign+0x5f>
c000198e:	83 e0 f8             	and    eax,0xfffffff8
c0001991:	89 c5                	mov    ebp,eax
c0001993:	83 ec 0c             	sub    esp,0xc
c0001996:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000199a:	50                   	push   eax
c000199b:	e8 7a f8 ff ff       	call   c000121a <dlmalloc>
c00019a0:	83 c4 10             	add    esp,0x10
c00019a3:	89 c1                	mov    ecx,eax
c00019a5:	85 c0                	test   eax,eax
c00019a7:	74 d1                	je     c000197a <dlmemalign+0x46>
c00019a9:	31 d2                	xor    edx,edx
c00019ab:	8d 70 f8             	lea    esi,[eax-0x8]
c00019ae:	f7 f7                	div    edi
c00019b0:	85 d2                	test   edx,edx
c00019b2:	74 62                	je     c0001a16 <dlmemalign+0xe2>
c00019b4:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019b8:	89 f8                	mov    eax,edi
c00019ba:	f7 d8                	neg    eax
c00019bc:	21 c3                	and    ebx,eax
c00019be:	83 eb 08             	sub    ebx,0x8
c00019c1:	89 d8                	mov    eax,ebx
c00019c3:	29 f0                	sub    eax,esi
c00019c5:	83 f8 0f             	cmp    eax,0xf
c00019c8:	77 02                	ja     c00019cc <dlmemalign+0x98>
c00019ca:	01 fb                	add    ebx,edi
c00019cc:	89 d8                	mov    eax,ebx
c00019ce:	29 f0                	sub    eax,esi
c00019d0:	89 c6                	mov    esi,eax
c00019d2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00019d5:	89 c2                	mov    edx,eax
c00019d7:	83 e2 fc             	and    edx,0xfffffffc
c00019da:	29 f2                	sub    edx,esi
c00019dc:	a8 02                	test   al,0x2
c00019de:	74 10                	je     c00019f0 <dlmemalign+0xbc>
c00019e0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00019e3:	83 ca 02             	or     edx,0x2
c00019e6:	8d 43 08             	lea    eax,[ebx+0x8]
c00019e9:	89 33                	mov    DWORD PTR [ebx],esi
c00019eb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00019ee:	eb 5f                	jmp    c0001a4f <dlmemalign+0x11b>
c00019f0:	83 ec 0c             	sub    esp,0xc
c00019f3:	89 d0                	mov    eax,edx
c00019f5:	83 c8 01             	or     eax,0x1
c00019f8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00019fb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a00:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a03:	83 e0 01             	and    eax,0x1
c0001a06:	09 f0                	or     eax,esi
c0001a08:	89 de                	mov    esi,ebx
c0001a0a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a0d:	51                   	push   ecx
c0001a0e:	e8 40 f3 ff ff       	call   c0000d53 <dlfree>
c0001a13:	83 c4 10             	add    esp,0x10
c0001a16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a19:	a8 02                	test   al,0x2
c0001a1b:	75 2f                	jne    c0001a4c <dlmemalign+0x118>
c0001a1d:	83 e0 fc             	and    eax,0xfffffffc
c0001a20:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a23:	39 c2                	cmp    edx,eax
c0001a25:	73 25                	jae    c0001a4c <dlmemalign+0x118>
c0001a27:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a2a:	83 ec 0c             	sub    esp,0xc
c0001a2d:	29 e8                	sub    eax,ebp
c0001a2f:	83 c2 08             	add    edx,0x8
c0001a32:	83 c8 01             	or     eax,0x1
c0001a35:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001a38:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a3b:	83 e0 01             	and    eax,0x1
c0001a3e:	09 c5                	or     ebp,eax
c0001a40:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a43:	52                   	push   edx
c0001a44:	e8 0a f3 ff ff       	call   c0000d53 <dlfree>
c0001a49:	83 c4 10             	add    esp,0x10
c0001a4c:	8d 46 08             	lea    eax,[esi+0x8]
c0001a4f:	83 c4 0c             	add    esp,0xc
c0001a52:	5b                   	pop    ebx
c0001a53:	5e                   	pop    esi
c0001a54:	5f                   	pop    edi
c0001a55:	5d                   	pop    ebp
c0001a56:	c3                   	ret    

c0001a57 <dlcalloc>:
c0001a57:	53                   	push   ebx
c0001a58:	83 ec 14             	sub    esp,0x14
c0001a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a5f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a64:	50                   	push   eax
c0001a65:	e8 b0 f7 ff ff       	call   c000121a <dlmalloc>
c0001a6a:	83 c4 10             	add    esp,0x10
c0001a6d:	89 c3                	mov    ebx,eax
c0001a6f:	85 c0                	test   eax,eax
c0001a71:	74 6e                	je     c0001ae1 <dlcalloc+0x8a>
c0001a73:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001a76:	a8 02                	test   al,0x2
c0001a78:	75 67                	jne    c0001ae1 <dlcalloc+0x8a>
c0001a7a:	83 e0 fc             	and    eax,0xfffffffc
c0001a7d:	83 e8 04             	sub    eax,0x4
c0001a80:	83 f8 27             	cmp    eax,0x27
c0001a83:	76 0f                	jbe    c0001a94 <dlcalloc+0x3d>
c0001a85:	52                   	push   edx
c0001a86:	50                   	push   eax
c0001a87:	6a 00                	push   0x0
c0001a89:	53                   	push   ebx
c0001a8a:	e8 61 ea ff ff       	call   c00004f0 <memset>
c0001a8f:	83 c4 10             	add    esp,0x10
c0001a92:	eb 4d                	jmp    c0001ae1 <dlcalloc+0x8a>
c0001a94:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001a9a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001aa1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001aa8:	83 f8 13             	cmp    eax,0x13
c0001aab:	76 34                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001aad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ab4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001abb:	83 f8 1b             	cmp    eax,0x1b
c0001abe:	76 21                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ac0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001ac7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001ace:	83 f8 23             	cmp    eax,0x23
c0001ad1:	76 0e                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ad3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001ada:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001ae1:	89 d8                	mov    eax,ebx
c0001ae3:	83 c4 08             	add    esp,0x8
c0001ae6:	5b                   	pop    ebx
c0001ae7:	c3                   	ret    

c0001ae8 <dlcfree>:
c0001ae8:	e9 66 f2 ff ff       	jmp    c0000d53 <dlfree>

c0001aed <dlindependent_calloc>:
c0001aed:	83 ec 28             	sub    esp,0x28
c0001af0:	b9 03 00 00 00       	mov    ecx,0x3
c0001af5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001af9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001afd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b09:	e8 9a fa ff ff       	call   c00015a8 <iALLOc>
c0001b0e:	83 c4 2c             	add    esp,0x2c
c0001b11:	c3                   	ret    

c0001b12 <dlindependent_comalloc>:
c0001b12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b1a:	31 c9                	xor    ecx,ecx
c0001b1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b24:	e9 7f fa ff ff       	jmp    c00015a8 <iALLOc>

c0001b29 <dlvalloc>:
c0001b29:	83 ec 0c             	sub    esp,0xc
c0001b2c:	83 3d 00 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027100,0x0
c0001b33:	75 0a                	jne    c0001b3f <dlvalloc+0x16>
c0001b35:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001b3a:	e8 2d f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b3f:	50                   	push   eax
c0001b40:	50                   	push   eax
c0001b41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b45:	ff 35 5c 74 02 c0    	push   DWORD PTR ds:0xc002745c
c0001b4b:	e8 e4 fd ff ff       	call   c0001934 <dlmemalign>
c0001b50:	83 c4 1c             	add    esp,0x1c
c0001b53:	c3                   	ret    

c0001b54 <dlpvalloc>:
c0001b54:	83 ec 0c             	sub    esp,0xc
c0001b57:	83 3d 00 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027100,0x0
c0001b5e:	75 0a                	jne    c0001b6a <dlpvalloc+0x16>
c0001b60:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001b65:	e8 02 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b6a:	a1 5c 74 02 c0       	mov    eax,ds:0xc002745c
c0001b6f:	89 c1                	mov    ecx,eax
c0001b71:	52                   	push   edx
c0001b72:	f7 d9                	neg    ecx
c0001b74:	52                   	push   edx
c0001b75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001b79:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001b7d:	21 ca                	and    edx,ecx
c0001b7f:	52                   	push   edx
c0001b80:	50                   	push   eax
c0001b81:	e8 ae fd ff ff       	call   c0001934 <dlmemalign>
c0001b86:	83 c4 1c             	add    esp,0x1c
c0001b89:	c3                   	ret    

c0001b8a <dlmalloc_trim>:
c0001b8a:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001b8f:	e8 d8 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b94:	31 c0                	xor    eax,eax
c0001b96:	c3                   	ret    

c0001b97 <dlmalloc_usable_size>:
c0001b97:	53                   	push   ebx
c0001b98:	31 c0                	xor    eax,eax
c0001b9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001b9e:	85 c9                	test   ecx,ecx
c0001ba0:	74 24                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001ba2:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001ba5:	f6 c2 02             	test   dl,0x2
c0001ba8:	74 08                	je     c0001bb2 <dlmalloc_usable_size+0x1b>
c0001baa:	83 e2 fc             	and    edx,0xfffffffc
c0001bad:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bb0:	eb 14                	jmp    c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bb2:	89 d3                	mov    ebx,edx
c0001bb4:	31 c0                	xor    eax,eax
c0001bb6:	83 e3 fe             	and    ebx,0xfffffffe
c0001bb9:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bbe:	74 06                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bc0:	83 e2 fc             	and    edx,0xfffffffc
c0001bc3:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bc6:	5b                   	pop    ebx
c0001bc7:	c3                   	ret    

c0001bc8 <dlmallinfo>:
c0001bc8:	55                   	push   ebp
c0001bc9:	57                   	push   edi
c0001bca:	56                   	push   esi
c0001bcb:	53                   	push   ebx
c0001bcc:	83 ec 08             	sub    esp,0x8
c0001bcf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001bd3:	83 3d 2c 71 02 c0 00 	cmp    DWORD PTR ds:0xc002712c,0x0
c0001bda:	75 0a                	jne    c0001be6 <dlmallinfo+0x1e>
c0001bdc:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001be1:	e8 86 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001be6:	a1 2c 71 02 c0       	mov    eax,ds:0xc002712c
c0001beb:	31 ed                	xor    ebp,ebp
c0001bed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001bf0:	31 c9                	xor    ecx,ecx
c0001bf2:	83 e0 fc             	and    eax,0xfffffffc
c0001bf5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bf9:	31 c0                	xor    eax,eax
c0001bfb:	8b 14 85 04 71 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8efc]
c0001c02:	85 d2                	test   edx,edx
c0001c04:	74 0e                	je     c0001c14 <dlmallinfo+0x4c>
c0001c06:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c09:	45                   	inc    ebp
c0001c0a:	83 e6 fc             	and    esi,0xfffffffc
c0001c0d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c10:	01 f1                	add    ecx,esi
c0001c12:	eb ee                	jmp    c0001c02 <dlmallinfo+0x3a>
c0001c14:	40                   	inc    eax
c0001c15:	83 f8 0a             	cmp    eax,0xa
c0001c18:	75 e1                	jne    c0001bfb <dlmallinfo+0x33>
c0001c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c1e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c25:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c28:	b8 34 71 02 c0       	mov    eax,0xc0027134
c0001c2d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c30:	39 f0                	cmp    eax,esi
c0001c32:	74 10                	je     c0001c44 <dlmallinfo+0x7c>
c0001c34:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c37:	ff 04 24             	inc    DWORD PTR [esp]
c0001c3a:	83 e7 fc             	and    edi,0xfffffffc
c0001c3d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c40:	01 fa                	add    edx,edi
c0001c42:	eb ec                	jmp    c0001c30 <dlmallinfo+0x68>
c0001c44:	83 c0 08             	add    eax,0x8
c0001c47:	3d 2c 74 02 c0       	cmp    eax,0xc002742c
c0001c4c:	75 df                	jne    c0001c2d <dlmallinfo+0x65>
c0001c4e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c51:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c54:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c57:	a1 68 74 02 c0       	mov    eax,ds:0xc0027468
c0001c5c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c5f:	89 03                	mov    DWORD PTR [ebx],eax
c0001c61:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001c64:	8b 35 50 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027450
c0001c6a:	29 d0                	sub    eax,edx
c0001c6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c6f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001c72:	8b 35 64 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027464
c0001c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c7c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001c7f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001c82:	8b 35 74 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027474
c0001c88:	89 d8                	mov    eax,ebx
c0001c8a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001c8d:	83 c4 08             	add    esp,0x8
c0001c90:	5b                   	pop    ebx
c0001c91:	5e                   	pop    esi
c0001c92:	5f                   	pop    edi
c0001c93:	5d                   	pop    ebp
c0001c94:	c2 04 00             	ret    0x4

c0001c97 <dlmalloc_stats>:
c0001c97:	83 ec 30             	sub    esp,0x30
c0001c9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001c9e:	50                   	push   eax
c0001c9f:	e8 24 ff ff ff       	call   c0001bc8 <dlmallinfo>
c0001ca4:	83 c4 30             	add    esp,0x30
c0001ca7:	c3                   	ret    

c0001ca8 <dlmallopt>:
c0001ca8:	56                   	push   esi
c0001ca9:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001cae:	53                   	push   ebx
c0001caf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001cb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001cb7:	e8 b0 ef ff ff       	call   c0000c6c <malloc_consolidate>
c0001cbc:	8d 46 04             	lea    eax,[esi+0x4]
c0001cbf:	83 f8 05             	cmp    eax,0x5
c0001cc2:	77 5d                	ja     c0001d21 <dlmallopt+0x79>
c0001cc4:	ff 24 85 24 0f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf0dc]
c0001ccb:	83 fb 50             	cmp    ebx,0x50
c0001cce:	77 51                	ja     c0001d21 <dlmallopt+0x79>
c0001cd0:	ba 08 00 00 00       	mov    edx,0x8
c0001cd5:	85 db                	test   ebx,ebx
c0001cd7:	74 12                	je     c0001ceb <dlmallopt+0x43>
c0001cd9:	83 c3 0b             	add    ebx,0xb
c0001cdc:	ba 10 00 00 00       	mov    edx,0x10
c0001ce1:	83 fb 0f             	cmp    ebx,0xf
c0001ce4:	76 05                	jbe    c0001ceb <dlmallopt+0x43>
c0001ce6:	89 da                	mov    edx,ebx
c0001ce8:	83 e2 f8             	and    edx,0xfffffff8
c0001ceb:	a1 00 71 02 c0       	mov    eax,ds:0xc0027100
c0001cf0:	83 e0 03             	and    eax,0x3
c0001cf3:	09 d0                	or     eax,edx
c0001cf5:	a3 00 71 02 c0       	mov    ds:0xc0027100,eax
c0001cfa:	eb 27                	jmp    c0001d23 <dlmallopt+0x7b>
c0001cfc:	89 1d 44 74 02 c0    	mov    DWORD PTR ds:0xc0027444,ebx
c0001d02:	eb 16                	jmp    c0001d1a <dlmallopt+0x72>
c0001d04:	89 1d 48 74 02 c0    	mov    DWORD PTR ds:0xc0027448,ebx
c0001d0a:	eb 0e                	jmp    c0001d1a <dlmallopt+0x72>
c0001d0c:	89 1d 4c 74 02 c0    	mov    DWORD PTR ds:0xc002744c,ebx
c0001d12:	eb 06                	jmp    c0001d1a <dlmallopt+0x72>
c0001d14:	89 1d 54 74 02 c0    	mov    DWORD PTR ds:0xc0027454,ebx
c0001d1a:	be 01 00 00 00       	mov    esi,0x1
c0001d1f:	eb 02                	jmp    c0001d23 <dlmallopt+0x7b>
c0001d21:	31 f6                	xor    esi,esi
c0001d23:	89 f0                	mov    eax,esi
c0001d25:	5b                   	pop    ebx
c0001d26:	5e                   	pop    esi
c0001d27:	c3                   	ret    

c0001d28 <isblank>:
c0001d28:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d2d:	74 09                	je     c0001d38 <isblank+0x10>
c0001d2f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d34:	75 0a                	jne    c0001d40 <isblank+0x18>
c0001d36:	66 90                	xchg   ax,ax
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <iscntrl>:
c0001d48:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d4d:	7e 09                	jle    c0001d58 <iscntrl+0x10>
c0001d4f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d54:	75 0a                	jne    c0001d60 <iscntrl+0x18>
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 01 00 00 00       	mov    eax,0x1
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax
c0001d60:	b8 00 00 00 00       	mov    eax,0x0
c0001d65:	c3                   	ret    
c0001d66:	66 90                	xchg   ax,ax

c0001d68 <isdigit>:
c0001d68:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d6d:	7e 0d                	jle    c0001d7c <isdigit+0x14>
c0001d6f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001d74:	7f 06                	jg     c0001d7c <isdigit+0x14>
c0001d76:	b8 01 00 00 00       	mov    eax,0x1
c0001d7b:	c3                   	ret    
c0001d7c:	b8 00 00 00 00       	mov    eax,0x0
c0001d81:	c3                   	ret    
c0001d82:	66 90                	xchg   ax,ax

c0001d84 <islower>:
c0001d84:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d89:	7e 0d                	jle    c0001d98 <islower+0x14>
c0001d8b:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001d90:	7f 06                	jg     c0001d98 <islower+0x14>
c0001d92:	b8 01 00 00 00       	mov    eax,0x1
c0001d97:	c3                   	ret    
c0001d98:	b8 00 00 00 00       	mov    eax,0x0
c0001d9d:	c3                   	ret    
c0001d9e:	66 90                	xchg   ax,ax

c0001da0 <isspace>:
c0001da0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001da5:	7c 19                	jl     c0001dc0 <isspace+0x20>
c0001da7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001dac:	7e 0a                	jle    c0001db8 <isspace+0x18>
c0001dae:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001db3:	75 0b                	jne    c0001dc0 <isspace+0x20>
c0001db5:	8d 76 00             	lea    esi,[esi+0x0]
c0001db8:	b8 01 00 00 00       	mov    eax,0x1
c0001dbd:	c3                   	ret    
c0001dbe:	66 90                	xchg   ax,ax
c0001dc0:	b8 00 00 00 00       	mov    eax,0x0
c0001dc5:	c3                   	ret    
c0001dc6:	66 90                	xchg   ax,ax

c0001dc8 <isupper>:
c0001dc8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dcd:	7e 0d                	jle    c0001ddc <isupper+0x14>
c0001dcf:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001dd4:	7f 06                	jg     c0001ddc <isupper+0x14>
c0001dd6:	b8 01 00 00 00       	mov    eax,0x1
c0001ddb:	c3                   	ret    
c0001ddc:	b8 00 00 00 00       	mov    eax,0x0
c0001de1:	c3                   	ret    
c0001de2:	66 90                	xchg   ax,ax

c0001de4 <isalpha>:
c0001de4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001de8:	e8 db ff ff ff       	call   c0001dc8 <isupper>
c0001ded:	83 c4 04             	add    esp,0x4
c0001df0:	85 c0                	test   eax,eax
c0001df2:	75 10                	jne    c0001e04 <isalpha+0x20>
c0001df4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001df8:	e8 87 ff ff ff       	call   c0001d84 <islower>
c0001dfd:	83 c4 04             	add    esp,0x4
c0001e00:	85 c0                	test   eax,eax
c0001e02:	74 08                	je     c0001e0c <isalpha+0x28>
c0001e04:	b8 01 00 00 00       	mov    eax,0x1
c0001e09:	c3                   	ret    
c0001e0a:	66 90                	xchg   ax,ax
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalnum>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 c7 ff ff ff       	call   c0001de4 <isalpha>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalnum+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 3b ff ff ff       	call   c0001d68 <isdigit>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalnum+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <ispunct>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalnum>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 28                	jne    c0001e7c <ispunct+0x38>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 43 ff ff ff       	call   c0001da0 <isspace>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	75 18                	jne    c0001e7c <ispunct+0x38>
c0001e64:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e68:	e8 db fe ff ff       	call   c0001d48 <iscntrl>
c0001e6d:	83 c4 04             	add    esp,0x4
c0001e70:	85 c0                	test   eax,eax
c0001e72:	75 08                	jne    c0001e7c <ispunct+0x38>
c0001e74:	b8 01 00 00 00       	mov    eax,0x1
c0001e79:	c3                   	ret    
c0001e7a:	66 90                	xchg   ax,ax
c0001e7c:	b8 00 00 00 00       	mov    eax,0x0
c0001e81:	c3                   	ret    
c0001e82:	66 90                	xchg   ax,ax

c0001e84 <isgraph>:
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 87 ff ff ff       	call   c0001e14 <isalnum>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 10                	jne    c0001ea4 <isgraph+0x20>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 a7 ff ff ff       	call   c0001e44 <ispunct>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	74 08                	je     c0001eac <isgraph+0x28>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isprint>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 c7 ff ff ff       	call   c0001e84 <isgraph>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 08                	jne    c0001ecc <isprint+0x18>
c0001ec4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ec9:	75 09                	jne    c0001ed4 <isprint+0x20>
c0001ecb:	90                   	nop
c0001ecc:	b8 01 00 00 00       	mov    eax,0x1
c0001ed1:	c3                   	ret    
c0001ed2:	66 90                	xchg   ax,ax
c0001ed4:	b8 00 00 00 00       	mov    eax,0x0
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax

c0001edc <isxdigit>:
c0001edc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee0:	e8 83 fe ff ff       	call   c0001d68 <isdigit>
c0001ee5:	83 c4 04             	add    esp,0x4
c0001ee8:	85 c0                	test   eax,eax
c0001eea:	75 20                	jne    c0001f0c <isxdigit+0x30>
c0001eec:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ef1:	7e 09                	jle    c0001efc <isxdigit+0x20>
c0001ef3:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ef8:	7e 12                	jle    c0001f0c <isxdigit+0x30>
c0001efa:	66 90                	xchg   ax,ax
c0001efc:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f01:	7e 11                	jle    c0001f14 <isxdigit+0x38>
c0001f03:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f08:	7f 0a                	jg     c0001f14 <isxdigit+0x38>
c0001f0a:	66 90                	xchg   ax,ax
c0001f0c:	b8 01 00 00 00       	mov    eax,0x1
c0001f11:	c3                   	ret    
c0001f12:	66 90                	xchg   ax,ax
c0001f14:	b8 00 00 00 00       	mov    eax,0x0
c0001f19:	c3                   	ret    
c0001f1a:	66 90                	xchg   ax,ax

c0001f1c <LWIP_PLATFORM_HTONS>:
c0001f1c:	83 ec 04             	sub    esp,0x4
c0001f1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f2b:	c1 e8 08             	shr    eax,0x8
c0001f2e:	89 c2                	mov    edx,eax
c0001f30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f34:	c1 e0 08             	shl    eax,0x8
c0001f37:	09 d0                	or     eax,edx
c0001f39:	83 c4 04             	add    esp,0x4
c0001f3c:	c3                   	ret    
c0001f3d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f40 <LWIP_PLATFORM_HTONL>:
c0001f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f44:	c1 e8 18             	shr    eax,0x18
c0001f47:	89 c2                	mov    edx,eax
c0001f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f4d:	c1 e8 08             	shr    eax,0x8
c0001f50:	25 00 ff 00 00       	and    eax,0xff00
c0001f55:	09 c2                	or     edx,eax
c0001f57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f5b:	c1 e0 08             	shl    eax,0x8
c0001f5e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f63:	09 c2                	or     edx,eax
c0001f65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f69:	c1 e0 18             	shl    eax,0x18
c0001f6c:	09 d0                	or     eax,edx
c0001f6e:	c3                   	ret    

c0001f6f <disk_status>:
c0001f6f:	31 c0                	xor    eax,eax
c0001f71:	c3                   	ret    

c0001f72 <disk_initialize>:
c0001f72:	31 c0                	xor    eax,eax
c0001f74:	c3                   	ret    

c0001f75 <disk_read>:
c0001f75:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f7a:	0f b6 04 85 40 d8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd27c0]
c0001f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f86:	e9 c9 86 01 00       	jmp    c001a654 <fatWrapperReadDisk>

c0001f8b <disk_write>:
c0001f8b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f90:	0f b6 04 85 40 d8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd27c0]
c0001f98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f9c:	e9 f3 86 01 00       	jmp    c001a694 <fatWrapperWriteDisk>

c0001fa1 <disk_ioctl>:
c0001fa1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001faa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faf:	0f b6 04 85 40 d8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd27c0]
c0001fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fbb:	e9 14 87 01 00       	jmp    c001a6d4 <fatWrapperIoctl>

c0001fc0 <ld_word>:
c0001fc0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fc4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fc7:	c1 e2 08             	shl    edx,0x8
c0001fca:	09 d0                	or     eax,edx
c0001fcc:	c3                   	ret    

c0001fcd <ld_dword>:
c0001fcd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001fd1:	89 d1                	mov    ecx,edx
c0001fd3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fd7:	c1 e1 08             	shl    ecx,0x8
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	09 ca                	or     edx,ecx
c0001fdf:	c1 e2 08             	shl    edx,0x8
c0001fe2:	09 d0                	or     eax,edx
c0001fe4:	c3                   	ret    

c0001fe5 <st_word>:
c0001fe5:	66 89 10             	mov    WORD PTR [eax],dx
c0001fe8:	c3                   	ret    

c0001fe9 <st_dword>:
c0001fe9:	89 10                	mov    DWORD PTR [eax],edx
c0001feb:	c3                   	ret    

c0001fec <mem_cpy>:
c0001fec:	85 c9                	test   ecx,ecx
c0001fee:	74 10                	je     c0002000 <mem_cpy+0x14>
c0001ff0:	57                   	push   edi
c0001ff1:	01 c1                	add    ecx,eax
c0001ff3:	56                   	push   esi
c0001ff4:	89 c7                	mov    edi,eax
c0001ff6:	89 d6                	mov    esi,edx
c0001ff8:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ff9:	39 f9                	cmp    ecx,edi
c0001ffb:	75 fb                	jne    c0001ff8 <mem_cpy+0xc>
c0001ffd:	5e                   	pop    esi
c0001ffe:	5f                   	pop    edi
c0001fff:	c3                   	ret    
c0002000:	c3                   	ret    

c0002001 <mem_set>:
c0002001:	01 c1                	add    ecx,eax
c0002003:	40                   	inc    eax
c0002004:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0002007:	39 c8                	cmp    eax,ecx
c0002009:	75 f8                	jne    c0002003 <mem_set+0x2>
c000200b:	c3                   	ret    

c000200c <mem_cmp>:
c000200c:	57                   	push   edi
c000200d:	56                   	push   esi
c000200e:	89 c6                	mov    esi,eax
c0002010:	53                   	push   ebx
c0002011:	46                   	inc    esi
c0002012:	42                   	inc    edx
c0002013:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0002017:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000201b:	29 fb                	sub    ebx,edi
c000201d:	89 cf                	mov    edi,ecx
c000201f:	29 f7                	sub    edi,esi
c0002021:	01 c7                	add    edi,eax
c0002023:	74 04                	je     c0002029 <mem_cmp+0x1d>
c0002025:	85 db                	test   ebx,ebx
c0002027:	74 e8                	je     c0002011 <mem_cmp+0x5>
c0002029:	89 d8                	mov    eax,ebx
c000202b:	5b                   	pop    ebx
c000202c:	5e                   	pop    esi
c000202d:	5f                   	pop    edi
c000202e:	c3                   	ret    

c000202f <chk_chr>:
c000202f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002032:	85 c9                	test   ecx,ecx
c0002034:	74 07                	je     c000203d <chk_chr+0xe>
c0002036:	39 d1                	cmp    ecx,edx
c0002038:	74 03                	je     c000203d <chk_chr+0xe>
c000203a:	40                   	inc    eax
c000203b:	eb f2                	jmp    c000202f <chk_chr>
c000203d:	89 c8                	mov    eax,ecx
c000203f:	c3                   	ret    

c0002040 <dbc_1st>:
c0002040:	31 c0                	xor    eax,eax
c0002042:	c3                   	ret    

c0002043 <dbc_2nd>:
c0002043:	31 c0                	xor    eax,eax
c0002045:	c3                   	ret    

c0002046 <tchar2uni>:
c0002046:	57                   	push   edi
c0002047:	56                   	push   esi
c0002048:	53                   	push   ebx
c0002049:	8b 18                	mov    ebx,DWORD PTR [eax]
c000204b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000204d:	8d 73 01             	lea    esi,[ebx+0x1]
c0002050:	f6 c1 80             	test   cl,0x80
c0002053:	75 0a                	jne    c000205f <tchar2uni+0x19>
c0002055:	0f b6 d1             	movzx  edx,cl
c0002058:	89 f3                	mov    ebx,esi
c000205a:	e9 b2 00 00 00       	jmp    c0002111 <tchar2uni+0xcb>
c000205f:	89 ca                	mov    edx,ecx
c0002061:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002067:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000206d:	89 ca                	mov    edx,ecx
c000206f:	75 0a                	jne    c000207b <tchar2uni+0x35>
c0002071:	83 e2 1f             	and    edx,0x1f
c0002074:	b9 01 00 00 00       	mov    ecx,0x1
c0002079:	eb 37                	jmp    c00020b2 <tchar2uni+0x6c>
c000207b:	81 e2 f0 00 00 00    	and    edx,0xf0
c0002081:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002087:	75 0c                	jne    c0002095 <tchar2uni+0x4f>
c0002089:	89 ca                	mov    edx,ecx
c000208b:	b9 02 00 00 00       	mov    ecx,0x2
c0002090:	83 e2 0f             	and    edx,0xf
c0002093:	eb 1d                	jmp    c00020b2 <tchar2uni+0x6c>
c0002095:	89 cf                	mov    edi,ecx
c0002097:	83 ca ff             	or     edx,0xffffffff
c000209a:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020a0:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020a6:	75 70                	jne    c0002118 <tchar2uni+0xd2>
c00020a8:	89 ca                	mov    edx,ecx
c00020aa:	b9 03 00 00 00       	mov    ecx,0x3
c00020af:	83 e2 07             	and    edx,0x7
c00020b2:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020b6:	46                   	inc    esi
c00020b7:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020ba:	89 cf                	mov    edi,ecx
c00020bc:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020c2:	83 c7 80             	add    edi,0xffffff80
c00020c5:	75 4e                	jne    c0002115 <tchar2uni+0xcf>
c00020c7:	c1 e2 06             	shl    edx,0x6
c00020ca:	83 e1 3f             	and    ecx,0x3f
c00020cd:	09 ca                	or     edx,ecx
c00020cf:	39 de                	cmp    esi,ebx
c00020d1:	75 e3                	jne    c00020b6 <tchar2uni+0x70>
c00020d3:	8d 4a 80             	lea    ecx,[edx-0x80]
c00020d6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c00020dc:	77 37                	ja     c0002115 <tchar2uni+0xcf>
c00020de:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c00020e4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020ea:	76 29                	jbe    c0002115 <tchar2uni+0xcf>
c00020ec:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020f2:	76 1d                	jbe    c0002111 <tchar2uni+0xcb>
c00020f4:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c00020fa:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002100:	c1 e1 06             	shl    ecx,0x6
c0002103:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002109:	09 ca                	or     edx,ecx
c000210b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002111:	89 18                	mov    DWORD PTR [eax],ebx
c0002113:	eb 03                	jmp    c0002118 <tchar2uni+0xd2>
c0002115:	83 ca ff             	or     edx,0xffffffff
c0002118:	5b                   	pop    ebx
c0002119:	89 d0                	mov    eax,edx
c000211b:	5e                   	pop    esi
c000211c:	5f                   	pop    edi
c000211d:	c3                   	ret    

c000211e <put_utf>:
c000211e:	53                   	push   ebx
c000211f:	83 f8 7f             	cmp    eax,0x7f
c0002122:	89 c3                	mov    ebx,eax
c0002124:	b0 00                	mov    al,0x0
c0002126:	77 11                	ja     c0002139 <put_utf+0x1b>
c0002128:	85 c9                	test   ecx,ecx
c000212a:	0f 84 e5 00 00 00    	je     c0002215 <put_utf+0xf7>
c0002130:	88 1a                	mov    BYTE PTR [edx],bl
c0002132:	b0 01                	mov    al,0x1
c0002134:	e9 dc 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002139:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000213f:	77 23                	ja     c0002164 <put_utf+0x46>
c0002141:	83 f9 01             	cmp    ecx,0x1
c0002144:	0f 86 cb 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c000214a:	89 d8                	mov    eax,ebx
c000214c:	83 e3 3f             	and    ebx,0x3f
c000214f:	c1 e8 06             	shr    eax,0x6
c0002152:	83 cb 80             	or     ebx,0xffffff80
c0002155:	83 c8 c0             	or     eax,0xffffffc0
c0002158:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c000215b:	88 02                	mov    BYTE PTR [edx],al
c000215d:	b0 02                	mov    al,0x2
c000215f:	e9 b1 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002164:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c000216a:	77 40                	ja     c00021ac <put_utf+0x8e>
c000216c:	83 f9 02             	cmp    ecx,0x2
c000216f:	0f 86 a0 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002175:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c000217b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002181:	0f 86 8e 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002187:	89 d8                	mov    eax,ebx
c0002189:	c1 e8 0c             	shr    eax,0xc
c000218c:	83 c8 e0             	or     eax,0xffffffe0
c000218f:	88 02                	mov    BYTE PTR [edx],al
c0002191:	89 d8                	mov    eax,ebx
c0002193:	83 e3 3f             	and    ebx,0x3f
c0002196:	c1 e8 06             	shr    eax,0x6
c0002199:	83 cb 80             	or     ebx,0xffffff80
c000219c:	83 e0 3f             	and    eax,0x3f
c000219f:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021a2:	83 c8 80             	or     eax,0xffffff80
c00021a5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021a8:	b0 03                	mov    al,0x3
c00021aa:	eb 69                	jmp    c0002215 <put_utf+0xf7>
c00021ac:	83 f9 03             	cmp    ecx,0x3
c00021af:	76 64                	jbe    c0002215 <put_utf+0xf7>
c00021b1:	89 d9                	mov    ecx,ebx
c00021b3:	0f b7 c3             	movzx  eax,bx
c00021b6:	66 31 c9             	xor    cx,cx
c00021b9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021bf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021c5:	c1 e9 06             	shr    ecx,0x6
c00021c8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c00021ce:	77 43                	ja     c0002213 <put_utf+0xf5>
c00021d0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021d6:	77 3b                	ja     c0002213 <put_utf+0xf5>
c00021d8:	09 cb                	or     ebx,ecx
c00021da:	81 c3 00 00 01 00    	add    ebx,0x10000
c00021e0:	89 d8                	mov    eax,ebx
c00021e2:	c1 e8 12             	shr    eax,0x12
c00021e5:	83 c8 f0             	or     eax,0xfffffff0
c00021e8:	88 02                	mov    BYTE PTR [edx],al
c00021ea:	89 d8                	mov    eax,ebx
c00021ec:	c1 e8 0c             	shr    eax,0xc
c00021ef:	83 e0 3f             	and    eax,0x3f
c00021f2:	83 c8 80             	or     eax,0xffffff80
c00021f5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021f8:	89 d8                	mov    eax,ebx
c00021fa:	83 e3 3f             	and    ebx,0x3f
c00021fd:	c1 e8 06             	shr    eax,0x6
c0002200:	83 cb 80             	or     ebx,0xffffff80
c0002203:	83 e0 3f             	and    eax,0x3f
c0002206:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002209:	83 c8 80             	or     eax,0xffffff80
c000220c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000220f:	b0 04                	mov    al,0x4
c0002211:	eb 02                	jmp    c0002215 <put_utf+0xf7>
c0002213:	31 c0                	xor    eax,eax
c0002215:	5b                   	pop    ebx
c0002216:	c3                   	ret    

c0002217 <clst2sect>:
c0002217:	8d 4a fe             	lea    ecx,[edx-0x2]
c000221a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000221d:	83 ea 02             	sub    edx,0x2
c0002220:	39 ca                	cmp    edx,ecx
c0002222:	76 0d                	jbe    c0002231 <clst2sect+0x1a>
c0002224:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002228:	0f af d1             	imul   edx,ecx
c000222b:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000222e:	89 d0                	mov    eax,edx
c0002230:	c3                   	ret    
c0002231:	31 c0                	xor    eax,eax
c0002233:	c3                   	ret    

c0002234 <pick_lfn>:
c0002234:	55                   	push   ebp
c0002235:	57                   	push   edi
c0002236:	89 c7                	mov    edi,eax
c0002238:	56                   	push   esi
c0002239:	8d 42 1a             	lea    eax,[edx+0x1a]
c000223c:	53                   	push   ebx
c000223d:	89 d3                	mov    ebx,edx
c000223f:	e8 7c fd ff ff       	call   c0001fc0 <ld_word>
c0002244:	66 85 c0             	test   ax,ax
c0002247:	74 04                	je     c000224d <pick_lfn+0x19>
c0002249:	31 c0                	xor    eax,eax
c000224b:	eb 62                	jmp    c00022af <pick_lfn+0x7b>
c000224d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002250:	bd 01 00 00 00       	mov    ebp,0x1
c0002255:	83 e1 bf             	and    ecx,0xffffffbf
c0002258:	31 f6                	xor    esi,esi
c000225a:	49                   	dec    ecx
c000225b:	6b c9 0d             	imul   ecx,ecx,0xd
c000225e:	0f b6 86 80 10 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdef80]
c0002265:	01 d8                	add    eax,ebx
c0002267:	e8 54 fd ff ff       	call   c0001fc0 <ld_word>
c000226c:	66 85 ed             	test   bp,bp
c000226f:	74 11                	je     c0002282 <pick_lfn+0x4e>
c0002271:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002277:	77 d0                	ja     c0002249 <pick_lfn+0x15>
c0002279:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c000227d:	89 c5                	mov    ebp,eax
c000227f:	41                   	inc    ecx
c0002280:	eb 0a                	jmp    c000228c <pick_lfn+0x58>
c0002282:	0f b7 c0             	movzx  eax,ax
c0002285:	3d ff ff 00 00       	cmp    eax,0xffff
c000228a:	75 bd                	jne    c0002249 <pick_lfn+0x15>
c000228c:	46                   	inc    esi
c000228d:	83 fe 0d             	cmp    esi,0xd
c0002290:	75 cc                	jne    c000225e <pick_lfn+0x2a>
c0002292:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002295:	74 13                	je     c00022aa <pick_lfn+0x76>
c0002297:	66 85 ed             	test   bp,bp
c000229a:	74 0e                	je     c00022aa <pick_lfn+0x76>
c000229c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a2:	77 a5                	ja     c0002249 <pick_lfn+0x15>
c00022a4:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022aa:	b8 01 00 00 00       	mov    eax,0x1
c00022af:	5b                   	pop    ebx
c00022b0:	5e                   	pop    esi
c00022b1:	5f                   	pop    edi
c00022b2:	5d                   	pop    ebp
c00022b3:	c3                   	ret    

c00022b4 <put_lfn>:
c00022b4:	55                   	push   ebp
c00022b5:	57                   	push   edi
c00022b6:	89 d7                	mov    edi,edx
c00022b8:	56                   	push   esi
c00022b9:	31 f6                	xor    esi,esi
c00022bb:	53                   	push   ebx
c00022bc:	83 ec 0c             	sub    esp,0xc
c00022bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022c3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00022c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00022cb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022d1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00022d4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00022d7:	31 d2                	xor    edx,edx
c00022d9:	e8 07 fd ff ff       	call   c0001fe5 <st_word>
c00022de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00022e5:	0f b6 d9             	movzx  ebx,cl
c00022e8:	4b                   	dec    ebx
c00022e9:	6b db 0d             	imul   ebx,ebx,0xd
c00022ec:	0f b7 c6             	movzx  eax,si
c00022ef:	3d ff ff 00 00       	cmp    eax,0xffff
c00022f4:	74 09                	je     c00022ff <put_lfn+0x4b>
c00022f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022fa:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00022fe:	43                   	inc    ebx
c00022ff:	0f b7 ee             	movzx  ebp,si
c0002302:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002305:	89 ea                	mov    edx,ebp
c0002307:	0f b6 80 80 10 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdef80]
c000230e:	01 f8                	add    eax,edi
c0002310:	e8 d0 fc ff ff       	call   c0001fe5 <st_word>
c0002315:	85 ed                	test   ebp,ebp
c0002317:	75 05                	jne    c000231e <put_lfn+0x6a>
c0002319:	be ff ff 00 00       	mov    esi,0xffff
c000231e:	ff 04 24             	inc    DWORD PTR [esp]
c0002321:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002325:	75 c5                	jne    c00022ec <put_lfn+0x38>
c0002327:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000232d:	74 0b                	je     c000233a <put_lfn+0x86>
c000232f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002333:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002338:	75 07                	jne    c0002341 <put_lfn+0x8d>
c000233a:	83 c9 40             	or     ecx,0x40
c000233d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002341:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002345:	88 07                	mov    BYTE PTR [edi],al
c0002347:	83 c4 0c             	add    esp,0xc
c000234a:	5b                   	pop    ebx
c000234b:	5e                   	pop    esi
c000234c:	5f                   	pop    edi
c000234d:	5d                   	pop    ebp
c000234e:	c3                   	ret    

c000234f <gen_numname>:
c000234f:	57                   	push   edi
c0002350:	89 cf                	mov    edi,ecx
c0002352:	56                   	push   esi
c0002353:	b9 0b 00 00 00       	mov    ecx,0xb
c0002358:	53                   	push   ebx
c0002359:	89 c6                	mov    esi,eax
c000235b:	83 ec 10             	sub    esp,0x10
c000235e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002362:	e8 85 fc ff ff       	call   c0001fec <mem_cpy>
c0002367:	83 fb 05             	cmp    ebx,0x5
c000236a:	76 30                	jbe    c000239c <gen_numname+0x4d>
c000236c:	66 8b 07             	mov    ax,WORD PTR [edi]
c000236f:	66 85 c0             	test   ax,ax
c0002372:	74 28                	je     c000239c <gen_numname+0x4d>
c0002374:	83 c7 02             	add    edi,0x2
c0002377:	ba 10 00 00 00       	mov    edx,0x10
c000237c:	01 db                	add    ebx,ebx
c000237e:	89 c1                	mov    ecx,eax
c0002380:	c1 e0 10             	shl    eax,0x10
c0002383:	83 e1 01             	and    ecx,0x1
c0002386:	c1 e8 11             	shr    eax,0x11
c0002389:	01 cb                	add    ebx,ecx
c000238b:	0f ba e3 10          	bt     ebx,0x10
c000238f:	73 06                	jae    c0002397 <gen_numname+0x48>
c0002391:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002397:	4a                   	dec    edx
c0002398:	75 e2                	jne    c000237c <gen_numname+0x2d>
c000239a:	eb d0                	jmp    c000236c <gen_numname+0x1d>
c000239c:	b8 07 00 00 00       	mov    eax,0x7
c00023a1:	89 d9                	mov    ecx,ebx
c00023a3:	83 e1 0f             	and    ecx,0xf
c00023a6:	8d 79 30             	lea    edi,[ecx+0x30]
c00023a9:	89 fa                	mov    edx,edi
c00023ab:	83 ff 39             	cmp    edi,0x39
c00023ae:	76 03                	jbe    c00023b3 <gen_numname+0x64>
c00023b0:	8d 51 37             	lea    edx,[ecx+0x37]
c00023b3:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023b6:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023ba:	89 da                	mov    edx,ebx
c00023bc:	c1 ea 04             	shr    edx,0x4
c00023bf:	83 fb 0f             	cmp    ebx,0xf
c00023c2:	76 06                	jbe    c00023ca <gen_numname+0x7b>
c00023c4:	89 c8                	mov    eax,ecx
c00023c6:	89 d3                	mov    ebx,edx
c00023c8:	eb d7                	jmp    c00023a1 <gen_numname+0x52>
c00023ca:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023cf:	31 d2                	xor    edx,edx
c00023d1:	8d 58 fe             	lea    ebx,[eax-0x2]
c00023d4:	8d 04 16             	lea    eax,[esi+edx*1]
c00023d7:	39 ca                	cmp    edx,ecx
c00023d9:	73 19                	jae    c00023f4 <gen_numname+0xa5>
c00023db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00023de:	83 f8 20             	cmp    eax,0x20
c00023e1:	74 11                	je     c00023f4 <gen_numname+0xa5>
c00023e3:	e8 58 fc ff ff       	call   c0002040 <dbc_1st>
c00023e8:	85 c0                	test   eax,eax
c00023ea:	74 05                	je     c00023f1 <gen_numname+0xa2>
c00023ec:	39 d3                	cmp    ebx,edx
c00023ee:	74 04                	je     c00023f4 <gen_numname+0xa5>
c00023f0:	42                   	inc    edx
c00023f1:	42                   	inc    edx
c00023f2:	eb e0                	jmp    c00023d4 <gen_numname+0x85>
c00023f4:	b0 20                	mov    al,0x20
c00023f6:	83 f9 07             	cmp    ecx,0x7
c00023f9:	77 05                	ja     c0002400 <gen_numname+0xb1>
c00023fb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00023ff:	41                   	inc    ecx
c0002400:	42                   	inc    edx
c0002401:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002405:	83 fa 07             	cmp    edx,0x7
c0002408:	76 ea                	jbe    c00023f4 <gen_numname+0xa5>
c000240a:	83 c4 10             	add    esp,0x10
c000240d:	5b                   	pop    ebx
c000240e:	5e                   	pop    esi
c000240f:	5f                   	pop    edi
c0002410:	c3                   	ret    

c0002411 <sum_sfn>:
c0002411:	53                   	push   ebx
c0002412:	31 c9                	xor    ecx,ecx
c0002414:	31 db                	xor    ebx,ebx
c0002416:	0f b6 d1             	movzx  edx,cl
c0002419:	c1 e1 07             	shl    ecx,0x7
c000241c:	d1 ea                	shr    edx,1
c000241e:	09 ca                	or     edx,ecx
c0002420:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002423:	43                   	inc    ebx
c0002424:	01 ca                	add    edx,ecx
c0002426:	83 fb 0b             	cmp    ebx,0xb
c0002429:	88 d1                	mov    cl,dl
c000242b:	75 e9                	jne    c0002416 <sum_sfn+0x5>
c000242d:	88 d0                	mov    al,dl
c000242f:	5b                   	pop    ebx
c0002430:	c3                   	ret    

c0002431 <get_ldnumber>:
c0002431:	8b 10                	mov    edx,DWORD PTR [eax]
c0002433:	85 d2                	test   edx,edx
c0002435:	74 14                	je     c000244b <get_ldnumber+0x1a>
c0002437:	56                   	push   esi
c0002438:	53                   	push   ebx
c0002439:	89 d3                	mov    ebx,edx
c000243b:	43                   	inc    ebx
c000243c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000243f:	80 f9 1f             	cmp    cl,0x1f
c0002442:	76 0d                	jbe    c0002451 <get_ldnumber+0x20>
c0002444:	80 f9 3a             	cmp    cl,0x3a
c0002447:	75 f2                	jne    c000243b <get_ldnumber+0xa>
c0002449:	eb 0a                	jmp    c0002455 <get_ldnumber+0x24>
c000244b:	83 c9 ff             	or     ecx,0xffffffff
c000244e:	89 c8                	mov    eax,ecx
c0002450:	c3                   	ret    
c0002451:	31 c9                	xor    ecx,ecx
c0002453:	eb 24                	jmp    c0002479 <get_ldnumber+0x48>
c0002455:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002458:	8d 4e d0             	lea    ecx,[esi-0x30]
c000245b:	80 f9 09             	cmp    cl,0x9
c000245e:	77 16                	ja     c0002476 <get_ldnumber+0x45>
c0002460:	83 c2 02             	add    edx,0x2
c0002463:	83 c9 ff             	or     ecx,0xffffffff
c0002466:	39 d3                	cmp    ebx,edx
c0002468:	75 0f                	jne    c0002479 <get_ldnumber+0x48>
c000246a:	89 f2                	mov    edx,esi
c000246c:	89 18                	mov    DWORD PTR [eax],ebx
c000246e:	0f be ca             	movsx  ecx,dl
c0002471:	83 e9 30             	sub    ecx,0x30
c0002474:	eb 03                	jmp    c0002479 <get_ldnumber+0x48>
c0002476:	83 c9 ff             	or     ecx,0xffffffff
c0002479:	89 c8                	mov    eax,ecx
c000247b:	5b                   	pop    ebx
c000247c:	5e                   	pop    esi
c000247d:	c3                   	ret    

c000247e <validate>:
c000247e:	56                   	push   esi
c000247f:	53                   	push   ebx
c0002480:	89 d6                	mov    esi,edx
c0002482:	51                   	push   ecx
c0002483:	85 c0                	test   eax,eax
c0002485:	75 09                	jne    c0002490 <validate+0x12>
c0002487:	b8 09 00 00 00       	mov    eax,0x9
c000248c:	31 c9                	xor    ecx,ecx
c000248e:	eb 2e                	jmp    c00024be <validate+0x40>
c0002490:	89 c3                	mov    ebx,eax
c0002492:	8b 00                	mov    eax,DWORD PTR [eax]
c0002494:	85 c0                	test   eax,eax
c0002496:	74 ef                	je     c0002487 <validate+0x9>
c0002498:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000249b:	74 ea                	je     c0002487 <validate+0x9>
c000249d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024a0:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024a4:	75 e1                	jne    c0002487 <validate+0x9>
c00024a6:	83 ec 0c             	sub    esp,0xc
c00024a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024ad:	50                   	push   eax
c00024ae:	e8 bc fa ff ff       	call   c0001f6f <disk_status>
c00024b3:	83 c4 10             	add    esp,0x10
c00024b6:	a8 01                	test   al,0x1
c00024b8:	75 cd                	jne    c0002487 <validate+0x9>
c00024ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024bc:	31 c0                	xor    eax,eax
c00024be:	89 0e                	mov    DWORD PTR [esi],ecx
c00024c0:	5a                   	pop    edx
c00024c1:	5b                   	pop    ebx
c00024c2:	5e                   	pop    esi
c00024c3:	c3                   	ret    

c00024c4 <sync_window>:
c00024c4:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024c8:	74 58                	je     c0002522 <sync_window+0x5e>
c00024ca:	56                   	push   esi
c00024cb:	53                   	push   ebx
c00024cc:	8d 70 34             	lea    esi,[eax+0x34]
c00024cf:	51                   	push   ecx
c00024d0:	89 c3                	mov    ebx,eax
c00024d2:	6a 01                	push   0x1
c00024d4:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00024d7:	56                   	push   esi
c00024d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024dc:	50                   	push   eax
c00024dd:	e8 a9 fa ff ff       	call   c0001f8b <disk_write>
c00024e2:	83 c4 10             	add    esp,0x10
c00024e5:	ba 01 00 00 00       	mov    edx,0x1
c00024ea:	85 c0                	test   eax,eax
c00024ec:	75 2e                	jne    c000251c <sync_window+0x58>
c00024ee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024f1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00024f4:	89 c1                	mov    ecx,eax
c00024f6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00024fa:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00024fd:	39 d1                	cmp    ecx,edx
c00024ff:	73 19                	jae    c000251a <sync_window+0x56>
c0002501:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002505:	75 13                	jne    c000251a <sync_window+0x56>
c0002507:	6a 01                	push   0x1
c0002509:	01 d0                	add    eax,edx
c000250b:	50                   	push   eax
c000250c:	56                   	push   esi
c000250d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002511:	50                   	push   eax
c0002512:	e8 74 fa ff ff       	call   c0001f8b <disk_write>
c0002517:	83 c4 10             	add    esp,0x10
c000251a:	31 d2                	xor    edx,edx
c000251c:	89 d0                	mov    eax,edx
c000251e:	5a                   	pop    edx
c000251f:	5b                   	pop    ebx
c0002520:	5e                   	pop    esi
c0002521:	c3                   	ret    
c0002522:	31 d2                	xor    edx,edx
c0002524:	89 d0                	mov    eax,edx
c0002526:	c3                   	ret    

c0002527 <move_window>:
c0002527:	57                   	push   edi
c0002528:	56                   	push   esi
c0002529:	31 f6                	xor    esi,esi
c000252b:	53                   	push   ebx
c000252c:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000252f:	74 32                	je     c0002563 <move_window+0x3c>
c0002531:	89 c3                	mov    ebx,eax
c0002533:	89 d7                	mov    edi,edx
c0002535:	e8 8a ff ff ff       	call   c00024c4 <sync_window>
c000253a:	89 c6                	mov    esi,eax
c000253c:	85 c0                	test   eax,eax
c000253e:	75 23                	jne    c0002563 <move_window+0x3c>
c0002540:	6a 01                	push   0x1
c0002542:	8d 43 34             	lea    eax,[ebx+0x34]
c0002545:	57                   	push   edi
c0002546:	50                   	push   eax
c0002547:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000254b:	50                   	push   eax
c000254c:	e8 24 fa ff ff       	call   c0001f75 <disk_read>
c0002551:	83 c4 10             	add    esp,0x10
c0002554:	85 c0                	test   eax,eax
c0002556:	74 08                	je     c0002560 <move_window+0x39>
c0002558:	be 01 00 00 00       	mov    esi,0x1
c000255d:	83 cf ff             	or     edi,0xffffffff
c0002560:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002563:	89 f0                	mov    eax,esi
c0002565:	5b                   	pop    ebx
c0002566:	5e                   	pop    esi
c0002567:	5f                   	pop    edi
c0002568:	c3                   	ret    

c0002569 <check_fs>:
c0002569:	53                   	push   ebx
c000256a:	89 c3                	mov    ebx,eax
c000256c:	83 ec 08             	sub    esp,0x8
c000256f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002573:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000257a:	e8 a8 ff ff ff       	call   c0002527 <move_window>
c000257f:	ba 04 00 00 00       	mov    edx,0x4
c0002584:	85 c0                	test   eax,eax
c0002586:	75 68                	jne    c00025f0 <check_fs+0x87>
c0002588:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000258e:	e8 2d fa ff ff       	call   c0001fc0 <ld_word>
c0002593:	ba 03 00 00 00       	mov    edx,0x3
c0002598:	66 3d 55 aa          	cmp    ax,0xaa55
c000259c:	75 52                	jne    c00025f0 <check_fs+0x87>
c000259e:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025a1:	8d 50 18             	lea    edx,[eax+0x18]
c00025a4:	80 fa 01             	cmp    dl,0x1
c00025a7:	76 09                	jbe    c00025b2 <check_fs+0x49>
c00025a9:	ba 02 00 00 00       	mov    edx,0x2
c00025ae:	3c eb                	cmp    al,0xeb
c00025b0:	75 3e                	jne    c00025f0 <check_fs+0x87>
c00025b2:	ba 34 3e 02 c0       	mov    edx,0xc0023e34
c00025b7:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025ba:	b9 03 00 00 00       	mov    ecx,0x3
c00025bf:	e8 48 fa ff ff       	call   c000200c <mem_cmp>
c00025c4:	31 d2                	xor    edx,edx
c00025c6:	85 c0                	test   eax,eax
c00025c8:	74 26                	je     c00025f0 <check_fs+0x87>
c00025ca:	ba 3c 0f 02 c0       	mov    edx,0xc0020f3c
c00025cf:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00025d5:	b9 05 00 00 00       	mov    ecx,0x5
c00025da:	e8 2d fa ff ff       	call   c000200c <mem_cmp>
c00025df:	31 d2                	xor    edx,edx
c00025e1:	85 c0                	test   eax,eax
c00025e3:	74 0b                	je     c00025f0 <check_fs+0x87>
c00025e5:	31 d2                	xor    edx,edx
c00025e7:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00025eb:	0f 95 c2             	setne  dl
c00025ee:	01 d2                	add    edx,edx
c00025f0:	89 d0                	mov    eax,edx
c00025f2:	83 c4 08             	add    esp,0x8
c00025f5:	5b                   	pop    ebx
c00025f6:	c3                   	ret    

c00025f7 <find_volume>:
c00025f7:	55                   	push   ebp
c00025f8:	57                   	push   edi
c00025f9:	56                   	push   esi
c00025fa:	89 c6                	mov    esi,eax
c00025fc:	53                   	push   ebx
c00025fd:	89 d3                	mov    ebx,edx
c00025ff:	83 ec 2c             	sub    esp,0x2c
c0002602:	31 d2                	xor    edx,edx
c0002604:	e8 60 ff ff ff       	call   c0002569 <check_fs>
c0002609:	83 f8 02             	cmp    eax,0x2
c000260c:	74 06                	je     c0002614 <find_volume+0x1d>
c000260e:	77 62                	ja     c0002672 <find_volume+0x7b>
c0002610:	85 db                	test   ebx,ebx
c0002612:	74 5e                	je     c0002672 <find_volume+0x7b>
c0002614:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002618:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000261e:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002624:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002628:	89 cf                	mov    edi,ecx
c000262a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000262e:	89 e8                	mov    eax,ebp
c0002630:	83 c5 10             	add    ebp,0x10
c0002633:	e8 95 f9 ff ff       	call   c0001fcd <ld_dword>
c0002638:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000263c:	89 01                	mov    DWORD PTR [ecx],eax
c000263e:	83 c1 04             	add    ecx,0x4
c0002641:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002645:	75 e3                	jne    c000262a <find_volume+0x33>
c0002647:	31 ed                	xor    ebp,ebp
c0002649:	85 db                	test   ebx,ebx
c000264b:	74 03                	je     c0002650 <find_volume+0x59>
c000264d:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002650:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002653:	b8 03 00 00 00       	mov    eax,0x3
c0002658:	85 d2                	test   edx,edx
c000265a:	74 0c                	je     c0002668 <find_volume+0x71>
c000265c:	89 f0                	mov    eax,esi
c000265e:	e8 06 ff ff ff       	call   c0002569 <check_fs>
c0002663:	83 f8 01             	cmp    eax,0x1
c0002666:	76 0a                	jbe    c0002672 <find_volume+0x7b>
c0002668:	85 db                	test   ebx,ebx
c000266a:	75 06                	jne    c0002672 <find_volume+0x7b>
c000266c:	45                   	inc    ebp
c000266d:	83 fd 03             	cmp    ebp,0x3
c0002670:	76 de                	jbe    c0002650 <find_volume+0x59>
c0002672:	83 c4 2c             	add    esp,0x2c
c0002675:	5b                   	pop    ebx
c0002676:	5e                   	pop    esi
c0002677:	5f                   	pop    edi
c0002678:	5d                   	pop    ebp
c0002679:	c3                   	ret    

c000267a <mount_volume>:
c000267a:	55                   	push   ebp
c000267b:	89 d5                	mov    ebp,edx
c000267d:	57                   	push   edi
c000267e:	89 cf                	mov    edi,ecx
c0002680:	56                   	push   esi
c0002681:	53                   	push   ebx
c0002682:	bb 0b 00 00 00       	mov    ebx,0xb
c0002687:	83 ec 1c             	sub    esp,0x1c
c000268a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002690:	e8 9c fd ff ff       	call   c0002431 <get_ldnumber>
c0002695:	85 c0                	test   eax,eax
c0002697:	0f 88 c4 02 00 00    	js     c0002961 <mount_volume+0x2e7>
c000269d:	8b 34 85 a0 74 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd8b60]
c00026a4:	89 c2                	mov    edx,eax
c00026a6:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ab:	85 f6                	test   esi,esi
c00026ad:	0f 84 ae 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026b3:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026b6:	83 e7 fe             	and    edi,0xfffffffe
c00026b9:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026bc:	74 3a                	je     c00026f8 <mount_volume+0x7e>
c00026be:	89 04 24             	mov    DWORD PTR [esp],eax
c00026c1:	83 ec 0c             	sub    esp,0xc
c00026c4:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026c8:	50                   	push   eax
c00026c9:	e8 a1 f8 ff ff       	call   c0001f6f <disk_status>
c00026ce:	83 c4 10             	add    esp,0x10
c00026d1:	a8 01                	test   al,0x1
c00026d3:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00026d6:	75 20                	jne    c00026f8 <mount_volume+0x7e>
c00026d8:	31 db                	xor    ebx,ebx
c00026da:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026e0:	0f 84 7b 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026e6:	a8 04                	test   al,0x4
c00026e8:	0f 84 73 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026ee:	bb 0a 00 00 00       	mov    ebx,0xa
c00026f3:	e9 69 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c00026f8:	83 ec 0c             	sub    esp,0xc
c00026fb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00026fe:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002701:	0f b6 c2             	movzx  eax,dl
c0002704:	bb 03 00 00 00       	mov    ebx,0x3
c0002709:	50                   	push   eax
c000270a:	e8 63 f8 ff ff       	call   c0001f72 <disk_initialize>
c000270f:	83 c4 10             	add    esp,0x10
c0002712:	a8 01                	test   al,0x1
c0002714:	0f 85 47 02 00 00    	jne    c0002961 <mount_volume+0x2e7>
c000271a:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002720:	74 04                	je     c0002726 <mount_volume+0xac>
c0002722:	a8 04                	test   al,0x4
c0002724:	75 c8                	jne    c00026ee <mount_volume+0x74>
c0002726:	31 d2                	xor    edx,edx
c0002728:	89 f0                	mov    eax,esi
c000272a:	bb 01 00 00 00       	mov    ebx,0x1
c000272f:	e8 c3 fe ff ff       	call   c00025f7 <find_volume>
c0002734:	83 f8 04             	cmp    eax,0x4
c0002737:	0f 84 24 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c000273d:	83 f8 01             	cmp    eax,0x1
c0002740:	76 0a                	jbe    c000274c <mount_volume+0xd2>
c0002742:	bb 0d 00 00 00       	mov    ebx,0xd
c0002747:	e9 15 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c000274c:	8d 46 3f             	lea    eax,[esi+0x3f]
c000274f:	e8 6c f8 ff ff       	call   c0001fc0 <ld_word>
c0002754:	66 3d 00 02          	cmp    ax,0x200
c0002758:	75 e8                	jne    c0002742 <mount_volume+0xc8>
c000275a:	8d 46 4a             	lea    eax,[esi+0x4a]
c000275d:	e8 5e f8 ff ff       	call   c0001fc0 <ld_word>
c0002762:	0f b7 c0             	movzx  eax,ax
c0002765:	89 04 24             	mov    DWORD PTR [esp],eax
c0002768:	85 c0                	test   eax,eax
c000276a:	75 0b                	jne    c0002777 <mount_volume+0xfd>
c000276c:	8d 46 58             	lea    eax,[esi+0x58]
c000276f:	e8 59 f8 ff ff       	call   c0001fcd <ld_dword>
c0002774:	89 04 24             	mov    DWORD PTR [esp],eax
c0002777:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000277a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000277e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002781:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002784:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c0002787:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000278b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000278e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002792:	48                   	dec    eax
c0002793:	3c 01                	cmp    al,0x1
c0002795:	77 ab                	ja     c0002742 <mount_volume+0xc8>
c0002797:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c000279b:	89 c3                	mov    ebx,eax
c000279d:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027a1:	66 85 c0             	test   ax,ax
c00027a4:	74 9c                	je     c0002742 <mount_volume+0xc8>
c00027a6:	8d 40 ff             	lea    eax,[eax-0x1]
c00027a9:	85 d8                	test   eax,ebx
c00027ab:	75 95                	jne    c0002742 <mount_volume+0xc8>
c00027ad:	8d 46 45             	lea    eax,[esi+0x45]
c00027b0:	e8 0b f8 ff ff       	call   c0001fc0 <ld_word>
c00027b5:	89 c7                	mov    edi,eax
c00027b7:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027bb:	a8 0f                	test   al,0xf
c00027bd:	75 83                	jne    c0002742 <mount_volume+0xc8>
c00027bf:	8d 46 47             	lea    eax,[esi+0x47]
c00027c2:	e8 f9 f7 ff ff       	call   c0001fc0 <ld_word>
c00027c7:	0f b7 e8             	movzx  ebp,ax
c00027ca:	85 ed                	test   ebp,ebp
c00027cc:	75 0a                	jne    c00027d8 <mount_volume+0x15e>
c00027ce:	8d 46 54             	lea    eax,[esi+0x54]
c00027d1:	e8 f7 f7 ff ff       	call   c0001fcd <ld_dword>
c00027d6:	89 c5                	mov    ebp,eax
c00027d8:	8d 46 42             	lea    eax,[esi+0x42]
c00027db:	e8 e0 f7 ff ff       	call   c0001fc0 <ld_word>
c00027e0:	0f b7 c8             	movzx  ecx,ax
c00027e3:	85 c9                	test   ecx,ecx
c00027e5:	0f 84 57 ff ff ff    	je     c0002742 <mount_volume+0xc8>
c00027eb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00027f0:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c00027f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027f8:	0f b7 c7             	movzx  eax,di
c00027fb:	c1 e8 04             	shr    eax,0x4
c00027fe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002802:	01 c8                	add    eax,ecx
c0002804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002808:	39 c5                	cmp    ebp,eax
c000280a:	0f 82 32 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002810:	29 c5                	sub    ebp,eax
c0002812:	31 d2                	xor    edx,edx
c0002814:	89 e8                	mov    eax,ebp
c0002816:	f7 f3                	div    ebx
c0002818:	39 dd                	cmp    ebp,ebx
c000281a:	0f 82 22 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002820:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002825:	0f 87 17 ff ff ff    	ja     c0002742 <mount_volume+0xc8>
c000282b:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002830:	0f 86 1c 01 00 00    	jbe    c0002952 <mount_volume+0x2d8>
c0002836:	bb 03 00 00 00       	mov    ebx,0x3
c000283b:	8d 68 02             	lea    ebp,[eax+0x2]
c000283e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002846:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c000284a:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000284d:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002850:	01 c8                	add    eax,ecx
c0002852:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002855:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002858:	83 fb 03             	cmp    ebx,0x3
c000285b:	75 23                	jne    c0002880 <mount_volume+0x206>
c000285d:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002860:	e8 5b f7 ff ff       	call   c0001fc0 <ld_word>
c0002865:	09 c7                	or     edi,eax
c0002867:	66 85 ff             	test   di,di
c000286a:	0f 85 d2 fe ff ff    	jne    c0002742 <mount_volume+0xc8>
c0002870:	8d 46 60             	lea    eax,[esi+0x60]
c0002873:	c1 e5 02             	shl    ebp,0x2
c0002876:	e8 52 f7 ff ff       	call   c0001fcd <ld_dword>
c000287b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000287e:	eb 24                	jmp    c00028a4 <mount_volume+0x22a>
c0002880:	66 85 ff             	test   di,di
c0002883:	0f 84 b9 fe ff ff    	je     c0002742 <mount_volume+0xc8>
c0002889:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000288d:	83 fb 02             	cmp    ebx,0x2
c0002890:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002893:	75 04                	jne    c0002899 <mount_volume+0x21f>
c0002895:	01 ed                	add    ebp,ebp
c0002897:	eb 0b                	jmp    c00028a4 <mount_volume+0x22a>
c0002899:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c000289d:	83 e5 01             	and    ebp,0x1
c00028a0:	d1 e8                	shr    eax,1
c00028a2:	01 c5                	add    ebp,eax
c00028a4:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028aa:	c1 ed 09             	shr    ebp,0x9
c00028ad:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00028b0:	0f 87 8c fe ff ff    	ja     c0002742 <mount_volume+0xc8>
c00028b6:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00028bd:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00028c4:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00028c8:	83 fb 03             	cmp    ebx,0x3
c00028cb:	75 6e                	jne    c000293b <mount_volume+0x2c1>
c00028cd:	8d 46 64             	lea    eax,[esi+0x64]
c00028d0:	e8 eb f6 ff ff       	call   c0001fc0 <ld_word>
c00028d5:	66 48                	dec    ax
c00028d7:	75 62                	jne    c000293b <mount_volume+0x2c1>
c00028d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	42                   	inc    edx
c00028e0:	e8 42 fc ff ff       	call   c0002527 <move_window>
c00028e5:	85 c0                	test   eax,eax
c00028e7:	75 52                	jne    c000293b <mount_volume+0x2c1>
c00028e9:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00028ed:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00028f3:	e8 c8 f6 ff ff       	call   c0001fc0 <ld_word>
c00028f8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028fc:	75 3d                	jne    c000293b <mount_volume+0x2c1>
c00028fe:	8d 46 34             	lea    eax,[esi+0x34]
c0002901:	e8 c7 f6 ff ff       	call   c0001fcd <ld_dword>
c0002906:	3d 52 52 61 41       	cmp    eax,0x41615252
c000290b:	75 2e                	jne    c000293b <mount_volume+0x2c1>
c000290d:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002913:	e8 b5 f6 ff ff       	call   c0001fcd <ld_dword>
c0002918:	3d 72 72 41 61       	cmp    eax,0x61417272
c000291d:	75 1c                	jne    c000293b <mount_volume+0x2c1>
c000291f:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002925:	e8 a3 f6 ff ff       	call   c0001fcd <ld_dword>
c000292a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000292d:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002933:	e8 95 f6 ff ff       	call   c0001fcd <ld_dword>
c0002938:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000293b:	66 a1 80 74 02 c0    	mov    ax,ds:0xc0027480
c0002941:	88 1e                	mov    BYTE PTR [esi],bl
c0002943:	40                   	inc    eax
c0002944:	31 db                	xor    ebx,ebx
c0002946:	66 a3 80 74 02 c0    	mov    ds:0xc0027480,ax
c000294c:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002950:	eb 0f                	jmp    c0002961 <mount_volume+0x2e7>
c0002952:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002957:	19 db                	sbb    ebx,ebx
c0002959:	83 c3 02             	add    ebx,0x2
c000295c:	e9 da fe ff ff       	jmp    c000283b <mount_volume+0x1c1>
c0002961:	83 c4 1c             	add    esp,0x1c
c0002964:	89 d8                	mov    eax,ebx
c0002966:	5b                   	pop    ebx
c0002967:	5e                   	pop    esi
c0002968:	5f                   	pop    edi
c0002969:	5d                   	pop    ebp
c000296a:	c3                   	ret    

c000296b <put_fat>:
c000296b:	55                   	push   ebp
c000296c:	bd 02 00 00 00       	mov    ebp,0x2
c0002971:	57                   	push   edi
c0002972:	56                   	push   esi
c0002973:	53                   	push   ebx
c0002974:	83 ec 1c             	sub    esp,0x1c
c0002977:	83 fa 01             	cmp    edx,0x1
c000297a:	0f 86 38 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002980:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002983:	0f 86 2f 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002989:	89 c6                	mov    esi,eax
c000298b:	89 cf                	mov    edi,ecx
c000298d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002990:	89 d3                	mov    ebx,edx
c0002992:	83 f8 02             	cmp    eax,0x2
c0002995:	0f 84 b1 00 00 00    	je     c0002a4c <put_fat+0xe1>
c000299b:	83 f8 03             	cmp    eax,0x3
c000299e:	0f 84 d5 00 00 00    	je     c0002a79 <put_fat+0x10e>
c00029a4:	48                   	dec    eax
c00029a5:	0f 85 0d 01 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ab:	89 d1                	mov    ecx,edx
c00029ad:	89 f0                	mov    eax,esi
c00029af:	d1 e9                	shr    ecx,1
c00029b1:	01 d1                	add    ecx,edx
c00029b3:	89 ca                	mov    edx,ecx
c00029b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029b9:	c1 ea 09             	shr    edx,0x9
c00029bc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029bf:	e8 63 fb ff ff       	call   c0002527 <move_window>
c00029c4:	89 c5                	mov    ebp,eax
c00029c6:	85 c0                	test   eax,eax
c00029c8:	0f 85 ea 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029d2:	8d 46 34             	lea    eax,[esi+0x34]
c00029d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029d9:	8d 41 01             	lea    eax,[ecx+0x1]
c00029dc:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00029e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029e6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00029ea:	89 f8                	mov    eax,edi
c00029ec:	83 e3 01             	and    ebx,0x1
c00029ef:	74 11                	je     c0002a02 <put_fat+0x97>
c00029f1:	8a 11                	mov    dl,BYTE PTR [ecx]
c00029f3:	89 f8                	mov    eax,edi
c00029f5:	83 e2 0f             	and    edx,0xf
c00029f8:	c1 e0 04             	shl    eax,0x4
c00029fb:	25 f0 0f 00 00       	and    eax,0xff0
c0002a00:	09 d0                	or     eax,edx
c0002a02:	88 01                	mov    BYTE PTR [ecx],al
c0002a04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a0c:	c1 ea 09             	shr    edx,0x9
c0002a0f:	89 f0                	mov    eax,esi
c0002a11:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a14:	e8 0e fb ff ff       	call   c0002527 <move_window>
c0002a19:	89 c5                	mov    ebp,eax
c0002a1b:	85 c0                	test   eax,eax
c0002a1d:	0f 85 95 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c0002a23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a27:	25 ff 01 00 00       	and    eax,0x1ff
c0002a2c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a30:	85 db                	test   ebx,ebx
c0002a32:	74 07                	je     c0002a3b <put_fat+0xd0>
c0002a34:	c1 ef 04             	shr    edi,0x4
c0002a37:	89 f9                	mov    ecx,edi
c0002a39:	eb 0d                	jmp    c0002a48 <put_fat+0xdd>
c0002a3b:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a3d:	c1 ef 08             	shr    edi,0x8
c0002a40:	83 e1 f0             	and    ecx,0xfffffff0
c0002a43:	83 e7 0f             	and    edi,0xf
c0002a46:	09 f9                	or     ecx,edi
c0002a48:	88 08                	mov    BYTE PTR [eax],cl
c0002a4a:	eb 27                	jmp    c0002a73 <put_fat+0x108>
c0002a4c:	c1 ea 08             	shr    edx,0x8
c0002a4f:	89 f0                	mov    eax,esi
c0002a51:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a54:	e8 ce fa ff ff       	call   c0002527 <move_window>
c0002a59:	89 c5                	mov    ebp,eax
c0002a5b:	85 c0                	test   eax,eax
c0002a5d:	75 59                	jne    c0002ab8 <put_fat+0x14d>
c0002a5f:	01 db                	add    ebx,ebx
c0002a61:	0f b7 d7             	movzx  edx,di
c0002a64:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002a6a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002a6e:	e8 72 f5 ff ff       	call   c0001fe5 <st_word>
c0002a73:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a77:	eb 3f                	jmp    c0002ab8 <put_fat+0x14d>
c0002a79:	c1 ea 07             	shr    edx,0x7
c0002a7c:	89 f0                	mov    eax,esi
c0002a7e:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a81:	e8 a1 fa ff ff       	call   c0002527 <move_window>
c0002a86:	89 c5                	mov    ebp,eax
c0002a88:	85 c0                	test   eax,eax
c0002a8a:	75 2c                	jne    c0002ab8 <put_fat+0x14d>
c0002a8c:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002a92:	c1 e3 02             	shl    ebx,0x2
c0002a95:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002a9b:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002a9f:	89 d8                	mov    eax,ebx
c0002aa1:	e8 27 f5 ff ff       	call   c0001fcd <ld_dword>
c0002aa6:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aab:	09 f8                	or     eax,edi
c0002aad:	89 c2                	mov    edx,eax
c0002aaf:	89 d8                	mov    eax,ebx
c0002ab1:	e8 33 f5 ff ff       	call   c0001fe9 <st_dword>
c0002ab6:	eb bb                	jmp    c0002a73 <put_fat+0x108>
c0002ab8:	83 c4 1c             	add    esp,0x1c
c0002abb:	89 e8                	mov    eax,ebp
c0002abd:	5b                   	pop    ebx
c0002abe:	5e                   	pop    esi
c0002abf:	5f                   	pop    edi
c0002ac0:	5d                   	pop    ebp
c0002ac1:	c3                   	ret    

c0002ac2 <dir_clear>:
c0002ac2:	55                   	push   ebp
c0002ac3:	57                   	push   edi
c0002ac4:	56                   	push   esi
c0002ac5:	89 c6                	mov    esi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	83 ec 1c             	sub    esp,0x1c
c0002acb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002acf:	e8 f0 f9 ff ff       	call   c00024c4 <sync_window>
c0002ad4:	85 c0                	test   eax,eax
c0002ad6:	0f 85 c0 00 00 00    	jne    c0002b9c <dir_clear+0xda>
c0002adc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ae0:	89 f0                	mov    eax,esi
c0002ae2:	e8 30 f7 ff ff       	call   c0002217 <clst2sect>
c0002ae7:	31 d2                	xor    edx,edx
c0002ae9:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002aec:	89 c5                	mov    ebp,eax
c0002aee:	b9 00 02 00 00       	mov    ecx,0x200
c0002af3:	8d 46 34             	lea    eax,[esi+0x34]
c0002af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002afa:	e8 02 f5 ff ff       	call   c0002001 <mem_set>
c0002aff:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b03:	c1 e3 09             	shl    ebx,0x9
c0002b06:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b0c:	76 1b                	jbe    c0002b29 <dir_clear+0x67>
c0002b0e:	bb 00 80 00 00       	mov    ebx,0x8000
c0002b13:	eb 14                	jmp    c0002b29 <dir_clear+0x67>
c0002b15:	83 ec 0c             	sub    esp,0xc
c0002b18:	53                   	push   ebx
c0002b19:	e8 ea 32 00 00       	call   c0005e08 <ff_memalloc>
c0002b1e:	83 c4 10             	add    esp,0x10
c0002b21:	89 c7                	mov    edi,eax
c0002b23:	85 c0                	test   eax,eax
c0002b25:	75 7c                	jne    c0002ba3 <dir_clear+0xe1>
c0002b27:	d1 eb                	shr    ebx,1
c0002b29:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b2f:	77 e4                	ja     c0002b15 <dir_clear+0x53>
c0002b31:	31 db                	xor    ebx,ebx
c0002b33:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b37:	39 d8                	cmp    eax,ebx
c0002b39:	76 53                	jbe    c0002b8e <dir_clear+0xcc>
c0002b3b:	6a 01                	push   0x1
c0002b3d:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b40:	50                   	push   eax
c0002b41:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b49:	50                   	push   eax
c0002b4a:	e8 3c f4 ff ff       	call   c0001f8b <disk_write>
c0002b4f:	83 c4 10             	add    esp,0x10
c0002b52:	85 c0                	test   eax,eax
c0002b54:	75 38                	jne    c0002b8e <dir_clear+0xcc>
c0002b56:	43                   	inc    ebx
c0002b57:	eb da                	jmp    c0002b33 <dir_clear+0x71>
c0002b59:	52                   	push   edx
c0002b5a:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b61:	50                   	push   eax
c0002b62:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b66:	57                   	push   edi
c0002b67:	50                   	push   eax
c0002b68:	e8 1e f4 ff ff       	call   c0001f8b <disk_write>
c0002b6d:	83 c4 10             	add    esp,0x10
c0002b70:	85 c0                	test   eax,eax
c0002b72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b76:	75 0a                	jne    c0002b82 <dir_clear+0xc0>
c0002b78:	01 d3                	add    ebx,edx
c0002b7a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7e:	39 d8                	cmp    eax,ebx
c0002b80:	77 d7                	ja     c0002b59 <dir_clear+0x97>
c0002b82:	83 ec 0c             	sub    esp,0xc
c0002b85:	57                   	push   edi
c0002b86:	e8 95 32 00 00       	call   c0005e20 <ff_memfree>
c0002b8b:	83 c4 10             	add    esp,0x10
c0002b8e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b92:	39 d8                	cmp    eax,ebx
c0002b94:	0f 95 c0             	setne  al
c0002b97:	0f b6 c0             	movzx  eax,al
c0002b9a:	eb 19                	jmp    c0002bb5 <dir_clear+0xf3>
c0002b9c:	b8 01 00 00 00       	mov    eax,0x1
c0002ba1:	eb 12                	jmp    c0002bb5 <dir_clear+0xf3>
c0002ba3:	89 d9                	mov    ecx,ebx
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	e8 55 f4 ff ff       	call   c0002001 <mem_set>
c0002bac:	89 da                	mov    edx,ebx
c0002bae:	31 db                	xor    ebx,ebx
c0002bb0:	c1 ea 09             	shr    edx,0x9
c0002bb3:	eb c5                	jmp    c0002b7a <dir_clear+0xb8>
c0002bb5:	83 c4 1c             	add    esp,0x1c
c0002bb8:	5b                   	pop    ebx
c0002bb9:	5e                   	pop    esi
c0002bba:	5f                   	pop    edi
c0002bbb:	5d                   	pop    ebp
c0002bbc:	c3                   	ret    

c0002bbd <create_name>:
c0002bbd:	55                   	push   ebp
c0002bbe:	57                   	push   edi
c0002bbf:	89 d7                	mov    edi,edx
c0002bc1:	56                   	push   esi
c0002bc2:	31 f6                	xor    esi,esi
c0002bc4:	53                   	push   ebx
c0002bc5:	83 ec 3c             	sub    esp,0x3c
c0002bc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002bcc:	8b 02                	mov    eax,DWORD PTR [edx]
c0002bce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0002bd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002bdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bdf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002be3:	e8 5e f4 ff ff       	call   c0002046 <tchar2uni>
c0002be8:	89 c3                	mov    ebx,eax
c0002bea:	83 f8 ff             	cmp    eax,0xffffffff
c0002bed:	75 0a                	jne    c0002bf9 <create_name+0x3c>
c0002bef:	b8 06 00 00 00       	mov    eax,0x6
c0002bf4:	e9 93 02 00 00       	jmp    c0002e8c <create_name+0x2cf>
c0002bf9:	3d ff ff 00 00       	cmp    eax,0xffff
c0002bfe:	76 0c                	jbe    c0002c0c <create_name+0x4f>
c0002c00:	c1 e8 10             	shr    eax,0x10
c0002c03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c07:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002c0b:	46                   	inc    esi
c0002c0c:	0f b7 d3             	movzx  edx,bx
c0002c0f:	83 fa 1f             	cmp    edx,0x1f
c0002c12:	76 4a                	jbe    c0002c5e <create_name+0xa1>
c0002c14:	83 fa 5c             	cmp    edx,0x5c
c0002c17:	74 30                	je     c0002c49 <create_name+0x8c>
c0002c19:	83 fa 2f             	cmp    edx,0x2f
c0002c1c:	74 2b                	je     c0002c49 <create_name+0x8c>
c0002c1e:	83 fa 7f             	cmp    edx,0x7f
c0002c21:	77 0e                	ja     c0002c31 <create_name+0x74>
c0002c23:	b8 42 0f 02 c0       	mov    eax,0xc0020f42
c0002c28:	e8 02 f4 ff ff       	call   c000202f <chk_chr>
c0002c2d:	85 c0                	test   eax,eax
c0002c2f:	75 be                	jne    c0002bef <create_name+0x32>
c0002c31:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c37:	77 b6                	ja     c0002bef <create_name+0x32>
c0002c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c3d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c41:	46                   	inc    esi
c0002c42:	eb 9b                	jmp    c0002bdf <create_name+0x22>
c0002c44:	40                   	inc    eax
c0002c45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c4d:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c50:	83 fa 2f             	cmp    edx,0x2f
c0002c53:	74 ef                	je     c0002c44 <create_name+0x87>
c0002c55:	83 fa 5c             	cmp    edx,0x5c
c0002c58:	74 ea                	je     c0002c44 <create_name+0x87>
c0002c5a:	31 db                	xor    ebx,ebx
c0002c5c:	eb 02                	jmp    c0002c60 <create_name+0xa3>
c0002c5e:	b3 04                	mov    bl,0x4
c0002c60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c64:	89 07                	mov    DWORD PTR [edi],eax
c0002c66:	85 f6                	test   esi,esi
c0002c68:	74 16                	je     c0002c80 <create_name+0xc3>
c0002c6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c6e:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002c73:	83 f8 20             	cmp    eax,0x20
c0002c76:	74 05                	je     c0002c7d <create_name+0xc0>
c0002c78:	83 f8 2e             	cmp    eax,0x2e
c0002c7b:	75 03                	jne    c0002c80 <create_name+0xc3>
c0002c7d:	4e                   	dec    esi
c0002c7e:	eb e6                	jmp    c0002c66 <create_name+0xa9>
c0002c80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c84:	31 ff                	xor    edi,edi
c0002c86:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002c8c:	85 f6                	test   esi,esi
c0002c8e:	0f 84 5b ff ff ff    	je     c0002bef <create_name+0x32>
c0002c94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c98:	8d 57 01             	lea    edx,[edi+0x1]
c0002c9b:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c9f:	83 f8 20             	cmp    eax,0x20
c0002ca2:	75 04                	jne    c0002ca8 <create_name+0xeb>
c0002ca4:	89 d7                	mov    edi,edx
c0002ca6:	eb ec                	jmp    c0002c94 <create_name+0xd7>
c0002ca8:	85 ff                	test   edi,edi
c0002caa:	75 05                	jne    c0002cb1 <create_name+0xf4>
c0002cac:	83 f8 2e             	cmp    eax,0x2e
c0002caf:	75 08                	jne    c0002cb9 <create_name+0xfc>
c0002cb1:	83 cb 03             	or     ebx,0x3
c0002cb4:	eb 03                	jmp    c0002cb9 <create_name+0xfc>
c0002cb6:	4e                   	dec    esi
c0002cb7:	74 0c                	je     c0002cc5 <create_name+0x108>
c0002cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cbd:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002cc3:	75 f1                	jne    c0002cb6 <create_name+0xf9>
c0002cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002cc9:	b9 0b 00 00 00       	mov    ecx,0xb
c0002cce:	83 c0 20             	add    eax,0x20
c0002cd1:	ba 20 00 00 00       	mov    edx,0x20
c0002cd6:	31 ed                	xor    ebp,ebp
c0002cd8:	e8 24 f3 ff ff       	call   c0002001 <mem_set>
c0002cdd:	b9 08 00 00 00       	mov    ecx,0x8
c0002ce2:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002ce7:	8d 47 01             	lea    eax,[edi+0x1]
c0002cea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002cee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cf2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002cf6:	89 c7                	mov    edi,eax
c0002cf8:	85 c0                	test   eax,eax
c0002cfa:	0f 84 25 01 00 00    	je     c0002e25 <create_name+0x268>
c0002d00:	83 f8 20             	cmp    eax,0x20
c0002d03:	74 0f                	je     c0002d14 <create_name+0x157>
c0002d05:	83 f8 2e             	cmp    eax,0x2e
c0002d08:	75 13                	jne    c0002d1d <create_name+0x160>
c0002d0a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d0e:	0f 84 6a 01 00 00    	je     c0002e7e <create_name+0x2c1>
c0002d14:	83 cb 03             	or     ebx,0x3
c0002d17:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002d1b:	eb ca                	jmp    c0002ce7 <create_name+0x12a>
c0002d1d:	39 cd                	cmp    ebp,ecx
c0002d1f:	73 0b                	jae    c0002d2c <create_name+0x16f>
c0002d21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d25:	75 3f                	jne    c0002d66 <create_name+0x1a9>
c0002d27:	e9 52 01 00 00       	jmp    c0002e7e <create_name+0x2c1>
c0002d2c:	83 f9 0b             	cmp    ecx,0xb
c0002d2f:	75 0d                	jne    c0002d3e <create_name+0x181>
c0002d31:	83 cb 03             	or     ebx,0x3
c0002d34:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d39:	e9 e7 00 00 00       	jmp    c0002e25 <create_name+0x268>
c0002d3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d42:	74 0d                	je     c0002d51 <create_name+0x194>
c0002d44:	83 cb 03             	or     ebx,0x3
c0002d47:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d4b:	0f 87 d4 00 00 00    	ja     c0002e25 <create_name+0x268>
c0002d51:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d56:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002d5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d5f:	bd 08 00 00 00       	mov    ebp,0x8
c0002d64:	eb b1                	jmp    c0002d17 <create_name+0x15a>
c0002d66:	83 f8 7f             	cmp    eax,0x7f
c0002d69:	76 66                	jbe    c0002dd1 <create_name+0x214>
c0002d6b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6f:	89 d9                	mov    ecx,ebx
c0002d71:	83 c9 02             	or     ecx,0x2
c0002d74:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d78:	52                   	push   edx
c0002d79:	52                   	push   edx
c0002d7a:	68 b5 01 00 00       	push   0x1b5
c0002d7f:	50                   	push   eax
c0002d80:	e8 b3 30 00 00       	call   c0005e38 <ff_uni2oem>
c0002d85:	83 c4 10             	add    esp,0x10
c0002d88:	89 c7                	mov    edi,eax
c0002d8a:	a8 80                	test   al,0x80
c0002d8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002d90:	74 0c                	je     c0002d9e <create_name+0x1e1>
c0002d92:	83 e7 7f             	and    edi,0x7f
c0002d95:	0f b6 bf 00 10 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdf000]
c0002d9c:	eb 2a                	jmp    c0002dc8 <create_name+0x20b>
c0002d9e:	0f b7 c0             	movzx  eax,ax
c0002da1:	3d ff 00 00 00       	cmp    eax,0xff
c0002da6:	76 20                	jbe    c0002dc8 <create_name+0x20b>
c0002da8:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002dab:	39 ea                	cmp    edx,ebp
c0002dad:	77 0a                	ja     c0002db9 <create_name+0x1fc>
c0002daf:	83 cb 03             	or     ebx,0x3
c0002db2:	89 cd                	mov    ebp,ecx
c0002db4:	e9 5e ff ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002db9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002dbd:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002dc1:	45                   	inc    ebp
c0002dc2:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dc6:	eb 4d                	jmp    c0002e15 <create_name+0x258>
c0002dc8:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dcc:	66 85 ff             	test   di,di
c0002dcf:	74 19                	je     c0002dea <create_name+0x22d>
c0002dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dd5:	0f b7 d7             	movzx  edx,di
c0002dd8:	b8 4b 0f 02 c0       	mov    eax,0xc0020f4b
c0002ddd:	e8 4d f2 ff ff       	call   c000202f <chk_chr>
c0002de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002de6:	85 c0                	test   eax,eax
c0002de8:	74 0a                	je     c0002df4 <create_name+0x237>
c0002dea:	83 cb 03             	or     ebx,0x3
c0002ded:	bf 5f 00 00 00       	mov    edi,0x5f
c0002df2:	eb 21                	jmp    c0002e15 <create_name+0x258>
c0002df4:	8d 47 bf             	lea    eax,[edi-0x41]
c0002df7:	66 83 f8 19          	cmp    ax,0x19
c0002dfb:	77 07                	ja     c0002e04 <create_name+0x247>
c0002dfd:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e02:	eb 11                	jmp    c0002e15 <create_name+0x258>
c0002e04:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e07:	66 83 f8 19          	cmp    ax,0x19
c0002e0b:	77 08                	ja     c0002e15 <create_name+0x258>
c0002e0d:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e12:	83 ef 20             	sub    edi,0x20
c0002e15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002e19:	89 f8                	mov    eax,edi
c0002e1b:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002e1f:	45                   	inc    ebp
c0002e20:	e9 f2 fe ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e29:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002e2d:	75 04                	jne    c0002e33 <create_name+0x276>
c0002e2f:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002e33:	83 f9 08             	cmp    ecx,0x8
c0002e36:	75 05                	jne    c0002e3d <create_name+0x280>
c0002e38:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e41:	83 e0 0c             	and    eax,0xc
c0002e44:	83 f8 0c             	cmp    eax,0xc
c0002e47:	74 0c                	je     c0002e55 <create_name+0x298>
c0002e49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e4d:	83 e0 03             	and    eax,0x3
c0002e50:	83 f8 03             	cmp    eax,0x3
c0002e53:	75 05                	jne    c0002e5a <create_name+0x29d>
c0002e55:	83 cb 02             	or     ebx,0x2
c0002e58:	eb 19                	jmp    c0002e73 <create_name+0x2b6>
c0002e5a:	f6 c3 02             	test   bl,0x2
c0002e5d:	75 14                	jne    c0002e73 <create_name+0x2b6>
c0002e5f:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002e64:	74 03                	je     c0002e69 <create_name+0x2ac>
c0002e66:	83 cb 10             	or     ebx,0x10
c0002e69:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002e6e:	74 03                	je     c0002e73 <create_name+0x2b6>
c0002e70:	83 cb 08             	or     ebx,0x8
c0002e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e77:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002e7a:	31 c0                	xor    eax,eax
c0002e7c:	eb 0e                	jmp    c0002e8c <create_name+0x2cf>
c0002e7e:	83 f9 0b             	cmp    ecx,0xb
c0002e81:	0f 85 ca fe ff ff    	jne    c0002d51 <create_name+0x194>
c0002e87:	e9 a5 fe ff ff       	jmp    c0002d31 <create_name+0x174>
c0002e8c:	83 c4 3c             	add    esp,0x3c
c0002e8f:	5b                   	pop    ebx
c0002e90:	5e                   	pop    esi
c0002e91:	5f                   	pop    edi
c0002e92:	5d                   	pop    ebp
c0002e93:	c3                   	ret    

c0002e94 <cmp_lfn>:
c0002e94:	55                   	push   ebp
c0002e95:	57                   	push   edi
c0002e96:	89 d7                	mov    edi,edx
c0002e98:	56                   	push   esi
c0002e99:	53                   	push   ebx
c0002e9a:	83 ec 1c             	sub    esp,0x1c
c0002e9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ea1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ea4:	e8 17 f1 ff ff       	call   c0001fc0 <ld_word>
c0002ea9:	66 85 c0             	test   ax,ax
c0002eac:	74 07                	je     c0002eb5 <cmp_lfn+0x21>
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	e9 a1 00 00 00       	jmp    c0002f56 <cmp_lfn+0xc2>
c0002eb5:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002eb7:	bd 01 00 00 00       	mov    ebp,0x1
c0002ebc:	83 e3 3f             	and    ebx,0x3f
c0002ebf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ec7:	4b                   	dec    ebx
c0002ec8:	6b db 0d             	imul   ebx,ebx,0xd
c0002ecb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ecf:	0f b6 80 80 10 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdef80]
c0002ed6:	01 f8                	add    eax,edi
c0002ed8:	e8 e3 f0 ff ff       	call   c0001fc0 <ld_word>
c0002edd:	66 85 ed             	test   bp,bp
c0002ee0:	89 c6                	mov    esi,eax
c0002ee2:	74 3c                	je     c0002f20 <cmp_lfn+0x8c>
c0002ee4:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eea:	77 c2                	ja     c0002eae <cmp_lfn+0x1a>
c0002eec:	83 ec 0c             	sub    esp,0xc
c0002eef:	0f b7 c0             	movzx  eax,ax
c0002ef2:	50                   	push   eax
c0002ef3:	e8 58 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002ef8:	89 c5                	mov    ebp,eax
c0002efa:	8d 43 01             	lea    eax,[ebx+0x1]
c0002efd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002f01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002f05:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f09:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f0c:	e8 3f 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002f11:	83 c4 10             	add    esp,0x10
c0002f14:	39 c5                	cmp    ebp,eax
c0002f16:	75 96                	jne    c0002eae <cmp_lfn+0x1a>
c0002f18:	89 f5                	mov    ebp,esi
c0002f1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002f1e:	eb 0b                	jmp    c0002f2b <cmp_lfn+0x97>
c0002f20:	0f b7 c8             	movzx  ecx,ax
c0002f23:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002f29:	75 83                	jne    c0002eae <cmp_lfn+0x1a>
c0002f2b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002f2f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002f34:	75 95                	jne    c0002ecb <cmp_lfn+0x37>
c0002f36:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f39:	74 16                	je     c0002f51 <cmp_lfn+0xbd>
c0002f3b:	66 85 ed             	test   bp,bp
c0002f3e:	74 11                	je     c0002f51 <cmp_lfn+0xbd>
c0002f40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002f44:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f49:	0f 94 c0             	sete   al
c0002f4c:	0f b6 c0             	movzx  eax,al
c0002f4f:	eb 05                	jmp    c0002f56 <cmp_lfn+0xc2>
c0002f51:	b8 01 00 00 00       	mov    eax,0x1
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	5b                   	pop    ebx
c0002f5a:	5e                   	pop    esi
c0002f5b:	5f                   	pop    edi
c0002f5c:	5d                   	pop    ebp
c0002f5d:	c3                   	ret    

c0002f5e <sync_fs>:
c0002f5e:	56                   	push   esi
c0002f5f:	53                   	push   ebx
c0002f60:	53                   	push   ebx
c0002f61:	89 c3                	mov    ebx,eax
c0002f63:	e8 5c f5 ff ff       	call   c00024c4 <sync_window>
c0002f68:	85 c0                	test   eax,eax
c0002f6a:	0f 85 9a 00 00 00    	jne    c000300a <sync_fs+0xac>
c0002f70:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f73:	75 7b                	jne    c0002ff0 <sync_fs+0x92>
c0002f75:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002f79:	75 75                	jne    c0002ff0 <sync_fs+0x92>
c0002f7b:	b9 00 02 00 00       	mov    ecx,0x200
c0002f80:	8d 73 34             	lea    esi,[ebx+0x34]
c0002f83:	31 d2                	xor    edx,edx
c0002f85:	89 f0                	mov    eax,esi
c0002f87:	e8 75 f0 ff ff       	call   c0002001 <mem_set>
c0002f8c:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002f92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f97:	e8 49 f0 ff ff       	call   c0001fe5 <st_word>
c0002f9c:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fa1:	89 f0                	mov    eax,esi
c0002fa3:	e8 41 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fa8:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fae:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fb3:	e8 31 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fb8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fbb:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fc1:	e8 23 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fc6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002fc9:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002fcf:	e8 15 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002fd9:	40                   	inc    eax
c0002fda:	50                   	push   eax
c0002fdb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fde:	56                   	push   esi
c0002fdf:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fe3:	50                   	push   eax
c0002fe4:	e8 a2 ef ff ff       	call   c0001f8b <disk_write>
c0002fe9:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002fed:	83 c4 10             	add    esp,0x10
c0002ff0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ff4:	51                   	push   ecx
c0002ff5:	6a 00                	push   0x0
c0002ff7:	6a 00                	push   0x0
c0002ff9:	50                   	push   eax
c0002ffa:	e8 a2 ef ff ff       	call   c0001fa1 <disk_ioctl>
c0002fff:	83 c4 10             	add    esp,0x10
c0003002:	85 c0                	test   eax,eax
c0003004:	0f 95 c0             	setne  al
c0003007:	0f b6 c0             	movzx  eax,al
c000300a:	5a                   	pop    edx
c000300b:	5b                   	pop    ebx
c000300c:	5e                   	pop    esi
c000300d:	c3                   	ret    

c000300e <create_partition>:
c000300e:	55                   	push   ebp
c000300f:	0f b6 c0             	movzx  eax,al
c0003012:	57                   	push   edi
c0003013:	56                   	push   esi
c0003014:	53                   	push   ebx
c0003015:	83 ec 40             	sub    esp,0x40
c0003018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000301c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003020:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003024:	8d 44 24 30          	lea    eax,[esp+0x30]
c0003028:	50                   	push   eax
c0003029:	6a 01                	push   0x1
c000302b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000302f:	e8 6d ef ff ff       	call   c0001fa1 <disk_ioctl>
c0003034:	83 c4 10             	add    esp,0x10
c0003037:	85 c0                	test   eax,eax
c0003039:	0f 85 6a 01 00 00    	jne    c00031a9 <create_partition+0x19b>
c000303f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003043:	b9 05 00 00 00       	mov    ecx,0x5
c0003048:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000304c:	be 08 00 00 00       	mov    esi,0x8
c0003051:	89 f0                	mov    eax,esi
c0003053:	31 d2                	xor    edx,edx
c0003055:	0f b6 d8             	movzx  ebx,al
c0003058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000305c:	f7 f3                	div    ebx
c000305e:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003063:	76 0a                	jbe    c000306f <create_partition+0x61>
c0003065:	d1 e6                	shl    esi,1
c0003067:	49                   	dec    ecx
c0003068:	75 e7                	jne    c0003051 <create_partition+0x43>
c000306a:	be ff ff ff ff       	mov    esi,0xffffffff
c000306f:	b9 00 02 00 00       	mov    ecx,0x200
c0003074:	31 d2                	xor    edx,edx
c0003076:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000307a:	e8 82 ef ff ff       	call   c0002001 <mem_set>
c000307f:	b9 64 00 00 00       	mov    ecx,0x64
c0003084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003088:	31 d2                	xor    edx,edx
c000308a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003092:	f7 f1                	div    ecx
c0003094:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003099:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000309d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030a1:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030a7:	89 f0                	mov    eax,esi
c00030a9:	0f b6 c0             	movzx  eax,al
c00030ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030b0:	85 c9                	test   ecx,ecx
c00030b2:	75 34                	jne    c00030e8 <create_partition+0xda>
c00030b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030b8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030bd:	05 fe 01 00 00       	add    eax,0x1fe
c00030c2:	e8 1e ef ff ff       	call   c0001fe5 <st_word>
c00030c7:	6a 01                	push   0x1
c00030c9:	6a 00                	push   0x0
c00030cb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00030cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00030d3:	e8 b3 ee ff ff       	call   c0001f8b <disk_write>
c00030d8:	83 c4 10             	add    esp,0x10
c00030db:	85 c0                	test   eax,eax
c00030dd:	0f 95 c0             	setne  al
c00030e0:	0f b6 c0             	movzx  eax,al
c00030e3:	e9 c6 00 00 00       	jmp    c00031ae <create_partition+0x1a0>
c00030e8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00030ec:	76 c6                	jbe    c00030b4 <create_partition+0xa6>
c00030ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030f6:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030f9:	83 fe 64             	cmp    esi,0x64
c00030fc:	77 0d                	ja     c000310b <create_partition+0xfd>
c00030fe:	74 07                	je     c0003107 <create_partition+0xf9>
c0003100:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003105:	eb 04                	jmp    c000310b <create_partition+0xfd>
c0003107:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000310b:	31 c0                	xor    eax,eax
c000310d:	89 f2                	mov    edx,esi
c000310f:	01 ca                	add    edx,ecx
c0003111:	0f 92 c0             	setb   al
c0003114:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0003118:	77 04                	ja     c000311e <create_partition+0x110>
c000311a:	85 c0                	test   eax,eax
c000311c:	74 08                	je     c0003126 <create_partition+0x118>
c000311e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003122:	29 ce                	sub    esi,ecx
c0003124:	eb 04                	jmp    c000312a <create_partition+0x11c>
c0003126:	85 f6                	test   esi,esi
c0003128:	74 8a                	je     c00030b4 <create_partition+0xa6>
c000312a:	89 ca                	mov    edx,ecx
c000312c:	89 d8                	mov    eax,ebx
c000312e:	bf 3f 00 00 00       	mov    edi,0x3f
c0003133:	e8 b1 ee ff ff       	call   c0001fe9 <st_dword>
c0003138:	8d 43 04             	lea    eax,[ebx+0x4]
c000313b:	89 f2                	mov    edx,esi
c000313d:	83 c3 10             	add    ebx,0x10
c0003140:	e8 a4 ee ff ff       	call   c0001fe9 <st_dword>
c0003145:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003149:	31 d2                	xor    edx,edx
c000314b:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c000314e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003152:	89 c8                	mov    eax,ecx
c0003154:	01 f1                	add    ecx,esi
c0003156:	f7 f7                	div    edi
c0003158:	89 d5                	mov    ebp,edx
c000315a:	31 d2                	xor    edx,edx
c000315c:	45                   	inc    ebp
c000315d:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003161:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003164:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003167:	89 c2                	mov    edx,eax
c0003169:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316c:	c1 ea 02             	shr    edx,0x2
c000316f:	83 e2 c0             	and    edx,0xffffffc0
c0003172:	09 ea                	or     edx,ebp
c0003174:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003177:	31 d2                	xor    edx,edx
c0003179:	f7 f7                	div    edi
c000317b:	89 d6                	mov    esi,edx
c000317d:	31 d2                	xor    edx,edx
c000317f:	46                   	inc    esi
c0003180:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003184:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003187:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c000318a:	89 c7                	mov    edi,eax
c000318c:	c1 ef 02             	shr    edi,0x2
c000318f:	83 e7 c0             	and    edi,0xffffffc0
c0003192:	09 fe                	or     esi,edi
c0003194:	89 f2                	mov    edx,esi
c0003196:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003199:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c000319e:	0f 85 0c ff ff ff    	jne    c00030b0 <create_partition+0xa2>
c00031a4:	e9 0b ff ff ff       	jmp    c00030b4 <create_partition+0xa6>
c00031a9:	b8 01 00 00 00       	mov    eax,0x1
c00031ae:	83 c4 3c             	add    esp,0x3c
c00031b1:	5b                   	pop    ebx
c00031b2:	5e                   	pop    esi
c00031b3:	5f                   	pop    edi
c00031b4:	5d                   	pop    ebp
c00031b5:	c3                   	ret    

c00031b6 <get_fileinfo>:
c00031b6:	55                   	push   ebp
c00031b7:	57                   	push   edi
c00031b8:	56                   	push   esi
c00031b9:	53                   	push   ebx
c00031ba:	83 ec 1c             	sub    esp,0x1c
c00031bd:	8b 30                	mov    esi,DWORD PTR [eax]
c00031bf:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031c3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031c7:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031cb:	0f 84 d3 01 00 00    	je     c00033a4 <get_fileinfo+0x1ee>
c00031d1:	89 d3                	mov    ebx,edx
c00031d3:	89 c6                	mov    esi,eax
c00031d5:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031d9:	74 72                	je     c000324d <get_fileinfo+0x97>
c00031db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00031e3:	31 ed                	xor    ebp,ebp
c00031e5:	31 ff                	xor    edi,edi
c00031e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00031eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00031ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00031f2:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00031f6:	89 c2                	mov    edx,eax
c00031f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031fc:	85 c0                	test   eax,eax
c00031fe:	74 41                	je     c0003241 <get_fileinfo+0x8b>
c0003200:	0f b7 c5             	movzx  eax,bp
c0003203:	85 c0                	test   eax,eax
c0003205:	75 0d                	jne    c0003214 <get_fileinfo+0x5e>
c0003207:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000320d:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003212:	76 22                	jbe    c0003236 <get_fileinfo+0x80>
c0003214:	c1 e0 10             	shl    eax,0x10
c0003217:	b9 ff 00 00 00       	mov    ecx,0xff
c000321c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003220:	29 f9                	sub    ecx,edi
c0003222:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003226:	e8 f3 ee ff ff       	call   c000211e <put_utf>
c000322b:	0f b6 c0             	movzx  eax,al
c000322e:	85 c0                	test   eax,eax
c0003230:	74 0d                	je     c000323f <get_fileinfo+0x89>
c0003232:	01 c7                	add    edi,eax
c0003234:	31 d2                	xor    edx,edx
c0003236:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000323b:	89 d5                	mov    ebp,edx
c000323d:	eb a8                	jmp    c00031e7 <get_fileinfo+0x31>
c000323f:	31 ff                	xor    edi,edi
c0003241:	66 85 ed             	test   bp,bp
c0003244:	74 02                	je     c0003248 <get_fileinfo+0x92>
c0003246:	31 ff                	xor    edi,edi
c0003248:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c000324d:	31 ff                	xor    edi,edi
c000324f:	31 c9                	xor    ecx,ecx
c0003251:	83 f9 0a             	cmp    ecx,0xa
c0003254:	0f 87 ac 00 00 00    	ja     c0003306 <get_fileinfo+0x150>
c000325a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000325d:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003260:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003264:	89 c2                	mov    edx,eax
c0003266:	83 f8 20             	cmp    eax,0x20
c0003269:	0f 84 90 00 00 00    	je     c00032ff <get_fileinfo+0x149>
c000326f:	83 f8 05             	cmp    eax,0x5
c0003272:	75 05                	jne    c0003279 <get_fileinfo+0xc3>
c0003274:	ba e5 00 00 00       	mov    edx,0xe5
c0003279:	83 ff 0b             	cmp    edi,0xb
c000327c:	77 0b                	ja     c0003289 <get_fileinfo+0xd3>
c000327e:	83 fd 09             	cmp    ebp,0x9
c0003281:	75 06                	jne    c0003289 <get_fileinfo+0xd3>
c0003283:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003288:	47                   	inc    edi
c0003289:	0f b7 c2             	movzx  eax,dx
c000328c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003290:	e8 ab ed ff ff       	call   c0002040 <dbc_1st>
c0003295:	85 c0                	test   eax,eax
c0003297:	74 2f                	je     c00032c8 <get_fileinfo+0x112>
c0003299:	83 fd 08             	cmp    ebp,0x8
c000329c:	74 2a                	je     c00032c8 <get_fileinfo+0x112>
c000329e:	83 fd 0b             	cmp    ebp,0xb
c00032a1:	74 25                	je     c00032c8 <get_fileinfo+0x112>
c00032a3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032a6:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00032ae:	e8 90 ed ff ff       	call   c0002043 <dbc_2nd>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <get_fileinfo+0x112>
c00032b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032bb:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00032c0:	c1 e0 08             	shl    eax,0x8
c00032c3:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032c6:	09 c2                	or     edx,eax
c00032c8:	0f b7 d2             	movzx  edx,dx
c00032cb:	50                   	push   eax
c00032cc:	50                   	push   eax
c00032cd:	68 b5 01 00 00       	push   0x1b5
c00032d2:	52                   	push   edx
c00032d3:	e8 00 2c 00 00       	call   c0005ed8 <ff_oem2uni>
c00032d8:	83 c4 10             	add    esp,0x10
c00032db:	0f b7 c0             	movzx  eax,ax
c00032de:	85 c0                	test   eax,eax
c00032e0:	75 04                	jne    c00032e6 <get_fileinfo+0x130>
c00032e2:	31 ff                	xor    edi,edi
c00032e4:	eb 20                	jmp    c0003306 <get_fileinfo+0x150>
c00032e6:	b9 0c 00 00 00       	mov    ecx,0xc
c00032eb:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00032ef:	29 f9                	sub    ecx,edi
c00032f1:	e8 28 ee ff ff       	call   c000211e <put_utf>
c00032f6:	0f b6 c0             	movzx  eax,al
c00032f9:	85 c0                	test   eax,eax
c00032fb:	74 e5                	je     c00032e2 <get_fileinfo+0x12c>
c00032fd:	01 c7                	add    edi,eax
c00032ff:	89 e9                	mov    ecx,ebp
c0003301:	e9 4b ff ff ff       	jmp    c0003251 <get_fileinfo+0x9b>
c0003306:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000330b:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000330f:	75 5f                	jne    c0003370 <get_fileinfo+0x1ba>
c0003311:	85 ff                	test   edi,edi
c0003313:	75 0b                	jne    c0003320 <get_fileinfo+0x16a>
c0003315:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003319:	ba 01 00 00 00       	mov    edx,0x1
c000331e:	eb 3e                	jmp    c000335e <get_fileinfo+0x1a8>
c0003320:	bf 08 00 00 00       	mov    edi,0x8
c0003325:	31 d2                	xor    edx,edx
c0003327:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c000332d:	84 c0                	test   al,al
c000332f:	74 2d                	je     c000335e <get_fileinfo+0x1a8>
c0003331:	66 83 f8 2e          	cmp    ax,0x2e
c0003335:	74 1b                	je     c0003352 <get_fileinfo+0x19c>
c0003337:	8d 48 bf             	lea    ecx,[eax-0x41]
c000333a:	66 83 f9 19          	cmp    cx,0x19
c000333e:	77 17                	ja     c0003357 <get_fileinfo+0x1a1>
c0003340:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003343:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003346:	21 f9                	and    ecx,edi
c0003348:	80 e1 18             	and    cl,0x18
c000334b:	74 0a                	je     c0003357 <get_fileinfo+0x1a1>
c000334d:	83 c0 20             	add    eax,0x20
c0003350:	eb 05                	jmp    c0003357 <get_fileinfo+0x1a1>
c0003352:	bf 10 00 00 00       	mov    edi,0x10
c0003357:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000335b:	42                   	inc    edx
c000335c:	eb c9                	jmp    c0003327 <get_fileinfo+0x171>
c000335e:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003363:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003366:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000336a:	75 04                	jne    c0003370 <get_fileinfo+0x1ba>
c000336c:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003370:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003373:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003376:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003379:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000337c:	83 c0 1c             	add    eax,0x1c
c000337f:	e8 49 ec ff ff       	call   c0001fcd <ld_dword>
c0003384:	89 03                	mov    DWORD PTR [ebx],eax
c0003386:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003389:	83 c0 16             	add    eax,0x16
c000338c:	e8 2f ec ff ff       	call   c0001fc0 <ld_word>
c0003391:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003395:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003398:	83 c0 18             	add    eax,0x18
c000339b:	e8 20 ec ff ff       	call   c0001fc0 <ld_word>
c00033a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <ld_clust.isra.0>:
c00033ac:	56                   	push   esi
c00033ad:	89 c6                	mov    esi,eax
c00033af:	53                   	push   ebx
c00033b0:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033b3:	89 d3                	mov    ebx,edx
c00033b5:	e8 06 ec ff ff       	call   c0001fc0 <ld_word>
c00033ba:	0f b7 c8             	movzx  ecx,ax
c00033bd:	89 f0                	mov    eax,esi
c00033bf:	3c 03                	cmp    al,0x3
c00033c1:	75 0d                	jne    c00033d0 <ld_clust.isra.0+0x24>
c00033c3:	8d 43 14             	lea    eax,[ebx+0x14]
c00033c6:	e8 f5 eb ff ff       	call   c0001fc0 <ld_word>
c00033cb:	c1 e0 10             	shl    eax,0x10
c00033ce:	09 c1                	or     ecx,eax
c00033d0:	89 c8                	mov    eax,ecx
c00033d2:	5b                   	pop    ebx
c00033d3:	5e                   	pop    esi
c00033d4:	c3                   	ret    

c00033d5 <st_clust.isra.1>:
c00033d5:	56                   	push   esi
c00033d6:	89 c6                	mov    esi,eax
c00033d8:	53                   	push   ebx
c00033d9:	89 d3                	mov    ebx,edx
c00033db:	0f b7 d1             	movzx  edx,cx
c00033de:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00033e1:	e8 ff eb ff ff       	call   c0001fe5 <st_word>
c00033e6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00033e9:	75 0f                	jne    c00033fa <st_clust.isra.1+0x25>
c00033eb:	c1 e9 10             	shr    ecx,0x10
c00033ee:	8d 43 14             	lea    eax,[ebx+0x14]
c00033f1:	89 ca                	mov    edx,ecx
c00033f3:	5b                   	pop    ebx
c00033f4:	5e                   	pop    esi
c00033f5:	e9 eb eb ff ff       	jmp    c0001fe5 <st_word>
c00033fa:	5b                   	pop    ebx
c00033fb:	5e                   	pop    esi
c00033fc:	c3                   	ret    

c00033fd <get_fat.isra.2>:
c00033fd:	b9 01 00 00 00       	mov    ecx,0x1
c0003402:	83 fa 01             	cmp    edx,0x1
c0003405:	0f 86 f3 00 00 00    	jbe    c00034fe <get_fat.isra.2+0x101>
c000340b:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000340e:	0f 83 ea 00 00 00    	jae    c00034fe <get_fat.isra.2+0x101>
c0003414:	55                   	push   ebp
c0003415:	57                   	push   edi
c0003416:	89 c7                	mov    edi,eax
c0003418:	56                   	push   esi
c0003419:	89 d6                	mov    esi,edx
c000341b:	53                   	push   ebx
c000341c:	83 ec 0c             	sub    esp,0xc
c000341f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003422:	83 f8 02             	cmp    eax,0x2
c0003425:	74 78                	je     c000349f <get_fat.isra.2+0xa2>
c0003427:	83 f8 03             	cmp    eax,0x3
c000342a:	0f 84 96 00 00 00    	je     c00034c6 <get_fat.isra.2+0xc9>
c0003430:	48                   	dec    eax
c0003431:	0f 85 bd 00 00 00    	jne    c00034f4 <get_fat.isra.2+0xf7>
c0003437:	89 d3                	mov    ebx,edx
c0003439:	89 f8                	mov    eax,edi
c000343b:	d1 eb                	shr    ebx,1
c000343d:	01 d3                	add    ebx,edx
c000343f:	89 da                	mov    edx,ebx
c0003441:	c1 ea 09             	shr    edx,0x9
c0003444:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003447:	e8 db f0 ff ff       	call   c0002527 <move_window>
c000344c:	85 c0                	test   eax,eax
c000344e:	74 08                	je     c0003458 <get_fat.isra.2+0x5b>
c0003450:	83 c9 ff             	or     ecx,0xffffffff
c0003453:	e9 9c 00 00 00       	jmp    c00034f4 <get_fat.isra.2+0xf7>
c0003458:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000345b:	89 f8                	mov    eax,edi
c000345d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003463:	89 ea                	mov    edx,ebp
c0003465:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003469:	c1 ea 09             	shr    edx,0x9
c000346c:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000346f:	e8 b3 f0 ff ff       	call   c0002527 <move_window>
c0003474:	85 c0                	test   eax,eax
c0003476:	75 d8                	jne    c0003450 <get_fat.isra.2+0x53>
c0003478:	0f b6 c3             	movzx  eax,bl
c000347b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003481:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003486:	c1 e3 08             	shl    ebx,0x8
c0003489:	09 c3                	or     ebx,eax
c000348b:	89 d9                	mov    ecx,ebx
c000348d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003493:	83 e6 01             	and    esi,0x1
c0003496:	74 5c                	je     c00034f4 <get_fat.isra.2+0xf7>
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	c1 e9 04             	shr    ecx,0x4
c000349d:	eb 55                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c000349f:	c1 ea 08             	shr    edx,0x8
c00034a2:	89 f8                	mov    eax,edi
c00034a4:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034a7:	e8 7b f0 ff ff       	call   c0002527 <move_window>
c00034ac:	85 c0                	test   eax,eax
c00034ae:	75 a0                	jne    c0003450 <get_fat.isra.2+0x53>
c00034b0:	01 f6                	add    esi,esi
c00034b2:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00034b8:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034bc:	e8 ff ea ff ff       	call   c0001fc0 <ld_word>
c00034c1:	0f b7 c8             	movzx  ecx,ax
c00034c4:	eb 2e                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c00034c6:	c1 ea 07             	shr    edx,0x7
c00034c9:	89 f8                	mov    eax,edi
c00034cb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034ce:	e8 54 f0 ff ff       	call   c0002527 <move_window>
c00034d3:	85 c0                	test   eax,eax
c00034d5:	0f 85 75 ff ff ff    	jne    c0003450 <get_fat.isra.2+0x53>
c00034db:	c1 e6 02             	shl    esi,0x2
c00034de:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00034e4:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034e8:	e8 e0 ea ff ff       	call   c0001fcd <ld_dword>
c00034ed:	25 ff ff ff 0f       	and    eax,0xfffffff
c00034f2:	89 c1                	mov    ecx,eax
c00034f4:	83 c4 0c             	add    esp,0xc
c00034f7:	89 c8                	mov    eax,ecx
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    
c00034fe:	89 c8                	mov    eax,ecx
c0003500:	c3                   	ret    

c0003501 <dir_sdi>:
c0003501:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003507:	0f 87 b6 00 00 00    	ja     c00035c3 <dir_sdi+0xc2>
c000350d:	55                   	push   ebp
c000350e:	57                   	push   edi
c000350f:	56                   	push   esi
c0003510:	53                   	push   ebx
c0003511:	89 d3                	mov    ebx,edx
c0003513:	83 ec 1c             	sub    esp,0x1c
c0003516:	f6 c2 1f             	test   dl,0x1f
c0003519:	74 0a                	je     c0003525 <dir_sdi+0x24>
c000351b:	b8 02 00 00 00       	mov    eax,0x2
c0003520:	e9 96 00 00 00       	jmp    c00035bb <dir_sdi+0xba>
c0003525:	89 c6                	mov    esi,eax
c0003527:	8b 38                	mov    edi,DWORD PTR [eax]
c0003529:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000352c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000352f:	85 c9                	test   ecx,ecx
c0003531:	75 23                	jne    c0003556 <dir_sdi+0x55>
c0003533:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003536:	76 07                	jbe    c000353f <dir_sdi+0x3e>
c0003538:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000353b:	85 c0                	test   eax,eax
c000353d:	75 15                	jne    c0003554 <dir_sdi+0x53>
c000353f:	89 da                	mov    edx,ebx
c0003541:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003545:	c1 ea 05             	shr    edx,0x5
c0003548:	39 c2                	cmp    edx,eax
c000354a:	73 cf                	jae    c000351b <dir_sdi+0x1a>
c000354c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000354f:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003552:	eb 3d                	jmp    c0003591 <dir_sdi+0x90>
c0003554:	89 c1                	mov    ecx,eax
c0003556:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000355a:	c1 e5 09             	shl    ebp,0x9
c000355d:	89 ca                	mov    edx,ecx
c000355f:	39 eb                	cmp    ebx,ebp
c0003561:	72 1c                	jb     c000357f <dir_sdi+0x7e>
c0003563:	8b 06                	mov    eax,DWORD PTR [esi]
c0003565:	e8 93 fe ff ff       	call   c00033fd <get_fat.isra.2>
c000356a:	89 c1                	mov    ecx,eax
c000356c:	83 f8 ff             	cmp    eax,0xffffffff
c000356f:	74 45                	je     c00035b6 <dir_sdi+0xb5>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	76 a5                	jbe    c000351b <dir_sdi+0x1a>
c0003576:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003579:	76 a0                	jbe    c000351b <dir_sdi+0x1a>
c000357b:	29 eb                	sub    ebx,ebp
c000357d:	eb de                	jmp    c000355d <dir_sdi+0x5c>
c000357f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003583:	89 f8                	mov    eax,edi
c0003585:	e8 8d ec ff ff       	call   c0002217 <clst2sect>
c000358a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000358e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003591:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003594:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003597:	85 d2                	test   edx,edx
c0003599:	74 80                	je     c000351b <dir_sdi+0x1a>
c000359b:	89 d8                	mov    eax,ebx
c000359d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035a3:	c1 e8 09             	shr    eax,0x9
c00035a6:	01 d0                	add    eax,edx
c00035a8:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035ab:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00035af:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035b2:	31 c0                	xor    eax,eax
c00035b4:	eb 05                	jmp    c00035bb <dir_sdi+0xba>
c00035b6:	b8 01 00 00 00       	mov    eax,0x1
c00035bb:	83 c4 1c             	add    esp,0x1c
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    
c00035c3:	b8 02 00 00 00       	mov    eax,0x2
c00035c8:	c3                   	ret    

c00035c9 <create_chain>:
c00035c9:	55                   	push   ebp
c00035ca:	89 c5                	mov    ebp,eax
c00035cc:	57                   	push   edi
c00035cd:	89 d7                	mov    edi,edx
c00035cf:	56                   	push   esi
c00035d0:	53                   	push   ebx
c00035d1:	83 ec 1c             	sub    esp,0x1c
c00035d4:	85 d2                	test   edx,edx
c00035d6:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d8:	75 0e                	jne    c00035e8 <create_chain+0x1f>
c00035da:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00035dd:	85 c9                	test   ecx,ecx
c00035df:	74 34                	je     c0003615 <create_chain+0x4c>
c00035e1:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00035e4:	77 34                	ja     c000361a <create_chain+0x51>
c00035e6:	eb 2d                	jmp    c0003615 <create_chain+0x4c>
c00035e8:	89 f0                	mov    eax,esi
c00035ea:	e8 0e fe ff ff       	call   c00033fd <get_fat.isra.2>
c00035ef:	89 c3                	mov    ebx,eax
c00035f1:	83 f8 01             	cmp    eax,0x1
c00035f4:	77 0a                	ja     c0003600 <create_chain+0x37>
c00035f6:	bb 01 00 00 00       	mov    ebx,0x1
c00035fb:	e9 fe 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003600:	83 f8 ff             	cmp    eax,0xffffffff
c0003603:	0f 84 f2 00 00 00    	je     c00036fb <create_chain+0x132>
c0003609:	89 f9                	mov    ecx,edi
c000360b:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000360e:	76 0a                	jbe    c000361a <create_chain+0x51>
c0003610:	e9 e9 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003615:	b9 01 00 00 00       	mov    ecx,0x1
c000361a:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000361e:	75 07                	jne    c0003627 <create_chain+0x5e>
c0003620:	31 db                	xor    ebx,ebx
c0003622:	e9 d7 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003627:	39 f9                	cmp    ecx,edi
c0003629:	75 46                	jne    c0003671 <create_chain+0xa8>
c000362b:	8d 59 01             	lea    ebx,[ecx+0x1]
c000362e:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003631:	77 05                	ja     c0003638 <create_chain+0x6f>
c0003633:	bb 02 00 00 00       	mov    ebx,0x2
c0003638:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000363c:	89 da                	mov    edx,ebx
c000363e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003641:	e8 b7 fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003646:	83 f8 01             	cmp    eax,0x1
c0003649:	74 ab                	je     c00035f6 <create_chain+0x2d>
c000364b:	83 f8 ff             	cmp    eax,0xffffffff
c000364e:	0f 84 a7 00 00 00    	je     c00036fb <create_chain+0x132>
c0003654:	85 c0                	test   eax,eax
c0003656:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000365a:	74 11                	je     c000366d <create_chain+0xa4>
c000365c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000365f:	83 f8 01             	cmp    eax,0x1
c0003662:	76 0d                	jbe    c0003671 <create_chain+0xa8>
c0003664:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003667:	73 08                	jae    c0003671 <create_chain+0xa8>
c0003669:	89 c1                	mov    ecx,eax
c000366b:	eb 04                	jmp    c0003671 <create_chain+0xa8>
c000366d:	85 db                	test   ebx,ebx
c000366f:	75 3d                	jne    c00036ae <create_chain+0xe5>
c0003671:	89 cb                	mov    ebx,ecx
c0003673:	43                   	inc    ebx
c0003674:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003677:	77 0a                	ja     c0003683 <create_chain+0xba>
c0003679:	83 f9 01             	cmp    ecx,0x1
c000367c:	76 a2                	jbe    c0003620 <create_chain+0x57>
c000367e:	bb 02 00 00 00       	mov    ebx,0x2
c0003683:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003687:	89 da                	mov    edx,ebx
c0003689:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000368c:	e8 6c fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003691:	85 c0                	test   eax,eax
c0003693:	74 19                	je     c00036ae <create_chain+0xe5>
c0003695:	83 f8 01             	cmp    eax,0x1
c0003698:	0f 84 58 ff ff ff    	je     c00035f6 <create_chain+0x2d>
c000369e:	40                   	inc    eax
c000369f:	74 5a                	je     c00036fb <create_chain+0x132>
c00036a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036a5:	39 cb                	cmp    ebx,ecx
c00036a7:	75 ca                	jne    c0003673 <create_chain+0xaa>
c00036a9:	e9 72 ff ff ff       	jmp    c0003620 <create_chain+0x57>
c00036ae:	83 c9 ff             	or     ecx,0xffffffff
c00036b1:	89 da                	mov    edx,ebx
c00036b3:	89 f0                	mov    eax,esi
c00036b5:	e8 b1 f2 ff ff       	call   c000296b <put_fat>
c00036ba:	85 c0                	test   eax,eax
c00036bc:	75 36                	jne    c00036f4 <create_chain+0x12b>
c00036be:	85 ff                	test   edi,edi
c00036c0:	75 16                	jne    c00036d8 <create_chain+0x10f>
c00036c2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00036c5:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00036c8:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00036cb:	8d 57 fe             	lea    edx,[edi-0x2]
c00036ce:	39 d0                	cmp    eax,edx
c00036d0:	77 17                	ja     c00036e9 <create_chain+0x120>
c00036d2:	48                   	dec    eax
c00036d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00036d6:	eb 11                	jmp    c00036e9 <create_chain+0x120>
c00036d8:	89 d9                	mov    ecx,ebx
c00036da:	89 fa                	mov    edx,edi
c00036dc:	89 f0                	mov    eax,esi
c00036de:	e8 88 f2 ff ff       	call   c000296b <put_fat>
c00036e3:	85 c0                	test   eax,eax
c00036e5:	74 db                	je     c00036c2 <create_chain+0xf9>
c00036e7:	eb 0b                	jmp    c00036f4 <create_chain+0x12b>
c00036e9:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c00036ec:	83 c8 01             	or     eax,0x1
c00036ef:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00036f2:	eb 0a                	jmp    c00036fe <create_chain+0x135>
c00036f4:	48                   	dec    eax
c00036f5:	0f 85 fb fe ff ff    	jne    c00035f6 <create_chain+0x2d>
c00036fb:	83 cb ff             	or     ebx,0xffffffff
c00036fe:	83 c4 1c             	add    esp,0x1c
c0003701:	89 d8                	mov    eax,ebx
c0003703:	5b                   	pop    ebx
c0003704:	5e                   	pop    esi
c0003705:	5f                   	pop    edi
c0003706:	5d                   	pop    ebp
c0003707:	c3                   	ret    

c0003708 <remove_chain>:
c0003708:	55                   	push   ebp
c0003709:	57                   	push   edi
c000370a:	56                   	push   esi
c000370b:	89 d6                	mov    esi,edx
c000370d:	53                   	push   ebx
c000370e:	83 ec 0c             	sub    esp,0xc
c0003711:	83 fa 01             	cmp    edx,0x1
c0003714:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003716:	76 6a                	jbe    c0003782 <remove_chain+0x7a>
c0003718:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000371b:	76 65                	jbe    c0003782 <remove_chain+0x7a>
c000371d:	89 c5                	mov    ebp,eax
c000371f:	89 ca                	mov    edx,ecx
c0003721:	85 c9                	test   ecx,ecx
c0003723:	74 0e                	je     c0003733 <remove_chain+0x2b>
c0003725:	83 c9 ff             	or     ecx,0xffffffff
c0003728:	89 d8                	mov    eax,ebx
c000372a:	e8 3c f2 ff ff       	call   c000296b <put_fat>
c000372f:	85 c0                	test   eax,eax
c0003731:	75 5b                	jne    c000378e <remove_chain+0x86>
c0003733:	89 f2                	mov    edx,esi
c0003735:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003738:	e8 c0 fc ff ff       	call   c00033fd <get_fat.isra.2>
c000373d:	89 c7                	mov    edi,eax
c000373f:	85 c0                	test   eax,eax
c0003741:	75 04                	jne    c0003747 <remove_chain+0x3f>
c0003743:	31 c0                	xor    eax,eax
c0003745:	eb 47                	jmp    c000378e <remove_chain+0x86>
c0003747:	83 f8 01             	cmp    eax,0x1
c000374a:	74 36                	je     c0003782 <remove_chain+0x7a>
c000374c:	83 f8 ff             	cmp    eax,0xffffffff
c000374f:	74 38                	je     c0003789 <remove_chain+0x81>
c0003751:	31 c9                	xor    ecx,ecx
c0003753:	89 f2                	mov    edx,esi
c0003755:	89 d8                	mov    eax,ebx
c0003757:	e8 0f f2 ff ff       	call   c000296b <put_fat>
c000375c:	85 c0                	test   eax,eax
c000375e:	75 2e                	jne    c000378e <remove_chain+0x86>
c0003760:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003763:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003766:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003769:	39 c8                	cmp    eax,ecx
c000376b:	73 0d                	jae    c000377a <remove_chain+0x72>
c000376d:	40                   	inc    eax
c000376e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003771:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003774:	83 c8 01             	or     eax,0x1
c0003777:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000377a:	89 fe                	mov    esi,edi
c000377c:	39 fa                	cmp    edx,edi
c000377e:	77 b3                	ja     c0003733 <remove_chain+0x2b>
c0003780:	eb c1                	jmp    c0003743 <remove_chain+0x3b>
c0003782:	b8 02 00 00 00       	mov    eax,0x2
c0003787:	eb 05                	jmp    c000378e <remove_chain+0x86>
c0003789:	b8 01 00 00 00       	mov    eax,0x1
c000378e:	83 c4 0c             	add    esp,0xc
c0003791:	5b                   	pop    ebx
c0003792:	5e                   	pop    esi
c0003793:	5f                   	pop    edi
c0003794:	5d                   	pop    ebp
c0003795:	c3                   	ret    

c0003796 <dir_next>:
c0003796:	55                   	push   ebp
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	83 ec 1c             	sub    esp,0x1c
c000379d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037a2:	83 c7 20             	add    edi,0x20
c00037a5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037ab:	76 07                	jbe    c00037b4 <dir_next+0x1e>
c00037ad:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037b4:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037b7:	b9 04 00 00 00       	mov    ecx,0x4
c00037bc:	85 f6                	test   esi,esi
c00037be:	0f 84 cd 00 00 00    	je     c0003891 <dir_next+0xfb>
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	89 d1                	mov    ecx,edx
c00037c8:	89 f8                	mov    eax,edi
c00037ca:	25 ff 01 00 00       	and    eax,0x1ff
c00037cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037d3:	0f 85 a8 00 00 00    	jne    c0003881 <dir_next+0xeb>
c00037d9:	46                   	inc    esi
c00037da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037dd:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00037e0:	85 d2                	test   edx,edx
c00037e2:	75 22                	jne    c0003806 <dir_next+0x70>
c00037e4:	89 fa                	mov    edx,edi
c00037e6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037ea:	c1 ea 05             	shr    edx,0x5
c00037ed:	39 c2                	cmp    edx,eax
c00037ef:	0f 82 8c 00 00 00    	jb     c0003881 <dir_next+0xeb>
c00037f5:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037fc:	b9 04 00 00 00       	mov    ecx,0x4
c0003801:	e9 8b 00 00 00       	jmp    c0003891 <dir_next+0xfb>
c0003806:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000380a:	89 fe                	mov    esi,edi
c000380c:	48                   	dec    eax
c000380d:	c1 ee 09             	shr    esi,0x9
c0003810:	85 f0                	test   eax,esi
c0003812:	75 6d                	jne    c0003881 <dir_next+0xeb>
c0003814:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003818:	89 e8                	mov    eax,ebp
c000381a:	e8 de fb ff ff       	call   c00033fd <get_fat.isra.2>
c000381f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003823:	89 c6                	mov    esi,eax
c0003825:	83 f8 01             	cmp    eax,0x1
c0003828:	77 07                	ja     c0003831 <dir_next+0x9b>
c000382a:	b9 02 00 00 00       	mov    ecx,0x2
c000382f:	eb 60                	jmp    c0003891 <dir_next+0xfb>
c0003831:	83 f8 ff             	cmp    eax,0xffffffff
c0003834:	75 07                	jne    c000383d <dir_next+0xa7>
c0003836:	b9 01 00 00 00       	mov    ecx,0x1
c000383b:	eb 54                	jmp    c0003891 <dir_next+0xfb>
c000383d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003840:	77 30                	ja     c0003872 <dir_next+0xdc>
c0003842:	85 c9                	test   ecx,ecx
c0003844:	74 af                	je     c00037f5 <dir_next+0x5f>
c0003846:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 79 fd ff ff       	call   c00035c9 <create_chain>
c0003850:	b9 07 00 00 00       	mov    ecx,0x7
c0003855:	89 c6                	mov    esi,eax
c0003857:	85 c0                	test   eax,eax
c0003859:	74 36                	je     c0003891 <dir_next+0xfb>
c000385b:	83 f8 01             	cmp    eax,0x1
c000385e:	74 ca                	je     c000382a <dir_next+0x94>
c0003860:	83 f8 ff             	cmp    eax,0xffffffff
c0003863:	74 d1                	je     c0003836 <dir_next+0xa0>
c0003865:	89 c2                	mov    edx,eax
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 54 f2 ff ff       	call   c0002ac2 <dir_clear>
c000386e:	85 c0                	test   eax,eax
c0003870:	75 c4                	jne    c0003836 <dir_next+0xa0>
c0003872:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003875:	89 f2                	mov    edx,esi
c0003877:	89 e8                	mov    eax,ebp
c0003879:	e8 99 e9 ff ff       	call   c0002217 <clst2sect>
c000387e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003881:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003885:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003888:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c000388c:	31 c9                	xor    ecx,ecx
c000388e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003891:	83 c4 1c             	add    esp,0x1c
c0003894:	89 c8                	mov    eax,ecx
c0003896:	5b                   	pop    ebx
c0003897:	5e                   	pop    esi
c0003898:	5f                   	pop    edi
c0003899:	5d                   	pop    ebp
c000389a:	c3                   	ret    

c000389b <dir_alloc>:
c000389b:	55                   	push   ebp
c000389c:	89 c5                	mov    ebp,eax
c000389e:	57                   	push   edi
c000389f:	89 d7                	mov    edi,edx
c00038a1:	56                   	push   esi
c00038a2:	31 d2                	xor    edx,edx
c00038a4:	53                   	push   ebx
c00038a5:	83 ec 0c             	sub    esp,0xc
c00038a8:	8b 30                	mov    esi,DWORD PTR [eax]
c00038aa:	e8 52 fc ff ff       	call   c0003501 <dir_sdi>
c00038af:	85 c0                	test   eax,eax
c00038b1:	75 3b                	jne    c00038ee <dir_alloc+0x53>
c00038b3:	31 db                	xor    ebx,ebx
c00038b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038b8:	89 f0                	mov    eax,esi
c00038ba:	e8 68 ec ff ff       	call   c0002527 <move_window>
c00038bf:	85 c0                	test   eax,eax
c00038c1:	75 2b                	jne    c00038ee <dir_alloc+0x53>
c00038c3:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038c6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038c9:	85 d2                	test   edx,edx
c00038cb:	74 08                	je     c00038d5 <dir_alloc+0x3a>
c00038cd:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00038d3:	75 07                	jne    c00038dc <dir_alloc+0x41>
c00038d5:	43                   	inc    ebx
c00038d6:	39 fb                	cmp    ebx,edi
c00038d8:	75 04                	jne    c00038de <dir_alloc+0x43>
c00038da:	eb 1c                	jmp    c00038f8 <dir_alloc+0x5d>
c00038dc:	31 db                	xor    ebx,ebx
c00038de:	ba 01 00 00 00       	mov    edx,0x1
c00038e3:	89 e8                	mov    eax,ebp
c00038e5:	e8 ac fe ff ff       	call   c0003796 <dir_next>
c00038ea:	85 c0                	test   eax,eax
c00038ec:	74 c7                	je     c00038b5 <dir_alloc+0x1a>
c00038ee:	83 f8 04             	cmp    eax,0x4
c00038f1:	75 05                	jne    c00038f8 <dir_alloc+0x5d>
c00038f3:	b8 07 00 00 00       	mov    eax,0x7
c00038f8:	83 c4 0c             	add    esp,0xc
c00038fb:	5b                   	pop    ebx
c00038fc:	5e                   	pop    esi
c00038fd:	5f                   	pop    edi
c00038fe:	5d                   	pop    ebp
c00038ff:	c3                   	ret    

c0003900 <dir_read>:
c0003900:	55                   	push   ebp
c0003901:	57                   	push   edi
c0003902:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003907:	56                   	push   esi
c0003908:	be 04 00 00 00       	mov    esi,0x4
c000390d:	53                   	push   ebx
c000390e:	89 c3                	mov    ebx,eax
c0003910:	83 ec 1c             	sub    esp,0x1c
c0003913:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003917:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003919:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000391e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003921:	85 d2                	test   edx,edx
c0003923:	0f 84 e3 00 00 00    	je     c0003a0c <dir_read+0x10c>
c0003929:	89 e8                	mov    eax,ebp
c000392b:	e8 f7 eb ff ff       	call   c0002527 <move_window>
c0003930:	89 c6                	mov    esi,eax
c0003932:	85 c0                	test   eax,eax
c0003934:	0f 85 dd 00 00 00    	jne    c0003a17 <dir_read+0x117>
c000393a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000393d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003940:	88 04 24             	mov    BYTE PTR [esp],al
c0003943:	85 c0                	test   eax,eax
c0003945:	0f 84 c7 00 00 00    	je     c0003a12 <dir_read+0x112>
c000394b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000394e:	83 e1 3f             	and    ecx,0x3f
c0003951:	83 f8 2e             	cmp    eax,0x2e
c0003954:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003957:	0f 84 95 00 00 00    	je     c00039f2 <dir_read+0xf2>
c000395d:	3d e5 00 00 00       	cmp    eax,0xe5
c0003962:	0f 84 8a 00 00 00    	je     c00039f2 <dir_read+0xf2>
c0003968:	0f b6 c9             	movzx  ecx,cl
c000396b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000396f:	83 e1 df             	and    ecx,0xffffffdf
c0003972:	83 f9 08             	cmp    ecx,0x8
c0003975:	0f 94 c1             	sete   cl
c0003978:	0f b6 c9             	movzx  ecx,cl
c000397b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000397f:	75 71                	jne    c00039f2 <dir_read+0xf2>
c0003981:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003986:	75 4a                	jne    c00039d2 <dir_read+0xd2>
c0003988:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c000398c:	74 16                	je     c00039a4 <dir_read+0xa4>
c000398e:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003991:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003998:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000399c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000399f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039a2:	eb 0e                	jmp    c00039b2 <dir_read+0xb2>
c00039a4:	89 f9                	mov    ecx,edi
c00039a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ab:	0f b6 c9             	movzx  ecx,cl
c00039ae:	39 c1                	cmp    ecx,eax
c00039b0:	75 45                	jne    c00039f7 <dir_read+0xf7>
c00039b2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039bb:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039be:	75 37                	jne    c00039f7 <dir_read+0xf7>
c00039c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039c3:	e8 6c e8 ff ff       	call   c0002234 <pick_lfn>
c00039c8:	85 c0                	test   eax,eax
c00039ca:	74 2b                	je     c00039f7 <dir_read+0xf7>
c00039cc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00039cf:	4f                   	dec    edi
c00039d0:	eb 25                	jmp    c00039f7 <dir_read+0xf7>
c00039d2:	89 f8                	mov    eax,edi
c00039d4:	84 c0                	test   al,al
c00039d6:	75 11                	jne    c00039e9 <dir_read+0xe9>
c00039d8:	89 d0                	mov    eax,edx
c00039da:	e8 32 ea ff ff       	call   c0002411 <sum_sfn>
c00039df:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039e3:	75 04                	jne    c00039e9 <dir_read+0xe9>
c00039e5:	31 f6                	xor    esi,esi
c00039e7:	eb 35                	jmp    c0003a1e <dir_read+0x11e>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	eb 2c                	jmp    c0003a1e <dir_read+0x11e>
c00039f2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039f7:	31 d2                	xor    edx,edx
c00039f9:	89 d8                	mov    eax,ebx
c00039fb:	e8 96 fd ff ff       	call   c0003796 <dir_next>
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	85 c0                	test   eax,eax
c0003a04:	0f 84 14 ff ff ff    	je     c000391e <dir_read+0x1e>
c0003a0a:	eb 0b                	jmp    c0003a17 <dir_read+0x117>
c0003a0c:	85 f6                	test   esi,esi
c0003a0e:	74 d5                	je     c00039e5 <dir_read+0xe5>
c0003a10:	eb 05                	jmp    c0003a17 <dir_read+0x117>
c0003a12:	be 04 00 00 00       	mov    esi,0x4
c0003a17:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a1e:	83 c4 1c             	add    esp,0x1c
c0003a21:	89 f0                	mov    eax,esi
c0003a23:	5b                   	pop    ebx
c0003a24:	5e                   	pop    esi
c0003a25:	5f                   	pop    edi
c0003a26:	5d                   	pop    ebp
c0003a27:	c3                   	ret    

c0003a28 <dir_remove>:
c0003a28:	57                   	push   edi
c0003a29:	56                   	push   esi
c0003a2a:	53                   	push   ebx
c0003a2b:	89 c3                	mov    ebx,eax
c0003a2d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a30:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a32:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a35:	83 fa ff             	cmp    edx,0xffffffff
c0003a38:	74 09                	je     c0003a43 <dir_remove+0x1b>
c0003a3a:	e8 c2 fa ff ff       	call   c0003501 <dir_sdi>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 34                	jne    c0003a77 <dir_remove+0x4f>
c0003a43:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a46:	89 f0                	mov    eax,esi
c0003a48:	e8 da ea ff ff       	call   c0002527 <move_window>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 1c                	jne    c0003a6d <dir_remove+0x45>
c0003a51:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a54:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a57:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5b:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a5e:	73 17                	jae    c0003a77 <dir_remove+0x4f>
c0003a60:	31 d2                	xor    edx,edx
c0003a62:	89 d8                	mov    eax,ebx
c0003a64:	e8 2d fd ff ff       	call   c0003796 <dir_next>
c0003a69:	85 c0                	test   eax,eax
c0003a6b:	74 d6                	je     c0003a43 <dir_remove+0x1b>
c0003a6d:	83 f8 04             	cmp    eax,0x4
c0003a70:	75 05                	jne    c0003a77 <dir_remove+0x4f>
c0003a72:	b8 02 00 00 00       	mov    eax,0x2
c0003a77:	5b                   	pop    ebx
c0003a78:	5e                   	pop    esi
c0003a79:	5f                   	pop    edi
c0003a7a:	c3                   	ret    

c0003a7b <dir_find>:
c0003a7b:	55                   	push   ebp
c0003a7c:	31 d2                	xor    edx,edx
c0003a7e:	57                   	push   edi
c0003a7f:	56                   	push   esi
c0003a80:	53                   	push   ebx
c0003a81:	89 c3                	mov    ebx,eax
c0003a83:	83 ec 1c             	sub    esp,0x1c
c0003a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0003a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 6e fa ff ff       	call   c0003501 <dir_sdi>
c0003a93:	89 c6                	mov    esi,eax
c0003a95:	85 c0                	test   eax,eax
c0003a97:	0f 85 1d 01 00 00    	jne    c0003bba <dir_find+0x13f>
c0003a9d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003aa4:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003aa9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003aae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ab5:	e8 6d ea ff ff       	call   c0002527 <move_window>
c0003aba:	89 c6                	mov    esi,eax
c0003abc:	85 c0                	test   eax,eax
c0003abe:	0f 85 f6 00 00 00    	jne    c0003bba <dir_find+0x13f>
c0003ac4:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003ac7:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003acb:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003acf:	85 c9                	test   ecx,ecx
c0003ad1:	0f 84 de 00 00 00    	je     c0003bb5 <dir_find+0x13a>
c0003ad7:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ada:	89 d0                	mov    eax,edx
c0003adc:	83 e0 3f             	and    eax,0x3f
c0003adf:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003ae5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ae8:	0f 84 a6 00 00 00    	je     c0003b94 <dir_find+0x119>
c0003aee:	80 e2 08             	and    dl,0x8
c0003af1:	0f b6 c0             	movzx  eax,al
c0003af4:	74 0b                	je     c0003b01 <dir_find+0x86>
c0003af6:	83 f8 0f             	cmp    eax,0xf
c0003af9:	0f 85 95 00 00 00    	jne    c0003b94 <dir_find+0x119>
c0003aff:	eb 05                	jmp    c0003b06 <dir_find+0x8b>
c0003b01:	83 f8 0f             	cmp    eax,0xf
c0003b04:	75 62                	jne    c0003b68 <dir_find+0xed>
c0003b06:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b0a:	0f 85 90 00 00 00    	jne    c0003ba0 <dir_find+0x125>
c0003b10:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003b15:	74 17                	je     c0003b2e <dir_find+0xb3>
c0003b17:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003b1a:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003b22:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003b26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b29:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b2c:	eb 13                	jmp    c0003b41 <dir_find+0xc6>
c0003b2e:	89 f8                	mov    eax,edi
c0003b30:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b35:	0f b6 d0             	movzx  edx,al
c0003b38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003b3d:	39 c2                	cmp    edx,eax
c0003b3f:	75 5f                	jne    c0003ba0 <dir_find+0x125>
c0003b41:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003b45:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b4a:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003b4d:	75 51                	jne    c0003ba0 <dir_find+0x125>
c0003b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b53:	89 ea                	mov    edx,ebp
c0003b55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b58:	e8 37 f3 ff ff       	call   c0002e94 <cmp_lfn>
c0003b5d:	85 c0                	test   eax,eax
c0003b5f:	74 3f                	je     c0003ba0 <dir_find+0x125>
c0003b61:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003b65:	4f                   	dec    edi
c0003b66:	eb 38                	jmp    c0003ba0 <dir_find+0x125>
c0003b68:	89 f8                	mov    eax,edi
c0003b6a:	84 c0                	test   al,al
c0003b6c:	75 0d                	jne    c0003b7b <dir_find+0x100>
c0003b6e:	89 e8                	mov    eax,ebp
c0003b70:	e8 9c e8 ff ff       	call   c0002411 <sum_sfn>
c0003b75:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003b79:	74 3f                	je     c0003bba <dir_find+0x13f>
c0003b7b:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003b7f:	75 13                	jne    c0003b94 <dir_find+0x119>
c0003b81:	8d 53 20             	lea    edx,[ebx+0x20]
c0003b84:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b89:	89 e8                	mov    eax,ebp
c0003b8b:	e8 7c e4 ff ff       	call   c000200c <mem_cmp>
c0003b90:	85 c0                	test   eax,eax
c0003b92:	74 26                	je     c0003bba <dir_find+0x13f>
c0003b94:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b9b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ba0:	31 d2                	xor    edx,edx
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 ed fb ff ff       	call   c0003796 <dir_next>
c0003ba9:	89 c6                	mov    esi,eax
c0003bab:	85 c0                	test   eax,eax
c0003bad:	0f 84 fb fe ff ff    	je     c0003aae <dir_find+0x33>
c0003bb3:	eb 05                	jmp    c0003bba <dir_find+0x13f>
c0003bb5:	be 04 00 00 00       	mov    esi,0x4
c0003bba:	83 c4 1c             	add    esp,0x1c
c0003bbd:	89 f0                	mov    eax,esi
c0003bbf:	5b                   	pop    ebx
c0003bc0:	5e                   	pop    esi
c0003bc1:	5f                   	pop    edi
c0003bc2:	5d                   	pop    ebp
c0003bc3:	c3                   	ret    

c0003bc4 <follow_path>:
c0003bc4:	56                   	push   esi
c0003bc5:	53                   	push   ebx
c0003bc6:	89 c3                	mov    ebx,eax
c0003bc8:	83 ec 14             	sub    esp,0x14
c0003bcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003bcf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003bd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bd5:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003bd8:	83 fa 5c             	cmp    edx,0x5c
c0003bdb:	75 07                	jne    c0003be4 <follow_path+0x20>
c0003bdd:	40                   	inc    eax
c0003bde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003be2:	eb ed                	jmp    c0003bd1 <follow_path+0xd>
c0003be4:	83 fa 2f             	cmp    edx,0x2f
c0003be7:	74 f4                	je     c0003bdd <follow_path+0x19>
c0003be9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003bf0:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003bf3:	77 3e                	ja     c0003c33 <follow_path+0x6f>
c0003bf5:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003bf9:	31 d2                	xor    edx,edx
c0003bfb:	89 d8                	mov    eax,ebx
c0003bfd:	e8 ff f8 ff ff       	call   c0003501 <dir_sdi>
c0003c02:	eb 4f                	jmp    c0003c53 <follow_path+0x8f>
c0003c04:	89 d8                	mov    eax,ebx
c0003c06:	e8 70 fe ff ff       	call   c0003a7b <dir_find>
c0003c0b:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c0e:	85 c0                	test   eax,eax
c0003c10:	75 32                	jne    c0003c44 <follow_path+0x80>
c0003c12:	80 e2 04             	and    dl,0x4
c0003c15:	75 3c                	jne    c0003c53 <follow_path+0x8f>
c0003c17:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c1b:	74 31                	je     c0003c4e <follow_path+0x8a>
c0003c1d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c20:	25 ff 01 00 00       	and    eax,0x1ff
c0003c25:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c29:	8a 06                	mov    al,BYTE PTR [esi]
c0003c2b:	e8 7c f7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003c30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c33:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c37:	89 d8                	mov    eax,ebx
c0003c39:	e8 7f ef ff ff       	call   c0002bbd <create_name>
c0003c3e:	85 c0                	test   eax,eax
c0003c40:	74 c2                	je     c0003c04 <follow_path+0x40>
c0003c42:	eb 0f                	jmp    c0003c53 <follow_path+0x8f>
c0003c44:	83 f8 04             	cmp    eax,0x4
c0003c47:	75 0a                	jne    c0003c53 <follow_path+0x8f>
c0003c49:	80 e2 04             	and    dl,0x4
c0003c4c:	75 05                	jne    c0003c53 <follow_path+0x8f>
c0003c4e:	b8 05 00 00 00       	mov    eax,0x5
c0003c53:	83 c4 14             	add    esp,0x14
c0003c56:	5b                   	pop    ebx
c0003c57:	5e                   	pop    esi
c0003c58:	c3                   	ret    

c0003c59 <dir_register>:
c0003c59:	55                   	push   ebp
c0003c5a:	57                   	push   edi
c0003c5b:	56                   	push   esi
c0003c5c:	be 06 00 00 00       	mov    esi,0x6
c0003c61:	53                   	push   ebx
c0003c62:	83 ec 2c             	sub    esp,0x2c
c0003c65:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003c68:	80 e2 a0             	and    dl,0xa0
c0003c6b:	0f 85 66 01 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003c71:	8b 38                	mov    edi,DWORD PTR [eax]
c0003c73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003c7b:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003c7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c82:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003c87:	74 06                	je     c0003c8f <dir_register+0x36>
c0003c89:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003c8d:	eb ef                	jmp    c0003c7e <dir_register+0x25>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	b9 0c 00 00 00       	mov    ecx,0xc
c0003c96:	8d 40 20             	lea    eax,[eax+0x20]
c0003c99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c9d:	89 c2                	mov    edx,eax
c0003c9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ca3:	e8 44 e3 ff ff       	call   c0001fec <mem_cpy>
c0003ca8:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003cad:	74 48                	je     c0003cf7 <dir_register+0x9e>
c0003caf:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cb3:	bd 01 00 00 00       	mov    ebp,0x1
c0003cb8:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cbb:	55                   	push   ebp
c0003cbc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003cc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cc4:	e8 86 e6 ff ff       	call   c000234f <gen_numname>
c0003cc9:	58                   	pop    eax
c0003cca:	89 d8                	mov    eax,ebx
c0003ccc:	e8 aa fd ff ff       	call   c0003a7b <dir_find>
c0003cd1:	89 c6                	mov    esi,eax
c0003cd3:	85 c0                	test   eax,eax
c0003cd5:	75 10                	jne    c0003ce7 <dir_register+0x8e>
c0003cd7:	45                   	inc    ebp
c0003cd8:	83 fd 64             	cmp    ebp,0x64
c0003cdb:	75 db                	jne    c0003cb8 <dir_register+0x5f>
c0003cdd:	be 07 00 00 00       	mov    esi,0x7
c0003ce2:	e9 f0 00 00 00       	jmp    c0003dd7 <dir_register+0x17e>
c0003ce7:	83 f8 04             	cmp    eax,0x4
c0003cea:	0f 85 e7 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003cf0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003cf4:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003cf7:	bd 01 00 00 00       	mov    ebp,0x1
c0003cfc:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d01:	74 13                	je     c0003d16 <dir_register+0xbd>
c0003d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d07:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d0c:	83 c0 0c             	add    eax,0xc
c0003d0f:	31 d2                	xor    edx,edx
c0003d11:	f7 f1                	div    ecx
c0003d13:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d16:	89 ea                	mov    edx,ebp
c0003d18:	89 d8                	mov    eax,ebx
c0003d1a:	e8 7c fb ff ff       	call   c000389b <dir_alloc>
c0003d1f:	89 c6                	mov    esi,eax
c0003d21:	85 c0                	test   eax,eax
c0003d23:	0f 85 ae 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d29:	4d                   	dec    ebp
c0003d2a:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003d2e:	74 67                	je     c0003d97 <dir_register+0x13e>
c0003d30:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d33:	89 e8                	mov    eax,ebp
c0003d35:	c1 e0 05             	shl    eax,0x5
c0003d38:	29 c2                	sub    edx,eax
c0003d3a:	89 d8                	mov    eax,ebx
c0003d3c:	e8 c0 f7 ff ff       	call   c0003501 <dir_sdi>
c0003d41:	89 c6                	mov    esi,eax
c0003d43:	85 c0                	test   eax,eax
c0003d45:	0f 85 8c 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d4f:	e8 bd e6 ff ff       	call   c0002411 <sum_sfn>
c0003d54:	0f b6 e8             	movzx  ebp,al
c0003d57:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d5a:	89 f8                	mov    eax,edi
c0003d5c:	e8 c6 e7 ff ff       	call   c0002527 <move_window>
c0003d61:	89 c6                	mov    esi,eax
c0003d63:	85 c0                	test   eax,eax
c0003d65:	75 70                	jne    c0003dd7 <dir_register+0x17e>
c0003d67:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003d6c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d6f:	83 ec 0c             	sub    esp,0xc
c0003d72:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003d75:	55                   	push   ebp
c0003d76:	e8 39 e5 ff ff       	call   c00022b4 <put_lfn>
c0003d7b:	31 d2                	xor    edx,edx
c0003d7d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d81:	89 d8                	mov    eax,ebx
c0003d83:	e8 0e fa ff ff       	call   c0003796 <dir_next>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	89 c6                	mov    esi,eax
c0003d8d:	85 c0                	test   eax,eax
c0003d8f:	75 46                	jne    c0003dd7 <dir_register+0x17e>
c0003d91:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003d95:	75 c0                	jne    c0003d57 <dir_register+0xfe>
c0003d97:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d9a:	89 f8                	mov    eax,edi
c0003d9c:	e8 86 e7 ff ff       	call   c0002527 <move_window>
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	85 c0                	test   eax,eax
c0003da5:	75 30                	jne    c0003dd7 <dir_register+0x17e>
c0003da7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003daa:	b9 20 00 00 00       	mov    ecx,0x20
c0003daf:	31 d2                	xor    edx,edx
c0003db1:	e8 4b e2 ff ff       	call   c0002001 <mem_set>
c0003db6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003db9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dc2:	e8 25 e2 ff ff       	call   c0001fec <mem_cpy>
c0003dc7:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003dca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dcd:	83 e0 18             	and    eax,0x18
c0003dd0:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003dd3:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dd7:	83 c4 2c             	add    esp,0x2c
c0003dda:	89 f0                	mov    eax,esi
c0003ddc:	5b                   	pop    ebx
c0003ddd:	5e                   	pop    esi
c0003dde:	5f                   	pop    edi
c0003ddf:	5d                   	pop    ebp
c0003de0:	c3                   	ret    

c0003de1 <f_mount>:
c0003de1:	53                   	push   ebx
c0003de2:	83 ec 18             	sub    esp,0x18
c0003de5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003de9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003df1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003df5:	e8 37 e6 ff ff       	call   c0002431 <get_ldnumber>
c0003dfa:	89 c2                	mov    edx,eax
c0003dfc:	b8 0b 00 00 00       	mov    eax,0xb
c0003e01:	85 d2                	test   edx,edx
c0003e03:	78 39                	js     c0003e3e <f_mount+0x5d>
c0003e05:	8b 04 95 a0 74 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8b60]
c0003e0c:	85 c0                	test   eax,eax
c0003e0e:	74 03                	je     c0003e13 <f_mount+0x32>
c0003e10:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e17:	85 c0                	test   eax,eax
c0003e19:	74 03                	je     c0003e1e <f_mount+0x3d>
c0003e1b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e22:	89 04 95 a0 74 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8b60],eax
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	84 db                	test   bl,bl
c0003e2d:	74 0f                	je     c0003e3e <f_mount+0x5d>
c0003e2f:	31 c9                	xor    ecx,ecx
c0003e31:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e35:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e39:	e8 3c e8 ff ff       	call   c000267a <mount_volume>
c0003e3e:	83 c4 18             	add    esp,0x18
c0003e41:	5b                   	pop    ebx
c0003e42:	c3                   	ret    

c0003e43 <f_open>:
c0003e43:	55                   	push   ebp
c0003e44:	b8 09 00 00 00       	mov    eax,0x9
c0003e49:	57                   	push   edi
c0003e4a:	56                   	push   esi
c0003e4b:	53                   	push   ebx
c0003e4c:	83 ec 5c             	sub    esp,0x5c
c0003e4f:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e53:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e57:	85 db                	test   ebx,ebx
c0003e59:	0f 84 9f 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003e5f:	89 fd                	mov    ebp,edi
c0003e61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e65:	83 e5 3f             	and    ebp,0x3f
c0003e68:	89 e8                	mov    eax,ebp
c0003e6a:	89 ee                	mov    esi,ebp
c0003e6c:	0f b6 c8             	movzx  ecx,al
c0003e6f:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003e73:	e8 02 e8 ff ff       	call   c000267a <mount_volume>
c0003e78:	85 c0                	test   eax,eax
c0003e7a:	0f 85 78 02 00 00    	jne    c00040f8 <f_open+0x2b5>
c0003e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e84:	83 ec 0c             	sub    esp,0xc
c0003e87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003e8b:	68 00 02 00 00       	push   0x200
c0003e90:	e8 73 1f 00 00       	call   c0005e08 <ff_memalloc>
c0003e95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	b8 11 00 00 00       	mov    eax,0x11
c0003ea1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ea6:	0f 84 52 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003eac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003eb8:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ebb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ebf:	e8 00 fd ff ff       	call   c0003bc4 <follow_path>
c0003ec4:	85 c0                	test   eax,eax
c0003ec6:	75 0c                	jne    c0003ed4 <f_open+0x91>
c0003ec8:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ecd:	74 05                	je     c0003ed4 <f_open+0x91>
c0003ecf:	b8 06 00 00 00       	mov    eax,0x6
c0003ed4:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003eda:	0f 84 d5 00 00 00    	je     c0003fb5 <f_open+0x172>
c0003ee0:	85 c0                	test   eax,eax
c0003ee2:	74 21                	je     c0003f05 <f_open+0xc2>
c0003ee4:	83 f8 04             	cmp    eax,0x4
c0003ee7:	0f 85 f0 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003eed:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ef1:	e8 63 fd ff ff       	call   c0003c59 <dir_register>
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	0f 85 df 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003efe:	83 cd 08             	or     ebp,0x8
c0003f01:	89 ee                	mov    esi,ebp
c0003f03:	eb 2c                	jmp    c0003f31 <f_open+0xee>
c0003f05:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f09:	b8 07 00 00 00       	mov    eax,0x7
c0003f0e:	80 e2 11             	and    dl,0x11
c0003f11:	0f 85 c6 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f17:	b8 08 00 00 00       	mov    eax,0x8
c0003f1c:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f22:	0f 85 b5 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f28:	83 e7 08             	and    edi,0x8
c0003f2b:	0f 84 b1 00 00 00    	je     c0003fe2 <f_open+0x19f>
c0003f31:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f39:	89 ea                	mov    edx,ebp
c0003f3b:	8a 00                	mov    al,BYTE PTR [eax]
c0003f3d:	e8 6a f4 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003f42:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f47:	89 c7                	mov    edi,eax
c0003f49:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f4c:	e8 98 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f55:	31 c9                	xor    ecx,ecx
c0003f57:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f5f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003f63:	e8 6d f4 ff ff       	call   c00033d5 <st_clust.isra.1>
c0003f68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f6c:	31 d2                	xor    edx,edx
c0003f6e:	83 c0 1c             	add    eax,0x1c
c0003f71:	e8 73 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f7a:	85 ff                	test   edi,edi
c0003f7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f80:	74 60                	je     c0003fe2 <f_open+0x19f>
c0003f82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f86:	31 c9                	xor    ecx,ecx
c0003f88:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003f8b:	89 fa                	mov    edx,edi
c0003f8d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f91:	e8 72 f7 ff ff       	call   c0003708 <remove_chain>
c0003f96:	85 c0                	test   eax,eax
c0003f98:	0f 85 3f 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f9e:	89 ea                	mov    edx,ebp
c0003fa0:	4f                   	dec    edi
c0003fa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fa5:	e8 7d e5 ff ff       	call   c0002527 <move_window>
c0003faa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fae:	85 c0                	test   eax,eax
c0003fb0:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003fb3:	eb 27                	jmp    c0003fdc <f_open+0x199>
c0003fb5:	85 c0                	test   eax,eax
c0003fb7:	0f 85 20 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fbd:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003fc1:	b8 04 00 00 00       	mov    eax,0x4
c0003fc6:	f6 c2 10             	test   dl,0x10
c0003fc9:	0f 85 0e 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fcf:	83 e7 02             	and    edi,0x2
c0003fd2:	74 0e                	je     c0003fe2 <f_open+0x19f>
c0003fd4:	b8 07 00 00 00       	mov    eax,0x7
c0003fd9:	80 e2 01             	and    dl,0x1
c0003fdc:	0f 85 fb 00 00 00    	jne    c00040dd <f_open+0x29a>
c0003fe2:	f7 c6 08 00 00 00    	test   esi,0x8
c0003fe8:	74 03                	je     c0003fed <f_open+0x1aa>
c0003fea:	83 ce 40             	or     esi,0x40
c0003fed:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003ff1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ff5:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003ff8:	89 fa                	mov    edx,edi
c0003ffa:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ffd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004000:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004003:	e8 a4 f3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004008:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000400b:	8d 47 1c             	lea    eax,[edi+0x1c]
c000400e:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004011:	e8 b7 df ff ff       	call   c0001fcd <ld_dword>
c0004016:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004018:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000401b:	31 d2                	xor    edx,edx
c000401d:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004021:	b9 00 02 00 00       	mov    ecx,0x200
c0004026:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000402a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c000402e:	89 f0                	mov    eax,esi
c0004030:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004037:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000403a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004041:	89 f8                	mov    eax,edi
c0004043:	e8 b9 df ff ff       	call   c0002001 <mem_set>
c0004048:	83 e6 20             	and    esi,0x20
c000404b:	75 07                	jne    c0004054 <f_open+0x211>
c000404d:	31 c0                	xor    eax,eax
c000404f:	e9 89 00 00 00       	jmp    c00040dd <f_open+0x29a>
c0004054:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0004057:	85 ed                	test   ebp,ebp
c0004059:	74 f2                	je     c000404d <f_open+0x20a>
c000405b:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c000405e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004062:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004065:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0004069:	c1 e6 09             	shl    esi,0x9
c000406c:	39 ee                	cmp    esi,ebp
c000406e:	73 1c                	jae    c000408c <f_open+0x249>
c0004070:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004072:	29 f5                	sub    ebp,esi
c0004074:	e8 84 f3 ff ff       	call   c00033fd <get_fat.isra.2>
c0004079:	89 c2                	mov    edx,eax
c000407b:	83 f8 01             	cmp    eax,0x1
c000407e:	76 10                	jbe    c0004090 <f_open+0x24d>
c0004080:	83 f8 ff             	cmp    eax,0xffffffff
c0004083:	75 e7                	jne    c000406c <f_open+0x229>
c0004085:	b8 01 00 00 00       	mov    eax,0x1
c000408a:	eb 09                	jmp    c0004095 <f_open+0x252>
c000408c:	31 c0                	xor    eax,eax
c000408e:	eb 05                	jmp    c0004095 <f_open+0x252>
c0004090:	b8 02 00 00 00       	mov    eax,0x2
c0004095:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0004098:	85 c0                	test   eax,eax
c000409a:	75 41                	jne    c00040dd <f_open+0x29a>
c000409c:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c00040a2:	74 a9                	je     c000404d <f_open+0x20a>
c00040a4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00040a8:	89 f0                	mov    eax,esi
c00040aa:	e8 68 e1 ff ff       	call   c0002217 <clst2sect>
c00040af:	89 c2                	mov    edx,eax
c00040b1:	b8 02 00 00 00       	mov    eax,0x2
c00040b6:	85 d2                	test   edx,edx
c00040b8:	74 23                	je     c00040dd <f_open+0x29a>
c00040ba:	c1 ed 09             	shr    ebp,0x9
c00040bd:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c00040c1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00040c4:	6a 01                	push   0x1
c00040c6:	50                   	push   eax
c00040c7:	57                   	push   edi
c00040c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00040cc:	50                   	push   eax
c00040cd:	e8 a3 de ff ff       	call   c0001f75 <disk_read>
c00040d2:	83 c4 10             	add    esp,0x10
c00040d5:	85 c0                	test   eax,eax
c00040d7:	0f 95 c0             	setne  al
c00040da:	0f b6 c0             	movzx  eax,al
c00040dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00040e1:	83 ec 0c             	sub    esp,0xc
c00040e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00040e8:	e8 33 1d 00 00       	call   c0005e20 <ff_memfree>
c00040ed:	83 c4 10             	add    esp,0x10
c00040f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040f4:	85 c0                	test   eax,eax
c00040f6:	74 06                	je     c00040fe <f_open+0x2bb>
c00040f8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00040fe:	83 c4 5c             	add    esp,0x5c
c0004101:	5b                   	pop    ebx
c0004102:	5e                   	pop    esi
c0004103:	5f                   	pop    edi
c0004104:	5d                   	pop    ebp
c0004105:	c3                   	ret    

c0004106 <f_read>:
c0004106:	55                   	push   ebp
c0004107:	57                   	push   edi
c0004108:	56                   	push   esi
c0004109:	53                   	push   ebx
c000410a:	83 ec 2c             	sub    esp,0x2c
c000410d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004111:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004115:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000411b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000411f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004123:	89 d8                	mov    eax,ebx
c0004125:	e8 54 e3 ff ff       	call   c000247e <validate>
c000412a:	89 c5                	mov    ebp,eax
c000412c:	85 c0                	test   eax,eax
c000412e:	0f 85 c7 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004134:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004138:	85 ed                	test   ebp,ebp
c000413a:	0f 85 bb 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004140:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004144:	0f 84 ac 01 00 00    	je     c00042f6 <f_read+0x1f0>
c000414a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000414d:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004150:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004154:	39 f0                	cmp    eax,esi
c0004156:	0f 86 b0 00 00 00    	jbe    c000420c <f_read+0x106>
c000415c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0004160:	e9 a7 00 00 00       	jmp    c000420c <f_read+0x106>
c0004165:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004168:	a9 ff 01 00 00       	test   eax,0x1ff
c000416d:	0f 85 56 01 00 00    	jne    c00042c9 <f_read+0x1c3>
c0004173:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004177:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c000417b:	89 c2                	mov    edx,eax
c000417d:	4f                   	dec    edi
c000417e:	c1 ea 09             	shr    edx,0x9
c0004181:	21 d7                	and    edi,edx
c0004183:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0004187:	0f 84 8f 00 00 00    	je     c000421c <f_read+0x116>
c000418d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004191:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004194:	89 c8                	mov    eax,ecx
c0004196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000419a:	e8 78 e0 ff ff       	call   c0002217 <clst2sect>
c000419f:	85 c0                	test   eax,eax
c00041a1:	0f 84 8d 00 00 00    	je     c0004234 <f_read+0x12e>
c00041a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ab:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c00041b3:	8d 3c 01             	lea    edi,[ecx+eax*1]
c00041b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041ba:	0f 86 bf 00 00 00    	jbe    c000427f <f_read+0x179>
c00041c0:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00041c4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041c8:	c1 ee 09             	shr    esi,0x9
c00041cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041cf:	01 f2                	add    edx,esi
c00041d1:	39 c2                	cmp    edx,eax
c00041d3:	76 06                	jbe    c00041db <f_read+0xd5>
c00041d5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041d9:	89 c6                	mov    esi,eax
c00041db:	56                   	push   esi
c00041dc:	57                   	push   edi
c00041dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041e5:	50                   	push   eax
c00041e6:	e8 8a dd ff ff       	call   c0001f75 <disk_read>
c00041eb:	83 c4 10             	add    esp,0x10
c00041ee:	85 c0                	test   eax,eax
c00041f0:	75 55                	jne    c0004247 <f_read+0x141>
c00041f2:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041f6:	75 65                	jne    c000425d <f_read+0x157>
c00041f8:	c1 e6 09             	shl    esi,0x9
c00041fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041ff:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004203:	01 30                	add    DWORD PTR [eax],esi
c0004205:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004209:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000420c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004211:	0f 85 4e ff ff ff    	jne    c0004165 <f_read+0x5f>
c0004217:	e9 df 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c000421c:	85 c0                	test   eax,eax
c000421e:	75 05                	jne    c0004225 <f_read+0x11f>
c0004220:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004223:	eb 0a                	jmp    c000422f <f_read+0x129>
c0004225:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004228:	8b 03                	mov    eax,DWORD PTR [ebx]
c000422a:	e8 ce f1 ff ff       	call   c00033fd <get_fat.isra.2>
c000422f:	83 f8 01             	cmp    eax,0x1
c0004232:	77 0e                	ja     c0004242 <f_read+0x13c>
c0004234:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004238:	bd 02 00 00 00       	mov    ebp,0x2
c000423d:	e9 b9 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004242:	83 f8 ff             	cmp    eax,0xffffffff
c0004245:	75 0e                	jne    c0004255 <f_read+0x14f>
c0004247:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000424b:	bd 01 00 00 00       	mov    ebp,0x1
c0004250:	e9 a6 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004255:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004258:	e9 30 ff ff ff       	jmp    c000418d <f_read+0x87>
c000425d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004260:	29 f8                	sub    eax,edi
c0004262:	39 f0                	cmp    eax,esi
c0004264:	73 92                	jae    c00041f8 <f_read+0xf2>
c0004266:	c1 e0 09             	shl    eax,0x9
c0004269:	8d 53 28             	lea    edx,[ebx+0x28]
c000426c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004270:	b9 00 02 00 00       	mov    ecx,0x200
c0004275:	e8 72 dd ff ff       	call   c0001fec <mem_cpy>
c000427a:	e9 79 ff ff ff       	jmp    c00041f8 <f_read+0xf2>
c000427f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004282:	39 f8                	cmp    eax,edi
c0004284:	74 40                	je     c00042c6 <f_read+0x1c0>
c0004286:	8d 73 28             	lea    esi,[ebx+0x28]
c0004289:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000428d:	74 1e                	je     c00042ad <f_read+0x1a7>
c000428f:	6a 01                	push   0x1
c0004291:	50                   	push   eax
c0004292:	56                   	push   esi
c0004293:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004297:	50                   	push   eax
c0004298:	e8 ee dc ff ff       	call   c0001f8b <disk_write>
c000429d:	83 c4 10             	add    esp,0x10
c00042a0:	85 c0                	test   eax,eax
c00042a2:	75 a3                	jne    c0004247 <f_read+0x141>
c00042a4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042a7:	83 e0 7f             	and    eax,0x7f
c00042aa:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ad:	6a 01                	push   0x1
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b9:	50                   	push   eax
c00042ba:	e8 b6 dc ff ff       	call   c0001f75 <disk_read>
c00042bf:	83 c4 10             	add    esp,0x10
c00042c2:	85 c0                	test   eax,eax
c00042c4:	75 81                	jne    c0004247 <f_read+0x141>
c00042c6:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00042c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042cc:	ba 00 02 00 00       	mov    edx,0x200
c00042d1:	25 ff 01 00 00       	and    eax,0x1ff
c00042d6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00042da:	29 c2                	sub    edx,eax
c00042dc:	39 d6                	cmp    esi,edx
c00042de:	76 02                	jbe    c00042e2 <f_read+0x1dc>
c00042e0:	89 d6                	mov    esi,edx
c00042e2:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042e6:	89 f1                	mov    ecx,esi
c00042e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042ec:	e8 fb dc ff ff       	call   c0001fec <mem_cpy>
c00042f1:	e9 05 ff ff ff       	jmp    c00041fb <f_read+0xf5>
c00042f6:	bd 07 00 00 00       	mov    ebp,0x7
c00042fb:	83 c4 2c             	add    esp,0x2c
c00042fe:	89 e8                	mov    eax,ebp
c0004300:	5b                   	pop    ebx
c0004301:	5e                   	pop    esi
c0004302:	5f                   	pop    edi
c0004303:	5d                   	pop    ebp
c0004304:	c3                   	ret    

c0004305 <f_write>:
c0004305:	55                   	push   ebp
c0004306:	57                   	push   edi
c0004307:	56                   	push   esi
c0004308:	53                   	push   ebx
c0004309:	83 ec 2c             	sub    esp,0x2c
c000430c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004310:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004314:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000431a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000431e:	89 d8                	mov    eax,ebx
c0004320:	e8 59 e1 ff ff       	call   c000247e <validate>
c0004325:	89 c5                	mov    ebp,eax
c0004327:	85 c0                	test   eax,eax
c0004329:	0f 85 14 02 00 00    	jne    c0004543 <f_write+0x23e>
c000432f:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004333:	85 ed                	test   ebp,ebp
c0004335:	0f 85 08 02 00 00    	jne    c0004543 <f_write+0x23e>
c000433b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433f:	0f 84 f9 01 00 00    	je     c000453e <f_write+0x239>
c0004345:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004348:	89 c7                	mov    edi,eax
c000434a:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c000434e:	0f 83 ef 00 00 00    	jae    c0004443 <f_write+0x13e>
c0004354:	f7 d0                	not    eax
c0004356:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000435a:	e9 e4 00 00 00       	jmp    c0004443 <f_write+0x13e>
c000435f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004362:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004368:	0f 85 9a 01 00 00    	jne    c0004508 <f_write+0x203>
c000436e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004372:	89 d1                	mov    ecx,edx
c0004374:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004378:	c1 e9 09             	shr    ecx,0x9
c000437b:	48                   	dec    eax
c000437c:	21 c8                	and    eax,ecx
c000437e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004382:	0f 84 c8 00 00 00    	je     c0004450 <f_write+0x14b>
c0004388:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000438c:	0f 85 22 01 00 00    	jne    c00044b4 <f_write+0x1af>
c0004392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004396:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004399:	89 c8                	mov    eax,ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	e8 73 de ff ff       	call   c0002217 <clst2sect>
c00043a4:	85 c0                	test   eax,eax
c00043a6:	0f 84 d2 00 00 00    	je     c000447e <f_write+0x179>
c00043ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00043b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b4:	01 c7                	add    edi,eax
c00043b6:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043be:	0f 86 1c 01 00 00    	jbe    c00044e0 <f_write+0x1db>
c00043c4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043c8:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043cc:	c1 ee 09             	shr    esi,0x9
c00043cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043d3:	01 f2                	add    edx,esi
c00043d5:	39 c2                	cmp    edx,eax
c00043d7:	76 06                	jbe    c00043df <f_write+0xda>
c00043d9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043dd:	89 c6                	mov    esi,eax
c00043df:	56                   	push   esi
c00043e0:	57                   	push   edi
c00043e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043e9:	50                   	push   eax
c00043ea:	e8 9c db ff ff       	call   c0001f8b <disk_write>
c00043ef:	83 c4 10             	add    esp,0x10
c00043f2:	85 c0                	test   eax,eax
c00043f4:	0f 85 97 00 00 00    	jne    c0004491 <f_write+0x18c>
c00043fa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00043fd:	29 fa                	sub    edx,edi
c00043ff:	39 f2                	cmp    edx,esi
c0004401:	73 1d                	jae    c0004420 <f_write+0x11b>
c0004403:	8d 43 28             	lea    eax,[ebx+0x28]
c0004406:	c1 e2 09             	shl    edx,0x9
c0004409:	b9 00 02 00 00       	mov    ecx,0x200
c000440e:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004412:	e8 d5 db ff ff       	call   c0001fec <mem_cpy>
c0004417:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000441a:	83 e0 7f             	and    eax,0x7f
c000441d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004420:	c1 e6 09             	shl    esi,0x9
c0004423:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004427:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000442b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000442f:	01 30                	add    DWORD PTR [eax],esi
c0004431:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004434:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004437:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000443a:	39 f0                	cmp    eax,esi
c000443c:	73 02                	jae    c0004440 <f_write+0x13b>
c000443e:	89 f0                	mov    eax,esi
c0004440:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004443:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004448:	0f 85 11 ff ff ff    	jne    c000435f <f_write+0x5a>
c000444e:	eb 1b                	jmp    c000446b <f_write+0x166>
c0004450:	85 d2                	test   edx,edx
c0004452:	75 09                	jne    c000445d <f_write+0x158>
c0004454:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004457:	85 c0                	test   eax,eax
c0004459:	75 1e                	jne    c0004479 <f_write+0x174>
c000445b:	eb 03                	jmp    c0004460 <f_write+0x15b>
c000445d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004460:	89 d8                	mov    eax,ebx
c0004462:	e8 62 f1 ff ff       	call   c00035c9 <create_chain>
c0004467:	85 c0                	test   eax,eax
c0004469:	75 0e                	jne    c0004479 <f_write+0x174>
c000446b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000446e:	83 c8 40             	or     eax,0x40
c0004471:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004474:	e9 ca 00 00 00       	jmp    c0004543 <f_write+0x23e>
c0004479:	83 f8 01             	cmp    eax,0x1
c000447c:	75 0e                	jne    c000448c <f_write+0x187>
c000447e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004482:	bd 02 00 00 00       	mov    ebp,0x2
c0004487:	e9 b7 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000448c:	83 f8 ff             	cmp    eax,0xffffffff
c000448f:	75 0e                	jne    c000449f <f_write+0x19a>
c0004491:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004495:	bd 01 00 00 00       	mov    ebp,0x1
c000449a:	e9 a4 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000449f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044a2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044a6:	0f 85 dc fe ff ff    	jne    c0004388 <f_write+0x83>
c00044ac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044af:	e9 d4 fe ff ff       	jmp    c0004388 <f_write+0x83>
c00044b4:	6a 01                	push   0x1
c00044b6:	8d 43 28             	lea    eax,[ebx+0x28]
c00044b9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044bc:	50                   	push   eax
c00044bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044c5:	50                   	push   eax
c00044c6:	e8 c0 da ff ff       	call   c0001f8b <disk_write>
c00044cb:	83 c4 10             	add    esp,0x10
c00044ce:	85 c0                	test   eax,eax
c00044d0:	75 bf                	jne    c0004491 <f_write+0x18c>
c00044d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044d5:	83 e0 7f             	and    eax,0x7f
c00044d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044db:	e9 b2 fe ff ff       	jmp    c0004392 <f_write+0x8d>
c00044e0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00044e3:	74 20                	je     c0004505 <f_write+0x200>
c00044e5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044e8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00044eb:	76 18                	jbe    c0004505 <f_write+0x200>
c00044ed:	6a 01                	push   0x1
c00044ef:	8d 43 28             	lea    eax,[ebx+0x28]
c00044f2:	57                   	push   edi
c00044f3:	50                   	push   eax
c00044f4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00044f8:	50                   	push   eax
c00044f9:	e8 77 da ff ff       	call   c0001f75 <disk_read>
c00044fe:	83 c4 10             	add    esp,0x10
c0004501:	85 c0                	test   eax,eax
c0004503:	75 8c                	jne    c0004491 <f_write+0x18c>
c0004505:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004508:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000450b:	ba 00 02 00 00       	mov    edx,0x200
c0004510:	25 ff 01 00 00       	and    eax,0x1ff
c0004515:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004519:	29 c2                	sub    edx,eax
c000451b:	39 d6                	cmp    esi,edx
c000451d:	76 02                	jbe    c0004521 <f_write+0x21c>
c000451f:	89 d6                	mov    esi,edx
c0004521:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004525:	89 f1                	mov    ecx,esi
c0004527:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000452b:	e8 bc da ff ff       	call   c0001fec <mem_cpy>
c0004530:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004533:	83 c8 80             	or     eax,0xffffff80
c0004536:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004539:	e9 e5 fe ff ff       	jmp    c0004423 <f_write+0x11e>
c000453e:	bd 07 00 00 00       	mov    ebp,0x7
c0004543:	83 c4 2c             	add    esp,0x2c
c0004546:	89 e8                	mov    eax,ebp
c0004548:	5b                   	pop    ebx
c0004549:	5e                   	pop    esi
c000454a:	5f                   	pop    edi
c000454b:	5d                   	pop    ebp
c000454c:	c3                   	ret    

c000454d <f_sync>:
c000454d:	56                   	push   esi
c000454e:	53                   	push   ebx
c000454f:	83 ec 14             	sub    esp,0x14
c0004552:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004556:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 1d df ff ff       	call   c000247e <validate>
c0004561:	85 c0                	test   eax,eax
c0004563:	0f 85 a3 00 00 00    	jne    c000460c <f_sync+0xbf>
c0004569:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000456c:	f6 c2 40             	test   dl,0x40
c000456f:	0f 84 97 00 00 00    	je     c000460c <f_sync+0xbf>
c0004575:	80 e2 80             	and    dl,0x80
c0004578:	74 2e                	je     c00045a8 <f_sync+0x5b>
c000457a:	6a 01                	push   0x1
c000457c:	8d 43 28             	lea    eax,[ebx+0x28]
c000457f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004582:	50                   	push   eax
c0004583:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004587:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000458b:	50                   	push   eax
c000458c:	e8 fa d9 ff ff       	call   c0001f8b <disk_write>
c0004591:	83 c4 10             	add    esp,0x10
c0004594:	89 c2                	mov    edx,eax
c0004596:	b8 01 00 00 00       	mov    eax,0x1
c000459b:	85 d2                	test   edx,edx
c000459d:	75 6d                	jne    c000460c <f_sync+0xbf>
c000459f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045a2:	83 e0 7f             	and    eax,0x7f
c00045a5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045a8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045af:	e8 73 df ff ff       	call   c0002527 <move_window>
c00045b4:	85 c0                	test   eax,eax
c00045b6:	75 54                	jne    c000460c <f_sync+0xbf>
c00045b8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045bb:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045be:	89 f2                	mov    edx,esi
c00045c0:	83 c8 20             	or     eax,0x20
c00045c3:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045c6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045cb:	e8 05 ee ff ff       	call   c00033d5 <st_clust.isra.1>
c00045d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045d3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045d6:	e8 0e da ff ff       	call   c0001fe9 <st_dword>
c00045db:	8d 46 16             	lea    eax,[esi+0x16]
c00045de:	ba 00 00 21 50       	mov    edx,0x50210000
c00045e3:	e8 01 da ff ff       	call   c0001fe9 <st_dword>
c00045e8:	31 d2                	xor    edx,edx
c00045ea:	8d 46 12             	lea    eax,[esi+0x12]
c00045ed:	e8 f3 d9 ff ff       	call   c0001fe5 <st_word>
c00045f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00045fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045fe:	e8 5b e9 ff ff       	call   c0002f5e <sync_fs>
c0004603:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004606:	83 e2 bf             	and    edx,0xffffffbf
c0004609:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000460c:	83 c4 14             	add    esp,0x14
c000460f:	5b                   	pop    ebx
c0004610:	5e                   	pop    esi
c0004611:	c3                   	ret    

c0004612 <f_close>:
c0004612:	53                   	push   ebx
c0004613:	83 ec 24             	sub    esp,0x24
c0004616:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000461a:	53                   	push   ebx
c000461b:	e8 2d ff ff ff       	call   c000454d <f_sync>
c0004620:	83 c4 10             	add    esp,0x10
c0004623:	85 c0                	test   eax,eax
c0004625:	75 15                	jne    c000463c <f_close+0x2a>
c0004627:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000462b:	89 d8                	mov    eax,ebx
c000462d:	e8 4c de ff ff       	call   c000247e <validate>
c0004632:	85 c0                	test   eax,eax
c0004634:	75 06                	jne    c000463c <f_close+0x2a>
c0004636:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000463c:	83 c4 18             	add    esp,0x18
c000463f:	5b                   	pop    ebx
c0004640:	c3                   	ret    

c0004641 <f_lseek>:
c0004641:	55                   	push   ebp
c0004642:	57                   	push   edi
c0004643:	56                   	push   esi
c0004644:	53                   	push   ebx
c0004645:	83 ec 2c             	sub    esp,0x2c
c0004648:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000464c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004650:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004654:	89 d8                	mov    eax,ebx
c0004656:	e8 23 de ff ff       	call   c000247e <validate>
c000465b:	89 c5                	mov    ebp,eax
c000465d:	85 c0                	test   eax,eax
c000465f:	0f 85 83 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004665:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004669:	85 ed                	test   ebp,ebp
c000466b:	0f 85 77 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004671:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004674:	39 f0                	cmp    eax,esi
c0004676:	73 08                	jae    c0004680 <f_lseek+0x3f>
c0004678:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000467c:	75 02                	jne    c0004680 <f_lseek+0x3f>
c000467e:	89 c6                	mov    esi,eax
c0004680:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004683:	85 f6                	test   esi,esi
c0004685:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000468c:	75 07                	jne    c0004695 <f_lseek+0x54>
c000468e:	31 f6                	xor    esi,esi
c0004690:	e9 e2 00 00 00       	jmp    c0004777 <f_lseek+0x136>
c0004695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004699:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000469d:	c1 e7 09             	shl    edi,0x9
c00046a0:	85 c9                	test   ecx,ecx
c00046a2:	74 28                	je     c00046cc <f_lseek+0x8b>
c00046a4:	49                   	dec    ecx
c00046a5:	31 d2                	xor    edx,edx
c00046a7:	8d 46 ff             	lea    eax,[esi-0x1]
c00046aa:	f7 f7                	div    edi
c00046ac:	31 d2                	xor    edx,edx
c00046ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046b2:	89 c8                	mov    eax,ecx
c00046b4:	f7 f7                	div    edi
c00046b6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046ba:	72 10                	jb     c00046cc <f_lseek+0x8b>
c00046bc:	89 f8                	mov    eax,edi
c00046be:	f7 d8                	neg    eax
c00046c0:	21 c1                	and    ecx,eax
c00046c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046c5:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046c8:	29 ce                	sub    esi,ecx
c00046ca:	eb 3c                	jmp    c0004708 <f_lseek+0xc7>
c00046cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046cf:	85 c0                	test   eax,eax
c00046d1:	75 32                	jne    c0004705 <f_lseek+0xc4>
c00046d3:	31 d2                	xor    edx,edx
c00046d5:	89 d8                	mov    eax,ebx
c00046d7:	e8 ed ee ff ff       	call   c00035c9 <create_chain>
c00046dc:	83 f8 01             	cmp    eax,0x1
c00046df:	75 0e                	jne    c00046ef <f_lseek+0xae>
c00046e1:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00046e5:	bd 02 00 00 00       	mov    ebp,0x2
c00046ea:	e9 f9 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c00046ef:	83 f8 ff             	cmp    eax,0xffffffff
c00046f2:	75 0e                	jne    c0004702 <f_lseek+0xc1>
c00046f4:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00046f8:	bd 01 00 00 00       	mov    ebp,0x1
c00046fd:	e9 e6 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c0004702:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004705:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004708:	85 c0                	test   eax,eax
c000470a:	74 82                	je     c000468e <f_lseek+0x4d>
c000470c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000470f:	39 fe                	cmp    esi,edi
c0004711:	76 3d                	jbe    c0004750 <f_lseek+0x10f>
c0004713:	01 fa                	add    edx,edi
c0004715:	29 fe                	sub    esi,edi
c0004717:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000471a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000471e:	89 c2                	mov    edx,eax
c0004720:	74 0d                	je     c000472f <f_lseek+0xee>
c0004722:	89 d8                	mov    eax,ebx
c0004724:	e8 a0 ee ff ff       	call   c00035c9 <create_chain>
c0004729:	85 c0                	test   eax,eax
c000472b:	75 09                	jne    c0004736 <f_lseek+0xf5>
c000472d:	eb 1f                	jmp    c000474e <f_lseek+0x10d>
c000472f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004731:	e8 c7 ec ff ff       	call   c00033fd <get_fat.isra.2>
c0004736:	83 f8 ff             	cmp    eax,0xffffffff
c0004739:	74 b9                	je     c00046f4 <f_lseek+0xb3>
c000473b:	83 f8 01             	cmp    eax,0x1
c000473e:	76 a1                	jbe    c00046e1 <f_lseek+0xa0>
c0004740:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004744:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004747:	76 98                	jbe    c00046e1 <f_lseek+0xa0>
c0004749:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000474c:	eb be                	jmp    c000470c <f_lseek+0xcb>
c000474e:	31 f6                	xor    esi,esi
c0004750:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004753:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004759:	0f 84 2f ff ff ff    	je     c000468e <f_lseek+0x4d>
c000475f:	89 c2                	mov    edx,eax
c0004761:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004765:	e8 ad da ff ff       	call   c0002217 <clst2sect>
c000476a:	85 c0                	test   eax,eax
c000476c:	0f 84 6f ff ff ff    	je     c00046e1 <f_lseek+0xa0>
c0004772:	c1 ee 09             	shr    esi,0x9
c0004775:	01 c6                	add    esi,eax
c0004777:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000477a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000477d:	76 0c                	jbe    c000478b <f_lseek+0x14a>
c000477f:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004785:	83 ca 40             	or     edx,0x40
c0004788:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000478b:	a9 ff 01 00 00       	test   eax,0x1ff
c0004790:	74 56                	je     c00047e8 <f_lseek+0x1a7>
c0004792:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004795:	39 f0                	cmp    eax,esi
c0004797:	74 4f                	je     c00047e8 <f_lseek+0x1a7>
c0004799:	8d 7b 28             	lea    edi,[ebx+0x28]
c000479c:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047a0:	74 26                	je     c00047c8 <f_lseek+0x187>
c00047a2:	6a 01                	push   0x1
c00047a4:	50                   	push   eax
c00047a5:	57                   	push   edi
c00047a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047aa:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047ae:	50                   	push   eax
c00047af:	e8 d7 d7 ff ff       	call   c0001f8b <disk_write>
c00047b4:	83 c4 10             	add    esp,0x10
c00047b7:	85 c0                	test   eax,eax
c00047b9:	0f 85 35 ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047bf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047c2:	83 e0 7f             	and    eax,0x7f
c00047c5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047c8:	6a 01                	push   0x1
c00047ca:	56                   	push   esi
c00047cb:	57                   	push   edi
c00047cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047d0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047d4:	50                   	push   eax
c00047d5:	e8 9b d7 ff ff       	call   c0001f75 <disk_read>
c00047da:	83 c4 10             	add    esp,0x10
c00047dd:	85 c0                	test   eax,eax
c00047df:	0f 85 0f ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047e5:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00047e8:	83 c4 2c             	add    esp,0x2c
c00047eb:	89 e8                	mov    eax,ebp
c00047ed:	5b                   	pop    ebx
c00047ee:	5e                   	pop    esi
c00047ef:	5f                   	pop    edi
c00047f0:	5d                   	pop    ebp
c00047f1:	c3                   	ret    

c00047f2 <f_opendir>:
c00047f2:	56                   	push   esi
c00047f3:	b8 09 00 00 00       	mov    eax,0x9
c00047f8:	53                   	push   ebx
c00047f9:	83 ec 24             	sub    esp,0x24
c00047fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004800:	85 db                	test   ebx,ebx
c0004802:	0f 84 af 00 00 00    	je     c00048b7 <f_opendir+0xc5>
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000480e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004812:	e8 63 de ff ff       	call   c000267a <mount_volume>
c0004817:	85 c0                	test   eax,eax
c0004819:	0f 85 92 00 00 00    	jne    c00048b1 <f_opendir+0xbf>
c000481f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004823:	83 ec 0c             	sub    esp,0xc
c0004826:	89 03                	mov    DWORD PTR [ebx],eax
c0004828:	68 00 02 00 00       	push   0x200
c000482d:	e8 d6 15 00 00       	call   c0005e08 <ff_memalloc>
c0004832:	83 c4 10             	add    esp,0x10
c0004835:	89 c6                	mov    esi,eax
c0004837:	b8 11 00 00 00       	mov    eax,0x11
c000483c:	85 f6                	test   esi,esi
c000483e:	74 77                	je     c00048b7 <f_opendir+0xc5>
c0004840:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004844:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004848:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000484b:	89 d8                	mov    eax,ebx
c000484d:	e8 72 f3 ff ff       	call   c0003bc4 <follow_path>
c0004852:	85 c0                	test   eax,eax
c0004854:	75 37                	jne    c000488d <f_opendir+0x9b>
c0004856:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000485a:	75 1c                	jne    c0004878 <f_opendir+0x86>
c000485c:	b8 05 00 00 00       	mov    eax,0x5
c0004861:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004865:	74 26                	je     c000488d <f_opendir+0x9b>
c0004867:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000486a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486e:	8a 00                	mov    al,BYTE PTR [eax]
c0004870:	e8 37 eb ff ff       	call   c00033ac <ld_clust.isra.0>
c0004875:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004878:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000487c:	31 d2                	xor    edx,edx
c000487e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004882:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004886:	89 d8                	mov    eax,ebx
c0004888:	e8 74 ec ff ff       	call   c0003501 <dir_sdi>
c000488d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004891:	83 ec 0c             	sub    esp,0xc
c0004894:	56                   	push   esi
c0004895:	e8 86 15 00 00       	call   c0005e20 <ff_memfree>
c000489a:	83 c4 10             	add    esp,0x10
c000489d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a1:	83 f8 04             	cmp    eax,0x4
c00048a4:	74 06                	je     c00048ac <f_opendir+0xba>
c00048a6:	85 c0                	test   eax,eax
c00048a8:	74 0d                	je     c00048b7 <f_opendir+0xc5>
c00048aa:	eb 05                	jmp    c00048b1 <f_opendir+0xbf>
c00048ac:	b8 05 00 00 00       	mov    eax,0x5
c00048b1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048b7:	83 c4 24             	add    esp,0x24
c00048ba:	5b                   	pop    ebx
c00048bb:	5e                   	pop    esi
c00048bc:	c3                   	ret    

c00048bd <f_closedir>:
c00048bd:	53                   	push   ebx
c00048be:	83 ec 18             	sub    esp,0x18
c00048c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048c5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048c9:	89 d8                	mov    eax,ebx
c00048cb:	e8 ae db ff ff       	call   c000247e <validate>
c00048d0:	85 c0                	test   eax,eax
c00048d2:	75 06                	jne    c00048da <f_closedir+0x1d>
c00048d4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048da:	83 c4 18             	add    esp,0x18
c00048dd:	5b                   	pop    ebx
c00048de:	c3                   	ret    

c00048df <f_readdir>:
c00048df:	57                   	push   edi
c00048e0:	56                   	push   esi
c00048e1:	53                   	push   ebx
c00048e2:	83 ec 20             	sub    esp,0x20
c00048e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00048e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00048ed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048f1:	89 d8                	mov    eax,ebx
c00048f3:	e8 86 db ff ff       	call   c000247e <validate>
c00048f8:	85 c0                	test   eax,eax
c00048fa:	75 6e                	jne    c000496a <f_readdir+0x8b>
c00048fc:	85 ff                	test   edi,edi
c00048fe:	75 0b                	jne    c000490b <f_readdir+0x2c>
c0004900:	31 d2                	xor    edx,edx
c0004902:	89 d8                	mov    eax,ebx
c0004904:	e8 f8 eb ff ff       	call   c0003501 <dir_sdi>
c0004909:	eb 5f                	jmp    c000496a <f_readdir+0x8b>
c000490b:	83 ec 0c             	sub    esp,0xc
c000490e:	68 00 02 00 00       	push   0x200
c0004913:	e8 f0 14 00 00       	call   c0005e08 <ff_memalloc>
c0004918:	83 c4 10             	add    esp,0x10
c000491b:	89 c6                	mov    esi,eax
c000491d:	b8 11 00 00 00       	mov    eax,0x11
c0004922:	85 f6                	test   esi,esi
c0004924:	74 44                	je     c000496a <f_readdir+0x8b>
c0004926:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000492a:	31 d2                	xor    edx,edx
c000492c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000492f:	89 d8                	mov    eax,ebx
c0004931:	e8 ca ef ff ff       	call   c0003900 <dir_read>
c0004936:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000493b:	75 19                	jne    c0004956 <f_readdir+0x77>
c000493d:	89 fa                	mov    edx,edi
c000493f:	89 d8                	mov    eax,ebx
c0004941:	e8 70 e8 ff ff       	call   c00031b6 <get_fileinfo>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	e8 47 ee ff ff       	call   c0003796 <dir_next>
c000494f:	83 f8 04             	cmp    eax,0x4
c0004952:	75 02                	jne    c0004956 <f_readdir+0x77>
c0004954:	31 c0                	xor    eax,eax
c0004956:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000495a:	83 ec 0c             	sub    esp,0xc
c000495d:	56                   	push   esi
c000495e:	e8 bd 14 00 00       	call   c0005e20 <ff_memfree>
c0004963:	83 c4 10             	add    esp,0x10
c0004966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000496a:	83 c4 20             	add    esp,0x20
c000496d:	5b                   	pop    ebx
c000496e:	5e                   	pop    esi
c000496f:	5f                   	pop    edi
c0004970:	c3                   	ret    

c0004971 <f_stat>:
c0004971:	57                   	push   edi
c0004972:	31 c9                	xor    ecx,ecx
c0004974:	56                   	push   esi
c0004975:	53                   	push   ebx
c0004976:	83 ec 30             	sub    esp,0x30
c0004979:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000497d:	89 e2                	mov    edx,esp
c000497f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004983:	e8 f2 dc ff ff       	call   c000267a <mount_volume>
c0004988:	89 c3                	mov    ebx,eax
c000498a:	85 c0                	test   eax,eax
c000498c:	75 59                	jne    c00049e7 <f_stat+0x76>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	bb 11 00 00 00       	mov    ebx,0x11
c0004996:	68 00 02 00 00       	push   0x200
c000499b:	e8 68 14 00 00       	call   c0005e08 <ff_memalloc>
c00049a0:	83 c4 10             	add    esp,0x10
c00049a3:	89 c6                	mov    esi,eax
c00049a5:	85 c0                	test   eax,eax
c00049a7:	74 3e                	je     c00049e7 <f_stat+0x76>
c00049a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049b0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049b3:	89 e0                	mov    eax,esp
c00049b5:	e8 0a f2 ff ff       	call   c0003bc4 <follow_path>
c00049ba:	89 c3                	mov    ebx,eax
c00049bc:	85 c0                	test   eax,eax
c00049be:	75 1b                	jne    c00049db <f_stat+0x6a>
c00049c0:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049c5:	75 0f                	jne    c00049d6 <f_stat+0x65>
c00049c7:	85 ff                	test   edi,edi
c00049c9:	74 10                	je     c00049db <f_stat+0x6a>
c00049cb:	89 fa                	mov    edx,edi
c00049cd:	89 e0                	mov    eax,esp
c00049cf:	e8 e2 e7 ff ff       	call   c00031b6 <get_fileinfo>
c00049d4:	eb 05                	jmp    c00049db <f_stat+0x6a>
c00049d6:	bb 06 00 00 00       	mov    ebx,0x6
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	56                   	push   esi
c00049df:	e8 3c 14 00 00       	call   c0005e20 <ff_memfree>
c00049e4:	83 c4 10             	add    esp,0x10
c00049e7:	83 c4 30             	add    esp,0x30
c00049ea:	89 d8                	mov    eax,ebx
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	c3                   	ret    

c00049f0 <f_getfree>:
c00049f0:	55                   	push   ebp
c00049f1:	31 c9                	xor    ecx,ecx
c00049f3:	57                   	push   edi
c00049f4:	56                   	push   esi
c00049f5:	53                   	push   ebx
c00049f6:	83 ec 2c             	sub    esp,0x2c
c00049f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049fd:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a01:	e8 74 dc ff ff       	call   c000267a <mount_volume>
c0004a06:	89 c7                	mov    edi,eax
c0004a08:	85 c0                	test   eax,eax
c0004a0a:	0f 85 df 00 00 00    	jne    c0004aef <f_getfree+0xff>
c0004a10:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004a14:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a18:	89 30                	mov    DWORD PTR [eax],esi
c0004a1a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004a1d:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004a20:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004a23:	39 d0                	cmp    eax,edx
c0004a25:	77 0b                	ja     c0004a32 <f_getfree+0x42>
c0004a27:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a2b:	89 01                	mov    DWORD PTR [ecx],eax
c0004a2d:	e9 bd 00 00 00       	jmp    c0004aef <f_getfree+0xff>
c0004a32:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004a35:	75 29                	jne    c0004a60 <f_getfree+0x70>
c0004a37:	bd 02 00 00 00       	mov    ebp,0x2
c0004a3c:	31 db                	xor    ebx,ebx
c0004a3e:	89 ea                	mov    edx,ebp
c0004a40:	89 f0                	mov    eax,esi
c0004a42:	e8 b6 e9 ff ff       	call   c00033fd <get_fat.isra.2>
c0004a47:	83 f8 ff             	cmp    eax,0xffffffff
c0004a4a:	74 7d                	je     c0004ac9 <f_getfree+0xd9>
c0004a4c:	83 f8 01             	cmp    eax,0x1
c0004a4f:	74 7f                	je     c0004ad0 <f_getfree+0xe0>
c0004a51:	83 d3 00             	adc    ebx,0x0
c0004a54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a58:	45                   	inc    ebp
c0004a59:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004a5c:	77 e0                	ja     c0004a3e <f_getfree+0x4e>
c0004a5e:	eb 79                	jmp    c0004ad9 <f_getfree+0xe9>
c0004a60:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004a63:	31 db                	xor    ebx,ebx
c0004a65:	31 f6                	xor    esi,esi
c0004a67:	85 f6                	test   esi,esi
c0004a69:	75 18                	jne    c0004a83 <f_getfree+0x93>
c0004a6b:	8d 42 01             	lea    eax,[edx+0x1]
c0004a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a76:	e8 ac da ff ff       	call   c0002527 <move_window>
c0004a7b:	85 c0                	test   eax,eax
c0004a7d:	75 58                	jne    c0004ad7 <f_getfree+0xe7>
c0004a7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004a87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004a8b:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004a8f:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004a92:	75 13                	jne    c0004aa7 <f_getfree+0xb7>
c0004a94:	e8 27 d5 ff ff       	call   c0001fc0 <ld_word>
c0004a99:	0f b7 c0             	movzx  eax,ax
c0004a9c:	83 f8 01             	cmp    eax,0x1
c0004a9f:	83 d3 00             	adc    ebx,0x0
c0004aa2:	83 c6 02             	add    esi,0x2
c0004aa5:	eb 13                	jmp    c0004aba <f_getfree+0xca>
c0004aa7:	e8 21 d5 ff ff       	call   c0001fcd <ld_dword>
c0004aac:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004ab1:	83 f8 01             	cmp    eax,0x1
c0004ab4:	83 d3 00             	adc    ebx,0x0
c0004ab7:	83 c6 04             	add    esi,0x4
c0004aba:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004ac0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ac4:	4d                   	dec    ebp
c0004ac5:	75 a0                	jne    c0004a67 <f_getfree+0x77>
c0004ac7:	eb 10                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ac9:	bf 01 00 00 00       	mov    edi,0x1
c0004ace:	eb 09                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad0:	bf 02 00 00 00       	mov    edi,0x2
c0004ad5:	eb 02                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad7:	89 c7                	mov    edi,eax
c0004ad9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004add:	89 18                	mov    DWORD PTR [eax],ebx
c0004adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae3:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004ae6:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004ae9:	83 ca 01             	or     edx,0x1
c0004aec:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004aef:	83 c4 2c             	add    esp,0x2c
c0004af2:	89 f8                	mov    eax,edi
c0004af4:	5b                   	pop    ebx
c0004af5:	5e                   	pop    esi
c0004af6:	5f                   	pop    edi
c0004af7:	5d                   	pop    ebp
c0004af8:	c3                   	ret    

c0004af9 <f_truncate>:
c0004af9:	56                   	push   esi
c0004afa:	53                   	push   ebx
c0004afb:	83 ec 14             	sub    esp,0x14
c0004afe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b06:	89 d8                	mov    eax,ebx
c0004b08:	e8 71 d9 ff ff       	call   c000247e <validate>
c0004b0d:	89 c6                	mov    esi,eax
c0004b0f:	85 c0                	test   eax,eax
c0004b11:	0f 85 c4 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b17:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b1b:	85 f6                	test   esi,esi
c0004b1d:	0f 85 b8 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b23:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b27:	0f 84 a9 00 00 00    	je     c0004bd6 <f_truncate+0xdd>
c0004b2d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b30:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b33:	0f 83 a2 00 00 00    	jae    c0004bdb <f_truncate+0xe2>
c0004b39:	85 c0                	test   eax,eax
c0004b3b:	75 15                	jne    c0004b52 <f_truncate+0x59>
c0004b3d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b40:	31 c9                	xor    ecx,ecx
c0004b42:	89 d8                	mov    eax,ebx
c0004b44:	e8 bf eb ff ff       	call   c0003708 <remove_chain>
c0004b49:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b50:	eb 35                	jmp    c0004b87 <f_truncate+0x8e>
c0004b52:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b57:	e8 a1 e8 ff ff       	call   c00033fd <get_fat.isra.2>
c0004b5c:	89 c2                	mov    edx,eax
c0004b5e:	b8 01 00 00 00       	mov    eax,0x1
c0004b63:	83 fa ff             	cmp    edx,0xffffffff
c0004b66:	74 1f                	je     c0004b87 <f_truncate+0x8e>
c0004b68:	b8 02 00 00 00       	mov    eax,0x2
c0004b6d:	83 fa 01             	cmp    edx,0x1
c0004b70:	74 15                	je     c0004b87 <f_truncate+0x8e>
c0004b72:	31 c0                	xor    eax,eax
c0004b74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b78:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b7b:	76 0a                	jbe    c0004b87 <f_truncate+0x8e>
c0004b7d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b80:	89 d8                	mov    eax,ebx
c0004b82:	e8 81 eb ff ff       	call   c0003708 <remove_chain>
c0004b87:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004b8a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004b8d:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004b90:	83 ca 40             	or     edx,0x40
c0004b93:	85 c0                	test   eax,eax
c0004b95:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004b98:	75 35                	jne    c0004bcf <f_truncate+0xd6>
c0004b9a:	80 e2 80             	and    dl,0x80
c0004b9d:	74 3c                	je     c0004bdb <f_truncate+0xe2>
c0004b9f:	6a 01                	push   0x1
c0004ba1:	8d 43 28             	lea    eax,[ebx+0x28]
c0004ba4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004ba7:	50                   	push   eax
c0004ba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bb0:	50                   	push   eax
c0004bb1:	e8 d5 d3 ff ff       	call   c0001f8b <disk_write>
c0004bb6:	83 c4 10             	add    esp,0x10
c0004bb9:	85 c0                	test   eax,eax
c0004bbb:	75 0d                	jne    c0004bca <f_truncate+0xd1>
c0004bbd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bc0:	31 f6                	xor    esi,esi
c0004bc2:	83 e0 7f             	and    eax,0x7f
c0004bc5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004bc8:	eb 11                	jmp    c0004bdb <f_truncate+0xe2>
c0004bca:	b8 01 00 00 00       	mov    eax,0x1
c0004bcf:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	eb 05                	jmp    c0004bdb <f_truncate+0xe2>
c0004bd6:	be 07 00 00 00       	mov    esi,0x7
c0004bdb:	89 f0                	mov    eax,esi
c0004bdd:	83 c4 14             	add    esp,0x14
c0004be0:	5b                   	pop    ebx
c0004be1:	5e                   	pop    esi
c0004be2:	c3                   	ret    

c0004be3 <f_unlink>:
c0004be3:	55                   	push   ebp
c0004be4:	b9 02 00 00 00       	mov    ecx,0x2
c0004be9:	57                   	push   edi
c0004bea:	56                   	push   esi
c0004beb:	53                   	push   ebx
c0004bec:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004bf2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004bf6:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004bfd:	e8 78 da ff ff       	call   c000267a <mount_volume>
c0004c02:	85 c0                	test   eax,eax
c0004c04:	0f 85 f0 00 00 00    	jne    c0004cfa <f_unlink+0x117>
c0004c0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c0e:	83 ec 0c             	sub    esp,0xc
c0004c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c15:	68 00 02 00 00       	push   0x200
c0004c1a:	e8 e9 11 00 00       	call   c0005e08 <ff_memalloc>
c0004c1f:	83 c4 10             	add    esp,0x10
c0004c22:	89 c3                	mov    ebx,eax
c0004c24:	b8 11 00 00 00       	mov    eax,0x11
c0004c29:	85 db                	test   ebx,ebx
c0004c2b:	0f 84 c9 00 00 00    	je     c0004cfa <f_unlink+0x117>
c0004c31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c35:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c3c:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c43:	e8 7c ef ff ff       	call   c0003bc4 <follow_path>
c0004c48:	85 c0                	test   eax,eax
c0004c4a:	0f 85 96 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c50:	b8 06 00 00 00       	mov    eax,0x6
c0004c55:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c5a:	0f 85 86 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c60:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c65:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c6b:	74 07                	je     c0004c74 <f_unlink+0x91>
c0004c6d:	b8 07 00 00 00       	mov    eax,0x7
c0004c72:	eb 72                	jmp    c0004ce6 <f_unlink+0x103>
c0004c74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c78:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c7c:	8a 07                	mov    al,BYTE PTR [edi]
c0004c7e:	e8 29 e7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004c83:	83 e5 10             	and    ebp,0x10
c0004c86:	89 c6                	mov    esi,eax
c0004c88:	75 0f                	jne    c0004c99 <f_unlink+0xb6>
c0004c8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c8e:	e8 95 ed ff ff       	call   c0003a28 <dir_remove>
c0004c93:	85 c0                	test   eax,eax
c0004c95:	74 2f                	je     c0004cc6 <f_unlink+0xe3>
c0004c97:	eb 4d                	jmp    c0004ce6 <f_unlink+0x103>
c0004c99:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004c9d:	31 d2                	xor    edx,edx
c0004c9f:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004ca3:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ca7:	e8 55 e8 ff ff       	call   c0003501 <dir_sdi>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	75 36                	jne    c0004ce6 <f_unlink+0x103>
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cb6:	e8 45 ec ff ff       	call   c0003900 <dir_read>
c0004cbb:	85 c0                	test   eax,eax
c0004cbd:	74 ae                	je     c0004c6d <f_unlink+0x8a>
c0004cbf:	83 f8 04             	cmp    eax,0x4
c0004cc2:	75 22                	jne    c0004ce6 <f_unlink+0x103>
c0004cc4:	eb c4                	jmp    c0004c8a <f_unlink+0xa7>
c0004cc6:	85 f6                	test   esi,esi
c0004cc8:	75 0b                	jne    c0004cd5 <f_unlink+0xf2>
c0004cca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cce:	e8 8b e2 ff ff       	call   c0002f5e <sync_fs>
c0004cd3:	eb 11                	jmp    c0004ce6 <f_unlink+0x103>
c0004cd5:	31 c9                	xor    ecx,ecx
c0004cd7:	89 f2                	mov    edx,esi
c0004cd9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cdd:	e8 26 ea ff ff       	call   c0003708 <remove_chain>
c0004ce2:	85 c0                	test   eax,eax
c0004ce4:	74 e4                	je     c0004cca <f_unlink+0xe7>
c0004ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cea:	83 ec 0c             	sub    esp,0xc
c0004ced:	53                   	push   ebx
c0004cee:	e8 2d 11 00 00       	call   c0005e20 <ff_memfree>
c0004cf3:	83 c4 10             	add    esp,0x10
c0004cf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cfa:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d00:	5b                   	pop    ebx
c0004d01:	5e                   	pop    esi
c0004d02:	5f                   	pop    edi
c0004d03:	5d                   	pop    ebp
c0004d04:	c3                   	ret    

c0004d05 <f_mkdir>:
c0004d05:	57                   	push   edi
c0004d06:	b9 02 00 00 00       	mov    ecx,0x2
c0004d0b:	56                   	push   esi
c0004d0c:	53                   	push   ebx
c0004d0d:	83 ec 50             	sub    esp,0x50
c0004d10:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 5d d9 ff ff       	call   c000267a <mount_volume>
c0004d1d:	89 c3                	mov    ebx,eax
c0004d1f:	85 c0                	test   eax,eax
c0004d21:	0f 85 70 01 00 00    	jne    c0004e97 <f_mkdir+0x192>
c0004d27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d2b:	bb 11 00 00 00       	mov    ebx,0x11
c0004d30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004d34:	83 ec 0c             	sub    esp,0xc
c0004d37:	68 00 02 00 00       	push   0x200
c0004d3c:	e8 c7 10 00 00       	call   c0005e08 <ff_memalloc>
c0004d41:	83 c4 10             	add    esp,0x10
c0004d44:	89 c7                	mov    edi,eax
c0004d46:	85 c0                	test   eax,eax
c0004d48:	0f 84 49 01 00 00    	je     c0004e97 <f_mkdir+0x192>
c0004d4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d52:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d56:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d59:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d5d:	e8 62 ee ff ff       	call   c0003bc4 <follow_path>
c0004d62:	89 c3                	mov    ebx,eax
c0004d64:	85 c0                	test   eax,eax
c0004d66:	74 3e                	je     c0004da6 <f_mkdir+0xa1>
c0004d68:	83 f8 04             	cmp    eax,0x4
c0004d6b:	75 3e                	jne    c0004dab <f_mkdir+0xa6>
c0004d6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d71:	31 d2                	xor    edx,edx
c0004d73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d77:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d7b:	e8 49 e8 ff ff       	call   c00035c9 <create_chain>
c0004d80:	89 c6                	mov    esi,eax
c0004d82:	85 c0                	test   eax,eax
c0004d84:	74 0c                	je     c0004d92 <f_mkdir+0x8d>
c0004d86:	bb 02 00 00 00       	mov    ebx,0x2
c0004d8b:	83 f8 01             	cmp    eax,0x1
c0004d8e:	74 07                	je     c0004d97 <f_mkdir+0x92>
c0004d90:	eb 2a                	jmp    c0004dbc <f_mkdir+0xb7>
c0004d92:	bb 07 00 00 00       	mov    ebx,0x7
c0004d97:	31 c9                	xor    ecx,ecx
c0004d99:	89 f2                	mov    edx,esi
c0004d9b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d9f:	e8 64 e9 ff ff       	call   c0003708 <remove_chain>
c0004da4:	eb 05                	jmp    c0004dab <f_mkdir+0xa6>
c0004da6:	bb 08 00 00 00       	mov    ebx,0x8
c0004dab:	83 ec 0c             	sub    esp,0xc
c0004dae:	57                   	push   edi
c0004daf:	e8 6c 10 00 00       	call   c0005e20 <ff_memfree>
c0004db4:	83 c4 10             	add    esp,0x10
c0004db7:	e9 db 00 00 00       	jmp    c0004e97 <f_mkdir+0x192>
c0004dbc:	bb 01 00 00 00       	mov    ebx,0x1
c0004dc1:	83 f8 ff             	cmp    eax,0xffffffff
c0004dc4:	74 d1                	je     c0004d97 <f_mkdir+0x92>
c0004dc6:	89 f2                	mov    edx,esi
c0004dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dcc:	e8 f1 dc ff ff       	call   c0002ac2 <dir_clear>
c0004dd1:	89 c3                	mov    ebx,eax
c0004dd3:	85 c0                	test   eax,eax
c0004dd5:	75 c0                	jne    c0004d97 <f_mkdir+0x92>
c0004dd7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de0:	ba 20 00 00 00       	mov    edx,0x20
c0004de5:	83 c0 34             	add    eax,0x34
c0004de8:	e8 14 d2 ff ff       	call   c0002001 <mem_set>
c0004ded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df1:	ba 00 00 21 50       	mov    edx,0x50210000
c0004df6:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004dfa:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004dfe:	83 c0 4a             	add    eax,0x4a
c0004e01:	e8 e3 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0a:	89 f1                	mov    ecx,esi
c0004e0c:	8d 50 34             	lea    edx,[eax+0x34]
c0004e0f:	e8 c1 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e18:	b9 20 00 00 00       	mov    ecx,0x20
c0004e1d:	8d 50 34             	lea    edx,[eax+0x34]
c0004e20:	83 c0 54             	add    eax,0x54
c0004e23:	e8 c4 d1 ff ff       	call   c0001fec <mem_cpy>
c0004e28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e2c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e30:	8d 50 54             	lea    edx,[eax+0x54]
c0004e33:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e37:	e8 99 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e40:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e44:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e48:	e8 0c ee ff ff       	call   c0003c59 <dir_register>
c0004e4d:	89 c3                	mov    ebx,eax
c0004e4f:	85 c0                	test   eax,eax
c0004e51:	0f 85 40 ff ff ff    	jne    c0004d97 <f_mkdir+0x92>
c0004e57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e5b:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e60:	83 c0 16             	add    eax,0x16
c0004e63:	e8 81 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e68:	89 f1                	mov    ecx,esi
c0004e6a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e72:	e8 5e e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e7b:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e83:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8b:	e8 ce e0 ff ff       	call   c0002f5e <sync_fs>
c0004e90:	89 c3                	mov    ebx,eax
c0004e92:	e9 14 ff ff ff       	jmp    c0004dab <f_mkdir+0xa6>
c0004e97:	83 c4 50             	add    esp,0x50
c0004e9a:	89 d8                	mov    eax,ebx
c0004e9c:	5b                   	pop    ebx
c0004e9d:	5e                   	pop    esi
c0004e9e:	5f                   	pop    edi
c0004e9f:	c3                   	ret    

c0004ea0 <f_rename>:
c0004ea0:	57                   	push   edi
c0004ea1:	56                   	push   esi
c0004ea2:	53                   	push   ebx
c0004ea3:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ea9:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004eb0:	e8 7c d5 ff ff       	call   c0002431 <get_ldnumber>
c0004eb5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ebe:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ec5:	e8 b0 d7 ff ff       	call   c000267a <mount_volume>
c0004eca:	85 c0                	test   eax,eax
c0004ecc:	0f 85 7c 01 00 00    	jne    c000504e <f_rename+0x1ae>
c0004ed2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004edd:	68 00 02 00 00       	push   0x200
c0004ee2:	e8 21 0f 00 00       	call   c0005e08 <ff_memalloc>
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	89 c6                	mov    esi,eax
c0004eec:	b8 11 00 00 00       	mov    eax,0x11
c0004ef1:	85 f6                	test   esi,esi
c0004ef3:	0f 84 55 01 00 00    	je     c000504e <f_rename+0x1ae>
c0004ef9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efd:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f04:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f07:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f0b:	e8 b4 ec ff ff       	call   c0003bc4 <follow_path>
c0004f10:	85 c0                	test   eax,eax
c0004f12:	0f 85 22 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f18:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f1c:	b8 06 00 00 00       	mov    eax,0x6
c0004f21:	80 e2 a0             	and    dl,0xa0
c0004f24:	0f 85 10 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f2a:	b9 20 00 00 00       	mov    ecx,0x20
c0004f2f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f37:	e8 b0 d0 ff ff       	call   c0001fec <mem_cpy>
c0004f3c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f41:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f45:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f49:	e8 9e d0 ff ff       	call   c0001fec <mem_cpy>
c0004f4e:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f59:	e8 66 ec ff ff       	call   c0003bc4 <follow_path>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	75 20                	jne    c0004f82 <f_rename+0xe2>
c0004f62:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f66:	b8 08 00 00 00       	mov    eax,0x8
c0004f6b:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f6f:	0f 85 c5 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f75:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f79:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f80:	eb 03                	jmp    c0004f85 <f_rename+0xe5>
c0004f82:	83 f8 04             	cmp    eax,0x4
c0004f85:	0f 85 af 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f8b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f8f:	e8 c5 ec ff ff       	call   c0003c59 <dir_register>
c0004f94:	85 c0                	test   eax,eax
c0004f96:	0f 85 9e 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f9c:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fa3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fa8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fab:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004faf:	e8 38 d0 ff ff       	call   c0001fec <mem_cpy>
c0004fb4:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fb8:	a8 10                	test   al,0x10
c0004fba:	75 03                	jne    c0004fbf <f_rename+0x11f>
c0004fbc:	83 c8 20             	or     eax,0x20
c0004fbf:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fc6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fca:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fce:	74 54                	je     c0005024 <f_rename+0x184>
c0004fd0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004fd4:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004fd8:	74 4a                	je     c0005024 <f_rename+0x184>
c0004fda:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004fde:	89 da                	mov    edx,ebx
c0004fe0:	8a 07                	mov    al,BYTE PTR [edi]
c0004fe2:	e8 c5 e3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004fe7:	89 c2                	mov    edx,eax
c0004fe9:	89 f8                	mov    eax,edi
c0004feb:	e8 27 d2 ff ff       	call   c0002217 <clst2sect>
c0004ff0:	89 c2                	mov    edx,eax
c0004ff2:	b8 02 00 00 00       	mov    eax,0x2
c0004ff7:	85 d2                	test   edx,edx
c0004ff9:	74 3f                	je     c000503a <f_rename+0x19a>
c0004ffb:	89 f8                	mov    eax,edi
c0004ffd:	e8 25 d5 ff ff       	call   c0002527 <move_window>
c0005002:	85 c0                	test   eax,eax
c0005004:	75 34                	jne    c000503a <f_rename+0x19a>
c0005006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000500a:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000500e:	75 14                	jne    c0005024 <f_rename+0x184>
c0005010:	8d 50 54             	lea    edx,[eax+0x54]
c0005013:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005017:	e8 b9 e3 ff ff       	call   c00033d5 <st_clust.isra.1>
c000501c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005020:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005024:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005028:	e8 fb e9 ff ff       	call   c0003a28 <dir_remove>
c000502d:	85 c0                	test   eax,eax
c000502f:	75 09                	jne    c000503a <f_rename+0x19a>
c0005031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005035:	e8 24 df ff ff       	call   c0002f5e <sync_fs>
c000503a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000503e:	83 ec 0c             	sub    esp,0xc
c0005041:	56                   	push   esi
c0005042:	e8 d9 0d 00 00       	call   c0005e20 <ff_memfree>
c0005047:	83 c4 10             	add    esp,0x10
c000504a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000504e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005054:	5b                   	pop    ebx
c0005055:	5e                   	pop    esi
c0005056:	5f                   	pop    edi
c0005057:	c3                   	ret    

c0005058 <f_chmod>:
c0005058:	57                   	push   edi
c0005059:	b9 02 00 00 00       	mov    ecx,0x2
c000505e:	56                   	push   esi
c000505f:	53                   	push   ebx
c0005060:	83 ec 50             	sub    esp,0x50
c0005063:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005067:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000506b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000506f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005073:	e8 02 d6 ff ff       	call   c000267a <mount_volume>
c0005078:	85 c0                	test   eax,eax
c000507a:	0f 85 81 00 00 00    	jne    c0005101 <f_chmod+0xa9>
c0005080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005084:	83 ec 0c             	sub    esp,0xc
c0005087:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000508b:	68 00 02 00 00       	push   0x200
c0005090:	e8 73 0d 00 00       	call   c0005e08 <ff_memalloc>
c0005095:	83 c4 10             	add    esp,0x10
c0005098:	89 c6                	mov    esi,eax
c000509a:	b8 11 00 00 00       	mov    eax,0x11
c000509f:	85 f6                	test   esi,esi
c00050a1:	74 5e                	je     c0005101 <f_chmod+0xa9>
c00050a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b2:	e8 0d eb ff ff       	call   c0003bc4 <follow_path>
c00050b7:	85 c0                	test   eax,eax
c00050b9:	75 32                	jne    c00050ed <f_chmod+0x95>
c00050bb:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050bf:	b8 06 00 00 00       	mov    eax,0x6
c00050c4:	80 e2 a0             	and    dl,0xa0
c00050c7:	75 24                	jne    c00050ed <f_chmod+0x95>
c00050c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cd:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050d0:	31 d7                	xor    edi,edx
c00050d2:	21 fb                	and    ebx,edi
c00050d4:	83 e3 27             	and    ebx,0x27
c00050d7:	31 d3                	xor    ebx,edx
c00050d9:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e8:	e8 71 de ff ff       	call   c0002f5e <sync_fs>
c00050ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050f1:	83 ec 0c             	sub    esp,0xc
c00050f4:	56                   	push   esi
c00050f5:	e8 26 0d 00 00       	call   c0005e20 <ff_memfree>
c00050fa:	83 c4 10             	add    esp,0x10
c00050fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005101:	83 c4 50             	add    esp,0x50
c0005104:	5b                   	pop    ebx
c0005105:	5e                   	pop    esi
c0005106:	5f                   	pop    edi
c0005107:	c3                   	ret    

c0005108 <f_utime>:
c0005108:	56                   	push   esi
c0005109:	b9 02 00 00 00       	mov    ecx,0x2
c000510e:	53                   	push   ebx
c000510f:	83 ec 54             	sub    esp,0x54
c0005112:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005116:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000511a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000511e:	e8 57 d5 ff ff       	call   c000267a <mount_volume>
c0005123:	85 c0                	test   eax,eax
c0005125:	0f 85 87 00 00 00    	jne    c00051b2 <f_utime+0xaa>
c000512b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000512f:	83 ec 0c             	sub    esp,0xc
c0005132:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005136:	68 00 02 00 00       	push   0x200
c000513b:	e8 c8 0c 00 00       	call   c0005e08 <ff_memalloc>
c0005140:	83 c4 10             	add    esp,0x10
c0005143:	89 c3                	mov    ebx,eax
c0005145:	b8 11 00 00 00       	mov    eax,0x11
c000514a:	85 db                	test   ebx,ebx
c000514c:	74 64                	je     c00051b2 <f_utime+0xaa>
c000514e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005152:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005156:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005159:	8d 44 24 20          	lea    eax,[esp+0x20]
c000515d:	e8 62 ea ff ff       	call   c0003bc4 <follow_path>
c0005162:	85 c0                	test   eax,eax
c0005164:	75 38                	jne    c000519e <f_utime+0x96>
c0005166:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000516a:	b8 06 00 00 00       	mov    eax,0x6
c000516f:	80 e2 a0             	and    dl,0xa0
c0005172:	75 2a                	jne    c000519e <f_utime+0x96>
c0005174:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005178:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c000517c:	c1 e2 10             	shl    edx,0x10
c000517f:	09 c2                	or     edx,eax
c0005181:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005185:	83 c0 16             	add    eax,0x16
c0005188:	e8 5c ce ff ff       	call   c0001fe9 <st_dword>
c000518d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005191:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005195:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005199:	e8 c0 dd ff ff       	call   c0002f5e <sync_fs>
c000519e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051a2:	83 ec 0c             	sub    esp,0xc
c00051a5:	53                   	push   ebx
c00051a6:	e8 75 0c 00 00       	call   c0005e20 <ff_memfree>
c00051ab:	83 c4 10             	add    esp,0x10
c00051ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051b2:	83 c4 54             	add    esp,0x54
c00051b5:	5b                   	pop    ebx
c00051b6:	5e                   	pop    esi
c00051b7:	c3                   	ret    

c00051b8 <f_getlabel>:
c00051b8:	55                   	push   ebp
c00051b9:	31 c9                	xor    ecx,ecx
c00051bb:	57                   	push   edi
c00051bc:	56                   	push   esi
c00051bd:	53                   	push   ebx
c00051be:	83 ec 5c             	sub    esp,0x5c
c00051c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051c5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051c9:	e8 ac d4 ff ff       	call   c000267a <mount_volume>
c00051ce:	89 c6                	mov    esi,eax
c00051d0:	85 c0                	test   eax,eax
c00051d2:	0f 85 27 01 00 00    	jne    c00052ff <f_getlabel+0x147>
c00051d8:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00051dd:	0f 84 d0 00 00 00    	je     c00052b3 <f_getlabel+0xfb>
c00051e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e7:	31 d2                	xor    edx,edx
c00051e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051ed:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051f5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051f9:	e8 03 e3 ff ff       	call   c0003501 <dir_sdi>
c00051fe:	85 c0                	test   eax,eax
c0005200:	0f 85 a1 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c0005206:	ba 01 00 00 00       	mov    edx,0x1
c000520b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000520f:	e8 ec e6 ff ff       	call   c0003900 <dir_read>
c0005214:	85 c0                	test   eax,eax
c0005216:	0f 85 8b 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c000521c:	31 db                	xor    ebx,ebx
c000521e:	31 c9                	xor    ecx,ecx
c0005220:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005224:	8d 79 01             	lea    edi,[ecx+0x1]
c0005227:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000522c:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005235:	e8 06 ce ff ff       	call   c0002040 <dbc_1st>
c000523a:	85 c0                	test   eax,eax
c000523c:	74 16                	je     c0005254 <f_getlabel+0x9c>
c000523e:	83 ff 0b             	cmp    edi,0xb
c0005241:	74 11                	je     c0005254 <f_getlabel+0x9c>
c0005243:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000524c:	8d 79 02             	lea    edi,[ecx+0x2]
c000524f:	c1 e0 08             	shl    eax,0x8
c0005252:	09 c2                	or     edx,eax
c0005254:	0f b7 d2             	movzx  edx,dx
c0005257:	50                   	push   eax
c0005258:	50                   	push   eax
c0005259:	68 b5 01 00 00       	push   0x1b5
c000525e:	52                   	push   edx
c000525f:	e8 74 0c 00 00       	call   c0005ed8 <ff_oem2uni>
c0005264:	83 c4 10             	add    esp,0x10
c0005267:	0f b7 c0             	movzx  eax,ax
c000526a:	85 c0                	test   eax,eax
c000526c:	74 22                	je     c0005290 <f_getlabel+0xd8>
c000526e:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005272:	b9 04 00 00 00       	mov    ecx,0x4
c0005277:	01 da                	add    edx,ebx
c0005279:	e8 a0 ce ff ff       	call   c000211e <put_utf>
c000527e:	0f b6 c0             	movzx  eax,al
c0005281:	85 c0                	test   eax,eax
c0005283:	74 0b                	je     c0005290 <f_getlabel+0xd8>
c0005285:	01 c3                	add    ebx,eax
c0005287:	83 ff 0b             	cmp    edi,0xb
c000528a:	74 06                	je     c0005292 <f_getlabel+0xda>
c000528c:	89 f9                	mov    ecx,edi
c000528e:	eb 90                	jmp    c0005220 <f_getlabel+0x68>
c0005290:	31 db                	xor    ebx,ebx
c0005292:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0005296:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0005299:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c000529d:	74 14                	je     c00052b3 <f_getlabel+0xfb>
c000529f:	4b                   	dec    ebx
c00052a0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00052a3:	74 f1                	je     c0005296 <f_getlabel+0xde>
c00052a5:	eb 0c                	jmp    c00052b3 <f_getlabel+0xfb>
c00052a7:	83 f8 04             	cmp    eax,0x4
c00052aa:	75 51                	jne    c00052fd <f_getlabel+0x145>
c00052ac:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00052b0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00052b3:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052b8:	74 45                	je     c00052ff <f_getlabel+0x147>
c00052ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052c1:	e8 61 d2 ff ff       	call   c0002527 <move_window>
c00052c6:	89 c6                	mov    esi,eax
c00052c8:	85 c0                	test   eax,eax
c00052ca:	75 33                	jne    c00052ff <f_getlabel+0x147>
c00052cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052d0:	b8 43 00 00 00       	mov    eax,0x43
c00052d5:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052d8:	83 f9 03             	cmp    ecx,0x3
c00052db:	74 0f                	je     c00052ec <f_getlabel+0x134>
c00052dd:	31 c0                	xor    eax,eax
c00052df:	83 f9 04             	cmp    ecx,0x4
c00052e2:	0f 94 c0             	sete   al
c00052e5:	48                   	dec    eax
c00052e6:	83 e0 c3             	and    eax,0xffffffc3
c00052e9:	83 c0 64             	add    eax,0x64
c00052ec:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00052f0:	e8 d8 cc ff ff       	call   c0001fcd <ld_dword>
c00052f5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00052f9:	89 07                	mov    DWORD PTR [edi],eax
c00052fb:	eb 02                	jmp    c00052ff <f_getlabel+0x147>
c00052fd:	89 c6                	mov    esi,eax
c00052ff:	83 c4 5c             	add    esp,0x5c
c0005302:	89 f0                	mov    eax,esi
c0005304:	5b                   	pop    ebx
c0005305:	5e                   	pop    esi
c0005306:	5f                   	pop    edi
c0005307:	5d                   	pop    ebp
c0005308:	c3                   	ret    

c0005309 <f_setlabel>:
c0005309:	57                   	push   edi
c000530a:	b9 02 00 00 00       	mov    ecx,0x2
c000530f:	56                   	push   esi
c0005310:	53                   	push   ebx
c0005311:	83 ec 50             	sub    esp,0x50
c0005314:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005318:	8d 44 24 60          	lea    eax,[esp+0x60]
c000531c:	e8 59 d3 ff ff       	call   c000267a <mount_volume>
c0005321:	89 c6                	mov    esi,eax
c0005323:	85 c0                	test   eax,eax
c0005325:	0f 85 65 01 00 00    	jne    c0005490 <f_setlabel+0x187>
c000532b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005330:	ba 20 00 00 00       	mov    edx,0x20
c0005335:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005339:	31 db                	xor    ebx,ebx
c000533b:	e8 c1 cc ff ff       	call   c0002001 <mem_set>
c0005340:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005344:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005347:	76 5d                	jbe    c00053a6 <f_setlabel+0x9d>
c0005349:	8d 44 24 60          	lea    eax,[esp+0x60]
c000534d:	e8 f4 cc ff ff       	call   c0002046 <tchar2uni>
c0005352:	3d ff ff 00 00       	cmp    eax,0xffff
c0005357:	76 0a                	jbe    c0005363 <f_setlabel+0x5a>
c0005359:	be 06 00 00 00       	mov    esi,0x6
c000535e:	e9 2d 01 00 00       	jmp    c0005490 <f_setlabel+0x187>
c0005363:	83 ec 0c             	sub    esp,0xc
c0005366:	50                   	push   eax
c0005367:	e8 e4 0b 00 00       	call   c0005f50 <ff_wtoupper>
c000536c:	5a                   	pop    edx
c000536d:	59                   	pop    ecx
c000536e:	68 b5 01 00 00       	push   0x1b5
c0005373:	50                   	push   eax
c0005374:	e8 bf 0a 00 00       	call   c0005e38 <ff_uni2oem>
c0005379:	83 c4 10             	add    esp,0x10
c000537c:	0f b7 f0             	movzx  esi,ax
c000537f:	89 f7                	mov    edi,esi
c0005381:	85 f6                	test   esi,esi
c0005383:	74 d4                	je     c0005359 <f_setlabel+0x50>
c0005385:	89 f2                	mov    edx,esi
c0005387:	b8 d0 0f 02 c0       	mov    eax,0xc0020fd0
c000538c:	e8 9e cc ff ff       	call   c000202f <chk_chr>
c0005391:	85 c0                	test   eax,eax
c0005393:	75 c4                	jne    c0005359 <f_setlabel+0x50>
c0005395:	81 fe ff 00 00 00    	cmp    esi,0xff
c000539b:	0f 87 c9 00 00 00    	ja     c000546a <f_setlabel+0x161>
c00053a1:	e9 e0 00 00 00       	jmp    c0005486 <f_setlabel+0x17d>
c00053a6:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ab:	74 ac                	je     c0005359 <f_setlabel+0x50>
c00053ad:	85 db                	test   ebx,ebx
c00053af:	74 0e                	je     c00053bf <f_setlabel+0xb6>
c00053b1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053b4:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053b9:	75 04                	jne    c00053bf <f_setlabel+0xb6>
c00053bb:	89 c3                	mov    ebx,eax
c00053bd:	eb ee                	jmp    c00053ad <f_setlabel+0xa4>
c00053bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053c3:	31 d2                	xor    edx,edx
c00053c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053c9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053d1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053d5:	e8 27 e1 ff ff       	call   c0003501 <dir_sdi>
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 ac 00 00 00    	jne    c0005490 <f_setlabel+0x187>
c00053e4:	ba 01 00 00 00       	mov    edx,0x1
c00053e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053ed:	e8 0e e5 ff ff       	call   c0003900 <dir_read>
c00053f2:	85 c0                	test   eax,eax
c00053f4:	75 18                	jne    c000540e <f_setlabel+0x105>
c00053f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053fa:	85 db                	test   ebx,ebx
c00053fc:	74 0b                	je     c0005409 <f_setlabel+0x100>
c00053fe:	b9 0b 00 00 00       	mov    ecx,0xb
c0005403:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005407:	eb 47                	jmp    c0005450 <f_setlabel+0x147>
c0005409:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000540c:	eb 47                	jmp    c0005455 <f_setlabel+0x14c>
c000540e:	83 f8 04             	cmp    eax,0x4
c0005411:	75 53                	jne    c0005466 <f_setlabel+0x15d>
c0005413:	85 db                	test   ebx,ebx
c0005415:	74 79                	je     c0005490 <f_setlabel+0x187>
c0005417:	ba 01 00 00 00       	mov    edx,0x1
c000541c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005420:	e8 76 e4 ff ff       	call   c000389b <dir_alloc>
c0005425:	89 c6                	mov    esi,eax
c0005427:	85 c0                	test   eax,eax
c0005429:	75 65                	jne    c0005490 <f_setlabel+0x187>
c000542b:	b9 20 00 00 00       	mov    ecx,0x20
c0005430:	31 d2                	xor    edx,edx
c0005432:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005436:	e8 c6 cb ff ff       	call   c0002001 <mem_set>
c000543b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000543f:	b9 0b 00 00 00       	mov    ecx,0xb
c0005444:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005448:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000544c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005450:	e8 97 cb ff ff       	call   c0001fec <mem_cpy>
c0005455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005459:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000545d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005461:	e8 f8 da ff ff       	call   c0002f5e <sync_fs>
c0005466:	89 c6                	mov    esi,eax
c0005468:	eb 26                	jmp    c0005490 <f_setlabel+0x187>
c000546a:	83 fb 09             	cmp    ebx,0x9
c000546d:	0f 87 e6 fe ff ff    	ja     c0005359 <f_setlabel+0x50>
c0005473:	89 f0                	mov    eax,esi
c0005475:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005479:	43                   	inc    ebx
c000547a:	89 f8                	mov    eax,edi
c000547c:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005480:	43                   	inc    ebx
c0005481:	e9 ba fe ff ff       	jmp    c0005340 <f_setlabel+0x37>
c0005486:	83 fb 0a             	cmp    ebx,0xa
c0005489:	76 ef                	jbe    c000547a <f_setlabel+0x171>
c000548b:	e9 c9 fe ff ff       	jmp    c0005359 <f_setlabel+0x50>
c0005490:	83 c4 50             	add    esp,0x50
c0005493:	89 f0                	mov    eax,esi
c0005495:	5b                   	pop    ebx
c0005496:	5e                   	pop    esi
c0005497:	5f                   	pop    edi
c0005498:	c3                   	ret    

c0005499 <f_expand>:
c0005499:	55                   	push   ebp
c000549a:	57                   	push   edi
c000549b:	56                   	push   esi
c000549c:	53                   	push   ebx
c000549d:	83 ec 2c             	sub    esp,0x2c
c00054a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054ac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054b0:	89 d8                	mov    eax,ebx
c00054b2:	e8 c7 cf ff ff       	call   c000247e <validate>
c00054b7:	89 c6                	mov    esi,eax
c00054b9:	85 c0                	test   eax,eax
c00054bb:	0f 85 3b 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054c1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054c5:	85 f6                	test   esi,esi
c00054c7:	0f 85 2f 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054cd:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054d2:	75 0a                	jne    c00054de <f_expand+0x45>
c00054d4:	be 07 00 00 00       	mov    esi,0x7
c00054d9:	e9 1e 01 00 00       	jmp    c00055fc <f_expand+0x163>
c00054de:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00054e2:	75 f0                	jne    c00054d4 <f_expand+0x3b>
c00054e4:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00054e8:	74 ea                	je     c00054d4 <f_expand+0x3b>
c00054ea:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00054ee:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00054f2:	c1 e1 09             	shl    ecx,0x9
c00054f5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00054f8:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00054fc:	0f 95 c0             	setne  al
c00054ff:	31 d2                	xor    edx,edx
c0005501:	0f b6 c0             	movzx  eax,al
c0005504:	89 c7                	mov    edi,eax
c0005506:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000550a:	f7 f1                	div    ecx
c000550c:	01 f8                	add    eax,edi
c000550e:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005511:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005515:	83 ff 01             	cmp    edi,0x1
c0005518:	76 05                	jbe    c000551f <f_expand+0x86>
c000551a:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c000551d:	77 05                	ja     c0005524 <f_expand+0x8b>
c000551f:	bf 02 00 00 00       	mov    edi,0x2
c0005524:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005527:	89 fd                	mov    ebp,edi
c0005529:	31 c9                	xor    ecx,ecx
c000552b:	89 ea                	mov    edx,ebp
c000552d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005531:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005533:	45                   	inc    ebp
c0005534:	e8 c4 de ff ff       	call   c00033fd <get_fat.isra.2>
c0005539:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000553d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005541:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005544:	77 05                	ja     c000554b <f_expand+0xb2>
c0005546:	bd 02 00 00 00       	mov    ebp,0x2
c000554b:	83 f8 01             	cmp    eax,0x1
c000554e:	74 20                	je     c0005570 <f_expand+0xd7>
c0005550:	83 f8 ff             	cmp    eax,0xffffffff
c0005553:	74 25                	je     c000557a <f_expand+0xe1>
c0005555:	85 c0                	test   eax,eax
c0005557:	75 09                	jne    c0005562 <f_expand+0xc9>
c0005559:	41                   	inc    ecx
c000555a:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000555e:	75 07                	jne    c0005567 <f_expand+0xce>
c0005560:	eb 1f                	jmp    c0005581 <f_expand+0xe8>
c0005562:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005565:	31 c9                	xor    ecx,ecx
c0005567:	39 fd                	cmp    ebp,edi
c0005569:	75 c0                	jne    c000552b <f_expand+0x92>
c000556b:	e9 64 ff ff ff       	jmp    c00054d4 <f_expand+0x3b>
c0005570:	be 02 00 00 00       	mov    esi,0x2
c0005575:	e9 82 00 00 00       	jmp    c00055fc <f_expand+0x163>
c000557a:	be 01 00 00 00       	mov    esi,0x1
c000557f:	eb 7b                	jmp    c00055fc <f_expand+0x163>
c0005581:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005586:	74 2b                	je     c00055b3 <f_expand+0x11a>
c0005588:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000558b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000558f:	85 ed                	test   ebp,ebp
c0005591:	74 24                	je     c00055b7 <f_expand+0x11e>
c0005593:	83 c9 ff             	or     ecx,0xffffffff
c0005596:	83 fd 01             	cmp    ebp,0x1
c0005599:	74 03                	je     c000559e <f_expand+0x105>
c000559b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000559e:	89 fa                	mov    edx,edi
c00055a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055a4:	e8 c2 d3 ff ff       	call   c000296b <put_fat>
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 4d                	jne    c00055fa <f_expand+0x161>
c00055ad:	89 f8                	mov    eax,edi
c00055af:	4d                   	dec    ebp
c00055b0:	47                   	inc    edi
c00055b1:	eb dc                	jmp    c000558f <f_expand+0xf6>
c00055b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055b6:	48                   	dec    eax
c00055b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055bb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055c0:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055c3:	74 37                	je     c00055fc <f_expand+0x163>
c00055c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055c8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055d5:	83 c8 40             	or     eax,0x40
c00055d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055db:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00055de:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055e1:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00055e4:	39 c8                	cmp    eax,ecx
c00055e6:	77 14                	ja     c00055fc <f_expand+0x163>
c00055e8:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00055ec:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00055ef:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00055f2:	83 c8 01             	or     eax,0x1
c00055f5:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00055f8:	eb 02                	jmp    c00055fc <f_expand+0x163>
c00055fa:	89 c6                	mov    esi,eax
c00055fc:	83 c4 2c             	add    esp,0x2c
c00055ff:	89 f0                	mov    eax,esi
c0005601:	5b                   	pop    ebx
c0005602:	5e                   	pop    esi
c0005603:	5f                   	pop    edi
c0005604:	5d                   	pop    ebp
c0005605:	c3                   	ret    

c0005606 <f_mkfs>:
c0005606:	55                   	push   ebp
c0005607:	57                   	push   edi
c0005608:	56                   	push   esi
c0005609:	be 0b 00 00 00       	mov    esi,0xb
c000560e:	53                   	push   ebx
c000560f:	83 ec 5c             	sub    esp,0x5c
c0005612:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005616:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000561a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000561e:	e8 0e ce ff ff       	call   c0002431 <get_ldnumber>
c0005623:	85 c0                	test   eax,eax
c0005625:	0f 88 d1 07 00 00    	js     c0005dfc <f_mkfs+0x7f6>
c000562b:	8b 14 85 a0 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8b60]
c0005632:	85 d2                	test   edx,edx
c0005634:	74 03                	je     c0005639 <f_mkfs+0x33>
c0005636:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005639:	85 db                	test   ebx,ebx
c000563b:	75 05                	jne    c0005642 <f_mkfs+0x3c>
c000563d:	bb c0 0f 02 c0       	mov    ebx,0xc0020fc0
c0005642:	83 ec 0c             	sub    esp,0xc
c0005645:	0f b6 c0             	movzx  eax,al
c0005648:	be 03 00 00 00       	mov    esi,0x3
c000564d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005651:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005655:	e8 18 c9 ff ff       	call   c0001f72 <disk_initialize>
c000565a:	83 c4 10             	add    esp,0x10
c000565d:	a8 01                	test   al,0x1
c000565f:	0f 85 97 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005665:	be 0a 00 00 00       	mov    esi,0xa
c000566a:	a8 04                	test   al,0x4
c000566c:	0f 85 8a 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005672:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005675:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005679:	85 c0                	test   eax,eax
c000567b:	75 20                	jne    c000569d <f_mkfs+0x97>
c000567d:	51                   	push   ecx
c000567e:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005682:	50                   	push   eax
c0005683:	6a 03                	push   0x3
c0005685:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005689:	e8 13 c9 ff ff       	call   c0001fa1 <disk_ioctl>
c000568e:	83 c4 10             	add    esp,0x10
c0005691:	85 c0                	test   eax,eax
c0005693:	74 08                	je     c000569d <f_mkfs+0x97>
c0005695:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000569d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056a1:	8d 42 ff             	lea    eax,[edx-0x1]
c00056a4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056a9:	77 04                	ja     c00056af <f_mkfs+0xa9>
c00056ab:	85 c2                	test   edx,eax
c00056ad:	74 08                	je     c00056b7 <f_mkfs+0xb1>
c00056af:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056b7:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056ba:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056c2:	48                   	dec    eax
c00056c3:	3c 01                	cmp    al,0x1
c00056c5:	76 05                	jbe    c00056cc <f_mkfs+0xc6>
c00056c7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00056d3:	48                   	dec    eax
c00056d4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056d9:	77 07                	ja     c00056e2 <f_mkfs+0xdc>
c00056db:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00056e0:	74 08                	je     c00056ea <f_mkfs+0xe4>
c00056e2:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00056ea:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00056ed:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00056f3:	77 07                	ja     c00056fc <f_mkfs+0xf6>
c00056f5:	8d 47 ff             	lea    eax,[edi-0x1]
c00056f8:	85 f8                	test   eax,edi
c00056fa:	74 02                	je     c00056fe <f_mkfs+0xf8>
c00056fc:	31 ff                	xor    edi,edi
c00056fe:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005706:	77 0a                	ja     c0005712 <f_mkfs+0x10c>
c0005708:	be 11 00 00 00       	mov    esi,0x11
c000570d:	e9 ea 06 00 00       	jmp    c0005dfc <f_mkfs+0x7f6>
c0005712:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005714:	85 ed                	test   ebp,ebp
c0005716:	89 eb                	mov    ebx,ebp
c0005718:	75 1e                	jne    c0005738 <f_mkfs+0x132>
c000571a:	83 ec 0c             	sub    esp,0xc
c000571d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005724:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005729:	50                   	push   eax
c000572a:	e8 d9 06 00 00       	call   c0005e08 <ff_memalloc>
c000572f:	83 c4 10             	add    esp,0x10
c0005732:	89 c3                	mov    ebx,eax
c0005734:	85 c0                	test   eax,eax
c0005736:	74 d0                	je     c0005708 <f_mkfs+0x102>
c0005738:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005740:	52                   	push   edx
c0005741:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005745:	50                   	push   eax
c0005746:	6a 01                	push   0x1
c0005748:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000574c:	e8 50 c8 ff ff       	call   c0001fa1 <disk_ioctl>
c0005751:	83 c4 10             	add    esp,0x10
c0005754:	85 c0                	test   eax,eax
c0005756:	0f 85 49 06 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c000575c:	89 f0                	mov    eax,esi
c000575e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005766:	83 e0 08             	and    eax,0x8
c0005769:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000576d:	75 18                	jne    c0005787 <f_mkfs+0x181>
c000576f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005773:	83 f8 3f             	cmp    eax,0x3f
c0005776:	76 0f                	jbe    c0005787 <f_mkfs+0x181>
c0005778:	83 e8 3f             	sub    eax,0x3f
c000577b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005783:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005787:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000578b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000578f:	83 f8 7f             	cmp    eax,0x7f
c0005792:	0f 86 5b 02 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005798:	b9 80 00 00 00       	mov    ecx,0x80
c000579d:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057a3:	77 05                	ja     c00057aa <f_mkfs+0x1a4>
c00057a5:	c1 ef 09             	shr    edi,0x9
c00057a8:	89 f9                	mov    ecx,edi
c00057aa:	89 f0                	mov    eax,esi
c00057ac:	89 f7                	mov    edi,esi
c00057ae:	83 e0 01             	and    eax,0x1
c00057b1:	83 e7 02             	and    edi,0x2
c00057b4:	0f b6 c0             	movzx  eax,al
c00057b7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057bb:	74 0a                	je     c00057c7 <f_mkfs+0x1c1>
c00057bd:	85 c0                	test   eax,eax
c00057bf:	0f 84 4f 01 00 00    	je     c0005914 <f_mkfs+0x30e>
c00057c5:	eb 37                	jmp    c00057fe <f_mkfs+0x1f8>
c00057c7:	be 13 00 00 00       	mov    esi,0x13
c00057cc:	85 c0                	test   eax,eax
c00057ce:	75 2e                	jne    c00057fe <f_mkfs+0x1f8>
c00057d0:	e9 e7 05 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00057d5:	83 f8 02             	cmp    eax,0x2
c00057d8:	0f 85 0d 02 00 00    	jne    c00059eb <f_mkfs+0x3e5>
c00057de:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057e4:	0f 86 e4 01 00 00    	jbe    c00059ce <f_mkfs+0x3c8>
c00057ea:	85 c9                	test   ecx,ecx
c00057ec:	0f 85 dc 05 00 00    	jne    c0005dce <f_mkfs+0x7c8>
c00057f2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f5:	83 f9 40             	cmp    ecx,0x40
c00057f8:	0f 87 e0 05 00 00    	ja     c0005dde <f_mkfs+0x7d8>
c00057fe:	89 cf                	mov    edi,ecx
c0005800:	85 c9                	test   ecx,ecx
c0005802:	75 1c                	jne    c0005820 <f_mkfs+0x21a>
c0005804:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005808:	b8 a0 0f 02 c0       	mov    eax,0xc0020fa0
c000580d:	c1 ee 0c             	shr    esi,0xc
c0005810:	bf 01 00 00 00       	mov    edi,0x1
c0005815:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005818:	85 d2                	test   edx,edx
c000581a:	0f 85 63 01 00 00    	jne    c0005983 <f_mkfs+0x37d>
c0005820:	31 d2                	xor    edx,edx
c0005822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005826:	f7 f7                	div    edi
c0005828:	3d f5 0f 00 00       	cmp    eax,0xff5
c000582d:	0f 86 62 01 00 00    	jbe    c0005995 <f_mkfs+0x38f>
c0005833:	83 c0 02             	add    eax,0x2
c0005836:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000583b:	01 c0                	add    eax,eax
c000583d:	05 ff 01 00 00       	add    eax,0x1ff
c0005842:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000584a:	c1 e8 09             	shr    eax,0x9
c000584d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005855:	c1 e0 05             	shl    eax,0x5
c0005858:	c1 e8 09             	shr    eax,0x9
c000585b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000585f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005864:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586c:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005870:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005878:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c000587d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005881:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005885:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005889:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000588d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005891:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005895:	f7 d8                	neg    eax
c0005897:	21 c6                	and    esi,eax
c0005899:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000589e:	29 d6                	sub    esi,edx
c00058a0:	83 f8 03             	cmp    eax,0x3
c00058a3:	0f 85 ff 00 00 00    	jne    c00059a8 <f_mkfs+0x3a2>
c00058a9:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058ad:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058b1:	89 f8                	mov    eax,edi
c00058b3:	c1 e0 04             	shl    eax,0x4
c00058b6:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00058ba:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058be:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058c2:	0f 82 2b 01 00 00    	jb     c00059f3 <f_mkfs+0x3ed>
c00058c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058d0:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00058d4:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00058d9:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00058dd:	29 d0                	sub    eax,edx
c00058df:	31 d2                	xor    edx,edx
c00058e1:	f7 f7                	div    edi
c00058e3:	89 c6                	mov    esi,eax
c00058e5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058ea:	83 f8 03             	cmp    eax,0x3
c00058ed:	0f 85 e2 fe ff ff    	jne    c00057d5 <f_mkfs+0x1cf>
c00058f3:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00058f9:	0f 87 03 01 00 00    	ja     c0005a02 <f_mkfs+0x3fc>
c00058ff:	85 c9                	test   ecx,ecx
c0005901:	0f 85 ec 00 00 00    	jne    c00059f3 <f_mkfs+0x3ed>
c0005907:	83 ff 01             	cmp    edi,0x1
c000590a:	0f 86 e3 00 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005910:	d1 ef                	shr    edi,1
c0005912:	89 f9                	mov    ecx,edi
c0005914:	89 ce                	mov    esi,ecx
c0005916:	85 c9                	test   ecx,ecx
c0005918:	75 25                	jne    c000593f <f_mkfs+0x339>
c000591a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000591e:	b8 b0 0f 02 c0       	mov    eax,0xc0020fb0
c0005923:	c1 ee 11             	shr    esi,0x11
c0005926:	b9 01 00 00 00       	mov    ecx,0x1
c000592b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000592e:	85 d2                	test   edx,edx
c0005930:	74 0b                	je     c000593d <f_mkfs+0x337>
c0005932:	83 c0 02             	add    eax,0x2
c0005935:	39 f2                	cmp    edx,esi
c0005937:	77 04                	ja     c000593d <f_mkfs+0x337>
c0005939:	01 c9                	add    ecx,ecx
c000593b:	eb ee                	jmp    c000592b <f_mkfs+0x325>
c000593d:	31 f6                	xor    esi,esi
c000593f:	31 d2                	xor    edx,edx
c0005941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005945:	f7 f1                	div    ecx
c0005947:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000594e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005953:	c1 ea 09             	shr    edx,0x9
c0005956:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000595b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000595f:	0f 87 8e 00 00 00    	ja     c00059f3 <f_mkfs+0x3ed>
c0005965:	89 cf                	mov    edi,ecx
c0005967:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000596f:	89 f1                	mov    ecx,esi
c0005971:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005979:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c000597e:	e9 dc fe ff ff       	jmp    c000585f <f_mkfs+0x259>
c0005983:	83 c0 02             	add    eax,0x2
c0005986:	39 f2                	cmp    edx,esi
c0005988:	0f 87 92 fe ff ff    	ja     c0005820 <f_mkfs+0x21a>
c000598e:	01 ff                	add    edi,edi
c0005990:	e9 80 fe ff ff       	jmp    c0005815 <f_mkfs+0x20f>
c0005995:	8d 04 40             	lea    eax,[eax+eax*2]
c0005998:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000599d:	40                   	inc    eax
c000599e:	d1 e8                	shr    eax,1
c00059a0:	83 c0 03             	add    eax,0x3
c00059a3:	e9 95 fe ff ff       	jmp    c000583d <f_mkfs+0x237>
c00059a8:	31 d2                	xor    edx,edx
c00059aa:	89 f0                	mov    eax,esi
c00059ac:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059b0:	85 d2                	test   edx,edx
c00059b2:	74 09                	je     c00059bd <f_mkfs+0x3b7>
c00059b4:	4e                   	dec    esi
c00059b5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059b9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059bd:	89 f0                	mov    eax,esi
c00059bf:	31 d2                	xor    edx,edx
c00059c1:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059c5:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00059c9:	e9 e3 fe ff ff       	jmp    c00058b1 <f_mkfs+0x2ab>
c00059ce:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059d4:	77 2c                	ja     c0005a02 <f_mkfs+0x3fc>
c00059d6:	85 c9                	test   ecx,ecx
c00059d8:	75 19                	jne    c00059f3 <f_mkfs+0x3ed>
c00059da:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00059dd:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059e3:	0f 86 15 fe ff ff    	jbe    c00057fe <f_mkfs+0x1f8>
c00059e9:	eb 08                	jmp    c00059f3 <f_mkfs+0x3ed>
c00059eb:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059f1:	76 0a                	jbe    c00059fd <f_mkfs+0x3f7>
c00059f3:	be 0e 00 00 00       	mov    esi,0xe
c00059f8:	e9 bf 03 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00059fd:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a02:	31 d2                	xor    edx,edx
c0005a04:	b9 00 02 00 00       	mov    ecx,0x200
c0005a09:	89 d8                	mov    eax,ebx
c0005a0b:	e8 f1 c5 ff ff       	call   c0002001 <mem_set>
c0005a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a15:	ba 52 0f 02 c0       	mov    edx,0xc0020f52
c0005a1a:	89 d8                	mov    eax,ebx
c0005a1c:	e8 cb c5 ff ff       	call   c0001fec <mem_cpy>
c0005a21:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a24:	ba 00 02 00 00       	mov    edx,0x200
c0005a29:	e8 b7 c5 ff ff       	call   c0001fe5 <st_word>
c0005a2e:	89 f8                	mov    eax,edi
c0005a30:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a35:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a38:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a3b:	e8 a5 c5 ff ff       	call   c0001fe5 <st_word>
c0005a40:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a44:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a4c:	83 f8 03             	cmp    eax,0x3
c0005a4f:	75 08                	jne    c0005a59 <f_mkfs+0x453>
c0005a51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005a59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005a5d:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a60:	e8 80 c5 ff ff       	call   c0001fe5 <st_word>
c0005a65:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005a69:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005a6f:	77 0a                	ja     c0005a7b <f_mkfs+0x475>
c0005a71:	8d 43 13             	lea    eax,[ebx+0x13]
c0005a74:	e8 6c c5 ff ff       	call   c0001fe5 <st_word>
c0005a79:	eb 08                	jmp    c0005a83 <f_mkfs+0x47d>
c0005a7b:	8d 43 20             	lea    eax,[ebx+0x20]
c0005a7e:	e8 66 c5 ff ff       	call   c0001fe9 <st_dword>
c0005a83:	8d 43 18             	lea    eax,[ebx+0x18]
c0005a86:	ba 3f 00 00 00       	mov    edx,0x3f
c0005a8b:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005a8f:	e8 51 c5 ff ff       	call   c0001fe5 <st_word>
c0005a94:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005a97:	ba ff 00 00 00       	mov    edx,0xff
c0005a9c:	e8 44 c5 ff ff       	call   c0001fe5 <st_word>
c0005aa1:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005aa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005aa8:	e8 3c c5 ff ff       	call   c0001fe9 <st_dword>
c0005aad:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ab2:	83 f8 03             	cmp    eax,0x3
c0005ab5:	75 57                	jne    c0005b0e <f_mkfs+0x508>
c0005ab7:	8d 43 43             	lea    eax,[ebx+0x43]
c0005aba:	ba 00 00 21 50       	mov    edx,0x50210000
c0005abf:	e8 25 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ac4:	8d 43 24             	lea    eax,[ebx+0x24]
c0005ac7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005acb:	e8 19 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ad0:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005ad3:	ba 02 00 00 00       	mov    edx,0x2
c0005ad8:	e8 0c c5 ff ff       	call   c0001fe9 <st_dword>
c0005add:	8d 43 30             	lea    eax,[ebx+0x30]
c0005ae0:	ba 01 00 00 00       	mov    edx,0x1
c0005ae5:	e8 fb c4 ff ff       	call   c0001fe5 <st_word>
c0005aea:	8d 43 32             	lea    eax,[ebx+0x32]
c0005aed:	ba 06 00 00 00       	mov    edx,0x6
c0005af2:	e8 ee c4 ff ff       	call   c0001fe5 <st_word>
c0005af7:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005afb:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005aff:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b02:	b9 13 00 00 00       	mov    ecx,0x13
c0005b07:	ba 5e 0f 02 c0       	mov    edx,0xc0020f5e
c0005b0c:	eb 2f                	jmp    c0005b3d <f_mkfs+0x537>
c0005b0e:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b11:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b16:	e8 ce c4 ff ff       	call   c0001fe9 <st_dword>
c0005b1b:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b20:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b23:	e8 bd c4 ff ff       	call   c0001fe5 <st_word>
c0005b28:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b2c:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b30:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b33:	b9 13 00 00 00       	mov    ecx,0x13
c0005b38:	ba 72 0f 02 c0       	mov    edx,0xc0020f72
c0005b3d:	e8 aa c4 ff ff       	call   c0001fec <mem_cpy>
c0005b42:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b48:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b51:	e8 8f c4 ff ff       	call   c0001fe5 <st_word>
c0005b56:	6a 01                	push   0x1
c0005b58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b5c:	53                   	push   ebx
c0005b5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b61:	e8 25 c4 ff ff       	call   c0001f8b <disk_write>
c0005b66:	83 c4 10             	add    esp,0x10
c0005b69:	85 c0                	test   eax,eax
c0005b6b:	0f 85 34 02 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005b71:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b76:	83 f8 03             	cmp    eax,0x3
c0005b79:	0f 85 98 00 00 00    	jne    c0005c17 <f_mkfs+0x611>
c0005b7f:	6a 01                	push   0x1
c0005b81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b85:	83 c0 06             	add    eax,0x6
c0005b88:	50                   	push   eax
c0005b89:	53                   	push   ebx
c0005b8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b8e:	e8 f8 c3 ff ff       	call   c0001f8b <disk_write>
c0005b93:	b9 00 02 00 00       	mov    ecx,0x200
c0005b98:	31 d2                	xor    edx,edx
c0005b9a:	89 d8                	mov    eax,ebx
c0005b9c:	e8 60 c4 ff ff       	call   c0002001 <mem_set>
c0005ba1:	ba 52 52 61 41       	mov    edx,0x41615252
c0005ba6:	89 d8                	mov    eax,ebx
c0005ba8:	e8 3c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bad:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bb3:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bb8:	e8 2c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bbd:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bc0:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005bc6:	e8 1e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bcb:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005bd1:	ba 02 00 00 00       	mov    edx,0x2
c0005bd6:	e8 0e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bdb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005be0:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005be6:	e8 fa c3 ff ff       	call   c0001fe5 <st_word>
c0005beb:	6a 01                	push   0x1
c0005bed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005bf1:	83 c0 07             	add    eax,0x7
c0005bf4:	50                   	push   eax
c0005bf5:	53                   	push   ebx
c0005bf6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005bfa:	e8 8c c3 ff ff       	call   c0001f8b <disk_write>
c0005bff:	83 c4 20             	add    esp,0x20
c0005c02:	6a 01                	push   0x1
c0005c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005c08:	40                   	inc    eax
c0005c09:	50                   	push   eax
c0005c0a:	53                   	push   ebx
c0005c0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c0f:	e8 77 c3 ff ff       	call   c0001f8b <disk_write>
c0005c14:	83 c4 10             	add    esp,0x10
c0005c17:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c1b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c1f:	c1 e8 09             	shr    eax,0x9
c0005c22:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c2c:	31 d2                	xor    edx,edx
c0005c2e:	89 d8                	mov    eax,ebx
c0005c30:	e8 cc c3 ff ff       	call   c0002001 <mem_set>
c0005c35:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c3a:	31 c9                	xor    ecx,ecx
c0005c3c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005c44:	83 f8 01             	cmp    eax,0x1
c0005c47:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c4b:	0f 94 c1             	sete   cl
c0005c4e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005c52:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005c56:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005c5e:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005c66:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c6b:	75 21                	jne    c0005c8e <f_mkfs+0x688>
c0005c6d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c72:	89 d8                	mov    eax,ebx
c0005c74:	e8 70 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c79:	8d 43 04             	lea    eax,[ebx+0x4]
c0005c7c:	83 ca ff             	or     edx,0xffffffff
c0005c7f:	e8 65 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c84:	8d 43 08             	lea    eax,[ebx+0x8]
c0005c87:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005c8c:	eb 06                	jmp    c0005c94 <f_mkfs+0x68e>
c0005c8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c92:	89 d8                	mov    eax,ebx
c0005c94:	e8 50 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ca1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005ca5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ca9:	39 ce                	cmp    esi,ecx
c0005cab:	76 02                	jbe    c0005caf <f_mkfs+0x6a9>
c0005cad:	89 ce                	mov    esi,ecx
c0005caf:	56                   	push   esi
c0005cb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005cb4:	53                   	push   ebx
c0005cb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cb9:	e8 cd c2 ff ff       	call   c0001f8b <disk_write>
c0005cbe:	83 c4 10             	add    esp,0x10
c0005cc1:	85 c0                	test   eax,eax
c0005cc3:	0f 85 dc 00 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005cc9:	31 d2                	xor    edx,edx
c0005ccb:	b9 00 02 00 00       	mov    ecx,0x200
c0005cd0:	89 d8                	mov    eax,ebx
c0005cd2:	e8 2a c3 ff ff       	call   c0002001 <mem_set>
c0005cd7:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005cdb:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005cdf:	75 c0                	jne    c0005ca1 <f_mkfs+0x69b>
c0005ce1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ce5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005ced:	40                   	inc    eax
c0005cee:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005cf2:	0f 87 6e ff ff ff    	ja     c0005c66 <f_mkfs+0x660>
c0005cf8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cfd:	83 f8 03             	cmp    eax,0x3
c0005d00:	74 04                	je     c0005d06 <f_mkfs+0x700>
c0005d02:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005d06:	89 fe                	mov    esi,edi
c0005d08:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d0c:	76 04                	jbe    c0005d12 <f_mkfs+0x70c>
c0005d0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d12:	56                   	push   esi
c0005d13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d17:	53                   	push   ebx
c0005d18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d1c:	e8 6a c2 ff ff       	call   c0001f8b <disk_write>
c0005d21:	83 c4 10             	add    esp,0x10
c0005d24:	85 c0                	test   eax,eax
c0005d26:	75 7d                	jne    c0005da5 <f_mkfs+0x79f>
c0005d28:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d2c:	29 f7                	sub    edi,esi
c0005d2e:	75 d6                	jne    c0005d06 <f_mkfs+0x700>
c0005d30:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d35:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d3a:	83 f8 03             	cmp    eax,0x3
c0005d3d:	74 1e                	je     c0005d5d <f_mkfs+0x757>
c0005d3f:	b9 06 00 00 00       	mov    ecx,0x6
c0005d44:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d4c:	77 0f                	ja     c0005d5d <f_mkfs+0x757>
c0005d4e:	b9 04 00 00 00       	mov    ecx,0x4
c0005d53:	83 f8 02             	cmp    eax,0x2
c0005d56:	74 05                	je     c0005d5d <f_mkfs+0x757>
c0005d58:	b9 01 00 00 00       	mov    ecx,0x1
c0005d5d:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d62:	75 2a                	jne    c0005d8e <f_mkfs+0x788>
c0005d64:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d68:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d70:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	53                   	push   ebx
c0005d78:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005d7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d80:	e8 89 d2 ff ff       	call   c000300e <create_partition>
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	89 c6                	mov    esi,eax
c0005d8a:	85 c0                	test   eax,eax
c0005d8c:	75 2e                	jne    c0005dbc <f_mkfs+0x7b6>
c0005d8e:	31 f6                	xor    esi,esi
c0005d90:	50                   	push   eax
c0005d91:	6a 00                	push   0x0
c0005d93:	6a 00                	push   0x0
c0005d95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d99:	e8 03 c2 ff ff       	call   c0001fa1 <disk_ioctl>
c0005d9e:	83 c4 10             	add    esp,0x10
c0005da1:	85 c0                	test   eax,eax
c0005da3:	74 17                	je     c0005dbc <f_mkfs+0x7b6>
c0005da5:	85 ed                	test   ebp,ebp
c0005da7:	75 0c                	jne    c0005db5 <f_mkfs+0x7af>
c0005da9:	83 ec 0c             	sub    esp,0xc
c0005dac:	53                   	push   ebx
c0005dad:	e8 6e 00 00 00       	call   c0005e20 <ff_memfree>
c0005db2:	83 c4 10             	add    esp,0x10
c0005db5:	be 01 00 00 00       	mov    esi,0x1
c0005dba:	eb 40                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dbc:	85 ed                	test   ebp,ebp
c0005dbe:	75 3c                	jne    c0005dfc <f_mkfs+0x7f6>
c0005dc0:	83 ec 0c             	sub    esp,0xc
c0005dc3:	53                   	push   ebx
c0005dc4:	e8 57 00 00 00       	call   c0005e20 <ff_memfree>
c0005dc9:	83 c4 10             	add    esp,0x10
c0005dcc:	eb 2e                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dce:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005dd3:	0f 85 3b fb ff ff    	jne    c0005914 <f_mkfs+0x30e>
c0005dd9:	e9 15 fc ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dde:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005de3:	0f 85 31 fb ff ff    	jne    c000591a <f_mkfs+0x314>
c0005de9:	89 cf                	mov    edi,ecx
c0005deb:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005df1:	0f 86 29 fa ff ff    	jbe    c0005820 <f_mkfs+0x21a>
c0005df7:	e9 f7 fb ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dfc:	83 c4 5c             	add    esp,0x5c
c0005dff:	89 f0                	mov    eax,esi
c0005e01:	5b                   	pop    ebx
c0005e02:	5e                   	pop    esi
c0005e03:	5f                   	pop    edi
c0005e04:	5d                   	pop    ebp
c0005e05:	c3                   	ret    
c0005e06:	66 90                	xchg   ax,ax

c0005e08 <ff_memalloc>:
c0005e08:	83 ec 0c             	sub    esp,0xc
c0005e0b:	83 ec 0c             	sub    esp,0xc
c0005e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e12:	e8 38 8c 00 00       	call   c000ea4f <malloc>
c0005e17:	83 c4 10             	add    esp,0x10
c0005e1a:	83 c4 0c             	add    esp,0xc
c0005e1d:	c3                   	ret    
c0005e1e:	66 90                	xchg   ax,ax

c0005e20 <ff_memfree>:
c0005e20:	83 ec 0c             	sub    esp,0xc
c0005e23:	83 ec 0c             	sub    esp,0xc
c0005e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e2a:	e8 30 8c 00 00       	call   c000ea5f <free>
c0005e2f:	83 c4 10             	add    esp,0x10
c0005e32:	90                   	nop
c0005e33:	83 c4 0c             	add    esp,0xc
c0005e36:	c3                   	ret    
c0005e37:	90                   	nop

c0005e38 <ff_uni2oem>:
c0005e38:	83 ec 14             	sub    esp,0x14
c0005e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e43:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e4a:	c7 44 24 0c a0 13 02 c0 	mov    DWORD PTR [esp+0xc],0xc00213a0
c0005e52:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e57:	77 0b                	ja     c0005e64 <ff_uni2oem+0x2c>
c0005e59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e5d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e62:	eb 68                	jmp    c0005ecc <ff_uni2oem+0x94>
c0005e64:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e6c:	77 5e                	ja     c0005ecc <ff_uni2oem+0x94>
c0005e6e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e72:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e77:	75 53                	jne    c0005ecc <ff_uni2oem+0x94>
c0005e79:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e80:	eb 12                	jmp    c0005e94 <ff_uni2oem+0x5c>
c0005e82:	66 90                	xchg   ax,ax
c0005e84:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e89:	83 c0 01             	add    eax,0x1
c0005e8c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e91:	8d 76 00             	lea    esi,[esi+0x0]
c0005e94:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e99:	83 f8 7f             	cmp    eax,0x7f
c0005e9c:	77 1e                	ja     c0005ebc <ff_uni2oem+0x84>
c0005e9e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ea3:	01 c0                	add    eax,eax
c0005ea5:	89 c2                	mov    edx,eax
c0005ea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eab:	01 d0                	add    eax,edx
c0005ead:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eb0:	0f b7 c0             	movzx  eax,ax
c0005eb3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005eb7:	75 cb                	jne    c0005e84 <ff_uni2oem+0x4c>
c0005eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0005ebc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ec1:	83 e8 80             	sub    eax,0xffffff80
c0005ec4:	0f b6 c0             	movzx  eax,al
c0005ec7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ecc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ed1:	83 c4 14             	add    esp,0x14
c0005ed4:	c3                   	ret    
c0005ed5:	8d 76 00             	lea    esi,[esi+0x0]

c0005ed8 <ff_oem2uni>:
c0005ed8:	83 ec 18             	sub    esp,0x18
c0005edb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ee3:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005ee8:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005eec:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ef3:	c7 44 24 10 a0 13 02 c0 	mov    DWORD PTR [esp+0x10],0xc00213a0
c0005efb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f00:	83 f8 7f             	cmp    eax,0x7f
c0005f03:	77 0b                	ja     c0005f10 <ff_oem2uni+0x38>
c0005f05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f09:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f0e:	eb 34                	jmp    c0005f44 <ff_oem2uni+0x6c>
c0005f10:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f14:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f19:	75 29                	jne    c0005f44 <ff_oem2uni+0x6c>
c0005f1b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f20:	3d ff 00 00 00       	cmp    eax,0xff
c0005f25:	77 1d                	ja     c0005f44 <ff_oem2uni+0x6c>
c0005f27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f2c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f31:	01 c0                	add    eax,eax
c0005f33:	89 c2                	mov    edx,eax
c0005f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f39:	01 d0                	add    eax,edx
c0005f3b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f3e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f43:	90                   	nop
c0005f44:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f49:	83 c4 18             	add    esp,0x18
c0005f4c:	c3                   	ret    
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0005f50 <ff_wtoupper>:
c0005f50:	83 ec 10             	sub    esp,0x10
c0005f53:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f5b:	0f 87 ab 01 00 00    	ja     c000610c <ff_wtoupper+0x1bc>
c0005f61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f65:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f6a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f6f:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f74:	77 0a                	ja     c0005f80 <ff_wtoupper+0x30>
c0005f76:	b8 a0 11 02 c0       	mov    eax,0xc00211a0
c0005f7b:	eb 0b                	jmp    c0005f88 <ff_wtoupper+0x38>
c0005f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f80:	b8 e0 10 02 c0       	mov    eax,0xc00210e0
c0005f85:	8d 76 00             	lea    esi,[esi+0x0]
c0005f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f90:	8d 50 02             	lea    edx,[eax+0x2]
c0005f93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f97:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f9a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005f9f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 84 54 01 00 00    	je     c0006100 <ff_wtoupper+0x1b0>
c0005fac:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fb1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fb6:	39 c2                	cmp    edx,eax
c0005fb8:	0f 82 42 01 00 00    	jb     c0006100 <ff_wtoupper+0x1b0>
c0005fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fc2:	8d 50 02             	lea    edx,[eax+0x2]
c0005fc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fcc:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005fd1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fd6:	c1 e8 08             	shr    eax,0x8
c0005fd9:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005fde:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005fe3:	0f b6 c0             	movzx  eax,al
c0005fe6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005feb:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ff0:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005ff5:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005ffa:	01 ca                	add    edx,ecx
c0005ffc:	39 d0                	cmp    eax,edx
c0005ffe:	0f 8d d8 00 00 00    	jge    c00060dc <ff_wtoupper+0x18c>
c0006004:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006009:	83 f8 08             	cmp    eax,0x8
c000600c:	0f 87 ea 00 00 00    	ja     c00060fc <ff_wtoupper+0x1ac>
c0006012:	8b 04 85 a0 10 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdef60]
c0006019:	ff e0                	jmp    eax
c000601b:	90                   	nop
c000601c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006021:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006026:	29 c2                	sub    edx,eax
c0006028:	89 d0                	mov    eax,edx
c000602a:	01 c0                	add    eax,eax
c000602c:	89 c2                	mov    edx,eax
c000602e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006032:	01 d0                	add    eax,edx
c0006034:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006037:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000603c:	e9 97 00 00 00       	jmp    c00060d8 <ff_wtoupper+0x188>
c0006041:	8d 76 00             	lea    esi,[esi+0x0]
c0006044:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0006049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000604d:	89 d1                	mov    ecx,edx
c000604f:	29 c1                	sub    ecx,eax
c0006051:	89 c8                	mov    eax,ecx
c0006053:	83 e0 01             	and    eax,0x1
c0006056:	89 c2                	mov    edx,eax
c0006058:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000605d:	29 d0                	sub    eax,edx
c000605f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006064:	eb 72                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006066:	66 90                	xchg   ax,ax
c0006068:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000606d:	83 e8 10             	sub    eax,0x10
c0006070:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006075:	eb 61                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006077:	90                   	nop
c0006078:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000607d:	83 e8 20             	sub    eax,0x20
c0006080:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006085:	eb 51                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006087:	90                   	nop
c0006088:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000608d:	83 e8 30             	sub    eax,0x30
c0006090:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006095:	eb 41                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006097:	90                   	nop
c0006098:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000609d:	83 e8 1a             	sub    eax,0x1a
c00060a0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a5:	eb 31                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060a7:	90                   	nop
c00060a8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060ad:	83 c0 08             	add    eax,0x8
c00060b0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b5:	eb 21                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060b7:	90                   	nop
c00060b8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060bd:	83 e8 50             	sub    eax,0x50
c00060c0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c5:	eb 11                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060c7:	90                   	nop
c00060c8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060cd:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d7:	90                   	nop
c00060d8:	eb 22                	jmp    c00060fc <ff_wtoupper+0x1ac>
c00060da:	66 90                	xchg   ax,ax
c00060dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060e1:	85 c0                	test   eax,eax
c00060e3:	0f 85 a3 fe ff ff    	jne    c0005f8c <ff_wtoupper+0x3c>
c00060e9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00060ee:	01 c0                	add    eax,eax
c00060f0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00060f4:	e9 93 fe ff ff       	jmp    c0005f8c <ff_wtoupper+0x3c>
c00060f9:	8d 76 00             	lea    esi,[esi+0x0]
c00060fc:	90                   	nop
c00060fd:	8d 76 00             	lea    esi,[esi+0x0]
c0006100:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006105:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006109:	8d 76 00             	lea    esi,[esi+0x0]
c000610c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006110:	83 c4 10             	add    esp,0x10
c0006113:	c3                   	ret    

c0006114 <utf2ucs>:
c0006114:	57                   	push   edi
c0006115:	31 c9                	xor    ecx,ecx
c0006117:	56                   	push   esi
c0006118:	89 d7                	mov    edi,edx
c000611a:	53                   	push   ebx
c000611b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000611f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006123:	89 de                	mov    esi,ebx
c0006125:	c1 fe 08             	sar    esi,0x8
c0006128:	89 f2                	mov    edx,esi
c000612a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c000612d:	41                   	inc    ecx
c000612e:	85 db                	test   ebx,ebx
c0006130:	75 e9                	jne    c000611b <utf2ucs+0x7>
c0006132:	5b                   	pop    ebx
c0006133:	5e                   	pop    esi
c0006134:	5f                   	pop    edi
c0006135:	c3                   	ret    

c0006136 <ucs2utfn>:
c0006136:	83 e1 fe             	and    ecx,0xfffffffe
c0006139:	01 d1                	add    ecx,edx
c000613b:	39 d1                	cmp    ecx,edx
c000613d:	75 04                	jne    c0006143 <ucs2utfn+0xd>
c000613f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006142:	c3                   	ret    
c0006143:	57                   	push   edi
c0006144:	56                   	push   esi
c0006145:	53                   	push   ebx
c0006146:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006149:	83 c2 02             	add    edx,0x2
c000614c:	89 de                	mov    esi,ebx
c000614e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006152:	c1 e6 08             	shl    esi,0x8
c0006155:	09 f3                	or     ebx,esi
c0006157:	83 fb 3b             	cmp    ebx,0x3b
c000615a:	74 50                	je     c00061ac <ucs2utfn+0x76>
c000615c:	83 fb 7f             	cmp    ebx,0x7f
c000615f:	7f 05                	jg     c0006166 <ucs2utfn+0x30>
c0006161:	88 18                	mov    BYTE PTR [eax],bl
c0006163:	40                   	inc    eax
c0006164:	eb 42                	jmp    c00061a8 <ucs2utfn+0x72>
c0006166:	89 de                	mov    esi,ebx
c0006168:	89 df                	mov    edi,ebx
c000616a:	c1 fe 06             	sar    esi,0x6
c000616d:	83 e7 3f             	and    edi,0x3f
c0006170:	83 cf 80             	or     edi,0xffffff80
c0006173:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006179:	7f 12                	jg     c000618d <ucs2utfn+0x57>
c000617b:	83 ce c0             	or     esi,0xffffffc0
c000617e:	83 c0 02             	add    eax,0x2
c0006181:	89 f3                	mov    ebx,esi
c0006183:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006186:	89 fb                	mov    ebx,edi
c0006188:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000618b:	eb 1b                	jmp    c00061a8 <ucs2utfn+0x72>
c000618d:	c1 fb 0c             	sar    ebx,0xc
c0006190:	83 e6 3f             	and    esi,0x3f
c0006193:	83 cb e0             	or     ebx,0xffffffe0
c0006196:	83 ce 80             	or     esi,0xffffff80
c0006199:	88 18                	mov    BYTE PTR [eax],bl
c000619b:	89 f3                	mov    ebx,esi
c000619d:	83 c0 03             	add    eax,0x3
c00061a0:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061a3:	89 fb                	mov    ebx,edi
c00061a5:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061a8:	39 d1                	cmp    ecx,edx
c00061aa:	75 9a                	jne    c0006146 <ucs2utfn+0x10>
c00061ac:	5b                   	pop    ebx
c00061ad:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061b0:	5e                   	pop    esi
c00061b1:	5f                   	pop    edi
c00061b2:	c3                   	ret    

c00061b3 <isjoliet>:
c00061b3:	31 d2                	xor    edx,edx
c00061b5:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061b8:	75 26                	jne    c00061e0 <isjoliet+0x2d>
c00061ba:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061be:	75 20                	jne    c00061e0 <isjoliet+0x2d>
c00061c0:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061c4:	ba 02 00 00 00       	mov    edx,0x2
c00061c9:	83 f8 43             	cmp    eax,0x43
c00061cc:	74 12                	je     c00061e0 <isjoliet+0x2d>
c00061ce:	ba 03 00 00 00       	mov    edx,0x3
c00061d3:	83 f8 45             	cmp    eax,0x45
c00061d6:	74 08                	je     c00061e0 <isjoliet+0x2d>
c00061d8:	31 d2                	xor    edx,edx
c00061da:	83 f8 40             	cmp    eax,0x40
c00061dd:	0f 94 c2             	sete   dl
c00061e0:	89 d0                	mov    eax,edx
c00061e2:	c3                   	ret    

c00061e3 <htohl_32>:
c00061e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00061e5:	c3                   	ret    

c00061e6 <iso_733>:
c00061e6:	eb fb                	jmp    c00061e3 <htohl_32>

c00061e8 <bgrad_cache>:
c00061e8:	83 fa 0e             	cmp    edx,0xe
c00061eb:	77 16                	ja     c0006203 <bgrad_cache+0x1b>
c00061ed:	53                   	push   ebx
c00061ee:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00061f1:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00061f5:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00061f8:	42                   	inc    edx
c00061f9:	83 fa 0f             	cmp    edx,0xf
c00061fc:	75 f3                	jne    c00061f1 <bgrad_cache+0x9>
c00061fe:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006201:	5b                   	pop    ebx
c0006202:	c3                   	ret    
c0006203:	c3                   	ret    

c0006204 <ucscompare>:
c0006204:	55                   	push   ebp
c0006205:	57                   	push   edi
c0006206:	89 c7                	mov    edi,eax
c0006208:	56                   	push   esi
c0006209:	89 d6                	mov    esi,edx
c000620b:	53                   	push   ebx
c000620c:	31 d2                	xor    edx,edx
c000620e:	83 ec 1c             	sub    esp,0x1c
c0006211:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006215:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000621a:	c1 e3 08             	shl    ebx,0x8
c000621d:	09 c3                	or     ebx,eax
c000621f:	39 ca                	cmp    edx,ecx
c0006221:	7d 42                	jge    c0006265 <ucscompare+0x61>
c0006223:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006227:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000622c:	c1 e0 08             	shl    eax,0x8
c000622f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006233:	09 e8                	or     eax,ebp
c0006235:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006239:	83 f8 3b             	cmp    eax,0x3b
c000623c:	74 27                	je     c0006265 <ucscompare+0x61>
c000623e:	83 ec 0c             	sub    esp,0xc
c0006241:	50                   	push   eax
c0006242:	e8 09 a7 ff ff       	call   c0000950 <tolower>
c0006247:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000624a:	89 c5                	mov    ebp,eax
c000624c:	e8 ff a6 ff ff       	call   c0000950 <tolower>
c0006251:	83 c4 10             	add    esp,0x10
c0006254:	39 c5                	cmp    ebp,eax
c0006256:	75 20                	jne    c0006278 <ucscompare+0x74>
c0006258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000625c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006260:	83 c2 02             	add    edx,0x2
c0006263:	eb ac                	jmp    c0006211 <ucscompare+0xd>
c0006265:	85 db                	test   ebx,ebx
c0006267:	0f 95 c2             	setne  dl
c000626a:	31 c0                	xor    eax,eax
c000626c:	83 fb 2f             	cmp    ebx,0x2f
c000626f:	0f 95 c0             	setne  al
c0006272:	21 d0                	and    eax,edx
c0006274:	f7 d8                	neg    eax
c0006276:	eb 03                	jmp    c000627b <ucscompare+0x77>
c0006278:	83 c8 ff             	or     eax,0xffffffff
c000627b:	83 c4 1c             	add    esp,0x1c
c000627e:	5b                   	pop    ebx
c000627f:	5e                   	pop    esi
c0006280:	5f                   	pop    edi
c0006281:	5d                   	pop    ebp
c0006282:	c3                   	ret    

c0006283 <fncompare>:
c0006283:	55                   	push   ebp
c0006284:	57                   	push   edi
c0006285:	89 c7                	mov    edi,eax
c0006287:	56                   	push   esi
c0006288:	89 ce                	mov    esi,ecx
c000628a:	53                   	push   ebx
c000628b:	31 db                	xor    ebx,ebx
c000628d:	83 ec 1c             	sub    esp,0x1c
c0006290:	39 d3                	cmp    ebx,edx
c0006292:	7d 45                	jge    c00062d9 <fncompare+0x56>
c0006294:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006298:	83 f8 3b             	cmp    eax,0x3b
c000629b:	74 3c                	je     c00062d9 <fncompare+0x56>
c000629d:	83 f8 2e             	cmp    eax,0x2e
c00062a0:	75 0e                	jne    c00062b0 <fncompare+0x2d>
c00062a2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062a5:	39 d9                	cmp    ecx,ebx
c00062a7:	74 30                	je     c00062d9 <fncompare+0x56>
c00062a9:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062ae:	74 29                	je     c00062d9 <fncompare+0x56>
c00062b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062b4:	83 ec 0c             	sub    esp,0xc
c00062b7:	50                   	push   eax
c00062b8:	e8 93 a6 ff ff       	call   c0000950 <tolower>
c00062bd:	89 c5                	mov    ebp,eax
c00062bf:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00062c6:	e8 85 a6 ff ff       	call   c0000950 <tolower>
c00062cb:	83 c4 10             	add    esp,0x10
c00062ce:	39 c5                	cmp    ebp,eax
c00062d0:	75 1e                	jne    c00062f0 <fncompare+0x6d>
c00062d2:	43                   	inc    ebx
c00062d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062d7:	eb b7                	jmp    c0006290 <fncompare+0xd>
c00062d9:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00062dd:	85 d2                	test   edx,edx
c00062df:	0f 95 c1             	setne  cl
c00062e2:	31 c0                	xor    eax,eax
c00062e4:	83 fa 2f             	cmp    edx,0x2f
c00062e7:	0f 95 c0             	setne  al
c00062ea:	21 c8                	and    eax,ecx
c00062ec:	f7 d8                	neg    eax
c00062ee:	eb 03                	jmp    c00062f3 <fncompare+0x70>
c00062f0:	83 c8 ff             	or     eax,0xffffffff
c00062f3:	83 c4 1c             	add    esp,0x1c
c00062f6:	5b                   	pop    ebx
c00062f7:	5e                   	pop    esi
c00062f8:	5f                   	pop    edi
c00062f9:	5d                   	pop    ebp
c00062fa:	c3                   	ret    

c00062fb <bclear_cache>:
c00062fb:	83 ec 18             	sub    esp,0x18
c00062fe:	68 a0 14 02 c0       	push   0xc00214a0
c0006303:	e8 e8 4c 01 00       	call   c001aff0 <iso_kprintf>
c0006308:	83 c4 10             	add    esp,0x10
c000630b:	31 c0                	xor    eax,eax
c000630d:	8b 14 85 20 70 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8fe0]
c0006314:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000631a:	8b 14 85 80 70 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8f80]
c0006321:	40                   	inc    eax
c0006322:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006328:	83 f8 10             	cmp    eax,0x10
c000632b:	75 e0                	jne    c000630d <bclear_cache+0x12>
c000632d:	83 c4 0c             	add    esp,0xc
c0006330:	c3                   	ret    

c0006331 <bclear>:
c0006331:	eb c8                	jmp    c00062fb <bclear_cache>

c0006333 <iso_break_all>:
c0006333:	83 ec 18             	sub    esp,0x18
c0006336:	68 ae 14 02 c0       	push   0xc00214ae
c000633b:	e8 b0 4c 01 00       	call   c001aff0 <iso_kprintf>
c0006340:	83 c4 10             	add    esp,0x10
c0006343:	31 c0                	xor    eax,eax
c0006345:	c7 80 d0 75 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd8a30],0x1
c000634f:	05 94 00 00 00       	add    eax,0x94
c0006354:	3d 40 09 00 00       	cmp    eax,0x940
c0006359:	75 ea                	jne    c0006345 <iso_break_all+0x12>
c000635b:	83 c4 0c             	add    esp,0xc
c000635e:	c3                   	ret    

c000635f <isoReadDiscSector>:
c000635f:	83 ec 0c             	sub    esp,0xc
c0006362:	0f be 05 60 70 02 c0 	movsx  eax,BYTE PTR ds:0xc0027060
c0006369:	50                   	push   eax
c000636a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000636e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006376:	e8 19 4c 01 00       	call   c001af94 <isoReadDiscSectorHelper>
c000637b:	83 c4 1c             	add    esp,0x1c
c000637e:	c3                   	ret    

c000637f <bread_cache>:
c000637f:	55                   	push   ebp
c0006380:	57                   	push   edi
c0006381:	89 d7                	mov    edi,edx
c0006383:	56                   	push   esi
c0006384:	ba 0f 00 00 00       	mov    edx,0xf
c0006389:	53                   	push   ebx
c000638a:	89 c6                	mov    esi,eax
c000638c:	83 ec 0c             	sub    esp,0xc
c000638f:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0006392:	39 38                	cmp    DWORD PTR [eax],edi
c0006394:	74 3c                	je     c00063d2 <bread_cache+0x53>
c0006396:	4a                   	dec    edx
c0006397:	83 fa ff             	cmp    edx,0xffffffff
c000639a:	75 f3                	jne    c000638f <bread_cache+0x10>
c000639c:	31 db                	xor    ebx,ebx
c000639e:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063a1:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063a4:	74 08                	je     c00063ae <bread_cache+0x2f>
c00063a6:	43                   	inc    ebx
c00063a7:	83 fb 10             	cmp    ebx,0x10
c00063aa:	75 f2                	jne    c000639e <bread_cache+0x1f>
c00063ac:	31 db                	xor    ebx,ebx
c00063ae:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063b1:	50                   	push   eax
c00063b2:	6a 01                	push   0x1
c00063b4:	57                   	push   edi
c00063b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063b8:	83 c0 04             	add    eax,0x4
c00063bb:	50                   	push   eax
c00063bc:	e8 9e ff ff ff       	call   c000635f <isoReadDiscSector>
c00063c1:	83 c4 10             	add    esp,0x10
c00063c4:	83 c9 ff             	or     ecx,0xffffffff
c00063c7:	85 c0                	test   eax,eax
c00063c9:	78 13                	js     c00063de <bread_cache+0x5f>
c00063cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063ce:	89 da                	mov    edx,ebx
c00063d0:	89 38                	mov    DWORD PTR [eax],edi
c00063d2:	89 f0                	mov    eax,esi
c00063d4:	e8 0f fe ff ff       	call   c00061e8 <bgrad_cache>
c00063d9:	b9 0f 00 00 00       	mov    ecx,0xf
c00063de:	83 c4 0c             	add    esp,0xc
c00063e1:	89 c8                	mov    eax,ecx
c00063e3:	5b                   	pop    ebx
c00063e4:	5e                   	pop    esi
c00063e5:	5f                   	pop    edi
c00063e6:	5d                   	pop    ebp
c00063e7:	c3                   	ret    

c00063e8 <biread>:
c00063e8:	89 c2                	mov    edx,eax
c00063ea:	b8 80 70 02 c0       	mov    eax,0xc0027080
c00063ef:	eb 8e                	jmp    c000637f <bread_cache>

c00063f1 <bdread>:
c00063f1:	89 c2                	mov    edx,eax
c00063f3:	b8 20 70 02 c0       	mov    eax,0xc0027020
c00063f8:	eb 85                	jmp    c000637f <bread_cache>

c00063fa <strnicmp>:
c00063fa:	55                   	push   ebp
c00063fb:	57                   	push   edi
c00063fc:	31 ff                	xor    edi,edi
c00063fe:	56                   	push   esi
c00063ff:	53                   	push   ebx
c0006400:	83 ec 0c             	sub    esp,0xc
c0006403:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006407:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000640b:	74 43                	je     c0006450 <strnicmp+0x56>
c000640d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006411:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006415:	85 c0                	test   eax,eax
c0006417:	74 37                	je     c0006450 <strnicmp+0x56>
c0006419:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c000641d:	85 d2                	test   edx,edx
c000641f:	74 2f                	je     c0006450 <strnicmp+0x56>
c0006421:	39 d0                	cmp    eax,edx
c0006423:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006426:	75 04                	jne    c000642c <strnicmp+0x32>
c0006428:	89 ef                	mov    edi,ebp
c000642a:	eb db                	jmp    c0006407 <strnicmp+0xd>
c000642c:	83 ec 0c             	sub    esp,0xc
c000642f:	50                   	push   eax
c0006430:	e8 1b a5 ff ff       	call   c0000950 <tolower>
c0006435:	89 c3                	mov    ebx,eax
c0006437:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000643b:	89 ef                	mov    edi,ebp
c000643d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006440:	e8 0b a5 ff ff       	call   c0000950 <tolower>
c0006445:	83 c4 10             	add    esp,0x10
c0006448:	29 c3                	sub    ebx,eax
c000644a:	89 d8                	mov    eax,ebx
c000644c:	74 b9                	je     c0006407 <strnicmp+0xd>
c000644e:	eb 02                	jmp    c0006452 <strnicmp+0x58>
c0006450:	31 c0                	xor    eax,eax
c0006452:	83 c4 0c             	add    esp,0xc
c0006455:	5b                   	pop    ebx
c0006456:	5e                   	pop    esi
c0006457:	5f                   	pop    edi
c0006458:	5d                   	pop    ebp
c0006459:	c3                   	ret    

c000645a <find_object>:
c000645a:	55                   	push   ebp
c000645b:	57                   	push   edi
c000645c:	89 c7                	mov    edi,eax
c000645e:	56                   	push   esi
c000645f:	53                   	push   ebx
c0006460:	89 d3                	mov    ebx,edx
c0006462:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006468:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000646f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006473:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006477:	83 3d b4 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027eb4,0x0
c000647e:	74 0b                	je     c000648b <find_object+0x31>
c0006480:	89 fa                	mov    edx,edi
c0006482:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006486:	e8 89 fc ff ff       	call   c0006114 <utf2ucs>
c000648b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000648e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006492:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006497:	7e 11                	jle    c00064aa <find_object+0x50>
c0006499:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000649d:	e8 46 ff ff ff       	call   c00063e8 <biread>
c00064a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00064a6:	85 c0                	test   eax,eax
c00064a8:	79 07                	jns    c00064b1 <find_object+0x57>
c00064aa:	31 db                	xor    ebx,ebx
c00064ac:	e9 56 01 00 00       	jmp    c0006607 <find_object+0x1ad>
c00064b1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00064b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00064c1:	8b 04 85 80 70 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8f80]
c00064c8:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00064cc:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064cf:	85 f6                	test   esi,esi
c00064d1:	75 0e                	jne    c00064e1 <find_object+0x87>
c00064d3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00064d7:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00064df:	eb b1                	jmp    c0006492 <find_object+0x38>
c00064e1:	8b 2d b4 7e 02 c0    	mov    ebp,DWORD PTR ds:0xc0027eb4
c00064e7:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00064eb:	85 ed                	test   ebp,ebp
c00064ed:	89 c8                	mov    eax,ecx
c00064ef:	74 2b                	je     c000651c <find_object+0xc2>
c00064f1:	8d 43 21             	lea    eax,[ebx+0x21]
c00064f4:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064f8:	e8 07 fd ff ff       	call   c0006204 <ucscompare>
c00064fd:	85 c0                	test   eax,eax
c00064ff:	0f 84 bf 00 00 00    	je     c00065c4 <find_object+0x16a>
c0006505:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006508:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c000650c:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006514:	0f 8e da 00 00 00    	jle    c00065f4 <find_object+0x19a>
c000651a:	eb b7                	jmp    c00064d3 <find_object+0x79>
c000651c:	29 ce                	sub    esi,ecx
c000651e:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006522:	a8 01                	test   al,0x1
c0006524:	74 05                	je     c000652b <find_object+0xd1>
c0006526:	83 ee 21             	sub    esi,0x21
c0006529:	eb 5a                	jmp    c0006585 <find_object+0x12b>
c000652b:	42                   	inc    edx
c000652c:	83 ee 22             	sub    esi,0x22
c000652f:	eb 54                	jmp    c0006585 <find_object+0x12b>
c0006531:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006534:	48                   	dec    eax
c0006535:	3c 01                	cmp    al,0x1
c0006537:	77 51                	ja     c000658a <find_object+0x130>
c0006539:	50                   	push   eax
c000653a:	6a 02                	push   0x2
c000653c:	68 bd 14 02 c0       	push   0xc00214bd
c0006541:	52                   	push   edx
c0006542:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006546:	e8 95 a2 ff ff       	call   c00007e0 <strncmp>
c000654b:	83 c4 10             	add    esp,0x10
c000654e:	85 c0                	test   eax,eax
c0006550:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006554:	75 27                	jne    c000657d <find_object+0x123>
c0006556:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000655a:	8d 68 fb             	lea    ebp,[eax-0x5]
c000655d:	50                   	push   eax
c000655e:	8d 42 05             	lea    eax,[edx+0x5]
c0006561:	55                   	push   ebp
c0006562:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006566:	50                   	push   eax
c0006567:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000656b:	50                   	push   eax
c000656c:	e8 0f a1 ff ff       	call   c0000680 <strncpy>
c0006571:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006576:	83 c4 10             	add    esp,0x10
c0006579:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657d:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006581:	29 c6                	sub    esi,eax
c0006583:	01 c2                	add    edx,eax
c0006585:	83 fe 03             	cmp    esi,0x3
c0006588:	7f a7                	jg     c0006531 <find_object+0xd7>
c000658a:	85 ed                	test   ebp,ebp
c000658c:	7e 40                	jle    c00065ce <find_object+0x174>
c000658e:	51                   	push   ecx
c000658f:	51                   	push   ecx
c0006590:	6a 2f                	push   0x2f
c0006592:	57                   	push   edi
c0006593:	e8 08 a2 ff ff       	call   c00007a0 <strchr>
c0006598:	83 c4 10             	add    esp,0x10
c000659b:	85 c0                	test   eax,eax
c000659d:	74 04                	je     c00065a3 <find_object+0x149>
c000659f:	29 f8                	sub    eax,edi
c00065a1:	eb 0c                	jmp    c00065af <find_object+0x155>
c00065a3:	83 ec 0c             	sub    esp,0xc
c00065a6:	57                   	push   edi
c00065a7:	e8 c4 9f ff ff       	call   c0000570 <strlen>
c00065ac:	83 c4 10             	add    esp,0x10
c00065af:	52                   	push   edx
c00065b0:	50                   	push   eax
c00065b1:	57                   	push   edi
c00065b2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065b6:	50                   	push   eax
c00065b7:	e8 3e fe ff ff       	call   c00063fa <strnicmp>
c00065bc:	83 c4 10             	add    esp,0x10
c00065bf:	e9 39 ff ff ff       	jmp    c00064fd <find_object+0xa3>
c00065c4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065c8:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00065cc:	eb 1e                	jmp    c00065ec <find_object+0x192>
c00065ce:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065d2:	8d 43 21             	lea    eax,[ebx+0x21]
c00065d5:	89 f9                	mov    ecx,edi
c00065d7:	e8 a7 fc ff ff       	call   c0006283 <fncompare>
c00065dc:	85 c0                	test   eax,eax
c00065de:	0f 85 21 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065e4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065e8:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00065ec:	0f 85 13 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065f2:	eb 13                	jmp    c0006607 <find_object+0x1ad>
c00065f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00065f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00065fc:	0f 8f b7 fe ff ff    	jg     c00064b9 <find_object+0x5f>
c0006602:	e9 cc fe ff ff       	jmp    c00064d3 <find_object+0x79>
c0006607:	81 c4 2c 01 00 00    	add    esp,0x12c
c000660d:	89 d8                	mov    eax,ebx
c000660f:	5b                   	pop    ebx
c0006610:	5e                   	pop    esi
c0006611:	5f                   	pop    edi
c0006612:	5d                   	pop    ebp
c0006613:	c3                   	ret    

c0006614 <find_object_path>:
c0006614:	55                   	push   ebp
c0006615:	57                   	push   edi
c0006616:	89 d7                	mov    edi,edx
c0006618:	56                   	push   esi
c0006619:	89 c6                	mov    esi,eax
c000661b:	53                   	push   ebx
c000661c:	89 cb                	mov    ebx,ecx
c000661e:	83 ec 0c             	sub    esp,0xc
c0006621:	50                   	push   eax
c0006622:	50                   	push   eax
c0006623:	6a 2f                	push   0x2f
c0006625:	56                   	push   esi
c0006626:	e8 75 a1 ff ff       	call   c00007a0 <strchr>
c000662b:	83 c4 10             	add    esp,0x10
c000662e:	89 c5                	mov    ebp,eax
c0006630:	85 c0                	test   eax,eax
c0006632:	74 3a                	je     c000666e <find_object_path+0x5a>
c0006634:	39 ee                	cmp    esi,ebp
c0006636:	74 31                	je     c0006669 <find_object_path+0x55>
c0006638:	8d 43 0a             	lea    eax,[ebx+0xa]
c000663b:	e8 a6 fb ff ff       	call   c00061e6 <iso_733>
c0006640:	89 c2                	mov    edx,eax
c0006642:	8d 43 02             	lea    eax,[ebx+0x2]
c0006645:	e8 9c fb ff ff       	call   c00061e6 <iso_733>
c000664a:	83 ec 0c             	sub    esp,0xc
c000664d:	89 c1                	mov    ecx,eax
c000664f:	52                   	push   edx
c0006650:	89 f0                	mov    eax,esi
c0006652:	ba 01 00 00 00       	mov    edx,0x1
c0006657:	e8 fe fd ff ff       	call   c000645a <find_object>
c000665c:	83 c4 10             	add    esp,0x10
c000665f:	89 c3                	mov    ebx,eax
c0006661:	85 c0                	test   eax,eax
c0006663:	75 04                	jne    c0006669 <find_object_path+0x55>
c0006665:	31 db                	xor    ebx,ebx
c0006667:	eb 36                	jmp    c000669f <find_object_path+0x8b>
c0006669:	8d 75 01             	lea    esi,[ebp+0x1]
c000666c:	eb b3                	jmp    c0006621 <find_object_path+0xd>
c000666e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006671:	74 28                	je     c000669b <find_object_path+0x87>
c0006673:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006676:	e8 6b fb ff ff       	call   c00061e6 <iso_733>
c000667b:	89 c2                	mov    edx,eax
c000667d:	8d 43 02             	lea    eax,[ebx+0x2]
c0006680:	e8 61 fb ff ff       	call   c00061e6 <iso_733>
c0006685:	83 ec 0c             	sub    esp,0xc
c0006688:	89 c1                	mov    ecx,eax
c000668a:	52                   	push   edx
c000668b:	89 f0                	mov    eax,esi
c000668d:	89 fa                	mov    edx,edi
c000668f:	e8 c6 fd ff ff       	call   c000645a <find_object>
c0006694:	83 c4 10             	add    esp,0x10
c0006697:	89 c3                	mov    ebx,eax
c0006699:	eb 04                	jmp    c000669f <find_object_path+0x8b>
c000669b:	85 ff                	test   edi,edi
c000669d:	74 c6                	je     c0006665 <find_object_path+0x51>
c000669f:	83 c4 0c             	add    esp,0xc
c00066a2:	89 d8                	mov    eax,ebx
c00066a4:	5b                   	pop    ebx
c00066a5:	5e                   	pop    esi
c00066a6:	5f                   	pop    edi
c00066a7:	5d                   	pop    ebp
c00066a8:	c3                   	ret    

c00066a9 <stricmp>:
c00066a9:	57                   	push   edi
c00066aa:	56                   	push   esi
c00066ab:	31 f6                	xor    esi,esi
c00066ad:	53                   	push   ebx
c00066ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b2:	83 ec 0c             	sub    esp,0xc
c00066b5:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066bd:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066c1:	50                   	push   eax
c00066c2:	e8 69 a2 ff ff       	call   c0000930 <toupper>
c00066c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00066ca:	e8 81 a2 ff ff       	call   c0000950 <tolower>
c00066cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066d2:	89 c3                	mov    ebx,eax
c00066d4:	e8 57 a2 ff ff       	call   c0000930 <toupper>
c00066d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00066dc:	e8 6f a2 ff ff       	call   c0000950 <tolower>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	39 c3                	cmp    ebx,eax
c00066e6:	75 05                	jne    c00066ed <stricmp+0x44>
c00066e8:	46                   	inc    esi
c00066e9:	85 db                	test   ebx,ebx
c00066eb:	75 c1                	jne    c00066ae <stricmp+0x5>
c00066ed:	29 c3                	sub    ebx,eax
c00066ef:	89 d8                	mov    eax,ebx
c00066f1:	5b                   	pop    ebx
c00066f2:	5e                   	pop    esi
c00066f3:	5f                   	pop    edi
c00066f4:	c3                   	ret    

c00066f5 <iso_open>:
c00066f5:	57                   	push   edi
c00066f6:	31 c0                	xor    eax,eax
c00066f8:	56                   	push   esi
c00066f9:	b9 80 7e 02 c0       	mov    ecx,0xc0027e80
c00066fe:	53                   	push   ebx
c00066ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006704:	0f 95 c0             	setne  al
c0006707:	89 c2                	mov    edx,eax
c0006709:	89 c6                	mov    esi,eax
c000670b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000670f:	e8 00 ff ff ff       	call   c0006614 <find_object_path>
c0006714:	83 ca ff             	or     edx,0xffffffff
c0006717:	85 c0                	test   eax,eax
c0006719:	74 5e                	je     c0006779 <iso_open+0x84>
c000671b:	89 c1                	mov    ecx,eax
c000671d:	31 d2                	xor    edx,edx
c000671f:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006725:	83 bf 40 75 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd8ac0],0x0
c000672c:	75 42                	jne    c0006770 <iso_open+0x7b>
c000672e:	8d 41 02             	lea    eax,[ecx+0x2]
c0006731:	c7 87 40 75 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd8ac0],0xffffffff
c000673b:	e8 a6 fa ff ff       	call   c00061e6 <iso_733>
c0006740:	89 b7 44 75 02 c0    	mov    DWORD PTR [edi-0x3ffd8abc],esi
c0006746:	89 87 40 75 02 c0    	mov    DWORD PTR [edi-0x3ffd8ac0],eax
c000674c:	c7 87 48 75 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd8ab8],0x0
c0006756:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006759:	e8 88 fa ff ff       	call   c00061e6 <iso_733>
c000675e:	c7 87 d0 75 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd8a30],0x0
c0006768:	89 87 4c 75 02 c0    	mov    DWORD PTR [edi-0x3ffd8ab4],eax
c000676e:	eb 09                	jmp    c0006779 <iso_open+0x84>
c0006770:	42                   	inc    edx
c0006771:	83 fa 10             	cmp    edx,0x10
c0006774:	75 a9                	jne    c000671f <iso_open+0x2a>
c0006776:	83 ca ff             	or     edx,0xffffffff
c0006779:	5b                   	pop    ebx
c000677a:	89 d0                	mov    eax,edx
c000677c:	5e                   	pop    esi
c000677d:	5f                   	pop    edi
c000677e:	c3                   	ret    

c000677f <iso_close>:
c000677f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006783:	83 f8 0f             	cmp    eax,0xf
c0006786:	7f 10                	jg     c0006798 <iso_close+0x19>
c0006788:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000678e:	c7 80 40 75 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8ac0],0x0
c0006798:	e9 5e fb ff ff       	jmp    c00062fb <bclear_cache>

c000679d <iso_read>:
c000679d:	55                   	push   ebp
c000679e:	57                   	push   edi
c000679f:	56                   	push   esi
c00067a0:	53                   	push   ebx
c00067a1:	83 ec 1c             	sub    esp,0x1c
c00067a4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067a8:	83 fd 0f             	cmp    ebp,0xf
c00067ab:	7e 0a                	jle    c00067b7 <iso_read+0x1a>
c00067ad:	83 c8 ff             	or     eax,0xffffffff
c00067b0:	89 c2                	mov    edx,eax
c00067b2:	e9 f4 00 00 00       	jmp    c00068ab <iso_read+0x10e>
c00067b7:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067bd:	83 bd 40 75 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd8ac0],0x0
c00067c4:	74 e7                	je     c00067ad <iso_read+0x10>
c00067c6:	8b 95 d0 75 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd8a30]
c00067cc:	85 d2                	test   edx,edx
c00067ce:	75 dd                	jne    c00067ad <iso_read+0x10>
c00067d0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067d5:	0f 84 cd 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067db:	8b 85 48 75 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd8ab8]
c00067e1:	8b 8d 4c 75 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd8ab4]
c00067e7:	29 c1                	sub    ecx,eax
c00067e9:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00067ed:	76 04                	jbe    c00067f3 <iso_read+0x56>
c00067ef:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00067f3:	85 c9                	test   ecx,ecx
c00067f5:	0f 84 ad 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067fb:	89 c6                	mov    esi,eax
c00067fd:	bb 00 08 00 00       	mov    ebx,0x800
c0006802:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006808:	c1 e8 0b             	shr    eax,0xb
c000680b:	29 f3                	sub    ebx,esi
c000680d:	03 85 40 75 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd8ac0]
c0006813:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006819:	7e 3f                	jle    c000685a <iso_read+0xbd>
c000681b:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006821:	75 37                	jne    c000685a <iso_read+0xbd>
c0006823:	be 20 00 00 00       	mov    esi,0x20
c0006828:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000682e:	7f 05                	jg     c0006835 <iso_read+0x98>
c0006830:	89 ce                	mov    esi,ecx
c0006832:	c1 fe 0b             	sar    esi,0xb
c0006835:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006839:	89 f3                	mov    ebx,esi
c000683b:	c1 e3 0b             	shl    ebx,0xb
c000683e:	52                   	push   edx
c000683f:	56                   	push   esi
c0006840:	50                   	push   eax
c0006841:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006845:	e8 15 fb ff ff       	call   c000635f <isoReadDiscSector>
c000684a:	83 c4 10             	add    esp,0x10
c000684d:	85 c0                	test   eax,eax
c000684f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006853:	7f 3e                	jg     c0006893 <iso_read+0xf6>
c0006855:	e9 53 ff ff ff       	jmp    c00067ad <iso_read+0x10>
c000685a:	39 cb                	cmp    ebx,ecx
c000685c:	7e 02                	jle    c0006860 <iso_read+0xc3>
c000685e:	89 cb                	mov    ebx,ecx
c0006860:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006864:	e8 88 fb ff ff       	call   c00063f1 <bdread>
c0006869:	85 c0                	test   eax,eax
c000686b:	0f 88 3c ff ff ff    	js     c00067ad <iso_read+0x10>
c0006871:	8b 0c 85 20 70 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8fe0]
c0006878:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000687c:	8b 85 48 75 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd8ab8]
c0006882:	25 ff 07 00 00       	and    eax,0x7ff
c0006887:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c000688b:	89 d9                	mov    ecx,ebx
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006893:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006897:	01 9d 48 75 02 c0    	add    DWORD PTR [ebp-0x3ffd8ab8],ebx
c000689d:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068a1:	01 da                	add    edx,ebx
c00068a3:	e9 28 ff ff ff       	jmp    c00067d0 <iso_read+0x33>
c00068a8:	89 d0                	mov    eax,edx
c00068aa:	99                   	cdq    
c00068ab:	83 c4 1c             	add    esp,0x1c
c00068ae:	5b                   	pop    ebx
c00068af:	5e                   	pop    esi
c00068b0:	5f                   	pop    edi
c00068b1:	5d                   	pop    ebp
c00068b2:	c3                   	ret    

c00068b3 <iso_seek>:
c00068b3:	55                   	push   ebp
c00068b4:	83 c8 ff             	or     eax,0xffffffff
c00068b7:	57                   	push   edi
c00068b8:	89 c2                	mov    edx,eax
c00068ba:	56                   	push   esi
c00068bb:	53                   	push   ebx
c00068bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068c8:	83 fe 0f             	cmp    esi,0xf
c00068cb:	7f 65                	jg     c0006932 <iso_seek+0x7f>
c00068cd:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068d3:	8d 8d 40 75 02 c0    	lea    ecx,[ebp-0x3ffd8ac0]
c00068d9:	83 bd 40 75 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd8ac0],0x0
c00068e0:	74 50                	je     c0006932 <iso_seek+0x7f>
c00068e2:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068e9:	75 47                	jne    c0006932 <iso_seek+0x7f>
c00068eb:	83 fb 01             	cmp    ebx,0x1
c00068ee:	74 0e                	je     c00068fe <iso_seek+0x4b>
c00068f0:	83 fb 02             	cmp    ebx,0x2
c00068f3:	74 0e                	je     c0006903 <iso_seek+0x50>
c00068f5:	85 db                	test   ebx,ebx
c00068f7:	75 39                	jne    c0006932 <iso_seek+0x7f>
c00068f9:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00068fc:	eb 0d                	jmp    c000690b <iso_seek+0x58>
c00068fe:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006901:	eb 08                	jmp    c000690b <iso_seek+0x58>
c0006903:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006906:	01 f8                	add    eax,edi
c0006908:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000690b:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006911:	8b 88 4c 75 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd8ab4]
c0006917:	05 40 75 02 c0       	add    eax,0xc0027540
c000691c:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000691f:	76 03                	jbe    c0006924 <iso_seek+0x71>
c0006921:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006924:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000692a:	8b 82 48 75 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd8ab8]
c0006930:	31 d2                	xor    edx,edx
c0006932:	5b                   	pop    ebx
c0006933:	5e                   	pop    esi
c0006934:	5f                   	pop    edi
c0006935:	5d                   	pop    ebp
c0006936:	c3                   	ret    

c0006937 <iso_tell>:
c0006937:	83 c8 ff             	or     eax,0xffffffff
c000693a:	53                   	push   ebx
c000693b:	89 c2                	mov    edx,eax
c000693d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006941:	83 f9 0f             	cmp    ecx,0xf
c0006944:	7f 20                	jg     c0006966 <iso_tell+0x2f>
c0006946:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000694c:	83 bb 40 75 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd8ac0],0x0
c0006953:	74 11                	je     c0006966 <iso_tell+0x2f>
c0006955:	83 bb d0 75 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd8a30],0x0
c000695c:	75 08                	jne    c0006966 <iso_tell+0x2f>
c000695e:	8b 83 48 75 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd8ab8]
c0006964:	31 d2                	xor    edx,edx
c0006966:	5b                   	pop    ebx
c0006967:	c3                   	ret    

c0006968 <iso_total>:
c0006968:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000696c:	83 c8 ff             	or     eax,0xffffffff
c000696f:	83 fa 0f             	cmp    edx,0xf
c0006972:	7f 1e                	jg     c0006992 <iso_total+0x2a>
c0006974:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000697a:	83 ba 40 75 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd8ac0],0x0
c0006981:	74 0f                	je     c0006992 <iso_total+0x2a>
c0006983:	83 ba d0 75 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd8a30],0x0
c000698a:	75 06                	jne    c0006992 <iso_total+0x2a>
c000698c:	8b 82 4c 75 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd8ab4]
c0006992:	c3                   	ret    

c0006993 <fn_postprocess>:
c0006993:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006997:	89 d0                	mov    eax,edx
c0006999:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000699c:	83 f9 3b             	cmp    ecx,0x3b
c000699f:	74 07                	je     c00069a8 <fn_postprocess+0x15>
c00069a1:	85 c9                	test   ecx,ecx
c00069a3:	74 03                	je     c00069a8 <fn_postprocess+0x15>
c00069a5:	40                   	inc    eax
c00069a6:	eb f1                	jmp    c0006999 <fn_postprocess+0x6>
c00069a8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069ab:	39 d0                	cmp    eax,edx
c00069ad:	76 0a                	jbe    c00069b9 <fn_postprocess+0x26>
c00069af:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069b3:	75 04                	jne    c00069b9 <fn_postprocess+0x26>
c00069b5:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b9:	c3                   	ret    

c00069ba <iso_readdir>:
c00069ba:	55                   	push   ebp
c00069bb:	57                   	push   edi
c00069bc:	56                   	push   esi
c00069bd:	53                   	push   ebx
c00069be:	83 ec 1c             	sub    esp,0x1c
c00069c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069c5:	83 fb 0f             	cmp    ebx,0xf
c00069c8:	7f 28                	jg     c00069f2 <iso_readdir+0x38>
c00069ca:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069d0:	8d b8 40 75 02 c0    	lea    edi,[eax-0x3ffd8ac0]
c00069d6:	83 b8 40 75 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd8ac0],0x0
c00069dd:	74 13                	je     c00069f2 <iso_readdir+0x38>
c00069df:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069e3:	74 0d                	je     c00069f2 <iso_readdir+0x38>
c00069e5:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00069ec:	0f 84 b1 00 00 00    	je     c0006aa3 <iso_readdir+0xe9>
c00069f2:	83 ec 0c             	sub    esp,0xc
c00069f5:	68 c0 14 02 c0       	push   0xc00214c0
c00069fa:	e8 f1 45 01 00       	call   c001aff0 <iso_kprintf>
c00069ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a02:	e8 05 46 01 00       	call   c001b00c <iso_kprintfd>
c0006a07:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a0d:	c7 04 24 c5 14 02 c0 	mov    DWORD PTR [esp],0xc00214c5
c0006a14:	e8 d7 45 01 00       	call   c001aff0 <iso_kprintf>
c0006a19:	5d                   	pop    ebp
c0006a1a:	ff b3 40 75 02 c0    	push   DWORD PTR [ebx-0x3ffd8ac0]
c0006a20:	e8 e7 45 01 00       	call   c001b00c <iso_kprintfd>
c0006a25:	c7 04 24 cb 14 02 c0 	mov    DWORD PTR [esp],0xc00214cb
c0006a2c:	e8 bf 45 01 00       	call   c001aff0 <iso_kprintf>
c0006a31:	58                   	pop    eax
c0006a32:	ff b3 44 75 02 c0    	push   DWORD PTR [ebx-0x3ffd8abc]
c0006a38:	e8 cf 45 01 00       	call   c001b00c <iso_kprintfd>
c0006a3d:	c7 04 24 d1 14 02 c0 	mov    DWORD PTR [esp],0xc00214d1
c0006a44:	e8 a7 45 01 00       	call   c001aff0 <iso_kprintf>
c0006a49:	58                   	pop    eax
c0006a4a:	ff b3 d0 75 02 c0    	push   DWORD PTR [ebx-0x3ffd8a30]
c0006a50:	e8 b7 45 01 00       	call   c001b00c <iso_kprintfd>
c0006a55:	83 c4 10             	add    esp,0x10
c0006a58:	eb 42                	jmp    c0006a9c <iso_readdir+0xe2>
c0006a5a:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a5d:	8b 34 85 80 70 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd8f80]
c0006a64:	89 d1                	mov    ecx,edx
c0006a66:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a6c:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a70:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a73:	75 35                	jne    c0006aaa <iso_readdir+0xf0>
c0006a75:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a7b:	81 c2 00 08 00 00    	add    edx,0x800
c0006a81:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a84:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a87:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a8a:	73 1e                	jae    c0006aaa <iso_readdir+0xf0>
c0006a8c:	c1 ea 0b             	shr    edx,0xb
c0006a8f:	8b 07                	mov    eax,DWORD PTR [edi]
c0006a91:	01 d0                	add    eax,edx
c0006a93:	e8 50 f9 ff ff       	call   c00063e8 <biread>
c0006a98:	85 c0                	test   eax,eax
c0006a9a:	79 be                	jns    c0006a5a <iso_readdir+0xa0>
c0006a9c:	31 c0                	xor    eax,eax
c0006a9e:	e9 66 01 00 00       	jmp    c0006c09 <iso_readdir+0x24f>
c0006aa3:	31 f6                	xor    esi,esi
c0006aa5:	83 c8 ff             	or     eax,0xffffffff
c0006aa8:	eb da                	jmp    c0006a84 <iso_readdir+0xca>
c0006aaa:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ab0:	8b ba 48 75 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd8ab8]
c0006ab6:	81 c2 40 75 02 c0    	add    edx,0xc0027540
c0006abc:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006abf:	73 db                	jae    c0006a9c <iso_readdir+0xe2>
c0006ac1:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ac5:	75 34                	jne    c0006afb <iso_readdir+0x141>
c0006ac7:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006acb:	75 2e                	jne    c0006afb <iso_readdir+0x141>
c0006acd:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ad0:	8b 34 85 80 70 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd8f80]
c0006ad7:	01 f9                	add    ecx,edi
c0006ad9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006adc:	89 c8                	mov    eax,ecx
c0006ade:	25 ff 07 00 00       	and    eax,0x7ff
c0006ae3:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006ae8:	01 c8                	add    eax,ecx
c0006aea:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006aed:	25 ff 07 00 00       	and    eax,0x7ff
c0006af2:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006af6:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006af9:	74 a1                	je     c0006a9c <iso_readdir+0xe2>
c0006afb:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b01:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b05:	8d 56 21             	lea    edx,[esi+0x21]
c0006b08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b0c:	8d a8 58 75 02 c0    	lea    ebp,[eax-0x3ffd8aa8]
c0006b12:	83 3d b4 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027eb4,0x0
c0006b19:	74 0c                	je     c0006b27 <iso_readdir+0x16d>
c0006b1b:	89 e8                	mov    eax,ebp
c0006b1d:	e8 14 f6 ff ff       	call   c0006136 <ucs2utfn>
c0006b22:	e9 a6 00 00 00       	jmp    c0006bcd <iso_readdir+0x213>
c0006b27:	57                   	push   edi
c0006b28:	51                   	push   ecx
c0006b29:	52                   	push   edx
c0006b2a:	55                   	push   ebp
c0006b2b:	e8 50 9b ff ff       	call   c0000680 <strncpy>
c0006b30:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b34:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006b3a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b3d:	c6 84 01 58 75 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd8aa8],0x0
c0006b45:	e8 49 fe ff ff       	call   c0006993 <fn_postprocess>
c0006b4a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b4e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b51:	83 c4 10             	add    esp,0x10
c0006b54:	29 d0                	sub    eax,edx
c0006b56:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006b5a:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006b5e:	74 05                	je     c0006b65 <iso_readdir+0x1ab>
c0006b60:	83 e8 21             	sub    eax,0x21
c0006b63:	eb 04                	jmp    c0006b69 <iso_readdir+0x1af>
c0006b65:	47                   	inc    edi
c0006b66:	83 e8 22             	sub    eax,0x22
c0006b69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b6d:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b77:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b7c:	7e 4f                	jle    c0006bcd <iso_readdir+0x213>
c0006b7e:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006b81:	48                   	dec    eax
c0006b82:	3c 01                	cmp    al,0x1
c0006b84:	77 47                	ja     c0006bcd <iso_readdir+0x213>
c0006b86:	52                   	push   edx
c0006b87:	6a 02                	push   0x2
c0006b89:	68 bd 14 02 c0       	push   0xc00214bd
c0006b8e:	57                   	push   edi
c0006b8f:	e8 4c 9c ff ff       	call   c00007e0 <strncmp>
c0006b94:	83 c4 10             	add    esp,0x10
c0006b97:	85 c0                	test   eax,eax
c0006b99:	75 26                	jne    c0006bc1 <iso_readdir+0x207>
c0006b9b:	50                   	push   eax
c0006b9c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006ba0:	83 e8 05             	sub    eax,0x5
c0006ba3:	50                   	push   eax
c0006ba4:	8d 47 05             	lea    eax,[edi+0x5]
c0006ba7:	50                   	push   eax
c0006ba8:	55                   	push   ebp
c0006ba9:	e8 d2 9a ff ff       	call   c0000680 <strncpy>
c0006bae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006bb2:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bb6:	83 c4 10             	add    esp,0x10
c0006bb9:	c6 84 08 53 75 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd8aad],0x0
c0006bc1:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bc5:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006bc9:	01 c7                	add    edi,eax
c0006bcb:	eb aa                	jmp    c0006b77 <iso_readdir+0x1bd>
c0006bcd:	83 c8 ff             	or     eax,0xffffffff
c0006bd0:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bd4:	89 c2                	mov    edx,eax
c0006bd6:	75 0a                	jne    c0006be2 <iso_readdir+0x228>
c0006bd8:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bdb:	e8 06 f6 ff ff       	call   c00061e6 <iso_733>
c0006be0:	31 d2                	xor    edx,edx
c0006be2:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006be8:	89 83 50 75 02 c0    	mov    DWORD PTR [ebx-0x3ffd8ab0],eax
c0006bee:	89 93 54 75 02 c0    	mov    DWORD PTR [ebx-0x3ffd8aac],edx
c0006bf4:	81 c3 40 75 02 c0    	add    ebx,0xc0027540
c0006bfa:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006bfd:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c04:	05 50 75 02 c0       	add    eax,0xc0027550
c0006c09:	83 c4 1c             	add    esp,0x1c
c0006c0c:	5b                   	pop    ebx
c0006c0d:	5e                   	pop    esi
c0006c0e:	5f                   	pop    edi
c0006c0f:	5d                   	pop    ebp
c0006c10:	c3                   	ret    

c0006c11 <iso_reset>:
c0006c11:	83 ec 18             	sub    esp,0x18
c0006c14:	68 da 14 02 c0       	push   0xc00214da
c0006c19:	e8 d2 43 01 00       	call   c001aff0 <iso_kprintf>
c0006c1e:	e8 10 f7 ff ff       	call   c0006333 <iso_break_all>
c0006c23:	e8 09 f7 ff ff       	call   c0006331 <bclear>
c0006c28:	31 c0                	xor    eax,eax
c0006c2a:	83 c4 1c             	add    esp,0x1c
c0006c2d:	c3                   	ret    

c0006c2e <init_percd>:
c0006c2e:	57                   	push   edi
c0006c2f:	56                   	push   esi
c0006c30:	53                   	push   ebx
c0006c31:	bb 01 00 00 00       	mov    ebx,0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	a2 60 70 02 c0       	mov    ds:0xc0027060,al
c0006c3f:	e8 cd ff ff ff       	call   c0006c11 <iso_reset>
c0006c44:	c7 05 b4 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027eb4,0x0
c0006c4e:	a1 ac 7e 02 c0       	mov    eax,ds:0xc0027eac
c0006c53:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c57:	e8 8c f7 ff ff       	call   c00063e8 <biread>
c0006c5c:	89 c6                	mov    esi,eax
c0006c5e:	85 c0                	test   eax,eax
c0006c60:	0f 88 ba 00 00 00    	js     c0006d20 <init_percd+0xf2>
c0006c66:	8b 04 85 80 70 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8f80]
c0006c6d:	83 c0 04             	add    eax,0x4
c0006c70:	52                   	push   edx
c0006c71:	6a 06                	push   0x6
c0006c73:	68 e5 14 02 c0       	push   0xc00214e5
c0006c78:	50                   	push   eax
c0006c79:	e8 02 97 ff ff       	call   c0000380 <memcmp>
c0006c7e:	83 c4 10             	add    esp,0x10
c0006c81:	85 c0                	test   eax,eax
c0006c83:	74 08                	je     c0006c8d <init_percd+0x5f>
c0006c85:	43                   	inc    ebx
c0006c86:	83 fb 04             	cmp    ebx,0x4
c0006c89:	75 c3                	jne    c0006c4e <init_percd+0x20>
c0006c8b:	eb 1a                	jmp    c0006ca7 <init_percd+0x79>
c0006c8d:	8b 04 b5 80 70 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd8f80]
c0006c94:	83 c0 5c             	add    eax,0x5c
c0006c97:	e8 17 f5 ff ff       	call   c00061b3 <isjoliet>
c0006c9c:	a3 b4 7e 02 c0       	mov    ds:0xc0027eb4,eax
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 e0                	je     c0006c85 <init_percd+0x57>
c0006ca5:	eb 3e                	jmp    c0006ce5 <init_percd+0xb7>
c0006ca7:	83 3d b4 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027eb4,0x0
c0006cae:	75 35                	jne    c0006ce5 <init_percd+0xb7>
c0006cb0:	a1 ac 7e 02 c0       	mov    eax,ds:0xc0027eac
c0006cb5:	83 c0 10             	add    eax,0x10
c0006cb8:	e8 2b f7 ff ff       	call   c00063e8 <biread>
c0006cbd:	89 c6                	mov    esi,eax
c0006cbf:	85 c0                	test   eax,eax
c0006cc1:	78 5f                	js     c0006d22 <init_percd+0xf4>
c0006cc3:	83 cb ff             	or     ebx,0xffffffff
c0006cc6:	50                   	push   eax
c0006cc7:	8b 04 b5 80 70 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd8f80]
c0006cce:	6a 06                	push   0x6
c0006cd0:	83 c0 04             	add    eax,0x4
c0006cd3:	68 ec 14 02 c0       	push   0xc00214ec
c0006cd8:	50                   	push   eax
c0006cd9:	e8 a2 96 ff ff       	call   c0000380 <memcmp>
c0006cde:	83 c4 10             	add    esp,0x10
c0006ce1:	85 c0                	test   eax,eax
c0006ce3:	75 3d                	jne    c0006d22 <init_percd+0xf4>
c0006ce5:	8b 34 b5 80 70 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd8f80]
c0006cec:	bf 80 7e 02 c0       	mov    edi,0xc0027e80
c0006cf1:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006cf7:	b9 22 00 00 00       	mov    ecx,0x22
c0006cfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cfe:	b8 82 7e 02 c0       	mov    eax,0xc0027e82
c0006d03:	31 db                	xor    ebx,ebx
c0006d05:	e8 dc f4 ff ff       	call   c00061e6 <iso_733>
c0006d0a:	a3 a8 7e 02 c0       	mov    ds:0xc0027ea8,eax
c0006d0f:	b8 8a 7e 02 c0       	mov    eax,0xc0027e8a
c0006d14:	e8 cd f4 ff ff       	call   c00061e6 <iso_733>
c0006d19:	a3 a4 7e 02 c0       	mov    ds:0xc0027ea4,eax
c0006d1e:	eb 02                	jmp    c0006d22 <init_percd+0xf4>
c0006d20:	89 c3                	mov    ebx,eax
c0006d22:	89 d8                	mov    eax,ebx
c0006d24:	5b                   	pop    ebx
c0006d25:	5e                   	pop    esi
c0006d26:	5f                   	pop    edi
c0006d27:	c3                   	ret    

c0006d28 <iso_ioctl>:
c0006d28:	83 ec 18             	sub    esp,0x18
c0006d2b:	68 f3 14 02 c0       	push   0xc00214f3
c0006d30:	e8 bb 42 01 00       	call   c001aff0 <iso_kprintf>
c0006d35:	e8 d7 fe ff ff       	call   c0006c11 <iso_reset>
c0006d3a:	31 c0                	xor    eax,eax
c0006d3c:	83 c4 1c             	add    esp,0x1c
c0006d3f:	c3                   	ret    

c0006d40 <fs_iso9660_init>:
c0006d40:	53                   	push   ebx
c0006d41:	31 db                	xor    ebx,ebx
c0006d43:	83 ec 14             	sub    esp,0x14
c0006d46:	68 fe 14 02 c0       	push   0xc00214fe
c0006d4b:	e8 a0 42 01 00       	call   c001aff0 <iso_kprintf>
c0006d50:	83 c4 0c             	add    esp,0xc
c0006d53:	68 40 09 00 00       	push   0x940
c0006d58:	6a 00                	push   0x0
c0006d5a:	68 40 75 02 c0       	push   0xc0027540
c0006d5f:	e8 8c 97 ff ff       	call   c00004f0 <memset>
c0006d64:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d6b:	c7 05 40 75 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0027540,0xffffffff
c0006d75:	e8 d5 7c 00 00       	call   c000ea4f <malloc>
c0006d7a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d81:	a3 b0 7e 02 c0       	mov    ds:0xc0027eb0,eax
c0006d86:	e8 c4 7c 00 00       	call   c000ea4f <malloc>
c0006d8b:	83 c4 10             	add    esp,0x10
c0006d8e:	a3 20 75 02 c0       	mov    ds:0xc0027520,eax
c0006d93:	83 ec 0c             	sub    esp,0xc
c0006d96:	68 04 08 00 00       	push   0x804
c0006d9b:	e8 af 7c 00 00       	call   c000ea4f <malloc>
c0006da0:	89 04 9d 80 70 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8f80],eax
c0006da7:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dad:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006db4:	e8 96 7c 00 00       	call   c000ea4f <malloc>
c0006db9:	83 c4 10             	add    esp,0x10
c0006dbc:	89 04 9d 20 70 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8fe0],eax
c0006dc3:	43                   	inc    ebx
c0006dc4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dca:	83 fb 10             	cmp    ebx,0x10
c0006dcd:	75 c4                	jne    c0006d93 <fs_iso9660_init+0x53>
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	83 c4 08             	add    esp,0x8
c0006dd4:	5b                   	pop    ebx
c0006dd5:	c3                   	ret    

c0006dd6 <fs_iso9660_shutdown>:
c0006dd6:	53                   	push   ebx
c0006dd7:	31 db                	xor    ebx,ebx
c0006dd9:	83 ec 08             	sub    esp,0x8
c0006ddc:	83 ec 0c             	sub    esp,0xc
c0006ddf:	ff 34 9d 80 70 02 c0 	push   DWORD PTR [ebx*4-0x3ffd8f80]
c0006de6:	e8 74 7c 00 00       	call   c000ea5f <free>
c0006deb:	58                   	pop    eax
c0006dec:	ff 34 9d 20 70 02 c0 	push   DWORD PTR [ebx*4-0x3ffd8fe0]
c0006df3:	43                   	inc    ebx
c0006df4:	e8 66 7c 00 00       	call   c000ea5f <free>
c0006df9:	83 c4 10             	add    esp,0x10
c0006dfc:	83 fb 10             	cmp    ebx,0x10
c0006dff:	75 db                	jne    c0006ddc <fs_iso9660_shutdown+0x6>
c0006e01:	a1 b0 7e 02 c0       	mov    eax,ds:0xc0027eb0
c0006e06:	85 c0                	test   eax,eax
c0006e08:	74 0c                	je     c0006e16 <fs_iso9660_shutdown+0x40>
c0006e0a:	83 ec 0c             	sub    esp,0xc
c0006e0d:	50                   	push   eax
c0006e0e:	e8 4c 7c 00 00       	call   c000ea5f <free>
c0006e13:	83 c4 10             	add    esp,0x10
c0006e16:	a1 20 75 02 c0       	mov    eax,ds:0xc0027520
c0006e1b:	85 c0                	test   eax,eax
c0006e1d:	74 0c                	je     c0006e2b <fs_iso9660_shutdown+0x55>
c0006e1f:	83 ec 0c             	sub    esp,0xc
c0006e22:	50                   	push   eax
c0006e23:	e8 37 7c 00 00       	call   c000ea5f <free>
c0006e28:	83 c4 10             	add    esp,0x10
c0006e2b:	c7 05 20 75 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027520,0x0
c0006e35:	c7 05 b0 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027eb0,0x0
c0006e3f:	31 c0                	xor    eax,eax
c0006e41:	83 c4 08             	add    esp,0x8
c0006e44:	5b                   	pop    ebx
c0006e45:	c3                   	ret    

c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e46:	55                   	push   ebp
c0006e47:	57                   	push   edi
c0006e48:	56                   	push   esi
c0006e49:	be 10 15 02 c0       	mov    esi,0xc0021510
c0006e4e:	53                   	push   ebx
c0006e4f:	83 ec 20             	sub    esp,0x20
c0006e52:	a0 0f 15 02 c0       	mov    al,ds:0xc002150f
c0006e57:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0006e5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0006e5f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0006e63:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0006e67:	b8 10 00 00 00       	mov    eax,0x10
c0006e6c:	f7 c7 02 00 00 00    	test   edi,0x2
c0006e72:	75 60                	jne    c0006ed4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0006e74:	89 c1                	mov    ecx,eax
c0006e76:	c1 e9 02             	shr    ecx,0x2
c0006e79:	fc                   	cld    
c0006e7a:	31 d2                	xor    edx,edx
c0006e7c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0006e7e:	a8 02                	test   al,0x2
c0006e80:	74 0b                	je     c0006e8d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c0006e82:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006e85:	66 89 17             	mov    WORD PTR [edi],dx
c0006e88:	ba 02 00 00 00       	mov    edx,0x2
c0006e8d:	a8 01                	test   al,0x1
c0006e8f:	74 06                	je     c0006e97 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c0006e91:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0006e94:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0006e97:	89 ee                	mov    esi,ebp
c0006e99:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006e9d:	eb 02                	jmp    c0006ea1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c0006e9f:	89 c6                	mov    esi,eax
c0006ea1:	31 d2                	xor    edx,edx
c0006ea3:	83 c1 01             	add    ecx,0x1
c0006ea6:	89 f0                	mov    eax,esi
c0006ea8:	f7 f3                	div    ebx
c0006eaa:	39 de                	cmp    esi,ebx
c0006eac:	73 f1                	jae    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c0006eae:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0006eb1:	eb 02                	jmp    c0006eb5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c0006eb3:	89 c5                	mov    ebp,eax
c0006eb5:	31 d2                	xor    edx,edx
c0006eb7:	83 e9 01             	sub    ecx,0x1
c0006eba:	89 e8                	mov    eax,ebp
c0006ebc:	f7 f3                	div    ebx
c0006ebe:	39 dd                	cmp    ebp,ebx
c0006ec0:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec4:	88 11                	mov    BYTE PTR [ecx],dl
c0006ec6:	73 eb                	jae    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c0006ec8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0006ecc:	83 c4 20             	add    esp,0x20
c0006ecf:	5b                   	pop    ebx
c0006ed0:	5e                   	pop    esi
c0006ed1:	5f                   	pop    edi
c0006ed2:	5d                   	pop    ebp
c0006ed3:	c3                   	ret    
c0006ed4:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006ed7:	83 c7 02             	add    edi,0x2
c0006eda:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c0006ede:	83 c6 02             	add    esi,0x2
c0006ee1:	83 e8 02             	sub    eax,0x2
c0006ee4:	eb 8e                	jmp    c0006e74 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c0006ee6 <Dbg::logc(char)>:
c0006ee6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006eea:	f6 05 90 cd 02 c0 10 	test   BYTE PTR ds:0xc002cd90,0x10
c0006ef1:	75 12                	jne    c0006f05 <Dbg::logc(char)+0x1f>
c0006ef3:	ba fd 03 00 00       	mov    edx,0x3fd
c0006ef8:	ec                   	in     al,dx
c0006ef9:	a8 20                	test   al,0x20
c0006efb:	74 fb                	je     c0006ef8 <Dbg::logc(char)+0x12>
c0006efd:	ba f8 03 00 00       	mov    edx,0x3f8
c0006f02:	88 c8                	mov    al,cl
c0006f04:	ee                   	out    dx,al
c0006f05:	c3                   	ret    

c0006f06 <Dbg::logs(char*)>:
c0006f06:	53                   	push   ebx
c0006f07:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006f0b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f0e:	85 c0                	test   eax,eax
c0006f10:	74 11                	je     c0006f23 <Dbg::logs(char*)+0x1d>
c0006f12:	83 c3 01             	add    ebx,0x1
c0006f15:	50                   	push   eax
c0006f16:	e8 cb ff ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006f1b:	58                   	pop    eax
c0006f1c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1f:	85 c0                	test   eax,eax
c0006f21:	75 ef                	jne    c0006f12 <Dbg::logs(char*)+0xc>
c0006f23:	5b                   	pop    ebx
c0006f24:	c3                   	ret    

c0006f25 <Dbg::logWriteInt(unsigned int)>:
c0006f25:	83 ec 10             	sub    esp,0x10
c0006f28:	6a 0a                	push   0xa
c0006f2a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f2e:	50                   	push   eax
c0006f2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006f33:	50                   	push   eax
c0006f34:	e8 0d ff ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f39:	50                   	push   eax
c0006f3a:	e8 c7 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0006f3f:	83 c4 20             	add    esp,0x20
c0006f42:	c3                   	ret    

c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f43:	83 ec 10             	sub    esp,0x10
c0006f46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006f4a:	50                   	push   eax
c0006f4b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f4f:	50                   	push   eax
c0006f50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006f54:	52                   	push   edx
c0006f55:	e8 ec fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f5a:	50                   	push   eax
c0006f5b:	e8 a6 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0006f60:	83 c4 20             	add    esp,0x20
c0006f63:	c3                   	ret    

c0006f64 <Dbg::kprintf(char const*, ...)>:
c0006f64:	55                   	push   ebp
c0006f65:	57                   	push   edi
c0006f66:	56                   	push   esi
c0006f67:	53                   	push   ebx
c0006f68:	83 ec 0c             	sub    esp,0xc
c0006f6b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006f6f:	f6 05 90 cd 02 c0 10 	test   BYTE PTR ds:0xc002cd90,0x10
c0006f76:	74 08                	je     c0006f80 <Dbg::kprintf(char const*, ...)+0x1c>
c0006f78:	83 c4 0c             	add    esp,0xc
c0006f7b:	5b                   	pop    ebx
c0006f7c:	5e                   	pop    esi
c0006f7d:	5f                   	pop    edi
c0006f7e:	5d                   	pop    ebp
c0006f7f:	c3                   	ret    
c0006f80:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f84:	31 ff                	xor    edi,edi
c0006f86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f8a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f8d:	85 c0                	test   eax,eax
c0006f8f:	74 e7                	je     c0006f78 <Dbg::kprintf(char const*, ...)+0x14>
c0006f91:	8d 77 01             	lea    esi,[edi+0x1]
c0006f94:	83 f8 25             	cmp    eax,0x25
c0006f97:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006f9a:	75 47                	jne    c0006fe3 <Dbg::kprintf(char const*, ...)+0x7f>
c0006f9c:	83 c7 02             	add    edi,0x2
c0006f9f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fa2:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fa5:	83 e8 25             	sub    eax,0x25
c0006fa8:	0f b6 c0             	movzx  eax,al
c0006fab:	83 f8 53             	cmp    eax,0x53
c0006fae:	0f 87 ce 00 00 00    	ja     c0007082 <Dbg::kprintf(char const*, ...)+0x11e>
c0006fb4:	ff 24 85 20 15 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdeae0]
c0006fbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fbf:	89 c8                	mov    eax,ecx
c0006fc1:	83 c1 04             	add    ecx,0x4
c0006fc4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fc8:	8b 28                	mov    ebp,DWORD PTR [eax]
c0006fca:	55                   	push   ebp
c0006fcb:	e8 55 ff ff ff       	call   c0006f25 <Dbg::logWriteInt(unsigned int)>
c0006fd0:	58                   	pop    eax
c0006fd1:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006fd4:	85 c0                	test   eax,eax
c0006fd6:	74 a0                	je     c0006f78 <Dbg::kprintf(char const*, ...)+0x14>
c0006fd8:	8d 77 01             	lea    esi,[edi+0x1]
c0006fdb:	83 f8 25             	cmp    eax,0x25
c0006fde:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fe1:	74 b9                	je     c0006f9c <Dbg::kprintf(char const*, ...)+0x38>
c0006fe3:	50                   	push   eax
c0006fe4:	89 f7                	mov    edi,esi
c0006fe6:	e8 fb fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006feb:	89 ee                	mov    esi,ebp
c0006fed:	58                   	pop    eax
c0006fee:	eb e1                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0006ff0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006ff4:	89 c8                	mov    eax,ecx
c0006ff6:	83 c1 04             	add    ecx,0x4
c0006ff9:	8b 00                	mov    eax,DWORD PTR [eax]
c0006ffb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fff:	50                   	push   eax
c0007000:	e8 01 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0007005:	58                   	pop    eax
c0007006:	eb c9                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000700c:	89 d0                	mov    eax,edx
c000700e:	83 c2 04             	add    edx,0x4
c0007011:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007015:	8b 00                	mov    eax,DWORD PTR [eax]
c0007017:	50                   	push   eax
c0007018:	e8 08 ff ff ff       	call   c0006f25 <Dbg::logWriteInt(unsigned int)>
c000701d:	58                   	pop    eax
c000701e:	eb b1                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007020:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007024:	89 d0                	mov    eax,edx
c0007026:	83 c2 04             	add    edx,0x4
c0007029:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000702c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007030:	50                   	push   eax
c0007031:	e8 b0 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007036:	58                   	pop    eax
c0007037:	eb 98                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007039:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000703d:	89 c8                	mov    eax,ecx
c000703f:	83 c1 04             	add    ecx,0x4
c0007042:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007046:	6a 10                	push   0x10
c0007048:	8b 08                	mov    ecx,DWORD PTR [eax]
c000704a:	51                   	push   ecx
c000704b:	e8 f3 fe ff ff       	call   c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>
c0007050:	5d                   	pop    ebp
c0007051:	58                   	pop    eax
c0007052:	e9 7a ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007057:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000705b:	89 d0                	mov    eax,edx
c000705d:	83 c2 08             	add    edx,0x8
c0007060:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007064:	6a 10                	push   0x10
c0007066:	8b 00                	mov    eax,DWORD PTR [eax]
c0007068:	50                   	push   eax
c0007069:	e8 d5 fe ff ff       	call   c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>
c000706e:	58                   	pop    eax
c000706f:	5a                   	pop    edx
c0007070:	e9 5c ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007075:	6a 25                	push   0x25
c0007077:	e8 6a fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c000707c:	5a                   	pop    edx
c000707d:	e9 4f ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007082:	6a 25                	push   0x25
c0007084:	e8 5d fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007089:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000708d:	50                   	push   eax
c000708e:	e8 53 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007093:	5a                   	pop    edx
c0007094:	59                   	pop    ecx
c0007095:	e9 37 ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c000709a:	66 90                	xchg   ax,ax

c000709c <KiUbsanPrintDetails(char const*, void*)>:
c000709c:	83 ec 1c             	sub    esp,0x1c
c000709f:	83 ec 08             	sub    esp,0x8
c00070a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070a6:	68 70 16 02 c0       	push   0xc0021670
c00070ab:	e8 b4 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070b0:	83 c4 10             	add    esp,0x10
c00070b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00070b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00070c1:	83 ec 08             	sub    esp,0x8
c00070c4:	50                   	push   eax
c00070c5:	68 84 16 02 c0       	push   0xc0021684
c00070ca:	e8 95 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070cf:	83 c4 10             	add    esp,0x10
c00070d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00070d9:	83 ec 08             	sub    esp,0x8
c00070dc:	50                   	push   eax
c00070dd:	68 8e 16 02 c0       	push   0xc002168e
c00070e2:	e8 7d fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00070f1:	83 ec 08             	sub    esp,0x8
c00070f4:	50                   	push   eax
c00070f5:	68 98 16 02 c0       	push   0xc0021698
c00070fa:	e8 65 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070ff:	83 c4 10             	add    esp,0x10
c0007102:	90                   	nop
c0007103:	83 c4 1c             	add    esp,0x1c
c0007106:	c3                   	ret    
c0007107:	90                   	nop

c0007108 <__ubsan_handle_type_mismatch_v1>:
c0007108:	83 ec 0c             	sub    esp,0xc
c000710b:	83 ec 08             	sub    esp,0x8
c000710e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007112:	68 dc 17 02 c0       	push   0xc00217dc
c0007117:	e8 80 ff ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000711c:	83 c4 10             	add    esp,0x10
c000711f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007124:	75 16                	jne    c000713c <__ubsan_handle_type_mismatch_v1+0x34>
c0007126:	83 ec 0c             	sub    esp,0xc
c0007129:	68 a2 16 02 c0       	push   0xc00216a2
c000712e:	e8 31 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007133:	83 c4 10             	add    esp,0x10
c0007136:	e9 91 00 00 00       	jmp    c00071cc <__ubsan_handle_type_mismatch_v1+0xc4>
c000713b:	90                   	nop
c000713c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007140:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007143:	85 c0                	test   eax,eax
c0007145:	74 29                	je     c0007170 <__ubsan_handle_type_mismatch_v1+0x68>
c0007147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000714b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000714e:	83 e8 01             	sub    eax,0x1
c0007151:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0007155:	75 19                	jne    c0007170 <__ubsan_handle_type_mismatch_v1+0x68>
c0007157:	83 ec 08             	sub    esp,0x8
c000715a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000715e:	68 fc 17 02 c0       	push   0xc00217fc
c0007163:	e8 fc fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007168:	83 c4 10             	add    esp,0x10
c000716b:	eb 5f                	jmp    c00071cc <__ubsan_handle_type_mismatch_v1+0xc4>
c000716d:	8d 76 00             	lea    esi,[esi+0x0]
c0007170:	83 ec 0c             	sub    esp,0xc
c0007173:	68 b7 16 02 c0       	push   0xc00216b7
c0007178:	e8 e7 fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000717d:	83 c4 10             	add    esp,0x10
c0007180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007184:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007187:	0f b6 c0             	movzx  eax,al
c000718a:	83 ec 08             	sub    esp,0x8
c000718d:	50                   	push   eax
c000718e:	68 d1 16 02 c0       	push   0xc00216d1
c0007193:	e8 cc fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007198:	83 c4 10             	add    esp,0x10
c000719b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000719f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071a2:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071ad:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071b0:	0f b6 c0             	movzx  eax,al
c00071b3:	8b 04 85 40 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb7c0]
c00071ba:	51                   	push   ecx
c00071bb:	52                   	push   edx
c00071bc:	50                   	push   eax
c00071bd:	68 24 18 02 c0       	push   0xc0021824
c00071c2:	e8 9d fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00071c7:	83 c4 10             	add    esp,0x10
c00071ca:	66 90                	xchg   ax,ax
c00071cc:	83 ec 0c             	sub    esp,0xc
c00071cf:	68 dc 17 02 c0       	push   0xc00217dc
c00071d4:	e8 bd 7b 00 00       	call   c000ed96 <KePanic(char const*)>
c00071d9:	83 c4 10             	add    esp,0x10
c00071dc:	90                   	nop
c00071dd:	83 c4 0c             	add    esp,0xc
c00071e0:	c3                   	ret    
c00071e1:	8d 76 00             	lea    esi,[esi+0x0]

c00071e4 <__ubsan_handle_pointer_overflow>:
c00071e4:	83 ec 0c             	sub    esp,0xc
c00071e7:	83 ec 08             	sub    esp,0x8
c00071ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071ee:	68 6c 18 02 c0       	push   0xc002186c
c00071f3:	e8 a4 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00071f8:	83 c4 10             	add    esp,0x10
c00071fb:	83 ec 0c             	sub    esp,0xc
c00071fe:	68 6c 18 02 c0       	push   0xc002186c
c0007203:	e8 8e 7b 00 00       	call   c000ed96 <KePanic(char const*)>
c0007208:	83 c4 10             	add    esp,0x10
c000720b:	90                   	nop
c000720c:	83 c4 0c             	add    esp,0xc
c000720f:	c3                   	ret    

c0007210 <__ubsan_handle_out_of_bounds>:
c0007210:	83 ec 0c             	sub    esp,0xc
c0007213:	83 ec 08             	sub    esp,0x8
c0007216:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000721a:	68 dc 16 02 c0       	push   0xc00216dc
c000721f:	e8 78 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007224:	83 c4 10             	add    esp,0x10
c0007227:	83 ec 0c             	sub    esp,0xc
c000722a:	68 dc 16 02 c0       	push   0xc00216dc
c000722f:	e8 62 7b 00 00       	call   c000ed96 <KePanic(char const*)>
c0007234:	83 c4 10             	add    esp,0x10
c0007237:	90                   	nop
c0007238:	83 c4 0c             	add    esp,0xc
c000723b:	c3                   	ret    

c000723c <__ubsan_handle_add_overflow>:
c000723c:	83 ec 0c             	sub    esp,0xc
c000723f:	83 ec 08             	sub    esp,0x8
c0007242:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007246:	68 f9 16 02 c0       	push   0xc00216f9
c000724b:	e8 4c fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007250:	83 c4 10             	add    esp,0x10
c0007253:	83 ec 0c             	sub    esp,0xc
c0007256:	68 f9 16 02 c0       	push   0xc00216f9
c000725b:	e8 36 7b 00 00       	call   c000ed96 <KePanic(char const*)>
c0007260:	83 c4 10             	add    esp,0x10
c0007263:	90                   	nop
c0007264:	83 c4 0c             	add    esp,0xc
c0007267:	c3                   	ret    

c0007268 <__ubsan_handle_load_invalid_value>:
c0007268:	83 ec 0c             	sub    esp,0xc
c000726b:	83 ec 08             	sub    esp,0x8
c000726e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007272:	68 8c 18 02 c0       	push   0xc002188c
c0007277:	e8 20 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000727c:	83 c4 10             	add    esp,0x10
c000727f:	83 ec 0c             	sub    esp,0xc
c0007282:	68 8c 18 02 c0       	push   0xc002188c
c0007287:	e8 0a 7b 00 00       	call   c000ed96 <KePanic(char const*)>
c000728c:	83 c4 10             	add    esp,0x10
c000728f:	90                   	nop
c0007290:	83 c4 0c             	add    esp,0xc
c0007293:	c3                   	ret    

c0007294 <__ubsan_handle_divrem_overflow>:
c0007294:	83 ec 0c             	sub    esp,0xc
c0007297:	83 ec 08             	sub    esp,0x8
c000729a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000729e:	68 b0 18 02 c0       	push   0xc00218b0
c00072a3:	e8 f4 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	83 ec 0c             	sub    esp,0xc
c00072ae:	68 b0 18 02 c0       	push   0xc00218b0
c00072b3:	e8 de 7a 00 00       	call   c000ed96 <KePanic(char const*)>
c00072b8:	83 c4 10             	add    esp,0x10
c00072bb:	90                   	nop
c00072bc:	83 c4 0c             	add    esp,0xc
c00072bf:	c3                   	ret    

c00072c0 <__ubsan_handle_mul_overflow>:
c00072c0:	83 ec 0c             	sub    esp,0xc
c00072c3:	83 ec 08             	sub    esp,0x8
c00072c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072ca:	68 15 17 02 c0       	push   0xc0021715
c00072cf:	e8 c8 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00072d4:	83 c4 10             	add    esp,0x10
c00072d7:	83 ec 0c             	sub    esp,0xc
c00072da:	68 15 17 02 c0       	push   0xc0021715
c00072df:	e8 b2 7a 00 00       	call   c000ed96 <KePanic(char const*)>
c00072e4:	83 c4 10             	add    esp,0x10
c00072e7:	90                   	nop
c00072e8:	83 c4 0c             	add    esp,0xc
c00072eb:	c3                   	ret    

c00072ec <__ubsan_handle_sub_overflow>:
c00072ec:	83 ec 0c             	sub    esp,0xc
c00072ef:	83 ec 08             	sub    esp,0x8
c00072f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072f6:	68 31 17 02 c0       	push   0xc0021731
c00072fb:	e8 9c fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007300:	83 c4 10             	add    esp,0x10
c0007303:	83 ec 0c             	sub    esp,0xc
c0007306:	68 31 17 02 c0       	push   0xc0021731
c000730b:	e8 86 7a 00 00       	call   c000ed96 <KePanic(char const*)>
c0007310:	83 c4 10             	add    esp,0x10
c0007313:	90                   	nop
c0007314:	83 c4 0c             	add    esp,0xc
c0007317:	c3                   	ret    

c0007318 <__ubsan_handle_shift_out_of_bounds>:
c0007318:	83 ec 0c             	sub    esp,0xc
c000731b:	83 ec 08             	sub    esp,0x8
c000731e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007322:	68 d0 18 02 c0       	push   0xc00218d0
c0007327:	e8 70 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000732c:	83 c4 10             	add    esp,0x10
c000732f:	83 ec 0c             	sub    esp,0xc
c0007332:	68 d0 18 02 c0       	push   0xc00218d0
c0007337:	e8 5a 7a 00 00       	call   c000ed96 <KePanic(char const*)>
c000733c:	83 c4 10             	add    esp,0x10
c000733f:	90                   	nop
c0007340:	83 c4 0c             	add    esp,0xc
c0007343:	c3                   	ret    

c0007344 <__ubsan_handle_negate_overflow>:
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	83 ec 08             	sub    esp,0x8
c000734a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000734e:	68 f4 18 02 c0       	push   0xc00218f4
c0007353:	e8 44 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007358:	83 c4 10             	add    esp,0x10
c000735b:	83 ec 0c             	sub    esp,0xc
c000735e:	68 f4 18 02 c0       	push   0xc00218f4
c0007363:	e8 2e 7a 00 00       	call   c000ed96 <KePanic(char const*)>
c0007368:	83 c4 10             	add    esp,0x10
c000736b:	90                   	nop
c000736c:	83 c4 0c             	add    esp,0xc
c000736f:	c3                   	ret    

c0007370 <KiIsHashInTable(unsigned short)>:
c0007370:	0f b7 d0             	movzx  edx,ax
c0007373:	83 e0 07             	and    eax,0x7
c0007376:	c1 fa 03             	sar    edx,0x3
c0007379:	88 c1                	mov    cl,al
c000737b:	0f b6 92 00 83 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd7d00]
c0007382:	d3 fa                	sar    edx,cl
c0007384:	89 d0                	mov    eax,edx
c0007386:	83 e0 01             	and    eax,0x1
c0007389:	c3                   	ret    

c000738a <KiSetHashInTable(unsigned short, bool)>:
c000738a:	56                   	push   esi
c000738b:	53                   	push   ebx
c000738c:	0f b7 d8             	movzx  ebx,ax
c000738f:	83 e0 07             	and    eax,0x7
c0007392:	c1 fb 03             	sar    ebx,0x3
c0007395:	89 c1                	mov    ecx,eax
c0007397:	0f b6 b3 00 83 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd7d00]
c000739e:	b8 01 00 00 00       	mov    eax,0x1
c00073a3:	d3 e0                	shl    eax,cl
c00073a5:	84 d2                	test   dl,dl
c00073a7:	74 04                	je     c00073ad <KiSetHashInTable(unsigned short, bool)+0x23>
c00073a9:	09 f0                	or     eax,esi
c00073ab:	eb 04                	jmp    c00073b1 <KiSetHashInTable(unsigned short, bool)+0x27>
c00073ad:	f7 d0                	not    eax
c00073af:	21 f0                	and    eax,esi
c00073b1:	88 83 00 83 02 c0    	mov    BYTE PTR [ebx-0x3ffd7d00],al
c00073b7:	5b                   	pop    ebx
c00073b8:	5e                   	pop    esi
c00073b9:	c3                   	ret    

c00073ba <KiFlushSymlinkChanges()>:
c00073ba:	57                   	push   edi
c00073bb:	56                   	push   esi
c00073bc:	53                   	push   ebx
c00073bd:	83 ec 1c             	sub    esp,0x1c
c00073c0:	68 14 01 00 00       	push   0x114
c00073c5:	e8 85 76 00 00       	call   c000ea4f <malloc>
c00073ca:	83 c4 0c             	add    esp,0xc
c00073cd:	89 c3                	mov    ebx,eax
c00073cf:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c00073d5:	68 13 19 02 c0       	push   0xc0021913
c00073da:	50                   	push   eax
c00073db:	e8 52 0d 00 00       	call   c0008132 <File::File(char const*, Process*)>
c00073e0:	83 c4 10             	add    esp,0x10
c00073e3:	85 db                	test   ebx,ebx
c00073e5:	75 10                	jne    c00073f7 <KiFlushSymlinkChanges()+0x3d>
c00073e7:	83 ec 0c             	sub    esp,0xc
c00073ea:	68 31 19 02 c0       	push   0xc0021931
c00073ef:	e8 a2 79 00 00       	call   c000ed96 <KePanic(char const*)>
c00073f4:	83 c4 10             	add    esp,0x10
c00073f7:	50                   	push   eax
c00073f8:	50                   	push   eax
c00073f9:	6a 06                	push   0x6
c00073fb:	53                   	push   ebx
c00073fc:	e8 4f 0d 00 00       	call   c0008150 <File::open(FileOpenMode)>
c0007401:	83 c4 10             	add    esp,0x10
c0007404:	85 c0                	test   eax,eax
c0007406:	74 10                	je     c0007418 <KiFlushSymlinkChanges()+0x5e>
c0007408:	83 ec 0c             	sub    esp,0xc
c000740b:	68 4b 19 02 c0       	push   0xc002194b
c0007410:	e8 81 79 00 00       	call   c000ed96 <KePanic(char const*)>
c0007415:	83 c4 10             	add    esp,0x10
c0007418:	31 f6                	xor    esi,esi
c000741a:	39 35 c0 7e 02 c0    	cmp    DWORD PTR ds:0xc0027ec0,esi
c0007420:	7e 70                	jle    c0007492 <KiFlushSymlinkChanges()+0xd8>
c0007422:	83 ec 0c             	sub    esp,0xc
c0007425:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007427:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000742b:	89 f0                	mov    eax,esi
c000742d:	57                   	push   edi
c000742e:	c1 e0 08             	shl    eax,0x8
c0007431:	05 00 7f 02 c0       	add    eax,0xc0027f00
c0007436:	50                   	push   eax
c0007437:	6a 00                	push   0x0
c0007439:	68 00 01 00 00       	push   0x100
c000743e:	53                   	push   ebx
c000743f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0007442:	83 c4 20             	add    esp,0x20
c0007445:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000744d:	74 10                	je     c000745f <KiFlushSymlinkChanges()+0xa5>
c000744f:	83 ec 0c             	sub    esp,0xc
c0007452:	68 65 19 02 c0       	push   0xc0021965
c0007457:	e8 3a 79 00 00       	call   c000ed96 <KePanic(char const*)>
c000745c:	83 c4 10             	add    esp,0x10
c000745f:	83 ec 0c             	sub    esp,0xc
c0007462:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007464:	8d 14 f5 e0 7e 02 c0 	lea    edx,[esi*8-0x3ffd8120]
c000746b:	57                   	push   edi
c000746c:	52                   	push   edx
c000746d:	6a 00                	push   0x0
c000746f:	6a 08                	push   0x8
c0007471:	53                   	push   ebx
c0007472:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007475:	83 c4 20             	add    esp,0x20
c0007478:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000747d:	74 10                	je     c000748f <KiFlushSymlinkChanges()+0xd5>
c000747f:	83 ec 0c             	sub    esp,0xc
c0007482:	68 7f 19 02 c0       	push   0xc002197f
c0007487:	e8 0a 79 00 00       	call   c000ed96 <KePanic(char const*)>
c000748c:	83 c4 10             	add    esp,0x10
c000748f:	46                   	inc    esi
c0007490:	eb 88                	jmp    c000741a <KiFlushSymlinkChanges()+0x60>
c0007492:	83 ec 0c             	sub    esp,0xc
c0007495:	53                   	push   ebx
c0007496:	e8 13 0d 00 00       	call   c00081ae <File::close()>
c000749b:	83 c4 10             	add    esp,0x10
c000749e:	85 db                	test   ebx,ebx
c00074a0:	74 0c                	je     c00074ae <KiFlushSymlinkChanges()+0xf4>
c00074a2:	83 ec 0c             	sub    esp,0xc
c00074a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074a7:	53                   	push   ebx
c00074a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00074ab:	83 c4 10             	add    esp,0x10
c00074ae:	c7 05 c0 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027ec0,0x0
c00074b8:	83 c4 10             	add    esp,0x10
c00074bb:	5b                   	pop    ebx
c00074bc:	5e                   	pop    esi
c00074bd:	5f                   	pop    edi
c00074be:	c3                   	ret    

c00074bf <KiDeinitialiseSymlinks(void*)>:
c00074bf:	e9 f6 fe ff ff       	jmp    c00073ba <KiFlushSymlinkChanges()>

c00074c4 <KiGetSymlinkHash(char const*)>:
c00074c4:	53                   	push   ebx
c00074c5:	89 c3                	mov    ebx,eax
c00074c7:	83 ec 14             	sub    esp,0x14
c00074ca:	50                   	push   eax
c00074cb:	e8 a0 90 ff ff       	call   c0000570 <strlen>
c00074d0:	5a                   	pop    edx
c00074d1:	59                   	pop    ecx
c00074d2:	50                   	push   eax
c00074d3:	53                   	push   ebx
c00074d4:	e8 08 63 00 00       	call   c000d7e1 <KeCalculateCRC32(unsigned char*, int)>
c00074d9:	83 c4 18             	add    esp,0x18
c00074dc:	89 c2                	mov    edx,eax
c00074de:	5b                   	pop    ebx
c00074df:	c1 ea 10             	shr    edx,0x10
c00074e2:	31 d0                	xor    eax,edx
c00074e4:	c3                   	ret    

c00074e5 <KiCreateSymlinkID()>:
c00074e5:	55                   	push   ebp
c00074e6:	57                   	push   edi
c00074e7:	56                   	push   esi
c00074e8:	53                   	push   ebx
c00074e9:	31 db                	xor    ebx,ebx
c00074eb:	83 ec 1c             	sub    esp,0x1c
c00074ee:	e8 97 82 00 00       	call   c000f78a <KeRand()>
c00074f3:	43                   	inc    ebx
c00074f4:	8b 2d 00 a3 02 c0    	mov    ebp,DWORD PTR ds:0xc002a300
c00074fa:	31 d2                	xor    edx,edx
c00074fc:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00074ff:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0007503:	89 0d 00 a3 02 c0    	mov    DWORD PTR ds:0xc002a300,ecx
c0007509:	c1 e0 1f             	shl    eax,0x1f
c000750c:	89 d7                	mov    edi,edx
c000750e:	89 c6                	mov    esi,eax
c0007510:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0007514:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000751c:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007522:	75 10                	jne    c0007534 <KiCreateSymlinkID()+0x4f>
c0007524:	83 ec 0c             	sub    esp,0xc
c0007527:	68 99 19 02 c0       	push   0xc0021999
c000752c:	e8 65 78 00 00       	call   c000ed96 <KePanic(char const*)>
c0007531:	83 c4 10             	add    esp,0x10
c0007534:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0007538:	75 04                	jne    c000753e <KiCreateSymlinkID()+0x59>
c000753a:	39 f5                	cmp    ebp,esi
c000753c:	74 b0                	je     c00074ee <KiCreateSymlinkID()+0x9>
c000753e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007542:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007546:	31 f0                	xor    eax,esi
c0007548:	83 c4 1c             	add    esp,0x1c
c000754b:	31 fa                	xor    edx,edi
c000754d:	5b                   	pop    ebx
c000754e:	5e                   	pop    esi
c000754f:	5f                   	pop    edi
c0007550:	5d                   	pop    ebp
c0007551:	c3                   	ret    

c0007552 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007552:	53                   	push   ebx
c0007553:	83 ec 0c             	sub    esp,0xc
c0007556:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000755a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000755e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007562:	a1 c0 7e 02 c0       	mov    eax,ds:0xc0027ec0
c0007567:	68 00 01 00 00       	push   0x100
c000756c:	89 0c c5 e4 7e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd811c],ecx
c0007573:	6a 00                	push   0x0
c0007575:	89 14 c5 e0 7e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8120],edx
c000757c:	c1 e0 08             	shl    eax,0x8
c000757f:	05 00 7f 02 c0       	add    eax,0xc0027f00
c0007584:	50                   	push   eax
c0007585:	e8 66 8f ff ff       	call   c00004f0 <memset>
c000758a:	58                   	pop    eax
c000758b:	a1 c0 7e 02 c0       	mov    eax,ds:0xc0027ec0
c0007590:	5a                   	pop    edx
c0007591:	c1 e0 08             	shl    eax,0x8
c0007594:	53                   	push   ebx
c0007595:	05 00 7f 02 c0       	add    eax,0xc0027f00
c000759a:	50                   	push   eax
c000759b:	e8 a0 90 ff ff       	call   c0000640 <strcpy>
c00075a0:	89 d8                	mov    eax,ebx
c00075a2:	e8 1d ff ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c00075a7:	ba 01 00 00 00       	mov    edx,0x1
c00075ac:	0f b7 c0             	movzx  eax,ax
c00075af:	e8 d6 fd ff ff       	call   c000738a <KiSetHashInTable(unsigned short, bool)>
c00075b4:	a1 c0 7e 02 c0       	mov    eax,ds:0xc0027ec0
c00075b9:	83 c4 10             	add    esp,0x10
c00075bc:	40                   	inc    eax
c00075bd:	a3 c0 7e 02 c0       	mov    ds:0xc0027ec0,eax
c00075c2:	83 f8 03             	cmp    eax,0x3
c00075c5:	7e 09                	jle    c00075d0 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c00075c7:	83 c4 08             	add    esp,0x8
c00075ca:	5b                   	pop    ebx
c00075cb:	e9 ea fd ff ff       	jmp    c00073ba <KiFlushSymlinkChanges()>
c00075d0:	83 c4 08             	add    esp,0x8
c00075d3:	5b                   	pop    ebx
c00075d4:	c3                   	ret    

c00075d5 <KeInitialiseSymlinks()>:
c00075d5:	57                   	push   edi
c00075d6:	56                   	push   esi
c00075d7:	53                   	push   ebx
c00075d8:	81 ec 14 01 00 00    	sub    esp,0x114
c00075de:	c7 05 00 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a300,0x0
c00075e8:	68 00 20 00 00       	push   0x2000
c00075ed:	c7 05 c0 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027ec0,0x0
c00075f7:	6a 00                	push   0x0
c00075f9:	68 00 83 02 c0       	push   0xc0028300
c00075fe:	e8 ed 8e ff ff       	call   c00004f0 <memset>
c0007603:	59                   	pop    ecx
c0007604:	5b                   	pop    ebx
c0007605:	6a 00                	push   0x0
c0007607:	68 bf 74 00 c0       	push   0xc00074bf
c000760c:	e8 bd 4f 00 00       	call   c000c5ce <KeRegisterAtexit(void (*)(void*), void*)>
c0007611:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0007618:	e8 32 74 00 00       	call   c000ea4f <malloc>
c000761d:	83 c4 0c             	add    esp,0xc
c0007620:	89 c3                	mov    ebx,eax
c0007622:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0007628:	68 13 19 02 c0       	push   0xc0021913
c000762d:	50                   	push   eax
c000762e:	e8 ff 0a 00 00       	call   c0008132 <File::File(char const*, Process*)>
c0007633:	83 c4 10             	add    esp,0x10
c0007636:	85 db                	test   ebx,ebx
c0007638:	75 10                	jne    c000764a <KeInitialiseSymlinks()+0x75>
c000763a:	83 ec 0c             	sub    esp,0xc
c000763d:	68 a2 19 02 c0       	push   0xc00219a2
c0007642:	e8 4f 77 00 00       	call   c000ed96 <KePanic(char const*)>
c0007647:	83 c4 10             	add    esp,0x10
c000764a:	83 ec 0c             	sub    esp,0xc
c000764d:	53                   	push   ebx
c000764e:	e8 c1 0d 00 00       	call   c0008414 <File::exists()>
c0007653:	83 c4 10             	add    esp,0x10
c0007656:	84 c0                	test   al,al
c0007658:	75 3a                	jne    c0007694 <KeInitialiseSymlinks()+0xbf>
c000765a:	52                   	push   edx
c000765b:	52                   	push   edx
c000765c:	6a 12                	push   0x12
c000765e:	53                   	push   ebx
c000765f:	e8 ec 0a 00 00       	call   c0008150 <File::open(FileOpenMode)>
c0007664:	83 c4 10             	add    esp,0x10
c0007667:	85 c0                	test   eax,eax
c0007669:	74 10                	je     c000767b <KeInitialiseSymlinks()+0xa6>
c000766b:	83 ec 0c             	sub    esp,0xc
c000766e:	68 bf 19 02 c0       	push   0xc00219bf
c0007673:	e8 1e 77 00 00       	call   c000ed96 <KePanic(char const*)>
c0007678:	83 c4 10             	add    esp,0x10
c000767b:	83 ec 0c             	sub    esp,0xc
c000767e:	53                   	push   ebx
c000767f:	e8 2a 0b 00 00       	call   c00081ae <File::close()>
c0007684:	83 c4 10             	add    esp,0x10
c0007687:	85 db                	test   ebx,ebx
c0007689:	0f 84 9e 00 00 00    	je     c000772d <KeInitialiseSymlinks()+0x158>
c000768f:	e9 8d 00 00 00       	jmp    c0007721 <KeInitialiseSymlinks()+0x14c>
c0007694:	50                   	push   eax
c0007695:	50                   	push   eax
c0007696:	6a 01                	push   0x1
c0007698:	53                   	push   ebx
c0007699:	e8 b2 0a 00 00       	call   c0008150 <File::open(FileOpenMode)>
c000769e:	83 c4 10             	add    esp,0x10
c00076a1:	85 c0                	test   eax,eax
c00076a3:	74 10                	je     c00076b5 <KeInitialiseSymlinks()+0xe0>
c00076a5:	83 ec 0c             	sub    esp,0xc
c00076a8:	68 dc 19 02 c0       	push   0xc00219dc
c00076ad:	e8 e4 76 00 00       	call   c000ed96 <KePanic(char const*)>
c00076b2:	83 c4 10             	add    esp,0x10
c00076b5:	83 ec 0c             	sub    esp,0xc
c00076b8:	ff 05 00 a3 02 c0    	inc    DWORD PTR ds:0xc002a300
c00076be:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00076c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076c4:	57                   	push   edi
c00076c5:	8d 74 24 20          	lea    esi,[esp+0x20]
c00076c9:	56                   	push   esi
c00076ca:	6a 00                	push   0x0
c00076cc:	68 00 01 00 00       	push   0x100
c00076d1:	53                   	push   ebx
c00076d2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076d5:	83 c4 20             	add    esp,0x20
c00076d8:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00076e0:	75 33                	jne    c0007715 <KeInitialiseSymlinks()+0x140>
c00076e2:	83 ec 0c             	sub    esp,0xc
c00076e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076e7:	57                   	push   edi
c00076e8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00076ec:	52                   	push   edx
c00076ed:	6a 00                	push   0x0
c00076ef:	6a 08                	push   0x8
c00076f1:	53                   	push   ebx
c00076f2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076f5:	83 c4 20             	add    esp,0x20
c00076f8:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00076fd:	75 16                	jne    c0007715 <KeInitialiseSymlinks()+0x140>
c00076ff:	89 f0                	mov    eax,esi
c0007701:	e8 be fd ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c0007706:	ba 01 00 00 00       	mov    edx,0x1
c000770b:	0f b7 c0             	movzx  eax,ax
c000770e:	e8 77 fc ff ff       	call   c000738a <KiSetHashInTable(unsigned short, bool)>
c0007713:	eb a0                	jmp    c00076b5 <KeInitialiseSymlinks()+0xe0>
c0007715:	83 ec 0c             	sub    esp,0xc
c0007718:	53                   	push   ebx
c0007719:	e8 90 0a 00 00       	call   c00081ae <File::close()>
c000771e:	83 c4 10             	add    esp,0x10
c0007721:	83 ec 0c             	sub    esp,0xc
c0007724:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007726:	53                   	push   ebx
c0007727:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000772a:	83 c4 10             	add    esp,0x10
c000772d:	81 c4 10 01 00 00    	add    esp,0x110
c0007733:	5b                   	pop    ebx
c0007734:	5e                   	pop    esi
c0007735:	5f                   	pop    edi
c0007736:	c3                   	ret    

c0007737 <KiIsSymlinkRegistered(char const*)>:
c0007737:	55                   	push   ebp
c0007738:	57                   	push   edi
c0007739:	56                   	push   esi
c000773a:	53                   	push   ebx
c000773b:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007741:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0007748:	89 f0                	mov    eax,esi
c000774a:	e8 75 fd ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c000774f:	0f b7 c0             	movzx  eax,ax
c0007752:	e8 19 fc ff ff       	call   c0007370 <KiIsHashInTable(unsigned short)>
c0007757:	31 d2                	xor    edx,edx
c0007759:	88 c1                	mov    cl,al
c000775b:	31 c0                	xor    eax,eax
c000775d:	84 c9                	test   cl,cl
c000775f:	0f 84 31 01 00 00    	je     c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c0007765:	31 db                	xor    ebx,ebx
c0007767:	39 1d c0 7e 02 c0    	cmp    DWORD PTR ds:0xc0027ec0,ebx
c000776d:	7e 30                	jle    c000779f <KiIsSymlinkRegistered(char const*)+0x68>
c000776f:	89 d8                	mov    eax,ebx
c0007771:	51                   	push   ecx
c0007772:	c1 e0 08             	shl    eax,0x8
c0007775:	51                   	push   ecx
c0007776:	05 00 7f 02 c0       	add    eax,0xc0027f00
c000777b:	50                   	push   eax
c000777c:	56                   	push   esi
c000777d:	e8 ce 8f ff ff       	call   c0000750 <strcmp>
c0007782:	83 c4 10             	add    esp,0x10
c0007785:	85 c0                	test   eax,eax
c0007787:	75 13                	jne    c000779c <KiIsSymlinkRegistered(char const*)+0x65>
c0007789:	8b 04 dd e0 7e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd8120]
c0007790:	8b 14 dd e4 7e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd811c]
c0007797:	e9 fa 00 00 00       	jmp    c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c000779c:	43                   	inc    ebx
c000779d:	eb c8                	jmp    c0007767 <KiIsSymlinkRegistered(char const*)+0x30>
c000779f:	83 ec 0c             	sub    esp,0xc
c00077a2:	68 14 01 00 00       	push   0x114
c00077a7:	e8 a3 72 00 00       	call   c000ea4f <malloc>
c00077ac:	83 c4 0c             	add    esp,0xc
c00077af:	89 c3                	mov    ebx,eax
c00077b1:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c00077b7:	68 13 19 02 c0       	push   0xc0021913
c00077bc:	50                   	push   eax
c00077bd:	e8 70 09 00 00       	call   c0008132 <File::File(char const*, Process*)>
c00077c2:	83 c4 10             	add    esp,0x10
c00077c5:	85 db                	test   ebx,ebx
c00077c7:	75 12                	jne    c00077db <KiIsSymlinkRegistered(char const*)+0xa4>
c00077c9:	83 ec 0c             	sub    esp,0xc
c00077cc:	68 f7 19 02 c0       	push   0xc00219f7
c00077d1:	e8 c0 75 00 00       	call   c000ed96 <KePanic(char const*)>
c00077d6:	83 c4 10             	add    esp,0x10
c00077d9:	eb 10                	jmp    c00077eb <KiIsSymlinkRegistered(char const*)+0xb4>
c00077db:	83 ec 0c             	sub    esp,0xc
c00077de:	53                   	push   ebx
c00077df:	e8 30 0c 00 00       	call   c0008414 <File::exists()>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	84 c0                	test   al,al
c00077e9:	74 de                	je     c00077c9 <KiIsSymlinkRegistered(char const*)+0x92>
c00077eb:	52                   	push   edx
c00077ec:	52                   	push   edx
c00077ed:	6a 01                	push   0x1
c00077ef:	53                   	push   ebx
c00077f0:	e8 5b 09 00 00       	call   c0008150 <File::open(FileOpenMode)>
c00077f5:	83 c4 10             	add    esp,0x10
c00077f8:	85 c0                	test   eax,eax
c00077fa:	74 10                	je     c000780c <KiIsSymlinkRegistered(char const*)+0xd5>
c00077fc:	83 ec 0c             	sub    esp,0xc
c00077ff:	68 12 1a 02 c0       	push   0xc0021a12
c0007804:	e8 8d 75 00 00       	call   c000ed96 <KePanic(char const*)>
c0007809:	83 c4 10             	add    esp,0x10
c000780c:	83 ec 0c             	sub    esp,0xc
c000780f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007811:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0007815:	55                   	push   ebp
c0007816:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000781a:	57                   	push   edi
c000781b:	6a 00                	push   0x0
c000781d:	68 00 01 00 00       	push   0x100
c0007822:	53                   	push   ebx
c0007823:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007826:	83 c4 20             	add    esp,0x20
c0007829:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007831:	75 4b                	jne    c000787e <KiIsSymlinkRegistered(char const*)+0x147>
c0007833:	83 ec 0c             	sub    esp,0xc
c0007836:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007838:	55                   	push   ebp
c0007839:	8d 54 24 18          	lea    edx,[esp+0x18]
c000783d:	52                   	push   edx
c000783e:	6a 00                	push   0x0
c0007840:	6a 08                	push   0x8
c0007842:	53                   	push   ebx
c0007843:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007846:	83 c4 20             	add    esp,0x20
c0007849:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000784e:	75 2e                	jne    c000787e <KiIsSymlinkRegistered(char const*)+0x147>
c0007850:	50                   	push   eax
c0007851:	50                   	push   eax
c0007852:	57                   	push   edi
c0007853:	56                   	push   esi
c0007854:	e8 f7 8e ff ff       	call   c0000750 <strcmp>
c0007859:	83 c4 10             	add    esp,0x10
c000785c:	85 c0                	test   eax,eax
c000785e:	75 ac                	jne    c000780c <KiIsSymlinkRegistered(char const*)+0xd5>
c0007860:	83 ec 0c             	sub    esp,0xc
c0007863:	53                   	push   ebx
c0007864:	e8 45 09 00 00       	call   c00081ae <File::close()>
c0007869:	8b 03                	mov    eax,DWORD PTR [ebx]
c000786b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000786e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007871:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007875:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007879:	83 c4 10             	add    esp,0x10
c000787c:	eb 18                	jmp    c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c000787e:	83 ec 0c             	sub    esp,0xc
c0007881:	53                   	push   ebx
c0007882:	e8 27 09 00 00       	call   c00081ae <File::close()>
c0007887:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007889:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000788c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000788f:	83 c4 10             	add    esp,0x10
c0007892:	31 c0                	xor    eax,eax
c0007894:	31 d2                	xor    edx,edx
c0007896:	81 c4 1c 01 00 00    	add    esp,0x11c
c000789c:	5b                   	pop    ebx
c000789d:	5e                   	pop    esi
c000789e:	5f                   	pop    edi
c000789f:	5d                   	pop    ebp
c00078a0:	c3                   	ret    

c00078a1 <KeDereferenceSymlink(char const*, char*)>:
c00078a1:	55                   	push   ebp
c00078a2:	57                   	push   edi
c00078a3:	56                   	push   esi
c00078a4:	53                   	push   ebx
c00078a5:	83 ec 48             	sub    esp,0x48
c00078a8:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00078ac:	56                   	push   esi
c00078ad:	e8 85 fe ff ff       	call   c0007737 <KiIsSymlinkRegistered(char const*)>
c00078b2:	83 c4 10             	add    esp,0x10
c00078b5:	89 c7                	mov    edi,eax
c00078b7:	89 d0                	mov    eax,edx
c00078b9:	09 f8                	or     eax,edi
c00078bb:	75 07                	jne    c00078c4 <KeDereferenceSymlink(char const*, char*)+0x23>
c00078bd:	31 c0                	xor    eax,eax
c00078bf:	e9 7c 01 00 00       	jmp    c0007a40 <KeDereferenceSymlink(char const*, char*)+0x19f>
c00078c4:	83 ec 0c             	sub    esp,0xc
c00078c7:	89 d5                	mov    ebp,edx
c00078c9:	68 14 01 00 00       	push   0x114
c00078ce:	e8 7c 71 00 00       	call   c000ea4f <malloc>
c00078d3:	83 c4 0c             	add    esp,0xc
c00078d6:	89 c3                	mov    ebx,eax
c00078d8:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c00078de:	56                   	push   esi
c00078df:	50                   	push   eax
c00078e0:	e8 4d 08 00 00       	call   c0008132 <File::File(char const*, Process*)>
c00078e5:	83 c4 10             	add    esp,0x10
c00078e8:	85 db                	test   ebx,ebx
c00078ea:	0f 84 32 01 00 00    	je     c0007a22 <KeDereferenceSymlink(char const*, char*)+0x181>
c00078f0:	56                   	push   esi
c00078f1:	56                   	push   esi
c00078f2:	6a 01                	push   0x1
c00078f4:	53                   	push   ebx
c00078f5:	e8 56 08 00 00       	call   c0008150 <File::open(FileOpenMode)>
c00078fa:	83 c4 10             	add    esp,0x10
c00078fd:	85 c0                	test   eax,eax
c00078ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007901:	74 09                	je     c000790c <KeDereferenceSymlink(char const*, char*)+0x6b>
c0007903:	83 ec 0c             	sub    esp,0xc
c0007906:	53                   	push   ebx
c0007907:	e9 10 01 00 00       	jmp    c0007a1c <KeDereferenceSymlink(char const*, char*)+0x17b>
c000790c:	83 ec 0c             	sub    esp,0xc
c000790f:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007913:	56                   	push   esi
c0007914:	8d 54 24 37          	lea    edx,[esp+0x37]
c0007918:	52                   	push   edx
c0007919:	6a 00                	push   0x0
c000791b:	6a 08                	push   0x8
c000791d:	53                   	push   ebx
c000791e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007921:	83 c4 20             	add    esp,0x20
c0007924:	85 c0                	test   eax,eax
c0007926:	0f 85 e2 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c000792c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007931:	0f 85 d7 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007937:	83 ec 0c             	sub    esp,0xc
c000793a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000793c:	56                   	push   esi
c000793d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007941:	52                   	push   edx
c0007942:	6a 00                	push   0x0
c0007944:	6a 08                	push   0x8
c0007946:	53                   	push   ebx
c0007947:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000794a:	83 c4 20             	add    esp,0x20
c000794d:	85 c0                	test   eax,eax
c000794f:	0f 85 b9 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007955:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000795a:	0f 85 ae 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007960:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0007964:	0f 85 53 ff ff ff    	jne    c00078bd <KeDereferenceSymlink(char const*, char*)+0x1c>
c000796a:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000796e:	0f 85 49 ff ff ff    	jne    c00078bd <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007974:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000797c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0007984:	51                   	push   ecx
c0007985:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0007989:	50                   	push   eax
c000798a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000798e:	50                   	push   eax
c000798f:	53                   	push   ebx
c0007990:	e8 bd 0a 00 00       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0007995:	83 c4 10             	add    esp,0x10
c0007998:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000799d:	75 6f                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c000799f:	31 c9                	xor    ecx,ecx
c00079a1:	bf 0f 00 00 00       	mov    edi,0xf
c00079a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00079aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079ae:	39 c7                	cmp    edi,eax
c00079b0:	89 cf                	mov    edi,ecx
c00079b2:	19 d7                	sbb    edi,edx
c00079b4:	73 58                	jae    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079b6:	83 c0 f0             	add    eax,0xfffffff0
c00079b9:	bf ff 00 00 00       	mov    edi,0xff
c00079be:	83 d2 ff             	adc    edx,0xffffffff
c00079c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079c5:	39 c7                	cmp    edi,eax
c00079c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079cb:	19 d1                	sbb    ecx,edx
c00079cd:	72 53                	jb     c0007a22 <KeDereferenceSymlink(char const*, char*)+0x181>
c00079cf:	40                   	inc    eax
c00079d0:	52                   	push   edx
c00079d1:	50                   	push   eax
c00079d2:	6a 00                	push   0x0
c00079d4:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00079d8:	e8 13 8b ff ff       	call   c00004f0 <memset>
c00079dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079df:	89 34 24             	mov    DWORD PTR [esp],esi
c00079e2:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00079e6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079ee:	53                   	push   ebx
c00079ef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079f2:	83 c4 20             	add    esp,0x20
c00079f5:	85 c0                	test   eax,eax
c00079f7:	75 15                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079fd:	89 c7                	mov    edi,eax
c00079ff:	c1 ff 1f             	sar    edi,0x1f
c0007a02:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0007a06:	75 06                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a08:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0007a0c:	74 19                	je     c0007a27 <KeDereferenceSymlink(char const*, char*)+0x186>
c0007a0e:	83 ec 0c             	sub    esp,0xc
c0007a11:	53                   	push   ebx
c0007a12:	e8 97 07 00 00       	call   c00081ae <File::close()>
c0007a17:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a1c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a1f:	83 c4 10             	add    esp,0x10
c0007a22:	83 c8 ff             	or     eax,0xffffffff
c0007a25:	eb 19                	jmp    c0007a40 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a27:	83 ec 0c             	sub    esp,0xc
c0007a2a:	53                   	push   ebx
c0007a2b:	e8 7e 07 00 00       	call   c00081ae <File::close()>
c0007a30:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a35:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a38:	83 c4 10             	add    esp,0x10
c0007a3b:	b8 01 00 00 00       	mov    eax,0x1
c0007a40:	83 c4 3c             	add    esp,0x3c
c0007a43:	5b                   	pop    ebx
c0007a44:	5e                   	pop    esi
c0007a45:	5f                   	pop    edi
c0007a46:	5d                   	pop    ebp
c0007a47:	c3                   	ret    

c0007a48 <KeCreateSymlink(char const*, char const*)>:
c0007a48:	55                   	push   ebp
c0007a49:	57                   	push   edi
c0007a4a:	56                   	push   esi
c0007a4b:	53                   	push   ebx
c0007a4c:	83 ec 38             	sub    esp,0x38
c0007a4f:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a53:	68 14 01 00 00       	push   0x114
c0007a58:	e8 f2 6f 00 00       	call   c000ea4f <malloc>
c0007a5d:	6a 00                	push   0x0
c0007a5f:	89 c3                	mov    ebx,eax
c0007a61:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0007a67:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a6b:	50                   	push   eax
c0007a6c:	e8 c3 05 00 00       	call   c0008034 <File::File(char const*, Process*, bool)>
c0007a71:	83 c4 20             	add    esp,0x20
c0007a74:	b8 01 00 00 00       	mov    eax,0x1
c0007a79:	85 db                	test   ebx,ebx
c0007a7b:	0f 84 fb 00 00 00    	je     c0007b7c <KeCreateSymlink(char const*, char const*)+0x134>
c0007a81:	52                   	push   edx
c0007a82:	52                   	push   edx
c0007a83:	6a 12                	push   0x12
c0007a85:	53                   	push   ebx
c0007a86:	e8 c5 06 00 00       	call   c0008150 <File::open(FileOpenMode)>
c0007a8b:	83 c4 10             	add    esp,0x10
c0007a8e:	85 c0                	test   eax,eax
c0007a90:	74 0b                	je     c0007a9d <KeCreateSymlink(char const*, char const*)+0x55>
c0007a92:	83 ec 0c             	sub    esp,0xc
c0007a95:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a97:	53                   	push   ebx
c0007a98:	e9 d4 00 00 00       	jmp    c0007b71 <KeCreateSymlink(char const*, char const*)+0x129>
c0007a9d:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007aa1:	be 2d 1a 02 c0       	mov    esi,0xc0021a2d
c0007aa6:	b9 09 00 00 00       	mov    ecx,0x9
c0007aab:	fc                   	cld    
c0007aac:	83 ec 0c             	sub    esp,0xc
c0007aaf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007ab1:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007ab5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ab7:	56                   	push   esi
c0007ab8:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007abc:	52                   	push   edx
c0007abd:	6a 00                	push   0x0
c0007abf:	6a 08                	push   0x8
c0007ac1:	53                   	push   ebx
c0007ac2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007ac5:	83 c4 20             	add    esp,0x20
c0007ac8:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007acd:	0f 85 90 00 00 00    	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ad3:	85 c0                	test   eax,eax
c0007ad5:	0f 85 88 00 00 00    	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007adb:	e8 05 fa ff ff       	call   c00074e5 <KiCreateSymlinkID()>
c0007ae0:	83 ec 0c             	sub    esp,0xc
c0007ae3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007ae7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007aeb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007aed:	56                   	push   esi
c0007aee:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007af2:	52                   	push   edx
c0007af3:	6a 00                	push   0x0
c0007af5:	6a 08                	push   0x8
c0007af7:	53                   	push   ebx
c0007af8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007afb:	83 c4 20             	add    esp,0x20
c0007afe:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b03:	75 5e                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b05:	85 c0                	test   eax,eax
c0007b07:	75 5a                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b09:	83 ec 0c             	sub    esp,0xc
c0007b0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b0e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007b11:	55                   	push   ebp
c0007b12:	e8 59 8a ff ff       	call   c0000570 <strlen>
c0007b17:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b1a:	31 d2                	xor    edx,edx
c0007b1c:	55                   	push   ebp
c0007b1d:	52                   	push   edx
c0007b1e:	50                   	push   eax
c0007b1f:	53                   	push   ebx
c0007b20:	ff d7                	call   edi
c0007b22:	83 c4 14             	add    esp,0x14
c0007b25:	89 c6                	mov    esi,eax
c0007b27:	55                   	push   ebp
c0007b28:	e8 43 8a ff ff       	call   c0000570 <strlen>
c0007b2d:	83 c4 10             	add    esp,0x10
c0007b30:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b34:	75 2d                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b36:	85 f6                	test   esi,esi
c0007b38:	75 29                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b3a:	50                   	push   eax
c0007b3b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b3f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b43:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b47:	e8 06 fa ff ff       	call   c0007552 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b4f:	e8 5a 06 00 00       	call   c00081ae <File::close()>
c0007b54:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b59:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b5c:	83 c4 10             	add    esp,0x10
c0007b5f:	31 c0                	xor    eax,eax
c0007b61:	eb 19                	jmp    c0007b7c <KeCreateSymlink(char const*, char const*)+0x134>
c0007b63:	83 ec 0c             	sub    esp,0xc
c0007b66:	53                   	push   ebx
c0007b67:	e8 42 06 00 00       	call   c00081ae <File::close()>
c0007b6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b71:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b74:	83 c4 10             	add    esp,0x10
c0007b77:	b8 01 00 00 00       	mov    eax,0x1
c0007b7c:	83 c4 2c             	add    esp,0x2c
c0007b7f:	5b                   	pop    ebx
c0007b80:	5e                   	pop    esi
c0007b81:	5f                   	pop    edi
c0007b82:	5d                   	pop    ebp
c0007b83:	c3                   	ret    

c0007b84 <File::read(unsigned long long, void*, int*)>:
c0007b84:	53                   	push   ebx
c0007b85:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007b89:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007b8d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007b94:	83 f8 19             	cmp    eax,0x19
c0007b97:	77 35                	ja     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007b99:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0007ba0:	85 c0                	test   eax,eax
c0007ba2:	74 2a                	je     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007ba4:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007baa:	85 c0                	test   eax,eax
c0007bac:	74 20                	je     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007bae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bb2:	74 21                	je     c0007bd5 <File::read(unsigned long long, void*, int*)+0x51>
c0007bb4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bb6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bba:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007bc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007bc8:	5b                   	pop    ebx
c0007bc9:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007bcc:	ff e0                	jmp    eax
c0007bce:	b8 0b 00 00 00       	mov    eax,0xb
c0007bd3:	eb 05                	jmp    c0007bda <File::read(unsigned long long, void*, int*)+0x56>
c0007bd5:	b8 05 00 00 00       	mov    eax,0x5
c0007bda:	5b                   	pop    ebx
c0007bdb:	c3                   	ret    

c0007bdc <File::write(unsigned long long, void*, int*)>:
c0007bdc:	53                   	push   ebx
c0007bdd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007be1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007be5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bec:	83 f8 19             	cmp    eax,0x19
c0007bef:	77 35                	ja     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007bf1:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0007bf8:	85 c0                	test   eax,eax
c0007bfa:	74 2a                	je     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007bfc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c02:	85 c0                	test   eax,eax
c0007c04:	74 20                	je     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c06:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c0a:	74 21                	je     c0007c2d <File::write(unsigned long long, void*, int*)+0x51>
c0007c0c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c0e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c12:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c20:	5b                   	pop    ebx
c0007c21:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c24:	ff e0                	jmp    eax
c0007c26:	b8 0b 00 00 00       	mov    eax,0xb
c0007c2b:	eb 05                	jmp    c0007c32 <File::write(unsigned long long, void*, int*)+0x56>
c0007c2d:	b8 05 00 00 00       	mov    eax,0x5
c0007c32:	5b                   	pop    ebx
c0007c33:	c3                   	ret    

c0007c34 <Directory::read(unsigned long long, void*, int*)>:
c0007c34:	53                   	push   ebx
c0007c35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c3d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c44:	83 f8 19             	cmp    eax,0x19
c0007c47:	77 35                	ja     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c49:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0007c50:	85 c0                	test   eax,eax
c0007c52:	74 2a                	je     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c54:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c5a:	85 c0                	test   eax,eax
c0007c5c:	74 20                	je     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c5e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c62:	74 21                	je     c0007c85 <Directory::read(unsigned long long, void*, int*)+0x51>
c0007c64:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c66:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c6a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c78:	5b                   	pop    ebx
c0007c79:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007c7c:	ff e0                	jmp    eax
c0007c7e:	b8 0b 00 00 00       	mov    eax,0xb
c0007c83:	eb 05                	jmp    c0007c8a <Directory::read(unsigned long long, void*, int*)+0x56>
c0007c85:	b8 05 00 00 00       	mov    eax,0x5
c0007c8a:	5b                   	pop    ebx
c0007c8b:	c3                   	ret    

c0007c8c <Directory::write(unsigned long long, void*, int*)>:
c0007c8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c90:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007c97:	b8 0b 00 00 00       	mov    eax,0xb
c0007c9c:	83 fa 19             	cmp    edx,0x19
c0007c9f:	77 18                	ja     c0007cb9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007ca1:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c0007ca8:	85 d2                	test   edx,edx
c0007caa:	74 0d                	je     c0007cb9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007cac:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007cb3:	19 c0                	sbb    eax,eax
c0007cb5:	83 e0 0a             	and    eax,0xa
c0007cb8:	40                   	inc    eax
c0007cb9:	c3                   	ret    

c0007cba <File::isAtty()>:
c0007cba:	31 c0                	xor    eax,eax
c0007cbc:	c3                   	ret    
c0007cbd:	90                   	nop

c0007cbe <Directory::isAtty()>:
c0007cbe:	31 c0                	xor    eax,eax
c0007cc0:	c3                   	ret    
c0007cc1:	90                   	nop

c0007cc2 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007cc2:	b8 0a 00 00 00       	mov    eax,0xa
c0007cc7:	c3                   	ret    

c0007cc8 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007cc8:	b8 0a 00 00 00       	mov    eax,0xa
c0007ccd:	c3                   	ret    

c0007cce <Filesystem::allocateSwapfile(char const*, int)>:
c0007cce:	31 c0                	xor    eax,eax
c0007cd0:	31 d2                	xor    edx,edx
c0007cd2:	c3                   	ret    
c0007cd3:	90                   	nop

c0007cd4 <File::~File()>:
c0007cd4:	83 ec 0c             	sub    esp,0xc
c0007cd7:	ba 04 1b 02 c0       	mov    edx,0xc0021b04
c0007cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ce0:	89 10                	mov    DWORD PTR [eax],edx
c0007ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ce6:	83 ec 0c             	sub    esp,0xc
c0007ce9:	50                   	push   eax
c0007cea:	e8 1f a2 00 00       	call   c0011f0e <UnixFile::~UnixFile()>
c0007cef:	83 c4 10             	add    esp,0x10
c0007cf2:	90                   	nop
c0007cf3:	83 c4 0c             	add    esp,0xc
c0007cf6:	c3                   	ret    
c0007cf7:	90                   	nop

c0007cf8 <File::~File()>:
c0007cf8:	83 ec 0c             	sub    esp,0xc
c0007cfb:	83 ec 0c             	sub    esp,0xc
c0007cfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d02:	e8 cd ff ff ff       	call   c0007cd4 <File::~File()>
c0007d07:	83 c4 10             	add    esp,0x10
c0007d0a:	83 ec 08             	sub    esp,0x8
c0007d0d:	68 14 01 00 00       	push   0x114
c0007d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d16:	e8 39 4a 00 00       	call   c000c754 <operator delete(void*, unsigned long)>
c0007d1b:	83 c4 10             	add    esp,0x10
c0007d1e:	83 c4 0c             	add    esp,0xc
c0007d21:	c3                   	ret    

c0007d22 <Directory::~Directory()>:
c0007d22:	83 ec 0c             	sub    esp,0xc
c0007d25:	ba 20 1b 02 c0       	mov    edx,0xc0021b20
c0007d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d2e:	89 10                	mov    DWORD PTR [eax],edx
c0007d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d34:	83 ec 0c             	sub    esp,0xc
c0007d37:	50                   	push   eax
c0007d38:	e8 d1 a1 00 00       	call   c0011f0e <UnixFile::~UnixFile()>
c0007d3d:	83 c4 10             	add    esp,0x10
c0007d40:	90                   	nop
c0007d41:	83 c4 0c             	add    esp,0xc
c0007d44:	c3                   	ret    
c0007d45:	90                   	nop

c0007d46 <Directory::~Directory()>:
c0007d46:	83 ec 0c             	sub    esp,0xc
c0007d49:	83 ec 0c             	sub    esp,0xc
c0007d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d50:	e8 cd ff ff ff       	call   c0007d22 <Directory::~Directory()>
c0007d55:	83 c4 10             	add    esp,0x10
c0007d58:	83 ec 08             	sub    esp,0x8
c0007d5b:	68 14 01 00 00       	push   0x114
c0007d60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d64:	e8 eb 49 00 00       	call   c000c754 <operator delete(void*, unsigned long)>
c0007d69:	83 c4 10             	add    esp,0x10
c0007d6c:	83 c4 0c             	add    esp,0xc
c0007d6f:	c3                   	ret    

c0007d70 <Filesystem::Filesystem()>:
c0007d70:	ba 98 1a 02 c0       	mov    edx,0xc0021a98
c0007d75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d79:	89 10                	mov    DWORD PTR [eax],edx
c0007d7b:	8b 15 04 a3 02 c0    	mov    edx,DWORD PTR ds:0xc002a304
c0007d81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d85:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007d88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d8c:	a3 04 a3 02 c0       	mov    ds:0xc002a304,eax
c0007d91:	90                   	nop
c0007d92:	c3                   	ret    
c0007d93:	90                   	nop

c0007d94 <Filesystem::~Filesystem()>:
c0007d94:	ba 98 1a 02 c0       	mov    edx,0xc0021a98
c0007d99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d9d:	89 10                	mov    DWORD PTR [eax],edx
c0007d9f:	90                   	nop
c0007da0:	c3                   	ret    
c0007da1:	90                   	nop

c0007da2 <Filesystem::~Filesystem()>:
c0007da2:	83 ec 0c             	sub    esp,0xc
c0007da5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007da9:	e8 e6 ff ff ff       	call   c0007d94 <Filesystem::~Filesystem()>
c0007dae:	83 c4 04             	add    esp,0x4
c0007db1:	83 ec 08             	sub    esp,0x8
c0007db4:	6a 08                	push   0x8
c0007db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dba:	e8 95 49 00 00       	call   c000c754 <operator delete(void*, unsigned long)>
c0007dbf:	83 c4 10             	add    esp,0x10
c0007dc2:	83 c4 0c             	add    esp,0xc
c0007dc5:	c3                   	ret    

c0007dc6 <Fs::getcwd(Process*, char*, int)>:
c0007dc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007dca:	31 c0                	xor    eax,eax
c0007dcc:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007dcf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007dd3:	7d 15                	jge    c0007dea <Fs::getcwd(Process*, char*, int)+0x24>
c0007dd5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007dd9:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007de0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007de3:	84 c9                	test   cl,cl
c0007de5:	74 06                	je     c0007ded <Fs::getcwd(Process*, char*, int)+0x27>
c0007de7:	40                   	inc    eax
c0007de8:	eb e2                	jmp    c0007dcc <Fs::getcwd(Process*, char*, int)+0x6>
c0007dea:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007ded:	31 c0                	xor    eax,eax
c0007def:	c3                   	ret    

c0007df0 <Fs::initVFS()>:
c0007df0:	83 ec 18             	sub    esp,0x18
c0007df3:	6a 08                	push   0x8
c0007df5:	e8 55 6c 00 00       	call   c000ea4f <malloc>
c0007dfa:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dfd:	e8 ee 29 01 00       	call   c001a7f0 <FAT::FAT()>
c0007e02:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007e09:	e8 41 6c 00 00       	call   c000ea4f <malloc>
c0007e0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e11:	e8 06 39 01 00       	call   c001b71c <ISO9660::ISO9660()>
c0007e16:	83 c4 1c             	add    esp,0x1c
c0007e19:	c3                   	ret    

c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e1a:	55                   	push   ebp
c0007e1b:	57                   	push   edi
c0007e1c:	56                   	push   esi
c0007e1d:	53                   	push   ebx
c0007e1e:	81 ec 10 04 00 00    	sub    esp,0x410
c0007e24:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c0007e2b:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c0007e32:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c0007e3a:	68 00 04 00 00       	push   0x400
c0007e3f:	6a 00                	push   0x0
c0007e41:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0007e45:	57                   	push   edi
c0007e46:	e8 a5 86 ff ff       	call   c00004f0 <memset>
c0007e4b:	83 c4 10             	add    esp,0x10
c0007e4e:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c0007e52:	75 0b                	jne    c0007e5f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c0007e54:	50                   	push   eax
c0007e55:	50                   	push   eax
c0007e56:	55                   	push   ebp
c0007e57:	57                   	push   edi
c0007e58:	e8 e3 87 ff ff       	call   c0000640 <strcpy>
c0007e5d:	eb 51                	jmp    c0007eb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c0007e5f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007e63:	83 f8 5c             	cmp    eax,0x5c
c0007e66:	74 05                	je     c0007e6d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c0007e68:	83 f8 2f             	cmp    eax,0x2f
c0007e6b:	75 1e                	jne    c0007e8b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c0007e6d:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0007e74:	8a 00                	mov    al,BYTE PTR [eax]
c0007e76:	3c 60                	cmp    al,0x60
c0007e78:	7e 03                	jle    c0007e7d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c0007e7a:	83 e8 20             	sub    eax,0x20
c0007e7d:	88 04 24             	mov    BYTE PTR [esp],al
c0007e80:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007e87:	50                   	push   eax
c0007e88:	50                   	push   eax
c0007e89:	eb 1e                	jmp    c0007ea9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c0007e8b:	50                   	push   eax
c0007e8c:	50                   	push   eax
c0007e8d:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c0007e94:	57                   	push   edi
c0007e95:	e8 a6 87 ff ff       	call   c0000640 <strcpy>
c0007e9a:	58                   	pop    eax
c0007e9b:	5a                   	pop    edx
c0007e9c:	68 d6 36 02 c0       	push   0xc00236d6
c0007ea1:	57                   	push   edi
c0007ea2:	e8 99 89 ff ff       	call   c0000840 <strcat>
c0007ea7:	59                   	pop    ecx
c0007ea8:	58                   	pop    eax
c0007ea9:	55                   	push   ebp
c0007eaa:	57                   	push   edi
c0007eab:	e8 90 89 ff ff       	call   c0000840 <strcat>
c0007eb0:	83 c4 10             	add    esp,0x10
c0007eb3:	8a 04 24             	mov    al,BYTE PTR [esp]
c0007eb6:	3c 60                	cmp    al,0x60
c0007eb8:	7e 03                	jle    c0007ebd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c0007eba:	83 e8 20             	sub    eax,0x20
c0007ebd:	88 04 24             	mov    BYTE PTR [esp],al
c0007ec0:	88 06                	mov    BYTE PTR [esi],al
c0007ec2:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007ec9:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c0007ecf:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c0007ed3:	bf 03 00 00 00       	mov    edi,0x3
c0007ed8:	b8 03 00 00 00       	mov    eax,0x3
c0007edd:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c0007ee1:	89 e9                	mov    ecx,ebp
c0007ee3:	85 ed                	test   ebp,ebp
c0007ee5:	0f 84 97 00 00 00    	je     c0007f82 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c0007eeb:	8d 57 01             	lea    edx,[edi+0x1]
c0007eee:	83 fd 5c             	cmp    ebp,0x5c
c0007ef1:	74 05                	je     c0007ef8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c0007ef3:	83 fd 2f             	cmp    ebp,0x2f
c0007ef6:	75 12                	jne    c0007f0a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007ef8:	89 c5                	mov    ebp,eax
c0007efa:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007eff:	74 09                	je     c0007f0a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f01:	40                   	inc    eax
c0007f02:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c0007f06:	89 d7                	mov    edi,edx
c0007f08:	eb d3                	jmp    c0007edd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007f0a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0007f0f:	0f be e9             	movsx  ebp,cl
c0007f12:	75 5e                	jne    c0007f72 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f14:	83 fd 2e             	cmp    ebp,0x2e
c0007f17:	75 59                	jne    c0007f72 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f19:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c0007f1d:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c0007f22:	74 18                	je     c0007f3c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c0007f24:	83 fd 2e             	cmp    ebp,0x2e
c0007f27:	74 53                	je     c0007f7c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f29:	89 fa                	mov    edx,edi
c0007f2b:	42                   	inc    edx
c0007f2c:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f30:	83 f9 2f             	cmp    ecx,0x2f
c0007f33:	74 f6                	je     c0007f2b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f35:	83 f9 5c             	cmp    ecx,0x5c
c0007f38:	74 f1                	je     c0007f2b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f3a:	eb ca                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f3c:	83 fd 2e             	cmp    ebp,0x2e
c0007f3f:	74 3b                	je     c0007f7c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f41:	83 f8 03             	cmp    eax,0x3
c0007f44:	74 c0                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f46:	42                   	inc    edx
c0007f47:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f4b:	83 f9 5c             	cmp    ecx,0x5c
c0007f4e:	74 f6                	je     c0007f46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007f50:	83 f9 2f             	cmp    ecx,0x2f
c0007f53:	74 f1                	je     c0007f46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007f55:	48                   	dec    eax
c0007f56:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007f5a:	75 06                	jne    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007f5c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f60:	eb f3                	jmp    c0007f55 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c0007f62:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007f66:	74 07                	je     c0007f6f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c0007f68:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f6c:	48                   	dec    eax
c0007f6d:	eb f3                	jmp    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007f6f:	40                   	inc    eax
c0007f70:	eb 94                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f72:	83 fd 5c             	cmp    ebp,0x5c
c0007f75:	74 8f                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f77:	83 fd 2f             	cmp    ebp,0x2f
c0007f7a:	74 8a                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f7c:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c0007f7f:	40                   	inc    eax
c0007f80:	eb 84                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f82:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f86:	83 ec 0c             	sub    esp,0xc
c0007f89:	56                   	push   esi
c0007f8a:	e8 e1 85 ff ff       	call   c0000570 <strlen>
c0007f8f:	83 c4 10             	add    esp,0x10
c0007f92:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c0007f97:	74 17                	je     c0007fb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007f99:	83 ec 0c             	sub    esp,0xc
c0007f9c:	56                   	push   esi
c0007f9d:	e8 ce 85 ff ff       	call   c0000570 <strlen>
c0007fa2:	83 c4 10             	add    esp,0x10
c0007fa5:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007faa:	74 04                	je     c0007fb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007fac:	31 ff                	xor    edi,edi
c0007fae:	eb 5c                	jmp    c000800c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0007fb0:	83 ec 0c             	sub    esp,0xc
c0007fb3:	56                   	push   esi
c0007fb4:	e8 b7 85 ff ff       	call   c0000570 <strlen>
c0007fb9:	83 c4 10             	add    esp,0x10
c0007fbc:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c0007fc1:	74 e9                	je     c0007fac <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c0007fc3:	83 ec 0c             	sub    esp,0xc
c0007fc6:	56                   	push   esi
c0007fc7:	e8 a4 85 ff ff       	call   c0000570 <strlen>
c0007fcc:	83 c4 10             	add    esp,0x10
c0007fcf:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c0007fd4:	eb b0                	jmp    c0007f86 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c0007fd6:	52                   	push   edx
c0007fd7:	52                   	push   edx
c0007fd8:	56                   	push   esi
c0007fd9:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c0007fdd:	55                   	push   ebp
c0007fde:	e8 5d 86 ff ff       	call   c0000640 <strcpy>
c0007fe3:	59                   	pop    ecx
c0007fe4:	58                   	pop    eax
c0007fe5:	56                   	push   esi
c0007fe6:	55                   	push   ebp
c0007fe7:	e8 b5 f8 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c0007fec:	83 c4 10             	add    esp,0x10
c0007fef:	48                   	dec    eax
c0007ff0:	75 37                	jne    c0008029 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0007ff2:	50                   	push   eax
c0007ff3:	56                   	push   esi
c0007ff4:	55                   	push   ebp
c0007ff5:	68 36 1a 02 c0       	push   0xc0021a36
c0007ffa:	e8 65 ef ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007fff:	83 c4 10             	add    esp,0x10
c0008002:	8d 47 01             	lea    eax,[edi+0x1]
c0008005:	83 ff 14             	cmp    edi,0x14
c0008008:	74 08                	je     c0008012 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c000800a:	89 c7                	mov    edi,eax
c000800c:	85 db                	test   ebx,ebx
c000800e:	75 c6                	jne    c0007fd6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c0008010:	eb 17                	jmp    c0008029 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0008012:	83 ec 0c             	sub    esp,0xc
c0008015:	bf 15 00 00 00       	mov    edi,0x15
c000801a:	68 51 1a 02 c0       	push   0xc0021a51
c000801f:	e8 72 6d 00 00       	call   c000ed96 <KePanic(char const*)>
c0008024:	83 c4 10             	add    esp,0x10
c0008027:	eb e3                	jmp    c000800c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008029:	81 c4 0c 04 00 00    	add    esp,0x40c
c000802f:	5b                   	pop    ebx
c0008030:	5e                   	pop    esi
c0008031:	5f                   	pop    edi
c0008032:	5d                   	pop    ebp
c0008033:	c3                   	ret    

c0008034 <File::File(char const*, Process*, bool)>:
c0008034:	83 ec 1c             	sub    esp,0x1c
c0008037:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000803b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000803f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008043:	83 ec 08             	sub    esp,0x8
c0008046:	6a 00                	push   0x0
c0008048:	50                   	push   eax
c0008049:	e8 da 9c 00 00       	call   c0011d28 <UnixFile::UnixFile(int)>
c000804e:	83 c4 10             	add    esp,0x10
c0008051:	ba 04 1b 02 c0       	mov    edx,0xc0021b04
c0008056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000805a:	89 10                	mov    DWORD PTR [eax],edx
c000805c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0008061:	85 c0                	test   eax,eax
c0008063:	74 0f                	je     c0008074 <File::File(char const*, Process*, bool)+0x40>
c0008065:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c000806a:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000806e:	74 04                	je     c0008074 <File::File(char const*, Process*, bool)+0x40>
c0008070:	b0 01                	mov    al,0x1
c0008072:	eb 02                	jmp    c0008076 <File::File(char const*, Process*, bool)+0x42>
c0008074:	b0 00                	mov    al,0x0
c0008076:	0f b6 c0             	movzx  eax,al
c0008079:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000807d:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008083:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008087:	83 c2 0d             	add    edx,0xd
c000808a:	50                   	push   eax
c000808b:	51                   	push   ecx
c000808c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008090:	52                   	push   edx
c0008091:	e8 84 fd ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008096:	83 c4 10             	add    esp,0x10
c0008099:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000809d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080a0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080a4:	83 c2 0d             	add    edx,0xd
c00080a7:	83 ec 04             	sub    esp,0x4
c00080aa:	50                   	push   eax
c00080ab:	52                   	push   edx
c00080ac:	68 77 1a 02 c0       	push   0xc0021a77
c00080b1:	e8 ae ee ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00080b6:	83 c4 10             	add    esp,0x10
c00080b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080bd:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00080c0:	83 e8 41             	sub    eax,0x41
c00080c3:	88 c2                	mov    dl,al
c00080c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080c9:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00080cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080d3:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00080d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080db:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080e1:	0f b6 c0             	movzx  eax,al
c00080e4:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c00080eb:	85 c0                	test   eax,eax
c00080ed:	74 3e                	je     c000812d <File::File(char const*, Process*, bool)+0xf9>
c00080ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080f3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080f9:	0f b6 c0             	movzx  eax,al
c00080fc:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0008103:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008109:	85 c0                	test   eax,eax
c000810b:	75 20                	jne    c000812d <File::File(char const*, Process*, bool)+0xf9>
c000810d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008111:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008117:	0f b6 c0             	movzx  eax,al
c000811a:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0008121:	83 ec 0c             	sub    esp,0xc
c0008124:	50                   	push   eax
c0008125:	e8 cc 1e 00 00       	call   c0009ff6 <LogicalDisk::mount()>
c000812a:	83 c4 10             	add    esp,0x10
c000812d:	90                   	nop
c000812e:	83 c4 1c             	add    esp,0x1c
c0008131:	c3                   	ret    

c0008132 <File::File(char const*, Process*)>:
c0008132:	83 ec 0c             	sub    esp,0xc
c0008135:	6a 01                	push   0x1
c0008137:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000813b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000813f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008143:	e8 ec fe ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0008148:	83 c4 10             	add    esp,0x10
c000814b:	90                   	nop
c000814c:	83 c4 0c             	add    esp,0xc
c000814f:	c3                   	ret    

c0008150 <File::open(FileOpenMode)>:
c0008150:	53                   	push   ebx
c0008151:	b8 0b 00 00 00       	mov    eax,0xb
c0008156:	83 ec 08             	sub    esp,0x8
c0008159:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000815d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008164:	83 fa 19             	cmp    edx,0x19
c0008167:	77 40                	ja     c00081a9 <File::open(FileOpenMode)+0x59>
c0008169:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c0008170:	85 d2                	test   edx,edx
c0008172:	74 35                	je     c00081a9 <File::open(FileOpenMode)+0x59>
c0008174:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000817a:	85 d2                	test   edx,edx
c000817c:	74 2b                	je     c00081a9 <File::open(FileOpenMode)+0x59>
c000817e:	b8 06 00 00 00       	mov    eax,0x6
c0008183:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008187:	75 20                	jne    c00081a9 <File::open(FileOpenMode)+0x59>
c0008189:	8b 02                	mov    eax,DWORD PTR [edx]
c000818b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008191:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008195:	51                   	push   ecx
c0008196:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008199:	51                   	push   ecx
c000819a:	52                   	push   edx
c000819b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000819e:	83 c4 10             	add    esp,0x10
c00081a1:	85 c0                	test   eax,eax
c00081a3:	75 04                	jne    c00081a9 <File::open(FileOpenMode)+0x59>
c00081a5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00081a9:	83 c4 08             	add    esp,0x8
c00081ac:	5b                   	pop    ebx
c00081ad:	c3                   	ret    

c00081ae <File::close()>:
c00081ae:	53                   	push   ebx
c00081af:	b8 0b 00 00 00       	mov    eax,0xb
c00081b4:	83 ec 08             	sub    esp,0x8
c00081b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00081bb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00081c2:	83 f9 19             	cmp    ecx,0x19
c00081c5:	77 41                	ja     c0008208 <File::close()+0x5a>
c00081c7:	8b 1c 8d 80 a7 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd5880]
c00081ce:	85 db                	test   ebx,ebx
c00081d0:	74 36                	je     c0008208 <File::close()+0x5a>
c00081d2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00081d9:	74 2d                	je     c0008208 <File::close()+0x5a>
c00081db:	b8 05 00 00 00       	mov    eax,0x5
c00081e0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00081e4:	74 22                	je     c0008208 <File::close()+0x5a>
c00081e6:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00081ea:	8b 04 8d 80 a7 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd5880]
c00081f1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00081f7:	53                   	push   ebx
c00081f8:	53                   	push   ebx
c00081f9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00081fb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008201:	50                   	push   eax
c0008202:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c0008205:	83 c4 10             	add    esp,0x10
c0008208:	83 c4 08             	add    esp,0x8
c000820b:	5b                   	pop    ebx
c000820c:	c3                   	ret    
c000820d:	90                   	nop

c000820e <File::seek(unsigned long long)>:
c000820e:	56                   	push   esi
c000820f:	53                   	push   ebx
c0008210:	b8 0b 00 00 00       	mov    eax,0xb
c0008215:	51                   	push   ecx
c0008216:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000821a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000821e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008225:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008229:	83 fa 19             	cmp    edx,0x19
c000822c:	77 31                	ja     c000825f <File::seek(unsigned long long)+0x51>
c000822e:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c0008235:	85 d2                	test   edx,edx
c0008237:	74 26                	je     c000825f <File::seek(unsigned long long)+0x51>
c0008239:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000823f:	85 d2                	test   edx,edx
c0008241:	74 1c                	je     c000825f <File::seek(unsigned long long)+0x51>
c0008243:	b8 05 00 00 00       	mov    eax,0x5
c0008248:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000824c:	74 11                	je     c000825f <File::seek(unsigned long long)+0x51>
c000824e:	8b 02                	mov    eax,DWORD PTR [edx]
c0008250:	53                   	push   ebx
c0008251:	51                   	push   ecx
c0008252:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008258:	52                   	push   edx
c0008259:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000825c:	83 c4 10             	add    esp,0x10
c000825f:	5a                   	pop    edx
c0008260:	5b                   	pop    ebx
c0008261:	5e                   	pop    esi
c0008262:	c3                   	ret    
c0008263:	90                   	nop

c0008264 <File::truncate(unsigned long long)>:
c0008264:	56                   	push   esi
c0008265:	53                   	push   ebx
c0008266:	b8 0b 00 00 00       	mov    eax,0xb
c000826b:	51                   	push   ecx
c000826c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008270:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008274:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000827b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000827f:	83 fa 19             	cmp    edx,0x19
c0008282:	77 31                	ja     c00082b5 <File::truncate(unsigned long long)+0x51>
c0008284:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c000828b:	85 d2                	test   edx,edx
c000828d:	74 26                	je     c00082b5 <File::truncate(unsigned long long)+0x51>
c000828f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008295:	85 d2                	test   edx,edx
c0008297:	74 1c                	je     c00082b5 <File::truncate(unsigned long long)+0x51>
c0008299:	b8 05 00 00 00       	mov    eax,0x5
c000829e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082a2:	74 11                	je     c00082b5 <File::truncate(unsigned long long)+0x51>
c00082a4:	8b 02                	mov    eax,DWORD PTR [edx]
c00082a6:	53                   	push   ebx
c00082a7:	51                   	push   ecx
c00082a8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082ae:	52                   	push   edx
c00082af:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00082b2:	83 c4 10             	add    esp,0x10
c00082b5:	5a                   	pop    edx
c00082b6:	5b                   	pop    ebx
c00082b7:	5e                   	pop    esi
c00082b8:	c3                   	ret    
c00082b9:	90                   	nop

c00082ba <File::tell(unsigned long long*)>:
c00082ba:	83 ec 0c             	sub    esp,0xc
c00082bd:	b8 0b 00 00 00       	mov    eax,0xb
c00082c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00082c6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00082cd:	83 fa 19             	cmp    edx,0x19
c00082d0:	77 34                	ja     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082d2:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c00082d9:	85 d2                	test   edx,edx
c00082db:	74 29                	je     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082dd:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082e3:	85 d2                	test   edx,edx
c00082e5:	74 1f                	je     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082e7:	b8 05 00 00 00       	mov    eax,0x5
c00082ec:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00082f0:	74 14                	je     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082f2:	50                   	push   eax
c00082f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00082f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00082f9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00082ff:	52                   	push   edx
c0008300:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0008303:	83 c4 10             	add    esp,0x10
c0008306:	83 c4 0c             	add    esp,0xc
c0008309:	c3                   	ret    

c000830a <File::rewind()>:
c000830a:	83 ec 10             	sub    esp,0x10
c000830d:	6a 00                	push   0x0
c000830f:	6a 00                	push   0x0
c0008311:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008315:	e8 f4 fe ff ff       	call   c000820e <File::seek(unsigned long long)>
c000831a:	83 c4 1c             	add    esp,0x1c
c000831d:	c3                   	ret    

c000831e <File::unlink()>:
c000831e:	83 ec 0c             	sub    esp,0xc
c0008321:	b8 0b 00 00 00       	mov    eax,0xb
c0008326:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000832a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008331:	83 f9 19             	cmp    ecx,0x19
c0008334:	77 2f                	ja     c0008365 <File::unlink()+0x47>
c0008336:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c000833d:	85 c9                	test   ecx,ecx
c000833f:	74 24                	je     c0008365 <File::unlink()+0x47>
c0008341:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008347:	85 c9                	test   ecx,ecx
c0008349:	74 1a                	je     c0008365 <File::unlink()+0x47>
c000834b:	b8 06 00 00 00       	mov    eax,0x6
c0008350:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008354:	75 0f                	jne    c0008365 <File::unlink()+0x47>
c0008356:	83 c2 0d             	add    edx,0xd
c0008359:	50                   	push   eax
c000835a:	50                   	push   eax
c000835b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000835d:	52                   	push   edx
c000835e:	51                   	push   ecx
c000835f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008362:	83 c4 10             	add    esp,0x10
c0008365:	83 c4 0c             	add    esp,0xc
c0008368:	c3                   	ret    
c0008369:	90                   	nop

c000836a <File::rename(char const*)>:
c000836a:	83 ec 0c             	sub    esp,0xc
c000836d:	b8 0b 00 00 00       	mov    eax,0xb
c0008372:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008376:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000837d:	83 f9 19             	cmp    ecx,0x19
c0008380:	77 32                	ja     c00083b4 <File::rename(char const*)+0x4a>
c0008382:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008389:	85 c9                	test   ecx,ecx
c000838b:	74 27                	je     c00083b4 <File::rename(char const*)+0x4a>
c000838d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008393:	85 c9                	test   ecx,ecx
c0008395:	74 1d                	je     c00083b4 <File::rename(char const*)+0x4a>
c0008397:	b8 06 00 00 00       	mov    eax,0x6
c000839c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083a0:	75 12                	jne    c00083b4 <File::rename(char const*)+0x4a>
c00083a2:	83 c2 0d             	add    edx,0xd
c00083a5:	50                   	push   eax
c00083a6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083ac:	52                   	push   edx
c00083ad:	51                   	push   ecx
c00083ae:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00083b1:	83 c4 10             	add    esp,0x10
c00083b4:	83 c4 0c             	add    esp,0xc
c00083b7:	c3                   	ret    

c00083b8 <File::chfatattr(unsigned char, unsigned char)>:
c00083b8:	57                   	push   edi
c00083b9:	b8 0b 00 00 00       	mov    eax,0xb
c00083be:	56                   	push   esi
c00083bf:	53                   	push   ebx
c00083c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083c4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00083c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083cf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00083d3:	83 f9 19             	cmp    ecx,0x19
c00083d6:	77 37                	ja     c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083d8:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00083df:	85 c9                	test   ecx,ecx
c00083e1:	74 2c                	je     c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083e3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083e9:	85 c9                	test   ecx,ecx
c00083eb:	74 22                	je     c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083ed:	b8 06 00 00 00       	mov    eax,0x6
c00083f2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083f6:	75 17                	jne    c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083f8:	8b 39                	mov    edi,DWORD PTR [ecx]
c00083fa:	89 f0                	mov    eax,esi
c00083fc:	83 c2 0d             	add    edx,0xd
c00083ff:	0f b6 f0             	movzx  esi,al
c0008402:	0f b6 db             	movzx  ebx,bl
c0008405:	56                   	push   esi
c0008406:	53                   	push   ebx
c0008407:	52                   	push   edx
c0008408:	51                   	push   ecx
c0008409:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000840c:	83 c4 10             	add    esp,0x10
c000840f:	5b                   	pop    ebx
c0008410:	5e                   	pop    esi
c0008411:	5f                   	pop    edi
c0008412:	c3                   	ret    
c0008413:	90                   	nop

c0008414 <File::exists()>:
c0008414:	83 ec 0c             	sub    esp,0xc
c0008417:	31 c0                	xor    eax,eax
c0008419:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000841d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008424:	83 f9 19             	cmp    ecx,0x19
c0008427:	77 24                	ja     c000844d <File::exists()+0x39>
c0008429:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008430:	85 c9                	test   ecx,ecx
c0008432:	74 19                	je     c000844d <File::exists()+0x39>
c0008434:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000843a:	85 c9                	test   ecx,ecx
c000843c:	74 0f                	je     c000844d <File::exists()+0x39>
c000843e:	83 c2 0d             	add    edx,0xd
c0008441:	50                   	push   eax
c0008442:	50                   	push   eax
c0008443:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008445:	52                   	push   edx
c0008446:	51                   	push   ecx
c0008447:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000844a:	83 c4 10             	add    esp,0x10
c000844d:	83 c4 0c             	add    esp,0xc
c0008450:	c3                   	ret    
c0008451:	90                   	nop

c0008452 <File::stat(unsigned long long*, bool*)>:
c0008452:	56                   	push   esi
c0008453:	53                   	push   ebx
c0008454:	50                   	push   eax
c0008455:	b8 0b 00 00 00       	mov    eax,0xb
c000845a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000845e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008462:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008469:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000846d:	83 f9 19             	cmp    ecx,0x19
c0008470:	77 3d                	ja     c00084af <File::stat(unsigned long long*, bool*)+0x5d>
c0008472:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008479:	85 c9                	test   ecx,ecx
c000847b:	74 32                	je     c00084af <File::stat(unsigned long long*, bool*)+0x5d>
c000847d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008483:	85 c9                	test   ecx,ecx
c0008485:	74 28                	je     c00084af <File::stat(unsigned long long*, bool*)+0x5d>
c0008487:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008489:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000848d:	74 13                	je     c00084a2 <File::stat(unsigned long long*, bool*)+0x50>
c000848f:	83 ec 04             	sub    esp,0x4
c0008492:	56                   	push   esi
c0008493:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008499:	51                   	push   ecx
c000849a:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000849d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00084a0:	eb 0a                	jmp    c00084ac <File::stat(unsigned long long*, bool*)+0x5a>
c00084a2:	53                   	push   ebx
c00084a3:	83 c2 0d             	add    edx,0xd
c00084a6:	56                   	push   esi
c00084a7:	52                   	push   edx
c00084a8:	51                   	push   ecx
c00084a9:	ff 50 34             	call   DWORD PTR [eax+0x34]
c00084ac:	83 c4 10             	add    esp,0x10
c00084af:	5a                   	pop    edx
c00084b0:	5b                   	pop    ebx
c00084b1:	5e                   	pop    esi
c00084b2:	c3                   	ret    

c00084b3 <Fs::setcwd(Process*, char*)>:
c00084b3:	55                   	push   ebp
c00084b4:	57                   	push   edi
c00084b5:	56                   	push   esi
c00084b6:	53                   	push   ebx
c00084b7:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00084bd:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c00084c4:	6a 00                	push   0x0
c00084c6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00084cc:	57                   	push   edi
c00084cd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00084d4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00084d8:	56                   	push   esi
c00084d9:	e8 3c f9 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00084de:	89 34 24             	mov    DWORD PTR [esp],esi
c00084e1:	e8 8a 80 ff ff       	call   c0000570 <strlen>
c00084e6:	83 c4 10             	add    esp,0x10
c00084e9:	83 f8 02             	cmp    eax,0x2
c00084ec:	77 15                	ja     c0008503 <Fs::setcwd(Process*, char*)+0x50>
c00084ee:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c00084f3:	83 eb 41             	sub    ebx,0x41
c00084f6:	8b 04 9d 80 a7 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5880]
c00084fd:	85 c0                	test   eax,eax
c00084ff:	75 1c                	jne    c000851d <Fs::setcwd(Process*, char*)+0x6a>
c0008501:	eb 2f                	jmp    c0008532 <Fs::setcwd(Process*, char*)+0x7f>
c0008503:	83 ec 0c             	sub    esp,0xc
c0008506:	56                   	push   esi
c0008507:	e8 64 80 ff ff       	call   c0000570 <strlen>
c000850c:	83 c4 10             	add    esp,0x10
c000850f:	83 f8 03             	cmp    eax,0x3
c0008512:	75 57                	jne    c000856b <Fs::setcwd(Process*, char*)+0xb8>
c0008514:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0008519:	75 50                	jne    c000856b <Fs::setcwd(Process*, char*)+0xb8>
c000851b:	eb d1                	jmp    c00084ee <Fs::setcwd(Process*, char*)+0x3b>
c000851d:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c0008524:	75 0c                	jne    c0008532 <Fs::setcwd(Process*, char*)+0x7f>
c0008526:	83 ec 0c             	sub    esp,0xc
c0008529:	50                   	push   eax
c000852a:	e8 c7 1a 00 00       	call   c0009ff6 <LogicalDisk::mount()>
c000852f:	83 c4 10             	add    esp,0x10
c0008532:	b8 03 00 00 00       	mov    eax,0x3
c0008537:	83 fb 19             	cmp    ebx,0x19
c000853a:	0f 87 c6 00 00 00    	ja     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c0008540:	8b 14 9d 80 a7 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd5880]
c0008547:	b8 05 00 00 00       	mov    eax,0x5
c000854c:	85 d2                	test   edx,edx
c000854e:	0f 84 b2 00 00 00    	je     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c0008554:	b8 06 00 00 00       	mov    eax,0x6
c0008559:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008560:	0f 85 92 00 00 00    	jne    c00085f8 <Fs::setcwd(Process*, char*)+0x145>
c0008566:	e9 9b 00 00 00       	jmp    c0008606 <Fs::setcwd(Process*, char*)+0x153>
c000856b:	83 ec 0c             	sub    esp,0xc
c000856e:	68 14 01 00 00       	push   0x114
c0008573:	e8 d7 64 00 00       	call   c000ea4f <malloc>
c0008578:	83 c4 0c             	add    esp,0xc
c000857b:	89 c3                	mov    ebx,eax
c000857d:	55                   	push   ebp
c000857e:	56                   	push   esi
c000857f:	50                   	push   eax
c0008580:	e8 ad fb ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0008585:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000858a:	83 c4 0c             	add    esp,0xc
c000858d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0008591:	50                   	push   eax
c0008592:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008596:	50                   	push   eax
c0008597:	53                   	push   ebx
c0008598:	e8 b5 fe ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c000859d:	83 c4 10             	add    esp,0x10
c00085a0:	83 f8 02             	cmp    eax,0x2
c00085a3:	74 27                	je     c00085cc <Fs::setcwd(Process*, char*)+0x119>
c00085a5:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00085aa:	75 1c                	jne    c00085c8 <Fs::setcwd(Process*, char*)+0x115>
c00085ac:	b8 02 00 00 00       	mov    eax,0x2
c00085b1:	85 db                	test   ebx,ebx
c00085b3:	74 51                	je     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085b5:	83 ec 0c             	sub    esp,0xc
c00085b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085ba:	53                   	push   ebx
c00085bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085be:	83 c4 10             	add    esp,0x10
c00085c1:	b8 02 00 00 00       	mov    eax,0x2
c00085c6:	eb 3e                	jmp    c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085c8:	85 c0                	test   eax,eax
c00085ca:	74 1c                	je     c00085e8 <Fs::setcwd(Process*, char*)+0x135>
c00085cc:	b8 01 00 00 00       	mov    eax,0x1
c00085d1:	85 db                	test   ebx,ebx
c00085d3:	74 31                	je     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085d5:	83 ec 0c             	sub    esp,0xc
c00085d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085da:	53                   	push   ebx
c00085db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085de:	83 c4 10             	add    esp,0x10
c00085e1:	b8 01 00 00 00       	mov    eax,0x1
c00085e6:	eb 1e                	jmp    c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085e8:	85 db                	test   ebx,ebx
c00085ea:	74 0c                	je     c00085f8 <Fs::setcwd(Process*, char*)+0x145>
c00085ec:	83 ec 0c             	sub    esp,0xc
c00085ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085f1:	53                   	push   ebx
c00085f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085f5:	83 c4 10             	add    esp,0x10
c00085f8:	50                   	push   eax
c00085f9:	50                   	push   eax
c00085fa:	56                   	push   esi
c00085fb:	57                   	push   edi
c00085fc:	e8 3f 80 ff ff       	call   c0000640 <strcpy>
c0008601:	83 c4 10             	add    esp,0x10
c0008604:	31 c0                	xor    eax,eax
c0008606:	81 c4 1c 02 00 00    	add    esp,0x21c
c000860c:	5b                   	pop    ebx
c000860d:	5e                   	pop    esi
c000860e:	5f                   	pop    edi
c000860f:	5d                   	pop    ebp
c0008610:	c3                   	ret    
c0008611:	90                   	nop

c0008612 <Directory::Directory(char const*, Process*)>:
c0008612:	83 ec 0c             	sub    esp,0xc
c0008615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008619:	83 ec 08             	sub    esp,0x8
c000861c:	6a 00                	push   0x0
c000861e:	50                   	push   eax
c000861f:	e8 04 97 00 00       	call   c0011d28 <UnixFile::UnixFile(int)>
c0008624:	83 c4 10             	add    esp,0x10
c0008627:	ba 20 1b 02 c0       	mov    edx,0xc0021b20
c000862c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008630:	89 10                	mov    DWORD PTR [eax],edx
c0008632:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0008637:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000863b:	0f 95 c0             	setne  al
c000863e:	0f b6 c0             	movzx  eax,al
c0008641:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008645:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000864b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000864f:	83 c2 0d             	add    edx,0xd
c0008652:	50                   	push   eax
c0008653:	51                   	push   ecx
c0008654:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008658:	52                   	push   edx
c0008659:	e8 bc f7 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000865e:	83 c4 10             	add    esp,0x10
c0008661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008665:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008668:	83 e8 41             	sub    eax,0x41
c000866b:	88 c2                	mov    dl,al
c000866d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008671:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000867b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000867f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008683:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008689:	0f b6 c0             	movzx  eax,al
c000868c:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0008693:	85 c0                	test   eax,eax
c0008695:	74 3e                	je     c00086d5 <Directory::Directory(char const*, Process*)+0xc3>
c0008697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000869b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086a1:	0f b6 c0             	movzx  eax,al
c00086a4:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c00086ab:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00086b1:	85 c0                	test   eax,eax
c00086b3:	75 20                	jne    c00086d5 <Directory::Directory(char const*, Process*)+0xc3>
c00086b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086b9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086bf:	0f b6 c0             	movzx  eax,al
c00086c2:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c00086c9:	83 ec 0c             	sub    esp,0xc
c00086cc:	50                   	push   eax
c00086cd:	e8 24 19 00 00       	call   c0009ff6 <LogicalDisk::mount()>
c00086d2:	83 c4 10             	add    esp,0x10
c00086d5:	90                   	nop
c00086d6:	83 c4 0c             	add    esp,0xc
c00086d9:	c3                   	ret    

c00086da <Directory::open()>:
c00086da:	53                   	push   ebx
c00086db:	b8 0b 00 00 00       	mov    eax,0xb
c00086e0:	83 ec 08             	sub    esp,0x8
c00086e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00086e7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00086ee:	83 fa 19             	cmp    edx,0x19
c00086f1:	77 3d                	ja     c0008730 <Directory::open()+0x56>
c00086f3:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c00086fa:	85 d2                	test   edx,edx
c00086fc:	74 32                	je     c0008730 <Directory::open()+0x56>
c00086fe:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008704:	85 d2                	test   edx,edx
c0008706:	74 28                	je     c0008730 <Directory::open()+0x56>
c0008708:	b8 06 00 00 00       	mov    eax,0x6
c000870d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008711:	75 1d                	jne    c0008730 <Directory::open()+0x56>
c0008713:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008719:	50                   	push   eax
c000871a:	8b 02                	mov    eax,DWORD PTR [edx]
c000871c:	51                   	push   ecx
c000871d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008720:	51                   	push   ecx
c0008721:	52                   	push   edx
c0008722:	ff 50 50             	call   DWORD PTR [eax+0x50]
c0008725:	83 c4 10             	add    esp,0x10
c0008728:	85 c0                	test   eax,eax
c000872a:	75 04                	jne    c0008730 <Directory::open()+0x56>
c000872c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008730:	83 c4 08             	add    esp,0x8
c0008733:	5b                   	pop    ebx
c0008734:	c3                   	ret    
c0008735:	90                   	nop

c0008736 <Directory::close()>:
c0008736:	53                   	push   ebx
c0008737:	b8 0b 00 00 00       	mov    eax,0xb
c000873c:	83 ec 08             	sub    esp,0x8
c000873f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008743:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000874a:	83 f9 19             	cmp    ecx,0x19
c000874d:	77 41                	ja     c0008790 <Directory::close()+0x5a>
c000874f:	8b 1c 8d 80 a7 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd5880]
c0008756:	85 db                	test   ebx,ebx
c0008758:	74 36                	je     c0008790 <Directory::close()+0x5a>
c000875a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008761:	74 2d                	je     c0008790 <Directory::close()+0x5a>
c0008763:	b8 05 00 00 00       	mov    eax,0x5
c0008768:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000876c:	74 22                	je     c0008790 <Directory::close()+0x5a>
c000876e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008772:	8b 04 8d 80 a7 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd5880]
c0008779:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000877f:	53                   	push   ebx
c0008780:	53                   	push   ebx
c0008781:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008783:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008789:	50                   	push   eax
c000878a:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000878d:	83 c4 10             	add    esp,0x10
c0008790:	83 c4 08             	add    esp,0x8
c0008793:	5b                   	pop    ebx
c0008794:	c3                   	ret    
c0008795:	90                   	nop

c0008796 <Directory::unlink()>:
c0008796:	83 ec 0c             	sub    esp,0xc
c0008799:	b8 0b 00 00 00       	mov    eax,0xb
c000879e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087a2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087a9:	83 f9 19             	cmp    ecx,0x19
c00087ac:	77 2f                	ja     c00087dd <Directory::unlink()+0x47>
c00087ae:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00087b5:	85 c9                	test   ecx,ecx
c00087b7:	74 24                	je     c00087dd <Directory::unlink()+0x47>
c00087b9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00087bf:	85 c9                	test   ecx,ecx
c00087c1:	74 1a                	je     c00087dd <Directory::unlink()+0x47>
c00087c3:	b8 06 00 00 00       	mov    eax,0x6
c00087c8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087cc:	75 0f                	jne    c00087dd <Directory::unlink()+0x47>
c00087ce:	83 c2 0d             	add    edx,0xd
c00087d1:	50                   	push   eax
c00087d2:	50                   	push   eax
c00087d3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00087d5:	52                   	push   edx
c00087d6:	51                   	push   ecx
c00087d7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00087da:	83 c4 10             	add    esp,0x10
c00087dd:	83 c4 0c             	add    esp,0xc
c00087e0:	c3                   	ret    
c00087e1:	90                   	nop

c00087e2 <Directory::rename(char const*)>:
c00087e2:	83 ec 0c             	sub    esp,0xc
c00087e5:	b8 0b 00 00 00       	mov    eax,0xb
c00087ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087ee:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087f5:	83 f9 19             	cmp    ecx,0x19
c00087f8:	77 32                	ja     c000882c <Directory::rename(char const*)+0x4a>
c00087fa:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008801:	85 c9                	test   ecx,ecx
c0008803:	74 27                	je     c000882c <Directory::rename(char const*)+0x4a>
c0008805:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000880b:	85 c9                	test   ecx,ecx
c000880d:	74 1d                	je     c000882c <Directory::rename(char const*)+0x4a>
c000880f:	b8 06 00 00 00       	mov    eax,0x6
c0008814:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008818:	75 12                	jne    c000882c <Directory::rename(char const*)+0x4a>
c000881a:	83 c2 0d             	add    edx,0xd
c000881d:	50                   	push   eax
c000881e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008820:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008824:	52                   	push   edx
c0008825:	51                   	push   ecx
c0008826:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008829:	83 c4 10             	add    esp,0x10
c000882c:	83 c4 0c             	add    esp,0xc
c000882f:	c3                   	ret    

c0008830 <Directory::exists()>:
c0008830:	83 ec 0c             	sub    esp,0xc
c0008833:	31 c0                	xor    eax,eax
c0008835:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008839:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008840:	83 f9 19             	cmp    ecx,0x19
c0008843:	77 24                	ja     c0008869 <Directory::exists()+0x39>
c0008845:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c000884c:	85 c9                	test   ecx,ecx
c000884e:	74 19                	je     c0008869 <Directory::exists()+0x39>
c0008850:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008856:	85 c9                	test   ecx,ecx
c0008858:	74 0f                	je     c0008869 <Directory::exists()+0x39>
c000885a:	83 c2 0d             	add    edx,0xd
c000885d:	50                   	push   eax
c000885e:	50                   	push   eax
c000885f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008861:	52                   	push   edx
c0008862:	51                   	push   ecx
c0008863:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008866:	83 c4 10             	add    esp,0x10
c0008869:	83 c4 0c             	add    esp,0xc
c000886c:	c3                   	ret    
c000886d:	90                   	nop

c000886e <Directory::read(dirent*)>:
c000886e:	83 ec 1c             	sub    esp,0x1c
c0008871:	b8 0b 00 00 00       	mov    eax,0xb
c0008876:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000887a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008881:	83 f9 19             	cmp    ecx,0x19
c0008884:	77 30                	ja     c00088b6 <Directory::read(dirent*)+0x48>
c0008886:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c000888d:	85 c9                	test   ecx,ecx
c000888f:	74 25                	je     c00088b6 <Directory::read(dirent*)+0x48>
c0008891:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c0008898:	74 1c                	je     c00088b6 <Directory::read(dirent*)+0x48>
c000889a:	83 ec 0c             	sub    esp,0xc
c000889d:	8b 02                	mov    eax,DWORD PTR [edx]
c000889f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00088a3:	51                   	push   ecx
c00088a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00088a8:	6a 00                	push   0x0
c00088aa:	68 10 01 00 00       	push   0x110
c00088af:	52                   	push   edx
c00088b0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00088b3:	83 c4 20             	add    esp,0x20
c00088b6:	83 c4 1c             	add    esp,0x1c
c00088b9:	c3                   	ret    

c00088ba <Directory::create()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	b8 0b 00 00 00       	mov    eax,0xb
c00088c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088cd:	83 f9 19             	cmp    ecx,0x19
c00088d0:	77 2f                	ja     c0008901 <Directory::create()+0x47>
c00088d2:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00088d9:	85 c9                	test   ecx,ecx
c00088db:	74 24                	je     c0008901 <Directory::create()+0x47>
c00088dd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088e3:	85 c9                	test   ecx,ecx
c00088e5:	74 1a                	je     c0008901 <Directory::create()+0x47>
c00088e7:	b8 06 00 00 00       	mov    eax,0x6
c00088ec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00088f0:	75 0f                	jne    c0008901 <Directory::create()+0x47>
c00088f2:	83 c2 0d             	add    edx,0xd
c00088f5:	50                   	push   eax
c00088f6:	50                   	push   eax
c00088f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088f9:	52                   	push   edx
c00088fa:	51                   	push   ecx
c00088fb:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00088fe:	83 c4 10             	add    esp,0x10
c0008901:	83 c4 0c             	add    esp,0xc
c0008904:	c3                   	ret    
c0008905:	90                   	nop

c0008906 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0008906:	b8 0a 00 00 00       	mov    eax,0xa
c000890b:	c3                   	ret    

c000890c <Bus::Bus(char const*)>:
c000890c:	83 ec 0c             	sub    esp,0xc
c000890f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891a:	50                   	push   eax
c000891b:	e8 a4 08 00 00       	call   c00091c4 <Device::Device(char const*)>
c0008920:	83 c4 10             	add    esp,0x10
c0008923:	ba 3c 1b 02 c0       	mov    edx,0xc0021b3c
c0008928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892c:	89 10                	mov    DWORD PTR [eax],edx
c000892e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008932:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000893c:	90                   	nop
c000893d:	83 c4 0c             	add    esp,0xc
c0008940:	c3                   	ret    
c0008941:	90                   	nop
c0008942:	66 90                	xchg   ax,ax

c0008944 <Bus::~Bus()>:
c0008944:	83 ec 0c             	sub    esp,0xc
c0008947:	ba 3c 1b 02 c0       	mov    edx,0xc0021b3c
c000894c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008950:	89 10                	mov    DWORD PTR [eax],edx
c0008952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008956:	83 ec 0c             	sub    esp,0xc
c0008959:	50                   	push   eax
c000895a:	e8 05 06 00 00       	call   c0008f64 <Device::~Device()>
c000895f:	83 c4 10             	add    esp,0x10
c0008962:	90                   	nop
c0008963:	83 c4 0c             	add    esp,0xc
c0008966:	c3                   	ret    
c0008967:	90                   	nop

c0008968 <Bus::~Bus()>:
c0008968:	83 ec 0c             	sub    esp,0xc
c000896b:	83 ec 0c             	sub    esp,0xc
c000896e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008972:	e8 cd ff ff ff       	call   c0008944 <Bus::~Bus()>
c0008977:	83 c4 10             	add    esp,0x10
c000897a:	83 ec 08             	sub    esp,0x8
c000897d:	68 58 01 00 00       	push   0x158
c0008982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008986:	e8 c9 3d 00 00       	call   c000c754 <operator delete(void*, unsigned long)>
c000898b:	83 c4 10             	add    esp,0x10
c000898e:	83 c4 0c             	add    esp,0xc
c0008991:	c3                   	ret    

c0008992 <KeBeepThread(void*)>:
c0008992:	83 ec 0c             	sub    esp,0xc
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c00089a0:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c00089a7:	75 01                	jne    c00089aa <KeBeepThread(void*)+0x18>
c00089a9:	fb                   	sti    
c00089aa:	83 ec 0c             	sub    esp,0xc
c00089ad:	6b c0 0a             	imul   eax,eax,0xa
c00089b0:	50                   	push   eax
c00089b1:	e8 3e d0 00 00       	call   c00159f4 <milliTenthSleep(unsigned int)>
c00089b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00089bd:	e8 99 00 01 00       	call   c0018a5b <HalMakeBeep(int)>
c00089c2:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00089ca:	83 c4 1c             	add    esp,0x1c
c00089cd:	e9 ea ce 00 00       	jmp    c00158bc <blockTask(TaskState)>

c00089d2 <KeBeep(int, int, bool)>:
c00089d2:	56                   	push   esi
c00089d3:	53                   	push   ebx
c00089d4:	83 ec 10             	sub    esp,0x10
c00089d7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089db:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e3:	e8 73 00 01 00       	call   c0018a5b <HalMakeBeep(int)>
c00089e8:	83 c4 10             	add    esp,0x10
c00089eb:	89 f0                	mov    eax,esi
c00089ed:	84 c0                	test   al,al
c00089ef:	74 1e                	je     c0008a0f <KeBeep(int, int, bool)+0x3d>
c00089f1:	83 ec 0c             	sub    esp,0xc
c00089f4:	6b db 0a             	imul   ebx,ebx,0xa
c00089f7:	53                   	push   ebx
c00089f8:	e8 f7 cf 00 00       	call   c00159f4 <milliTenthSleep(unsigned int)>
c00089fd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a05:	83 c4 14             	add    esp,0x14
c0008a08:	5b                   	pop    ebx
c0008a09:	5e                   	pop    esi
c0008a0a:	e9 4c 00 01 00       	jmp    c0018a5b <HalMakeBeep(int)>
c0008a0f:	68 e6 00 00 00       	push   0xe6
c0008a14:	53                   	push   ebx
c0008a15:	68 92 89 00 c0       	push   0xc0008992
c0008a1a:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0008a20:	e8 87 cb 00 00       	call   c00155ac <Process::createThread(void (*)(void*), void*, int)>
c0008a25:	83 c4 14             	add    esp,0x14
c0008a28:	5b                   	pop    ebx
c0008a29:	5e                   	pop    esi
c0008a2a:	c3                   	ret    
c0008a2b:	90                   	nop

c0008a2c <KeLoadClockSettings()>:
c0008a2c:	57                   	push   edi
c0008a2d:	56                   	push   esi
c0008a2e:	53                   	push   ebx
c0008a2f:	81 ec 6c 02 00 00    	sub    esp,0x26c
c0008a35:	c6 44 24 14 00       	mov    BYTE PTR [esp+0x14],0x0
c0008a3a:	68 60 1b 02 c0       	push   0xc0021b60
c0008a3f:	e8 64 3d 00 00       	call   c000c7a8 <CmOpen(char const*)>
c0008a44:	59                   	pop    ecx
c0008a45:	89 c3                	mov    ebx,eax
c0008a47:	5e                   	pop    esi
c0008a48:	68 85 1b 02 c0       	push   0xc0021b85
c0008a4d:	50                   	push   eax
c0008a4e:	e8 55 49 00 00       	call   c000d3a8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008a53:	5f                   	pop    edi
c0008a54:	89 c6                	mov    esi,eax
c0008a56:	5a                   	pop    edx
c0008a57:	50                   	push   eax
c0008a58:	68 9a 1b 02 c0       	push   0xc0021b9a
c0008a5d:	e8 02 e5 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008a62:	83 c4 10             	add    esp,0x10
c0008a65:	85 f6                	test   esi,esi
c0008a67:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0008a6b:	7e 0c                	jle    c0008a79 <KeLoadClockSettings()+0x4d>
c0008a6d:	52                   	push   edx
c0008a6e:	57                   	push   edi
c0008a6f:	56                   	push   esi
c0008a70:	53                   	push   ebx
c0008a71:	e8 a2 3e 00 00       	call   c000c918 <CmGetString(Reghive_Tag*, int, char*)>
c0008a76:	83 c4 10             	add    esp,0x10
c0008a79:	83 ec 0c             	sub    esp,0xc
c0008a7c:	53                   	push   ebx
c0008a7d:	e8 44 3e 00 00       	call   c000c8c6 <CmClose(Reghive_Tag*)>
c0008a82:	83 c4 0c             	add    esp,0xc
c0008a85:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0008a8a:	50                   	push   eax
c0008a8b:	57                   	push   edi
c0008a8c:	68 a8 1b 02 c0       	push   0xc0021ba8
c0008a91:	e8 ce e4 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008a96:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
c0008a9a:	c6 05 08 a3 02 c0 00 	mov    BYTE PTR ds:0xc002a308,0x0
c0008aa1:	8d 41 d5             	lea    eax,[ecx-0x2b]
c0008aa4:	83 c4 10             	add    esp,0x10
c0008aa7:	a8 fd                	test   al,0xfd
c0008aa9:	75 50                	jne    c0008afb <KeLoadClockSettings()+0xcf>
c0008aab:	0f be 5c 24 0a       	movsx  ebx,BYTE PTR [esp+0xa]
c0008ab0:	0f be 54 24 0b       	movsx  edx,BYTE PTR [esp+0xb]
c0008ab5:	83 fb 2e             	cmp    ebx,0x2e
c0008ab8:	75 07                	jne    c0008ac1 <KeLoadClockSettings()+0x95>
c0008aba:	b0 01                	mov    al,0x1
c0008abc:	83 fa 35             	cmp    edx,0x35
c0008abf:	74 0f                	je     c0008ad0 <KeLoadClockSettings()+0xa4>
c0008ac1:	31 c0                	xor    eax,eax
c0008ac3:	83 fa 2e             	cmp    edx,0x2e
c0008ac6:	75 08                	jne    c0008ad0 <KeLoadClockSettings()+0xa4>
c0008ac8:	80 7c 24 0c 35       	cmp    BYTE PTR [esp+0xc],0x35
c0008acd:	0f 94 c0             	sete   al
c0008ad0:	a2 09 a3 02 c0       	mov    ds:0xc002a309,al
c0008ad5:	0f be 44 24 09       	movsx  eax,BYTE PTR [esp+0x9]
c0008ada:	83 e8 30             	sub    eax,0x30
c0008add:	83 fa 2e             	cmp    edx,0x2e
c0008ae0:	75 07                	jne    c0008ae9 <KeLoadClockSettings()+0xbd>
c0008ae2:	6b c0 0a             	imul   eax,eax,0xa
c0008ae5:	8d 44 03 d0          	lea    eax,[ebx+eax*1-0x30]
c0008ae9:	a3 0c a3 02 c0       	mov    ds:0xc002a30c,eax
c0008aee:	80 f9 2d             	cmp    cl,0x2d
c0008af1:	75 19                	jne    c0008b0c <KeLoadClockSettings()+0xe0>
c0008af3:	f7 1d 0c a3 02 c0    	neg    DWORD PTR ds:0xc002a30c
c0008af9:	eb 11                	jmp    c0008b0c <KeLoadClockSettings()+0xe0>
c0008afb:	c6 05 09 a3 02 c0 00 	mov    BYTE PTR ds:0xc002a309,0x0
c0008b02:	c7 05 0c a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a30c,0x0
c0008b0c:	50                   	push   eax
c0008b0d:	0f b6 05 09 a3 02 c0 	movzx  eax,BYTE PTR ds:0xc002a309
c0008b14:	8d 04 80             	lea    eax,[eax+eax*4]
c0008b17:	50                   	push   eax
c0008b18:	ff 35 0c a3 02 c0    	push   DWORD PTR ds:0xc002a30c
c0008b1e:	68 bf 1b 02 c0       	push   0xc0021bbf
c0008b23:	e8 3c e4 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008b28:	81 c4 70 02 00 00    	add    esp,0x270
c0008b2e:	5b                   	pop    ebx
c0008b2f:	5e                   	pop    esi
c0008b30:	5f                   	pop    edi
c0008b31:	c3                   	ret    

c0008b32 <Clock::Clock(char const*)>:
c0008b32:	83 ec 0c             	sub    esp,0xc
c0008b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b39:	83 ec 08             	sub    esp,0x8
c0008b3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b40:	50                   	push   eax
c0008b41:	e8 7e 06 00 00       	call   c00091c4 <Device::Device(char const*)>
c0008b46:	83 c4 10             	add    esp,0x10
c0008b49:	ba d8 1b 02 c0       	mov    edx,0xc0021bd8
c0008b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b52:	89 10                	mov    DWORD PTR [eax],edx
c0008b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b58:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0008b62:	90                   	nop
c0008b63:	83 c4 0c             	add    esp,0xc
c0008b66:	c3                   	ret    
c0008b67:	90                   	nop

c0008b68 <Clock::~Clock()>:
c0008b68:	83 ec 0c             	sub    esp,0xc
c0008b6b:	ba d8 1b 02 c0       	mov    edx,0xc0021bd8
c0008b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b74:	89 10                	mov    DWORD PTR [eax],edx
c0008b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b7a:	83 ec 0c             	sub    esp,0xc
c0008b7d:	50                   	push   eax
c0008b7e:	e8 e1 03 00 00       	call   c0008f64 <Device::~Device()>
c0008b83:	83 c4 10             	add    esp,0x10
c0008b86:	90                   	nop
c0008b87:	83 c4 0c             	add    esp,0xc
c0008b8a:	c3                   	ret    
c0008b8b:	90                   	nop

c0008b8c <Clock::~Clock()>:
c0008b8c:	83 ec 0c             	sub    esp,0xc
c0008b8f:	83 ec 0c             	sub    esp,0xc
c0008b92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b96:	e8 cd ff ff ff       	call   c0008b68 <Clock::~Clock()>
c0008b9b:	83 c4 10             	add    esp,0x10
c0008b9e:	83 ec 08             	sub    esp,0x8
c0008ba1:	68 58 01 00 00       	push   0x158
c0008ba6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008baa:	e8 a5 3b 00 00       	call   c000c754 <operator delete(void*, unsigned long)>
c0008baf:	83 c4 10             	add    esp,0x10
c0008bb2:	83 c4 0c             	add    esp,0xc
c0008bb5:	c3                   	ret    

c0008bb6 <Clock::timeInSecondsLocal()>:
c0008bb6:	53                   	push   ebx
c0008bb7:	83 ec 14             	sub    esp,0x14
c0008bba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bbe:	8b 10                	mov    edx,DWORD PTR [eax]
c0008bc0:	50                   	push   eax
c0008bc1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0008bc4:	0f b6 0d 08 a3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a308
c0008bcb:	03 0d 0c a3 02 c0    	add    ecx,DWORD PTR ds:0xc002a30c
c0008bd1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008bd7:	89 cb                	mov    ebx,ecx
c0008bd9:	c1 fb 1f             	sar    ebx,0x1f
c0008bdc:	01 c8                	add    eax,ecx
c0008bde:	11 da                	adc    edx,ebx
c0008be0:	83 c4 10             	add    esp,0x10
c0008be3:	31 c9                	xor    ecx,ecx
c0008be5:	80 3d 09 a3 02 c0 00 	cmp    BYTE PTR ds:0xc002a309,0x0
c0008bec:	74 05                	je     c0008bf3 <Clock::timeInSecondsLocal()+0x3d>
c0008bee:	b9 08 07 00 00       	mov    ecx,0x708
c0008bf3:	31 db                	xor    ebx,ebx
c0008bf5:	01 c8                	add    eax,ecx
c0008bf7:	11 da                	adc    edx,ebx
c0008bf9:	83 c4 08             	add    esp,0x8
c0008bfc:	5b                   	pop    ebx
c0008bfd:	c3                   	ret    

c0008bfe <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0008bfe:	57                   	push   edi
c0008bff:	56                   	push   esi
c0008c00:	53                   	push   ebx
c0008c01:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c05:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008c09:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008c0b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008c0f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0008c12:	0f b6 05 08 a3 02 c0 	movzx  eax,BYTE PTR ds:0xc002a308
c0008c19:	03 05 0c a3 02 c0    	add    eax,DWORD PTR ds:0xc002a30c
c0008c1f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0008c25:	99                   	cdq    
c0008c26:	29 c6                	sub    esi,eax
c0008c28:	19 d7                	sbb    edi,edx
c0008c2a:	89 f0                	mov    eax,esi
c0008c2c:	89 fa                	mov    edx,edi
c0008c2e:	31 f6                	xor    esi,esi
c0008c30:	80 3d 09 a3 02 c0 00 	cmp    BYTE PTR ds:0xc002a309,0x0
c0008c37:	74 05                	je     c0008c3e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0008c39:	be 08 07 00 00       	mov    esi,0x708
c0008c3e:	31 ff                	xor    edi,edi
c0008c40:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008c44:	29 f0                	sub    eax,esi
c0008c46:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008c4a:	19 fa                	sbb    edx,edi
c0008c4c:	89 d8                	mov    eax,ebx
c0008c4e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	5f                   	pop    edi
c0008c55:	ff e0                	jmp    eax

c0008c57 <KeDatetimeToSeconds(datetime_t)>:
c0008c57:	55                   	push   ebp
c0008c58:	57                   	push   edi
c0008c59:	56                   	push   esi
c0008c5a:	53                   	push   ebx
c0008c5b:	83 ec 0c             	sub    esp,0xc
c0008c5e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008c62:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0008c66:	89 d6                	mov    esi,edx
c0008c68:	0f b6 c7             	movzx  eax,bh
c0008c6b:	c1 ee 10             	shr    esi,0x10
c0008c6e:	6b e8 3c             	imul   ebp,eax,0x3c
c0008c71:	81 ee 6c 07 00 00    	sub    esi,0x76c
c0008c77:	0f b6 ce             	movzx  ecx,dh
c0008c7a:	89 df                	mov    edi,ebx
c0008c7c:	49                   	dec    ecx
c0008c7d:	c1 ef 10             	shr    edi,0x10
c0008c80:	0f b6 db             	movzx  ebx,bl
c0008c83:	89 f8                	mov    eax,edi
c0008c85:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c0008c8b:	0f b6 f8             	movzx  edi,al
c0008c8e:	0f b6 d2             	movzx  edx,dl
c0008c91:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0008c95:	01 d8                	add    eax,ebx
c0008c97:	0f b7 de             	movzx  ebx,si
c0008c9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0008c9d:	c1 f8 1f             	sar    eax,0x1f
c0008ca0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ca4:	0f b6 c1             	movzx  eax,cl
c0008ca7:	8b 0c 85 20 1c 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde3e0]
c0008cae:	83 f8 01             	cmp    eax,0x1
c0008cb1:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0008cb5:	76 27                	jbe    c0008cde <KeDatetimeToSeconds(datetime_t)+0x87>
c0008cb7:	83 e6 03             	and    esi,0x3
c0008cba:	75 22                	jne    c0008cde <KeDatetimeToSeconds(datetime_t)+0x87>
c0008cbc:	31 d2                	xor    edx,edx
c0008cbe:	be 64 00 00 00       	mov    esi,0x64
c0008cc3:	89 d8                	mov    eax,ebx
c0008cc5:	f7 f6                	div    esi
c0008cc7:	85 d2                	test   edx,edx
c0008cc9:	75 12                	jne    c0008cdd <KeDatetimeToSeconds(datetime_t)+0x86>
c0008ccb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0008cd1:	be 90 01 00 00       	mov    esi,0x190
c0008cd6:	99                   	cdq    
c0008cd7:	f7 fe                	idiv   esi
c0008cd9:	85 d2                	test   edx,edx
c0008cdb:	75 01                	jne    c0008cde <KeDatetimeToSeconds(datetime_t)+0x87>
c0008cdd:	41                   	inc    ecx
c0008cde:	83 fb 46             	cmp    ebx,0x46
c0008ce1:	76 48                	jbe    c0008d2b <KeDatetimeToSeconds(datetime_t)+0xd4>
c0008ce3:	be 46 00 00 00       	mov    esi,0x46
c0008ce8:	bf 64 00 00 00       	mov    edi,0x64
c0008ced:	bd 90 01 00 00       	mov    ebp,0x190
c0008cf2:	b8 6d 01 00 00       	mov    eax,0x16d
c0008cf7:	f7 c6 03 00 00 00    	test   esi,0x3
c0008cfd:	75 23                	jne    c0008d22 <KeDatetimeToSeconds(datetime_t)+0xcb>
c0008cff:	89 f0                	mov    eax,esi
c0008d01:	99                   	cdq    
c0008d02:	f7 ff                	idiv   edi
c0008d04:	b8 6e 01 00 00       	mov    eax,0x16e
c0008d09:	85 d2                	test   edx,edx
c0008d0b:	75 15                	jne    c0008d22 <KeDatetimeToSeconds(datetime_t)+0xcb>
c0008d0d:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0008d13:	99                   	cdq    
c0008d14:	f7 fd                	idiv   ebp
c0008d16:	83 fa 01             	cmp    edx,0x1
c0008d19:	19 c0                	sbb    eax,eax
c0008d1b:	f7 d0                	not    eax
c0008d1d:	05 6e 01 00 00       	add    eax,0x16e
c0008d22:	01 c1                	add    ecx,eax
c0008d24:	46                   	inc    esi
c0008d25:	39 de                	cmp    esi,ebx
c0008d27:	7c c9                	jl     c0008cf2 <KeDatetimeToSeconds(datetime_t)+0x9b>
c0008d29:	eb 34                	jmp    c0008d5f <KeDatetimeToSeconds(datetime_t)+0x108>
c0008d2b:	74 32                	je     c0008d5f <KeDatetimeToSeconds(datetime_t)+0x108>
c0008d2d:	b8 45 00 00 00       	mov    eax,0x45
c0008d32:	89 c2                	mov    edx,eax
c0008d34:	83 e2 03             	and    edx,0x3
c0008d37:	39 d8                	cmp    eax,ebx
c0008d39:	7e 0f                	jle    c0008d4a <KeDatetimeToSeconds(datetime_t)+0xf3>
c0008d3b:	83 fa 01             	cmp    edx,0x1
c0008d3e:	19 d2                	sbb    edx,edx
c0008d40:	48                   	dec    eax
c0008d41:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0008d48:	eb e8                	jmp    c0008d32 <KeDatetimeToSeconds(datetime_t)+0xdb>
c0008d4a:	b8 6d 01 00 00       	mov    eax,0x16d
c0008d4f:	85 d2                	test   edx,edx
c0008d51:	75 0a                	jne    c0008d5d <KeDatetimeToSeconds(datetime_t)+0x106>
c0008d53:	83 fb 01             	cmp    ebx,0x1
c0008d56:	19 c0                	sbb    eax,eax
c0008d58:	05 6e 01 00 00       	add    eax,0x16e
c0008d5d:	29 c1                	sub    ecx,eax
c0008d5f:	b8 80 51 01 00       	mov    eax,0x15180
c0008d64:	f7 e9                	imul   ecx
c0008d66:	03 04 24             	add    eax,DWORD PTR [esp]
c0008d69:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008d6d:	83 c4 0c             	add    esp,0xc
c0008d70:	5b                   	pop    ebx
c0008d71:	5e                   	pop    esi
c0008d72:	5f                   	pop    edi
c0008d73:	5d                   	pop    ebp
c0008d74:	c3                   	ret    
c0008d75:	90                   	nop

c0008d76 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0008d76:	57                   	push   edi
c0008d77:	56                   	push   esi
c0008d78:	53                   	push   ebx
c0008d79:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008d7d:	8b 06                	mov    eax,DWORD PTR [esi]
c0008d7f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0008d82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008d86:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008d8a:	e8 c8 fe ff ff       	call   c0008c57 <KeDatetimeToSeconds(datetime_t)>
c0008d8f:	59                   	pop    ecx
c0008d90:	0f b6 0d 08 a3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a308
c0008d97:	5b                   	pop    ebx
c0008d98:	03 0d 0c a3 02 c0    	add    ecx,DWORD PTR ds:0xc002a30c
c0008d9e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008da4:	89 cb                	mov    ebx,ecx
c0008da6:	c1 fb 1f             	sar    ebx,0x1f
c0008da9:	29 c8                	sub    eax,ecx
c0008dab:	19 da                	sbb    edx,ebx
c0008dad:	31 c9                	xor    ecx,ecx
c0008daf:	80 3d 09 a3 02 c0 00 	cmp    BYTE PTR ds:0xc002a309,0x0
c0008db6:	74 05                	je     c0008dbd <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0008db8:	b9 08 07 00 00       	mov    ecx,0x708
c0008dbd:	31 db                	xor    ebx,ebx
c0008dbf:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0008dc3:	29 c8                	sub    eax,ecx
c0008dc5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008dc9:	19 da                	sbb    edx,ebx
c0008dcb:	89 f8                	mov    eax,edi
c0008dcd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008dd1:	5b                   	pop    ebx
c0008dd2:	5e                   	pop    esi
c0008dd3:	5f                   	pop    edi
c0008dd4:	ff e0                	jmp    eax

c0008dd6 <KeSecondsToDatetime(unsigned long long)>:
c0008dd6:	55                   	push   ebp
c0008dd7:	57                   	push   edi
c0008dd8:	56                   	push   esi
c0008dd9:	53                   	push   ebx
c0008dda:	83 ec 1c             	sub    esp,0x1c
c0008ddd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0008de1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008de5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0008de9:	6a 00                	push   0x0
c0008deb:	68 80 51 01 00       	push   0x15180
c0008df0:	55                   	push   ebp
c0008df1:	57                   	push   edi
c0008df2:	e8 4d 73 01 00       	call   c0020144 <__udivdi3>
c0008df7:	83 c4 10             	add    esp,0x10
c0008dfa:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0008e00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e04:	6a 00                	push   0x0
c0008e06:	68 80 51 01 00       	push   0x15180
c0008e0b:	55                   	push   ebp
c0008e0c:	57                   	push   edi
c0008e0d:	bf 10 0e 00 00       	mov    edi,0xe10
c0008e12:	e8 2d 74 01 00       	call   c0020244 <__umoddi3>
c0008e17:	83 c4 10             	add    esp,0x10
c0008e1a:	99                   	cdq    
c0008e1b:	f7 ff                	idiv   edi
c0008e1d:	bf 3c 00 00 00       	mov    edi,0x3c
c0008e22:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0008e25:	89 d0                	mov    eax,edx
c0008e27:	99                   	cdq    
c0008e28:	f7 ff                	idiv   edi
c0008e2a:	85 db                	test   ebx,ebx
c0008e2c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0008e2f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0008e32:	79 11                	jns    c0008e45 <KeSecondsToDatetime(unsigned long long)+0x6f>
c0008e34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008e38:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0008e3e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e43:	eb 07                	jmp    c0008e4c <KeSecondsToDatetime(unsigned long long)+0x76>
c0008e45:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e4a:	89 d8                	mov    eax,ebx
c0008e4c:	bf b4 05 00 00       	mov    edi,0x5b4
c0008e51:	99                   	cdq    
c0008e52:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0008e57:	f7 f9                	idiv   ecx
c0008e59:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0008e5e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e62:	31 d2                	xor    edx,edx
c0008e64:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0008e6c:	01 c3                	add    ebx,eax
c0008e6e:	89 d8                	mov    eax,ebx
c0008e70:	f7 f1                	div    ecx
c0008e72:	31 d2                	xor    edx,edx
c0008e74:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0008e77:	89 d8                	mov    eax,ebx
c0008e79:	f7 f7                	div    edi
c0008e7b:	31 d2                	xor    edx,edx
c0008e7d:	29 c1                	sub    ecx,eax
c0008e7f:	89 d8                	mov    eax,ebx
c0008e81:	f7 f5                	div    ebp
c0008e83:	bd 6d 01 00 00       	mov    ebp,0x16d
c0008e88:	29 c1                	sub    ecx,eax
c0008e8a:	31 d2                	xor    edx,edx
c0008e8c:	89 c8                	mov    eax,ecx
c0008e8e:	f7 f5                	div    ebp
c0008e90:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0008e95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008e99:	31 d2                	xor    edx,edx
c0008e9b:	89 c8                	mov    eax,ecx
c0008e9d:	f7 f5                	div    ebp
c0008e9f:	31 d2                	xor    edx,edx
c0008ea1:	01 c3                	add    ebx,eax
c0008ea3:	89 c8                	mov    eax,ecx
c0008ea5:	f7 f7                	div    edi
c0008ea7:	bf 99 00 00 00       	mov    edi,0x99
c0008eac:	29 c3                	sub    ebx,eax
c0008eae:	31 d2                	xor    edx,edx
c0008eb0:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0008eb8:	29 c3                	sub    ebx,eax
c0008eba:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0008ebd:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0008ec0:	bb 05 00 00 00       	mov    ebx,0x5
c0008ec5:	83 c1 02             	add    ecx,0x2
c0008ec8:	89 c8                	mov    eax,ecx
c0008eca:	f7 f7                	div    edi
c0008ecc:	31 d2                	xor    edx,edx
c0008ece:	89 c7                	mov    edi,eax
c0008ed0:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0008ed6:	83 c0 02             	add    eax,0x2
c0008ed9:	f7 f3                	div    ebx
c0008edb:	89 eb                	mov    ebx,ebp
c0008edd:	29 c3                	sub    ebx,eax
c0008edf:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0008ee5:	88 1e                	mov    BYTE PTR [esi],bl
c0008ee7:	19 c0                	sbb    eax,eax
c0008ee9:	31 d2                	xor    edx,edx
c0008eeb:	83 e0 0c             	and    eax,0xc
c0008eee:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0008ef2:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0008efa:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0008efe:	83 f9 01             	cmp    ecx,0x1
c0008f01:	0f 96 c2             	setbe  dl
c0008f04:	41                   	inc    ecx
c0008f05:	01 d0                	add    eax,edx
c0008f07:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0008f0a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0008f0e:	83 c4 1c             	add    esp,0x1c
c0008f11:	89 f0                	mov    eax,esi
c0008f13:	5b                   	pop    ebx
c0008f14:	5e                   	pop    esi
c0008f15:	5f                   	pop    edi
c0008f16:	5d                   	pop    ebp
c0008f17:	c2 04 00             	ret    0x4

c0008f1a <Clock::timeInDatetimeLocal()>:
c0008f1a:	53                   	push   ebx
c0008f1b:	83 ec 14             	sub    esp,0x14
c0008f1e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f22:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f26:	e8 8b fc ff ff       	call   c0008bb6 <Clock::timeInSecondsLocal()>
c0008f2b:	83 c4 0c             	add    esp,0xc
c0008f2e:	52                   	push   edx
c0008f2f:	50                   	push   eax
c0008f30:	53                   	push   ebx
c0008f31:	e8 a0 fe ff ff       	call   c0008dd6 <KeSecondsToDatetime(unsigned long long)>
c0008f36:	89 d8                	mov    eax,ebx
c0008f38:	83 c4 14             	add    esp,0x14
c0008f3b:	5b                   	pop    ebx
c0008f3c:	c2 04 00             	ret    0x4
c0008f3f:	90                   	nop

c0008f40 <Device::hibernate()>:
c0008f40:	c3                   	ret    
c0008f41:	90                   	nop

c0008f42 <Device::wake()>:
c0008f42:	c3                   	ret    
c0008f43:	90                   	nop

c0008f44 <Device::detect()>:
c0008f44:	c3                   	ret    
c0008f45:	90                   	nop

c0008f46 <Device::disableLegacy()>:
c0008f46:	c3                   	ret    
c0008f47:	90                   	nop

c0008f48 <Device::powerSaving(PowerSavingLevel)>:
c0008f48:	c3                   	ret    
c0008f49:	90                   	nop

c0008f4a <DriverlessDevice::close(int, int, void*)>:
c0008f4a:	31 c0                	xor    eax,eax
c0008f4c:	c3                   	ret    
c0008f4d:	90                   	nop

c0008f4e <DriverlessDevice::detect()>:
c0008f4e:	c3                   	ret    
c0008f4f:	90                   	nop

c0008f50 <DriverlessDevice::open(int, int, void*)>:
c0008f50:	83 ec 18             	sub    esp,0x18
c0008f53:	68 50 1c 02 c0       	push   0xc0021c50
c0008f58:	e8 39 5e 00 00       	call   c000ed96 <KePanic(char const*)>
c0008f5d:	83 c8 ff             	or     eax,0xffffffff
c0008f60:	83 c4 1c             	add    esp,0x1c
c0008f63:	c3                   	ret    

c0008f64 <Device::~Device()>:
c0008f64:	ba f4 1c 02 c0       	mov    edx,0xc0021cf4
c0008f69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f6d:	89 10                	mov    DWORD PTR [eax],edx
c0008f6f:	90                   	nop
c0008f70:	c3                   	ret    
c0008f71:	90                   	nop

c0008f72 <Device::~Device()>:
c0008f72:	83 ec 0c             	sub    esp,0xc
c0008f75:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f79:	e8 e6 ff ff ff       	call   c0008f64 <Device::~Device()>
c0008f7e:	83 c4 04             	add    esp,0x4
c0008f81:	83 ec 08             	sub    esp,0x8
c0008f84:	68 58 01 00 00       	push   0x158
c0008f89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f8d:	e8 c2 37 00 00       	call   c000c754 <operator delete(void*, unsigned long)>
c0008f92:	83 c4 10             	add    esp,0x10
c0008f95:	83 c4 0c             	add    esp,0xc
c0008f98:	c3                   	ret    
c0008f99:	90                   	nop

c0008f9a <Device::findAndLoadDriver()>:
c0008f9a:	c7 44 24 04 6e 1c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021c6e
c0008fa2:	e9 bd df ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c0008fa7:	90                   	nop

c0008fa8 <Device::preOpenPCI(PCIDeviceInfo)>:
c0008fa8:	57                   	push   edi
c0008fa9:	b9 09 00 00 00       	mov    ecx,0x9
c0008fae:	56                   	push   esi
c0008faf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0008fb3:	8d 74 24 10          	lea    esi,[esp+0x10]
c0008fb7:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0008fc1:	81 c7 18 01 00 00    	add    edi,0x118
c0008fc7:	fc                   	cld    
c0008fc8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0008fca:	5e                   	pop    esi
c0008fcb:	5f                   	pop    edi
c0008fcc:	c3                   	ret    
c0008fcd:	90                   	nop

c0008fce <Device::preOpenACPI(void*, char*, char*)>:
c0008fce:	57                   	push   edi
c0008fcf:	b9 1e 00 00 00       	mov    ecx,0x1e
c0008fd4:	56                   	push   esi
c0008fd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008fd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008fdd:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0008fe7:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0008fed:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0008ff3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ff7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008ff9:	b9 0e 00 00 00       	mov    ecx,0xe
c0008ffe:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0009004:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009008:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000900a:	5e                   	pop    esi
c000900b:	5f                   	pop    edi
c000900c:	c3                   	ret    
c000900d:	90                   	nop

c000900e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000900e:	53                   	push   ebx
c000900f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009013:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009017:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000901b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000901f:	0f b6 c0             	movzx  eax,al
c0009022:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0009026:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000902a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000902e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009032:	5b                   	pop    ebx
c0009033:	e9 eb fd 00 00       	jmp    c0018e23 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c0009038 <Device::getParent()>:
c0009038:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000903c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0009042:	c3                   	ret    
c0009043:	90                   	nop

c0009044 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0009044:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009048:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000904c:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0009051:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009055:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009059:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000905d:	e9 23 ff 00 00       	jmp    c0018f85 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c0009062 <Device::addChild(Device*)>:
c0009062:	53                   	push   ebx
c0009063:	83 ec 08             	sub    esp,0x8
c0009066:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000906a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000906e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009074:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000907a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000907c:	85 d2                	test   edx,edx
c000907e:	74 04                	je     c0009084 <Device::addChild(Device*)+0x22>
c0009080:	89 d3                	mov    ebx,edx
c0009082:	eb f6                	jmp    c000907a <Device::addChild(Device*)+0x18>
c0009084:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009087:	83 ec 0c             	sub    esp,0xc
c000908a:	6a 08                	push   0x8
c000908c:	e8 be 59 00 00       	call   c000ea4f <malloc>
c0009091:	89 03                	mov    DWORD PTR [ebx],eax
c0009093:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009099:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00090a0:	83 c4 18             	add    esp,0x18
c00090a3:	5b                   	pop    ebx
c00090a4:	c3                   	ret    
c00090a5:	90                   	nop

c00090a6 <Device::removeAllChildren()>:
c00090a6:	56                   	push   esi
c00090a7:	53                   	push   ebx
c00090a8:	52                   	push   edx
c00090a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00090ad:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00090b3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00090b6:	74 17                	je     c00090cf <Device::removeAllChildren()+0x29>
c00090b8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00090bb:	85 c0                	test   eax,eax
c00090bd:	74 0c                	je     c00090cb <Device::removeAllChildren()+0x25>
c00090bf:	83 ec 0c             	sub    esp,0xc
c00090c2:	8b 10                	mov    edx,DWORD PTR [eax]
c00090c4:	50                   	push   eax
c00090c5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00090c8:	83 c4 10             	add    esp,0x10
c00090cb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00090cd:	eb e4                	jmp    c00090b3 <Device::removeAllChildren()+0xd>
c00090cf:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00090d5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00090db:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00090e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00090e8:	58                   	pop    eax
c00090e9:	5b                   	pop    ebx
c00090ea:	5e                   	pop    esi
c00090eb:	c3                   	ret    

c00090ec <Device::hibernateAll()>:
c00090ec:	53                   	push   ebx
c00090ed:	83 ec 14             	sub    esp,0x14
c00090f0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00090f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00090f6:	53                   	push   ebx
c00090f7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00090fa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009100:	83 c4 10             	add    esp,0x10
c0009103:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009106:	74 0f                	je     c0009117 <Device::hibernateAll()+0x2b>
c0009108:	83 ec 0c             	sub    esp,0xc
c000910b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000910e:	e8 d9 ff ff ff       	call   c00090ec <Device::hibernateAll()>
c0009113:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009115:	eb e9                	jmp    c0009100 <Device::hibernateAll()+0x14>
c0009117:	83 c4 08             	add    esp,0x8
c000911a:	5b                   	pop    ebx
c000911b:	c3                   	ret    

c000911c <Device::wakeAll()>:
c000911c:	53                   	push   ebx
c000911d:	83 ec 14             	sub    esp,0x14
c0009120:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009124:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009126:	53                   	push   ebx
c0009127:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000912a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009130:	83 c4 10             	add    esp,0x10
c0009133:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009136:	74 0f                	je     c0009147 <Device::wakeAll()+0x2b>
c0009138:	83 ec 0c             	sub    esp,0xc
c000913b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000913e:	e8 d9 ff ff ff       	call   c000911c <Device::wakeAll()>
c0009143:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009145:	eb e9                	jmp    c0009130 <Device::wakeAll()+0x14>
c0009147:	83 c4 08             	add    esp,0x8
c000914a:	5b                   	pop    ebx
c000914b:	c3                   	ret    

c000914c <Device::detectAll()>:
c000914c:	53                   	push   ebx
c000914d:	83 ec 14             	sub    esp,0x14
c0009150:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009154:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009156:	53                   	push   ebx
c0009157:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000915a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009160:	83 c4 10             	add    esp,0x10
c0009163:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009166:	74 0f                	je     c0009177 <Device::detectAll()+0x2b>
c0009168:	83 ec 0c             	sub    esp,0xc
c000916b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000916e:	e8 d9 ff ff ff       	call   c000914c <Device::detectAll()>
c0009173:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009175:	eb e9                	jmp    c0009160 <Device::detectAll()+0x14>
c0009177:	83 c4 08             	add    esp,0x8
c000917a:	5b                   	pop    ebx
c000917b:	c3                   	ret    

c000917c <Device::disableLegacyAll()>:
c000917c:	c3                   	ret    
c000917d:	90                   	nop

c000917e <Device::loadDriversForAll()>:
c000917e:	c3                   	ret    
c000917f:	90                   	nop

c0009180 <Device::powerSavingAll(PowerSavingLevel)>:
c0009180:	56                   	push   esi
c0009181:	53                   	push   ebx
c0009182:	83 ec 0c             	sub    esp,0xc
c0009185:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009189:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000918d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000918f:	56                   	push   esi
c0009190:	53                   	push   ebx
c0009191:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009194:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000919a:	83 c4 10             	add    esp,0x10
c000919d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00091a0:	74 0f                	je     c00091b1 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00091a2:	52                   	push   edx
c00091a3:	52                   	push   edx
c00091a4:	56                   	push   esi
c00091a5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00091a8:	e8 d3 ff ff ff       	call   c0009180 <Device::powerSavingAll(PowerSavingLevel)>
c00091ad:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00091af:	eb e9                	jmp    c000919a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00091b1:	58                   	pop    eax
c00091b2:	5b                   	pop    ebx
c00091b3:	5e                   	pop    esi
c00091b4:	c3                   	ret    
c00091b5:	90                   	nop

c00091b6 <Device::setName(char const*)>:
c00091b6:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00091be:	e9 7d 74 ff ff       	jmp    c0000640 <strcpy>
c00091c3:	90                   	nop

c00091c4 <Device::Device(char const*)>:
c00091c4:	83 ec 1c             	sub    esp,0x1c
c00091c7:	ba f4 1c 02 c0       	mov    edx,0xc0021cf4
c00091cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091d0:	89 10                	mov    DWORD PTR [eax],edx
c00091d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091d6:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00091e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091e4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00091ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091f2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00091fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009200:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000920a:	83 ec 08             	sub    esp,0x8
c000920d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009211:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009215:	e8 9c ff ff ff       	call   c00091b6 <Device::setName(char const*)>
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009225:	83 ec 0c             	sub    esp,0xc
c0009228:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000922c:	e8 1e 58 00 00       	call   c000ea4f <malloc>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000923a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009241:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009245:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000924b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000924f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009255:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000925b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000925f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009265:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000926c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009270:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0009277:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000927b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009282:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009286:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009290:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009294:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000929e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092a2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00092ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092b0:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c00092ba:	90                   	nop
c00092bb:	83 c4 1c             	add    esp,0x1c
c00092be:	c3                   	ret    
c00092bf:	90                   	nop

c00092c0 <Device::getName()>:
c00092c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092c4:	05 d0 00 00 00       	add    eax,0xd0
c00092c9:	c3                   	ret    

c00092ca <Device::closeAll()>:
c00092ca:	53                   	push   ebx
c00092cb:	83 ec 08             	sub    esp,0x8
c00092ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00092d2:	53                   	push   ebx
c00092d3:	e8 e8 ff ff ff       	call   c00092c0 <Device::getName()>
c00092d8:	52                   	push   edx
c00092d9:	50                   	push   eax
c00092da:	68 a8 1c 02 c0       	push   0xc0021ca8
c00092df:	e8 80 dc ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00092e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00092e6:	6a 00                	push   0x0
c00092e8:	6a 00                	push   0x0
c00092ea:	6a 00                	push   0x0
c00092ec:	53                   	push   ebx
c00092ed:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00092f0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00092f6:	83 c4 20             	add    esp,0x20
c00092f9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00092fc:	74 12                	je     c0009310 <Device::closeAll()+0x46>
c00092fe:	83 ec 0c             	sub    esp,0xc
c0009301:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009304:	e8 c1 ff ff ff       	call   c00092ca <Device::closeAll()>
c0009309:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000930b:	83 c4 10             	add    esp,0x10
c000930e:	eb e9                	jmp    c00092f9 <Device::closeAll()+0x2f>
c0009310:	83 c4 08             	add    esp,0x8
c0009313:	5b                   	pop    ebx
c0009314:	c3                   	ret    
c0009315:	90                   	nop

c0009316 <DriverlessDevice::DriverlessDevice(char const*)>:
c0009316:	83 ec 0c             	sub    esp,0xc
c0009319:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000931d:	83 ec 08             	sub    esp,0x8
c0009320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009324:	50                   	push   eax
c0009325:	e8 9a fe ff ff       	call   c00091c4 <Device::Device(char const*)>
c000932a:	83 c4 10             	add    esp,0x10
c000932d:	ba 20 1d 02 c0       	mov    edx,0xc0021d20
c0009332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009336:	89 10                	mov    DWORD PTR [eax],edx
c0009338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000933c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009346:	90                   	nop
c0009347:	83 c4 0c             	add    esp,0xc
c000934a:	c3                   	ret    
c000934b:	90                   	nop

c000934c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000934c:	57                   	push   edi
c000934d:	56                   	push   esi
c000934e:	53                   	push   ebx
c000934f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009353:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009357:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000935b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009361:	75 0c                	jne    c000936f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009363:	52                   	push   edx
c0009364:	52                   	push   edx
c0009365:	53                   	push   ebx
c0009366:	56                   	push   esi
c0009367:	e8 50 70 01 00       	call   c00203bc <LinkedList<Device>::addElement(Device*)>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009375:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009378:	74 12                	je     c000938c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000937a:	50                   	push   eax
c000937b:	57                   	push   edi
c000937c:	56                   	push   esi
c000937d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009380:	e8 c7 ff ff ff       	call   c000934c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009385:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009387:	83 c4 10             	add    esp,0x10
c000938a:	eb e9                	jmp    c0009375 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000938c:	5b                   	pop    ebx
c000938d:	5e                   	pop    esi
c000938e:	5f                   	pop    edi
c000938f:	c3                   	ret    

c0009390 <getDevicesOfType(DeviceType)>:
c0009390:	53                   	push   ebx
c0009391:	83 ec 14             	sub    esp,0x14
c0009394:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009398:	53                   	push   ebx
c0009399:	e8 fa 70 01 00       	call   c0020498 <LinkedList<Device>::LinkedList()>
c000939e:	83 c4 0c             	add    esp,0xc
c00093a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00093a5:	53                   	push   ebx
c00093a6:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c00093ac:	e8 9b ff ff ff       	call   c000934c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00093b1:	89 d8                	mov    eax,ebx
c00093b3:	83 c4 18             	add    esp,0x18
c00093b6:	5b                   	pop    ebx
c00093b7:	c2 04 00             	ret    0x4
c00093ba:	66 90                	xchg   ax,ax

c00093bc <HardDiskController::HardDiskController(char const*)>:
c00093bc:	83 ec 0c             	sub    esp,0xc
c00093bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093c3:	83 ec 08             	sub    esp,0x8
c00093c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093ca:	50                   	push   eax
c00093cb:	e8 f4 fd ff ff       	call   c00091c4 <Device::Device(char const*)>
c00093d0:	83 c4 10             	add    esp,0x10
c00093d3:	ba 4c 1d 02 c0       	mov    edx,0xc0021d4c
c00093d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093dc:	89 10                	mov    DWORD PTR [eax],edx
c00093de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093e2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00093ec:	90                   	nop
c00093ed:	83 c4 0c             	add    esp,0xc
c00093f0:	c3                   	ret    
c00093f1:	90                   	nop
c00093f2:	66 90                	xchg   ax,ax

c00093f4 <HardDiskController::~HardDiskController()>:
c00093f4:	83 ec 0c             	sub    esp,0xc
c00093f7:	ba 4c 1d 02 c0       	mov    edx,0xc0021d4c
c00093fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009400:	89 10                	mov    DWORD PTR [eax],edx
c0009402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009406:	83 ec 0c             	sub    esp,0xc
c0009409:	50                   	push   eax
c000940a:	e8 55 fb ff ff       	call   c0008f64 <Device::~Device()>
c000940f:	83 c4 10             	add    esp,0x10
c0009412:	90                   	nop
c0009413:	83 c4 0c             	add    esp,0xc
c0009416:	c3                   	ret    
c0009417:	90                   	nop

c0009418 <HardDiskController::~HardDiskController()>:
c0009418:	83 ec 0c             	sub    esp,0xc
c000941b:	83 ec 0c             	sub    esp,0xc
c000941e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009422:	e8 cd ff ff ff       	call   c00093f4 <HardDiskController::~HardDiskController()>
c0009427:	83 c4 10             	add    esp,0x10
c000942a:	83 ec 08             	sub    esp,0x8
c000942d:	68 58 01 00 00       	push   0x158
c0009432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009436:	e8 19 33 00 00       	call   c000c754 <operator delete(void*, unsigned long)>
c000943b:	83 c4 10             	add    esp,0x10
c000943e:	83 c4 0c             	add    esp,0xc
c0009441:	c3                   	ret    

c0009442 <PhysicalDisk::eject()>:
c0009442:	83 c8 ff             	or     eax,0xffffffff
c0009445:	c3                   	ret    

c0009446 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009446:	83 ec 0c             	sub    esp,0xc
c0009449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000944d:	83 ec 08             	sub    esp,0x8
c0009450:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009454:	50                   	push   eax
c0009455:	e8 6a fd ff ff       	call   c00091c4 <Device::Device(char const*)>
c000945a:	83 c4 10             	add    esp,0x10
c000945d:	ba 78 1d 02 c0       	mov    edx,0xc0021d78
c0009462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009466:	89 10                	mov    DWORD PTR [eax],edx
c0009468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000946c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009477:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000947e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009482:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000948c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009490:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009494:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000949a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000949e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00094a8:	90                   	nop
c00094a9:	83 c4 0c             	add    esp,0xc
c00094ac:	c3                   	ret    
c00094ad:	90                   	nop

c00094ae <PhysicalDisk::startCache()>:
c00094ae:	56                   	push   esi
c00094af:	53                   	push   ebx
c00094b0:	83 ec 10             	sub    esp,0x10
c00094b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00094b7:	6a 44                	push   0x44
c00094b9:	e8 91 55 00 00       	call   c000ea4f <malloc>
c00094be:	89 c6                	mov    esi,eax
c00094c0:	58                   	pop    eax
c00094c1:	5a                   	pop    edx
c00094c2:	53                   	push   ebx
c00094c3:	56                   	push   esi
c00094c4:	e8 1f 14 00 00       	call   c000a8e8 <VCache::VCache(PhysicalDisk*)>
c00094c9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00094cf:	83 c4 14             	add    esp,0x14
c00094d2:	5b                   	pop    ebx
c00094d3:	5e                   	pop    esi
c00094d4:	c3                   	ret    
c00094d5:	90                   	nop

c00094d6 <PhysicalDisk::~PhysicalDisk()>:
c00094d6:	83 ec 0c             	sub    esp,0xc
c00094d9:	ba 78 1d 02 c0       	mov    edx,0xc0021d78
c00094de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094e2:	89 10                	mov    DWORD PTR [eax],edx
c00094e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094e8:	83 ec 0c             	sub    esp,0xc
c00094eb:	50                   	push   eax
c00094ec:	e8 73 fa ff ff       	call   c0008f64 <Device::~Device()>
c00094f1:	83 c4 10             	add    esp,0x10
c00094f4:	90                   	nop
c00094f5:	83 c4 0c             	add    esp,0xc
c00094f8:	c3                   	ret    
c00094f9:	90                   	nop

c00094fa <PhysicalDisk::~PhysicalDisk()>:
c00094fa:	83 ec 0c             	sub    esp,0xc
c00094fd:	83 ec 0c             	sub    esp,0xc
c0009500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009504:	e8 cd ff ff ff       	call   c00094d6 <PhysicalDisk::~PhysicalDisk()>
c0009509:	83 c4 10             	add    esp,0x10
c000950c:	83 ec 08             	sub    esp,0x8
c000950f:	68 6c 01 00 00       	push   0x16c
c0009514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009518:	e8 37 32 00 00       	call   c000c754 <operator delete(void*, unsigned long)>
c000951d:	83 c4 10             	add    esp,0x10
c0009520:	83 c4 0c             	add    esp,0xc
c0009523:	c3                   	ret    

c0009524 <startGUI(void*)>:
c0009524:	55                   	push   ebp
c0009525:	89 e5                	mov    ebp,esp
c0009527:	53                   	push   ebx
c0009528:	83 ec 04             	sub    esp,0x4
c000952b:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0009533:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0009538:	85 c0                	test   eax,eax
c000953a:	75 01                	jne    c000953d <startGUI(void*)+0x19>
c000953c:	fb                   	sti    
c000953d:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c0009543:	83 ec 08             	sub    esp,0x8
c0009546:	6a 01                	push   0x1
c0009548:	68 a8 1d 02 c0       	push   0xc0021da8
c000954d:	e8 c6 b7 00 00       	call   c0014d18 <Thr::loadDLL(char const*, bool)>
c0009552:	83 c4 10             	add    esp,0x10
c0009555:	83 ec 08             	sub    esp,0x8
c0009558:	53                   	push   ebx
c0009559:	50                   	push   eax
c000955a:	e8 0b ba 00 00       	call   c0014f6a <Thr::executeDLL(unsigned long, void*)>
c000955f:	83 c4 10             	add    esp,0x10
c0009562:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c0009568:	83 ec 08             	sub    esp,0x8
c000956b:	6a 01                	push   0x1
c000956d:	68 c2 1d 02 c0       	push   0xc0021dc2
c0009572:	e8 a1 b7 00 00       	call   c0014d18 <Thr::loadDLL(char const*, bool)>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	83 ec 08             	sub    esp,0x8
c000957d:	53                   	push   ebx
c000957e:	50                   	push   eax
c000957f:	e8 e6 b9 00 00       	call   c0014f6a <Thr::executeDLL(unsigned long, void*)>
c0009584:	83 c4 10             	add    esp,0x10
c0009587:	eb fe                	jmp    c0009587 <startGUI(void*)+0x63>

c0009589 <startGUIVESA(void*)>:
c0009589:	55                   	push   ebp
c000958a:	89 e5                	mov    ebp,esp
c000958c:	53                   	push   ebx
c000958d:	83 ec 04             	sub    esp,0x4
c0009590:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0009598:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000959d:	85 c0                	test   eax,eax
c000959f:	75 01                	jne    c00095a2 <startGUIVESA(void*)+0x19>
c00095a1:	fb                   	sti    
c00095a2:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c00095a8:	83 ec 08             	sub    esp,0x8
c00095ab:	6a 01                	push   0x1
c00095ad:	68 e0 1d 02 c0       	push   0xc0021de0
c00095b2:	e8 61 b7 00 00       	call   c0014d18 <Thr::loadDLL(char const*, bool)>
c00095b7:	83 c4 10             	add    esp,0x10
c00095ba:	83 ec 08             	sub    esp,0x8
c00095bd:	53                   	push   ebx
c00095be:	50                   	push   eax
c00095bf:	e8 a6 b9 00 00       	call   c0014f6a <Thr::executeDLL(unsigned long, void*)>
c00095c4:	83 c4 10             	add    esp,0x10
c00095c7:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c00095cd:	83 ec 08             	sub    esp,0x8
c00095d0:	6a 01                	push   0x1
c00095d2:	68 c2 1d 02 c0       	push   0xc0021dc2
c00095d7:	e8 3c b7 00 00       	call   c0014d18 <Thr::loadDLL(char const*, bool)>
c00095dc:	83 c4 10             	add    esp,0x10
c00095df:	83 ec 08             	sub    esp,0x8
c00095e2:	53                   	push   ebx
c00095e3:	50                   	push   eax
c00095e4:	e8 81 b9 00 00       	call   c0014f6a <Thr::executeDLL(unsigned long, void*)>
c00095e9:	83 c4 10             	add    esp,0x10
c00095ec:	eb fe                	jmp    c00095ec <startGUIVESA(void*)+0x63>

c00095ee <sendKeyToTerminal(unsigned char)>:
c00095ee:	55                   	push   ebp
c00095ef:	89 e5                	mov    ebp,esp
c00095f1:	83 ec 28             	sub    esp,0x28
c00095f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00095f7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00095fa:	a1 34 ce 02 c0       	mov    eax,ds:0xc002ce34
c00095ff:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0009603:	83 ec 08             	sub    esp,0x8
c0009606:	52                   	push   edx
c0009607:	50                   	push   eax
c0009608:	e8 91 82 00 00       	call   c001189e <VgaText::receiveKey(unsigned char)>
c000960d:	83 c4 10             	add    esp,0x10
c0009610:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009614:	83 f8 0a             	cmp    eax,0xa
c0009617:	74 16                	je     c000962f <sendKeyToTerminal(unsigned char)+0x41>
c0009619:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000961d:	83 f8 03             	cmp    eax,0x3
c0009620:	74 0d                	je     c000962f <sendKeyToTerminal(unsigned char)+0x41>
c0009622:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009626:	83 f8 1c             	cmp    eax,0x1c
c0009629:	0f 85 92 00 00 00    	jne    c00096c1 <sendKeyToTerminal(unsigned char)+0xd3>
c000962f:	fa                   	cli    
c0009630:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0009635:	83 c0 01             	add    eax,0x1
c0009638:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000963d:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0009642:	83 c0 01             	add    eax,0x1
c0009645:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000964a:	a1 20 a3 02 c0       	mov    eax,ds:0xc002a320
c000964f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009652:	c7 05 20 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a320,0x0
c000965c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009660:	74 1f                	je     c0009681 <sendKeyToTerminal(unsigned char)+0x93>
c0009662:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009665:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009668:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000966b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000966e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009671:	83 ec 0c             	sub    esp,0xc
c0009674:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009677:	e8 a0 c4 00 00       	call   c0015b1c <unblockTask(ThreadControlBlock*)>
c000967c:	83 c4 10             	add    esp,0x10
c000967f:	eb db                	jmp    c000965c <sendKeyToTerminal(unsigned char)+0x6e>
c0009681:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0009686:	83 e8 01             	sub    eax,0x1
c0009689:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000968e:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0009693:	85 c0                	test   eax,eax
c0009695:	75 18                	jne    c00096af <sendKeyToTerminal(unsigned char)+0xc1>
c0009697:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000969c:	85 c0                	test   eax,eax
c000969e:	74 0f                	je     c00096af <sendKeyToTerminal(unsigned char)+0xc1>
c00096a0:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c00096aa:	e8 4d c1 00 00       	call   c00157fc <schedule()>
c00096af:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c00096b7:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00096bc:	85 c0                	test   eax,eax
c00096be:	75 01                	jne    c00096c1 <sendKeyToTerminal(unsigned char)+0xd3>
c00096c0:	fb                   	sti    
c00096c1:	90                   	nop
c00096c2:	c9                   	leave  
c00096c3:	c3                   	ret    

c00096c4 <sendKeyboardToken(KeyboardToken)>:
c00096c4:	55                   	push   ebp
c00096c5:	89 e5                	mov    ebp,esp
c00096c7:	83 ec 18             	sub    esp,0x18
c00096ca:	e8 f7 5f 00 00       	call   c000f6c6 <KeUserIOReceived()>
c00096cf:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00096d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096d5:	0f b7 c0             	movzx  eax,ax
c00096d8:	83 f2 01             	xor    edx,0x1
c00096db:	88 90 40 a3 02 c0    	mov    BYTE PTR [eax-0x3ffd5cc0],dl
c00096e1:	a1 28 a3 02 c0       	mov    eax,ds:0xc002a328
c00096e6:	85 c0                	test   eax,eax
c00096e8:	74 24                	je     c000970e <sendKeyboardToken(KeyboardToken)+0x4a>
c00096ea:	8b 0d 28 a3 02 c0    	mov    ecx,DWORD PTR ds:0xc002a328
c00096f0:	83 ec 04             	sub    esp,0x4
c00096f3:	68 40 a3 02 c0       	push   0xc002a340
c00096f8:	83 ec 08             	sub    esp,0x8
c00096fb:	89 e2                	mov    edx,esp
c00096fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009700:	89 02                	mov    DWORD PTR [edx],eax
c0009702:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009705:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0009709:	ff d1                	call   ecx
c000970b:	83 c4 10             	add    esp,0x10
c000970e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0009712:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0009715:	0f b6 c0             	movzx  eax,al
c0009718:	85 c0                	test   eax,eax
c000971a:	0f 84 da 00 00 00    	je     c00097fa <sendKeyboardToken(KeyboardToken)+0x136>
c0009720:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009723:	0f b7 c0             	movzx  eax,ax
c0009726:	3d 18 03 00 00       	cmp    eax,0x318
c000972b:	75 06                	jne    c0009733 <sendKeyboardToken(KeyboardToken)+0x6f>
c000972d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0009733:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009736:	0f b7 c0             	movzx  eax,ax
c0009739:	3d 19 03 00 00       	cmp    eax,0x319
c000973e:	75 06                	jne    c0009746 <sendKeyboardToken(KeyboardToken)+0x82>
c0009740:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0009746:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009749:	0f b7 c0             	movzx  eax,ax
c000974c:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009751:	75 06                	jne    c0009759 <sendKeyboardToken(KeyboardToken)+0x95>
c0009753:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0009759:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000975c:	0f b7 c0             	movzx  eax,ax
c000975f:	3d 1b 03 00 00       	cmp    eax,0x31b
c0009764:	75 06                	jne    c000976c <sendKeyboardToken(KeyboardToken)+0xa8>
c0009766:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000976c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000976f:	0f b7 c0             	movzx  eax,ax
c0009772:	3d 1c 03 00 00       	cmp    eax,0x31c
c0009777:	75 06                	jne    c000977f <sendKeyboardToken(KeyboardToken)+0xbb>
c0009779:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000977f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009782:	0f b7 c0             	movzx  eax,ax
c0009785:	3d 1d 03 00 00       	cmp    eax,0x31d
c000978a:	75 06                	jne    c0009792 <sendKeyboardToken(KeyboardToken)+0xce>
c000978c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0009792:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009795:	0f b7 c0             	movzx  eax,ax
c0009798:	3d 1e 03 00 00       	cmp    eax,0x31e
c000979d:	75 06                	jne    c00097a5 <sendKeyboardToken(KeyboardToken)+0xe1>
c000979f:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00097a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097a8:	0f b7 c0             	movzx  eax,ax
c00097ab:	3d 1f 03 00 00       	cmp    eax,0x31f
c00097b0:	75 06                	jne    c00097b8 <sendKeyboardToken(KeyboardToken)+0xf4>
c00097b2:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00097b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097bb:	0f b7 c0             	movzx  eax,ax
c00097be:	3d 20 03 00 00       	cmp    eax,0x320
c00097c3:	75 06                	jne    c00097cb <sendKeyboardToken(KeyboardToken)+0x107>
c00097c5:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00097cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097ce:	0f b7 c0             	movzx  eax,ax
c00097d1:	3d 21 03 00 00       	cmp    eax,0x321
c00097d6:	75 06                	jne    c00097de <sendKeyboardToken(KeyboardToken)+0x11a>
c00097d8:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00097de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097e1:	0f b7 c0             	movzx  eax,ax
c00097e4:	3d 22 03 00 00       	cmp    eax,0x322
c00097e9:	0f 85 f1 00 00 00    	jne    c00098e0 <sendKeyboardToken(KeyboardToken)+0x21c>
c00097ef:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00097f5:	e9 e6 00 00 00       	jmp    c00098e0 <sendKeyboardToken(KeyboardToken)+0x21c>
c00097fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097fd:	0f b7 c0             	movzx  eax,ax
c0009800:	3d 18 03 00 00       	cmp    eax,0x318
c0009805:	75 0a                	jne    c0009811 <sendKeyboardToken(KeyboardToken)+0x14d>
c0009807:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000980d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009811:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009814:	0f b7 c0             	movzx  eax,ax
c0009817:	3d 19 03 00 00       	cmp    eax,0x319
c000981c:	75 0a                	jne    c0009828 <sendKeyboardToken(KeyboardToken)+0x164>
c000981e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0009824:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009828:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000982b:	0f b7 c0             	movzx  eax,ax
c000982e:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009833:	75 0a                	jne    c000983f <sendKeyboardToken(KeyboardToken)+0x17b>
c0009835:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000983b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000983f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009842:	0f b7 c0             	movzx  eax,ax
c0009845:	3d 1b 03 00 00       	cmp    eax,0x31b
c000984a:	75 0a                	jne    c0009856 <sendKeyboardToken(KeyboardToken)+0x192>
c000984c:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0009852:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009856:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009859:	0f b7 c0             	movzx  eax,ax
c000985c:	3d 1c 03 00 00       	cmp    eax,0x31c
c0009861:	75 0a                	jne    c000986d <sendKeyboardToken(KeyboardToken)+0x1a9>
c0009863:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0009869:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000986d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009870:	0f b7 c0             	movzx  eax,ax
c0009873:	3d 1d 03 00 00       	cmp    eax,0x31d
c0009878:	75 0a                	jne    c0009884 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000987a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0009880:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009884:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009887:	0f b7 c0             	movzx  eax,ax
c000988a:	3d 1e 03 00 00       	cmp    eax,0x31e
c000988f:	75 0a                	jne    c000989b <sendKeyboardToken(KeyboardToken)+0x1d7>
c0009891:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0009897:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000989b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000989e:	0f b7 c0             	movzx  eax,ax
c00098a1:	3d 1f 03 00 00       	cmp    eax,0x31f
c00098a6:	75 0a                	jne    c00098b2 <sendKeyboardToken(KeyboardToken)+0x1ee>
c00098a8:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00098ae:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098b5:	0f b7 c0             	movzx  eax,ax
c00098b8:	3d 20 03 00 00       	cmp    eax,0x320
c00098bd:	75 0a                	jne    c00098c9 <sendKeyboardToken(KeyboardToken)+0x205>
c00098bf:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00098c5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098cc:	0f b7 c0             	movzx  eax,ax
c00098cf:	3d 21 03 00 00       	cmp    eax,0x321
c00098d4:	75 0a                	jne    c00098e0 <sendKeyboardToken(KeyboardToken)+0x21c>
c00098d6:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00098dc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098e3:	0f b7 c0             	movzx  eax,ax
c00098e6:	3d 00 02 00 00       	cmp    eax,0x200
c00098eb:	75 2f                	jne    c000991c <sendKeyboardToken(KeyboardToken)+0x258>
c00098ed:	a0 40 a7 02 c0       	mov    al,ds:0xc002a740
c00098f2:	83 f0 01             	xor    eax,0x1
c00098f5:	0f b6 c0             	movzx  eax,al
c00098f8:	85 c0                	test   eax,eax
c00098fa:	74 20                	je     c000991c <sendKeyboardToken(KeyboardToken)+0x258>
c00098fc:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0009901:	6a 01                	push   0x1
c0009903:	6a 00                	push   0x0
c0009905:	68 24 95 00 c0       	push   0xc0009524
c000990a:	50                   	push   eax
c000990b:	e8 9c bc 00 00       	call   c00155ac <Process::createThread(void (*)(void*), void*, int)>
c0009910:	83 c4 10             	add    esp,0x10
c0009913:	c6 05 40 a7 02 c0 01 	mov    BYTE PTR ds:0xc002a740,0x1
c000991a:	eb 3a                	jmp    c0009956 <sendKeyboardToken(KeyboardToken)+0x292>
c000991c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000991f:	0f b7 c0             	movzx  eax,ax
c0009922:	3d 01 02 00 00       	cmp    eax,0x201
c0009927:	75 2d                	jne    c0009956 <sendKeyboardToken(KeyboardToken)+0x292>
c0009929:	a0 40 a7 02 c0       	mov    al,ds:0xc002a740
c000992e:	83 f0 01             	xor    eax,0x1
c0009931:	0f b6 c0             	movzx  eax,al
c0009934:	85 c0                	test   eax,eax
c0009936:	74 1e                	je     c0009956 <sendKeyboardToken(KeyboardToken)+0x292>
c0009938:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c000993d:	6a 01                	push   0x1
c000993f:	6a 00                	push   0x0
c0009941:	68 89 95 00 c0       	push   0xc0009589
c0009946:	50                   	push   eax
c0009947:	e8 60 bc 00 00       	call   c00155ac <Process::createThread(void (*)(void*), void*, int)>
c000994c:	83 c4 10             	add    esp,0x10
c000994f:	c6 05 40 a7 02 c0 01 	mov    BYTE PTR ds:0xc002a740,0x1
c0009956:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009959:	0f b7 c0             	movzx  eax,ax
c000995c:	3d 25 03 00 00       	cmp    eax,0x325
c0009961:	75 06                	jne    c0009969 <sendKeyboardToken(KeyboardToken)+0x2a5>
c0009963:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0009969:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000996c:	0f b7 c0             	movzx  eax,ax
c000996f:	3d 24 03 00 00       	cmp    eax,0x324
c0009974:	75 06                	jne    c000997c <sendKeyboardToken(KeyboardToken)+0x2b8>
c0009976:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000997c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000997f:	0f b7 c0             	movzx  eax,ax
c0009982:	3d 23 03 00 00       	cmp    eax,0x323
c0009987:	75 06                	jne    c000998f <sendKeyboardToken(KeyboardToken)+0x2cb>
c0009989:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000998f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009992:	0f b7 c0             	movzx  eax,ax
c0009995:	3d 26 03 00 00       	cmp    eax,0x326
c000999a:	75 06                	jne    c00099a2 <sendKeyboardToken(KeyboardToken)+0x2de>
c000999c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00099a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099a5:	0f b7 c0             	movzx  eax,ax
c00099a8:	3d 27 03 00 00       	cmp    eax,0x327
c00099ad:	75 06                	jne    c00099b5 <sendKeyboardToken(KeyboardToken)+0x2f1>
c00099af:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00099b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099b8:	0f b7 c0             	movzx  eax,ax
c00099bb:	3d 22 03 00 00       	cmp    eax,0x322
c00099c0:	75 06                	jne    c00099c8 <sendKeyboardToken(KeyboardToken)+0x304>
c00099c2:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00099c8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00099cc:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00099cf:	83 f0 01             	xor    eax,0x1
c00099d2:	0f b6 c0             	movzx  eax,al
c00099d5:	85 c0                	test   eax,eax
c00099d7:	74 7c                	je     c0009a55 <sendKeyboardToken(KeyboardToken)+0x391>
c00099d9:	a0 41 a4 02 c0       	mov    al,ds:0xc002a441
c00099de:	0f b6 c0             	movzx  eax,al
c00099e1:	85 c0                	test   eax,eax
c00099e3:	74 43                	je     c0009a28 <sendKeyboardToken(KeyboardToken)+0x364>
c00099e5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00099e9:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c00099ed:	85 c0                	test   eax,eax
c00099ef:	74 2b                	je     c0009a1c <sendKeyboardToken(KeyboardToken)+0x358>
c00099f1:	8b 15 44 a7 02 c0    	mov    edx,DWORD PTR ds:0xc002a744
c00099f7:	89 d0                	mov    eax,edx
c00099f9:	c1 e0 02             	shl    eax,0x2
c00099fc:	01 d0                	add    eax,edx
c00099fe:	01 c0                	add    eax,eax
c0009a00:	a3 44 a7 02 c0       	mov    ds:0xc002a744,eax
c0009a05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a08:	0f b7 c0             	movzx  eax,ax
c0009a0b:	8d 50 d0             	lea    edx,[eax-0x30]
c0009a0e:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a13:	01 d0                	add    eax,edx
c0009a15:	a3 44 a7 02 c0       	mov    ds:0xc002a744,eax
c0009a1a:	eb 71                	jmp    c0009a8d <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a1c:	c7 05 44 a7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a744,0x0
c0009a26:	eb 65                	jmp    c0009a8d <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a28:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a2d:	85 c0                	test   eax,eax
c0009a2f:	74 18                	je     c0009a49 <sendKeyboardToken(KeyboardToken)+0x385>
c0009a31:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a36:	0f b6 c0             	movzx  eax,al
c0009a39:	83 ec 0c             	sub    esp,0xc
c0009a3c:	50                   	push   eax
c0009a3d:	e8 ac fb ff ff       	call   c00095ee <sendKeyToTerminal(unsigned char)>
c0009a42:	83 c4 10             	add    esp,0x10
c0009a45:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a49:	c7 05 44 a7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a744,0x0
c0009a53:	eb 38                	jmp    c0009a8d <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a58:	0f b7 c0             	movzx  eax,ax
c0009a5b:	3d 01 01 00 00       	cmp    eax,0x101
c0009a60:	75 2b                	jne    c0009a8d <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a62:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a67:	85 c0                	test   eax,eax
c0009a69:	74 18                	je     c0009a83 <sendKeyboardToken(KeyboardToken)+0x3bf>
c0009a6b:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a70:	0f b6 c0             	movzx  eax,al
c0009a73:	83 ec 0c             	sub    esp,0xc
c0009a76:	50                   	push   eax
c0009a77:	e8 72 fb ff ff       	call   c00095ee <sendKeyToTerminal(unsigned char)>
c0009a7c:	83 c4 10             	add    esp,0x10
c0009a7f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a83:	c7 05 44 a7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a744,0x0
c0009a8d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009a90:	83 f0 01             	xor    eax,0x1
c0009a93:	0f b6 c0             	movzx  eax,al
c0009a96:	85 c0                	test   eax,eax
c0009a98:	74 5a                	je     c0009af4 <sendKeyboardToken(KeyboardToken)+0x430>
c0009a9a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009a9d:	83 f0 01             	xor    eax,0x1
c0009aa0:	0f b6 c0             	movzx  eax,al
c0009aa3:	85 c0                	test   eax,eax
c0009aa5:	74 4d                	je     c0009af4 <sendKeyboardToken(KeyboardToken)+0x430>
c0009aa7:	a0 40 a4 02 c0       	mov    al,ds:0xc002a440
c0009aac:	83 f0 01             	xor    eax,0x1
c0009aaf:	0f b6 c0             	movzx  eax,al
c0009ab2:	85 c0                	test   eax,eax
c0009ab4:	74 3e                	je     c0009af4 <sendKeyboardToken(KeyboardToken)+0x430>
c0009ab6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ab9:	0f b7 c0             	movzx  eax,ax
c0009abc:	83 f8 1f             	cmp    eax,0x1f
c0009abf:	76 0b                	jbe    c0009acc <sendKeyboardToken(KeyboardToken)+0x408>
c0009ac1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ac4:	0f b7 c0             	movzx  eax,ax
c0009ac7:	83 f8 7e             	cmp    eax,0x7e
c0009aca:	76 16                	jbe    c0009ae2 <sendKeyboardToken(KeyboardToken)+0x41e>
c0009acc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009acf:	0f b7 c0             	movzx  eax,ax
c0009ad2:	83 f8 0a             	cmp    eax,0xa
c0009ad5:	74 0b                	je     c0009ae2 <sendKeyboardToken(KeyboardToken)+0x41e>
c0009ad7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ada:	0f b7 c0             	movzx  eax,ax
c0009add:	83 f8 08             	cmp    eax,0x8
c0009ae0:	75 12                	jne    c0009af4 <sendKeyboardToken(KeyboardToken)+0x430>
c0009ae2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ae5:	0f b6 c0             	movzx  eax,al
c0009ae8:	83 ec 0c             	sub    esp,0xc
c0009aeb:	50                   	push   eax
c0009aec:	e8 fd fa ff ff       	call   c00095ee <sendKeyToTerminal(unsigned char)>
c0009af1:	83 c4 10             	add    esp,0x10
c0009af4:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009af7:	83 f0 01             	xor    eax,0x1
c0009afa:	0f b6 c0             	movzx  eax,al
c0009afd:	85 c0                	test   eax,eax
c0009aff:	74 5d                	je     c0009b5e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b01:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009b04:	83 f0 01             	xor    eax,0x1
c0009b07:	0f b6 c0             	movzx  eax,al
c0009b0a:	85 c0                	test   eax,eax
c0009b0c:	74 50                	je     c0009b5e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b0e:	a0 40 a4 02 c0       	mov    al,ds:0xc002a440
c0009b13:	0f b6 c0             	movzx  eax,al
c0009b16:	85 c0                	test   eax,eax
c0009b18:	74 44                	je     c0009b5e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b1d:	0f b7 c0             	movzx  eax,ax
c0009b20:	83 f8 3f             	cmp    eax,0x3f
c0009b23:	76 39                	jbe    c0009b5e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b28:	0f b7 c0             	movzx  eax,ax
c0009b2b:	83 f8 7f             	cmp    eax,0x7f
c0009b2e:	77 2e                	ja     c0009b5e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b33:	88 c2                	mov    dl,al
c0009b35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b38:	0f b7 c0             	movzx  eax,ax
c0009b3b:	83 f8 5f             	cmp    eax,0x5f
c0009b3e:	76 04                	jbe    c0009b44 <sendKeyboardToken(KeyboardToken)+0x480>
c0009b40:	b0 20                	mov    al,0x20
c0009b42:	eb 02                	jmp    c0009b46 <sendKeyboardToken(KeyboardToken)+0x482>
c0009b44:	b0 00                	mov    al,0x0
c0009b46:	89 d1                	mov    ecx,edx
c0009b48:	29 c1                	sub    ecx,eax
c0009b4a:	89 c8                	mov    eax,ecx
c0009b4c:	83 e8 40             	sub    eax,0x40
c0009b4f:	0f b6 c0             	movzx  eax,al
c0009b52:	83 ec 0c             	sub    esp,0xc
c0009b55:	50                   	push   eax
c0009b56:	e8 93 fa ff ff       	call   c00095ee <sendKeyToTerminal(unsigned char)>
c0009b5b:	83 c4 10             	add    esp,0x10
c0009b5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b61:	0f b7 c0             	movzx  eax,ax
c0009b64:	3d 00 03 00 00       	cmp    eax,0x300
c0009b69:	75 12                	jne    c0009b7d <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009b6b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009b6e:	83 f0 01             	xor    eax,0x1
c0009b71:	0f b6 c0             	movzx  eax,al
c0009b74:	85 c0                	test   eax,eax
c0009b76:	74 05                	je     c0009b7d <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009b78:	e8 6e 74 00 00       	call   c0010feb <doTerminalCycle()>
c0009b7d:	90                   	nop
c0009b7e:	c9                   	leave  
c0009b7f:	c3                   	ret    

c0009b80 <clearInternalKeybuffer(VgaText*)>:
c0009b80:	55                   	push   ebp
c0009b81:	89 e5                	mov    ebp,esp
c0009b83:	83 ec 08             	sub    esp,0x8
c0009b86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b89:	05 02 01 00 00       	add    eax,0x102
c0009b8e:	83 ec 0c             	sub    esp,0xc
c0009b91:	50                   	push   eax
c0009b92:	e8 d9 69 ff ff       	call   c0000570 <strlen>
c0009b97:	83 c4 10             	add    esp,0x10
c0009b9a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009b9d:	81 c2 02 01 00 00    	add    edx,0x102
c0009ba3:	83 ec 04             	sub    esp,0x4
c0009ba6:	50                   	push   eax
c0009ba7:	6a 00                	push   0x0
c0009ba9:	52                   	push   edx
c0009baa:	e8 41 69 ff ff       	call   c00004f0 <memset>
c0009baf:	83 c4 10             	add    esp,0x10
c0009bb2:	90                   	nop
c0009bb3:	c9                   	leave  
c0009bb4:	c3                   	ret    

c0009bb5 <readKeyboard(VgaText*, char*, unsigned long)>:
c0009bb5:	55                   	push   ebp
c0009bb6:	89 e5                	mov    ebp,esp
c0009bb8:	83 ec 18             	sub    esp,0x18
c0009bbb:	a1 28 a3 02 c0       	mov    eax,ds:0xc002a328
c0009bc0:	85 c0                	test   eax,eax
c0009bc2:	74 2a                	je     c0009bee <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0009bc4:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0009bca:	8b 0d 28 a3 02 c0    	mov    ecx,DWORD PTR ds:0xc002a328
c0009bd0:	83 ec 04             	sub    esp,0x4
c0009bd3:	68 40 a3 02 c0       	push   0xc002a340
c0009bd8:	83 ec 08             	sub    esp,0x8
c0009bdb:	89 e2                	mov    edx,esp
c0009bdd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0009be0:	89 02                	mov    DWORD PTR [edx],eax
c0009be2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009be5:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0009be9:	ff d1                	call   ecx
c0009beb:	83 c4 10             	add    esp,0x10
c0009bee:	fb                   	sti    
c0009bef:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009bf6:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0009bfa:	0f 84 08 01 00 00    	je     c0009d08 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c0009c00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c03:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c09:	0f be c0             	movsx  eax,al
c0009c0c:	85 c0                	test   eax,eax
c0009c0e:	75 27                	jne    c0009c37 <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c0009c10:	fa                   	cli    
c0009c11:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0009c16:	83 c0 01             	add    eax,0x1
c0009c19:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0009c1e:	e8 d9 bb 00 00       	call   c00157fc <schedule()>
c0009c23:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0009c2b:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0009c30:	85 c0                	test   eax,eax
c0009c32:	75 cc                	jne    c0009c00 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0009c34:	fb                   	sti    
c0009c35:	eb c9                	jmp    c0009c00 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0009c37:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009c3a:	8d 50 01             	lea    edx,[eax+0x1]
c0009c3d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0009c40:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009c43:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c0009c49:	88 10                	mov    BYTE PTR [eax],dl
c0009c4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c4e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c54:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0009c57:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009c5b:	83 f8 03             	cmp    eax,0x3
c0009c5e:	75 1e                	jne    c0009c7e <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c0009c60:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c65:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c67:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c6a:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009c70:	83 ec 08             	sub    esp,0x8
c0009c73:	6a 02                	push   0x2
c0009c75:	50                   	push   eax
c0009c76:	e8 64 62 00 00       	call   c000fedf <KeRaiseSignal(SigHandlerBlock*, int)>
c0009c7b:	83 c4 10             	add    esp,0x10
c0009c7e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009c82:	83 f8 1c             	cmp    eax,0x1c
c0009c85:	75 1e                	jne    c0009ca5 <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c0009c87:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c8e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c91:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009c97:	83 ec 08             	sub    esp,0x8
c0009c9a:	6a 09                	push   0x9
c0009c9c:	50                   	push   eax
c0009c9d:	e8 3d 62 00 00       	call   c000fedf <KeRaiseSignal(SigHandlerBlock*, int)>
c0009ca2:	83 c4 10             	add    esp,0x10
c0009ca5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ca8:	05 02 01 00 00       	add    eax,0x102
c0009cad:	83 ec 0c             	sub    esp,0xc
c0009cb0:	50                   	push   eax
c0009cb1:	e8 ba 68 ff ff       	call   c0000570 <strlen>
c0009cb6:	83 c4 10             	add    esp,0x10
c0009cb9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009cbc:	81 c2 02 01 00 00    	add    edx,0x102
c0009cc2:	8d 4a 01             	lea    ecx,[edx+0x1]
c0009cc5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009cc8:	81 c2 02 01 00 00    	add    edx,0x102
c0009cce:	83 ec 04             	sub    esp,0x4
c0009cd1:	50                   	push   eax
c0009cd2:	51                   	push   ecx
c0009cd3:	52                   	push   edx
c0009cd4:	e8 f7 66 ff ff       	call   c00003d0 <memmove>
c0009cd9:	83 c4 10             	add    esp,0x10
c0009cdc:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c0009ce0:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009ce4:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009ce8:	83 f8 0a             	cmp    eax,0xa
c0009ceb:	74 16                	je     c0009d03 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c0009ced:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009cf1:	83 f8 03             	cmp    eax,0x3
c0009cf4:	74 0d                	je     c0009d03 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c0009cf6:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009cfa:	83 f8 1c             	cmp    eax,0x1c
c0009cfd:	0f 85 f3 fe ff ff    	jne    c0009bf6 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0009d03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d06:	eb 03                	jmp    c0009d0b <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c0009d08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d0b:	c9                   	leave  
c0009d0c:	c3                   	ret    
c0009d0d:	90                   	nop

c0009d0e <Keyboard::Keyboard(char const*)>:
c0009d0e:	83 ec 0c             	sub    esp,0xc
c0009d11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d15:	83 ec 08             	sub    esp,0x8
c0009d18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d1c:	50                   	push   eax
c0009d1d:	e8 a2 f4 ff ff       	call   c00091c4 <Device::Device(char const*)>
c0009d22:	83 c4 10             	add    esp,0x10
c0009d25:	ba 04 1e 02 c0       	mov    edx,0xc0021e04
c0009d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d2e:	89 10                	mov    DWORD PTR [eax],edx
c0009d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d34:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0009d3e:	c6 05 24 a3 02 c0 01 	mov    BYTE PTR ds:0xc002a324,0x1
c0009d45:	90                   	nop
c0009d46:	83 c4 0c             	add    esp,0xc
c0009d49:	c3                   	ret    

c0009d4a <Keyboard::~Keyboard()>:
c0009d4a:	83 ec 0c             	sub    esp,0xc
c0009d4d:	ba 04 1e 02 c0       	mov    edx,0xc0021e04
c0009d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d56:	89 10                	mov    DWORD PTR [eax],edx
c0009d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d5c:	83 ec 0c             	sub    esp,0xc
c0009d5f:	50                   	push   eax
c0009d60:	e8 ff f1 ff ff       	call   c0008f64 <Device::~Device()>
c0009d65:	83 c4 10             	add    esp,0x10
c0009d68:	90                   	nop
c0009d69:	83 c4 0c             	add    esp,0xc
c0009d6c:	c3                   	ret    
c0009d6d:	90                   	nop

c0009d6e <Keyboard::~Keyboard()>:
c0009d6e:	83 ec 0c             	sub    esp,0xc
c0009d71:	83 ec 0c             	sub    esp,0xc
c0009d74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d78:	e8 cd ff ff ff       	call   c0009d4a <Keyboard::~Keyboard()>
c0009d7d:	83 c4 10             	add    esp,0x10
c0009d80:	83 ec 08             	sub    esp,0x8
c0009d83:	68 5c 01 00 00       	push   0x15c
c0009d88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d8c:	e8 c3 29 00 00       	call   c000c754 <operator delete(void*, unsigned long)>
c0009d91:	83 c4 10             	add    esp,0x10
c0009d94:	83 c4 0c             	add    esp,0xc
c0009d97:	c3                   	ret    

c0009d98 <LogicalDisk::close(int, int, void*)>:
c0009d98:	83 c8 ff             	or     eax,0xffffffff
c0009d9b:	c3                   	ret    

c0009d9c <LogicalDisk::~LogicalDisk()>:
c0009d9c:	83 ec 0c             	sub    esp,0xc
c0009d9f:	ba 7c 1e 02 c0       	mov    edx,0xc0021e7c
c0009da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009da8:	89 10                	mov    DWORD PTR [eax],edx
c0009daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dae:	83 ec 0c             	sub    esp,0xc
c0009db1:	50                   	push   eax
c0009db2:	e8 ad f1 ff ff       	call   c0008f64 <Device::~Device()>
c0009db7:	83 c4 10             	add    esp,0x10
c0009dba:	90                   	nop
c0009dbb:	83 c4 0c             	add    esp,0xc
c0009dbe:	c3                   	ret    
c0009dbf:	90                   	nop

c0009dc0 <LogicalDisk::~LogicalDisk()>:
c0009dc0:	83 ec 0c             	sub    esp,0xc
c0009dc3:	83 ec 0c             	sub    esp,0xc
c0009dc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dca:	e8 cd ff ff ff       	call   c0009d9c <LogicalDisk::~LogicalDisk()>
c0009dcf:	83 c4 10             	add    esp,0x10
c0009dd2:	83 ec 08             	sub    esp,0x8
c0009dd5:	68 78 01 00 00       	push   0x178
c0009dda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dde:	e8 71 29 00 00       	call   c000c754 <operator delete(void*, unsigned long)>
c0009de3:	83 c4 10             	add    esp,0x10
c0009de6:	83 c4 0c             	add    esp,0xc
c0009de9:	c3                   	ret    

c0009dea <LogicalDisk::open(int, int, void*)>:
c0009dea:	83 ec 18             	sub    esp,0x18
c0009ded:	68 30 1e 02 c0       	push   0xc0021e30
c0009df2:	e8 9f 4f 00 00       	call   c000ed96 <KePanic(char const*)>
c0009df7:	83 c8 ff             	or     eax,0xffffffff
c0009dfa:	83 c4 1c             	add    esp,0x1c
c0009dfd:	c3                   	ret    

c0009dfe <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0009dfe:	53                   	push   ebx
c0009dff:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009e03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009e0b:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0009e11:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0009e17:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0009e1d:	77 10                	ja     c0009e2f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0009e1f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0009e25:	89 d3                	mov    ebx,edx
c0009e27:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0009e2d:	72 05                	jb     c0009e34 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0009e2f:	83 c8 ff             	or     eax,0xffffffff
c0009e32:	89 c2                	mov    edx,eax
c0009e34:	5b                   	pop    ebx
c0009e35:	c3                   	ret    

c0009e36 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0009e36:	56                   	push   esi
c0009e37:	83 c8 ff             	or     eax,0xffffffff
c0009e3a:	53                   	push   ebx
c0009e3b:	89 c2                	mov    edx,eax
c0009e3d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009e41:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0009e45:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009e49:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0009e4f:	77 27                	ja     c0009e78 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e51:	89 d8                	mov    eax,ebx
c0009e53:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0009e59:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0009e5f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009e64:	89 c2                	mov    edx,eax
c0009e66:	73 10                	jae    c0009e78 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e68:	89 c8                	mov    eax,ecx
c0009e6a:	89 da                	mov    edx,ebx
c0009e6c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0009e72:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0009e78:	5b                   	pop    ebx
c0009e79:	5e                   	pop    esi
c0009e7a:	c3                   	ret    
c0009e7b:	90                   	nop

c0009e7c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0009e7c:	83 ec 1c             	sub    esp,0x1c
c0009e7f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009e83:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e8f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e93:	89 04 24             	mov    DWORD PTR [esp],eax
c0009e96:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009e9a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009e9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ea2:	83 ec 08             	sub    esp,0x8
c0009ea5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ea9:	50                   	push   eax
c0009eaa:	e8 15 f3 ff ff       	call   c00091c4 <Device::Device(char const*)>
c0009eaf:	83 c4 10             	add    esp,0x10
c0009eb2:	ba 7c 1e 02 c0       	mov    edx,0xc0021e7c
c0009eb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ebb:	89 10                	mov    DWORD PTR [eax],edx
c0009ebd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ec1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009ec8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ecc:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0009ed3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ed7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009ede:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ee2:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0009eec:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009ef0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ef4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009ef8:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0009efe:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0009f04:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009f08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009f0b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009f0f:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0009f15:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0009f1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f1f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009f23:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0009f29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f2d:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c0009f37:	90                   	nop
c0009f38:	83 c4 1c             	add    esp,0x1c
c0009f3b:	c3                   	ret    

c0009f3c <LogicalDisk::assignDriveLetter()>:
c0009f3c:	55                   	push   ebp
c0009f3d:	57                   	push   edi
c0009f3e:	56                   	push   esi
c0009f3f:	53                   	push   ebx
c0009f40:	83 ec 14             	sub    esp,0x14
c0009f43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f47:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0009f4d:	b0 41                	mov    al,0x41
c0009f4f:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c0009f55:	84 d2                	test   dl,dl
c0009f57:	75 02                	jne    c0009f5b <LogicalDisk::assignDriveLetter()+0x1f>
c0009f59:	b0 43                	mov    al,0x43
c0009f5b:	8b 3d 60 a7 02 c0    	mov    edi,DWORD PTR ds:0xc002a760
c0009f61:	0f b6 ca             	movzx  ecx,dl
c0009f64:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0009f68:	0f be e8             	movsx  ebp,al
c0009f6b:	8b 3d 64 a7 02 c0    	mov    edi,DWORD PTR ds:0xc002a764
c0009f71:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009f75:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0009f79:	3c 43                	cmp    al,0x43
c0009f7b:	75 10                	jne    c0009f8d <LogicalDisk::assignDriveLetter()+0x51>
c0009f7d:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0009f84:	75 5a                	jne    c0009fe0 <LogicalDisk::assignDriveLetter()+0xa4>
c0009f86:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009f8b:	75 53                	jne    c0009fe0 <LogicalDisk::assignDriveLetter()+0xa4>
c0009f8d:	8d 75 bf             	lea    esi,[ebp-0x41]
c0009f90:	ba 01 00 00 00       	mov    edx,0x1
c0009f95:	89 34 24             	mov    DWORD PTR [esp],esi
c0009f98:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c0009f9b:	d3 e2                	shl    edx,cl
c0009f9d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009fa1:	89 d7                	mov    edi,edx
c0009fa3:	89 d6                	mov    esi,edx
c0009fa5:	c1 ff 1f             	sar    edi,0x1f
c0009fa8:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c0009fac:	21 f9                	and    ecx,edi
c0009fae:	09 d1                	or     ecx,edx
c0009fb0:	75 2e                	jne    c0009fe0 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fb2:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0009fb6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009fba:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0009fc0:	09 f2                	or     edx,esi
c0009fc2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0009fc5:	89 15 60 a7 02 c0    	mov    DWORD PTR ds:0xc002a760,edx
c0009fcb:	89 1c b5 80 a7 02 c0 	mov    DWORD PTR [esi*4-0x3ffd5880],ebx
c0009fd2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009fd6:	09 fa                	or     edx,edi
c0009fd8:	89 15 64 a7 02 c0    	mov    DWORD PTR ds:0xc002a764,edx
c0009fde:	eb 0d                	jmp    c0009fed <LogicalDisk::assignDriveLetter()+0xb1>
c0009fe0:	8d 50 01             	lea    edx,[eax+0x1]
c0009fe3:	45                   	inc    ebp
c0009fe4:	88 d0                	mov    al,dl
c0009fe6:	80 fa 5b             	cmp    dl,0x5b
c0009fe9:	75 8e                	jne    c0009f79 <LogicalDisk::assignDriveLetter()+0x3d>
c0009feb:	31 c0                	xor    eax,eax
c0009fed:	83 c4 14             	add    esp,0x14
c0009ff0:	5b                   	pop    ebx
c0009ff1:	5e                   	pop    esi
c0009ff2:	5f                   	pop    edi
c0009ff3:	5d                   	pop    ebp
c0009ff4:	c3                   	ret    
c0009ff5:	90                   	nop

c0009ff6 <LogicalDisk::mount()>:
c0009ff6:	56                   	push   esi
c0009ff7:	53                   	push   ebx
c0009ff8:	53                   	push   ebx
c0009ff9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009ffd:	8b 1d 04 a3 02 c0    	mov    ebx,DWORD PTR ds:0xc002a304
c000a003:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a00d:	85 db                	test   ebx,ebx
c000a00f:	74 27                	je     c000a038 <LogicalDisk::mount()+0x42>
c000a011:	51                   	push   ecx
c000a012:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a019:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a01b:	83 e8 41             	sub    eax,0x41
c000a01e:	50                   	push   eax
c000a01f:	56                   	push   esi
c000a020:	53                   	push   ebx
c000a021:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a024:	83 c4 10             	add    esp,0x10
c000a027:	84 c0                	test   al,al
c000a029:	74 08                	je     c000a033 <LogicalDisk::mount()+0x3d>
c000a02b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a031:	eb 07                	jmp    c000a03a <LogicalDisk::mount()+0x44>
c000a033:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a036:	eb d5                	jmp    c000a00d <LogicalDisk::mount()+0x17>
c000a038:	31 c0                	xor    eax,eax
c000a03a:	5a                   	pop    edx
c000a03b:	5b                   	pop    ebx
c000a03c:	5e                   	pop    esi
c000a03d:	c3                   	ret    

c000a03e <LogicalDisk::unmount()>:
c000a03e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a042:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a04c:	c3                   	ret    
c000a04d:	90                   	nop

c000a04e <LogicalDisk::eject()>:
c000a04e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a052:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a058:	8b 10                	mov    edx,DWORD PTR [eax]
c000a05a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a05e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a061:	90                   	nop

c000a062 <LogicalDisk::unassignDriveLetter()>:
c000a062:	57                   	push   edi
c000a063:	56                   	push   esi
c000a064:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a068:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000a06f:	85 c9                	test   ecx,ecx
c000a071:	75 0f                	jne    c000a082 <LogicalDisk::unassignDriveLetter()+0x20>
c000a073:	c7 44 24 0c 54 1e 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021e54
c000a07b:	5e                   	pop    esi
c000a07c:	5f                   	pop    edi
c000a07d:	e9 14 4d 00 00       	jmp    c000ed96 <KePanic(char const*)>
c000a082:	83 e9 41             	sub    ecx,0x41
c000a085:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000a08c:	b8 01 00 00 00       	mov    eax,0x1
c000a091:	c7 04 8d 80 a7 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd5880],0x0
c000a09c:	d3 e0                	shl    eax,cl
c000a09e:	89 c7                	mov    edi,eax
c000a0a0:	f7 d0                	not    eax
c000a0a2:	c1 ff 1f             	sar    edi,0x1f
c000a0a5:	21 05 60 a7 02 c0    	and    DWORD PTR ds:0xc002a760,eax
c000a0ab:	89 fe                	mov    esi,edi
c000a0ad:	f7 d6                	not    esi
c000a0af:	21 35 64 a7 02 c0    	and    DWORD PTR ds:0xc002a764,esi
c000a0b5:	5e                   	pop    esi
c000a0b6:	5f                   	pop    edi
c000a0b7:	c3                   	ret    

c000a0b8 <LogicalDisk::read(unsigned long long, int, void*)>:
c000a0b8:	57                   	push   edi
c000a0b9:	56                   	push   esi
c000a0ba:	53                   	push   ebx
c000a0bb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a0bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a0c3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a0c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a0cb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a0d1:	77 41                	ja     c000a114 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000a0d3:	99                   	cdq    
c000a0d4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a0da:	01 c8                	add    eax,ecx
c000a0dc:	11 da                	adc    edx,ebx
c000a0de:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a0e4:	19 d7                	sbb    edi,edx
c000a0e6:	72 33                	jb     c000a11b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000a0e8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a0ee:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a0f4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a0f8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a0fc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a102:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a108:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a10c:	5b                   	pop    ebx
c000a10d:	5e                   	pop    esi
c000a10e:	5f                   	pop    edi
c000a10f:	e9 22 0b 00 00       	jmp    c000ac36 <VCache::read(unsigned long long, int, void*)>
c000a114:	b8 05 00 00 00       	mov    eax,0x5
c000a119:	eb 05                	jmp    c000a120 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000a11b:	b8 07 00 00 00       	mov    eax,0x7
c000a120:	5b                   	pop    ebx
c000a121:	5e                   	pop    esi
c000a122:	5f                   	pop    edi
c000a123:	c3                   	ret    

c000a124 <LogicalDisk::write(unsigned long long, int, void*)>:
c000a124:	57                   	push   edi
c000a125:	56                   	push   esi
c000a126:	53                   	push   ebx
c000a127:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a12b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a12f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a133:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a137:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a13d:	77 41                	ja     c000a180 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000a13f:	99                   	cdq    
c000a140:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a146:	01 c8                	add    eax,ecx
c000a148:	11 da                	adc    edx,ebx
c000a14a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a150:	19 d7                	sbb    edi,edx
c000a152:	72 33                	jb     c000a187 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000a154:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a15a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a160:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a164:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a168:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a16e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a174:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a178:	5b                   	pop    ebx
c000a179:	5e                   	pop    esi
c000a17a:	5f                   	pop    edi
c000a17b:	e9 b4 09 00 00       	jmp    c000ab34 <VCache::write(unsigned long long, int, void*)>
c000a180:	b8 05 00 00 00       	mov    eax,0x5
c000a185:	eb 05                	jmp    c000a18c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000a187:	b8 07 00 00 00       	mov    eax,0x7
c000a18c:	5b                   	pop    ebx
c000a18d:	5e                   	pop    esi
c000a18e:	5f                   	pop    edi
c000a18f:	c3                   	ret    

c000a190 <Mouse::Mouse(char const*)>:
c000a190:	83 ec 0c             	sub    esp,0xc
c000a193:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a197:	83 ec 08             	sub    esp,0x8
c000a19a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a19e:	50                   	push   eax
c000a19f:	e8 20 f0 ff ff       	call   c00091c4 <Device::Device(char const*)>
c000a1a4:	83 c4 10             	add    esp,0x10
c000a1a7:	ba a8 1e 02 c0       	mov    edx,0xc0021ea8
c000a1ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1b0:	89 10                	mov    DWORD PTR [eax],edx
c000a1b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1b6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000a1c0:	90                   	nop
c000a1c1:	83 c4 0c             	add    esp,0xc
c000a1c4:	c3                   	ret    
c000a1c5:	90                   	nop
c000a1c6:	66 90                	xchg   ax,ax

c000a1c8 <Mouse::~Mouse()>:
c000a1c8:	83 ec 0c             	sub    esp,0xc
c000a1cb:	ba a8 1e 02 c0       	mov    edx,0xc0021ea8
c000a1d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1d4:	89 10                	mov    DWORD PTR [eax],edx
c000a1d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1da:	83 ec 0c             	sub    esp,0xc
c000a1dd:	50                   	push   eax
c000a1de:	e8 81 ed ff ff       	call   c0008f64 <Device::~Device()>
c000a1e3:	83 c4 10             	add    esp,0x10
c000a1e6:	90                   	nop
c000a1e7:	83 c4 0c             	add    esp,0xc
c000a1ea:	c3                   	ret    
c000a1eb:	90                   	nop

c000a1ec <Mouse::~Mouse()>:
c000a1ec:	83 ec 0c             	sub    esp,0xc
c000a1ef:	83 ec 0c             	sub    esp,0xc
c000a1f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1f6:	e8 cd ff ff ff       	call   c000a1c8 <Mouse::~Mouse()>
c000a1fb:	83 c4 10             	add    esp,0x10
c000a1fe:	83 ec 08             	sub    esp,0x8
c000a201:	68 58 01 00 00       	push   0x158
c000a206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20a:	e8 45 25 00 00       	call   c000c754 <operator delete(void*, unsigned long)>
c000a20f:	83 c4 10             	add    esp,0x10
c000a212:	83 c4 0c             	add    esp,0xc
c000a215:	c3                   	ret    

c000a216 <NIC::getMAC()>:
c000a216:	31 c0                	xor    eax,eax
c000a218:	31 d2                	xor    edx,edx
c000a21a:	c3                   	ret    
c000a21b:	90                   	nop

c000a21c <NIC::write(int, unsigned char*, int*)>:
c000a21c:	b8 01 00 00 00       	mov    eax,0x1
c000a221:	c3                   	ret    

c000a222 <NIC::NIC(char const*)>:
c000a222:	83 ec 0c             	sub    esp,0xc
c000a225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a229:	83 ec 08             	sub    esp,0x8
c000a22c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a230:	50                   	push   eax
c000a231:	e8 8e ef ff ff       	call   c00091c4 <Device::Device(char const*)>
c000a236:	83 c4 10             	add    esp,0x10
c000a239:	ba d4 1e 02 c0       	mov    edx,0xc0021ed4
c000a23e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a242:	89 10                	mov    DWORD PTR [eax],edx
c000a244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a248:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000a252:	90                   	nop
c000a253:	83 c4 0c             	add    esp,0xc
c000a256:	c3                   	ret    
c000a257:	90                   	nop

c000a258 <NIC::~NIC()>:
c000a258:	83 ec 0c             	sub    esp,0xc
c000a25b:	ba d4 1e 02 c0       	mov    edx,0xc0021ed4
c000a260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a264:	89 10                	mov    DWORD PTR [eax],edx
c000a266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a26a:	83 ec 0c             	sub    esp,0xc
c000a26d:	50                   	push   eax
c000a26e:	e8 f1 ec ff ff       	call   c0008f64 <Device::~Device()>
c000a273:	83 c4 10             	add    esp,0x10
c000a276:	90                   	nop
c000a277:	83 c4 0c             	add    esp,0xc
c000a27a:	c3                   	ret    
c000a27b:	90                   	nop

c000a27c <NIC::~NIC()>:
c000a27c:	83 ec 0c             	sub    esp,0xc
c000a27f:	83 ec 0c             	sub    esp,0xc
c000a282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a286:	e8 cd ff ff ff       	call   c000a258 <NIC::~NIC()>
c000a28b:	83 c4 10             	add    esp,0x10
c000a28e:	83 ec 08             	sub    esp,0x8
c000a291:	68 58 01 00 00       	push   0x158
c000a296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a29a:	e8 b5 24 00 00       	call   c000c754 <operator delete(void*, unsigned long)>
c000a29f:	83 c4 10             	add    esp,0x10
c000a2a2:	83 c4 0c             	add    esp,0xc
c000a2a5:	c3                   	ret    

c000a2a6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a2a6:	55                   	push   ebp
c000a2a7:	57                   	push   edi
c000a2a8:	56                   	push   esi
c000a2a9:	53                   	push   ebx
c000a2aa:	81 ec 28 01 00 00    	sub    esp,0x128
c000a2b0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000a2b7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000a2be:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000a2c5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000a2cc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a2d0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000a2d4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a2db:	e8 e0 ef ff ff       	call   c00092c0 <Device::getName()>
c000a2e0:	5a                   	pop    edx
c000a2e1:	59                   	pop    ecx
c000a2e2:	50                   	push   eax
c000a2e3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000a2e7:	55                   	push   ebp
c000a2e8:	e8 53 63 ff ff       	call   c0000640 <strcpy>
c000a2ed:	5b                   	pop    ebx
c000a2ee:	58                   	pop    eax
c000a2ef:	68 00 1f 02 c0       	push   0xc0021f00
c000a2f4:	55                   	push   ebp
c000a2f5:	e8 46 65 ff ff       	call   c0000840 <strcat>
c000a2fa:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000a301:	e8 49 47 00 00       	call   c000ea4f <malloc>
c000a306:	83 c4 0c             	add    esp,0xc
c000a309:	89 c3                	mov    ebx,eax
c000a30b:	57                   	push   edi
c000a30c:	56                   	push   esi
c000a30d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a311:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a315:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000a31c:	55                   	push   ebp
c000a31d:	50                   	push   eax
c000a31e:	e8 59 fb ff ff       	call   c0009e7c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000a323:	83 c4 14             	add    esp,0x14
c000a326:	53                   	push   ebx
c000a327:	e8 10 fc ff ff       	call   c0009f3c <LogicalDisk::assignDriveLetter()>
c000a32c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a32f:	e8 c2 fc ff ff       	call   c0009ff6 <LogicalDisk::mount()>
c000a334:	58                   	pop    eax
c000a335:	5a                   	pop    edx
c000a336:	53                   	push   ebx
c000a337:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a33e:	e8 1f ed ff ff       	call   c0009062 <Device::addChild(Device*)>
c000a343:	81 c4 2c 01 00 00    	add    esp,0x12c
c000a349:	5b                   	pop    ebx
c000a34a:	5e                   	pop    esi
c000a34b:	5f                   	pop    edi
c000a34c:	5d                   	pop    ebp
c000a34d:	c3                   	ret    

c000a34e <createPartitionsForDisk(PhysicalDisk*)>:
c000a34e:	55                   	push   ebp
c000a34f:	57                   	push   edi
c000a350:	56                   	push   esi
c000a351:	53                   	push   ebx
c000a352:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000a358:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000a35f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000a365:	3d 00 02 00 00       	cmp    eax,0x200
c000a36a:	74 27                	je     c000a393 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000a36c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000a372:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000a378:	83 ec 10             	sub    esp,0x10
c000a37b:	0f a4 f7 0a          	shld   edi,esi,0xa
c000a37f:	99                   	cdq    
c000a380:	c1 e6 0a             	shl    esi,0xa
c000a383:	52                   	push   edx
c000a384:	89 fd                	mov    ebp,edi
c000a386:	50                   	push   eax
c000a387:	55                   	push   ebp
c000a388:	56                   	push   esi
c000a389:	e8 b6 5d 01 00       	call   c0020144 <__udivdi3>
c000a38e:	e9 b9 00 00 00       	jmp    c000a44c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a393:	83 ec 0c             	sub    esp,0xc
c000a396:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a398:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000a39c:	56                   	push   esi
c000a39d:	6a 01                	push   0x1
c000a39f:	6a 00                	push   0x0
c000a3a1:	6a 00                	push   0x0
c000a3a3:	53                   	push   ebx
c000a3a4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000a3a7:	83 c4 20             	add    esp,0x20
c000a3aa:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000a3b2:	75 0a                	jne    c000a3be <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000a3b4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000a3bc:	74 2c                	je     c000a3ea <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000a3be:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a3c4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a3ca:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a3d0:	83 ec 10             	sub    esp,0x10
c000a3d3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a3d7:	89 f7                	mov    edi,esi
c000a3d9:	c1 e0 0a             	shl    eax,0xa
c000a3dc:	c1 ff 1f             	sar    edi,0x1f
c000a3df:	57                   	push   edi
c000a3e0:	56                   	push   esi
c000a3e1:	52                   	push   edx
c000a3e2:	50                   	push   eax
c000a3e3:	e8 5c 5d 01 00       	call   c0020144 <__udivdi3>
c000a3e8:	eb 62                	jmp    c000a44c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a3ea:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000a3f1:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000a3f8:	89 cf                	mov    edi,ecx
c000a3fa:	83 e2 7f             	and    edx,0x7f
c000a3fd:	83 e7 7f             	and    edi,0x7f
c000a400:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000a407:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000a40a:	83 e0 7f             	and    eax,0x7f
c000a40d:	8d 14 01             	lea    edx,[ecx+eax*1]
c000a410:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000a417:	83 e0 7f             	and    eax,0x7f
c000a41a:	01 d0                	add    eax,edx
c000a41c:	89 c5                	mov    ebp,eax
c000a41e:	84 c0                	test   al,al
c000a420:	74 41                	je     c000a463 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000a422:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a428:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a42e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a434:	83 ec 10             	sub    esp,0x10
c000a437:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a43b:	89 f7                	mov    edi,esi
c000a43d:	c1 e0 0a             	shl    eax,0xa
c000a440:	c1 ff 1f             	sar    edi,0x1f
c000a443:	57                   	push   edi
c000a444:	56                   	push   esi
c000a445:	52                   	push   edx
c000a446:	50                   	push   eax
c000a447:	e8 f8 5c 01 00       	call   c0020144 <__udivdi3>
c000a44c:	83 c4 14             	add    esp,0x14
c000a44f:	52                   	push   edx
c000a450:	50                   	push   eax
c000a451:	6a 00                	push   0x0
c000a453:	6a 00                	push   0x0
c000a455:	53                   	push   ebx
c000a456:	e8 4b fe ff ff       	call   c000a2a6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a45b:	83 c4 20             	add    esp,0x20
c000a45e:	e9 73 01 00 00       	jmp    c000a5d6 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000a463:	89 f0                	mov    eax,esi
c000a465:	31 c9                	xor    ecx,ecx
c000a467:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000a46e:	75 02                	jne    c000a472 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000a470:	89 cd                	mov    ebp,ecx
c000a472:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000a479:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000a480:	c1 e2 08             	shl    edx,0x8
c000a483:	c1 e6 10             	shl    esi,0x10
c000a486:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000a48e:	09 f2                	or     edx,esi
c000a490:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000a498:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000a49f:	83 c0 10             	add    eax,0x10
c000a4a2:	09 f2                	or     edx,esi
c000a4a4:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000a4ab:	c1 e6 18             	shl    esi,0x18
c000a4ae:	09 f2                	or     edx,esi
c000a4b0:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000a4b7:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000a4bb:	c1 e6 10             	shl    esi,0x10
c000a4be:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000a4c5:	c1 e2 08             	shl    edx,0x8
c000a4c8:	09 f2                	or     edx,esi
c000a4ca:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000a4d1:	09 f2                	or     edx,esi
c000a4d3:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000a4da:	c1 e6 18             	shl    esi,0x18
c000a4dd:	09 f2                	or     edx,esi
c000a4df:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000a4e3:	41                   	inc    ecx
c000a4e4:	83 f9 04             	cmp    ecx,0x4
c000a4e7:	0f 85 7a ff ff ff    	jne    c000a467 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000a4ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4f1:	83 f0 01             	xor    eax,0x1
c000a4f4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000a4f8:	75 4f                	jne    c000a549 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a4fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a4fe:	83 f0 01             	xor    eax,0x1
c000a501:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000a505:	75 42                	jne    c000a549 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a507:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000a50f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a517:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a51d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a523:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a529:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a52d:	89 f7                	mov    edi,esi
c000a52f:	c1 e0 0a             	shl    eax,0xa
c000a532:	c1 ff 1f             	sar    edi,0x1f
c000a535:	57                   	push   edi
c000a536:	56                   	push   esi
c000a537:	52                   	push   edx
c000a538:	50                   	push   eax
c000a539:	e8 06 5c 01 00       	call   c0020144 <__udivdi3>
c000a53e:	83 c4 10             	add    esp,0x10
c000a541:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a545:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a549:	89 e8                	mov    eax,ebp
c000a54b:	0f b6 e8             	movzx  ebp,al
c000a54e:	85 ed                	test   ebp,ebp
c000a550:	74 50                	je     c000a5a2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000a552:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a556:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a55a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a55e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000a562:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a566:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a56a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a56e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a576:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a57a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a57e:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000a582:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000a586:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a58a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a58e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a592:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000a596:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000a59a:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000a59e:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000a5a2:	31 ed                	xor    ebp,ebp
c000a5a4:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a5a8:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a5ac:	89 f8                	mov    eax,edi
c000a5ae:	09 f0                	or     eax,esi
c000a5b0:	74 1e                	je     c000a5d0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5b2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a5b6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a5ba:	89 d1                	mov    ecx,edx
c000a5bc:	09 c1                	or     ecx,eax
c000a5be:	74 10                	je     c000a5d0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5c0:	83 ec 0c             	sub    esp,0xc
c000a5c3:	57                   	push   edi
c000a5c4:	56                   	push   esi
c000a5c5:	52                   	push   edx
c000a5c6:	50                   	push   eax
c000a5c7:	53                   	push   ebx
c000a5c8:	e8 d9 fc ff ff       	call   c000a2a6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a5cd:	83 c4 20             	add    esp,0x20
c000a5d0:	45                   	inc    ebp
c000a5d1:	83 fd 04             	cmp    ebp,0x4
c000a5d4:	75 ce                	jne    c000a5a4 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000a5d6:	81 c4 5c 02 00 00    	add    esp,0x25c
c000a5dc:	5b                   	pop    ebx
c000a5dd:	5e                   	pop    esi
c000a5de:	5f                   	pop    edi
c000a5df:	5d                   	pop    ebp
c000a5e0:	c3                   	ret    
c000a5e1:	66 90                	xchg   ax,ax
c000a5e3:	90                   	nop

c000a5e4 <Serial::Serial(char const*)>:
c000a5e4:	83 ec 0c             	sub    esp,0xc
c000a5e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a5eb:	83 ec 08             	sub    esp,0x8
c000a5ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a5f2:	50                   	push   eax
c000a5f3:	e8 cc eb ff ff       	call   c00091c4 <Device::Device(char const*)>
c000a5f8:	83 c4 10             	add    esp,0x10
c000a5fb:	ba 14 1f 02 c0       	mov    edx,0xc0021f14
c000a600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a604:	89 10                	mov    DWORD PTR [eax],edx
c000a606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a60a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000a614:	90                   	nop
c000a615:	83 c4 0c             	add    esp,0xc
c000a618:	c3                   	ret    
c000a619:	90                   	nop
c000a61a:	66 90                	xchg   ax,ax

c000a61c <Serial::~Serial()>:
c000a61c:	83 ec 0c             	sub    esp,0xc
c000a61f:	ba 14 1f 02 c0       	mov    edx,0xc0021f14
c000a624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a628:	89 10                	mov    DWORD PTR [eax],edx
c000a62a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a62e:	83 ec 0c             	sub    esp,0xc
c000a631:	50                   	push   eax
c000a632:	e8 2d e9 ff ff       	call   c0008f64 <Device::~Device()>
c000a637:	83 c4 10             	add    esp,0x10
c000a63a:	90                   	nop
c000a63b:	83 c4 0c             	add    esp,0xc
c000a63e:	c3                   	ret    
c000a63f:	90                   	nop

c000a640 <Serial::~Serial()>:
c000a640:	83 ec 0c             	sub    esp,0xc
c000a643:	83 ec 0c             	sub    esp,0xc
c000a646:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a64a:	e8 cd ff ff ff       	call   c000a61c <Serial::~Serial()>
c000a64f:	83 c4 10             	add    esp,0x10
c000a652:	83 ec 08             	sub    esp,0x8
c000a655:	68 58 01 00 00       	push   0x158
c000a65a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65e:	e8 f1 20 00 00       	call   c000c754 <operator delete(void*, unsigned long)>
c000a663:	83 c4 10             	add    esp,0x10
c000a666:	83 c4 0c             	add    esp,0xc
c000a669:	c3                   	ret    
c000a66a:	66 90                	xchg   ax,ax

c000a66c <Timer::Timer(char const*)>:
c000a66c:	83 ec 0c             	sub    esp,0xc
c000a66f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a673:	83 ec 08             	sub    esp,0x8
c000a676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a67a:	50                   	push   eax
c000a67b:	e8 44 eb ff ff       	call   c00091c4 <Device::Device(char const*)>
c000a680:	83 c4 10             	add    esp,0x10
c000a683:	ba 78 20 02 c0       	mov    edx,0xc0022078
c000a688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a68c:	89 10                	mov    DWORD PTR [eax],edx
c000a68e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a692:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000a69c:	90                   	nop
c000a69d:	83 c4 0c             	add    esp,0xc
c000a6a0:	c3                   	ret    
c000a6a1:	90                   	nop
c000a6a2:	66 90                	xchg   ax,ax

c000a6a4 <Timer::~Timer()>:
c000a6a4:	83 ec 0c             	sub    esp,0xc
c000a6a7:	ba 78 20 02 c0       	mov    edx,0xc0022078
c000a6ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6b0:	89 10                	mov    DWORD PTR [eax],edx
c000a6b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6b6:	83 ec 0c             	sub    esp,0xc
c000a6b9:	50                   	push   eax
c000a6ba:	e8 a5 e8 ff ff       	call   c0008f64 <Device::~Device()>
c000a6bf:	83 c4 10             	add    esp,0x10
c000a6c2:	90                   	nop
c000a6c3:	83 c4 0c             	add    esp,0xc
c000a6c6:	c3                   	ret    
c000a6c7:	90                   	nop

c000a6c8 <Timer::~Timer()>:
c000a6c8:	83 ec 0c             	sub    esp,0xc
c000a6cb:	83 ec 0c             	sub    esp,0xc
c000a6ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6d2:	e8 cd ff ff ff       	call   c000a6a4 <Timer::~Timer()>
c000a6d7:	83 c4 10             	add    esp,0x10
c000a6da:	83 ec 08             	sub    esp,0x8
c000a6dd:	68 5c 01 00 00       	push   0x15c
c000a6e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6e6:	e8 69 20 00 00       	call   c000c754 <operator delete(void*, unsigned long)>
c000a6eb:	83 c4 10             	add    esp,0x10
c000a6ee:	83 c4 0c             	add    esp,0xc
c000a6f1:	c3                   	ret    

c000a6f2 <Timer::read()>:
c000a6f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6f6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a6fc:	c3                   	ret    

c000a6fd <setupTimer(int)>:
c000a6fd:	53                   	push   ebx
c000a6fe:	83 ec 14             	sub    esp,0x14
c000a701:	68 5c 01 00 00       	push   0x15c
c000a706:	e8 44 43 00 00       	call   c000ea4f <malloc>
c000a70b:	89 04 24             	mov    DWORD PTR [esp],eax
c000a70e:	89 c3                	mov    ebx,eax
c000a710:	e8 b7 52 01 00       	call   c001f9cc <PIT::PIT()>
c000a715:	58                   	pop    eax
c000a716:	5a                   	pop    edx
c000a717:	53                   	push   ebx
c000a718:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c000a71e:	e8 3f e9 ff ff       	call   c0009062 <Device::addChild(Device*)>
c000a723:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a725:	6a 00                	push   0x0
c000a727:	6a 00                	push   0x0
c000a729:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a72d:	53                   	push   ebx
c000a72e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a731:	89 d8                	mov    eax,ebx
c000a733:	83 c4 28             	add    esp,0x28
c000a736:	5b                   	pop    ebx
c000a737:	c3                   	ret    

c000a738 <timerHandler(unsigned int)>:
c000a738:	57                   	push   edi
c000a739:	56                   	push   esi
c000a73a:	53                   	push   ebx
c000a73b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a73f:	51                   	push   ecx
c000a740:	51                   	push   ecx
c000a741:	ff 35 b0 d6 02 c0    	push   DWORD PTR ds:0xc002d6b0
c000a747:	68 a3 1f 02 c0       	push   0xc0021fa3
c000a74c:	e8 13 c8 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000a751:	c7 04 24 bd 1f 02 c0 	mov    DWORD PTR [esp],0xc0021fbd
c000a758:	e8 07 c8 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000a75d:	01 35 ec a7 02 c0    	add    DWORD PTR ds:0xc002a7ec,esi
c000a763:	83 c4 10             	add    esp,0x10
c000a766:	80 3d 75 ad 02 c0 00 	cmp    BYTE PTR ds:0xc002ad75,0x0
c000a76d:	75 11                	jne    c000a780 <timerHandler(unsigned int)+0x48>
c000a76f:	c7 44 24 10 cd 1f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021fcd
c000a777:	5b                   	pop    ebx
c000a778:	5e                   	pop    esi
c000a779:	5f                   	pop    edi
c000a77a:	e9 e5 c7 ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c000a77f:	90                   	nop
c000a780:	fa                   	cli    
c000a781:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000a786:	40                   	inc    eax
c000a787:	52                   	push   edx
c000a788:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	68 e1 1f 02 c0       	push   0xc0021fe1
c000a794:	e8 cb c7 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000a799:	c7 04 24 c0 d6 02 c0 	mov    DWORD PTR [esp],0xc002d6c0
c000a7a0:	e8 37 5d 01 00       	call   c00204dc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a7a5:	83 c4 10             	add    esp,0x10
c000a7a8:	84 c0                	test   al,al
c000a7aa:	0f 85 a0 00 00 00    	jne    c000a850 <timerHandler(unsigned int)+0x118>
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a7b8:	e8 3b 5d 01 00       	call   c00204f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	89 c7                	mov    edi,eax
c000a7c2:	66 90                	xchg   ax,ax
c000a7c4:	83 ec 0c             	sub    esp,0xc
c000a7c7:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a7cc:	e8 27 5d 01 00       	call   c00204f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7d1:	c7 04 24 c0 d6 02 c0 	mov    DWORD PTR [esp],0xc002d6c0
c000a7d8:	89 c3                	mov    ebx,eax
c000a7da:	e8 21 5d 01 00       	call   c0020500 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000a7df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000a7e2:	83 c4 10             	add    esp,0x10
c000a7e5:	3b 05 ec a7 02 c0    	cmp    eax,DWORD PTR ds:0xc002a7ec
c000a7eb:	77 23                	ja     c000a810 <timerHandler(unsigned int)+0xd8>
c000a7ed:	83 ec 0c             	sub    esp,0xc
c000a7f0:	53                   	push   ebx
c000a7f1:	e8 26 b3 00 00       	call   c0015b1c <unblockTask(ThreadControlBlock*)>
c000a7f6:	83 c4 10             	add    esp,0x10
c000a7f9:	39 df                	cmp    edi,ebx
c000a7fb:	75 27                	jne    c000a824 <timerHandler(unsigned int)+0xec>
c000a7fd:	83 ec 0c             	sub    esp,0xc
c000a800:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a805:	e8 ee 5c 01 00       	call   c00204f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a80a:	89 c7                	mov    edi,eax
c000a80c:	eb 12                	jmp    c000a820 <timerHandler(unsigned int)+0xe8>
c000a80e:	66 90                	xchg   ax,ax
c000a810:	50                   	push   eax
c000a811:	50                   	push   eax
c000a812:	53                   	push   ebx
c000a813:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a818:	e8 9f 5d 01 00       	call   c00205bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000a81d:	8d 76 00             	lea    esi,[esi+0x0]
c000a820:	83 c4 10             	add    esp,0x10
c000a823:	90                   	nop
c000a824:	83 ec 0c             	sub    esp,0xc
c000a827:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a82c:	e8 ab 5c 01 00       	call   c00204dc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a831:	83 c4 10             	add    esp,0x10
c000a834:	84 c0                	test   al,al
c000a836:	75 18                	jne    c000a850 <timerHandler(unsigned int)+0x118>
c000a838:	83 ec 0c             	sub    esp,0xc
c000a83b:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a840:	e8 b3 5c 01 00       	call   c00204f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a845:	83 c4 10             	add    esp,0x10
c000a848:	39 f8                	cmp    eax,edi
c000a84a:	0f 85 74 ff ff ff    	jne    c000a7c4 <timerHandler(unsigned int)+0x8c>
c000a850:	57                   	push   edi
c000a851:	57                   	push   edi
c000a852:	ff 35 b0 d6 02 c0    	push   DWORD PTR ds:0xc002d6b0
c000a858:	68 fd 1f 02 c0       	push   0xc0021ffd
c000a85d:	e8 02 c7 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000a862:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000a868:	83 c4 10             	add    esp,0x10
c000a86b:	8b 42 34             	mov    eax,DWORD PTR [edx+0x34]
c000a86e:	85 c0                	test   eax,eax
c000a870:	74 4a                	je     c000a8bc <timerHandler(unsigned int)+0x184>
c000a872:	80 3d 74 ad 02 c0 00 	cmp    BYTE PTR ds:0xc002ad74,0x0
c000a879:	74 41                	je     c000a8bc <timerHandler(unsigned int)+0x184>
c000a87b:	29 f0                	sub    eax,esi
c000a87d:	8b 0d ec a7 02 c0    	mov    ecx,DWORD PTR ds:0xc002a7ec
c000a883:	89 42 34             	mov    DWORD PTR [edx+0x34],eax
c000a886:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a88b:	39 48 34             	cmp    DWORD PTR [eax+0x34],ecx
c000a88e:	77 2c                	ja     c000a8bc <timerHandler(unsigned int)+0x184>
c000a890:	52                   	push   edx
c000a891:	52                   	push   edx
c000a892:	ff 35 b0 d6 02 c0    	push   DWORD PTR ds:0xc002d6b0
c000a898:	68 19 20 02 c0       	push   0xc0022019
c000a89d:	e8 c2 c6 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000a8a2:	e8 55 af 00 00       	call   c00157fc <schedule()>
c000a8a7:	59                   	pop    ecx
c000a8a8:	5b                   	pop    ebx
c000a8a9:	ff 35 b0 d6 02 c0    	push   DWORD PTR ds:0xc002d6b0
c000a8af:	68 35 20 02 c0       	push   0xc0022035
c000a8b4:	e8 ab c6 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000a8b9:	83 c4 10             	add    esp,0x10
c000a8bc:	50                   	push   eax
c000a8bd:	50                   	push   eax
c000a8be:	ff 35 b0 d6 02 c0    	push   DWORD PTR ds:0xc002d6b0
c000a8c4:	68 51 20 02 c0       	push   0xc0022051
c000a8c9:	e8 96 c6 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000a8ce:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000a8d5:	83 c4 10             	add    esp,0x10
c000a8d8:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000a8df:	75 03                	jne    c000a8e4 <timerHandler(unsigned int)+0x1ac>
c000a8e1:	fb                   	sti    
c000a8e2:	66 90                	xchg   ax,ax
c000a8e4:	5b                   	pop    ebx
c000a8e5:	5e                   	pop    esi
c000a8e6:	5f                   	pop    edi
c000a8e7:	c3                   	ret    

c000a8e8 <VCache::VCache(PhysicalDisk*)>:
c000a8e8:	53                   	push   ebx
c000a8e9:	83 ec 18             	sub    esp,0x18
c000a8ec:	ba e8 20 02 c0       	mov    edx,0xc00220e8
c000a8f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8f5:	89 10                	mov    DWORD PTR [eax],edx
c000a8f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8fb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000a902:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a906:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000a90d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a911:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000a918:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000a91f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a923:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000a92a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000a931:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a935:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000a93c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a940:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000a944:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a948:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000a94f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000a956:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a95a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a95e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a962:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000a966:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a96a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000a96e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a972:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000a979:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000a981:	83 ec 0c             	sub    esp,0xc
c000a984:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a988:	e8 c2 40 00 00       	call   c000ea4f <malloc>
c000a98d:	83 c4 10             	add    esp,0x10
c000a990:	89 c3                	mov    ebx,eax
c000a992:	83 ec 0c             	sub    esp,0xc
c000a995:	53                   	push   ebx
c000a996:	e8 e1 43 00 00       	call   c000ed7c <Mutex::Mutex()>
c000a99b:	83 c4 10             	add    esp,0x10
c000a99e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9a2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000a9a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9a9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000a9ad:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000a9b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9b4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000a9bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9bf:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000a9c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9c9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a9cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9d0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000a9d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a9dc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a9e0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000a9e3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000a9e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9ea:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a9ee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9f2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000a9f8:	05 00 01 00 00       	add    eax,0x100
c000a9fd:	c1 e0 04             	shl    eax,0x4
c000aa00:	83 ec 0c             	sub    esp,0xc
c000aa03:	50                   	push   eax
c000aa04:	e8 46 40 00 00       	call   c000ea4f <malloc>
c000aa09:	83 c4 10             	add    esp,0x10
c000aa0c:	89 c2                	mov    edx,eax
c000aa0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aa12:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000aa15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aa19:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000aa20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aa24:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000aa28:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa2c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000aa32:	89 d0                	mov    eax,edx
c000aa34:	c1 e0 02             	shl    eax,0x2
c000aa37:	01 d0                	add    eax,edx
c000aa39:	c1 e0 04             	shl    eax,0x4
c000aa3c:	83 ec 0c             	sub    esp,0xc
c000aa3f:	50                   	push   eax
c000aa40:	e8 0a 40 00 00       	call   c000ea4f <malloc>
c000aa45:	83 c4 10             	add    esp,0x10
c000aa48:	89 c2                	mov    edx,eax
c000aa4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aa4e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000aa51:	90                   	nop
c000aa52:	83 c4 18             	add    esp,0x18
c000aa55:	5b                   	pop    ebx
c000aa56:	c3                   	ret    
c000aa57:	90                   	nop

c000aa58 <VCache::invalidateReadBuffer()>:
c000aa58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa5c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000aa62:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000aa66:	c3                   	ret    
c000aa67:	90                   	nop

c000aa68 <VCache::writeWriteBuffer()>:
c000aa68:	53                   	push   ebx
c000aa69:	83 ec 08             	sub    esp,0x8
c000aa6c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aa70:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000aa74:	74 1e                	je     c000aa94 <VCache::writeWriteBuffer()+0x2c>
c000aa76:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000aa79:	83 ec 0c             	sub    esp,0xc
c000aa7c:	8b 10                	mov    edx,DWORD PTR [eax]
c000aa7e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000aa81:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000aa84:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000aa87:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000aa8a:	50                   	push   eax
c000aa8b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000aa8e:	83 c4 20             	add    esp,0x20
c000aa91:	8d 76 00             	lea    esi,[esi+0x0]
c000aa94:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000aa9b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000aaa2:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000aaa6:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000aaad:	83 c4 08             	add    esp,0x8
c000aab0:	5b                   	pop    ebx
c000aab1:	c3                   	ret    
c000aab2:	66 90                	xchg   ax,ax

c000aab4 <VCache::~VCache()>:
c000aab4:	83 ec 0c             	sub    esp,0xc
c000aab7:	ba e8 20 02 c0       	mov    edx,0xc00220e8
c000aabc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aac0:	89 10                	mov    DWORD PTR [eax],edx
c000aac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aac6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000aac9:	0f b6 c0             	movzx  eax,al
c000aacc:	85 c0                	test   eax,eax
c000aace:	74 10                	je     c000aae0 <VCache::~VCache()+0x2c>
c000aad0:	83 ec 0c             	sub    esp,0xc
c000aad3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aad7:	e8 8c ff ff ff       	call   c000aa68 <VCache::writeWriteBuffer()>
c000aadc:	83 c4 10             	add    esp,0x10
c000aadf:	90                   	nop
c000aae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000aae7:	83 ec 0c             	sub    esp,0xc
c000aaea:	50                   	push   eax
c000aaeb:	e8 6f 3f 00 00       	call   c000ea5f <free>
c000aaf0:	83 c4 10             	add    esp,0x10
c000aaf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaf7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000aafa:	83 ec 0c             	sub    esp,0xc
c000aafd:	50                   	push   eax
c000aafe:	e8 5c 3f 00 00       	call   c000ea5f <free>
c000ab03:	83 c4 10             	add    esp,0x10
c000ab06:	90                   	nop
c000ab07:	83 c4 0c             	add    esp,0xc
c000ab0a:	c3                   	ret    
c000ab0b:	90                   	nop

c000ab0c <VCache::~VCache()>:
c000ab0c:	83 ec 0c             	sub    esp,0xc
c000ab0f:	83 ec 0c             	sub    esp,0xc
c000ab12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab16:	e8 99 ff ff ff       	call   c000aab4 <VCache::~VCache()>
c000ab1b:	83 c4 10             	add    esp,0x10
c000ab1e:	83 ec 08             	sub    esp,0x8
c000ab21:	6a 44                	push   0x44
c000ab23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab27:	e8 28 1c 00 00       	call   c000c754 <operator delete(void*, unsigned long)>
c000ab2c:	83 c4 10             	add    esp,0x10
c000ab2f:	83 c4 0c             	add    esp,0xc
c000ab32:	c3                   	ret    
c000ab33:	90                   	nop

c000ab34 <VCache::write(unsigned long long, int, void*)>:
c000ab34:	55                   	push   ebp
c000ab35:	57                   	push   edi
c000ab36:	56                   	push   esi
c000ab37:	53                   	push   ebx
c000ab38:	83 ec 0c             	sub    esp,0xc
c000ab3b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ab3f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ab43:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000ab47:	e8 18 aa 00 00       	call   c0015564 <KeDisablePreemption()>
c000ab4c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ab50:	74 0e                	je     c000ab60 <VCache::write(unsigned long long, int, void*)+0x2c>
c000ab52:	83 ec 0c             	sub    esp,0xc
c000ab55:	53                   	push   ebx
c000ab56:	e8 fd fe ff ff       	call   c000aa58 <VCache::invalidateReadBuffer()>
c000ab5b:	83 c4 10             	add    esp,0x10
c000ab5e:	66 90                	xchg   ax,ax
c000ab60:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ab64:	74 5e                	je     c000abc4 <VCache::write(unsigned long long, int, void*)+0x90>
c000ab66:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000ab69:	89 e8                	mov    eax,ebp
c000ab6b:	99                   	cdq    
c000ab6c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000ab6f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000ab72:	89 c1                	mov    ecx,eax
c000ab74:	89 d0                	mov    eax,edx
c000ab76:	31 f1                	xor    ecx,esi
c000ab78:	31 f8                	xor    eax,edi
c000ab7a:	09 c1                	or     ecx,eax
c000ab7c:	75 3a                	jne    c000abb8 <VCache::write(unsigned long long, int, void*)+0x84>
c000ab7e:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c000ab83:	75 33                	jne    c000abb8 <VCache::write(unsigned long long, int, void*)+0x84>
c000ab85:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ab88:	89 ef                	mov    edi,ebp
c000ab8a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ab90:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ab94:	0f af f9             	imul   edi,ecx
c000ab97:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000ab9a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ab9c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000ab9f:	40                   	inc    eax
c000aba0:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000aba3:	83 f8 50             	cmp    eax,0x50
c000aba6:	75 7c                	jne    c000ac24 <VCache::write(unsigned long long, int, void*)+0xf0>
c000aba8:	83 ec 0c             	sub    esp,0xc
c000abab:	53                   	push   ebx
c000abac:	e8 b7 fe ff ff       	call   c000aa68 <VCache::writeWriteBuffer()>
c000abb1:	83 c4 10             	add    esp,0x10
c000abb4:	eb 6e                	jmp    c000ac24 <VCache::write(unsigned long long, int, void*)+0xf0>
c000abb6:	66 90                	xchg   ax,ax
c000abb8:	83 ec 0c             	sub    esp,0xc
c000abbb:	53                   	push   ebx
c000abbc:	e8 a7 fe ff ff       	call   c000aa68 <VCache::writeWriteBuffer()>
c000abc1:	83 c4 10             	add    esp,0x10
c000abc4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000abc7:	83 7c 24 2c 4f       	cmp    DWORD PTR [esp+0x2c],0x4f
c000abcc:	7f 22                	jg     c000abf0 <VCache::write(unsigned long long, int, void*)+0xbc>
c000abce:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000abd1:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000abd4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000abd8:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000abdc:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000abdf:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000abe2:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000abe8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000abec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000abee:	eb 34                	jmp    c000ac24 <VCache::write(unsigned long long, int, void*)+0xf0>
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	8b 10                	mov    edx,DWORD PTR [eax]
c000abf5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abf9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abfd:	57                   	push   edi
c000abfe:	56                   	push   esi
c000abff:	50                   	push   eax
c000ac00:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000ac03:	83 c4 20             	add    esp,0x20
c000ac06:	89 c3                	mov    ebx,eax
c000ac08:	e8 7f a9 00 00       	call   c001558c <KeRestorePreemption()>
c000ac0d:	85 db                	test   ebx,ebx
c000ac0f:	74 1b                	je     c000ac2c <VCache::write(unsigned long long, int, void*)+0xf8>
c000ac11:	83 ec 0c             	sub    esp,0xc
c000ac14:	68 a0 20 02 c0       	push   0xc00220a0
c000ac19:	e8 46 c3 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ac1e:	83 c4 10             	add    esp,0x10
c000ac21:	eb 09                	jmp    c000ac2c <VCache::write(unsigned long long, int, void*)+0xf8>
c000ac23:	90                   	nop
c000ac24:	e8 63 a9 00 00       	call   c001558c <KeRestorePreemption()>
c000ac29:	31 db                	xor    ebx,ebx
c000ac2b:	90                   	nop
c000ac2c:	83 c4 0c             	add    esp,0xc
c000ac2f:	89 d8                	mov    eax,ebx
c000ac31:	5b                   	pop    ebx
c000ac32:	5e                   	pop    esi
c000ac33:	5f                   	pop    edi
c000ac34:	5d                   	pop    ebp
c000ac35:	c3                   	ret    

c000ac36 <VCache::read(unsigned long long, int, void*)>:
c000ac36:	55                   	push   ebp
c000ac37:	57                   	push   edi
c000ac38:	56                   	push   esi
c000ac39:	53                   	push   ebx
c000ac3a:	83 ec 1c             	sub    esp,0x1c
c000ac3d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ac41:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000ac45:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ac49:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ac4d:	e8 12 a9 00 00       	call   c0015564 <KeDisablePreemption()>
c000ac52:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ac56:	74 0c                	je     c000ac64 <VCache::read(unsigned long long, int, void*)+0x2e>
c000ac58:	83 ec 0c             	sub    esp,0xc
c000ac5b:	53                   	push   ebx
c000ac5c:	e8 07 fe ff ff       	call   c000aa68 <VCache::writeWriteBuffer()>
c000ac61:	83 c4 10             	add    esp,0x10
c000ac64:	83 fd 01             	cmp    ebp,0x1
c000ac67:	0f 85 af 00 00 00    	jne    c000ad1c <VCache::read(unsigned long long, int, void*)+0xe6>
c000ac6d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ac70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ac74:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000ac7b:	0f 85 9b 00 00 00    	jne    c000ad1c <VCache::read(unsigned long long, int, void*)+0xe6>
c000ac81:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000ac84:	89 e9                	mov    ecx,ebp
c000ac86:	f7 d9                	neg    ecx
c000ac88:	89 c8                	mov    eax,ecx
c000ac8a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ac8e:	c1 f8 1f             	sar    eax,0x1f
c000ac91:	21 f1                	and    ecx,esi
c000ac93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ac97:	89 c8                	mov    eax,ecx
c000ac99:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ac9d:	21 f9                	and    ecx,edi
c000ac9f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000aca3:	89 ca                	mov    edx,ecx
c000aca5:	74 0d                	je     c000acb4 <VCache::read(unsigned long long, int, void*)+0x7e>
c000aca7:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000acaa:	75 08                	jne    c000acb4 <VCache::read(unsigned long long, int, void*)+0x7e>
c000acac:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000acaf:	74 47                	je     c000acf8 <VCache::read(unsigned long long, int, void*)+0xc2>
c000acb1:	8d 76 00             	lea    esi,[esi+0x0]
c000acb4:	83 ec 0c             	sub    esp,0xc
c000acb7:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000acbb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000acbf:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000acc2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000acc5:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000acc7:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000acca:	55                   	push   ebp
c000accb:	52                   	push   edx
c000accc:	50                   	push   eax
c000accd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000acd1:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000acd4:	83 c4 20             	add    esp,0x20
c000acd7:	85 c0                	test   eax,eax
c000acd9:	74 1d                	je     c000acf8 <VCache::read(unsigned long long, int, void*)+0xc2>
c000acdb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000acdf:	83 ec 0c             	sub    esp,0xc
c000ace2:	68 b8 20 02 c0       	push   0xc00220b8
c000ace7:	e8 78 c2 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000acec:	e8 9b a8 00 00       	call   c001558c <KeRestorePreemption()>
c000acf1:	83 c4 10             	add    esp,0x10
c000acf4:	eb 4e                	jmp    c000ad44 <VCache::read(unsigned long long, int, void*)+0x10e>
c000acf6:	66 90                	xchg   ax,ax
c000acf8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000acfb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000acff:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ad05:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad08:	48                   	dec    eax
c000ad09:	21 c6                	and    esi,eax
c000ad0b:	0f af f1             	imul   esi,ecx
c000ad0e:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000ad11:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ad13:	e8 74 a8 00 00       	call   c001558c <KeRestorePreemption()>
c000ad18:	31 c0                	xor    eax,eax
c000ad1a:	eb 2c                	jmp    c000ad48 <VCache::read(unsigned long long, int, void*)+0x112>
c000ad1c:	83 ec 0c             	sub    esp,0xc
c000ad1f:	53                   	push   ebx
c000ad20:	e8 33 fd ff ff       	call   c000aa58 <VCache::invalidateReadBuffer()>
c000ad25:	5a                   	pop    edx
c000ad26:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ad29:	8b 10                	mov    edx,DWORD PTR [eax]
c000ad2b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ad2f:	55                   	push   ebp
c000ad30:	57                   	push   edi
c000ad31:	56                   	push   esi
c000ad32:	50                   	push   eax
c000ad33:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000ad36:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ad3a:	83 c4 20             	add    esp,0x20
c000ad3d:	e8 4a a8 00 00       	call   c001558c <KeRestorePreemption()>
c000ad42:	66 90                	xchg   ax,ax
c000ad44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad48:	83 c4 1c             	add    esp,0x1c
c000ad4b:	5b                   	pop    ebx
c000ad4c:	5e                   	pop    esi
c000ad4d:	5f                   	pop    edi
c000ad4e:	5d                   	pop    ebp
c000ad4f:	c3                   	ret    

c000ad50 <Video::putrect(int, int, int, int, unsigned int)>:
c000ad50:	55                   	push   ebp
c000ad51:	57                   	push   edi
c000ad52:	56                   	push   esi
c000ad53:	53                   	push   ebx
c000ad54:	83 ec 1c             	sub    esp,0x1c
c000ad57:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ad5b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ad5f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ad63:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ad67:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ad6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ad6f:	01 df                	add    edi,ebx
c000ad71:	39 fb                	cmp    ebx,edi
c000ad73:	7d 1f                	jge    c000ad94 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ad75:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ad79:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ad7d:	7d 12                	jge    c000ad91 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ad7f:	8b 16                	mov    edx,DWORD PTR [esi]
c000ad81:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad85:	53                   	push   ebx
c000ad86:	55                   	push   ebp
c000ad87:	45                   	inc    ebp
c000ad88:	56                   	push   esi
c000ad89:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ad8c:	83 c4 10             	add    esp,0x10
c000ad8f:	eb e8                	jmp    c000ad79 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ad91:	43                   	inc    ebx
c000ad92:	eb dd                	jmp    c000ad71 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ad94:	83 c4 1c             	add    esp,0x1c
c000ad97:	5b                   	pop    ebx
c000ad98:	5e                   	pop    esi
c000ad99:	5f                   	pop    edi
c000ad9a:	5d                   	pop    ebp
c000ad9b:	c3                   	ret    

c000ad9c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ad9c:	55                   	push   ebp
c000ad9d:	57                   	push   edi
c000ad9e:	31 ff                	xor    edi,edi
c000ada0:	56                   	push   esi
c000ada1:	53                   	push   ebx
c000ada2:	83 ec 1c             	sub    esp,0x1c
c000ada5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ada9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000adad:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000adb4:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000adb9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000adbd:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000adc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000adc5:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000adc8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000adcc:	01 f9                	add    ecx,edi
c000adce:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000add2:	7d 2f                	jge    c000ae03 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000add4:	31 f6                	xor    esi,esi
c000add6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000adda:	01 f2                	add    edx,esi
c000addc:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ade0:	7d 1a                	jge    c000adfc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ade2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ade5:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ade8:	46                   	inc    esi
c000ade9:	51                   	push   ecx
c000adea:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000adee:	52                   	push   edx
c000adef:	55                   	push   ebp
c000adf0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000adf3:	83 c4 10             	add    esp,0x10
c000adf6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000adfa:	eb da                	jmp    c000add6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000adfc:	47                   	inc    edi
c000adfd:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000ae01:	eb c5                	jmp    c000adc8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000ae03:	83 c4 1c             	add    esp,0x1c
c000ae06:	5b                   	pop    ebx
c000ae07:	5e                   	pop    esi
c000ae08:	5f                   	pop    edi
c000ae09:	5d                   	pop    ebp
c000ae0a:	c3                   	ret    
c000ae0b:	90                   	nop

c000ae0c <Video::blit(unsigned int*, int, int, int, int)>:
c000ae0c:	55                   	push   ebp
c000ae0d:	57                   	push   edi
c000ae0e:	56                   	push   esi
c000ae0f:	53                   	push   ebx
c000ae10:	83 ec 1c             	sub    esp,0x1c
c000ae13:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ae17:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ae1b:	85 c0                	test   eax,eax
c000ae1d:	79 02                	jns    c000ae21 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000ae1f:	31 c0                	xor    eax,eax
c000ae21:	c1 e0 02             	shl    eax,0x2
c000ae24:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ae28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ae2c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ae30:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000ae34:	39 d8                	cmp    eax,ebx
c000ae36:	7e 49                	jle    c000ae81 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000ae38:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ae3e:	7c 41                	jl     c000ae81 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000ae40:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ae44:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ae48:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ae4c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000ae50:	39 f9                	cmp    ecx,edi
c000ae52:	7e 22                	jle    c000ae76 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000ae54:	83 c5 04             	add    ebp,0x4
c000ae57:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ae5d:	7c 14                	jl     c000ae73 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000ae5f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ae61:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000ae64:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ae68:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ae6c:	56                   	push   esi
c000ae6d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ae70:	83 c4 10             	add    esp,0x10
c000ae73:	47                   	inc    edi
c000ae74:	eb d2                	jmp    c000ae48 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000ae76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ae7a:	43                   	inc    ebx
c000ae7b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ae7f:	eb ab                	jmp    c000ae2c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000ae81:	83 c4 1c             	add    esp,0x1c
c000ae84:	5b                   	pop    ebx
c000ae85:	5e                   	pop    esi
c000ae86:	5f                   	pop    edi
c000ae87:	5d                   	pop    ebp
c000ae88:	c3                   	ret    
c000ae89:	90                   	nop

c000ae8a <Video::clearScreen(unsigned int)>:
c000ae8a:	57                   	push   edi
c000ae8b:	56                   	push   esi
c000ae8c:	53                   	push   ebx
c000ae8d:	31 db                	xor    ebx,ebx
c000ae8f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ae93:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ae99:	7e 1f                	jle    c000aeba <Video::clearScreen(unsigned int)+0x30>
c000ae9b:	31 ff                	xor    edi,edi
c000ae9d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000aea3:	7e 12                	jle    c000aeb7 <Video::clearScreen(unsigned int)+0x2d>
c000aea5:	8b 06                	mov    eax,DWORD PTR [esi]
c000aea7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeab:	53                   	push   ebx
c000aeac:	57                   	push   edi
c000aead:	47                   	inc    edi
c000aeae:	56                   	push   esi
c000aeaf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000aeb2:	83 c4 10             	add    esp,0x10
c000aeb5:	eb e6                	jmp    c000ae9d <Video::clearScreen(unsigned int)+0x13>
c000aeb7:	43                   	inc    ebx
c000aeb8:	eb d9                	jmp    c000ae93 <Video::clearScreen(unsigned int)+0x9>
c000aeba:	5b                   	pop    ebx
c000aebb:	5e                   	pop    esi
c000aebc:	5f                   	pop    edi
c000aebd:	c3                   	ret    

c000aebe <Video::putpixel(int, int, unsigned int)>:
c000aebe:	c7 44 24 04 f0 20 02 c0 	mov    DWORD PTR [esp+0x4],0xc00220f0
c000aec6:	e9 cb 3e 00 00       	jmp    c000ed96 <KePanic(char const*)>
c000aecb:	90                   	nop

c000aecc <Video::readPixelApprox(int, int)>:
c000aecc:	83 ec 18             	sub    esp,0x18
c000aecf:	68 11 21 02 c0       	push   0xc0022111
c000aed4:	e8 bd 3e 00 00       	call   c000ed96 <KePanic(char const*)>
c000aed9:	31 c0                	xor    eax,eax
c000aedb:	83 c4 1c             	add    esp,0x1c
c000aede:	c3                   	ret    
c000aedf:	90                   	nop

c000aee0 <Video::Video(char const*)>:
c000aee0:	83 ec 0c             	sub    esp,0xc
c000aee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee7:	83 ec 08             	sub    esp,0x8
c000aeea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeee:	50                   	push   eax
c000aeef:	e8 d0 e2 ff ff       	call   c00091c4 <Device::Device(char const*)>
c000aef4:	83 c4 10             	add    esp,0x10
c000aef7:	ba b4 21 02 c0       	mov    edx,0xc00221b4
c000aefc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af00:	89 10                	mov    DWORD PTR [eax],edx
c000af02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af06:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000af10:	90                   	nop
c000af11:	83 c4 0c             	add    esp,0xc
c000af14:	c3                   	ret    
c000af15:	90                   	nop

c000af16 <Video::~Video()>:
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	ba b4 21 02 c0       	mov    edx,0xc00221b4
c000af1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af22:	89 10                	mov    DWORD PTR [eax],edx
c000af24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af28:	83 ec 0c             	sub    esp,0xc
c000af2b:	50                   	push   eax
c000af2c:	e8 33 e0 ff ff       	call   c0008f64 <Device::~Device()>
c000af31:	83 c4 10             	add    esp,0x10
c000af34:	90                   	nop
c000af35:	83 c4 0c             	add    esp,0xc
c000af38:	c3                   	ret    
c000af39:	90                   	nop

c000af3a <Video::~Video()>:
c000af3a:	83 ec 0c             	sub    esp,0xc
c000af3d:	83 ec 0c             	sub    esp,0xc
c000af40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af44:	e8 cd ff ff ff       	call   c000af16 <Video::~Video()>
c000af49:	83 c4 10             	add    esp,0x10
c000af4c:	83 ec 08             	sub    esp,0x8
c000af4f:	68 64 01 00 00       	push   0x164
c000af54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af58:	e8 f7 17 00 00       	call   c000c754 <operator delete(void*, unsigned long)>
c000af5d:	83 c4 10             	add    esp,0x10
c000af60:	83 c4 0c             	add    esp,0xc
c000af63:	c3                   	ret    

c000af64 <Video::isMonochrome()>:
c000af64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af68:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000af6e:	c3                   	ret    
c000af6f:	90                   	nop

c000af70 <Video::getWidth()>:
c000af70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af74:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000af7a:	c3                   	ret    
c000af7b:	90                   	nop

c000af7c <Video::getHeight()>:
c000af7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af80:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000af86:	c3                   	ret    
c000af87:	90                   	nop

c000af88 <Video::drawCursor(int, int, unsigned int*, int)>:
c000af88:	55                   	push   ebp
c000af89:	57                   	push   edi
c000af8a:	56                   	push   esi
c000af8b:	53                   	push   ebx
c000af8c:	83 ec 2c             	sub    esp,0x2c
c000af8f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000af93:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000af97:	83 f8 01             	cmp    eax,0x1
c000af9a:	19 c9                	sbb    ecx,ecx
c000af9c:	31 db                	xor    ebx,ebx
c000af9e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000afa2:	89 cd                	mov    ebp,ecx
c000afa4:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000afac:	f7 d5                	not    ebp
c000afae:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000afb4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000afb8:	01 d8                	add    eax,ebx
c000afba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000afbe:	56                   	push   esi
c000afbf:	e8 b8 ff ff ff       	call   c000af7c <Video::getHeight()>
c000afc4:	59                   	pop    ecx
c000afc5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000afc9:	7e 70                	jle    c000b03b <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000afcb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000afcf:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000afd3:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000afd6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000afda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000afde:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000afe5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afe9:	89 f8                	mov    eax,edi
c000afeb:	83 c0 20             	add    eax,0x20
c000afee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000aff2:	56                   	push   esi
c000aff3:	e8 78 ff ff ff       	call   c000af70 <Video::getWidth()>
c000aff8:	5a                   	pop    edx
c000aff9:	39 c7                	cmp    edi,eax
c000affb:	7d 34                	jge    c000b031 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000affd:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000b002:	74 05                	je     c000b009 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000b004:	8b 06                	mov    eax,DWORD PTR [esi]
c000b006:	55                   	push   ebp
c000b007:	eb 0d                	jmp    c000b016 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000b009:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000b00e:	74 12                	je     c000b022 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000b010:	8b 06                	mov    eax,DWORD PTR [esi]
c000b012:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b016:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b01a:	57                   	push   edi
c000b01b:	56                   	push   esi
c000b01c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b01f:	83 c4 10             	add    esp,0x10
c000b022:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000b026:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000b02a:	47                   	inc    edi
c000b02b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b02f:	75 c1                	jne    c000aff2 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000b031:	43                   	inc    ebx
c000b032:	83 fb 20             	cmp    ebx,0x20
c000b035:	0f 85 79 ff ff ff    	jne    c000afb4 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000b03b:	83 c4 2c             	add    esp,0x2c
c000b03e:	5b                   	pop    ebx
c000b03f:	5e                   	pop    esi
c000b040:	5f                   	pop    edi
c000b041:	5d                   	pop    ebp
c000b042:	c3                   	ret    
c000b043:	90                   	nop

c000b044 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000b044:	55                   	push   ebp
c000b045:	57                   	push   edi
c000b046:	56                   	push   esi
c000b047:	53                   	push   ebx
c000b048:	83 ec 48             	sub    esp,0x48
c000b04b:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000b04f:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000b053:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000b057:	c1 e0 08             	shl    eax,0x8
c000b05a:	01 d0                	add    eax,edx
c000b05c:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000b060:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b064:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000b068:	c1 e0 08             	shl    eax,0x8
c000b06b:	01 d0                	add    eax,edx
c000b06d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b071:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b075:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000b07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b07e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b082:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000b089:	50                   	push   eax
c000b08a:	e8 c0 39 00 00       	call   c000ea4f <malloc>
c000b08f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b093:	83 c4 10             	add    esp,0x10
c000b096:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000b09b:	75 10                	jne    c000b0ad <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c000b09d:	83 ec 0c             	sub    esp,0xc
c000b0a0:	68 3c 21 02 c0       	push   0xc002213c
c000b0a5:	e8 ec 3c 00 00       	call   c000ed96 <KePanic(char const*)>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	51                   	push   ecx
c000b0ae:	51                   	push   ecx
c000b0af:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b0b3:	50                   	push   eax
c000b0b4:	68 4c 21 02 c0       	push   0xc002214c
c000b0b9:	e8 a6 be ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b0be:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000b0c1:	83 e0 20             	and    eax,0x20
c000b0c4:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000b0c8:	85 c0                	test   eax,eax
c000b0ca:	5e                   	pop    esi
c000b0cb:	0f 94 c0             	sete   al
c000b0ce:	5f                   	pop    edi
c000b0cf:	0f b6 c0             	movzx  eax,al
c000b0d2:	be 12 00 00 00       	mov    esi,0x12
c000b0d7:	50                   	push   eax
c000b0d8:	68 56 21 02 c0       	push   0xc0022156
c000b0dd:	e8 82 be ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b0e2:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c000b0e6:	83 c4 10             	add    esp,0x10
c000b0e9:	89 d0                	mov    eax,edx
c000b0eb:	85 d2                	test   edx,edx
c000b0ed:	74 11                	je     c000b100 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000b0ef:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c000b0f3:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000b0f7:	c1 fe 03             	sar    esi,0x3
c000b0fa:	0f af f1             	imul   esi,ecx
c000b0fd:	83 c6 12             	add    esi,0x12
c000b100:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b105:	74 07                	je     c000b10e <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c000b107:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000b10c:	75 12                	jne    c000b120 <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c000b10e:	83 ec 0c             	sub    esp,0xc
c000b111:	68 64 21 02 c0       	push   0xc0022164
c000b116:	e8 49 be ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b11b:	e9 a0 02 00 00       	jmp    c000b3c0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c000b120:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000b124:	83 f9 02             	cmp    ecx,0x2
c000b127:	74 0e                	je     c000b137 <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c000b129:	83 f9 0a             	cmp    ecx,0xa
c000b12c:	0f 84 c8 00 00 00    	je     c000b1fa <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c000b132:	e9 72 02 00 00       	jmp    c000b3a9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c000b137:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b13c:	75 0e                	jne    c000b14c <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000b13e:	84 c0                	test   al,al
c000b140:	75 0a                	jne    c000b14c <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000b142:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b145:	83 e8 18             	sub    eax,0x18
c000b148:	a8 f7                	test   al,0xf7
c000b14a:	74 0d                	je     c000b159 <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c000b14c:	83 ec 0c             	sub    esp,0xc
c000b14f:	68 79 21 02 c0       	push   0xc0022179
c000b154:	e9 58 02 00 00       	jmp    c000b3b1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000b159:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000b15e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b166:	31 c0                	xor    eax,eax
c000b168:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b16c:	89 c7                	mov    edi,eax
c000b16e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b176:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b17b:	75 15                	jne    c000b192 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000b17d:	99                   	cdq    
c000b17e:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000b182:	85 d2                	test   edx,edx
c000b184:	75 0c                	jne    c000b192 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000b186:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000b18a:	29 c7                	sub    edi,eax
c000b18c:	4f                   	dec    edi
c000b18d:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c000b192:	31 d2                	xor    edx,edx
c000b194:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b198:	75 08                	jne    c000b1a2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000b19a:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c000b19f:	c1 e2 18             	shl    edx,0x18
c000b1a2:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c000b1a7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000b1ab:	c1 e1 10             	shl    ecx,0x10
c000b1ae:	8d 47 01             	lea    eax,[edi+0x1]
c000b1b1:	89 cd                	mov    ebp,ecx
c000b1b3:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c000b1b8:	c1 e1 08             	shl    ecx,0x8
c000b1bb:	09 e9                	or     ecx,ebp
c000b1bd:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000b1c1:	09 e9                	or     ecx,ebp
c000b1c3:	09 d1                	or     ecx,edx
c000b1c5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b1c9:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c000b1cc:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000b1d0:	c1 fa 03             	sar    edx,0x3
c000b1d3:	01 d6                	add    esi,edx
c000b1d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b1d9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000b1dd:	7e 04                	jle    c000b1e3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c000b1df:	89 c7                	mov    edi,eax
c000b1e1:	eb 93                	jmp    c000b176 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000b1e3:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b1e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b1eb:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000b1ef:	0f 8f 77 ff ff ff    	jg     c000b16c <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c000b1f5:	e9 d3 01 00 00       	jmp    c000b3cd <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000b1fa:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b1ff:	75 0e                	jne    c000b20f <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000b201:	85 d2                	test   edx,edx
c000b203:	75 0a                	jne    c000b20f <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000b205:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b208:	83 e8 18             	sub    eax,0x18
c000b20b:	a8 f7                	test   al,0xf7
c000b20d:	74 0d                	je     c000b21c <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c000b20f:	83 ec 0c             	sub    esp,0xc
c000b212:	68 87 21 02 c0       	push   0xc0022187
c000b217:	e9 95 01 00 00       	jmp    c000b3b1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000b21c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b224:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b22c:	31 c9                	xor    ecx,ecx
c000b22e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b232:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c000b236:	0f 8e 91 01 00 00    	jle    c000b3cd <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000b23c:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c000b240:	0f 8d 87 01 00 00    	jge    c000b3cd <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000b246:	8d 46 01             	lea    eax,[esi+0x1]
c000b249:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000b24d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b251:	83 fd 7f             	cmp    ebp,0x7f
c000b254:	89 e8                	mov    eax,ebp
c000b256:	0f 8e 9d 00 00 00    	jle    c000b2f9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c000b25c:	83 e0 7f             	and    eax,0x7f
c000b25f:	31 d2                	xor    edx,edx
c000b261:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b265:	40                   	inc    eax
c000b266:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b26a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26e:	75 0a                	jne    c000b27a <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c000b270:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c000b275:	89 ea                	mov    edx,ebp
c000b277:	c1 e2 18             	shl    edx,0x18
c000b27a:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c000b27f:	c1 e0 10             	shl    eax,0x10
c000b282:	89 c7                	mov    edi,eax
c000b284:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000b289:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000b28d:	c1 e0 08             	shl    eax,0x8
c000b290:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000b294:	09 f8                	or     eax,edi
c000b296:	31 f6                	xor    esi,esi
c000b298:	09 c5                	or     ebp,eax
c000b29a:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c000b29f:	09 d5                	or     ebp,edx
c000b2a1:	85 ff                	test   edi,edi
c000b2a3:	75 1d                	jne    c000b2c2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000b2a5:	89 c8                	mov    eax,ecx
c000b2a7:	99                   	cdq    
c000b2a8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000b2ac:	85 d2                	test   edx,edx
c000b2ae:	75 12                	jne    c000b2c2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000b2b0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b2b4:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000b2b8:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b2bc:	49                   	dec    ecx
c000b2bd:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000b2c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2c6:	8d 51 01             	lea    edx,[ecx+0x1]
c000b2c9:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000b2cc:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c000b2d0:	8d 46 01             	lea    eax,[esi+0x1]
c000b2d3:	7e 06                	jle    c000b2db <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c000b2d5:	89 c6                	mov    esi,eax
c000b2d7:	89 d1                	mov    ecx,edx
c000b2d9:	eb c6                	jmp    c000b2a1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c000b2db:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000b2df:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b2e3:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000b2e7:	c1 f8 03             	sar    eax,0x3
c000b2ea:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000b2ee:	89 d1                	mov    ecx,edx
c000b2f0:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000b2f4:	e9 35 ff ff ff       	jmp    c000b22e <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c000b2f9:	8d 45 01             	lea    eax,[ebp+0x1]
c000b2fc:	31 f6                	xor    esi,esi
c000b2fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b302:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000b307:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b30b:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000b310:	75 1d                	jne    c000b32f <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000b312:	89 c8                	mov    eax,ecx
c000b314:	99                   	cdq    
c000b315:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000b319:	85 d2                	test   edx,edx
c000b31b:	75 12                	jne    c000b32f <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000b31d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b321:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000b325:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b329:	49                   	dec    ecx
c000b32a:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000b32f:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000b337:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b33b:	75 10                	jne    c000b34d <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c000b33d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b341:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c000b346:	c1 e7 18             	shl    edi,0x18
c000b349:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000b34d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b351:	8d 51 01             	lea    edx,[ecx+0x1]
c000b354:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c000b359:	c1 e0 10             	shl    eax,0x10
c000b35c:	89 c7                	mov    edi,eax
c000b35e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b362:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c000b367:	c1 e0 08             	shl    eax,0x8
c000b36a:	09 f8                	or     eax,edi
c000b36c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b370:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c000b374:	09 f8                	or     eax,edi
c000b376:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000b37a:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000b37e:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000b381:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b385:	c1 f8 03             	sar    eax,0x3
c000b388:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000b38c:	8d 46 01             	lea    eax,[esi+0x1]
c000b38f:	39 f5                	cmp    ebp,esi
c000b391:	7e 09                	jle    c000b39c <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c000b393:	89 c6                	mov    esi,eax
c000b395:	89 d1                	mov    ecx,edx
c000b397:	e9 6f ff ff ff       	jmp    c000b30b <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c000b39c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000b3a0:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000b3a4:	e9 45 ff ff ff       	jmp    c000b2ee <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c000b3a9:	52                   	push   edx
c000b3aa:	52                   	push   edx
c000b3ab:	51                   	push   ecx
c000b3ac:	68 96 21 02 c0       	push   0xc0022196
c000b3b1:	e8 ae bb ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b3b6:	58                   	pop    eax
c000b3b7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b3bb:	e8 9f 36 00 00       	call   c000ea5f <free>
c000b3c0:	83 c4 10             	add    esp,0x10
c000b3c3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b3cb:	eb 14                	jmp    c000b3e1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c000b3cd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b3d1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000b3d5:	89 18                	mov    DWORD PTR [eax],ebx
c000b3d7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b3db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b3df:	89 18                	mov    DWORD PTR [eax],ebx
c000b3e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3e5:	83 c4 3c             	add    esp,0x3c
c000b3e8:	5b                   	pop    ebx
c000b3e9:	5e                   	pop    esi
c000b3ea:	5f                   	pop    edi
c000b3eb:	5d                   	pop    ebp
c000b3ec:	c3                   	ret    
c000b3ed:	90                   	nop

c000b3ee <Video::putTGA(int, int, unsigned char*, int)>:
c000b3ee:	55                   	push   ebp
c000b3ef:	57                   	push   edi
c000b3f0:	56                   	push   esi
c000b3f1:	53                   	push   ebx
c000b3f2:	83 ec 28             	sub    esp,0x28
c000b3f5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b3f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b3fd:	50                   	push   eax
c000b3fe:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b402:	50                   	push   eax
c000b403:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b407:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b40b:	57                   	push   edi
c000b40c:	e8 33 fc ff ff       	call   c000b044 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000b411:	83 c4 20             	add    esp,0x20
c000b414:	85 c0                	test   eax,eax
c000b416:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b41a:	74 3a                	je     c000b456 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000b41c:	89 c6                	mov    esi,eax
c000b41e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b422:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b426:	39 d8                	cmp    eax,ebx
c000b428:	7e 2c                	jle    c000b456 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000b42a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b42e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b432:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b436:	39 e8                	cmp    eax,ebp
c000b438:	7e 19                	jle    c000b453 <Video::putTGA(int, int, unsigned char*, int)+0x65>
c000b43a:	83 c6 04             	add    esi,0x4
c000b43d:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000b440:	85 c0                	test   eax,eax
c000b442:	79 0c                	jns    c000b450 <Video::putTGA(int, int, unsigned char*, int)+0x62>
c000b444:	8b 17                	mov    edx,DWORD PTR [edi]
c000b446:	50                   	push   eax
c000b447:	53                   	push   ebx
c000b448:	55                   	push   ebp
c000b449:	57                   	push   edi
c000b44a:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b44d:	83 c4 10             	add    esp,0x10
c000b450:	45                   	inc    ebp
c000b451:	eb db                	jmp    c000b42e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000b453:	43                   	inc    ebx
c000b454:	eb c8                	jmp    c000b41e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000b456:	83 c4 1c             	add    esp,0x1c
c000b459:	5b                   	pop    ebx
c000b45a:	5e                   	pop    esi
c000b45b:	5f                   	pop    edi
c000b45c:	5d                   	pop    ebp
c000b45d:	c3                   	ret    
c000b45e:	66 90                	xchg   ax,ax

c000b460 <ACPI::close(int, int, void*)>:
c000b460:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b465:	c3                   	ret    
c000b466:	66 90                	xchg   ax,ax

c000b468 <loadACPITables(unsigned char*)>:
c000b468:	57                   	push   edi
c000b469:	56                   	push   esi
c000b46a:	53                   	push   ebx
c000b46b:	83 ec 60             	sub    esp,0x60
c000b46e:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000b473:	0f 84 43 02 00 00    	je     c000b6bc <loadACPITables(unsigned char*)+0x254>
c000b479:	a0 20 aa 02 c0       	mov    al,ds:0xc002aa20
c000b47e:	0f b6 c0             	movzx  eax,al
c000b481:	85 c0                	test   eax,eax
c000b483:	74 7b                	je     c000b500 <loadACPITables(unsigned char*)+0x98>
c000b485:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b489:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000b48d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b491:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b494:	83 e8 24             	sub    eax,0x24
c000b497:	c1 e8 03             	shr    eax,0x3
c000b49a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b49e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000b4a6:	66 90                	xchg   ax,ax
c000b4a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b4ac:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000b4b0:	0f 8d ba 00 00 00    	jge    c000b570 <loadACPITables(unsigned char*)+0x108>
c000b4b6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b4ba:	83 c0 24             	add    eax,0x24
c000b4bd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b4c1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000b4c5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b4c9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b4cd:	c1 e0 03             	shl    eax,0x3
c000b4d0:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000b4d4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b4d8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b4db:	8b 00                	mov    eax,DWORD PTR [eax]
c000b4dd:	89 c1                	mov    ecx,eax
c000b4df:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b4e4:	8d 50 01             	lea    edx,[eax+0x1]
c000b4e7:	89 15 00 a8 02 c0    	mov    DWORD PTR ds:0xc002a800,edx
c000b4ed:	89 ca                	mov    edx,ecx
c000b4ef:	89 14 c5 24 a8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd57dc],edx
c000b4f6:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000b4fb:	eb ab                	jmp    c000b4a8 <loadACPITables(unsigned char*)+0x40>
c000b4fd:	8d 76 00             	lea    esi,[esi+0x0]
c000b500:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b504:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b508:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b50c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b50f:	83 e8 24             	sub    eax,0x24
c000b512:	c1 e8 02             	shr    eax,0x2
c000b515:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b519:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000b521:	8d 76 00             	lea    esi,[esi+0x0]
c000b524:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b528:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000b52c:	7d 42                	jge    c000b570 <loadACPITables(unsigned char*)+0x108>
c000b52e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b532:	83 c0 24             	add    eax,0x24
c000b535:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b539:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b53d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000b541:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b545:	c1 e0 02             	shl    eax,0x2
c000b548:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b54c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b550:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b552:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b557:	8d 50 01             	lea    edx,[eax+0x1]
c000b55a:	89 15 00 a8 02 c0    	mov    DWORD PTR ds:0xc002a800,edx
c000b560:	89 ca                	mov    edx,ecx
c000b562:	89 14 c5 24 a8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd57dc],edx
c000b569:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000b56e:	eb b4                	jmp    c000b524 <loadACPITables(unsigned char*)+0xbc>
c000b570:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000b578:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b57d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000b581:	0f 8d 39 01 00 00    	jge    c000b6c0 <loadACPITables(unsigned char*)+0x258>
c000b587:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b58b:	8b 04 c5 24 a8 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd57dc]
c000b592:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b596:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b59a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b59e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5a2:	25 ff 0f 00 00       	and    eax,0xfff
c000b5a7:	89 c6                	mov    esi,eax
c000b5a9:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c000b5af:	83 ec 0c             	sub    esp,0xc
c000b5b2:	6a 01                	push   0x1
c000b5b4:	e8 08 6c 00 00       	call   c00121c1 <Virt::allocateKernelVirtualPages(int)>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b5c0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b5c6:	83 ec 0c             	sub    esp,0xc
c000b5c9:	6a 01                	push   0x1
c000b5cb:	6a 01                	push   0x1
c000b5cd:	50                   	push   eax
c000b5ce:	52                   	push   edx
c000b5cf:	53                   	push   ebx
c000b5d0:	e8 b9 74 00 00       	call   c0012a8e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b5d5:	83 c4 20             	add    esp,0x20
c000b5d8:	09 f0                	or     eax,esi
c000b5da:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b5de:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b5e2:	c1 e0 03             	shl    eax,0x3
c000b5e5:	05 20 a8 02 c0       	add    eax,0xc002a820
c000b5ea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b5f6:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000b5fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b602:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b606:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b60a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b60e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b612:	89 c6                	mov    esi,eax
c000b614:	89 d7                	mov    edi,edx
c000b616:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b618:	89 c8                	mov    eax,ecx
c000b61a:	89 fa                	mov    edx,edi
c000b61c:	89 f3                	mov    ebx,esi
c000b61e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000b622:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b626:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b62a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b62e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b631:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b635:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b639:	05 00 10 00 00       	add    eax,0x1000
c000b63e:	c1 e8 0c             	shr    eax,0xc
c000b641:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b645:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b649:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b64d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b651:	25 ff 0f 00 00       	and    eax,0xfff
c000b656:	89 c6                	mov    esi,eax
c000b658:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c000b65e:	83 ec 0c             	sub    esp,0xc
c000b661:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b665:	e8 57 6b 00 00       	call   c00121c1 <Virt::allocateKernelVirtualPages(int)>
c000b66a:	83 c4 10             	add    esp,0x10
c000b66d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b671:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b677:	83 ec 0c             	sub    esp,0xc
c000b67a:	6a 01                	push   0x1
c000b67c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b680:	50                   	push   eax
c000b681:	52                   	push   edx
c000b682:	53                   	push   ebx
c000b683:	e8 06 74 00 00       	call   c0012a8e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b688:	83 c4 20             	add    esp,0x20
c000b68b:	09 f0                	or     eax,esi
c000b68d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b691:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b695:	83 ec 0c             	sub    esp,0xc
c000b698:	50                   	push   eax
c000b699:	e8 2b 6e 00 00       	call   c00124c9 <Virt::freeKernelVirtualPages(unsigned long)>
c000b69e:	83 c4 10             	add    esp,0x10
c000b6a1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b6a5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b6a9:	89 14 c5 24 a8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd57dc],edx
c000b6b0:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000b6b5:	e9 be fe ff ff       	jmp    c000b578 <loadACPITables(unsigned char*)+0x110>
c000b6ba:	66 90                	xchg   ax,ax
c000b6bc:	90                   	nop
c000b6bd:	8d 76 00             	lea    esi,[esi+0x0]
c000b6c0:	83 c4 60             	add    esp,0x60
c000b6c3:	5b                   	pop    ebx
c000b6c4:	5e                   	pop    esi
c000b6c5:	5f                   	pop    edi
c000b6c6:	c3                   	ret    
c000b6c7:	90                   	nop

c000b6c8 <findRSDT(unsigned char*)>:
c000b6c8:	57                   	push   edi
c000b6c9:	56                   	push   esi
c000b6ca:	53                   	push   ebx
c000b6cb:	83 ec 50             	sub    esp,0x50
c000b6ce:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000b6d3:	85 c0                	test   eax,eax
c000b6d5:	75 0d                	jne    c000b6e4 <findRSDT(unsigned char*)+0x1c>
c000b6d7:	b8 00 00 00 00       	mov    eax,0x0
c000b6dc:	e9 2b 01 00 00       	jmp    c000b80c <findRSDT(unsigned char*)+0x144>
c000b6e1:	8d 76 00             	lea    esi,[esi+0x0]
c000b6e4:	89 e0                	mov    eax,esp
c000b6e6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b6ea:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b6ee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b6f2:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000b6fa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b6fe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b702:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b706:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b70a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000b70e:	89 c6                	mov    esi,eax
c000b710:	89 d7                	mov    edi,edx
c000b712:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b714:	89 c8                	mov    eax,ecx
c000b716:	89 fa                	mov    edx,edi
c000b718:	89 f3                	mov    ebx,esi
c000b71a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000b71e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000b722:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b726:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000b72a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000b72e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000b736:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b73a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b73e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b746:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b74a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b74e:	25 ff 0f 00 00       	and    eax,0xfff
c000b753:	89 c6                	mov    esi,eax
c000b755:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c000b75b:	83 ec 0c             	sub    esp,0xc
c000b75e:	6a 02                	push   0x2
c000b760:	e8 5c 6a 00 00       	call   c00121c1 <Virt::allocateKernelVirtualPages(int)>
c000b765:	83 c4 10             	add    esp,0x10
c000b768:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000b76c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b772:	83 ec 0c             	sub    esp,0xc
c000b775:	6a 01                	push   0x1
c000b777:	6a 02                	push   0x2
c000b779:	50                   	push   eax
c000b77a:	52                   	push   edx
c000b77b:	53                   	push   ebx
c000b77c:	e8 0d 73 00 00       	call   c0012a8e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b781:	83 c4 20             	add    esp,0x20
c000b784:	09 f0                	or     eax,esi
c000b786:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b78a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b78e:	25 ff 0f 00 00       	and    eax,0xfff
c000b793:	89 c6                	mov    esi,eax
c000b795:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c000b79b:	83 ec 0c             	sub    esp,0xc
c000b79e:	6a 02                	push   0x2
c000b7a0:	e8 1c 6a 00 00       	call   c00121c1 <Virt::allocateKernelVirtualPages(int)>
c000b7a5:	83 c4 10             	add    esp,0x10
c000b7a8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000b7ac:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b7b2:	83 ec 0c             	sub    esp,0xc
c000b7b5:	6a 01                	push   0x1
c000b7b7:	6a 02                	push   0x2
c000b7b9:	50                   	push   eax
c000b7ba:	52                   	push   edx
c000b7bb:	53                   	push   ebx
c000b7bc:	e8 cd 72 00 00       	call   c0012a8e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b7c1:	83 c4 20             	add    esp,0x20
c000b7c4:	09 f0                	or     eax,esi
c000b7c6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b7ca:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b7cf:	85 c0                	test   eax,eax
c000b7d1:	75 11                	jne    c000b7e4 <findRSDT(unsigned char*)+0x11c>
c000b7d3:	c6 05 20 aa 02 c0 00 	mov    BYTE PTR ds:0xc002aa20,0x0
c000b7da:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b7de:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b7e2:	eb 24                	jmp    c000b808 <findRSDT(unsigned char*)+0x140>
c000b7e4:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b7e9:	83 f8 02             	cmp    eax,0x2
c000b7ec:	75 12                	jne    c000b800 <findRSDT(unsigned char*)+0x138>
c000b7ee:	c6 05 20 aa 02 c0 01 	mov    BYTE PTR ds:0xc002aa20,0x1
c000b7f5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b7f9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b7fd:	eb 09                	jmp    c000b808 <findRSDT(unsigned char*)+0x140>
c000b7ff:	90                   	nop
c000b800:	b8 00 00 00 00       	mov    eax,0x0
c000b805:	eb 05                	jmp    c000b80c <findRSDT(unsigned char*)+0x144>
c000b807:	90                   	nop
c000b808:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000b80c:	83 c4 50             	add    esp,0x50
c000b80f:	5b                   	pop    ebx
c000b810:	5e                   	pop    esi
c000b811:	5f                   	pop    edi
c000b812:	c3                   	ret    
c000b813:	90                   	nop

c000b814 <findDataTable(unsigned char*, char*)>:
c000b814:	83 ec 1c             	sub    esp,0x1c
c000b817:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000b81c:	75 0a                	jne    c000b828 <findDataTable(unsigned char*, char*)+0x14>
c000b81e:	b8 00 00 00 00       	mov    eax,0x0
c000b823:	eb 5f                	jmp    c000b884 <findDataTable(unsigned char*, char*)+0x70>
c000b825:	8d 76 00             	lea    esi,[esi+0x0]
c000b828:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b830:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b835:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000b839:	7d 41                	jge    c000b87c <findDataTable(unsigned char*, char*)+0x68>
c000b83b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b83f:	c1 e0 03             	shl    eax,0x3
c000b842:	05 20 a8 02 c0       	add    eax,0xc002a820
c000b847:	83 ec 04             	sub    esp,0x4
c000b84a:	6a 04                	push   0x4
c000b84c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b850:	50                   	push   eax
c000b851:	e8 2a 4b ff ff       	call   c0000380 <memcmp>
c000b856:	83 c4 10             	add    esp,0x10
c000b859:	85 c0                	test   eax,eax
c000b85b:	0f 94 c0             	sete   al
c000b85e:	0f b6 c0             	movzx  eax,al
c000b861:	85 c0                	test   eax,eax
c000b863:	74 0f                	je     c000b874 <findDataTable(unsigned char*, char*)+0x60>
c000b865:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b869:	8b 04 c5 24 a8 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd57dc]
c000b870:	eb 12                	jmp    c000b884 <findDataTable(unsigned char*, char*)+0x70>
c000b872:	66 90                	xchg   ax,ax
c000b874:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000b879:	eb b5                	jmp    c000b830 <findDataTable(unsigned char*, char*)+0x1c>
c000b87b:	90                   	nop
c000b87c:	b8 00 00 00 00       	mov    eax,0x0
c000b881:	8d 76 00             	lea    esi,[esi+0x0]
c000b884:	83 c4 1c             	add    esp,0x1c
c000b887:	c3                   	ret    

c000b888 <scanMADT()>:
c000b888:	53                   	push   ebx
c000b889:	83 ec 38             	sub    esp,0x38
c000b88c:	c7 05 28 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aa28,0x0
c000b896:	c7 05 24 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aa24,0x0
c000b8a0:	e8 ab c7 00 00       	call   c0018050 <HalFindRSDP()>
c000b8a5:	a3 28 aa 02 c0       	mov    ds:0xc002aa28,eax
c000b8aa:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000b8af:	85 c0                	test   eax,eax
c000b8b1:	0f 84 11 04 00 00    	je     c000bcc8 <scanMADT()+0x440>
c000b8b7:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000b8bc:	83 ec 0c             	sub    esp,0xc
c000b8bf:	50                   	push   eax
c000b8c0:	e8 03 fe ff ff       	call   c000b6c8 <findRSDT(unsigned char*)>
c000b8c5:	83 c4 10             	add    esp,0x10
c000b8c8:	a3 24 aa 02 c0       	mov    ds:0xc002aa24,eax
c000b8cd:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000b8d2:	85 c0                	test   eax,eax
c000b8d4:	0f 84 f2 03 00 00    	je     c000bccc <scanMADT()+0x444>
c000b8da:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000b8df:	83 ec 0c             	sub    esp,0xc
c000b8e2:	50                   	push   eax
c000b8e3:	e8 80 fb ff ff       	call   c000b468 <loadACPITables(unsigned char*)>
c000b8e8:	83 c4 10             	add    esp,0x10
c000b8eb:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000b8f0:	83 ec 08             	sub    esp,0x8
c000b8f3:	68 f8 21 02 c0       	push   0xc00221f8
c000b8f8:	50                   	push   eax
c000b8f9:	e8 16 ff ff ff       	call   c000b814 <findDataTable(unsigned char*, char*)>
c000b8fe:	83 c4 10             	add    esp,0x10
c000b901:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b905:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000b90a:	0f 84 c0 03 00 00    	je     c000bcd0 <scanMADT()+0x448>
c000b910:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b918:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b91c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b91f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000b923:	0f 87 af 03 00 00    	ja     c000bcd8 <scanMADT()+0x450>
c000b929:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000b931:	0f 87 a1 03 00 00    	ja     c000bcd8 <scanMADT()+0x450>
c000b937:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b93b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b93f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b943:	8d 50 01             	lea    edx,[eax+0x1]
c000b946:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b94a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b94e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000b952:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000b956:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b95a:	8d 50 01             	lea    edx,[eax+0x1]
c000b95d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b961:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b965:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000b969:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000b96d:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000b972:	83 f8 02             	cmp    eax,0x2
c000b975:	0f 86 59 03 00 00    	jbe    c000bcd4 <scanMADT()+0x44c>
c000b97b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000b980:	85 c0                	test   eax,eax
c000b982:	75 58                	jne    c000b9dc <scanMADT()+0x154>
c000b984:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b988:	8d 50 01             	lea    edx,[eax+0x1]
c000b98b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b98f:	8a 15 20 ac 02 c0    	mov    dl,BYTE PTR ds:0xc002ac20
c000b995:	0f b6 d2             	movzx  edx,dl
c000b998:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b99c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b9a0:	88 82 60 ac 02 c0    	mov    BYTE PTR [edx-0x3ffd53a0],al
c000b9a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9aa:	8d 50 01             	lea    edx,[eax+0x1]
c000b9ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9b1:	8a 15 20 ac 02 c0    	mov    dl,BYTE PTR ds:0xc002ac20
c000b9b7:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b9ba:	88 0d 20 ac 02 c0    	mov    BYTE PTR ds:0xc002ac20,cl
c000b9c0:	0f b6 d2             	movzx  edx,dl
c000b9c3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b9c7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b9cb:	88 82 40 ac 02 c0    	mov    BYTE PTR [edx-0x3ffd53c0],al
c000b9d1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000b9d6:	e9 d9 02 00 00       	jmp    c000bcb4 <scanMADT()+0x42c>
c000b9db:	90                   	nop
c000b9dc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000b9e1:	83 f8 01             	cmp    eax,0x1
c000b9e4:	0f 85 1a 01 00 00    	jne    c000bb04 <scanMADT()+0x27c>
c000b9ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9ee:	8d 50 01             	lea    edx,[eax+0x1]
c000b9f1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9f5:	8a 15 e0 aa 02 c0    	mov    dl,BYTE PTR ds:0xc002aae0
c000b9fb:	0f b6 d2             	movzx  edx,dl
c000b9fe:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ba02:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ba06:	88 82 00 ab 02 c0    	mov    BYTE PTR [edx-0x3ffd5500],al
c000ba0c:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000ba11:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ba15:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba19:	01 d0                	add    eax,edx
c000ba1b:	83 c0 2c             	add    eax,0x2c
c000ba1e:	8a 00                	mov    al,BYTE PTR [eax]
c000ba20:	0f b6 d0             	movzx  edx,al
c000ba23:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba27:	8d 48 01             	lea    ecx,[eax+0x1]
c000ba2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba2e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ba32:	0f b6 c0             	movzx  eax,al
c000ba35:	c1 e0 08             	shl    eax,0x8
c000ba38:	89 d1                	mov    ecx,edx
c000ba3a:	09 c1                	or     ecx,eax
c000ba3c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba40:	8d 50 02             	lea    edx,[eax+0x2]
c000ba43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba47:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba4b:	0f b6 c0             	movzx  eax,al
c000ba4e:	c1 e0 10             	shl    eax,0x10
c000ba51:	09 c1                	or     ecx,eax
c000ba53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba57:	8d 50 03             	lea    edx,[eax+0x3]
c000ba5a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba5e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba62:	0f b6 c0             	movzx  eax,al
c000ba65:	c1 e0 18             	shl    eax,0x18
c000ba68:	09 c1                	or     ecx,eax
c000ba6a:	89 ca                	mov    edx,ecx
c000ba6c:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c000ba71:	0f b6 c0             	movzx  eax,al
c000ba74:	89 14 85 20 ab 02 c0 	mov    DWORD PTR [eax*4-0x3ffd54e0],edx
c000ba7b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ba80:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ba84:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba88:	01 d0                	add    eax,edx
c000ba8a:	83 c0 2c             	add    eax,0x2c
c000ba8d:	8a 00                	mov    al,BYTE PTR [eax]
c000ba8f:	0f b6 d0             	movzx  edx,al
c000ba92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba96:	8d 48 01             	lea    ecx,[eax+0x1]
c000ba99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba9d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000baa1:	0f b6 c0             	movzx  eax,al
c000baa4:	c1 e0 08             	shl    eax,0x8
c000baa7:	89 d1                	mov    ecx,edx
c000baa9:	09 c1                	or     ecx,eax
c000baab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000baaf:	8d 50 02             	lea    edx,[eax+0x2]
c000bab2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bab6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000baba:	0f b6 c0             	movzx  eax,al
c000babd:	c1 e0 10             	shl    eax,0x10
c000bac0:	09 c1                	or     ecx,eax
c000bac2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bac6:	8d 50 03             	lea    edx,[eax+0x3]
c000bac9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bacd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bad1:	0f b6 c0             	movzx  eax,al
c000bad4:	c1 e0 18             	shl    eax,0x18
c000bad7:	09 c1                	or     ecx,eax
c000bad9:	89 ca                	mov    edx,ecx
c000badb:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c000bae0:	0f b6 c0             	movzx  eax,al
c000bae3:	89 14 85 a0 ab 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5460],edx
c000baea:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000baef:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c000baf4:	83 c0 01             	add    eax,0x1
c000baf7:	a2 e0 aa 02 c0       	mov    ds:0xc002aae0,al
c000bafc:	e9 b3 01 00 00       	jmp    c000bcb4 <scanMADT()+0x42c>
c000bb01:	8d 76 00             	lea    esi,[esi+0x0]
c000bb04:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bb09:	83 f8 02             	cmp    eax,0x2
c000bb0c:	0f 85 ea 00 00 00    	jne    c000bbfc <scanMADT()+0x374>
c000bb12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb16:	8d 50 01             	lea    edx,[eax+0x1]
c000bb19:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bb1d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb21:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bb25:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000bb29:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb2d:	8d 50 01             	lea    edx,[eax+0x1]
c000bb30:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bb34:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb38:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bb3c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000bb40:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb48:	01 d0                	add    eax,edx
c000bb4a:	83 c0 2c             	add    eax,0x2c
c000bb4d:	8a 00                	mov    al,BYTE PTR [eax]
c000bb4f:	0f b6 d0             	movzx  edx,al
c000bb52:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb56:	8d 48 01             	lea    ecx,[eax+0x1]
c000bb59:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb5d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bb61:	0f b6 c0             	movzx  eax,al
c000bb64:	c1 e0 08             	shl    eax,0x8
c000bb67:	89 d1                	mov    ecx,edx
c000bb69:	09 c1                	or     ecx,eax
c000bb6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb6f:	8d 50 02             	lea    edx,[eax+0x2]
c000bb72:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb76:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bb7a:	0f b6 c0             	movzx  eax,al
c000bb7d:	c1 e0 10             	shl    eax,0x10
c000bb80:	09 c1                	or     ecx,eax
c000bb82:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb86:	8d 50 03             	lea    edx,[eax+0x3]
c000bb89:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb8d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bb91:	0f b6 c0             	movzx  eax,al
c000bb94:	c1 e0 18             	shl    eax,0x18
c000bb97:	09 c8                	or     eax,ecx
c000bb99:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb9d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bba2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bba6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbaa:	01 d0                	add    eax,edx
c000bbac:	83 c0 2c             	add    eax,0x2c
c000bbaf:	8a 00                	mov    al,BYTE PTR [eax]
c000bbb1:	0f b6 c0             	movzx  eax,al
c000bbb4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000bbb8:	8d 4a 01             	lea    ecx,[edx+0x1]
c000bbbb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bbbf:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000bbc3:	0f b6 d2             	movzx  edx,dl
c000bbc6:	c1 e2 08             	shl    edx,0x8
c000bbc9:	09 d0                	or     eax,edx
c000bbcb:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000bbd0:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bbd5:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000bbda:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bbde:	88 90 68 48 02 c0    	mov    BYTE PTR [eax-0x3ffdb798],dl
c000bbe4:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000bbe9:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000bbee:	66 89 84 12 c0 aa 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd5540],ax
c000bbf6:	e9 b9 00 00 00       	jmp    c000bcb4 <scanMADT()+0x42c>
c000bbfb:	90                   	nop
c000bbfc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bc01:	83 f8 04             	cmp    eax,0x4
c000bc04:	0f 85 9a 00 00 00    	jne    c000bca4 <scanMADT()+0x41c>
c000bc0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc0e:	8d 50 01             	lea    edx,[eax+0x1]
c000bc11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc15:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bc19:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bc1d:	0f b6 c0             	movzx  eax,al
c000bc20:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bc24:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bc28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc2c:	01 d0                	add    eax,edx
c000bc2e:	83 c0 2c             	add    eax,0x2c
c000bc31:	8a 00                	mov    al,BYTE PTR [eax]
c000bc33:	0f b6 d0             	movzx  edx,al
c000bc36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc3a:	8d 48 01             	lea    ecx,[eax+0x1]
c000bc3d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bc41:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bc45:	0f b6 c0             	movzx  eax,al
c000bc48:	c1 e0 08             	shl    eax,0x8
c000bc4b:	09 d0                	or     eax,edx
c000bc4d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc51:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bc56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc5a:	8d 50 01             	lea    edx,[eax+0x1]
c000bc5d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc61:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bc65:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bc69:	0f b6 c0             	movzx  eax,al
c000bc6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc74:	c1 e0 08             	shl    eax,0x8
c000bc77:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000bc7b:	89 c1                	mov    ecx,eax
c000bc7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bc81:	c1 e0 18             	shl    eax,0x18
c000bc84:	89 c3                	mov    ebx,eax
c000bc86:	a1 2c aa 02 c0       	mov    eax,ds:0xc002aa2c
c000bc8b:	8d 50 01             	lea    edx,[eax+0x1]
c000bc8e:	89 15 2c aa 02 c0    	mov    DWORD PTR ds:0xc002aa2c,edx
c000bc94:	09 d9                	or     ecx,ebx
c000bc96:	89 ca                	mov    edx,ecx
c000bc98:	89 14 85 40 aa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd55c0],edx
c000bc9f:	eb 13                	jmp    c000bcb4 <scanMADT()+0x42c>
c000bca1:	8d 76 00             	lea    esi,[esi+0x0]
c000bca4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bca9:	83 f8 05             	cmp    eax,0x5
c000bcac:	75 06                	jne    c000bcb4 <scanMADT()+0x42c>
c000bcae:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000bcb3:	90                   	nop
c000bcb4:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000bcb9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bcbd:	01 d0                	add    eax,edx
c000bcbf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bcc3:	e9 50 fc ff ff       	jmp    c000b918 <scanMADT()+0x90>
c000bcc8:	90                   	nop
c000bcc9:	eb 0d                	jmp    c000bcd8 <scanMADT()+0x450>
c000bccb:	90                   	nop
c000bccc:	90                   	nop
c000bccd:	eb 09                	jmp    c000bcd8 <scanMADT()+0x450>
c000bccf:	90                   	nop
c000bcd0:	90                   	nop
c000bcd1:	eb 05                	jmp    c000bcd8 <scanMADT()+0x450>
c000bcd3:	90                   	nop
c000bcd4:	90                   	nop
c000bcd5:	8d 76 00             	lea    esi,[esi+0x0]
c000bcd8:	83 c4 38             	add    esp,0x38
c000bcdb:	5b                   	pop    ebx
c000bcdc:	c3                   	ret    
c000bcdd:	90                   	nop
c000bcde:	66 90                	xchg   ax,ax

c000bce0 <ACPI::ACPI()>:
c000bce0:	83 ec 0c             	sub    esp,0xc
c000bce3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bce7:	83 ec 08             	sub    esp,0x8
c000bcea:	68 fd 21 02 c0       	push   0xc00221fd
c000bcef:	50                   	push   eax
c000bcf0:	e8 cf d4 ff ff       	call   c00091c4 <Device::Device(char const*)>
c000bcf5:	83 c4 10             	add    esp,0x10
c000bcf8:	ba f8 23 02 c0       	mov    edx,0xc00223f8
c000bcfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd01:	89 10                	mov    DWORD PTR [eax],edx
c000bd03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd07:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000bd0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd12:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000bd1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd20:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000bd2a:	e8 59 fb ff ff       	call   c000b888 <scanMADT()>
c000bd2f:	90                   	nop
c000bd30:	83 c4 0c             	add    esp,0xc
c000bd33:	c3                   	ret    

c000bd34 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000bd34:	83 ec 2c             	sub    esp,0x2c
c000bd37:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000bd3b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bd3f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bd43:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000bd47:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000bd4c:	88 d0                	mov    al,dl
c000bd4e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000bd52:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000bd57:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd5f:	90                   	nop
c000bd60:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd64:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000bd6a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000bd6e:	0f 8d b0 00 00 00    	jge    c000be24 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000bd74:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd78:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd7c:	83 c2 2a             	add    edx,0x2a
c000bd7f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000bd83:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000bd88:	0f b7 c0             	movzx  eax,ax
c000bd8b:	39 c2                	cmp    edx,eax
c000bd8d:	0f 85 85 00 00 00    	jne    c000be18 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000bd93:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd97:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd9b:	83 c2 2a             	add    edx,0x2a
c000bd9e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000bda2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000bda7:	0f b6 c0             	movzx  eax,al
c000bdaa:	39 c2                	cmp    edx,eax
c000bdac:	75 6a                	jne    c000be18 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000bdae:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000bdb3:	85 c0                	test   eax,eax
c000bdb5:	74 3d                	je     c000bdf4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000bdb7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bdbb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bdbf:	83 c2 2a             	add    edx,0x2a
c000bdc2:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000bdc6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bdca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bdcd:	39 c2                	cmp    edx,eax
c000bdcf:	74 13                	je     c000bde4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000bdd1:	83 ec 0c             	sub    esp,0xc
c000bdd4:	68 78 23 02 c0       	push   0xc0022378
c000bdd9:	e8 b8 2f 00 00       	call   c000ed96 <KePanic(char const*)>
c000bdde:	83 c4 10             	add    esp,0x10
c000bde1:	8d 76 00             	lea    esi,[esi+0x0]
c000bde4:	83 ec 0c             	sub    esp,0xc
c000bde7:	68 02 22 02 c0       	push   0xc0022202
c000bdec:	e8 a5 2f 00 00       	call   c000ed96 <KePanic(char const*)>
c000bdf1:	83 c4 10             	add    esp,0x10
c000bdf4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000bdf8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bdfc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000be00:	83 c2 2a             	add    edx,0x2a
c000be03:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000be07:	8b 02                	mov    eax,DWORD PTR [edx]
c000be09:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000be0c:	89 01                	mov    DWORD PTR [ecx],eax
c000be0e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000be11:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000be16:	66 90                	xchg   ax,ax
c000be18:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000be1d:	e9 3e ff ff ff       	jmp    c000bd60 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000be22:	66 90                	xchg   ax,ax
c000be24:	90                   	nop
c000be25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000be29:	83 c4 2c             	add    esp,0x2c
c000be2c:	c2 04 00             	ret    0x4
c000be2f:	90                   	nop

c000be30 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000be30:	83 ec 1c             	sub    esp,0x1c
c000be33:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000be37:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000be3b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000be3f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000be44:	88 c8                	mov    al,cl
c000be46:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000be4a:	88 d0                	mov    al,dl
c000be4c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000be50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be54:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be5e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000be61:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000be65:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000be69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be6d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000be73:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000be77:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000be7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be7e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000be83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be87:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be8d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000be91:	83 c0 01             	add    eax,0x1
c000be94:	88 c1                	mov    cl,al
c000be96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be9a:	83 c2 2a             	add    edx,0x2a
c000be9d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000bea1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bea5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000beab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000beaf:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000beb2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000beb6:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000beba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bebe:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000bec4:	8d 50 01             	lea    edx,[eax+0x1]
c000bec7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000becb:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000bed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bed5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000bedb:	3d 00 02 00 00       	cmp    eax,0x200
c000bee0:	75 12                	jne    c000bef4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000bee2:	83 ec 0c             	sub    esp,0xc
c000bee5:	68 11 22 02 c0       	push   0xc0022211
c000beea:	e8 a7 2e 00 00       	call   c000ed96 <KePanic(char const*)>
c000beef:	83 c4 10             	add    esp,0x10
c000bef2:	66 90                	xchg   ax,ax
c000bef4:	90                   	nop
c000bef5:	83 c4 1c             	add    esp,0x1c
c000bef8:	c3                   	ret    
c000bef9:	90                   	nop
c000befa:	66 90                	xchg   ax,ax

c000befc <ACPI::setScreenBrightnessLevel(void*, int)>:
c000befc:	b8 00 00 00 00       	mov    eax,0x0
c000bf01:	c3                   	ret    
c000bf02:	66 90                	xchg   ax,ax

c000bf04 <ACPI::detectPCI()>:
c000bf04:	53                   	push   ebx
c000bf05:	83 ec 28             	sub    esp,0x28
c000bf08:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000bf0d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000bf12:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000bf17:	83 ec 08             	sub    esp,0x8
c000bf1a:	68 2e 22 02 c0       	push   0xc002222e
c000bf1f:	50                   	push   eax
c000bf20:	e8 ef f8 ff ff       	call   c000b814 <findDataTable(unsigned char*, char*)>
c000bf25:	83 c4 10             	add    esp,0x10
c000bf28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bf2c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bf31:	74 0d                	je     c000bf40 <ACPI::detectPCI()+0x3c>
c000bf33:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf38:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bf3d:	8d 76 00             	lea    esi,[esi+0x0]
c000bf40:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000bf48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf4c:	8a 00                	mov    al,BYTE PTR [eax]
c000bf4e:	0f b6 c0             	movzx  eax,al
c000bf51:	83 f8 01             	cmp    eax,0x1
c000bf54:	75 0e                	jne    c000bf64 <ACPI::detectPCI()+0x60>
c000bf56:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf5b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bf60:	eb 2e                	jmp    c000bf90 <ACPI::detectPCI()+0x8c>
c000bf62:	66 90                	xchg   ax,ax
c000bf64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf68:	8a 00                	mov    al,BYTE PTR [eax]
c000bf6a:	0f b6 c0             	movzx  eax,al
c000bf6d:	83 f8 02             	cmp    eax,0x2
c000bf70:	75 1e                	jne    c000bf90 <ACPI::detectPCI()+0x8c>
c000bf72:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf77:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000bf7c:	85 c0                	test   eax,eax
c000bf7e:	74 10                	je     c000bf90 <ACPI::detectPCI()+0x8c>
c000bf80:	83 ec 0c             	sub    esp,0xc
c000bf83:	68 a8 23 02 c0       	push   0xc00223a8
c000bf88:	e8 09 2e 00 00       	call   c000ed96 <KePanic(char const*)>
c000bf8d:	83 c4 10             	add    esp,0x10
c000bf90:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000bf94:	83 f0 01             	xor    eax,0x1
c000bf97:	0f b6 c0             	movzx  eax,al
c000bf9a:	85 c0                	test   eax,eax
c000bf9c:	74 46                	je     c000bfe4 <ACPI::detectPCI()+0xe0>
c000bf9e:	e8 8d 41 ff ff       	call   c0000130 <manualPCIProbe>
c000bfa3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bfa7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000bfac:	75 0e                	jne    c000bfbc <ACPI::detectPCI()+0xb8>
c000bfae:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bfb3:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bfb8:	eb 2a                	jmp    c000bfe4 <ACPI::detectPCI()+0xe0>
c000bfba:	66 90                	xchg   ax,ax
c000bfbc:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000bfc1:	75 21                	jne    c000bfe4 <ACPI::detectPCI()+0xe0>
c000bfc3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bfc8:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000bfcd:	85 c0                	test   eax,eax
c000bfcf:	74 13                	je     c000bfe4 <ACPI::detectPCI()+0xe0>
c000bfd1:	83 ec 0c             	sub    esp,0xc
c000bfd4:	68 a8 23 02 c0       	push   0xc00223a8
c000bfd9:	e8 b8 2d 00 00       	call   c000ed96 <KePanic(char const*)>
c000bfde:	83 c4 10             	add    esp,0x10
c000bfe1:	8d 76 00             	lea    esi,[esi+0x0]
c000bfe4:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000bfe9:	85 c0                	test   eax,eax
c000bfeb:	0f 84 87 00 00 00    	je     c000c078 <ACPI::detectPCI()+0x174>
c000bff1:	83 ec 0c             	sub    esp,0xc
c000bff4:	68 33 22 02 c0       	push   0xc0022233
c000bff9:	e8 96 06 00 00       	call   c000c694 <KeSetBootMessage(char const*)>
c000bffe:	83 c4 10             	add    esp,0x10
c000c001:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000c009:	83 ec 0c             	sub    esp,0xc
c000c00c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c010:	e8 3a 2a 00 00       	call   c000ea4f <malloc>
c000c015:	83 c4 10             	add    esp,0x10
c000c018:	89 c3                	mov    ebx,eax
c000c01a:	83 ec 0c             	sub    esp,0xc
c000c01d:	53                   	push   ebx
c000c01e:	e8 d5 fd 00 00       	call   c001bdf8 <PCI::PCI()>
c000c023:	83 c4 10             	add    esp,0x10
c000c026:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c02a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c02e:	83 ec 08             	sub    esp,0x8
c000c031:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c035:	50                   	push   eax
c000c036:	e8 27 d0 ff ff       	call   c0009062 <Device::addChild(Device*)>
c000c03b:	83 c4 10             	add    esp,0x10
c000c03e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c042:	8b 00                	mov    eax,DWORD PTR [eax]
c000c044:	83 c0 08             	add    eax,0x8
c000c047:	8b 00                	mov    eax,DWORD PTR [eax]
c000c049:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000c04e:	85 d2                	test   edx,edx
c000c050:	74 0a                	je     c000c05c <ACPI::detectPCI()+0x158>
c000c052:	ba 01 00 00 00       	mov    edx,0x1
c000c057:	eb 0b                	jmp    c000c064 <ACPI::detectPCI()+0x160>
c000c059:	8d 76 00             	lea    esi,[esi+0x0]
c000c05c:	ba 02 00 00 00       	mov    edx,0x2
c000c061:	8d 76 00             	lea    esi,[esi+0x0]
c000c064:	6a 00                	push   0x0
c000c066:	6a 00                	push   0x0
c000c068:	52                   	push   edx
c000c069:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c06d:	ff d0                	call   eax
c000c06f:	83 c4 10             	add    esp,0x10
c000c072:	e9 91 00 00 00       	jmp    c000c108 <ACPI::detectPCI()+0x204>
c000c077:	90                   	nop
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	68 4b 22 02 c0       	push   0xc002224b
c000c080:	e8 0f 06 00 00       	call   c000c694 <KeSetBootMessage(char const*)>
c000c085:	83 c4 10             	add    esp,0x10
c000c088:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000c08f:	83 ec 0c             	sub    esp,0xc
c000c092:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c096:	e8 b4 29 00 00       	call   c000ea4f <malloc>
c000c09b:	83 c4 10             	add    esp,0x10
c000c09e:	89 c3                	mov    ebx,eax
c000c0a0:	83 ec 0c             	sub    esp,0xc
c000c0a3:	53                   	push   ebx
c000c0a4:	e8 55 09 01 00       	call   c001c9fe <IDE::IDE()>
c000c0a9:	83 c4 10             	add    esp,0x10
c000c0ac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000c0b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0b4:	83 ec 08             	sub    esp,0x8
c000c0b7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c0bb:	50                   	push   eax
c000c0bc:	e8 a1 cf ff ff       	call   c0009062 <Device::addChild(Device*)>
c000c0c1:	83 c4 10             	add    esp,0x10
c000c0c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c0c8:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000c0d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c0d6:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000c0df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c0e3:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000c0ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c0f0:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0f2:	83 c0 08             	add    eax,0x8
c000c0f5:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0f7:	6a 00                	push   0x0
c000c0f9:	6a 00                	push   0x0
c000c0fb:	6a 00                	push   0x0
c000c0fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c101:	ff d0                	call   eax
c000c103:	83 c4 10             	add    esp,0x10
c000c106:	66 90                	xchg   ax,ax
c000c108:	90                   	nop
c000c109:	83 c4 28             	add    esp,0x28
c000c10c:	5b                   	pop    ebx
c000c10d:	c3                   	ret    
c000c10e:	66 90                	xchg   ax,ax

c000c110 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000c110:	83 ec 0c             	sub    esp,0xc
c000c113:	83 ec 0c             	sub    esp,0xc
c000c116:	68 60 22 02 c0       	push   0xc0022260
c000c11b:	e8 76 2c 00 00       	call   c000ed96 <KePanic(char const*)>
c000c120:	83 c4 10             	add    esp,0x10
c000c123:	90                   	nop
c000c124:	83 c4 0c             	add    esp,0xc
c000c127:	c3                   	ret    

c000c128 <ACPI::open(int, int, void*)>:
c000c128:	57                   	push   edi
c000c129:	56                   	push   esi
c000c12a:	53                   	push   ebx
c000c12b:	81 ec 70 01 00 00    	sub    esp,0x170
c000c131:	83 ec 0c             	sub    esp,0xc
c000c134:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000c13b:	e8 c4 fd ff ff       	call   c000bf04 <ACPI::detectPCI()>
c000c140:	83 c4 10             	add    esp,0x10
c000c143:	83 ec 0c             	sub    esp,0xc
c000c146:	68 d0 23 02 c0       	push   0xc00223d0
c000c14b:	e8 44 05 00 00       	call   c000c694 <KeSetBootMessage(char const*)>
c000c150:	83 c4 10             	add    esp,0x10
c000c153:	b8 4c 05 00 00       	mov    eax,0x54c
c000c158:	8a 00                	mov    al,BYTE PTR [eax]
c000c15a:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000c161:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000c169:	83 f8 01             	cmp    eax,0x1
c000c16c:	75 12                	jne    c000c180 <ACPI::open(int, int, void*)+0x58>
c000c16e:	83 ec 0c             	sub    esp,0xc
c000c171:	68 71 22 02 c0       	push   0xc0022271
c000c176:	e8 23 81 00 00       	call   c001429e <Thr::loadKernelSymbolTable(char const*)>
c000c17b:	83 c4 10             	add    esp,0x10
c000c17e:	eb 34                	jmp    c000c1b4 <ACPI::open(int, int, void*)+0x8c>
c000c180:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000c188:	3d bb 00 00 00       	cmp    eax,0xbb
c000c18d:	75 15                	jne    c000c1a4 <ACPI::open(int, int, void*)+0x7c>
c000c18f:	83 ec 0c             	sub    esp,0xc
c000c192:	68 8f 22 02 c0       	push   0xc002228f
c000c197:	e8 02 81 00 00       	call   c001429e <Thr::loadKernelSymbolTable(char const*)>
c000c19c:	83 c4 10             	add    esp,0x10
c000c19f:	eb 13                	jmp    c000c1b4 <ACPI::open(int, int, void*)+0x8c>
c000c1a1:	8d 76 00             	lea    esi,[esi+0x0]
c000c1a4:	83 ec 0c             	sub    esp,0xc
c000c1a7:	68 ad 22 02 c0       	push   0xc00222ad
c000c1ac:	e8 e5 2b 00 00       	call   c000ed96 <KePanic(char const*)>
c000c1b1:	83 c4 10             	add    esp,0x10
c000c1b4:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000c1bc:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000c1c7:	83 ec 0c             	sub    esp,0xc
c000c1ca:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000c1d1:	e8 79 28 00 00       	call   c000ea4f <malloc>
c000c1d6:	83 c4 10             	add    esp,0x10
c000c1d9:	89 c3                	mov    ebx,eax
c000c1db:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c000c1e0:	83 ec 04             	sub    esp,0x4
c000c1e3:	50                   	push   eax
c000c1e4:	68 c7 22 02 c0       	push   0xc00222c7
c000c1e9:	53                   	push   ebx
c000c1ea:	e8 43 bf ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000c1ef:	83 c4 10             	add    esp,0x10
c000c1f2:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000c1f9:	83 ec 08             	sub    esp,0x8
c000c1fc:	6a 01                	push   0x1
c000c1fe:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000c205:	e8 46 bf ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000c20a:	83 c4 10             	add    esp,0x10
c000c20d:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000c214:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000c21c:	75 16                	jne    c000c234 <ACPI::open(int, int, void*)+0x10c>
c000c21e:	83 ec 0c             	sub    esp,0xc
c000c221:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000c228:	e8 81 bf ff ff       	call   c00081ae <File::close()>
c000c22d:	83 c4 10             	add    esp,0x10
c000c230:	eb 0a                	jmp    c000c23c <ACPI::open(int, int, void*)+0x114>
c000c232:	66 90                	xchg   ax,ax
c000c234:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000c23c:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000c244:	74 1e                	je     c000c264 <ACPI::open(int, int, void*)+0x13c>
c000c246:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000c24d:	8b 00                	mov    eax,DWORD PTR [eax]
c000c24f:	83 c0 08             	add    eax,0x8
c000c252:	8b 00                	mov    eax,DWORD PTR [eax]
c000c254:	83 ec 0c             	sub    esp,0xc
c000c257:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000c25e:	ff d0                	call   eax
c000c260:	83 c4 10             	add    esp,0x10
c000c263:	90                   	nop
c000c264:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000c26b:	83 f0 01             	xor    eax,0x1
c000c26e:	0f b6 c0             	movzx  eax,al
c000c271:	85 c0                	test   eax,eax
c000c273:	74 2f                	je     c000c2a4 <ACPI::open(int, int, void*)+0x17c>
c000c275:	83 ec 0c             	sub    esp,0xc
c000c278:	68 e5 22 02 c0       	push   0xc00222e5
c000c27d:	e8 12 04 00 00       	call   c000c694 <KeSetBootMessage(char const*)>
c000c282:	83 c4 10             	add    esp,0x10
c000c285:	c7 84 24 60 01 00 00 0c 00 00 00 	mov    DWORD PTR [esp+0x160],0xc
c000c290:	83 ec 0c             	sub    esp,0xc
c000c293:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000c29a:	e8 51 61 00 00       	call   c00123f0 <Virt::setupPageSwapping(int)>
c000c29f:	83 c4 10             	add    esp,0x10
c000c2a2:	66 90                	xchg   ax,ax
c000c2a4:	83 ec 0c             	sub    esp,0xc
c000c2a7:	68 00 23 02 c0       	push   0xc0022300
c000c2ac:	e8 e3 03 00 00       	call   c000c694 <KeSetBootMessage(char const*)>
c000c2b1:	83 c4 10             	add    esp,0x10
c000c2b4:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000c2bb:	83 ec 08             	sub    esp,0x8
c000c2be:	6a 13                	push   0x13
c000c2c0:	50                   	push   eax
c000c2c1:	e8 ca d0 ff ff       	call   c0009390 <getDevicesOfType(DeviceType)>
c000c2c6:	83 c4 0c             	add    esp,0xc
c000c2c9:	8d 76 00             	lea    esi,[esi+0x0]
c000c2cc:	83 ec 0c             	sub    esp,0xc
c000c2cf:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c2d6:	50                   	push   eax
c000c2d7:	e8 10 44 01 00       	call   c00206ec <LinkedList<Device>::isEmpty()>
c000c2dc:	83 c4 10             	add    esp,0x10
c000c2df:	83 f0 01             	xor    eax,0x1
c000c2e2:	0f b6 c0             	movzx  eax,al
c000c2e5:	85 c0                	test   eax,eax
c000c2e7:	0f 84 47 01 00 00    	je     c000c434 <ACPI::open(int, int, void*)+0x30c>
c000c2ed:	83 ec 0c             	sub    esp,0xc
c000c2f0:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c2f7:	50                   	push   eax
c000c2f8:	e8 0b 44 01 00       	call   c0020708 <LinkedList<Device>::getFirstElement()>
c000c2fd:	83 c4 10             	add    esp,0x10
c000c300:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000c307:	83 ec 0c             	sub    esp,0xc
c000c30a:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c311:	50                   	push   eax
c000c312:	e8 f9 43 01 00       	call   c0020710 <LinkedList<Device>::removeFirst()>
c000c317:	83 c4 10             	add    esp,0x10
c000c31a:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000c321:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000c328:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000c32f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000c333:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000c339:	ba 09 00 00 00       	mov    edx,0x9
c000c33e:	fc                   	cld    
c000c33f:	89 c7                	mov    edi,eax
c000c341:	89 de                	mov    esi,ebx
c000c343:	89 d1                	mov    ecx,edx
c000c345:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c347:	83 ec 08             	sub    esp,0x8
c000c34a:	8d 44 24 38          	lea    eax,[esp+0x38]
c000c34e:	50                   	push   eax
c000c34f:	83 ec 24             	sub    esp,0x24
c000c352:	89 e0                	mov    eax,esp
c000c354:	89 c3                	mov    ebx,eax
c000c356:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000c35a:	ba 09 00 00 00       	mov    edx,0x9
c000c35f:	89 df                	mov    edi,ebx
c000c361:	89 c6                	mov    esi,eax
c000c363:	89 d1                	mov    ecx,edx
c000c365:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c367:	e8 76 ff 00 00       	call   c001c2e2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000c36c:	83 c4 30             	add    esp,0x30
c000c36f:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000c376:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000c37e:	0f 84 48 ff ff ff    	je     c000c2cc <ACPI::open(int, int, void*)+0x1a4>
c000c384:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000c38f:	83 ec 0c             	sub    esp,0xc
c000c392:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000c399:	e8 b1 26 00 00       	call   c000ea4f <malloc>
c000c39e:	83 c4 10             	add    esp,0x10
c000c3a1:	89 c3                	mov    ebx,eax
c000c3a3:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c000c3a8:	83 ec 04             	sub    esp,0x4
c000c3ab:	50                   	push   eax
c000c3ac:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000c3b3:	53                   	push   ebx
c000c3b4:	e8 79 bd ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000c3b9:	83 c4 10             	add    esp,0x10
c000c3bc:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000c3c3:	83 ec 0c             	sub    esp,0xc
c000c3c6:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000c3cd:	e8 42 c0 ff ff       	call   c0008414 <File::exists()>
c000c3d2:	83 c4 10             	add    esp,0x10
c000c3d5:	0f b6 c0             	movzx  eax,al
c000c3d8:	85 c0                	test   eax,eax
c000c3da:	74 28                	je     c000c404 <ACPI::open(int, int, void*)+0x2dc>
c000c3dc:	83 ec 08             	sub    esp,0x8
c000c3df:	6a 01                	push   0x1
c000c3e1:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000c3e8:	e8 2b 89 00 00       	call   c0014d18 <Thr::loadDLL(char const*, bool)>
c000c3ed:	83 c4 10             	add    esp,0x10
c000c3f0:	83 ec 08             	sub    esp,0x8
c000c3f3:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000c3fa:	50                   	push   eax
c000c3fb:	e8 6a 8b 00 00       	call   c0014f6a <Thr::executeDLL(unsigned long, void*)>
c000c400:	83 c4 10             	add    esp,0x10
c000c403:	90                   	nop
c000c404:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000c40c:	0f 84 ba fe ff ff    	je     c000c2cc <ACPI::open(int, int, void*)+0x1a4>
c000c412:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000c419:	8b 00                	mov    eax,DWORD PTR [eax]
c000c41b:	83 c0 08             	add    eax,0x8
c000c41e:	8b 00                	mov    eax,DWORD PTR [eax]
c000c420:	83 ec 0c             	sub    esp,0xc
c000c423:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000c42a:	ff d0                	call   eax
c000c42c:	83 c4 10             	add    esp,0x10
c000c42f:	e9 98 fe ff ff       	jmp    c000c2cc <ACPI::open(int, int, void*)+0x1a4>
c000c434:	83 ec 0c             	sub    esp,0xc
c000c437:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c43e:	50                   	push   eax
c000c43f:	e8 a4 42 01 00       	call   c00206e8 <LinkedList<Device>::~LinkedList()>
c000c444:	83 c4 10             	add    esp,0x10
c000c447:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c000c44d:	83 ec 08             	sub    esp,0x8
c000c450:	6a 01                	push   0x1
c000c452:	68 1a 23 02 c0       	push   0xc002231a
c000c457:	e8 bc 88 00 00       	call   c0014d18 <Thr::loadDLL(char const*, bool)>
c000c45c:	83 c4 10             	add    esp,0x10
c000c45f:	83 ec 08             	sub    esp,0x8
c000c462:	53                   	push   ebx
c000c463:	50                   	push   eax
c000c464:	e8 01 8b 00 00       	call   c0014f6a <Thr::executeDLL(unsigned long, void*)>
c000c469:	83 c4 10             	add    esp,0x10
c000c46c:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000c471:	85 c0                	test   eax,eax
c000c473:	0f 84 27 01 00 00    	je     c000c5a0 <ACPI::open(int, int, void*)+0x478>
c000c479:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000c47e:	85 c0                	test   eax,eax
c000c480:	0f 84 1a 01 00 00    	je     c000c5a0 <ACPI::open(int, int, void*)+0x478>
c000c486:	83 ec 0c             	sub    esp,0xc
c000c489:	68 37 23 02 c0       	push   0xc0022337
c000c48e:	e8 01 02 00 00       	call   c000c694 <KeSetBootMessage(char const*)>
c000c493:	83 c4 10             	add    esp,0x10
c000c496:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000c4a1:	83 ec 0c             	sub    esp,0xc
c000c4a4:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000c4ab:	e8 9f 25 00 00       	call   c000ea4f <malloc>
c000c4b0:	83 c4 10             	add    esp,0x10
c000c4b3:	89 c3                	mov    ebx,eax
c000c4b5:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c000c4ba:	83 ec 04             	sub    esp,0x4
c000c4bd:	50                   	push   eax
c000c4be:	68 54 23 02 c0       	push   0xc0022354
c000c4c3:	53                   	push   ebx
c000c4c4:	e8 69 bc ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000c4c9:	83 c4 10             	add    esp,0x10
c000c4cc:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000c4d3:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000c4db:	74 1f                	je     c000c4fc <ACPI::open(int, int, void*)+0x3d4>
c000c4dd:	83 ec 0c             	sub    esp,0xc
c000c4e0:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000c4e7:	e8 28 bf ff ff       	call   c0008414 <File::exists()>
c000c4ec:	83 c4 10             	add    esp,0x10
c000c4ef:	0f b6 c0             	movzx  eax,al
c000c4f2:	85 c0                	test   eax,eax
c000c4f4:	74 06                	je     c000c4fc <ACPI::open(int, int, void*)+0x3d4>
c000c4f6:	b0 01                	mov    al,0x1
c000c4f8:	eb 06                	jmp    c000c500 <ACPI::open(int, int, void*)+0x3d8>
c000c4fa:	66 90                	xchg   ax,ax
c000c4fc:	b0 00                	mov    al,0x0
c000c4fe:	66 90                	xchg   ax,ax
c000c500:	0f b6 c0             	movzx  eax,al
c000c503:	85 c0                	test   eax,eax
c000c505:	74 25                	je     c000c52c <ACPI::open(int, int, void*)+0x404>
c000c507:	83 ec 08             	sub    esp,0x8
c000c50a:	6a 01                	push   0x1
c000c50c:	68 54 23 02 c0       	push   0xc0022354
c000c511:	e8 02 88 00 00       	call   c0014d18 <Thr::loadDLL(char const*, bool)>
c000c516:	83 c4 10             	add    esp,0x10
c000c519:	83 ec 08             	sub    esp,0x8
c000c51c:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000c523:	50                   	push   eax
c000c524:	e8 41 8a 00 00       	call   c0014f6a <Thr::executeDLL(unsigned long, void*)>
c000c529:	83 c4 10             	add    esp,0x10
c000c52c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000c534:	74 2a                	je     c000c560 <ACPI::open(int, int, void*)+0x438>
c000c536:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000c53e:	74 20                	je     c000c560 <ACPI::open(int, int, void*)+0x438>
c000c540:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000c547:	8b 00                	mov    eax,DWORD PTR [eax]
c000c549:	83 c0 08             	add    eax,0x8
c000c54c:	8b 00                	mov    eax,DWORD PTR [eax]
c000c54e:	83 ec 0c             	sub    esp,0xc
c000c551:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000c558:	ff d0                	call   eax
c000c55a:	83 c4 10             	add    esp,0x10
c000c55d:	8d 76 00             	lea    esi,[esi+0x0]
c000c560:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000c565:	83 ec 08             	sub    esp,0x8
c000c568:	68 71 23 02 c0       	push   0xc0022371
c000c56d:	50                   	push   eax
c000c56e:	e8 a1 f2 ff ff       	call   c000b814 <findDataTable(unsigned char*, char*)>
c000c573:	83 c4 10             	add    esp,0x10
c000c576:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000c57d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000c585:	74 19                	je     c000c5a0 <ACPI::open(int, int, void*)+0x478>
c000c587:	83 ec 08             	sub    esp,0x8
c000c58a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000c591:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000c598:	e8 73 fb ff ff       	call   c000c110 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000c59d:	83 c4 10             	add    esp,0x10
c000c5a0:	b8 00 00 00 00       	mov    eax,0x0
c000c5a5:	81 c4 70 01 00 00    	add    esp,0x170
c000c5ab:	5b                   	pop    ebx
c000c5ac:	5e                   	pop    esi
c000c5ad:	5f                   	pop    edi
c000c5ae:	c3                   	ret    

c000c5af <KeInitialiseAtexit()>:
c000c5af:	83 ec 10             	sub    esp,0x10
c000c5b2:	c7 05 80 ac 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ac80,0x0
c000c5bc:	6a 60                	push   0x60
c000c5be:	6a 00                	push   0x0
c000c5c0:	68 00 ad 02 c0       	push   0xc002ad00
c000c5c5:	e8 26 3f ff ff       	call   c00004f0 <memset>
c000c5ca:	83 c4 1c             	add    esp,0x1c
c000c5cd:	c3                   	ret    

c000c5ce <KeRegisterAtexit(void (*)(void*), void*)>:
c000c5ce:	a1 80 ac 02 c0       	mov    eax,ds:0xc002ac80
c000c5d3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c5d7:	89 14 85 00 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5300],edx
c000c5de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c5e2:	89 14 85 a0 ac 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5360],edx
c000c5e9:	40                   	inc    eax
c000c5ea:	a3 80 ac 02 c0       	mov    ds:0xc002ac80,eax
c000c5ef:	83 f8 17             	cmp    eax,0x17
c000c5f2:	7e 0d                	jle    c000c601 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000c5f4:	c7 44 24 04 1c 24 02 c0 	mov    DWORD PTR [esp+0x4],0xc002241c
c000c5fc:	e9 95 27 00 00       	jmp    c000ed96 <KePanic(char const*)>
c000c601:	c3                   	ret    

c000c602 <KeExecuteAtexit()>:
c000c602:	53                   	push   ebx
c000c603:	31 db                	xor    ebx,ebx
c000c605:	83 ec 08             	sub    esp,0x8
c000c608:	39 1d 80 ac 02 c0    	cmp    DWORD PTR ds:0xc002ac80,ebx
c000c60e:	7e 50                	jle    c000c660 <KeExecuteAtexit()+0x5e>
c000c610:	8b 04 9d 00 ad 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5300]
c000c617:	85 c0                	test   eax,eax
c000c619:	74 42                	je     c000c65d <KeExecuteAtexit()+0x5b>
c000c61b:	51                   	push   ecx
c000c61c:	50                   	push   eax
c000c61d:	53                   	push   ebx
c000c61e:	68 35 24 02 c0       	push   0xc0022435
c000c623:	e8 3c a9 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c628:	58                   	pop    eax
c000c629:	ff 34 9d a0 ac 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5360]
c000c630:	ff 14 9d 00 ad 02 c0 	call   DWORD PTR [ebx*4-0x3ffd5300]
c000c637:	c7 04 24 57 24 02 c0 	mov    DWORD PTR [esp],0xc0022457
c000c63e:	e8 21 a9 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c643:	c7 04 24 2f 28 02 c0 	mov    DWORD PTR [esp],0xc002282f
c000c64a:	c7 04 9d 00 ad 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd5300],0x0
c000c655:	e8 0a a9 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c65a:	83 c4 10             	add    esp,0x10
c000c65d:	43                   	inc    ebx
c000c65e:	eb a8                	jmp    c000c608 <KeExecuteAtexit()+0x6>
c000c660:	83 c4 08             	add    esp,0x8
c000c663:	5b                   	pop    ebx
c000c664:	c3                   	ret    

c000c665 <KeDisplaySplashScreen()>:
c000c665:	53                   	push   ebx
c000c666:	bb 01 00 00 00       	mov    ebx,0x1
c000c66b:	83 ec 08             	sub    esp,0x8
c000c66e:	43                   	inc    ebx
c000c66f:	0f be 83 5a 24 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffddba6]
c000c676:	85 c0                	test   eax,eax
c000c678:	74 15                	je     c000c68f <KeDisplaySplashScreen()+0x2a>
c000c67a:	83 ec 0c             	sub    esp,0xc
c000c67d:	6a 01                	push   0x1
c000c67f:	53                   	push   ebx
c000c680:	6a 00                	push   0x0
c000c682:	6a 0f                	push   0xf
c000c684:	50                   	push   eax
c000c685:	e8 4e d3 00 00       	call   c00199d8 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000c68a:	83 c4 20             	add    esp,0x20
c000c68d:	eb df                	jmp    c000c66e <KeDisplaySplashScreen()+0x9>
c000c68f:	83 c4 08             	add    esp,0x8
c000c692:	5b                   	pop    ebx
c000c693:	c3                   	ret    

c000c694 <KeSetBootMessage(char const*)>:
c000c694:	57                   	push   edi
c000c695:	56                   	push   esi
c000c696:	53                   	push   ebx
c000c697:	81 ec a4 00 00 00    	sub    esp,0xa4
c000c69d:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000c6a4:	68 9e 00 00 00       	push   0x9e
c000c6a9:	6a 00                	push   0x0
c000c6ab:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000c6af:	56                   	push   esi
c000c6b0:	e8 3b 3e ff ff       	call   c00004f0 <memset>
c000c6b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c6b8:	e8 b3 3e ff ff       	call   c0000570 <strlen>
c000c6bd:	ba 50 00 00 00       	mov    edx,0x50
c000c6c2:	83 c4 10             	add    esp,0x10
c000c6c5:	29 c2                	sub    edx,eax
c000c6c7:	31 c9                	xor    ecx,ecx
c000c6c9:	83 e2 fe             	and    edx,0xfffffffe
c000c6cc:	01 f2                	add    edx,esi
c000c6ce:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000c6d3:	84 c0                	test   al,al
c000c6d5:	74 0a                	je     c000c6e1 <KeSetBootMessage(char const*)+0x4d>
c000c6d7:	80 cc 07             	or     ah,0x7
c000c6da:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000c6de:	41                   	inc    ecx
c000c6df:	eb ed                	jmp    c000c6ce <KeSetBootMessage(char const*)+0x3a>
c000c6e1:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000c6e6:	b9 9e 00 00 00       	mov    ecx,0x9e
c000c6eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c6ed:	50                   	push   eax
c000c6ee:	50                   	push   eax
c000c6ef:	53                   	push   ebx
c000c6f0:	68 6f 24 02 c0       	push   0xc002246f
c000c6f5:	e8 6a a8 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c6fa:	81 c4 b0 00 00 00    	add    esp,0xb0
c000c700:	5b                   	pop    ebx
c000c701:	5e                   	pop    esi
c000c702:	5f                   	pop    edi
c000c703:	c3                   	ret    

c000c704 <__cxa_atexit>:
c000c704:	31 c0                	xor    eax,eax
c000c706:	c3                   	ret    

c000c707 <__cxa_finalize>:
c000c707:	c3                   	ret    

c000c708 <__stack_chk_fail>:
c000c708:	55                   	push   ebp
c000c709:	89 e5                	mov    ebp,esp
c000c70b:	83 ec 10             	sub    esp,0x10
c000c70e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c711:	68 7d 24 02 c0       	push   0xc002247d
c000c716:	e8 49 a8 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c71b:	58                   	pop    eax
c000c71c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c71f:	5a                   	pop    edx
c000c720:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c723:	68 7d 24 02 c0       	push   0xc002247d
c000c728:	e8 37 a8 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c72d:	c7 04 24 85 24 02 c0 	mov    DWORD PTR [esp],0xc0022485
c000c734:	e8 5d 26 00 00       	call   c000ed96 <KePanic(char const*)>
c000c739:	83 c4 10             	add    esp,0x10
c000c73c:	c9                   	leave  
c000c73d:	c3                   	ret    

c000c73e <__cxa_pure_virtual>:
c000c73e:	83 ec 18             	sub    esp,0x18
c000c741:	68 9d 24 02 c0       	push   0xc002249d
c000c746:	e8 4b 26 00 00       	call   c000ed96 <KePanic(char const*)>
c000c74b:	83 c4 1c             	add    esp,0x1c
c000c74e:	c3                   	ret    

c000c74f <operator new[](unsigned long)>:
c000c74f:	e9 fb 22 00 00       	jmp    c000ea4f <malloc>

c000c754 <operator delete(void*, unsigned long)>:
c000c754:	e9 16 23 00 00       	jmp    c000ea6f <rfree>

c000c759 <operator delete[](void*)>:
c000c759:	e9 11 23 00 00       	jmp    c000ea6f <rfree>

c000c75e <operator delete[](void*, unsigned long)>:
c000c75e:	e9 0c 23 00 00       	jmp    c000ea6f <rfree>
c000c763:	90                   	nop

c000c764 <CUnlockScheduler>:
c000c764:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000c76c:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000c771:	85 c0                	test   eax,eax
c000c773:	75 03                	jne    c000c778 <CUnlockScheduler+0x14>
c000c775:	fb                   	sti    
c000c776:	66 90                	xchg   ax,ax
c000c778:	90                   	nop
c000c779:	c3                   	ret    
c000c77a:	66 90                	xchg   ax,ax

c000c77c <CLockScheduler>:
c000c77c:	fa                   	cli    
c000c77d:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000c782:	83 c0 01             	add    eax,0x1
c000c785:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000c78a:	90                   	nop
c000c78b:	c3                   	ret    

c000c78c <CPrintf>:
c000c78c:	83 ec 0c             	sub    esp,0xc
c000c78f:	83 ec 08             	sub    esp,0x8
c000c792:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c796:	68 b0 24 02 c0       	push   0xc00224b0
c000c79b:	e8 c4 a7 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c7a0:	83 c4 10             	add    esp,0x10
c000c7a3:	90                   	nop
c000c7a4:	83 c4 0c             	add    esp,0xc
c000c7a7:	c3                   	ret    

c000c7a8 <CmOpen(char const*)>:
c000c7a8:	57                   	push   edi
c000c7a9:	56                   	push   esi
c000c7aa:	53                   	push   ebx
c000c7ab:	83 ec 1c             	sub    esp,0x1c
c000c7ae:	6a 30                	push   0x30
c000c7b0:	e8 9a 22 00 00       	call   c000ea4f <malloc>
c000c7b5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000c7bc:	89 c3                	mov    ebx,eax
c000c7be:	e8 8c 22 00 00       	call   c000ea4f <malloc>
c000c7c3:	83 c4 0c             	add    esp,0xc
c000c7c6:	89 c6                	mov    esi,eax
c000c7c8:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c000c7ce:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c7d2:	50                   	push   eax
c000c7d3:	e8 5a b9 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000c7d8:	83 c4 0c             	add    esp,0xc
c000c7db:	89 33                	mov    DWORD PTR [ebx],esi
c000c7dd:	8d 44 24 07          	lea    eax,[esp+0x7]
c000c7e1:	50                   	push   eax
c000c7e2:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c7e6:	50                   	push   eax
c000c7e7:	56                   	push   esi
c000c7e8:	e8 65 bc ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c000c7ed:	5a                   	pop    edx
c000c7ee:	59                   	pop    ecx
c000c7ef:	6a 01                	push   0x1
c000c7f1:	ff 33                	push   DWORD PTR [ebx]
c000c7f3:	e8 58 b9 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000c7f8:	5e                   	pop    esi
c000c7f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7fd:	e8 4d 22 00 00       	call   c000ea4f <malloc>
c000c802:	5a                   	pop    edx
c000c803:	89 c7                	mov    edi,eax
c000c805:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c809:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c80b:	8b 10                	mov    edx,DWORD PTR [eax]
c000c80d:	56                   	push   esi
c000c80e:	57                   	push   edi
c000c80f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c813:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c817:	50                   	push   eax
c000c818:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c81b:	83 c4 14             	add    esp,0x14
c000c81e:	ff 33                	push   DWORD PTR [ebx]
c000c820:	e8 89 b9 ff ff       	call   c00081ae <File::close()>
c000c825:	59                   	pop    ecx
c000c826:	58                   	pop    eax
c000c827:	6a 13                	push   0x13
c000c829:	ff 33                	push   DWORD PTR [ebx]
c000c82b:	e8 20 b9 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000c830:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c832:	8b 10                	mov    edx,DWORD PTR [eax]
c000c834:	89 34 24             	mov    DWORD PTR [esp],esi
c000c837:	57                   	push   edi
c000c838:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c83c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c840:	50                   	push   eax
c000c841:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c844:	83 c4 14             	add    esp,0x14
c000c847:	57                   	push   edi
c000c848:	e8 12 22 00 00       	call   c000ea5f <free>
c000c84d:	83 c4 10             	add    esp,0x10
c000c850:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c853:	75 10                	jne    c000c865 <CmOpen(char const*)+0xbd>
c000c855:	83 ec 0c             	sub    esp,0xc
c000c858:	68 b3 24 02 c0       	push   0xc00224b3
c000c85d:	e8 34 25 00 00       	call   c000ed96 <KePanic(char const*)>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	8d 7b 05             	lea    edi,[ebx+0x5]
c000c868:	50                   	push   eax
c000c869:	6a 00                	push   0x0
c000c86b:	6a 00                	push   0x0
c000c86d:	ff 33                	push   DWORD PTR [ebx]
c000c86f:	e8 9a b9 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000c874:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c876:	8b 10                	mov    edx,DWORD PTR [eax]
c000c878:	89 34 24             	mov    DWORD PTR [esp],esi
c000c87b:	57                   	push   edi
c000c87c:	6a 00                	push   0x0
c000c87e:	6a 2b                	push   0x2b
c000c880:	50                   	push   eax
c000c881:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c884:	83 c4 1c             	add    esp,0x1c
c000c887:	6a 00                	push   0x0
c000c889:	6a 00                	push   0x0
c000c88b:	ff 33                	push   DWORD PTR [ebx]
c000c88d:	e8 7c b9 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000c892:	83 c4 0c             	add    esp,0xc
c000c895:	6a 08                	push   0x8
c000c897:	68 c4 24 02 c0       	push   0xc00224c4
c000c89c:	57                   	push   edi
c000c89d:	e8 de 3a ff ff       	call   c0000380 <memcmp>
c000c8a2:	83 c4 10             	add    esp,0x10
c000c8a5:	85 c0                	test   eax,eax
c000c8a7:	74 10                	je     c000c8b9 <CmOpen(char const*)+0x111>
c000c8a9:	83 ec 0c             	sub    esp,0xc
c000c8ac:	68 cd 24 02 c0       	push   0xc00224cd
c000c8b1:	e8 e0 24 00 00       	call   c000ed96 <KePanic(char const*)>
c000c8b6:	83 c4 10             	add    esp,0x10
c000c8b9:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000c8bd:	89 d8                	mov    eax,ebx
c000c8bf:	83 c4 10             	add    esp,0x10
c000c8c2:	5b                   	pop    ebx
c000c8c3:	5e                   	pop    esi
c000c8c4:	5f                   	pop    edi
c000c8c5:	c3                   	ret    

c000c8c6 <CmClose(Reghive_Tag*)>:
c000c8c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8ca:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000c8ce:	74 0b                	je     c000c8db <CmClose(Reghive_Tag*)+0x15>
c000c8d0:	8b 00                	mov    eax,DWORD PTR [eax]
c000c8d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c8d6:	e9 d3 b8 ff ff       	jmp    c00081ae <File::close()>
c000c8db:	c3                   	ret    

c000c8dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000c8dc:	53                   	push   ebx
c000c8dd:	83 ec 18             	sub    esp,0x18
c000c8e0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c8e4:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c8e8:	74 29                	je     c000c913 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000c8ea:	50                   	push   eax
c000c8eb:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000c8f0:	99                   	cdq    
c000c8f1:	52                   	push   edx
c000c8f2:	50                   	push   eax
c000c8f3:	ff 33                	push   DWORD PTR [ebx]
c000c8f5:	e8 14 b9 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000c8fa:	5a                   	pop    edx
c000c8fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c8fd:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c901:	8b 10                	mov    edx,DWORD PTR [eax]
c000c903:	51                   	push   ecx
c000c904:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c908:	6a 00                	push   0x0
c000c90a:	6a 2b                	push   0x2b
c000c90c:	50                   	push   eax
c000c90d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c910:	83 c4 20             	add    esp,0x20
c000c913:	83 c4 18             	add    esp,0x18
c000c916:	5b                   	pop    ebx
c000c917:	c3                   	ret    

c000c918 <CmGetString(Reghive_Tag*, int, char*)>:
c000c918:	55                   	push   ebp
c000c919:	57                   	push   edi
c000c91a:	56                   	push   esi
c000c91b:	53                   	push   ebx
c000c91c:	31 db                	xor    ebx,ebx
c000c91e:	83 ec 70             	sub    esp,0x70
c000c921:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000c928:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000c92c:	50                   	push   eax
c000c92d:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000c934:	55                   	push   ebp
c000c935:	e8 a2 ff ff ff       	call   c000c8dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c93a:	83 c4 10             	add    esp,0x10
c000c93d:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000c942:	c1 e0 08             	shl    eax,0x8
c000c945:	89 c2                	mov    edx,eax
c000c947:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000c94c:	09 d0                	or     eax,edx
c000c94e:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000c953:	c1 e0 08             	shl    eax,0x8
c000c956:	09 d0                	or     eax,edx
c000c958:	74 25                	je     c000c97f <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000c95a:	6b fb 0d             	imul   edi,ebx,0xd
c000c95d:	52                   	push   edx
c000c95e:	8d 54 24 39          	lea    edx,[esp+0x39]
c000c962:	52                   	push   edx
c000c963:	50                   	push   eax
c000c964:	55                   	push   ebp
c000c965:	e8 72 ff ff ff       	call   c000c8dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c96a:	8d 74 24 49          	lea    esi,[esp+0x49]
c000c96e:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000c975:	b9 27 00 00 00       	mov    ecx,0x27
c000c97a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c97c:	83 c4 10             	add    esp,0x10
c000c97f:	83 c3 03             	add    ebx,0x3
c000c982:	83 fb 15             	cmp    ebx,0x15
c000c985:	75 b6                	jne    c000c93d <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000c987:	83 c4 6c             	add    esp,0x6c
c000c98a:	5b                   	pop    ebx
c000c98b:	5e                   	pop    esi
c000c98c:	5f                   	pop    edi
c000c98d:	5d                   	pop    ebp
c000c98e:	c3                   	ret    

c000c98f <CmEnterDirectory(Reghive_Tag*, int)>:
c000c98f:	83 ec 40             	sub    esp,0x40
c000c992:	8d 44 24 09          	lea    eax,[esp+0x9]
c000c996:	50                   	push   eax
c000c997:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c99b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c99f:	e8 38 ff ff ff       	call   c000c8dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c9a4:	83 c4 10             	add    esp,0x10
c000c9a7:	83 c8 ff             	or     eax,0xffffffff
c000c9aa:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000c9af:	75 19                	jne    c000c9ca <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000c9b1:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000c9b6:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000c9bb:	c1 e0 08             	shl    eax,0x8
c000c9be:	09 c2                	or     edx,eax
c000c9c0:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000c9c5:	c1 e0 10             	shl    eax,0x10
c000c9c8:	09 d0                	or     eax,edx
c000c9ca:	83 c4 3c             	add    esp,0x3c
c000c9cd:	c3                   	ret    

c000c9ce <CmGetNext(Reghive_Tag*, int)>:
c000c9ce:	83 ec 40             	sub    esp,0x40
c000c9d1:	8d 44 24 09          	lea    eax,[esp+0x9]
c000c9d5:	50                   	push   eax
c000c9d6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c9da:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c9de:	e8 f9 fe ff ff       	call   c000c8dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c9e3:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000c9e8:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000c9ed:	c1 e0 08             	shl    eax,0x8
c000c9f0:	09 c2                	or     edx,eax
c000c9f2:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000c9f7:	83 c4 4c             	add    esp,0x4c
c000c9fa:	c1 e0 10             	shl    eax,0x10
c000c9fd:	09 d0                	or     eax,edx
c000c9ff:	c3                   	ret    

c000ca00 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000ca00:	53                   	push   ebx
c000ca01:	83 ec 18             	sub    esp,0x18
c000ca04:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ca08:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000ca0c:	74 29                	je     c000ca37 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000ca0e:	50                   	push   eax
c000ca0f:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000ca14:	99                   	cdq    
c000ca15:	52                   	push   edx
c000ca16:	50                   	push   eax
c000ca17:	ff 33                	push   DWORD PTR [ebx]
c000ca19:	e8 f0 b7 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000ca1e:	5a                   	pop    edx
c000ca1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca21:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000ca25:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca27:	51                   	push   ecx
c000ca28:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ca2c:	6a 00                	push   0x0
c000ca2e:	6a 2b                	push   0x2b
c000ca30:	50                   	push   eax
c000ca31:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ca34:	83 c4 20             	add    esp,0x20
c000ca37:	83 c4 18             	add    esp,0x18
c000ca3a:	5b                   	pop    ebx
c000ca3b:	c3                   	ret    

c000ca3c <CmFreeExtent(Reghive_Tag*, int)>:
c000ca3c:	53                   	push   ebx
c000ca3d:	83 ec 3c             	sub    esp,0x3c
c000ca40:	6a 2b                	push   0x2b
c000ca42:	6a 00                	push   0x0
c000ca44:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000ca48:	53                   	push   ebx
c000ca49:	e8 a2 3a ff ff       	call   c00004f0 <memset>
c000ca4e:	83 c4 0c             	add    esp,0xc
c000ca51:	53                   	push   ebx
c000ca52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ca56:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ca5a:	e8 a1 ff ff ff       	call   c000ca00 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ca5f:	83 c4 48             	add    esp,0x48
c000ca62:	5b                   	pop    ebx
c000ca63:	c3                   	ret    

c000ca64 <CmUpdateHeader(Reghive_Tag*)>:
c000ca64:	83 ec 0c             	sub    esp,0xc
c000ca67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca6b:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000ca6f:	74 10                	je     c000ca81 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000ca71:	52                   	push   edx
c000ca72:	8d 50 05             	lea    edx,[eax+0x5]
c000ca75:	52                   	push   edx
c000ca76:	6a 00                	push   0x0
c000ca78:	50                   	push   eax
c000ca79:	e8 82 ff ff ff       	call   c000ca00 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ca7e:	83 c4 10             	add    esp,0x10
c000ca81:	83 c4 0c             	add    esp,0xc
c000ca84:	c3                   	ret    

c000ca85 <CmExpand(Reghive_Tag*, int)>:
c000ca85:	57                   	push   edi
c000ca86:	56                   	push   esi
c000ca87:	83 ce ff             	or     esi,0xffffffff
c000ca8a:	53                   	push   ebx
c000ca8b:	83 ec 30             	sub    esp,0x30
c000ca8e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ca92:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000ca96:	74 5f                	je     c000caf7 <CmExpand(Reghive_Tag*, int)+0x72>
c000ca98:	31 d2                	xor    edx,edx
c000ca9a:	31 f6                	xor    esi,esi
c000ca9c:	50                   	push   eax
c000ca9d:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000caa1:	52                   	push   edx
c000caa2:	50                   	push   eax
c000caa3:	ff 33                	push   DWORD PTR [ebx]
c000caa5:	e8 64 b7 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000caaa:	83 c4 0c             	add    esp,0xc
c000caad:	6a 2b                	push   0x2b
c000caaf:	6a 00                	push   0x0
c000cab1:	8d 7c 24 11          	lea    edi,[esp+0x11]
c000cab5:	57                   	push   edi
c000cab6:	e8 35 3a ff ff       	call   c00004f0 <memset>
c000cabb:	83 c4 10             	add    esp,0x10
c000cabe:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000cac2:	7d 1b                	jge    c000cadf <CmExpand(Reghive_Tag*, int)+0x5a>
c000cac4:	83 ec 0c             	sub    esp,0xc
c000cac7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cac9:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000cacd:	8b 10                	mov    edx,DWORD PTR [eax]
c000cacf:	46                   	inc    esi
c000cad0:	51                   	push   ecx
c000cad1:	57                   	push   edi
c000cad2:	6a 00                	push   0x0
c000cad4:	6a 2b                	push   0x2b
c000cad6:	50                   	push   eax
c000cad7:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000cada:	83 c4 20             	add    esp,0x20
c000cadd:	eb df                	jmp    c000cabe <CmExpand(Reghive_Tag*, int)+0x39>
c000cadf:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000cae3:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c000cae6:	83 ec 0c             	sub    esp,0xc
c000cae9:	01 f2                	add    edx,esi
c000caeb:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c000caee:	53                   	push   ebx
c000caef:	e8 70 ff ff ff       	call   c000ca64 <CmUpdateHeader(Reghive_Tag*)>
c000caf4:	83 c4 10             	add    esp,0x10
c000caf7:	83 c4 30             	add    esp,0x30
c000cafa:	89 f0                	mov    eax,esi
c000cafc:	5b                   	pop    ebx
c000cafd:	5e                   	pop    esi
c000cafe:	5f                   	pop    edi
c000caff:	c3                   	ret    

c000cb00 <CmFindUnusedExtent(Reghive_Tag*)>:
c000cb00:	55                   	push   ebp
c000cb01:	57                   	push   edi
c000cb02:	56                   	push   esi
c000cb03:	53                   	push   ebx
c000cb04:	83 cb ff             	or     ebx,0xffffffff
c000cb07:	83 ec 1c             	sub    esp,0x1c
c000cb0a:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000cb0e:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000cb12:	74 68                	je     c000cb7c <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000cb14:	be 2b 00 00 00       	mov    esi,0x2b
c000cb19:	51                   	push   ecx
c000cb1a:	31 ff                	xor    edi,edi
c000cb1c:	6a 00                	push   0x0
c000cb1e:	31 db                	xor    ebx,ebx
c000cb20:	6a 00                	push   0x0
c000cb22:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb25:	e8 e4 b6 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000cb2a:	83 c4 10             	add    esp,0x10
c000cb2d:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000cb30:	76 3b                	jbe    c000cb6d <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000cb32:	83 ec 0c             	sub    esp,0xc
c000cb35:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cb38:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000cb3c:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb3e:	51                   	push   ecx
c000cb3f:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000cb43:	51                   	push   ecx
c000cb44:	6a 00                	push   0x0
c000cb46:	6a 01                	push   0x1
c000cb48:	50                   	push   eax
c000cb49:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cb4c:	83 c4 20             	add    esp,0x20
c000cb4f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000cb54:	74 26                	je     c000cb7c <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000cb56:	43                   	inc    ebx
c000cb57:	52                   	push   edx
c000cb58:	57                   	push   edi
c000cb59:	56                   	push   esi
c000cb5a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb5d:	e8 ac b6 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000cb62:	83 c6 2b             	add    esi,0x2b
c000cb65:	83 d7 00             	adc    edi,0x0
c000cb68:	83 c4 10             	add    esp,0x10
c000cb6b:	eb c0                	jmp    c000cb2d <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000cb6d:	50                   	push   eax
c000cb6e:	50                   	push   eax
c000cb6f:	6a 40                	push   0x40
c000cb71:	55                   	push   ebp
c000cb72:	e8 0e ff ff ff       	call   c000ca85 <CmExpand(Reghive_Tag*, int)>
c000cb77:	83 c4 10             	add    esp,0x10
c000cb7a:	89 c3                	mov    ebx,eax
c000cb7c:	83 c4 1c             	add    esp,0x1c
c000cb7f:	89 d8                	mov    eax,ebx
c000cb81:	5b                   	pop    ebx
c000cb82:	5e                   	pop    esi
c000cb83:	5f                   	pop    edi
c000cb84:	5d                   	pop    ebp
c000cb85:	c3                   	ret    

c000cb86 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000cb86:	55                   	push   ebp
c000cb87:	57                   	push   edi
c000cb88:	56                   	push   esi
c000cb89:	53                   	push   ebx
c000cb8a:	81 ec 88 00 00 00    	sub    esp,0x88
c000cb90:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000cb97:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cb9e:	e8 5d ff ff ff       	call   c000cb00 <CmFindUnusedExtent(Reghive_Tag*)>
c000cba3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cba7:	83 c4 0c             	add    esp,0xc
c000cbaa:	6a 2b                	push   0x2b
c000cbac:	6a 00                	push   0x0
c000cbae:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000cbb2:	55                   	push   ebp
c000cbb3:	e8 38 39 ff ff       	call   c00004f0 <memset>
c000cbb8:	83 c4 10             	add    esp,0x10
c000cbbb:	85 db                	test   ebx,ebx
c000cbbd:	74 12                	je     c000cbd1 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000cbbf:	51                   	push   ecx
c000cbc0:	55                   	push   ebp
c000cbc1:	53                   	push   ebx
c000cbc2:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cbc9:	e8 0e fd ff ff       	call   c000c8dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cbce:	83 c4 10             	add    esp,0x10
c000cbd1:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000cbd5:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000cbdc:	b9 2b 00 00 00       	mov    ecx,0x2b
c000cbe1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cbe3:	85 db                	test   ebx,ebx
c000cbe5:	74 49                	je     c000cc30 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000cbe7:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000cbec:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000cbf1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cbf5:	c1 e0 08             	shl    eax,0x8
c000cbf8:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000cbfe:	09 c8                	or     eax,ecx
c000cc00:	74 11                	je     c000cc13 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000cc02:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000cc06:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000cc0a:	c1 e8 10             	shr    eax,0x10
c000cc0d:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000cc11:	eb 0f                	jmp    c000cc22 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000cc13:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cc18:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cc1d:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000cc22:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000cc26:	c1 ea 08             	shr    edx,0x8
c000cc29:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000cc2e:	eb 0f                	jmp    c000cc3f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000cc30:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cc35:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cc3a:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000cc3f:	52                   	push   edx
c000cc40:	8d 44 24 49          	lea    eax,[esp+0x49]
c000cc44:	50                   	push   eax
c000cc45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc49:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cc50:	e8 ab fd ff ff       	call   c000ca00 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cc55:	83 c4 10             	add    esp,0x10
c000cc58:	85 db                	test   ebx,ebx
c000cc5a:	74 12                	je     c000cc6e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000cc5c:	50                   	push   eax
c000cc5d:	55                   	push   ebp
c000cc5e:	53                   	push   ebx
c000cc5f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cc66:	e8 95 fd ff ff       	call   c000ca00 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cc6b:	83 c4 10             	add    esp,0x10
c000cc6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cc72:	83 c4 7c             	add    esp,0x7c
c000cc75:	5b                   	pop    ebx
c000cc76:	5e                   	pop    esi
c000cc77:	5f                   	pop    edi
c000cc78:	5d                   	pop    ebp
c000cc79:	c3                   	ret    

c000cc7a <CmSetString(Reghive_Tag*, int, char const*)>:
c000cc7a:	55                   	push   ebp
c000cc7b:	57                   	push   edi
c000cc7c:	56                   	push   esi
c000cc7d:	53                   	push   ebx
c000cc7e:	bb 27 00 00 00       	mov    ebx,0x27
c000cc83:	81 ec 88 00 00 00    	sub    esp,0x88
c000cc89:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000cc90:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000cc97:	e8 d4 38 ff ff       	call   c0000570 <strlen>
c000cc9c:	8d 48 26             	lea    ecx,[eax+0x26]
c000cc9f:	89 c8                	mov    eax,ecx
c000cca1:	99                   	cdq    
c000cca2:	f7 fb                	idiv   ebx
c000cca4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cca8:	83 c4 10             	add    esp,0x10
c000ccab:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000ccb1:	7e 10                	jle    c000ccc3 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000ccb3:	83 ec 0c             	sub    esp,0xc
c000ccb6:	68 de 24 02 c0       	push   0xc00224de
c000ccbb:	e8 d6 20 00 00       	call   c000ed96 <KePanic(char const*)>
c000ccc0:	83 c4 10             	add    esp,0x10
c000ccc3:	31 ff                	xor    edi,edi
c000ccc5:	50                   	push   eax
c000ccc6:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000ccca:	53                   	push   ebx
c000cccb:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000ccd2:	56                   	push   esi
c000ccd3:	e8 04 fc ff ff       	call   c000c8dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ccd8:	83 c4 10             	add    esp,0x10
c000ccdb:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c000ccdf:	89 d0                	mov    eax,edx
c000cce1:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c000cce5:	c1 e0 08             	shl    eax,0x8
c000cce8:	09 c2                	or     edx,eax
c000ccea:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000ccee:	c1 e2 08             	shl    edx,0x8
c000ccf1:	09 c2                	or     edx,eax
c000ccf3:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000ccf7:	7e 76                	jle    c000cd6f <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c000ccf9:	85 d2                	test   edx,edx
c000ccfb:	75 25                	jne    c000cd22 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000ccfd:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000cd02:	8d 44 24 45          	lea    eax,[esp+0x45]
c000cd06:	50                   	push   eax
c000cd07:	6a 00                	push   0x0
c000cd09:	6a 00                	push   0x0
c000cd0b:	56                   	push   esi
c000cd0c:	e8 75 fe ff ff       	call   c000cb86 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000cd11:	83 c4 10             	add    esp,0x10
c000cd14:	89 c2                	mov    edx,eax
c000cd16:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000cd19:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000cd1c:	c1 f8 10             	sar    eax,0x10
c000cd1f:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000cd22:	55                   	push   ebp
c000cd23:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c000cd27:	55                   	push   ebp
c000cd28:	52                   	push   edx
c000cd29:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd2d:	56                   	push   esi
c000cd2e:	e8 a9 fb ff ff       	call   c000c8dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cd33:	83 c4 0c             	add    esp,0xc
c000cd36:	6a 27                	push   0x27
c000cd38:	6a 00                	push   0x0
c000cd3a:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000cd3e:	51                   	push   ecx
c000cd3f:	e8 ac 37 ff ff       	call   c00004f0 <memset>
c000cd44:	83 c4 0c             	add    esp,0xc
c000cd47:	6b c7 27             	imul   eax,edi,0x27
c000cd4a:	6a 27                	push   0x27
c000cd4c:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000cd53:	50                   	push   eax
c000cd54:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000cd58:	51                   	push   ecx
c000cd59:	e8 22 39 ff ff       	call   c0000680 <strncpy>
c000cd5e:	83 c4 0c             	add    esp,0xc
c000cd61:	55                   	push   ebp
c000cd62:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cd66:	52                   	push   edx
c000cd67:	56                   	push   esi
c000cd68:	e8 93 fc ff ff       	call   c000ca00 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cd6d:	eb 19                	jmp    c000cd88 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c000cd6f:	85 d2                	test   edx,edx
c000cd71:	74 18                	je     c000cd8b <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c000cd73:	51                   	push   ecx
c000cd74:	51                   	push   ecx
c000cd75:	52                   	push   edx
c000cd76:	56                   	push   esi
c000cd77:	e8 c0 fc ff ff       	call   c000ca3c <CmFreeExtent(Reghive_Tag*, int)>
c000cd7c:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000cd80:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000cd84:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000cd88:	83 c4 10             	add    esp,0x10
c000cd8b:	47                   	inc    edi
c000cd8c:	83 c3 03             	add    ebx,0x3
c000cd8f:	83 ff 07             	cmp    edi,0x7
c000cd92:	0f 85 43 ff ff ff    	jne    c000ccdb <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000cd98:	50                   	push   eax
c000cd99:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000cd9d:	50                   	push   eax
c000cd9e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cda5:	56                   	push   esi
c000cda6:	e8 55 fc ff ff       	call   c000ca00 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cdab:	81 c4 8c 00 00 00    	add    esp,0x8c
c000cdb1:	5b                   	pop    ebx
c000cdb2:	5e                   	pop    esi
c000cdb3:	5f                   	pop    edi
c000cdb4:	5d                   	pop    ebp
c000cdb5:	c3                   	ret    

c000cdb6 <CmGetMatch(char*, char*, bool, bool*)>:
c000cdb6:	56                   	push   esi
c000cdb7:	53                   	push   ebx
c000cdb8:	50                   	push   eax
c000cdb9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cdbd:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000cdc2:	74 25                	je     c000cde9 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000cdc4:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000cdc7:	31 db                	xor    ebx,ebx
c000cdc9:	50                   	push   eax
c000cdca:	50                   	push   eax
c000cdcb:	8d 04 9d 80 48 02 c0 	lea    eax,[ebx*4-0x3ffdb780]
c000cdd2:	50                   	push   eax
c000cdd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd7:	e8 74 39 ff ff       	call   c0000750 <strcmp>
c000cddc:	83 c4 10             	add    esp,0x10
c000cddf:	85 c0                	test   eax,eax
c000cde1:	74 2e                	je     c000ce11 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000cde3:	43                   	inc    ebx
c000cde4:	83 fb 3f             	cmp    ebx,0x3f
c000cde7:	75 e0                	jne    c000cdc9 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000cde9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000cdec:	31 db                	xor    ebx,ebx
c000cdee:	8d 04 9d 80 48 02 c0 	lea    eax,[ebx*4-0x3ffdb780]
c000cdf5:	51                   	push   ecx
c000cdf6:	51                   	push   ecx
c000cdf7:	50                   	push   eax
c000cdf8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000cdfc:	e8 4f 39 ff ff       	call   c0000750 <strcmp>
c000ce01:	83 c4 10             	add    esp,0x10
c000ce04:	85 c0                	test   eax,eax
c000ce06:	74 09                	je     c000ce11 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000ce08:	43                   	inc    ebx
c000ce09:	83 fb 3f             	cmp    ebx,0x3f
c000ce0c:	75 e0                	jne    c000cdee <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000ce0e:	83 cb ff             	or     ebx,0xffffffff
c000ce11:	89 d8                	mov    eax,ebx
c000ce13:	5a                   	pop    edx
c000ce14:	5b                   	pop    ebx
c000ce15:	5e                   	pop    esi
c000ce16:	c3                   	ret    

c000ce17 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000ce17:	55                   	push   ebp
c000ce18:	31 c0                	xor    eax,eax
c000ce1a:	57                   	push   edi
c000ce1b:	56                   	push   esi
c000ce1c:	53                   	push   ebx
c000ce1d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ce21:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ce25:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000ce27:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000ce2b:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000ce2e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ce32:	83 fd 1f             	cmp    ebp,0x1f
c000ce35:	7f 0b                	jg     c000ce42 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000ce37:	0f b6 c2             	movzx  eax,dl
c000ce3a:	d3 e0                	shl    eax,cl
c000ce3c:	09 07                	or     DWORD PTR [edi],eax
c000ce3e:	b0 01                	mov    al,0x1
c000ce40:	01 33                	add    DWORD PTR [ebx],esi
c000ce42:	5b                   	pop    ebx
c000ce43:	5e                   	pop    esi
c000ce44:	5f                   	pop    edi
c000ce45:	5d                   	pop    ebp
c000ce46:	c3                   	ret    

c000ce47 <CmGetShift(unsigned int*, int*, int, bool*)>:
c000ce47:	57                   	push   edi
c000ce48:	56                   	push   esi
c000ce49:	53                   	push   ebx
c000ce4a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ce4e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ce52:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ce56:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ce5a:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000ce5c:	7c 17                	jl     c000ce75 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000ce5e:	8b 17                	mov    edx,DWORD PTR [edi]
c000ce60:	b8 01 00 00 00       	mov    eax,0x1
c000ce65:	d3 e0                	shl    eax,cl
c000ce67:	48                   	dec    eax
c000ce68:	21 d0                	and    eax,edx
c000ce6a:	d3 ea                	shr    edx,cl
c000ce6c:	89 17                	mov    DWORD PTR [edi],edx
c000ce6e:	29 0b                	sub    DWORD PTR [ebx],ecx
c000ce70:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000ce73:	eb 05                	jmp    c000ce7a <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000ce75:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000ce78:	31 c0                	xor    eax,eax
c000ce7a:	5b                   	pop    ebx
c000ce7b:	5e                   	pop    esi
c000ce7c:	5f                   	pop    edi
c000ce7d:	c3                   	ret    

c000ce7e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000ce7e:	83 ec 40             	sub    esp,0x40
c000ce81:	8d 44 24 09          	lea    eax,[esp+0x9]
c000ce85:	50                   	push   eax
c000ce86:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ce8a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ce8e:	e8 49 fa ff ff       	call   c000c8dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ce93:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ce97:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000ce9b:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000ce9f:	89 10                	mov    DWORD PTR [eax],edx
c000cea1:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000cea4:	83 c4 4c             	add    esp,0x4c
c000cea7:	c3                   	ret    

c000cea8 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000cea8:	55                   	push   ebp
c000cea9:	57                   	push   edi
c000ceaa:	56                   	push   esi
c000ceab:	53                   	push   ebx
c000ceac:	83 ec 40             	sub    esp,0x40
c000ceaf:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000ceb3:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000ceb7:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cebb:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000cebf:	53                   	push   ebx
c000cec0:	56                   	push   esi
c000cec1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000cec5:	e8 12 fa ff ff       	call   c000c8dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ceca:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000cece:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000ced2:	83 c4 0c             	add    esp,0xc
c000ced5:	53                   	push   ebx
c000ced6:	56                   	push   esi
c000ced7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000cedb:	e8 20 fb ff ff       	call   c000ca00 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cee0:	83 c4 4c             	add    esp,0x4c
c000cee3:	5b                   	pop    ebx
c000cee4:	5e                   	pop    esi
c000cee5:	5f                   	pop    edi
c000cee6:	5d                   	pop    ebp
c000cee7:	c3                   	ret    

c000cee8 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000cee8:	55                   	push   ebp
c000cee9:	57                   	push   edi
c000ceea:	56                   	push   esi
c000ceeb:	31 f6                	xor    esi,esi
c000ceed:	53                   	push   ebx
c000ceee:	31 db                	xor    ebx,ebx
c000cef0:	83 ec 40             	sub    esp,0x40
c000cef3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000cefb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf03:	6a 12                	push   0x12
c000cf05:	68 ee 00 00 00       	push   0xee
c000cf0a:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000cf0e:	e8 dd 35 ff ff       	call   c00004f0 <memset>
c000cf13:	83 c4 10             	add    esp,0x10
c000cf16:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000cf1a:	6a 08                	push   0x8
c000cf1c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000cf20:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000cf24:	50                   	push   eax
c000cf25:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cf29:	55                   	push   ebp
c000cf2a:	57                   	push   edi
c000cf2b:	e8 e7 fe ff ff       	call   c000ce17 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000cf30:	83 c4 10             	add    esp,0x10
c000cf33:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000cf37:	50                   	push   eax
c000cf38:	6a 06                	push   0x6
c000cf3a:	55                   	push   ebp
c000cf3b:	57                   	push   edi
c000cf3c:	e8 06 ff ff ff       	call   c000ce47 <CmGetShift(unsigned int*, int*, int, bool*)>
c000cf41:	83 c4 10             	add    esp,0x10
c000cf44:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000cf49:	74 07                	je     c000cf52 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000cf4b:	46                   	inc    esi
c000cf4c:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000cf50:	eb e1                	jmp    c000cf33 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000cf52:	43                   	inc    ebx
c000cf53:	83 fb 12             	cmp    ebx,0x12
c000cf56:	75 c2                	jne    c000cf1a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000cf58:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000cf5c:	31 db                	xor    ebx,ebx
c000cf5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000cf61:	50                   	push   eax
c000cf62:	50                   	push   eax
c000cf63:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c000cf68:	43                   	inc    ebx
c000cf69:	8d 04 85 80 48 02 c0 	lea    eax,[eax*4-0x3ffdb780]
c000cf70:	50                   	push   eax
c000cf71:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000cf75:	e8 c6 38 ff ff       	call   c0000840 <strcat>
c000cf7a:	83 c4 10             	add    esp,0x10
c000cf7d:	83 fb 18             	cmp    ebx,0x18
c000cf80:	75 df                	jne    c000cf61 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000cf82:	83 c4 3c             	add    esp,0x3c
c000cf85:	31 c0                	xor    eax,eax
c000cf87:	5b                   	pop    ebx
c000cf88:	5e                   	pop    esi
c000cf89:	5f                   	pop    edi
c000cf8a:	5d                   	pop    ebp
c000cf8b:	c3                   	ret    

c000cf8c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000cf8c:	83 ec 40             	sub    esp,0x40
c000cf8f:	8d 44 24 09          	lea    eax,[esp+0x9]
c000cf93:	50                   	push   eax
c000cf94:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cf98:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cf9c:	e8 3b f9 ff ff       	call   c000c8dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cfa1:	58                   	pop    eax
c000cfa2:	5a                   	pop    edx
c000cfa3:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000cfa7:	8d 44 24 15          	lea    eax,[esp+0x15]
c000cfab:	50                   	push   eax
c000cfac:	e8 37 ff ff ff       	call   c000cee8 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000cfb1:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000cfb6:	83 c4 4c             	add    esp,0x4c
c000cfb9:	c3                   	ret    

c000cfba <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000cfba:	55                   	push   ebp
c000cfbb:	57                   	push   edi
c000cfbc:	56                   	push   esi
c000cfbd:	53                   	push   ebx
c000cfbe:	31 db                	xor    ebx,ebx
c000cfc0:	83 ec 70             	sub    esp,0x70
c000cfc3:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000cfca:	6a 30                	push   0x30
c000cfcc:	6a 00                	push   0x0
c000cfce:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000cfd2:	56                   	push   esi
c000cfd3:	e8 18 35 ff ff       	call   c00004f0 <memset>
c000cfd8:	83 c4 10             	add    esp,0x10
c000cfdb:	83 ec 0c             	sub    esp,0xc
c000cfde:	57                   	push   edi
c000cfdf:	e8 8c 35 ff ff       	call   c0000570 <strlen>
c000cfe4:	83 c4 10             	add    esp,0x10
c000cfe7:	39 d8                	cmp    eax,ebx
c000cfe9:	76 16                	jbe    c000d001 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000cfeb:	83 ec 0c             	sub    esp,0xc
c000cfee:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000cff2:	50                   	push   eax
c000cff3:	e8 38 39 ff ff       	call   c0000930 <toupper>
c000cff8:	83 c4 10             	add    esp,0x10
c000cffb:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000cffe:	43                   	inc    ebx
c000cfff:	eb da                	jmp    c000cfdb <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000d001:	31 f6                	xor    esi,esi
c000d003:	52                   	push   edx
c000d004:	31 ff                	xor    edi,edi
c000d006:	6a 18                	push   0x18
c000d008:	6a 3f                	push   0x3f
c000d00a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000d00e:	50                   	push   eax
c000d00f:	e8 dc 34 ff ff       	call   c00004f0 <memset>
c000d014:	83 c4 10             	add    esp,0x10
c000d017:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c000d01b:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c000d01f:	84 c0                	test   al,al
c000d021:	0f 84 b0 00 00 00    	je     c000d0d7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000d027:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000d02b:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000d030:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000d034:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c000d039:	8d 6e 01             	lea    ebp,[esi+0x1]
c000d03c:	83 ec 0c             	sub    esp,0xc
c000d03f:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000d043:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000d047:	53                   	push   ebx
c000d048:	e8 23 35 ff ff       	call   c0000570 <strlen>
c000d04d:	83 c4 10             	add    esp,0x10
c000d050:	85 c0                	test   eax,eax
c000d052:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d056:	74 0b                	je     c000d063 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000d058:	50                   	push   eax
c000d059:	6a 01                	push   0x1
c000d05b:	53                   	push   ebx
c000d05c:	8d 44 24 20          	lea    eax,[esp+0x20]
c000d060:	50                   	push   eax
c000d061:	eb 0a                	jmp    c000d06d <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000d063:	50                   	push   eax
c000d064:	6a 00                	push   0x0
c000d066:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000d06a:	50                   	push   eax
c000d06b:	6a 00                	push   0x0
c000d06d:	e8 44 fd ff ff       	call   c000cdb6 <CmGetMatch(char*, char*, bool, bool*)>
c000d072:	83 c4 10             	add    esp,0x10
c000d075:	83 f8 ff             	cmp    eax,0xffffffff
c000d078:	75 1a                	jne    c000d094 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000d07a:	83 ec 0c             	sub    esp,0xc
c000d07d:	68 f3 24 02 c0       	push   0xc00224f3
c000d082:	e8 0f 1d 00 00       	call   c000ed96 <KePanic(char const*)>
c000d087:	83 c4 10             	add    esp,0x10
c000d08a:	b8 02 00 00 00       	mov    eax,0x2
c000d08f:	e9 bc 00 00 00       	jmp    c000d150 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000d094:	83 ff 18             	cmp    edi,0x18
c000d097:	75 1a                	jne    c000d0b3 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000d099:	83 ec 0c             	sub    esp,0xc
c000d09c:	68 08 25 02 c0       	push   0xc0022508
c000d0a1:	e8 f0 1c 00 00       	call   c000ed96 <KePanic(char const*)>
c000d0a6:	83 c4 10             	add    esp,0x10
c000d0a9:	b8 01 00 00 00       	mov    eax,0x1
c000d0ae:	e9 9d 00 00 00       	jmp    c000d150 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000d0b3:	47                   	inc    edi
c000d0b4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d0b9:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000d0bd:	74 02                	je     c000d0c1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c000d0bf:	89 ee                	mov    esi,ebp
c000d0c1:	83 ec 0c             	sub    esp,0xc
c000d0c4:	53                   	push   ebx
c000d0c5:	e8 a6 34 ff ff       	call   c0000570 <strlen>
c000d0ca:	83 c4 10             	add    esp,0x10
c000d0cd:	85 c0                	test   eax,eax
c000d0cf:	74 06                	je     c000d0d7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000d0d1:	46                   	inc    esi
c000d0d2:	e9 40 ff ff ff       	jmp    c000d017 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000d0d7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d0df:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d0e7:	31 f6                	xor    esi,esi
c000d0e9:	50                   	push   eax
c000d0ea:	31 ff                	xor    edi,edi
c000d0ec:	6a 12                	push   0x12
c000d0ee:	68 ee 00 00 00       	push   0xee
c000d0f3:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000d0fa:	e8 f1 33 ff ff       	call   c00004f0 <memset>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	83 fe 17             	cmp    esi,0x17
c000d105:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000d109:	7e 26                	jle    c000d131 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c000d10b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d10f:	50                   	push   eax
c000d110:	6a 08                	push   0x8
c000d112:	55                   	push   ebp
c000d113:	53                   	push   ebx
c000d114:	e8 2e fd ff ff       	call   c000ce47 <CmGetShift(unsigned int*, int*, int, bool*)>
c000d119:	83 c4 10             	add    esp,0x10
c000d11c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d121:	74 26                	je     c000d149 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c000d123:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000d12a:	4e                   	dec    esi
c000d12b:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000d12e:	47                   	inc    edi
c000d12f:	eb 1c                	jmp    c000d14d <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000d131:	6a 06                	push   0x6
c000d133:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c000d138:	50                   	push   eax
c000d139:	55                   	push   ebp
c000d13a:	53                   	push   ebx
c000d13b:	e8 d7 fc ff ff       	call   c000ce17 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000d140:	83 c4 10             	add    esp,0x10
c000d143:	84 c0                	test   al,al
c000d145:	75 06                	jne    c000d14d <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000d147:	eb c2                	jmp    c000d10b <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c000d149:	31 c0                	xor    eax,eax
c000d14b:	eb 03                	jmp    c000d150 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000d14d:	46                   	inc    esi
c000d14e:	eb b2                	jmp    c000d102 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c000d150:	83 c4 6c             	add    esp,0x6c
c000d153:	5b                   	pop    ebx
c000d154:	5e                   	pop    esi
c000d155:	5f                   	pop    edi
c000d156:	5d                   	pop    ebp
c000d157:	c3                   	ret    

c000d158 <CmCreateString(Reghive_Tag*, int, char const*)>:
c000d158:	53                   	push   ebx
c000d159:	83 ec 3c             	sub    esp,0x3c
c000d15c:	6a 2b                	push   0x2b
c000d15e:	6a 00                	push   0x0
c000d160:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d164:	53                   	push   ebx
c000d165:	e8 86 33 ff ff       	call   c00004f0 <memset>
c000d16a:	58                   	pop    eax
c000d16b:	5a                   	pop    edx
c000d16c:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d170:	50                   	push   eax
c000d171:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d175:	e8 40 fe ff ff       	call   c000cfba <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d17a:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000d17f:	83 c4 0c             	add    esp,0xc
c000d182:	6a 15                	push   0x15
c000d184:	6a 00                	push   0x0
c000d186:	8d 44 24 27          	lea    eax,[esp+0x27]
c000d18a:	50                   	push   eax
c000d18b:	e8 60 33 ff ff       	call   c00004f0 <memset>
c000d190:	53                   	push   ebx
c000d191:	6a 00                	push   0x0
c000d193:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d197:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d19b:	e8 e6 f9 ff ff       	call   c000cb86 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d1a0:	83 c4 58             	add    esp,0x58
c000d1a3:	5b                   	pop    ebx
c000d1a4:	c3                   	ret    

c000d1a5 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000d1a5:	56                   	push   esi
c000d1a6:	53                   	push   ebx
c000d1a7:	83 ec 48             	sub    esp,0x48
c000d1aa:	6a 12                	push   0x12
c000d1ac:	68 ff 00 00 00       	push   0xff
c000d1b1:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000d1b5:	56                   	push   esi
c000d1b6:	e8 35 33 ff ff       	call   c00004f0 <memset>
c000d1bb:	5a                   	pop    edx
c000d1bc:	59                   	pop    ecx
c000d1bd:	56                   	push   esi
c000d1be:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d1c2:	e8 f3 fd ff ff       	call   c000cfba <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d1c7:	83 c4 10             	add    esp,0x10
c000d1ca:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d1ce:	85 db                	test   ebx,ebx
c000d1d0:	74 42                	je     c000d214 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000d1d2:	50                   	push   eax
c000d1d3:	8d 44 24 19          	lea    eax,[esp+0x19]
c000d1d7:	50                   	push   eax
c000d1d8:	53                   	push   ebx
c000d1d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d1dd:	e8 fa f6 ff ff       	call   c000c8dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d1e2:	83 c4 0c             	add    esp,0xc
c000d1e5:	6a 12                	push   0x12
c000d1e7:	8d 44 24 21          	lea    eax,[esp+0x21]
c000d1eb:	50                   	push   eax
c000d1ec:	56                   	push   esi
c000d1ed:	e8 8e 31 ff ff       	call   c0000380 <memcmp>
c000d1f2:	83 c4 10             	add    esp,0x10
c000d1f5:	85 c0                	test   eax,eax
c000d1f7:	74 1e                	je     c000d217 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000d1f9:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d1fe:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000d203:	c1 e3 08             	shl    ebx,0x8
c000d206:	09 d8                	or     eax,ebx
c000d208:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000d20d:	c1 e3 10             	shl    ebx,0x10
c000d210:	09 c3                	or     ebx,eax
c000d212:	eb ba                	jmp    c000d1ce <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000d214:	83 cb ff             	or     ebx,0xffffffff
c000d217:	89 d8                	mov    eax,ebx
c000d219:	83 c4 44             	add    esp,0x44
c000d21c:	5b                   	pop    ebx
c000d21d:	5e                   	pop    esi
c000d21e:	c3                   	ret    

c000d21f <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000d21f:	57                   	push   edi
c000d220:	56                   	push   esi
c000d221:	53                   	push   ebx
c000d222:	83 ec 34             	sub    esp,0x34
c000d225:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000d229:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000d22d:	6a 2b                	push   0x2b
c000d22f:	6a 00                	push   0x0
c000d231:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d235:	53                   	push   ebx
c000d236:	e8 b5 32 ff ff       	call   c00004f0 <memset>
c000d23b:	58                   	pop    eax
c000d23c:	5a                   	pop    edx
c000d23d:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d241:	50                   	push   eax
c000d242:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d246:	e8 6f fd ff ff       	call   c000cfba <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d24b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000d24f:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000d253:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000d257:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000d25b:	53                   	push   ebx
c000d25c:	6a 00                	push   0x0
c000d25e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d262:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d266:	e8 1b f9 ff ff       	call   c000cb86 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d26b:	83 c4 50             	add    esp,0x50
c000d26e:	5b                   	pop    ebx
c000d26f:	5e                   	pop    esi
c000d270:	5f                   	pop    edi
c000d271:	c3                   	ret    

c000d272 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000d272:	55                   	push   ebp
c000d273:	57                   	push   edi
c000d274:	56                   	push   esi
c000d275:	53                   	push   ebx
c000d276:	83 ec 40             	sub    esp,0x40
c000d279:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000d27d:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d281:	6a 2b                	push   0x2b
c000d283:	6a 00                	push   0x0
c000d285:	8d 74 24 11          	lea    esi,[esp+0x11]
c000d289:	56                   	push   esi
c000d28a:	e8 61 32 ff ff       	call   c00004f0 <memset>
c000d28f:	5f                   	pop    edi
c000d290:	89 ef                	mov    edi,ebp
c000d292:	58                   	pop    eax
c000d293:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d297:	50                   	push   eax
c000d298:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d29c:	e8 19 fd ff ff       	call   c000cfba <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d2a1:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000d2a6:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000d2ab:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000d2b0:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000d2b5:	83 c4 10             	add    esp,0x10
c000d2b8:	85 ed                	test   ebp,ebp
c000d2ba:	74 14                	je     c000d2d0 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d2bc:	51                   	push   ecx
c000d2bd:	51                   	push   ecx
c000d2be:	57                   	push   edi
c000d2bf:	53                   	push   ebx
c000d2c0:	e8 09 f7 ff ff       	call   c000c9ce <CmGetNext(Reghive_Tag*, int)>
c000d2c5:	83 c4 10             	add    esp,0x10
c000d2c8:	85 c0                	test   eax,eax
c000d2ca:	74 04                	je     c000d2d0 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d2cc:	89 c7                	mov    edi,eax
c000d2ce:	eb e8                	jmp    c000d2b8 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000d2d0:	56                   	push   esi
c000d2d1:	6a 00                	push   0x0
c000d2d3:	57                   	push   edi
c000d2d4:	53                   	push   ebx
c000d2d5:	e8 ac f8 ff ff       	call   c000cb86 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d2da:	83 c4 0c             	add    esp,0xc
c000d2dd:	89 c7                	mov    edi,eax
c000d2df:	56                   	push   esi
c000d2e0:	50                   	push   eax
c000d2e1:	53                   	push   ebx
c000d2e2:	e8 f5 f5 ff ff       	call   c000c8dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d2e7:	58                   	pop    eax
c000d2e8:	5a                   	pop    edx
c000d2e9:	6a 6c                	push   0x6c
c000d2eb:	6a 00                	push   0x0
c000d2ed:	6a 00                	push   0x0
c000d2ef:	68 19 25 02 c0       	push   0xc0022519
c000d2f4:	57                   	push   edi
c000d2f5:	53                   	push   ebx
c000d2f6:	e8 24 ff ff ff       	call   c000d21f <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000d2fb:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000d2ff:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000d303:	c1 e8 10             	shr    eax,0x10
c000d306:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000d30a:	83 c4 1c             	add    esp,0x1c
c000d30d:	56                   	push   esi
c000d30e:	57                   	push   edi
c000d30f:	53                   	push   ebx
c000d310:	e8 eb f6 ff ff       	call   c000ca00 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d315:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000d31a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000d31f:	c1 e0 08             	shl    eax,0x8
c000d322:	09 c2                	or     edx,eax
c000d324:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000d329:	83 c4 4c             	add    esp,0x4c
c000d32c:	c1 e0 10             	shl    eax,0x10
c000d32f:	5b                   	pop    ebx
c000d330:	09 d0                	or     eax,edx
c000d332:	5e                   	pop    esi
c000d333:	5f                   	pop    edi
c000d334:	5d                   	pop    ebp
c000d335:	c3                   	ret    

c000d336 <zStrtok(char*, char const*)>:
c000d336:	55                   	push   ebp
c000d337:	57                   	push   edi
c000d338:	56                   	push   esi
c000d339:	53                   	push   ebx
c000d33a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d33e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d342:	85 db                	test   ebx,ebx
c000d344:	74 2f                	je     c000d375 <zStrtok(char*, char const*)+0x3f>
c000d346:	85 c0                	test   eax,eax
c000d348:	75 09                	jne    c000d353 <zStrtok(char*, char const*)+0x1d>
c000d34a:	a1 60 ad 02 c0       	mov    eax,ds:0xc002ad60
c000d34f:	85 c0                	test   eax,eax
c000d351:	74 50                	je     c000d3a3 <zStrtok(char*, char const*)+0x6d>
c000d353:	31 c9                	xor    ecx,ecx
c000d355:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000d359:	74 03                	je     c000d35e <zStrtok(char*, char const*)+0x28>
c000d35b:	41                   	inc    ecx
c000d35c:	eb f7                	jmp    c000d355 <zStrtok(char*, char const*)+0x1f>
c000d35e:	31 d2                	xor    edx,edx
c000d360:	39 ca                	cmp    edx,ecx
c000d362:	74 15                	je     c000d379 <zStrtok(char*, char const*)+0x43>
c000d364:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000d368:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000d36b:	8d 3c 10             	lea    edi,[eax+edx*1]
c000d36e:	39 ee                	cmp    esi,ebp
c000d370:	74 13                	je     c000d385 <zStrtok(char*, char const*)+0x4f>
c000d372:	42                   	inc    edx
c000d373:	eb eb                	jmp    c000d360 <zStrtok(char*, char const*)+0x2a>
c000d375:	31 c0                	xor    eax,eax
c000d377:	eb 2a                	jmp    c000d3a3 <zStrtok(char*, char const*)+0x6d>
c000d379:	c7 05 60 ad 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ad60,0x0
c000d383:	eb 1e                	jmp    c000d3a3 <zStrtok(char*, char const*)+0x6d>
c000d385:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000d388:	39 ce                	cmp    esi,ecx
c000d38a:	75 0a                	jne    c000d396 <zStrtok(char*, char const*)+0x60>
c000d38c:	40                   	inc    eax
c000d38d:	a3 60 ad 02 c0       	mov    ds:0xc002ad60,eax
c000d392:	89 d8                	mov    eax,ebx
c000d394:	eb 0d                	jmp    c000d3a3 <zStrtok(char*, char const*)+0x6d>
c000d396:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000d39a:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000d39d:	89 15 60 ad 02 c0    	mov    DWORD PTR ds:0xc002ad60,edx
c000d3a3:	5b                   	pop    ebx
c000d3a4:	5e                   	pop    esi
c000d3a5:	5f                   	pop    edi
c000d3a6:	5d                   	pop    ebp
c000d3a7:	c3                   	ret    

c000d3a8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000d3a8:	57                   	push   edi
c000d3a9:	56                   	push   esi
c000d3aa:	53                   	push   ebx
c000d3ab:	81 ec 08 01 00 00    	sub    esp,0x108
c000d3b1:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000d3b8:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000d3bf:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000d3c3:	53                   	push   ebx
c000d3c4:	e8 77 32 ff ff       	call   c0000640 <strcpy>
c000d3c9:	59                   	pop    ecx
c000d3ca:	5e                   	pop    esi
c000d3cb:	68 d6 36 02 c0       	push   0xc00236d6
c000d3d0:	53                   	push   ebx
c000d3d1:	bb 01 00 00 00       	mov    ebx,0x1
c000d3d6:	e8 5b ff ff ff       	call   c000d336 <zStrtok(char*, char const*)>
c000d3db:	83 c4 10             	add    esp,0x10
c000d3de:	85 c0                	test   eax,eax
c000d3e0:	74 3b                	je     c000d41d <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d3e2:	52                   	push   edx
c000d3e3:	50                   	push   eax
c000d3e4:	6a 01                	push   0x1
c000d3e6:	57                   	push   edi
c000d3e7:	e8 b9 fd ff ff       	call   c000d1a5 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000d3ec:	59                   	pop    ecx
c000d3ed:	89 c3                	mov    ebx,eax
c000d3ef:	5e                   	pop    esi
c000d3f0:	68 d6 36 02 c0       	push   0xc00236d6
c000d3f5:	6a 00                	push   0x0
c000d3f7:	e8 3a ff ff ff       	call   c000d336 <zStrtok(char*, char const*)>
c000d3fc:	83 c4 10             	add    esp,0x10
c000d3ff:	89 c6                	mov    esi,eax
c000d401:	85 c0                	test   eax,eax
c000d403:	74 18                	je     c000d41d <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d405:	52                   	push   edx
c000d406:	52                   	push   edx
c000d407:	53                   	push   ebx
c000d408:	57                   	push   edi
c000d409:	e8 81 f5 ff ff       	call   c000c98f <CmEnterDirectory(Reghive_Tag*, int)>
c000d40e:	83 c4 10             	add    esp,0x10
c000d411:	89 c3                	mov    ebx,eax
c000d413:	83 f8 ff             	cmp    eax,0xffffffff
c000d416:	74 05                	je     c000d41d <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d418:	50                   	push   eax
c000d419:	56                   	push   esi
c000d41a:	53                   	push   ebx
c000d41b:	eb c9                	jmp    c000d3e6 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000d41d:	81 c4 00 01 00 00    	add    esp,0x100
c000d423:	89 d8                	mov    eax,ebx
c000d425:	5b                   	pop    ebx
c000d426:	5e                   	pop    esi
c000d427:	5f                   	pop    edi
c000d428:	c3                   	ret    

c000d429 <CmDisplayTree(Reghive_Tag*, int, int)>:
c000d429:	55                   	push   ebp
c000d42a:	57                   	push   edi
c000d42b:	56                   	push   esi
c000d42c:	53                   	push   ebx
c000d42d:	83 ec 5c             	sub    esp,0x5c
c000d430:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000d434:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000d438:	85 db                	test   ebx,ebx
c000d43a:	0f 8e 84 00 00 00    	jle    c000d4c4 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000d440:	31 ed                	xor    ebp,ebp
c000d442:	57                   	push   edi
c000d443:	6a 32                	push   0x32
c000d445:	6a 00                	push   0x0
c000d447:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000d44b:	57                   	push   edi
c000d44c:	e8 9f 30 ff ff       	call   c00004f0 <memset>
c000d451:	83 c4 0c             	add    esp,0xc
c000d454:	57                   	push   edi
c000d455:	53                   	push   ebx
c000d456:	56                   	push   esi
c000d457:	e8 30 fb ff ff       	call   c000cf8c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000d45c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d460:	83 c4 10             	add    esp,0x10
c000d463:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000d467:	7d 13                	jge    c000d47c <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000d469:	83 ec 0c             	sub    esp,0xc
c000d46c:	45                   	inc    ebp
c000d46d:	68 e4 3b 02 c0       	push   0xc0023be4
c000d472:	e8 ed 9a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d477:	83 c4 10             	add    esp,0x10
c000d47a:	eb e7                	jmp    c000d463 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000d47c:	51                   	push   ecx
c000d47d:	57                   	push   edi
c000d47e:	53                   	push   ebx
c000d47f:	68 1f 25 02 c0       	push   0xc002251f
c000d484:	e8 db 9a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d489:	83 c4 10             	add    esp,0x10
c000d48c:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000d491:	75 1e                	jne    c000d4b1 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000d493:	52                   	push   edx
c000d494:	52                   	push   edx
c000d495:	53                   	push   ebx
c000d496:	56                   	push   esi
c000d497:	e8 f3 f4 ff ff       	call   c000c98f <CmEnterDirectory(Reghive_Tag*, int)>
c000d49c:	83 c4 0c             	add    esp,0xc
c000d49f:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000d4a3:	8d 51 04             	lea    edx,[ecx+0x4]
c000d4a6:	52                   	push   edx
c000d4a7:	50                   	push   eax
c000d4a8:	56                   	push   esi
c000d4a9:	e8 7b ff ff ff       	call   c000d429 <CmDisplayTree(Reghive_Tag*, int, int)>
c000d4ae:	83 c4 10             	add    esp,0x10
c000d4b1:	50                   	push   eax
c000d4b2:	50                   	push   eax
c000d4b3:	53                   	push   ebx
c000d4b4:	56                   	push   esi
c000d4b5:	e8 14 f5 ff ff       	call   c000c9ce <CmGetNext(Reghive_Tag*, int)>
c000d4ba:	83 c4 10             	add    esp,0x10
c000d4bd:	89 c3                	mov    ebx,eax
c000d4bf:	e9 74 ff ff ff       	jmp    c000d438 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000d4c4:	83 c4 5c             	add    esp,0x5c
c000d4c7:	5b                   	pop    ebx
c000d4c8:	5e                   	pop    esi
c000d4c9:	5f                   	pop    edi
c000d4ca:	5d                   	pop    ebp
c000d4cb:	c3                   	ret    

c000d4cc <CmSplitFinalSlashInPlace(char*)>:
c000d4cc:	53                   	push   ebx
c000d4cd:	83 ec 14             	sub    esp,0x14
c000d4d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000d4d4:	53                   	push   ebx
c000d4d5:	e8 96 30 ff ff       	call   c0000570 <strlen>
c000d4da:	83 c4 10             	add    esp,0x10
c000d4dd:	48                   	dec    eax
c000d4de:	85 c0                	test   eax,eax
c000d4e0:	74 15                	je     c000d4f7 <CmSplitFinalSlashInPlace(char*)+0x2b>
c000d4e2:	8d 14 03             	lea    edx,[ebx+eax*1]
c000d4e5:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d4e9:	75 09                	jne    c000d4f4 <CmSplitFinalSlashInPlace(char*)+0x28>
c000d4eb:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000d4ee:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000d4f2:	eb 05                	jmp    c000d4f9 <CmSplitFinalSlashInPlace(char*)+0x2d>
c000d4f4:	48                   	dec    eax
c000d4f5:	eb e7                	jmp    c000d4de <CmSplitFinalSlashInPlace(char*)+0x12>
c000d4f7:	31 c0                	xor    eax,eax
c000d4f9:	83 c4 08             	add    esp,0x8
c000d4fc:	5b                   	pop    ebx
c000d4fd:	c3                   	ret    
c000d4fe:	66 90                	xchg   ax,ax

c000d500 <Krnl::handlePowerButton()>:
c000d500:	83 ec 0c             	sub    esp,0xc
c000d503:	e8 c9 21 00 00       	call   c000f6d1 <KeHandlePowerButton()>
c000d508:	90                   	nop
c000d509:	83 c4 0c             	add    esp,0xc
c000d50c:	c3                   	ret    
c000d50d:	8d 76 00             	lea    esi,[esi+0x0]

c000d510 <Krnl::handleSleepButton()>:
c000d510:	83 ec 0c             	sub    esp,0xc
c000d513:	e8 d1 21 00 00       	call   c000f6e9 <KeHandleSleepButton()>
c000d518:	90                   	nop
c000d519:	83 c4 0c             	add    esp,0xc
c000d51c:	c3                   	ret    
c000d51d:	90                   	nop

c000d51e <Computer::close(int, int, void*)>:
c000d51e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d523:	c3                   	ret    

c000d524 <Computer::open(int, int, void*)>:
c000d524:	56                   	push   esi
c000d525:	53                   	push   ebx
c000d526:	83 ec 04             	sub    esp,0x4
c000d529:	f6 05 90 cd 02 c0 04 	test   BYTE PTR ds:0xc002cd90,0x4
c000d530:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d534:	0f 94 05 60 4f 02 c0 	sete   BYTE PTR ds:0xc0024f60
c000d53b:	39 1d 70 ad 02 c0    	cmp    DWORD PTR ds:0xc002ad70,ebx
c000d541:	74 10                	je     c000d553 <Computer::open(int, int, void*)+0x2f>
c000d543:	83 ec 0c             	sub    esp,0xc
c000d546:	68 2c 25 02 c0       	push   0xc002252c
c000d54b:	e8 46 18 00 00       	call   c000ed96 <KePanic(char const*)>
c000d550:	83 c4 10             	add    esp,0x10
c000d553:	83 ec 0c             	sub    esp,0xc
c000d556:	68 e4 25 02 c0       	push   0xc00225e4
c000d55b:	e8 34 f1 ff ff       	call   c000c694 <KeSetBootMessage(char const*)>
c000d560:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000d567:	e8 e3 14 00 00       	call   c000ea4f <malloc>
c000d56c:	89 04 24             	mov    DWORD PTR [esp],eax
c000d56f:	89 c6                	mov    esi,eax
c000d571:	e8 6a e7 ff ff       	call   c000bce0 <ACPI::ACPI()>
c000d576:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000d57c:	58                   	pop    eax
c000d57d:	5a                   	pop    edx
c000d57e:	56                   	push   esi
c000d57f:	53                   	push   ebx
c000d580:	e8 dd ba ff ff       	call   c0009062 <Device::addChild(Device*)>
c000d585:	c7 04 24 fc 25 02 c0 	mov    DWORD PTR [esp],0xc00225fc
c000d58c:	e8 03 f1 ff ff       	call   c000c694 <KeSetBootMessage(char const*)>
c000d591:	e8 f5 a9 00 00       	call   c0017f8b <HalEnableNMI()>
c000d596:	e8 25 9c 00 00       	call   c00171c0 <HalDetectFeatures()>
c000d59b:	c7 04 24 78 11 00 00 	mov    DWORD PTR [esp],0x1178
c000d5a2:	e8 a8 14 00 00       	call   c000ea4f <malloc>
c000d5a7:	89 04 24             	mov    DWORD PTR [esp],eax
c000d5aa:	89 c6                	mov    esi,eax
c000d5ac:	e8 15 b5 00 00       	call   c0018ac6 <CPU::CPU()>
c000d5b1:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000d5b7:	59                   	pop    ecx
c000d5b8:	58                   	pop    eax
c000d5b9:	56                   	push   esi
c000d5ba:	53                   	push   ebx
c000d5bb:	e8 a2 ba ff ff       	call   c0009062 <Device::addChild(Device*)>
c000d5c0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000d5c4:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d5ca:	8b 10                	mov    edx,DWORD PTR [eax]
c000d5cc:	51                   	push   ecx
c000d5cd:	6a 00                	push   0x0
c000d5cf:	6a 00                	push   0x0
c000d5d1:	50                   	push   eax
c000d5d2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d5d5:	83 c4 14             	add    esp,0x14
c000d5d8:	68 58 25 02 c0       	push   0xc0022558
c000d5dd:	e8 b2 f0 ff ff       	call   c000c694 <KeSetBootMessage(char const*)>
c000d5e2:	e8 3a b1 00 00       	call   c0018721 <HalInitialiseCoprocessor()>
c000d5e7:	c7 04 24 16 26 02 c0 	mov    DWORD PTR [esp],0xc0022616
c000d5ee:	e8 a1 f0 ff ff       	call   c000c694 <KeSetBootMessage(char const*)>
c000d5f3:	c7 04 24 0a d6 00 c0 	mov    DWORD PTR [esp],0xc000d60a
c000d5fa:	e8 d9 80 00 00       	call   c00156d8 <setupMultitasking(void (*)())>
c000d5ff:	83 c4 14             	add    esp,0x14
c000d602:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d607:	5b                   	pop    ebx
c000d608:	5e                   	pop    esi
c000d609:	c3                   	ret    

c000d60a <KeFirstTask()>:
c000d60a:	53                   	push   ebx
c000d60b:	83 ec 14             	sub    esp,0x14
c000d60e:	fb                   	sti    
c000d60f:	68 31 26 02 c0       	push   0xc0022631
c000d614:	e8 7b f0 ff ff       	call   c000c694 <KeSetBootMessage(char const*)>
c000d619:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c000d620:	e8 2a 14 00 00       	call   c000ea4f <malloc>
c000d625:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000d62c:	89 c3                	mov    ebx,eax
c000d62e:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c000d633:	50                   	push   eax
c000d634:	68 4a 26 02 c0       	push   0xc002264a
c000d639:	6a 01                	push   0x1
c000d63b:	53                   	push   ebx
c000d63c:	e8 43 7d 00 00       	call   c0015384 <Process::Process(bool, char const*, Process*, char**)>
c000d641:	83 c4 20             	add    esp,0x20
c000d644:	68 ff 00 00 00       	push   0xff
c000d649:	6a 00                	push   0x0
c000d64b:	68 79 e3 00 c0       	push   0xc000e379
c000d650:	53                   	push   ebx
c000d651:	e8 56 7f 00 00       	call   c00155ac <Process::createThread(void (*)(void*), void*, int)>
c000d656:	8b 15 d8 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6d8
c000d65c:	6a 7a                	push   0x7a
c000d65e:	6a 00                	push   0x0
c000d660:	68 a4 5e 01 c0       	push   0xc0015ea4
c000d665:	52                   	push   edx
c000d666:	e8 41 7f 00 00       	call   c00155ac <Process::createThread(void (*)(void*), void*, int)>
c000d66b:	83 c4 14             	add    esp,0x14
c000d66e:	a3 90 d6 02 c0       	mov    ds:0xc002d690,eax
c000d673:	68 7c 25 02 c0       	push   0xc002257c
c000d678:	e8 17 f0 ff ff       	call   c000c694 <KeSetBootMessage(char const*)>
c000d67d:	c6 05 75 ad 02 c0 01 	mov    BYTE PTR ds:0xc002ad75,0x1
c000d684:	e8 6c 21 00 00       	call   c000f7f5 <KeInitRand()>
c000d689:	e8 f0 8b 00 00       	call   c001627e <Vm::initialise8086()>
c000d68e:	e8 5d a7 ff ff       	call   c0007df0 <Fs::initVFS()>
c000d693:	c7 04 24 00 23 02 c0 	mov    DWORD PTR [esp],0xc0022300
c000d69a:	e8 f5 ef ff ff       	call   c000c694 <KeSetBootMessage(char const*)>
c000d69f:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000d6a4:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d6aa:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6ac:	6a 00                	push   0x0
c000d6ae:	6a 00                	push   0x0
c000d6b0:	6a 00                	push   0x0
c000d6b2:	50                   	push   eax
c000d6b3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d6b6:	83 c4 14             	add    esp,0x14
c000d6b9:	68 7c 25 02 c0       	push   0xc002257c
c000d6be:	e8 d1 ef ff ff       	call   c000c694 <KeSetBootMessage(char const*)>
c000d6c3:	e8 0d 9f ff ff       	call   c00075d5 <KeInitialiseSymlinks()>
c000d6c8:	e8 f5 05 00 00       	call   c000dcc2 <KeLoadSystemEnv()>
c000d6cd:	e8 2f 20 00 00       	call   c000f701 <KeSetupPowerManager()>
c000d6d2:	c7 04 24 a0 25 02 c0 	mov    DWORD PTR [esp],0xc00225a0
c000d6d9:	e8 b6 ef ff ff       	call   c000c694 <KeSetBootMessage(char const*)>
c000d6de:	59                   	pop    ecx
c000d6df:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000d6e4:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000d6ea:	53                   	push   ebx
c000d6eb:	e8 8e ba ff ff       	call   c000917e <Device::loadDriversForAll()>
c000d6f0:	c7 04 24 57 26 02 c0 	mov    DWORD PTR [esp],0xc0022657
c000d6f7:	e8 98 ef ff ff       	call   c000c694 <KeSetBootMessage(char const*)>
c000d6fc:	58                   	pop    eax
c000d6fd:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c000d703:	5a                   	pop    edx
c000d704:	6a 01                	push   0x1
c000d706:	68 68 26 02 c0       	push   0xc0022668
c000d70b:	e8 08 76 00 00       	call   c0014d18 <Thr::loadDLL(char const*, bool)>
c000d710:	59                   	pop    ecx
c000d711:	5a                   	pop    edx
c000d712:	53                   	push   ebx
c000d713:	50                   	push   eax
c000d714:	e8 51 78 00 00       	call   c0014f6a <Thr::executeDLL(unsigned long, void*)>
c000d719:	83 c4 10             	add    esp,0x10
c000d71c:	83 ec 0c             	sub    esp,0xc
c000d71f:	6a 02                	push   0x2
c000d721:	e8 96 81 00 00       	call   c00158bc <blockTask(TaskState)>
c000d726:	83 c4 10             	add    esp,0x10
c000d729:	eb f1                	jmp    c000d71c <KeFirstTask()+0x112>
c000d72b:	90                   	nop

c000d72c <Computer::Computer()>:
c000d72c:	83 ec 0c             	sub    esp,0xc
c000d72f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d733:	83 ec 08             	sub    esp,0x8
c000d736:	68 84 26 02 c0       	push   0xc0022684
c000d73b:	50                   	push   eax
c000d73c:	e8 83 ba ff ff       	call   c00091c4 <Device::Device(char const*)>
c000d741:	83 c4 10             	add    esp,0x10
c000d744:	ba 98 26 02 c0       	mov    edx,0xc0022698
c000d749:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d74d:	89 10                	mov    DWORD PTR [eax],edx
c000d74f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d753:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d761:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000d76b:	90                   	nop
c000d76c:	83 c4 0c             	add    esp,0xc
c000d76f:	c3                   	ret    

c000d770 <KePrepareShutdown()>:
c000d770:	83 ec 0c             	sub    esp,0xc
c000d773:	e8 8a ee ff ff       	call   c000c602 <KeExecuteAtexit()>
c000d778:	83 ec 0c             	sub    esp,0xc
c000d77b:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000d780:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d786:	50                   	push   eax
c000d787:	e8 3e bb ff ff       	call   c00092ca <Device::closeAll()>
c000d78c:	83 c4 1c             	add    esp,0x1c
c000d78f:	c3                   	ret    

c000d790 <KeShutdown()>:
c000d790:	83 ec 0c             	sub    esp,0xc
c000d793:	e8 d8 ff ff ff       	call   c000d770 <KePrepareShutdown()>
c000d798:	a1 6c ad 02 c0       	mov    eax,ds:0xc002ad6c
c000d79d:	85 c0                	test   eax,eax
c000d79f:	74 02                	je     c000d7a3 <KeShutdown()+0x13>
c000d7a1:	ff d0                	call   eax
c000d7a3:	83 ec 0c             	sub    esp,0xc
c000d7a6:	68 c0 25 02 c0       	push   0xc00225c0
c000d7ab:	e8 e6 15 00 00       	call   c000ed96 <KePanic(char const*)>
c000d7b0:	83 c4 1c             	add    esp,0x1c
c000d7b3:	c3                   	ret    

c000d7b4 <KeSleep()>:
c000d7b4:	a1 64 ad 02 c0       	mov    eax,ds:0xc002ad64
c000d7b9:	85 c0                	test   eax,eax
c000d7bb:	74 02                	je     c000d7bf <KeSleep()+0xb>
c000d7bd:	ff e0                	jmp    eax
c000d7bf:	c3                   	ret    

c000d7c0 <KeRestart()>:
c000d7c0:	83 ec 0c             	sub    esp,0xc
c000d7c3:	e8 a8 ff ff ff       	call   c000d770 <KePrepareShutdown()>
c000d7c8:	a1 68 ad 02 c0       	mov    eax,ds:0xc002ad68
c000d7cd:	85 c0                	test   eax,eax
c000d7cf:	74 02                	je     c000d7d3 <KeRestart()+0x13>
c000d7d1:	ff d0                	call   eax
c000d7d3:	e4 64                	in     al,0x64
c000d7d5:	a8 02                	test   al,0x2
c000d7d7:	75 fa                	jne    c000d7d3 <KeRestart()+0x13>
c000d7d9:	b0 fe                	mov    al,0xfe
c000d7db:	e6 64                	out    0x64,al
c000d7dd:	83 c4 0c             	add    esp,0xc
c000d7e0:	c3                   	ret    

c000d7e1 <KeCalculateCRC32(unsigned char*, int)>:
c000d7e1:	53                   	push   ebx
c000d7e2:	83 c8 ff             	or     eax,0xffffffff
c000d7e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d7e9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d7ed:	01 cb                	add    ebx,ecx
c000d7ef:	39 d9                	cmp    ecx,ebx
c000d7f1:	74 15                	je     c000d808 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000d7f3:	41                   	inc    ecx
c000d7f4:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000d7f7:	31 c2                	xor    edx,eax
c000d7f9:	c1 e8 08             	shr    eax,0x8
c000d7fc:	0f b6 d2             	movzx  edx,dl
c000d7ff:	33 04 95 80 49 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdb680]
c000d806:	eb e7                	jmp    c000d7ef <KeCalculateCRC32(unsigned char*, int)+0xe>
c000d808:	f7 d0                	not    eax
c000d80a:	5b                   	pop    ebx
c000d80b:	c3                   	ret    

c000d80c <EnvVarContainer::getEnv(char const*)>:
c000d80c:	57                   	push   edi
c000d80d:	56                   	push   esi
c000d80e:	53                   	push   ebx
c000d80f:	31 db                	xor    ebx,ebx
c000d811:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d815:	39 1e                	cmp    DWORD PTR [esi],ebx
c000d817:	7e 2b                	jle    c000d844 <EnvVarContainer::getEnv(char const*)+0x38>
c000d819:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000d820:	50                   	push   eax
c000d821:	50                   	push   eax
c000d822:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d825:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000d828:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d82c:	e8 1f 2f ff ff       	call   c0000750 <strcmp>
c000d831:	83 c4 10             	add    esp,0x10
c000d834:	85 c0                	test   eax,eax
c000d836:	75 09                	jne    c000d841 <EnvVarContainer::getEnv(char const*)+0x35>
c000d838:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d83b:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000d83f:	eb 05                	jmp    c000d846 <EnvVarContainer::getEnv(char const*)+0x3a>
c000d841:	43                   	inc    ebx
c000d842:	eb d1                	jmp    c000d815 <EnvVarContainer::getEnv(char const*)+0x9>
c000d844:	31 c0                	xor    eax,eax
c000d846:	5b                   	pop    ebx
c000d847:	5e                   	pop    esi
c000d848:	5f                   	pop    edi
c000d849:	c3                   	ret    

c000d84a <EnvVarContainer::setEnv(char const*, char const*)>:
c000d84a:	55                   	push   ebp
c000d84b:	57                   	push   edi
c000d84c:	56                   	push   esi
c000d84d:	53                   	push   ebx
c000d84e:	83 ec 28             	sub    esp,0x28
c000d851:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d855:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000d859:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d85d:	56                   	push   esi
c000d85e:	e8 0d 2d ff ff       	call   c0000570 <strlen>
c000d863:	40                   	inc    eax
c000d864:	89 04 24             	mov    DWORD PTR [esp],eax
c000d867:	e8 e3 11 00 00       	call   c000ea4f <malloc>
c000d86c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d86f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d873:	e8 f8 2c ff ff       	call   c0000570 <strlen>
c000d878:	40                   	inc    eax
c000d879:	89 04 24             	mov    DWORD PTR [esp],eax
c000d87c:	e8 ce 11 00 00       	call   c000ea4f <malloc>
c000d881:	89 34 24             	mov    DWORD PTR [esp],esi
c000d884:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d888:	e8 e3 2c ff ff       	call   c0000570 <strlen>
c000d88d:	83 c4 0c             	add    esp,0xc
c000d890:	40                   	inc    eax
c000d891:	50                   	push   eax
c000d892:	6a 00                	push   0x0
c000d894:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d898:	e8 53 2c ff ff       	call   c00004f0 <memset>
c000d89d:	89 34 24             	mov    DWORD PTR [esp],esi
c000d8a0:	e8 cb 2c ff ff       	call   c0000570 <strlen>
c000d8a5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000d8a9:	8d 48 01             	lea    ecx,[eax+0x1]
c000d8ac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d8ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d8b1:	89 de                	mov    esi,ebx
c000d8b3:	e8 b8 2c ff ff       	call   c0000570 <strlen>
c000d8b8:	83 c4 0c             	add    esp,0xc
c000d8bb:	40                   	inc    eax
c000d8bc:	50                   	push   eax
c000d8bd:	6a 00                	push   0x0
c000d8bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d8c3:	e8 28 2c ff ff       	call   c00004f0 <memset>
c000d8c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d8cb:	e8 a0 2c ff ff       	call   c0000570 <strlen>
c000d8d0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000d8d4:	8d 48 01             	lea    ecx,[eax+0x1]
c000d8d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d8d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d8dc:	40                   	inc    eax
c000d8dd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d8e0:	c1 e0 03             	shl    eax,0x3
c000d8e3:	5a                   	pop    edx
c000d8e4:	59                   	pop    ecx
c000d8e5:	50                   	push   eax
c000d8e6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d8e9:	e8 4d 11 00 00       	call   c000ea3b <realloc>
c000d8ee:	8d 74 24 18          	lea    esi,[esp+0x18]
c000d8f2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d8f5:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000d8f8:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000d8fc:	b9 08 00 00 00       	mov    ecx,0x8
c000d901:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d903:	83 c4 2c             	add    esp,0x2c
c000d906:	5b                   	pop    ebx
c000d907:	5e                   	pop    esi
c000d908:	5f                   	pop    edi
c000d909:	5d                   	pop    ebp
c000d90a:	c3                   	ret    
c000d90b:	90                   	nop

c000d90c <EnvVarContainer::deleteEnv(char const*)>:
c000d90c:	c3                   	ret    
c000d90d:	90                   	nop

c000d90e <EnvVarContainer::loadFrom(char const*, char const*)>:
c000d90e:	55                   	push   ebp
c000d90f:	57                   	push   edi
c000d910:	56                   	push   esi
c000d911:	53                   	push   ebx
c000d912:	81 ec 38 01 00 00    	sub    esp,0x138
c000d918:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000d91f:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000d926:	68 14 01 00 00       	push   0x114
c000d92b:	e8 1f 11 00 00       	call   c000ea4f <malloc>
c000d930:	83 c4 0c             	add    esp,0xc
c000d933:	89 c3                	mov    ebx,eax
c000d935:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000d938:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000d93f:	50                   	push   eax
c000d940:	e8 ed a7 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000d945:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d948:	e8 c7 aa ff ff       	call   c0008414 <File::exists()>
c000d94d:	83 c4 10             	add    esp,0x10
c000d950:	84 c0                	test   al,al
c000d952:	75 31                	jne    c000d985 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000d954:	50                   	push   eax
c000d955:	50                   	push   eax
c000d956:	6a 12                	push   0x12
c000d958:	53                   	push   ebx
c000d959:	e8 f2 a7 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000d95e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d960:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000d963:	89 34 24             	mov    DWORD PTR [esp],esi
c000d966:	e8 05 2c ff ff       	call   c0000570 <strlen>
c000d96b:	5a                   	pop    edx
c000d96c:	31 d2                	xor    edx,edx
c000d96e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000d972:	51                   	push   ecx
c000d973:	56                   	push   esi
c000d974:	52                   	push   edx
c000d975:	50                   	push   eax
c000d976:	53                   	push   ebx
c000d977:	ff d7                	call   edi
c000d979:	83 c4 14             	add    esp,0x14
c000d97c:	53                   	push   ebx
c000d97d:	e8 2c a8 ff ff       	call   c00081ae <File::close()>
c000d982:	83 c4 10             	add    esp,0x10
c000d985:	56                   	push   esi
c000d986:	31 f6                	xor    esi,esi
c000d988:	68 00 01 00 00       	push   0x100
c000d98d:	6a 00                	push   0x0
c000d98f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d993:	50                   	push   eax
c000d994:	e8 57 2b ff ff       	call   c00004f0 <memset>
c000d999:	5f                   	pop    edi
c000d99a:	58                   	pop    eax
c000d99b:	6a 01                	push   0x1
c000d99d:	53                   	push   ebx
c000d99e:	e8 ad a7 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000d9a3:	83 c4 10             	add    esp,0x10
c000d9a6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000d9ae:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d9b6:	83 ec 0c             	sub    esp,0xc
c000d9b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d9bb:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000d9bf:	51                   	push   ecx
c000d9c0:	8d 54 24 23          	lea    edx,[esp+0x23]
c000d9c4:	52                   	push   edx
c000d9c5:	6a 00                	push   0x0
c000d9c7:	6a 01                	push   0x1
c000d9c9:	53                   	push   ebx
c000d9ca:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d9cd:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000d9d2:	83 c4 20             	add    esp,0x20
c000d9d5:	89 c2                	mov    edx,eax
c000d9d7:	85 c0                	test   eax,eax
c000d9d9:	0f 84 36 01 00 00    	je     c000db15 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000d9df:	83 f8 0d             	cmp    eax,0xd
c000d9e2:	0f 84 22 01 00 00    	je     c000db0a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000d9e8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000d9ed:	0f 84 f0 00 00 00    	je     c000dae3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000d9f3:	83 f8 0a             	cmp    eax,0xa
c000d9f6:	74 13                	je     c000da0b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000d9f8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000d9fd:	74 0c                	je     c000da0b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000d9ff:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000da05:	0f 8e f6 00 00 00    	jle    c000db01 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000da0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000da0f:	83 ec 0c             	sub    esp,0xc
c000da12:	8d 78 01             	lea    edi,[eax+0x1]
c000da15:	57                   	push   edi
c000da16:	e8 34 10 00 00       	call   c000ea4f <malloc>
c000da1b:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000da1f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da23:	8d 56 04             	lea    edx,[esi+0x4]
c000da26:	89 14 24             	mov    DWORD PTR [esp],edx
c000da29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000da2d:	e8 1d 10 00 00       	call   c000ea4f <malloc>
c000da32:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000da36:	83 c4 0c             	add    esp,0xc
c000da39:	57                   	push   edi
c000da3a:	6a 00                	push   0x0
c000da3c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da40:	e8 ab 2a ff ff       	call   c00004f0 <memset>
c000da45:	8d 74 24 30          	lea    esi,[esp+0x30]
c000da49:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000da4d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000da51:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000da53:	83 c4 0c             	add    esp,0xc
c000da56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000da5a:	52                   	push   edx
c000da5b:	6a 00                	push   0x0
c000da5d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000da61:	e8 8a 2a ff ff       	call   c00004f0 <memset>
c000da66:	8d 74 24 30          	lea    esi,[esp+0x30]
c000da6a:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000da6e:	89 34 24             	mov    DWORD PTR [esp],esi
c000da71:	e8 fa 2a ff ff       	call   c0000570 <strlen>
c000da76:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000da7a:	89 c1                	mov    ecx,eax
c000da7c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000da7e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000da81:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000da84:	40                   	inc    eax
c000da85:	83 c4 10             	add    esp,0x10
c000da88:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000da8b:	85 d2                	test   edx,edx
c000da8d:	75 0c                	jne    c000da9b <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000da8f:	83 ec 0c             	sub    esp,0xc
c000da92:	6a 08                	push   0x8
c000da94:	e8 b6 0f 00 00       	call   c000ea4f <malloc>
c000da99:	eb 0c                	jmp    c000daa7 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000da9b:	c1 e0 03             	shl    eax,0x3
c000da9e:	51                   	push   ecx
c000da9f:	51                   	push   ecx
c000daa0:	50                   	push   eax
c000daa1:	52                   	push   edx
c000daa2:	e8 94 0f 00 00       	call   c000ea3b <realloc>
c000daa7:	83 c4 10             	add    esp,0x10
c000daaa:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000daad:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000dab0:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000dab3:	8d 74 24 18          	lea    esi,[esp+0x18]
c000dab7:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000dabb:	b9 08 00 00 00       	mov    ecx,0x8
c000dac0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dac2:	31 f6                	xor    esi,esi
c000dac4:	50                   	push   eax
c000dac5:	68 00 01 00 00       	push   0x100
c000daca:	6a 00                	push   0x0
c000dacc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000dad0:	50                   	push   eax
c000dad1:	e8 1a 2a ff ff       	call   c00004f0 <memset>
c000dad6:	83 c4 10             	add    esp,0x10
c000dad9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dae1:	eb 27                	jmp    c000db0a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000dae3:	83 f8 3d             	cmp    eax,0x3d
c000dae6:	74 1e                	je     c000db06 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000dae8:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000daee:	7f 07                	jg     c000daf7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000daf0:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c000daf4:	46                   	inc    esi
c000daf5:	eb 13                	jmp    c000db0a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000daf7:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000daff:	eb 09                	jmp    c000db0a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000db01:	83 f8 3d             	cmp    eax,0x3d
c000db04:	75 ea                	jne    c000daf0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000db06:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000db0a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000db0f:	0f 85 99 fe ff ff    	jne    c000d9ae <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000db15:	83 ec 0c             	sub    esp,0xc
c000db18:	53                   	push   ebx
c000db19:	e8 90 a6 ff ff       	call   c00081ae <File::close()>
c000db1e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000db20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000db23:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000db26:	81 c4 3c 01 00 00    	add    esp,0x13c
c000db2c:	5b                   	pop    ebx
c000db2d:	5e                   	pop    esi
c000db2e:	5f                   	pop    edi
c000db2f:	5d                   	pop    ebp
c000db30:	c3                   	ret    
c000db31:	90                   	nop

c000db32 <EnvVarContainer::__loadSystem()>:
c000db32:	83 ec 10             	sub    esp,0x10
c000db35:	68 80 4d 02 c0       	push   0xc0024d80
c000db3a:	68 bc 26 02 c0       	push   0xc00226bc
c000db3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db43:	e8 c6 fd ff ff       	call   c000d90e <EnvVarContainer::loadFrom(char const*, char const*)>
c000db48:	83 c4 1c             	add    esp,0x1c
c000db4b:	c3                   	ret    

c000db4c <EnvVarContainer::__loadUser()>:
c000db4c:	c3                   	ret    
c000db4d:	90                   	nop

c000db4e <EnvVarContainer::EnvVarContainer(Process*)>:
c000db4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000db58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000db60:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000db63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db67:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000db6e:	90                   	nop
c000db6f:	c3                   	ret    

c000db70 <EnvVarContainer::~EnvVarContainer()>:
c000db70:	83 ec 0c             	sub    esp,0xc
c000db73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db7a:	85 c0                	test   eax,eax
c000db7c:	74 1d                	je     c000db9b <EnvVarContainer::~EnvVarContainer()+0x2b>
c000db7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db82:	8b 00                	mov    eax,DWORD PTR [eax]
c000db84:	85 c0                	test   eax,eax
c000db86:	74 13                	je     c000db9b <EnvVarContainer::~EnvVarContainer()+0x2b>
c000db88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db8f:	83 ec 0c             	sub    esp,0xc
c000db92:	50                   	push   eax
c000db93:	e8 c7 0e 00 00       	call   c000ea5f <free>
c000db98:	83 c4 10             	add    esp,0x10
c000db9b:	90                   	nop
c000db9c:	83 c4 0c             	add    esp,0xc
c000db9f:	c3                   	ret    

c000dba0 <KeGetEnv(Process*, char const*)>:
c000dba0:	53                   	push   ebx
c000dba1:	83 ec 08             	sub    esp,0x8
c000dba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dba8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000dbac:	39 05 d8 d6 02 c0    	cmp    DWORD PTR ds:0xc002d6d8,eax
c000dbb2:	74 04                	je     c000dbb8 <KeGetEnv(Process*, char const*)+0x18>
c000dbb4:	85 c0                	test   eax,eax
c000dbb6:	75 0b                	jne    c000dbc3 <KeGetEnv(Process*, char const*)+0x23>
c000dbb8:	a1 78 ad 02 c0       	mov    eax,ds:0xc002ad78
c000dbbd:	85 c0                	test   eax,eax
c000dbbf:	75 19                	jne    c000dbda <KeGetEnv(Process*, char const*)+0x3a>
c000dbc1:	eb 27                	jmp    c000dbea <KeGetEnv(Process*, char const*)+0x4a>
c000dbc3:	52                   	push   edx
c000dbc4:	52                   	push   edx
c000dbc5:	53                   	push   ebx
c000dbc6:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000dbcc:	e8 3b fc ff ff       	call   c000d80c <EnvVarContainer::getEnv(char const*)>
c000dbd1:	83 c4 10             	add    esp,0x10
c000dbd4:	85 c0                	test   eax,eax
c000dbd6:	75 28                	jne    c000dc00 <KeGetEnv(Process*, char const*)+0x60>
c000dbd8:	eb de                	jmp    c000dbb8 <KeGetEnv(Process*, char const*)+0x18>
c000dbda:	52                   	push   edx
c000dbdb:	52                   	push   edx
c000dbdc:	53                   	push   ebx
c000dbdd:	50                   	push   eax
c000dbde:	e8 29 fc ff ff       	call   c000d80c <EnvVarContainer::getEnv(char const*)>
c000dbe3:	83 c4 10             	add    esp,0x10
c000dbe6:	85 c0                	test   eax,eax
c000dbe8:	75 16                	jne    c000dc00 <KeGetEnv(Process*, char const*)+0x60>
c000dbea:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000dbee:	a1 7c ad 02 c0       	mov    eax,ds:0xc002ad7c
c000dbf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbf7:	83 c4 08             	add    esp,0x8
c000dbfa:	5b                   	pop    ebx
c000dbfb:	e9 0c fc ff ff       	jmp    c000d80c <EnvVarContainer::getEnv(char const*)>
c000dc00:	83 c4 08             	add    esp,0x8
c000dc03:	5b                   	pop    ebx
c000dc04:	c3                   	ret    

c000dc05 <KeSetEnvSystem(char const*, char const*)>:
c000dc05:	83 ec 10             	sub    esp,0x10
c000dc08:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc0c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc10:	ff 35 7c ad 02 c0    	push   DWORD PTR ds:0xc002ad7c
c000dc16:	e8 2f fc ff ff       	call   c000d84a <EnvVarContainer::setEnv(char const*, char const*)>
c000dc1b:	83 c4 1c             	add    esp,0x1c
c000dc1e:	c3                   	ret    

c000dc1f <KeSetEnvUser(char const*, char const*)>:
c000dc1f:	a1 78 ad 02 c0       	mov    eax,ds:0xc002ad78
c000dc24:	85 c0                	test   eax,eax
c000dc26:	74 15                	je     c000dc3d <KeSetEnvUser(char const*, char const*)+0x1e>
c000dc28:	83 ec 10             	sub    esp,0x10
c000dc2b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc33:	50                   	push   eax
c000dc34:	e8 11 fc ff ff       	call   c000d84a <EnvVarContainer::setEnv(char const*, char const*)>
c000dc39:	83 c4 1c             	add    esp,0x1c
c000dc3c:	c3                   	ret    
c000dc3d:	c3                   	ret    

c000dc3e <KeSetEnvProcess(Process*, char const*, char const*)>:
c000dc3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dc42:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000dc48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dc4c:	e9 f9 fb ff ff       	jmp    c000d84a <EnvVarContainer::setEnv(char const*, char const*)>

c000dc51 <KeDeleteEnvSystem(char const*)>:
c000dc51:	c3                   	ret    

c000dc52 <KeDeleteEnvUser(char const*)>:
c000dc52:	c3                   	ret    

c000dc53 <KeDeleteEnvProcess(Process*, char const*)>:
c000dc53:	c3                   	ret    

c000dc54 <KeNewProcessEnv(Process*)>:
c000dc54:	83 ec 28             	sub    esp,0x28
c000dc57:	6a 0c                	push   0xc
c000dc59:	e8 f1 0d 00 00       	call   c000ea4f <malloc>
c000dc5e:	5a                   	pop    edx
c000dc5f:	59                   	pop    ecx
c000dc60:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dc64:	50                   	push   eax
c000dc65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dc69:	e8 e0 fe ff ff       	call   c000db4e <EnvVarContainer::EnvVarContainer(Process*)>
c000dc6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dc72:	83 c4 2c             	add    esp,0x2c
c000dc75:	c3                   	ret    

c000dc76 <KeCopyProcessEnv(Process*, Process*)>:
c000dc76:	57                   	push   edi
c000dc77:	56                   	push   esi
c000dc78:	53                   	push   ebx
c000dc79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc7d:	83 ec 0c             	sub    esp,0xc
c000dc80:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000dc86:	6a 0c                	push   0xc
c000dc88:	e8 c2 0d 00 00       	call   c000ea4f <malloc>
c000dc8d:	89 c3                	mov    ebx,eax
c000dc8f:	58                   	pop    eax
c000dc90:	5a                   	pop    edx
c000dc91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc95:	53                   	push   ebx
c000dc96:	e8 b3 fe ff ff       	call   c000db4e <EnvVarContainer::EnvVarContainer(Process*)>
c000dc9b:	8b 07                	mov    eax,DWORD PTR [edi]
c000dc9d:	89 03                	mov    DWORD PTR [ebx],eax
c000dc9f:	c1 e0 03             	shl    eax,0x3
c000dca2:	89 04 24             	mov    DWORD PTR [esp],eax
c000dca5:	e8 a5 0d 00 00       	call   c000ea4f <malloc>
c000dcaa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000dcad:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000dcaf:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000dcb2:	c1 e1 03             	shl    ecx,0x3
c000dcb5:	89 c7                	mov    edi,eax
c000dcb7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dcb9:	83 c4 10             	add    esp,0x10
c000dcbc:	89 d8                	mov    eax,ebx
c000dcbe:	5b                   	pop    ebx
c000dcbf:	5e                   	pop    esi
c000dcc0:	5f                   	pop    edi
c000dcc1:	c3                   	ret    

c000dcc2 <KeLoadSystemEnv()>:
c000dcc2:	53                   	push   ebx
c000dcc3:	83 ec 14             	sub    esp,0x14
c000dcc6:	6a 0c                	push   0xc
c000dcc8:	e8 82 0d 00 00       	call   c000ea4f <malloc>
c000dccd:	89 c3                	mov    ebx,eax
c000dccf:	58                   	pop    eax
c000dcd0:	5a                   	pop    edx
c000dcd1:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c000dcd7:	53                   	push   ebx
c000dcd8:	e8 71 fe ff ff       	call   c000db4e <EnvVarContainer::EnvVarContainer(Process*)>
c000dcdd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dce0:	89 1d 7c ad 02 c0    	mov    DWORD PTR ds:0xc002ad7c,ebx
c000dce6:	e8 47 fe ff ff       	call   c000db32 <EnvVarContainer::__loadSystem()>
c000dceb:	83 c4 18             	add    esp,0x18
c000dcee:	5b                   	pop    ebx
c000dcef:	c3                   	ret    

c000dcf0 <KeLoadUserEnv()>:
c000dcf0:	53                   	push   ebx
c000dcf1:	83 ec 14             	sub    esp,0x14
c000dcf4:	6a 0c                	push   0xc
c000dcf6:	e8 54 0d 00 00       	call   c000ea4f <malloc>
c000dcfb:	89 c3                	mov    ebx,eax
c000dcfd:	58                   	pop    eax
c000dcfe:	5a                   	pop    edx
c000dcff:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c000dd05:	53                   	push   ebx
c000dd06:	e8 43 fe ff ff       	call   c000db4e <EnvVarContainer::EnvVarContainer(Process*)>
c000dd0b:	89 1d 78 ad 02 c0    	mov    DWORD PTR ds:0xc002ad78,ebx
c000dd11:	83 c4 18             	add    esp,0x18
c000dd14:	5b                   	pop    ebx
c000dd15:	c3                   	ret    

c000dd16 <KeFlushEnv()>:
c000dd16:	c3                   	ret    

c000dd17 <KeGetProcessTotalEnvCount(Process*)>:
c000dd17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd1b:	8b 15 78 ad 02 c0    	mov    edx,DWORD PTR ds:0xc002ad78
c000dd21:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000dd27:	a1 7c ad 02 c0       	mov    eax,ds:0xc002ad7c
c000dd2c:	8b 00                	mov    eax,DWORD PTR [eax]
c000dd2e:	03 01                	add    eax,DWORD PTR [ecx]
c000dd30:	85 d2                	test   edx,edx
c000dd32:	74 02                	je     c000dd36 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000dd34:	03 02                	add    eax,DWORD PTR [edx]
c000dd36:	c3                   	ret    

c000dd37 <KeGetProcessEnvPair(Process*, int)>:
c000dd37:	57                   	push   edi
c000dd38:	56                   	push   esi
c000dd39:	8b 35 78 ad 02 c0    	mov    esi,DWORD PTR ds:0xc002ad78
c000dd3f:	53                   	push   ebx
c000dd40:	85 f6                	test   esi,esi
c000dd42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dd46:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dd4a:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000dd50:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dd54:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd56:	75 16                	jne    c000dd6e <KeGetProcessEnvPair(Process*, int)+0x37>
c000dd58:	39 c2                	cmp    edx,eax
c000dd5a:	7c 16                	jl     c000dd72 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000dd5c:	8b 0d 7c ad 02 c0    	mov    ecx,DWORD PTR ds:0xc002ad7c
c000dd62:	8b 31                	mov    esi,DWORD PTR [ecx]
c000dd64:	01 c6                	add    esi,eax
c000dd66:	39 d6                	cmp    esi,edx
c000dd68:	7e 3c                	jle    c000dda6 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000dd6a:	29 c2                	sub    edx,eax
c000dd6c:	eb 04                	jmp    c000dd72 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000dd6e:	39 c2                	cmp    edx,eax
c000dd70:	7d 05                	jge    c000dd77 <KeGetProcessEnvPair(Process*, int)+0x40>
c000dd72:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000dd75:	eb 20                	jmp    c000dd97 <KeGetProcessEnvPair(Process*, int)+0x60>
c000dd77:	8b 3e                	mov    edi,DWORD PTR [esi]
c000dd79:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000dd7c:	39 d1                	cmp    ecx,edx
c000dd7e:	7e 04                	jle    c000dd84 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000dd80:	29 c2                	sub    edx,eax
c000dd82:	eb 10                	jmp    c000dd94 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000dd84:	8b 35 7c ad 02 c0    	mov    esi,DWORD PTR ds:0xc002ad7c
c000dd8a:	03 0e                	add    ecx,DWORD PTR [esi]
c000dd8c:	39 d1                	cmp    ecx,edx
c000dd8e:	7e 16                	jle    c000dda6 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000dd90:	29 c2                	sub    edx,eax
c000dd92:	29 fa                	sub    edx,edi
c000dd94:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000dd97:	8d 14 d0             	lea    edx,[eax+edx*8]
c000dd9a:	8b 02                	mov    eax,DWORD PTR [edx]
c000dd9c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000dd9f:	89 03                	mov    DWORD PTR [ebx],eax
c000dda1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000dda4:	eb 1d                	jmp    c000ddc3 <KeGetProcessEnvPair(Process*, int)+0x8c>
c000dda6:	83 ec 0c             	sub    esp,0xc
c000dda9:	68 de 26 02 c0       	push   0xc00226de
c000ddae:	e8 e3 0f 00 00       	call   c000ed96 <KePanic(char const*)>
c000ddb3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000ddb9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000ddc0:	83 c4 10             	add    esp,0x10
c000ddc3:	89 d8                	mov    eax,ebx
c000ddc5:	5b                   	pop    ebx
c000ddc6:	5e                   	pop    esi
c000ddc7:	5f                   	pop    edi
c000ddc8:	c2 04 00             	ret    0x4
c000ddcb:	90                   	nop

c000ddcc <KeSetupInterrupts()>:
c000ddcc:	83 ec 10             	sub    esp,0x10
c000ddcf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ddd7:	90                   	nop
c000ddd8:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000dde0:	7f 5a                	jg     c000de3c <KeSetupInterrupts()+0x70>
c000dde2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ddea:	66 90                	xchg   ax,ax
c000ddec:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000ddf1:	7f 41                	jg     c000de34 <KeSetupInterrupts()+0x68>
c000ddf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ddf7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ddfe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de02:	01 d0                	add    eax,edx
c000de04:	c7 04 85 80 bd 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd4280],0x0
c000de0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de13:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000de1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de1e:	01 d0                	add    eax,edx
c000de20:	c7 04 85 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd5280],0x0
c000de2b:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000de30:	eb ba                	jmp    c000ddec <KeSetupInterrupts()+0x20>
c000de32:	66 90                	xchg   ax,ax
c000de34:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000de39:	eb 9d                	jmp    c000ddd8 <KeSetupInterrupts()+0xc>
c000de3b:	90                   	nop
c000de3c:	90                   	nop
c000de3d:	83 c4 10             	add    esp,0x10
c000de40:	c3                   	ret    
c000de41:	8d 76 00             	lea    esi,[esi+0x0]

c000de44 <int_handler>:
c000de44:	83 ec 2c             	sub    esp,0x2c
c000de47:	90                   	nop
c000de48:	a0 94 cd 02 c0       	mov    al,ds:0xc002cd94
c000de4d:	0f b6 c0             	movzx  eax,al
c000de50:	85 c0                	test   eax,eax
c000de52:	74 04                	je     c000de58 <int_handler+0x14>
c000de54:	fa                   	cli    
c000de55:	f4                   	hlt    
c000de56:	eb f0                	jmp    c000de48 <int_handler+0x4>
c000de58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de5c:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000de5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de63:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000de68:	7e 1a                	jle    c000de84 <int_handler+0x40>
c000de6a:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000de6f:	7f 13                	jg     c000de84 <int_handler+0x40>
c000de71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000de75:	83 e8 20             	sub    eax,0x20
c000de78:	83 ec 0c             	sub    esp,0xc
c000de7b:	50                   	push   eax
c000de7c:	e8 17 ac 00 00       	call   c0018a98 <HalEndOfInterrupt(int)>
c000de81:	83 c4 10             	add    esp,0x10
c000de84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000de88:	c1 e0 04             	shl    eax,0x4
c000de8b:	05 80 bd 02 c0       	add    eax,0xc002bd80
c000de90:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000de94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000de98:	c1 e0 04             	shl    eax,0x4
c000de9b:	05 80 ad 02 c0       	add    eax,0xc002ad80
c000dea0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dea4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000deac:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000deb1:	0f 8f 0d 01 00 00    	jg     c000dfc4 <int_handler+0x180>
c000deb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000debb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dec2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dec6:	01 d0                	add    eax,edx
c000dec8:	8b 00                	mov    eax,DWORD PTR [eax]
c000deca:	85 c0                	test   eax,eax
c000decc:	0f 84 e6 00 00 00    	je     c000dfb8 <int_handler+0x174>
c000ded2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ded6:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000ded9:	83 f8 60             	cmp    eax,0x60
c000dedc:	75 4a                	jne    c000df28 <int_handler+0xe4>
c000dede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dee2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dee9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000deed:	01 d0                	add    eax,edx
c000deef:	8b 00                	mov    eax,DWORD PTR [eax]
c000def1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000def5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000defc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000df00:	01 ca                	add    edx,ecx
c000df02:	8b 12                	mov    edx,DWORD PTR [edx]
c000df04:	83 ec 08             	sub    esp,0x8
c000df07:	52                   	push   edx
c000df08:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000df0c:	ff d0                	call   eax
c000df0e:	83 c4 10             	add    esp,0x10
c000df11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000df1d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000df21:	e9 ba 00 00 00       	jmp    c000dfe0 <int_handler+0x19c>
c000df26:	66 90                	xchg   ax,ax
c000df28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df2c:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000df2f:	83 ec 04             	sub    esp,0x4
c000df32:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000df36:	50                   	push   eax
c000df37:	68 f8 26 02 c0       	push   0xc00226f8
c000df3c:	e8 23 90 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000df41:	83 c4 10             	add    esp,0x10
c000df44:	a0 74 ad 02 c0       	mov    al,ds:0xc002ad74
c000df49:	0f b6 c8             	movzx  ecx,al
c000df4c:	a0 88 d6 02 c0       	mov    al,ds:0xc002d688
c000df51:	0f b6 d0             	movzx  edx,al
c000df54:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c000df59:	51                   	push   ecx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	68 10 27 02 c0       	push   0xc0022710
c000df61:	e8 fe 8f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000df66:	83 c4 10             	add    esp,0x10
c000df69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000df6d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000df74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000df78:	01 d0                	add    eax,edx
c000df7a:	8b 00                	mov    eax,DWORD PTR [eax]
c000df7c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000df80:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000df87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000df8b:	01 ca                	add    edx,ecx
c000df8d:	8b 12                	mov    edx,DWORD PTR [edx]
c000df8f:	83 ec 08             	sub    esp,0x8
c000df92:	52                   	push   edx
c000df93:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000df97:	ff d0                	call   eax
c000df99:	83 c4 10             	add    esp,0x10
c000df9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dfa0:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000dfa3:	83 ec 04             	sub    esp,0x4
c000dfa6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000dfaa:	50                   	push   eax
c000dfab:	68 28 27 02 c0       	push   0xc0022728
c000dfb0:	e8 af 8f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000dfb5:	83 c4 10             	add    esp,0x10
c000dfb8:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000dfbd:	e9 ea fe ff ff       	jmp    c000deac <int_handler+0x68>
c000dfc2:	66 90                	xchg   ax,ax
c000dfc4:	83 ec 0c             	sub    esp,0xc
c000dfc7:	68 3f 27 02 c0       	push   0xc002273f
c000dfcc:	e8 93 8f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000dfd1:	83 c4 10             	add    esp,0x10
c000dfd4:	b8 00 00 00 00       	mov    eax,0x0
c000dfd9:	ba 00 00 00 00       	mov    edx,0x0
c000dfde:	66 90                	xchg   ax,ax
c000dfe0:	83 c4 2c             	add    esp,0x2c
c000dfe3:	c3                   	ret    

c000dfe4 <KeDisplayProgramFault(char const*)>:
c000dfe4:	83 ec 0c             	sub    esp,0xc
c000dfe7:	83 ec 0c             	sub    esp,0xc
c000dfea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfee:	e8 71 8f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000dff3:	83 c4 10             	add    esp,0x10
c000dff6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000dffb:	8b 00                	mov    eax,DWORD PTR [eax]
c000dffd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000e000:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000e006:	85 c0                	test   eax,eax
c000e008:	74 22                	je     c000e02c <KeDisplayProgramFault(char const*)+0x48>
c000e00a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e00f:	8b 00                	mov    eax,DWORD PTR [eax]
c000e011:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000e014:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000e01a:	6a 04                	push   0x4
c000e01c:	6a 0f                	push   0xf
c000e01e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e022:	50                   	push   eax
c000e023:	e8 d8 35 00 00       	call   c0011600 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000e028:	83 c4 10             	add    esp,0x10
c000e02b:	90                   	nop
c000e02c:	90                   	nop
c000e02d:	83 c4 0c             	add    esp,0xc
c000e030:	c3                   	ret    
c000e031:	8d 76 00             	lea    esi,[esi+0x0]

c000e034 <KeGeneralProtectionFault(void*, void*)>:
c000e034:	83 ec 0c             	sub    esp,0xc
c000e037:	83 ec 08             	sub    esp,0x8
c000e03a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e03e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e042:	e8 f3 9f 00 00       	call   c001803a <HalHandleGeneralProtectionFault(void*, void*)>
c000e047:	83 c4 10             	add    esp,0x10
c000e04a:	0f b6 c0             	movzx  eax,al
c000e04d:	85 c0                	test   eax,eax
c000e04f:	75 2f                	jne    c000e080 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000e051:	83 ec 0c             	sub    esp,0xc
c000e054:	68 42 27 02 c0       	push   0xc0022742
c000e059:	e8 86 ff ff ff       	call   c000dfe4 <KeDisplayProgramFault(char const*)>
c000e05e:	83 c4 10             	add    esp,0x10
c000e061:	83 ec 0c             	sub    esp,0xc
c000e064:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e068:	e8 67 a1 00 00       	call   c00181d4 <HalDisplayDebugInfo(void*)>
c000e06d:	83 c4 10             	add    esp,0x10
c000e070:	83 ec 0c             	sub    esp,0xc
c000e073:	6a 00                	push   0x0
c000e075:	e8 5e 80 00 00       	call   c00160d8 <Thr::terminateFromIRQ(int)>
c000e07a:	83 c4 10             	add    esp,0x10
c000e07d:	eb 05                	jmp    c000e084 <KeGeneralProtectionFault(void*, void*)+0x50>
c000e07f:	90                   	nop
c000e080:	90                   	nop
c000e081:	8d 76 00             	lea    esi,[esi+0x0]
c000e084:	83 c4 0c             	add    esp,0xc
c000e087:	c3                   	ret    

c000e088 <KePageFault(void*, void*)>:
c000e088:	83 ec 0c             	sub    esp,0xc
c000e08b:	83 ec 0c             	sub    esp,0xc
c000e08e:	68 5b 27 02 c0       	push   0xc002275b
c000e093:	e8 cc 8e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000e098:	83 c4 10             	add    esp,0x10
c000e09b:	83 ec 08             	sub    esp,0x8
c000e09e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0a6:	e8 3a a0 00 00       	call   c00180e5 <HalHandlePageFault(void*, void*)>
c000e0ab:	83 c4 10             	add    esp,0x10
c000e0ae:	0f b6 c0             	movzx  eax,al
c000e0b1:	85 c0                	test   eax,eax
c000e0b3:	75 2f                	jne    c000e0e4 <KePageFault(void*, void*)+0x5c>
c000e0b5:	83 ec 0c             	sub    esp,0xc
c000e0b8:	68 68 27 02 c0       	push   0xc0022768
c000e0bd:	e8 22 ff ff ff       	call   c000dfe4 <KeDisplayProgramFault(char const*)>
c000e0c2:	83 c4 10             	add    esp,0x10
c000e0c5:	83 ec 0c             	sub    esp,0xc
c000e0c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0cc:	e8 03 a1 00 00       	call   c00181d4 <HalDisplayDebugInfo(void*)>
c000e0d1:	83 c4 10             	add    esp,0x10
c000e0d4:	83 ec 0c             	sub    esp,0xc
c000e0d7:	6a 00                	push   0x0
c000e0d9:	e8 fa 7f 00 00       	call   c00160d8 <Thr::terminateFromIRQ(int)>
c000e0de:	83 c4 10             	add    esp,0x10
c000e0e1:	eb 05                	jmp    c000e0e8 <KePageFault(void*, void*)+0x60>
c000e0e3:	90                   	nop
c000e0e4:	90                   	nop
c000e0e5:	8d 76 00             	lea    esi,[esi+0x0]
c000e0e8:	83 c4 0c             	add    esp,0xc
c000e0eb:	c3                   	ret    

c000e0ec <KeNonMaskableInterrupt(void*, void*)>:
c000e0ec:	83 ec 0c             	sub    esp,0xc
c000e0ef:	e8 6e a4 00 00       	call   c0018562 <HalReceivedNMI()>
c000e0f4:	90                   	nop
c000e0f5:	83 c4 0c             	add    esp,0xc
c000e0f8:	c3                   	ret    
c000e0f9:	8d 76 00             	lea    esi,[esi+0x0]

c000e0fc <KeOtherFault(void*, void*)>:
c000e0fc:	83 ec 0c             	sub    esp,0xc
c000e0ff:	83 ec 0c             	sub    esp,0xc
c000e102:	68 74 27 02 c0       	push   0xc0022774
c000e107:	e8 d8 fe ff ff       	call   c000dfe4 <KeDisplayProgramFault(char const*)>
c000e10c:	83 c4 10             	add    esp,0x10
c000e10f:	83 ec 0c             	sub    esp,0xc
c000e112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e116:	e8 b9 a0 00 00       	call   c00181d4 <HalDisplayDebugInfo(void*)>
c000e11b:	83 c4 10             	add    esp,0x10
c000e11e:	83 ec 0c             	sub    esp,0xc
c000e121:	6a 00                	push   0x0
c000e123:	e8 b0 7f 00 00       	call   c00160d8 <Thr::terminateFromIRQ(int)>
c000e128:	83 c4 10             	add    esp,0x10
c000e12b:	90                   	nop
c000e12c:	83 c4 0c             	add    esp,0xc
c000e12f:	c3                   	ret    

c000e130 <KeOpcodeFault(void*, void*)>:
c000e130:	55                   	push   ebp
c000e131:	89 e5                	mov    ebp,esp
c000e133:	83 ec 08             	sub    esp,0x8
c000e136:	83 ec 08             	sub    esp,0x8
c000e139:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000e13c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e13f:	e8 4e a0 00 00       	call   c0018192 <HalHandleOpcodeFault(void*, void*)>
c000e144:	83 c4 10             	add    esp,0x10
c000e147:	0f b6 c0             	movzx  eax,al
c000e14a:	85 c0                	test   eax,eax
c000e14c:	75 2e                	jne    c000e17c <KeOpcodeFault(void*, void*)+0x4c>
c000e14e:	83 ec 0c             	sub    esp,0xc
c000e151:	68 9c 27 02 c0       	push   0xc002279c
c000e156:	e8 89 fe ff ff       	call   c000dfe4 <KeDisplayProgramFault(char const*)>
c000e15b:	83 c4 10             	add    esp,0x10
c000e15e:	83 ec 0c             	sub    esp,0xc
c000e161:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e164:	e8 6b a0 00 00       	call   c00181d4 <HalDisplayDebugInfo(void*)>
c000e169:	83 c4 10             	add    esp,0x10
c000e16c:	83 ec 0c             	sub    esp,0xc
c000e16f:	6a 00                	push   0x0
c000e171:	e8 62 7f 00 00       	call   c00160d8 <Thr::terminateFromIRQ(int)>
c000e176:	83 c4 10             	add    esp,0x10
c000e179:	eb 05                	jmp    c000e180 <KeOpcodeFault(void*, void*)+0x50>
c000e17b:	90                   	nop
c000e17c:	90                   	nop
c000e17d:	8d 76 00             	lea    esi,[esi+0x0]
c000e180:	c9                   	leave  
c000e181:	c3                   	ret    
c000e182:	66 90                	xchg   ax,ax

c000e184 <KeDoubleFault(void*, void*)>:
c000e184:	55                   	push   ebp
c000e185:	89 e5                	mov    ebp,esp
c000e187:	83 ec 08             	sub    esp,0x8
c000e18a:	83 ec 0c             	sub    esp,0xc
c000e18d:	68 a9 27 02 c0       	push   0xc00227a9
c000e192:	e8 ff 0b 00 00       	call   c000ed96 <KePanic(char const*)>
c000e197:	83 c4 10             	add    esp,0x10
c000e19a:	90                   	nop
c000e19b:	c9                   	leave  
c000e19c:	c3                   	ret    
c000e19d:	90                   	nop

c000e19e <GDTEntry::setBase(unsigned int)>:
c000e19e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e1a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e1a6:	89 c1                	mov    ecx,eax
c000e1a8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e1ac:	c1 e9 10             	shr    ecx,0x10
c000e1af:	c1 e8 18             	shr    eax,0x18
c000e1b2:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e1b5:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e1b8:	c3                   	ret    
c000e1b9:	90                   	nop

c000e1ba <GDTEntry::setLimit(unsigned int)>:
c000e1ba:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e1be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e1c2:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e1c5:	66 89 01             	mov    WORD PTR [ecx],ax
c000e1c8:	83 e2 f0             	and    edx,0xfffffff0
c000e1cb:	c1 e8 10             	shr    eax,0x10
c000e1ce:	83 e0 0f             	and    eax,0xf
c000e1d1:	09 d0                	or     eax,edx
c000e1d3:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e1d6:	c3                   	ret    
c000e1d7:	90                   	nop

c000e1d8 <GDT::GDT()>:
c000e1d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e1e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e1ec:	90                   	nop
c000e1ed:	c3                   	ret    

c000e1ee <GDT::addEntry(GDTEntry)>:
c000e1ee:	53                   	push   ebx
c000e1ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e1f3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e1f7:	8b 02                	mov    eax,DWORD PTR [edx]
c000e1f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e1fd:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000e201:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000e205:	8d 48 01             	lea    ecx,[eax+0x1]
c000e208:	c1 e0 03             	shl    eax,0x3
c000e20b:	89 0a                	mov    DWORD PTR [edx],ecx
c000e20d:	5b                   	pop    ebx
c000e20e:	c3                   	ret    
c000e20f:	90                   	nop

c000e210 <GDT::getNumberOfEntries()>:
c000e210:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e214:	8b 00                	mov    eax,DWORD PTR [eax]
c000e216:	c3                   	ret    
c000e217:	90                   	nop

c000e218 <GDT::flush()>:
c000e218:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e21c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e21e:	83 c0 04             	add    eax,0x4
c000e221:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e228:	a3 82 cd 02 c0       	mov    ds:0xc002cd82,eax
c000e22d:	66 89 15 80 cd 02 c0 	mov    WORD PTR ds:0xc002cd80,dx
c000e234:	e9 21 21 ff ff       	jmp    c000035a <loadGDT>
c000e239:	90                   	nop

c000e23a <GDT::setup()>:
c000e23a:	57                   	push   edi
c000e23b:	56                   	push   esi
c000e23c:	53                   	push   ebx
c000e23d:	83 ec 30             	sub    esp,0x30
c000e240:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e244:	6a 00                	push   0x0
c000e246:	8d 74 24 14          	lea    esi,[esp+0x14]
c000e24a:	56                   	push   esi
c000e24b:	e8 4e ff ff ff       	call   c000e19e <GDTEntry::setBase(unsigned int)>
c000e250:	6a 00                	push   0x0
c000e252:	56                   	push   esi
c000e253:	e8 62 ff ff ff       	call   c000e1ba <GDTEntry::setLimit(unsigned int)>
c000e258:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000e260:	6a 00                	push   0x0
c000e262:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000e266:	56                   	push   esi
c000e267:	e8 32 ff ff ff       	call   c000e19e <GDTEntry::setBase(unsigned int)>
c000e26c:	68 ff ff ff 00       	push   0xffffff
c000e271:	56                   	push   esi
c000e272:	e8 43 ff ff ff       	call   c000e1ba <GDTEntry::setLimit(unsigned int)>
c000e277:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e27b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e27f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e283:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000e287:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000e28c:	0d 00 9a c0 00       	or     eax,0xc09a00
c000e291:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e295:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e299:	89 f8                	mov    eax,edi
c000e29b:	89 fa                	mov    edx,edi
c000e29d:	80 e4 f7             	and    ah,0xf7
c000e2a0:	80 ce 60             	or     dh,0x60
c000e2a3:	89 c7                	mov    edi,eax
c000e2a5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2a9:	80 cc 60             	or     ah,0x60
c000e2ac:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e2b0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e2b4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000e2b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e2bc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e2c0:	83 c4 20             	add    esp,0x20
c000e2c3:	6a 00                	push   0x0
c000e2c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e2c9:	50                   	push   eax
c000e2ca:	e8 cf fe ff ff       	call   c000e19e <GDTEntry::setBase(unsigned int)>
c000e2cf:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000e2d3:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e2d7:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e2db:	83 e0 3f             	and    eax,0x3f
c000e2de:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000e2e2:	6a 00                	push   0x0
c000e2e4:	8d 44 24 34          	lea    eax,[esp+0x34]
c000e2e8:	50                   	push   eax
c000e2e9:	e8 b0 fe ff ff       	call   c000e19e <GDTEntry::setBase(unsigned int)>
c000e2ee:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000e2f2:	83 e0 3f             	and    eax,0x3f
c000e2f5:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000e2f9:	83 c4 0c             	add    esp,0xc
c000e2fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e300:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e304:	53                   	push   ebx
c000e305:	e8 e4 fe ff ff       	call   c000e1ee <GDT::addEntry(GDTEntry)>
c000e30a:	83 c4 0c             	add    esp,0xc
c000e30d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e311:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e315:	53                   	push   ebx
c000e316:	e8 d3 fe ff ff       	call   c000e1ee <GDT::addEntry(GDTEntry)>
c000e31b:	83 c4 0c             	add    esp,0xc
c000e31e:	57                   	push   edi
c000e31f:	56                   	push   esi
c000e320:	53                   	push   ebx
c000e321:	e8 c8 fe ff ff       	call   c000e1ee <GDT::addEntry(GDTEntry)>
c000e326:	83 c4 0c             	add    esp,0xc
c000e329:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e32d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e331:	53                   	push   ebx
c000e332:	e8 b7 fe ff ff       	call   c000e1ee <GDT::addEntry(GDTEntry)>
c000e337:	83 c4 0c             	add    esp,0xc
c000e33a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e33e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e342:	53                   	push   ebx
c000e343:	e8 a6 fe ff ff       	call   c000e1ee <GDT::addEntry(GDTEntry)>
c000e348:	83 c4 0c             	add    esp,0xc
c000e34b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e34f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e353:	53                   	push   ebx
c000e354:	e8 95 fe ff ff       	call   c000e1ee <GDT::addEntry(GDTEntry)>
c000e359:	83 c4 0c             	add    esp,0xc
c000e35c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e360:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e364:	53                   	push   ebx
c000e365:	e8 84 fe ff ff       	call   c000e1ee <GDT::addEntry(GDTEntry)>
c000e36a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e36d:	e8 a6 fe ff ff       	call   c000e218 <GDT::flush()>
c000e372:	83 c4 40             	add    esp,0x40
c000e375:	5b                   	pop    ebx
c000e376:	5e                   	pop    esi
c000e377:	5f                   	pop    edi
c000e378:	c3                   	ret    

c000e379 <idleFunction(void*)>:
c000e379:	83 ec 0c             	sub    esp,0xc
c000e37c:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000e383:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000e38a:	75 01                	jne    c000e38d <idleFunction(void*)+0x14>
c000e38c:	fb                   	sti    
c000e38d:	e8 6b a2 00 00       	call   c00185fd <HalSystemIdle()>
c000e392:	e8 7f 24 01 00       	call   c0020816 <idleCommon()>
c000e397:	eb f4                	jmp    c000e38d <idleFunction(void*)+0x14>
c000e399:	66 90                	xchg   ax,ax
c000e39b:	90                   	nop

c000e39c <IDTEntry::IDTEntry(bool)>:
c000e39c:	53                   	push   ebx
c000e39d:	83 ec 04             	sub    esp,0x4
c000e3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a4:	88 04 24             	mov    BYTE PTR [esp],al
c000e3a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3ab:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000e3b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3b5:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000e3b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3bd:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e3c0:	83 e2 f0             	and    edx,0xfffffff0
c000e3c3:	83 ca 0e             	or     edx,0xe
c000e3c6:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e3c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3cd:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e3d0:	83 e2 ef             	and    edx,0xffffffef
c000e3d3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e3d6:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000e3da:	85 c0                	test   eax,eax
c000e3dc:	74 06                	je     c000e3e4 <IDTEntry::IDTEntry(bool)+0x48>
c000e3de:	b2 03                	mov    dl,0x3
c000e3e0:	eb 06                	jmp    c000e3e8 <IDTEntry::IDTEntry(bool)+0x4c>
c000e3e2:	66 90                	xchg   ax,ax
c000e3e4:	b2 00                	mov    dl,0x0
c000e3e6:	66 90                	xchg   ax,ax
c000e3e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3ec:	83 e2 03             	and    edx,0x3
c000e3ef:	89 d3                	mov    ebx,edx
c000e3f1:	c1 e3 05             	shl    ebx,0x5
c000e3f4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e3f7:	83 e2 9f             	and    edx,0xffffff9f
c000e3fa:	88 d1                	mov    cl,dl
c000e3fc:	88 da                	mov    dl,bl
c000e3fe:	09 ca                	or     edx,ecx
c000e400:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e403:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e407:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e40a:	83 ca 80             	or     edx,0xffffff80
c000e40d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e410:	90                   	nop
c000e411:	83 c4 04             	add    esp,0x4
c000e414:	5b                   	pop    ebx
c000e415:	c3                   	ret    

c000e416 <IDTEntry::setOffset(unsigned int)>:
c000e416:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e41a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e41e:	66 89 02             	mov    WORD PTR [edx],ax
c000e421:	c1 e8 10             	shr    eax,0x10
c000e424:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000e428:	c3                   	ret    
c000e429:	90                   	nop
c000e42a:	66 90                	xchg   ax,ax

c000e42c <IDT::IDT()>:
c000e42c:	90                   	nop
c000e42d:	c3                   	ret    

c000e42e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000e42e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e432:	83 c0 30             	add    eax,0x30
c000e435:	c3                   	ret    

c000e436 <IDT::addEntry(IDTEntry, int)>:
c000e436:	53                   	push   ebx
c000e437:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e43b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e43f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e443:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e447:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000e44a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000e44e:	5b                   	pop    ebx
c000e44f:	c3                   	ret    

c000e450 <IDT::addEntry(int, void (*)(), bool)>:
c000e450:	53                   	push   ebx
c000e451:	83 ec 10             	sub    esp,0x10
c000e454:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000e459:	50                   	push   eax
c000e45a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000e45e:	53                   	push   ebx
c000e45f:	e8 38 ff ff ff       	call   c000e39c <IDTEntry::IDTEntry(bool)>
c000e464:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e468:	53                   	push   ebx
c000e469:	e8 a8 ff ff ff       	call   c000e416 <IDTEntry::setOffset(unsigned int)>
c000e46e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e472:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e476:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e47a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e47e:	e8 b3 ff ff ff       	call   c000e436 <IDT::addEntry(IDTEntry, int)>
c000e483:	83 c4 30             	add    esp,0x30
c000e486:	5b                   	pop    ebx
c000e487:	c3                   	ret    

c000e488 <IDT::flush()>:
c000e488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e48c:	66 c7 05 88 cd 02 c0 ff 07 	mov    WORD PTR ds:0xc002cd88,0x7ff
c000e495:	a3 8a cd 02 c0       	mov    ds:0xc002cd8a,eax
c000e49a:	0f 01 1d 88 cd 02 c0 	lidtd  ds:0xc002cd88
c000e4a1:	c3                   	ret    

c000e4a2 <IDT::setup()>:
c000e4a2:	57                   	push   edi
c000e4a3:	56                   	push   esi
c000e4a4:	53                   	push   ebx
c000e4a5:	83 ec 10             	sub    esp,0x10
c000e4a8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e4ac:	6a 00                	push   0x0
c000e4ae:	68 c0 fa 01 c0       	push   0xc001fac0
c000e4b3:	6a 00                	push   0x0
c000e4b5:	53                   	push   ebx
c000e4b6:	e8 95 ff ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e4bb:	6a 00                	push   0x0
c000e4bd:	68 d0 fa 01 c0       	push   0xc001fad0
c000e4c2:	6a 01                	push   0x1
c000e4c4:	53                   	push   ebx
c000e4c5:	e8 86 ff ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e4ca:	83 c4 20             	add    esp,0x20
c000e4cd:	6a 00                	push   0x0
c000e4cf:	68 da fa 01 c0       	push   0xc001fada
c000e4d4:	6a 02                	push   0x2
c000e4d6:	53                   	push   ebx
c000e4d7:	e8 74 ff ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e4dc:	6a 00                	push   0x0
c000e4de:	68 e4 fa 01 c0       	push   0xc001fae4
c000e4e3:	6a 03                	push   0x3
c000e4e5:	53                   	push   ebx
c000e4e6:	e8 65 ff ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e4eb:	83 c4 20             	add    esp,0x20
c000e4ee:	6a 00                	push   0x0
c000e4f0:	68 ee fa 01 c0       	push   0xc001faee
c000e4f5:	6a 04                	push   0x4
c000e4f7:	53                   	push   ebx
c000e4f8:	e8 53 ff ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e4fd:	6a 00                	push   0x0
c000e4ff:	68 f8 fa 01 c0       	push   0xc001faf8
c000e504:	6a 05                	push   0x5
c000e506:	53                   	push   ebx
c000e507:	e8 44 ff ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e50c:	83 c4 20             	add    esp,0x20
c000e50f:	6a 00                	push   0x0
c000e511:	68 02 fb 01 c0       	push   0xc001fb02
c000e516:	6a 06                	push   0x6
c000e518:	53                   	push   ebx
c000e519:	e8 32 ff ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e51e:	6a 00                	push   0x0
c000e520:	68 0c fb 01 c0       	push   0xc001fb0c
c000e525:	6a 07                	push   0x7
c000e527:	53                   	push   ebx
c000e528:	e8 23 ff ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e52d:	83 c4 20             	add    esp,0x20
c000e530:	6a 00                	push   0x0
c000e532:	68 16 fb 01 c0       	push   0xc001fb16
c000e537:	6a 08                	push   0x8
c000e539:	53                   	push   ebx
c000e53a:	e8 11 ff ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e53f:	6a 00                	push   0x0
c000e541:	68 1e fb 01 c0       	push   0xc001fb1e
c000e546:	6a 09                	push   0x9
c000e548:	53                   	push   ebx
c000e549:	e8 02 ff ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e54e:	83 c4 20             	add    esp,0x20
c000e551:	6a 00                	push   0x0
c000e553:	68 28 fb 01 c0       	push   0xc001fb28
c000e558:	6a 0a                	push   0xa
c000e55a:	53                   	push   ebx
c000e55b:	e8 f0 fe ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e560:	6a 00                	push   0x0
c000e562:	68 30 fb 01 c0       	push   0xc001fb30
c000e567:	6a 0b                	push   0xb
c000e569:	53                   	push   ebx
c000e56a:	e8 e1 fe ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e56f:	83 c4 20             	add    esp,0x20
c000e572:	6a 00                	push   0x0
c000e574:	68 38 fb 01 c0       	push   0xc001fb38
c000e579:	6a 0c                	push   0xc
c000e57b:	53                   	push   ebx
c000e57c:	e8 cf fe ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e581:	6a 00                	push   0x0
c000e583:	68 40 fb 01 c0       	push   0xc001fb40
c000e588:	6a 0d                	push   0xd
c000e58a:	53                   	push   ebx
c000e58b:	e8 c0 fe ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e590:	83 c4 20             	add    esp,0x20
c000e593:	6a 00                	push   0x0
c000e595:	68 5a fb 01 c0       	push   0xc001fb5a
c000e59a:	6a 0e                	push   0xe
c000e59c:	53                   	push   ebx
c000e59d:	e8 ae fe ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e5a2:	6a 00                	push   0x0
c000e5a4:	68 62 fb 01 c0       	push   0xc001fb62
c000e5a9:	6a 0f                	push   0xf
c000e5ab:	53                   	push   ebx
c000e5ac:	e8 9f fe ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e5b1:	83 c4 20             	add    esp,0x20
c000e5b4:	6a 00                	push   0x0
c000e5b6:	68 6c fb 01 c0       	push   0xc001fb6c
c000e5bb:	6a 10                	push   0x10
c000e5bd:	53                   	push   ebx
c000e5be:	e8 8d fe ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e5c3:	6a 00                	push   0x0
c000e5c5:	68 76 fb 01 c0       	push   0xc001fb76
c000e5ca:	6a 11                	push   0x11
c000e5cc:	53                   	push   ebx
c000e5cd:	e8 7e fe ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e5d2:	83 c4 20             	add    esp,0x20
c000e5d5:	6a 00                	push   0x0
c000e5d7:	68 80 fb 01 c0       	push   0xc001fb80
c000e5dc:	6a 12                	push   0x12
c000e5de:	53                   	push   ebx
c000e5df:	e8 6c fe ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e5e4:	6a 01                	push   0x1
c000e5e6:	68 1a fc 01 c0       	push   0xc001fc1a
c000e5eb:	6a 60                	push   0x60
c000e5ed:	53                   	push   ebx
c000e5ee:	e8 5d fe ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e5f3:	83 c4 20             	add    esp,0x20
c000e5f6:	6a 00                	push   0x0
c000e5f8:	68 21 fc 01 c0       	push   0xc001fc21
c000e5fd:	6a 20                	push   0x20
c000e5ff:	53                   	push   ebx
c000e600:	e8 4b fe ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e605:	6a 00                	push   0x0
c000e607:	68 0c fc 01 c0       	push   0xc001fc0c
c000e60c:	6a 21                	push   0x21
c000e60e:	53                   	push   ebx
c000e60f:	e8 3c fe ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e614:	83 c4 20             	add    esp,0x20
c000e617:	6a 00                	push   0x0
c000e619:	68 13 fc 01 c0       	push   0xc001fc13
c000e61e:	6a 22                	push   0x22
c000e620:	53                   	push   ebx
c000e621:	e8 2a fe ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e626:	6a 00                	push   0x0
c000e628:	68 8a fb 01 c0       	push   0xc001fb8a
c000e62d:	6a 23                	push   0x23
c000e62f:	53                   	push   ebx
c000e630:	e8 1b fe ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e635:	83 c4 20             	add    esp,0x20
c000e638:	6a 00                	push   0x0
c000e63a:	68 94 fb 01 c0       	push   0xc001fb94
c000e63f:	6a 24                	push   0x24
c000e641:	53                   	push   ebx
c000e642:	e8 09 fe ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e647:	6a 00                	push   0x0
c000e649:	68 9e fb 01 c0       	push   0xc001fb9e
c000e64e:	6a 25                	push   0x25
c000e650:	53                   	push   ebx
c000e651:	e8 fa fd ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e656:	83 c4 20             	add    esp,0x20
c000e659:	6a 00                	push   0x0
c000e65b:	68 a8 fb 01 c0       	push   0xc001fba8
c000e660:	6a 26                	push   0x26
c000e662:	53                   	push   ebx
c000e663:	e8 e8 fd ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e668:	6a 00                	push   0x0
c000e66a:	68 b2 fb 01 c0       	push   0xc001fbb2
c000e66f:	6a 27                	push   0x27
c000e671:	53                   	push   ebx
c000e672:	e8 d9 fd ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e677:	83 c4 20             	add    esp,0x20
c000e67a:	6a 00                	push   0x0
c000e67c:	68 bc fb 01 c0       	push   0xc001fbbc
c000e681:	6a 28                	push   0x28
c000e683:	53                   	push   ebx
c000e684:	e8 c7 fd ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e689:	6a 00                	push   0x0
c000e68b:	68 c6 fb 01 c0       	push   0xc001fbc6
c000e690:	6a 29                	push   0x29
c000e692:	53                   	push   ebx
c000e693:	e8 b8 fd ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e698:	83 c4 20             	add    esp,0x20
c000e69b:	6a 00                	push   0x0
c000e69d:	68 d0 fb 01 c0       	push   0xc001fbd0
c000e6a2:	6a 2a                	push   0x2a
c000e6a4:	53                   	push   ebx
c000e6a5:	e8 a6 fd ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e6aa:	6a 00                	push   0x0
c000e6ac:	68 da fb 01 c0       	push   0xc001fbda
c000e6b1:	6a 2b                	push   0x2b
c000e6b3:	53                   	push   ebx
c000e6b4:	e8 97 fd ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e6b9:	83 c4 20             	add    esp,0x20
c000e6bc:	6a 00                	push   0x0
c000e6be:	68 e4 fb 01 c0       	push   0xc001fbe4
c000e6c3:	6a 2c                	push   0x2c
c000e6c5:	53                   	push   ebx
c000e6c6:	e8 85 fd ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e6cb:	6a 00                	push   0x0
c000e6cd:	68 ee fb 01 c0       	push   0xc001fbee
c000e6d2:	6a 2d                	push   0x2d
c000e6d4:	53                   	push   ebx
c000e6d5:	e8 76 fd ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e6da:	83 c4 20             	add    esp,0x20
c000e6dd:	6a 00                	push   0x0
c000e6df:	68 f8 fb 01 c0       	push   0xc001fbf8
c000e6e4:	6a 2e                	push   0x2e
c000e6e6:	53                   	push   ebx
c000e6e7:	e8 64 fd ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e6ec:	6a 00                	push   0x0
c000e6ee:	68 02 fc 01 c0       	push   0xc001fc02
c000e6f3:	6a 2f                	push   0x2f
c000e6f5:	53                   	push   ebx
c000e6f6:	e8 55 fd ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e6fb:	83 c4 20             	add    esp,0x20
c000e6fe:	6a 00                	push   0x0
c000e700:	68 5c fd 01 c0       	push   0xc001fd5c
c000e705:	6a 30                	push   0x30
c000e707:	53                   	push   ebx
c000e708:	e8 43 fd ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e70d:	6a 00                	push   0x0
c000e70f:	68 66 fd 01 c0       	push   0xc001fd66
c000e714:	6a 31                	push   0x31
c000e716:	53                   	push   ebx
c000e717:	e8 34 fd ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e71c:	83 c4 20             	add    esp,0x20
c000e71f:	6a 00                	push   0x0
c000e721:	68 70 fd 01 c0       	push   0xc001fd70
c000e726:	6a 32                	push   0x32
c000e728:	53                   	push   ebx
c000e729:	e8 22 fd ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e72e:	6a 00                	push   0x0
c000e730:	68 7a fd 01 c0       	push   0xc001fd7a
c000e735:	6a 33                	push   0x33
c000e737:	53                   	push   ebx
c000e738:	e8 13 fd ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e73d:	83 c4 20             	add    esp,0x20
c000e740:	6a 00                	push   0x0
c000e742:	68 84 fd 01 c0       	push   0xc001fd84
c000e747:	6a 34                	push   0x34
c000e749:	53                   	push   ebx
c000e74a:	e8 01 fd ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e74f:	6a 00                	push   0x0
c000e751:	68 8e fd 01 c0       	push   0xc001fd8e
c000e756:	6a 35                	push   0x35
c000e758:	53                   	push   ebx
c000e759:	e8 f2 fc ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e75e:	83 c4 20             	add    esp,0x20
c000e761:	6a 00                	push   0x0
c000e763:	68 98 fd 01 c0       	push   0xc001fd98
c000e768:	6a 36                	push   0x36
c000e76a:	53                   	push   ebx
c000e76b:	e8 e0 fc ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e770:	6a 00                	push   0x0
c000e772:	68 a2 fd 01 c0       	push   0xc001fda2
c000e777:	6a 37                	push   0x37
c000e779:	53                   	push   ebx
c000e77a:	e8 d1 fc ff ff       	call   c000e450 <IDT::addEntry(int, void (*)(), bool)>
c000e77f:	83 c4 1c             	add    esp,0x1c
c000e782:	6a 03                	push   0x3
c000e784:	6a 02                	push   0x2
c000e786:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000e78c:	e8 17 42 00 00       	call   c00129a8 <VAS::allocatePages(int, int)>
c000e791:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000e798:	89 c6                	mov    esi,eax
c000e79a:	e8 b0 02 00 00       	call   c000ea4f <malloc>
c000e79f:	81 c6 00 20 00 00    	add    esi,0x2000
c000e7a5:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7a8:	89 c7                	mov    edi,eax
c000e7aa:	e8 7d 32 00 00       	call   c0011a2c <TSS::TSS()>
c000e7af:	83 c4 0c             	add    esp,0xc
c000e7b2:	68 16 fb 01 c0       	push   0xc001fb16
c000e7b7:	56                   	push   esi
c000e7b8:	57                   	push   edi
c000e7b9:	e8 b2 32 00 00       	call   c0011a70 <TSS::setup(unsigned long, unsigned long)>
c000e7be:	89 c6                	mov    esi,eax
c000e7c0:	58                   	pop    eax
c000e7c1:	5a                   	pop    edx
c000e7c2:	6a 00                	push   0x0
c000e7c4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000e7c8:	50                   	push   eax
c000e7c9:	e8 ce fb ff ff       	call   c000e39c <IDTEntry::IDTEntry(bool)>
c000e7ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e7d2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000e7d7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000e7de:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000e7e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e7e8:	80 ce 05             	or     dh,0x5
c000e7eb:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000e7ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e7f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e7f6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000e7f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e7fc:	e8 87 fc ff ff       	call   c000e488 <IDT::flush()>
c000e801:	83 c4 20             	add    esp,0x20
c000e804:	5b                   	pop    ebx
c000e805:	5e                   	pop    esi
c000e806:	5f                   	pop    edi
c000e807:	c3                   	ret    

c000e808 <CPU::current()>:
c000e808:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000e80d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e813:	c3                   	ret    

c000e814 <operator new(unsigned long)>:
c000e814:	e9 36 02 00 00       	jmp    c000ea4f <malloc>

c000e819 <operator delete(void*)>:
c000e819:	e9 51 02 00 00       	jmp    c000ea6f <rfree>

c000e81e <disableIRQs()>:
c000e81e:	fa                   	cli    
c000e81f:	c3                   	ret    

c000e820 <enableIRQs()>:
c000e820:	fb                   	sti    
c000e821:	c3                   	ret    

c000e822 <lockScheduler()>:
c000e822:	fa                   	cli    
c000e823:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c000e829:	c3                   	ret    

c000e82a <unlockScheduler()>:
c000e82a:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000e831:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000e838:	75 01                	jne    c000e83b <unlockScheduler()+0x11>
c000e83a:	fb                   	sti    
c000e83b:	c3                   	ret    

c000e83c <lockStuff()>:
c000e83c:	fa                   	cli    
c000e83d:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c000e843:	ff 05 ac d6 02 c0    	inc    DWORD PTR ds:0xc002d6ac
c000e849:	c3                   	ret    

c000e84a <unlockStuff()>:
c000e84a:	83 ec 0c             	sub    esp,0xc
c000e84d:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000e852:	48                   	dec    eax
c000e853:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000e858:	75 18                	jne    c000e872 <unlockStuff()+0x28>
c000e85a:	83 3d a8 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6a8,0x0
c000e861:	74 0f                	je     c000e872 <unlockStuff()+0x28>
c000e863:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000e86d:	e8 8a 6f 00 00       	call   c00157fc <schedule()>
c000e872:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000e879:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000e880:	75 01                	jne    c000e883 <unlockStuff()+0x39>
c000e882:	fb                   	sti    
c000e883:	83 c4 0c             	add    esp,0xc
c000e886:	c3                   	ret    

c000e887 <Virt::getAKernelVAS()>:
c000e887:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c000e88c:	c3                   	ret    

c000e88d <__not_memcpy>:
c000e88d:	57                   	push   edi
c000e88e:	56                   	push   esi
c000e88f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e893:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e897:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e89b:	89 c7                	mov    edi,eax
c000e89d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e89f:	5e                   	pop    esi
c000e8a0:	5f                   	pop    edi
c000e8a1:	c3                   	ret    

c000e8a2 <sbrk>:
c000e8a2:	55                   	push   ebp
c000e8a3:	57                   	push   edi
c000e8a4:	56                   	push   esi
c000e8a5:	53                   	push   ebx
c000e8a6:	83 ec 1c             	sub    esp,0x1c
c000e8a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e8ad:	85 c0                	test   eax,eax
c000e8af:	74 61                	je     c000e912 <sbrk+0x70>
c000e8b1:	78 66                	js     c000e919 <sbrk+0x77>
c000e8b3:	8b 15 d0 4d 02 c0    	mov    edx,DWORD PTR ds:0xc0024dd0
c000e8b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e8bd:	05 ff 0f 00 00       	add    eax,0xfff
c000e8c2:	89 c5                	mov    ebp,eax
c000e8c4:	78 6b                	js     c000e931 <sbrk+0x8f>
c000e8c6:	c1 fd 0c             	sar    ebp,0xc
c000e8c9:	bb 00 00 00 00       	mov    ebx,0x0
c000e8ce:	8b 35 d0 ce 02 c0    	mov    esi,DWORD PTR ds:0xc002ced0
c000e8d4:	8b 3d d0 4d 02 c0    	mov    edi,DWORD PTR ds:0xc0024dd0
c000e8da:	e8 ab 06 00 00       	call   c000ef8a <Phys::allocatePage()>
c000e8df:	68 01 04 00 00       	push   0x401
c000e8e4:	57                   	push   edi
c000e8e5:	50                   	push   eax
c000e8e6:	56                   	push   esi
c000e8e7:	e8 b8 3f 00 00       	call   c00128a4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e8ec:	81 05 d0 4d 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0024dd0,0x1000
c000e8f6:	83 c3 01             	add    ebx,0x1
c000e8f9:	83 c4 10             	add    esp,0x10
c000e8fc:	39 dd                	cmp    ebp,ebx
c000e8fe:	75 ce                	jne    c000e8ce <sbrk+0x2c>
c000e900:	0f 20 d8             	mov    eax,cr3
c000e903:	0f 22 d8             	mov    cr3,eax
c000e906:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e90a:	83 c4 1c             	add    esp,0x1c
c000e90d:	5b                   	pop    ebx
c000e90e:	5e                   	pop    esi
c000e90f:	5f                   	pop    edi
c000e910:	5d                   	pop    ebp
c000e911:	c3                   	ret    
c000e912:	a1 d0 4d 02 c0       	mov    eax,ds:0xc0024dd0
c000e917:	eb f1                	jmp    c000e90a <sbrk+0x68>
c000e919:	83 ec 08             	sub    esp,0x8
c000e91c:	50                   	push   eax
c000e91d:	68 b8 27 02 c0       	push   0xc00227b8
c000e922:	e8 3d 86 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000e927:	83 c4 10             	add    esp,0x10
c000e92a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e92f:	eb d9                	jmp    c000e90a <sbrk+0x68>
c000e931:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c000e937:	eb 8d                	jmp    c000e8c6 <sbrk+0x24>

c000e939 <sbrk_thunk>:
c000e939:	83 ec 0c             	sub    esp,0xc
c000e93c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e940:	3d ff bf 00 00       	cmp    eax,0xbfff
c000e945:	7f 10                	jg     c000e957 <sbrk_thunk+0x1e>
c000e947:	83 ec 0c             	sub    esp,0xc
c000e94a:	50                   	push   eax
c000e94b:	e8 52 ff ff ff       	call   c000e8a2 <sbrk>
c000e950:	83 c4 10             	add    esp,0x10
c000e953:	83 c4 0c             	add    esp,0xc
c000e956:	c3                   	ret    
c000e957:	83 ec 08             	sub    esp,0x8
c000e95a:	50                   	push   eax
c000e95b:	68 e8 27 02 c0       	push   0xc00227e8
c000e960:	e8 ff 85 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000e965:	83 c4 10             	add    esp,0x10
c000e968:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e96d:	eb e4                	jmp    c000e953 <sbrk_thunk+0x1a>

c000e96f <mmap>:
c000e96f:	55                   	push   ebp
c000e970:	57                   	push   edi
c000e971:	56                   	push   esi
c000e972:	53                   	push   ebx
c000e973:	83 ec 18             	sub    esp,0x18
c000e976:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e97a:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000e980:	89 fb                	mov    ebx,edi
c000e982:	c1 eb 0c             	shr    ebx,0xc
c000e985:	53                   	push   ebx
c000e986:	e8 36 38 00 00       	call   c00121c1 <Virt::allocateKernelVirtualPages(int)>
c000e98b:	89 c5                	mov    ebp,eax
c000e98d:	83 c4 10             	add    esp,0x10
c000e990:	85 db                	test   ebx,ebx
c000e992:	7e 2f                	jle    c000e9c3 <mmap+0x54>
c000e994:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000e99a:	01 c7                	add    edi,eax
c000e99c:	89 c3                	mov    ebx,eax
c000e99e:	8b 35 d0 ce 02 c0    	mov    esi,DWORD PTR ds:0xc002ced0
c000e9a4:	e8 e1 05 00 00       	call   c000ef8a <Phys::allocatePage()>
c000e9a9:	68 01 04 00 00       	push   0x401
c000e9ae:	53                   	push   ebx
c000e9af:	50                   	push   eax
c000e9b0:	56                   	push   esi
c000e9b1:	e8 ee 3e 00 00       	call   c00128a4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e9b6:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e9bc:	83 c4 10             	add    esp,0x10
c000e9bf:	39 fb                	cmp    ebx,edi
c000e9c1:	75 db                	jne    c000e99e <mmap+0x2f>
c000e9c3:	89 e8                	mov    eax,ebp
c000e9c5:	83 c4 0c             	add    esp,0xc
c000e9c8:	5b                   	pop    ebx
c000e9c9:	5e                   	pop    esi
c000e9ca:	5f                   	pop    edi
c000e9cb:	5d                   	pop    ebp
c000e9cc:	c3                   	ret    

c000e9cd <munmap>:
c000e9cd:	83 ec 18             	sub    esp,0x18
c000e9d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9d4:	e8 f0 3a 00 00       	call   c00124c9 <Virt::freeKernelVirtualPages(unsigned long)>
c000e9d9:	b8 00 00 00 00       	mov    eax,0x0
c000e9de:	83 c4 1c             	add    esp,0x1c
c000e9e1:	c3                   	ret    

c000e9e2 <liballoc_lock()>:
c000e9e2:	fa                   	cli    
c000e9e3:	83 05 b0 d6 02 c0 01 	add    DWORD PTR ds:0xc002d6b0,0x1
c000e9ea:	b8 00 00 00 00       	mov    eax,0x0
c000e9ef:	c3                   	ret    

c000e9f0 <liballoc_unlock()>:
c000e9f0:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000e9f8:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000e9ff:	75 01                	jne    c000ea02 <liballoc_unlock()+0x12>
c000ea01:	fb                   	sti    
c000ea02:	b8 00 00 00 00       	mov    eax,0x0
c000ea07:	c3                   	ret    

c000ea08 <liballoc_alloc(int)>:
c000ea08:	83 ec 10             	sub    esp,0x10
c000ea0b:	6a 01                	push   0x1
c000ea0d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea11:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000ea17:	e8 8c 3f 00 00       	call   c00129a8 <VAS::allocatePages(int, int)>
c000ea1c:	83 c4 1c             	add    esp,0x1c
c000ea1f:	c3                   	ret    

c000ea20 <liballoc_free(void*, int)>:
c000ea20:	83 ec 14             	sub    esp,0x14
c000ea23:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea27:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000ea2d:	e8 d4 3b 00 00       	call   c0012606 <VAS::freeAllocatedPages(unsigned long)>
c000ea32:	b8 00 00 00 00       	mov    eax,0x0
c000ea37:	83 c4 1c             	add    esp,0x1c
c000ea3a:	c3                   	ret    

c000ea3b <realloc>:
c000ea3b:	83 ec 14             	sub    esp,0x14
c000ea3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea46:	e8 0c 2d ff ff       	call   c0001757 <dlrealloc>
c000ea4b:	83 c4 1c             	add    esp,0x1c
c000ea4e:	c3                   	ret    

c000ea4f <malloc>:
c000ea4f:	83 ec 18             	sub    esp,0x18
c000ea52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea56:	e8 bf 27 ff ff       	call   c000121a <dlmalloc>
c000ea5b:	83 c4 1c             	add    esp,0x1c
c000ea5e:	c3                   	ret    

c000ea5f <free>:
c000ea5f:	83 ec 18             	sub    esp,0x18
c000ea62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea66:	e8 e8 22 ff ff       	call   c0000d53 <dlfree>
c000ea6b:	83 c4 1c             	add    esp,0x1c
c000ea6e:	c3                   	ret    

c000ea6f <rfree>:
c000ea6f:	83 ec 18             	sub    esp,0x18
c000ea72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea76:	e8 d8 22 ff ff       	call   c0000d53 <dlfree>
c000ea7b:	83 c4 1c             	add    esp,0x1c
c000ea7e:	c3                   	ret    

c000ea7f <calloc>:
c000ea7f:	56                   	push   esi
c000ea80:	53                   	push   ebx
c000ea81:	83 ec 10             	sub    esp,0x10
c000ea84:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ea88:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000ea8d:	53                   	push   ebx
c000ea8e:	e8 bc ff ff ff       	call   c000ea4f <malloc>
c000ea93:	89 c6                	mov    esi,eax
c000ea95:	83 c4 0c             	add    esp,0xc
c000ea98:	53                   	push   ebx
c000ea99:	6a 00                	push   0x0
c000ea9b:	50                   	push   eax
c000ea9c:	e8 4f 1a ff ff       	call   c00004f0 <memset>
c000eaa1:	89 f0                	mov    eax,esi
c000eaa3:	83 c4 14             	add    esp,0x14
c000eaa6:	5b                   	pop    ebx
c000eaa7:	5e                   	pop    esi
c000eaa8:	c3                   	ret    
c000eaa9:	66 90                	xchg   ax,ax
c000eaab:	90                   	nop

c000eaac <KeMailboxTryPost(Mailbox*, void*)>:
c000eaac:	83 ec 10             	sub    esp,0x10
c000eaaf:	fa                   	cli    
c000eab0:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000eab5:	83 c0 01             	add    eax,0x1
c000eab8:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000eabd:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000eac2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eac6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000eac9:	85 c0                	test   eax,eax
c000eacb:	75 23                	jne    c000eaf0 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000eacd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ead1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ead5:	89 10                	mov    DWORD PTR [eax],edx
c000ead7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eadb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000eade:	8d 50 01             	lea    edx,[eax+0x1]
c000eae1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eae5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000eae8:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000eaed:	8d 76 00             	lea    esi,[esi+0x0]
c000eaf0:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000eaf8:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000eafd:	85 c0                	test   eax,eax
c000eaff:	75 03                	jne    c000eb04 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000eb01:	fb                   	sti    
c000eb02:	66 90                	xchg   ax,ax
c000eb04:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eb08:	83 c4 10             	add    esp,0x10
c000eb0b:	c3                   	ret    

c000eb0c <KeMailboxTryGet(Mailbox*, void**)>:
c000eb0c:	83 ec 10             	sub    esp,0x10
c000eb0f:	fa                   	cli    
c000eb10:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000eb15:	83 c0 01             	add    eax,0x1
c000eb18:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000eb1d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000eb22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000eb29:	83 f8 01             	cmp    eax,0x1
c000eb2c:	75 22                	jne    c000eb50 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000eb2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb32:	8b 10                	mov    edx,DWORD PTR [eax]
c000eb34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb38:	89 10                	mov    DWORD PTR [eax],edx
c000eb3a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000eb41:	8d 50 ff             	lea    edx,[eax-0x1]
c000eb44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000eb4b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000eb50:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000eb58:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000eb5d:	85 c0                	test   eax,eax
c000eb5f:	75 03                	jne    c000eb64 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000eb61:	fb                   	sti    
c000eb62:	66 90                	xchg   ax,ax
c000eb64:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eb68:	83 c4 10             	add    esp,0x10
c000eb6b:	c3                   	ret    

c000eb6c <KeMailboxCreate()>:
c000eb6c:	83 ec 1c             	sub    esp,0x1c
c000eb6f:	83 ec 0c             	sub    esp,0xc
c000eb72:	6a 08                	push   0x8
c000eb74:	e8 d6 fe ff ff       	call   c000ea4f <malloc>
c000eb79:	83 c4 10             	add    esp,0x10
c000eb7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eb80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb84:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000eb8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb8e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000eb95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb99:	83 c4 1c             	add    esp,0x1c
c000eb9c:	c3                   	ret    
c000eb9d:	8d 76 00             	lea    esi,[esi+0x0]

c000eba0 <KeMailboxPost(Mailbox*, void*)>:
c000eba0:	83 ec 1c             	sub    esp,0x1c
c000eba3:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000eba8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ebac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ebb0:	e8 f7 fe ff ff       	call   c000eaac <KeMailboxTryPost(Mailbox*, void*)>
c000ebb5:	83 c4 08             	add    esp,0x8
c000ebb8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ebbc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ebc0:	83 f0 01             	xor    eax,0x1
c000ebc3:	0f b6 c0             	movzx  eax,al
c000ebc6:	85 c0                	test   eax,eax
c000ebc8:	74 26                	je     c000ebf0 <KeMailboxPost(Mailbox*, void*)+0x50>
c000ebca:	fa                   	cli    
c000ebcb:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000ebd0:	83 c0 01             	add    eax,0x1
c000ebd3:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000ebd8:	e8 1f 6c 00 00       	call   c00157fc <schedule()>
c000ebdd:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000ebe5:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000ebea:	85 c0                	test   eax,eax
c000ebec:	75 02                	jne    c000ebf0 <KeMailboxPost(Mailbox*, void*)+0x50>
c000ebee:	fb                   	sti    
c000ebef:	90                   	nop
c000ebf0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ebf5:	85 c0                	test   eax,eax
c000ebf7:	75 03                	jne    c000ebfc <KeMailboxPost(Mailbox*, void*)+0x5c>
c000ebf9:	eb ad                	jmp    c000eba8 <KeMailboxPost(Mailbox*, void*)+0x8>
c000ebfb:	90                   	nop
c000ebfc:	90                   	nop
c000ebfd:	83 c4 1c             	add    esp,0x1c
c000ec00:	c3                   	ret    
c000ec01:	8d 76 00             	lea    esi,[esi+0x0]

c000ec04 <KeMailboxGet(Mailbox*, void**)>:
c000ec04:	83 ec 1c             	sub    esp,0x1c
c000ec07:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ec0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ec10:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ec14:	e8 f3 fe ff ff       	call   c000eb0c <KeMailboxTryGet(Mailbox*, void**)>
c000ec19:	83 c4 08             	add    esp,0x8
c000ec1c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ec20:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ec24:	83 f0 01             	xor    eax,0x1
c000ec27:	0f b6 c0             	movzx  eax,al
c000ec2a:	85 c0                	test   eax,eax
c000ec2c:	74 26                	je     c000ec54 <KeMailboxGet(Mailbox*, void**)+0x50>
c000ec2e:	fa                   	cli    
c000ec2f:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000ec34:	83 c0 01             	add    eax,0x1
c000ec37:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000ec3c:	e8 bb 6b 00 00       	call   c00157fc <schedule()>
c000ec41:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000ec49:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000ec4e:	85 c0                	test   eax,eax
c000ec50:	75 02                	jne    c000ec54 <KeMailboxGet(Mailbox*, void**)+0x50>
c000ec52:	fb                   	sti    
c000ec53:	90                   	nop
c000ec54:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ec59:	85 c0                	test   eax,eax
c000ec5b:	75 03                	jne    c000ec60 <KeMailboxGet(Mailbox*, void**)+0x5c>
c000ec5d:	eb ad                	jmp    c000ec0c <KeMailboxGet(Mailbox*, void**)+0x8>
c000ec5f:	90                   	nop
c000ec60:	90                   	nop
c000ec61:	83 c4 1c             	add    esp,0x1c
c000ec64:	c3                   	ret    
c000ec65:	8d 76 00             	lea    esi,[esi+0x0]

c000ec68 <KeMailboxDestroy(Mailbox*)>:
c000ec68:	83 ec 0c             	sub    esp,0xc
c000ec6b:	83 ec 0c             	sub    esp,0xc
c000ec6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec72:	e8 e8 fd ff ff       	call   c000ea5f <free>
c000ec77:	83 c4 10             	add    esp,0x10
c000ec7a:	90                   	nop
c000ec7b:	83 c4 0c             	add    esp,0xc
c000ec7e:	c3                   	ret    

c000ec7f <KeEntryPoint>:
c000ec7f:	57                   	push   edi
c000ec80:	bf f9 03 00 00       	mov    edi,0x3f9
c000ec85:	56                   	push   esi
c000ec86:	89 fa                	mov    edx,edi
c000ec88:	53                   	push   ebx
c000ec89:	31 f6                	xor    esi,esi
c000ec8b:	83 ec 2c             	sub    esp,0x2c
c000ec8e:	a1 00 05 00 00       	mov    eax,ds:0x500
c000ec93:	a3 90 cd 02 c0       	mov    ds:0xc002cd90,eax
c000ec98:	89 f0                	mov    eax,esi
c000ec9a:	ee                   	out    dx,al
c000ec9b:	bb fb 03 00 00       	mov    ebx,0x3fb
c000eca0:	b0 80                	mov    al,0x80
c000eca2:	89 da                	mov    edx,ebx
c000eca4:	ee                   	out    dx,al
c000eca5:	b1 03                	mov    cl,0x3
c000eca7:	ba f8 03 00 00       	mov    edx,0x3f8
c000ecac:	88 c8                	mov    al,cl
c000ecae:	ee                   	out    dx,al
c000ecaf:	89 f0                	mov    eax,esi
c000ecb1:	89 fa                	mov    edx,edi
c000ecb3:	ee                   	out    dx,al
c000ecb4:	88 c8                	mov    al,cl
c000ecb6:	89 da                	mov    edx,ebx
c000ecb8:	ee                   	out    dx,al
c000ecb9:	b0 c7                	mov    al,0xc7
c000ecbb:	ba fa 03 00 00       	mov    edx,0x3fa
c000ecc0:	ee                   	out    dx,al
c000ecc1:	b0 0b                	mov    al,0xb
c000ecc3:	ba fc 03 00 00       	mov    edx,0x3fc
c000ecc8:	ee                   	out    dx,al
c000ecc9:	68 f7 27 02 c0       	push   0xc00227f7
c000ecce:	e8 91 82 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ecd3:	e8 8d d9 ff ff       	call   c000c665 <KeDisplaySplashScreen()>
c000ecd8:	a1 24 05 00 00       	mov    eax,ds:0x524
c000ecdd:	05 ff 0f 00 00       	add    eax,0xfff
c000ece2:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ece7:	89 04 24             	mov    DWORD PTR [esp],eax
c000ecea:	e8 2c 04 00 00       	call   c000f11b <Phys::physicalMemorySetup(unsigned int)>
c000ecef:	e8 ab 36 00 00       	call   c001239f <Virt::virtualMemorySetup()>
c000ecf4:	e8 b6 d8 ff ff       	call   c000c5af <KeInitialiseAtexit()>
c000ecf9:	c7 04 24 0e 28 02 c0 	mov    DWORD PTR [esp],0xc002280e
c000ed00:	e8 5f 82 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ed05:	58                   	pop    eax
c000ed06:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000ed0a:	53                   	push   ebx
c000ed0b:	e8 76 39 00 00       	call   c0012686 <VAS::VAS()>
c000ed10:	c7 04 24 1e 28 02 c0 	mov    DWORD PTR [esp],0xc002281e
c000ed17:	89 1d d0 ce 02 c0    	mov    DWORD PTR ds:0xc002ced0,ebx
c000ed1d:	e8 42 82 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ed22:	e8 37 16 01 00       	call   c002035e <_init>
c000ed27:	c7 04 24 32 28 02 c0 	mov    DWORD PTR [esp],0xc0022832
c000ed2e:	e8 31 82 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ed33:	c7 04 24 6c 01 00 00 	mov    DWORD PTR [esp],0x16c
c000ed3a:	e8 10 fd ff ff       	call   c000ea4f <malloc>
c000ed3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ed42:	89 c6                	mov    esi,eax
c000ed44:	e8 e3 e9 ff ff       	call   c000d72c <Computer::Computer()>
c000ed49:	5a                   	pop    edx
c000ed4a:	89 35 70 ad 02 c0    	mov    DWORD PTR ds:0xc002ad70,esi
c000ed50:	59                   	pop    ecx
c000ed51:	56                   	push   esi
c000ed52:	68 41 28 02 c0       	push   0xc0022841
c000ed57:	e8 08 82 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ed5c:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000ed61:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed63:	53                   	push   ebx
c000ed64:	6a 00                	push   0x0
c000ed66:	6a 00                	push   0x0
c000ed68:	50                   	push   eax
c000ed69:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ed6c:	83 c4 14             	add    esp,0x14
c000ed6f:	53                   	push   ebx
c000ed70:	e8 c7 39 00 00       	call   c001273c <VAS::~VAS()>
c000ed75:	83 c4 30             	add    esp,0x30
c000ed78:	5b                   	pop    ebx
c000ed79:	5e                   	pop    esi
c000ed7a:	5f                   	pop    edi
c000ed7b:	c3                   	ret    

c000ed7c <Mutex::Mutex()>:
c000ed7c:	83 ec 0c             	sub    esp,0xc
c000ed7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed83:	83 ec 08             	sub    esp,0x8
c000ed86:	6a 01                	push   0x1
c000ed88:	50                   	push   eax
c000ed89:	e8 56 0c 00 00       	call   c000f9e4 <Semaphore::Semaphore(int)>
c000ed8e:	83 c4 10             	add    esp,0x10
c000ed91:	90                   	nop
c000ed92:	83 c4 0c             	add    esp,0xc
c000ed95:	c3                   	ret    

c000ed96 <KePanic(char const*)>:
c000ed96:	c6 05 94 cd 02 c0 01 	mov    BYTE PTR ds:0xc002cd94,0x1
c000ed9d:	e9 03 9a 00 00       	jmp    c00187a5 <HalPanic(char const*)>

c000eda2 <Phys::allocateDMA(unsigned long)>:
c000eda2:	55                   	push   ebp
c000eda3:	31 ed                	xor    ebp,ebp
c000eda5:	57                   	push   edi
c000eda6:	56                   	push   esi
c000eda7:	53                   	push   ebx
c000eda8:	31 db                	xor    ebx,ebx
c000edaa:	83 ec 1c             	sub    esp,0x1c
c000edad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edb1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000edb9:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000edbf:	31 c0                	xor    eax,eax
c000edc1:	c1 ef 0c             	shr    edi,0xc
c000edc4:	eb 1b                	jmp    c000ede1 <Phys::allocateDMA(unsigned long)+0x3f>
c000edc6:	85 c0                	test   eax,eax
c000edc8:	75 06                	jne    c000edd0 <Phys::allocateDMA(unsigned long)+0x2e>
c000edca:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000edce:	89 dd                	mov    ebp,ebx
c000edd0:	8d 70 01             	lea    esi,[eax+0x1]
c000edd3:	39 f7                	cmp    edi,esi
c000edd5:	74 37                	je     c000ee0e <Phys::allocateDMA(unsigned long)+0x6c>
c000edd7:	89 f0                	mov    eax,esi
c000edd9:	83 c3 01             	add    ebx,0x1
c000eddc:	83 fb 0f             	cmp    ebx,0xf
c000eddf:	7f 13                	jg     c000edf4 <Phys::allocateDMA(unsigned long)+0x52>
c000ede1:	80 bb b0 cd 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd3250],0x0
c000ede8:	74 dc                	je     c000edc6 <Phys::allocateDMA(unsigned long)+0x24>
c000edea:	31 c0                	xor    eax,eax
c000edec:	83 c3 01             	add    ebx,0x1
c000edef:	83 fb 0f             	cmp    ebx,0xf
c000edf2:	7e ed                	jle    c000ede1 <Phys::allocateDMA(unsigned long)+0x3f>
c000edf4:	83 ec 0c             	sub    esp,0xc
c000edf7:	68 58 28 02 c0       	push   0xc0022858
c000edfc:	e8 95 ff ff ff       	call   c000ed96 <KePanic(char const*)>
c000ee01:	83 c4 10             	add    esp,0x10
c000ee04:	31 c0                	xor    eax,eax
c000ee06:	83 c4 1c             	add    esp,0x1c
c000ee09:	5b                   	pop    ebx
c000ee0a:	5e                   	pop    esi
c000ee0b:	5f                   	pop    edi
c000ee0c:	5d                   	pop    ebp
c000ee0d:	c3                   	ret    
c000ee0e:	89 e9                	mov    ecx,ebp
c000ee10:	c1 f9 04             	sar    ecx,0x4
c000ee13:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ee17:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000ee1b:	89 ca                	mov    edx,ecx
c000ee1d:	83 ea 01             	sub    edx,0x1
c000ee20:	79 03                	jns    c000ee25 <Phys::allocateDMA(unsigned long)+0x83>
c000ee22:	8d 51 0e             	lea    edx,[ecx+0xe]
c000ee25:	c1 fa 04             	sar    edx,0x4
c000ee28:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000ee2c:	74 08                	je     c000ee36 <Phys::allocateDMA(unsigned long)+0x94>
c000ee2e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ee32:	31 c0                	xor    eax,eax
c000ee34:	eb b6                	jmp    c000edec <Phys::allocateDMA(unsigned long)+0x4a>
c000ee36:	85 f6                	test   esi,esi
c000ee38:	74 17                	je     c000ee51 <Phys::allocateDMA(unsigned long)+0xaf>
c000ee3a:	8d 95 b0 cd 02 c0    	lea    edx,[ebp-0x3ffd3250]
c000ee40:	8d 84 05 b1 cd 02 c0 	lea    eax,[ebp+eax*1-0x3ffd324f]
c000ee47:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000ee4a:	83 c2 01             	add    edx,0x1
c000ee4d:	39 d0                	cmp    eax,edx
c000ee4f:	75 f6                	jne    c000ee47 <Phys::allocateDMA(unsigned long)+0xa5>
c000ee51:	a1 a8 cd 02 c0       	mov    eax,ds:0xc002cda8
c000ee56:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ee5a:	01 f8                	add    eax,edi
c000ee5c:	85 d2                	test   edx,edx
c000ee5e:	a3 a8 cd 02 c0       	mov    ds:0xc002cda8,eax
c000ee63:	74 17                	je     c000ee7c <Phys::allocateDMA(unsigned long)+0xda>
c000ee65:	83 ec 0c             	sub    esp,0xc
c000ee68:	68 58 28 02 c0       	push   0xc0022858
c000ee6d:	e8 24 ff ff ff       	call   c000ed96 <KePanic(char const*)>
c000ee72:	83 c4 10             	add    esp,0x10
c000ee75:	89 f0                	mov    eax,esi
c000ee77:	e9 5d ff ff ff       	jmp    c000edd9 <Phys::allocateDMA(unsigned long)+0x37>
c000ee7c:	c1 e5 0c             	shl    ebp,0xc
c000ee7f:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000ee85:	e9 7c ff ff ff       	jmp    c000ee06 <Phys::allocateDMA(unsigned long)+0x64>

c000ee8a <Phys::freeDMA(unsigned long, unsigned long)>:
c000ee8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee8e:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000ee94:	a1 a8 cd 02 c0       	mov    eax,ds:0xc002cda8
c000ee99:	c1 ea 0c             	shr    edx,0xc
c000ee9c:	29 d0                	sub    eax,edx
c000ee9e:	a3 a8 cd 02 c0       	mov    ds:0xc002cda8,eax
c000eea3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eea7:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000eeac:	c1 e8 0c             	shr    eax,0xc
c000eeaf:	85 d2                	test   edx,edx
c000eeb1:	74 11                	je     c000eec4 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000eeb3:	05 b0 cd 02 c0       	add    eax,0xc002cdb0
c000eeb8:	01 c2                	add    edx,eax
c000eeba:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000eebd:	83 c0 01             	add    eax,0x1
c000eec0:	39 d0                	cmp    eax,edx
c000eec2:	75 f6                	jne    c000eeba <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000eec4:	c3                   	ret    

c000eec5 <Phys::setPageState(unsigned long, bool)>:
c000eec5:	57                   	push   edi
c000eec6:	56                   	push   esi
c000eec7:	8b 35 d4 4d 02 c0    	mov    esi,DWORD PTR ds:0xc0024dd4
c000eecd:	53                   	push   ebx
c000eece:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000eed3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eed7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000eedb:	0f b6 c0             	movzx  eax,al
c000eede:	89 ca                	mov    edx,ecx
c000eee0:	83 e1 07             	and    ecx,0x7
c000eee3:	c1 ea 03             	shr    edx,0x3
c000eee6:	d3 c3                	rol    ebx,cl
c000eee8:	01 d6                	add    esi,edx
c000eeea:	d3 e0                	shl    eax,cl
c000eeec:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000eeef:	21 fb                	and    ebx,edi
c000eef1:	88 1e                	mov    BYTE PTR [esi],bl
c000eef3:	8b 1d d4 4d 02 c0    	mov    ebx,DWORD PTR ds:0xc0024dd4
c000eef9:	01 da                	add    edx,ebx
c000eefb:	8a 0a                	mov    cl,BYTE PTR [edx]
c000eefd:	09 c8                	or     eax,ecx
c000eeff:	88 02                	mov    BYTE PTR [edx],al
c000ef01:	5b                   	pop    ebx
c000ef02:	5e                   	pop    esi
c000ef03:	5f                   	pop    edi
c000ef04:	c3                   	ret    

c000ef05 <Phys::getPageState(unsigned long)>:
c000ef05:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ef09:	8b 15 d4 4d 02 c0    	mov    edx,DWORD PTR ds:0xc0024dd4
c000ef0f:	89 c8                	mov    eax,ecx
c000ef11:	83 e1 07             	and    ecx,0x7
c000ef14:	c1 e8 03             	shr    eax,0x3
c000ef17:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000ef1b:	d3 f8                	sar    eax,cl
c000ef1d:	83 e0 01             	and    eax,0x1
c000ef20:	c3                   	ret    

c000ef21 <Phys::freePage(unsigned long)>:
c000ef21:	53                   	push   ebx
c000ef22:	83 ec 08             	sub    esp,0x8
c000ef25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef29:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000ef2f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000ef35:	76 41                	jbe    c000ef78 <Phys::freePage(unsigned long)+0x57>
c000ef37:	c1 e8 0c             	shr    eax,0xc
c000ef3a:	50                   	push   eax
c000ef3b:	89 c3                	mov    ebx,eax
c000ef3d:	e8 c3 ff ff ff       	call   c000ef05 <Phys::getPageState(unsigned long)>
c000ef42:	5a                   	pop    edx
c000ef43:	84 c0                	test   al,al
c000ef45:	74 20                	je     c000ef67 <Phys::freePage(unsigned long)+0x46>
c000ef47:	83 ec 08             	sub    esp,0x8
c000ef4a:	a1 a8 cd 02 c0       	mov    eax,ds:0xc002cda8
c000ef4f:	6a 00                	push   0x0
c000ef51:	83 e8 01             	sub    eax,0x1
c000ef54:	53                   	push   ebx
c000ef55:	a3 a8 cd 02 c0       	mov    ds:0xc002cda8,eax
c000ef5a:	e8 66 ff ff ff       	call   c000eec5 <Phys::setPageState(unsigned long, bool)>
c000ef5f:	83 c4 10             	add    esp,0x10
c000ef62:	83 c4 08             	add    esp,0x8
c000ef65:	5b                   	pop    ebx
c000ef66:	c3                   	ret    
c000ef67:	c7 44 24 10 5d 29 02 c0 	mov    DWORD PTR [esp+0x10],0xc002295d
c000ef6f:	83 c4 08             	add    esp,0x8
c000ef72:	5b                   	pop    ebx
c000ef73:	e9 1e fe ff ff       	jmp    c000ed96 <KePanic(char const*)>
c000ef78:	68 00 10 00 00       	push   0x1000
c000ef7d:	50                   	push   eax
c000ef7e:	e8 07 ff ff ff       	call   c000ee8a <Phys::freeDMA(unsigned long, unsigned long)>
c000ef83:	59                   	pop    ecx
c000ef84:	5b                   	pop    ebx
c000ef85:	83 c4 08             	add    esp,0x8
c000ef88:	5b                   	pop    ebx
c000ef89:	c3                   	ret    

c000ef8a <Phys::allocatePage()>:
c000ef8a:	56                   	push   esi
c000ef8b:	53                   	push   ebx
c000ef8c:	83 ec 14             	sub    esp,0x14
c000ef8f:	8b 35 9c cd 02 c0    	mov    esi,DWORD PTR ds:0xc002cd9c
c000ef95:	89 f3                	mov    ebx,esi
c000ef97:	eb 0a                	jmp    c000efa3 <Phys::allocatePage()+0x19>
c000ef99:	89 1d 9c cd 02 c0    	mov    DWORD PTR ds:0xc002cd9c,ebx
c000ef9f:	39 de                	cmp    esi,ebx
c000efa1:	74 26                	je     c000efc9 <Phys::allocatePage()+0x3f>
c000efa3:	53                   	push   ebx
c000efa4:	e8 5c ff ff ff       	call   c000ef05 <Phys::getPageState(unsigned long)>
c000efa9:	59                   	pop    ecx
c000efaa:	84 c0                	test   al,al
c000efac:	74 67                	je     c000f015 <Phys::allocatePage()+0x8b>
c000efae:	83 c3 01             	add    ebx,0x1
c000efb1:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000efb7:	75 e0                	jne    c000ef99 <Phys::allocatePage()+0xf>
c000efb9:	31 db                	xor    ebx,ebx
c000efbb:	c7 05 9c cd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cd9c,0x0
c000efc5:	39 de                	cmp    esi,ebx
c000efc7:	75 da                	jne    c000efa3 <Phys::allocatePage()+0x19>
c000efc9:	83 ec 0c             	sub    esp,0xc
c000efcc:	a0 c0 cd 02 c0       	mov    al,ds:0xc002cdc0
c000efd1:	83 f0 01             	xor    eax,0x1
c000efd4:	a2 c0 cd 02 c0       	mov    ds:0xc002cdc0,al
c000efd9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000efde:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000efe1:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c000efe7:	51                   	push   ecx
c000efe8:	e8 8b 42 00 00       	call   c0013278 <VAS::scanForEviction()>
c000efed:	83 c4 10             	add    esp,0x10
c000eff0:	85 c0                	test   eax,eax
c000eff2:	75 48                	jne    c000f03c <Phys::allocatePage()+0xb2>
c000eff4:	83 ec 0c             	sub    esp,0xc
c000eff7:	68 80 28 02 c0       	push   0xc0022880
c000effc:	e8 95 fd ff ff       	call   c000ed96 <KePanic(char const*)>
c000f001:	83 c4 10             	add    esp,0x10
c000f004:	8b 1d 9c cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cd9c
c000f00a:	53                   	push   ebx
c000f00b:	e8 f5 fe ff ff       	call   c000ef05 <Phys::getPageState(unsigned long)>
c000f010:	59                   	pop    ecx
c000f011:	84 c0                	test   al,al
c000f013:	75 99                	jne    c000efae <Phys::allocatePage()+0x24>
c000f015:	6a 01                	push   0x1
c000f017:	53                   	push   ebx
c000f018:	e8 a8 fe ff ff       	call   c000eec5 <Phys::setPageState(unsigned long, bool)>
c000f01d:	8b 1d a8 cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cda8
c000f023:	a1 9c cd 02 c0       	mov    eax,ds:0xc002cd9c
c000f028:	83 c3 01             	add    ebx,0x1
c000f02b:	5e                   	pop    esi
c000f02c:	89 1d a8 cd 02 c0    	mov    DWORD PTR ds:0xc002cda8,ebx
c000f032:	c1 e0 0c             	shl    eax,0xc
c000f035:	5a                   	pop    edx
c000f036:	83 c4 14             	add    esp,0x14
c000f039:	5b                   	pop    ebx
c000f03a:	5e                   	pop    esi
c000f03b:	c3                   	ret    
c000f03c:	83 ec 08             	sub    esp,0x8
c000f03f:	8b 15 a8 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cda8
c000f045:	6a 01                	push   0x1
c000f047:	83 c2 01             	add    edx,0x1
c000f04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f04e:	89 15 a8 cd 02 c0    	mov    DWORD PTR ds:0xc002cda8,edx
c000f054:	89 c2                	mov    edx,eax
c000f056:	c1 ea 0c             	shr    edx,0xc
c000f059:	52                   	push   edx
c000f05a:	e8 66 fe ff ff       	call   c000eec5 <Phys::setPageState(unsigned long, bool)>
c000f05f:	83 c4 10             	add    esp,0x10
c000f062:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f066:	eb ce                	jmp    c000f036 <Phys::allocatePage()+0xac>

c000f068 <Phys::allocateContiguousPages(int)>:
c000f068:	57                   	push   edi
c000f069:	56                   	push   esi
c000f06a:	53                   	push   ebx
c000f06b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000f06f:	fa                   	cli    
c000f070:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c000f076:	83 ec 0c             	sub    esp,0xc
c000f079:	83 c2 01             	add    edx,0x1
c000f07c:	68 b0 28 02 c0       	push   0xc00228b0
c000f081:	89 15 b0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6b0,edx
c000f087:	31 db                	xor    ebx,ebx
c000f089:	e8 d6 7e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f08e:	83 c4 10             	add    esp,0x10
c000f091:	85 db                	test   ebx,ebx
c000f093:	75 11                	jne    c000f0a6 <Phys::allocateContiguousPages(int)+0x3e>
c000f095:	e8 f0 fe ff ff       	call   c000ef8a <Phys::allocatePage()>
c000f09a:	83 ff 01             	cmp    edi,0x1
c000f09d:	89 c6                	mov    esi,eax
c000f09f:	74 21                	je     c000f0c2 <Phys::allocateContiguousPages(int)+0x5a>
c000f0a1:	bb 01 00 00 00       	mov    ebx,0x1
c000f0a6:	e8 df fe ff ff       	call   c000ef8a <Phys::allocatePage()>
c000f0ab:	89 da                	mov    edx,ebx
c000f0ad:	c1 e2 0c             	shl    edx,0xc
c000f0b0:	01 f2                	add    edx,esi
c000f0b2:	39 c2                	cmp    edx,eax
c000f0b4:	74 24                	je     c000f0da <Phys::allocateContiguousPages(int)+0x72>
c000f0b6:	bb 01 00 00 00       	mov    ebx,0x1
c000f0bb:	89 c6                	mov    esi,eax
c000f0bd:	83 ff 01             	cmp    edi,0x1
c000f0c0:	75 e4                	jne    c000f0a6 <Phys::allocateContiguousPages(int)+0x3e>
c000f0c2:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000f0ca:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000f0cf:	85 c0                	test   eax,eax
c000f0d1:	75 01                	jne    c000f0d4 <Phys::allocateContiguousPages(int)+0x6c>
c000f0d3:	fb                   	sti    
c000f0d4:	89 f0                	mov    eax,esi
c000f0d6:	5b                   	pop    ebx
c000f0d7:	5e                   	pop    esi
c000f0d8:	5f                   	pop    edi
c000f0d9:	c3                   	ret    
c000f0da:	83 c3 01             	add    ebx,0x1
c000f0dd:	39 fb                	cmp    ebx,edi
c000f0df:	75 b0                	jne    c000f091 <Phys::allocateContiguousPages(int)+0x29>
c000f0e1:	eb df                	jmp    c000f0c2 <Phys::allocateContiguousPages(int)+0x5a>

c000f0e3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000f0e3:	56                   	push   esi
c000f0e4:	53                   	push   ebx
c000f0e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f0e9:	39 1d a0 cd 02 c0    	cmp    DWORD PTR ds:0xc002cda0,ebx
c000f0ef:	73 06                	jae    c000f0f7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000f0f1:	89 1d a0 cd 02 c0    	mov    DWORD PTR ds:0xc002cda0,ebx
c000f0f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0fb:	c1 eb 0c             	shr    ebx,0xc
c000f0fe:	c1 e8 0c             	shr    eax,0xc
c000f101:	39 d8                	cmp    eax,ebx
c000f103:	73 13                	jae    c000f118 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000f105:	6a 00                	push   0x0
c000f107:	8d 70 01             	lea    esi,[eax+0x1]
c000f10a:	50                   	push   eax
c000f10b:	e8 b5 fd ff ff       	call   c000eec5 <Phys::setPageState(unsigned long, bool)>
c000f110:	5a                   	pop    edx
c000f111:	89 f0                	mov    eax,esi
c000f113:	59                   	pop    ecx
c000f114:	39 f3                	cmp    ebx,esi
c000f116:	75 ed                	jne    c000f105 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000f118:	5b                   	pop    ebx
c000f119:	5e                   	pop    esi
c000f11a:	c3                   	ret    

c000f11b <Phys::physicalMemorySetup(unsigned int)>:
c000f11b:	55                   	push   ebp
c000f11c:	57                   	push   edi
c000f11d:	56                   	push   esi
c000f11e:	53                   	push   ebx
c000f11f:	83 ec 40             	sub    esp,0x40
c000f122:	6a 10                	push   0x10
c000f124:	6a 00                	push   0x0
c000f126:	68 b0 cd 02 c0       	push   0xc002cdb0
c000f12b:	e8 c0 13 ff ff       	call   c00004f0 <memset>
c000f130:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f134:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f139:	05 00 10 00 00       	add    eax,0x1000
c000f13e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f142:	5b                   	pop    ebx
c000f143:	31 db                	xor    ebx,ebx
c000f145:	5e                   	pop    esi
c000f146:	50                   	push   eax
c000f147:	68 73 29 02 c0       	push   0xc0022973
c000f14c:	e8 13 7e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f151:	83 c4 10             	add    esp,0x10
c000f154:	83 ec 08             	sub    esp,0x8
c000f157:	6a 01                	push   0x1
c000f159:	53                   	push   ebx
c000f15a:	83 c3 01             	add    ebx,0x1
c000f15d:	e8 63 fd ff ff       	call   c000eec5 <Phys::setPageState(unsigned long, bool)>
c000f162:	83 c4 10             	add    esp,0x10
c000f165:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f16b:	75 e7                	jne    c000f154 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000f16d:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c000f174:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c000f17b:	c1 e0 08             	shl    eax,0x8
c000f17e:	09 c2                	or     edx,eax
c000f180:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000f184:	0f 84 98 01 00 00    	je     c000f322 <Phys::physicalMemorySetup(unsigned int)+0x207>
c000f18a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f18e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000f196:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000f19b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f19f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f1a7:	eb 1c                	jmp    c000f1c5 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c000f1a9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f1ad:	83 c3 18             	add    ebx,0x18
c000f1b0:	83 c6 01             	add    esi,0x1
c000f1b3:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000f1b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f1bb:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000f1bf:	0f 84 6d 01 00 00    	je     c000f332 <Phys::physicalMemorySetup(unsigned int)+0x217>
c000f1c5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000f1c8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f1cb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000f1ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f1d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f1d6:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f1d8:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000f1db:	01 f0                	add    eax,esi
c000f1dd:	55                   	push   ebp
c000f1de:	11 fa                	adc    edx,edi
c000f1e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f1e4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f1e8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ec:	51                   	push   ecx
c000f1ed:	56                   	push   esi
c000f1ee:	68 10 29 02 c0       	push   0xc0022910
c000f1f3:	e8 6c 7d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f1f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f1fc:	83 c4 10             	add    esp,0x10
c000f1ff:	09 f8                	or     eax,edi
c000f201:	0f 85 2b 01 00 00    	jne    c000f332 <Phys::physicalMemorySetup(unsigned int)+0x217>
c000f207:	83 fd 01             	cmp    ebp,0x1
c000f20a:	75 9d                	jne    c000f1a9 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f20c:	ba 00 00 08 00       	mov    edx,0x80000
c000f211:	89 c1                	mov    ecx,eax
c000f213:	39 f2                	cmp    edx,esi
c000f215:	19 f9                	sbb    ecx,edi
c000f217:	0f 82 ab 00 00 00    	jb     c000f2c8 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000f21d:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000f221:	89 c1                	mov    ecx,eax
c000f223:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000f227:	0f 83 9b 00 00 00    	jae    c000f2c8 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000f22d:	ba 00 00 0a 00       	mov    edx,0xa0000
c000f232:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f236:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f23a:	39 fa                	cmp    edx,edi
c000f23c:	19 e8                	sbb    eax,ebp
c000f23e:	0f 82 b0 01 00 00    	jb     c000f3f4 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c000f244:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f248:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f24c:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000f252:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f257:	83 d5 ff             	adc    ebp,0xffffffff
c000f25a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000f25e:	31 c0                	xor    eax,eax
c000f260:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000f264:	39 fa                	cmp    edx,edi
c000f266:	89 c1                	mov    ecx,eax
c000f268:	19 e9                	sbb    ecx,ebp
c000f26a:	0f 83 39 ff ff ff    	jae    c000f1a9 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f270:	be 00 00 08 00       	mov    esi,0x80000
c000f275:	83 ec 04             	sub    esp,0x4
c000f278:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f27c:	57                   	push   edi
c000f27d:	56                   	push   esi
c000f27e:	68 34 29 02 c0       	push   0xc0022934
c000f283:	e8 dc 7c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f288:	5d                   	pop    ebp
c000f289:	58                   	pop    eax
c000f28a:	57                   	push   edi
c000f28b:	56                   	push   esi
c000f28c:	e8 52 fe ff ff       	call   c000f0e3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000f291:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f295:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f299:	83 c4 0c             	add    esp,0xc
c000f29c:	0f ac d0 0c          	shrd   eax,edx,0xc
c000f2a0:	8b 15 ac cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cdac
c000f2a6:	01 d0                	add    eax,edx
c000f2a8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f2af:	a3 ac cd 02 c0       	mov    ds:0xc002cdac,eax
c000f2b4:	52                   	push   edx
c000f2b5:	50                   	push   eax
c000f2b6:	68 99 29 02 c0       	push   0xc0022999
c000f2bb:	e8 a4 7c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f2c0:	83 c4 10             	add    esp,0x10
c000f2c3:	e9 e1 fe ff ff       	jmp    c000f1a9 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f2c8:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000f2cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f2d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d4:	39 ea                	cmp    edx,ebp
c000f2d6:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000f2da:	0f 82 c9 fe ff ff    	jb     c000f1a9 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f2e0:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f2e5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000f2e9:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000f2ed:	0f 83 b6 fe ff ff    	jae    c000f1a9 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f2f3:	39 ee                	cmp    esi,ebp
c000f2f5:	89 f8                	mov    eax,edi
c000f2f7:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000f2fb:	0f 83 74 ff ff ff    	jae    c000f275 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c000f301:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f305:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f309:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000f30d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000f311:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000f315:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f319:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f31d:	e9 53 ff ff ff       	jmp    c000f275 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c000f322:	83 ec 0c             	sub    esp,0xc
c000f325:	68 8b 29 02 c0       	push   0xc002298b
c000f32a:	e8 67 fa ff ff       	call   c000ed96 <KePanic(char const*)>
c000f32f:	83 c4 10             	add    esp,0x10
c000f332:	83 ec 08             	sub    esp,0x8
c000f335:	bb 60 00 00 00       	mov    ebx,0x60
c000f33a:	6a 00                	push   0x0
c000f33c:	6a 06                	push   0x6
c000f33e:	e8 82 fb ff ff       	call   c000eec5 <Phys::setPageState(unsigned long, bool)>
c000f343:	58                   	pop    eax
c000f344:	5a                   	pop    edx
c000f345:	6a 00                	push   0x0
c000f347:	6a 07                	push   0x7
c000f349:	e8 77 fb ff ff       	call   c000eec5 <Phys::setPageState(unsigned long, bool)>
c000f34e:	8b 0d ac cd 02 c0    	mov    ecx,DWORD PTR ds:0xc002cdac
c000f354:	83 c4 10             	add    esp,0x10
c000f357:	83 c1 02             	add    ecx,0x2
c000f35a:	89 0d ac cd 02 c0    	mov    DWORD PTR ds:0xc002cdac,ecx
c000f360:	83 ec 08             	sub    esp,0x8
c000f363:	6a 00                	push   0x0
c000f365:	53                   	push   ebx
c000f366:	83 c3 01             	add    ebx,0x1
c000f369:	e8 57 fb ff ff       	call   c000eec5 <Phys::setPageState(unsigned long, bool)>
c000f36e:	83 c4 10             	add    esp,0x10
c000f371:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000f377:	75 e7                	jne    c000f360 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000f379:	a1 ac cd 02 c0       	mov    eax,ds:0xc002cdac
c000f37e:	bb 40 01 00 00       	mov    ebx,0x140
c000f383:	83 c0 20             	add    eax,0x20
c000f386:	a3 ac cd 02 c0       	mov    ds:0xc002cdac,eax
c000f38b:	eb 26                	jmp    c000f3b3 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000f38d:	83 ec 08             	sub    esp,0x8
c000f390:	6a 00                	push   0x0
c000f392:	53                   	push   ebx
c000f393:	83 c3 01             	add    ebx,0x1
c000f396:	e8 2a fb ff ff       	call   c000eec5 <Phys::setPageState(unsigned long, bool)>
c000f39b:	a1 ac cd 02 c0       	mov    eax,ds:0xc002cdac
c000f3a0:	83 c4 10             	add    esp,0x10
c000f3a3:	83 c0 01             	add    eax,0x1
c000f3a6:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000f3ac:	a3 ac cd 02 c0       	mov    ds:0xc002cdac,eax
c000f3b1:	74 07                	je     c000f3ba <Phys::physicalMemorySetup(unsigned int)+0x29f>
c000f3b3:	3d ff 03 00 00       	cmp    eax,0x3ff
c000f3b8:	7e d3                	jle    c000f38d <Phys::physicalMemorySetup(unsigned int)+0x272>
c000f3ba:	bb d0 01 00 00       	mov    ebx,0x1d0
c000f3bf:	3d ff 07 00 00       	cmp    eax,0x7ff
c000f3c4:	7f 26                	jg     c000f3ec <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c000f3c6:	83 ec 08             	sub    esp,0x8
c000f3c9:	6a 00                	push   0x0
c000f3cb:	53                   	push   ebx
c000f3cc:	83 c3 01             	add    ebx,0x1
c000f3cf:	e8 f1 fa ff ff       	call   c000eec5 <Phys::setPageState(unsigned long, bool)>
c000f3d4:	a1 ac cd 02 c0       	mov    eax,ds:0xc002cdac
c000f3d9:	83 c4 10             	add    esp,0x10
c000f3dc:	83 c0 01             	add    eax,0x1
c000f3df:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000f3e5:	a3 ac cd 02 c0       	mov    ds:0xc002cdac,eax
c000f3ea:	75 d3                	jne    c000f3bf <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c000f3ec:	83 c4 3c             	add    esp,0x3c
c000f3ef:	5b                   	pop    ebx
c000f3f0:	5e                   	pop    esi
c000f3f1:	5f                   	pop    edi
c000f3f2:	5d                   	pop    ebp
c000f3f3:	c3                   	ret    
c000f3f4:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000f3fc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f404:	e9 3b fe ff ff       	jmp    c000f244 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000f409:	90                   	nop

c000f40a <Pipe::isAtty()>:
c000f40a:	31 c0                	xor    eax,eax
c000f40c:	c3                   	ret    
c000f40d:	90                   	nop

c000f40e <Pipe::~Pipe()>:
c000f40e:	83 ec 0c             	sub    esp,0xc
c000f411:	ba f8 29 02 c0       	mov    edx,0xc00229f8
c000f416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f41a:	89 10                	mov    DWORD PTR [eax],edx
c000f41c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f420:	83 ec 0c             	sub    esp,0xc
c000f423:	50                   	push   eax
c000f424:	e8 e5 2a 00 00       	call   c0011f0e <UnixFile::~UnixFile()>
c000f429:	83 c4 10             	add    esp,0x10
c000f42c:	90                   	nop
c000f42d:	83 c4 0c             	add    esp,0xc
c000f430:	c3                   	ret    
c000f431:	90                   	nop

c000f432 <Pipe::~Pipe()>:
c000f432:	83 ec 0c             	sub    esp,0xc
c000f435:	83 ec 0c             	sub    esp,0xc
c000f438:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f43c:	e8 cd ff ff ff       	call   c000f40e <Pipe::~Pipe()>
c000f441:	83 c4 10             	add    esp,0x10
c000f444:	83 ec 08             	sub    esp,0x8
c000f447:	6a 20                	push   0x20
c000f449:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f44d:	e8 02 d3 ff ff       	call   c000c754 <operator delete(void*, unsigned long)>
c000f452:	83 c4 10             	add    esp,0x10
c000f455:	83 c4 0c             	add    esp,0xc
c000f458:	c3                   	ret    
c000f459:	90                   	nop

c000f45a <Pipe::write(unsigned long long, void*, int*)>:
c000f45a:	55                   	push   ebp
c000f45b:	57                   	push   edi
c000f45c:	56                   	push   esi
c000f45d:	53                   	push   ebx
c000f45e:	83 ec 1c             	sub    esp,0x1c
c000f461:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000f465:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f469:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000f46c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f470:	89 04 24             	mov    DWORD PTR [esp],eax
c000f473:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f477:	89 d8                	mov    eax,ebx
c000f479:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000f47c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f480:	89 d6                	mov    esi,edx
c000f482:	89 d7                	mov    edi,edx
c000f484:	c1 ff 1f             	sar    edi,0x1f
c000f487:	03 34 24             	add    esi,DWORD PTR [esp]
c000f48a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000f48e:	c1 f8 1f             	sar    eax,0x1f
c000f491:	39 f3                	cmp    ebx,esi
c000f493:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f497:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f49b:	19 f8                	sbb    eax,edi
c000f49d:	b8 01 00 00 00       	mov    eax,0x1
c000f4a2:	72 6e                	jb     c000f512 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000f4a4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000f4a7:	01 d0                	add    eax,edx
c000f4a9:	99                   	cdq    
c000f4aa:	f7 fb                	idiv   ebx
c000f4ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f4b0:	29 d3                	sub    ebx,edx
c000f4b2:	89 d7                	mov    edi,edx
c000f4b4:	89 de                	mov    esi,ebx
c000f4b6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000f4b9:	c1 fb 1f             	sar    ebx,0x1f
c000f4bc:	39 f2                	cmp    edx,esi
c000f4be:	19 d8                	sbb    eax,ebx
c000f4c0:	b8 00 00 00 00       	mov    eax,0x0
c000f4c5:	72 04                	jb     c000f4cb <Pipe::write(unsigned long long, void*, int*)+0x71>
c000f4c7:	89 d0                	mov    eax,edx
c000f4c9:	29 f0                	sub    eax,esi
c000f4cb:	89 d3                	mov    ebx,edx
c000f4cd:	29 c3                	sub    ebx,eax
c000f4cf:	74 0b                	je     c000f4dc <Pipe::write(unsigned long long, void*, int*)+0x82>
c000f4d1:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000f4d4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000f4d8:	89 d9                	mov    ecx,ebx
c000f4da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f4dc:	85 c0                	test   eax,eax
c000f4de:	74 0d                	je     c000f4ed <Pipe::write(unsigned long long, void*, int*)+0x93>
c000f4e0:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000f4e4:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000f4e7:	89 de                	mov    esi,ebx
c000f4e9:	89 c1                	mov    ecx,eax
c000f4eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f4ed:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000f4f0:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f4f5:	75 10                	jne    c000f507 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000f4f7:	83 ec 0c             	sub    esp,0xc
c000f4fa:	68 b5 29 02 c0       	push   0xc00229b5
c000f4ff:	e8 92 f8 ff ff       	call   c000ed96 <KePanic(char const*)>
c000f504:	83 c4 10             	add    esp,0x10
c000f507:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f50b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000f50e:	89 08                	mov    DWORD PTR [eax],ecx
c000f510:	31 c0                	xor    eax,eax
c000f512:	83 c4 1c             	add    esp,0x1c
c000f515:	5b                   	pop    ebx
c000f516:	5e                   	pop    esi
c000f517:	5f                   	pop    edi
c000f518:	5d                   	pop    ebp
c000f519:	c3                   	ret    

c000f51a <Pipe::read(unsigned long long, void*, int*)>:
c000f51a:	55                   	push   ebp
c000f51b:	57                   	push   edi
c000f51c:	56                   	push   esi
c000f51d:	53                   	push   ebx
c000f51e:	83 ec 1c             	sub    esp,0x1c
c000f521:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000f525:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000f529:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f52d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000f530:	89 c8                	mov    eax,ecx
c000f532:	99                   	cdq    
c000f533:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000f537:	74 27                	je     c000f560 <Pipe::read(unsigned long long, void*, int*)+0x46>
c000f539:	39 f9                	cmp    ecx,edi
c000f53b:	89 d1                	mov    ecx,edx
c000f53d:	19 f1                	sbb    ecx,esi
c000f53f:	73 1f                	jae    c000f560 <Pipe::read(unsigned long long, void*, int*)+0x46>
c000f541:	fa                   	cli    
c000f542:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c000f548:	e8 af 62 00 00       	call   c00157fc <schedule()>
c000f54d:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000f554:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000f55b:	75 d0                	jne    c000f52d <Pipe::read(unsigned long long, void*, int*)+0x13>
c000f55d:	fb                   	sti    
c000f55e:	eb cd                	jmp    c000f52d <Pipe::read(unsigned long long, void*, int*)+0x13>
c000f560:	39 f8                	cmp    eax,edi
c000f562:	89 d1                	mov    ecx,edx
c000f564:	89 3c 24             	mov    DWORD PTR [esp],edi
c000f567:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000f56b:	19 f1                	sbb    ecx,esi
c000f56d:	73 07                	jae    c000f576 <Pipe::read(unsigned long long, void*, int*)+0x5c>
c000f56f:	89 04 24             	mov    DWORD PTR [esp],eax
c000f572:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f576:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000f579:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000f57c:	29 f7                	sub    edi,esi
c000f57e:	89 f8                	mov    eax,edi
c000f580:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000f584:	99                   	cdq    
c000f585:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000f588:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f58c:	19 d0                	sbb    eax,edx
c000f58e:	73 07                	jae    c000f597 <Pipe::read(unsigned long long, void*, int*)+0x7d>
c000f590:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000f593:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f597:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000f59a:	89 ea                	mov    edx,ebp
c000f59c:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000f5a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000f5a5:	74 0d                	je     c000f5b4 <Pipe::read(unsigned long long, void*, int*)+0x9a>
c000f5a7:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000f5aa:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f5ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f5b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f5b4:	85 d2                	test   edx,edx
c000f5b6:	74 11                	je     c000f5c9 <Pipe::read(unsigned long long, void*, int*)+0xaf>
c000f5b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f5bc:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000f5bf:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000f5c3:	89 d1                	mov    ecx,edx
c000f5c5:	89 c7                	mov    edi,eax
c000f5c7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f5c9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000f5cc:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000f5cf:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000f5d2:	99                   	cdq    
c000f5d3:	89 f7                	mov    edi,esi
c000f5d5:	03 04 24             	add    eax,DWORD PTR [esp]
c000f5d8:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000f5dc:	c1 ff 1f             	sar    edi,0x1f
c000f5df:	57                   	push   edi
c000f5e0:	56                   	push   esi
c000f5e1:	52                   	push   edx
c000f5e2:	50                   	push   eax
c000f5e3:	e8 5c 0c 01 00       	call   c0020244 <__umoddi3>
c000f5e8:	83 c4 10             	add    esp,0x10
c000f5eb:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000f5ee:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f5f3:	75 10                	jne    c000f605 <Pipe::read(unsigned long long, void*, int*)+0xeb>
c000f5f5:	83 ec 0c             	sub    esp,0xc
c000f5f8:	68 d2 29 02 c0       	push   0xc00229d2
c000f5fd:	e8 94 f7 ff ff       	call   c000ed96 <KePanic(char const*)>
c000f602:	83 c4 10             	add    esp,0x10
c000f605:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f609:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000f60c:	89 10                	mov    DWORD PTR [eax],edx
c000f60e:	83 c4 1c             	add    esp,0x1c
c000f611:	31 c0                	xor    eax,eax
c000f613:	5b                   	pop    ebx
c000f614:	5e                   	pop    esi
c000f615:	5f                   	pop    edi
c000f616:	5d                   	pop    ebp
c000f617:	c3                   	ret    

c000f618 <Pipe::Pipe(int)>:
c000f618:	83 ec 0c             	sub    esp,0xc
c000f61b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f61f:	83 ec 08             	sub    esp,0x8
c000f622:	6a 00                	push   0x0
c000f624:	50                   	push   eax
c000f625:	e8 fe 26 00 00       	call   c0011d28 <UnixFile::UnixFile(int)>
c000f62a:	83 c4 10             	add    esp,0x10
c000f62d:	ba f8 29 02 c0       	mov    edx,0xc00229f8
c000f632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f636:	89 10                	mov    DWORD PTR [eax],edx
c000f638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f63c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f640:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000f643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f647:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000f64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f652:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000f659:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f65d:	83 ec 0c             	sub    esp,0xc
c000f660:	50                   	push   eax
c000f661:	e8 e9 f3 ff ff       	call   c000ea4f <malloc>
c000f666:	83 c4 10             	add    esp,0x10
c000f669:	89 c2                	mov    edx,eax
c000f66b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f66f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f676:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000f67a:	90                   	nop
c000f67b:	83 c4 0c             	add    esp,0xc
c000f67e:	c3                   	ret    

c000f67f <KePowerThread(void*)>:
c000f67f:	83 ec 0c             	sub    esp,0xc
c000f682:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000f689:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000f690:	75 01                	jne    c000f693 <KePowerThread(void*)+0x14>
c000f692:	fb                   	sti    
c000f693:	83 ec 0c             	sub    esp,0xc
c000f696:	c6 05 e0 cd 02 c0 00 	mov    BYTE PTR ds:0xc002cde0,0x0
c000f69d:	6a 0a                	push   0xa
c000f69f:	e8 64 63 00 00       	call   c0015a08 <sleep(unsigned int)>
c000f6a4:	83 05 24 ce 02 c0 0a 	add    DWORD PTR ds:0xc002ce24,0xa
c000f6ab:	83 c4 10             	add    esp,0x10
c000f6ae:	eb e3                	jmp    c000f693 <KePowerThread(void*)+0x14>

c000f6b0 <KeChangePowerSettings(PowerSettings)>:
c000f6b0:	57                   	push   edi
c000f6b1:	b9 09 00 00 00       	mov    ecx,0x9
c000f6b6:	56                   	push   esi
c000f6b7:	bf 00 ce 02 c0       	mov    edi,0xc002ce00
c000f6bc:	fc                   	cld    
c000f6bd:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f6c1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f6c3:	5e                   	pop    esi
c000f6c4:	5f                   	pop    edi
c000f6c5:	c3                   	ret    

c000f6c6 <KeUserIOReceived()>:
c000f6c6:	c7 05 24 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce24,0x0
c000f6d0:	c3                   	ret    

c000f6d1 <KeHandlePowerButton()>:
c000f6d1:	a1 00 ce 02 c0       	mov    eax,ds:0xc002ce00
c000f6d6:	83 f8 02             	cmp    eax,0x2
c000f6d9:	75 05                	jne    c000f6e0 <KeHandlePowerButton()+0xf>
c000f6db:	e9 b0 e0 ff ff       	jmp    c000d790 <KeShutdown()>
c000f6e0:	48                   	dec    eax
c000f6e1:	75 05                	jne    c000f6e8 <KeHandlePowerButton()+0x17>
c000f6e3:	e9 cc e0 ff ff       	jmp    c000d7b4 <KeSleep()>
c000f6e8:	c3                   	ret    

c000f6e9 <KeHandleSleepButton()>:
c000f6e9:	a1 04 ce 02 c0       	mov    eax,ds:0xc002ce04
c000f6ee:	83 f8 02             	cmp    eax,0x2
c000f6f1:	75 05                	jne    c000f6f8 <KeHandleSleepButton()+0xf>
c000f6f3:	e9 98 e0 ff ff       	jmp    c000d790 <KeShutdown()>
c000f6f8:	48                   	dec    eax
c000f6f9:	75 05                	jne    c000f700 <KeHandleSleepButton()+0x17>
c000f6fb:	e9 b4 e0 ff ff       	jmp    c000d7b4 <KeSleep()>
c000f700:	c3                   	ret    

c000f701 <KeSetupPowerManager()>:
c000f701:	83 ec 0c             	sub    esp,0xc
c000f704:	c7 05 24 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce24,0x0
c000f70e:	68 f0 00 00 00       	push   0xf0
c000f713:	c6 05 e0 cd 02 c0 00 	mov    BYTE PTR ds:0xc002cde0,0x0
c000f71a:	6a 00                	push   0x0
c000f71c:	68 7f f6 00 c0       	push   0xc000f67f
c000f721:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c000f727:	e8 80 5e 00 00       	call   c00155ac <Process::createThread(void (*)(void*), void*, int)>
c000f72c:	c7 05 00 ce 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002ce00,0x2
c000f736:	c7 05 04 ce 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ce04,0x1
c000f740:	c7 05 08 ce 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002ce08,0x3
c000f74a:	c7 05 0c ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce0c,0x0
c000f754:	c7 05 18 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce18,0x0
c000f75e:	c7 05 10 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce10,0x0
c000f768:	c7 05 1c ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce1c,0x0
c000f772:	c7 05 14 ce 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002ce14,0x3c
c000f77c:	c7 05 20 ce 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002ce20,0x3c
c000f786:	83 c4 1c             	add    esp,0x1c
c000f789:	c3                   	ret    

c000f78a <KeRand()>:
c000f78a:	69 05 28 ce 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002ce28,0x2875
c000f794:	69 0d 2c ce 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002ce2c,0xa2e7b175
c000f79e:	53                   	push   ebx
c000f79f:	01 c1                	add    ecx,eax
c000f7a1:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c000f7a6:	f7 25 28 ce 02 c0    	mul    DWORD PTR ds:0xc002ce28
c000f7ac:	01 ca                	add    edx,ecx
c000f7ae:	05 ef 04 b5 00       	add    eax,0xb504ef
c000f7b3:	83 d2 00             	adc    edx,0x0
c000f7b6:	a3 28 ce 02 c0       	mov    ds:0xc002ce28,eax
c000f7bb:	0f b7 da             	movzx  ebx,dx
c000f7be:	89 da                	mov    edx,ebx
c000f7c0:	89 1d 2c ce 02 c0    	mov    DWORD PTR ds:0xc002ce2c,ebx
c000f7c6:	0f ac d0 0e          	shrd   eax,edx,0xe
c000f7ca:	5b                   	pop    ebx
c000f7cb:	c3                   	ret    

c000f7cc <KeSeedRand(unsigned int)>:
c000f7cc:	53                   	push   ebx
c000f7cd:	83 ec 08             	sub    esp,0x8
c000f7d0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f7d4:	e8 bc 92 00 00       	call   c0018a95 <HalGetRand()>
c000f7d9:	c7 05 2c ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce2c,0x0
c000f7e3:	31 d8                	xor    eax,ebx
c000f7e5:	a3 28 ce 02 c0       	mov    ds:0xc002ce28,eax
c000f7ea:	e8 9b ff ff ff       	call   c000f78a <KeRand()>
c000f7ef:	83 c4 08             	add    esp,0x8
c000f7f2:	5b                   	pop    ebx
c000f7f3:	eb 95                	jmp    c000f78a <KeRand()>

c000f7f5 <KeInitRand()>:
c000f7f5:	83 ec 0c             	sub    esp,0xc
c000f7f8:	e8 bc 90 00 00       	call   c00188b9 <HalQueryPerformanceCounter()>
c000f7fd:	0f 20 da             	mov    edx,cr3
c000f800:	0f 22 da             	mov    cr3,edx
c000f803:	0f 20 da             	mov    edx,cr3
c000f806:	0f 22 da             	mov    cr3,edx
c000f809:	0f 20 da             	mov    edx,cr3
c000f80c:	0f 22 da             	mov    cr3,edx
c000f80f:	0f 20 da             	mov    edx,cr3
c000f812:	0f 22 da             	mov    cr3,edx
c000f815:	83 ec 0c             	sub    esp,0xc
c000f818:	35 03 8a 95 38       	xor    eax,0x38958a03
c000f81d:	50                   	push   eax
c000f81e:	e8 a9 ff ff ff       	call   c000f7cc <KeSeedRand(unsigned int)>
c000f823:	83 c4 1c             	add    esp,0x1c
c000f826:	c3                   	ret    
c000f827:	90                   	nop

c000f828 <KeResolveCompatibilitySymbol(char*)>:
c000f828:	83 ec 0c             	sub    esp,0xc
c000f82b:	83 ec 08             	sub    esp,0x8
c000f82e:	68 0c 2a 02 c0       	push   0xc0022a0c
c000f833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f837:	e8 14 0f ff ff       	call   c0000750 <strcmp>
c000f83c:	83 c4 10             	add    esp,0x10
c000f83f:	85 c0                	test   eax,eax
c000f841:	0f 94 c0             	sete   al
c000f844:	0f b6 c0             	movzx  eax,al
c000f847:	85 c0                	test   eax,eax
c000f849:	74 0d                	je     c000f858 <KeResolveCompatibilitySymbol(char*)+0x30>
c000f84b:	b8 70 ad 02 c0       	mov    eax,0xc002ad70
c000f850:	e9 8b 01 00 00       	jmp    c000f9e0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f855:	8d 76 00             	lea    esi,[esi+0x0]
c000f858:	83 ec 08             	sub    esp,0x8
c000f85b:	68 15 2a 02 c0       	push   0xc0022a15
c000f860:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f864:	e8 e7 0e ff ff       	call   c0000750 <strcmp>
c000f869:	83 c4 10             	add    esp,0x10
c000f86c:	85 c0                	test   eax,eax
c000f86e:	0f 94 c0             	sete   al
c000f871:	0f b6 c0             	movzx  eax,al
c000f874:	85 c0                	test   eax,eax
c000f876:	74 0c                	je     c000f884 <KeResolveCompatibilitySymbol(char*)+0x5c>
c000f878:	b8 44 01 02 c0       	mov    eax,0xc0020144
c000f87d:	e9 5e 01 00 00       	jmp    c000f9e0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f882:	66 90                	xchg   ax,ax
c000f884:	83 ec 08             	sub    esp,0x8
c000f887:	68 1f 2a 02 c0       	push   0xc0022a1f
c000f88c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f890:	e8 bb 0e ff ff       	call   c0000750 <strcmp>
c000f895:	83 c4 10             	add    esp,0x10
c000f898:	85 c0                	test   eax,eax
c000f89a:	0f 94 c0             	sete   al
c000f89d:	0f b6 c0             	movzx  eax,al
c000f8a0:	85 c0                	test   eax,eax
c000f8a2:	74 0c                	je     c000f8b0 <KeResolveCompatibilitySymbol(char*)+0x88>
c000f8a4:	b8 78 fe 01 c0       	mov    eax,0xc001fe78
c000f8a9:	e9 32 01 00 00       	jmp    c000f9e0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f8ae:	66 90                	xchg   ax,ax
c000f8b0:	83 ec 08             	sub    esp,0x8
c000f8b3:	68 28 2a 02 c0       	push   0xc0022a28
c000f8b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8bc:	e8 8f 0e ff ff       	call   c0000750 <strcmp>
c000f8c1:	83 c4 10             	add    esp,0x10
c000f8c4:	85 c0                	test   eax,eax
c000f8c6:	0f 94 c0             	sete   al
c000f8c9:	0f b6 c0             	movzx  eax,al
c000f8cc:	85 c0                	test   eax,eax
c000f8ce:	74 0c                	je     c000f8dc <KeResolveCompatibilitySymbol(char*)+0xb4>
c000f8d0:	b8 96 ed 00 c0       	mov    eax,0xc000ed96
c000f8d5:	e9 06 01 00 00       	jmp    c000f9e0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f8da:	66 90                	xchg   ax,ax
c000f8dc:	83 ec 08             	sub    esp,0x8
c000f8df:	68 3b 2a 02 c0       	push   0xc0022a3b
c000f8e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8e8:	e8 63 0e ff ff       	call   c0000750 <strcmp>
c000f8ed:	83 c4 10             	add    esp,0x10
c000f8f0:	85 c0                	test   eax,eax
c000f8f2:	0f 94 c0             	sete   al
c000f8f5:	0f b6 c0             	movzx  eax,al
c000f8f8:	85 c0                	test   eax,eax
c000f8fa:	74 0c                	je     c000f908 <KeResolveCompatibilitySymbol(char*)+0xe0>
c000f8fc:	b8 94 c6 00 c0       	mov    eax,0xc000c694
c000f901:	e9 da 00 00 00       	jmp    c000f9e0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f906:	66 90                	xchg   ax,ax
c000f908:	83 ec 08             	sub    esp,0x8
c000f90b:	68 58 2a 02 c0       	push   0xc0022a58
c000f910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f914:	e8 37 0e ff ff       	call   c0000750 <strcmp>
c000f919:	83 c4 10             	add    esp,0x10
c000f91c:	85 c0                	test   eax,eax
c000f91e:	0f 94 c0             	sete   al
c000f921:	0f b6 c0             	movzx  eax,al
c000f924:	85 c0                	test   eax,eax
c000f926:	74 0c                	je     c000f934 <KeResolveCompatibilitySymbol(char*)+0x10c>
c000f928:	b8 44 02 02 c0       	mov    eax,0xc0020244
c000f92d:	e9 ae 00 00 00       	jmp    c000f9e0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f932:	66 90                	xchg   ax,ax
c000f934:	83 ec 08             	sub    esp,0x8
c000f937:	68 62 2a 02 c0       	push   0xc0022a62
c000f93c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f940:	e8 0b 0e ff ff       	call   c0000750 <strcmp>
c000f945:	83 c4 10             	add    esp,0x10
c000f948:	85 c0                	test   eax,eax
c000f94a:	0f 94 c0             	sete   al
c000f94d:	0f b6 c0             	movzx  eax,al
c000f950:	85 c0                	test   eax,eax
c000f952:	74 0c                	je     c000f960 <KeResolveCompatibilitySymbol(char*)+0x138>
c000f954:	b8 c4 ff 01 c0       	mov    eax,0xc001ffc4
c000f959:	e9 82 00 00 00       	jmp    c000f9e0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f95e:	66 90                	xchg   ax,ax
c000f960:	83 ec 08             	sub    esp,0x8
c000f963:	68 6b 2a 02 c0       	push   0xc0022a6b
c000f968:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f96c:	e8 df 0d ff ff       	call   c0000750 <strcmp>
c000f971:	83 c4 10             	add    esp,0x10
c000f974:	85 c0                	test   eax,eax
c000f976:	0f 94 c0             	sete   al
c000f979:	0f b6 c0             	movzx  eax,al
c000f97c:	85 c0                	test   eax,eax
c000f97e:	74 08                	je     c000f988 <KeResolveCompatibilitySymbol(char*)+0x160>
c000f980:	b8 74 ad 02 c0       	mov    eax,0xc002ad74
c000f985:	eb 59                	jmp    c000f9e0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f987:	90                   	nop
c000f988:	83 ec 08             	sub    esp,0x8
c000f98b:	68 83 2a 02 c0       	push   0xc0022a83
c000f990:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f994:	e8 b7 0d ff ff       	call   c0000750 <strcmp>
c000f999:	83 c4 10             	add    esp,0x10
c000f99c:	85 c0                	test   eax,eax
c000f99e:	0f 94 c0             	sete   al
c000f9a1:	0f b6 c0             	movzx  eax,al
c000f9a4:	85 c0                	test   eax,eax
c000f9a6:	74 08                	je     c000f9b0 <KeResolveCompatibilitySymbol(char*)+0x188>
c000f9a8:	b8 74 ad 02 c0       	mov    eax,0xc002ad74
c000f9ad:	eb 31                	jmp    c000f9e0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f9af:	90                   	nop
c000f9b0:	83 ec 08             	sub    esp,0x8
c000f9b3:	68 90 2a 02 c0       	push   0xc0022a90
c000f9b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9bc:	e8 8f 0d ff ff       	call   c0000750 <strcmp>
c000f9c1:	83 c4 10             	add    esp,0x10
c000f9c4:	85 c0                	test   eax,eax
c000f9c6:	0f 94 c0             	sete   al
c000f9c9:	0f b6 c0             	movzx  eax,al
c000f9cc:	85 c0                	test   eax,eax
c000f9ce:	74 08                	je     c000f9d8 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c000f9d0:	b8 75 ad 02 c0       	mov    eax,0xc002ad75
c000f9d5:	eb 09                	jmp    c000f9e0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f9d7:	90                   	nop
c000f9d8:	b8 00 00 00 00       	mov    eax,0x0
c000f9dd:	8d 76 00             	lea    esi,[esi+0x0]
c000f9e0:	83 c4 0c             	add    esp,0xc
c000f9e3:	c3                   	ret    

c000f9e4 <Semaphore::Semaphore(int)>:
c000f9e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f9e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f9ec:	89 10                	mov    DWORD PTR [eax],edx
c000f9ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f9f2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000f9f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f9fd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fa04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fa08:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000fa0f:	90                   	nop
c000fa10:	c3                   	ret    
c000fa11:	90                   	nop
c000fa12:	66 90                	xchg   ax,ax

c000fa14 <Semaphore::tryAcquire()>:
c000fa14:	83 ec 0c             	sub    esp,0xc
c000fa17:	fa                   	cli    
c000fa18:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fa1d:	83 c0 01             	add    eax,0x1
c000fa20:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000fa25:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fa2a:	83 c0 01             	add    eax,0x1
c000fa2d:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fa32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa36:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fa39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa3d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa3f:	39 c2                	cmp    edx,eax
c000fa41:	7d 59                	jge    c000fa9c <Semaphore::tryAcquire()+0x88>
c000fa43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa47:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fa4a:	8d 50 01             	lea    edx,[eax+0x1]
c000fa4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa51:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fa54:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fa59:	83 e8 01             	sub    eax,0x1
c000fa5c:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fa61:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fa66:	85 c0                	test   eax,eax
c000fa68:	75 1a                	jne    c000fa84 <Semaphore::tryAcquire()+0x70>
c000fa6a:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000fa6f:	85 c0                	test   eax,eax
c000fa71:	74 11                	je     c000fa84 <Semaphore::tryAcquire()+0x70>
c000fa73:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000fa7d:	e8 7a 5d 00 00       	call   c00157fc <schedule()>
c000fa82:	66 90                	xchg   ax,ax
c000fa84:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000fa8c:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fa91:	85 c0                	test   eax,eax
c000fa93:	75 03                	jne    c000fa98 <Semaphore::tryAcquire()+0x84>
c000fa95:	fb                   	sti    
c000fa96:	66 90                	xchg   ax,ax
c000fa98:	b0 01                	mov    al,0x1
c000fa9a:	eb 48                	jmp    c000fae4 <Semaphore::tryAcquire()+0xd0>
c000fa9c:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000faa1:	83 e8 01             	sub    eax,0x1
c000faa4:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000faa9:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000faae:	85 c0                	test   eax,eax
c000fab0:	75 1a                	jne    c000facc <Semaphore::tryAcquire()+0xb8>
c000fab2:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000fab7:	85 c0                	test   eax,eax
c000fab9:	74 11                	je     c000facc <Semaphore::tryAcquire()+0xb8>
c000fabb:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000fac5:	e8 32 5d 00 00       	call   c00157fc <schedule()>
c000faca:	66 90                	xchg   ax,ax
c000facc:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000fad4:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fad9:	85 c0                	test   eax,eax
c000fadb:	75 03                	jne    c000fae0 <Semaphore::tryAcquire()+0xcc>
c000fadd:	fb                   	sti    
c000fade:	66 90                	xchg   ax,ax
c000fae0:	b0 00                	mov    al,0x0
c000fae2:	66 90                	xchg   ax,ax
c000fae4:	83 c4 0c             	add    esp,0xc
c000fae7:	c3                   	ret    

c000fae8 <Semaphore::assertLocked(char const*)>:
c000fae8:	83 ec 0c             	sub    esp,0xc
c000faeb:	fa                   	cli    
c000faec:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000faf1:	83 c0 01             	add    eax,0x1
c000faf4:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000faf9:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fafe:	83 c0 01             	add    eax,0x1
c000fb01:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fb06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb0a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fb0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb11:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb13:	39 c2                	cmp    edx,eax
c000fb15:	7d 11                	jge    c000fb28 <Semaphore::assertLocked(char const*)+0x40>
c000fb17:	83 ec 0c             	sub    esp,0xc
c000fb1a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fb1e:	e8 73 f2 ff ff       	call   c000ed96 <KePanic(char const*)>
c000fb23:	83 c4 10             	add    esp,0x10
c000fb26:	66 90                	xchg   ax,ax
c000fb28:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fb2d:	83 e8 01             	sub    eax,0x1
c000fb30:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fb35:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fb3a:	85 c0                	test   eax,eax
c000fb3c:	75 1a                	jne    c000fb58 <Semaphore::assertLocked(char const*)+0x70>
c000fb3e:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000fb43:	85 c0                	test   eax,eax
c000fb45:	74 11                	je     c000fb58 <Semaphore::assertLocked(char const*)+0x70>
c000fb47:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000fb51:	e8 a6 5c 00 00       	call   c00157fc <schedule()>
c000fb56:	66 90                	xchg   ax,ax
c000fb58:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000fb60:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fb65:	85 c0                	test   eax,eax
c000fb67:	75 03                	jne    c000fb6c <Semaphore::assertLocked(char const*)+0x84>
c000fb69:	fb                   	sti    
c000fb6a:	66 90                	xchg   ax,ax
c000fb6c:	90                   	nop
c000fb6d:	83 c4 0c             	add    esp,0xc
c000fb70:	c3                   	ret    
c000fb71:	90                   	nop
c000fb72:	66 90                	xchg   ax,ax

c000fb74 <Semaphore::acquire(int)>:
c000fb74:	83 ec 1c             	sub    esp,0x1c
c000fb77:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000fb7c:	0f 84 9a 00 00 00    	je     c000fc1c <Semaphore::acquire(int)+0xa8>
c000fb82:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fb8a:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000fb8f:	90                   	nop
c000fb90:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000fb95:	85 c0                	test   eax,eax
c000fb97:	74 77                	je     c000fc10 <Semaphore::acquire(int)+0x9c>
c000fb99:	83 ec 0c             	sub    esp,0xc
c000fb9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fba0:	e8 6f fe ff ff       	call   c000fa14 <Semaphore::tryAcquire()>
c000fba5:	83 c4 10             	add    esp,0x10
c000fba8:	83 f0 01             	xor    eax,0x1
c000fbab:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000fbaf:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000fbb3:	83 f0 01             	xor    eax,0x1
c000fbb6:	0f b6 c0             	movzx  eax,al
c000fbb9:	85 c0                	test   eax,eax
c000fbbb:	75 4f                	jne    c000fc0c <Semaphore::acquire(int)+0x98>
c000fbbd:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c000fbc2:	7f 2c                	jg     c000fbf0 <Semaphore::acquire(int)+0x7c>
c000fbc4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fbc8:	89 d0                	mov    eax,edx
c000fbca:	c1 e0 02             	shl    eax,0x2
c000fbcd:	01 d0                	add    eax,edx
c000fbcf:	01 c0                	add    eax,eax
c000fbd1:	83 ec 0c             	sub    esp,0xc
c000fbd4:	50                   	push   eax
c000fbd5:	e8 1a 5e 00 00       	call   c00159f4 <milliTenthSleep(unsigned int)>
c000fbda:	83 c4 10             	add    esp,0x10
c000fbdd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fbe1:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000fbe5:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000fbed:	eb a1                	jmp    c000fb90 <Semaphore::acquire(int)+0x1c>
c000fbef:	90                   	nop
c000fbf0:	83 ec 0c             	sub    esp,0xc
c000fbf3:	68 90 01 00 00       	push   0x190
c000fbf8:	e8 f7 5d 00 00       	call   c00159f4 <milliTenthSleep(unsigned int)>
c000fbfd:	83 c4 10             	add    esp,0x10
c000fc00:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c000fc05:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c000fc0a:	eb 84                	jmp    c000fb90 <Semaphore::acquire(int)+0x1c>
c000fc0c:	90                   	nop
c000fc0d:	8d 76 00             	lea    esi,[esi+0x0]
c000fc10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc14:	e9 fb 00 00 00       	jmp    c000fd14 <Semaphore::acquire(int)+0x1a0>
c000fc19:	8d 76 00             	lea    esi,[esi+0x0]
c000fc1c:	fa                   	cli    
c000fc1d:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fc22:	83 c0 01             	add    eax,0x1
c000fc25:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000fc2a:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fc2f:	83 c0 01             	add    eax,0x1
c000fc32:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fc37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc3b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fc3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc42:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc44:	39 c2                	cmp    edx,eax
c000fc46:	7d 14                	jge    c000fc5c <Semaphore::acquire(int)+0xe8>
c000fc48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc4c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fc4f:	8d 50 01             	lea    edx,[eax+0x1]
c000fc52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc56:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fc59:	eb 6d                	jmp    c000fcc8 <Semaphore::acquire(int)+0x154>
c000fc5b:	90                   	nop
c000fc5c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fc61:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc63:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000fc6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc71:	85 c0                	test   eax,eax
c000fc73:	75 13                	jne    c000fc88 <Semaphore::acquire(int)+0x114>
c000fc75:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fc7a:	8b 10                	mov    edx,DWORD PTR [eax]
c000fc7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc80:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fc83:	eb 17                	jmp    c000fc9c <Semaphore::acquire(int)+0x128>
c000fc85:	8d 76 00             	lea    esi,[esi+0x0]
c000fc88:	ba 00 20 00 c2       	mov    edx,0xc2002000
c000fc8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc91:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fc94:	8b 12                	mov    edx,DWORD PTR [edx]
c000fc96:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000fc99:	8d 76 00             	lea    esi,[esi+0x0]
c000fc9c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fca1:	8b 10                	mov    edx,DWORD PTR [eax]
c000fca3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fca7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fcaa:	83 ec 0c             	sub    esp,0xc
c000fcad:	68 a0 2a 02 c0       	push   0xc0022aa0
c000fcb2:	e8 ad 72 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fcb7:	83 c4 10             	add    esp,0x10
c000fcba:	83 ec 0c             	sub    esp,0xc
c000fcbd:	6a 05                	push   0x5
c000fcbf:	e8 f8 5b 00 00       	call   c00158bc <blockTask(TaskState)>
c000fcc4:	83 c4 10             	add    esp,0x10
c000fcc7:	90                   	nop
c000fcc8:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fccd:	83 e8 01             	sub    eax,0x1
c000fcd0:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fcd5:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fcda:	85 c0                	test   eax,eax
c000fcdc:	75 1a                	jne    c000fcf8 <Semaphore::acquire(int)+0x184>
c000fcde:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000fce3:	85 c0                	test   eax,eax
c000fce5:	74 11                	je     c000fcf8 <Semaphore::acquire(int)+0x184>
c000fce7:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000fcf1:	e8 06 5b 00 00       	call   c00157fc <schedule()>
c000fcf6:	66 90                	xchg   ax,ax
c000fcf8:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000fd00:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fd05:	85 c0                	test   eax,eax
c000fd07:	75 03                	jne    c000fd0c <Semaphore::acquire(int)+0x198>
c000fd09:	fb                   	sti    
c000fd0a:	66 90                	xchg   ax,ax
c000fd0c:	b8 00 00 00 00       	mov    eax,0x0
c000fd11:	8d 76 00             	lea    esi,[esi+0x0]
c000fd14:	83 c4 1c             	add    esp,0x1c
c000fd17:	c3                   	ret    

c000fd18 <Semaphore::acquire()>:
c000fd18:	83 ec 0c             	sub    esp,0xc
c000fd1b:	83 ec 08             	sub    esp,0x8
c000fd1e:	6a 00                	push   0x0
c000fd20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd24:	e8 4b fe ff ff       	call   c000fb74 <Semaphore::acquire(int)>
c000fd29:	83 c4 10             	add    esp,0x10
c000fd2c:	90                   	nop
c000fd2d:	83 c4 0c             	add    esp,0xc
c000fd30:	c3                   	ret    
c000fd31:	90                   	nop
c000fd32:	66 90                	xchg   ax,ax

c000fd34 <Semaphore::release()>:
c000fd34:	83 ec 1c             	sub    esp,0x1c
c000fd37:	fa                   	cli    
c000fd38:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fd3d:	83 c0 01             	add    eax,0x1
c000fd40:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000fd45:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fd4a:	83 c0 01             	add    eax,0x1
c000fd4d:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fd52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd59:	85 c0                	test   eax,eax
c000fd5b:	74 2b                	je     c000fd88 <Semaphore::release()+0x54>
c000fd5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd61:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fd68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd6c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000fd6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd73:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fd76:	83 ec 0c             	sub    esp,0xc
c000fd79:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd7d:	e8 9a 5d 00 00       	call   c0015b1c <unblockTask(ThreadControlBlock*)>
c000fd82:	83 c4 10             	add    esp,0x10
c000fd85:	eb 15                	jmp    c000fd9c <Semaphore::release()+0x68>
c000fd87:	90                   	nop
c000fd88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd8c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fd8f:	8d 50 ff             	lea    edx,[eax-0x1]
c000fd92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd96:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fd99:	8d 76 00             	lea    esi,[esi+0x0]
c000fd9c:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fda1:	83 e8 01             	sub    eax,0x1
c000fda4:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fda9:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fdae:	85 c0                	test   eax,eax
c000fdb0:	75 1a                	jne    c000fdcc <Semaphore::release()+0x98>
c000fdb2:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000fdb7:	85 c0                	test   eax,eax
c000fdb9:	74 11                	je     c000fdcc <Semaphore::release()+0x98>
c000fdbb:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000fdc5:	e8 32 5a 00 00       	call   c00157fc <schedule()>
c000fdca:	66 90                	xchg   ax,ax
c000fdcc:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000fdd4:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fdd9:	85 c0                	test   eax,eax
c000fddb:	75 03                	jne    c000fde0 <Semaphore::release()+0xac>
c000fddd:	fb                   	sti    
c000fdde:	66 90                	xchg   ax,ax
c000fde0:	90                   	nop
c000fde1:	83 c4 1c             	add    esp,0x1c
c000fde4:	c3                   	ret    

c000fde5 <KiSigKill(int)>:
c000fde5:	83 ec 0c             	sub    esp,0xc
c000fde8:	6a 00                	push   0x0
c000fdea:	6a 00                	push   0x0
c000fdec:	6a ff                	push   0xffffffff
c000fdee:	6a 01                	push   0x1
c000fdf0:	e8 5d 62 01 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fdf5:	83 c4 1c             	add    esp,0x1c
c000fdf8:	c3                   	ret    

c000fdf9 <KiDefaultSignalHandlerIgnore(int)>:
c000fdf9:	c3                   	ret    

c000fdfa <KiDefaultSignalHandlerPause(int)>:
c000fdfa:	57                   	push   edi
c000fdfb:	b9 07 00 00 00       	mov    ecx,0x7
c000fe00:	56                   	push   esi
c000fe01:	be fb 2a 02 c0       	mov    esi,0xc0022afb
c000fe06:	83 ec 24             	sub    esp,0x24
c000fe09:	8d 7c 24 04          	lea    edi,[esp+0x4]
c000fe0d:	fc                   	cld    
c000fe0e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fe10:	8d 44 24 04          	lea    eax,[esp+0x4]
c000fe14:	50                   	push   eax
c000fe15:	6a 00                	push   0x0
c000fe17:	6a 00                	push   0x0
c000fe19:	6a 27                	push   0x27
c000fe1b:	e8 32 62 01 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fe20:	83 c4 34             	add    esp,0x34
c000fe23:	5e                   	pop    esi
c000fe24:	5f                   	pop    edi
c000fe25:	c3                   	ret    

c000fe26 <KiDefaultSignalHandlerResume(int)>:
c000fe26:	57                   	push   edi
c000fe27:	b9 1d 00 00 00       	mov    ecx,0x1d
c000fe2c:	56                   	push   esi
c000fe2d:	be 17 2b 02 c0       	mov    esi,0xc0022b17
c000fe32:	83 ec 24             	sub    esp,0x24
c000fe35:	8d 7c 24 03          	lea    edi,[esp+0x3]
c000fe39:	fc                   	cld    
c000fe3a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe3c:	8d 44 24 03          	lea    eax,[esp+0x3]
c000fe40:	50                   	push   eax
c000fe41:	6a 00                	push   0x0
c000fe43:	6a 00                	push   0x0
c000fe45:	6a 27                	push   0x27
c000fe47:	e8 06 62 01 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fe4c:	83 c4 34             	add    esp,0x34
c000fe4f:	5e                   	pop    esi
c000fe50:	5f                   	pop    edi
c000fe51:	c3                   	ret    

c000fe52 <KeDeinitSignals(SigHandlerBlock*)>:
c000fe52:	e9 08 ec ff ff       	jmp    c000ea5f <free>

c000fe57 <KeInitSignals()>:
c000fe57:	53                   	push   ebx
c000fe58:	83 ec 14             	sub    esp,0x14
c000fe5b:	68 c8 00 00 00       	push   0xc8
c000fe60:	e8 ea eb ff ff       	call   c000ea4f <malloc>
c000fe65:	83 c4 0c             	add    esp,0xc
c000fe68:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c000fe72:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c000fe7c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000fe83:	89 c3                	mov    ebx,eax
c000fe85:	6a 20                	push   0x20
c000fe87:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c000fe8d:	6a 00                	push   0x0
c000fe8f:	50                   	push   eax
c000fe90:	e8 5b 06 ff ff       	call   c00004f0 <memset>
c000fe95:	83 c4 0c             	add    esp,0xc
c000fe98:	6a 44                	push   0x44
c000fe9a:	6a 00                	push   0x0
c000fe9c:	53                   	push   ebx
c000fe9d:	e8 4e 06 ff ff       	call   c00004f0 <memset>
c000fea2:	89 d8                	mov    eax,ebx
c000fea4:	83 c4 18             	add    esp,0x18
c000fea7:	5b                   	pop    ebx
c000fea8:	c3                   	ret    

c000fea9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c000fea9:	53                   	push   ebx
c000feaa:	b8 01 00 00 00       	mov    eax,0x1
c000feaf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000feb3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000feb7:	83 f9 10             	cmp    ecx,0x10
c000feba:	7f 21                	jg     c000fedd <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c000febc:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c000febf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fec3:	89 03                	mov    DWORD PTR [ebx],eax
c000fec5:	b8 01 00 00 00       	mov    eax,0x1
c000feca:	d3 e0                	shl    eax,cl
c000fecc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000fed0:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c000fed3:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c000fedb:	31 c0                	xor    eax,eax
c000fedd:	5b                   	pop    ebx
c000fede:	c3                   	ret    

c000fedf <KeRaiseSignal(SigHandlerBlock*, int)>:
c000fedf:	55                   	push   ebp
c000fee0:	57                   	push   edi
c000fee1:	bf 08 00 00 00       	mov    edi,0x8
c000fee6:	56                   	push   esi
c000fee7:	53                   	push   ebx
c000fee8:	83 ec 18             	sub    esp,0x18
c000feeb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000feef:	68 34 2b 02 c0       	push   0xc0022b34
c000fef4:	e8 6b 70 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fef9:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c000ff00:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c000ff06:	83 c4 10             	add    esp,0x10
c000ff09:	31 c9                	xor    ecx,ecx
c000ff0b:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000ff0f:	99                   	cdq    
c000ff10:	f7 ff                	idiv   edi
c000ff12:	8d 42 24             	lea    eax,[edx+0x24]
c000ff15:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c000ff19:	85 f6                	test   esi,esi
c000ff1b:	75 1a                	jne    c000ff37 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c000ff1d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000ff21:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c000ff25:	50                   	push   eax
c000ff26:	50                   	push   eax
c000ff27:	52                   	push   edx
c000ff28:	68 45 2b 02 c0       	push   0xc0022b45
c000ff2d:	e8 32 70 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ff32:	83 c4 10             	add    esp,0x10
c000ff35:	eb 1b                	jmp    c000ff52 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c000ff37:	41                   	inc    ecx
c000ff38:	83 f9 08             	cmp    ecx,0x8
c000ff3b:	75 ce                	jne    c000ff0b <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c000ff3d:	83 ec 0c             	sub    esp,0xc
c000ff40:	be 01 00 00 00       	mov    esi,0x1
c000ff45:	68 66 2b 02 c0       	push   0xc0022b66
c000ff4a:	e8 15 70 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ff4f:	83 c4 10             	add    esp,0x10
c000ff52:	83 c4 0c             	add    esp,0xc
c000ff55:	89 f0                	mov    eax,esi
c000ff57:	5b                   	pop    ebx
c000ff58:	5e                   	pop    esi
c000ff59:	5f                   	pop    edi
c000ff5a:	5d                   	pop    ebp
c000ff5b:	c3                   	ret    

c000ff5c <KeCheckSignal(SigHandlerBlock*, int*)>:
c000ff5c:	55                   	push   ebp
c000ff5d:	57                   	push   edi
c000ff5e:	56                   	push   esi
c000ff5f:	53                   	push   ebx
c000ff60:	51                   	push   ecx
c000ff61:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ff65:	85 db                	test   ebx,ebx
c000ff67:	0f 84 bc 00 00 00    	je     c0010029 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000ff6d:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c000ff74:	0f 84 af 00 00 00    	je     c0010029 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000ff7a:	31 c9                	xor    ecx,ecx
c000ff7c:	bf 08 00 00 00       	mov    edi,0x8
c000ff81:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c000ff87:	8d 04 0e             	lea    eax,[esi+ecx*1]
c000ff8a:	99                   	cdq    
c000ff8b:	f7 ff                	idiv   edi
c000ff8d:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c000ff94:	85 ed                	test   ebp,ebp
c000ff96:	0f 84 9e 00 00 00    	je     c001003a <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c000ff9c:	89 e9                	mov    ecx,ebp
c000ff9e:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c000ffa4:	bf 01 00 00 00       	mov    edi,0x1
c000ffa9:	89 04 24             	mov    DWORD PTR [esp],eax
c000ffac:	d3 e7                	shl    edi,cl
c000ffae:	31 c9                	xor    ecx,ecx
c000ffb0:	b8 01 00 00 00       	mov    eax,0x1
c000ffb5:	d3 e0                	shl    eax,cl
c000ffb7:	85 04 24             	test   DWORD PTR [esp],eax
c000ffba:	74 06                	je     c000ffc2 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c000ffbc:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c000ffc0:	75 67                	jne    c0010029 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000ffc2:	41                   	inc    ecx
c000ffc3:	83 f9 11             	cmp    ecx,0x11
c000ffc6:	75 e8                	jne    c000ffb0 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c000ffc8:	46                   	inc    esi
c000ffc9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ffcc:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c000ffd2:	09 f8                	or     eax,edi
c000ffd4:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c000ffdf:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c000ffe5:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c000ffec:	31 c0                	xor    eax,eax
c000ffee:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c000fff6:	74 09                	je     c0010001 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c000fff8:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c000ffff:	eb 06                	jmp    c0010007 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0010001:	40                   	inc    eax
c0010002:	83 f8 08             	cmp    eax,0x8
c0010005:	75 e7                	jne    c000ffee <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0010007:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c001000a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001000e:	83 fd 09             	cmp    ebp,0x9
c0010011:	89 2a                	mov    DWORD PTR [edx],ebp
c0010013:	75 07                	jne    c001001c <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0010015:	b8 e5 fd 00 c0       	mov    eax,0xc000fde5
c001001a:	eb 31                	jmp    c001004d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001001c:	83 f8 01             	cmp    eax,0x1
c001001f:	75 0c                	jne    c001002d <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0010021:	f7 d7                	not    edi
c0010023:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0010029:	31 c0                	xor    eax,eax
c001002b:	eb 20                	jmp    c001004d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001002d:	85 c0                	test   eax,eax
c001002f:	75 1c                	jne    c001004d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0010031:	8b 04 ad e0 4d 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdb220]
c0010038:	eb 13                	jmp    c001004d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001003a:	46                   	inc    esi
c001003b:	41                   	inc    ecx
c001003c:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010042:	83 f9 08             	cmp    ecx,0x8
c0010045:	0f 85 36 ff ff ff    	jne    c000ff81 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c001004b:	eb dc                	jmp    c0010029 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001004d:	5a                   	pop    edx
c001004e:	5b                   	pop    ebx
c001004f:	5e                   	pop    esi
c0010050:	5f                   	pop    edi
c0010051:	5d                   	pop    ebp
c0010052:	c3                   	ret    

c0010053 <KiCheckSignalZ>:
c0010053:	83 ec 10             	sub    esp,0x10
c0010056:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001005a:	50                   	push   eax
c001005b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010060:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010063:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010069:	e8 ee fe ff ff       	call   c000ff5c <KeCheckSignal(SigHandlerBlock*, int*)>
c001006e:	5a                   	pop    edx
c001006f:	31 d2                	xor    edx,edx
c0010071:	59                   	pop    ecx
c0010072:	85 c0                	test   eax,eax
c0010074:	74 19                	je     c001008f <KiCheckSignalZ+0x3c>
c0010076:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001007c:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001007f:	89 02                	mov    DWORD PTR [edx],eax
c0010081:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0010088:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001008c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001008f:	89 d0                	mov    eax,edx
c0010091:	83 c4 10             	add    esp,0x10
c0010094:	c3                   	ret    

c0010095 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010095:	56                   	push   esi
c0010096:	53                   	push   ebx
c0010097:	bb 01 00 00 00       	mov    ebx,0x1
c001009c:	52                   	push   edx
c001009d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00100a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00100a5:	d3 e3                	shl    ebx,cl
c00100a7:	83 f9 10             	cmp    ecx,0x10
c00100aa:	7f 08                	jg     c00100b4 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00100ac:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00100b2:	75 10                	jne    c00100c4 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00100b4:	83 ec 0c             	sub    esp,0xc
c00100b7:	68 77 2b 02 c0       	push   0xc0022b77
c00100bc:	e8 d5 ec ff ff       	call   c000ed96 <KePanic(char const*)>
c00100c1:	83 c4 10             	add    esp,0x10
c00100c4:	f7 d3                	not    ebx
c00100c6:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00100cc:	58                   	pop    eax
c00100cd:	5b                   	pop    ebx
c00100ce:	5e                   	pop    esi
c00100cf:	c3                   	ret    

c00100d0 <KiFinishSignalZ>:
c00100d0:	53                   	push   ebx
c00100d1:	83 ec 10             	sub    esp,0x10
c00100d4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00100d8:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c00100db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00100e0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00100e3:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00100e9:	e8 a7 ff ff ff       	call   c0010095 <KeCompleteSignal(SigHandlerBlock*, int)>
c00100ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00100f4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00100fb:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010102:	83 c4 18             	add    esp,0x18
c0010105:	5b                   	pop    ebx
c0010106:	c3                   	ret    

c0010107 <SysSeekDir(regs*)>:
c0010107:	31 c0                	xor    eax,eax
c0010109:	31 d2                	xor    edx,edx
c001010b:	c3                   	ret    

c001010c <SysTellDir(regs*)>:
c001010c:	31 c0                	xor    eax,eax
c001010e:	31 d2                	xor    edx,edx
c0010110:	c3                   	ret    

c0010111 <SysVerify(regs*)>:
c0010111:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010115:	31 d2                	xor    edx,edx
c0010117:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001011a:	c3                   	ret    

c001011b <SysGetArgc(regs*)>:
c001011b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010120:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010123:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010129:	89 c2                	mov    edx,eax
c001012b:	c1 fa 1f             	sar    edx,0x1f
c001012e:	c3                   	ret    

c001012f <SysTTYName(regs*)>:
c001012f:	b8 01 00 00 00       	mov    eax,0x1
c0010134:	31 d2                	xor    edx,edx
c0010136:	c3                   	ret    

c0010137 <SysFormatDisk(regs*)>:
c0010137:	56                   	push   esi
c0010138:	53                   	push   ebx
c0010139:	83 ec 04             	sub    esp,0x4
c001013c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010140:	8b 1d 04 a3 02 c0    	mov    ebx,DWORD PTR ds:0xc002a304
c0010146:	eb 28                	jmp    c0010170 <SysFormatDisk(regs*)+0x39>
c0010148:	83 ec 0c             	sub    esp,0xc
c001014b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001014e:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010151:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010153:	51                   	push   ecx
c0010154:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010157:	51                   	push   ecx
c0010158:	50                   	push   eax
c0010159:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0010160:	50                   	push   eax
c0010161:	53                   	push   ebx
c0010162:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0010165:	83 c4 20             	add    esp,0x20
c0010168:	83 f8 08             	cmp    eax,0x8
c001016b:	75 14                	jne    c0010181 <SysFormatDisk(regs*)+0x4a>
c001016d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010170:	85 db                	test   ebx,ebx
c0010172:	75 d4                	jne    c0010148 <SysFormatDisk(regs*)+0x11>
c0010174:	83 c4 04             	add    esp,0x4
c0010177:	b8 03 00 00 00       	mov    eax,0x3
c001017c:	31 d2                	xor    edx,edx
c001017e:	5b                   	pop    ebx
c001017f:	5e                   	pop    esi
c0010180:	c3                   	ret    
c0010181:	85 c0                	test   eax,eax
c0010183:	74 1f                	je     c00101a4 <SysFormatDisk(regs*)+0x6d>
c0010185:	83 f8 09             	cmp    eax,0x9
c0010188:	74 0d                	je     c0010197 <SysFormatDisk(regs*)+0x60>
c001018a:	83 c4 04             	add    esp,0x4
c001018d:	b8 02 00 00 00       	mov    eax,0x2
c0010192:	31 d2                	xor    edx,edx
c0010194:	5b                   	pop    ebx
c0010195:	5e                   	pop    esi
c0010196:	c3                   	ret    
c0010197:	83 c4 04             	add    esp,0x4
c001019a:	b8 01 00 00 00       	mov    eax,0x1
c001019f:	31 d2                	xor    edx,edx
c00101a1:	5b                   	pop    ebx
c00101a2:	5e                   	pop    esi
c00101a3:	c3                   	ret    
c00101a4:	83 c4 04             	add    esp,0x4
c00101a7:	31 c0                	xor    eax,eax
c00101a9:	31 d2                	xor    edx,edx
c00101ab:	5b                   	pop    ebx
c00101ac:	5e                   	pop    esi
c00101ad:	c3                   	ret    

c00101ae <SysSetDiskVolumeLabel(regs*)>:
c00101ae:	56                   	push   esi
c00101af:	53                   	push   ebx
c00101b0:	83 ec 04             	sub    esp,0x4
c00101b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00101b7:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00101ba:	83 f8 19             	cmp    eax,0x19
c00101bd:	77 33                	ja     c00101f2 <SysSetDiskVolumeLabel(regs*)+0x44>
c00101bf:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c00101c6:	85 c9                	test   ecx,ecx
c00101c8:	74 28                	je     c00101f2 <SysSetDiskVolumeLabel(regs*)+0x44>
c00101ca:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00101cd:	85 db                	test   ebx,ebx
c00101cf:	74 21                	je     c00101f2 <SysSetDiskVolumeLabel(regs*)+0x44>
c00101d1:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c00101d7:	85 d2                	test   edx,edx
c00101d9:	74 17                	je     c00101f2 <SysSetDiskVolumeLabel(regs*)+0x44>
c00101db:	8b 32                	mov    esi,DWORD PTR [edx]
c00101dd:	53                   	push   ebx
c00101de:	50                   	push   eax
c00101df:	51                   	push   ecx
c00101e0:	52                   	push   edx
c00101e1:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c00101e4:	83 c4 10             	add    esp,0x10
c00101e7:	89 c2                	mov    edx,eax
c00101e9:	83 c4 04             	add    esp,0x4
c00101ec:	c1 fa 1f             	sar    edx,0x1f
c00101ef:	5b                   	pop    ebx
c00101f0:	5e                   	pop    esi
c00101f1:	c3                   	ret    
c00101f2:	83 c4 04             	add    esp,0x4
c00101f5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00101fa:	ba ff ff ff ff       	mov    edx,0xffffffff
c00101ff:	5b                   	pop    ebx
c0010200:	5e                   	pop    esi
c0010201:	c3                   	ret    

c0010202 <SysGetDiskVolumeLabel(regs*)>:
c0010202:	57                   	push   edi
c0010203:	56                   	push   esi
c0010204:	53                   	push   ebx
c0010205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010209:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001020c:	83 fa 19             	cmp    edx,0x19
c001020f:	77 3c                	ja     c001024d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010211:	8b 0c 95 80 a7 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd5880]
c0010218:	85 c9                	test   ecx,ecx
c001021a:	74 31                	je     c001024d <SysGetDiskVolumeLabel(regs*)+0x4b>
c001021c:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001021f:	85 db                	test   ebx,ebx
c0010221:	74 2a                	je     c001024d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010223:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010226:	85 f6                	test   esi,esi
c0010228:	74 23                	je     c001024d <SysGetDiskVolumeLabel(regs*)+0x4b>
c001022a:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0010230:	85 c0                	test   eax,eax
c0010232:	74 19                	je     c001024d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010234:	83 ec 0c             	sub    esp,0xc
c0010237:	8b 38                	mov    edi,DWORD PTR [eax]
c0010239:	56                   	push   esi
c001023a:	53                   	push   ebx
c001023b:	52                   	push   edx
c001023c:	51                   	push   ecx
c001023d:	50                   	push   eax
c001023e:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0010241:	83 c4 20             	add    esp,0x20
c0010244:	89 c2                	mov    edx,eax
c0010246:	5b                   	pop    ebx
c0010247:	c1 fa 1f             	sar    edx,0x1f
c001024a:	5e                   	pop    esi
c001024b:	5f                   	pop    edi
c001024c:	c3                   	ret    
c001024d:	5b                   	pop    ebx
c001024e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010253:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010258:	5e                   	pop    esi
c0010259:	5f                   	pop    edi
c001025a:	c3                   	ret    

c001025b <SysRealpath(regs*)>:
c001025b:	83 ec 0c             	sub    esp,0xc
c001025e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010262:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010265:	85 d2                	test   edx,edx
c0010267:	74 07                	je     c0010270 <SysRealpath(regs*)+0x15>
c0010269:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001026c:	85 c0                	test   eax,eax
c001026e:	75 0b                	jne    c001027b <SysRealpath(regs*)+0x20>
c0010270:	b8 01 00 00 00       	mov    eax,0x1
c0010275:	31 d2                	xor    edx,edx
c0010277:	83 c4 0c             	add    esp,0xc
c001027a:	c3                   	ret    
c001027b:	6a 00                	push   0x0
c001027d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010283:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010286:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001028c:	51                   	push   ecx
c001028d:	52                   	push   edx
c001028e:	50                   	push   eax
c001028f:	e8 86 7b ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010294:	83 c4 10             	add    esp,0x10
c0010297:	31 c0                	xor    eax,eax
c0010299:	31 d2                	xor    edx,edx
c001029b:	83 c4 0c             	add    esp,0xc
c001029e:	c3                   	ret    

c001029f <SysReadDir(regs*)>:
c001029f:	53                   	push   ebx
c00102a0:	83 ec 18             	sub    esp,0x18
c00102a3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00102a7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00102aa:	83 f8 02             	cmp    eax,0x2
c00102ad:	76 61                	jbe    c0010310 <SysReadDir(regs*)+0x71>
c00102af:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00102b6:	77 49                	ja     c0010301 <SysReadDir(regs*)+0x62>
c00102b8:	83 ec 0c             	sub    esp,0xc
c00102bb:	50                   	push   eax
c00102bc:	e8 5c 1d 00 00       	call   c001201d <KeGetFileFromDescriptor(int)>
c00102c1:	83 c4 10             	add    esp,0x10
c00102c4:	85 c0                	test   eax,eax
c00102c6:	74 39                	je     c0010301 <SysReadDir(regs*)+0x62>
c00102c8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102d0:	83 ec 0c             	sub    esp,0xc
c00102d3:	8b 10                	mov    edx,DWORD PTR [eax]
c00102d5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00102d9:	51                   	push   ecx
c00102da:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00102dd:	51                   	push   ecx
c00102de:	6a 00                	push   0x0
c00102e0:	68 10 01 00 00       	push   0x110
c00102e5:	50                   	push   eax
c00102e6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00102e9:	83 c4 20             	add    esp,0x20
c00102ec:	85 c0                	test   eax,eax
c00102ee:	74 29                	je     c0010319 <SysReadDir(regs*)+0x7a>
c00102f0:	83 f8 07             	cmp    eax,0x7
c00102f3:	74 1b                	je     c0010310 <SysReadDir(regs*)+0x71>
c00102f5:	b8 02 00 00 00       	mov    eax,0x2
c00102fa:	31 d2                	xor    edx,edx
c00102fc:	83 c4 18             	add    esp,0x18
c00102ff:	5b                   	pop    ebx
c0010300:	c3                   	ret    
c0010301:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010306:	ba ff ff ff ff       	mov    edx,0xffffffff
c001030b:	83 c4 18             	add    esp,0x18
c001030e:	5b                   	pop    ebx
c001030f:	c3                   	ret    
c0010310:	b8 01 00 00 00       	mov    eax,0x1
c0010315:	31 d2                	xor    edx,edx
c0010317:	eb e3                	jmp    c00102fc <SysReadDir(regs*)+0x5d>
c0010319:	31 c0                	xor    eax,eax
c001031b:	31 d2                	xor    edx,edx
c001031d:	eb dd                	jmp    c00102fc <SysReadDir(regs*)+0x5d>

c001031f <SysIsATTY(regs*)>:
c001031f:	83 ec 0c             	sub    esp,0xc
c0010322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010326:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010329:	83 f8 02             	cmp    eax,0x2
c001032c:	76 07                	jbe    c0010335 <SysIsATTY(regs*)+0x16>
c001032e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010333:	75 26                	jne    c001035b <SysIsATTY(regs*)+0x3c>
c0010335:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001033a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001033d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010343:	85 c0                	test   eax,eax
c0010345:	74 24                	je     c001036b <SysIsATTY(regs*)+0x4c>
c0010347:	83 ec 0c             	sub    esp,0xc
c001034a:	8b 10                	mov    edx,DWORD PTR [eax]
c001034c:	50                   	push   eax
c001034d:	ff 12                	call   DWORD PTR [edx]
c001034f:	31 d2                	xor    edx,edx
c0010351:	0f b6 c0             	movzx  eax,al
c0010354:	83 c4 10             	add    esp,0x10
c0010357:	83 c4 0c             	add    esp,0xc
c001035a:	c3                   	ret    
c001035b:	83 ec 0c             	sub    esp,0xc
c001035e:	50                   	push   eax
c001035f:	e8 b9 1c 00 00       	call   c001201d <KeGetFileFromDescriptor(int)>
c0010364:	83 c4 10             	add    esp,0x10
c0010367:	85 c0                	test   eax,eax
c0010369:	75 dc                	jne    c0010347 <SysIsATTY(regs*)+0x28>
c001036b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010370:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010375:	83 c4 0c             	add    esp,0xc
c0010378:	c3                   	ret    

c0010379 <SysSeek(regs*)>:
c0010379:	53                   	push   ebx
c001037a:	83 ec 08             	sub    esp,0x8
c001037d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010381:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010384:	8d 50 fd             	lea    edx,[eax-0x3]
c0010387:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001038d:	77 32                	ja     c00103c1 <SysSeek(regs*)+0x48>
c001038f:	83 ec 0c             	sub    esp,0xc
c0010392:	50                   	push   eax
c0010393:	e8 85 1c 00 00       	call   c001201d <KeGetFileFromDescriptor(int)>
c0010398:	83 c4 0c             	add    esp,0xc
c001039b:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001039e:	31 db                	xor    ebx,ebx
c00103a0:	53                   	push   ebx
c00103a1:	51                   	push   ecx
c00103a2:	50                   	push   eax
c00103a3:	e8 66 7e ff ff       	call   c000820e <File::seek(unsigned long long)>
c00103a8:	83 c4 10             	add    esp,0x10
c00103ab:	85 c0                	test   eax,eax
c00103ad:	0f 95 c0             	setne  al
c00103b0:	31 d2                	xor    edx,edx
c00103b2:	0f b6 c0             	movzx  eax,al
c00103b5:	f7 d8                	neg    eax
c00103b7:	83 d2 00             	adc    edx,0x0
c00103ba:	83 c4 08             	add    esp,0x8
c00103bd:	f7 da                	neg    edx
c00103bf:	5b                   	pop    ebx
c00103c0:	c3                   	ret    
c00103c1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00103c6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00103cb:	83 c4 08             	add    esp,0x8
c00103ce:	5b                   	pop    ebx
c00103cf:	c3                   	ret    

c00103d0 <SysTell(regs*)>:
c00103d0:	53                   	push   ebx
c00103d1:	83 ec 08             	sub    esp,0x8
c00103d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103d8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00103db:	83 f8 02             	cmp    eax,0x2
c00103de:	76 4e                	jbe    c001042e <SysTell(regs*)+0x5e>
c00103e0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00103e5:	76 19                	jbe    c0010400 <SysTell(regs*)+0x30>
c00103e7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00103ea:	31 d2                	xor    edx,edx
c00103ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00103f2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00103f9:	31 c0                	xor    eax,eax
c00103fb:	83 c4 08             	add    esp,0x8
c00103fe:	5b                   	pop    ebx
c00103ff:	c3                   	ret    
c0010400:	83 ec 0c             	sub    esp,0xc
c0010403:	50                   	push   eax
c0010404:	e8 14 1c 00 00       	call   c001201d <KeGetFileFromDescriptor(int)>
c0010409:	5a                   	pop    edx
c001040a:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001040d:	59                   	pop    ecx
c001040e:	53                   	push   ebx
c001040f:	50                   	push   eax
c0010410:	e8 a5 7e ff ff       	call   c00082ba <File::tell(unsigned long long*)>
c0010415:	83 c4 10             	add    esp,0x10
c0010418:	85 c0                	test   eax,eax
c001041a:	0f 95 c0             	setne  al
c001041d:	31 d2                	xor    edx,edx
c001041f:	0f b6 c0             	movzx  eax,al
c0010422:	f7 d8                	neg    eax
c0010424:	83 d2 00             	adc    edx,0x0
c0010427:	83 c4 08             	add    esp,0x8
c001042a:	f7 da                	neg    edx
c001042c:	5b                   	pop    ebx
c001042d:	c3                   	ret    
c001042e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010433:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010438:	83 c4 08             	add    esp,0x8
c001043b:	5b                   	pop    ebx
c001043c:	c3                   	ret    

c001043d <SysSize(regs*)>:
c001043d:	53                   	push   ebx
c001043e:	83 ec 18             	sub    esp,0x18
c0010441:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010445:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010448:	83 f8 02             	cmp    eax,0x2
c001044b:	76 54                	jbe    c00104a1 <SysSize(regs*)+0x64>
c001044d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010452:	76 19                	jbe    c001046d <SysSize(regs*)+0x30>
c0010454:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010457:	31 d2                	xor    edx,edx
c0010459:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001045f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010466:	31 c0                	xor    eax,eax
c0010468:	83 c4 18             	add    esp,0x18
c001046b:	5b                   	pop    ebx
c001046c:	c3                   	ret    
c001046d:	83 ec 0c             	sub    esp,0xc
c0010470:	50                   	push   eax
c0010471:	e8 a7 1b 00 00       	call   c001201d <KeGetFileFromDescriptor(int)>
c0010476:	83 c4 0c             	add    esp,0xc
c0010479:	8d 54 24 13          	lea    edx,[esp+0x13]
c001047d:	52                   	push   edx
c001047e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010481:	52                   	push   edx
c0010482:	50                   	push   eax
c0010483:	e8 ca 7f ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0010488:	83 c4 10             	add    esp,0x10
c001048b:	85 c0                	test   eax,eax
c001048d:	0f 95 c0             	setne  al
c0010490:	31 d2                	xor    edx,edx
c0010492:	0f b6 c0             	movzx  eax,al
c0010495:	f7 d8                	neg    eax
c0010497:	83 d2 00             	adc    edx,0x0
c001049a:	83 c4 18             	add    esp,0x18
c001049d:	f7 da                	neg    edx
c001049f:	5b                   	pop    ebx
c00104a0:	c3                   	ret    
c00104a1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00104a6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00104ab:	83 c4 18             	add    esp,0x18
c00104ae:	5b                   	pop    ebx
c00104af:	c3                   	ret    

c00104b0 <SysSizeFromFilename(regs*)>:
c00104b0:	55                   	push   ebp
c00104b1:	57                   	push   edi
c00104b2:	56                   	push   esi
c00104b3:	53                   	push   ebx
c00104b4:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00104ba:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00104c1:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00104c4:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00104c7:	85 f6                	test   esi,esi
c00104c9:	74 34                	je     c00104ff <SysSizeFromFilename(regs*)+0x4f>
c00104cb:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00104d1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00104d4:	83 f8 02             	cmp    eax,0x2
c00104d7:	76 2d                	jbe    c0010506 <SysSizeFromFilename(regs*)+0x56>
c00104d9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00104de:	76 3b                	jbe    c001051b <SysSizeFromFilename(regs*)+0x6b>
c00104e0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00104e3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00104e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00104f0:	81 c4 5c 02 00 00    	add    esp,0x25c
c00104f6:	31 c0                	xor    eax,eax
c00104f8:	5b                   	pop    ebx
c00104f9:	31 d2                	xor    edx,edx
c00104fb:	5e                   	pop    esi
c00104fc:	5f                   	pop    edi
c00104fd:	5d                   	pop    ebp
c00104fe:	c3                   	ret    
c00104ff:	89 f8                	mov    eax,edi
c0010501:	83 f8 02             	cmp    eax,0x2
c0010504:	77 d3                	ja     c00104d9 <SysSizeFromFilename(regs*)+0x29>
c0010506:	81 c4 5c 02 00 00    	add    esp,0x25c
c001050c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010511:	5b                   	pop    ebx
c0010512:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010517:	5e                   	pop    esi
c0010518:	5f                   	pop    edi
c0010519:	5d                   	pop    ebp
c001051a:	c3                   	ret    
c001051b:	83 ec 0c             	sub    esp,0xc
c001051e:	68 14 01 00 00       	push   0x114
c0010523:	e8 27 e5 ff ff       	call   c000ea4f <malloc>
c0010528:	6a 01                	push   0x1
c001052a:	89 c5                	mov    ebp,eax
c001052c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010531:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0010534:	51                   	push   ecx
c0010535:	57                   	push   edi
c0010536:	55                   	push   ebp
c0010537:	e8 f8 7a ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c001053c:	83 c4 1c             	add    esp,0x1c
c001053f:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010543:	50                   	push   eax
c0010544:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010547:	53                   	push   ebx
c0010548:	55                   	push   ebp
c0010549:	e8 04 7f ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c001054e:	83 c4 10             	add    esp,0x10
c0010551:	85 ed                	test   ebp,ebp
c0010553:	74 15                	je     c001056a <SysSizeFromFilename(regs*)+0xba>
c0010555:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010559:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001055c:	83 ec 0c             	sub    esp,0xc
c001055f:	55                   	push   ebp
c0010560:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010563:	83 c4 10             	add    esp,0x10
c0010566:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001056a:	85 c0                	test   eax,eax
c001056c:	75 98                	jne    c0010506 <SysSizeFromFilename(regs*)+0x56>
c001056e:	6a 00                	push   0x0
c0010570:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010575:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010578:	05 0c 01 00 00       	add    eax,0x10c
c001057d:	50                   	push   eax
c001057e:	57                   	push   edi
c001057f:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c0010586:	53                   	push   ebx
c0010587:	e8 8e 78 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001058c:	58                   	pop    eax
c001058d:	5a                   	pop    edx
c001058e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010592:	50                   	push   eax
c0010593:	53                   	push   ebx
c0010594:	e8 08 73 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c0010599:	83 c4 10             	add    esp,0x10
c001059c:	83 f8 01             	cmp    eax,0x1
c001059f:	74 1a                	je     c00105bb <SysSizeFromFilename(regs*)+0x10b>
c00105a1:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00105a6:	74 26                	je     c00105ce <SysSizeFromFilename(regs*)+0x11e>
c00105a8:	85 f6                	test   esi,esi
c00105aa:	0f 84 40 ff ff ff    	je     c00104f0 <SysSizeFromFilename(regs*)+0x40>
c00105b0:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00105b6:	e9 35 ff ff ff       	jmp    c00104f0 <SysSizeFromFilename(regs*)+0x40>
c00105bb:	85 f6                	test   esi,esi
c00105bd:	0f 84 2d ff ff ff    	je     c00104f0 <SysSizeFromFilename(regs*)+0x40>
c00105c3:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00105c9:	e9 22 ff ff ff       	jmp    c00104f0 <SysSizeFromFilename(regs*)+0x40>
c00105ce:	85 f6                	test   esi,esi
c00105d0:	0f 84 1a ff ff ff    	je     c00104f0 <SysSizeFromFilename(regs*)+0x40>
c00105d6:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00105dc:	e9 0f ff ff ff       	jmp    c00104f0 <SysSizeFromFilename(regs*)+0x40>

c00105e1 <SysSizeFromFilenameNoSymlink(regs*)>:
c00105e1:	55                   	push   ebp
c00105e2:	57                   	push   edi
c00105e3:	56                   	push   esi
c00105e4:	53                   	push   ebx
c00105e5:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00105eb:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00105f2:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00105f5:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00105f8:	85 f6                	test   esi,esi
c00105fa:	74 34                	je     c0010630 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c00105fc:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010602:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010605:	83 f8 02             	cmp    eax,0x2
c0010608:	76 2d                	jbe    c0010637 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c001060a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001060f:	76 3b                	jbe    c001064c <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c0010611:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010614:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001061a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010621:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010627:	31 c0                	xor    eax,eax
c0010629:	5b                   	pop    ebx
c001062a:	31 d2                	xor    edx,edx
c001062c:	5e                   	pop    esi
c001062d:	5f                   	pop    edi
c001062e:	5d                   	pop    ebp
c001062f:	c3                   	ret    
c0010630:	89 f8                	mov    eax,edi
c0010632:	83 f8 02             	cmp    eax,0x2
c0010635:	77 d3                	ja     c001060a <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c0010637:	81 c4 5c 02 00 00    	add    esp,0x25c
c001063d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010642:	5b                   	pop    ebx
c0010643:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010648:	5e                   	pop    esi
c0010649:	5f                   	pop    edi
c001064a:	5d                   	pop    ebp
c001064b:	c3                   	ret    
c001064c:	83 ec 0c             	sub    esp,0xc
c001064f:	68 14 01 00 00       	push   0x114
c0010654:	e8 f6 e3 ff ff       	call   c000ea4f <malloc>
c0010659:	6a 00                	push   0x0
c001065b:	89 c5                	mov    ebp,eax
c001065d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010662:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0010665:	51                   	push   ecx
c0010666:	57                   	push   edi
c0010667:	55                   	push   ebp
c0010668:	e8 c7 79 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c001066d:	83 c4 1c             	add    esp,0x1c
c0010670:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010674:	50                   	push   eax
c0010675:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010678:	53                   	push   ebx
c0010679:	55                   	push   ebp
c001067a:	e8 d3 7d ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c001067f:	83 c4 10             	add    esp,0x10
c0010682:	85 ed                	test   ebp,ebp
c0010684:	74 15                	je     c001069b <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c0010686:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001068a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001068d:	83 ec 0c             	sub    esp,0xc
c0010690:	55                   	push   ebp
c0010691:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010694:	83 c4 10             	add    esp,0x10
c0010697:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001069b:	85 c0                	test   eax,eax
c001069d:	75 98                	jne    c0010637 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c001069f:	6a 00                	push   0x0
c00106a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00106a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00106a9:	05 0c 01 00 00       	add    eax,0x10c
c00106ae:	50                   	push   eax
c00106af:	57                   	push   edi
c00106b0:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c00106b7:	53                   	push   ebx
c00106b8:	e8 5d 77 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00106bd:	58                   	pop    eax
c00106be:	5a                   	pop    edx
c00106bf:	8d 44 24 28          	lea    eax,[esp+0x28]
c00106c3:	50                   	push   eax
c00106c4:	53                   	push   ebx
c00106c5:	e8 d7 71 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c00106ca:	83 c4 10             	add    esp,0x10
c00106cd:	83 f8 01             	cmp    eax,0x1
c00106d0:	74 1a                	je     c00106ec <SysSizeFromFilenameNoSymlink(regs*)+0x10b>
c00106d2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00106d7:	74 26                	je     c00106ff <SysSizeFromFilenameNoSymlink(regs*)+0x11e>
c00106d9:	85 f6                	test   esi,esi
c00106db:	0f 84 40 ff ff ff    	je     c0010621 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00106e1:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00106e7:	e9 35 ff ff ff       	jmp    c0010621 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00106ec:	85 f6                	test   esi,esi
c00106ee:	0f 84 2d ff ff ff    	je     c0010621 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00106f4:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00106fa:	e9 22 ff ff ff       	jmp    c0010621 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00106ff:	85 f6                	test   esi,esi
c0010701:	0f 84 1a ff ff ff    	je     c0010621 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0010707:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001070d:	e9 0f ff ff ff       	jmp    c0010621 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c0010712 <SysClose(regs*)>:
c0010712:	56                   	push   esi
c0010713:	53                   	push   ebx
c0010714:	83 ec 04             	sub    esp,0x4
c0010717:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001071b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001071e:	83 f8 02             	cmp    eax,0x2
c0010721:	76 66                	jbe    c0010789 <SysClose(regs*)+0x77>
c0010723:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010729:	83 fa 01             	cmp    edx,0x1
c001072c:	76 3d                	jbe    c001076b <SysClose(regs*)+0x59>
c001072e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010733:	77 54                	ja     c0010789 <SysClose(regs*)+0x77>
c0010735:	83 ec 0c             	sub    esp,0xc
c0010738:	50                   	push   eax
c0010739:	e8 df 18 00 00       	call   c001201d <KeGetFileFromDescriptor(int)>
c001073e:	83 c4 10             	add    esp,0x10
c0010741:	89 c6                	mov    esi,eax
c0010743:	85 c0                	test   eax,eax
c0010745:	74 2e                	je     c0010775 <SysClose(regs*)+0x63>
c0010747:	83 ec 08             	sub    esp,0x8
c001074a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001074d:	50                   	push   eax
c001074e:	68 fa 2b 02 c0       	push   0xc0022bfa
c0010753:	e8 0c 68 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010758:	89 34 24             	mov    DWORD PTR [esp],esi
c001075b:	e8 4e 7a ff ff       	call   c00081ae <File::close()>
c0010760:	8b 06                	mov    eax,DWORD PTR [esi]
c0010762:	89 34 24             	mov    DWORD PTR [esp],esi
c0010765:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010768:	83 c4 10             	add    esp,0x10
c001076b:	83 c4 04             	add    esp,0x4
c001076e:	31 c0                	xor    eax,eax
c0010770:	31 d2                	xor    edx,edx
c0010772:	5b                   	pop    ebx
c0010773:	5e                   	pop    esi
c0010774:	c3                   	ret    
c0010775:	83 ec 08             	sub    esp,0x8
c0010778:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001077b:	52                   	push   edx
c001077c:	68 88 2b 02 c0       	push   0xc0022b88
c0010781:	e8 de 67 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010786:	83 c4 10             	add    esp,0x10
c0010789:	83 c4 04             	add    esp,0x4
c001078c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010791:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010796:	5b                   	pop    ebx
c0010797:	5e                   	pop    esi
c0010798:	c3                   	ret    

c0010799 <SysOpenDir(regs*)>:
c0010799:	56                   	push   esi
c001079a:	53                   	push   ebx
c001079b:	83 ec 04             	sub    esp,0x4
c001079e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107a2:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00107a5:	85 c9                	test   ecx,ecx
c00107a7:	74 5d                	je     c0010806 <SysOpenDir(regs*)+0x6d>
c00107a9:	83 ec 0c             	sub    esp,0xc
c00107ac:	68 14 01 00 00       	push   0x114
c00107b1:	e8 99 e2 ff ff       	call   c000ea4f <malloc>
c00107b6:	83 c4 0c             	add    esp,0xc
c00107b9:	89 c6                	mov    esi,eax
c00107bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00107c0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00107c3:	50                   	push   eax
c00107c4:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00107c7:	52                   	push   edx
c00107c8:	56                   	push   esi
c00107c9:	e8 44 7e ff ff       	call   c0008612 <Directory::Directory(char const*, Process*)>
c00107ce:	83 c4 10             	add    esp,0x10
c00107d1:	85 f6                	test   esi,esi
c00107d3:	74 31                	je     c0010806 <SysOpenDir(regs*)+0x6d>
c00107d5:	83 ec 0c             	sub    esp,0xc
c00107d8:	56                   	push   esi
c00107d9:	e8 fc 7e ff ff       	call   c00086da <Directory::open()>
c00107de:	83 c4 10             	add    esp,0x10
c00107e1:	85 c0                	test   eax,eax
c00107e3:	75 21                	jne    c0010806 <SysOpenDir(regs*)+0x6d>
c00107e5:	83 ec 0c             	sub    esp,0xc
c00107e8:	56                   	push   esi
c00107e9:	e8 32 15 00 00       	call   c0011d20 <UnixFile::getFileDescriptor()>
c00107ee:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00107f1:	83 c4 10             	add    esp,0x10
c00107f4:	89 02                	mov    DWORD PTR [edx],eax
c00107f6:	c1 f8 1f             	sar    eax,0x1f
c00107f9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00107fc:	83 c4 04             	add    esp,0x4
c00107ff:	31 c0                	xor    eax,eax
c0010801:	31 d2                	xor    edx,edx
c0010803:	5b                   	pop    ebx
c0010804:	5e                   	pop    esi
c0010805:	c3                   	ret    
c0010806:	83 c4 04             	add    esp,0x4
c0010809:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001080e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010813:	5b                   	pop    ebx
c0010814:	5e                   	pop    esi
c0010815:	c3                   	ret    

c0010816 <SysMakeDir(regs*)>:
c0010816:	56                   	push   esi
c0010817:	53                   	push   ebx
c0010818:	83 ec 10             	sub    esp,0x10
c001081b:	68 14 01 00 00       	push   0x114
c0010820:	e8 2a e2 ff ff       	call   c000ea4f <malloc>
c0010825:	83 c4 0c             	add    esp,0xc
c0010828:	89 c3                	mov    ebx,eax
c001082a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001082f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010832:	50                   	push   eax
c0010833:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010837:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001083a:	52                   	push   edx
c001083b:	53                   	push   ebx
c001083c:	e8 d1 7d ff ff       	call   c0008612 <Directory::Directory(char const*, Process*)>
c0010841:	83 c4 10             	add    esp,0x10
c0010844:	85 db                	test   ebx,ebx
c0010846:	74 2c                	je     c0010874 <SysMakeDir(regs*)+0x5e>
c0010848:	83 ec 0c             	sub    esp,0xc
c001084b:	53                   	push   ebx
c001084c:	e8 69 80 ff ff       	call   c00088ba <Directory::create()>
c0010851:	89 c6                	mov    esi,eax
c0010853:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010855:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010858:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001085b:	83 c4 10             	add    esp,0x10
c001085e:	31 c0                	xor    eax,eax
c0010860:	85 f6                	test   esi,esi
c0010862:	0f 95 c0             	setne  al
c0010865:	31 d2                	xor    edx,edx
c0010867:	f7 d8                	neg    eax
c0010869:	83 d2 00             	adc    edx,0x0
c001086c:	83 c4 04             	add    esp,0x4
c001086f:	f7 da                	neg    edx
c0010871:	5b                   	pop    ebx
c0010872:	5e                   	pop    esi
c0010873:	c3                   	ret    
c0010874:	83 c4 04             	add    esp,0x4
c0010877:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001087c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010881:	5b                   	pop    ebx
c0010882:	5e                   	pop    esi
c0010883:	c3                   	ret    

c0010884 <SysCloseDir(regs*)>:
c0010884:	56                   	push   esi
c0010885:	53                   	push   ebx
c0010886:	83 ec 04             	sub    esp,0x4
c0010889:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001088d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010890:	8d 50 fd             	lea    edx,[eax-0x3]
c0010893:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010899:	77 54                	ja     c00108ef <SysCloseDir(regs*)+0x6b>
c001089b:	83 ec 0c             	sub    esp,0xc
c001089e:	50                   	push   eax
c001089f:	e8 79 17 00 00       	call   c001201d <KeGetFileFromDescriptor(int)>
c00108a4:	83 c4 10             	add    esp,0x10
c00108a7:	89 c6                	mov    esi,eax
c00108a9:	85 c0                	test   eax,eax
c00108ab:	74 2e                	je     c00108db <SysCloseDir(regs*)+0x57>
c00108ad:	83 ec 08             	sub    esp,0x8
c00108b0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00108b3:	50                   	push   eax
c00108b4:	68 05 2c 02 c0       	push   0xc0022c05
c00108b9:	e8 a6 66 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00108be:	89 34 24             	mov    DWORD PTR [esp],esi
c00108c1:	e8 70 7e ff ff       	call   c0008736 <Directory::close()>
c00108c6:	8b 06                	mov    eax,DWORD PTR [esi]
c00108c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00108cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00108ce:	83 c4 10             	add    esp,0x10
c00108d1:	31 c0                	xor    eax,eax
c00108d3:	83 c4 04             	add    esp,0x4
c00108d6:	31 d2                	xor    edx,edx
c00108d8:	5b                   	pop    ebx
c00108d9:	5e                   	pop    esi
c00108da:	c3                   	ret    
c00108db:	83 ec 08             	sub    esp,0x8
c00108de:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00108e1:	52                   	push   edx
c00108e2:	68 c0 2b 02 c0       	push   0xc0022bc0
c00108e7:	e8 78 66 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00108ec:	83 c4 10             	add    esp,0x10
c00108ef:	83 c4 04             	add    esp,0x4
c00108f2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00108f7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108fc:	5b                   	pop    ebx
c00108fd:	5e                   	pop    esi
c00108fe:	c3                   	ret    

c00108ff <SysWait(regs*)>:
c00108ff:	83 ec 10             	sub    esp,0x10
c0010902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010906:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010909:	52                   	push   edx
c001090a:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c001090d:	51                   	push   ecx
c001090e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010911:	50                   	push   eax
c0010912:	e8 f1 4f 00 00       	call   c0015908 <waitTask(int, int*, int)>
c0010917:	83 c4 1c             	add    esp,0x1c
c001091a:	89 c2                	mov    edx,eax
c001091c:	c1 fa 1f             	sar    edx,0x1f
c001091f:	c3                   	ret    

c0010920 <SysNotImpl(regs*)>:
c0010920:	83 ec 18             	sub    esp,0x18
c0010923:	68 13 2c 02 c0       	push   0xc0022c13
c0010928:	e8 69 e4 ff ff       	call   c000ed96 <KePanic(char const*)>
c001092d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010932:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010937:	83 c4 1c             	add    esp,0x1c
c001093a:	c3                   	ret    

c001093b <SysPanic(regs*)>:
c001093b:	83 ec 18             	sub    esp,0x18
c001093e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010942:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010945:	50                   	push   eax
c0010946:	e8 4b e4 ff ff       	call   c000ed96 <KePanic(char const*)>
c001094b:	b8 01 00 00 00       	mov    eax,0x1
c0010950:	31 d2                	xor    edx,edx
c0010952:	83 c4 1c             	add    esp,0x1c
c0010955:	c3                   	ret    

c0010956 <SysRmdir(regs*)>:
c0010956:	56                   	push   esi
c0010957:	53                   	push   ebx
c0010958:	83 ec 20             	sub    esp,0x20
c001095b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001095f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010962:	68 14 01 00 00       	push   0x114
c0010967:	e8 e3 e0 ff ff       	call   c000ea4f <malloc>
c001096c:	6a 00                	push   0x0
c001096e:	89 c3                	mov    ebx,eax
c0010970:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010975:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010978:	50                   	push   eax
c0010979:	56                   	push   esi
c001097a:	53                   	push   ebx
c001097b:	e8 b4 76 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0010980:	83 c4 14             	add    esp,0x14
c0010983:	53                   	push   ebx
c0010984:	e8 95 79 ff ff       	call   c000831e <File::unlink()>
c0010989:	83 c4 10             	add    esp,0x10
c001098c:	85 db                	test   ebx,ebx
c001098e:	74 14                	je     c00109a4 <SysRmdir(regs*)+0x4e>
c0010990:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010994:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010996:	83 ec 0c             	sub    esp,0xc
c0010999:	53                   	push   ebx
c001099a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001099d:	83 c4 10             	add    esp,0x10
c00109a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00109a4:	85 c0                	test   eax,eax
c00109a6:	0f 95 c0             	setne  al
c00109a9:	31 d2                	xor    edx,edx
c00109ab:	0f b6 c0             	movzx  eax,al
c00109ae:	f7 d8                	neg    eax
c00109b0:	83 d2 00             	adc    edx,0x0
c00109b3:	83 c4 14             	add    esp,0x14
c00109b6:	f7 da                	neg    edx
c00109b8:	5b                   	pop    ebx
c00109b9:	5e                   	pop    esi
c00109ba:	c3                   	ret    

c00109bb <SysUnlink(regs*)>:
c00109bb:	56                   	push   esi
c00109bc:	53                   	push   ebx
c00109bd:	83 ec 20             	sub    esp,0x20
c00109c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00109c4:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00109c7:	68 14 01 00 00       	push   0x114
c00109cc:	e8 7e e0 ff ff       	call   c000ea4f <malloc>
c00109d1:	6a 00                	push   0x0
c00109d3:	89 c3                	mov    ebx,eax
c00109d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00109dd:	50                   	push   eax
c00109de:	56                   	push   esi
c00109df:	53                   	push   ebx
c00109e0:	e8 4f 76 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c00109e5:	83 c4 14             	add    esp,0x14
c00109e8:	53                   	push   ebx
c00109e9:	e8 30 79 ff ff       	call   c000831e <File::unlink()>
c00109ee:	83 c4 10             	add    esp,0x10
c00109f1:	85 db                	test   ebx,ebx
c00109f3:	74 14                	je     c0010a09 <SysUnlink(regs*)+0x4e>
c00109f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00109f9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00109fb:	83 ec 0c             	sub    esp,0xc
c00109fe:	53                   	push   ebx
c00109ff:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010a02:	83 c4 10             	add    esp,0x10
c0010a05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a09:	85 c0                	test   eax,eax
c0010a0b:	0f 95 c0             	setne  al
c0010a0e:	31 d2                	xor    edx,edx
c0010a10:	0f b6 c0             	movzx  eax,al
c0010a13:	f7 d8                	neg    eax
c0010a15:	83 d2 00             	adc    edx,0x0
c0010a18:	83 c4 14             	add    esp,0x14
c0010a1b:	f7 da                	neg    edx
c0010a1d:	5b                   	pop    ebx
c0010a1e:	5e                   	pop    esi
c0010a1f:	c3                   	ret    

c0010a20 <SysGetArgv(regs*)>:
c0010a20:	83 ec 0c             	sub    esp,0xc
c0010a23:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010a27:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010a2a:	85 c0                	test   eax,eax
c0010a2c:	78 2c                	js     c0010a5a <SysGetArgv(regs*)+0x3a>
c0010a2e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010a34:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010a37:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010a3d:	7d 1b                	jge    c0010a5a <SysGetArgv(regs*)+0x3a>
c0010a3f:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010a46:	85 c0                	test   eax,eax
c0010a48:	74 18                	je     c0010a62 <SysGetArgv(regs*)+0x42>
c0010a4a:	83 ec 08             	sub    esp,0x8
c0010a4d:	50                   	push   eax
c0010a4e:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010a51:	50                   	push   eax
c0010a52:	e8 e9 fb fe ff       	call   c0000640 <strcpy>
c0010a57:	83 c4 10             	add    esp,0x10
c0010a5a:	31 c0                	xor    eax,eax
c0010a5c:	31 d2                	xor    edx,edx
c0010a5e:	83 c4 0c             	add    esp,0xc
c0010a61:	c3                   	ret    
c0010a62:	b8 01 00 00 00       	mov    eax,0x1
c0010a67:	31 d2                	xor    edx,edx
c0010a69:	83 c4 0c             	add    esp,0xc
c0010a6c:	c3                   	ret    

c0010a6d <SysUSleep(regs*)>:
c0010a6d:	83 ec 1c             	sub    esp,0x1c
c0010a70:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010a74:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010a77:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010a7a:	6a 00                	push   0x0
c0010a7c:	6a 64                	push   0x64
c0010a7e:	52                   	push   edx
c0010a7f:	50                   	push   eax
c0010a80:	e8 bf f6 00 00       	call   c0020144 <__udivdi3>
c0010a85:	83 c4 14             	add    esp,0x14
c0010a88:	50                   	push   eax
c0010a89:	e8 66 4f 00 00       	call   c00159f4 <milliTenthSleep(unsigned int)>
c0010a8e:	31 c0                	xor    eax,eax
c0010a90:	31 d2                	xor    edx,edx
c0010a92:	83 c4 1c             	add    esp,0x1c
c0010a95:	c3                   	ret    

c0010a96 <SysSpawn(regs*)>:
c0010a96:	56                   	push   esi
c0010a97:	53                   	push   ebx
c0010a98:	83 ec 04             	sub    esp,0x4
c0010a9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a9f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010aa2:	85 f6                	test   esi,esi
c0010aa4:	75 0a                	jne    c0010ab0 <SysSpawn(regs*)+0x1a>
c0010aa6:	83 c4 04             	add    esp,0x4
c0010aa9:	31 c0                	xor    eax,eax
c0010aab:	31 d2                	xor    edx,edx
c0010aad:	5b                   	pop    ebx
c0010aae:	5e                   	pop    esi
c0010aaf:	c3                   	ret    
c0010ab0:	83 ec 0c             	sub    esp,0xc
c0010ab3:	68 24 07 00 00       	push   0x724
c0010ab8:	e8 92 df ff ff       	call   c000ea4f <malloc>
c0010abd:	83 c4 10             	add    esp,0x10
c0010ac0:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010ac3:	89 c6                	mov    esi,eax
c0010ac5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010ac8:	85 c9                	test   ecx,ecx
c0010aca:	75 39                	jne    c0010b05 <SysSpawn(regs*)+0x6f>
c0010acc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ad1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ad4:	52                   	push   edx
c0010ad5:	50                   	push   eax
c0010ad6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ad9:	50                   	push   eax
c0010ada:	56                   	push   esi
c0010adb:	e8 98 46 00 00       	call   c0015178 <Process::Process(char const*, Process*, char**)>
c0010ae0:	83 c4 10             	add    esp,0x10
c0010ae3:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0010aea:	75 ba                	jne    c0010aa6 <SysSpawn(regs*)+0x10>
c0010aec:	83 ec 0c             	sub    esp,0xc
c0010aef:	56                   	push   esi
c0010af0:	e8 c3 4b 00 00       	call   c00156b8 <Process::createUserThread()>
c0010af5:	8b 06                	mov    eax,DWORD PTR [esi]
c0010af7:	83 c4 10             	add    esp,0x10
c0010afa:	89 c2                	mov    edx,eax
c0010afc:	83 c4 04             	add    esp,0x4
c0010aff:	c1 fa 1f             	sar    edx,0x1f
c0010b02:	5b                   	pop    ebx
c0010b03:	5e                   	pop    esi
c0010b04:	c3                   	ret    
c0010b05:	31 c0                	xor    eax,eax
c0010b07:	eb cb                	jmp    c0010ad4 <SysSpawn(regs*)+0x3e>

c0010b09 <SysGetEnv(regs*)>:
c0010b09:	57                   	push   edi
c0010b0a:	56                   	push   esi
c0010b0b:	53                   	push   ebx
c0010b0c:	83 ec 1c             	sub    esp,0x1c
c0010b0f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010b13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b18:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010b1b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010b1e:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0010b21:	51                   	push   ecx
c0010b22:	e8 f0 d1 ff ff       	call   c000dd17 <KeGetProcessTotalEnvCount(Process*)>
c0010b27:	83 c4 10             	add    esp,0x10
c0010b2a:	39 c7                	cmp    edi,eax
c0010b2c:	7c 14                	jl     c0010b42 <SysGetEnv(regs*)+0x39>
c0010b2e:	85 f6                	test   esi,esi
c0010b30:	75 0b                	jne    c0010b3d <SysGetEnv(regs*)+0x34>
c0010b32:	83 c4 10             	add    esp,0x10
c0010b35:	31 c0                	xor    eax,eax
c0010b37:	5b                   	pop    ebx
c0010b38:	31 d2                	xor    edx,edx
c0010b3a:	5e                   	pop    esi
c0010b3b:	5f                   	pop    edi
c0010b3c:	c3                   	ret    
c0010b3d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010b40:	eb f0                	jmp    c0010b32 <SysGetEnv(regs*)+0x29>
c0010b42:	8d 44 24 08          	lea    eax,[esp+0x8]
c0010b46:	83 ec 04             	sub    esp,0x4
c0010b49:	57                   	push   edi
c0010b4a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010b50:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0010b53:	57                   	push   edi
c0010b54:	50                   	push   eax
c0010b55:	e8 dd d1 ff ff       	call   c000dd37 <KeGetProcessEnvPair(Process*, int)>
c0010b5a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010b5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b61:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010b65:	83 c4 0c             	add    esp,0xc
c0010b68:	85 d2                	test   edx,edx
c0010b6a:	75 23                	jne    c0010b8f <SysGetEnv(regs*)+0x86>
c0010b6c:	83 ec 0c             	sub    esp,0xc
c0010b6f:	50                   	push   eax
c0010b70:	e8 fb f9 fe ff       	call   c0000570 <strlen>
c0010b75:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010b78:	89 c3                	mov    ebx,eax
c0010b7a:	e8 f1 f9 fe ff       	call   c0000570 <strlen>
c0010b7f:	83 c4 10             	add    esp,0x10
c0010b82:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010b86:	83 c4 10             	add    esp,0x10
c0010b89:	31 d2                	xor    edx,edx
c0010b8b:	5b                   	pop    ebx
c0010b8c:	5e                   	pop    esi
c0010b8d:	5f                   	pop    edi
c0010b8e:	c3                   	ret    
c0010b8f:	83 ec 08             	sub    esp,0x8
c0010b92:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010b95:	50                   	push   eax
c0010b96:	56                   	push   esi
c0010b97:	e8 a4 fa fe ff       	call   c0000640 <strcpy>
c0010b9c:	58                   	pop    eax
c0010b9d:	5a                   	pop    edx
c0010b9e:	68 2d 2c 02 c0       	push   0xc0022c2d
c0010ba3:	56                   	push   esi
c0010ba4:	e8 97 fc fe ff       	call   c0000840 <strcat>
c0010ba9:	59                   	pop    ecx
c0010baa:	5b                   	pop    ebx
c0010bab:	57                   	push   edi
c0010bac:	56                   	push   esi
c0010bad:	e8 8e fc fe ff       	call   c0000840 <strcat>
c0010bb2:	83 c4 10             	add    esp,0x10
c0010bb5:	e9 78 ff ff ff       	jmp    c0010b32 <SysGetEnv(regs*)+0x29>

c0010bba <SysSetFatAttrib(regs*)>:
c0010bba:	57                   	push   edi
c0010bbb:	56                   	push   esi
c0010bbc:	53                   	push   ebx
c0010bbd:	83 ec 1c             	sub    esp,0x1c
c0010bc0:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0010bc4:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0010bc7:	68 14 01 00 00       	push   0x114
c0010bcc:	e8 7e de ff ff       	call   c000ea4f <malloc>
c0010bd1:	83 c4 0c             	add    esp,0xc
c0010bd4:	89 c3                	mov    ebx,eax
c0010bd6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010bdb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010bde:	50                   	push   eax
c0010bdf:	57                   	push   edi
c0010be0:	53                   	push   ebx
c0010be1:	e8 4c 75 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0010be6:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010be9:	83 c4 0c             	add    esp,0xc
c0010bec:	0f b6 d4             	movzx  edx,ah
c0010bef:	0f b6 c0             	movzx  eax,al
c0010bf2:	52                   	push   edx
c0010bf3:	50                   	push   eax
c0010bf4:	53                   	push   ebx
c0010bf5:	e8 be 77 ff ff       	call   c00083b8 <File::chfatattr(unsigned char, unsigned char)>
c0010bfa:	83 c4 10             	add    esp,0x10
c0010bfd:	85 db                	test   ebx,ebx
c0010bff:	74 14                	je     c0010c15 <SysSetFatAttrib(regs*)+0x5b>
c0010c01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c05:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010c07:	83 ec 0c             	sub    esp,0xc
c0010c0a:	53                   	push   ebx
c0010c0b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010c0e:	83 c4 10             	add    esp,0x10
c0010c11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c15:	85 c0                	test   eax,eax
c0010c17:	0f 95 c0             	setne  al
c0010c1a:	31 d2                	xor    edx,edx
c0010c1c:	0f b6 c0             	movzx  eax,al
c0010c1f:	f7 d8                	neg    eax
c0010c21:	83 d2 00             	adc    edx,0x0
c0010c24:	83 c4 10             	add    esp,0x10
c0010c27:	f7 da                	neg    edx
c0010c29:	5b                   	pop    ebx
c0010c2a:	5e                   	pop    esi
c0010c2b:	5f                   	pop    edi
c0010c2c:	c3                   	ret    

c0010c2d <SysShutdown(regs*)>:
c0010c2d:	83 ec 1c             	sub    esp,0x1c
c0010c30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c34:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0010c37:	85 c9                	test   ecx,ecx
c0010c39:	74 18                	je     c0010c53 <SysShutdown(regs*)+0x26>
c0010c3b:	83 f9 01             	cmp    ecx,0x1
c0010c3e:	74 26                	je     c0010c66 <SysShutdown(regs*)+0x39>
c0010c40:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c45:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c4a:	83 f9 02             	cmp    ecx,0x2
c0010c4d:	74 24                	je     c0010c73 <SysShutdown(regs*)+0x46>
c0010c4f:	83 c4 1c             	add    esp,0x1c
c0010c52:	c3                   	ret    
c0010c53:	e8 38 cb ff ff       	call   c000d790 <KeShutdown()>
c0010c58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c5d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c62:	83 c4 1c             	add    esp,0x1c
c0010c65:	c3                   	ret    
c0010c66:	e8 49 cb ff ff       	call   c000d7b4 <KeSleep()>
c0010c6b:	31 c0                	xor    eax,eax
c0010c6d:	31 d2                	xor    edx,edx
c0010c6f:	83 c4 1c             	add    esp,0x1c
c0010c72:	c3                   	ret    
c0010c73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c77:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010c7b:	e8 40 cb ff ff       	call   c000d7c0 <KeRestart()>
c0010c80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c84:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010c88:	eb c5                	jmp    c0010c4f <SysShutdown(regs*)+0x22>

c0010c8a <SysPipe(regs*)>:
c0010c8a:	57                   	push   edi
c0010c8b:	56                   	push   esi
c0010c8c:	53                   	push   ebx
c0010c8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c91:	83 ec 0c             	sub    esp,0xc
c0010c94:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010c97:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010c9a:	6a 20                	push   0x20
c0010c9c:	e8 ae dd ff ff       	call   c000ea4f <malloc>
c0010ca1:	89 c3                	mov    ebx,eax
c0010ca3:	58                   	pop    eax
c0010ca4:	5a                   	pop    edx
c0010ca5:	68 00 50 00 00       	push   0x5000
c0010caa:	53                   	push   ebx
c0010cab:	e8 68 e9 ff ff       	call   c000f618 <Pipe::Pipe(int)>
c0010cb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cb3:	e8 68 10 00 00       	call   c0011d20 <UnixFile::getFileDescriptor()>
c0010cb8:	89 07                	mov    DWORD PTR [edi],eax
c0010cba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cbd:	e8 5e 10 00 00       	call   c0011d20 <UnixFile::getFileDescriptor()>
c0010cc2:	83 c4 10             	add    esp,0x10
c0010cc5:	89 06                	mov    DWORD PTR [esi],eax
c0010cc7:	31 d2                	xor    edx,edx
c0010cc9:	5b                   	pop    ebx
c0010cca:	31 c0                	xor    eax,eax
c0010ccc:	5e                   	pop    esi
c0010ccd:	5f                   	pop    edi
c0010cce:	c3                   	ret    

c0010ccf <SysGetUnixTime(regs*)>:
c0010ccf:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0010cd4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010cda:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010cde:	e9 d3 7e ff ff       	jmp    c0008bb6 <Clock::timeInSecondsLocal()>

c0010ce3 <string_ends_with(char const*, char const*)>:
c0010ce3:	57                   	push   edi
c0010ce4:	56                   	push   esi
c0010ce5:	53                   	push   ebx
c0010ce6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cea:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0010cee:	83 ec 0c             	sub    esp,0xc
c0010cf1:	53                   	push   ebx
c0010cf2:	e8 79 f8 fe ff       	call   c0000570 <strlen>
c0010cf7:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010cfa:	89 c6                	mov    esi,eax
c0010cfc:	e8 6f f8 fe ff       	call   c0000570 <strlen>
c0010d01:	83 c4 10             	add    esp,0x10
c0010d04:	39 c6                	cmp    esi,eax
c0010d06:	7d 06                	jge    c0010d0e <string_ends_with(char const*, char const*)+0x2b>
c0010d08:	5b                   	pop    ebx
c0010d09:	31 c0                	xor    eax,eax
c0010d0b:	5e                   	pop    esi
c0010d0c:	5f                   	pop    edi
c0010d0d:	c3                   	ret    
c0010d0e:	83 ec 08             	sub    esp,0x8
c0010d11:	29 c6                	sub    esi,eax
c0010d13:	57                   	push   edi
c0010d14:	01 f3                	add    ebx,esi
c0010d16:	53                   	push   ebx
c0010d17:	e8 34 fa fe ff       	call   c0000750 <strcmp>
c0010d1c:	83 c4 10             	add    esp,0x10
c0010d1f:	85 c0                	test   eax,eax
c0010d21:	5b                   	pop    ebx
c0010d22:	0f 94 c0             	sete   al
c0010d25:	5e                   	pop    esi
c0010d26:	0f b6 c0             	movzx  eax,al
c0010d29:	5f                   	pop    edi
c0010d2a:	c3                   	ret    

c0010d2b <SysOpen(regs*)>:
c0010d2b:	56                   	push   esi
c0010d2c:	53                   	push   ebx
c0010d2d:	81 ec 04 01 00 00    	sub    esp,0x104
c0010d33:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010d3a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d3d:	85 c0                	test   eax,eax
c0010d3f:	0f 84 bc 01 00 00    	je     c0010f01 <SysOpen(regs*)+0x1d6>
c0010d45:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d48:	85 c0                	test   eax,eax
c0010d4a:	0f 84 b1 01 00 00    	je     c0010f01 <SysOpen(regs*)+0x1d6>
c0010d50:	6a 00                	push   0x0
c0010d52:	68 2f 2c 02 c0       	push   0xc0022c2f
c0010d57:	50                   	push   eax
c0010d58:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010d5c:	56                   	push   esi
c0010d5d:	e8 b8 70 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010d62:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d65:	e8 06 f8 fe ff       	call   c0000570 <strlen>
c0010d6a:	83 c4 10             	add    esp,0x10
c0010d6d:	83 e8 01             	sub    eax,0x1
c0010d70:	74 21                	je     c0010d93 <SysOpen(regs*)+0x68>
c0010d72:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0010d76:	eb 12                	jmp    c0010d8a <SysOpen(regs*)+0x5f>
c0010d78:	83 fa 3a             	cmp    edx,0x3a
c0010d7b:	74 12                	je     c0010d8f <SysOpen(regs*)+0x64>
c0010d7d:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010d81:	83 e8 01             	sub    eax,0x1
c0010d84:	74 0d                	je     c0010d93 <SysOpen(regs*)+0x68>
c0010d86:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0010d8a:	83 fa 2e             	cmp    edx,0x2e
c0010d8d:	75 e9                	jne    c0010d78 <SysOpen(regs*)+0x4d>
c0010d8f:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010d93:	83 ec 08             	sub    esp,0x8
c0010d96:	68 33 2c 02 c0       	push   0xc0022c33
c0010d9b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d9e:	50                   	push   eax
c0010d9f:	e8 3f ff ff ff       	call   c0010ce3 <string_ends_with(char const*, char const*)>
c0010da4:	83 c4 10             	add    esp,0x10
c0010da7:	85 c0                	test   eax,eax
c0010da9:	74 1d                	je     c0010dc8 <SysOpen(regs*)+0x9d>
c0010dab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010dae:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010db4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010dbb:	81 c4 04 01 00 00    	add    esp,0x104
c0010dc1:	31 c0                	xor    eax,eax
c0010dc3:	31 d2                	xor    edx,edx
c0010dc5:	5b                   	pop    ebx
c0010dc6:	5e                   	pop    esi
c0010dc7:	c3                   	ret    
c0010dc8:	83 ec 08             	sub    esp,0x8
c0010dcb:	68 38 2c 02 c0       	push   0xc0022c38
c0010dd0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010dd3:	50                   	push   eax
c0010dd4:	e8 0a ff ff ff       	call   c0010ce3 <string_ends_with(char const*, char const*)>
c0010dd9:	83 c4 10             	add    esp,0x10
c0010ddc:	85 c0                	test   eax,eax
c0010dde:	75 cb                	jne    c0010dab <SysOpen(regs*)+0x80>
c0010de0:	83 ec 08             	sub    esp,0x8
c0010de3:	68 34 2c 02 c0       	push   0xc0022c34
c0010de8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010deb:	50                   	push   eax
c0010dec:	e8 5f f9 fe ff       	call   c0000750 <strcmp>
c0010df1:	83 c4 10             	add    esp,0x10
c0010df4:	85 c0                	test   eax,eax
c0010df6:	74 b3                	je     c0010dab <SysOpen(regs*)+0x80>
c0010df8:	83 ec 08             	sub    esp,0x8
c0010dfb:	68 33 2c 02 c0       	push   0xc0022c33
c0010e00:	56                   	push   esi
c0010e01:	e8 dd fe ff ff       	call   c0010ce3 <string_ends_with(char const*, char const*)>
c0010e06:	83 c4 10             	add    esp,0x10
c0010e09:	85 c0                	test   eax,eax
c0010e0b:	75 9e                	jne    c0010dab <SysOpen(regs*)+0x80>
c0010e0d:	83 ec 08             	sub    esp,0x8
c0010e10:	68 3d 2c 02 c0       	push   0xc0022c3d
c0010e15:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e18:	50                   	push   eax
c0010e19:	e8 c5 fe ff ff       	call   c0010ce3 <string_ends_with(char const*, char const*)>
c0010e1e:	83 c4 10             	add    esp,0x10
c0010e21:	85 c0                	test   eax,eax
c0010e23:	0f 85 eb 00 00 00    	jne    c0010f14 <SysOpen(regs*)+0x1e9>
c0010e29:	83 ec 08             	sub    esp,0x8
c0010e2c:	68 42 2c 02 c0       	push   0xc0022c42
c0010e31:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e34:	50                   	push   eax
c0010e35:	e8 a9 fe ff ff       	call   c0010ce3 <string_ends_with(char const*, char const*)>
c0010e3a:	83 c4 10             	add    esp,0x10
c0010e3d:	85 c0                	test   eax,eax
c0010e3f:	0f 85 cf 00 00 00    	jne    c0010f14 <SysOpen(regs*)+0x1e9>
c0010e45:	83 ec 08             	sub    esp,0x8
c0010e48:	68 3e 2c 02 c0       	push   0xc0022c3e
c0010e4d:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010e50:	51                   	push   ecx
c0010e51:	e8 fa f8 fe ff       	call   c0000750 <strcmp>
c0010e56:	83 c4 10             	add    esp,0x10
c0010e59:	85 c0                	test   eax,eax
c0010e5b:	0f 84 b3 00 00 00    	je     c0010f14 <SysOpen(regs*)+0x1e9>
c0010e61:	83 ec 08             	sub    esp,0x8
c0010e64:	68 3d 2c 02 c0       	push   0xc0022c3d
c0010e69:	56                   	push   esi
c0010e6a:	e8 74 fe ff ff       	call   c0010ce3 <string_ends_with(char const*, char const*)>
c0010e6f:	83 c4 10             	add    esp,0x10
c0010e72:	85 c0                	test   eax,eax
c0010e74:	0f 85 9a 00 00 00    	jne    c0010f14 <SysOpen(regs*)+0x1e9>
c0010e7a:	83 ec 0c             	sub    esp,0xc
c0010e7d:	68 14 01 00 00       	push   0x114
c0010e82:	e8 c8 db ff ff       	call   c000ea4f <malloc>
c0010e87:	83 c4 0c             	add    esp,0xc
c0010e8a:	89 c6                	mov    esi,eax
c0010e8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e91:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e94:	50                   	push   eax
c0010e95:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010e98:	52                   	push   edx
c0010e99:	56                   	push   esi
c0010e9a:	e8 93 72 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0010e9f:	83 c4 10             	add    esp,0x10
c0010ea2:	85 f6                	test   esi,esi
c0010ea4:	74 5b                	je     c0010f01 <SysOpen(regs*)+0x1d6>
c0010ea6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010ea9:	0f b6 c2             	movzx  eax,dl
c0010eac:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010eaf:	89 d0                	mov    eax,edx
c0010eb1:	83 e0 01             	and    eax,0x1
c0010eb4:	f6 c2 02             	test   dl,0x2
c0010eb7:	74 03                	je     c0010ebc <SysOpen(regs*)+0x191>
c0010eb9:	83 c8 02             	or     eax,0x2
c0010ebc:	f6 c2 04             	test   dl,0x4
c0010ebf:	74 03                	je     c0010ec4 <SysOpen(regs*)+0x199>
c0010ec1:	83 c8 04             	or     eax,0x4
c0010ec4:	f6 c2 08             	test   dl,0x8
c0010ec7:	74 03                	je     c0010ecc <SysOpen(regs*)+0x1a1>
c0010ec9:	83 c8 0a             	or     eax,0xa
c0010ecc:	80 e2 10             	and    dl,0x10
c0010ecf:	74 03                	je     c0010ed4 <SysOpen(regs*)+0x1a9>
c0010ed1:	83 c8 12             	or     eax,0x12
c0010ed4:	83 ec 08             	sub    esp,0x8
c0010ed7:	50                   	push   eax
c0010ed8:	56                   	push   esi
c0010ed9:	e8 72 72 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0010ede:	83 c4 10             	add    esp,0x10
c0010ee1:	85 c0                	test   eax,eax
c0010ee3:	75 1c                	jne    c0010f01 <SysOpen(regs*)+0x1d6>
c0010ee5:	83 ec 0c             	sub    esp,0xc
c0010ee8:	56                   	push   esi
c0010ee9:	e8 32 0e 00 00       	call   c0011d20 <UnixFile::getFileDescriptor()>
c0010eee:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010ef1:	83 c4 10             	add    esp,0x10
c0010ef4:	89 02                	mov    DWORD PTR [edx],eax
c0010ef6:	c1 f8 1f             	sar    eax,0x1f
c0010ef9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010efc:	e9 ba fe ff ff       	jmp    c0010dbb <SysOpen(regs*)+0x90>
c0010f01:	81 c4 04 01 00 00    	add    esp,0x104
c0010f07:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010f0c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f11:	5b                   	pop    ebx
c0010f12:	5e                   	pop    esi
c0010f13:	c3                   	ret    
c0010f14:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010f17:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0010f1d:	e9 92 fe ff ff       	jmp    c0010db4 <SysOpen(regs*)+0x89>

c0010f22 <KeSystemCall(regs*, void*)>:
c0010f22:	53                   	push   ebx
c0010f23:	83 ec 08             	sub    esp,0x8
c0010f26:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f2a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010f2d:	83 f8 40             	cmp    eax,0x40
c0010f30:	77 29                	ja     c0010f5b <KeSystemCall(regs*, void*)+0x39>
c0010f32:	83 3c 85 40 4e 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdb1c0],0x0
c0010f3a:	74 1f                	je     c0010f5b <KeSystemCall(regs*, void*)+0x39>
c0010f3c:	51                   	push   ecx
c0010f3d:	51                   	push   ecx
c0010f3e:	50                   	push   eax
c0010f3f:	68 47 2c 02 c0       	push   0xc0022c47
c0010f44:	e8 1b 60 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010f49:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010f4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f4f:	ff 14 85 40 4e 02 c0 	call   DWORD PTR [eax*4-0x3ffdb1c0]
c0010f56:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0010f59:	eb 0d                	jmp    c0010f68 <KeSystemCall(regs*, void*)+0x46>
c0010f5b:	52                   	push   edx
c0010f5c:	52                   	push   edx
c0010f5d:	50                   	push   eax
c0010f5e:	68 64 2c 02 c0       	push   0xc0022c64
c0010f63:	e8 fc 5f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010f68:	83 c4 10             	add    esp,0x10
c0010f6b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0010f70:	31 d2                	xor    edx,edx
c0010f72:	83 c4 08             	add    esp,0x8
c0010f75:	5b                   	pop    ebx
c0010f76:	c3                   	ret    
c0010f77:	90                   	nop

c0010f78 <VgaText::isAtty()>:
c0010f78:	b0 01                	mov    al,0x1
c0010f7a:	c3                   	ret    
c0010f7b:	90                   	nop

c0010f7c <VgaText::~VgaText()>:
c0010f7c:	83 ec 0c             	sub    esp,0xc
c0010f7f:	ba 9c 2c 02 c0       	mov    edx,0xc0022c9c
c0010f84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f88:	89 10                	mov    DWORD PTR [eax],edx
c0010f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f8e:	83 ec 0c             	sub    esp,0xc
c0010f91:	50                   	push   eax
c0010f92:	e8 77 0f 00 00       	call   c0011f0e <UnixFile::~UnixFile()>
c0010f97:	83 c4 10             	add    esp,0x10
c0010f9a:	90                   	nop
c0010f9b:	83 c4 0c             	add    esp,0xc
c0010f9e:	c3                   	ret    
c0010f9f:	90                   	nop

c0010fa0 <VgaText::~VgaText()>:
c0010fa0:	83 ec 0c             	sub    esp,0xc
c0010fa3:	83 ec 0c             	sub    esp,0xc
c0010fa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010faa:	e8 cd ff ff ff       	call   c0010f7c <VgaText::~VgaText()>
c0010faf:	83 c4 10             	add    esp,0x10
c0010fb2:	83 ec 08             	sub    esp,0x8
c0010fb5:	68 84 01 00 00       	push   0x184
c0010fba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fbe:	e8 91 b7 ff ff       	call   c000c754 <operator delete(void*, unsigned long)>
c0010fc3:	83 c4 10             	add    esp,0x10
c0010fc6:	83 c4 0c             	add    esp,0xc
c0010fc9:	c3                   	ret    

c0010fca <VgaText::read(unsigned long long, void*, int*)>:
c0010fca:	83 ec 10             	sub    esp,0x10
c0010fcd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010fd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010fd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fd9:	e8 d7 8b ff ff       	call   c0009bb5 <readKeyboard(VgaText*, char*, unsigned long)>
c0010fde:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010fe2:	89 02                	mov    DWORD PTR [edx],eax
c0010fe4:	31 c0                	xor    eax,eax
c0010fe6:	83 c4 1c             	add    esp,0x1c
c0010fe9:	c3                   	ret    

c0010fea <setTerminalScrollLock(bool)>:
c0010fea:	c3                   	ret    

c0010feb <doTerminalCycle()>:
c0010feb:	c3                   	ret    

c0010fec <addToTerminalCycle(VgaText*)>:
c0010fec:	c3                   	ret    

c0010fed <scrollTerminalScrollLock(int)>:
c0010fed:	c3                   	ret    

c0010fee <VgaText::updateTitle()>:
c0010fee:	c3                   	ret    
c0010fef:	90                   	nop

c0010ff0 <VgaText::load()>:
c0010ff0:	c3                   	ret    
c0010ff1:	90                   	nop

c0010ff2 <VgaText::updateCursor()>:
c0010ff2:	83 ec 14             	sub    esp,0x14
c0010ff5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010ff9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0010ffc:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010fff:	e8 38 8a 00 00       	call   c0019a3c <HalConsoleCursorUpdate(int, int)>
c0011004:	83 c4 1c             	add    esp,0x1c
c0011007:	c3                   	ret    

c0011008 <VgaText::doANSI_SGR(int)>:
c0011008:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001100c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011010:	85 d2                	test   edx,edx
c0011012:	75 0b                	jne    c001101f <VgaText::doANSI_SGR(int)+0x17>
c0011014:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0011017:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001101a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001101d:	eb 59                	jmp    c0011078 <VgaText::doANSI_SGR(int)+0x70>
c001101f:	83 fa 07             	cmp    edx,0x7
c0011022:	75 0b                	jne    c001102f <VgaText::doANSI_SGR(int)+0x27>
c0011024:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0011027:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c001102a:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c001102d:	eb 49                	jmp    c0011078 <VgaText::doANSI_SGR(int)+0x70>
c001102f:	83 fa 1b             	cmp    edx,0x1b
c0011032:	74 e0                	je     c0011014 <VgaText::doANSI_SGR(int)+0xc>
c0011034:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0011037:	83 f9 07             	cmp    ecx,0x7
c001103a:	77 09                	ja     c0011045 <VgaText::doANSI_SGR(int)+0x3d>
c001103c:	8b 14 8d 80 4f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdb080]
c0011043:	eb 20                	jmp    c0011065 <VgaText::doANSI_SGR(int)+0x5d>
c0011045:	8d 4a d8             	lea    ecx,[edx-0x28]
c0011048:	83 f9 07             	cmp    ecx,0x7
c001104b:	77 09                	ja     c0011056 <VgaText::doANSI_SGR(int)+0x4e>
c001104d:	8b 14 8d 80 4f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdb080]
c0011054:	eb 22                	jmp    c0011078 <VgaText::doANSI_SGR(int)+0x70>
c0011056:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0011059:	83 f9 07             	cmp    ecx,0x7
c001105c:	77 0b                	ja     c0011069 <VgaText::doANSI_SGR(int)+0x61>
c001105e:	8b 14 95 38 4e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb1c8]
c0011065:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0011068:	c3                   	ret    
c0011069:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001106c:	83 f9 07             	cmp    ecx,0x7
c001106f:	77 0a                	ja     c001107b <VgaText::doANSI_SGR(int)+0x73>
c0011071:	8b 14 95 10 4e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb1f0]
c0011078:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001107b:	c3                   	ret    

c001107c <VgaText::setDefaultBgColour(VgaColour)>:
c001107c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011084:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0011087:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001108a:	c3                   	ret    
c001108b:	90                   	nop

c001108c <VgaText::setDefaultFgColour(VgaColour)>:
c001108c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011090:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011094:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011097:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001109a:	c3                   	ret    
c001109b:	90                   	nop

c001109c <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001109c:	53                   	push   ebx
c001109d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00110a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00110a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00110a9:	51                   	push   ecx
c00110aa:	e8 cd ff ff ff       	call   c001107c <VgaText::setDefaultBgColour(VgaColour)>
c00110af:	58                   	pop    eax
c00110b0:	5a                   	pop    edx
c00110b1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00110b5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00110b9:	5b                   	pop    ebx
c00110ba:	eb d0                	jmp    c001108c <VgaText::setDefaultFgColour(VgaColour)>

c00110bc <VgaText::setTitleTextColour(VgaColour)>:
c00110bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00110c4:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00110c7:	c3                   	ret    

c00110c8 <VgaText::setTitleColour(VgaColour)>:
c00110c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00110d0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00110d3:	c3                   	ret    

c00110d4 <VgaText::setTitle(char*)>:
c00110d4:	c3                   	ret    
c00110d5:	90                   	nop

c00110d6 <VgaText::combineColours(unsigned char, unsigned char)>:
c00110d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110da:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00110df:	83 e0 0f             	and    eax,0xf
c00110e2:	c1 e2 04             	shl    edx,0x4
c00110e5:	09 d0                	or     eax,edx
c00110e7:	c3                   	ret    

c00110e8 <VgaText::scrollScreen()>:
c00110e8:	55                   	push   ebp
c00110e9:	57                   	push   edi
c00110ea:	56                   	push   esi
c00110eb:	be 01 00 00 00       	mov    esi,0x1
c00110f0:	53                   	push   ebx
c00110f1:	83 ec 0c             	sub    esp,0xc
c00110f4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00110f8:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00110fb:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0011101:	31 ff                	xor    edi,edi
c0011103:	01 e9                	add    ecx,ebp
c0011105:	8a 01                	mov    al,BYTE PTR [ecx]
c0011107:	83 fe 18             	cmp    esi,0x18
c001110a:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0011110:	75 20                	jne    c0011132 <VgaText::scrollScreen()+0x4a>
c0011112:	f7 c7 01 00 00 00    	test   edi,0x1
c0011118:	74 15                	je     c001112f <VgaText::scrollScreen()+0x47>
c001111a:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c001111e:	50                   	push   eax
c001111f:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0011123:	50                   	push   eax
c0011124:	e8 ad ff ff ff       	call   c00110d6 <VgaText::combineColours(unsigned char, unsigned char)>
c0011129:	5a                   	pop    edx
c001112a:	5a                   	pop    edx
c001112b:	88 01                	mov    BYTE PTR [ecx],al
c001112d:	eb 03                	jmp    c0011132 <VgaText::scrollScreen()+0x4a>
c001112f:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0011132:	47                   	inc    edi
c0011133:	41                   	inc    ecx
c0011134:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001113a:	75 c9                	jne    c0011105 <VgaText::scrollScreen()+0x1d>
c001113c:	46                   	inc    esi
c001113d:	83 fe 19             	cmp    esi,0x19
c0011140:	75 b9                	jne    c00110fb <VgaText::scrollScreen()+0x13>
c0011142:	39 1d 34 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce34,ebx
c0011148:	75 1f                	jne    c0011169 <VgaText::scrollScreen()+0x81>
c001114a:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001114e:	74 05                	je     c0011155 <VgaText::scrollScreen()+0x6d>
c0011150:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0011153:	eb 14                	jmp    c0011169 <VgaText::scrollScreen()+0x81>
c0011155:	50                   	push   eax
c0011156:	50                   	push   eax
c0011157:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c001115b:	50                   	push   eax
c001115c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0011160:	50                   	push   eax
c0011161:	e8 6a 87 00 00       	call   c00198d0 <HalConsoleScroll(int, int)>
c0011166:	83 c4 10             	add    esp,0x10
c0011169:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001116d:	83 c4 0c             	add    esp,0xc
c0011170:	5b                   	pop    ebx
c0011171:	5e                   	pop    esi
c0011172:	5f                   	pop    edi
c0011173:	5d                   	pop    ebp
c0011174:	e9 79 fe ff ff       	jmp    c0010ff2 <VgaText::updateCursor()>
c0011179:	90                   	nop

c001117a <VgaText::combineCharAndColour(char, unsigned char)>:
c001117a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001117f:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0011184:	c1 e0 08             	shl    eax,0x8
c0011187:	09 d0                	or     eax,edx
c0011189:	c3                   	ret    

c001118a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001118a:	55                   	push   ebp
c001118b:	57                   	push   edi
c001118c:	56                   	push   esi
c001118d:	53                   	push   ebx
c001118e:	83 ec 1c             	sub    esp,0x1c
c0011191:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0011195:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011199:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001119d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00111a1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00111a5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00111a9:	0f b6 c3             	movzx  eax,bl
c00111ac:	50                   	push   eax
c00111ad:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00111b2:	50                   	push   eax
c00111b3:	e8 1e ff ff ff       	call   c00110d6 <VgaText::combineColours(unsigned char, unsigned char)>
c00111b8:	5a                   	pop    edx
c00111b9:	0f b6 c0             	movzx  eax,al
c00111bc:	59                   	pop    ecx
c00111bd:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00111c2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00111c6:	50                   	push   eax
c00111c7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00111cb:	e8 aa ff ff ff       	call   c001117a <VgaText::combineCharAndColour(char, unsigned char)>
c00111d0:	5a                   	pop    edx
c00111d1:	6b d7 50             	imul   edx,edi,0x50
c00111d4:	59                   	pop    ecx
c00111d5:	01 f2                	add    edx,esi
c00111d7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00111da:	0f b7 d2             	movzx  edx,dx
c00111dd:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00111e1:	39 2d 34 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce34,ebp
c00111e7:	75 28                	jne    c0011211 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c00111e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00111ed:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00111f1:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00111f5:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00111f9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00111fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011201:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011205:	83 c4 1c             	add    esp,0x1c
c0011208:	5b                   	pop    ebx
c0011209:	5e                   	pop    esi
c001120a:	5f                   	pop    edi
c001120b:	5d                   	pop    ebp
c001120c:	e9 c7 87 00 00       	jmp    c00199d8 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0011211:	83 c4 1c             	add    esp,0x1c
c0011214:	5b                   	pop    ebx
c0011215:	5e                   	pop    esi
c0011216:	5f                   	pop    edi
c0011217:	5d                   	pop    ebp
c0011218:	c3                   	ret    
c0011219:	90                   	nop

c001121a <VgaText::getCursorX()>:
c001121a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001121e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0011221:	c3                   	ret    

c0011222 <VgaText::getCursorY()>:
c0011222:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011226:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011229:	c3                   	ret    

c001122a <VgaText::setCursor(int, int)>:
c001122a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001122e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011232:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0011235:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011239:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001123c:	e9 b1 fd ff ff       	jmp    c0010ff2 <VgaText::updateCursor()>

c0011241 <setActiveTerminal(VgaText*)>:
c0011241:	53                   	push   ebx
c0011242:	83 ec 08             	sub    esp,0x8
c0011245:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011249:	85 db                	test   ebx,ebx
c001124b:	75 11                	jne    c001125e <setActiveTerminal(VgaText*)+0x1d>
c001124d:	c7 44 24 10 78 2c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022c78
c0011255:	83 c4 08             	add    esp,0x8
c0011258:	5b                   	pop    ebx
c0011259:	e9 38 db ff ff       	jmp    c000ed96 <KePanic(char const*)>
c001125e:	a1 34 ce 02 c0       	mov    eax,ds:0xc002ce34
c0011263:	85 c0                	test   eax,eax
c0011265:	74 0c                	je     c0011273 <setActiveTerminal(VgaText*)+0x32>
c0011267:	83 ec 0c             	sub    esp,0xc
c001126a:	50                   	push   eax
c001126b:	e8 82 fd ff ff       	call   c0010ff2 <VgaText::updateCursor()>
c0011270:	83 c4 10             	add    esp,0x10
c0011273:	89 1d 34 ce 02 c0    	mov    DWORD PTR ds:0xc002ce34,ebx
c0011279:	50                   	push   eax
c001127a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001127d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011280:	53                   	push   ebx
c0011281:	e8 a4 ff ff ff       	call   c001122a <VgaText::setCursor(int, int)>
c0011286:	83 c4 18             	add    esp,0x18
c0011289:	5b                   	pop    ebx
c001128a:	c3                   	ret    
c001128b:	90                   	nop

c001128c <VgaText::clearScreen()>:
c001128c:	57                   	push   edi
c001128d:	56                   	push   esi
c001128e:	31 f6                	xor    esi,esi
c0011290:	53                   	push   ebx
c0011291:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011295:	52                   	push   edx
c0011296:	6a 00                	push   0x0
c0011298:	6a 00                	push   0x0
c001129a:	53                   	push   ebx
c001129b:	e8 8a ff ff ff       	call   c001122a <VgaText::setCursor(int, int)>
c00112a0:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00112a7:	83 c4 10             	add    esp,0x10
c00112aa:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00112ad:	7e 20                	jle    c00112cf <VgaText::clearScreen()+0x43>
c00112af:	31 ff                	xor    edi,edi
c00112b1:	50                   	push   eax
c00112b2:	50                   	push   eax
c00112b3:	56                   	push   esi
c00112b4:	57                   	push   edi
c00112b5:	47                   	inc    edi
c00112b6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00112b9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00112bc:	6a 20                	push   0x20
c00112be:	53                   	push   ebx
c00112bf:	e8 c6 fe ff ff       	call   c001118a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00112c4:	83 c4 20             	add    esp,0x20
c00112c7:	83 ff 50             	cmp    edi,0x50
c00112ca:	75 e5                	jne    c00112b1 <VgaText::clearScreen()+0x25>
c00112cc:	46                   	inc    esi
c00112cd:	eb db                	jmp    c00112aa <VgaText::clearScreen()+0x1e>
c00112cf:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00112d6:	5b                   	pop    ebx
c00112d7:	5e                   	pop    esi
c00112d8:	5f                   	pop    edi
c00112d9:	c3                   	ret    

c00112da <VgaText::setCursorX(int)>:
c00112da:	83 ec 10             	sub    esp,0x10
c00112dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00112e1:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00112e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112e8:	50                   	push   eax
c00112e9:	e8 3c ff ff ff       	call   c001122a <VgaText::setCursor(int, int)>
c00112ee:	83 c4 1c             	add    esp,0x1c
c00112f1:	c3                   	ret    

c00112f2 <VgaText::setCursorY(int)>:
c00112f2:	83 ec 10             	sub    esp,0x10
c00112f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00112f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00112fd:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0011300:	50                   	push   eax
c0011301:	e8 24 ff ff ff       	call   c001122a <VgaText::setCursor(int, int)>
c0011306:	83 c4 1c             	add    esp,0x1c
c0011309:	c3                   	ret    

c001130a <VgaText::incrementCursor(bool)>:
c001130a:	56                   	push   esi
c001130b:	53                   	push   ebx
c001130c:	51                   	push   ecx
c001130d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011311:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011315:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0011318:	40                   	inc    eax
c0011319:	83 f8 50             	cmp    eax,0x50
c001131c:	74 05                	je     c0011323 <VgaText::incrementCursor(bool)+0x19>
c001131e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0011321:	eb 24                	jmp    c0011347 <VgaText::incrementCursor(bool)+0x3d>
c0011323:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011326:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001132d:	8d 50 01             	lea    edx,[eax+0x1]
c0011330:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0011333:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0011336:	75 0f                	jne    c0011347 <VgaText::incrementCursor(bool)+0x3d>
c0011338:	83 ec 0c             	sub    esp,0xc
c001133b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001133e:	53                   	push   ebx
c001133f:	e8 a4 fd ff ff       	call   c00110e8 <VgaText::scrollScreen()>
c0011344:	83 c4 10             	add    esp,0x10
c0011347:	89 f0                	mov    eax,esi
c0011349:	84 c0                	test   al,al
c001134b:	74 0c                	je     c0011359 <VgaText::incrementCursor(bool)+0x4f>
c001134d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0011351:	5a                   	pop    edx
c0011352:	5b                   	pop    ebx
c0011353:	5e                   	pop    esi
c0011354:	e9 99 fc ff ff       	jmp    c0010ff2 <VgaText::updateCursor()>
c0011359:	58                   	pop    eax
c001135a:	5b                   	pop    ebx
c001135b:	5e                   	pop    esi
c001135c:	c3                   	ret    
c001135d:	90                   	nop

c001135e <VgaText::decrementCursor(bool)>:
c001135e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011362:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011366:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0011369:	85 c0                	test   eax,eax
c001136b:	74 04                	je     c0011371 <VgaText::decrementCursor(bool)+0x13>
c001136d:	48                   	dec    eax
c001136e:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0011371:	84 c9                	test   cl,cl
c0011373:	74 09                	je     c001137e <VgaText::decrementCursor(bool)+0x20>
c0011375:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011379:	e9 74 fc ff ff       	jmp    c0010ff2 <VgaText::updateCursor()>
c001137e:	c3                   	ret    
c001137f:	90                   	nop

c0011380 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0011380:	53                   	push   ebx
c0011381:	83 ec 08             	sub    esp,0x8
c0011384:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0011389:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001138d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011391:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0011395:	83 f8 07             	cmp    eax,0x7
c0011398:	75 21                	jne    c00113bb <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c001139a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00113a2:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00113aa:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00113b2:	83 c4 08             	add    esp,0x8
c00113b5:	5b                   	pop    ebx
c00113b6:	e9 17 76 ff ff       	jmp    c00089d2 <KeBeep(int, int, bool)>
c00113bb:	83 f8 0d             	cmp    eax,0xd
c00113be:	75 09                	jne    c00113c9 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00113c0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00113c7:	eb 2d                	jmp    c00113f6 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00113c9:	83 f8 0a             	cmp    eax,0xa
c00113cc:	75 31                	jne    c00113ff <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00113ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00113d1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00113d8:	8d 50 01             	lea    edx,[eax+0x1]
c00113db:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00113de:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00113e1:	75 0f                	jne    c00113f2 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00113e3:	83 ec 0c             	sub    esp,0xc
c00113e6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00113e9:	53                   	push   ebx
c00113ea:	e8 f9 fc ff ff       	call   c00110e8 <VgaText::scrollScreen()>
c00113ef:	83 c4 10             	add    esp,0x10
c00113f2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00113f6:	83 c4 08             	add    esp,0x8
c00113f9:	5b                   	pop    ebx
c00113fa:	e9 f3 fb ff ff       	jmp    c0010ff2 <VgaText::updateCursor()>
c00113ff:	83 f8 08             	cmp    eax,0x8
c0011402:	75 25                	jne    c0011429 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0011404:	50                   	push   eax
c0011405:	50                   	push   eax
c0011406:	6a 01                	push   0x1
c0011408:	53                   	push   ebx
c0011409:	e8 50 ff ff ff       	call   c001135e <VgaText::decrementCursor(bool)>
c001140e:	5a                   	pop    edx
c001140f:	59                   	pop    ecx
c0011410:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011413:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011416:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011419:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001141c:	6a 20                	push   0x20
c001141e:	53                   	push   ebx
c001141f:	e8 66 fd ff ff       	call   c001118a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011424:	83 c4 28             	add    esp,0x28
c0011427:	5b                   	pop    ebx
c0011428:	c3                   	ret    
c0011429:	83 ec 08             	sub    esp,0x8
c001142c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001142f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011432:	51                   	push   ecx
c0011433:	52                   	push   edx
c0011434:	50                   	push   eax
c0011435:	53                   	push   ebx
c0011436:	e8 4f fd ff ff       	call   c001118a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001143b:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001143f:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0011447:	83 c4 28             	add    esp,0x28
c001144a:	5b                   	pop    ebx
c001144b:	e9 ba fe ff ff       	jmp    c001130a <VgaText::incrementCursor(bool)>

c0011450 <VgaText::putchar(char)>:
c0011450:	57                   	push   edi
c0011451:	56                   	push   esi
c0011452:	53                   	push   ebx
c0011453:	83 ec 10             	sub    esp,0x10
c0011456:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001145a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001145e:	89 f8                	mov    eax,edi
c0011460:	0f be c0             	movsx  eax,al
c0011463:	83 f8 5b             	cmp    eax,0x5b
c0011466:	75 18                	jne    c0011480 <VgaText::putchar(char)+0x30>
c0011468:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c001146c:	74 20                	je     c001148e <VgaText::putchar(char)+0x3e>
c001146e:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0011474:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c001147b:	e9 c1 00 00 00       	jmp    c0011541 <VgaText::putchar(char)+0xf1>
c0011480:	83 f8 1b             	cmp    eax,0x1b
c0011483:	75 09                	jne    c001148e <VgaText::putchar(char)+0x3e>
c0011485:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0011489:	e9 b3 00 00 00       	jmp    c0011541 <VgaText::putchar(char)+0xf1>
c001148e:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0011491:	84 c9                	test   cl,cl
c0011493:	0f 84 98 00 00 00    	je     c0011531 <VgaText::putchar(char)+0xe1>
c0011499:	8d 77 c0             	lea    esi,[edi-0x40]
c001149c:	89 f2                	mov    edx,esi
c001149e:	80 fa 3e             	cmp    dl,0x3e
c00114a1:	77 78                	ja     c001151b <VgaText::putchar(char)+0xcb>
c00114a3:	83 f8 6d             	cmp    eax,0x6d
c00114a6:	75 47                	jne    c00114ef <VgaText::putchar(char)+0x9f>
c00114a8:	31 f6                	xor    esi,esi
c00114aa:	31 d2                	xor    edx,edx
c00114ac:	31 c0                	xor    eax,eax
c00114ae:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00114b1:	7e 2d                	jle    c00114e0 <VgaText::putchar(char)+0x90>
c00114b3:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00114b8:	83 fa 3b             	cmp    edx,0x3b
c00114bb:	75 17                	jne    c00114d4 <VgaText::putchar(char)+0x84>
c00114bd:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00114c1:	50                   	push   eax
c00114c2:	53                   	push   ebx
c00114c3:	e8 40 fb ff ff       	call   c0011008 <VgaText::doANSI_SGR(int)>
c00114c8:	59                   	pop    ecx
c00114c9:	31 d2                	xor    edx,edx
c00114cb:	5f                   	pop    edi
c00114cc:	31 c0                	xor    eax,eax
c00114ce:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00114d2:	eb 09                	jmp    c00114dd <VgaText::putchar(char)+0x8d>
c00114d4:	6b c0 0a             	imul   eax,eax,0xa
c00114d7:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00114db:	88 ca                	mov    dl,cl
c00114dd:	46                   	inc    esi
c00114de:	eb ce                	jmp    c00114ae <VgaText::putchar(char)+0x5e>
c00114e0:	84 d2                	test   dl,dl
c00114e2:	74 2f                	je     c0011513 <VgaText::putchar(char)+0xc3>
c00114e4:	50                   	push   eax
c00114e5:	53                   	push   ebx
c00114e6:	e8 1d fb ff ff       	call   c0011008 <VgaText::doANSI_SGR(int)>
c00114eb:	58                   	pop    eax
c00114ec:	5a                   	pop    edx
c00114ed:	eb 24                	jmp    c0011513 <VgaText::putchar(char)+0xc3>
c00114ef:	83 f8 4a             	cmp    eax,0x4a
c00114f2:	75 1f                	jne    c0011513 <VgaText::putchar(char)+0xc3>
c00114f4:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00114f8:	75 19                	jne    c0011513 <VgaText::putchar(char)+0xc3>
c00114fa:	83 ec 0c             	sub    esp,0xc
c00114fd:	53                   	push   ebx
c00114fe:	e8 89 fd ff ff       	call   c001128c <VgaText::clearScreen()>
c0011503:	83 c4 0c             	add    esp,0xc
c0011506:	6a 00                	push   0x0
c0011508:	6a 00                	push   0x0
c001150a:	53                   	push   ebx
c001150b:	e8 1a fd ff ff       	call   c001122a <VgaText::setCursor(int, int)>
c0011510:	83 c4 10             	add    esp,0x10
c0011513:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0011519:	eb 26                	jmp    c0011541 <VgaText::putchar(char)+0xf1>
c001151b:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c001151e:	83 f8 0e             	cmp    eax,0xe
c0011521:	7f 1e                	jg     c0011541 <VgaText::putchar(char)+0xf1>
c0011523:	8d 48 01             	lea    ecx,[eax+0x1]
c0011526:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0011529:	89 f9                	mov    ecx,edi
c001152b:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c001152f:	eb 10                	jmp    c0011541 <VgaText::putchar(char)+0xf1>
c0011531:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011534:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011537:	50                   	push   eax
c0011538:	53                   	push   ebx
c0011539:	e8 42 fe ff ff       	call   c0011380 <VgaText::putchar(char, VgaColour, VgaColour)>
c001153e:	83 c4 10             	add    esp,0x10
c0011541:	83 c4 10             	add    esp,0x10
c0011544:	5b                   	pop    ebx
c0011545:	5e                   	pop    esi
c0011546:	5f                   	pop    edi
c0011547:	c3                   	ret    

c0011548 <VgaText::putx(unsigned int)>:
c0011548:	57                   	push   edi
c0011549:	b9 11 00 00 00       	mov    ecx,0x11
c001154e:	56                   	push   esi
c001154f:	be 0f 15 02 c0       	mov    esi,0xc002150f
c0011554:	53                   	push   ebx
c0011555:	83 ec 20             	sub    esp,0x20
c0011558:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001155c:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011560:	fc                   	cld    
c0011561:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011563:	be 08 00 00 00       	mov    esi,0x8
c0011568:	50                   	push   eax
c0011569:	50                   	push   eax
c001156a:	89 d8                	mov    eax,ebx
c001156c:	c1 e3 04             	shl    ebx,0x4
c001156f:	c1 e8 1c             	shr    eax,0x1c
c0011572:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011577:	50                   	push   eax
c0011578:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001157c:	e8 cf fe ff ff       	call   c0011450 <VgaText::putchar(char)>
c0011581:	83 c4 10             	add    esp,0x10
c0011584:	4e                   	dec    esi
c0011585:	75 e1                	jne    c0011568 <VgaText::putx(unsigned int)+0x20>
c0011587:	83 c4 20             	add    esp,0x20
c001158a:	5b                   	pop    ebx
c001158b:	5e                   	pop    esi
c001158c:	5f                   	pop    edi
c001158d:	c3                   	ret    

c001158e <VgaText::puts(char const*)>:
c001158e:	53                   	push   ebx
c001158f:	83 ec 08             	sub    esp,0x8
c0011592:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011596:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011599:	85 c0                	test   eax,eax
c001159b:	74 12                	je     c00115af <VgaText::puts(char const*)+0x21>
c001159d:	43                   	inc    ebx
c001159e:	51                   	push   ecx
c001159f:	51                   	push   ecx
c00115a0:	50                   	push   eax
c00115a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115a5:	e8 a6 fe ff ff       	call   c0011450 <VgaText::putchar(char)>
c00115aa:	83 c4 10             	add    esp,0x10
c00115ad:	eb e7                	jmp    c0011596 <VgaText::puts(char const*)+0x8>
c00115af:	83 c4 08             	add    esp,0x8
c00115b2:	5b                   	pop    ebx
c00115b3:	c3                   	ret    

c00115b4 <VgaText::write(unsigned long long, void*, int*)>:
c00115b4:	55                   	push   ebp
c00115b5:	57                   	push   edi
c00115b6:	56                   	push   esi
c00115b7:	53                   	push   ebx
c00115b8:	83 ec 0c             	sub    esp,0xc
c00115bb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00115bf:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00115c3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00115c7:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00115ce:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00115d1:	39 eb                	cmp    ebx,ebp
c00115d3:	74 13                	je     c00115e8 <VgaText::write(unsigned long long, void*, int*)+0x34>
c00115d5:	43                   	inc    ebx
c00115d6:	50                   	push   eax
c00115d7:	50                   	push   eax
c00115d8:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00115dc:	50                   	push   eax
c00115dd:	56                   	push   esi
c00115de:	e8 6d fe ff ff       	call   c0011450 <VgaText::putchar(char)>
c00115e3:	83 c4 10             	add    esp,0x10
c00115e6:	eb e9                	jmp    c00115d1 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00115e8:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00115ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115f3:	89 38                	mov    DWORD PTR [eax],edi
c00115f5:	83 c4 0c             	add    esp,0xc
c00115f8:	31 c0                	xor    eax,eax
c00115fa:	5b                   	pop    ebx
c00115fb:	5e                   	pop    esi
c00115fc:	5f                   	pop    edi
c00115fd:	5d                   	pop    ebp
c00115fe:	c3                   	ret    
c00115ff:	90                   	nop

c0011600 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0011600:	55                   	push   ebp
c0011601:	57                   	push   edi
c0011602:	56                   	push   esi
c0011603:	53                   	push   ebx
c0011604:	83 ec 0c             	sub    esp,0xc
c0011607:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001160b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0011610:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0011617:	50                   	push   eax
c0011618:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001161d:	50                   	push   eax
c001161e:	e8 b3 fa ff ff       	call   c00110d6 <VgaText::combineColours(unsigned char, unsigned char)>
c0011623:	5a                   	pop    edx
c0011624:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0011628:	59                   	pop    ecx
c0011629:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c001162c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011630:	0f b7 f6             	movzx  esi,si
c0011633:	0f b6 e8             	movzx  ebp,al
c0011636:	01 f6                	add    esi,esi
c0011638:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001163b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001163e:	85 c0                	test   eax,eax
c0011640:	0f 84 ef 00 00 00    	je     c0011735 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0011646:	83 f8 0d             	cmp    eax,0xd
c0011649:	75 0c                	jne    c0011657 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c001164b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011652:	e9 d8 00 00 00       	jmp    c001172f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0011657:	83 f8 0a             	cmp    eax,0xa
c001165a:	75 44                	jne    c00116a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c001165c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001165f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011666:	8d 48 01             	lea    ecx,[eax+0x1]
c0011669:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c001166c:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c001166f:	75 0f                	jne    c0011680 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0011671:	83 ec 0c             	sub    esp,0xc
c0011674:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0011677:	53                   	push   ebx
c0011678:	e8 6b fa ff ff       	call   c00110e8 <VgaText::scrollScreen()>
c001167d:	83 c4 10             	add    esp,0x10
c0011680:	83 ec 0c             	sub    esp,0xc
c0011683:	53                   	push   ebx
c0011684:	e8 69 f9 ff ff       	call   c0010ff2 <VgaText::updateCursor()>
c0011689:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c001168d:	83 c4 10             	add    esp,0x10
c0011690:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0011693:	0f b7 f6             	movzx  esi,si
c0011696:	01 f6                	add    esi,esi
c0011698:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001169b:	e9 8f 00 00 00       	jmp    c001172f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00116a0:	83 f8 08             	cmp    eax,0x8
c00116a3:	75 34                	jne    c00116d9 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c00116a5:	51                   	push   ecx
c00116a6:	51                   	push   ecx
c00116a7:	6a 01                	push   0x1
c00116a9:	53                   	push   ebx
c00116aa:	e8 af fc ff ff       	call   c001135e <VgaText::decrementCursor(bool)>
c00116af:	5e                   	pop    esi
c00116b0:	58                   	pop    eax
c00116b1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00116b4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00116b7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00116ba:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00116bd:	6a 20                	push   0x20
c00116bf:	53                   	push   ebx
c00116c0:	e8 c5 fa ff ff       	call   c001118a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00116c5:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c00116c9:	83 c4 20             	add    esp,0x20
c00116cc:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00116cf:	0f b7 f6             	movzx  esi,si
c00116d2:	01 f6                	add    esi,esi
c00116d4:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00116d7:	eb 56                	jmp    c001172f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00116d9:	52                   	push   edx
c00116da:	52                   	push   edx
c00116db:	55                   	push   ebp
c00116dc:	50                   	push   eax
c00116dd:	e8 98 fa ff ff       	call   c001117a <VgaText::combineCharAndColour(char, unsigned char)>
c00116e2:	83 c4 10             	add    esp,0x10
c00116e5:	66 89 06             	mov    WORD PTR [esi],ax
c00116e8:	39 1d 34 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce34,ebx
c00116ee:	75 1d                	jne    c001170d <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c00116f0:	83 ec 0c             	sub    esp,0xc
c00116f3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00116f6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00116f9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00116fd:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011701:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0011704:	50                   	push   eax
c0011705:	e8 ce 82 00 00       	call   c00199d8 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001170a:	83 c4 20             	add    esp,0x20
c001170d:	83 c6 02             	add    esi,0x2
c0011710:	50                   	push   eax
c0011711:	50                   	push   eax
c0011712:	6a 00                	push   0x0
c0011714:	53                   	push   ebx
c0011715:	e8 f0 fb ff ff       	call   c001130a <VgaText::incrementCursor(bool)>
c001171a:	83 c4 10             	add    esp,0x10
c001171d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0011721:	75 0c                	jne    c001172f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0011723:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0011727:	0f b7 f6             	movzx  esi,si
c001172a:	01 f6                	add    esi,esi
c001172c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001172f:	47                   	inc    edi
c0011730:	e9 06 ff ff ff       	jmp    c001163b <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0011735:	83 ec 0c             	sub    esp,0xc
c0011738:	53                   	push   ebx
c0011739:	e8 b4 f8 ff ff       	call   c0010ff2 <VgaText::updateCursor()>
c001173e:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0011745:	83 c4 1c             	add    esp,0x1c
c0011748:	5b                   	pop    ebx
c0011749:	5e                   	pop    esi
c001174a:	5f                   	pop    edi
c001174b:	5d                   	pop    ebp
c001174c:	c3                   	ret    
c001174d:	90                   	nop

c001174e <VgaText::VgaText(char const*)>:
c001174e:	56                   	push   esi
c001174f:	53                   	push   ebx
c0011750:	83 ec 04             	sub    esp,0x4
c0011753:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011757:	83 ec 08             	sub    esp,0x8
c001175a:	6a 00                	push   0x0
c001175c:	50                   	push   eax
c001175d:	e8 c6 05 00 00       	call   c0011d28 <UnixFile::UnixFile(int)>
c0011762:	83 c4 10             	add    esp,0x10
c0011765:	ba 9c 2c 02 c0       	mov    edx,0xc0022c9c
c001176a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001176e:	89 10                	mov    DWORD PTR [eax],edx
c0011770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011774:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c001177b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001177f:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0011786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001178a:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c001178e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011792:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0011796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001179a:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00117a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117a5:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00117ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117b0:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00117b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117bb:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00117c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117c6:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00117cd:	83 ec 0c             	sub    esp,0xc
c00117d0:	6a 01                	push   0x1
c00117d2:	e8 ea 09 00 00       	call   c00121c1 <Virt::allocateKernelVirtualPages(int)>
c00117d7:	83 c4 10             	add    esp,0x10
c00117da:	89 c2                	mov    edx,eax
c00117dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117e0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00117e3:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c00117e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117ed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00117f0:	89 c6                	mov    esi,eax
c00117f2:	e8 93 d7 ff ff       	call   c000ef8a <Phys::allocatePage()>
c00117f7:	68 05 0c 00 00       	push   0xc05
c00117fc:	56                   	push   esi
c00117fd:	50                   	push   eax
c00117fe:	53                   	push   ebx
c00117ff:	e8 a0 10 00 00       	call   c00128a4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011804:	83 c4 10             	add    esp,0x10
c0011807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001180b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001180e:	83 ec 04             	sub    esp,0x4
c0011811:	68 a0 0f 00 00       	push   0xfa0
c0011816:	6a 00                	push   0x0
c0011818:	50                   	push   eax
c0011819:	e8 d2 ec fe ff       	call   c00004f0 <memset>
c001181e:	83 c4 10             	add    esp,0x10
c0011821:	83 ec 04             	sub    esp,0x4
c0011824:	6a 00                	push   0x0
c0011826:	6a 07                	push   0x7
c0011828:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001182c:	e8 6b f8 ff ff       	call   c001109c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011831:	83 c4 10             	add    esp,0x10
c0011834:	83 ec 04             	sub    esp,0x4
c0011837:	6a 00                	push   0x0
c0011839:	6a 00                	push   0x0
c001183b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001183f:	e8 e6 f9 ff ff       	call   c001122a <VgaText::setCursor(int, int)>
c0011844:	83 c4 10             	add    esp,0x10
c0011847:	83 ec 0c             	sub    esp,0xc
c001184a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001184e:	e8 39 fa ff ff       	call   c001128c <VgaText::clearScreen()>
c0011853:	83 c4 10             	add    esp,0x10
c0011856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001185a:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c001185e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011862:	05 82 00 00 00       	add    eax,0x82
c0011867:	83 ec 04             	sub    esp,0x4
c001186a:	68 80 00 00 00       	push   0x80
c001186f:	6a 00                	push   0x0
c0011871:	50                   	push   eax
c0011872:	e8 79 ec fe ff       	call   c00004f0 <memset>
c0011877:	83 c4 10             	add    esp,0x10
c001187a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001187e:	05 02 01 00 00       	add    eax,0x102
c0011883:	83 ec 04             	sub    esp,0x4
c0011886:	68 80 00 00 00       	push   0x80
c001188b:	6a 00                	push   0x0
c001188d:	50                   	push   eax
c001188e:	e8 5d ec fe ff       	call   c00004f0 <memset>
c0011893:	83 c4 10             	add    esp,0x10
c0011896:	90                   	nop
c0011897:	83 c4 04             	add    esp,0x4
c001189a:	5b                   	pop    ebx
c001189b:	5e                   	pop    esi
c001189c:	c3                   	ret    
c001189d:	90                   	nop

c001189e <VgaText::receiveKey(unsigned char)>:
c001189e:	55                   	push   ebp
c001189f:	57                   	push   edi
c00118a0:	56                   	push   esi
c00118a1:	53                   	push   ebx
c00118a2:	83 ec 2c             	sub    esp,0x2c
c00118a5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00118a9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00118ad:	89 ef                	mov    edi,ebp
c00118af:	81 e7 ff 00 00 00    	and    edi,0xff
c00118b5:	0f 84 66 01 00 00    	je     c0011a21 <VgaText::receiveKey(unsigned char)+0x183>
c00118bb:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c00118c1:	83 ff 08             	cmp    edi,0x8
c00118c4:	75 73                	jne    c0011939 <VgaText::receiveKey(unsigned char)+0x9b>
c00118c6:	83 ec 0c             	sub    esp,0xc
c00118c9:	56                   	push   esi
c00118ca:	e8 a1 ec fe ff       	call   c0000570 <strlen>
c00118cf:	83 c4 10             	add    esp,0x10
c00118d2:	85 c0                	test   eax,eax
c00118d4:	0f 84 02 01 00 00    	je     c00119dc <VgaText::receiveKey(unsigned char)+0x13e>
c00118da:	50                   	push   eax
c00118db:	50                   	push   eax
c00118dc:	6a 08                	push   0x8
c00118de:	53                   	push   ebx
c00118df:	e8 6c fb ff ff       	call   c0011450 <VgaText::putchar(char)>
c00118e4:	89 34 24             	mov    DWORD PTR [esp],esi
c00118e7:	e8 84 ec fe ff       	call   c0000570 <strlen>
c00118ec:	83 c4 10             	add    esp,0x10
c00118ef:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c00118f7:	83 fa 0d             	cmp    edx,0xd
c00118fa:	89 d0                	mov    eax,edx
c00118fc:	0f 95 c1             	setne  cl
c00118ff:	83 fa 1f             	cmp    edx,0x1f
c0011902:	0f 9e c2             	setle  dl
c0011905:	0f b6 d2             	movzx  edx,dl
c0011908:	85 ca                	test   edx,ecx
c001190a:	74 17                	je     c0011923 <VgaText::receiveKey(unsigned char)+0x85>
c001190c:	83 e8 08             	sub    eax,0x8
c001190f:	3c 02                	cmp    al,0x2
c0011911:	76 10                	jbe    c0011923 <VgaText::receiveKey(unsigned char)+0x85>
c0011913:	55                   	push   ebp
c0011914:	55                   	push   ebp
c0011915:	68 86 2c 02 c0       	push   0xc0022c86
c001191a:	53                   	push   ebx
c001191b:	e8 6e fc ff ff       	call   c001158e <VgaText::puts(char const*)>
c0011920:	83 c4 10             	add    esp,0x10
c0011923:	83 ec 0c             	sub    esp,0xc
c0011926:	56                   	push   esi
c0011927:	e8 44 ec fe ff       	call   c0000570 <strlen>
c001192c:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0011934:	e9 a0 00 00 00       	jmp    c00119d9 <VgaText::receiveKey(unsigned char)+0x13b>
c0011939:	83 ec 0c             	sub    esp,0xc
c001193c:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0011942:	50                   	push   eax
c0011943:	e8 28 ec fe ff       	call   c0000570 <strlen>
c0011948:	89 34 24             	mov    DWORD PTR [esp],esi
c001194b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001194f:	e8 1c ec fe ff       	call   c0000570 <strlen>
c0011954:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011958:	83 c4 10             	add    esp,0x10
c001195b:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c001195f:	3d 80 00 00 00       	cmp    eax,0x80
c0011964:	0f 87 b7 00 00 00    	ja     c0011a21 <VgaText::receiveKey(unsigned char)+0x183>
c001196a:	8d 45 ff             	lea    eax,[ebp-0x1]
c001196d:	8d 55 f7             	lea    edx,[ebp-0x9]
c0011970:	3c 1e                	cmp    al,0x1e
c0011972:	0f 96 c0             	setbe  al
c0011975:	80 fa 01             	cmp    dl,0x1
c0011978:	0f 97 c2             	seta   dl
c001197b:	0f b6 d2             	movzx  edx,dl
c001197e:	85 c2                	test   edx,eax
c0011980:	74 2e                	je     c00119b0 <VgaText::receiveKey(unsigned char)+0x112>
c0011982:	83 ff 0d             	cmp    edi,0xd
c0011985:	74 29                	je     c00119b0 <VgaText::receiveKey(unsigned char)+0x112>
c0011987:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001198a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001198d:	68 8c 2c 02 c0       	push   0xc0022c8c
c0011992:	53                   	push   ebx
c0011993:	e8 68 fc ff ff       	call   c0011600 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0011998:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001199b:	8d 45 40             	lea    eax,[ebp+0x40]
c001199e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00119a1:	0f b6 c0             	movzx  eax,al
c00119a4:	50                   	push   eax
c00119a5:	53                   	push   ebx
c00119a6:	e8 d5 f9 ff ff       	call   c0011380 <VgaText::putchar(char, VgaColour, VgaColour)>
c00119ab:	83 c4 20             	add    esp,0x20
c00119ae:	eb 11                	jmp    c00119c1 <VgaText::receiveKey(unsigned char)+0x123>
c00119b0:	89 e8                	mov    eax,ebp
c00119b2:	51                   	push   ecx
c00119b3:	0f be c0             	movsx  eax,al
c00119b6:	51                   	push   ecx
c00119b7:	50                   	push   eax
c00119b8:	53                   	push   ebx
c00119b9:	e8 92 fa ff ff       	call   c0011450 <VgaText::putchar(char)>
c00119be:	83 c4 10             	add    esp,0x10
c00119c1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00119c6:	89 e8                	mov    eax,ebp
c00119c8:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00119cc:	52                   	push   edx
c00119cd:	52                   	push   edx
c00119ce:	8d 44 24 26          	lea    eax,[esp+0x26]
c00119d2:	50                   	push   eax
c00119d3:	56                   	push   esi
c00119d4:	e8 67 ee fe ff       	call   c0000840 <strcat>
c00119d9:	83 c4 10             	add    esp,0x10
c00119dc:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c00119e2:	b0 01                	mov    al,0x1
c00119e4:	83 ff 1c             	cmp    edi,0x1c
c00119e7:	77 0e                	ja     c00119f7 <VgaText::receiveKey(unsigned char)+0x159>
c00119e9:	b8 08 04 00 10       	mov    eax,0x10000408
c00119ee:	89 f9                	mov    ecx,edi
c00119f0:	d3 e8                	shr    eax,cl
c00119f2:	f7 d0                	not    eax
c00119f4:	83 e0 01             	and    eax,0x1
c00119f7:	84 c0                	test   al,al
c00119f9:	74 04                	je     c00119ff <VgaText::receiveKey(unsigned char)+0x161>
c00119fb:	84 d2                	test   dl,dl
c00119fd:	74 22                	je     c0011a21 <VgaText::receiveKey(unsigned char)+0x183>
c00119ff:	81 c3 02 01 00 00    	add    ebx,0x102
c0011a05:	50                   	push   eax
c0011a06:	50                   	push   eax
c0011a07:	56                   	push   esi
c0011a08:	53                   	push   ebx
c0011a09:	e8 32 ee fe ff       	call   c0000840 <strcat>
c0011a0e:	83 c4 0c             	add    esp,0xc
c0011a11:	68 80 00 00 00       	push   0x80
c0011a16:	6a 00                	push   0x0
c0011a18:	56                   	push   esi
c0011a19:	e8 d2 ea fe ff       	call   c00004f0 <memset>
c0011a1e:	83 c4 10             	add    esp,0x10
c0011a21:	83 c4 2c             	add    esp,0x2c
c0011a24:	5b                   	pop    ebx
c0011a25:	5e                   	pop    esi
c0011a26:	5f                   	pop    edi
c0011a27:	5d                   	pop    ebp
c0011a28:	c3                   	ret    
c0011a29:	90                   	nop

c0011a2a <VgaText::doUpdate()>:
c0011a2a:	c3                   	ret    
c0011a2b:	90                   	nop

c0011a2c <TSS::TSS()>:
c0011a2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011a37:	90                   	nop
c0011a38:	c3                   	ret    
c0011a39:	90                   	nop
c0011a3a:	66 90                	xchg   ax,ax

c0011a3c <TSS::setESP(unsigned long)>:
c0011a3c:	55                   	push   ebp
c0011a3d:	89 e5                	mov    ebp,esp
c0011a3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a45:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011a48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011a4b:	90                   	nop
c0011a4c:	5d                   	pop    ebp
c0011a4d:	c3                   	ret    
c0011a4e:	66 90                	xchg   ax,ax

c0011a50 <TSS::flush()>:
c0011a50:	55                   	push   ebp
c0011a51:	89 e5                	mov    ebp,esp
c0011a53:	83 ec 10             	sub    esp,0x10
c0011a56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a59:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a5b:	83 c8 03             	or     eax,0x3
c0011a5e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011a62:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011a66:	66 89 d0             	mov    ax,dx
c0011a69:	0f 00 d8             	ltr    ax
c0011a6c:	90                   	nop
c0011a6d:	c9                   	leave  
c0011a6e:	c3                   	ret    
c0011a6f:	90                   	nop

c0011a70 <TSS::setup(unsigned long, unsigned long)>:
c0011a70:	55                   	push   ebp
c0011a71:	89 e5                	mov    ebp,esp
c0011a73:	83 ec 18             	sub    esp,0x18
c0011a76:	83 ec 0c             	sub    esp,0xc
c0011a79:	6a 68                	push   0x68
c0011a7b:	e8 cf cf ff ff       	call   c000ea4f <malloc>
c0011a80:	83 c4 10             	add    esp,0x10
c0011a83:	89 c2                	mov    edx,eax
c0011a85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011a8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a91:	83 ec 08             	sub    esp,0x8
c0011a94:	50                   	push   eax
c0011a95:	68 b0 2c 02 c0       	push   0xc0022cb0
c0011a9a:	e8 c5 54 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011a9f:	83 c4 10             	add    esp,0x10
c0011aa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aa5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011aa8:	83 ec 04             	sub    esp,0x4
c0011aab:	6a 68                	push   0x68
c0011aad:	6a 00                	push   0x0
c0011aaf:	50                   	push   eax
c0011ab0:	e8 3b ea fe ff       	call   c00004f0 <memset>
c0011ab5:	83 c4 10             	add    esp,0x10
c0011ab8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011abb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011abe:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011ac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ac7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011aca:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011ad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ad3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011ad6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011ad9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011adc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011adf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011ae2:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011ae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aeb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011aee:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011af4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011af7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011afa:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011b00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b06:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011b0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b0f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b12:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011b18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b1e:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011b24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b27:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b2a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011b2d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011b30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b33:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b36:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011b39:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011b3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b3f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b42:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011b49:	83 ec 0c             	sub    esp,0xc
c0011b4c:	68 c7 2c 02 c0       	push   0xc0022cc7
c0011b51:	e8 0e 54 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011b56:	83 c4 10             	add    esp,0x10
c0011b59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b5f:	0f 20 da             	mov    edx,cr3
c0011b62:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011b65:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011b68:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011b6b:	83 ec 0c             	sub    esp,0xc
c0011b6e:	68 ca 2c 02 c0       	push   0xc0022cca
c0011b73:	e8 ec 53 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011b78:	83 c4 10             	add    esp,0x10
c0011b7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b81:	83 ec 08             	sub    esp,0x8
c0011b84:	50                   	push   eax
c0011b85:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011b88:	50                   	push   eax
c0011b89:	e8 10 c6 ff ff       	call   c000e19e <GDTEntry::setBase(unsigned int)>
c0011b8e:	83 c4 10             	add    esp,0x10
c0011b91:	83 ec 08             	sub    esp,0x8
c0011b94:	6a 68                	push   0x68
c0011b96:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011b99:	50                   	push   eax
c0011b9a:	e8 1b c6 ff ff       	call   c000e1ba <GDTEntry::setLimit(unsigned int)>
c0011b9f:	83 c4 10             	add    esp,0x10
c0011ba2:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011ba6:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011ba9:	83 e0 0f             	and    eax,0xf
c0011bac:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011baf:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011bb2:	83 c8 40             	or     eax,0x40
c0011bb5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011bb8:	83 ec 0c             	sub    esp,0xc
c0011bbb:	68 cd 2c 02 c0       	push   0xc0022ccd
c0011bc0:	e8 9f 53 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011bc5:	83 c4 10             	add    esp,0x10
c0011bc8:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0011bcd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011bd3:	83 ec 08             	sub    esp,0x8
c0011bd6:	50                   	push   eax
c0011bd7:	68 d0 2c 02 c0       	push   0xc0022cd0
c0011bdc:	e8 83 53 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011be1:	83 c4 10             	add    esp,0x10
c0011be4:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0011be9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011bef:	05 64 01 00 00       	add    eax,0x164
c0011bf4:	83 ec 04             	sub    esp,0x4
c0011bf7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011bfa:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011bfd:	50                   	push   eax
c0011bfe:	e8 eb c5 ff ff       	call   c000e1ee <GDT::addEntry(GDTEntry)>
c0011c03:	83 c4 10             	add    esp,0x10
c0011c06:	89 c2                	mov    edx,eax
c0011c08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c0b:	89 10                	mov    DWORD PTR [eax],edx
c0011c0d:	83 ec 0c             	sub    esp,0xc
c0011c10:	68 e5 2c 02 c0       	push   0xc0022ce5
c0011c15:	e8 4a 53 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011c1a:	83 c4 10             	add    esp,0x10
c0011c1d:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0011c22:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c28:	05 64 01 00 00       	add    eax,0x164
c0011c2d:	83 ec 0c             	sub    esp,0xc
c0011c30:	50                   	push   eax
c0011c31:	e8 e2 c5 ff ff       	call   c000e218 <GDT::flush()>
c0011c36:	83 c4 10             	add    esp,0x10
c0011c39:	83 ec 0c             	sub    esp,0xc
c0011c3c:	68 e8 2c 02 c0       	push   0xc0022ce8
c0011c41:	e8 1e 53 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011c46:	83 c4 10             	add    esp,0x10
c0011c49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c4e:	c9                   	leave  
c0011c4f:	c3                   	ret    

c0011c50 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c54:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011c58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011c5b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011c60:	75 08                	jne    c0011c6a <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011c62:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011c68:	eb 38                	jmp    c0011ca2 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011c6a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011c6f:	75 17                	jne    c0011c88 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011c71:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c76:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c79:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011c7f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c81:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c85:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011c88:	89 c1                	mov    ecx,eax
c0011c8a:	83 e1 fd             	and    ecx,0xfffffffd
c0011c8d:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011c93:	74 cd                	je     c0011c62 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011c95:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011c9a:	83 e0 ef             	and    eax,0xffffffef
c0011c9d:	83 f8 08             	cmp    eax,0x8
c0011ca0:	76 c0                	jbe    c0011c62 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011ca2:	31 c0                	xor    eax,eax
c0011ca4:	c3                   	ret    
c0011ca5:	90                   	nop

c0011ca6 <ReservedFilename::isAtty()>:
c0011ca6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011caa:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011cad:	31 c0                	xor    eax,eax
c0011caf:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011cb5:	74 09                	je     c0011cc0 <ReservedFilename::isAtty()+0x1a>
c0011cb7:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011cbd:	0f 94 c0             	sete   al
c0011cc0:	c3                   	ret    
c0011cc1:	90                   	nop

c0011cc2 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011cc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011cca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011ccd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011cd1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011cd6:	75 08                	jne    c0011ce0 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011cd8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011cde:	eb 3d                	jmp    c0011d1d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011ce0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011ce5:	75 17                	jne    c0011cfe <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011ce7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cef:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011cf5:	8b 10                	mov    edx,DWORD PTR [eax]
c0011cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011cfb:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011cfe:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011d03:	75 04                	jne    c0011d09 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011d05:	89 0a                	mov    DWORD PTR [edx],ecx
c0011d07:	eb 14                	jmp    c0011d1d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011d09:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011d0e:	74 c8                	je     c0011cd8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011d10:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011d15:	83 e0 ef             	and    eax,0xffffffef
c0011d18:	83 f8 08             	cmp    eax,0x8
c0011d1b:	76 bb                	jbe    c0011cd8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011d1d:	31 c0                	xor    eax,eax
c0011d1f:	c3                   	ret    

c0011d20 <UnixFile::getFileDescriptor()>:
c0011d20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011d27:	c3                   	ret    

c0011d28 <UnixFile::UnixFile(int)>:
c0011d28:	53                   	push   ebx
c0011d29:	83 ec 28             	sub    esp,0x28
c0011d2c:	ba 5c 2d 02 c0       	mov    edx,0xc0022d5c
c0011d31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d35:	89 10                	mov    DWORD PTR [eax],edx
c0011d37:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011d3f:	0f 8f 90 01 00 00    	jg     c0011ed5 <UnixFile::UnixFile(int)+0x1ad>
c0011d45:	a1 c0 4f 02 c0       	mov    eax,ds:0xc0024fc0
c0011d4a:	8d 50 01             	lea    edx,[eax+0x1]
c0011d4d:	89 15 c0 4f 02 c0    	mov    DWORD PTR ds:0xc0024fc0,edx
c0011d53:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011d57:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011d5a:	83 ec 08             	sub    esp,0x8
c0011d5d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011d61:	68 b8 ce 02 c0       	push   0xc002ceb8
c0011d66:	e8 13 eb 00 00       	call   c002087e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011d6b:	83 c4 10             	add    esp,0x10
c0011d6e:	a0 b4 ce 02 c0       	mov    al,ds:0xc002ceb4
c0011d73:	83 f0 01             	xor    eax,0x1
c0011d76:	0f b6 c0             	movzx  eax,al
c0011d79:	85 c0                	test   eax,eax
c0011d7b:	0f 84 55 01 00 00    	je     c0011ed6 <UnixFile::UnixFile(int)+0x1ae>
c0011d81:	c6 05 b4 ce 02 c0 01 	mov    BYTE PTR ds:0xc002ceb4,0x1
c0011d88:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011d90:	83 ec 0c             	sub    esp,0xc
c0011d93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011d97:	e8 b3 cc ff ff       	call   c000ea4f <malloc>
c0011d9c:	83 c4 10             	add    esp,0x10
c0011d9f:	89 c3                	mov    ebx,eax
c0011da1:	83 ec 08             	sub    esp,0x8
c0011da4:	68 03 ff ff 0f       	push   0xfffff03
c0011da9:	53                   	push   ebx
c0011daa:	e8 2d 01 00 00       	call   c0011edc <ReservedFilename::ReservedFilename(int)>
c0011daf:	83 c4 10             	add    esp,0x10
c0011db2:	89 1d ac ce 02 c0    	mov    DWORD PTR ds:0xc002ceac,ebx
c0011db8:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011dc0:	83 ec 0c             	sub    esp,0xc
c0011dc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011dc7:	e8 83 cc ff ff       	call   c000ea4f <malloc>
c0011dcc:	83 c4 10             	add    esp,0x10
c0011dcf:	89 c3                	mov    ebx,eax
c0011dd1:	83 ec 08             	sub    esp,0x8
c0011dd4:	68 01 ff ff 0f       	push   0xfffff01
c0011dd9:	53                   	push   ebx
c0011dda:	e8 fd 00 00 00       	call   c0011edc <ReservedFilename::ReservedFilename(int)>
c0011ddf:	83 c4 10             	add    esp,0x10
c0011de2:	89 1d b0 ce 02 c0    	mov    DWORD PTR ds:0xc002ceb0,ebx
c0011de8:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011df0:	83 ec 0c             	sub    esp,0xc
c0011df3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011df7:	e8 53 cc ff ff       	call   c000ea4f <malloc>
c0011dfc:	83 c4 10             	add    esp,0x10
c0011dff:	89 c3                	mov    ebx,eax
c0011e01:	83 ec 08             	sub    esp,0x8
c0011e04:	68 00 ff ff 0f       	push   0xfffff00
c0011e09:	53                   	push   ebx
c0011e0a:	e8 cd 00 00 00       	call   c0011edc <ReservedFilename::ReservedFilename(int)>
c0011e0f:	83 c4 10             	add    esp,0x10
c0011e12:	89 1d a4 ce 02 c0    	mov    DWORD PTR ds:0xc002cea4,ebx
c0011e18:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011e20:	83 ec 0c             	sub    esp,0xc
c0011e23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011e27:	e8 23 cc ff ff       	call   c000ea4f <malloc>
c0011e2c:	83 c4 10             	add    esp,0x10
c0011e2f:	89 c3                	mov    ebx,eax
c0011e31:	83 ec 08             	sub    esp,0x8
c0011e34:	68 02 ff ff 0f       	push   0xfffff02
c0011e39:	53                   	push   ebx
c0011e3a:	e8 9d 00 00 00       	call   c0011edc <ReservedFilename::ReservedFilename(int)>
c0011e3f:	83 c4 10             	add    esp,0x10
c0011e42:	89 1d a8 ce 02 c0    	mov    DWORD PTR ds:0xc002cea8,ebx
c0011e48:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e50:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011e55:	7f 7f                	jg     c0011ed6 <UnixFile::UnixFile(int)+0x1ae>
c0011e57:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011e5f:	83 ec 0c             	sub    esp,0xc
c0011e62:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011e66:	e8 e4 cb ff ff       	call   c000ea4f <malloc>
c0011e6b:	83 c4 10             	add    esp,0x10
c0011e6e:	89 c3                	mov    ebx,eax
c0011e70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011e74:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011e79:	83 ec 08             	sub    esp,0x8
c0011e7c:	50                   	push   eax
c0011e7d:	53                   	push   ebx
c0011e7e:	e8 59 00 00 00       	call   c0011edc <ReservedFilename::ReservedFilename(int)>
c0011e83:	83 c4 10             	add    esp,0x10
c0011e86:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011e8a:	89 1c 85 80 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3180],ebx
c0011e91:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011e99:	83 ec 0c             	sub    esp,0xc
c0011e9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011ea0:	e8 aa cb ff ff       	call   c000ea4f <malloc>
c0011ea5:	83 c4 10             	add    esp,0x10
c0011ea8:	89 c3                	mov    ebx,eax
c0011eaa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011eae:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011eb3:	83 ec 08             	sub    esp,0x8
c0011eb6:	50                   	push   eax
c0011eb7:	53                   	push   ebx
c0011eb8:	e8 1f 00 00 00       	call   c0011edc <ReservedFilename::ReservedFilename(int)>
c0011ebd:	83 c4 10             	add    esp,0x10
c0011ec0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011ec4:	89 1c 85 40 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd31c0],ebx
c0011ecb:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0011ed0:	e9 7b ff ff ff       	jmp    c0011e50 <UnixFile::UnixFile(int)+0x128>
c0011ed5:	90                   	nop
c0011ed6:	83 c4 28             	add    esp,0x28
c0011ed9:	5b                   	pop    ebx
c0011eda:	c3                   	ret    
c0011edb:	90                   	nop

c0011edc <ReservedFilename::ReservedFilename(int)>:
c0011edc:	83 ec 0c             	sub    esp,0xc
c0011edf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ee3:	83 ec 08             	sub    esp,0x8
c0011ee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011eea:	50                   	push   eax
c0011eeb:	e8 38 fe ff ff       	call   c0011d28 <UnixFile::UnixFile(int)>
c0011ef0:	83 c4 10             	add    esp,0x10
c0011ef3:	ba 78 2d 02 c0       	mov    edx,0xc0022d78
c0011ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011efc:	89 10                	mov    DWORD PTR [eax],edx
c0011efe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f02:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011f06:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011f09:	90                   	nop
c0011f0a:	83 c4 0c             	add    esp,0xc
c0011f0d:	c3                   	ret    

c0011f0e <UnixFile::~UnixFile()>:
c0011f0e:	83 ec 1c             	sub    esp,0x1c
c0011f11:	ba 5c 2d 02 c0       	mov    edx,0xc0022d5c
c0011f16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f1a:	89 10                	mov    DWORD PTR [eax],edx
c0011f1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011f23:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011f28:	7f 76                	jg     c0011fa0 <UnixFile::~UnixFile()+0x92>
c0011f2a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f32:	83 ec 0c             	sub    esp,0xc
c0011f35:	68 b8 ce 02 c0       	push   0xc002ceb8
c0011f3a:	e8 13 ea 00 00       	call   c0020952 <LinkedList<UnixFile>::getFirstElement()>
c0011f3f:	83 c4 10             	add    esp,0x10
c0011f42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011f46:	83 ec 0c             	sub    esp,0xc
c0011f49:	68 b8 ce 02 c0       	push   0xc002ceb8
c0011f4e:	e8 07 ea 00 00       	call   c002095a <LinkedList<UnixFile>::removeFirst()>
c0011f53:	83 c4 10             	add    esp,0x10
c0011f56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011f5a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011f5e:	74 43                	je     c0011fa3 <UnixFile::~UnixFile()+0x95>
c0011f60:	83 ec 08             	sub    esp,0x8
c0011f63:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011f67:	68 b8 ce 02 c0       	push   0xc002ceb8
c0011f6c:	e8 0d e9 00 00       	call   c002087e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011f71:	83 c4 10             	add    esp,0x10
c0011f74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f78:	8d 50 01             	lea    edx,[eax+0x1]
c0011f7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011f7f:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0011f84:	0f 94 c0             	sete   al
c0011f87:	0f b6 c0             	movzx  eax,al
c0011f8a:	85 c0                	test   eax,eax
c0011f8c:	74 a4                	je     c0011f32 <UnixFile::~UnixFile()+0x24>
c0011f8e:	83 ec 0c             	sub    esp,0xc
c0011f91:	68 ec 2c 02 c0       	push   0xc0022cec
c0011f96:	e8 fb cd ff ff       	call   c000ed96 <KePanic(char const*)>
c0011f9b:	83 c4 10             	add    esp,0x10
c0011f9e:	eb 92                	jmp    c0011f32 <UnixFile::~UnixFile()+0x24>
c0011fa0:	90                   	nop
c0011fa1:	eb 01                	jmp    c0011fa4 <UnixFile::~UnixFile()+0x96>
c0011fa3:	90                   	nop
c0011fa4:	90                   	nop
c0011fa5:	83 c4 1c             	add    esp,0x1c
c0011fa8:	c3                   	ret    
c0011fa9:	90                   	nop

c0011faa <UnixFile::~UnixFile()>:
c0011faa:	83 ec 0c             	sub    esp,0xc
c0011fad:	83 ec 0c             	sub    esp,0xc
c0011fb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011fb4:	e8 55 ff ff ff       	call   c0011f0e <UnixFile::~UnixFile()>
c0011fb9:	83 c4 10             	add    esp,0x10
c0011fbc:	83 ec 08             	sub    esp,0x8
c0011fbf:	6a 0c                	push   0xc
c0011fc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011fc5:	e8 8a a7 ff ff       	call   c000c754 <operator delete(void*, unsigned long)>
c0011fca:	83 c4 10             	add    esp,0x10
c0011fcd:	83 c4 0c             	add    esp,0xc
c0011fd0:	c3                   	ret    
c0011fd1:	90                   	nop

c0011fd2 <ReservedFilename::~ReservedFilename()>:
c0011fd2:	83 ec 0c             	sub    esp,0xc
c0011fd5:	ba 78 2d 02 c0       	mov    edx,0xc0022d78
c0011fda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fde:	89 10                	mov    DWORD PTR [eax],edx
c0011fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fe4:	83 ec 0c             	sub    esp,0xc
c0011fe7:	50                   	push   eax
c0011fe8:	e8 21 ff ff ff       	call   c0011f0e <UnixFile::~UnixFile()>
c0011fed:	83 c4 10             	add    esp,0x10
c0011ff0:	90                   	nop
c0011ff1:	83 c4 0c             	add    esp,0xc
c0011ff4:	c3                   	ret    
c0011ff5:	90                   	nop

c0011ff6 <ReservedFilename::~ReservedFilename()>:
c0011ff6:	83 ec 0c             	sub    esp,0xc
c0011ff9:	83 ec 0c             	sub    esp,0xc
c0011ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012000:	e8 cd ff ff ff       	call   c0011fd2 <ReservedFilename::~ReservedFilename()>
c0012005:	83 c4 10             	add    esp,0x10
c0012008:	83 ec 08             	sub    esp,0x8
c001200b:	6a 0c                	push   0xc
c001200d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012011:	e8 3e a7 ff ff       	call   c000c754 <operator delete(void*, unsigned long)>
c0012016:	83 c4 10             	add    esp,0x10
c0012019:	83 c4 0c             	add    esp,0xc
c001201c:	c3                   	ret    

c001201d <KeGetFileFromDescriptor(int)>:
c001201d:	53                   	push   ebx
c001201e:	83 ec 20             	sub    esp,0x20
c0012021:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0012025:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001202b:	53                   	push   ebx
c001202c:	68 0c 2d 02 c0       	push   0xc0022d0c
c0012031:	e8 2e 4f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012036:	83 c4 10             	add    esp,0x10
c0012039:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001203f:	7f 63                	jg     c00120a4 <KeGetFileFromDescriptor(int)+0x87>
c0012041:	83 ec 0c             	sub    esp,0xc
c0012044:	68 b8 ce 02 c0       	push   0xc002ceb8
c0012049:	e8 04 e9 00 00       	call   c0020952 <LinkedList<UnixFile>::getFirstElement()>
c001204e:	5a                   	pop    edx
c001204f:	59                   	pop    ecx
c0012050:	50                   	push   eax
c0012051:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012055:	68 2e 2d 02 c0       	push   0xc0022d2e
c001205a:	e8 05 4f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001205f:	83 c4 10             	add    esp,0x10
c0012062:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012066:	8d 50 ff             	lea    edx,[eax-0x1]
c0012069:	83 fa fd             	cmp    edx,0xfffffffd
c001206c:	76 07                	jbe    c0012075 <KeGetFileFromDescriptor(int)+0x58>
c001206e:	31 c0                	xor    eax,eax
c0012070:	e9 8d 00 00 00       	jmp    c0012102 <KeGetFileFromDescriptor(int)+0xe5>
c0012075:	51                   	push   ecx
c0012076:	51                   	push   ecx
c0012077:	50                   	push   eax
c0012078:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001207c:	68 42 2d 02 c0       	push   0xc0022d42
c0012081:	e8 de 4e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012086:	83 c4 10             	add    esp,0x10
c0012089:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001208d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0012090:	74 70                	je     c0012102 <KeGetFileFromDescriptor(int)+0xe5>
c0012092:	52                   	push   edx
c0012093:	52                   	push   edx
c0012094:	50                   	push   eax
c0012095:	68 b8 ce 02 c0       	push   0xc002ceb8
c001209a:	e8 5d e9 00 00       	call   c00209fc <LinkedList<UnixFile>::getNext(UnixFile*)>
c001209f:	83 c4 10             	add    esp,0x10
c00120a2:	eb c2                	jmp    c0012066 <KeGetFileFromDescriptor(int)+0x49>
c00120a4:	a1 ac ce 02 c0       	mov    eax,ds:0xc002ceac
c00120a9:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00120af:	74 51                	je     c0012102 <KeGetFileFromDescriptor(int)+0xe5>
c00120b1:	a1 b0 ce 02 c0       	mov    eax,ds:0xc002ceb0
c00120b6:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00120bc:	74 44                	je     c0012102 <KeGetFileFromDescriptor(int)+0xe5>
c00120be:	a1 a8 ce 02 c0       	mov    eax,ds:0xc002cea8
c00120c3:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00120c9:	74 37                	je     c0012102 <KeGetFileFromDescriptor(int)+0xe5>
c00120cb:	a1 a4 ce 02 c0       	mov    eax,ds:0xc002cea4
c00120d0:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00120d6:	74 2a                	je     c0012102 <KeGetFileFromDescriptor(int)+0xe5>
c00120d8:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00120de:	83 f8 08             	cmp    eax,0x8
c00120e1:	77 09                	ja     c00120ec <KeGetFileFromDescriptor(int)+0xcf>
c00120e3:	8b 04 85 80 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3180]
c00120ea:	eb 16                	jmp    c0012102 <KeGetFileFromDescriptor(int)+0xe5>
c00120ec:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00120f2:	83 fb 08             	cmp    ebx,0x8
c00120f5:	0f 87 73 ff ff ff    	ja     c001206e <KeGetFileFromDescriptor(int)+0x51>
c00120fb:	8b 04 9d 40 ce 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd31c0]
c0012102:	83 c4 18             	add    esp,0x18
c0012105:	5b                   	pop    ebx
c0012106:	c3                   	ret    

c0012107 <__static_initialization_and_destruction_0(int, int)>:
c0012107:	83 ec 0c             	sub    esp,0xc
c001210a:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001210f:	75 34                	jne    c0012145 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0012111:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0012119:	75 2a                	jne    c0012145 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001211b:	83 ec 0c             	sub    esp,0xc
c001211e:	68 b8 ce 02 c0       	push   0xc002ceb8
c0012123:	e8 14 e7 00 00       	call   c002083c <LinkedList<UnixFile>::LinkedList()>
c0012128:	83 c4 10             	add    esp,0x10
c001212b:	83 ec 04             	sub    esp,0x4
c001212e:	68 34 48 02 c0       	push   0xc0024834
c0012133:	68 b8 ce 02 c0       	push   0xc002ceb8
c0012138:	68 3a 08 02 c0       	push   0xc002083a
c001213d:	e8 c2 a5 ff ff       	call   c000c704 <__cxa_atexit>
c0012142:	83 c4 10             	add    esp,0x10
c0012145:	90                   	nop
c0012146:	83 c4 0c             	add    esp,0xc
c0012149:	c3                   	ret    

c001214a <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001214a:	83 ec 0c             	sub    esp,0xc
c001214d:	83 ec 08             	sub    esp,0x8
c0012150:	68 ff ff 00 00       	push   0xffff
c0012155:	6a 01                	push   0x1
c0012157:	e8 ab ff ff ff       	call   c0012107 <__static_initialization_and_destruction_0(int, int)>
c001215c:	83 c4 10             	add    esp,0x10
c001215f:	83 c4 0c             	add    esp,0xc
c0012162:	c3                   	ret    
c0012163:	90                   	nop

c0012164 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0012164:	53                   	push   ebx
c0012165:	8b 15 c8 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fc8
c001216b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001216f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012173:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0012179:	89 d8                	mov    eax,ebx
c001217b:	d1 e8                	shr    eax,1
c001217d:	01 d0                	add    eax,edx
c001217f:	80 e3 01             	and    bl,0x1
c0012182:	8a 10                	mov    dl,BYTE PTR [eax]
c0012184:	75 09                	jne    c001218f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0012186:	83 e2 f0             	and    edx,0xfffffff0
c0012189:	09 ca                	or     edx,ecx
c001218b:	88 10                	mov    BYTE PTR [eax],dl
c001218d:	5b                   	pop    ebx
c001218e:	c3                   	ret    
c001218f:	83 e2 0f             	and    edx,0xf
c0012192:	0f b6 c9             	movzx  ecx,cl
c0012195:	c1 e1 04             	shl    ecx,0x4
c0012198:	09 ca                	or     edx,ecx
c001219a:	88 10                	mov    BYTE PTR [eax],dl
c001219c:	5b                   	pop    ebx
c001219d:	c3                   	ret    

c001219e <Virt::getPageState(unsigned long)>:
c001219e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121a2:	8b 0d c8 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fc8
c00121a8:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00121ae:	89 d0                	mov    eax,edx
c00121b0:	d1 e8                	shr    eax,1
c00121b2:	80 e2 01             	and    dl,0x1
c00121b5:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00121b8:	74 03                	je     c00121bd <Virt::getPageState(unsigned long)+0x1f>
c00121ba:	c1 e8 04             	shr    eax,0x4
c00121bd:	83 e0 0f             	and    eax,0xf
c00121c0:	c3                   	ret    

c00121c1 <Virt::allocateKernelVirtualPages(int)>:
c00121c1:	55                   	push   ebp
c00121c2:	31 ed                	xor    ebp,ebp
c00121c4:	57                   	push   edi
c00121c5:	31 ff                	xor    edi,edi
c00121c7:	56                   	push   esi
c00121c8:	53                   	push   ebx
c00121c9:	31 db                	xor    ebx,ebx
c00121cb:	83 ec 0c             	sub    esp,0xc
c00121ce:	8b 35 c4 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fc4
c00121d4:	56                   	push   esi
c00121d5:	e8 c4 ff ff ff       	call   c001219e <Virt::getPageState(unsigned long)>
c00121da:	5a                   	pop    edx
c00121db:	84 c0                	test   al,al
c00121dd:	75 41                	jne    c0012220 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00121df:	85 db                	test   ebx,ebx
c00121e1:	75 02                	jne    c00121e5 <Virt::allocateKernelVirtualPages(int)+0x24>
c00121e3:	89 f5                	mov    ebp,esi
c00121e5:	83 c3 01             	add    ebx,0x1
c00121e8:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00121ec:	74 5f                	je     c001224d <Virt::allocateKernelVirtualPages(int)+0x8c>
c00121ee:	83 c6 01             	add    esi,0x1
c00121f1:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c00121f7:	76 34                	jbe    c001222d <Virt::allocateKernelVirtualPages(int)+0x6c>
c00121f9:	c7 05 c4 4f 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0024fc4,0xc8000
c0012203:	f7 c7 01 00 00 00    	test   edi,0x1
c0012209:	75 2a                	jne    c0012235 <Virt::allocateKernelVirtualPages(int)+0x74>
c001220b:	be 00 80 0c 00       	mov    esi,0xc8000
c0012210:	bf 01 00 00 00       	mov    edi,0x1
c0012215:	56                   	push   esi
c0012216:	e8 83 ff ff ff       	call   c001219e <Virt::getPageState(unsigned long)>
c001221b:	5a                   	pop    edx
c001221c:	84 c0                	test   al,al
c001221e:	74 bf                	je     c00121df <Virt::allocateKernelVirtualPages(int)+0x1e>
c0012220:	31 db                	xor    ebx,ebx
c0012222:	83 c6 01             	add    esi,0x1
c0012225:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c001222b:	77 cc                	ja     c00121f9 <Virt::allocateKernelVirtualPages(int)+0x38>
c001222d:	89 35 c4 4f 02 c0    	mov    DWORD PTR ds:0xc0024fc4,esi
c0012233:	eb 9f                	jmp    c00121d4 <Virt::allocateKernelVirtualPages(int)+0x13>
c0012235:	83 ec 0c             	sub    esp,0xc
c0012238:	68 8c 2d 02 c0       	push   0xc0022d8c
c001223d:	e8 54 cb ff ff       	call   c000ed96 <KePanic(char const*)>
c0012242:	8b 35 c4 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fc4
c0012248:	83 c4 10             	add    esp,0x10
c001224b:	eb 87                	jmp    c00121d4 <Virt::allocateKernelVirtualPages(int)+0x13>
c001224d:	89 2d c4 4f 02 c0    	mov    DWORD PTR ds:0xc0024fc4,ebp
c0012253:	83 fb 01             	cmp    ebx,0x1
c0012256:	74 6f                	je     c00122c7 <Virt::allocateKernelVirtualPages(int)+0x106>
c0012258:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001225c:	85 c9                	test   ecx,ecx
c001225e:	74 49                	je     c00122a9 <Virt::allocateKernelVirtualPages(int)+0xe8>
c0012260:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012264:	89 e8                	mov    eax,ebp
c0012266:	31 db                	xor    ebx,ebx
c0012268:	8d 79 ff             	lea    edi,[ecx-0x1]
c001226b:	eb 18                	jmp    c0012285 <Virt::allocateKernelVirtualPages(int)+0xc4>
c001226d:	6a 01                	push   0x1
c001226f:	83 c3 01             	add    ebx,0x1
c0012272:	50                   	push   eax
c0012273:	e8 ec fe ff ff       	call   c0012164 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012278:	58                   	pop    eax
c0012279:	5a                   	pop    edx
c001227a:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c001227e:	74 29                	je     c00122a9 <Virt::allocateKernelVirtualPages(int)+0xe8>
c0012280:	a1 c4 4f 02 c0       	mov    eax,ds:0xc0024fc4
c0012285:	8d 50 01             	lea    edx,[eax+0x1]
c0012288:	85 db                	test   ebx,ebx
c001228a:	89 15 c4 4f 02 c0    	mov    DWORD PTR ds:0xc0024fc4,edx
c0012290:	74 24                	je     c00122b6 <Virt::allocateKernelVirtualPages(int)+0xf5>
c0012292:	39 df                	cmp    edi,ebx
c0012294:	75 d7                	jne    c001226d <Virt::allocateKernelVirtualPages(int)+0xac>
c0012296:	6a 03                	push   0x3
c0012298:	83 c3 01             	add    ebx,0x1
c001229b:	50                   	push   eax
c001229c:	e8 c3 fe ff ff       	call   c0012164 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00122a1:	59                   	pop    ecx
c00122a2:	5e                   	pop    esi
c00122a3:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00122a7:	75 d7                	jne    c0012280 <Virt::allocateKernelVirtualPages(int)+0xbf>
c00122a9:	83 c4 0c             	add    esp,0xc
c00122ac:	89 e8                	mov    eax,ebp
c00122ae:	5b                   	pop    ebx
c00122af:	c1 e0 0c             	shl    eax,0xc
c00122b2:	5e                   	pop    esi
c00122b3:	5f                   	pop    edi
c00122b4:	5d                   	pop    ebp
c00122b5:	c3                   	ret    
c00122b6:	6a 02                	push   0x2
c00122b8:	bb 01 00 00 00       	mov    ebx,0x1
c00122bd:	50                   	push   eax
c00122be:	e8 a1 fe ff ff       	call   c0012164 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00122c3:	58                   	pop    eax
c00122c4:	5a                   	pop    edx
c00122c5:	eb b9                	jmp    c0012280 <Virt::allocateKernelVirtualPages(int)+0xbf>
c00122c7:	6a 04                	push   0x4
c00122c9:	8d 45 01             	lea    eax,[ebp+0x1]
c00122cc:	55                   	push   ebp
c00122cd:	a3 c4 4f 02 c0       	mov    ds:0xc0024fc4,eax
c00122d2:	e8 8d fe ff ff       	call   c0012164 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00122d7:	5b                   	pop    ebx
c00122d8:	89 e8                	mov    eax,ebp
c00122da:	5e                   	pop    esi
c00122db:	c1 e0 0c             	shl    eax,0xc
c00122de:	83 c4 0c             	add    esp,0xc
c00122e1:	5b                   	pop    ebx
c00122e2:	5e                   	pop    esi
c00122e3:	5f                   	pop    edi
c00122e4:	5d                   	pop    ebp
c00122e5:	c3                   	ret    

c00122e6 <Virt::freeSwapfilePage(unsigned long)>:
c00122e6:	53                   	push   ebx
c00122e7:	8b 15 cc ce 02 c0    	mov    edx,DWORD PTR ds:0xc002cecc
c00122ed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00122f1:	b8 01 00 00 00       	mov    eax,0x1
c00122f6:	89 cb                	mov    ebx,ecx
c00122f8:	d3 e0                	shl    eax,cl
c00122fa:	c1 eb 05             	shr    ebx,0x5
c00122fd:	f7 d0                	not    eax
c00122ff:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0012302:	21 c1                	and    ecx,eax
c0012304:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0012307:	5b                   	pop    ebx
c0012308:	c3                   	ret    

c0012309 <Virt::swapIDToSector(unsigned long)>:
c0012309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001230d:	8b 15 cc 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fcc
c0012313:	8b 0d d4 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fd4
c0012319:	0f af c2             	imul   eax,edx
c001231c:	01 c8                	add    eax,ecx
c001231e:	c3                   	ret    

c001231f <Virt::allocateSwapfilePage()>:
c001231f:	55                   	push   ebp
c0012320:	31 d2                	xor    edx,edx
c0012322:	57                   	push   edi
c0012323:	56                   	push   esi
c0012324:	53                   	push   ebx
c0012325:	83 ec 0c             	sub    esp,0xc
c0012328:	8b 0d cc 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fcc
c001232e:	a1 d0 4f 02 c0       	mov    eax,ds:0xc0024fd0
c0012333:	f7 f1                	div    ecx
c0012335:	39 0d d0 4f 02 c0    	cmp    DWORD PTR ds:0xc0024fd0,ecx
c001233b:	72 2f                	jb     c001236c <Virt::allocateSwapfilePage()+0x4d>
c001233d:	8b 35 cc ce 02 c0    	mov    esi,DWORD PTR ds:0xc002cecc
c0012343:	8b 16                	mov    edx,DWORD PTR [esi]
c0012345:	f6 c2 01             	test   dl,0x1
c0012348:	74 3e                	je     c0012388 <Virt::allocateSwapfilePage()+0x69>
c001234a:	31 c9                	xor    ecx,ecx
c001234c:	bf 01 00 00 00       	mov    edi,0x1
c0012351:	eb 12                	jmp    c0012365 <Virt::allocateSwapfilePage()+0x46>
c0012353:	89 fd                	mov    ebp,edi
c0012355:	89 ca                	mov    edx,ecx
c0012357:	d3 e5                	shl    ebp,cl
c0012359:	c1 ea 05             	shr    edx,0x5
c001235c:	8d 1c 96             	lea    ebx,[esi+edx*4]
c001235f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012361:	85 ea                	test   edx,ebp
c0012363:	74 2c                	je     c0012391 <Virt::allocateSwapfilePage()+0x72>
c0012365:	83 c1 01             	add    ecx,0x1
c0012368:	39 c8                	cmp    eax,ecx
c001236a:	77 e7                	ja     c0012353 <Virt::allocateSwapfilePage()+0x34>
c001236c:	83 ec 0c             	sub    esp,0xc
c001236f:	68 af 32 02 c0       	push   0xc00232af
c0012374:	e8 1d ca ff ff       	call   c000ed96 <KePanic(char const*)>
c0012379:	83 c4 10             	add    esp,0x10
c001237c:	31 c9                	xor    ecx,ecx
c001237e:	83 c4 0c             	add    esp,0xc
c0012381:	89 c8                	mov    eax,ecx
c0012383:	5b                   	pop    ebx
c0012384:	5e                   	pop    esi
c0012385:	5f                   	pop    edi
c0012386:	5d                   	pop    ebp
c0012387:	c3                   	ret    
c0012388:	89 f3                	mov    ebx,esi
c001238a:	bd 01 00 00 00       	mov    ebp,0x1
c001238f:	31 c9                	xor    ecx,ecx
c0012391:	09 ea                	or     edx,ebp
c0012393:	89 c8                	mov    eax,ecx
c0012395:	89 13                	mov    DWORD PTR [ebx],edx
c0012397:	83 c4 0c             	add    esp,0xc
c001239a:	5b                   	pop    ebx
c001239b:	5e                   	pop    esi
c001239c:	5f                   	pop    edi
c001239d:	5d                   	pop    ebp
c001239e:	c3                   	ret    

c001239f <Virt::virtualMemorySetup()>:
c001239f:	53                   	push   ebx
c00123a0:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00123a5:	6a 0f                	push   0xf
c00123a7:	53                   	push   ebx
c00123a8:	83 c3 01             	add    ebx,0x1
c00123ab:	e8 b4 fd ff ff       	call   c0012164 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00123b0:	58                   	pop    eax
c00123b1:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00123b7:	5a                   	pop    edx
c00123b8:	75 eb                	jne    c00123a5 <Virt::virtualMemorySetup()+0x6>
c00123ba:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00123bf:	6a 00                	push   0x0
c00123c1:	53                   	push   ebx
c00123c2:	83 c3 01             	add    ebx,0x1
c00123c5:	e8 9a fd ff ff       	call   c0012164 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00123ca:	59                   	pop    ecx
c00123cb:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00123d1:	58                   	pop    eax
c00123d2:	75 eb                	jne    c00123bf <Virt::virtualMemorySetup()+0x20>
c00123d4:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00123d9:	6a 0f                	push   0xf
c00123db:	53                   	push   ebx
c00123dc:	83 c3 01             	add    ebx,0x1
c00123df:	e8 80 fd ff ff       	call   c0012164 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00123e4:	58                   	pop    eax
c00123e5:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00123eb:	5a                   	pop    edx
c00123ec:	75 eb                	jne    c00123d9 <Virt::virtualMemorySetup()+0x3a>
c00123ee:	5b                   	pop    ebx
c00123ef:	c3                   	ret    

c00123f0 <Virt::setupPageSwapping(int)>:
c00123f0:	53                   	push   ebx
c00123f1:	83 ec 0c             	sub    esp,0xc
c00123f4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00123f8:	a1 88 a7 02 c0       	mov    eax,ds:0xc002a788
c00123fd:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0012403:	8b 10                	mov    edx,DWORD PTR [eax]
c0012405:	53                   	push   ebx
c0012406:	c1 e3 0b             	shl    ebx,0xb
c0012409:	68 c6 32 02 c0       	push   0xc00232c6
c001240e:	50                   	push   eax
c001240f:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0012412:	89 1d d0 4f 02 c0    	mov    DWORD PTR ds:0xc0024fd0,ebx
c0012418:	c6 05 d8 4f 02 c0 43 	mov    BYTE PTR ds:0xc0024fd8,0x43
c001241f:	c1 eb 08             	shr    ebx,0x8
c0012422:	a3 d4 4f 02 c0       	mov    ds:0xc0024fd4,eax
c0012427:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001242a:	c7 05 cc 4f 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0024fcc,0x8
c0012434:	e8 16 c6 ff ff       	call   c000ea4f <malloc>
c0012439:	83 c4 0c             	add    esp,0xc
c001243c:	89 c1                	mov    ecx,eax
c001243e:	a3 cc ce 02 c0       	mov    ds:0xc002cecc,eax
c0012443:	31 d2                	xor    edx,edx
c0012445:	a1 d0 4f 02 c0       	mov    eax,ds:0xc0024fd0
c001244a:	f7 35 cc 4f 02 c0    	div    DWORD PTR ds:0xc0024fcc
c0012450:	c1 e8 05             	shr    eax,0x5
c0012453:	50                   	push   eax
c0012454:	6a 00                	push   0x0
c0012456:	51                   	push   ecx
c0012457:	e8 94 e0 fe ff       	call   c00004f0 <memset>
c001245c:	83 c4 18             	add    esp,0x18
c001245f:	5b                   	pop    ebx
c0012460:	c3                   	ret    
c0012461:	90                   	nop

c0012462 <VAS::setCPUSpecific(unsigned long)>:
c0012462:	c3                   	ret    
c0012463:	90                   	nop

c0012464 <VAS::VAS(VAS*)>:
c0012464:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012468:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001246f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012473:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001247a:	90                   	nop
c001247b:	c3                   	ret    

c001247c <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001247c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012480:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0012485:	89 c2                	mov    edx,eax
c0012487:	c1 e8 0a             	shr    eax,0xa
c001248a:	c1 ea 16             	shr    edx,0x16
c001248d:	83 f9 01             	cmp    ecx,0x1
c0012490:	19 c9                	sbb    ecx,ecx
c0012492:	c1 e2 0c             	shl    edx,0xc
c0012495:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c001249b:	25 fc 0f 00 00       	and    eax,0xffc
c00124a0:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00124a7:	01 d0                	add    eax,edx
c00124a9:	c3                   	ret    

c00124aa <VAS::getPageTableEntry(unsigned long)>:
c00124aa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00124ae:	89 ca                	mov    edx,ecx
c00124b0:	c1 e9 0a             	shr    ecx,0xa
c00124b3:	c1 ea 16             	shr    edx,0x16
c00124b6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00124bc:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00124c2:	c1 e0 0c             	shl    eax,0xc
c00124c5:	8d 04 08             	lea    eax,[eax+ecx*1]
c00124c8:	c3                   	ret    

c00124c9 <Virt::freeKernelVirtualPages(unsigned long)>:
c00124c9:	55                   	push   ebp
c00124ca:	57                   	push   edi
c00124cb:	bf 01 00 00 00       	mov    edi,0x1
c00124d0:	56                   	push   esi
c00124d1:	53                   	push   ebx
c00124d2:	83 ec 1c             	sub    esp,0x1c
c00124d5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00124d9:	c1 ee 0c             	shr    esi,0xc
c00124dc:	eb 48                	jmp    c0012526 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c00124de:	83 ec 08             	sub    esp,0x8
c00124e1:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c00124e6:	55                   	push   ebp
c00124e7:	50                   	push   eax
c00124e8:	e8 bd ff ff ff       	call   c00124aa <VAS::getPageTableEntry(unsigned long)>
c00124ed:	83 c4 10             	add    esp,0x10
c00124f0:	8b 10                	mov    edx,DWORD PTR [eax]
c00124f2:	f6 c6 04             	test   dh,0x4
c00124f5:	75 70                	jne    c0012567 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00124f7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00124fd:	83 fb 04             	cmp    ebx,0x4
c0012500:	0f 84 8a 00 00 00    	je     c0012590 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0012506:	83 fb 02             	cmp    ebx,0x2
c0012509:	0f 84 9a 00 00 00    	je     c00125a9 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c001250f:	83 fb 03             	cmp    ebx,0x3
c0012512:	0f 84 be 00 00 00    	je     c00125d6 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0012518:	83 fb 01             	cmp    ebx,0x1
c001251b:	0f 84 a2 00 00 00    	je     c00125c3 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0012521:	83 c6 01             	add    esi,0x1
c0012524:	31 ff                	xor    edi,edi
c0012526:	56                   	push   esi
c0012527:	89 f5                	mov    ebp,esi
c0012529:	e8 70 fc ff ff       	call   c001219e <Virt::getPageState(unsigned long)>
c001252e:	c1 e5 0c             	shl    ebp,0xc
c0012531:	0f b6 d8             	movzx  ebx,al
c0012534:	5a                   	pop    edx
c0012535:	85 db                	test   ebx,ebx
c0012537:	75 a5                	jne    c00124de <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0012539:	83 ec 0c             	sub    esp,0xc
c001253c:	68 dd 32 02 c0       	push   0xc00232dd
c0012541:	e8 50 c8 ff ff       	call   c000ed96 <KePanic(char const*)>
c0012546:	5a                   	pop    edx
c0012547:	59                   	pop    ecx
c0012548:	55                   	push   ebp
c0012549:	8b 2d d0 ce 02 c0    	mov    ebp,DWORD PTR ds:0xc002ced0
c001254f:	55                   	push   ebp
c0012550:	e8 55 ff ff ff       	call   c00124aa <VAS::getPageTableEntry(unsigned long)>
c0012555:	83 c4 10             	add    esp,0x10
c0012558:	8b 10                	mov    edx,DWORD PTR [eax]
c001255a:	f6 c6 04             	test   dh,0x4
c001255d:	75 08                	jne    c0012567 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c001255f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012565:	eb ba                	jmp    c0012521 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0012567:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001256b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012571:	83 ec 0c             	sub    esp,0xc
c0012574:	52                   	push   edx
c0012575:	e8 a7 c9 ff ff       	call   c000ef21 <Phys::freePage(unsigned long)>
c001257a:	83 c4 10             	add    esp,0x10
c001257d:	83 fb 04             	cmp    ebx,0x4
c0012580:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012584:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001258a:	0f 85 76 ff ff ff    	jne    c0012506 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0012590:	83 e7 01             	and    edi,0x1
c0012593:	75 46                	jne    c00125db <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0012595:	c7 44 24 30 ac 2d 02 c0 	mov    DWORD PTR [esp+0x30],0xc0022dac
c001259d:	83 c4 1c             	add    esp,0x1c
c00125a0:	5b                   	pop    ebx
c00125a1:	5e                   	pop    esi
c00125a2:	5f                   	pop    edi
c00125a3:	5d                   	pop    ebp
c00125a4:	e9 ed c7 ff ff       	jmp    c000ed96 <KePanic(char const*)>
c00125a9:	83 e7 01             	and    edi,0x1
c00125ac:	75 15                	jne    c00125c3 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00125ae:	83 ec 0c             	sub    esp,0xc
c00125b1:	68 f9 32 02 c0       	push   0xc00232f9
c00125b6:	e8 db c7 ff ff       	call   c000ed96 <KePanic(char const*)>
c00125bb:	83 c4 10             	add    esp,0x10
c00125be:	e9 5e ff ff ff       	jmp    c0012521 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00125c3:	83 ec 08             	sub    esp,0x8
c00125c6:	6a 00                	push   0x0
c00125c8:	56                   	push   esi
c00125c9:	e8 96 fb ff ff       	call   c0012164 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00125ce:	83 c4 10             	add    esp,0x10
c00125d1:	e9 4b ff ff ff       	jmp    c0012521 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00125d6:	83 e7 01             	and    edi,0x1
c00125d9:	75 16                	jne    c00125f1 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c00125db:	83 ec 08             	sub    esp,0x8
c00125de:	6a 00                	push   0x0
c00125e0:	56                   	push   esi
c00125e1:	e8 7e fb ff ff       	call   c0012164 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00125e6:	83 c4 10             	add    esp,0x10
c00125e9:	83 c4 1c             	add    esp,0x1c
c00125ec:	5b                   	pop    ebx
c00125ed:	5e                   	pop    esi
c00125ee:	5f                   	pop    edi
c00125ef:	5d                   	pop    ebp
c00125f0:	c3                   	ret    
c00125f1:	c7 44 24 30 15 33 02 c0 	mov    DWORD PTR [esp+0x30],0xc0023315
c00125f9:	83 c4 1c             	add    esp,0x1c
c00125fc:	5b                   	pop    ebx
c00125fd:	5e                   	pop    esi
c00125fe:	5f                   	pop    edi
c00125ff:	5d                   	pop    ebp
c0012600:	e9 91 c7 ff ff       	jmp    c000ed96 <KePanic(char const*)>
c0012605:	90                   	nop

c0012606 <VAS::freeAllocatedPages(unsigned long)>:
c0012606:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001260a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001260e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012612:	74 09                	je     c001261d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012614:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012618:	e9 ac fe ff ff       	jmp    c00124c9 <Virt::freeKernelVirtualPages(unsigned long)>
c001261d:	c7 44 24 04 d0 2d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022dd0
c0012625:	e9 3a 49 ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>

c001262a <VAS::virtualToPhysical(unsigned long)>:
c001262a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001262e:	50                   	push   eax
c001262f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012633:	52                   	push   edx
c0012634:	e8 71 fe ff ff       	call   c00124aa <VAS::getPageTableEntry(unsigned long)>
c0012639:	59                   	pop    ecx
c001263a:	8b 00                	mov    eax,DWORD PTR [eax]
c001263c:	5a                   	pop    edx
c001263d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012642:	c3                   	ret    
c0012643:	90                   	nop

c0012644 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0012644:	55                   	push   ebp
c0012645:	57                   	push   edi
c0012646:	56                   	push   esi
c0012647:	53                   	push   ebx
c0012648:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001264c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012650:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012654:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012658:	85 db                	test   ebx,ebx
c001265a:	7e 24                	jle    c0012680 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c001265c:	c1 e3 0c             	shl    ebx,0xc
c001265f:	01 f3                	add    ebx,esi
c0012661:	56                   	push   esi
c0012662:	81 c6 00 10 00 00    	add    esi,0x1000
c0012668:	55                   	push   ebp
c0012669:	e8 3c fe ff ff       	call   c00124aa <VAS::getPageTableEntry(unsigned long)>
c001266e:	5a                   	pop    edx
c001266f:	59                   	pop    ecx
c0012670:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012672:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012676:	21 f9                	and    ecx,edi
c0012678:	09 d1                	or     ecx,edx
c001267a:	39 f3                	cmp    ebx,esi
c001267c:	89 08                	mov    DWORD PTR [eax],ecx
c001267e:	75 e1                	jne    c0012661 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0012680:	5b                   	pop    ebx
c0012681:	5e                   	pop    esi
c0012682:	5f                   	pop    edi
c0012683:	5d                   	pop    ebp
c0012684:	c3                   	ret    
c0012685:	90                   	nop

c0012686 <VAS::VAS()>:
c0012686:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001268a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012695:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001269c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126a0:	a3 d0 ce 02 c0       	mov    ds:0xc002ced0,eax
c00126a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126a9:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00126ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126b1:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00126b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126b8:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00126bf:	ba 7d 60 02 c0       	mov    edx,0xc002607d
c00126c4:	b8 00 60 02 c0       	mov    eax,0xc0026000
c00126c9:	29 c2                	sub    edx,eax
c00126cb:	89 d0                	mov    eax,edx
c00126cd:	05 ff 0f 00 00       	add    eax,0xfff
c00126d2:	c1 e8 0c             	shr    eax,0xc
c00126d5:	89 c2                	mov    edx,eax
c00126d7:	b8 00 60 02 c0       	mov    eax,0xc0026000
c00126dc:	6a 04                	push   0x4
c00126de:	6a ff                	push   0xffffffff
c00126e0:	52                   	push   edx
c00126e1:	50                   	push   eax
c00126e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00126e6:	e8 59 ff ff ff       	call   c0012644 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00126eb:	83 c4 14             	add    esp,0x14
c00126ee:	90                   	nop
c00126ef:	c3                   	ret    

c00126f0 <VAS::setToWriteCombining(unsigned long, int)>:
c00126f0:	a1 64 d7 02 c0       	mov    eax,ds:0xc002d764
c00126f5:	50                   	push   eax
c00126f6:	6a ff                	push   0xffffffff
c00126f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00126fc:	52                   	push   edx
c00126fd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012701:	51                   	push   ecx
c0012702:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012706:	50                   	push   eax
c0012707:	e8 38 ff ff ff       	call   c0012644 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001270c:	83 c4 14             	add    esp,0x14
c001270f:	c3                   	ret    

c0012710 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012710:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012714:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012717:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001271b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c001271e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0012723:	83 f8 01             	cmp    eax,0x1
c0012726:	19 c0                	sbb    eax,eax
c0012728:	83 ca 03             	or     edx,0x3
c001272b:	83 e0 fc             	and    eax,0xfffffffc
c001272e:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012735:	0f 20 d8             	mov    eax,cr3
c0012738:	0f 22 d8             	mov    cr3,eax
c001273b:	c3                   	ret    

c001273c <VAS::~VAS()>:
c001273c:	83 ec 2c             	sub    esp,0x2c
c001273f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012747:	fa                   	cli    
c0012748:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c001274d:	83 c0 01             	add    eax,0x1
c0012750:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0012755:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001275a:	8b 00                	mov    eax,DWORD PTR [eax]
c001275c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001275f:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0012765:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012769:	6a 01                	push   0x1
c001276b:	50                   	push   eax
c001276c:	e8 9f ff ff ff       	call   c0012710 <VAS::mapOtherVASIn(bool, VAS*)>
c0012771:	83 c4 0c             	add    esp,0xc
c0012774:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001277c:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012784:	0f 8f d8 00 00 00    	jg     c0012862 <VAS::~VAS()+0x126>
c001278a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001278e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012791:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012795:	c1 e2 02             	shl    edx,0x2
c0012798:	01 d0                	add    eax,edx
c001279a:	8b 00                	mov    eax,DWORD PTR [eax]
c001279c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00127a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127a4:	83 e0 01             	and    eax,0x1
c00127a7:	0f 84 ab 00 00 00    	je     c0012858 <VAS::~VAS()+0x11c>
c00127ad:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00127b5:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00127bd:	7f 74                	jg     c0012833 <VAS::~VAS()+0xf7>
c00127bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127c3:	c1 e0 0a             	shl    eax,0xa
c00127c6:	89 c2                	mov    edx,eax
c00127c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00127cc:	01 d0                	add    eax,edx
c00127ce:	c1 e0 0c             	shl    eax,0xc
c00127d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00127d5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00127da:	8b 00                	mov    eax,DWORD PTR [eax]
c00127dc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00127df:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00127e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00127e9:	6a 01                	push   0x1
c00127eb:	50                   	push   eax
c00127ec:	e8 8b fc ff ff       	call   c001247c <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00127f1:	83 c4 0c             	add    esp,0xc
c00127f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00127f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00127fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00127fe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012802:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012806:	25 01 04 00 00       	and    eax,0x401
c001280b:	3d 01 04 00 00       	cmp    eax,0x401
c0012810:	75 1a                	jne    c001282c <VAS::~VAS()+0xf0>
c0012812:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012816:	25 00 f0 ff ff       	and    eax,0xfffff000
c001281b:	83 ec 0c             	sub    esp,0xc
c001281e:	50                   	push   eax
c001281f:	e8 fd c6 ff ff       	call   c000ef21 <Phys::freePage(unsigned long)>
c0012824:	83 c4 10             	add    esp,0x10
c0012827:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001282c:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0012831:	eb 82                	jmp    c00127b5 <VAS::~VAS()+0x79>
c0012833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012837:	25 00 04 00 00       	and    eax,0x400
c001283c:	74 1a                	je     c0012858 <VAS::~VAS()+0x11c>
c001283e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012842:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012847:	83 ec 0c             	sub    esp,0xc
c001284a:	50                   	push   eax
c001284b:	e8 d1 c6 ff ff       	call   c000ef21 <Phys::freePage(unsigned long)>
c0012850:	83 c4 10             	add    esp,0x10
c0012853:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012858:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001285d:	e9 1a ff ff ff       	jmp    c001277c <VAS::~VAS()+0x40>
c0012862:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012866:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012869:	83 ec 0c             	sub    esp,0xc
c001286c:	50                   	push   eax
c001286d:	e8 57 fc ff ff       	call   c00124c9 <Virt::freeKernelVirtualPages(unsigned long)>
c0012872:	83 c4 10             	add    esp,0x10
c0012875:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012879:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001287c:	83 ec 0c             	sub    esp,0xc
c001287f:	50                   	push   eax
c0012880:	e8 9c c6 ff ff       	call   c000ef21 <Phys::freePage(unsigned long)>
c0012885:	83 c4 10             	add    esp,0x10
c0012888:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001288d:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0012895:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c001289a:	85 c0                	test   eax,eax
c001289c:	75 01                	jne    c001289f <VAS::~VAS()+0x163>
c001289e:	fb                   	sti    
c001289f:	90                   	nop
c00128a0:	83 c4 2c             	add    esp,0x2c
c00128a3:	c3                   	ret    

c00128a4 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00128a4:	55                   	push   ebp
c00128a5:	57                   	push   edi
c00128a6:	56                   	push   esi
c00128a7:	53                   	push   ebx
c00128a8:	83 ec 1c             	sub    esp,0x1c
c00128ab:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00128af:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00128b3:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00128b9:	77 08                	ja     c00128c3 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00128bb:	0f 20 d8             	mov    eax,cr3
c00128be:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00128c1:	75 49                	jne    c001290c <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c00128c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00128c7:	09 d8                	or     eax,ebx
c00128c9:	a9 ff 0f 00 00       	test   eax,0xfff
c00128ce:	75 59                	jne    c0012929 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c00128d0:	89 de                	mov    esi,ebx
c00128d2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00128d5:	c1 ee 16             	shr    esi,0x16
c00128d8:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00128df:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00128e3:	74 56                	je     c001293b <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c00128e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00128e9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00128ed:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00128f3:	c1 eb 0a             	shr    ebx,0xa
c00128f6:	c1 e6 0c             	shl    esi,0xc
c00128f9:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00128ff:	09 d0                	or     eax,edx
c0012901:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0012904:	83 c4 1c             	add    esp,0x1c
c0012907:	5b                   	pop    ebx
c0012908:	5e                   	pop    esi
c0012909:	5f                   	pop    edi
c001290a:	5d                   	pop    ebp
c001290b:	c3                   	ret    
c001290c:	83 ec 0c             	sub    esp,0xc
c001290f:	68 f4 2d 02 c0       	push   0xc0022df4
c0012914:	e8 4b 46 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012919:	83 c4 10             	add    esp,0x10
c001291c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012920:	09 d8                	or     eax,ebx
c0012922:	a9 ff 0f 00 00       	test   eax,0xfff
c0012927:	74 a7                	je     c00128d0 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012929:	83 ec 0c             	sub    esp,0xc
c001292c:	68 5c 2e 02 c0       	push   0xc0022e5c
c0012931:	e8 60 c4 ff ff       	call   c000ed96 <KePanic(char const*)>
c0012936:	83 c4 10             	add    esp,0x10
c0012939:	eb 95                	jmp    c00128d0 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001293b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001293f:	e8 46 c6 ff ff       	call   c000ef8a <Phys::allocatePage()>
c0012944:	83 ec 0c             	sub    esp,0xc
c0012947:	89 c5                	mov    ebp,eax
c0012949:	8b 0d d0 ce 02 c0    	mov    ecx,DWORD PTR ds:0xc002ced0
c001294f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012953:	6a 01                	push   0x1
c0012955:	e8 67 f8 ff ff       	call   c00121c1 <Virt::allocateKernelVirtualPages(int)>
c001295a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012961:	6a 01                	push   0x1
c0012963:	50                   	push   eax
c0012964:	55                   	push   ebp
c0012965:	81 cd 07 04 00 00    	or     ebp,0x407
c001296b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001296f:	51                   	push   ecx
c0012970:	e8 19 01 00 00       	call   c0012a8e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012975:	83 c4 1c             	add    esp,0x1c
c0012978:	68 00 10 00 00       	push   0x1000
c001297d:	6a 00                	push   0x0
c001297f:	50                   	push   eax
c0012980:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012984:	e8 67 db fe ff       	call   c00004f0 <memset>
c0012989:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001298d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012990:	e8 34 fb ff ff       	call   c00124c9 <Virt::freeKernelVirtualPages(unsigned long)>
c0012995:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012999:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001299c:	83 c4 10             	add    esp,0x10
c001299f:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00129a2:	e9 3e ff ff ff       	jmp    c00128e5 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c00129a7:	90                   	nop

c00129a8 <VAS::allocatePages(int, int)>:
c00129a8:	55                   	push   ebp
c00129a9:	57                   	push   edi
c00129aa:	56                   	push   esi
c00129ab:	53                   	push   ebx
c00129ac:	83 ec 1c             	sub    esp,0x1c
c00129af:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00129b3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00129b7:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c00129bb:	75 71                	jne    c0012a2e <VAS::allocatePages(int, int)+0x86>
c00129bd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00129c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129c4:	85 c0                	test   eax,eax
c00129c6:	74 4d                	je     c0012a15 <VAS::allocatePages(int, int)+0x6d>
c00129c8:	89 dd                	mov    ebp,ebx
c00129ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00129ce:	c1 e5 0c             	shl    ebp,0xc
c00129d1:	01 c5                	add    ebp,eax
c00129d3:	85 db                	test   ebx,ebx
c00129d5:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00129d8:	7e 29                	jle    c0012a03 <VAS::allocatePages(int, int)+0x5b>
c00129da:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00129de:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00129e2:	81 cf 00 04 00 00    	or     edi,0x400
c00129e8:	e8 9d c5 ff ff       	call   c000ef8a <Phys::allocatePage()>
c00129ed:	57                   	push   edi
c00129ee:	53                   	push   ebx
c00129ef:	81 c3 00 10 00 00    	add    ebx,0x1000
c00129f5:	50                   	push   eax
c00129f6:	56                   	push   esi
c00129f7:	e8 a8 fe ff ff       	call   c00128a4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00129fc:	83 c4 10             	add    esp,0x10
c00129ff:	39 dd                	cmp    ebp,ebx
c0012a01:	75 e5                	jne    c00129e8 <VAS::allocatePages(int, int)+0x40>
c0012a03:	0f 20 d8             	mov    eax,cr3
c0012a06:	0f 22 d8             	mov    cr3,eax
c0012a09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a0d:	83 c4 1c             	add    esp,0x1c
c0012a10:	5b                   	pop    ebx
c0012a11:	5e                   	pop    esi
c0012a12:	5f                   	pop    edi
c0012a13:	5d                   	pop    ebp
c0012a14:	c3                   	ret    
c0012a15:	83 ec 0c             	sub    esp,0xc
c0012a18:	68 80 2e 02 c0       	push   0xc0022e80
c0012a1d:	e8 74 c3 ff ff       	call   c000ed96 <KePanic(char const*)>
c0012a22:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012a25:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a29:	83 c4 10             	add    esp,0x10
c0012a2c:	eb 9a                	jmp    c00129c8 <VAS::allocatePages(int, int)+0x20>
c0012a2e:	83 ec 0c             	sub    esp,0xc
c0012a31:	53                   	push   ebx
c0012a32:	e8 8a f7 ff ff       	call   c00121c1 <Virt::allocateKernelVirtualPages(int)>
c0012a37:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a3b:	83 c4 10             	add    esp,0x10
c0012a3e:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012a43:	77 37                	ja     c0012a7c <VAS::allocatePages(int, int)+0xd4>
c0012a45:	85 db                	test   ebx,ebx
c0012a47:	7e ba                	jle    c0012a03 <VAS::allocatePages(int, int)+0x5b>
c0012a49:	c1 e3 0c             	shl    ebx,0xc
c0012a4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a50:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012a54:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0012a57:	81 cf 00 04 00 00    	or     edi,0x400
c0012a5d:	89 c3                	mov    ebx,eax
c0012a5f:	e8 26 c5 ff ff       	call   c000ef8a <Phys::allocatePage()>
c0012a64:	57                   	push   edi
c0012a65:	53                   	push   ebx
c0012a66:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012a6c:	50                   	push   eax
c0012a6d:	56                   	push   esi
c0012a6e:	e8 31 fe ff ff       	call   c00128a4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a73:	83 c4 10             	add    esp,0x10
c0012a76:	39 dd                	cmp    ebp,ebx
c0012a78:	75 e5                	jne    c0012a5f <VAS::allocatePages(int, int)+0xb7>
c0012a7a:	eb 87                	jmp    c0012a03 <VAS::allocatePages(int, int)+0x5b>
c0012a7c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012a80:	a1 68 d7 02 c0       	mov    eax,ds:0xc002d768
c0012a85:	09 c2                	or     edx,eax
c0012a87:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0012a8b:	eb b8                	jmp    c0012a45 <VAS::allocatePages(int, int)+0x9d>
c0012a8d:	90                   	nop

c0012a8e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012a8e:	55                   	push   ebp
c0012a8f:	57                   	push   edi
c0012a90:	56                   	push   esi
c0012a91:	53                   	push   ebx
c0012a92:	83 ec 0c             	sub    esp,0xc
c0012a95:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012a99:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012a9d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012aa1:	85 db                	test   ebx,ebx
c0012aa3:	7e 2f                	jle    c0012ad4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0012aa5:	c1 e3 0c             	shl    ebx,0xc
c0012aa8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012aac:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012ab0:	01 d3                	add    ebx,edx
c0012ab2:	55                   	push   ebp
c0012ab3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012ab7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012abb:	29 c2                	sub    edx,eax
c0012abd:	01 f2                	add    edx,esi
c0012abf:	52                   	push   edx
c0012ac0:	56                   	push   esi
c0012ac1:	81 c6 00 10 00 00    	add    esi,0x1000
c0012ac7:	57                   	push   edi
c0012ac8:	e8 d7 fd ff ff       	call   c00128a4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012acd:	83 c4 10             	add    esp,0x10
c0012ad0:	39 de                	cmp    esi,ebx
c0012ad2:	75 de                	jne    c0012ab2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0012ad4:	0f 20 d8             	mov    eax,cr3
c0012ad7:	0f 22 d8             	mov    cr3,eax
c0012ada:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012ade:	83 c4 0c             	add    esp,0xc
c0012ae1:	5b                   	pop    ebx
c0012ae2:	5e                   	pop    esi
c0012ae3:	5f                   	pop    edi
c0012ae4:	5d                   	pop    ebp
c0012ae5:	c3                   	ret    

c0012ae6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012ae6:	55                   	push   ebp
c0012ae7:	57                   	push   edi
c0012ae8:	56                   	push   esi
c0012ae9:	53                   	push   ebx
c0012aea:	83 ec 1c             	sub    esp,0x1c
c0012aed:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012af1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0012af5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012af9:	09 f8                	or     eax,edi
c0012afb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012aff:	a9 ff 0f 00 00       	test   eax,0xfff
c0012b04:	75 4f                	jne    c0012b55 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0012b06:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012b0a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012b0d:	c1 eb 16             	shr    ebx,0x16
c0012b10:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0012b17:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0012b1b:	74 52                	je     c0012b6f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0012b1d:	0f b6 f2             	movzx  esi,dl
c0012b20:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012b24:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012b28:	c1 e8 0a             	shr    eax,0xa
c0012b2b:	83 fe 01             	cmp    esi,0x1
c0012b2e:	19 d2                	sbb    edx,edx
c0012b30:	c1 e3 0c             	shl    ebx,0xc
c0012b33:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012b39:	25 fc 0f 00 00       	and    eax,0xffc
c0012b3e:	01 d8                	add    eax,ebx
c0012b40:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012b44:	09 d9                	or     ecx,ebx
c0012b46:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012b4d:	83 c4 1c             	add    esp,0x1c
c0012b50:	5b                   	pop    ebx
c0012b51:	5e                   	pop    esi
c0012b52:	5f                   	pop    edi
c0012b53:	5d                   	pop    ebp
c0012b54:	c3                   	ret    
c0012b55:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012b59:	83 ec 0c             	sub    esp,0xc
c0012b5c:	68 ac 2e 02 c0       	push   0xc0022eac
c0012b61:	e8 30 c2 ff ff       	call   c000ed96 <KePanic(char const*)>
c0012b66:	83 c4 10             	add    esp,0x10
c0012b69:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b6d:	eb 97                	jmp    c0012b06 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0012b6f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b73:	e8 12 c4 ff ff       	call   c000ef8a <Phys::allocatePage()>
c0012b78:	83 ec 0c             	sub    esp,0xc
c0012b7b:	89 c5                	mov    ebp,eax
c0012b7d:	8b 0d d0 ce 02 c0    	mov    ecx,DWORD PTR ds:0xc002ced0
c0012b83:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012b87:	6a 01                	push   0x1
c0012b89:	e8 33 f6 ff ff       	call   c00121c1 <Virt::allocateKernelVirtualPages(int)>
c0012b8e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012b95:	6a 01                	push   0x1
c0012b97:	50                   	push   eax
c0012b98:	55                   	push   ebp
c0012b99:	81 cd 07 04 00 00    	or     ebp,0x407
c0012b9f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012ba3:	51                   	push   ecx
c0012ba4:	e8 e5 fe ff ff       	call   c0012a8e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012ba9:	83 c4 1c             	add    esp,0x1c
c0012bac:	68 00 10 00 00       	push   0x1000
c0012bb1:	6a 00                	push   0x0
c0012bb3:	50                   	push   eax
c0012bb4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012bb8:	e8 33 d9 fe ff       	call   c00004f0 <memset>
c0012bbd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012bc1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012bc4:	e8 00 f9 ff ff       	call   c00124c9 <Virt::freeKernelVirtualPages(unsigned long)>
c0012bc9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012bcc:	83 c4 10             	add    esp,0x10
c0012bcf:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c0012bd2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012bd6:	e9 42 ff ff ff       	jmp    c0012b1d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c0012bdb:	90                   	nop

c0012bdc <VAS::VAS(bool)>:
c0012bdc:	53                   	push   ebx
c0012bdd:	83 ec 28             	sub    esp,0x28
c0012be0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012be4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012be8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012bec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012bf3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012bf7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012bfe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c02:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012c06:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012c09:	e8 7c c3 ff ff       	call   c000ef8a <Phys::allocatePage()>
c0012c0e:	89 c2                	mov    edx,eax
c0012c10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c14:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012c17:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c0012c1d:	83 ec 0c             	sub    esp,0xc
c0012c20:	6a 01                	push   0x1
c0012c22:	e8 9a f5 ff ff       	call   c00121c1 <Virt::allocateKernelVirtualPages(int)>
c0012c27:	83 c4 10             	add    esp,0x10
c0012c2a:	89 c2                	mov    edx,eax
c0012c2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c30:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012c33:	83 ec 0c             	sub    esp,0xc
c0012c36:	6a 03                	push   0x3
c0012c38:	6a 01                	push   0x1
c0012c3a:	52                   	push   edx
c0012c3b:	50                   	push   eax
c0012c3c:	53                   	push   ebx
c0012c3d:	e8 4c fe ff ff       	call   c0012a8e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c42:	83 c4 20             	add    esp,0x20
c0012c45:	89 c2                	mov    edx,eax
c0012c47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c4b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012c4e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012c56:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012c5e:	7f 1d                	jg     c0012c7d <VAS::VAS(bool)+0xa1>
c0012c60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c64:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c67:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012c6b:	c1 e2 02             	shl    edx,0x2
c0012c6e:	01 d0                	add    eax,edx
c0012c70:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012c76:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012c7b:	eb d9                	jmp    c0012c56 <VAS::VAS(bool)+0x7a>
c0012c7d:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012c85:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012c8d:	7f 59                	jg     c0012ce8 <VAS::VAS(bool)+0x10c>
c0012c8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c93:	2d 00 02 00 00       	sub    eax,0x200
c0012c98:	c1 e0 0c             	shl    eax,0xc
c0012c9b:	89 c2                	mov    edx,eax
c0012c9d:	a1 68 d7 02 c0       	mov    eax,ds:0xc002d768
c0012ca2:	89 d1                	mov    ecx,edx
c0012ca4:	09 c1                	or     ecx,eax
c0012ca6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012caa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012cad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012cb1:	c1 e2 02             	shl    edx,0x2
c0012cb4:	01 d0                	add    eax,edx
c0012cb6:	83 c9 05             	or     ecx,0x5
c0012cb9:	89 ca                	mov    edx,ecx
c0012cbb:	89 10                	mov    DWORD PTR [eax],edx
c0012cbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012cc1:	2d 40 03 00 00       	sub    eax,0x340
c0012cc6:	83 f8 7f             	cmp    eax,0x7f
c0012cc9:	77 16                	ja     c0012ce1 <VAS::VAS(bool)+0x105>
c0012ccb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ccf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012cd2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012cd6:	c1 e2 02             	shl    edx,0x2
c0012cd9:	01 d0                	add    eax,edx
c0012cdb:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012ce1:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0012ce6:	eb 9d                	jmp    c0012c85 <VAS::VAS(bool)+0xa9>
c0012ce8:	8b 15 68 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d768
c0012cee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012cf2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012cf5:	05 20 0c 00 00       	add    eax,0xc20
c0012cfa:	81 ca 03 40 00 00    	or     edx,0x4003
c0012d00:	89 10                	mov    DWORD PTR [eax],edx
c0012d02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012d09:	a1 68 d7 02 c0       	mov    eax,ds:0xc002d768
c0012d0e:	09 c2                	or     edx,eax
c0012d10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d14:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012d17:	05 fc 0f 00 00       	add    eax,0xffc
c0012d1c:	83 ca 03             	or     edx,0x3
c0012d1f:	89 10                	mov    DWORD PTR [eax],edx
c0012d21:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0012d26:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012d2c:	83 ec 0c             	sub    esp,0xc
c0012d2f:	50                   	push   eax
c0012d30:	e8 8b 65 ff ff       	call   c00092c0 <Device::getName()>
c0012d35:	83 c4 10             	add    esp,0x10
c0012d38:	83 ec 08             	sub    esp,0x8
c0012d3b:	68 2f 33 02 c0       	push   0xc002332f
c0012d40:	50                   	push   eax
c0012d41:	e8 0a da fe ff       	call   c0000750 <strcmp>
c0012d46:	83 c4 10             	add    esp,0x10
c0012d49:	85 c0                	test   eax,eax
c0012d4b:	0f 94 c0             	sete   al
c0012d4e:	0f b6 c0             	movzx  eax,al
c0012d51:	85 c0                	test   eax,eax
c0012d53:	74 68                	je     c0012dbd <VAS::VAS(bool)+0x1e1>
c0012d55:	fa                   	cli    
c0012d56:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0012d5b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012d61:	05 68 09 00 00       	add    eax,0x968
c0012d66:	83 ec 0c             	sub    esp,0xc
c0012d69:	50                   	push   eax
c0012d6a:	e8 bf b6 ff ff       	call   c000e42e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012d6f:	83 c4 10             	add    esp,0x10
c0012d72:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012d77:	89 c3                	mov    ebx,eax
c0012d79:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0012d7e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012d84:	05 68 09 00 00       	add    eax,0x968
c0012d89:	83 ec 0c             	sub    esp,0xc
c0012d8c:	50                   	push   eax
c0012d8d:	e8 9c b6 ff ff       	call   c000e42e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012d92:	83 c4 10             	add    esp,0x10
c0012d95:	83 ec 08             	sub    esp,0x8
c0012d98:	50                   	push   eax
c0012d99:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d9d:	e8 08 f7 ff ff       	call   c00124aa <VAS::getPageTableEntry(unsigned long)>
c0012da2:	83 c4 10             	add    esp,0x10
c0012da5:	8b 00                	mov    eax,DWORD PTR [eax]
c0012da7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012dac:	6a 11                	push   0x11
c0012dae:	53                   	push   ebx
c0012daf:	50                   	push   eax
c0012db0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012db4:	e8 eb fa ff ff       	call   c00128a4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012db9:	83 c4 10             	add    esp,0x10
c0012dbc:	fb                   	sti    
c0012dbd:	90                   	nop
c0012dbe:	83 c4 28             	add    esp,0x28
c0012dc1:	5b                   	pop    ebx
c0012dc2:	c3                   	ret    
c0012dc3:	90                   	nop

c0012dc4 <VAS::evict(unsigned long)>:
c0012dc4:	55                   	push   ebp
c0012dc5:	57                   	push   edi
c0012dc6:	56                   	push   esi
c0012dc7:	53                   	push   ebx
c0012dc8:	83 ec 24             	sub    esp,0x24
c0012dcb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012dcf:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0012dd3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012dd7:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0012ddc:	50                   	push   eax
c0012ddd:	68 3d 33 02 c0       	push   0xc002333d
c0012de2:	e8 7d 41 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012de7:	e8 33 f5 ff ff       	call   c001231f <Virt::allocateSwapfilePage()>
c0012dec:	83 c4 10             	add    esp,0x10
c0012def:	89 c7                	mov    edi,eax
c0012df1:	a1 cc 4f 02 c0       	mov    eax,ds:0xc0024fcc
c0012df6:	85 c0                	test   eax,eax
c0012df8:	7e 40                	jle    c0012e3a <VAS::evict(unsigned long)+0x76>
c0012dfa:	89 ee                	mov    esi,ebp
c0012dfc:	31 db                	xor    ebx,ebx
c0012dfe:	83 ec 0c             	sub    esp,0xc
c0012e01:	57                   	push   edi
c0012e02:	e8 02 f5 ff ff       	call   c0012309 <Virt::swapIDToSector(unsigned long)>
c0012e07:	89 34 24             	mov    DWORD PTR [esp],esi
c0012e0a:	01 d8                	add    eax,ebx
c0012e0c:	6a 01                	push   0x1
c0012e0e:	31 d2                	xor    edx,edx
c0012e10:	83 c3 01             	add    ebx,0x1
c0012e13:	52                   	push   edx
c0012e14:	81 c6 00 02 00 00    	add    esi,0x200
c0012e1a:	50                   	push   eax
c0012e1b:	0f be 05 d8 4f 02 c0 	movsx  eax,BYTE PTR ds:0xc0024fd8
c0012e22:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c0012e29:	50                   	push   eax
c0012e2a:	e8 f5 72 ff ff       	call   c000a124 <LogicalDisk::write(unsigned long long, int, void*)>
c0012e2f:	83 c4 20             	add    esp,0x20
c0012e32:	39 1d cc 4f 02 c0    	cmp    DWORD PTR ds:0xc0024fcc,ebx
c0012e38:	7f c4                	jg     c0012dfe <VAS::evict(unsigned long)+0x3a>
c0012e3a:	83 ec 08             	sub    esp,0x8
c0012e3d:	c1 e7 0c             	shl    edi,0xc
c0012e40:	55                   	push   ebp
c0012e41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e45:	50                   	push   eax
c0012e46:	e8 5f f6 ff ff       	call   c00124aa <VAS::getPageTableEntry(unsigned long)>
c0012e4b:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e4d:	89 d3                	mov    ebx,edx
c0012e4f:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012e55:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012e5b:	09 d7                	or     edi,edx
c0012e5d:	89 38                	mov    DWORD PTR [eax],edi
c0012e5f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012e62:	8b 15 c8 ce 02 c0    	mov    edx,DWORD PTR ds:0xc002cec8
c0012e68:	83 c2 01             	add    edx,0x1
c0012e6b:	89 15 c8 ce 02 c0    	mov    DWORD PTR ds:0xc002cec8,edx
c0012e71:	e8 ab c0 ff ff       	call   c000ef21 <Phys::freePage(unsigned long)>
c0012e76:	0f 20 d8             	mov    eax,cr3
c0012e79:	0f 22 d8             	mov    cr3,eax
c0012e7c:	8b 0d c8 ce 02 c0    	mov    ecx,DWORD PTR ds:0xc002cec8
c0012e82:	51                   	push   ecx
c0012e83:	55                   	push   ebp
c0012e84:	53                   	push   ebx
c0012e85:	68 d0 2e 02 c0       	push   0xc0022ed0
c0012e8a:	e8 d5 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012e8f:	83 c4 18             	add    esp,0x18
c0012e92:	a1 c4 ce 02 c0       	mov    eax,ds:0xc002cec4
c0012e97:	50                   	push   eax
c0012e98:	8d 50 01             	lea    edx,[eax+0x1]
c0012e9b:	68 52 33 02 c0       	push   0xc0023352
c0012ea0:	89 15 c4 ce 02 c0    	mov    DWORD PTR ds:0xc002cec4,edx
c0012ea6:	e8 b9 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012eab:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0012eb0:	c7 44 24 40 64 33 02 c0 	mov    DWORD PTR [esp+0x40],0xc0023364
c0012eb8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012ebc:	83 c4 2c             	add    esp,0x2c
c0012ebf:	5b                   	pop    ebx
c0012ec0:	5e                   	pop    esi
c0012ec1:	5f                   	pop    edi
c0012ec2:	5d                   	pop    ebp
c0012ec3:	e9 9c 40 ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>

c0012ec8 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012ec8:	55                   	push   ebp
c0012ec9:	57                   	push   edi
c0012eca:	56                   	push   esi
c0012ecb:	53                   	push   ebx
c0012ecc:	81 ec 0c 10 00 00    	sub    esp,0x100c
c0012ed2:	8b b4 24 24 10 00 00 	mov    esi,DWORD PTR [esp+0x1024]
c0012ed9:	89 f3                	mov    ebx,esi
c0012edb:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012ee1:	53                   	push   ebx
c0012ee2:	8b 84 24 24 10 00 00 	mov    eax,DWORD PTR [esp+0x1024]
c0012ee9:	50                   	push   eax
c0012eea:	e8 bb f5 ff ff       	call   c00124aa <VAS::getPageTableEntry(unsigned long)>
c0012eef:	5a                   	pop    edx
c0012ef0:	89 c5                	mov    ebp,eax
c0012ef2:	59                   	pop    ecx
c0012ef3:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c0012ef9:	0f 87 cb 00 00 00    	ja     c0012fca <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c0012eff:	83 ec 08             	sub    esp,0x8
c0012f02:	56                   	push   esi
c0012f03:	68 04 2f 02 c0       	push   0xc0022f04
c0012f08:	e8 57 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f0d:	5e                   	pop    esi
c0012f0e:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c0012f13:	5f                   	pop    edi
c0012f14:	50                   	push   eax
c0012f15:	68 34 2f 02 c0       	push   0xc0022f34
c0012f1a:	e8 45 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f1f:	58                   	pop    eax
c0012f20:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0012f26:	5a                   	pop    edx
c0012f27:	51                   	push   ecx
c0012f28:	68 58 2f 02 c0       	push   0xc0022f58
c0012f2d:	e8 32 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f32:	83 c4 10             	add    esp,0x10
c0012f35:	85 db                	test   ebx,ebx
c0012f37:	74 5b                	je     c0012f94 <VAS::tryLoadBackOffDisk(unsigned long)+0xcc>
c0012f39:	85 ed                	test   ebp,ebp
c0012f3b:	74 21                	je     c0012f5e <VAS::tryLoadBackOffDisk(unsigned long)+0x96>
c0012f3d:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c0012f40:	f7 c6 00 02 00 00    	test   esi,0x200
c0012f46:	0f 85 c5 00 00 00    	jne    c0013011 <VAS::tryLoadBackOffDisk(unsigned long)+0x149>
c0012f4c:	89 f0                	mov    eax,esi
c0012f4e:	25 01 04 00 00       	and    eax,0x401
c0012f53:	3d 00 04 00 00       	cmp    eax,0x400
c0012f58:	0f 84 39 01 00 00    	je     c0013097 <VAS::tryLoadBackOffDisk(unsigned long)+0x1cf>
c0012f5e:	83 ec 08             	sub    esp,0x8
c0012f61:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c0012f66:	50                   	push   eax
c0012f67:	68 4c 31 02 c0       	push   0xc002314c
c0012f6c:	e8 f3 3f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f71:	5a                   	pop    edx
c0012f72:	8b 1d b0 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6b0
c0012f78:	59                   	pop    ecx
c0012f79:	53                   	push   ebx
c0012f7a:	68 70 31 02 c0       	push   0xc0023170
c0012f7f:	e8 e0 3f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f84:	83 c4 10             	add    esp,0x10
c0012f87:	31 c0                	xor    eax,eax
c0012f89:	81 c4 0c 10 00 00    	add    esp,0x100c
c0012f8f:	5b                   	pop    ebx
c0012f90:	5e                   	pop    esi
c0012f91:	5f                   	pop    edi
c0012f92:	5d                   	pop    ebp
c0012f93:	c3                   	ret    
c0012f94:	83 ec 08             	sub    esp,0x8
c0012f97:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c0012f9c:	50                   	push   eax
c0012f9d:	68 7c 2f 02 c0       	push   0xc0022f7c
c0012fa2:	e8 bd 3f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012fa7:	58                   	pop    eax
c0012fa8:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0012fae:	5a                   	pop    edx
c0012faf:	51                   	push   ecx
c0012fb0:	68 a0 2f 02 c0       	push   0xc0022fa0
c0012fb5:	e8 aa 3f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012fba:	83 c4 10             	add    esp,0x10
c0012fbd:	31 c0                	xor    eax,eax
c0012fbf:	81 c4 0c 10 00 00    	add    esp,0x100c
c0012fc5:	5b                   	pop    ebx
c0012fc6:	5e                   	pop    esi
c0012fc7:	5f                   	pop    edi
c0012fc8:	5d                   	pop    ebp
c0012fc9:	c3                   	ret    
c0012fca:	83 ec 0c             	sub    esp,0xc
c0012fcd:	68 79 33 02 c0       	push   0xc0023379
c0012fd2:	e8 bf bd ff ff       	call   c000ed96 <KePanic(char const*)>
c0012fd7:	5f                   	pop    edi
c0012fd8:	58                   	pop    eax
c0012fd9:	56                   	push   esi
c0012fda:	68 04 2f 02 c0       	push   0xc0022f04
c0012fdf:	e8 80 3f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012fe4:	58                   	pop    eax
c0012fe5:	8b 0d 8c d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d68c
c0012feb:	5a                   	pop    edx
c0012fec:	51                   	push   ecx
c0012fed:	68 34 2f 02 c0       	push   0xc0022f34
c0012ff2:	e8 6d 3f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012ff7:	5e                   	pop    esi
c0012ff8:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0012ffd:	5f                   	pop    edi
c0012ffe:	50                   	push   eax
c0012fff:	68 58 2f 02 c0       	push   0xc0022f58
c0013004:	e8 5b 3f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013009:	83 c4 10             	add    esp,0x10
c001300c:	e9 28 ff ff ff       	jmp    c0012f39 <VAS::tryLoadBackOffDisk(unsigned long)+0x71>
c0013011:	83 ec 0c             	sub    esp,0xc
c0013014:	68 c4 2f 02 c0       	push   0xc0022fc4
c0013019:	e8 46 3f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001301e:	e8 67 bf ff ff       	call   c000ef8a <Phys::allocatePage()>
c0013023:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013026:	83 ca 01             	or     edx,0x1
c0013029:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c001302c:	0f 20 da             	mov    edx,cr3
c001302f:	0f 22 da             	mov    cr3,edx
c0013032:	ba 00 10 00 00       	mov    edx,0x1000
c0013037:	89 de                	mov    esi,ebx
c0013039:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001303d:	89 d1                	mov    ecx,edx
c001303f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013041:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013044:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c001304a:	09 c8                	or     eax,ecx
c001304c:	83 c8 02             	or     eax,0x2
c001304f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013052:	0f 20 d8             	mov    eax,cr3
c0013055:	0f 22 d8             	mov    cr3,eax
c0013058:	8d 74 24 10          	lea    esi,[esp+0x10]
c001305c:	89 df                	mov    edi,ebx
c001305e:	89 d1                	mov    ecx,edx
c0013060:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013062:	8b 35 8c d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d68c
c0013068:	59                   	pop    ecx
c0013069:	5b                   	pop    ebx
c001306a:	56                   	push   esi
c001306b:	68 e4 2f 02 c0       	push   0xc0022fe4
c0013070:	e8 ef 3e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013075:	5f                   	pop    edi
c0013076:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c001307b:	5d                   	pop    ebp
c001307c:	50                   	push   eax
c001307d:	68 08 30 02 c0       	push   0xc0023008
c0013082:	e8 dd 3e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013087:	83 c4 10             	add    esp,0x10
c001308a:	b0 01                	mov    al,0x1
c001308c:	81 c4 0c 10 00 00    	add    esp,0x100c
c0013092:	5b                   	pop    ebx
c0013093:	5e                   	pop    esi
c0013094:	5f                   	pop    edi
c0013095:	5d                   	pop    ebp
c0013096:	c3                   	ret    
c0013097:	83 ec 08             	sub    esp,0x8
c001309a:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c001309f:	c1 ee 0c             	shr    esi,0xc
c00130a2:	50                   	push   eax
c00130a3:	68 2c 30 02 c0       	push   0xc002302c
c00130a8:	e8 b7 3e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00130ad:	e8 d8 be ff ff       	call   c000ef8a <Phys::allocatePage()>
c00130b2:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c00130b8:	89 c7                	mov    edi,eax
c00130ba:	58                   	pop    eax
c00130bb:	5a                   	pop    edx
c00130bc:	51                   	push   ecx
c00130bd:	68 50 30 02 c0       	push   0xc0023050
c00130c2:	e8 9d 3e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00130c7:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00130ca:	83 c4 10             	add    esp,0x10
c00130cd:	81 e2 ff 0f 00 00    	and    edx,0xfff
c00130d3:	09 fa                	or     edx,edi
c00130d5:	81 ca 01 08 00 00    	or     edx,0x801
c00130db:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c00130de:	8b 3d cc 4f 02 c0    	mov    edi,DWORD PTR ds:0xc0024fcc
c00130e4:	85 ff                	test   edi,edi
c00130e6:	7e 65                	jle    c001314d <VAS::tryLoadBackOffDisk(unsigned long)+0x285>
c00130e8:	89 dd                	mov    ebp,ebx
c00130ea:	31 ff                	xor    edi,edi
c00130ec:	83 ec 08             	sub    esp,0x8
c00130ef:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00130f4:	50                   	push   eax
c00130f5:	68 04 31 02 c0       	push   0xc0023104
c00130fa:	e8 65 3e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00130ff:	89 34 24             	mov    DWORD PTR [esp],esi
c0013102:	e8 02 f2 ff ff       	call   c0012309 <Virt::swapIDToSector(unsigned long)>
c0013107:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001310a:	01 f8                	add    eax,edi
c001310c:	6a 01                	push   0x1
c001310e:	31 d2                	xor    edx,edx
c0013110:	83 c7 01             	add    edi,0x1
c0013113:	52                   	push   edx
c0013114:	81 c5 00 02 00 00    	add    ebp,0x200
c001311a:	50                   	push   eax
c001311b:	0f be 05 d8 4f 02 c0 	movsx  eax,BYTE PTR ds:0xc0024fd8
c0013122:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c0013129:	50                   	push   eax
c001312a:	e8 89 6f ff ff       	call   c000a0b8 <LogicalDisk::read(unsigned long long, int, void*)>
c001312f:	83 c4 18             	add    esp,0x18
c0013132:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0013137:	50                   	push   eax
c0013138:	68 28 31 02 c0       	push   0xc0023128
c001313d:	e8 22 3e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013142:	83 c4 10             	add    esp,0x10
c0013145:	39 3d cc 4f 02 c0    	cmp    DWORD PTR ds:0xc0024fcc,edi
c001314b:	7f 9f                	jg     c00130ec <VAS::tryLoadBackOffDisk(unsigned long)+0x224>
c001314d:	83 ec 08             	sub    esp,0x8
c0013150:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0013155:	50                   	push   eax
c0013156:	68 74 30 02 c0       	push   0xc0023074
c001315b:	e8 04 3e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013160:	83 c4 0c             	add    esp,0xc
c0013163:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0013168:	83 e8 01             	sub    eax,0x1
c001316b:	50                   	push   eax
c001316c:	a3 c8 ce 02 c0       	mov    ds:0xc002cec8,eax
c0013171:	53                   	push   ebx
c0013172:	68 8b 33 02 c0       	push   0xc002338b
c0013177:	e8 e8 3d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001317c:	89 34 24             	mov    DWORD PTR [esp],esi
c001317f:	e8 62 f1 ff ff       	call   c00122e6 <Virt::freeSwapfilePage(unsigned long)>
c0013184:	58                   	pop    eax
c0013185:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c001318b:	5a                   	pop    edx
c001318c:	51                   	push   ecx
c001318d:	68 98 30 02 c0       	push   0xc0023098
c0013192:	e8 cd 3d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013197:	0f 20 d8             	mov    eax,cr3
c001319a:	0f 22 d8             	mov    cr3,eax
c001319d:	c7 04 24 a0 33 02 c0 	mov    DWORD PTR [esp],0xc00233a0
c00131a4:	e8 bb 3d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00131a9:	5b                   	pop    ebx
c00131aa:	8b 3d 8c d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d68c
c00131b0:	5e                   	pop    esi
c00131b1:	57                   	push   edi
c00131b2:	68 bc 30 02 c0       	push   0xc00230bc
c00131b7:	e8 a8 3d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00131bc:	5d                   	pop    ebp
c00131bd:	58                   	pop    eax
c00131be:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00131c3:	50                   	push   eax
c00131c4:	68 e0 30 02 c0       	push   0xc00230e0
c00131c9:	e8 96 3d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00131ce:	83 c4 10             	add    esp,0x10
c00131d1:	b0 01                	mov    al,0x1
c00131d3:	e9 b1 fd ff ff       	jmp    c0012f89 <VAS::tryLoadBackOffDisk(unsigned long)+0xc1>

c00131d8 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c00131d8:	55                   	push   ebp
c00131d9:	57                   	push   edi
c00131da:	56                   	push   esi
c00131db:	53                   	push   ebx
c00131dc:	83 ec 28             	sub    esp,0x28
c00131df:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00131e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00131e7:	50                   	push   eax
c00131e8:	e8 d4 ef ff ff       	call   c00121c1 <Virt::allocateKernelVirtualPages(int)>
c00131ed:	83 c4 0c             	add    esp,0xc
c00131f0:	89 c5                	mov    ebp,eax
c00131f2:	6a 07                	push   0x7
c00131f4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00131f8:	52                   	push   edx
c00131f9:	56                   	push   esi
c00131fa:	e8 a9 f7 ff ff       	call   c00129a8 <VAS::allocatePages(int, int)>
c00131ff:	83 c4 10             	add    esp,0x10
c0013202:	89 c7                	mov    edi,eax
c0013204:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0013208:	85 c9                	test   ecx,ecx
c001320a:	74 2f                	je     c001323b <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c001320c:	31 db                	xor    ebx,ebx
c001320e:	e8 77 bd ff ff       	call   c000ef8a <Phys::allocatePage()>
c0013213:	83 c3 01             	add    ebx,0x1
c0013216:	6a 03                	push   0x3
c0013218:	55                   	push   ebp
c0013219:	50                   	push   eax
c001321a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001321e:	56                   	push   esi
c001321f:	e8 80 f6 ff ff       	call   c00128a4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013224:	6a 07                	push   0x7
c0013226:	57                   	push   edi
c0013227:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001322b:	50                   	push   eax
c001322c:	56                   	push   esi
c001322d:	e8 72 f6 ff ff       	call   c00128a4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013232:	83 c4 20             	add    esp,0x20
c0013235:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c0013239:	75 d3                	jne    c001320e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c001323b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001323f:	89 28                	mov    DWORD PTR [eax],ebp
c0013241:	83 c4 1c             	add    esp,0x1c
c0013244:	89 f8                	mov    eax,edi
c0013246:	5b                   	pop    ebx
c0013247:	5e                   	pop    esi
c0013248:	5f                   	pop    edi
c0013249:	5d                   	pop    ebp
c001324a:	c3                   	ret    
c001324b:	90                   	nop

c001324c <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c001324c:	53                   	push   ebx
c001324d:	83 ec 14             	sub    esp,0x14
c0013250:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0013254:	68 94 31 02 c0       	push   0xc0023194
c0013259:	e8 06 3d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001325e:	c7 04 24 f4 31 02 c0 	mov    DWORD PTR [esp],0xc00231f4
c0013265:	e8 fa 3c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001326a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001326e:	83 c4 18             	add    esp,0x18
c0013271:	5b                   	pop    ebx
c0013272:	e9 52 f2 ff ff       	jmp    c00124c9 <Virt::freeKernelVirtualPages(unsigned long)>
c0013277:	90                   	nop

c0013278 <VAS::scanForEviction()>:
c0013278:	57                   	push   edi
c0013279:	56                   	push   esi
c001327a:	31 f6                	xor    esi,esi
c001327c:	53                   	push   ebx
c001327d:	83 ec 18             	sub    esp,0x18
c0013280:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013284:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0013289:	50                   	push   eax
c001328a:	68 70 32 02 c0       	push   0xc0023270
c001328f:	e8 d0 3c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013294:	c7 04 24 a7 33 02 c0 	mov    DWORD PTR [esp],0xc00233a7
c001329b:	e8 c4 3c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00132a0:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00132a3:	83 c4 10             	add    esp,0x10
c00132a6:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00132ac:	75 0e                	jne    c00132bc <VAS::scanForEviction()+0x44>
c00132ae:	89 da                	mov    edx,ebx
c00132b0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00132b3:	c1 ea 16             	shr    edx,0x16
c00132b6:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00132ba:	74 5b                	je     c0013317 <VAS::scanForEviction()+0x9f>
c00132bc:	83 ec 08             	sub    esp,0x8
c00132bf:	53                   	push   ebx
c00132c0:	57                   	push   edi
c00132c1:	e8 e4 f1 ff ff       	call   c00124aa <VAS::getPageTableEntry(unsigned long)>
c00132c6:	83 c4 10             	add    esp,0x10
c00132c9:	8b 10                	mov    edx,DWORD PTR [eax]
c00132cb:	89 d1                	mov    ecx,edx
c00132cd:	c1 e9 0c             	shr    ecx,0xc
c00132d0:	74 10                	je     c00132e2 <VAS::scanForEviction()+0x6a>
c00132d2:	89 d1                	mov    ecx,edx
c00132d4:	81 e1 01 08 00 00    	and    ecx,0x801
c00132da:	81 f9 01 08 00 00    	cmp    ecx,0x801
c00132e0:	74 40                	je     c0013322 <VAS::scanForEviction()+0xaa>
c00132e2:	81 c3 00 10 00 00    	add    ebx,0x1000
c00132e8:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c00132ee:	76 2d                	jbe    c001331d <VAS::scanForEviction()+0xa5>
c00132f0:	83 c6 01             	add    esi,0x1
c00132f3:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c00132fa:	83 fe 03             	cmp    esi,0x3
c00132fd:	74 32                	je     c0013331 <VAS::scanForEviction()+0xb9>
c00132ff:	31 db                	xor    ebx,ebx
c0013301:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0013307:	75 b3                	jne    c00132bc <VAS::scanForEviction()+0x44>
c0013309:	89 da                	mov    edx,ebx
c001330b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001330e:	c1 ea 16             	shr    edx,0x16
c0013311:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0013315:	75 a5                	jne    c00132bc <VAS::scanForEviction()+0x44>
c0013317:	81 c3 00 00 40 00    	add    ebx,0x400000
c001331d:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0013320:	eb 84                	jmp    c00132a6 <VAS::scanForEviction()+0x2e>
c0013322:	f6 c2 20             	test   dl,0x20
c0013325:	74 13                	je     c001333a <VAS::scanForEviction()+0xc2>
c0013327:	83 e2 df             	and    edx,0xffffffdf
c001332a:	89 10                	mov    DWORD PTR [eax],edx
c001332c:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001332f:	eb b1                	jmp    c00132e2 <VAS::scanForEviction()+0x6a>
c0013331:	83 c4 10             	add    esp,0x10
c0013334:	31 c0                	xor    eax,eax
c0013336:	5b                   	pop    ebx
c0013337:	5e                   	pop    esi
c0013338:	5f                   	pop    edi
c0013339:	c3                   	ret    
c001333a:	83 ec 08             	sub    esp,0x8
c001333d:	89 d0                	mov    eax,edx
c001333f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013344:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013348:	53                   	push   ebx
c0013349:	68 c3 33 02 c0       	push   0xc00233c3
c001334e:	e8 11 3c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013353:	58                   	pop    eax
c0013354:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0013357:	5a                   	pop    edx
c0013358:	51                   	push   ecx
c0013359:	57                   	push   edi
c001335a:	e8 65 fa ff ff       	call   c0012dc4 <VAS::evict(unsigned long)>
c001335f:	5b                   	pop    ebx
c0013360:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0013363:	5e                   	pop    esi
c0013364:	50                   	push   eax
c0013365:	68 d7 33 02 c0       	push   0xc00233d7
c001336a:	e8 f5 3b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001336f:	58                   	pop    eax
c0013370:	5a                   	pop    edx
c0013371:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013375:	50                   	push   eax
c0013376:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001337a:	68 ea 33 02 c0       	push   0xc00233ea
c001337f:	e8 e0 3b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013384:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0013387:	81 c1 00 10 00 00    	add    ecx,0x1000
c001338d:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0013390:	8b 3d b0 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d6b0
c0013396:	5b                   	pop    ebx
c0013397:	5e                   	pop    esi
c0013398:	57                   	push   edi
c0013399:	68 90 32 02 c0       	push   0xc0023290
c001339e:	e8 c1 3b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00133a3:	83 c4 10             	add    esp,0x10
c00133a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00133aa:	83 c4 10             	add    esp,0x10
c00133ad:	5b                   	pop    ebx
c00133ae:	5e                   	pop    esi
c00133af:	5f                   	pop    edi
c00133b0:	c3                   	ret    

c00133b1 <mapVASFirstTime>:
c00133b1:	55                   	push   ebp
c00133b2:	57                   	push   edi
c00133b3:	56                   	push   esi
c00133b4:	53                   	push   ebx
c00133b5:	83 ec 0c             	sub    esp,0xc
c00133b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00133bd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00133c0:	83 fa 01             	cmp    edx,0x1
c00133c3:	0f 84 cb 00 00 00    	je     c0013494 <mapVASFirstTime+0xe3>
c00133c9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00133cc:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c00133cf:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00133d4:	c1 e5 15             	shl    ebp,0x15
c00133d7:	bf 00 90 e7 01       	mov    edi,0x1e79000
c00133dc:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c00133e2:	29 eb                	sub    ebx,ebp
c00133e4:	29 ef                	sub    edi,ebp
c00133e6:	e8 9f bb ff ff       	call   c000ef8a <Phys::allocatePage()>
c00133eb:	83 ec 0c             	sub    esp,0xc
c00133ee:	68 03 04 00 00       	push   0x403
c00133f3:	6a 01                	push   0x1
c00133f5:	53                   	push   ebx
c00133f6:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00133fc:	50                   	push   eax
c00133fd:	56                   	push   esi
c00133fe:	e8 8b f6 ff ff       	call   c0012a8e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013403:	83 c4 20             	add    esp,0x20
c0013406:	39 fb                	cmp    ebx,edi
c0013408:	75 dc                	jne    c00133e6 <mapVASFirstTime+0x35>
c001340a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c001340f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0013414:	29 eb                	sub    ebx,ebp
c0013416:	29 ef                	sub    edi,ebp
c0013418:	e8 6d bb ff ff       	call   c000ef8a <Phys::allocatePage()>
c001341d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0013421:	83 fa 01             	cmp    edx,0x1
c0013424:	19 d2                	sbb    edx,edx
c0013426:	83 ec 0c             	sub    esp,0xc
c0013429:	83 e2 04             	and    edx,0x4
c001342c:	81 c2 03 04 00 00    	add    edx,0x403
c0013432:	52                   	push   edx
c0013433:	6a 01                	push   0x1
c0013435:	53                   	push   ebx
c0013436:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001343c:	50                   	push   eax
c001343d:	56                   	push   esi
c001343e:	e8 4b f6 ff ff       	call   c0012a8e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013443:	83 c4 20             	add    esp,0x20
c0013446:	39 df                	cmp    edi,ebx
c0013448:	75 ce                	jne    c0013418 <mapVASFirstTime+0x67>
c001344a:	83 ec 0c             	sub    esp,0xc
c001344d:	bb 7c 70 02 c0       	mov    ebx,0xc002707c
c0013452:	6a 04                	push   0x4
c0013454:	81 eb 00 60 02 c0    	sub    ebx,0xc0026000
c001345a:	6a ff                	push   0xffffffff
c001345c:	c1 eb 0c             	shr    ebx,0xc
c001345f:	53                   	push   ebx
c0013460:	68 00 60 02 c0       	push   0xc0026000
c0013465:	56                   	push   esi
c0013466:	e8 d9 f1 ff ff       	call   c0012644 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001346b:	83 c4 14             	add    esp,0x14
c001346e:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c0013473:	6a 04                	push   0x4
c0013475:	6a ff                	push   0xffffffff
c0013477:	53                   	push   ebx
c0013478:	68 00 60 02 c0       	push   0xc0026000
c001347d:	50                   	push   eax
c001347e:	e8 c1 f1 ff ff       	call   c0012644 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013483:	0f 20 d8             	mov    eax,cr3
c0013486:	0f 22 d8             	mov    cr3,eax
c0013489:	83 c4 20             	add    esp,0x20
c001348c:	83 c4 0c             	add    esp,0xc
c001348f:	5b                   	pop    ebx
c0013490:	5e                   	pop    esi
c0013491:	5f                   	pop    edi
c0013492:	5d                   	pop    ebp
c0013493:	c3                   	ret    
c0013494:	83 ec 0c             	sub    esp,0xc
c0013497:	68 f7 33 02 c0       	push   0xc00233f7
c001349c:	e8 c3 3a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00134a1:	83 c4 10             	add    esp,0x10
c00134a4:	83 c4 0c             	add    esp,0xc
c00134a7:	5b                   	pop    ebx
c00134a8:	5e                   	pop    esi
c00134a9:	5f                   	pop    edi
c00134aa:	5d                   	pop    ebp
c00134ab:	c3                   	ret    

c00134ac <SysEject(regs*)>:
c00134ac:	83 ec 0c             	sub    esp,0xc
c00134af:	83 ca ff             	or     edx,0xffffffff
c00134b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134b6:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00134b9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00134be:	83 e9 41             	sub    ecx,0x41
c00134c1:	83 f9 19             	cmp    ecx,0x19
c00134c4:	77 18                	ja     c00134de <SysEject(regs*)+0x32>
c00134c6:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00134cd:	85 c9                	test   ecx,ecx
c00134cf:	74 0d                	je     c00134de <SysEject(regs*)+0x32>
c00134d1:	83 ec 0c             	sub    esp,0xc
c00134d4:	51                   	push   ecx
c00134d5:	e8 74 6b ff ff       	call   c000a04e <LogicalDisk::eject()>
c00134da:	83 c4 10             	add    esp,0x10
c00134dd:	99                   	cdq    
c00134de:	83 c4 0c             	add    esp,0xc
c00134e1:	c3                   	ret    

c00134e2 <SysExit(regs*)>:
c00134e2:	83 ec 18             	sub    esp,0x18
c00134e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134e9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00134ec:	e8 cb 2a 00 00       	call   c0015fbc <terminateTask(int)>
c00134f1:	83 c8 ff             	or     eax,0xffffffff
c00134f4:	83 c4 1c             	add    esp,0x1c
c00134f7:	89 c2                	mov    edx,eax
c00134f9:	c3                   	ret    

c00134fa <SysGetCwd(regs*)>:
c00134fa:	83 ec 10             	sub    esp,0x10
c00134fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013501:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013504:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013507:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001350c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001350f:	e8 b2 48 ff ff       	call   c0007dc6 <Fs::getcwd(Process*, char*, int)>
c0013514:	83 c4 1c             	add    esp,0x1c
c0013517:	99                   	cdq    
c0013518:	c3                   	ret    

c0013519 <SysGetPID(regs*)>:
c0013519:	83 ec 14             	sub    esp,0x14
c001351c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013521:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013524:	ff 30                	push   DWORD PTR [eax]
c0013526:	68 10 34 02 c0       	push   0xc0023410
c001352b:	e8 34 3a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013530:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013535:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013538:	8b 00                	mov    eax,DWORD PTR [eax]
c001353a:	83 c4 1c             	add    esp,0x1c
c001353d:	99                   	cdq    
c001353e:	c3                   	ret    

c001353f <SysGetRAMData(regs*)>:
c001353f:	8b 0d ac cd 02 c0    	mov    ecx,DWORD PTR ds:0xc002cdac
c0013545:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c001354a:	03 05 a8 cd 02 c0    	add    eax,DWORD PTR ds:0xc002cda8
c0013550:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c0013556:	99                   	cdq    
c0013557:	f7 f9                	idiv   ecx
c0013559:	c1 e0 18             	shl    eax,0x18
c001355c:	09 c8                	or     eax,ecx
c001355e:	99                   	cdq    
c001355f:	c3                   	ret    

c0013560 <SysGetVGAPtr(regs*)>:
c0013560:	55                   	push   ebp
c0013561:	57                   	push   edi
c0013562:	56                   	push   esi
c0013563:	53                   	push   ebx
c0013564:	83 ec 0c             	sub    esp,0xc
c0013567:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001356b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001356e:	83 f8 ff             	cmp    eax,0xffffffff
c0013571:	74 1b                	je     c001358e <SysGetVGAPtr(regs*)+0x2e>
c0013573:	83 ec 0c             	sub    esp,0xc
c0013576:	50                   	push   eax
c0013577:	e8 f0 24 00 00       	call   c0015a6c <Thr::processFromPID(int)>
c001357c:	83 c4 10             	add    esp,0x10
c001357f:	89 c1                	mov    ecx,eax
c0013581:	31 d2                	xor    edx,edx
c0013583:	b8 01 00 00 00       	mov    eax,0x1
c0013588:	85 c9                	test   ecx,ecx
c001358a:	75 0a                	jne    c0013596 <SysGetVGAPtr(regs*)+0x36>
c001358c:	eb 61                	jmp    c00135ef <SysGetVGAPtr(regs*)+0x8f>
c001358e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013593:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0013596:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c001359c:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00135a0:	74 0c                	je     c00135ae <SysGetVGAPtr(regs*)+0x4e>
c00135a2:	83 ec 0c             	sub    esp,0xc
c00135a5:	55                   	push   ebp
c00135a6:	e8 96 dc ff ff       	call   c0011241 <setActiveTerminal(VgaText*)>
c00135ab:	83 c4 10             	add    esp,0x10
c00135ae:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00135b1:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00135b4:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00135b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00135bb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00135be:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00135c1:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00135c7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00135ca:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00135cd:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00135d3:	50                   	push   eax
c00135d4:	50                   	push   eax
c00135d5:	68 1f 34 02 c0       	push   0xc002341f
c00135da:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00135dd:	05 a8 0f 00 00       	add    eax,0xfa8
c00135e2:	50                   	push   eax
c00135e3:	e8 58 d0 fe ff       	call   c0000640 <strcpy>
c00135e8:	83 c4 10             	add    esp,0x10
c00135eb:	31 c0                	xor    eax,eax
c00135ed:	31 d2                	xor    edx,edx
c00135ef:	83 c4 0c             	add    esp,0xc
c00135f2:	5b                   	pop    ebx
c00135f3:	5e                   	pop    esi
c00135f4:	5f                   	pop    edi
c00135f5:	5d                   	pop    ebp
c00135f6:	c3                   	ret    
c00135f7:	90                   	nop

c00135f8 <SysKill(regs*)>:
c00135f8:	53                   	push   ebx
c00135f9:	83 ec 08             	sub    esp,0x8
c00135fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013600:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013604:	75 16                	jne    c001361c <SysKill(regs*)+0x24>
c0013606:	83 ec 0c             	sub    esp,0xc
c0013609:	68 29 34 02 c0       	push   0xc0023429
c001360e:	e8 83 b7 ff ff       	call   c000ed96 <KePanic(char const*)>
c0013613:	83 c4 10             	add    esp,0x10
c0013616:	e9 89 00 00 00       	jmp    c00136a4 <SysKill(regs*)+0xac>
c001361b:	90                   	nop
c001361c:	83 ec 0c             	sub    esp,0xc
c001361f:	68 cc d6 02 c0       	push   0xc002d6cc
c0013624:	e8 cf ce 00 00       	call   c00204f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013629:	8d 76 00             	lea    esi,[esi+0x0]
c001362c:	83 c4 10             	add    esp,0x10
c001362f:	85 c0                	test   eax,eax
c0013631:	74 19                	je     c001364c <SysKill(regs*)+0x54>
c0013633:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013636:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013639:	39 0a                	cmp    DWORD PTR [edx],ecx
c001363b:	74 33                	je     c0013670 <SysKill(regs*)+0x78>
c001363d:	52                   	push   edx
c001363e:	52                   	push   edx
c001363f:	50                   	push   eax
c0013640:	68 cc d6 02 c0       	push   0xc002d6cc
c0013645:	e8 ba d3 00 00       	call   c0020a04 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001364a:	eb e0                	jmp    c001362c <SysKill(regs*)+0x34>
c001364c:	83 ec 0c             	sub    esp,0xc
c001364f:	68 c0 d6 02 c0       	push   0xc002d6c0
c0013654:	e8 9f ce 00 00       	call   c00204f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013659:	8d 76 00             	lea    esi,[esi+0x0]
c001365c:	83 c4 10             	add    esp,0x10
c001365f:	85 c0                	test   eax,eax
c0013661:	74 41                	je     c00136a4 <SysKill(regs*)+0xac>
c0013663:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013666:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013669:	39 0a                	cmp    DWORD PTR [edx],ecx
c001366b:	75 27                	jne    c0013694 <SysKill(regs*)+0x9c>
c001366d:	8d 76 00             	lea    esi,[esi+0x0]
c0013670:	51                   	push   ecx
c0013671:	51                   	push   ecx
c0013672:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013675:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001367a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001367d:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013683:	e8 57 c8 ff ff       	call   c000fedf <KeRaiseSignal(SigHandlerBlock*, int)>
c0013688:	83 c4 10             	add    esp,0x10
c001368b:	31 c0                	xor    eax,eax
c001368d:	31 d2                	xor    edx,edx
c001368f:	eb 1b                	jmp    c00136ac <SysKill(regs*)+0xb4>
c0013691:	8d 76 00             	lea    esi,[esi+0x0]
c0013694:	52                   	push   edx
c0013695:	52                   	push   edx
c0013696:	50                   	push   eax
c0013697:	68 c0 d6 02 c0       	push   0xc002d6c0
c001369c:	e8 63 d3 00 00       	call   c0020a04 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00136a1:	eb b9                	jmp    c001365c <SysKill(regs*)+0x64>
c00136a3:	90                   	nop
c00136a4:	83 c8 ff             	or     eax,0xffffffff
c00136a7:	89 c2                	mov    edx,eax
c00136a9:	8d 76 00             	lea    esi,[esi+0x0]
c00136ac:	83 c4 08             	add    esp,0x8
c00136af:	5b                   	pop    ebx
c00136b0:	c3                   	ret    

c00136b1 <SysLoadDLL(regs*)>:
c00136b1:	56                   	push   esi
c00136b2:	53                   	push   ebx
c00136b3:	31 d2                	xor    edx,edx
c00136b5:	51                   	push   ecx
c00136b6:	b8 01 00 00 00       	mov    eax,0x1
c00136bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136bf:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00136c3:	0f 84 8c 00 00 00    	je     c0013755 <SysLoadDLL(regs*)+0xa4>
c00136c9:	83 ec 0c             	sub    esp,0xc
c00136cc:	68 14 01 00 00       	push   0x114
c00136d1:	e8 79 b3 ff ff       	call   c000ea4f <malloc>
c00136d6:	83 c4 0c             	add    esp,0xc
c00136d9:	89 c3                	mov    ebx,eax
c00136db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136e0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00136e3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00136e6:	53                   	push   ebx
c00136e7:	e8 46 4a ff ff       	call   c0008132 <File::File(char const*, Process*)>
c00136ec:	83 c4 10             	add    esp,0x10
c00136ef:	31 d2                	xor    edx,edx
c00136f1:	b8 02 00 00 00       	mov    eax,0x2
c00136f6:	85 db                	test   ebx,ebx
c00136f8:	74 5b                	je     c0013755 <SysLoadDLL(regs*)+0xa4>
c00136fa:	83 ec 0c             	sub    esp,0xc
c00136fd:	53                   	push   ebx
c00136fe:	e8 11 4d ff ff       	call   c0008414 <File::exists()>
c0013703:	83 c4 10             	add    esp,0x10
c0013706:	84 c0                	test   al,al
c0013708:	8b 03                	mov    eax,DWORD PTR [ebx]
c001370a:	75 11                	jne    c001371d <SysLoadDLL(regs*)+0x6c>
c001370c:	83 ec 0c             	sub    esp,0xc
c001370f:	53                   	push   ebx
c0013710:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013713:	83 c4 10             	add    esp,0x10
c0013716:	b8 03 00 00 00       	mov    eax,0x3
c001371b:	eb 36                	jmp    c0013753 <SysLoadDLL(regs*)+0xa2>
c001371d:	83 ec 0c             	sub    esp,0xc
c0013720:	53                   	push   ebx
c0013721:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013724:	58                   	pop    eax
c0013725:	5a                   	pop    edx
c0013726:	6a 00                	push   0x0
c0013728:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001372b:	e8 e8 15 00 00       	call   c0014d18 <Thr::loadDLL(char const*, bool)>
c0013730:	83 c4 10             	add    esp,0x10
c0013733:	89 c1                	mov    ecx,eax
c0013735:	31 d2                	xor    edx,edx
c0013737:	b8 04 00 00 00       	mov    eax,0x4
c001373c:	85 c9                	test   ecx,ecx
c001373e:	74 15                	je     c0013755 <SysLoadDLL(regs*)+0xa4>
c0013740:	53                   	push   ebx
c0013741:	53                   	push   ebx
c0013742:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c0013748:	51                   	push   ecx
c0013749:	e8 1c 18 00 00       	call   c0014f6a <Thr::executeDLL(unsigned long, void*)>
c001374e:	83 c4 10             	add    esp,0x10
c0013751:	31 c0                	xor    eax,eax
c0013753:	31 d2                	xor    edx,edx
c0013755:	59                   	pop    ecx
c0013756:	5b                   	pop    ebx
c0013757:	5e                   	pop    esi
c0013758:	c3                   	ret    

c0013759 <SysRead(regs*)>:
c0013759:	57                   	push   edi
c001375a:	56                   	push   esi
c001375b:	53                   	push   ebx
c001375c:	83 ec 10             	sub    esp,0x10
c001375f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013763:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013766:	83 f8 02             	cmp    eax,0x2
c0013769:	77 10                	ja     c001377b <SysRead(regs*)+0x22>
c001376b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013770:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013773:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013779:	eb 0e                	jmp    c0013789 <SysRead(regs*)+0x30>
c001377b:	83 ec 0c             	sub    esp,0xc
c001377e:	50                   	push   eax
c001377f:	e8 99 e8 ff ff       	call   c001201d <KeGetFileFromDescriptor(int)>
c0013784:	83 c4 10             	add    esp,0x10
c0013787:	89 c1                	mov    ecx,eax
c0013789:	83 c8 ff             	or     eax,0xffffffff
c001378c:	85 c9                	test   ecx,ecx
c001378e:	89 c2                	mov    edx,eax
c0013790:	74 28                	je     c00137ba <SysRead(regs*)+0x61>
c0013792:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001379a:	31 ff                	xor    edi,edi
c001379c:	83 ec 0c             	sub    esp,0xc
c001379f:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137a1:	8d 54 24 18          	lea    edx,[esp+0x18]
c00137a5:	52                   	push   edx
c00137a6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00137a9:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00137ac:	57                   	push   edi
c00137ad:	56                   	push   esi
c00137ae:	51                   	push   ecx
c00137af:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00137b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00137b6:	83 c4 20             	add    esp,0x20
c00137b9:	99                   	cdq    
c00137ba:	83 c4 10             	add    esp,0x10
c00137bd:	5b                   	pop    ebx
c00137be:	5e                   	pop    esi
c00137bf:	5f                   	pop    edi
c00137c0:	c3                   	ret    

c00137c1 <SysRegisterSignal(regs*)>:
c00137c1:	83 ec 18             	sub    esp,0x18
c00137c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00137c8:	6a 00                	push   0x0
c00137ca:	6a 00                	push   0x0
c00137cc:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00137cf:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00137d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137d7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00137da:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00137e0:	e8 c4 c6 ff ff       	call   c000fea9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00137e5:	83 c4 2c             	add    esp,0x2c
c00137e8:	99                   	cdq    
c00137e9:	c3                   	ret    

c00137ea <SysRegistryGetTypeFromPath(regs*)>:
c00137ea:	53                   	push   ebx
c00137eb:	81 ec 40 01 00 00    	sub    esp,0x140
c00137f1:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00137f8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00137fb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00137fe:	e8 a5 9b ff ff       	call   c000d3a8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013803:	83 c4 10             	add    esp,0x10
c0013806:	89 c1                	mov    ecx,eax
c0013808:	85 c0                	test   eax,eax
c001380a:	74 15                	je     c0013821 <SysRegistryGetTypeFromPath(regs*)+0x37>
c001380c:	50                   	push   eax
c001380d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0013811:	50                   	push   eax
c0013812:	51                   	push   ecx
c0013813:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013816:	e8 71 97 ff ff       	call   c000cf8c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001381b:	83 c4 10             	add    esp,0x10
c001381e:	99                   	cdq    
c001381f:	eb 05                	jmp    c0013826 <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0013821:	83 c8 ff             	or     eax,0xffffffff
c0013824:	89 c2                	mov    edx,eax
c0013826:	81 c4 38 01 00 00    	add    esp,0x138
c001382c:	5b                   	pop    ebx
c001382d:	c3                   	ret    

c001382e <SysRegistryReadExtent(regs*)>:
c001382e:	83 ec 1c             	sub    esp,0x1c
c0013831:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013835:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013838:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001383b:	85 c0                	test   eax,eax
c001383d:	79 1f                	jns    c001385e <SysRegistryReadExtent(regs*)+0x30>
c001383f:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013844:	52                   	push   edx
c0013845:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013849:	52                   	push   edx
c001384a:	50                   	push   eax
c001384b:	51                   	push   ecx
c001384c:	e8 2d 96 ff ff       	call   c000ce7e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013851:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013855:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013859:	83 c4 10             	add    esp,0x10
c001385c:	eb 14                	jmp    c0013872 <SysRegistryReadExtent(regs*)+0x44>
c001385e:	83 ec 04             	sub    esp,0x4
c0013861:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013864:	50                   	push   eax
c0013865:	51                   	push   ecx
c0013866:	e8 ad 90 ff ff       	call   c000c918 <CmGetString(Reghive_Tag*, int, char*)>
c001386b:	83 c4 10             	add    esp,0x10
c001386e:	31 c0                	xor    eax,eax
c0013870:	31 d2                	xor    edx,edx
c0013872:	83 c4 1c             	add    esp,0x1c
c0013875:	c3                   	ret    

c0013876 <SysRegistryPathToExtentLookup(regs*)>:
c0013876:	83 ec 14             	sub    esp,0x14
c0013879:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001387d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013880:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013883:	e8 20 9b ff ff       	call   c000d3a8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013888:	83 c4 1c             	add    esp,0x1c
c001388b:	99                   	cdq    
c001388c:	c3                   	ret    

c001388d <SysRegistryEnterDirectory(regs*)>:
c001388d:	83 ec 14             	sub    esp,0x14
c0013890:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013894:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013897:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001389a:	e8 f0 90 ff ff       	call   c000c98f <CmEnterDirectory(Reghive_Tag*, int)>
c001389f:	83 c4 1c             	add    esp,0x1c
c00138a2:	99                   	cdq    
c00138a3:	c3                   	ret    

c00138a4 <SysRegistryGetNext(regs*)>:
c00138a4:	83 ec 14             	sub    esp,0x14
c00138a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00138ab:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00138ae:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00138b1:	e8 18 91 ff ff       	call   c000c9ce <CmGetNext(Reghive_Tag*, int)>
c00138b6:	83 c4 1c             	add    esp,0x1c
c00138b9:	99                   	cdq    
c00138ba:	c3                   	ret    

c00138bb <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00138bb:	57                   	push   edi
c00138bc:	56                   	push   esi
c00138bd:	53                   	push   ebx
c00138be:	81 ec 34 01 00 00    	sub    esp,0x134
c00138c4:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00138cb:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00138cf:	57                   	push   edi
c00138d0:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00138d3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00138d6:	e8 b1 96 ff ff       	call   c000cf8c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00138db:	89 c3                	mov    ebx,eax
c00138dd:	58                   	pop    eax
c00138de:	5a                   	pop    edx
c00138df:	57                   	push   edi
c00138e0:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00138e3:	e8 58 cd fe ff       	call   c0000640 <strcpy>
c00138e8:	89 d8                	mov    eax,ebx
c00138ea:	81 c4 40 01 00 00    	add    esp,0x140
c00138f0:	99                   	cdq    
c00138f1:	5b                   	pop    ebx
c00138f2:	5e                   	pop    esi
c00138f3:	5f                   	pop    edi
c00138f4:	c3                   	ret    

c00138f5 <SysRegistryOpen(regs*)>:
c00138f5:	83 ec 18             	sub    esp,0x18
c00138f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00138fc:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00138ff:	e8 a4 8e ff ff       	call   c000c7a8 <CmOpen(char const*)>
c0013904:	83 c4 1c             	add    esp,0x1c
c0013907:	99                   	cdq    
c0013908:	c3                   	ret    

c0013909 <SysRegistryClose(regs*)>:
c0013909:	83 ec 18             	sub    esp,0x18
c001390c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013910:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013913:	e8 ae 8f ff ff       	call   c000c8c6 <CmClose(Reghive_Tag*)>
c0013918:	31 c0                	xor    eax,eax
c001391a:	31 d2                	xor    edx,edx
c001391c:	83 c4 1c             	add    esp,0x1c
c001391f:	c3                   	ret    

c0013920 <SysRegistryEasyReadString(regs*)>:
c0013920:	57                   	push   edi
c0013921:	56                   	push   esi
c0013922:	53                   	push   ebx
c0013923:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013927:	83 ec 0c             	sub    esp,0xc
c001392a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001392d:	e8 76 8e ff ff       	call   c000c7a8 <CmOpen(char const*)>
c0013932:	5a                   	pop    edx
c0013933:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0013936:	59                   	pop    ecx
c0013937:	89 c3                	mov    ebx,eax
c0013939:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001393c:	50                   	push   eax
c001393d:	e8 66 9a ff ff       	call   c000d3a8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013942:	83 c4 10             	add    esp,0x10
c0013945:	89 c1                	mov    ecx,eax
c0013947:	b8 01 00 00 00       	mov    eax,0x1
c001394c:	85 c9                	test   ecx,ecx
c001394e:	7e 16                	jle    c0013966 <SysRegistryEasyReadString(regs*)+0x46>
c0013950:	50                   	push   eax
c0013951:	57                   	push   edi
c0013952:	51                   	push   ecx
c0013953:	53                   	push   ebx
c0013954:	e8 bf 8f ff ff       	call   c000c918 <CmGetString(Reghive_Tag*, int, char*)>
c0013959:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001395c:	e8 65 8f ff ff       	call   c000c8c6 <CmClose(Reghive_Tag*)>
c0013961:	83 c4 10             	add    esp,0x10
c0013964:	31 c0                	xor    eax,eax
c0013966:	5b                   	pop    ebx
c0013967:	31 d2                	xor    edx,edx
c0013969:	5e                   	pop    esi
c001396a:	5f                   	pop    edi
c001396b:	c3                   	ret    

c001396c <SysRegistryEasyReadInteger(regs*)>:
c001396c:	56                   	push   esi
c001396d:	53                   	push   ebx
c001396e:	83 ec 10             	sub    esp,0x10
c0013971:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013975:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013978:	e8 2b 8e ff ff       	call   c000c7a8 <CmOpen(char const*)>
c001397d:	5a                   	pop    edx
c001397e:	89 c3                	mov    ebx,eax
c0013980:	59                   	pop    ecx
c0013981:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013984:	50                   	push   eax
c0013985:	e8 1e 9a ff ff       	call   c000d3a8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001398a:	83 c4 10             	add    esp,0x10
c001398d:	89 c1                	mov    ecx,eax
c001398f:	b8 01 00 00 00       	mov    eax,0x1
c0013994:	85 c9                	test   ecx,ecx
c0013996:	7e 18                	jle    c00139b0 <SysRegistryEasyReadInteger(regs*)+0x44>
c0013998:	50                   	push   eax
c0013999:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001399c:	51                   	push   ecx
c001399d:	53                   	push   ebx
c001399e:	e8 db 94 ff ff       	call   c000ce7e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00139a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00139a6:	e8 1b 8f ff ff       	call   c000c8c6 <CmClose(Reghive_Tag*)>
c00139ab:	83 c4 10             	add    esp,0x10
c00139ae:	31 c0                	xor    eax,eax
c00139b0:	59                   	pop    ecx
c00139b1:	31 d2                	xor    edx,edx
c00139b3:	5b                   	pop    ebx
c00139b4:	5e                   	pop    esi
c00139b5:	c3                   	ret    

c00139b6 <SysSbrk(regs*)>:
c00139b6:	56                   	push   esi
c00139b7:	53                   	push   ebx
c00139b8:	50                   	push   eax
c00139b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00139c5:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00139c8:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00139ce:	85 db                	test   ebx,ebx
c00139d0:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00139d3:	74 02                	je     c00139d7 <SysSbrk(regs*)+0x21>
c00139d5:	79 06                	jns    c00139dd <SysSbrk(regs*)+0x27>
c00139d7:	89 f0                	mov    eax,esi
c00139d9:	31 d2                	xor    edx,edx
c00139db:	eb 2a                	jmp    c0013a07 <SysSbrk(regs*)+0x51>
c00139dd:	83 c8 ff             	or     eax,0xffffffff
c00139e0:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00139e6:	89 c2                	mov    edx,eax
c00139e8:	77 1d                	ja     c0013a07 <SysSbrk(regs*)+0x51>
c00139ea:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00139f0:	50                   	push   eax
c00139f1:	c1 ea 0c             	shr    edx,0xc
c00139f4:	68 07 0c 00 00       	push   0xc07
c00139f9:	52                   	push   edx
c00139fa:	51                   	push   ecx
c00139fb:	e8 a8 ef ff ff       	call   c00129a8 <VAS::allocatePages(int, int)>
c0013a00:	89 f0                	mov    eax,esi
c0013a02:	31 d2                	xor    edx,edx
c0013a04:	83 c4 10             	add    esp,0x10
c0013a07:	59                   	pop    ecx
c0013a08:	5b                   	pop    ebx
c0013a09:	5e                   	pop    esi
c0013a0a:	c3                   	ret    

c0013a0b <SysSetCwd(regs*)>:
c0013a0b:	83 ec 14             	sub    esp,0x14
c0013a0e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013a12:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013a15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a1a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013a1d:	e8 91 4a ff ff       	call   c00084b3 <Fs::setcwd(Process*, char*)>
c0013a22:	83 c4 1c             	add    esp,0x1c
c0013a25:	99                   	cdq    
c0013a26:	c3                   	ret    

c0013a27 <SysSetTime(regs*)>:
c0013a27:	55                   	push   ebp
c0013a28:	31 c9                	xor    ecx,ecx
c0013a2a:	57                   	push   edi
c0013a2b:	bd 0c 00 00 00       	mov    ebp,0xc
c0013a30:	56                   	push   esi
c0013a31:	53                   	push   ebx
c0013a32:	31 db                	xor    ebx,ebx
c0013a34:	83 ec 10             	sub    esp,0x10
c0013a37:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013a3b:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013a3e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013a41:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013a44:	89 c2                	mov    edx,eax
c0013a46:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013a4c:	83 e2 1f             	and    edx,0x1f
c0013a4f:	c1 e7 10             	shl    edi,0x10
c0013a52:	42                   	inc    edx
c0013a53:	c1 e8 05             	shr    eax,0x5
c0013a56:	88 d1                	mov    cl,dl
c0013a58:	31 d2                	xor    edx,edx
c0013a5a:	f7 f5                	div    ebp
c0013a5c:	89 dd                	mov    ebp,ebx
c0013a5e:	88 d5                	mov    ch,dl
c0013a60:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013a66:	0f b7 c1             	movzx  eax,cx
c0013a69:	31 d2                	xor    edx,edx
c0013a6b:	09 f8                	or     eax,edi
c0013a6d:	bf 3c 00 00 00       	mov    edi,0x3c
c0013a72:	89 c1                	mov    ecx,eax
c0013a74:	89 f0                	mov    eax,esi
c0013a76:	f7 f7                	div    edi
c0013a78:	c1 e2 10             	shl    edx,0x10
c0013a7b:	09 d5                	or     ebp,edx
c0013a7d:	31 d2                	xor    edx,edx
c0013a7f:	89 eb                	mov    ebx,ebp
c0013a81:	f7 f7                	div    edi
c0013a83:	bf 10 0e 00 00       	mov    edi,0xe10
c0013a88:	88 d7                	mov    bh,dl
c0013a8a:	89 f0                	mov    eax,esi
c0013a8c:	31 d2                	xor    edx,edx
c0013a8e:	f7 f7                	div    edi
c0013a90:	bf 18 00 00 00       	mov    edi,0x18
c0013a95:	31 d2                	xor    edx,edx
c0013a97:	f7 f7                	div    edi
c0013a99:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0013a9e:	88 d3                	mov    bl,dl
c0013aa0:	53                   	push   ebx
c0013aa1:	51                   	push   ecx
c0013aa2:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013aa8:	e8 c9 52 ff ff       	call   c0008d76 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013aad:	83 c4 1c             	add    esp,0x1c
c0013ab0:	83 f0 01             	xor    eax,0x1
c0013ab3:	5b                   	pop    ebx
c0013ab4:	0f b6 c0             	movzx  eax,al
c0013ab7:	5e                   	pop    esi
c0013ab8:	31 d2                	xor    edx,edx
c0013aba:	5f                   	pop    edi
c0013abb:	5d                   	pop    ebp
c0013abc:	c3                   	ret    

c0013abd <SysSymlink(regs*)>:
c0013abd:	56                   	push   esi
c0013abe:	83 c8 ff             	or     eax,0xffffffff
c0013ac1:	53                   	push   ebx
c0013ac2:	89 c2                	mov    edx,eax
c0013ac4:	81 ec 34 02 00 00    	sub    esp,0x234
c0013aca:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0013ad1:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013ad5:	74 50                	je     c0013b27 <SysSymlink(regs*)+0x6a>
c0013ad7:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0013ada:	85 c9                	test   ecx,ecx
c0013adc:	74 49                	je     c0013b27 <SysSymlink(regs*)+0x6a>
c0013ade:	6a 01                	push   0x1
c0013ae0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ae5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ae8:	05 0c 01 00 00       	add    eax,0x10c
c0013aed:	50                   	push   eax
c0013aee:	51                   	push   ecx
c0013aef:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013af3:	56                   	push   esi
c0013af4:	e8 21 43 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0013af9:	6a 01                	push   0x1
c0013afb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b00:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b03:	05 0c 01 00 00       	add    eax,0x10c
c0013b08:	50                   	push   eax
c0013b09:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013b0c:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0013b13:	53                   	push   ebx
c0013b14:	e8 01 43 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0013b19:	83 c4 18             	add    esp,0x18
c0013b1c:	56                   	push   esi
c0013b1d:	53                   	push   ebx
c0013b1e:	e8 25 3f ff ff       	call   c0007a48 <KeCreateSymlink(char const*, char const*)>
c0013b23:	83 c4 10             	add    esp,0x10
c0013b26:	99                   	cdq    
c0013b27:	81 c4 34 02 00 00    	add    esp,0x234
c0013b2d:	5b                   	pop    ebx
c0013b2e:	5e                   	pop    esi
c0013b2f:	c3                   	ret    

c0013b30 <SysTimezone(regs*)>:
c0013b30:	83 ec 0c             	sub    esp,0xc
c0013b33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b37:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0013b3b:	75 17                	jne    c0013b54 <SysTimezone(regs*)+0x24>
c0013b3d:	83 ec 0c             	sub    esp,0xc
c0013b40:	68 4a 34 02 c0       	push   0xc002344a
c0013b45:	e8 1a 34 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013b4a:	83 c8 ff             	or     eax,0xffffffff
c0013b4d:	83 c4 10             	add    esp,0x10
c0013b50:	89 c2                	mov    edx,eax
c0013b52:	eb 17                	jmp    c0013b6b <SysTimezone(regs*)+0x3b>
c0013b54:	83 ec 0c             	sub    esp,0xc
c0013b57:	68 5f 34 02 c0       	push   0xc002345f
c0013b5c:	e8 03 34 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013b61:	83 c4 10             	add    esp,0x10
c0013b64:	b8 01 00 00 00       	mov    eax,0x1
c0013b69:	31 d2                	xor    edx,edx
c0013b6b:	83 c4 0c             	add    esp,0xc
c0013b6e:	c3                   	ret    

c0013b6f <SysTruncate(regs*)>:
c0013b6f:	55                   	push   ebp
c0013b70:	57                   	push   edi
c0013b71:	31 ff                	xor    edi,edi
c0013b73:	56                   	push   esi
c0013b74:	53                   	push   ebx
c0013b75:	83 ec 0c             	sub    esp,0xc
c0013b78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b7c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013b7f:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0013b82:	89 ce                	mov    esi,ecx
c0013b84:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0013b88:	0f 84 9a 00 00 00    	je     c0013c28 <SysTruncate(regs*)+0xb9>
c0013b8e:	83 ec 0c             	sub    esp,0xc
c0013b91:	68 14 01 00 00       	push   0x114
c0013b96:	e8 b4 ae ff ff       	call   c000ea4f <malloc>
c0013b9b:	83 c4 0c             	add    esp,0xc
c0013b9e:	89 c3                	mov    ebx,eax
c0013ba0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ba5:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013ba8:	55                   	push   ebp
c0013ba9:	53                   	push   ebx
c0013baa:	e8 83 45 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0013baf:	83 c4 10             	add    esp,0x10
c0013bb2:	31 d2                	xor    edx,edx
c0013bb4:	b8 03 00 00 00       	mov    eax,0x3
c0013bb9:	85 db                	test   ebx,ebx
c0013bbb:	0f 84 a2 00 00 00    	je     c0013c63 <SysTruncate(regs*)+0xf4>
c0013bc1:	51                   	push   ecx
c0013bc2:	51                   	push   ecx
c0013bc3:	6a 02                	push   0x2
c0013bc5:	53                   	push   ebx
c0013bc6:	e8 85 45 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0013bcb:	83 c4 10             	add    esp,0x10
c0013bce:	85 c0                	test   eax,eax
c0013bd0:	74 13                	je     c0013be5 <SysTruncate(regs*)+0x76>
c0013bd2:	83 ec 0c             	sub    esp,0xc
c0013bd5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bd7:	53                   	push   ebx
c0013bd8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013bdb:	83 c4 10             	add    esp,0x10
c0013bde:	b8 04 00 00 00       	mov    eax,0x4
c0013be3:	eb 7c                	jmp    c0013c61 <SysTruncate(regs*)+0xf2>
c0013be5:	52                   	push   edx
c0013be6:	57                   	push   edi
c0013be7:	56                   	push   esi
c0013be8:	53                   	push   ebx
c0013be9:	e8 76 46 ff ff       	call   c0008264 <File::truncate(unsigned long long)>
c0013bee:	83 c4 10             	add    esp,0x10
c0013bf1:	85 c0                	test   eax,eax
c0013bf3:	74 1b                	je     c0013c10 <SysTruncate(regs*)+0xa1>
c0013bf5:	83 ec 0c             	sub    esp,0xc
c0013bf8:	53                   	push   ebx
c0013bf9:	e8 b0 45 ff ff       	call   c00081ae <File::close()>
c0013bfe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c03:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c06:	83 c4 10             	add    esp,0x10
c0013c09:	b8 05 00 00 00       	mov    eax,0x5
c0013c0e:	eb 51                	jmp    c0013c61 <SysTruncate(regs*)+0xf2>
c0013c10:	83 ec 0c             	sub    esp,0xc
c0013c13:	53                   	push   ebx
c0013c14:	e8 95 45 ff ff       	call   c00081ae <File::close()>
c0013c19:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c1e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c21:	83 c4 10             	add    esp,0x10
c0013c24:	31 c0                	xor    eax,eax
c0013c26:	eb 39                	jmp    c0013c61 <SysTruncate(regs*)+0xf2>
c0013c28:	31 d2                	xor    edx,edx
c0013c2a:	b8 01 00 00 00       	mov    eax,0x1
c0013c2f:	83 fd 02             	cmp    ebp,0x2
c0013c32:	7e 2f                	jle    c0013c63 <SysTruncate(regs*)+0xf4>
c0013c34:	83 ec 0c             	sub    esp,0xc
c0013c37:	51                   	push   ecx
c0013c38:	e8 e0 e3 ff ff       	call   c001201d <KeGetFileFromDescriptor(int)>
c0013c3d:	83 c4 10             	add    esp,0x10
c0013c40:	89 c1                	mov    ecx,eax
c0013c42:	31 d2                	xor    edx,edx
c0013c44:	b8 02 00 00 00       	mov    eax,0x2
c0013c49:	85 c9                	test   ecx,ecx
c0013c4b:	74 16                	je     c0013c63 <SysTruncate(regs*)+0xf4>
c0013c4d:	50                   	push   eax
c0013c4e:	57                   	push   edi
c0013c4f:	56                   	push   esi
c0013c50:	51                   	push   ecx
c0013c51:	e8 0e 46 ff ff       	call   c0008264 <File::truncate(unsigned long long)>
c0013c56:	83 c4 10             	add    esp,0x10
c0013c59:	85 c0                	test   eax,eax
c0013c5b:	0f 95 c0             	setne  al
c0013c5e:	0f b6 c0             	movzx  eax,al
c0013c61:	31 d2                	xor    edx,edx
c0013c63:	83 c4 0c             	add    esp,0xc
c0013c66:	5b                   	pop    ebx
c0013c67:	5e                   	pop    esi
c0013c68:	5f                   	pop    edi
c0013c69:	5d                   	pop    ebp
c0013c6a:	c3                   	ret    

c0013c6b <SysWrite(regs*)>:
c0013c6b:	57                   	push   edi
c0013c6c:	56                   	push   esi
c0013c6d:	53                   	push   ebx
c0013c6e:	83 ec 10             	sub    esp,0x10
c0013c71:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013c75:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013c78:	83 f8 02             	cmp    eax,0x2
c0013c7b:	77 10                	ja     c0013c8d <SysWrite(regs*)+0x22>
c0013c7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c82:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c85:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013c8b:	eb 0e                	jmp    c0013c9b <SysWrite(regs*)+0x30>
c0013c8d:	83 ec 0c             	sub    esp,0xc
c0013c90:	50                   	push   eax
c0013c91:	e8 87 e3 ff ff       	call   c001201d <KeGetFileFromDescriptor(int)>
c0013c96:	83 c4 10             	add    esp,0x10
c0013c99:	89 c1                	mov    ecx,eax
c0013c9b:	83 c8 ff             	or     eax,0xffffffff
c0013c9e:	85 c9                	test   ecx,ecx
c0013ca0:	89 c2                	mov    edx,eax
c0013ca2:	74 28                	je     c0013ccc <SysWrite(regs*)+0x61>
c0013ca4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013cac:	31 ff                	xor    edi,edi
c0013cae:	83 ec 0c             	sub    esp,0xc
c0013cb1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013cb3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013cb7:	52                   	push   edx
c0013cb8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013cbb:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013cbe:	57                   	push   edi
c0013cbf:	56                   	push   esi
c0013cc0:	51                   	push   ecx
c0013cc1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013cc4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013cc8:	83 c4 20             	add    esp,0x20
c0013ccb:	99                   	cdq    
c0013ccc:	83 c4 10             	add    esp,0x10
c0013ccf:	5b                   	pop    ebx
c0013cd0:	5e                   	pop    esi
c0013cd1:	5f                   	pop    edi
c0013cd2:	c3                   	ret    

c0013cd3 <SysWsbe(regs*)>:
c0013cd3:	55                   	push   ebp
c0013cd4:	57                   	push   edi
c0013cd5:	56                   	push   esi
c0013cd6:	53                   	push   ebx
c0013cd7:	83 ec 3c             	sub    esp,0x3c
c0013cda:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0013cde:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0013ce5:	75 2d                	jne    c0013d14 <SysWsbe(regs*)+0x41>
c0013ce7:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c0013cee:	75 24                	jne    c0013d14 <SysWsbe(regs*)+0x41>
c0013cf0:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c0013cf7:	75 1b                	jne    c0013d14 <SysWsbe(regs*)+0x41>
c0013cf9:	6a 01                	push   0x1
c0013cfb:	6a 00                	push   0x0
c0013cfd:	68 89 95 00 c0       	push   0xc0009589
c0013d02:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0013d08:	e8 9f 18 00 00       	call   c00155ac <Process::createThread(void (*)(void*), void*, int)>
c0013d0d:	83 c4 10             	add    esp,0x10
c0013d10:	31 c0                	xor    eax,eax
c0013d12:	eb 52                	jmp    c0013d66 <SysWsbe(regs*)+0x93>
c0013d14:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0013d18:	be 9e 34 02 c0       	mov    esi,0xc002349e
c0013d1d:	b9 0b 00 00 00       	mov    ecx,0xb
c0013d22:	fc                   	cld    
c0013d23:	83 ec 0c             	sub    esp,0xc
c0013d26:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013d28:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013d2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d31:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013d34:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0013d3a:	8b 06                	mov    eax,DWORD PTR [esi]
c0013d3c:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0013d3f:	57                   	push   edi
c0013d40:	e8 2b c8 fe ff       	call   c0000570 <strlen>
c0013d45:	5a                   	pop    edx
c0013d46:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013d4a:	52                   	push   edx
c0013d4b:	31 d2                	xor    edx,edx
c0013d4d:	57                   	push   edi
c0013d4e:	52                   	push   edx
c0013d4f:	50                   	push   eax
c0013d50:	56                   	push   esi
c0013d51:	ff d5                	call   ebp
c0013d53:	83 c4 14             	add    esp,0x14
c0013d56:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013d59:	e8 5e 22 00 00       	call   c0015fbc <terminateTask(int)>
c0013d5e:	83 c4 10             	add    esp,0x10
c0013d61:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0013d66:	83 c4 3c             	add    esp,0x3c
c0013d69:	31 d2                	xor    edx,edx
c0013d6b:	5b                   	pop    ebx
c0013d6c:	5e                   	pop    esi
c0013d6d:	5f                   	pop    edi
c0013d6e:	5d                   	pop    ebp
c0013d6f:	c3                   	ret    

c0013d70 <SysYield(regs*)>:
c0013d70:	83 ec 0c             	sub    esp,0xc
c0013d73:	fa                   	cli    
c0013d74:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c0013d7a:	e8 7d 1a 00 00       	call   c00157fc <schedule()>
c0013d7f:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0013d86:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0013d8d:	75 01                	jne    c0013d90 <SysYield(regs*)+0x20>
c0013d8f:	fb                   	sti    
c0013d90:	31 c0                	xor    eax,eax
c0013d92:	31 d2                	xor    edx,edx
c0013d94:	83 c4 0c             	add    esp,0xc
c0013d97:	c3                   	ret    

c0013d98 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0013d98:	55                   	push   ebp
c0013d99:	57                   	push   edi
c0013d9a:	56                   	push   esi
c0013d9b:	53                   	push   ebx
c0013d9c:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013da2:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013daa:	0f 95 c0             	setne  al
c0013dad:	31 d2                	xor    edx,edx
c0013daf:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0013db7:	0f 94 c2             	sete   dl
c0013dba:	85 c2                	test   edx,eax
c0013dbc:	74 34                	je     c0013df2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0013dbe:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013dc9:	74 27                	je     c0013df2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0013dcb:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013dd2:	05 00 10 00 00       	add    eax,0x1000
c0013dd7:	89 c1                	mov    ecx,eax
c0013dd9:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013dde:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0013de4:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0013deb:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0013df2:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0013df9:	83 ec 0c             	sub    esp,0xc
c0013dfc:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013e02:	6a 01                	push   0x1
c0013e04:	e8 b8 e3 ff ff       	call   c00121c1 <Virt::allocateKernelVirtualPages(int)>
c0013e09:	83 c4 10             	add    esp,0x10
c0013e0c:	89 c3                	mov    ebx,eax
c0013e0e:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013e14:	0f 86 26 01 00 00    	jbe    c0013f40 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c0013e1a:	c1 ee 0c             	shr    esi,0xc
c0013e1d:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013e24:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0013e28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013e30:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0013e37:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013e3b:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0013e42:	29 ef                	sub    edi,ebp
c0013e44:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0013e48:	0f 83 f9 00 00 00    	jae    c0013f47 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1af>
c0013e4e:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0013e54:	76 05                	jbe    c0013e5b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0013e56:	bf 00 10 00 00       	mov    edi,0x1000
c0013e5b:	83 ec 0c             	sub    esp,0xc
c0013e5e:	31 d2                	xor    edx,edx
c0013e60:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013e67:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013e69:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013e6d:	50                   	push   eax
c0013e6e:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013e72:	56                   	push   esi
c0013e73:	52                   	push   edx
c0013e74:	57                   	push   edi
c0013e75:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013e7c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013e7f:	83 c4 20             	add    esp,0x20
c0013e82:	85 c0                	test   eax,eax
c0013e84:	75 06                	jne    c0013e8c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0013e86:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013e8a:	74 13                	je     c0013e9f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0013e8c:	83 ec 0c             	sub    esp,0xc
c0013e8f:	53                   	push   ebx
c0013e90:	e8 34 e6 ff ff       	call   c00124c9 <Virt::freeKernelVirtualPages(unsigned long)>
c0013e95:	83 c4 10             	add    esp,0x10
c0013e98:	31 c0                	xor    eax,eax
c0013e9a:	e9 80 01 00 00       	jmp    c001401f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c0013e9f:	fa                   	cli    
c0013ea0:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c0013ea6:	e8 df b0 ff ff       	call   c000ef8a <Phys::allocatePage()>
c0013eab:	6a 07                	push   0x7
c0013ead:	89 c7                	mov    edi,eax
c0013eaf:	53                   	push   ebx
c0013eb0:	50                   	push   eax
c0013eb1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013eb6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013eb9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013ebf:	e8 e0 e9 ff ff       	call   c00128a4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013ec4:	83 c4 0c             	add    esp,0xc
c0013ec7:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013ece:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013ed4:	6a 00                	push   0x0
c0013ed6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013edb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ede:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013ee4:	e8 27 e8 ff ff       	call   c0012710 <VAS::mapOtherVASIn(bool, VAS*)>
c0013ee9:	58                   	pop    eax
c0013eea:	5a                   	pop    edx
c0013eeb:	68 07 0c 00 00       	push   0xc07
c0013ef0:	55                   	push   ebp
c0013ef1:	57                   	push   edi
c0013ef2:	89 df                	mov    edi,ebx
c0013ef4:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013efb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013f01:	6a 00                	push   0x0
c0013f03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f08:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f0b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013f11:	e8 d0 eb ff ff       	call   c0012ae6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013f16:	b9 00 10 00 00       	mov    ecx,0x1000
c0013f1b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013f1d:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0013f24:	83 c4 20             	add    esp,0x20
c0013f27:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0013f2e:	75 01                	jne    c0013f31 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x199>
c0013f30:	fb                   	sti    
c0013f31:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013f37:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013f3b:	e9 f0 fe ff ff       	jmp    c0013e30 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0013f40:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013f47:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013f4e:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013f54:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013f5a:	0f 86 b1 00 00 00    	jbe    c0014011 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c0013f60:	fa                   	cli    
c0013f61:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c0013f67:	c1 ee 0c             	shr    esi,0xc
c0013f6a:	51                   	push   ecx
c0013f6b:	31 ff                	xor    edi,edi
c0013f6d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013f74:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013f7a:	6a 00                	push   0x0
c0013f7c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f81:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f84:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013f8a:	e8 81 e7 ff ff       	call   c0012710 <VAS::mapOtherVASIn(bool, VAS*)>
c0013f8f:	83 c4 10             	add    esp,0x10
c0013f92:	e8 f3 af ff ff       	call   c000ef8a <Phys::allocatePage()>
c0013f97:	47                   	inc    edi
c0013f98:	6a 07                	push   0x7
c0013f9a:	53                   	push   ebx
c0013f9b:	50                   	push   eax
c0013f9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013fa0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013fa6:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013fa9:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013faf:	e8 f0 e8 ff ff       	call   c00128a4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013fb4:	58                   	pop    eax
c0013fb5:	5a                   	pop    edx
c0013fb6:	68 07 0c 00 00       	push   0xc07
c0013fbb:	55                   	push   ebp
c0013fbc:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013fc2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013fc6:	50                   	push   eax
c0013fc7:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013fce:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013fd4:	6a 00                	push   0x0
c0013fd6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fdb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013fde:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013fe4:	e8 fd ea ff ff       	call   c0012ae6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013fe9:	83 c4 1c             	add    esp,0x1c
c0013fec:	68 00 10 00 00       	push   0x1000
c0013ff1:	6a 00                	push   0x0
c0013ff3:	53                   	push   ebx
c0013ff4:	e8 f7 c4 fe ff       	call   c00004f0 <memset>
c0013ff9:	83 c4 10             	add    esp,0x10
c0013ffc:	39 fe                	cmp    esi,edi
c0013ffe:	77 92                	ja     c0013f92 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1fa>
c0014000:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0014007:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c001400e:	75 01                	jne    c0014011 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c0014010:	fb                   	sti    
c0014011:	83 ec 0c             	sub    esp,0xc
c0014014:	53                   	push   ebx
c0014015:	e8 af e4 ff ff       	call   c00124c9 <Virt::freeKernelVirtualPages(unsigned long)>
c001401a:	83 c4 10             	add    esp,0x10
c001401d:	b0 01                	mov    al,0x1
c001401f:	81 c4 2c 10 00 00    	add    esp,0x102c
c0014025:	5b                   	pop    ebx
c0014026:	5e                   	pop    esi
c0014027:	5f                   	pop    edi
c0014028:	5d                   	pop    ebp
c0014029:	c3                   	ret    

c001402a <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001402a:	55                   	push   ebp
c001402b:	57                   	push   edi
c001402c:	56                   	push   esi
c001402d:	53                   	push   ebx
c001402e:	83 ec 48             	sub    esp,0x48
c0014031:	68 14 01 00 00       	push   0x114
c0014036:	e8 14 aa ff ff       	call   c000ea4f <malloc>
c001403b:	83 c4 0c             	add    esp,0xc
c001403e:	89 c6                	mov    esi,eax
c0014040:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014044:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014048:	50                   	push   eax
c0014049:	e8 e4 40 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c001404e:	58                   	pop    eax
c001404f:	5a                   	pop    edx
c0014050:	6a 01                	push   0x1
c0014052:	56                   	push   esi
c0014053:	e8 f8 40 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0014058:	83 c4 10             	add    esp,0x10
c001405b:	85 c0                	test   eax,eax
c001405d:	0f 85 43 01 00 00    	jne    c00141a6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014063:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001406b:	83 ec 0c             	sub    esp,0xc
c001406e:	6a 34                	push   0x34
c0014070:	e8 da a9 ff ff       	call   c000ea4f <malloc>
c0014075:	89 c3                	mov    ebx,eax
c0014077:	58                   	pop    eax
c0014078:	8b 06                	mov    eax,DWORD PTR [esi]
c001407a:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001407e:	57                   	push   edi
c001407f:	53                   	push   ebx
c0014080:	6a 00                	push   0x0
c0014082:	6a 34                	push   0x34
c0014084:	56                   	push   esi
c0014085:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014088:	83 c4 20             	add    esp,0x20
c001408b:	85 c0                	test   eax,eax
c001408d:	0f 85 13 01 00 00    	jne    c00141a6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014093:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014099:	0f 85 07 01 00 00    	jne    c00141a6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001409f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00140a2:	85 c0                	test   eax,eax
c00140a4:	0f 84 fc 00 00 00    	je     c00141a6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00140aa:	31 d2                	xor    edx,edx
c00140ac:	55                   	push   ebp
c00140ad:	52                   	push   edx
c00140ae:	50                   	push   eax
c00140af:	56                   	push   esi
c00140b0:	e8 59 41 ff ff       	call   c000820e <File::seek(unsigned long long)>
c00140b5:	83 c4 10             	add    esp,0x10
c00140b8:	85 c0                	test   eax,eax
c00140ba:	0f 85 e6 00 00 00    	jne    c00141a6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00140c0:	83 ec 0c             	sub    esp,0xc
c00140c3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00140c6:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00140ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00140ce:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00140d2:	0f af c2             	imul   eax,edx
c00140d5:	50                   	push   eax
c00140d6:	e8 74 a9 ff ff       	call   c000ea4f <malloc>
c00140db:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00140dd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00140e1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00140e4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00140e8:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00140ec:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00140f0:	0f af c2             	imul   eax,edx
c00140f3:	99                   	cdq    
c00140f4:	52                   	push   edx
c00140f5:	50                   	push   eax
c00140f6:	56                   	push   esi
c00140f7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00140fa:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00140fd:	83 c4 20             	add    esp,0x20
c0014100:	85 c0                	test   eax,eax
c0014102:	0f 84 9e 00 00 00    	je     c00141a6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014108:	31 d2                	xor    edx,edx
c001410a:	51                   	push   ecx
c001410b:	52                   	push   edx
c001410c:	50                   	push   eax
c001410d:	56                   	push   esi
c001410e:	e8 fb 40 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0014113:	83 c4 10             	add    esp,0x10
c0014116:	85 c0                	test   eax,eax
c0014118:	0f 85 88 00 00 00    	jne    c00141a6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001411e:	83 ec 0c             	sub    esp,0xc
c0014121:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014125:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014129:	31 ed                	xor    ebp,ebp
c001412b:	0f af c2             	imul   eax,edx
c001412e:	50                   	push   eax
c001412f:	e8 1b a9 ff ff       	call   c000ea4f <malloc>
c0014134:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014136:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001413a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001413d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014141:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014145:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014149:	0f af c2             	imul   eax,edx
c001414c:	99                   	cdq    
c001414d:	52                   	push   edx
c001414e:	50                   	push   eax
c001414f:	56                   	push   esi
c0014150:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014153:	83 c4 20             	add    esp,0x20
c0014156:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001415e:	0f b7 fd             	movzx  edi,bp
c0014161:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0014165:	73 7d                	jae    c00141e4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0014167:	c1 e7 05             	shl    edi,0x5
c001416a:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001416e:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014171:	75 6b                	jne    c00141de <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014173:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014176:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001417a:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001417d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014181:	52                   	push   edx
c0014182:	31 d2                	xor    edx,edx
c0014184:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014187:	52                   	push   edx
c0014188:	50                   	push   eax
c0014189:	56                   	push   esi
c001418a:	e8 7f 40 ff ff       	call   c000820e <File::seek(unsigned long long)>
c001418f:	83 c4 10             	add    esp,0x10
c0014192:	85 c0                	test   eax,eax
c0014194:	74 17                	je     c00141ad <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0014196:	83 ec 0c             	sub    esp,0xc
c0014199:	68 ca 34 02 c0       	push   0xc00234ca
c001419e:	e8 c1 2d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00141a3:	83 c4 10             	add    esp,0x10
c00141a6:	31 c0                	xor    eax,eax
c00141a8:	e9 87 00 00 00       	jmp    c0014234 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c00141ad:	83 ec 0c             	sub    esp,0xc
c00141b0:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00141b3:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00141b6:	50                   	push   eax
c00141b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00141bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00141bf:	56                   	push   esi
c00141c0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00141c4:	e8 cf fb ff ff       	call   c0013d98 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00141c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00141cd:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00141d1:	83 c4 20             	add    esp,0x20
c00141d4:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00141d8:	73 04                	jae    c00141de <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c00141da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00141de:	45                   	inc    ebp
c00141df:	e9 7a ff ff ff       	jmp    c001415e <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00141e4:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00141e8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00141ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00141f0:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00141f6:	83 ec 0c             	sub    esp,0xc
c00141f9:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00141ff:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014204:	05 00 10 00 00       	add    eax,0x1000
c0014209:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001420c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014210:	e8 4a a8 ff ff       	call   c000ea5f <free>
c0014215:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014218:	e8 42 a8 ff ff       	call   c000ea5f <free>
c001421d:	58                   	pop    eax
c001421e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014222:	e8 38 a8 ff ff       	call   c000ea5f <free>
c0014227:	89 34 24             	mov    DWORD PTR [esp],esi
c001422a:	e8 7f 3f ff ff       	call   c00081ae <File::close()>
c001422f:	83 c4 10             	add    esp,0x10
c0014232:	b0 01                	mov    al,0x1
c0014234:	83 c4 3c             	add    esp,0x3c
c0014237:	5b                   	pop    ebx
c0014238:	5e                   	pop    esi
c0014239:	5f                   	pop    edi
c001423a:	5d                   	pop    ebp
c001423b:	c3                   	ret    

c001423c <Thr::runtimeReferenceHelper()>:
c001423c:	83 ec 18             	sub    esp,0x18
c001423f:	68 d2 34 02 c0       	push   0xc00234d2
c0014244:	e8 1b 2d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014249:	fa                   	cli    
c001424a:	83 c4 10             	add    esp,0x10
c001424d:	eb fe                	jmp    c001424d <Thr::runtimeReferenceHelper()+0x11>

c001424f <Thr::getAddressOfKernelSymbol(char const*)>:
c001424f:	57                   	push   edi
c0014250:	56                   	push   esi
c0014251:	53                   	push   ebx
c0014252:	31 db                	xor    ebx,ebx
c0014254:	39 1d 80 d6 02 c0    	cmp    DWORD PTR ds:0xc002d680,ebx
c001425a:	7e 3c                	jle    c0014298 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001425c:	8b 34 9d 00 d6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd2a00]
c0014263:	31 ff                	xor    edi,edi
c0014265:	39 3c 9d 00 d5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd2b00],edi
c001426c:	7e 27                	jle    c0014295 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001426e:	50                   	push   eax
c001426f:	50                   	push   eax
c0014270:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014274:	8b 06                	mov    eax,DWORD PTR [esi]
c0014276:	03 04 9d 80 d5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd2a80]
c001427d:	50                   	push   eax
c001427e:	e8 cd c4 fe ff       	call   c0000750 <strcmp>
c0014283:	83 c4 10             	add    esp,0x10
c0014286:	85 c0                	test   eax,eax
c0014288:	75 05                	jne    c001428f <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001428a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001428d:	eb 0b                	jmp    c001429a <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001428f:	83 c6 10             	add    esi,0x10
c0014292:	47                   	inc    edi
c0014293:	eb d0                	jmp    c0014265 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014295:	43                   	inc    ebx
c0014296:	eb bc                	jmp    c0014254 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014298:	31 c0                	xor    eax,eax
c001429a:	5b                   	pop    ebx
c001429b:	5e                   	pop    esi
c001429c:	5f                   	pop    edi
c001429d:	c3                   	ret    

c001429e <Thr::loadKernelSymbolTable(char const*)>:
c001429e:	55                   	push   ebp
c001429f:	57                   	push   edi
c00142a0:	56                   	push   esi
c00142a1:	53                   	push   ebx
c00142a2:	83 ec 68             	sub    esp,0x68
c00142a5:	8b 35 d8 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d6d8
c00142ab:	68 14 01 00 00       	push   0x114
c00142b0:	e8 9a a7 ff ff       	call   c000ea4f <malloc>
c00142b5:	83 c4 0c             	add    esp,0xc
c00142b8:	89 c3                	mov    ebx,eax
c00142ba:	56                   	push   esi
c00142bb:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00142bf:	50                   	push   eax
c00142c0:	e8 6d 3e ff ff       	call   c0008132 <File::File(char const*, Process*)>
c00142c5:	5e                   	pop    esi
c00142c6:	5f                   	pop    edi
c00142c7:	6a 01                	push   0x1
c00142c9:	53                   	push   ebx
c00142ca:	e8 81 3e ff ff       	call   c0008150 <File::open(FileOpenMode)>
c00142cf:	83 c4 10             	add    esp,0x10
c00142d2:	85 c0                	test   eax,eax
c00142d4:	74 0a                	je     c00142e0 <Thr::loadKernelSymbolTable(char const*)+0x42>
c00142d6:	83 ec 0c             	sub    esp,0xc
c00142d9:	68 f4 34 02 c0       	push   0xc00234f4
c00142de:	eb 34                	jmp    c0014314 <Thr::loadKernelSymbolTable(char const*)+0x76>
c00142e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00142e8:	83 ec 0c             	sub    esp,0xc
c00142eb:	6a 34                	push   0x34
c00142ed:	e8 5d a7 ff ff       	call   c000ea4f <malloc>
c00142f2:	59                   	pop    ecx
c00142f3:	89 c7                	mov    edi,eax
c00142f5:	8d 74 24 34          	lea    esi,[esp+0x34]
c00142f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142fb:	56                   	push   esi
c00142fc:	57                   	push   edi
c00142fd:	6a 00                	push   0x0
c00142ff:	6a 34                	push   0x34
c0014301:	53                   	push   ebx
c0014302:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014305:	83 c4 20             	add    esp,0x20
c0014308:	85 c0                	test   eax,eax
c001430a:	74 17                	je     c0014323 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001430c:	83 ec 0c             	sub    esp,0xc
c001430f:	68 0b 35 02 c0       	push   0xc002350b
c0014314:	e8 7d aa ff ff       	call   c000ed96 <KePanic(char const*)>
c0014319:	83 c4 10             	add    esp,0x10
c001431c:	31 c0                	xor    eax,eax
c001431e:	e9 31 02 00 00       	jmp    c0014554 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014323:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014329:	75 e1                	jne    c001430c <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001432b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001432e:	85 c0                	test   eax,eax
c0014330:	74 da                	je     c001430c <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014332:	52                   	push   edx
c0014333:	31 d2                	xor    edx,edx
c0014335:	52                   	push   edx
c0014336:	50                   	push   eax
c0014337:	53                   	push   ebx
c0014338:	e8 d1 3e ff ff       	call   c000820e <File::seek(unsigned long long)>
c001433d:	83 c4 10             	add    esp,0x10
c0014340:	85 c0                	test   eax,eax
c0014342:	75 c8                	jne    c001430c <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014344:	83 ec 0c             	sub    esp,0xc
c0014347:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001434b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001434f:	31 ed                	xor    ebp,ebp
c0014351:	0f af c2             	imul   eax,edx
c0014354:	50                   	push   eax
c0014355:	e8 f5 a6 ff ff       	call   c000ea4f <malloc>
c001435a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001435c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014360:	89 34 24             	mov    DWORD PTR [esp],esi
c0014363:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014367:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001436b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001436f:	0f af c2             	imul   eax,edx
c0014372:	99                   	cdq    
c0014373:	52                   	push   edx
c0014374:	50                   	push   eax
c0014375:	53                   	push   ebx
c0014376:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014379:	83 c4 20             	add    esp,0x20
c001437c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014384:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001438c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014394:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001439c:	0f b7 f5             	movzx  esi,bp
c001439f:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c00143a3:	0f 83 a7 00 00 00    	jae    c0014450 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00143a9:	6b f6 28             	imul   esi,esi,0x28
c00143ac:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00143b0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00143b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00143b7:	50                   	push   eax
c00143b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00143bc:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00143c0:	8b 16                	mov    edx,DWORD PTR [esi]
c00143c2:	6b c0 28             	imul   eax,eax,0x28
c00143c5:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00143c9:	89 d0                	mov    eax,edx
c00143cb:	31 d2                	xor    edx,edx
c00143cd:	52                   	push   edx
c00143ce:	50                   	push   eax
c00143cf:	53                   	push   ebx
c00143d0:	e8 39 3e ff ff       	call   c000820e <File::seek(unsigned long long)>
c00143d5:	83 c4 0c             	add    esp,0xc
c00143d8:	6a 20                	push   0x20
c00143da:	6a 00                	push   0x0
c00143dc:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00143e0:	52                   	push   edx
c00143e1:	e8 0a c1 fe ff       	call   c00004f0 <memset>
c00143e6:	58                   	pop    eax
c00143e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143e9:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00143ed:	51                   	push   ecx
c00143ee:	8d 54 24 40          	lea    edx,[esp+0x40]
c00143f2:	52                   	push   edx
c00143f3:	6a 00                	push   0x0
c00143f5:	6a 1f                	push   0x1f
c00143f7:	53                   	push   ebx
c00143f8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00143fb:	83 c4 18             	add    esp,0x18
c00143fe:	68 22 35 02 c0       	push   0xc0023522
c0014403:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014407:	52                   	push   edx
c0014408:	e8 43 c3 fe ff       	call   c0000750 <strcmp>
c001440d:	83 c4 10             	add    esp,0x10
c0014410:	85 c0                	test   eax,eax
c0014412:	75 0f                	jne    c0014423 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014414:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014417:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001441b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001441f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014423:	50                   	push   eax
c0014424:	50                   	push   eax
c0014425:	68 2a 35 02 c0       	push   0xc002352a
c001442a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001442e:	50                   	push   eax
c001442f:	e8 1c c3 fe ff       	call   c0000750 <strcmp>
c0014434:	83 c4 10             	add    esp,0x10
c0014437:	85 c0                	test   eax,eax
c0014439:	75 0f                	jne    c001444a <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001443b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001443e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014442:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014446:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001444a:	45                   	inc    ebp
c001444b:	e9 4c ff ff ff       	jmp    c001439c <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014450:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014455:	75 10                	jne    c0014467 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014457:	83 ec 0c             	sub    esp,0xc
c001445a:	68 32 35 02 c0       	push   0xc0023532
c001445f:	e8 32 a9 ff ff       	call   c000ed96 <KePanic(char const*)>
c0014464:	83 c4 10             	add    esp,0x10
c0014467:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001446c:	75 10                	jne    c001447e <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001446e:	83 ec 0c             	sub    esp,0xc
c0014471:	68 32 35 02 c0       	push   0xc0023532
c0014476:	e8 1b a9 ff ff       	call   c000ed96 <KePanic(char const*)>
c001447b:	83 c4 10             	add    esp,0x10
c001447e:	31 d2                	xor    edx,edx
c0014480:	50                   	push   eax
c0014481:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014485:	52                   	push   edx
c0014486:	50                   	push   eax
c0014487:	53                   	push   ebx
c0014488:	e8 81 3d ff ff       	call   c000820e <File::seek(unsigned long long)>
c001448d:	5a                   	pop    edx
c001448e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014492:	e8 b8 a5 ff ff       	call   c000ea4f <malloc>
c0014497:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001449b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001449f:	31 c9                	xor    ecx,ecx
c00144a1:	5e                   	pop    esi
c00144a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144a4:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00144a8:	55                   	push   ebp
c00144a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144ad:	51                   	push   ecx
c00144ae:	52                   	push   edx
c00144af:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00144b3:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00144b7:	53                   	push   ebx
c00144b8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00144bb:	83 c4 14             	add    esp,0x14
c00144be:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00144c2:	e8 88 a5 ff ff       	call   c000ea4f <malloc>
c00144c7:	89 c6                	mov    esi,eax
c00144c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144cb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00144ce:	56                   	push   esi
c00144cf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00144d3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00144d7:	51                   	push   ecx
c00144d8:	52                   	push   edx
c00144d9:	53                   	push   ebx
c00144da:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00144dd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00144e1:	8b 15 80 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d680
c00144e7:	83 c4 1c             	add    esp,0x1c
c00144ea:	c1 e8 04             	shr    eax,0x4
c00144ed:	89 04 95 00 d5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2b00],eax
c00144f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00144f8:	31 d2                	xor    edx,edx
c00144fa:	52                   	push   edx
c00144fb:	50                   	push   eax
c00144fc:	53                   	push   ebx
c00144fd:	e8 0c 3d ff ff       	call   c000820e <File::seek(unsigned long long)>
c0014502:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014504:	31 d2                	xor    edx,edx
c0014506:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014509:	56                   	push   esi
c001450a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001450e:	52                   	push   edx
c001450f:	50                   	push   eax
c0014510:	53                   	push   ebx
c0014511:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014514:	83 c4 14             	add    esp,0x14
c0014517:	53                   	push   ebx
c0014518:	e8 91 3c ff ff       	call   c00081ae <File::close()>
c001451d:	5d                   	pop    ebp
c001451e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014522:	e8 38 a5 ff ff       	call   c000ea5f <free>
c0014527:	89 3c 24             	mov    DWORD PTR [esp],edi
c001452a:	e8 30 a5 ff ff       	call   c000ea5f <free>
c001452f:	a1 80 d6 02 c0       	mov    eax,ds:0xc002d680
c0014534:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014538:	8d 50 01             	lea    edx,[eax+0x1]
c001453b:	89 0c 85 00 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2a00],ecx
c0014542:	89 34 85 80 d5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2a80],esi
c0014549:	89 15 80 d6 02 c0    	mov    DWORD PTR ds:0xc002d680,edx
c001454f:	83 c4 10             	add    esp,0x10
c0014552:	b0 01                	mov    al,0x1
c0014554:	83 c4 5c             	add    esp,0x5c
c0014557:	5b                   	pop    ebx
c0014558:	5e                   	pop    esi
c0014559:	5f                   	pop    edi
c001455a:	5d                   	pop    ebp
c001455b:	c3                   	ret    

c001455c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001455c:	55                   	push   ebp
c001455d:	57                   	push   edi
c001455e:	56                   	push   esi
c001455f:	53                   	push   ebx
c0014560:	81 ec 68 03 00 00    	sub    esp,0x368
c0014566:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001456d:	8b 1d d8 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6d8
c0014573:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014577:	68 14 01 00 00       	push   0x114
c001457c:	e8 ce a4 ff ff       	call   c000ea4f <malloc>
c0014581:	83 c4 0c             	add    esp,0xc
c0014584:	89 c5                	mov    ebp,eax
c0014586:	53                   	push   ebx
c0014587:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001458e:	50                   	push   eax
c001458f:	e8 9e 3b ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0014594:	5e                   	pop    esi
c0014595:	5f                   	pop    edi
c0014596:	6a 01                	push   0x1
c0014598:	55                   	push   ebp
c0014599:	e8 b2 3b ff ff       	call   c0008150 <File::open(FileOpenMode)>
c001459e:	83 c4 10             	add    esp,0x10
c00145a1:	85 c0                	test   eax,eax
c00145a3:	0f 85 aa 06 00 00    	jne    c0014c53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00145a9:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00145b1:	83 ec 0c             	sub    esp,0xc
c00145b4:	6a 34                	push   0x34
c00145b6:	e8 94 a4 ff ff       	call   c000ea4f <malloc>
c00145bb:	5b                   	pop    ebx
c00145bc:	89 c7                	mov    edi,eax
c00145be:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00145c2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00145c5:	53                   	push   ebx
c00145c6:	57                   	push   edi
c00145c7:	6a 00                	push   0x0
c00145c9:	6a 34                	push   0x34
c00145cb:	55                   	push   ebp
c00145cc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00145cf:	83 c4 20             	add    esp,0x20
c00145d2:	85 c0                	test   eax,eax
c00145d4:	0f 85 79 06 00 00    	jne    c0014c53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00145da:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00145e0:	0f 85 6d 06 00 00    	jne    c0014c53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00145e6:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00145e9:	85 c0                	test   eax,eax
c00145eb:	0f 84 62 06 00 00    	je     c0014c53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00145f1:	31 d2                	xor    edx,edx
c00145f3:	51                   	push   ecx
c00145f4:	52                   	push   edx
c00145f5:	50                   	push   eax
c00145f6:	55                   	push   ebp
c00145f7:	e8 12 3c ff ff       	call   c000820e <File::seek(unsigned long long)>
c00145fc:	83 c4 10             	add    esp,0x10
c00145ff:	85 c0                	test   eax,eax
c0014601:	0f 85 4c 06 00 00    	jne    c0014c53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014607:	83 ec 0c             	sub    esp,0xc
c001460a:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001460d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014611:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014615:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014619:	0f af c2             	imul   eax,edx
c001461c:	50                   	push   eax
c001461d:	e8 2d a4 ff ff       	call   c000ea4f <malloc>
c0014622:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014625:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014629:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001462c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014630:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014634:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014638:	0f af c2             	imul   eax,edx
c001463b:	99                   	cdq    
c001463c:	52                   	push   edx
c001463d:	50                   	push   eax
c001463e:	55                   	push   ebp
c001463f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014642:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0014645:	83 c4 20             	add    esp,0x20
c0014648:	85 c0                	test   eax,eax
c001464a:	0f 84 03 06 00 00    	je     c0014c53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014650:	52                   	push   edx
c0014651:	31 d2                	xor    edx,edx
c0014653:	52                   	push   edx
c0014654:	50                   	push   eax
c0014655:	55                   	push   ebp
c0014656:	e8 b3 3b ff ff       	call   c000820e <File::seek(unsigned long long)>
c001465b:	83 c4 10             	add    esp,0x10
c001465e:	85 c0                	test   eax,eax
c0014660:	0f 85 ed 05 00 00    	jne    c0014c53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014666:	83 ec 0c             	sub    esp,0xc
c0014669:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001466d:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014671:	31 f6                	xor    esi,esi
c0014673:	0f af c2             	imul   eax,edx
c0014676:	50                   	push   eax
c0014677:	e8 d3 a3 ff ff       	call   c000ea4f <malloc>
c001467c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001467f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014683:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014686:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001468a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001468e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014692:	0f af c2             	imul   eax,edx
c0014695:	99                   	cdq    
c0014696:	52                   	push   edx
c0014697:	50                   	push   eax
c0014698:	55                   	push   ebp
c0014699:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001469c:	83 c4 20             	add    esp,0x20
c001469f:	0f b7 de             	movzx  ebx,si
c00146a2:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c00146a6:	0f 83 87 00 00 00    	jae    c0014733 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00146ac:	c1 e3 05             	shl    ebx,0x5
c00146af:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00146b3:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00146b6:	75 75                	jne    c001472d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00146b8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00146bb:	31 d2                	xor    edx,edx
c00146bd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00146c1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00146c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00146c8:	50                   	push   eax
c00146c9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00146cc:	52                   	push   edx
c00146cd:	50                   	push   eax
c00146ce:	55                   	push   ebp
c00146cf:	e8 3a 3b ff ff       	call   c000820e <File::seek(unsigned long long)>
c00146d4:	83 c4 10             	add    esp,0x10
c00146d7:	85 c0                	test   eax,eax
c00146d9:	0f 85 74 05 00 00    	jne    c0014c53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00146df:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00146e6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00146e9:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00146ed:	31 d2                	xor    edx,edx
c00146ef:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00146f3:	83 ec 0c             	sub    esp,0xc
c00146f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00146fa:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014701:	50                   	push   eax
c0014702:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014706:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001470a:	52                   	push   edx
c001470b:	50                   	push   eax
c001470c:	55                   	push   ebp
c001470d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014710:	83 c4 1c             	add    esp,0x1c
c0014713:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014716:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0014719:	50                   	push   eax
c001471a:	6a 00                	push   0x0
c001471c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014720:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0014724:	50                   	push   eax
c0014725:	e8 c6 bd fe ff       	call   c00004f0 <memset>
c001472a:	83 c4 10             	add    esp,0x10
c001472d:	46                   	inc    esi
c001472e:	e9 6c ff ff ff       	jmp    c001469f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0014733:	53                   	push   ebx
c0014734:	31 db                	xor    ebx,ebx
c0014736:	68 00 01 00 00       	push   0x100
c001473b:	6a 00                	push   0x0
c001473d:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014741:	50                   	push   eax
c0014742:	e8 a9 bd fe ff       	call   c00004f0 <memset>
c0014747:	83 c4 0c             	add    esp,0xc
c001474a:	68 00 01 00 00       	push   0x100
c001474f:	6a 00                	push   0x0
c0014751:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014758:	50                   	push   eax
c0014759:	e8 92 bd fe ff       	call   c00004f0 <memset>
c001475e:	83 c4 10             	add    esp,0x10
c0014761:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014769:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014771:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014779:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014781:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014789:	0f b7 f3             	movzx  esi,bx
c001478c:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0014790:	0f 83 2d 01 00 00    	jae    c00148c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0014796:	6b f6 28             	imul   esi,esi,0x28
c0014799:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001479d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00147a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00147a4:	52                   	push   edx
c00147a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00147a9:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00147ad:	8b 06                	mov    eax,DWORD PTR [esi]
c00147af:	6b d2 28             	imul   edx,edx,0x28
c00147b2:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00147b6:	31 d2                	xor    edx,edx
c00147b8:	52                   	push   edx
c00147b9:	50                   	push   eax
c00147ba:	55                   	push   ebp
c00147bb:	e8 4e 3a ff ff       	call   c000820e <File::seek(unsigned long long)>
c00147c0:	83 c4 0c             	add    esp,0xc
c00147c3:	6a 20                	push   0x20
c00147c5:	6a 00                	push   0x0
c00147c7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00147ce:	51                   	push   ecx
c00147cf:	e8 1c bd fe ff       	call   c00004f0 <memset>
c00147d4:	59                   	pop    ecx
c00147d5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00147d8:	8d 54 24 58          	lea    edx,[esp+0x58]
c00147dc:	52                   	push   edx
c00147dd:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00147e4:	51                   	push   ecx
c00147e5:	6a 00                	push   0x0
c00147e7:	6a 1f                	push   0x1f
c00147e9:	55                   	push   ebp
c00147ea:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00147ed:	83 c4 1c             	add    esp,0x1c
c00147f0:	6a 09                	push   0x9
c00147f2:	68 4c 35 02 c0       	push   0xc002354c
c00147f7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00147fe:	51                   	push   ecx
c00147ff:	e8 7c bb fe ff       	call   c0000380 <memcmp>
c0014804:	83 c4 10             	add    esp,0x10
c0014807:	85 c0                	test   eax,eax
c0014809:	75 21                	jne    c001482c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001480b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001480f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014813:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0014817:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001481b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001481e:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014825:	89 d0                	mov    eax,edx
c0014827:	40                   	inc    eax
c0014828:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001482c:	50                   	push   eax
c001482d:	6a 09                	push   0x9
c001482f:	68 56 35 02 c0       	push   0xc0023556
c0014834:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001483b:	50                   	push   eax
c001483c:	e8 3f bb fe ff       	call   c0000380 <memcmp>
c0014841:	83 c4 10             	add    esp,0x10
c0014844:	85 c0                	test   eax,eax
c0014846:	75 21                	jne    c0014869 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0014848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001484c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014850:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014854:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0014858:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001485b:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014862:	89 d0                	mov    eax,edx
c0014864:	40                   	inc    eax
c0014865:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014869:	50                   	push   eax
c001486a:	50                   	push   eax
c001486b:	68 22 35 02 c0       	push   0xc0023522
c0014870:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014877:	50                   	push   eax
c0014878:	e8 d3 be fe ff       	call   c0000750 <strcmp>
c001487d:	83 c4 10             	add    esp,0x10
c0014880:	85 c0                	test   eax,eax
c0014882:	75 0f                	jne    c0014893 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0014884:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014887:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001488b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001488f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014893:	50                   	push   eax
c0014894:	50                   	push   eax
c0014895:	68 2a 35 02 c0       	push   0xc002352a
c001489a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00148a1:	50                   	push   eax
c00148a2:	e8 a9 be fe ff       	call   c0000750 <strcmp>
c00148a7:	83 c4 10             	add    esp,0x10
c00148aa:	85 c0                	test   eax,eax
c00148ac:	75 0f                	jne    c00148bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00148ae:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00148b1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00148b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148b9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00148bd:	43                   	inc    ebx
c00148be:	e9 c6 fe ff ff       	jmp    c0014789 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00148c3:	31 d2                	xor    edx,edx
c00148c5:	50                   	push   eax
c00148c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00148ca:	52                   	push   edx
c00148cb:	50                   	push   eax
c00148cc:	55                   	push   ebp
c00148cd:	e8 3c 39 ff ff       	call   c000820e <File::seek(unsigned long long)>
c00148d2:	58                   	pop    eax
c00148d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00148d7:	e8 73 a1 ff ff       	call   c000ea4f <malloc>
c00148dc:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00148df:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00148e3:	31 d2                	xor    edx,edx
c00148e5:	58                   	pop    eax
c00148e6:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00148ea:	53                   	push   ebx
c00148eb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00148ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00148f3:	52                   	push   edx
c00148f4:	50                   	push   eax
c00148f5:	55                   	push   ebp
c00148f6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00148f9:	83 c4 14             	add    esp,0x14
c00148fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014900:	e8 4a a1 ff ff       	call   c000ea4f <malloc>
c0014905:	31 d2                	xor    edx,edx
c0014907:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001490b:	83 c4 0c             	add    esp,0xc
c001490e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014912:	52                   	push   edx
c0014913:	50                   	push   eax
c0014914:	55                   	push   ebp
c0014915:	e8 f4 38 ff ff       	call   c000820e <File::seek(unsigned long long)>
c001491a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001491d:	31 d2                	xor    edx,edx
c001491f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014922:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001492a:	52                   	push   edx
c001492b:	50                   	push   eax
c001492c:	55                   	push   ebp
c001492d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014930:	83 c4 20             	add    esp,0x20
c0014933:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0014938:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014940:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014944:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014948:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001494c:	0f 84 05 03 00 00    	je     c0014c57 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0014952:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0014959:	31 d2                	xor    edx,edx
c001495b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001495f:	c1 e8 03             	shr    eax,0x3
c0014962:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0014966:	51                   	push   ecx
c0014967:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001496b:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001496f:	52                   	push   edx
c0014970:	50                   	push   eax
c0014971:	55                   	push   ebp
c0014972:	e8 97 38 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0014977:	5b                   	pop    ebx
c0014978:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001497c:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014983:	e8 c7 a0 ff ff       	call   c000ea4f <malloc>
c0014988:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001498b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001498f:	31 d2                	xor    edx,edx
c0014991:	5e                   	pop    esi
c0014992:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014996:	50                   	push   eax
c0014997:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001499b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001499f:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00149a6:	52                   	push   edx
c00149a7:	50                   	push   eax
c00149a8:	55                   	push   ebp
c00149a9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00149ac:	83 c4 20             	add    esp,0x20
c00149af:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00149b7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00149bb:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c00149bf:	0f 8d 76 02 00 00    	jge    c0014c3b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c00149c5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00149c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00149cd:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c00149d2:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00149d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00149d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00149dd:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c00149e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00149e5:	c1 e8 08             	shr    eax,0x8
c00149e8:	89 c6                	mov    esi,eax
c00149ea:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00149ee:	c1 e6 04             	shl    esi,0x4
c00149f1:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00149f5:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c00149f8:	85 db                	test   ebx,ebx
c00149fa:	0f 85 b3 00 00 00    	jne    c0014ab3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014a00:	83 ec 0c             	sub    esp,0xc
c0014a03:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014a07:	03 06                	add    eax,DWORD PTR [esi]
c0014a09:	50                   	push   eax
c0014a0a:	e8 40 f8 ff ff       	call   c001424f <Thr::getAddressOfKernelSymbol(char const*)>
c0014a0f:	83 c4 10             	add    esp,0x10
c0014a12:	89 c3                	mov    ebx,eax
c0014a14:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0014a19:	85 c0                	test   eax,eax
c0014a1b:	0f 85 92 00 00 00    	jne    c0014ab3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014a21:	83 ec 0c             	sub    esp,0xc
c0014a24:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014a28:	03 06                	add    eax,DWORD PTR [esi]
c0014a2a:	50                   	push   eax
c0014a2b:	e8 f8 ad ff ff       	call   c000f828 <KeResolveCompatibilitySymbol(char*)>
c0014a30:	83 c4 10             	add    esp,0x10
c0014a33:	89 c3                	mov    ebx,eax
c0014a35:	85 c0                	test   eax,eax
c0014a37:	75 7a                	jne    c0014ab3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014a39:	51                   	push   ecx
c0014a3a:	51                   	push   ecx
c0014a3b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014a3f:	03 06                	add    eax,DWORD PTR [esi]
c0014a41:	50                   	push   eax
c0014a42:	68 60 35 02 c0       	push   0xc0023560
c0014a47:	e8 18 25 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014a4c:	58                   	pop    eax
c0014a4d:	5a                   	pop    edx
c0014a4e:	68 7a 35 02 c0       	push   0xc002357a
c0014a53:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014a5a:	50                   	push   eax
c0014a5b:	e8 e0 bb fe ff       	call   c0000640 <strcpy>
c0014a60:	59                   	pop    ecx
c0014a61:	58                   	pop    eax
c0014a62:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014a66:	03 06                	add    eax,DWORD PTR [esi]
c0014a68:	50                   	push   eax
c0014a69:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014a70:	50                   	push   eax
c0014a71:	e8 ca bd fe ff       	call   c0000840 <strcat>
c0014a76:	58                   	pop    eax
c0014a77:	5a                   	pop    edx
c0014a78:	68 14 36 02 c0       	push   0xc0023614
c0014a7d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014a84:	50                   	push   eax
c0014a85:	e8 b6 bd fe ff       	call   c0000840 <strcat>
c0014a8a:	83 c4 10             	add    esp,0x10
c0014a8d:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014a92:	0f 84 5d 01 00 00    	je     c0014bf5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014a98:	83 ec 0c             	sub    esp,0xc
c0014a9b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014aa2:	50                   	push   eax
c0014aa3:	e8 ee a2 ff ff       	call   c000ed96 <KePanic(char const*)>
c0014aa8:	83 c4 10             	add    esp,0x10
c0014aab:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0014aaf:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0014ab3:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0014ab8:	83 f8 01             	cmp    eax,0x1
c0014abb:	0f 85 8f 00 00 00    	jne    c0014b50 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0014ac1:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0014ac8:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0014acc:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014ad0:	01 ce                	add    esi,ecx
c0014ad2:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014ada:	0f 94 c0             	sete   al
c0014add:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014ae5:	0f 94 c2             	sete   dl
c0014ae8:	09 c2                	or     edx,eax
c0014aea:	8b 06                	mov    eax,DWORD PTR [esi]
c0014aec:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014af1:	0f b6 d2             	movzx  edx,dl
c0014af4:	74 41                	je     c0014b37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0014af6:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0014af9:	85 d2                	test   edx,edx
c0014afb:	75 15                	jne    c0014b12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0014afd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014b01:	66 83 f8 0c          	cmp    ax,0xc
c0014b05:	76 05                	jbe    c0014b0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c0014b07:	b8 0c 00 00 00       	mov    eax,0xc
c0014b0c:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014b10:	76 37                	jbe    c0014b49 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014b12:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0014b16:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014b1b:	0f 84 d4 00 00 00    	je     c0014bf5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014b21:	83 ec 0c             	sub    esp,0xc
c0014b24:	68 91 35 02 c0       	push   0xc0023591
c0014b29:	e8 68 a2 ff ff       	call   c000ed96 <KePanic(char const*)>
c0014b2e:	83 c4 10             	add    esp,0x10
c0014b31:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014b35:	eb 12                	jmp    c0014b49 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014b37:	01 c1                	add    ecx,eax
c0014b39:	85 d2                	test   edx,edx
c0014b3b:	75 0c                	jne    c0014b49 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014b3d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014b41:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014b45:	77 02                	ja     c0014b49 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014b47:	01 d9                	add    ecx,ebx
c0014b49:	89 0e                	mov    DWORD PTR [esi],ecx
c0014b4b:	e9 e2 00 00 00       	jmp    c0014c32 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014b50:	83 f8 02             	cmp    eax,0x2
c0014b53:	75 77                	jne    c0014bcc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0014b55:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0014b5c:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0014b60:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0014b64:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014b6c:	74 21                	je     c0014b8f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0014b6e:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014b76:	74 17                	je     c0014b8f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0014b78:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0014b7c:	b8 0a 00 00 00       	mov    eax,0xa
c0014b81:	83 fa 0e             	cmp    edx,0xe
c0014b84:	77 03                	ja     c0014b89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0014b86:	8d 42 fc             	lea    eax,[edx-0x4]
c0014b89:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014b8d:	76 17                	jbe    c0014ba6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0014b8f:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014b94:	74 5f                	je     c0014bf5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014b96:	83 ec 0c             	sub    esp,0xc
c0014b99:	68 ad 35 02 c0       	push   0xc00235ad
c0014b9e:	e8 f3 a1 ff ff       	call   c000ed96 <KePanic(char const*)>
c0014ba3:	83 c4 10             	add    esp,0x10
c0014ba6:	8b 06                	mov    eax,DWORD PTR [esi]
c0014ba8:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014bad:	74 13                	je     c0014bc2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0014baf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014bb3:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0014bba:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0014bbe:	01 d0                	add    eax,edx
c0014bc0:	eb 04                	jmp    c0014bc6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0014bc2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0014bc6:	01 c3                	add    ebx,eax
c0014bc8:	89 1e                	mov    DWORD PTR [esi],ebx
c0014bca:	eb 66                	jmp    c0014c32 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014bcc:	52                   	push   edx
c0014bcd:	52                   	push   edx
c0014bce:	50                   	push   eax
c0014bcf:	68 c9 35 02 c0       	push   0xc00235c9
c0014bd4:	e8 8b 23 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014bd9:	83 c4 10             	add    esp,0x10
c0014bdc:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014be1:	74 12                	je     c0014bf5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014be3:	83 ec 0c             	sub    esp,0xc
c0014be6:	68 d4 35 02 c0       	push   0xc00235d4
c0014beb:	e8 a6 a1 ff ff       	call   c000ed96 <KePanic(char const*)>
c0014bf0:	83 c4 10             	add    esp,0x10
c0014bf3:	eb 3d                	jmp    c0014c32 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014bf5:	83 ec 0c             	sub    esp,0xc
c0014bf8:	55                   	push   ebp
c0014bf9:	e8 b0 35 ff ff       	call   c00081ae <File::close()>
c0014bfe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014c01:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014c04:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014c07:	59                   	pop    ecx
c0014c08:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c0c:	e8 4e 9e ff ff       	call   c000ea5f <free>
c0014c11:	5b                   	pop    ebx
c0014c12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014c16:	e8 44 9e ff ff       	call   c000ea5f <free>
c0014c1b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014c1e:	e8 3c 9e ff ff       	call   c000ea5f <free>
c0014c23:	5e                   	pop    esi
c0014c24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c28:	e8 32 9e ff ff       	call   c000ea5f <free>
c0014c2d:	83 c4 10             	add    esp,0x10
c0014c30:	eb 21                	jmp    c0014c53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014c32:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0014c36:	e9 7c fd ff ff       	jmp    c00149b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0014c3b:	83 ec 0c             	sub    esp,0xc
c0014c3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c42:	e8 18 9e ff ff       	call   c000ea5f <free>
c0014c47:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0014c4b:	83 c4 10             	add    esp,0x10
c0014c4e:	e9 f1 fc ff ff       	jmp    c0014944 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c0014c53:	31 c0                	xor    eax,eax
c0014c55:	eb 33                	jmp    c0014c8a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c0014c57:	83 ec 0c             	sub    esp,0xc
c0014c5a:	55                   	push   ebp
c0014c5b:	e8 4e 35 ff ff       	call   c00081ae <File::close()>
c0014c60:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014c63:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014c66:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014c69:	58                   	pop    eax
c0014c6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014c6e:	e8 ec 9d ff ff       	call   c000ea5f <free>
c0014c73:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014c76:	e8 e4 9d ff ff       	call   c000ea5f <free>
c0014c7b:	5a                   	pop    edx
c0014c7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c80:	e8 da 9d ff ff       	call   c000ea5f <free>
c0014c85:	83 c4 10             	add    esp,0x10
c0014c88:	b0 01                	mov    al,0x1
c0014c8a:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014c90:	5b                   	pop    ebx
c0014c91:	5e                   	pop    esi
c0014c92:	5f                   	pop    edi
c0014c93:	5d                   	pop    ebp
c0014c94:	c3                   	ret    

c0014c95 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014c95:	56                   	push   esi
c0014c96:	31 d2                	xor    edx,edx
c0014c98:	53                   	push   ebx
c0014c99:	8b 1d e0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cee0
c0014c9f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014ca3:	39 d3                	cmp    ebx,edx
c0014ca5:	7e 1b                	jle    c0014cc2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014ca7:	8b 04 95 00 d1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2f00]
c0014cae:	39 c8                	cmp    eax,ecx
c0014cb0:	77 0d                	ja     c0014cbf <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014cb2:	8b 34 95 00 cf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd3100]
c0014cb9:	01 c6                	add    esi,eax
c0014cbb:	39 ce                	cmp    esi,ecx
c0014cbd:	77 05                	ja     c0014cc4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014cbf:	42                   	inc    edx
c0014cc0:	eb e1                	jmp    c0014ca3 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014cc2:	31 c0                	xor    eax,eax
c0014cc4:	5b                   	pop    ebx
c0014cc5:	5e                   	pop    esi
c0014cc6:	c3                   	ret    

c0014cc7 <Thr::getDriverNameFromAddress(unsigned long)>:
c0014cc7:	53                   	push   ebx
c0014cc8:	31 c0                	xor    eax,eax
c0014cca:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014cce:	8b 1d e0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cee0
c0014cd4:	39 c3                	cmp    ebx,eax
c0014cd6:	7e 22                	jle    c0014cfa <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0014cd8:	8b 14 85 00 d1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2f00]
c0014cdf:	39 ca                	cmp    edx,ecx
c0014ce1:	77 14                	ja     c0014cf7 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014ce3:	03 14 85 00 cf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd3100]
c0014cea:	39 ca                	cmp    edx,ecx
c0014cec:	76 09                	jbe    c0014cf7 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014cee:	8b 04 85 00 d3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2d00]
c0014cf5:	eb 05                	jmp    c0014cfc <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0014cf7:	40                   	inc    eax
c0014cf8:	eb da                	jmp    c0014cd4 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0014cfa:	31 c0                	xor    eax,eax
c0014cfc:	5b                   	pop    ebx
c0014cfd:	c3                   	ret    

c0014cfe <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0014cfe:	53                   	push   ebx
c0014cff:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0014d03:	53                   	push   ebx
c0014d04:	e8 8c ff ff ff       	call   c0014c95 <Thr::getDriverBaseFromAddress(unsigned long)>
c0014d09:	5a                   	pop    edx
c0014d0a:	31 d2                	xor    edx,edx
c0014d0c:	85 c0                	test   eax,eax
c0014d0e:	74 04                	je     c0014d14 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0014d10:	89 da                	mov    edx,ebx
c0014d12:	29 c2                	sub    edx,eax
c0014d14:	89 d0                	mov    eax,edx
c0014d16:	5b                   	pop    ebx
c0014d17:	c3                   	ret    

c0014d18 <Thr::loadDLL(char const*, bool)>:
c0014d18:	55                   	push   ebp
c0014d19:	57                   	push   edi
c0014d1a:	56                   	push   esi
c0014d1b:	53                   	push   ebx
c0014d1c:	81 ec 34 01 00 00    	sub    esp,0x134
c0014d22:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0014d29:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0014d30:	56                   	push   esi
c0014d31:	68 ec 35 02 c0       	push   0xc00235ec
c0014d36:	e8 29 22 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014d3b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014d42:	e8 08 9d ff ff       	call   c000ea4f <malloc>
c0014d47:	83 c4 0c             	add    esp,0xc
c0014d4a:	89 c3                	mov    ebx,eax
c0014d4c:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0014d52:	56                   	push   esi
c0014d53:	50                   	push   eax
c0014d54:	e8 d9 33 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0014d59:	83 c4 10             	add    esp,0x10
c0014d5c:	85 db                	test   ebx,ebx
c0014d5e:	75 3c                	jne    c0014d9c <Thr::loadDLL(char const*, bool)+0x84>
c0014d60:	89 f8                	mov    eax,edi
c0014d62:	84 c0                	test   al,al
c0014d64:	0f 84 f3 01 00 00    	je     c0014f5d <Thr::loadDLL(char const*, bool)+0x245>
c0014d6a:	55                   	push   ebp
c0014d6b:	55                   	push   ebp
c0014d6c:	68 fd 35 02 c0       	push   0xc00235fd
c0014d71:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0014d75:	55                   	push   ebp
c0014d76:	e8 c5 b8 fe ff       	call   c0000640 <strcpy>
c0014d7b:	58                   	pop    eax
c0014d7c:	5a                   	pop    edx
c0014d7d:	56                   	push   esi
c0014d7e:	55                   	push   ebp
c0014d7f:	e8 bc ba fe ff       	call   c0000840 <strcat>
c0014d84:	59                   	pop    ecx
c0014d85:	58                   	pop    eax
c0014d86:	68 14 36 02 c0       	push   0xc0023614
c0014d8b:	55                   	push   ebp
c0014d8c:	e8 af ba fe ff       	call   c0000840 <strcat>
c0014d91:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014d94:	e8 fd 9f ff ff       	call   c000ed96 <KePanic(char const*)>
c0014d99:	83 c4 10             	add    esp,0x10
c0014d9c:	51                   	push   ecx
c0014d9d:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014da1:	50                   	push   eax
c0014da2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014da6:	50                   	push   eax
c0014da7:	53                   	push   ebx
c0014da8:	e8 a5 36 ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0014dad:	83 c4 10             	add    esp,0x10
c0014db0:	89 c5                	mov    ebp,eax
c0014db2:	85 db                	test   ebx,ebx
c0014db4:	74 0c                	je     c0014dc2 <Thr::loadDLL(char const*, bool)+0xaa>
c0014db6:	83 ec 0c             	sub    esp,0xc
c0014db9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014dbb:	53                   	push   ebx
c0014dbc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014dbf:	83 c4 10             	add    esp,0x10
c0014dc2:	83 ec 0c             	sub    esp,0xc
c0014dc5:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0014dca:	50                   	push   eax
c0014dcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014dcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014dd3:	55                   	push   ebp
c0014dd4:	68 16 36 02 c0       	push   0xc0023616
c0014dd9:	e8 86 21 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014dde:	83 c4 20             	add    esp,0x20
c0014de1:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014de6:	75 0a                	jne    c0014df2 <Thr::loadDLL(char const*, bool)+0xda>
c0014de8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014dec:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0014df0:	75 3c                	jne    c0014e2e <Thr::loadDLL(char const*, bool)+0x116>
c0014df2:	89 f8                	mov    eax,edi
c0014df4:	84 c0                	test   al,al
c0014df6:	0f 84 49 01 00 00    	je     c0014f45 <Thr::loadDLL(char const*, bool)+0x22d>
c0014dfc:	51                   	push   ecx
c0014dfd:	51                   	push   ecx
c0014dfe:	68 37 36 02 c0       	push   0xc0023637
c0014e03:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0014e07:	53                   	push   ebx
c0014e08:	e8 33 b8 fe ff       	call   c0000640 <strcpy>
c0014e0d:	5d                   	pop    ebp
c0014e0e:	58                   	pop    eax
c0014e0f:	56                   	push   esi
c0014e10:	53                   	push   ebx
c0014e11:	e8 2a ba fe ff       	call   c0000840 <strcat>
c0014e16:	58                   	pop    eax
c0014e17:	5a                   	pop    edx
c0014e18:	68 14 36 02 c0       	push   0xc0023614
c0014e1d:	53                   	push   ebx
c0014e1e:	e8 1d ba fe ff       	call   c0000840 <strcat>
c0014e23:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e26:	e8 6b 9f ff ff       	call   c000ed96 <KePanic(char const*)>
c0014e2b:	83 c4 10             	add    esp,0x10
c0014e2e:	52                   	push   edx
c0014e2f:	6a 03                	push   0x3
c0014e31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e35:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014e39:	05 ff 0f 00 00       	add    eax,0xfff
c0014e3e:	83 d2 00             	adc    edx,0x0
c0014e41:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014e45:	50                   	push   eax
c0014e46:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c0014e4c:	e8 57 db ff ff       	call   c00129a8 <VAS::allocatePages(int, int)>
c0014e51:	59                   	pop    ecx
c0014e52:	89 c3                	mov    ebx,eax
c0014e54:	5d                   	pop    ebp
c0014e55:	50                   	push   eax
c0014e56:	68 7e 29 02 c0       	push   0xc002297e
c0014e5b:	e8 04 21 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014e60:	89 34 24             	mov    DWORD PTR [esp],esi
c0014e63:	e8 08 b7 fe ff       	call   c0000570 <strlen>
c0014e68:	8b 2d e0 ce 02 c0    	mov    ebp,DWORD PTR ds:0xc002cee0
c0014e6e:	40                   	inc    eax
c0014e6f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014e72:	e8 d8 9b ff ff       	call   c000ea4f <malloc>
c0014e77:	89 04 ad 00 d3 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd2d00],eax
c0014e7e:	58                   	pop    eax
c0014e7f:	a1 e0 ce 02 c0       	mov    eax,ds:0xc002cee0
c0014e84:	5a                   	pop    edx
c0014e85:	56                   	push   esi
c0014e86:	ff 34 85 00 d3 02 c0 	push   DWORD PTR [eax*4-0x3ffd2d00]
c0014e8d:	e8 ae b7 fe ff       	call   c0000640 <strcpy>
c0014e92:	a1 e0 ce 02 c0       	mov    eax,ds:0xc002cee0
c0014e97:	8d 50 01             	lea    edx,[eax+0x1]
c0014e9a:	89 1c 85 00 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f00],ebx
c0014ea1:	89 15 e0 ce 02 c0    	mov    DWORD PTR ds:0xc002cee0,edx
c0014ea7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014eab:	83 c4 0c             	add    esp,0xc
c0014eae:	89 14 85 00 cf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3100],edx
c0014eb5:	6a 01                	push   0x1
c0014eb7:	53                   	push   ebx
c0014eb8:	56                   	push   esi
c0014eb9:	e8 9e f6 ff ff       	call   c001455c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014ebe:	83 c4 10             	add    esp,0x10
c0014ec1:	0f b6 c0             	movzx  eax,al
c0014ec4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014ec8:	85 c0                	test   eax,eax
c0014eca:	0f 85 89 00 00 00    	jne    c0014f59 <Thr::loadDLL(char const*, bool)+0x241>
c0014ed0:	89 f8                	mov    eax,edi
c0014ed2:	84 c0                	test   al,al
c0014ed4:	74 73                	je     c0014f49 <Thr::loadDLL(char const*, bool)+0x231>
c0014ed6:	83 ec 0c             	sub    esp,0xc
c0014ed9:	68 50 36 02 c0       	push   0xc0023650
c0014ede:	e8 b3 9e ff ff       	call   c000ed96 <KePanic(char const*)>
c0014ee3:	83 c4 10             	add    esp,0x10
c0014ee6:	eb 61                	jmp    c0014f49 <Thr::loadDLL(char const*, bool)+0x231>
c0014ee8:	50                   	push   eax
c0014ee9:	50                   	push   eax
c0014eea:	89 e8                	mov    eax,ebp
c0014eec:	c1 e0 0c             	shl    eax,0xc
c0014eef:	01 d8                	add    eax,ebx
c0014ef1:	50                   	push   eax
c0014ef2:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c0014ef8:	e8 ad d5 ff ff       	call   c00124aa <VAS::getPageTableEntry(unsigned long)>
c0014efd:	83 c4 10             	add    esp,0x10
c0014f00:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f02:	a8 60                	test   al,0x60
c0014f04:	75 11                	jne    c0014f17 <Thr::loadDLL(char const*, bool)+0x1ff>
c0014f06:	83 ec 0c             	sub    esp,0xc
c0014f09:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014f0e:	50                   	push   eax
c0014f0f:	e8 0d a0 ff ff       	call   c000ef21 <Phys::freePage(unsigned long)>
c0014f14:	83 c4 10             	add    esp,0x10
c0014f17:	45                   	inc    ebp
c0014f18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f1c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014f20:	05 ff 0f 00 00       	add    eax,0xfff
c0014f25:	bf 00 00 00 00       	mov    edi,0x0
c0014f2a:	83 d2 00             	adc    edx,0x0
c0014f2d:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014f31:	c1 ea 0c             	shr    edx,0xc
c0014f34:	39 c5                	cmp    ebp,eax
c0014f36:	89 d1                	mov    ecx,edx
c0014f38:	89 f8                	mov    eax,edi
c0014f3a:	19 c8                	sbb    eax,ecx
c0014f3c:	72 aa                	jb     c0014ee8 <Thr::loadDLL(char const*, bool)+0x1d0>
c0014f3e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014f43:	75 18                	jne    c0014f5d <Thr::loadDLL(char const*, bool)+0x245>
c0014f45:	31 db                	xor    ebx,ebx
c0014f47:	eb 14                	jmp    c0014f5d <Thr::loadDLL(char const*, bool)+0x245>
c0014f49:	83 ec 0c             	sub    esp,0xc
c0014f4c:	68 6f 36 02 c0       	push   0xc002366f
c0014f51:	e8 40 9e ff ff       	call   c000ed96 <KePanic(char const*)>
c0014f56:	83 c4 10             	add    esp,0x10
c0014f59:	31 ed                	xor    ebp,ebp
c0014f5b:	eb bb                	jmp    c0014f18 <Thr::loadDLL(char const*, bool)+0x200>
c0014f5d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014f63:	89 d8                	mov    eax,ebx
c0014f65:	5b                   	pop    ebx
c0014f66:	5e                   	pop    esi
c0014f67:	5f                   	pop    edi
c0014f68:	5d                   	pop    ebp
c0014f69:	c3                   	ret    

c0014f6a <Thr::executeDLL(unsigned long, void*)>:
c0014f6a:	56                   	push   esi
c0014f6b:	53                   	push   ebx
c0014f6c:	52                   	push   edx
c0014f6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014f71:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014f75:	85 db                	test   ebx,ebx
c0014f77:	75 10                	jne    c0014f89 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014f79:	83 ec 0c             	sub    esp,0xc
c0014f7c:	68 8b 36 02 c0       	push   0xc002368b
c0014f81:	e8 10 9e ff ff       	call   c000ed96 <KePanic(char const*)>
c0014f86:	83 c4 10             	add    esp,0x10
c0014f89:	50                   	push   eax
c0014f8a:	50                   	push   eax
c0014f8b:	53                   	push   ebx
c0014f8c:	68 b5 36 02 c0       	push   0xc00236b5
c0014f91:	e8 ce 1f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014f96:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014f9a:	89 d8                	mov    eax,ebx
c0014f9c:	83 c4 14             	add    esp,0x14
c0014f9f:	5b                   	pop    ebx
c0014fa0:	5e                   	pop    esi
c0014fa1:	ff e0                	jmp    eax

c0014fa3 <KeProcessExec(Process*, char const*)>:
c0014fa3:	56                   	push   esi
c0014fa4:	53                   	push   ebx
c0014fa5:	83 ec 04             	sub    esp,0x4
c0014fa8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014fac:	8b b3 12 05 00 00    	mov    esi,DWORD PTR [ebx+0x512]
c0014fb2:	85 f6                	test   esi,esi
c0014fb4:	74 16                	je     c0014fcc <KeProcessExec(Process*, char const*)+0x29>
c0014fb6:	83 ec 0c             	sub    esp,0xc
c0014fb9:	56                   	push   esi
c0014fba:	e8 7d d7 ff ff       	call   c001273c <VAS::~VAS()>
c0014fbf:	58                   	pop    eax
c0014fc0:	5a                   	pop    edx
c0014fc1:	6a 14                	push   0x14
c0014fc3:	56                   	push   esi
c0014fc4:	e8 8b 77 ff ff       	call   c000c754 <operator delete(void*, unsigned long)>
c0014fc9:	83 c4 10             	add    esp,0x10
c0014fcc:	83 ec 0c             	sub    esp,0xc
c0014fcf:	6a 14                	push   0x14
c0014fd1:	e8 79 9a ff ff       	call   c000ea4f <malloc>
c0014fd6:	89 c6                	mov    esi,eax
c0014fd8:	58                   	pop    eax
c0014fd9:	5a                   	pop    edx
c0014fda:	6a 00                	push   0x0
c0014fdc:	56                   	push   esi
c0014fdd:	e8 fa db ff ff       	call   c0012bdc <VAS::VAS(bool)>
c0014fe2:	89 b3 12 05 00 00    	mov    DWORD PTR [ebx+0x512],esi
c0014fe8:	59                   	pop    ecx
c0014fe9:	5e                   	pop    esi
c0014fea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014fee:	50                   	push   eax
c0014fef:	53                   	push   ebx
c0014ff0:	e8 35 f0 ff ff       	call   c001402a <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014ff5:	83 c4 14             	add    esp,0x14
c0014ff8:	31 c0                	xor    eax,eax
c0014ffa:	5b                   	pop    ebx
c0014ffb:	5e                   	pop    esi
c0014ffc:	c3                   	ret    
c0014ffd:	66 90                	xchg   ax,ax
c0014fff:	90                   	nop

c0015000 <userModeEntryPoint(void*)>:
c0015000:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015008:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c001500d:	85 c0                	test   eax,eax
c001500f:	75 03                	jne    c0015014 <userModeEntryPoint(void*)+0x14>
c0015011:	fb                   	sti    
c0015012:	66 90                	xchg   ax,ax
c0015014:	fb                   	sti    
c0015015:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001501a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001501d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0015023:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015027:	e9 13 b2 fe ff       	jmp    c000023f <goToUsermode>

c001502c <changeTSS>:
c001502c:	83 ec 14             	sub    esp,0x14
c001502f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015034:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015037:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001503c:	c1 e2 15             	shl    edx,0x15
c001503f:	29 d0                	sub    eax,edx
c0015041:	50                   	push   eax
c0015042:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0015047:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001504d:	05 68 11 00 00       	add    eax,0x1168
c0015052:	50                   	push   eax
c0015053:	e8 e4 c9 ff ff       	call   c0011a3c <TSS::setESP(unsigned long)>
c0015058:	83 c4 1c             	add    esp,0x1c
c001505b:	c3                   	ret    

c001505c <switchToThread(ThreadControlBlock*)>:
c001505c:	57                   	push   edi
c001505d:	8b 0d ac d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6ac
c0015063:	56                   	push   esi
c0015064:	85 c9                	test   ecx,ecx
c0015066:	53                   	push   ebx
c0015067:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001506b:	0f 85 8b 00 00 00    	jne    c00150fc <switchToThread(ThreadControlBlock*)+0xa0>
c0015071:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015075:	81 fa ff 00 00 00    	cmp    edx,0xff
c001507b:	74 7b                	je     c00150f8 <switchToThread(ThreadControlBlock*)+0x9c>
c001507d:	b8 00 04 00 00       	mov    eax,0x400
c0015082:	29 d0                	sub    eax,edx
c0015084:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0015087:	d1 f8                	sar    eax,1
c0015089:	01 d0                	add    eax,edx
c001508b:	90                   	nop
c001508c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001508f:	e8 25 38 00 00       	call   c00188b9 <HalQueryPerformanceCounter()>
c0015094:	a3 f0 d6 02 c0       	mov    ds:0xc002d6f0,eax
c0015099:	89 15 f4 d6 02 c0    	mov    DWORD PTR ds:0xc002d6f4,edx
c001509f:	89 c6                	mov    esi,eax
c00150a1:	89 d7                	mov    edi,edx
c00150a3:	2b 35 e0 d6 02 c0    	sub    esi,DWORD PTR ds:0xc002d6e0
c00150a9:	a3 e0 d6 02 c0       	mov    ds:0xc002d6e0,eax
c00150ae:	1b 3d e4 d6 02 c0    	sbb    edi,DWORD PTR ds:0xc002d6e4
c00150b4:	89 35 e8 d6 02 c0    	mov    DWORD PTR ds:0xc002d6e8,esi
c00150ba:	89 3d ec d6 02 c0    	mov    DWORD PTR ds:0xc002d6ec,edi
c00150c0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00150c6:	89 15 e4 d6 02 c0    	mov    DWORD PTR ds:0xc002d6e4,edx
c00150cc:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00150cf:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00150d2:	01 c6                	add    esi,eax
c00150d4:	11 d7                	adc    edi,edx
c00150d6:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00150d9:	83 ec 0c             	sub    esp,0xc
c00150dc:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00150df:	53                   	push   ebx
c00150e0:	e8 92 b1 fe ff       	call   c0000277 <switchToThreadASM>
c00150e5:	0f 20 c0             	mov    eax,cr0
c00150e8:	83 c8 08             	or     eax,0x8
c00150eb:	0f 22 c0             	mov    cr0,eax
c00150ee:	83 c4 10             	add    esp,0x10
c00150f1:	5b                   	pop    ebx
c00150f2:	5e                   	pop    esi
c00150f3:	5f                   	pop    edi
c00150f4:	c3                   	ret    
c00150f5:	8d 76 00             	lea    esi,[esi+0x0]
c00150f8:	31 c0                	xor    eax,eax
c00150fa:	eb 90                	jmp    c001508c <switchToThread(ThreadControlBlock*)+0x30>
c00150fc:	5b                   	pop    ebx
c00150fd:	c7 05 a8 d6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x1
c0015107:	5e                   	pop    esi
c0015108:	5f                   	pop    edi
c0015109:	c3                   	ret    
c001510a:	66 90                	xchg   ax,ax

c001510c <Process::addArgs(char**)>:
c001510c:	57                   	push   edi
c001510d:	56                   	push   esi
c001510e:	53                   	push   ebx
c001510f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015113:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0015117:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0015121:	85 ff                	test   edi,edi
c0015123:	74 4f                	je     c0015174 <Process::addArgs(char**)+0x68>
c0015125:	8b 07                	mov    eax,DWORD PTR [edi]
c0015127:	85 c0                	test   eax,eax
c0015129:	74 49                	je     c0015174 <Process::addArgs(char**)+0x68>
c001512b:	31 db                	xor    ebx,ebx
c001512d:	8d 76 00             	lea    esi,[esi+0x0]
c0015130:	83 ec 0c             	sub    esp,0xc
c0015133:	50                   	push   eax
c0015134:	e8 37 b4 fe ff       	call   c0000570 <strlen>
c0015139:	83 c0 01             	add    eax,0x1
c001513c:	89 04 24             	mov    DWORD PTR [esp],eax
c001513f:	e8 0b 99 ff ff       	call   c000ea4f <malloc>
c0015144:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001514b:	5a                   	pop    edx
c001514c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001514f:	59                   	pop    ecx
c0015150:	83 c3 01             	add    ebx,0x1
c0015153:	52                   	push   edx
c0015154:	50                   	push   eax
c0015155:	e8 e6 b4 fe ff       	call   c0000640 <strcpy>
c001515a:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0015160:	83 c4 10             	add    esp,0x10
c0015163:	83 c1 01             	add    ecx,0x1
c0015166:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c001516c:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001516f:	85 c0                	test   eax,eax
c0015171:	75 bd                	jne    c0015130 <Process::addArgs(char**)+0x24>
c0015173:	90                   	nop
c0015174:	5b                   	pop    ebx
c0015175:	5e                   	pop    esi
c0015176:	5f                   	pop    edi
c0015177:	c3                   	ret    

c0015178 <Process::Process(char const*, Process*, char**)>:
c0015178:	56                   	push   esi
c0015179:	53                   	push   ebx
c001517a:	83 ec 14             	sub    esp,0x14
c001517d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015181:	05 0c 02 00 00       	add    eax,0x20c
c0015186:	bb 07 00 00 00       	mov    ebx,0x7
c001518b:	89 c6                	mov    esi,eax
c001518d:	8d 76 00             	lea    esi,[esi+0x0]
c0015190:	85 db                	test   ebx,ebx
c0015192:	78 14                	js     c00151a8 <Process::Process(char const*, Process*, char**)+0x30>
c0015194:	83 ec 0c             	sub    esp,0xc
c0015197:	56                   	push   esi
c0015198:	e8 73 b8 00 00       	call   c0020a10 <ThreadControlBlock::ThreadControlBlock()>
c001519d:	83 c4 10             	add    esp,0x10
c00151a0:	83 c6 5f             	add    esi,0x5f
c00151a3:	83 eb 01             	sub    ebx,0x1
c00151a6:	eb e8                	jmp    c0015190 <Process::Process(char const*, Process*, char**)+0x18>
c00151a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151ac:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00151b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151b7:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00151be:	83 ec 0c             	sub    esp,0xc
c00151c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00151c5:	e8 8a 8a ff ff       	call   c000dc54 <KeNewProcessEnv(Process*)>
c00151ca:	83 c4 10             	add    esp,0x10
c00151cd:	89 c2                	mov    edx,eax
c00151cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151d3:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00151d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151dd:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00151e6:	a1 dc 4f 02 c0       	mov    eax,ds:0xc0024fdc
c00151eb:	8d 50 01             	lea    edx,[eax+0x1]
c00151ee:	89 15 dc 4f 02 c0    	mov    DWORD PTR ds:0xc0024fdc,edx
c00151f4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151f8:	89 02                	mov    DWORD PTR [edx],eax
c00151fa:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015202:	83 ec 0c             	sub    esp,0xc
c0015205:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015209:	e8 41 98 ff ff       	call   c000ea4f <malloc>
c001520e:	83 c4 10             	add    esp,0x10
c0015211:	89 c3                	mov    ebx,eax
c0015213:	83 ec 08             	sub    esp,0x8
c0015216:	6a 00                	push   0x0
c0015218:	53                   	push   ebx
c0015219:	e8 be d9 ff ff       	call   c0012bdc <VAS::VAS(bool)>
c001521e:	83 c4 10             	add    esp,0x10
c0015221:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015225:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001522b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001522f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015239:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001523d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015241:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015247:	e8 0b ac ff ff       	call   c000fe57 <KeInitSignals()>
c001524c:	89 c2                	mov    edx,eax
c001524e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015252:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015258:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001525c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015262:	85 c0                	test   eax,eax
c0015264:	74 42                	je     c00152a8 <Process::Process(char const*, Process*, char**)+0x130>
c0015266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001526a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015270:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015276:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001527a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015280:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015284:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001528a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015290:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015294:	05 0c 01 00 00       	add    eax,0x10c
c0015299:	83 ec 08             	sub    esp,0x8
c001529c:	52                   	push   edx
c001529d:	50                   	push   eax
c001529e:	e8 9d b3 fe ff       	call   c0000640 <strcpy>
c00152a3:	83 c4 10             	add    esp,0x10
c00152a6:	eb 64                	jmp    c001530c <Process::Process(char const*, Process*, char**)+0x194>
c00152a8:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c00152b0:	83 ec 0c             	sub    esp,0xc
c00152b3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00152b7:	e8 93 97 ff ff       	call   c000ea4f <malloc>
c00152bc:	83 c4 10             	add    esp,0x10
c00152bf:	89 c3                	mov    ebx,eax
c00152c1:	83 ec 08             	sub    esp,0x8
c00152c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00152c8:	53                   	push   ebx
c00152c9:	e8 80 c4 ff ff       	call   c001174e <VgaText::VgaText(char const*)>
c00152ce:	83 c4 10             	add    esp,0x10
c00152d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152d5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00152db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152df:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152e5:	83 ec 0c             	sub    esp,0xc
c00152e8:	50                   	push   eax
c00152e9:	e8 fe bc ff ff       	call   c0010fec <addToTerminalCycle(VgaText*)>
c00152ee:	83 c4 10             	add    esp,0x10
c00152f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152f5:	05 0c 01 00 00       	add    eax,0x10c
c00152fa:	83 ec 08             	sub    esp,0x8
c00152fd:	68 d4 36 02 c0       	push   0xc00236d4
c0015302:	50                   	push   eax
c0015303:	e8 38 b3 fe ff       	call   c0000640 <strcpy>
c0015308:	83 c4 10             	add    esp,0x10
c001530b:	90                   	nop
c001530c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015310:	83 c0 0c             	add    eax,0xc
c0015313:	83 ec 08             	sub    esp,0x8
c0015316:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001531a:	50                   	push   eax
c001531b:	e8 20 b3 fe ff       	call   c0000640 <strcpy>
c0015320:	83 c4 10             	add    esp,0x10
c0015323:	83 ec 08             	sub    esp,0x8
c0015326:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001532a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001532e:	e8 d9 fd ff ff       	call   c001510c <Process::addArgs(char**)>
c0015333:	83 c4 10             	add    esp,0x10
c0015336:	83 ec 08             	sub    esp,0x8
c0015339:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001533d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015341:	e8 e4 ec ff ff       	call   c001402a <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015346:	83 c4 10             	add    esp,0x10
c0015349:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001534d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015351:	83 f0 01             	xor    eax,0x1
c0015354:	88 c2                	mov    dl,al
c0015356:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001535a:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015360:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015365:	83 ec 04             	sub    esp,0x4
c0015368:	50                   	push   eax
c0015369:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001536d:	68 50 37 02 c0       	push   0xc0023750
c0015372:	e8 ed 1b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015377:	83 c4 10             	add    esp,0x10
c001537a:	90                   	nop
c001537b:	83 c4 14             	add    esp,0x14
c001537e:	5b                   	pop    ebx
c001537f:	5e                   	pop    esi
c0015380:	c3                   	ret    
c0015381:	90                   	nop
c0015382:	66 90                	xchg   ax,ax

c0015384 <Process::Process(bool, char const*, Process*, char**)>:
c0015384:	56                   	push   esi
c0015385:	53                   	push   ebx
c0015386:	83 ec 24             	sub    esp,0x24
c0015389:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001538d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015391:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015395:	05 0c 02 00 00       	add    eax,0x20c
c001539a:	bb 07 00 00 00       	mov    ebx,0x7
c001539f:	89 c6                	mov    esi,eax
c00153a1:	8d 76 00             	lea    esi,[esi+0x0]
c00153a4:	85 db                	test   ebx,ebx
c00153a6:	78 14                	js     c00153bc <Process::Process(bool, char const*, Process*, char**)+0x38>
c00153a8:	83 ec 0c             	sub    esp,0xc
c00153ab:	56                   	push   esi
c00153ac:	e8 5f b6 00 00       	call   c0020a10 <ThreadControlBlock::ThreadControlBlock()>
c00153b1:	83 c4 10             	add    esp,0x10
c00153b4:	83 c6 5f             	add    esi,0x5f
c00153b7:	83 eb 01             	sub    ebx,0x1
c00153ba:	eb e8                	jmp    c00153a4 <Process::Process(bool, char const*, Process*, char**)+0x20>
c00153bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00153c0:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00153c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00153cb:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00153d2:	83 ec 0c             	sub    esp,0xc
c00153d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00153d9:	e8 76 88 ff ff       	call   c000dc54 <KeNewProcessEnv(Process*)>
c00153de:	83 c4 10             	add    esp,0x10
c00153e1:	89 c2                	mov    edx,eax
c00153e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00153e7:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00153ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00153f1:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00153fa:	a1 dc 4f 02 c0       	mov    eax,ds:0xc0024fdc
c00153ff:	8d 50 01             	lea    edx,[eax+0x1]
c0015402:	89 15 dc 4f 02 c0    	mov    DWORD PTR ds:0xc0024fdc,edx
c0015408:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001540c:	89 02                	mov    DWORD PTR [edx],eax
c001540e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015416:	83 ec 0c             	sub    esp,0xc
c0015419:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001541d:	e8 2d 96 ff ff       	call   c000ea4f <malloc>
c0015422:	83 c4 10             	add    esp,0x10
c0015425:	89 c3                	mov    ebx,eax
c0015427:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001542c:	83 ec 08             	sub    esp,0x8
c001542f:	50                   	push   eax
c0015430:	53                   	push   ebx
c0015431:	e8 a6 d7 ff ff       	call   c0012bdc <VAS::VAS(bool)>
c0015436:	83 c4 10             	add    esp,0x10
c0015439:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001543d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015443:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015447:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015451:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015455:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015459:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001545f:	e8 f3 a9 ff ff       	call   c000fe57 <KeInitSignals()>
c0015464:	89 c2                	mov    edx,eax
c0015466:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001546a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015470:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015474:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001547a:	85 c0                	test   eax,eax
c001547c:	74 42                	je     c00154c0 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c001547e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015482:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015488:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001548e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015492:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015498:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001549c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00154a2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00154a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00154ac:	05 0c 01 00 00       	add    eax,0x10c
c00154b1:	83 ec 08             	sub    esp,0x8
c00154b4:	52                   	push   edx
c00154b5:	50                   	push   eax
c00154b6:	e8 85 b1 fe ff       	call   c0000640 <strcpy>
c00154bb:	83 c4 10             	add    esp,0x10
c00154be:	eb 64                	jmp    c0015524 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c00154c0:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c00154c8:	83 ec 0c             	sub    esp,0xc
c00154cb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00154cf:	e8 7b 95 ff ff       	call   c000ea4f <malloc>
c00154d4:	83 c4 10             	add    esp,0x10
c00154d7:	89 c3                	mov    ebx,eax
c00154d9:	83 ec 08             	sub    esp,0x8
c00154dc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00154e0:	53                   	push   ebx
c00154e1:	e8 68 c2 ff ff       	call   c001174e <VgaText::VgaText(char const*)>
c00154e6:	83 c4 10             	add    esp,0x10
c00154e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00154ed:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00154f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00154f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00154fd:	83 ec 0c             	sub    esp,0xc
c0015500:	50                   	push   eax
c0015501:	e8 e6 ba ff ff       	call   c0010fec <addToTerminalCycle(VgaText*)>
c0015506:	83 c4 10             	add    esp,0x10
c0015509:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001550d:	05 0c 01 00 00       	add    eax,0x10c
c0015512:	83 ec 08             	sub    esp,0x8
c0015515:	68 d4 36 02 c0       	push   0xc00236d4
c001551a:	50                   	push   eax
c001551b:	e8 20 b1 fe ff       	call   c0000640 <strcpy>
c0015520:	83 c4 10             	add    esp,0x10
c0015523:	90                   	nop
c0015524:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015528:	83 c0 0c             	add    eax,0xc
c001552b:	83 ec 08             	sub    esp,0x8
c001552e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015532:	50                   	push   eax
c0015533:	e8 08 b1 fe ff       	call   c0000640 <strcpy>
c0015538:	83 c4 10             	add    esp,0x10
c001553b:	83 ec 08             	sub    esp,0x8
c001553e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015546:	e8 c1 fb ff ff       	call   c001510c <Process::addArgs(char**)>
c001554b:	83 c4 10             	add    esp,0x10
c001554e:	90                   	nop
c001554f:	83 c4 24             	add    esp,0x24
c0015552:	5b                   	pop    ebx
c0015553:	5e                   	pop    esi
c0015554:	c3                   	ret    
c0015555:	8d 76 00             	lea    esi,[esi+0x0]

c0015558 <taskStartupFunction>:
c0015558:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001555d:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015560:	c3                   	ret    
c0015561:	8d 76 00             	lea    esi,[esi+0x0]

c0015564 <KeDisablePreemption()>:
c0015564:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c0015569:	85 c0                	test   eax,eax
c001556b:	75 13                	jne    c0015580 <KeDisablePreemption()+0x1c>
c001556d:	8a 15 74 ad 02 c0    	mov    dl,BYTE PTR ds:0xc002ad74
c0015573:	c6 05 74 ad 02 c0 00 	mov    BYTE PTR ds:0xc002ad74,0x0
c001557a:	88 15 88 d6 02 c0    	mov    BYTE PTR ds:0xc002d688,dl
c0015580:	83 c0 01             	add    eax,0x1
c0015583:	a3 8c d6 02 c0       	mov    ds:0xc002d68c,eax
c0015588:	c3                   	ret    
c0015589:	8d 76 00             	lea    esi,[esi+0x0]

c001558c <KeRestorePreemption()>:
c001558c:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c0015591:	83 e8 01             	sub    eax,0x1
c0015594:	a3 8c d6 02 c0       	mov    ds:0xc002d68c,eax
c0015599:	75 0d                	jne    c00155a8 <KeRestorePreemption()+0x1c>
c001559b:	a0 88 d6 02 c0       	mov    al,ds:0xc002d688
c00155a0:	a2 74 ad 02 c0       	mov    ds:0xc002ad74,al
c00155a5:	8d 76 00             	lea    esi,[esi+0x0]
c00155a8:	c3                   	ret    
c00155a9:	90                   	nop
c00155aa:	66 90                	xchg   ax,ax

c00155ac <Process::createThread(void (*)(void*), void*, int)>:
c00155ac:	57                   	push   edi
c00155ad:	31 c9                	xor    ecx,ecx
c00155af:	56                   	push   esi
c00155b0:	53                   	push   ebx
c00155b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00155b5:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00155bc:	89 f2                	mov    edx,esi
c00155be:	66 90                	xchg   ax,ax
c00155c0:	0f b7 c2             	movzx  eax,dx
c00155c3:	80 e2 01             	and    dl,0x1
c00155c6:	74 14                	je     c00155dc <Process::createThread(void (*)(void*), void*, int)+0x30>
c00155c8:	d1 f8                	sar    eax,1
c00155ca:	83 c1 01             	add    ecx,0x1
c00155cd:	89 c2                	mov    edx,eax
c00155cf:	83 f9 10             	cmp    ecx,0x10
c00155d2:	75 ec                	jne    c00155c0 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00155d4:	31 db                	xor    ebx,ebx
c00155d6:	89 d8                	mov    eax,ebx
c00155d8:	5b                   	pop    ebx
c00155d9:	5e                   	pop    esi
c00155da:	5f                   	pop    edi
c00155db:	c3                   	ret    
c00155dc:	b8 01 00 00 00       	mov    eax,0x1
c00155e1:	d3 e0                	shl    eax,cl
c00155e3:	09 c6                	or     esi,eax
c00155e5:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00155e8:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00155ef:	01 c0                	add    eax,eax
c00155f1:	01 c8                	add    eax,ecx
c00155f3:	8d 04 80             	lea    eax,[eax+eax*4]
c00155f6:	01 d8                	add    eax,ebx
c00155f8:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00155ff:	75 0b                	jne    c001560c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015601:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001560b:	90                   	nop
c001560c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015612:	83 ec 0c             	sub    esp,0xc
c0015615:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015618:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001561b:	01 c0                	add    eax,eax
c001561d:	01 c8                	add    eax,ecx
c001561f:	8d 3c 80             	lea    edi,[eax+eax*4]
c0015622:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0015625:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001562b:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0015631:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015635:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001563b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015641:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015647:	89 ca                	mov    edx,ecx
c0015649:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015650:	f7 da                	neg    edx
c0015652:	c1 e2 15             	shl    edx,0x15
c0015655:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001565b:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015661:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015665:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001566f:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015675:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015679:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001567f:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015689:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015693:	68 00 01 00 00       	push   0x100
c0015698:	e8 b2 93 ff ff       	call   c000ea4f <malloc>
c001569d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00156a0:	58                   	pop    eax
c00156a1:	5a                   	pop    edx
c00156a2:	53                   	push   ebx
c00156a3:	68 cc d6 02 c0       	push   0xc002d6cc
c00156a8:	e8 0f af 00 00       	call   c00205bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00156ad:	83 c4 10             	add    esp,0x10
c00156b0:	89 d8                	mov    eax,ebx
c00156b2:	5b                   	pop    ebx
c00156b3:	5e                   	pop    esi
c00156b4:	5f                   	pop    edi
c00156b5:	c3                   	ret    
c00156b6:	66 90                	xchg   ax,ax

c00156b8 <Process::createUserThread()>:
c00156b8:	83 ec 0c             	sub    esp,0xc
c00156bb:	68 80 00 00 00       	push   0x80
c00156c0:	6a 00                	push   0x0
c00156c2:	68 00 50 01 c0       	push   0xc0015000
c00156c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00156cb:	50                   	push   eax
c00156cc:	e8 db fe ff ff       	call   c00155ac <Process::createThread(void (*)(void*), void*, int)>
c00156d1:	83 c4 1c             	add    esp,0x1c
c00156d4:	c3                   	ret    
c00156d5:	8d 76 00             	lea    esi,[esi+0x0]

c00156d8 <setupMultitasking(void (*)())>:
c00156d8:	56                   	push   esi
c00156d9:	53                   	push   ebx
c00156da:	83 ec 04             	sub    esp,0x4
c00156dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00156e1:	eb 11                	jmp    c00156f4 <setupMultitasking(void (*)())+0x1c>
c00156e3:	90                   	nop
c00156e4:	83 ec 0c             	sub    esp,0xc
c00156e7:	68 cc d6 02 c0       	push   0xc002d6cc
c00156ec:	e8 0f ae 00 00       	call   c0020500 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00156f1:	83 c4 10             	add    esp,0x10
c00156f4:	83 ec 0c             	sub    esp,0xc
c00156f7:	68 cc d6 02 c0       	push   0xc002d6cc
c00156fc:	e8 db ad 00 00       	call   c00204dc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015701:	83 c4 10             	add    esp,0x10
c0015704:	84 c0                	test   al,al
c0015706:	74 dc                	je     c00156e4 <setupMultitasking(void (*)())+0xc>
c0015708:	83 ec 0c             	sub    esp,0xc
c001570b:	68 24 07 00 00       	push   0x724
c0015710:	e8 3a 93 ff ff       	call   c000ea4f <malloc>
c0015715:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001571c:	89 c3                	mov    ebx,eax
c001571e:	6a 00                	push   0x0
c0015720:	68 d8 36 02 c0       	push   0xc00236d8
c0015725:	6a 01                	push   0x1
c0015727:	50                   	push   eax
c0015728:	e8 57 fc ff ff       	call   c0015384 <Process::Process(bool, char const*, Process*, char**)>
c001572d:	83 c4 14             	add    esp,0x14
c0015730:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015736:	89 1d d8 d6 02 c0    	mov    DWORD PTR ds:0xc002d6d8,ebx
c001573c:	50                   	push   eax
c001573d:	e8 ff ba ff ff       	call   c0011241 <setActiveTerminal(VgaText*)>
c0015742:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015749:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015753:	83 c8 01             	or     eax,0x1
c0015756:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c001575d:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015763:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015766:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015770:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015776:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001577c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015786:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015790:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001579a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00157a0:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00157aa:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00157b0:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00157ba:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00157c1:	e8 89 92 ff ff       	call   c000ea4f <malloc>
c00157c6:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00157cc:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00157d2:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00157d8:	5a                   	pop    edx
c00157d9:	59                   	pop    ecx
c00157da:	68 d4 36 02 c0       	push   0xc00236d4
c00157df:	50                   	push   eax
c00157e0:	e8 5b ae fe ff       	call   c0000640 <strcpy>
c00157e5:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00157ec:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00157f0:	83 c4 14             	add    esp,0x14
c00157f3:	5b                   	pop    ebx
c00157f4:	5e                   	pop    esi
c00157f5:	e9 6f aa fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00157fa:	66 90                	xchg   ax,ax

c00157fc <schedule()>:
c00157fc:	8b 15 ac d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6ac
c0015802:	85 d2                	test   edx,edx
c0015804:	74 0e                	je     c0015814 <schedule()+0x18>
c0015806:	c7 05 a8 d6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x1
c0015810:	c3                   	ret    
c0015811:	8d 76 00             	lea    esi,[esi+0x0]
c0015814:	53                   	push   ebx
c0015815:	83 ec 14             	sub    esp,0x14
c0015818:	68 cc d6 02 c0       	push   0xc002d6cc
c001581d:	e8 ba ac 00 00       	call   c00204dc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015822:	83 c4 10             	add    esp,0x10
c0015825:	84 c0                	test   al,al
c0015827:	75 3f                	jne    c0015868 <schedule()+0x6c>
c0015829:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001582e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015831:	83 fa 01             	cmp    edx,0x1
c0015834:	74 3a                	je     c0015870 <schedule()+0x74>
c0015836:	66 90                	xchg   ax,ax
c0015838:	83 ec 0c             	sub    esp,0xc
c001583b:	68 cc d6 02 c0       	push   0xc002d6cc
c0015840:	e8 b3 ac 00 00       	call   c00204f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015845:	c7 04 24 cc d6 02 c0 	mov    DWORD PTR [esp],0xc002d6cc
c001584c:	89 c3                	mov    ebx,eax
c001584e:	e8 ad ac 00 00       	call   c0020500 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015853:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001585a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001585d:	e8 fa f7 ff ff       	call   c001505c <switchToThread(ThreadControlBlock*)>
c0015862:	83 c4 10             	add    esp,0x10
c0015865:	8d 76 00             	lea    esi,[esi+0x0]
c0015868:	83 c4 08             	add    esp,0x8
c001586b:	5b                   	pop    ebx
c001586c:	c3                   	ret    
c001586d:	8d 76 00             	lea    esi,[esi+0x0]
c0015870:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015877:	83 ec 08             	sub    esp,0x8
c001587a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001587f:	50                   	push   eax
c0015880:	68 cc d6 02 c0       	push   0xc002d6cc
c0015885:	e8 32 ad 00 00       	call   c00205bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001588a:	83 c4 10             	add    esp,0x10
c001588d:	eb a9                	jmp    c0015838 <schedule()+0x3c>
c001588f:	90                   	nop

c0015890 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015890:	83 ec 0c             	sub    esp,0xc
c0015893:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015898:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001589c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001589f:	e8 58 ff ff ff       	call   c00157fc <schedule()>
c00158a4:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c00158ac:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00158b1:	85 c0                	test   eax,eax
c00158b3:	75 03                	jne    c00158b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c00158b5:	fb                   	sti    
c00158b6:	66 90                	xchg   ax,ax
c00158b8:	83 c4 0c             	add    esp,0xc
c00158bb:	c3                   	ret    

c00158bc <blockTask(TaskState)>:
c00158bc:	53                   	push   ebx
c00158bd:	83 ec 10             	sub    esp,0x10
c00158c0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00158c4:	fa                   	cli    
c00158c5:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00158ca:	53                   	push   ebx
c00158cb:	83 c0 01             	add    eax,0x1
c00158ce:	68 df 36 02 c0       	push   0xc00236df
c00158d3:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c00158d8:	e8 87 16 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00158dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158e2:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00158e5:	e8 12 ff ff ff       	call   c00157fc <schedule()>
c00158ea:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c00158f2:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c00158f8:	83 c4 10             	add    esp,0x10
c00158fb:	85 d2                	test   edx,edx
c00158fd:	75 01                	jne    c0015900 <blockTask(TaskState)+0x44>
c00158ff:	fb                   	sti    
c0015900:	83 c4 08             	add    esp,0x8
c0015903:	5b                   	pop    ebx
c0015904:	c3                   	ret    
c0015905:	8d 76 00             	lea    esi,[esi+0x0]

c0015908 <waitTask(int, int*, int)>:
c0015908:	83 ec 18             	sub    esp,0x18
c001590b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015910:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015914:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015917:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001591b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015920:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015923:	6a 07                	push   0x7
c0015925:	e8 92 ff ff ff       	call   c00158bc <blockTask(TaskState)>
c001592a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001592f:	83 c4 10             	add    esp,0x10
c0015932:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015935:	85 d2                	test   edx,edx
c0015937:	74 0b                	je     c0015944 <waitTask(int, int*, int)+0x3c>
c0015939:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001593c:	89 02                	mov    DWORD PTR [edx],eax
c001593e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015943:	90                   	nop
c0015944:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015947:	83 c4 0c             	add    esp,0xc
c001594a:	c3                   	ret    
c001594b:	90                   	nop

c001594c <milliTenthSleepUntil(unsigned int)>:
c001594c:	83 ec 0c             	sub    esp,0xc
c001594f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015953:	39 05 ec a7 02 c0    	cmp    DWORD PTR ds:0xc002a7ec,eax
c0015959:	76 05                	jbe    c0015960 <milliTenthSleepUntil(unsigned int)+0x14>
c001595b:	90                   	nop
c001595c:	83 c4 0c             	add    esp,0xc
c001595f:	c3                   	ret    
c0015960:	fa                   	cli    
c0015961:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0015967:	83 ec 08             	sub    esp,0x8
c001596a:	83 c1 01             	add    ecx,0x1
c001596d:	8b 15 ac d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6ac
c0015973:	89 0d b0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6b0,ecx
c0015979:	83 c2 01             	add    edx,0x1
c001597c:	89 15 ac d6 02 c0    	mov    DWORD PTR ds:0xc002d6ac,edx
c0015982:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015988:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001598b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015991:	51                   	push   ecx
c0015992:	68 c0 d6 02 c0       	push   0xc002d6c0
c0015997:	e8 20 ac 00 00       	call   c00205bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001599c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00159a3:	e8 14 ff ff ff       	call   c00158bc <blockTask(TaskState)>
c00159a8:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c00159ad:	83 c4 10             	add    esp,0x10
c00159b0:	83 e8 01             	sub    eax,0x1
c00159b3:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c00159b8:	85 c0                	test   eax,eax
c00159ba:	75 0c                	jne    c00159c8 <milliTenthSleepUntil(unsigned int)+0x7c>
c00159bc:	8b 15 a8 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6a8
c00159c2:	85 d2                	test   edx,edx
c00159c4:	75 1a                	jne    c00159e0 <milliTenthSleepUntil(unsigned int)+0x94>
c00159c6:	66 90                	xchg   ax,ax
c00159c8:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c00159d0:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00159d5:	85 c0                	test   eax,eax
c00159d7:	75 83                	jne    c001595c <milliTenthSleepUntil(unsigned int)+0x10>
c00159d9:	fb                   	sti    
c00159da:	83 c4 0c             	add    esp,0xc
c00159dd:	c3                   	ret    
c00159de:	66 90                	xchg   ax,ax
c00159e0:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c00159ea:	e8 0d fe ff ff       	call   c00157fc <schedule()>
c00159ef:	eb d7                	jmp    c00159c8 <milliTenthSleepUntil(unsigned int)+0x7c>
c00159f1:	8d 76 00             	lea    esi,[esi+0x0]

c00159f4 <milliTenthSleep(unsigned int)>:
c00159f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00159f8:	a1 ec a7 02 c0       	mov    eax,ds:0xc002a7ec
c00159fd:	01 c2                	add    edx,eax
c00159ff:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015a03:	e9 44 ff ff ff       	jmp    c001594c <milliTenthSleepUntil(unsigned int)>

c0015a08 <sleep(unsigned int)>:
c0015a08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a0c:	8d 04 80             	lea    eax,[eax+eax*4]
c0015a0f:	8d 04 80             	lea    eax,[eax+eax*4]
c0015a12:	8d 04 80             	lea    eax,[eax+eax*4]
c0015a15:	8d 04 80             	lea    eax,[eax+eax*4]
c0015a18:	c1 e0 04             	shl    eax,0x4
c0015a1b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015a1f:	eb d3                	jmp    c00159f4 <milliTenthSleep(unsigned int)>
c0015a21:	8d 76 00             	lea    esi,[esi+0x0]

c0015a24 <taskReturned>:
c0015a24:	83 ec 18             	sub    esp,0x18
c0015a27:	68 7c 37 02 c0       	push   0xc002377c
c0015a2c:	e8 65 93 ff ff       	call   c000ed96 <KePanic(char const*)>
c0015a31:	83 c4 10             	add    esp,0x10
c0015a34:	83 ec 0c             	sub    esp,0xc
c0015a37:	6a 02                	push   0x2
c0015a39:	e8 7e fe ff ff       	call   c00158bc <blockTask(TaskState)>
c0015a3e:	fa                   	cli    
c0015a3f:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015a44:	83 c0 01             	add    eax,0x1
c0015a47:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0015a4c:	e8 ab fd ff ff       	call   c00157fc <schedule()>
c0015a51:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015a59:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c0015a5f:	83 c4 10             	add    esp,0x10
c0015a62:	85 d2                	test   edx,edx
c0015a64:	75 ce                	jne    c0015a34 <taskReturned+0x10>
c0015a66:	fb                   	sti    
c0015a67:	eb cb                	jmp    c0015a34 <taskReturned+0x10>
c0015a69:	8d 76 00             	lea    esi,[esi+0x0]

c0015a6c <Thr::processFromPID(int)>:
c0015a6c:	57                   	push   edi
c0015a6d:	56                   	push   esi
c0015a6e:	53                   	push   ebx
c0015a6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015a73:	fa                   	cli    
c0015a74:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015a79:	83 ec 0c             	sub    esp,0xc
c0015a7c:	83 c0 01             	add    eax,0x1
c0015a7f:	68 cc d6 02 c0       	push   0xc002d6cc
c0015a84:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0015a89:	e8 6a aa 00 00       	call   c00204f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015a8e:	83 c4 10             	add    esp,0x10
c0015a91:	89 c7                	mov    edi,eax
c0015a93:	eb 17                	jmp    c0015aac <Thr::processFromPID(int)+0x40>
c0015a95:	8d 76 00             	lea    esi,[esi+0x0]
c0015a98:	83 ec 0c             	sub    esp,0xc
c0015a9b:	68 cc d6 02 c0       	push   0xc002d6cc
c0015aa0:	e8 53 aa 00 00       	call   c00204f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015aa5:	83 c4 10             	add    esp,0x10
c0015aa8:	39 f8                	cmp    eax,edi
c0015aaa:	74 50                	je     c0015afc <Thr::processFromPID(int)+0x90>
c0015aac:	83 ec 0c             	sub    esp,0xc
c0015aaf:	68 cc d6 02 c0       	push   0xc002d6cc
c0015ab4:	e8 3f aa 00 00       	call   c00204f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015ab9:	c7 04 24 cc d6 02 c0 	mov    DWORD PTR [esp],0xc002d6cc
c0015ac0:	89 c3                	mov    ebx,eax
c0015ac2:	e8 39 aa 00 00       	call   c0020500 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015ac7:	59                   	pop    ecx
c0015ac8:	58                   	pop    eax
c0015ac9:	53                   	push   ebx
c0015aca:	68 cc d6 02 c0       	push   0xc002d6cc
c0015acf:	e8 e8 aa 00 00       	call   c00205bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015ad4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015ad7:	83 c4 10             	add    esp,0x10
c0015ada:	39 30                	cmp    DWORD PTR [eax],esi
c0015adc:	75 ba                	jne    c0015a98 <Thr::processFromPID(int)+0x2c>
c0015ade:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015ae6:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c0015aec:	85 d2                	test   edx,edx
c0015aee:	74 08                	je     c0015af8 <Thr::processFromPID(int)+0x8c>
c0015af0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015af3:	5b                   	pop    ebx
c0015af4:	5e                   	pop    esi
c0015af5:	5f                   	pop    edi
c0015af6:	c3                   	ret    
c0015af7:	90                   	nop
c0015af8:	fb                   	sti    
c0015af9:	eb f5                	jmp    c0015af0 <Thr::processFromPID(int)+0x84>
c0015afb:	90                   	nop
c0015afc:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015b04:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015b09:	85 c0                	test   eax,eax
c0015b0b:	75 07                	jne    c0015b14 <Thr::processFromPID(int)+0xa8>
c0015b0d:	fb                   	sti    
c0015b0e:	31 c0                	xor    eax,eax
c0015b10:	5b                   	pop    ebx
c0015b11:	5e                   	pop    esi
c0015b12:	5f                   	pop    edi
c0015b13:	c3                   	ret    
c0015b14:	5b                   	pop    ebx
c0015b15:	31 c0                	xor    eax,eax
c0015b17:	5e                   	pop    esi
c0015b18:	5f                   	pop    edi
c0015b19:	c3                   	ret    
c0015b1a:	66 90                	xchg   ax,ax

c0015b1c <unblockTask(ThreadControlBlock*)>:
c0015b1c:	53                   	push   ebx
c0015b1d:	83 ec 08             	sub    esp,0x8
c0015b20:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015b24:	fa                   	cli    
c0015b25:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c0015b2b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015b2e:	83 c2 01             	add    edx,0x1
c0015b31:	85 c0                	test   eax,eax
c0015b33:	89 15 b0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6b0,edx
c0015b39:	74 6d                	je     c0015ba8 <unblockTask(ThreadControlBlock*)+0x8c>
c0015b3b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015b3e:	83 f8 01             	cmp    eax,0x1
c0015b41:	74 39                	je     c0015b7c <unblockTask(ThreadControlBlock*)+0x60>
c0015b43:	83 ec 0c             	sub    esp,0xc
c0015b46:	68 cc d6 02 c0       	push   0xc002d6cc
c0015b4b:	e8 a8 a9 00 00       	call   c00204f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015b50:	83 c4 10             	add    esp,0x10
c0015b53:	85 c0                	test   eax,eax
c0015b55:	75 1d                	jne    c0015b74 <unblockTask(ThreadControlBlock*)+0x58>
c0015b57:	eb 63                	jmp    c0015bbc <unblockTask(ThreadControlBlock*)+0xa0>
c0015b59:	8d 76 00             	lea    esi,[esi+0x0]
c0015b5c:	83 ec 08             	sub    esp,0x8
c0015b5f:	50                   	push   eax
c0015b60:	68 cc d6 02 c0       	push   0xc002d6cc
c0015b65:	e8 9a ae 00 00       	call   c0020a04 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0015b6a:	83 c4 10             	add    esp,0x10
c0015b6d:	85 c0                	test   eax,eax
c0015b6f:	74 4b                	je     c0015bbc <unblockTask(ThreadControlBlock*)+0xa0>
c0015b71:	8d 76 00             	lea    esi,[esi+0x0]
c0015b74:	39 c3                	cmp    ebx,eax
c0015b76:	75 e4                	jne    c0015b5c <unblockTask(ThreadControlBlock*)+0x40>
c0015b78:	eb 12                	jmp    c0015b8c <unblockTask(ThreadControlBlock*)+0x70>
c0015b7a:	66 90                	xchg   ax,ax
c0015b7c:	83 ec 0c             	sub    esp,0xc
c0015b7f:	68 08 37 02 c0       	push   0xc0023708
c0015b84:	e8 db 13 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015b89:	83 c4 10             	add    esp,0x10
c0015b8c:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015b94:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015b99:	85 c0                	test   eax,eax
c0015b9b:	75 03                	jne    c0015ba0 <unblockTask(ThreadControlBlock*)+0x84>
c0015b9d:	fb                   	sti    
c0015b9e:	66 90                	xchg   ax,ax
c0015ba0:	83 c4 08             	add    esp,0x8
c0015ba3:	5b                   	pop    ebx
c0015ba4:	c3                   	ret    
c0015ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0015ba8:	83 ec 0c             	sub    esp,0xc
c0015bab:	68 f1 36 02 c0       	push   0xc00236f1
c0015bb0:	e8 af 13 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015bb5:	83 c4 10             	add    esp,0x10
c0015bb8:	eb d2                	jmp    c0015b8c <unblockTask(ThreadControlBlock*)+0x70>
c0015bba:	66 90                	xchg   ax,ax
c0015bbc:	83 ec 08             	sub    esp,0x8
c0015bbf:	53                   	push   ebx
c0015bc0:	68 cc d6 02 c0       	push   0xc002d6cc
c0015bc5:	e8 f2 a9 00 00       	call   c00205bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015bca:	83 c4 10             	add    esp,0x10
c0015bcd:	eb bd                	jmp    c0015b8c <unblockTask(ThreadControlBlock*)+0x70>
c0015bcf:	90                   	nop

c0015bd0 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0015bd0:	55                   	push   ebp
c0015bd1:	57                   	push   edi
c0015bd2:	56                   	push   esi
c0015bd3:	53                   	push   ebx
c0015bd4:	83 ec 1c             	sub    esp,0x1c
c0015bd7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015bdb:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015bde:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0015be4:	85 ed                	test   ebp,ebp
c0015be6:	7e 28                	jle    c0015c10 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0015be8:	31 f6                	xor    esi,esi
c0015bea:	66 90                	xchg   ax,ax
c0015bec:	83 ec 0c             	sub    esp,0xc
c0015bef:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0015bf6:	83 c6 01             	add    esi,0x1
c0015bf9:	57                   	push   edi
c0015bfa:	e8 60 8e ff ff       	call   c000ea5f <free>
c0015bff:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015c02:	83 c4 10             	add    esp,0x10
c0015c05:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0015c0b:	7f df                	jg     c0015bec <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0015c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0015c10:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015c1a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015c1f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0015c22:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0015c25:	d3 c0                	rol    eax,cl
c0015c27:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0015c2e:	21 c8                	and    eax,ecx
c0015c30:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0015c37:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015c3a:	89 f7                	mov    edi,esi
c0015c3c:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0015c44:	0f 85 72 01 00 00    	jne    c0015dbc <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015c4a:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0015c50:	85 ed                	test   ebp,ebp
c0015c52:	74 1c                	je     c0015c70 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0015c54:	83 ec 0c             	sub    esp,0xc
c0015c57:	55                   	push   ebp
c0015c58:	e8 13 7f ff ff       	call   c000db70 <EnvVarContainer::~EnvVarContainer()>
c0015c5d:	59                   	pop    ecx
c0015c5e:	5e                   	pop    esi
c0015c5f:	6a 0c                	push   0xc
c0015c61:	55                   	push   ebp
c0015c62:	e8 ed 6a ff ff       	call   c000c754 <operator delete(void*, unsigned long)>
c0015c67:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015c6a:	83 c4 10             	add    esp,0x10
c0015c6d:	89 f7                	mov    edi,esi
c0015c6f:	90                   	nop
c0015c70:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015c76:	85 c0                	test   eax,eax
c0015c78:	0f 84 b2 00 00 00    	je     c0015d30 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015c7e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015c81:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0015c85:	31 c9                	xor    ecx,ecx
c0015c87:	eb 17                	jmp    c0015ca0 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0015c89:	8d 76 00             	lea    esi,[esi+0x0]
c0015c8c:	83 c1 01             	add    ecx,0x1
c0015c8f:	83 f9 10             	cmp    ecx,0x10
c0015c92:	0f 84 98 00 00 00    	je     c0015d30 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015c98:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015c9e:	66 90                	xchg   ax,ax
c0015ca0:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0015ca7:	d3 fa                	sar    edx,cl
c0015ca9:	80 e2 01             	and    dl,0x1
c0015cac:	74 de                	je     c0015c8c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015cae:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0015cb1:	01 d2                	add    edx,edx
c0015cb3:	01 ca                	add    edx,ecx
c0015cb5:	8d 14 92             	lea    edx,[edx+edx*4]
c0015cb8:	01 d0                	add    eax,edx
c0015cba:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0015cc0:	83 fd 07             	cmp    ebp,0x7
c0015cc3:	75 c7                	jne    c0015c8c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015cc5:	05 40 02 00 00       	add    eax,0x240
c0015cca:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0015ccd:	83 fd ff             	cmp    ebp,0xffffffff
c0015cd0:	0f 8c ee 00 00 00    	jl     c0015dc4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0015cd6:	0f 84 ac 01 00 00    	je     c0015e88 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0015cdc:	85 ed                	test   ebp,ebp
c0015cde:	0f 84 90 01 00 00    	je     c0015e74 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0015ce4:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015ce6:	75 a4                	jne    c0015c8c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015ce8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015cee:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015cf2:	01 d0                	add    eax,edx
c0015cf4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015cf8:	83 ec 0c             	sub    esp,0xc
c0015cfb:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015d01:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015d04:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d0a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0015d11:	50                   	push   eax
c0015d12:	e8 05 fe ff ff       	call   c0015b1c <unblockTask(ThreadControlBlock*)>
c0015d17:	83 c4 10             	add    esp,0x10
c0015d1a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015d1d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015d21:	89 f7                	mov    edi,esi
c0015d23:	83 c1 01             	add    ecx,0x1
c0015d26:	83 f9 10             	cmp    ecx,0x10
c0015d29:	0f 85 69 ff ff ff    	jne    c0015c98 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0015d2f:	90                   	nop
c0015d30:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0015d36:	85 c0                	test   eax,eax
c0015d38:	74 62                	je     c0015d9c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015d3a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0015d40:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0015d46:	74 54                	je     c0015d9c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015d48:	83 ec 0c             	sub    esp,0xc
c0015d4b:	68 cc d6 02 c0       	push   0xc002d6cc
c0015d50:	e8 a3 a7 00 00       	call   c00204f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015d55:	c7 04 24 cc d6 02 c0 	mov    DWORD PTR [esp],0xc002d6cc
c0015d5c:	89 c7                	mov    edi,eax
c0015d5e:	e8 79 a7 00 00       	call   c00204dc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015d63:	83 c4 10             	add    esp,0x10
c0015d66:	84 c0                	test   al,al
c0015d68:	0f 84 ce 00 00 00    	je     c0015e3c <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0015d6e:	66 90                	xchg   ax,ax
c0015d70:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015d73:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015d79:	85 d2                	test   edx,edx
c0015d7b:	74 0f                	je     c0015d8c <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0015d7d:	83 ec 0c             	sub    esp,0xc
c0015d80:	8b 02                	mov    eax,DWORD PTR [edx]
c0015d82:	52                   	push   edx
c0015d83:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015d86:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015d89:	83 c4 10             	add    esp,0x10
c0015d8c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0015d96:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015d99:	8d 76 00             	lea    esi,[esi+0x0]
c0015d9c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0015da2:	85 db                	test   ebx,ebx
c0015da4:	74 16                	je     c0015dbc <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015da6:	83 ec 0c             	sub    esp,0xc
c0015da9:	53                   	push   ebx
c0015daa:	e8 8d c9 ff ff       	call   c001273c <VAS::~VAS()>
c0015daf:	58                   	pop    eax
c0015db0:	5a                   	pop    edx
c0015db1:	6a 14                	push   0x14
c0015db3:	53                   	push   ebx
c0015db4:	e8 9b 69 ff ff       	call   c000c754 <operator delete(void*, unsigned long)>
c0015db9:	83 c4 10             	add    esp,0x10
c0015dbc:	83 c4 1c             	add    esp,0x1c
c0015dbf:	5b                   	pop    ebx
c0015dc0:	5e                   	pop    esi
c0015dc1:	5f                   	pop    edi
c0015dc2:	5d                   	pop    ebp
c0015dc3:	c3                   	ret    
c0015dc4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015dc8:	83 ec 0c             	sub    esp,0xc
c0015dcb:	68 b0 37 02 c0       	push   0xc00237b0
c0015dd0:	e8 c1 8f ff ff       	call   c000ed96 <KePanic(char const*)>
c0015dd5:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015dd8:	83 c4 10             	add    esp,0x10
c0015ddb:	89 f7                	mov    edi,esi
c0015ddd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015de1:	e9 a6 fe ff ff       	jmp    c0015c8c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015de6:	66 90                	xchg   ax,ax
c0015de8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015dee:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015df4:	75 1e                	jne    c0015e14 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015df6:	83 ec 0c             	sub    esp,0xc
c0015df9:	68 18 38 02 c0       	push   0xc0023818
c0015dfe:	e8 61 11 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015e03:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0015e0a:	e8 ad fa ff ff       	call   c00158bc <blockTask(TaskState)>
c0015e0f:	83 c4 10             	add    esp,0x10
c0015e12:	66 90                	xchg   ax,ax
c0015e14:	83 ec 08             	sub    esp,0x8
c0015e17:	56                   	push   esi
c0015e18:	68 cc d6 02 c0       	push   0xc002d6cc
c0015e1d:	e8 9a a7 00 00       	call   c00205bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015e22:	c7 04 24 cc d6 02 c0 	mov    DWORD PTR [esp],0xc002d6cc
c0015e29:	e8 ca a6 00 00       	call   c00204f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e2e:	83 c4 10             	add    esp,0x10
c0015e31:	39 f8                	cmp    eax,edi
c0015e33:	0f 84 37 ff ff ff    	je     c0015d70 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0015e39:	8d 76 00             	lea    esi,[esi+0x0]
c0015e3c:	83 ec 0c             	sub    esp,0xc
c0015e3f:	68 cc d6 02 c0       	push   0xc002d6cc
c0015e44:	e8 af a6 00 00       	call   c00204f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e49:	c7 04 24 cc d6 02 c0 	mov    DWORD PTR [esp],0xc002d6cc
c0015e50:	89 c6                	mov    esi,eax
c0015e52:	e8 a9 a6 00 00       	call   c0020500 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015e57:	83 c4 10             	add    esp,0x10
c0015e5a:	39 f3                	cmp    ebx,esi
c0015e5c:	74 b6                	je     c0015e14 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015e5e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015e61:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015e64:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015e6a:	75 a8                	jne    c0015e14 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015e6c:	e9 77 ff ff ff       	jmp    c0015de8 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0015e71:	8d 76 00             	lea    esi,[esi+0x0]
c0015e74:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015e78:	83 ec 0c             	sub    esp,0xc
c0015e7b:	68 e4 37 02 c0       	push   0xc00237e4
c0015e80:	e9 4b ff ff ff       	jmp    c0015dd0 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0015e85:	8d 76 00             	lea    esi,[esi+0x0]
c0015e88:	8b 36                	mov    esi,DWORD PTR [esi]
c0015e8a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015e8e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015e91:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015e94:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0015e9a:	01 d7                	add    edi,edx
c0015e9c:	89 f8                	mov    eax,edi
c0015e9e:	e9 51 fe ff ff       	jmp    c0015cf4 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0015ea3:	90                   	nop

c0015ea4 <cleanerTaskFunction(void*)>:
c0015ea4:	53                   	push   ebx
c0015ea5:	83 ec 08             	sub    esp,0x8
c0015ea8:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015eb0:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015eb5:	85 c0                	test   eax,eax
c0015eb7:	75 03                	jne    c0015ebc <cleanerTaskFunction(void*)+0x18>
c0015eb9:	fb                   	sti    
c0015eba:	66 90                	xchg   ax,ax
c0015ebc:	fa                   	cli    
c0015ebd:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015ec2:	83 c0 01             	add    eax,0x1
c0015ec5:	80 3d 94 d6 02 c0 00 	cmp    BYTE PTR ds:0xc002d694,0x0
c0015ecc:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0015ed1:	0f 85 c9 00 00 00    	jne    c0015fa0 <cleanerTaskFunction(void*)+0xfc>
c0015ed7:	83 ec 0c             	sub    esp,0xc
c0015eda:	6a 02                	push   0x2
c0015edc:	e8 af f9 ff ff       	call   c0015890 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015ee1:	83 c4 10             	add    esp,0x10
c0015ee4:	c6 05 94 d6 02 c0 00 	mov    BYTE PTR ds:0xc002d694,0x0
c0015eeb:	fa                   	cli    
c0015eec:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0015ef2:	8b 1d ac d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6ac
c0015ef8:	83 c1 01             	add    ecx,0x1
c0015efb:	83 c3 01             	add    ebx,0x1
c0015efe:	89 0d b0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6b0,ecx
c0015f04:	89 1d ac d6 02 c0    	mov    DWORD PTR ds:0xc002d6ac,ebx
c0015f0a:	fa                   	cli    
c0015f0b:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015f10:	83 c0 01             	add    eax,0x1
c0015f13:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0015f18:	eb 2a                	jmp    c0015f44 <cleanerTaskFunction(void*)+0xa0>
c0015f1a:	66 90                	xchg   ax,ax
c0015f1c:	83 ec 0c             	sub    esp,0xc
c0015f1f:	68 b4 d6 02 c0       	push   0xc002d6b4
c0015f24:	e8 cf a5 00 00       	call   c00204f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015f29:	c7 04 24 b4 d6 02 c0 	mov    DWORD PTR [esp],0xc002d6b4
c0015f30:	89 c3                	mov    ebx,eax
c0015f32:	e8 c9 a5 00 00       	call   c0020500 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015f37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f3a:	e8 91 fc ff ff       	call   c0015bd0 <cleanupTerminatedTask(ThreadControlBlock*)>
c0015f3f:	83 c4 10             	add    esp,0x10
c0015f42:	66 90                	xchg   ax,ax
c0015f44:	83 ec 0c             	sub    esp,0xc
c0015f47:	68 b4 d6 02 c0       	push   0xc002d6b4
c0015f4c:	e8 8b a5 00 00       	call   c00204dc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015f51:	83 c4 10             	add    esp,0x10
c0015f54:	84 c0                	test   al,al
c0015f56:	74 c4                	je     c0015f1c <cleanerTaskFunction(void*)+0x78>
c0015f58:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015f60:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c0015f66:	85 d2                	test   edx,edx
c0015f68:	75 02                	jne    c0015f6c <cleanerTaskFunction(void*)+0xc8>
c0015f6a:	fb                   	sti    
c0015f6b:	90                   	nop
c0015f6c:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0015f71:	83 e8 01             	sub    eax,0x1
c0015f74:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c0015f79:	0f 85 29 ff ff ff    	jne    c0015ea8 <cleanerTaskFunction(void*)+0x4>
c0015f7f:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0015f84:	85 c0                	test   eax,eax
c0015f86:	0f 84 1c ff ff ff    	je     c0015ea8 <cleanerTaskFunction(void*)+0x4>
c0015f8c:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c0015f96:	e8 61 f8 ff ff       	call   c00157fc <schedule()>
c0015f9b:	e9 08 ff ff ff       	jmp    c0015ea8 <cleanerTaskFunction(void*)+0x4>
c0015fa0:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015fa8:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015fad:	85 c0                	test   eax,eax
c0015faf:	0f 85 2f ff ff ff    	jne    c0015ee4 <cleanerTaskFunction(void*)+0x40>
c0015fb5:	fb                   	sti    
c0015fb6:	e9 29 ff ff ff       	jmp    c0015ee4 <cleanerTaskFunction(void*)+0x40>
c0015fbb:	90                   	nop

c0015fbc <terminateTask(int)>:
c0015fbc:	83 ec 18             	sub    esp,0x18
c0015fbf:	68 1f 37 02 c0       	push   0xc002371f
c0015fc4:	e8 9b 0f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015fc9:	fa                   	cli    
c0015fca:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015fcf:	83 c0 01             	add    eax,0x1
c0015fd2:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0015fd7:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0015fdc:	83 c0 01             	add    eax,0x1
c0015fdf:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c0015fe4:	fa                   	cli    
c0015fe5:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015fea:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015fee:	83 c0 01             	add    eax,0x1
c0015ff1:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0015ff6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ffb:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015ffe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016003:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016006:	5a                   	pop    edx
c0016007:	59                   	pop    ecx
c0016008:	50                   	push   eax
c0016009:	68 b4 d6 02 c0       	push   0xc002d6b4
c001600e:	e8 a9 a5 00 00       	call   c00205bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016013:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016018:	83 c4 10             	add    esp,0x10
c001601b:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016022:	a1 90 d6 02 c0       	mov    eax,ds:0xc002d690
c0016027:	85 c0                	test   eax,eax
c0016029:	0f 84 81 00 00 00    	je     c00160b0 <terminateTask(int)+0xf4>
c001602f:	83 ec 0c             	sub    esp,0xc
c0016032:	c6 05 94 d6 02 c0 01 	mov    BYTE PTR ds:0xc002d694,0x1
c0016039:	50                   	push   eax
c001603a:	e8 dd fa ff ff       	call   c0015b1c <unblockTask(ThreadControlBlock*)>
c001603f:	83 c4 10             	add    esp,0x10
c0016042:	66 90                	xchg   ax,ax
c0016044:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c001604c:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0016051:	85 c0                	test   eax,eax
c0016053:	75 03                	jne    c0016058 <terminateTask(int)+0x9c>
c0016055:	fb                   	sti    
c0016056:	66 90                	xchg   ax,ax
c0016058:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c001605d:	83 e8 01             	sub    eax,0x1
c0016060:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c0016065:	75 09                	jne    c0016070 <terminateTask(int)+0xb4>
c0016067:	83 3d a8 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6a8,0x0
c001606e:	75 54                	jne    c00160c4 <terminateTask(int)+0x108>
c0016070:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0016078:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c001607e:	85 c9                	test   ecx,ecx
c0016080:	75 06                	jne    c0016088 <terminateTask(int)+0xcc>
c0016082:	66 90                	xchg   ax,ax
c0016084:	fb                   	sti    
c0016085:	8d 76 00             	lea    esi,[esi+0x0]
c0016088:	fa                   	cli    
c0016089:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c001608e:	83 c0 01             	add    eax,0x1
c0016091:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0016096:	e8 61 f7 ff ff       	call   c00157fc <schedule()>
c001609b:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c00160a3:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c00160a9:	85 d2                	test   edx,edx
c00160ab:	75 db                	jne    c0016088 <terminateTask(int)+0xcc>
c00160ad:	eb d5                	jmp    c0016084 <terminateTask(int)+0xc8>
c00160af:	90                   	nop
c00160b0:	83 ec 0c             	sub    esp,0xc
c00160b3:	68 32 37 02 c0       	push   0xc0023732
c00160b8:	e8 a7 0e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00160bd:	83 c4 10             	add    esp,0x10
c00160c0:	eb 82                	jmp    c0016044 <terminateTask(int)+0x88>
c00160c2:	66 90                	xchg   ax,ax
c00160c4:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c00160ce:	e8 29 f7 ff ff       	call   c00157fc <schedule()>
c00160d3:	eb 9b                	jmp    c0016070 <terminateTask(int)+0xb4>
c00160d5:	8d 76 00             	lea    esi,[esi+0x0]

c00160d8 <Thr::terminateFromIRQ(int)>:
c00160d8:	83 ec 18             	sub    esp,0x18
c00160db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00160df:	50                   	push   eax
c00160e0:	e8 d7 fe ff ff       	call   c0015fbc <terminateTask(int)>
c00160e5:	8d 76 00             	lea    esi,[esi+0x0]

c00160e8 <__static_initialization_and_destruction_0(int, int)>:
c00160e8:	83 ec 0c             	sub    esp,0xc
c00160eb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00160f0:	0f 85 8e 00 00 00    	jne    c0016184 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00160f6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00160fe:	0f 85 80 00 00 00    	jne    c0016184 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016104:	83 ec 0c             	sub    esp,0xc
c0016107:	68 cc d6 02 c0       	push   0xc002d6cc
c001610c:	e8 4b a9 00 00       	call   c0020a5c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016111:	83 c4 10             	add    esp,0x10
c0016114:	83 ec 04             	sub    esp,0x4
c0016117:	68 34 48 02 c0       	push   0xc0024834
c001611c:	68 cc d6 02 c0       	push   0xc002d6cc
c0016121:	68 0c 0a 02 c0       	push   0xc0020a0c
c0016126:	e8 d9 65 ff ff       	call   c000c704 <__cxa_atexit>
c001612b:	83 c4 10             	add    esp,0x10
c001612e:	83 ec 0c             	sub    esp,0xc
c0016131:	68 c0 d6 02 c0       	push   0xc002d6c0
c0016136:	e8 21 a9 00 00       	call   c0020a5c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001613b:	83 c4 10             	add    esp,0x10
c001613e:	83 ec 04             	sub    esp,0x4
c0016141:	68 34 48 02 c0       	push   0xc0024834
c0016146:	68 c0 d6 02 c0       	push   0xc002d6c0
c001614b:	68 0c 0a 02 c0       	push   0xc0020a0c
c0016150:	e8 af 65 ff ff       	call   c000c704 <__cxa_atexit>
c0016155:	83 c4 10             	add    esp,0x10
c0016158:	83 ec 0c             	sub    esp,0xc
c001615b:	68 b4 d6 02 c0       	push   0xc002d6b4
c0016160:	e8 f7 a8 00 00       	call   c0020a5c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016165:	83 c4 10             	add    esp,0x10
c0016168:	83 ec 04             	sub    esp,0x4
c001616b:	68 34 48 02 c0       	push   0xc0024834
c0016170:	68 b4 d6 02 c0       	push   0xc002d6b4
c0016175:	68 0c 0a 02 c0       	push   0xc0020a0c
c001617a:	e8 85 65 ff ff       	call   c000c704 <__cxa_atexit>
c001617f:	83 c4 10             	add    esp,0x10
c0016182:	66 90                	xchg   ax,ax
c0016184:	90                   	nop
c0016185:	83 c4 0c             	add    esp,0xc
c0016188:	c3                   	ret    
c0016189:	8d 76 00             	lea    esi,[esi+0x0]

c001618c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001618c:	83 ec 0c             	sub    esp,0xc
c001618f:	83 ec 08             	sub    esp,0x8
c0016192:	68 ff ff 00 00       	push   0xffff
c0016197:	6a 01                	push   0x1
c0016199:	e8 4a ff ff ff       	call   c00160e8 <__static_initialization_and_destruction_0(int, int)>
c001619e:	83 c4 10             	add    esp,0x10
c00161a1:	83 c4 0c             	add    esp,0xc
c00161a4:	c3                   	ret    

c00161a5 <Vm::inbv(unsigned short)>:
c00161a5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00161a9:	66 81 fa fe fe       	cmp    dx,0xfefe
c00161ae:	75 06                	jne    c00161b6 <Vm::inbv(unsigned short)+0x11>
c00161b0:	a0 10 d7 02 c0       	mov    al,ds:0xc002d710
c00161b5:	c3                   	ret    
c00161b6:	ec                   	in     al,dx
c00161b7:	c3                   	ret    

c00161b8 <Vm::outbv(unsigned short, unsigned char)>:
c00161b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00161bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00161c0:	66 81 fa fe fe       	cmp    dx,0xfefe
c00161c5:	75 25                	jne    c00161ec <Vm::outbv(unsigned short, unsigned char)+0x34>
c00161c7:	8b 0d 10 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d710
c00161cd:	8d 51 01             	lea    edx,[ecx+0x1]
c00161d0:	88 81 20 d7 02 c0    	mov    BYTE PTR [ecx-0x3ffd28e0],al
c00161d6:	89 15 10 d7 02 c0    	mov    DWORD PTR ds:0xc002d710,edx
c00161dc:	83 fa 20             	cmp    edx,0x20
c00161df:	75 0c                	jne    c00161ed <Vm::outbv(unsigned short, unsigned char)+0x35>
c00161e1:	c7 05 10 d7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002d710,0x1f
c00161eb:	c3                   	ret    
c00161ec:	ee                   	out    dx,al
c00161ed:	c3                   	ret    

c00161ee <Vm::realToLinear(unsigned short, unsigned short)>:
c00161ee:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00161f3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00161f8:	c1 e0 04             	shl    eax,0x4
c00161fb:	01 d0                	add    eax,edx
c00161fd:	c3                   	ret    

c00161fe <Vm::getSegment(unsigned int)>:
c00161fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016202:	c1 e8 10             	shr    eax,0x10
c0016205:	c3                   	ret    

c0016206 <Vm::getOffset(unsigned int)>:
c0016206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001620a:	c3                   	ret    

c001620b <Vm::mainloop2()>:
c001620b:	83 ec 18             	sub    esp,0x18
c001620e:	fa                   	cli    
c001620f:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c0016215:	6a 02                	push   0x2
c0016217:	c6 05 09 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d709,0x1
c001621e:	e8 6d f6 ff ff       	call   c0015890 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016223:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016228:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001622c:	52                   	push   edx
c001622d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016231:	52                   	push   edx
c0016232:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016236:	52                   	push   edx
c0016237:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001623b:	50                   	push   eax
c001623c:	e8 ce 9f fe ff       	call   c000020f <goToVM86>
c0016241:	83 c4 2c             	add    esp,0x2c
c0016244:	c3                   	ret    

c0016245 <Vm::mainVm8086Loop(void*)>:
c0016245:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001624c:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0016253:	75 01                	jne    c0016256 <Vm::mainVm8086Loop(void*)+0x11>
c0016255:	fb                   	sti    
c0016256:	eb b3                	jmp    c001620b <Vm::mainloop2()>

c0016258 <Vm::mainloop3(unsigned long)>:
c0016258:	83 ec 18             	sub    esp,0x18
c001625b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001625f:	fa                   	cli    
c0016260:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c0016266:	6a 02                	push   0x2
c0016268:	c6 05 08 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d708,0x1
c001626f:	a3 04 d7 02 c0       	mov    ds:0xc002d704,eax
c0016274:	e8 17 f6 ff ff       	call   c0015890 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016279:	83 c4 1c             	add    esp,0x1c
c001627c:	eb 8d                	jmp    c001620b <Vm::mainloop2()>

c001627e <Vm::initialise8086()>:
c001627e:	83 ec 0c             	sub    esp,0xc
c0016281:	68 80 00 00 00       	push   0x80
c0016286:	6a 00                	push   0x0
c0016288:	68 45 62 01 c0       	push   0xc0016245
c001628d:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0016293:	e8 14 f3 ff ff       	call   c00155ac <Process::createThread(void (*)(void*), void*, int)>
c0016298:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001629f:	a3 0c d7 02 c0       	mov    ds:0xc002d70c,eax
c00162a4:	68 10 01 00 00       	push   0x110
c00162a9:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00162ae:	6a 00                	push   0x0
c00162b0:	6a 00                	push   0x0
c00162b2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00162b8:	e8 d1 c7 ff ff       	call   c0012a8e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00162bd:	83 c4 2c             	add    esp,0x2c
c00162c0:	c3                   	ret    

c00162c1 <Vm::resetConventionalMemory8086()>:
c00162c1:	c3                   	ret    

c00162c2 <Vm::finish8086()>:
c00162c2:	53                   	push   ebx
c00162c3:	83 ec 08             	sub    esp,0x8
c00162c6:	fa                   	cli    
c00162c7:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c00162cd:	80 3d 08 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d708,0x0
c00162d4:	75 18                	jne    c00162ee <Vm::finish8086()+0x2c>
c00162d6:	e8 21 f5 ff ff       	call   c00157fc <schedule()>
c00162db:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c00162e2:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c00162e9:	75 db                	jne    c00162c6 <Vm::finish8086()+0x4>
c00162eb:	fb                   	sti    
c00162ec:	eb d8                	jmp    c00162c6 <Vm::finish8086()+0x4>
c00162ee:	83 ec 0c             	sub    esp,0xc
c00162f1:	8b 1d 04 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d704
c00162f7:	ff 35 0c d7 02 c0    	push   DWORD PTR ds:0xc002d70c
c00162fd:	c6 05 08 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d708,0x0
c0016304:	e8 13 f8 ff ff       	call   c0015b1c <unblockTask(ThreadControlBlock*)>
c0016309:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0016310:	83 c4 10             	add    esp,0x10
c0016313:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c001631a:	75 01                	jne    c001631d <Vm::finish8086()+0x5b>
c001631c:	fb                   	sti    
c001631d:	89 d8                	mov    eax,ebx
c001631f:	83 c4 08             	add    esp,0x8
c0016322:	5b                   	pop    ebx
c0016323:	c3                   	ret    

c0016324 <Vm::getOutput8086(unsigned char*)>:
c0016324:	57                   	push   edi
c0016325:	8b 0d 10 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d710
c001632b:	56                   	push   esi
c001632c:	be 20 d7 02 c0       	mov    esi,0xc002d720
c0016331:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016335:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016337:	a1 10 d7 02 c0       	mov    eax,ds:0xc002d710
c001633c:	5e                   	pop    esi
c001633d:	c7 05 10 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d710,0x0
c0016347:	5f                   	pop    edi
c0016348:	c3                   	ret    

c0016349 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016349:	55                   	push   ebp
c001634a:	57                   	push   edi
c001634b:	56                   	push   esi
c001634c:	53                   	push   ebx
c001634d:	83 ec 2c             	sub    esp,0x2c
c0016350:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0016354:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016358:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001635c:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0016360:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016364:	80 3d 00 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d700,0x0
c001636b:	75 5d                	jne    c00163ca <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c001636d:	83 ec 0c             	sub    esp,0xc
c0016370:	68 14 01 00 00       	push   0x114
c0016375:	e8 d5 86 ff ff       	call   c000ea4f <malloc>
c001637a:	83 c4 0c             	add    esp,0xc
c001637d:	89 c7                	mov    edi,eax
c001637f:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0016385:	68 40 38 02 c0       	push   0xc0023840
c001638a:	50                   	push   eax
c001638b:	e8 a2 1d ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0016390:	58                   	pop    eax
c0016391:	5a                   	pop    edx
c0016392:	6a 12                	push   0x12
c0016394:	57                   	push   edi
c0016395:	e8 b6 1d ff ff       	call   c0008150 <File::open(FileOpenMode)>
c001639a:	59                   	pop    ecx
c001639b:	8b 07                	mov    eax,DWORD PTR [edi]
c001639d:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00163a1:	51                   	push   ecx
c00163a2:	6a 00                	push   0x0
c00163a4:	6a 00                	push   0x0
c00163a6:	68 00 00 11 00       	push   0x110000
c00163ab:	57                   	push   edi
c00163ac:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00163af:	83 c4 14             	add    esp,0x14
c00163b2:	57                   	push   edi
c00163b3:	e8 f6 1d ff ff       	call   c00081ae <File::close()>
c00163b8:	8b 07                	mov    eax,DWORD PTR [edi]
c00163ba:	89 3c 24             	mov    DWORD PTR [esp],edi
c00163bd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00163c0:	c6 05 00 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d700,0x1
c00163c7:	83 c4 10             	add    esp,0x10
c00163ca:	fa                   	cli    
c00163cb:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c00163d1:	80 3d 09 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d709,0x0
c00163d8:	75 18                	jne    c00163f2 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa9>
c00163da:	e8 1d f4 ff ff       	call   c00157fc <schedule()>
c00163df:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c00163e6:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c00163ed:	75 db                	jne    c00163ca <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c00163ef:	fb                   	sti    
c00163f0:	eb d8                	jmp    c00163ca <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c00163f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163f6:	a1 0c d7 02 c0       	mov    eax,ds:0xc002d70c
c00163fb:	c7 05 10 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d710,0x0
c0016405:	66 89 70 55          	mov    WORD PTR [eax+0x55],si
c0016409:	66 89 58 57          	mov    WORD PTR [eax+0x57],bx
c001640d:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016411:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016415:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016419:	0f b7 f6             	movzx  esi,si
c001641c:	0f b7 db             	movzx  ebx,bx
c001641f:	50                   	push   eax
c0016420:	6a 20                	push   0x20
c0016422:	6a 00                	push   0x0
c0016424:	68 20 d7 02 c0       	push   0xc002d720
c0016429:	e8 c2 a0 fe ff       	call   c00004f0 <memset>
c001642e:	5a                   	pop    edx
c001642f:	59                   	pop    ecx
c0016430:	56                   	push   esi
c0016431:	53                   	push   ebx
c0016432:	e8 b7 fd ff ff       	call   c00161ee <Vm::realToLinear(unsigned short, unsigned short)>
c0016437:	83 c4 10             	add    esp,0x10
c001643a:	89 c7                	mov    edi,eax
c001643c:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016440:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0016444:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016446:	c6 05 09 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d709,0x0
c001644d:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0016454:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c001645b:	75 01                	jne    c001645e <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x115>
c001645d:	fb                   	sti    
c001645e:	83 ec 0c             	sub    esp,0xc
c0016461:	ff 35 0c d7 02 c0    	push   DWORD PTR ds:0xc002d70c
c0016467:	e8 b0 f6 ff ff       	call   c0015b1c <unblockTask(ThreadControlBlock*)>
c001646c:	83 c4 3c             	add    esp,0x3c
c001646f:	b0 01                	mov    al,0x1
c0016471:	5b                   	pop    ebx
c0016472:	5e                   	pop    esi
c0016473:	5f                   	pop    edi
c0016474:	5d                   	pop    ebp
c0016475:	c3                   	ret    

c0016476 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016476:	55                   	push   ebp
c0016477:	57                   	push   edi
c0016478:	56                   	push   esi
c0016479:	53                   	push   ebx
c001647a:	83 ec 2c             	sub    esp,0x2c
c001647d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016481:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016485:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016489:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001648d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016491:	80 3d 00 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d700,0x0
c0016498:	75 5d                	jne    c00164f7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c001649a:	83 ec 0c             	sub    esp,0xc
c001649d:	68 14 01 00 00       	push   0x114
c00164a2:	e8 a8 85 ff ff       	call   c000ea4f <malloc>
c00164a7:	83 c4 0c             	add    esp,0xc
c00164aa:	89 c6                	mov    esi,eax
c00164ac:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c00164b2:	68 40 38 02 c0       	push   0xc0023840
c00164b7:	50                   	push   eax
c00164b8:	e8 75 1c ff ff       	call   c0008132 <File::File(char const*, Process*)>
c00164bd:	58                   	pop    eax
c00164be:	5a                   	pop    edx
c00164bf:	6a 12                	push   0x12
c00164c1:	56                   	push   esi
c00164c2:	e8 89 1c ff ff       	call   c0008150 <File::open(FileOpenMode)>
c00164c7:	59                   	pop    ecx
c00164c8:	8b 06                	mov    eax,DWORD PTR [esi]
c00164ca:	8d 54 24 24          	lea    edx,[esp+0x24]
c00164ce:	52                   	push   edx
c00164cf:	6a 00                	push   0x0
c00164d1:	6a 00                	push   0x0
c00164d3:	68 00 00 11 00       	push   0x110000
c00164d8:	56                   	push   esi
c00164d9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00164dc:	83 c4 14             	add    esp,0x14
c00164df:	56                   	push   esi
c00164e0:	e8 c9 1c ff ff       	call   c00081ae <File::close()>
c00164e5:	8b 06                	mov    eax,DWORD PTR [esi]
c00164e7:	89 34 24             	mov    DWORD PTR [esp],esi
c00164ea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00164ed:	c6 05 00 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d700,0x1
c00164f4:	83 c4 10             	add    esp,0x10
c00164f7:	50                   	push   eax
c00164f8:	50                   	push   eax
c00164f9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00164fd:	68 5b 38 02 c0       	push   0xc002385b
c0016502:	e8 5d 0a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016507:	83 c4 10             	add    esp,0x10
c001650a:	fa                   	cli    
c001650b:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c0016511:	0f b6 35 09 d7 02 c0 	movzx  esi,BYTE PTR ds:0xc002d709
c0016518:	89 f0                	mov    eax,esi
c001651a:	84 c0                	test   al,al
c001651c:	75 18                	jne    c0016536 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001651e:	e8 d9 f2 ff ff       	call   c00157fc <schedule()>
c0016523:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001652a:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0016531:	75 d7                	jne    c001650a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0016533:	fb                   	sti    
c0016534:	eb d4                	jmp    c001650a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0016536:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001653a:	a1 0c d7 02 c0       	mov    eax,ds:0xc002d70c
c001653f:	c7 05 10 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d710,0x0
c0016549:	66 89 48 5b          	mov    WORD PTR [eax+0x5b],cx
c001654d:	66 89 58 59          	mov    WORD PTR [eax+0x59],bx
c0016551:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016555:	66 89 68 57          	mov    WORD PTR [eax+0x57],bp
c0016559:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001655d:	50                   	push   eax
c001655e:	6a 20                	push   0x20
c0016560:	6a 00                	push   0x0
c0016562:	68 20 d7 02 c0       	push   0xc002d720
c0016567:	e8 84 9f fe ff       	call   c00004f0 <memset>
c001656c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016573:	e8 d7 84 ff ff       	call   c000ea4f <malloc>
c0016578:	83 c4 0c             	add    esp,0xc
c001657b:	89 c3                	mov    ebx,eax
c001657d:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0016583:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016587:	50                   	push   eax
c0016588:	e8 a5 1b ff ff       	call   c0008132 <File::File(char const*, Process*)>
c001658d:	83 c4 10             	add    esp,0x10
c0016590:	85 db                	test   ebx,ebx
c0016592:	75 0a                	jne    c001659e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x128>
c0016594:	83 ec 0c             	sub    esp,0xc
c0016597:	68 7d 38 02 c0       	push   0xc002387d
c001659c:	eb 2b                	jmp    c00165c9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x153>
c001659e:	50                   	push   eax
c001659f:	8d 44 24 17          	lea    eax,[esp+0x17]
c00165a3:	50                   	push   eax
c00165a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00165a8:	50                   	push   eax
c00165a9:	53                   	push   ebx
c00165aa:	e8 a3 1e ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c00165af:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00165b3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00165b7:	83 c4 10             	add    esp,0x10
c00165ba:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00165bf:	74 28                	je     c00165e9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x173>
c00165c1:	83 ec 0c             	sub    esp,0xc
c00165c4:	68 91 38 02 c0       	push   0xc0023891
c00165c9:	e8 c8 87 ff ff       	call   c000ed96 <KePanic(char const*)>
c00165ce:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c00165d5:	83 c4 10             	add    esp,0x10
c00165d8:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c00165df:	75 01                	jne    c00165e2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x16c>
c00165e1:	fb                   	sti    
c00165e2:	31 f6                	xor    esi,esi
c00165e4:	e9 91 00 00 00       	jmp    c001667a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x204>
c00165e9:	51                   	push   ecx
c00165ea:	51                   	push   ecx
c00165eb:	6a 01                	push   0x1
c00165ed:	53                   	push   ebx
c00165ee:	e8 5d 1b ff ff       	call   c0008150 <File::open(FileOpenMode)>
c00165f3:	83 c4 10             	add    esp,0x10
c00165f6:	85 c0                	test   eax,eax
c00165f8:	74 27                	je     c0016621 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1ab>
c00165fa:	83 ec 0c             	sub    esp,0xc
c00165fd:	68 aa 38 02 c0       	push   0xc00238aa
c0016602:	e8 8f 87 ff ff       	call   c000ed96 <KePanic(char const*)>
c0016607:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001660e:	83 c4 10             	add    esp,0x10
c0016611:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0016618:	75 c8                	jne    c00165e2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x16c>
c001661a:	fb                   	sti    
c001661b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001661f:	eb 59                	jmp    c001667a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x204>
c0016621:	0f b7 ff             	movzx  edi,di
c0016624:	50                   	push   eax
c0016625:	50                   	push   eax
c0016626:	0f b7 c5             	movzx  eax,bp
c0016629:	57                   	push   edi
c001662a:	50                   	push   eax
c001662b:	e8 be fb ff ff       	call   c00161ee <Vm::realToLinear(unsigned short, unsigned short)>
c0016630:	5a                   	pop    edx
c0016631:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016633:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0016637:	51                   	push   ecx
c0016638:	50                   	push   eax
c0016639:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001663d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016641:	53                   	push   ebx
c0016642:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016645:	83 c4 14             	add    esp,0x14
c0016648:	53                   	push   ebx
c0016649:	e8 60 1b ff ff       	call   c00081ae <File::close()>
c001664e:	c6 05 09 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d709,0x0
c0016655:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001665c:	83 c4 10             	add    esp,0x10
c001665f:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0016666:	75 01                	jne    c0016669 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1f3>
c0016668:	fb                   	sti    
c0016669:	83 ec 0c             	sub    esp,0xc
c001666c:	ff 35 0c d7 02 c0    	push   DWORD PTR ds:0xc002d70c
c0016672:	e8 a5 f4 ff ff       	call   c0015b1c <unblockTask(ThreadControlBlock*)>
c0016677:	83 c4 10             	add    esp,0x10
c001667a:	83 c4 2c             	add    esp,0x2c
c001667d:	89 f0                	mov    eax,esi
c001667f:	5b                   	pop    ebx
c0016680:	5e                   	pop    esi
c0016681:	5f                   	pop    edi
c0016682:	5d                   	pop    ebp
c0016683:	c3                   	ret    

c0016684 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016684:	57                   	push   edi
c0016685:	56                   	push   esi
c0016686:	53                   	push   ebx
c0016687:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001668b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001668f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016693:	83 e8 06             	sub    eax,0x6
c0016696:	0f b7 c0             	movzx  eax,ax
c0016699:	50                   	push   eax
c001669a:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001669f:	50                   	push   eax
c00166a0:	e8 49 fb ff ff       	call   c00161ee <Vm::realToLinear(unsigned short, unsigned short)>
c00166a5:	5a                   	pop    edx
c00166a6:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c00166a9:	59                   	pop    ecx
c00166aa:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00166ad:	8d 51 fa             	lea    edx,[ecx-0x6]
c00166b0:	81 e2 ff ff 00 00    	and    edx,0xffff
c00166b6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00166b9:	8d 56 02             	lea    edx,[esi+0x2]
c00166bc:	66 89 10             	mov    WORD PTR [eax],dx
c00166bf:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c00166c3:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00166c7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00166ca:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c00166ce:	0f b6 f1             	movzx  esi,cl
c00166d1:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00166d5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00166db:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c00166df:	0f b6 d5             	movzx  edx,ch
c00166e2:	74 0a                	je     c00166ee <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c00166e4:	c1 e2 08             	shl    edx,0x8
c00166e7:	09 f2                	or     edx,esi
c00166e9:	80 ce 02             	or     dh,0x2
c00166ec:	eb 08                	jmp    c00166f6 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c00166ee:	c1 e2 08             	shl    edx,0x8
c00166f1:	09 f2                	or     edx,esi
c00166f3:	80 e6 fd             	and    dh,0xfd
c00166f6:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00166fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166ff:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016703:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c001670b:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c001670e:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016716:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016719:	5b                   	pop    ebx
c001671a:	5e                   	pop    esi
c001671b:	5f                   	pop    edi
c001671c:	c3                   	ret    

c001671d <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001671d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016722:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016727:	c1 e0 04             	shl    eax,0x4
c001672a:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001672d:	c3                   	ret    

c001672e <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001672e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016733:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016738:	c1 e0 04             	shl    eax,0x4
c001673b:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001673f:	c3                   	ret    

c0016740 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016740:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016745:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001674a:	c1 e0 04             	shl    eax,0x4
c001674d:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016750:	c3                   	ret    

c0016751 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016751:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016756:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001675b:	c1 e0 04             	shl    eax,0x4
c001675e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016762:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016765:	c3                   	ret    

c0016766 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016766:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001676b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016770:	c1 e0 04             	shl    eax,0x4
c0016773:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016777:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001677b:	c3                   	ret    

c001677c <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001677c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016781:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016786:	c1 e0 04             	shl    eax,0x4
c0016789:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001678d:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016790:	c3                   	ret    

c0016791 <Vm::faultHandler(regs*)>:
c0016791:	55                   	push   ebp
c0016792:	57                   	push   edi
c0016793:	56                   	push   esi
c0016794:	53                   	push   ebx
c0016795:	83 ec 2c             	sub    esp,0x2c
c0016798:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001679c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001679f:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00167a3:	0f b7 f8             	movzx  edi,ax
c00167a6:	52                   	push   edx
c00167a7:	0f b7 c0             	movzx  eax,ax
c00167aa:	50                   	push   eax
c00167ab:	e8 3e fa ff ff       	call   c00161ee <Vm::realToLinear(unsigned short, unsigned short)>
c00167b0:	5a                   	pop    edx
c00167b1:	59                   	pop    ecx
c00167b2:	89 c1                	mov    ecx,eax
c00167b4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00167b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167bb:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00167c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00167c4:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00167c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00167cb:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00167d0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00167d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00167d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00167dc:	e8 0d fa ff ff       	call   c00161ee <Vm::realToLinear(unsigned short, unsigned short)>
c00167e1:	5e                   	pop    esi
c00167e2:	be 06 00 00 00       	mov    esi,0x6
c00167e7:	5d                   	pop    ebp
c00167e8:	31 ed                	xor    ebp,ebp
c00167ea:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00167ef:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00167f2:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c00167f8:	0f 84 74 02 00 00    	je     c0016a72 <Vm::faultHandler(regs*)+0x2e1>
c00167fe:	0f 87 94 00 00 00    	ja     c0016898 <Vm::faultHandler(regs*)+0x107>
c0016804:	83 fa 66             	cmp    edx,0x66
c0016807:	0f 84 e2 01 00 00    	je     c00169ef <Vm::faultHandler(regs*)+0x25e>
c001680d:	77 47                	ja     c0016856 <Vm::faultHandler(regs*)+0xc5>
c001680f:	83 fa 36             	cmp    edx,0x36
c0016812:	0f 84 ca 01 00 00    	je     c00169e2 <Vm::faultHandler(regs*)+0x251>
c0016818:	77 1a                	ja     c0016834 <Vm::faultHandler(regs*)+0xa3>
c001681a:	83 fa 26             	cmp    edx,0x26
c001681d:	0f 84 98 01 00 00    	je     c00169bb <Vm::faultHandler(regs*)+0x22a>
c0016823:	83 fa 2e             	cmp    edx,0x2e
c0016826:	0f 85 21 06 00 00    	jne    c0016e4d <Vm::faultHandler(regs*)+0x6bc>
c001682c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001682f:	31 f6                	xor    esi,esi
c0016831:	41                   	inc    ecx
c0016832:	eb bb                	jmp    c00167ef <Vm::faultHandler(regs*)+0x5e>
c0016834:	83 fa 64             	cmp    edx,0x64
c0016837:	0f 84 8b 01 00 00    	je     c00169c8 <Vm::faultHandler(regs*)+0x237>
c001683d:	0f 87 92 01 00 00    	ja     c00169d5 <Vm::faultHandler(regs*)+0x244>
c0016843:	83 fa 3e             	cmp    edx,0x3e
c0016846:	0f 85 01 06 00 00    	jne    c0016e4d <Vm::faultHandler(regs*)+0x6bc>
c001684c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001684f:	be 01 00 00 00       	mov    esi,0x1
c0016854:	eb db                	jmp    c0016831 <Vm::faultHandler(regs*)+0xa0>
c0016856:	83 fa 6d             	cmp    edx,0x6d
c0016859:	0f 84 34 03 00 00    	je     c0016b93 <Vm::faultHandler(regs*)+0x402>
c001685f:	77 17                	ja     c0016878 <Vm::faultHandler(regs*)+0xe7>
c0016861:	83 fa 67             	cmp    edx,0x67
c0016864:	0f 84 92 01 00 00    	je     c00169fc <Vm::faultHandler(regs*)+0x26b>
c001686a:	83 fa 6c             	cmp    edx,0x6c
c001686d:	0f 84 b1 02 00 00    	je     c0016b24 <Vm::faultHandler(regs*)+0x393>
c0016873:	e9 d5 05 00 00       	jmp    c0016e4d <Vm::faultHandler(regs*)+0x6bc>
c0016878:	83 fa 6f             	cmp    edx,0x6f
c001687b:	0f 84 3d 04 00 00    	je     c0016cbe <Vm::faultHandler(regs*)+0x52d>
c0016881:	0f 82 9f 03 00 00    	jb     c0016c26 <Vm::faultHandler(regs*)+0x495>
c0016887:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c001688d:	0f 84 76 01 00 00    	je     c0016a09 <Vm::faultHandler(regs*)+0x278>
c0016893:	e9 b5 05 00 00       	jmp    c0016e4d <Vm::faultHandler(regs*)+0x6bc>
c0016898:	81 fa ec 00 00 00    	cmp    edx,0xec
c001689e:	0f 84 51 05 00 00    	je     c0016df5 <Vm::faultHandler(regs*)+0x664>
c00168a4:	0f 87 a9 00 00 00    	ja     c0016953 <Vm::faultHandler(regs*)+0x1c2>
c00168aa:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00168b0:	0f 84 d0 04 00 00    	je     c0016d86 <Vm::faultHandler(regs*)+0x5f5>
c00168b6:	77 78                	ja     c0016930 <Vm::faultHandler(regs*)+0x19f>
c00168b8:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00168be:	0f 84 0e 02 00 00    	je     c0016ad2 <Vm::faultHandler(regs*)+0x341>
c00168c4:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00168ca:	0f 85 7d 05 00 00    	jne    c0016e4d <Vm::faultHandler(regs*)+0x6bc>
c00168d0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00168d4:	89 d1                	mov    ecx,edx
c00168d6:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00168d9:	c1 e1 08             	shl    ecx,0x8
c00168dc:	09 ca                	or     edx,ecx
c00168de:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00168e1:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00168e5:	89 d1                	mov    ecx,edx
c00168e7:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00168eb:	c1 e1 08             	shl    ecx,0x8
c00168ee:	09 ca                	or     edx,ecx
c00168f0:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00168f3:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00168f7:	89 d1                	mov    ecx,edx
c00168f9:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00168fd:	c1 e1 08             	shl    ecx,0x8
c0016900:	09 ca                	or     edx,ecx
c0016902:	81 ca 00 02 02 00    	or     edx,0x20200
c0016908:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001690b:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c001690f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016915:	d1 e8                	shr    eax,1
c0016917:	83 e0 01             	and    eax,0x1
c001691a:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001691d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016920:	83 c0 06             	add    eax,0x6
c0016923:	25 ff ff 00 00       	and    eax,0xffff
c0016928:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001692b:	e9 19 05 00 00       	jmp    c0016e49 <Vm::faultHandler(regs*)+0x6b8>
c0016930:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016936:	0f 84 8f 04 00 00    	je     c0016dcb <Vm::faultHandler(regs*)+0x63a>
c001693c:	0f 82 60 04 00 00    	jb     c0016da2 <Vm::faultHandler(regs*)+0x611>
c0016942:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016948:	0f 84 94 04 00 00    	je     c0016de2 <Vm::faultHandler(regs*)+0x651>
c001694e:	e9 fa 04 00 00       	jmp    c0016e4d <Vm::faultHandler(regs*)+0x6bc>
c0016953:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016959:	0f 84 d7 04 00 00    	je     c0016e36 <Vm::faultHandler(regs*)+0x6a5>
c001695f:	77 2e                	ja     c001698f <Vm::faultHandler(regs*)+0x1fe>
c0016961:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016967:	0f 84 a4 04 00 00    	je     c0016e11 <Vm::faultHandler(regs*)+0x680>
c001696d:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016973:	0f 85 d4 04 00 00    	jne    c0016e4d <Vm::faultHandler(regs*)+0x6bc>
c0016979:	50                   	push   eax
c001697a:	50                   	push   eax
c001697b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001697f:	50                   	push   eax
c0016980:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016984:	50                   	push   eax
c0016985:	e8 2e f8 ff ff       	call   c00161b8 <Vm::outbv(unsigned short, unsigned char)>
c001698a:	e9 9f 04 00 00       	jmp    c0016e2e <Vm::faultHandler(regs*)+0x69d>
c001698f:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016995:	0f 84 6d 01 00 00    	je     c0016b08 <Vm::faultHandler(regs*)+0x377>
c001699b:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00169a1:	0f 84 6f 01 00 00    	je     c0016b16 <Vm::faultHandler(regs*)+0x385>
c00169a7:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00169ad:	0f 85 9a 04 00 00    	jne    c0016e4d <Vm::faultHandler(regs*)+0x6bc>
c00169b3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00169b6:	e9 76 fe ff ff       	jmp    c0016831 <Vm::faultHandler(regs*)+0xa0>
c00169bb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00169be:	be 02 00 00 00       	mov    esi,0x2
c00169c3:	e9 69 fe ff ff       	jmp    c0016831 <Vm::faultHandler(regs*)+0xa0>
c00169c8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00169cb:	be 03 00 00 00       	mov    esi,0x3
c00169d0:	e9 5c fe ff ff       	jmp    c0016831 <Vm::faultHandler(regs*)+0xa0>
c00169d5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00169d8:	be 04 00 00 00       	mov    esi,0x4
c00169dd:	e9 4f fe ff ff       	jmp    c0016831 <Vm::faultHandler(regs*)+0xa0>
c00169e2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00169e5:	be 05 00 00 00       	mov    esi,0x5
c00169ea:	e9 42 fe ff ff       	jmp    c0016831 <Vm::faultHandler(regs*)+0xa0>
c00169ef:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00169f2:	bd 01 00 00 00       	mov    ebp,0x1
c00169f7:	e9 35 fe ff ff       	jmp    c0016831 <Vm::faultHandler(regs*)+0xa0>
c00169fc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00169ff:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016a04:	e9 28 fe ff ff       	jmp    c0016831 <Vm::faultHandler(regs*)+0xa0>
c0016a09:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016a0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016a10:	83 e5 01             	and    ebp,0x1
c0016a13:	74 30                	je     c0016a45 <Vm::faultHandler(regs*)+0x2b4>
c0016a15:	83 e9 04             	sub    ecx,0x4
c0016a18:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016a1e:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016a24:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016a27:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016a2a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016a30:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016a34:	0f 84 0c 04 00 00    	je     c0016e46 <Vm::faultHandler(regs*)+0x6b5>
c0016a3a:	80 ce 02             	or     dh,0x2
c0016a3d:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016a40:	e9 01 04 00 00       	jmp    c0016e46 <Vm::faultHandler(regs*)+0x6b5>
c0016a45:	83 e9 02             	sub    ecx,0x2
c0016a48:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016a4e:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016a51:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016a55:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016a5b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016a5f:	74 05                	je     c0016a66 <Vm::faultHandler(regs*)+0x2d5>
c0016a61:	80 ce 02             	or     dh,0x2
c0016a64:	eb 03                	jmp    c0016a69 <Vm::faultHandler(regs*)+0x2d8>
c0016a66:	80 e6 fd             	and    dh,0xfd
c0016a69:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016a6d:	e9 d4 03 00 00       	jmp    c0016e46 <Vm::faultHandler(regs*)+0x6b5>
c0016a72:	83 e5 01             	and    ebp,0x1
c0016a75:	74 2a                	je     c0016aa1 <Vm::faultHandler(regs*)+0x310>
c0016a77:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a79:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016a7f:	81 ca 00 02 02 00    	or     edx,0x20200
c0016a85:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016a88:	8b 00                	mov    eax,DWORD PTR [eax]
c0016a8a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016a90:	c1 e8 09             	shr    eax,0x9
c0016a93:	83 e0 01             	and    eax,0x1
c0016a96:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016a99:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016a9c:	83 c0 04             	add    eax,0x4
c0016a9f:	eb 24                	jmp    c0016ac5 <Vm::faultHandler(regs*)+0x334>
c0016aa1:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016aa4:	81 ca 00 02 02 00    	or     edx,0x20200
c0016aaa:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016aad:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016ab0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016ab6:	c1 e8 09             	shr    eax,0x9
c0016ab9:	83 e0 01             	and    eax,0x1
c0016abc:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016abf:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016ac2:	83 c0 02             	add    eax,0x2
c0016ac5:	25 ff ff 00 00       	and    eax,0xffff
c0016aca:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016acd:	e9 74 03 00 00       	jmp    c0016e46 <Vm::faultHandler(regs*)+0x6b5>
c0016ad2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016ad6:	3d ee 00 00 00       	cmp    eax,0xee
c0016adb:	75 10                	jne    c0016aed <Vm::faultHandler(regs*)+0x35c>
c0016add:	83 ec 0c             	sub    esp,0xc
c0016ae0:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016ae3:	e8 70 f7 ff ff       	call   c0016258 <Vm::mainloop3(unsigned long)>
c0016ae8:	e9 44 03 00 00       	jmp    c0016e31 <Vm::faultHandler(regs*)+0x6a0>
c0016aed:	83 ec 0c             	sub    esp,0xc
c0016af0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016af4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016af8:	51                   	push   ecx
c0016af9:	50                   	push   eax
c0016afa:	53                   	push   ebx
c0016afb:	e8 84 fb ff ff       	call   c0016684 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0016b00:	83 c4 20             	add    esp,0x20
c0016b03:	e9 41 03 00 00       	jmp    c0016e49 <Vm::faultHandler(regs*)+0x6b8>
c0016b08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b0d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016b11:	e9 30 03 00 00       	jmp    c0016e46 <Vm::faultHandler(regs*)+0x6b5>
c0016b16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b1b:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016b1f:	e9 22 03 00 00       	jmp    c0016e46 <Vm::faultHandler(regs*)+0x6b5>
c0016b24:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016b27:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016b2c:	74 2b                	je     c0016b59 <Vm::faultHandler(regs*)+0x3c8>
c0016b2e:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016b35:	76 22                	jbe    c0016b59 <Vm::faultHandler(regs*)+0x3c8>
c0016b37:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016b3b:	50                   	push   eax
c0016b3c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016b40:	50                   	push   eax
c0016b41:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016b45:	50                   	push   eax
c0016b46:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016b4a:	50                   	push   eax
c0016b4b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016b4f:	50                   	push   eax
c0016b50:	6a 6c                	push   0x6c
c0016b52:	6a 6c                	push   0x6c
c0016b54:	e9 bd 01 00 00       	jmp    c0016d16 <Vm::faultHandler(regs*)+0x585>
c0016b59:	83 ec 0c             	sub    esp,0xc
c0016b5c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016b60:	0f b7 f6             	movzx  esi,si
c0016b63:	50                   	push   eax
c0016b64:	e8 3c f6 ff ff       	call   c00161a5 <Vm::inbv(unsigned short)>
c0016b69:	83 c4 0c             	add    esp,0xc
c0016b6c:	0f b6 c0             	movzx  eax,al
c0016b6f:	50                   	push   eax
c0016b70:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0016b74:	50                   	push   eax
c0016b75:	56                   	push   esi
c0016b76:	e8 d6 fb ff ff       	call   c0016751 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016b7b:	83 c4 10             	add    esp,0x10
c0016b7e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016b81:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016b85:	74 03                	je     c0016b8a <Vm::faultHandler(regs*)+0x3f9>
c0016b87:	48                   	dec    eax
c0016b88:	eb 01                	jmp    c0016b8b <Vm::faultHandler(regs*)+0x3fa>
c0016b8a:	40                   	inc    eax
c0016b8b:	0f b7 c0             	movzx  eax,ax
c0016b8e:	e9 8b 00 00 00       	jmp    c0016c1e <Vm::faultHandler(regs*)+0x48d>
c0016b93:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016b96:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016b99:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016b9e:	74 29                	je     c0016bc9 <Vm::faultHandler(regs*)+0x438>
c0016ba0:	3d ff ff 00 00       	cmp    eax,0xffff
c0016ba5:	76 22                	jbe    c0016bc9 <Vm::faultHandler(regs*)+0x438>
c0016ba7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016bab:	50                   	push   eax
c0016bac:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016bb0:	50                   	push   eax
c0016bb1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016bb5:	50                   	push   eax
c0016bb6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016bba:	50                   	push   eax
c0016bbb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016bbf:	50                   	push   eax
c0016bc0:	6a 6d                	push   0x6d
c0016bc2:	6a 6d                	push   0x6d
c0016bc4:	e9 4d 01 00 00       	jmp    c0016d16 <Vm::faultHandler(regs*)+0x585>
c0016bc9:	0f b7 c8             	movzx  ecx,ax
c0016bcc:	0f b7 f6             	movzx  esi,si
c0016bcf:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016bd2:	83 e5 01             	and    ebp,0x1
c0016bd5:	74 20                	je     c0016bf7 <Vm::faultHandler(regs*)+0x466>
c0016bd7:	ed                   	in     eax,dx
c0016bd8:	55                   	push   ebp
c0016bd9:	50                   	push   eax
c0016bda:	51                   	push   ecx
c0016bdb:	56                   	push   esi
c0016bdc:	e8 9b fb ff ff       	call   c001677c <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016be1:	83 c4 10             	add    esp,0x10
c0016be4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016be7:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016beb:	74 05                	je     c0016bf2 <Vm::faultHandler(regs*)+0x461>
c0016bed:	83 e8 04             	sub    eax,0x4
c0016bf0:	eb 27                	jmp    c0016c19 <Vm::faultHandler(regs*)+0x488>
c0016bf2:	83 c0 04             	add    eax,0x4
c0016bf5:	eb 22                	jmp    c0016c19 <Vm::faultHandler(regs*)+0x488>
c0016bf7:	66 ed                	in     ax,dx
c0016bf9:	0f b7 c0             	movzx  eax,ax
c0016bfc:	57                   	push   edi
c0016bfd:	50                   	push   eax
c0016bfe:	51                   	push   ecx
c0016bff:	56                   	push   esi
c0016c00:	e8 61 fb ff ff       	call   c0016766 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0016c05:	83 c4 10             	add    esp,0x10
c0016c08:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016c0b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016c0f:	74 05                	je     c0016c16 <Vm::faultHandler(regs*)+0x485>
c0016c11:	83 e8 02             	sub    eax,0x2
c0016c14:	eb 03                	jmp    c0016c19 <Vm::faultHandler(regs*)+0x488>
c0016c16:	83 c0 02             	add    eax,0x2
c0016c19:	25 ff ff 00 00       	and    eax,0xffff
c0016c1e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016c21:	e9 20 02 00 00       	jmp    c0016e46 <Vm::faultHandler(regs*)+0x6b5>
c0016c26:	8d 46 ff             	lea    eax,[esi-0x1]
c0016c29:	0f b6 f0             	movzx  esi,al
c0016c2c:	83 fe 05             	cmp    esi,0x5
c0016c2f:	77 23                	ja     c0016c54 <Vm::faultHandler(regs*)+0x4c3>
c0016c31:	ff 24 b5 20 39 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdc6e0]
c0016c38:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0016c3d:	eb 15                	jmp    c0016c54 <Vm::faultHandler(regs*)+0x4c3>
c0016c3f:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0016c43:	eb 0f                	jmp    c0016c54 <Vm::faultHandler(regs*)+0x4c3>
c0016c45:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016c49:	eb 09                	jmp    c0016c54 <Vm::faultHandler(regs*)+0x4c3>
c0016c4b:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0016c4f:	eb 03                	jmp    c0016c54 <Vm::faultHandler(regs*)+0x4c3>
c0016c51:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016c54:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016c57:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016c5c:	74 29                	je     c0016c87 <Vm::faultHandler(regs*)+0x4f6>
c0016c5e:	3d ff ff 00 00       	cmp    eax,0xffff
c0016c63:	76 22                	jbe    c0016c87 <Vm::faultHandler(regs*)+0x4f6>
c0016c65:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016c69:	50                   	push   eax
c0016c6a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016c6e:	50                   	push   eax
c0016c6f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016c73:	50                   	push   eax
c0016c74:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016c78:	50                   	push   eax
c0016c79:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016c7d:	50                   	push   eax
c0016c7e:	6a 6e                	push   0x6e
c0016c80:	6a 6e                	push   0x6e
c0016c82:	e9 8f 00 00 00       	jmp    c0016d16 <Vm::faultHandler(regs*)+0x585>
c0016c87:	0f b7 c0             	movzx  eax,ax
c0016c8a:	52                   	push   edx
c0016c8b:	52                   	push   edx
c0016c8c:	50                   	push   eax
c0016c8d:	57                   	push   edi
c0016c8e:	e8 8a fa ff ff       	call   c001671d <Vm::readByteFromReal(unsigned short, unsigned short)>
c0016c93:	59                   	pop    ecx
c0016c94:	0f b6 c0             	movzx  eax,al
c0016c97:	5e                   	pop    esi
c0016c98:	50                   	push   eax
c0016c99:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016c9d:	50                   	push   eax
c0016c9e:	e8 15 f5 ff ff       	call   c00161b8 <Vm::outbv(unsigned short, unsigned char)>
c0016ca3:	83 c4 10             	add    esp,0x10
c0016ca6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016ca9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016cad:	74 03                	je     c0016cb2 <Vm::faultHandler(regs*)+0x521>
c0016caf:	48                   	dec    eax
c0016cb0:	eb 01                	jmp    c0016cb3 <Vm::faultHandler(regs*)+0x522>
c0016cb2:	40                   	inc    eax
c0016cb3:	0f b7 c0             	movzx  eax,ax
c0016cb6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016cb9:	e9 88 01 00 00       	jmp    c0016e46 <Vm::faultHandler(regs*)+0x6b5>
c0016cbe:	8d 46 ff             	lea    eax,[esi-0x1]
c0016cc1:	0f b6 f0             	movzx  esi,al
c0016cc4:	83 fe 05             	cmp    esi,0x5
c0016cc7:	77 1e                	ja     c0016ce7 <Vm::faultHandler(regs*)+0x556>
c0016cc9:	ff 24 b5 38 39 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdc6c8]
c0016cd0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016cd4:	eb 11                	jmp    c0016ce7 <Vm::faultHandler(regs*)+0x556>
c0016cd6:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0016cd9:	eb 0c                	jmp    c0016ce7 <Vm::faultHandler(regs*)+0x556>
c0016cdb:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0016cde:	eb 07                	jmp    c0016ce7 <Vm::faultHandler(regs*)+0x556>
c0016ce0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016ce3:	eb 02                	jmp    c0016ce7 <Vm::faultHandler(regs*)+0x556>
c0016ce5:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0016ce7:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0016cea:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016cef:	74 37                	je     c0016d28 <Vm::faultHandler(regs*)+0x597>
c0016cf1:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0016cf7:	76 2f                	jbe    c0016d28 <Vm::faultHandler(regs*)+0x597>
c0016cf9:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016cfd:	50                   	push   eax
c0016cfe:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016d02:	50                   	push   eax
c0016d03:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016d07:	50                   	push   eax
c0016d08:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016d0c:	50                   	push   eax
c0016d0d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016d11:	50                   	push   eax
c0016d12:	6a 6f                	push   0x6f
c0016d14:	6a 6f                	push   0x6f
c0016d16:	68 c3 38 02 c0       	push   0xc00238c3
c0016d1b:	e8 44 02 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016d20:	83 c4 20             	add    esp,0x20
c0016d23:	e9 83 01 00 00       	jmp    c0016eab <Vm::faultHandler(regs*)+0x71a>
c0016d28:	0f b7 d7             	movzx  edx,di
c0016d2b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016d2e:	0f b7 c6             	movzx  eax,si
c0016d31:	81 e1 00 04 00 00    	and    ecx,0x400
c0016d37:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016d3a:	83 e5 01             	and    ebp,0x1
c0016d3d:	74 1d                	je     c0016d5c <Vm::faultHandler(regs*)+0x5cb>
c0016d3f:	55                   	push   ebp
c0016d40:	55                   	push   ebp
c0016d41:	50                   	push   eax
c0016d42:	52                   	push   edx
c0016d43:	e8 f8 f9 ff ff       	call   c0016740 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0016d48:	83 c4 10             	add    esp,0x10
c0016d4b:	89 fa                	mov    edx,edi
c0016d4d:	ef                   	out    dx,eax
c0016d4e:	85 c9                	test   ecx,ecx
c0016d50:	74 05                	je     c0016d57 <Vm::faultHandler(regs*)+0x5c6>
c0016d52:	83 ee 04             	sub    esi,0x4
c0016d55:	eb 21                	jmp    c0016d78 <Vm::faultHandler(regs*)+0x5e7>
c0016d57:	83 c6 04             	add    esi,0x4
c0016d5a:	eb 1c                	jmp    c0016d78 <Vm::faultHandler(regs*)+0x5e7>
c0016d5c:	55                   	push   ebp
c0016d5d:	55                   	push   ebp
c0016d5e:	50                   	push   eax
c0016d5f:	52                   	push   edx
c0016d60:	e8 c9 f9 ff ff       	call   c001672e <Vm::readWordFromReal(unsigned short, unsigned short)>
c0016d65:	83 c4 10             	add    esp,0x10
c0016d68:	89 fa                	mov    edx,edi
c0016d6a:	66 ef                	out    dx,ax
c0016d6c:	85 c9                	test   ecx,ecx
c0016d6e:	74 05                	je     c0016d75 <Vm::faultHandler(regs*)+0x5e4>
c0016d70:	83 ee 02             	sub    esi,0x2
c0016d73:	eb 03                	jmp    c0016d78 <Vm::faultHandler(regs*)+0x5e7>
c0016d75:	83 c6 02             	add    esi,0x2
c0016d78:	81 e6 ff ff 00 00    	and    esi,0xffff
c0016d7e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0016d81:	e9 c0 00 00 00       	jmp    c0016e46 <Vm::faultHandler(regs*)+0x6b5>
c0016d86:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016d8d:	83 ec 0c             	sub    esp,0xc
c0016d90:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016d94:	50                   	push   eax
c0016d95:	e8 0b f4 ff ff       	call   c00161a5 <Vm::inbv(unsigned short)>
c0016d9a:	0f b6 c0             	movzx  eax,al
c0016d9d:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016da0:	eb 3a                	jmp    c0016ddc <Vm::faultHandler(regs*)+0x64b>
c0016da2:	83 e5 01             	and    ebp,0x1
c0016da5:	74 07                	je     c0016dae <Vm::faultHandler(regs*)+0x61d>
c0016da7:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016dab:	ed                   	in     eax,dx
c0016dac:	eb 14                	jmp    c0016dc2 <Vm::faultHandler(regs*)+0x631>
c0016dae:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0016db1:	66 31 f6             	xor    si,si
c0016db4:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016db7:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016dbb:	66 ed                	in     ax,dx
c0016dbd:	0f b7 c0             	movzx  eax,ax
c0016dc0:	09 f0                	or     eax,esi
c0016dc2:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016dc5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016dc9:	eb 7e                	jmp    c0016e49 <Vm::faultHandler(regs*)+0x6b8>
c0016dcb:	52                   	push   edx
c0016dcc:	52                   	push   edx
c0016dcd:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016dd1:	50                   	push   eax
c0016dd2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016dd6:	50                   	push   eax
c0016dd7:	e8 dc f3 ff ff       	call   c00161b8 <Vm::outbv(unsigned short, unsigned char)>
c0016ddc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016de0:	eb 4f                	jmp    c0016e31 <Vm::faultHandler(regs*)+0x6a0>
c0016de2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016de5:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016de9:	83 e5 01             	and    ebp,0x1
c0016dec:	74 03                	je     c0016df1 <Vm::faultHandler(regs*)+0x660>
c0016dee:	ef                   	out    dx,eax
c0016def:	eb d4                	jmp    c0016dc5 <Vm::faultHandler(regs*)+0x634>
c0016df1:	66 ef                	out    dx,ax
c0016df3:	eb d0                	jmp    c0016dc5 <Vm::faultHandler(regs*)+0x634>
c0016df5:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016dfc:	83 ec 0c             	sub    esp,0xc
c0016dff:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016e03:	50                   	push   eax
c0016e04:	e8 9c f3 ff ff       	call   c00161a5 <Vm::inbv(unsigned short)>
c0016e09:	0f b6 c0             	movzx  eax,al
c0016e0c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016e0f:	eb 1d                	jmp    c0016e2e <Vm::faultHandler(regs*)+0x69d>
c0016e11:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016e14:	83 e5 01             	and    ebp,0x1
c0016e17:	74 03                	je     c0016e1c <Vm::faultHandler(regs*)+0x68b>
c0016e19:	ed                   	in     eax,dx
c0016e1a:	eb 0d                	jmp    c0016e29 <Vm::faultHandler(regs*)+0x698>
c0016e1c:	66 ed                	in     ax,dx
c0016e1e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0016e21:	0f b7 c0             	movzx  eax,ax
c0016e24:	66 31 d2             	xor    dx,dx
c0016e27:	09 d0                	or     eax,edx
c0016e29:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016e2c:	eb 18                	jmp    c0016e46 <Vm::faultHandler(regs*)+0x6b5>
c0016e2e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e31:	83 c4 10             	add    esp,0x10
c0016e34:	eb 13                	jmp    c0016e49 <Vm::faultHandler(regs*)+0x6b8>
c0016e36:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016e39:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016e3c:	83 e5 01             	and    ebp,0x1
c0016e3f:	74 03                	je     c0016e44 <Vm::faultHandler(regs*)+0x6b3>
c0016e41:	ef                   	out    dx,eax
c0016e42:	eb 02                	jmp    c0016e46 <Vm::faultHandler(regs*)+0x6b5>
c0016e44:	66 ef                	out    dx,ax
c0016e46:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e49:	b0 01                	mov    al,0x1
c0016e4b:	eb 60                	jmp    c0016ead <Vm::faultHandler(regs*)+0x71c>
c0016e4d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016e51:	50                   	push   eax
c0016e52:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016e56:	50                   	push   eax
c0016e57:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016e5b:	50                   	push   eax
c0016e5c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016e60:	50                   	push   eax
c0016e61:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016e65:	50                   	push   eax
c0016e66:	52                   	push   edx
c0016e67:	52                   	push   edx
c0016e68:	68 f0 38 02 c0       	push   0xc00238f0
c0016e6d:	e8 f2 00 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016e72:	83 c4 20             	add    esp,0x20
c0016e75:	83 ec 0c             	sub    esp,0xc
c0016e78:	6a 60                	push   0x60
c0016e7a:	e8 26 f3 ff ff       	call   c00161a5 <Vm::inbv(unsigned short)>
c0016e7f:	83 c4 10             	add    esp,0x10
c0016e82:	0f b6 d0             	movzx  edx,al
c0016e85:	83 fa 1c             	cmp    edx,0x1c
c0016e88:	74 05                	je     c0016e8f <Vm::faultHandler(regs*)+0x6fe>
c0016e8a:	83 fa 5a             	cmp    edx,0x5a
c0016e8d:	75 e6                	jne    c0016e75 <Vm::faultHandler(regs*)+0x6e4>
c0016e8f:	0f b6 c0             	movzx  eax,al
c0016e92:	83 f8 1c             	cmp    eax,0x1c
c0016e95:	74 05                	je     c0016e9c <Vm::faultHandler(regs*)+0x70b>
c0016e97:	83 f8 5a             	cmp    eax,0x5a
c0016e9a:	75 0f                	jne    c0016eab <Vm::faultHandler(regs*)+0x71a>
c0016e9c:	83 ec 0c             	sub    esp,0xc
c0016e9f:	6a 60                	push   0x60
c0016ea1:	e8 ff f2 ff ff       	call   c00161a5 <Vm::inbv(unsigned short)>
c0016ea6:	83 c4 10             	add    esp,0x10
c0016ea9:	eb e4                	jmp    c0016e8f <Vm::faultHandler(regs*)+0x6fe>
c0016eab:	31 c0                	xor    eax,eax
c0016ead:	83 c4 2c             	add    esp,0x2c
c0016eb0:	5b                   	pop    ebx
c0016eb1:	5e                   	pop    esi
c0016eb2:	5f                   	pop    edi
c0016eb3:	5d                   	pop    ebp
c0016eb4:	c3                   	ret    
c0016eb5:	90                   	nop

c0016eb6 <noCopro(unsigned long)>:
c0016eb6:	c3                   	ret    
c0016eb7:	90                   	nop

c0016eb8 <CPU::close(int, int, void*)>:
c0016eb8:	31 c0                	xor    eax,eax
c0016eba:	c3                   	ret    

c0016ebb <x86ReadCMOS(unsigned char)>:
c0016ebb:	83 ec 14             	sub    esp,0x14
c0016ebe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016ec2:	88 04 24             	mov    BYTE PTR [esp],al
c0016ec5:	a0 6c d7 02 c0       	mov    al,ds:0xc002d76c
c0016eca:	0f b6 c0             	movzx  eax,al
c0016ecd:	85 c0                	test   eax,eax
c0016ecf:	74 04                	je     c0016ed5 <x86ReadCMOS(unsigned char)+0x1a>
c0016ed1:	b2 00                	mov    dl,0x0
c0016ed3:	eb 02                	jmp    c0016ed7 <x86ReadCMOS(unsigned char)+0x1c>
c0016ed5:	b2 80                	mov    dl,0x80
c0016ed7:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016eda:	09 d0                	or     eax,edx
c0016edc:	0f b6 c0             	movzx  eax,al
c0016edf:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c0016ee6:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0016eea:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0016eee:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0016ef3:	ee                   	out    dx,al
c0016ef4:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0016efb:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016f00:	89 c2                	mov    edx,eax
c0016f02:	ec                   	in     al,dx
c0016f03:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016f07:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016f0b:	83 c4 14             	add    esp,0x14
c0016f0e:	c3                   	ret    

c0016f0f <x86WriteCMOS(unsigned char, unsigned char)>:
c0016f0f:	83 ec 18             	sub    esp,0x18
c0016f12:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016f16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f1a:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c0016f1e:	88 04 24             	mov    BYTE PTR [esp],al
c0016f21:	a0 6c d7 02 c0       	mov    al,ds:0xc002d76c
c0016f26:	0f b6 c0             	movzx  eax,al
c0016f29:	85 c0                	test   eax,eax
c0016f2b:	74 04                	je     c0016f31 <x86WriteCMOS(unsigned char, unsigned char)+0x22>
c0016f2d:	b2 00                	mov    dl,0x0
c0016f2f:	eb 02                	jmp    c0016f33 <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0016f31:	b2 80                	mov    dl,0x80
c0016f33:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0016f37:	09 d0                	or     eax,edx
c0016f39:	0f b6 c0             	movzx  eax,al
c0016f3c:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0016f43:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016f47:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016f4b:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0016f50:	ee                   	out    dx,al
c0016f51:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0016f55:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0016f5c:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0016f60:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0016f64:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0016f69:	ee                   	out    dx,al
c0016f6a:	90                   	nop
c0016f6b:	83 c4 18             	add    esp,0x18
c0016f6e:	c3                   	ret    

c0016f6f <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0016f6f:	60                   	pusha  
c0016f70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f78:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016f7c:	9c                   	pushf  
c0016f7d:	fa                   	cli    
c0016f7e:	0f 09                	wbinvd 
c0016f80:	0f 30                	wrmsr  
c0016f82:	9d                   	popf   
c0016f83:	89 c2                	mov    edx,eax
c0016f85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f89:	89 10                	mov    DWORD PTR [eax],edx
c0016f8b:	61                   	popa   
c0016f8c:	90                   	nop
c0016f8d:	c3                   	ret    

c0016f8e <AMD_K6_read_msr(unsigned int, REGS*)>:
c0016f8e:	60                   	pusha  
c0016f8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f93:	89 c1                	mov    ecx,eax
c0016f95:	9c                   	pushf  
c0016f96:	fa                   	cli    
c0016f97:	0f 09                	wbinvd 
c0016f99:	31 c0                	xor    eax,eax
c0016f9b:	31 d2                	xor    edx,edx
c0016f9d:	0f 32                	rdmsr  
c0016f9f:	9d                   	popf   
c0016fa0:	89 c2                	mov    edx,eax
c0016fa2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016fa6:	89 10                	mov    DWORD PTR [eax],edx
c0016fa8:	61                   	popa   
c0016fa9:	90                   	nop
c0016faa:	c3                   	ret    

c0016fab <AMD_K6_writeback(int, int, int)>:
c0016fab:	83 ec 20             	sub    esp,0x20
c0016fae:	a1 a0 cd 02 c0       	mov    eax,ds:0xc002cda0
c0016fb3:	c1 e8 14             	shr    eax,0x14
c0016fb6:	c1 e8 02             	shr    eax,0x2
c0016fb9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016fbd:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0016fc2:	0f 85 9e 00 00 00    	jne    c0017066 <AMD_K6_writeback(int, int, int)+0xbb>
c0016fc8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016fcc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016fd0:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0016fd5:	75 19                	jne    c0016ff0 <AMD_K6_writeback(int, int, int)+0x45>
c0016fd7:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0016fdc:	7f 0a                	jg     c0016fe8 <AMD_K6_writeback(int, int, int)+0x3d>
c0016fde:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0016fe6:	eb 08                	jmp    c0016ff0 <AMD_K6_writeback(int, int, int)+0x45>
c0016fe8:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0016ff0:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0016ff5:	7c 6e                	jl     c0017065 <AMD_K6_writeback(int, int, int)+0xba>
c0016ff7:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0016ffc:	7e 09                	jle    c0017007 <AMD_K6_writeback(int, int, int)+0x5c>
c0016ffe:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0017003:	74 36                	je     c001703b <AMD_K6_writeback(int, int, int)+0x90>
c0017005:	eb 5e                	jmp    c0017065 <AMD_K6_writeback(int, int, int)+0xba>
c0017007:	8d 44 24 08          	lea    eax,[esp+0x8]
c001700b:	50                   	push   eax
c001700c:	68 82 00 00 c0       	push   0xc0000082
c0017011:	e8 78 ff ff ff       	call   c0016f8e <AMD_K6_read_msr(unsigned int, REGS*)>
c0017016:	83 c4 08             	add    esp,0x8
c0017019:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001701d:	01 c0                	add    eax,eax
c001701f:	83 e0 7f             	and    eax,0x7f
c0017022:	89 c2                	mov    edx,eax
c0017024:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017028:	50                   	push   eax
c0017029:	6a 00                	push   0x0
c001702b:	52                   	push   edx
c001702c:	68 82 00 00 c0       	push   0xc0000082
c0017031:	e8 39 ff ff ff       	call   c0016f6f <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0017036:	83 c4 10             	add    esp,0x10
c0017039:	eb 2b                	jmp    c0017066 <AMD_K6_writeback(int, int, int)+0xbb>
c001703b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001703f:	50                   	push   eax
c0017040:	68 82 00 00 c0       	push   0xc0000082
c0017045:	e8 44 ff ff ff       	call   c0016f8e <AMD_K6_read_msr(unsigned int, REGS*)>
c001704a:	83 c4 08             	add    esp,0x8
c001704d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017051:	50                   	push   eax
c0017052:	6a 00                	push   0x0
c0017054:	6a 00                	push   0x0
c0017056:	68 82 00 00 c0       	push   0xc0000082
c001705b:	e8 0f ff ff ff       	call   c0016f6f <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0017060:	83 c4 10             	add    esp,0x10
c0017063:	eb 01                	jmp    c0017066 <AMD_K6_writeback(int, int, int)+0xbb>
c0017065:	90                   	nop
c0017066:	90                   	nop
c0017067:	83 c4 20             	add    esp,0x20
c001706a:	c3                   	ret    

c001706b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001706b:	56                   	push   esi
c001706c:	53                   	push   ebx
c001706d:	a1 80 52 02 c0       	mov    eax,ds:0xc0025280
c0017072:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017076:	75 32                	jne    c00170aa <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0017078:	8b 15 60 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d760
c001707e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017082:	89 10                	mov    DWORD PTR [eax],edx
c0017084:	8b 15 5c d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d75c
c001708a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001708e:	89 10                	mov    DWORD PTR [eax],edx
c0017090:	8b 15 58 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d758
c0017096:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001709a:	89 10                	mov    DWORD PTR [eax],edx
c001709c:	8b 15 54 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d754
c00170a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00170a6:	89 10                	mov    DWORD PTR [eax],edx
c00170a8:	eb 5c                	jmp    c0017106 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c00170aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170ae:	ba 00 00 00 00       	mov    edx,0x0
c00170b3:	89 d1                	mov    ecx,edx
c00170b5:	0f a2                	cpuid  
c00170b7:	89 c6                	mov    esi,eax
c00170b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170bd:	89 30                	mov    DWORD PTR [eax],esi
c00170bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00170c3:	89 18                	mov    DWORD PTR [eax],ebx
c00170c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00170c9:	89 08                	mov    DWORD PTR [eax],ecx
c00170cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00170cf:	89 10                	mov    DWORD PTR [eax],edx
c00170d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170d5:	a3 80 52 02 c0       	mov    ds:0xc0025280,eax
c00170da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170de:	8b 00                	mov    eax,DWORD PTR [eax]
c00170e0:	a3 60 d7 02 c0       	mov    ds:0xc002d760,eax
c00170e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00170e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00170eb:	a3 5c d7 02 c0       	mov    ds:0xc002d75c,eax
c00170f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00170f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00170f6:	a3 58 d7 02 c0       	mov    ds:0xc002d758,eax
c00170fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00170ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0017101:	a3 54 d7 02 c0       	mov    ds:0xc002d754,eax
c0017106:	5b                   	pop    ebx
c0017107:	5e                   	pop    esi
c0017108:	c3                   	ret    

c0017109 <cpuidCheckEDX(unsigned int)>:
c0017109:	83 ec 10             	sub    esp,0x10
c001710c:	89 e0                	mov    eax,esp
c001710e:	50                   	push   eax
c001710f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017113:	50                   	push   eax
c0017114:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017118:	50                   	push   eax
c0017119:	8d 44 24 18          	lea    eax,[esp+0x18]
c001711d:	50                   	push   eax
c001711e:	6a 01                	push   0x1
c0017120:	e8 46 ff ff ff       	call   c001706b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017125:	83 c4 14             	add    esp,0x14
c0017128:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001712b:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c001712f:	0f 95 c0             	setne  al
c0017132:	83 c4 10             	add    esp,0x10
c0017135:	c3                   	ret    

c0017136 <cpuidCheckECX(unsigned int)>:
c0017136:	83 ec 10             	sub    esp,0x10
c0017139:	89 e0                	mov    eax,esp
c001713b:	50                   	push   eax
c001713c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017140:	50                   	push   eax
c0017141:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017145:	50                   	push   eax
c0017146:	8d 44 24 18          	lea    eax,[esp+0x18]
c001714a:	50                   	push   eax
c001714b:	6a 01                	push   0x1
c001714d:	e8 19 ff ff ff       	call   c001706b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017152:	83 c4 14             	add    esp,0x14
c0017155:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017159:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c001715d:	0f 95 c0             	setne  al
c0017160:	83 c4 10             	add    esp,0x10
c0017163:	c3                   	ret    

c0017164 <cpuidCheckExtendedEBX(unsigned int)>:
c0017164:	83 ec 10             	sub    esp,0x10
c0017167:	89 e0                	mov    eax,esp
c0017169:	50                   	push   eax
c001716a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001716e:	50                   	push   eax
c001716f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017173:	50                   	push   eax
c0017174:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017178:	50                   	push   eax
c0017179:	6a 07                	push   0x7
c001717b:	e8 eb fe ff ff       	call   c001706b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017180:	83 c4 14             	add    esp,0x14
c0017183:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017187:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c001718b:	0f 95 c0             	setne  al
c001718e:	83 c4 10             	add    esp,0x10
c0017191:	c3                   	ret    

c0017192 <cpuidCheckExtendedECX(unsigned int)>:
c0017192:	83 ec 10             	sub    esp,0x10
c0017195:	89 e0                	mov    eax,esp
c0017197:	50                   	push   eax
c0017198:	8d 44 24 08          	lea    eax,[esp+0x8]
c001719c:	50                   	push   eax
c001719d:	8d 44 24 10          	lea    eax,[esp+0x10]
c00171a1:	50                   	push   eax
c00171a2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00171a6:	50                   	push   eax
c00171a7:	6a 07                	push   0x7
c00171a9:	e8 bd fe ff ff       	call   c001706b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00171ae:	83 c4 14             	add    esp,0x14
c00171b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171b5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00171b9:	0f 95 c0             	setne  al
c00171bc:	83 c4 10             	add    esp,0x10
c00171bf:	c3                   	ret    

c00171c0 <HalDetectFeatures()>:
c00171c0:	57                   	push   edi
c00171c1:	56                   	push   esi
c00171c2:	53                   	push   ebx
c00171c3:	81 ec 90 00 00 00    	sub    esp,0x90
c00171c9:	83 ec 04             	sub    esp,0x4
c00171cc:	6a 08                	push   0x8
c00171ce:	6a 00                	push   0x0
c00171d0:	68 8c d7 02 c0       	push   0xc002d78c
c00171d5:	e8 16 93 fe ff       	call   c00004f0 <memset>
c00171da:	83 c4 10             	add    esp,0x10
c00171dd:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00171e2:	83 c8 04             	or     eax,0x4
c00171e5:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c00171ea:	e8 0a 90 fe ff       	call   c00001f9 <detectCPUID>
c00171ef:	85 c0                	test   eax,eax
c00171f1:	0f 95 c0             	setne  al
c00171f4:	83 e0 01             	and    eax,0x1
c00171f7:	83 e0 01             	and    eax,0x1
c00171fa:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00171fd:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017202:	83 e0 fd             	and    eax,0xfffffffd
c0017205:	88 c2                	mov    dl,al
c0017207:	88 c8                	mov    al,cl
c0017209:	09 d0                	or     eax,edx
c001720b:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017210:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017215:	83 e0 02             	and    eax,0x2
c0017218:	0f b6 c0             	movzx  eax,al
c001721b:	85 c0                	test   eax,eax
c001721d:	0f 84 7f 02 00 00    	je     c00174a2 <HalDetectFeatures()+0x2e2>
c0017223:	83 ec 0c             	sub    esp,0xc
c0017226:	6a 20                	push   0x20
c0017228:	e8 dc fe ff ff       	call   c0017109 <cpuidCheckEDX(unsigned int)>
c001722d:	83 c4 10             	add    esp,0x10
c0017230:	83 e0 01             	and    eax,0x1
c0017233:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001723a:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001723f:	83 e0 f7             	and    eax,0xfffffff7
c0017242:	88 c2                	mov    dl,al
c0017244:	88 c8                	mov    al,cl
c0017246:	09 d0                	or     eax,edx
c0017248:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c001724d:	83 ec 0c             	sub    esp,0xc
c0017250:	68 00 00 00 04       	push   0x4000000
c0017255:	e8 af fe ff ff       	call   c0017109 <cpuidCheckEDX(unsigned int)>
c001725a:	83 c4 10             	add    esp,0x10
c001725d:	89 c1                	mov    ecx,eax
c001725f:	83 e1 01             	and    ecx,0x1
c0017262:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017267:	83 e0 fe             	and    eax,0xfffffffe
c001726a:	88 c2                	mov    dl,al
c001726c:	88 c8                	mov    al,cl
c001726e:	09 d0                	or     eax,edx
c0017270:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c0017275:	83 ec 0c             	sub    esp,0xc
c0017278:	68 80 00 00 00       	push   0x80
c001727d:	e8 87 fe ff ff       	call   c0017109 <cpuidCheckEDX(unsigned int)>
c0017282:	83 c4 10             	add    esp,0x10
c0017285:	89 c1                	mov    ecx,eax
c0017287:	c1 e1 07             	shl    ecx,0x7
c001728a:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c001728f:	83 e0 7f             	and    eax,0x7f
c0017292:	88 c2                	mov    dl,al
c0017294:	88 c8                	mov    al,cl
c0017296:	09 d0                	or     eax,edx
c0017298:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c001729d:	83 ec 0c             	sub    esp,0xc
c00172a0:	68 00 00 80 00       	push   0x800000
c00172a5:	e8 5f fe ff ff       	call   c0017109 <cpuidCheckEDX(unsigned int)>
c00172aa:	83 c4 10             	add    esp,0x10
c00172ad:	83 e0 01             	and    eax,0x1
c00172b0:	89 c1                	mov    ecx,eax
c00172b2:	c1 e1 05             	shl    ecx,0x5
c00172b5:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00172ba:	83 e0 df             	and    eax,0xffffffdf
c00172bd:	88 c2                	mov    dl,al
c00172bf:	88 c8                	mov    al,cl
c00172c1:	09 d0                	or     eax,edx
c00172c3:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c00172c8:	a1 90 cd 02 c0       	mov    eax,ds:0xc002cd90
c00172cd:	83 e0 01             	and    eax,0x1
c00172d0:	75 0c                	jne    c00172de <HalDetectFeatures()+0x11e>
c00172d2:	a1 90 cd 02 c0       	mov    eax,ds:0xc002cd90
c00172d7:	25 00 04 00 00       	and    eax,0x400
c00172dc:	74 0f                	je     c00172ed <HalDetectFeatures()+0x12d>
c00172de:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00172e3:	83 e0 fe             	and    eax,0xfffffffe
c00172e6:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c00172eb:	eb 28                	jmp    c0017315 <HalDetectFeatures()+0x155>
c00172ed:	83 ec 0c             	sub    esp,0xc
c00172f0:	68 00 02 00 00       	push   0x200
c00172f5:	e8 0f fe ff ff       	call   c0017109 <cpuidCheckEDX(unsigned int)>
c00172fa:	83 c4 10             	add    esp,0x10
c00172fd:	89 c1                	mov    ecx,eax
c00172ff:	83 e1 01             	and    ecx,0x1
c0017302:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017307:	83 e0 fe             	and    eax,0xfffffffe
c001730a:	88 c2                	mov    dl,al
c001730c:	88 c8                	mov    al,cl
c001730e:	09 d0                	or     eax,edx
c0017310:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017315:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001731a:	83 e0 01             	and    eax,0x1
c001731d:	0f b6 c0             	movzx  eax,al
c0017320:	85 c0                	test   eax,eax
c0017322:	74 1c                	je     c0017340 <HalDetectFeatures()+0x180>
c0017324:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017329:	83 e0 08             	and    eax,0x8
c001732c:	0f b6 c0             	movzx  eax,al
c001732f:	85 c0                	test   eax,eax
c0017331:	75 0d                	jne    c0017340 <HalDetectFeatures()+0x180>
c0017333:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017338:	83 e0 fe             	and    eax,0xfffffffe
c001733b:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017340:	83 ec 0c             	sub    esp,0xc
c0017343:	68 50 39 02 c0       	push   0xc0023950
c0017348:	e8 17 fc fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001734d:	83 c4 10             	add    esp,0x10
c0017350:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017355:	83 e0 fe             	and    eax,0xfffffffe
c0017358:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c001735d:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0017365:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c001736d:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c0017375:	85 c0                	test   eax,eax
c0017377:	0f 84 ab 00 00 00    	je     c0017428 <HalDetectFeatures()+0x268>
c001737d:	83 ec 0c             	sub    esp,0xc
c0017380:	6a 01                	push   0x1
c0017382:	e8 af fd ff ff       	call   c0017136 <cpuidCheckECX(unsigned int)>
c0017387:	83 c4 10             	add    esp,0x10
c001738a:	83 e0 01             	and    eax,0x1
c001738d:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0017390:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017395:	83 e0 fd             	and    eax,0xfffffffd
c0017398:	88 c2                	mov    dl,al
c001739a:	88 c8                	mov    al,cl
c001739c:	09 d0                	or     eax,edx
c001739e:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c00173a3:	83 ec 0c             	sub    esp,0xc
c00173a6:	68 00 02 00 00       	push   0x200
c00173ab:	e8 86 fd ff ff       	call   c0017136 <cpuidCheckECX(unsigned int)>
c00173b0:	83 c4 10             	add    esp,0x10
c00173b3:	83 e0 01             	and    eax,0x1
c00173b6:	89 c1                	mov    ecx,eax
c00173b8:	c1 e1 04             	shl    ecx,0x4
c00173bb:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c00173c0:	83 e0 ef             	and    eax,0xffffffef
c00173c3:	88 c2                	mov    dl,al
c00173c5:	88 c8                	mov    al,cl
c00173c7:	09 d0                	or     eax,edx
c00173c9:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c00173ce:	83 ec 0c             	sub    esp,0xc
c00173d1:	68 00 00 08 00       	push   0x80000
c00173d6:	e8 5b fd ff ff       	call   c0017136 <cpuidCheckECX(unsigned int)>
c00173db:	83 c4 10             	add    esp,0x10
c00173de:	83 e0 01             	and    eax,0x1
c00173e1:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c00173e8:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c00173ed:	83 e0 fb             	and    eax,0xfffffffb
c00173f0:	88 c2                	mov    dl,al
c00173f2:	88 c8                	mov    al,cl
c00173f4:	09 d0                	or     eax,edx
c00173f6:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c00173fb:	83 ec 0c             	sub    esp,0xc
c00173fe:	68 00 00 10 00       	push   0x100000
c0017403:	e8 2e fd ff ff       	call   c0017136 <cpuidCheckECX(unsigned int)>
c0017408:	83 c4 10             	add    esp,0x10
c001740b:	83 e0 01             	and    eax,0x1
c001740e:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017415:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c001741a:	83 e0 f7             	and    eax,0xfffffff7
c001741d:	88 c2                	mov    dl,al
c001741f:	88 c8                	mov    al,cl
c0017421:	09 d0                	or     eax,edx
c0017423:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c0017428:	83 ec 0c             	sub    esp,0xc
c001742b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001742f:	50                   	push   eax
c0017430:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017434:	50                   	push   eax
c0017435:	8d 44 24 34          	lea    eax,[esp+0x34]
c0017439:	50                   	push   eax
c001743a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001743e:	50                   	push   eax
c001743f:	68 00 00 00 80       	push   0x80000000
c0017444:	e8 22 fc ff ff       	call   c001706b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017449:	83 c4 20             	add    esp,0x20
c001744c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017450:	3d 00 00 00 80       	cmp    eax,0x80000000
c0017455:	76 4b                	jbe    c00174a2 <HalDetectFeatures()+0x2e2>
c0017457:	83 ec 0c             	sub    esp,0xc
c001745a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001745e:	50                   	push   eax
c001745f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017463:	50                   	push   eax
c0017464:	8d 44 24 34          	lea    eax,[esp+0x34]
c0017468:	50                   	push   eax
c0017469:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001746d:	50                   	push   eax
c001746e:	68 01 00 00 80       	push   0x80000001
c0017473:	e8 f3 fb ff ff       	call   c001706b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017478:	83 c4 20             	add    esp,0x20
c001747b:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017480:	83 e0 bf             	and    eax,0xffffffbf
c0017483:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017488:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c001748d:	83 e0 fd             	and    eax,0xfffffffd
c0017490:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c0017495:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c001749a:	83 e0 fe             	and    eax,0xfffffffe
c001749d:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c00174a2:	a1 90 cd 02 c0       	mov    eax,ds:0xc002cd90
c00174a7:	25 00 04 00 00       	and    eax,0x400
c00174ac:	74 0d                	je     c00174bb <HalDetectFeatures()+0x2fb>
c00174ae:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00174b3:	83 e0 fb             	and    eax,0xfffffffb
c00174b6:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c00174bb:	c6 05 88 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d788,0x1
c00174c2:	83 ec 04             	sub    esp,0x4
c00174c5:	6a 0d                	push   0xd
c00174c7:	6a 00                	push   0x0
c00174c9:	68 70 d7 02 c0       	push   0xc002d770
c00174ce:	e8 1d 90 fe ff       	call   c00004f0 <memset>
c00174d3:	83 c4 10             	add    esp,0x10
c00174d6:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00174db:	83 e0 02             	and    eax,0x2
c00174de:	0f b6 c0             	movzx  eax,al
c00174e1:	85 c0                	test   eax,eax
c00174e3:	0f 84 16 08 00 00    	je     c0017cff <HalDetectFeatures()+0xb3f>
c00174e9:	83 ec 0c             	sub    esp,0xc
c00174ec:	6a 10                	push   0x10
c00174ee:	e8 16 fc ff ff       	call   c0017109 <cpuidCheckEDX(unsigned int)>
c00174f3:	83 c4 10             	add    esp,0x10
c00174f6:	83 e0 01             	and    eax,0x1
c00174f9:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017500:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c0017505:	83 e0 f7             	and    eax,0xfffffff7
c0017508:	88 c2                	mov    dl,al
c001750a:	88 c8                	mov    al,cl
c001750c:	09 d0                	or     eax,edx
c001750e:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c0017513:	83 ec 0c             	sub    esp,0xc
c0017516:	6a 40                	push   0x40
c0017518:	e8 ec fb ff ff       	call   c0017109 <cpuidCheckEDX(unsigned int)>
c001751d:	83 c4 10             	add    esp,0x10
c0017520:	83 e0 01             	and    eax,0x1
c0017523:	89 c1                	mov    ecx,eax
c0017525:	c1 e1 04             	shl    ecx,0x4
c0017528:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c001752d:	83 e0 ef             	and    eax,0xffffffef
c0017530:	88 c2                	mov    dl,al
c0017532:	88 c8                	mov    al,cl
c0017534:	09 d0                	or     eax,edx
c0017536:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c001753b:	83 ec 0c             	sub    esp,0xc
c001753e:	6a 08                	push   0x8
c0017540:	e8 c4 fb ff ff       	call   c0017109 <cpuidCheckEDX(unsigned int)>
c0017545:	83 c4 10             	add    esp,0x10
c0017548:	83 e0 01             	and    eax,0x1
c001754b:	89 c1                	mov    ecx,eax
c001754d:	c1 e1 05             	shl    ecx,0x5
c0017550:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c0017555:	83 e0 df             	and    eax,0xffffffdf
c0017558:	88 c2                	mov    dl,al
c001755a:	88 c8                	mov    al,cl
c001755c:	09 d0                	or     eax,edx
c001755e:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c0017563:	83 ec 0c             	sub    esp,0xc
c0017566:	68 00 20 00 00       	push   0x2000
c001756b:	e8 99 fb ff ff       	call   c0017109 <cpuidCheckEDX(unsigned int)>
c0017570:	83 c4 10             	add    esp,0x10
c0017573:	83 e0 01             	and    eax,0x1
c0017576:	89 c1                	mov    ecx,eax
c0017578:	c1 e1 06             	shl    ecx,0x6
c001757b:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c0017580:	83 e0 bf             	and    eax,0xffffffbf
c0017583:	88 c2                	mov    dl,al
c0017585:	88 c8                	mov    al,cl
c0017587:	09 d0                	or     eax,edx
c0017589:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c001758e:	83 ec 0c             	sub    esp,0xc
c0017591:	68 00 00 01 00       	push   0x10000
c0017596:	e8 6e fb ff ff       	call   c0017109 <cpuidCheckEDX(unsigned int)>
c001759b:	83 c4 10             	add    esp,0x10
c001759e:	89 c1                	mov    ecx,eax
c00175a0:	c1 e1 07             	shl    ecx,0x7
c00175a3:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c00175a8:	83 e0 7f             	and    eax,0x7f
c00175ab:	88 c2                	mov    dl,al
c00175ad:	88 c8                	mov    al,cl
c00175af:	09 d0                	or     eax,edx
c00175b1:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c00175b6:	83 ec 0c             	sub    esp,0xc
c00175b9:	6a 01                	push   0x1
c00175bb:	e8 49 fb ff ff       	call   c0017109 <cpuidCheckEDX(unsigned int)>
c00175c0:	83 c4 10             	add    esp,0x10
c00175c3:	83 e0 01             	and    eax,0x1
c00175c6:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00175cd:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c00175d2:	83 e0 f7             	and    eax,0xfffffff7
c00175d5:	88 c2                	mov    dl,al
c00175d7:	88 c8                	mov    al,cl
c00175d9:	09 d0                	or     eax,edx
c00175db:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c00175e0:	83 ec 0c             	sub    esp,0xc
c00175e3:	68 00 08 00 00       	push   0x800
c00175e8:	e8 1c fb ff ff       	call   c0017109 <cpuidCheckEDX(unsigned int)>
c00175ed:	83 c4 10             	add    esp,0x10
c00175f0:	89 c1                	mov    ecx,eax
c00175f2:	83 e1 01             	and    ecx,0x1
c00175f5:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c00175fa:	83 e0 fe             	and    eax,0xfffffffe
c00175fd:	88 c2                	mov    dl,al
c00175ff:	88 c8                	mov    al,cl
c0017601:	09 d0                	or     eax,edx
c0017603:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017608:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c001760d:	83 e0 40             	and    eax,0x40
c0017610:	0f b6 c0             	movzx  eax,al
c0017613:	85 c0                	test   eax,eax
c0017615:	74 0a                	je     c0017621 <HalDetectFeatures()+0x461>
c0017617:	c7 05 68 d7 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002d768,0x100
c0017621:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c0017626:	83 e0 80             	and    eax,0xffffff80
c0017629:	0f b6 c0             	movzx  eax,al
c001762c:	85 c0                	test   eax,eax
c001762e:	74 0a                	je     c001763a <HalDetectFeatures()+0x47a>
c0017630:	c7 05 64 d7 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002d764,0x80
c001763a:	83 ec 0c             	sub    esp,0xc
c001763d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017641:	50                   	push   eax
c0017642:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017646:	50                   	push   eax
c0017647:	8d 44 24 24          	lea    eax,[esp+0x24]
c001764b:	50                   	push   eax
c001764c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017650:	50                   	push   eax
c0017651:	6a 00                	push   0x0
c0017653:	e8 13 fa ff ff       	call   c001706b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017658:	83 c4 20             	add    esp,0x20
c001765b:	c7 44 24 48 70 d7 02 c0 	mov    DWORD PTR [esp+0x48],0xc002d770
c0017663:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017667:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001766b:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c0017673:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017677:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001767b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001767f:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0017683:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0017687:	89 c6                	mov    esi,eax
c0017689:	89 d7                	mov    edi,edx
c001768b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001768d:	89 c8                	mov    eax,ecx
c001768f:	89 fa                	mov    edx,edi
c0017691:	89 f3                	mov    ebx,esi
c0017693:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0017697:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001769b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001769f:	b8 74 d7 02 c0       	mov    eax,0xc002d774
c00176a4:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00176a8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00176ac:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00176b0:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c00176b8:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00176bc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00176c0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00176c4:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00176c8:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c00176cc:	89 c6                	mov    esi,eax
c00176ce:	89 d7                	mov    edi,edx
c00176d0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00176d2:	89 c8                	mov    eax,ecx
c00176d4:	89 fa                	mov    edx,edi
c00176d6:	89 f3                	mov    ebx,esi
c00176d8:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c00176dc:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c00176e0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00176e4:	b8 78 d7 02 c0       	mov    eax,0xc002d778
c00176e9:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00176f0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00176f4:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c00176f8:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c0017700:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0017707:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c001770b:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001770f:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0017716:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c001771a:	89 c6                	mov    esi,eax
c001771c:	89 d7                	mov    edi,edx
c001771e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017720:	89 c8                	mov    eax,ecx
c0017722:	89 fa                	mov    edx,edi
c0017724:	89 f3                	mov    ebx,esi
c0017726:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c001772a:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c001772e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0017732:	83 ec 08             	sub    esp,0x8
c0017735:	68 62 39 02 c0       	push   0xc0023962
c001773a:	68 70 d7 02 c0       	push   0xc002d770
c001773f:	e8 0c 90 fe ff       	call   c0000750 <strcmp>
c0017744:	83 c4 10             	add    esp,0x10
c0017747:	85 c0                	test   eax,eax
c0017749:	74 19                	je     c0017764 <HalDetectFeatures()+0x5a4>
c001774b:	83 ec 08             	sub    esp,0x8
c001774e:	68 6f 39 02 c0       	push   0xc002396f
c0017753:	68 70 d7 02 c0       	push   0xc002d770
c0017758:	e8 f3 8f fe ff       	call   c0000750 <strcmp>
c001775d:	83 c4 10             	add    esp,0x10
c0017760:	85 c0                	test   eax,eax
c0017762:	75 04                	jne    c0017768 <HalDetectFeatures()+0x5a8>
c0017764:	b0 01                	mov    al,0x1
c0017766:	eb 02                	jmp    c001776a <HalDetectFeatures()+0x5aa>
c0017768:	b0 00                	mov    al,0x0
c001776a:	0f b6 c0             	movzx  eax,al
c001776d:	85 c0                	test   eax,eax
c001776f:	74 0f                	je     c0017780 <HalDetectFeatures()+0x5c0>
c0017771:	c7 05 84 d7 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x2
c001777b:	e9 0d 03 00 00       	jmp    c0017a8d <HalDetectFeatures()+0x8cd>
c0017780:	83 ec 08             	sub    esp,0x8
c0017783:	68 7c 39 02 c0       	push   0xc002397c
c0017788:	68 70 d7 02 c0       	push   0xc002d770
c001778d:	e8 be 8f fe ff       	call   c0000750 <strcmp>
c0017792:	83 c4 10             	add    esp,0x10
c0017795:	85 c0                	test   eax,eax
c0017797:	74 19                	je     c00177b2 <HalDetectFeatures()+0x5f2>
c0017799:	83 ec 08             	sub    esp,0x8
c001779c:	68 89 39 02 c0       	push   0xc0023989
c00177a1:	68 70 d7 02 c0       	push   0xc002d770
c00177a6:	e8 a5 8f fe ff       	call   c0000750 <strcmp>
c00177ab:	83 c4 10             	add    esp,0x10
c00177ae:	85 c0                	test   eax,eax
c00177b0:	75 04                	jne    c00177b6 <HalDetectFeatures()+0x5f6>
c00177b2:	b0 01                	mov    al,0x1
c00177b4:	eb 02                	jmp    c00177b8 <HalDetectFeatures()+0x5f8>
c00177b6:	b0 00                	mov    al,0x0
c00177b8:	0f b6 c0             	movzx  eax,al
c00177bb:	85 c0                	test   eax,eax
c00177bd:	74 0f                	je     c00177ce <HalDetectFeatures()+0x60e>
c00177bf:	c7 05 84 d7 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x4
c00177c9:	e9 bf 02 00 00       	jmp    c0017a8d <HalDetectFeatures()+0x8cd>
c00177ce:	83 ec 08             	sub    esp,0x8
c00177d1:	68 96 39 02 c0       	push   0xc0023996
c00177d6:	68 70 d7 02 c0       	push   0xc002d770
c00177db:	e8 70 8f fe ff       	call   c0000750 <strcmp>
c00177e0:	83 c4 10             	add    esp,0x10
c00177e3:	85 c0                	test   eax,eax
c00177e5:	74 19                	je     c0017800 <HalDetectFeatures()+0x640>
c00177e7:	83 ec 08             	sub    esp,0x8
c00177ea:	68 a3 39 02 c0       	push   0xc00239a3
c00177ef:	68 70 d7 02 c0       	push   0xc002d770
c00177f4:	e8 57 8f fe ff       	call   c0000750 <strcmp>
c00177f9:	83 c4 10             	add    esp,0x10
c00177fc:	85 c0                	test   eax,eax
c00177fe:	75 04                	jne    c0017804 <HalDetectFeatures()+0x644>
c0017800:	b0 01                	mov    al,0x1
c0017802:	eb 02                	jmp    c0017806 <HalDetectFeatures()+0x646>
c0017804:	b0 00                	mov    al,0x0
c0017806:	0f b6 c0             	movzx  eax,al
c0017809:	85 c0                	test   eax,eax
c001780b:	74 0f                	je     c001781c <HalDetectFeatures()+0x65c>
c001780d:	c7 05 84 d7 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x5
c0017817:	e9 71 02 00 00       	jmp    c0017a8d <HalDetectFeatures()+0x8cd>
c001781c:	83 ec 08             	sub    esp,0x8
c001781f:	68 b0 39 02 c0       	push   0xc00239b0
c0017824:	68 70 d7 02 c0       	push   0xc002d770
c0017829:	e8 22 8f fe ff       	call   c0000750 <strcmp>
c001782e:	83 c4 10             	add    esp,0x10
c0017831:	85 c0                	test   eax,eax
c0017833:	0f 94 c0             	sete   al
c0017836:	0f b6 c0             	movzx  eax,al
c0017839:	85 c0                	test   eax,eax
c001783b:	74 0f                	je     c001784c <HalDetectFeatures()+0x68c>
c001783d:	c7 05 84 d7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x1
c0017847:	e9 41 02 00 00       	jmp    c0017a8d <HalDetectFeatures()+0x8cd>
c001784c:	83 ec 08             	sub    esp,0x8
c001784f:	68 bd 39 02 c0       	push   0xc00239bd
c0017854:	68 70 d7 02 c0       	push   0xc002d770
c0017859:	e8 f2 8e fe ff       	call   c0000750 <strcmp>
c001785e:	83 c4 10             	add    esp,0x10
c0017861:	85 c0                	test   eax,eax
c0017863:	0f 94 c0             	sete   al
c0017866:	0f b6 c0             	movzx  eax,al
c0017869:	85 c0                	test   eax,eax
c001786b:	74 0f                	je     c001787c <HalDetectFeatures()+0x6bc>
c001786d:	c7 05 84 d7 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x3
c0017877:	e9 11 02 00 00       	jmp    c0017a8d <HalDetectFeatures()+0x8cd>
c001787c:	83 ec 08             	sub    esp,0x8
c001787f:	68 7c 39 02 c0       	push   0xc002397c
c0017884:	68 70 d7 02 c0       	push   0xc002d770
c0017889:	e8 c2 8e fe ff       	call   c0000750 <strcmp>
c001788e:	83 c4 10             	add    esp,0x10
c0017891:	85 c0                	test   eax,eax
c0017893:	0f 94 c0             	sete   al
c0017896:	0f b6 c0             	movzx  eax,al
c0017899:	85 c0                	test   eax,eax
c001789b:	74 0f                	je     c00178ac <HalDetectFeatures()+0x6ec>
c001789d:	c7 05 84 d7 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x6
c00178a7:	e9 e1 01 00 00       	jmp    c0017a8d <HalDetectFeatures()+0x8cd>
c00178ac:	83 ec 08             	sub    esp,0x8
c00178af:	68 ca 39 02 c0       	push   0xc00239ca
c00178b4:	68 70 d7 02 c0       	push   0xc002d770
c00178b9:	e8 92 8e fe ff       	call   c0000750 <strcmp>
c00178be:	83 c4 10             	add    esp,0x10
c00178c1:	85 c0                	test   eax,eax
c00178c3:	0f 94 c0             	sete   al
c00178c6:	0f b6 c0             	movzx  eax,al
c00178c9:	85 c0                	test   eax,eax
c00178cb:	74 0f                	je     c00178dc <HalDetectFeatures()+0x71c>
c00178cd:	c7 05 84 d7 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x7
c00178d7:	e9 b1 01 00 00       	jmp    c0017a8d <HalDetectFeatures()+0x8cd>
c00178dc:	83 ec 08             	sub    esp,0x8
c00178df:	68 d7 39 02 c0       	push   0xc00239d7
c00178e4:	68 70 d7 02 c0       	push   0xc002d770
c00178e9:	e8 62 8e fe ff       	call   c0000750 <strcmp>
c00178ee:	83 c4 10             	add    esp,0x10
c00178f1:	85 c0                	test   eax,eax
c00178f3:	0f 94 c0             	sete   al
c00178f6:	0f b6 c0             	movzx  eax,al
c00178f9:	85 c0                	test   eax,eax
c00178fb:	74 0f                	je     c001790c <HalDetectFeatures()+0x74c>
c00178fd:	c7 05 84 d7 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x8
c0017907:	e9 81 01 00 00       	jmp    c0017a8d <HalDetectFeatures()+0x8cd>
c001790c:	83 ec 08             	sub    esp,0x8
c001790f:	68 e4 39 02 c0       	push   0xc00239e4
c0017914:	68 70 d7 02 c0       	push   0xc002d770
c0017919:	e8 32 8e fe ff       	call   c0000750 <strcmp>
c001791e:	83 c4 10             	add    esp,0x10
c0017921:	85 c0                	test   eax,eax
c0017923:	0f 94 c0             	sete   al
c0017926:	0f b6 c0             	movzx  eax,al
c0017929:	85 c0                	test   eax,eax
c001792b:	74 0f                	je     c001793c <HalDetectFeatures()+0x77c>
c001792d:	c7 05 84 d7 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x9
c0017937:	e9 51 01 00 00       	jmp    c0017a8d <HalDetectFeatures()+0x8cd>
c001793c:	83 ec 08             	sub    esp,0x8
c001793f:	68 f1 39 02 c0       	push   0xc00239f1
c0017944:	68 70 d7 02 c0       	push   0xc002d770
c0017949:	e8 02 8e fe ff       	call   c0000750 <strcmp>
c001794e:	83 c4 10             	add    esp,0x10
c0017951:	85 c0                	test   eax,eax
c0017953:	0f 94 c0             	sete   al
c0017956:	0f b6 c0             	movzx  eax,al
c0017959:	85 c0                	test   eax,eax
c001795b:	74 0f                	je     c001796c <HalDetectFeatures()+0x7ac>
c001795d:	c7 05 84 d7 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xa
c0017967:	e9 21 01 00 00       	jmp    c0017a8d <HalDetectFeatures()+0x8cd>
c001796c:	83 ec 08             	sub    esp,0x8
c001796f:	68 fe 39 02 c0       	push   0xc00239fe
c0017974:	68 70 d7 02 c0       	push   0xc002d770
c0017979:	e8 d2 8d fe ff       	call   c0000750 <strcmp>
c001797e:	83 c4 10             	add    esp,0x10
c0017981:	85 c0                	test   eax,eax
c0017983:	0f 94 c0             	sete   al
c0017986:	0f b6 c0             	movzx  eax,al
c0017989:	85 c0                	test   eax,eax
c001798b:	74 0f                	je     c001799c <HalDetectFeatures()+0x7dc>
c001798d:	c7 05 84 d7 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xb
c0017997:	e9 f1 00 00 00       	jmp    c0017a8d <HalDetectFeatures()+0x8cd>
c001799c:	83 ec 08             	sub    esp,0x8
c001799f:	68 0b 3a 02 c0       	push   0xc0023a0b
c00179a4:	68 70 d7 02 c0       	push   0xc002d770
c00179a9:	e8 a2 8d fe ff       	call   c0000750 <strcmp>
c00179ae:	83 c4 10             	add    esp,0x10
c00179b1:	85 c0                	test   eax,eax
c00179b3:	0f 94 c0             	sete   al
c00179b6:	0f b6 c0             	movzx  eax,al
c00179b9:	85 c0                	test   eax,eax
c00179bb:	74 0f                	je     c00179cc <HalDetectFeatures()+0x80c>
c00179bd:	c7 05 84 d7 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xc
c00179c7:	e9 c1 00 00 00       	jmp    c0017a8d <HalDetectFeatures()+0x8cd>
c00179cc:	83 ec 08             	sub    esp,0x8
c00179cf:	68 18 3a 02 c0       	push   0xc0023a18
c00179d4:	68 70 d7 02 c0       	push   0xc002d770
c00179d9:	e8 72 8d fe ff       	call   c0000750 <strcmp>
c00179de:	83 c4 10             	add    esp,0x10
c00179e1:	85 c0                	test   eax,eax
c00179e3:	0f 94 c0             	sete   al
c00179e6:	0f b6 c0             	movzx  eax,al
c00179e9:	85 c0                	test   eax,eax
c00179eb:	74 0f                	je     c00179fc <HalDetectFeatures()+0x83c>
c00179ed:	c7 05 84 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xd
c00179f7:	e9 91 00 00 00       	jmp    c0017a8d <HalDetectFeatures()+0x8cd>
c00179fc:	83 ec 08             	sub    esp,0x8
c00179ff:	68 25 3a 02 c0       	push   0xc0023a25
c0017a04:	68 70 d7 02 c0       	push   0xc002d770
c0017a09:	e8 42 8d fe ff       	call   c0000750 <strcmp>
c0017a0e:	83 c4 10             	add    esp,0x10
c0017a11:	85 c0                	test   eax,eax
c0017a13:	0f 94 c0             	sete   al
c0017a16:	0f b6 c0             	movzx  eax,al
c0017a19:	85 c0                	test   eax,eax
c0017a1b:	74 0c                	je     c0017a29 <HalDetectFeatures()+0x869>
c0017a1d:	c7 05 84 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xd
c0017a27:	eb 64                	jmp    c0017a8d <HalDetectFeatures()+0x8cd>
c0017a29:	83 ec 08             	sub    esp,0x8
c0017a2c:	68 32 3a 02 c0       	push   0xc0023a32
c0017a31:	68 70 d7 02 c0       	push   0xc002d770
c0017a36:	e8 15 8d fe ff       	call   c0000750 <strcmp>
c0017a3b:	83 c4 10             	add    esp,0x10
c0017a3e:	85 c0                	test   eax,eax
c0017a40:	0f 94 c0             	sete   al
c0017a43:	0f b6 c0             	movzx  eax,al
c0017a46:	85 c0                	test   eax,eax
c0017a48:	74 0c                	je     c0017a56 <HalDetectFeatures()+0x896>
c0017a4a:	c7 05 84 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xd
c0017a54:	eb 37                	jmp    c0017a8d <HalDetectFeatures()+0x8cd>
c0017a56:	83 ec 08             	sub    esp,0x8
c0017a59:	68 3f 3a 02 c0       	push   0xc0023a3f
c0017a5e:	68 70 d7 02 c0       	push   0xc002d770
c0017a63:	e8 e8 8c fe ff       	call   c0000750 <strcmp>
c0017a68:	83 c4 10             	add    esp,0x10
c0017a6b:	85 c0                	test   eax,eax
c0017a6d:	0f 94 c0             	sete   al
c0017a70:	0f b6 c0             	movzx  eax,al
c0017a73:	85 c0                	test   eax,eax
c0017a75:	74 0c                	je     c0017a83 <HalDetectFeatures()+0x8c3>
c0017a77:	c7 05 84 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xd
c0017a81:	eb 0a                	jmp    c0017a8d <HalDetectFeatures()+0x8cd>
c0017a83:	c7 05 84 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x0
c0017a8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a91:	83 f8 06             	cmp    eax,0x6
c0017a94:	0f 86 cc 00 00 00    	jbe    c0017b66 <HalDetectFeatures()+0x9a6>
c0017a9a:	83 ec 0c             	sub    esp,0xc
c0017a9d:	68 80 00 00 00       	push   0x80
c0017aa2:	e8 bd f6 ff ff       	call   c0017164 <cpuidCheckExtendedEBX(unsigned int)>
c0017aa7:	83 c4 10             	add    esp,0x10
c0017aaa:	89 c1                	mov    ecx,eax
c0017aac:	83 e1 01             	and    ecx,0x1
c0017aaf:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017ab4:	83 e0 fe             	and    eax,0xfffffffe
c0017ab7:	88 c2                	mov    dl,al
c0017ab9:	88 c8                	mov    al,cl
c0017abb:	09 d0                	or     eax,edx
c0017abd:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017ac2:	83 ec 0c             	sub    esp,0xc
c0017ac5:	68 00 00 10 00       	push   0x100000
c0017aca:	e8 95 f6 ff ff       	call   c0017164 <cpuidCheckExtendedEBX(unsigned int)>
c0017acf:	83 c4 10             	add    esp,0x10
c0017ad2:	83 e0 01             	and    eax,0x1
c0017ad5:	89 c1                	mov    ecx,eax
c0017ad7:	c1 e1 06             	shl    ecx,0x6
c0017ada:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017adf:	83 e0 bf             	and    eax,0xffffffbf
c0017ae2:	88 c2                	mov    dl,al
c0017ae4:	88 c8                	mov    al,cl
c0017ae6:	09 d0                	or     eax,edx
c0017ae8:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017aed:	83 ec 0c             	sub    esp,0xc
c0017af0:	68 00 00 04 00       	push   0x40000
c0017af5:	e8 6a f6 ff ff       	call   c0017164 <cpuidCheckExtendedEBX(unsigned int)>
c0017afa:	83 c4 10             	add    esp,0x10
c0017afd:	83 e0 01             	and    eax,0x1
c0017b00:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0017b03:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017b08:	83 e0 fd             	and    eax,0xfffffffd
c0017b0b:	88 c2                	mov    dl,al
c0017b0d:	88 c8                	mov    al,cl
c0017b0f:	09 d0                	or     eax,edx
c0017b11:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017b16:	83 ec 0c             	sub    esp,0xc
c0017b19:	6a 04                	push   0x4
c0017b1b:	e8 72 f6 ff ff       	call   c0017192 <cpuidCheckExtendedECX(unsigned int)>
c0017b20:	83 c4 10             	add    esp,0x10
c0017b23:	83 e0 01             	and    eax,0x1
c0017b26:	89 c1                	mov    ecx,eax
c0017b28:	c1 e1 05             	shl    ecx,0x5
c0017b2b:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017b30:	83 e0 df             	and    eax,0xffffffdf
c0017b33:	88 c2                	mov    dl,al
c0017b35:	88 c8                	mov    al,cl
c0017b37:	09 d0                	or     eax,edx
c0017b39:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017b3e:	83 ec 0c             	sub    esp,0xc
c0017b41:	6a 20                	push   0x20
c0017b43:	e8 4a f6 ff ff       	call   c0017192 <cpuidCheckExtendedECX(unsigned int)>
c0017b48:	83 c4 10             	add    esp,0x10
c0017b4b:	83 e0 01             	and    eax,0x1
c0017b4e:	89 c1                	mov    ecx,eax
c0017b50:	c1 e1 04             	shl    ecx,0x4
c0017b53:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017b58:	83 e0 ef             	and    eax,0xffffffef
c0017b5b:	88 c2                	mov    dl,al
c0017b5d:	88 c8                	mov    al,cl
c0017b5f:	09 d0                	or     eax,edx
c0017b61:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017b66:	83 ec 0c             	sub    esp,0xc
c0017b69:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017b6d:	50                   	push   eax
c0017b6e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017b72:	50                   	push   eax
c0017b73:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017b77:	50                   	push   eax
c0017b78:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017b7c:	50                   	push   eax
c0017b7d:	6a 01                	push   0x1
c0017b7f:	e8 e7 f4 ff ff       	call   c001706b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017b84:	83 c4 20             	add    esp,0x20
c0017b87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b8b:	83 e0 0f             	and    eax,0xf
c0017b8e:	a2 80 d7 02 c0       	mov    ds:0xc002d780,al
c0017b93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b97:	c1 e8 04             	shr    eax,0x4
c0017b9a:	83 e0 0f             	and    eax,0xf
c0017b9d:	a2 7e d7 02 c0       	mov    ds:0xc002d77e,al
c0017ba2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ba6:	c1 e8 08             	shr    eax,0x8
c0017ba9:	83 e0 0f             	and    eax,0xf
c0017bac:	a2 7d d7 02 c0       	mov    ds:0xc002d77d,al
c0017bb1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bb5:	c1 e8 0c             	shr    eax,0xc
c0017bb8:	83 e0 03             	and    eax,0x3
c0017bbb:	a2 7f d7 02 c0       	mov    ds:0xc002d77f,al
c0017bc0:	a0 7d d7 02 c0       	mov    al,ds:0xc002d77d
c0017bc5:	0f b6 c0             	movzx  eax,al
c0017bc8:	83 f8 06             	cmp    eax,0x6
c0017bcb:	74 0d                	je     c0017bda <HalDetectFeatures()+0xa1a>
c0017bcd:	a0 7d d7 02 c0       	mov    al,ds:0xc002d77d
c0017bd2:	0f b6 c0             	movzx  eax,al
c0017bd5:	83 f8 0f             	cmp    eax,0xf
c0017bd8:	75 18                	jne    c0017bf2 <HalDetectFeatures()+0xa32>
c0017bda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bde:	c1 e8 10             	shr    eax,0x10
c0017be1:	c1 e0 04             	shl    eax,0x4
c0017be4:	88 c2                	mov    dl,al
c0017be6:	a0 7e d7 02 c0       	mov    al,ds:0xc002d77e
c0017beb:	09 d0                	or     eax,edx
c0017bed:	a2 7e d7 02 c0       	mov    ds:0xc002d77e,al
c0017bf2:	a0 7d d7 02 c0       	mov    al,ds:0xc002d77d
c0017bf7:	0f b6 c0             	movzx  eax,al
c0017bfa:	83 f8 0f             	cmp    eax,0xf
c0017bfd:	75 15                	jne    c0017c14 <HalDetectFeatures()+0xa54>
c0017bff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c03:	c1 e8 14             	shr    eax,0x14
c0017c06:	88 c2                	mov    dl,al
c0017c08:	a0 7d d7 02 c0       	mov    al,ds:0xc002d77d
c0017c0d:	01 d0                	add    eax,edx
c0017c0f:	a2 7d d7 02 c0       	mov    ds:0xc002d77d,al
c0017c14:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c0017c1c:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c0017c24:	85 c0                	test   eax,eax
c0017c26:	74 2d                	je     c0017c55 <HalDetectFeatures()+0xa95>
c0017c28:	83 ec 0c             	sub    esp,0xc
c0017c2b:	68 00 00 00 40       	push   0x40000000
c0017c30:	e8 01 f5 ff ff       	call   c0017136 <cpuidCheckECX(unsigned int)>
c0017c35:	83 c4 10             	add    esp,0x10
c0017c38:	83 e0 01             	and    eax,0x1
c0017c3b:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0017c42:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c0017c47:	83 e0 fb             	and    eax,0xfffffffb
c0017c4a:	88 c2                	mov    dl,al
c0017c4c:	88 c8                	mov    al,cl
c0017c4e:	09 d0                	or     eax,edx
c0017c50:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c0017c55:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017c5a:	83 c8 04             	or     eax,0x4
c0017c5d:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017c62:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017c67:	83 c8 08             	or     eax,0x8
c0017c6a:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017c6f:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017c74:	83 c8 10             	or     eax,0x10
c0017c77:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017c7c:	83 ec 0c             	sub    esp,0xc
c0017c7f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017c83:	50                   	push   eax
c0017c84:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017c88:	50                   	push   eax
c0017c89:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017c8d:	50                   	push   eax
c0017c8e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017c92:	50                   	push   eax
c0017c93:	68 00 00 00 80       	push   0x80000000
c0017c98:	e8 ce f3 ff ff       	call   c001706b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017c9d:	83 c4 20             	add    esp,0x20
c0017ca0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ca4:	3d 00 00 00 80       	cmp    eax,0x80000000
c0017ca9:	0f 86 96 01 00 00    	jbe    c0017e45 <HalDetectFeatures()+0xc85>
c0017caf:	83 ec 0c             	sub    esp,0xc
c0017cb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017cb6:	50                   	push   eax
c0017cb7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017cbb:	50                   	push   eax
c0017cbc:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017cc0:	50                   	push   eax
c0017cc1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017cc5:	50                   	push   eax
c0017cc6:	68 01 00 00 80       	push   0x80000001
c0017ccb:	e8 9b f3 ff ff       	call   c001706b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017cd0:	83 c4 20             	add    esp,0x20
c0017cd3:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017cd8:	83 e0 7f             	and    eax,0x7f
c0017cdb:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017ce0:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017ce5:	83 e0 fb             	and    eax,0xfffffffb
c0017ce8:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017ced:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017cf2:	83 e0 fd             	and    eax,0xfffffffd
c0017cf5:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017cfa:	e9 46 01 00 00       	jmp    c0017e45 <HalDetectFeatures()+0xc85>
c0017cff:	83 ec 08             	sub    esp,0x8
c0017d02:	68 b0 39 02 c0       	push   0xc00239b0
c0017d07:	68 70 d7 02 c0       	push   0xc002d770
c0017d0c:	e8 2f 89 fe ff       	call   c0000640 <strcpy>
c0017d11:	83 c4 10             	add    esp,0x10
c0017d14:	c7 05 84 d7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x1
c0017d1e:	e8 a0 84 fe ff       	call   c00001c3 <is486>
c0017d23:	85 c0                	test   eax,eax
c0017d25:	0f 95 c0             	setne  al
c0017d28:	0f b6 c0             	movzx  eax,al
c0017d2b:	85 c0                	test   eax,eax
c0017d2d:	0f 84 8d 00 00 00    	je     c0017dc0 <HalDetectFeatures()+0xc00>
c0017d33:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017d38:	83 c8 04             	or     eax,0x4
c0017d3b:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017d40:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017d45:	83 c8 08             	or     eax,0x8
c0017d48:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017d4d:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017d52:	83 c8 10             	or     eax,0x10
c0017d55:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017d5a:	0f 20 c0             	mov    eax,cr0
c0017d5d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017d61:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d65:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0017d6c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0017d73:	83 e0 04             	and    eax,0x4
c0017d76:	74 1e                	je     c0017d96 <HalDetectFeatures()+0xbd6>
c0017d78:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0017d7f:	83 e0 10             	and    eax,0x10
c0017d82:	75 12                	jne    c0017d96 <HalDetectFeatures()+0xbd6>
c0017d84:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017d89:	83 e0 f7             	and    eax,0xfffffff7
c0017d8c:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017d91:	e9 af 00 00 00       	jmp    c0017e45 <HalDetectFeatures()+0xc85>
c0017d96:	e8 03 84 fe ff       	call   c000019e <hasLegacyFPU>
c0017d9b:	83 e0 01             	and    eax,0x1
c0017d9e:	83 e0 01             	and    eax,0x1
c0017da1:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017da8:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017dad:	83 e0 f7             	and    eax,0xfffffff7
c0017db0:	88 c2                	mov    dl,al
c0017db2:	88 c8                	mov    al,cl
c0017db4:	09 d0                	or     eax,edx
c0017db6:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017dbb:	e9 85 00 00 00       	jmp    c0017e45 <HalDetectFeatures()+0xc85>
c0017dc0:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017dc5:	83 e0 fb             	and    eax,0xfffffffb
c0017dc8:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017dcd:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017dd2:	83 e0 f7             	and    eax,0xfffffff7
c0017dd5:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017dda:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017ddf:	83 e0 ef             	and    eax,0xffffffef
c0017de2:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017de7:	0f 20 c0             	mov    eax,cr0
c0017dea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017dee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017df2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0017df9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0017e00:	83 e0 04             	and    eax,0x4
c0017e03:	74 1b                	je     c0017e20 <HalDetectFeatures()+0xc60>
c0017e05:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0017e0c:	83 e0 10             	and    eax,0x10
c0017e0f:	75 0f                	jne    c0017e20 <HalDetectFeatures()+0xc60>
c0017e11:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017e16:	83 e0 f7             	and    eax,0xfffffff7
c0017e19:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017e1e:	eb 25                	jmp    c0017e45 <HalDetectFeatures()+0xc85>
c0017e20:	e8 79 83 fe ff       	call   c000019e <hasLegacyFPU>
c0017e25:	83 e0 01             	and    eax,0x1
c0017e28:	83 e0 01             	and    eax,0x1
c0017e2b:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017e32:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017e37:	83 e0 f7             	and    eax,0xfffffff7
c0017e3a:	88 c2                	mov    dl,al
c0017e3c:	88 c8                	mov    al,cl
c0017e3e:	09 d0                	or     eax,edx
c0017e40:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017e45:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017e4a:	83 e0 08             	and    eax,0x8
c0017e4d:	0f b6 c0             	movzx  eax,al
c0017e50:	85 c0                	test   eax,eax
c0017e52:	75 25                	jne    c0017e79 <HalDetectFeatures()+0xcb9>
c0017e54:	e8 45 83 fe ff       	call   c000019e <hasLegacyFPU>
c0017e59:	83 e0 01             	and    eax,0x1
c0017e5c:	83 e0 01             	and    eax,0x1
c0017e5f:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017e66:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017e6b:	83 e0 f7             	and    eax,0xfffffff7
c0017e6e:	88 c2                	mov    dl,al
c0017e70:	88 c8                	mov    al,cl
c0017e72:	09 d0                	or     eax,edx
c0017e74:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017e79:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017e7e:	83 e0 08             	and    eax,0x8
c0017e81:	0f b6 c0             	movzx  eax,al
c0017e84:	85 c0                	test   eax,eax
c0017e86:	74 0d                	je     c0017e95 <HalDetectFeatures()+0xcd5>
c0017e88:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017e8d:	83 c8 10             	or     eax,0x10
c0017e90:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017e95:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017e9a:	83 e0 10             	and    eax,0x10
c0017e9d:	0f b6 c0             	movzx  eax,al
c0017ea0:	85 c0                	test   eax,eax
c0017ea2:	75 23                	jne    c0017ec7 <HalDetectFeatures()+0xd07>
c0017ea4:	e8 5d 7f 00 00       	call   c001fe06 <x87Detect>
c0017ea9:	83 e0 01             	and    eax,0x1
c0017eac:	83 e0 01             	and    eax,0x1
c0017eaf:	89 c1                	mov    ecx,eax
c0017eb1:	c1 e1 04             	shl    ecx,0x4
c0017eb4:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017eb9:	83 e0 ef             	and    eax,0xffffffef
c0017ebc:	88 c2                	mov    dl,al
c0017ebe:	88 c8                	mov    al,cl
c0017ec0:	09 d0                	or     eax,edx
c0017ec2:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017ec7:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017ecc:	83 e0 01             	and    eax,0x1
c0017ecf:	0f b6 c0             	movzx  eax,al
c0017ed2:	85 c0                	test   eax,eax
c0017ed4:	75 2d                	jne    c0017f03 <HalDetectFeatures()+0xd43>
c0017ed6:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017edb:	83 e0 02             	and    eax,0x2
c0017ede:	0f b6 c0             	movzx  eax,al
c0017ee1:	85 c0                	test   eax,eax
c0017ee3:	75 1e                	jne    c0017f03 <HalDetectFeatures()+0xd43>
c0017ee5:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017eea:	83 e0 04             	and    eax,0x4
c0017eed:	0f b6 c0             	movzx  eax,al
c0017ef0:	85 c0                	test   eax,eax
c0017ef2:	75 0f                	jne    c0017f03 <HalDetectFeatures()+0xd43>
c0017ef4:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017ef9:	83 e0 08             	and    eax,0x8
c0017efc:	0f b6 c0             	movzx  eax,al
c0017eff:	85 c0                	test   eax,eax
c0017f01:	74 0d                	je     c0017f10 <HalDetectFeatures()+0xd50>
c0017f03:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017f08:	83 c8 80             	or     eax,0xffffff80
c0017f0b:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017f10:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017f15:	83 e0 10             	and    eax,0x10
c0017f18:	0f b6 c0             	movzx  eax,al
c0017f1b:	85 c0                	test   eax,eax
c0017f1d:	74 2f                	je     c0017f4e <HalDetectFeatures()+0xd8e>
c0017f1f:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017f24:	83 e0 80             	and    eax,0xffffff80
c0017f27:	0f b6 c0             	movzx  eax,al
c0017f2a:	85 c0                	test   eax,eax
c0017f2c:	75 20                	jne    c0017f4e <HalDetectFeatures()+0xd8e>
c0017f2e:	e8 8d 7e 00 00       	call   c001fdc0 <sseDetect>
c0017f33:	83 e0 01             	and    eax,0x1
c0017f36:	89 c1                	mov    ecx,eax
c0017f38:	c1 e1 07             	shl    ecx,0x7
c0017f3b:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017f40:	83 e0 7f             	and    eax,0x7f
c0017f43:	88 c2                	mov    dl,al
c0017f45:	88 c8                	mov    al,cl
c0017f47:	09 d0                	or     eax,edx
c0017f49:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017f4e:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017f53:	83 e0 80             	and    eax,0xffffff80
c0017f56:	0f b6 c0             	movzx  eax,al
c0017f59:	85 c0                	test   eax,eax
c0017f5b:	74 1c                	je     c0017f79 <HalDetectFeatures()+0xdb9>
c0017f5d:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017f62:	83 e0 20             	and    eax,0x20
c0017f65:	0f b6 c0             	movzx  eax,al
c0017f68:	85 c0                	test   eax,eax
c0017f6a:	75 0d                	jne    c0017f79 <HalDetectFeatures()+0xdb9>
c0017f6c:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017f71:	83 e0 df             	and    eax,0xffffffdf
c0017f74:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c0017f79:	c6 05 88 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d788,0x0
c0017f80:	90                   	nop
c0017f81:	81 c4 90 00 00 00    	add    esp,0x90
c0017f87:	5b                   	pop    ebx
c0017f88:	5e                   	pop    esi
c0017f89:	5f                   	pop    edi
c0017f8a:	c3                   	ret    

c0017f8b <HalEnableNMI()>:
c0017f8b:	c6 05 6c d7 02 c0 01 	mov    BYTE PTR ds:0xc002d76c,0x1
c0017f92:	6a 10                	push   0x10
c0017f94:	e8 22 ef ff ff       	call   c0016ebb <x86ReadCMOS(unsigned char)>
c0017f99:	83 c4 04             	add    esp,0x4
c0017f9c:	90                   	nop
c0017f9d:	c3                   	ret    

c0017f9e <HalDisableNMI()>:
c0017f9e:	c6 05 6c d7 02 c0 00 	mov    BYTE PTR ds:0xc002d76c,0x0
c0017fa5:	6a 10                	push   0x10
c0017fa7:	e8 0f ef ff ff       	call   c0016ebb <x86ReadCMOS(unsigned char)>
c0017fac:	83 c4 04             	add    esp,0x4
c0017faf:	90                   	nop
c0017fb0:	c3                   	ret    

c0017fb1 <HalGetNMIState()>:
c0017fb1:	a0 6c d7 02 c0       	mov    al,ds:0xc002d76c
c0017fb6:	c3                   	ret    

c0017fb7 <x86rdmsr(unsigned int)>:
c0017fb7:	83 ec 1c             	sub    esp,0x1c
c0017fba:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017fbf:	83 e0 08             	and    eax,0x8
c0017fc2:	0f b6 c0             	movzx  eax,al
c0017fc5:	85 c0                	test   eax,eax
c0017fc7:	75 10                	jne    c0017fd9 <x86rdmsr(unsigned int)+0x22>
c0017fc9:	83 ec 0c             	sub    esp,0xc
c0017fcc:	68 4b 3a 02 c0       	push   0xc0023a4b
c0017fd1:	e8 c0 6d ff ff       	call   c000ed96 <KePanic(char const*)>
c0017fd6:	83 c4 10             	add    esp,0x10
c0017fd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fdd:	89 c1                	mov    ecx,eax
c0017fdf:	0f 32                	rdmsr  
c0017fe1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017fe5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017fe9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ff1:	83 c4 1c             	add    esp,0x1c
c0017ff4:	c3                   	ret    

c0017ff5 <x86wrmsr(unsigned int, unsigned long long)>:
c0017ff5:	83 ec 1c             	sub    esp,0x1c
c0017ff8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ffc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018000:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018004:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018008:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001800d:	83 e0 08             	and    eax,0x8
c0018010:	0f b6 c0             	movzx  eax,al
c0018013:	85 c0                	test   eax,eax
c0018015:	75 10                	jne    c0018027 <x86wrmsr(unsigned int, unsigned long long)+0x32>
c0018017:	83 ec 0c             	sub    esp,0xc
c001801a:	68 51 3a 02 c0       	push   0xc0023a51
c001801f:	e8 72 6d ff ff       	call   c000ed96 <KePanic(char const*)>
c0018024:	83 c4 10             	add    esp,0x10
c0018027:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001802b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001802f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018033:	0f 30                	wrmsr  
c0018035:	90                   	nop
c0018036:	83 c4 1c             	add    esp,0x1c
c0018039:	c3                   	ret    

c001803a <HalHandleGeneralProtectionFault(void*, void*)>:
c001803a:	83 ec 0c             	sub    esp,0xc
c001803d:	83 ec 0c             	sub    esp,0xc
c0018040:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018044:	e8 48 e7 ff ff       	call   c0016791 <Vm::faultHandler(regs*)>
c0018049:	83 c4 10             	add    esp,0x10
c001804c:	83 c4 0c             	add    esp,0xc
c001804f:	c3                   	ret    

c0018050 <HalFindRSDP()>:
c0018050:	83 ec 1c             	sub    esp,0x1c
c0018053:	a1 ac cd 02 c0       	mov    eax,ds:0xc002cdac
c0018058:	3d ff 07 00 00       	cmp    eax,0x7ff
c001805d:	7e 0c                	jle    c001806b <HalFindRSDP()+0x1b>
c001805f:	a1 90 cd 02 c0       	mov    eax,ds:0xc002cd90
c0018064:	25 00 04 00 00       	and    eax,0x400
c0018069:	74 0d                	je     c0018078 <HalFindRSDP()+0x28>
c001806b:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0018070:	83 e0 fb             	and    eax,0xfffffffb
c0018073:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0018078:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001807d:	83 e0 04             	and    eax,0x4
c0018080:	0f b6 c0             	movzx  eax,al
c0018083:	85 c0                	test   eax,eax
c0018085:	75 07                	jne    c001808e <HalFindRSDP()+0x3e>
c0018087:	b8 00 00 00 00       	mov    eax,0x0
c001808c:	eb 53                	jmp    c00180e1 <HalFindRSDP()+0x91>
c001808e:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0018096:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001809e:	77 2f                	ja     c00180cf <HalFindRSDP()+0x7f>
c00180a0:	83 ec 04             	sub    esp,0x4
c00180a3:	6a 08                	push   0x8
c00180a5:	68 57 3a 02 c0       	push   0xc0023a57
c00180aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00180ae:	e8 cd 82 fe ff       	call   c0000380 <memcmp>
c00180b3:	83 c4 10             	add    esp,0x10
c00180b6:	85 c0                	test   eax,eax
c00180b8:	0f 94 c0             	sete   al
c00180bb:	0f b6 c0             	movzx  eax,al
c00180be:	85 c0                	test   eax,eax
c00180c0:	74 06                	je     c00180c8 <HalFindRSDP()+0x78>
c00180c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180c6:	eb 19                	jmp    c00180e1 <HalFindRSDP()+0x91>
c00180c8:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00180cd:	eb c7                	jmp    c0018096 <HalFindRSDP()+0x46>
c00180cf:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00180d4:	83 e0 fb             	and    eax,0xfffffffb
c00180d7:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c00180dc:	b8 00 00 00 00       	mov    eax,0x0
c00180e1:	83 c4 1c             	add    esp,0x1c
c00180e4:	c3                   	ret    

c00180e5 <HalHandlePageFault(void*, void*)>:
c00180e5:	83 ec 1c             	sub    esp,0x1c
c00180e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180ec:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00180ef:	83 ec 08             	sub    esp,0x8
c00180f2:	50                   	push   eax
c00180f3:	68 9c 3c 02 c0       	push   0xc0023c9c
c00180f8:	e8 67 ee fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00180fd:	83 c4 10             	add    esp,0x10
c0018100:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018104:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018107:	83 ec 08             	sub    esp,0x8
c001810a:	50                   	push   eax
c001810b:	68 60 3a 02 c0       	push   0xc0023a60
c0018110:	e8 4f ee fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018115:	83 c4 10             	add    esp,0x10
c0018118:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001811d:	8b 00                	mov    eax,DWORD PTR [eax]
c001811f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018122:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0018128:	0f 20 d2             	mov    edx,cr2
c001812b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001812f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018133:	83 ec 08             	sub    esp,0x8
c0018136:	52                   	push   edx
c0018137:	50                   	push   eax
c0018138:	e8 8b ad ff ff       	call   c0012ec8 <VAS::tryLoadBackOffDisk(unsigned long)>
c001813d:	83 c4 10             	add    esp,0x10
c0018140:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018144:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018148:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001814b:	83 ec 08             	sub    esp,0x8
c001814e:	50                   	push   eax
c001814f:	68 75 3a 02 c0       	push   0xc0023a75
c0018154:	e8 0b ee fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018159:	83 c4 10             	add    esp,0x10
c001815c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018160:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018163:	83 ec 08             	sub    esp,0x8
c0018166:	50                   	push   eax
c0018167:	68 8f 3a 02 c0       	push   0xc0023a8f
c001816c:	e8 f3 ed fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018171:	83 c4 10             	add    esp,0x10
c0018174:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018179:	83 ec 08             	sub    esp,0x8
c001817c:	50                   	push   eax
c001817d:	68 a4 3a 02 c0       	push   0xc0023aa4
c0018182:	e8 dd ed fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018187:	83 c4 10             	add    esp,0x10
c001818a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001818e:	83 c4 1c             	add    esp,0x1c
c0018191:	c3                   	ret    

c0018192 <HalHandleOpcodeFault(void*, void*)>:
c0018192:	83 ec 1c             	sub    esp,0x1c
c0018195:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018199:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001819d:	a0 88 d7 02 c0       	mov    al,ds:0xc002d788
c00181a2:	0f b6 c0             	movzx  eax,al
c00181a5:	85 c0                	test   eax,eax
c00181a7:	74 25                	je     c00181ce <HalHandleOpcodeFault(void*, void*)+0x3c>
c00181a9:	83 ec 0c             	sub    esp,0xc
c00181ac:	68 d0 3c 02 c0       	push   0xc0023cd0
c00181b1:	e8 ae ed fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00181b6:	83 c4 10             	add    esp,0x10
c00181b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181bd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00181c0:	8d 50 19             	lea    edx,[eax+0x19]
c00181c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181c7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00181ca:	b0 01                	mov    al,0x1
c00181cc:	eb 02                	jmp    c00181d0 <HalHandleOpcodeFault(void*, void*)+0x3e>
c00181ce:	b0 00                	mov    al,0x0
c00181d0:	83 c4 1c             	add    esp,0x1c
c00181d3:	c3                   	ret    

c00181d4 <HalDisplayDebugInfo(void*)>:
c00181d4:	83 ec 2c             	sub    esp,0x2c
c00181d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00181db:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00181df:	0f 20 c0             	mov    eax,cr0
c00181e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00181e6:	0f 20 d0             	mov    eax,cr2
c00181e9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00181ed:	0f 20 d8             	mov    eax,cr3
c00181f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00181f4:	0f 20 e0             	mov    eax,cr4
c00181f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00181fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00181ff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0018202:	83 ec 08             	sub    esp,0x8
c0018205:	50                   	push   eax
c0018206:	68 bf 3a 02 c0       	push   0xc0023abf
c001820b:	e8 54 ed fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018210:	83 c4 10             	add    esp,0x10
c0018213:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018217:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001821a:	83 ec 08             	sub    esp,0x8
c001821d:	50                   	push   eax
c001821e:	68 b0 3a 02 c0       	push   0xc0023ab0
c0018223:	e8 3c ed fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018228:	83 c4 10             	add    esp,0x10
c001822b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001822f:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018232:	83 ec 08             	sub    esp,0x8
c0018235:	50                   	push   eax
c0018236:	68 bb 3a 02 c0       	push   0xc0023abb
c001823b:	e8 24 ed fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018240:	83 c4 10             	add    esp,0x10
c0018243:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018247:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001824a:	83 ec 08             	sub    esp,0x8
c001824d:	50                   	push   eax
c001824e:	68 ca 3a 02 c0       	push   0xc0023aca
c0018253:	e8 0c ed fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018258:	83 c4 10             	add    esp,0x10
c001825b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001825f:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0018262:	83 ec 08             	sub    esp,0x8
c0018265:	50                   	push   eax
c0018266:	68 d5 3a 02 c0       	push   0xc0023ad5
c001826b:	e8 f4 ec fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018270:	83 c4 10             	add    esp,0x10
c0018273:	83 ec 08             	sub    esp,0x8
c0018276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001827a:	68 e0 3a 02 c0       	push   0xc0023ae0
c001827f:	e8 e0 ec fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018284:	83 c4 10             	add    esp,0x10
c0018287:	83 ec 08             	sub    esp,0x8
c001828a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001828e:	68 eb 3a 02 c0       	push   0xc0023aeb
c0018293:	e8 cc ec fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018298:	83 c4 10             	add    esp,0x10
c001829b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001829f:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00182a2:	c1 e0 05             	shl    eax,0x5
c00182a5:	8d 90 e0 4f 02 c0    	lea    edx,[eax-0x3ffdb020]
c00182ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00182af:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00182b2:	83 ec 04             	sub    esp,0x4
c00182b5:	52                   	push   edx
c00182b6:	50                   	push   eax
c00182b7:	68 f6 3a 02 c0       	push   0xc0023af6
c00182bc:	e8 a3 ec fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00182c1:	83 c4 10             	add    esp,0x10
c00182c4:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00182c9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00182cf:	83 ec 0c             	sub    esp,0xc
c00182d2:	50                   	push   eax
c00182d3:	e8 69 8f ff ff       	call   c0011241 <setActiveTerminal(VgaText*)>
c00182d8:	83 c4 10             	add    esp,0x10
c00182db:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00182e0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00182e6:	83 ec 08             	sub    esp,0x8
c00182e9:	68 05 3b 02 c0       	push   0xc0023b05
c00182ee:	50                   	push   eax
c00182ef:	e8 9a 92 ff ff       	call   c001158e <VgaText::puts(char const*)>
c00182f4:	83 c4 10             	add    esp,0x10
c00182f7:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00182fc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018302:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018306:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0018309:	83 ec 08             	sub    esp,0x8
c001830c:	52                   	push   edx
c001830d:	50                   	push   eax
c001830e:	e8 35 92 ff ff       	call   c0011548 <VgaText::putx(unsigned int)>
c0018313:	83 c4 10             	add    esp,0x10
c0018316:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001831b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018321:	83 ec 08             	sub    esp,0x8
c0018324:	68 13 3b 02 c0       	push   0xc0023b13
c0018329:	50                   	push   eax
c001832a:	e8 5f 92 ff ff       	call   c001158e <VgaText::puts(char const*)>
c001832f:	83 c4 10             	add    esp,0x10
c0018332:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018337:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001833d:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0018342:	8b 12                	mov    edx,DWORD PTR [edx]
c0018344:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0018347:	83 c2 0c             	add    edx,0xc
c001834a:	83 ec 08             	sub    esp,0x8
c001834d:	52                   	push   edx
c001834e:	50                   	push   eax
c001834f:	e8 3a 92 ff ff       	call   c001158e <VgaText::puts(char const*)>
c0018354:	83 c4 10             	add    esp,0x10
c0018357:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001835c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018362:	83 ec 08             	sub    esp,0x8
c0018365:	68 1c 3b 02 c0       	push   0xc0023b1c
c001836a:	50                   	push   eax
c001836b:	e8 1e 92 ff ff       	call   c001158e <VgaText::puts(char const*)>
c0018370:	83 c4 10             	add    esp,0x10
c0018373:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018378:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001837e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018382:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0018385:	83 ec 08             	sub    esp,0x8
c0018388:	52                   	push   edx
c0018389:	50                   	push   eax
c001838a:	e8 b9 91 ff ff       	call   c0011548 <VgaText::putx(unsigned int)>
c001838f:	83 c4 10             	add    esp,0x10
c0018392:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018397:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001839d:	83 ec 08             	sub    esp,0x8
c00183a0:	68 24 3b 02 c0       	push   0xc0023b24
c00183a5:	50                   	push   eax
c00183a6:	e8 e3 91 ff ff       	call   c001158e <VgaText::puts(char const*)>
c00183ab:	83 c4 10             	add    esp,0x10
c00183ae:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00183b3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00183b9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00183bd:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00183c0:	83 ec 08             	sub    esp,0x8
c00183c3:	52                   	push   edx
c00183c4:	50                   	push   eax
c00183c5:	e8 7e 91 ff ff       	call   c0011548 <VgaText::putx(unsigned int)>
c00183ca:	83 c4 10             	add    esp,0x10
c00183cd:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00183d2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00183d8:	83 ec 08             	sub    esp,0x8
c00183db:	68 2c 3b 02 c0       	push   0xc0023b2c
c00183e0:	50                   	push   eax
c00183e1:	e8 a8 91 ff ff       	call   c001158e <VgaText::puts(char const*)>
c00183e6:	83 c4 10             	add    esp,0x10
c00183e9:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00183ee:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00183f4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00183f8:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00183fb:	83 ec 08             	sub    esp,0x8
c00183fe:	52                   	push   edx
c00183ff:	50                   	push   eax
c0018400:	e8 43 91 ff ff       	call   c0011548 <VgaText::putx(unsigned int)>
c0018405:	83 c4 10             	add    esp,0x10
c0018408:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001840d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018413:	83 ec 08             	sub    esp,0x8
c0018416:	68 34 3b 02 c0       	push   0xc0023b34
c001841b:	50                   	push   eax
c001841c:	e8 6d 91 ff ff       	call   c001158e <VgaText::puts(char const*)>
c0018421:	83 c4 10             	add    esp,0x10
c0018424:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018429:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001842f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018433:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0018436:	83 ec 08             	sub    esp,0x8
c0018439:	52                   	push   edx
c001843a:	50                   	push   eax
c001843b:	e8 08 91 ff ff       	call   c0011548 <VgaText::putx(unsigned int)>
c0018440:	83 c4 10             	add    esp,0x10
c0018443:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018448:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001844e:	83 ec 08             	sub    esp,0x8
c0018451:	68 3c 3b 02 c0       	push   0xc0023b3c
c0018456:	50                   	push   eax
c0018457:	e8 32 91 ff ff       	call   c001158e <VgaText::puts(char const*)>
c001845c:	83 c4 10             	add    esp,0x10
c001845f:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018464:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001846a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001846e:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0018471:	83 ec 08             	sub    esp,0x8
c0018474:	52                   	push   edx
c0018475:	50                   	push   eax
c0018476:	e8 cd 90 ff ff       	call   c0011548 <VgaText::putx(unsigned int)>
c001847b:	83 c4 10             	add    esp,0x10
c001847e:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018483:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018489:	83 ec 08             	sub    esp,0x8
c001848c:	68 44 3b 02 c0       	push   0xc0023b44
c0018491:	50                   	push   eax
c0018492:	e8 f7 90 ff ff       	call   c001158e <VgaText::puts(char const*)>
c0018497:	83 c4 10             	add    esp,0x10
c001849a:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001849f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00184a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00184a9:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00184ac:	83 ec 08             	sub    esp,0x8
c00184af:	52                   	push   edx
c00184b0:	50                   	push   eax
c00184b1:	e8 92 90 ff ff       	call   c0011548 <VgaText::putx(unsigned int)>
c00184b6:	83 c4 10             	add    esp,0x10
c00184b9:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00184be:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00184c4:	83 ec 08             	sub    esp,0x8
c00184c7:	68 4c 3b 02 c0       	push   0xc0023b4c
c00184cc:	50                   	push   eax
c00184cd:	e8 bc 90 ff ff       	call   c001158e <VgaText::puts(char const*)>
c00184d2:	83 c4 10             	add    esp,0x10
c00184d5:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00184da:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00184e0:	83 ec 08             	sub    esp,0x8
c00184e3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00184e7:	50                   	push   eax
c00184e8:	e8 5b 90 ff ff       	call   c0011548 <VgaText::putx(unsigned int)>
c00184ed:	83 c4 10             	add    esp,0x10
c00184f0:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00184f5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00184fb:	83 ec 08             	sub    esp,0x8
c00184fe:	68 55 3b 02 c0       	push   0xc0023b55
c0018503:	50                   	push   eax
c0018504:	e8 85 90 ff ff       	call   c001158e <VgaText::puts(char const*)>
c0018509:	83 c4 10             	add    esp,0x10
c001850c:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018511:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018517:	83 ec 08             	sub    esp,0x8
c001851a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001851e:	50                   	push   eax
c001851f:	e8 24 90 ff ff       	call   c0011548 <VgaText::putx(unsigned int)>
c0018524:	83 c4 10             	add    esp,0x10
c0018527:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001852c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018532:	83 ec 08             	sub    esp,0x8
c0018535:	68 5d 3b 02 c0       	push   0xc0023b5d
c001853a:	50                   	push   eax
c001853b:	e8 4e 90 ff ff       	call   c001158e <VgaText::puts(char const*)>
c0018540:	83 c4 10             	add    esp,0x10
c0018543:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018548:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001854e:	83 ec 08             	sub    esp,0x8
c0018551:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018555:	50                   	push   eax
c0018556:	e8 ed 8f ff ff       	call   c0011548 <VgaText::putx(unsigned int)>
c001855b:	83 c4 10             	add    esp,0x10
c001855e:	fa                   	cli    
c001855f:	f4                   	hlt    
c0018560:	eb fe                	jmp    c0018560 <HalDisplayDebugInfo(void*)+0x38c>

c0018562 <HalReceivedNMI()>:
c0018562:	83 ec 1c             	sub    esp,0x1c
c0018565:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c001856c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018570:	89 c2                	mov    edx,eax
c0018572:	ec                   	in     al,dx
c0018573:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0018577:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001857b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001857f:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c0018586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001858a:	89 c2                	mov    edx,eax
c001858c:	ec                   	in     al,dx
c001858d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018591:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0018595:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018599:	83 ec 0c             	sub    esp,0xc
c001859c:	68 65 3b 02 c0       	push   0xc0023b65
c00185a1:	e8 be e9 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00185a6:	83 c4 10             	add    esp,0x10
c00185a9:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00185ae:	83 e0 10             	and    eax,0x10
c00185b1:	74 10                	je     c00185c3 <HalReceivedNMI()+0x61>
c00185b3:	83 ec 0c             	sub    esp,0xc
c00185b6:	68 76 3b 02 c0       	push   0xc0023b76
c00185bb:	e8 d6 67 ff ff       	call   c000ed96 <KePanic(char const*)>
c00185c0:	83 c4 10             	add    esp,0x10
c00185c3:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c00185c8:	83 e0 40             	and    eax,0x40
c00185cb:	74 10                	je     c00185dd <HalReceivedNMI()+0x7b>
c00185cd:	83 ec 0c             	sub    esp,0xc
c00185d0:	68 83 3b 02 c0       	push   0xc0023b83
c00185d5:	e8 bc 67 ff ff       	call   c000ed96 <KePanic(char const*)>
c00185da:	83 c4 10             	add    esp,0x10
c00185dd:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c00185e1:	0f be c0             	movsx  eax,al
c00185e4:	85 c0                	test   eax,eax
c00185e6:	79 10                	jns    c00185f8 <HalReceivedNMI()+0x96>
c00185e8:	83 ec 0c             	sub    esp,0xc
c00185eb:	68 8d 3b 02 c0       	push   0xc0023b8d
c00185f0:	e8 a1 67 ff ff       	call   c000ed96 <KePanic(char const*)>
c00185f5:	83 c4 10             	add    esp,0x10
c00185f8:	90                   	nop
c00185f9:	83 c4 1c             	add    esp,0x1c
c00185fc:	c3                   	ret    

c00185fd <HalSystemIdle()>:
c00185fd:	56                   	push   esi
c00185fe:	53                   	push   ebx
c00185ff:	83 ec 14             	sub    esp,0x14
c0018602:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0018607:	83 e0 10             	and    eax,0x10
c001860a:	0f b6 c0             	movzx  eax,al
c001860d:	85 c0                	test   eax,eax
c001860f:	74 43                	je     c0018654 <HalSystemIdle()+0x57>
c0018611:	83 ec 0c             	sub    esp,0xc
c0018614:	68 e1 00 00 00       	push   0xe1
c0018619:	e8 99 f9 ff ff       	call   c0017fb7 <x86rdmsr(unsigned int)>
c001861e:	83 c4 10             	add    esp,0x10
c0018621:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018625:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001862d:	83 e0 02             	and    eax,0x2
c0018630:	89 c3                	mov    ebx,eax
c0018632:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018636:	83 e0 00             	and    eax,0x0
c0018639:	89 c6                	mov    esi,eax
c001863b:	83 ec 04             	sub    esp,0x4
c001863e:	56                   	push   esi
c001863f:	53                   	push   ebx
c0018640:	68 e1 00 00 00       	push   0xe1
c0018645:	e8 ab f9 ff ff       	call   c0017ff5 <x86wrmsr(unsigned int, unsigned long long)>
c001864a:	83 c4 10             	add    esp,0x10
c001864d:	e8 42 7b fe ff       	call   c0000194 <doTPAUSE>
c0018652:	eb 01                	jmp    c0018655 <HalSystemIdle()+0x58>
c0018654:	f4                   	hlt    
c0018655:	90                   	nop
c0018656:	83 c4 14             	add    esp,0x14
c0018659:	5b                   	pop    ebx
c001865a:	5e                   	pop    esi
c001865b:	c3                   	ret    

c001865c <i386SaveCoprocessor(void*)>:
c001865c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018660:	83 c0 3f             	add    eax,0x3f
c0018663:	83 e0 c0             	and    eax,0xffffffc0
c0018666:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001866a:	ff 25 50 d7 02 c0    	jmp    DWORD PTR ds:0xc002d750

c0018670 <i386LoadCoprocessor(void*)>:
c0018670:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018674:	83 c0 3f             	add    eax,0x3f
c0018677:	83 e0 c0             	and    eax,0xffffffc0
c001867a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001867e:	ff 25 4c d7 02 c0    	jmp    DWORD PTR ds:0xc002d74c

c0018684 <x87EmulHandler(regs*, void*)>:
c0018684:	53                   	push   ebx
c0018685:	83 ec 08             	sub    esp,0x8
c0018688:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001868d:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0018691:	74 10                	je     c00186a3 <x87EmulHandler(regs*, void*)+0x1f>
c0018693:	83 ec 0c             	sub    esp,0xc
c0018696:	68 9a 3b 02 c0       	push   0xc0023b9a
c001869b:	e8 f6 66 ff ff       	call   c000ed96 <KePanic(char const*)>
c00186a0:	83 c4 10             	add    esp,0x10
c00186a3:	0f 20 c0             	mov    eax,cr0
c00186a6:	a8 08                	test   al,0x8
c00186a8:	74 59                	je     c0018703 <x87EmulHandler(regs*, void*)+0x7f>
c00186aa:	0f 06                	clts   
c00186ac:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c00186b1:	85 c0                	test   eax,eax
c00186b3:	74 0e                	je     c00186c3 <x87EmulHandler(regs*, void*)+0x3f>
c00186b5:	83 ec 0c             	sub    esp,0xc
c00186b8:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00186bb:	e8 9c ff ff ff       	call   c001865c <i386SaveCoprocessor(void*)>
c00186c0:	83 c4 10             	add    esp,0x10
c00186c3:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00186c9:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00186cd:	75 12                	jne    c00186e1 <x87EmulHandler(regs*, void*)+0x5d>
c00186cf:	83 ec 0c             	sub    esp,0xc
c00186d2:	68 40 02 00 00       	push   0x240
c00186d7:	e8 73 63 ff ff       	call   c000ea4f <malloc>
c00186dc:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00186df:	eb 10                	jmp    c00186f1 <x87EmulHandler(regs*, void*)+0x6d>
c00186e1:	83 ec 0c             	sub    esp,0xc
c00186e4:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c00186e9:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00186ec:	e8 7f ff ff ff       	call   c0018670 <i386LoadCoprocessor(void*)>
c00186f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00186f6:	83 c4 10             	add    esp,0x10
c00186f9:	a3 48 d7 02 c0       	mov    ds:0xc002d748,eax
c00186fe:	83 c4 08             	add    esp,0x8
c0018701:	5b                   	pop    ebx
c0018702:	c3                   	ret    
c0018703:	83 ec 0c             	sub    esp,0xc
c0018706:	68 ae 3b 02 c0       	push   0xc0023bae
c001870b:	e8 54 e8 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018710:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0018718:	83 c4 18             	add    esp,0x18
c001871b:	5b                   	pop    ebx
c001871c:	e9 b7 d9 ff ff       	jmp    c00160d8 <Thr::terminateFromIRQ(int)>

c0018721 <HalInitialiseCoprocessor()>:
c0018721:	83 ec 10             	sub    esp,0x10
c0018724:	c7 05 48 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d748,0x0
c001872e:	6a 00                	push   0x0
c0018730:	68 84 86 01 c0       	push   0xc0018684
c0018735:	6a 07                	push   0x7
c0018737:	e8 9d 06 00 00       	call   c0018dd9 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001873c:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0018741:	83 c4 10             	add    esp,0x10
c0018744:	a8 80                	test   al,0x80
c0018746:	74 1c                	je     c0018764 <HalInitialiseCoprocessor()+0x43>
c0018748:	c7 05 50 d7 02 c0 d8 fd 01 c0 	mov    DWORD PTR ds:0xc002d750,0xc001fdd8
c0018752:	c7 05 4c d7 02 c0 e0 fd 01 c0 	mov    DWORD PTR ds:0xc002d74c,0xc001fde0
c001875c:	83 c4 0c             	add    esp,0xc
c001875f:	e9 84 76 00 00       	jmp    c001fde8 <sseInit>
c0018764:	a8 10                	test   al,0x10
c0018766:	74 1c                	je     c0018784 <HalInitialiseCoprocessor()+0x63>
c0018768:	c7 05 50 d7 02 c0 27 fe 01 c0 	mov    DWORD PTR ds:0xc002d750,0xc001fe27
c0018772:	c7 05 4c d7 02 c0 2e fe 01 c0 	mov    DWORD PTR ds:0xc002d74c,0xc001fe2e
c001877c:	83 c4 0c             	add    esp,0xc
c001877f:	e9 b1 76 00 00       	jmp    c001fe35 <x87Init>
c0018784:	c7 05 50 d7 02 c0 b6 6e 01 c0 	mov    DWORD PTR ds:0xc002d750,0xc0016eb6
c001878e:	c7 05 4c d7 02 c0 b6 6e 01 c0 	mov    DWORD PTR ds:0xc002d74c,0xc0016eb6
c0018798:	0f 20 c0             	mov    eax,cr0
c001879b:	83 c8 04             	or     eax,0x4
c001879e:	0f 22 c0             	mov    cr0,eax
c00187a1:	83 c4 0c             	add    esp,0xc
c00187a4:	c3                   	ret    

c00187a5 <HalPanic(char const*)>:
c00187a5:	53                   	push   ebx
c00187a6:	83 ec 10             	sub    esp,0x10
c00187a9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00187ad:	fa                   	cli    
c00187ae:	53                   	push   ebx
c00187af:	68 c4 3b 02 c0       	push   0xc0023bc4
c00187b4:	e8 ab e7 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00187b9:	a1 44 d7 02 c0       	mov    eax,ds:0xc002d744
c00187be:	83 c4 10             	add    esp,0x10
c00187c1:	85 c0                	test   eax,eax
c00187c3:	74 09                	je     c00187ce <HalPanic(char const*)+0x29>
c00187c5:	83 ec 0c             	sub    esp,0xc
c00187c8:	53                   	push   ebx
c00187c9:	ff d0                	call   eax
c00187cb:	83 c4 10             	add    esp,0x10
c00187ce:	a1 34 ce 02 c0       	mov    eax,ds:0xc002ce34
c00187d3:	85 c0                	test   eax,eax
c00187d5:	0f 84 dc 00 00 00    	je     c00188b7 <HalPanic(char const*)+0x112>
c00187db:	52                   	push   edx
c00187dc:	6a 01                	push   0x1
c00187de:	6a 0f                	push   0xf
c00187e0:	50                   	push   eax
c00187e1:	e8 b6 88 ff ff       	call   c001109c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00187e6:	59                   	pop    ecx
c00187e7:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c00187ed:	e8 9a 8a ff ff       	call   c001128c <VgaText::clearScreen()>
c00187f2:	58                   	pop    eax
c00187f3:	5a                   	pop    edx
c00187f4:	68 8b 2c 02 c0       	push   0xc0022c8b
c00187f9:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c00187ff:	e8 d0 88 ff ff       	call   c00110d4 <VgaText::setTitle(char*)>
c0018804:	83 c4 0c             	add    esp,0xc
c0018807:	6a 01                	push   0x1
c0018809:	6a 0f                	push   0xf
c001880b:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018811:	e8 86 88 ff ff       	call   c001109c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018816:	59                   	pop    ecx
c0018817:	58                   	pop    eax
c0018818:	68 dd 3b 02 c0       	push   0xc0023bdd
c001881d:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018823:	e8 66 8d ff ff       	call   c001158e <VgaText::puts(char const*)>
c0018828:	83 c4 0c             	add    esp,0xc
c001882b:	6a 0f                	push   0xf
c001882d:	6a 01                	push   0x1
c001882f:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018835:	e8 62 88 ff ff       	call   c001109c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001883a:	58                   	pop    eax
c001883b:	5a                   	pop    edx
c001883c:	68 e6 3b 02 c0       	push   0xc0023be6
c0018841:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018847:	e8 42 8d ff ff       	call   c001158e <VgaText::puts(char const*)>
c001884c:	83 c4 0c             	add    esp,0xc
c001884f:	6a 01                	push   0x1
c0018851:	6a 0f                	push   0xf
c0018853:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018859:	e8 3e 88 ff ff       	call   c001109c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001885e:	59                   	pop    ecx
c001885f:	58                   	pop    eax
c0018860:	68 2a 3c 02 c0       	push   0xc0023c2a
c0018865:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c001886b:	e8 1e 8d ff ff       	call   c001158e <VgaText::puts(char const*)>
c0018870:	58                   	pop    eax
c0018871:	5a                   	pop    edx
c0018872:	68 f3 3b 02 c0       	push   0xc0023bf3
c0018877:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c001887d:	e8 0c 8d ff ff       	call   c001158e <VgaText::puts(char const*)>
c0018882:	59                   	pop    ecx
c0018883:	58                   	pop    eax
c0018884:	68 2d 3c 02 c0       	push   0xc0023c2d
c0018889:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c001888f:	e8 fa 8c ff ff       	call   c001158e <VgaText::puts(char const*)>
c0018894:	58                   	pop    eax
c0018895:	5a                   	pop    edx
c0018896:	53                   	push   ebx
c0018897:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c001889d:	e8 ec 8c ff ff       	call   c001158e <VgaText::puts(char const*)>
c00188a2:	59                   	pop    ecx
c00188a3:	5b                   	pop    ebx
c00188a4:	68 2a 3c 02 c0       	push   0xc0023c2a
c00188a9:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c00188af:	e8 da 8c ff ff       	call   c001158e <VgaText::puts(char const*)>
c00188b4:	83 c4 10             	add    esp,0x10
c00188b7:	eb fe                	jmp    c00188b7 <HalPanic(char const*)+0x112>

c00188b9 <HalQueryPerformanceCounter()>:
c00188b9:	31 c0                	xor    eax,eax
c00188bb:	31 d2                	xor    edx,edx
c00188bd:	f6 05 8e d7 02 c0 08 	test   BYTE PTR ds:0xc002d78e,0x8
c00188c4:	75 02                	jne    c00188c8 <HalQueryPerformanceCounter()+0xf>
c00188c6:	0f 31                	rdtsc  
c00188c8:	c3                   	ret    

c00188c9 <HalInitialise()>:
c00188c9:	53                   	push   ebx
c00188ca:	83 ec 08             	sub    esp,0x8
c00188cd:	c6 05 40 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d740,0x0
c00188d4:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00188d9:	83 e0 fe             	and    eax,0xfffffffe
c00188dc:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c00188e1:	e8 d2 07 00 00       	call   c00190b8 <picOpen()>
c00188e6:	80 3d 40 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d740,0x0
c00188ed:	74 0a                	je     c00188f9 <HalInitialise()+0x30>
c00188ef:	e8 14 07 00 00       	call   c0019008 <picDisable()>
c00188f4:	e8 bf 6a 00 00       	call   c001f3b8 <apicOpen()>
c00188f9:	bb 0f 00 00 00       	mov    ebx,0xf
c00188fe:	50                   	push   eax
c00188ff:	6a 00                	push   0x0
c0018901:	68 fc e0 00 c0       	push   0xc000e0fc
c0018906:	6a 00                	push   0x0
c0018908:	e8 cc 04 00 00       	call   c0018dd9 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001890d:	83 c4 0c             	add    esp,0xc
c0018910:	6a 00                	push   0x0
c0018912:	68 fc e0 00 c0       	push   0xc000e0fc
c0018917:	6a 01                	push   0x1
c0018919:	e8 bb 04 00 00       	call   c0018dd9 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001891e:	83 c4 0c             	add    esp,0xc
c0018921:	6a 00                	push   0x0
c0018923:	68 ec e0 00 c0       	push   0xc000e0ec
c0018928:	6a 02                	push   0x2
c001892a:	e8 aa 04 00 00       	call   c0018dd9 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001892f:	83 c4 0c             	add    esp,0xc
c0018932:	6a 00                	push   0x0
c0018934:	68 fc e0 00 c0       	push   0xc000e0fc
c0018939:	6a 03                	push   0x3
c001893b:	e8 99 04 00 00       	call   c0018dd9 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018940:	83 c4 0c             	add    esp,0xc
c0018943:	6a 00                	push   0x0
c0018945:	68 fc e0 00 c0       	push   0xc000e0fc
c001894a:	6a 04                	push   0x4
c001894c:	e8 88 04 00 00       	call   c0018dd9 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018951:	83 c4 0c             	add    esp,0xc
c0018954:	6a 00                	push   0x0
c0018956:	68 fc e0 00 c0       	push   0xc000e0fc
c001895b:	6a 05                	push   0x5
c001895d:	e8 77 04 00 00       	call   c0018dd9 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018962:	83 c4 0c             	add    esp,0xc
c0018965:	6a 00                	push   0x0
c0018967:	68 30 e1 00 c0       	push   0xc000e130
c001896c:	6a 06                	push   0x6
c001896e:	e8 66 04 00 00       	call   c0018dd9 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018973:	83 c4 0c             	add    esp,0xc
c0018976:	6a 00                	push   0x0
c0018978:	68 84 e1 00 c0       	push   0xc000e184
c001897d:	6a 08                	push   0x8
c001897f:	e8 55 04 00 00       	call   c0018dd9 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018984:	83 c4 0c             	add    esp,0xc
c0018987:	6a 00                	push   0x0
c0018989:	68 fc e0 00 c0       	push   0xc000e0fc
c001898e:	6a 09                	push   0x9
c0018990:	e8 44 04 00 00       	call   c0018dd9 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018995:	83 c4 0c             	add    esp,0xc
c0018998:	6a 00                	push   0x0
c001899a:	68 fc e0 00 c0       	push   0xc000e0fc
c001899f:	6a 0a                	push   0xa
c00189a1:	e8 33 04 00 00       	call   c0018dd9 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00189a6:	83 c4 0c             	add    esp,0xc
c00189a9:	6a 00                	push   0x0
c00189ab:	68 fc e0 00 c0       	push   0xc000e0fc
c00189b0:	6a 0b                	push   0xb
c00189b2:	e8 22 04 00 00       	call   c0018dd9 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00189b7:	83 c4 0c             	add    esp,0xc
c00189ba:	6a 00                	push   0x0
c00189bc:	68 34 e0 00 c0       	push   0xc000e034
c00189c1:	6a 0d                	push   0xd
c00189c3:	e8 11 04 00 00       	call   c0018dd9 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00189c8:	83 c4 0c             	add    esp,0xc
c00189cb:	6a 00                	push   0x0
c00189cd:	68 88 e0 00 c0       	push   0xc000e088
c00189d2:	6a 0e                	push   0xe
c00189d4:	e8 00 04 00 00       	call   c0018dd9 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00189d9:	83 c4 10             	add    esp,0x10
c00189dc:	50                   	push   eax
c00189dd:	6a 00                	push   0x0
c00189df:	68 fc e0 00 c0       	push   0xc000e0fc
c00189e4:	53                   	push   ebx
c00189e5:	43                   	inc    ebx
c00189e6:	e8 ee 03 00 00       	call   c0018dd9 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00189eb:	83 c4 10             	add    esp,0x10
c00189ee:	83 fb 1e             	cmp    ebx,0x1e
c00189f1:	75 e9                	jne    c00189dc <HalInitialise()+0x113>
c00189f3:	50                   	push   eax
c00189f4:	6a 00                	push   0x0
c00189f6:	68 22 0f 01 c0       	push   0xc0010f22
c00189fb:	6a 60                	push   0x60
c00189fd:	e8 d7 03 00 00       	call   c0018dd9 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018a02:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0018a07:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0018a11:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0018a18:	e8 32 60 ff ff       	call   c000ea4f <malloc>
c0018a1d:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a20:	89 c3                	mov    ebx,eax
c0018a22:	e8 ff 0d 00 00       	call   c0019826 <RTC::RTC()>
c0018a27:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0018a31:	5a                   	pop    edx
c0018a32:	59                   	pop    ecx
c0018a33:	53                   	push   ebx
c0018a34:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c0018a3a:	e8 23 06 ff ff       	call   c0009062 <Device::addChild(Device*)>
c0018a3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018a41:	6a 00                	push   0x0
c0018a43:	6a 00                	push   0x0
c0018a45:	6a 00                	push   0x0
c0018a47:	53                   	push   ebx
c0018a48:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018a4b:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0018a50:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0018a56:	83 c4 28             	add    esp,0x28
c0018a59:	5b                   	pop    ebx
c0018a5a:	c3                   	ret    

c0018a5b <HalMakeBeep(int)>:
c0018a5b:	53                   	push   ebx
c0018a5c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018a60:	85 db                	test   ebx,ebx
c0018a62:	75 07                	jne    c0018a6b <HalMakeBeep(int)+0x10>
c0018a64:	e4 61                	in     al,0x61
c0018a66:	83 e0 fc             	and    eax,0xfffffffc
c0018a69:	eb 26                	jmp    c0018a91 <HalMakeBeep(int)+0x36>
c0018a6b:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0018a70:	99                   	cdq    
c0018a71:	f7 fb                	idiv   ebx
c0018a73:	89 c1                	mov    ecx,eax
c0018a75:	b0 b6                	mov    al,0xb6
c0018a77:	e6 43                	out    0x43,al
c0018a79:	88 c8                	mov    al,cl
c0018a7b:	e6 42                	out    0x42,al
c0018a7d:	89 c8                	mov    eax,ecx
c0018a7f:	c1 e8 08             	shr    eax,0x8
c0018a82:	e6 42                	out    0x42,al
c0018a84:	e4 61                	in     al,0x61
c0018a86:	89 c2                	mov    edx,eax
c0018a88:	83 ca 03             	or     edx,0x3
c0018a8b:	38 d0                	cmp    al,dl
c0018a8d:	74 04                	je     c0018a93 <HalMakeBeep(int)+0x38>
c0018a8f:	88 d0                	mov    al,dl
c0018a91:	e6 61                	out    0x61,al
c0018a93:	5b                   	pop    ebx
c0018a94:	c3                   	ret    

c0018a95 <HalGetRand()>:
c0018a95:	31 c0                	xor    eax,eax
c0018a97:	c3                   	ret    

c0018a98 <HalEndOfInterrupt(int)>:
c0018a98:	80 3d 40 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d740,0x0
c0018a9f:	74 1d                	je     c0018abe <HalEndOfInterrupt(int)+0x26>
c0018aa1:	83 ec 18             	sub    esp,0x18
c0018aa4:	6a 1b                	push   0x1b
c0018aa6:	e8 0c f5 ff ff       	call   c0017fb7 <x86rdmsr(unsigned int)>
c0018aab:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018ab0:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0018aba:	83 c4 1c             	add    esp,0x1c
c0018abd:	c3                   	ret    
c0018abe:	e9 79 07 00 00       	jmp    c001923c <picEOI(int)>

c0018ac3 <HalRestart()>:
c0018ac3:	c3                   	ret    

c0018ac4 <HalShutdown()>:
c0018ac4:	c3                   	ret    

c0018ac5 <HalSleep()>:
c0018ac5:	c3                   	ret    

c0018ac6 <CPU::CPU()>:
c0018ac6:	83 ec 0c             	sub    esp,0xc
c0018ac9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018acd:	83 ec 08             	sub    esp,0x8
c0018ad0:	68 9f 39 02 c0       	push   0xc002399f
c0018ad5:	50                   	push   eax
c0018ad6:	e8 e9 06 ff ff       	call   c00091c4 <Device::Device(char const*)>
c0018adb:	83 c4 10             	add    esp,0x10
c0018ade:	ba fc 3c 02 c0       	mov    edx,0xc0023cfc
c0018ae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ae7:	89 10                	mov    DWORD PTR [eax],edx
c0018ae9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018aed:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0018af7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018afb:	05 64 01 00 00       	add    eax,0x164
c0018b00:	83 ec 0c             	sub    esp,0xc
c0018b03:	50                   	push   eax
c0018b04:	e8 cf 56 ff ff       	call   c000e1d8 <GDT::GDT()>
c0018b09:	83 c4 10             	add    esp,0x10
c0018b0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b10:	05 68 09 00 00       	add    eax,0x968
c0018b15:	83 ec 0c             	sub    esp,0xc
c0018b18:	50                   	push   eax
c0018b19:	e8 0e 59 ff ff       	call   c000e42c <IDT::IDT()>
c0018b1e:	83 c4 10             	add    esp,0x10
c0018b21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b25:	05 68 11 00 00       	add    eax,0x1168
c0018b2a:	83 ec 0c             	sub    esp,0xc
c0018b2d:	50                   	push   eax
c0018b2e:	e8 f9 8e ff ff       	call   c0011a2c <TSS::TSS()>
c0018b33:	83 c4 10             	add    esp,0x10
c0018b36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b3a:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0018b44:	90                   	nop
c0018b45:	83 c4 0c             	add    esp,0xc
c0018b48:	c3                   	ret    
c0018b49:	90                   	nop

c0018b4a <CPU::setupSMEP()>:
c0018b4a:	0f 20 e0             	mov    eax,cr4
c0018b4d:	0d 00 00 10 00       	or     eax,0x100000
c0018b52:	0f 22 e0             	mov    cr4,eax
c0018b55:	c3                   	ret    

c0018b56 <CPU::setupUMIP()>:
c0018b56:	0f 20 e0             	mov    eax,cr4
c0018b59:	80 cc 08             	or     ah,0x8
c0018b5c:	0f 22 e0             	mov    cr4,eax
c0018b5f:	c3                   	ret    

c0018b60 <CPU::setupTSC()>:
c0018b60:	0f 20 e0             	mov    eax,cr4
c0018b63:	83 c8 04             	or     eax,0x4
c0018b66:	0f 22 e0             	mov    cr4,eax
c0018b69:	c3                   	ret    

c0018b6a <CPU::setupLargePages()>:
c0018b6a:	0f 20 e0             	mov    eax,cr4
c0018b6d:	83 c8 10             	or     eax,0x10
c0018b70:	0f 22 e0             	mov    cr4,eax
c0018b73:	c3                   	ret    

c0018b74 <CPU::setupPAT()>:
c0018b74:	f6 05 8c d7 02 c0 08 	test   BYTE PTR ds:0xc002d78c,0x8
c0018b7b:	74 28                	je     c0018ba5 <CPU::setupPAT()+0x31>
c0018b7d:	53                   	push   ebx
c0018b7e:	83 ec 14             	sub    esp,0x14
c0018b81:	68 77 02 00 00       	push   0x277
c0018b86:	e8 2c f4 ff ff       	call   c0017fb7 <x86rdmsr(unsigned int)>
c0018b8b:	83 c4 0c             	add    esp,0xc
c0018b8e:	83 e2 f8             	and    edx,0xfffffff8
c0018b91:	83 ca 01             	or     edx,0x1
c0018b94:	52                   	push   edx
c0018b95:	50                   	push   eax
c0018b96:	68 77 02 00 00       	push   0x277
c0018b9b:	e8 55 f4 ff ff       	call   c0017ff5 <x86wrmsr(unsigned int, unsigned long long)>
c0018ba0:	83 c4 18             	add    esp,0x18
c0018ba3:	5b                   	pop    ebx
c0018ba4:	c3                   	ret    
c0018ba5:	c3                   	ret    

c0018ba6 <CPU::setupMTRR()>:
c0018ba6:	c3                   	ret    
c0018ba7:	90                   	nop

c0018ba8 <CPU::setupGlobalPages()>:
c0018ba8:	0f 20 e0             	mov    eax,cr4
c0018bab:	0c 80                	or     al,0x80
c0018bad:	0f 22 e0             	mov    cr4,eax
c0018bb0:	c3                   	ret    
c0018bb1:	90                   	nop

c0018bb2 <CPU::allowUsermodeDataAccess()>:
c0018bb2:	f6 05 8f d7 02 c0 40 	test   BYTE PTR ds:0xc002d78f,0x40
c0018bb9:	74 03                	je     c0018bbe <CPU::allowUsermodeDataAccess()+0xc>
c0018bbb:	0f 01 cb             	stac   
c0018bbe:	c3                   	ret    
c0018bbf:	90                   	nop

c0018bc0 <CPU::prohibitUsermodeDataAccess()>:
c0018bc0:	f6 05 8f d7 02 c0 40 	test   BYTE PTR ds:0xc002d78f,0x40
c0018bc7:	74 03                	je     c0018bcc <CPU::prohibitUsermodeDataAccess()+0xc>
c0018bc9:	0f 01 ca             	clac   
c0018bcc:	c3                   	ret    
c0018bcd:	90                   	nop

c0018bce <CPU::setupSMAP()>:
c0018bce:	0f 20 e0             	mov    eax,cr4
c0018bd1:	0d 00 00 20 00       	or     eax,0x200000
c0018bd6:	0f 22 e0             	mov    cr4,eax
c0018bd9:	eb e5                	jmp    c0018bc0 <CPU::prohibitUsermodeDataAccess()>
c0018bdb:	90                   	nop

c0018bdc <CPU::setupFeatures()>:
c0018bdc:	53                   	push   ebx
c0018bdd:	83 ec 08             	sub    esp,0x8
c0018be0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018be4:	f6 05 8f d7 02 c0 20 	test   BYTE PTR ds:0xc002d78f,0x20
c0018beb:	74 18                	je     c0018c05 <CPU::setupFeatures()+0x29>
c0018bed:	83 ec 0c             	sub    esp,0xc
c0018bf0:	68 38 3c 02 c0       	push   0xc0023c38
c0018bf5:	e8 6a e3 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018bfa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018bfd:	e8 54 ff ff ff       	call   c0018b56 <CPU::setupUMIP()>
c0018c02:	83 c4 10             	add    esp,0x10
c0018c05:	f6 05 8e d7 02 c0 08 	test   BYTE PTR ds:0xc002d78e,0x8
c0018c0c:	74 18                	je     c0018c26 <CPU::setupFeatures()+0x4a>
c0018c0e:	83 ec 0c             	sub    esp,0xc
c0018c11:	68 42 3c 02 c0       	push   0xc0023c42
c0018c16:	e8 49 e3 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018c1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018c1e:	e8 3d ff ff ff       	call   c0018b60 <CPU::setupTSC()>
c0018c23:	83 c4 10             	add    esp,0x10
c0018c26:	f6 05 8e d7 02 c0 20 	test   BYTE PTR ds:0xc002d78e,0x20
c0018c2d:	74 18                	je     c0018c47 <CPU::setupFeatures()+0x6b>
c0018c2f:	83 ec 0c             	sub    esp,0xc
c0018c32:	68 4b 3c 02 c0       	push   0xc0023c4b
c0018c37:	e8 28 e3 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018c3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018c3f:	e8 26 ff ff ff       	call   c0018b6a <CPU::setupLargePages()>
c0018c44:	83 c4 10             	add    esp,0x10
c0018c47:	f6 05 8e d7 02 c0 40 	test   BYTE PTR ds:0xc002d78e,0x40
c0018c4e:	74 18                	je     c0018c68 <CPU::setupFeatures()+0x8c>
c0018c50:	83 ec 0c             	sub    esp,0xc
c0018c53:	68 54 3c 02 c0       	push   0xc0023c54
c0018c58:	e8 07 e3 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018c5d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018c60:	e8 43 ff ff ff       	call   c0018ba8 <CPU::setupGlobalPages()>
c0018c65:	83 c4 10             	add    esp,0x10
c0018c68:	f6 05 8e d7 02 c0 80 	test   BYTE PTR ds:0xc002d78e,0x80
c0018c6f:	74 18                	je     c0018c89 <CPU::setupFeatures()+0xad>
c0018c71:	83 ec 0c             	sub    esp,0xc
c0018c74:	68 66 3c 02 c0       	push   0xc0023c66
c0018c79:	e8 e6 e2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018c7e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018c81:	e8 ee fe ff ff       	call   c0018b74 <CPU::setupPAT()>
c0018c86:	83 c4 10             	add    esp,0x10
c0018c89:	f6 05 90 d7 02 c0 04 	test   BYTE PTR ds:0xc002d790,0x4
c0018c90:	74 11                	je     c0018ca3 <CPU::setupFeatures()+0xc7>
c0018c92:	c7 44 24 10 6f 3c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023c6f
c0018c9a:	83 c4 08             	add    esp,0x8
c0018c9d:	5b                   	pop    ebx
c0018c9e:	e9 c1 e2 fe ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c0018ca3:	83 c4 08             	add    esp,0x8
c0018ca6:	5b                   	pop    ebx
c0018ca7:	c3                   	ret    

c0018ca8 <CPU::open(int, int, void*)>:
c0018ca8:	55                   	push   ebp
c0018ca9:	57                   	push   edi
c0018caa:	56                   	push   esi
c0018cab:	53                   	push   ebx
c0018cac:	83 ec 18             	sub    esp,0x18
c0018caf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018cb3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018cb7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0018cbb:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c0018cc1:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c0018cc7:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c0018ccd:	50                   	push   eax
c0018cce:	e8 67 55 ff ff       	call   c000e23a <GDT::setup()>
c0018cd3:	83 c4 0c             	add    esp,0xc
c0018cd6:	6a 00                	push   0x0
c0018cd8:	68 ef be ad de       	push   0xdeadbeef
c0018cdd:	55                   	push   ebp
c0018cde:	e8 8d 8d ff ff       	call   c0011a70 <TSS::setup(unsigned long, unsigned long)>
c0018ce3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018ce6:	e8 65 8d ff ff       	call   c0011a50 <TSS::flush()>
c0018ceb:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c0018cf1:	89 04 24             	mov    DWORD PTR [esp],eax
c0018cf4:	e8 a9 57 ff ff       	call   c000e4a2 <IDT::setup()>
c0018cf9:	b8 00 04 00 00       	mov    eax,0x400
c0018cfe:	0f 23 f8             	mov    dr7,eax
c0018d01:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c0018d0b:	e8 7a 62 ff ff       	call   c000ef8a <Phys::allocatePage()>
c0018d10:	83 c4 10             	add    esp,0x10
c0018d13:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c0018d19:	85 f6                	test   esi,esi
c0018d1b:	89 38                	mov    DWORD PTR [eax],edi
c0018d1d:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018d23:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0018d26:	74 10                	je     c0018d38 <CPU::open(int, int, void*)+0x90>
c0018d28:	50                   	push   eax
c0018d29:	50                   	push   eax
c0018d2a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0018d30:	56                   	push   esi
c0018d31:	e8 2c 97 ff ff       	call   c0012462 <VAS::setCPUSpecific(unsigned long)>
c0018d36:	eb 0d                	jmp    c0018d45 <CPU::open(int, int, void*)+0x9d>
c0018d38:	83 ec 0c             	sub    esp,0xc
c0018d3b:	68 79 3c 02 c0       	push   0xc0023c79
c0018d40:	e8 51 60 ff ff       	call   c000ed96 <KePanic(char const*)>
c0018d45:	83 c4 10             	add    esp,0x10
c0018d48:	83 ec 0c             	sub    esp,0xc
c0018d4b:	68 87 3c 02 c0       	push   0xc0023c87
c0018d50:	e8 3f 39 ff ff       	call   c000c694 <KeSetBootMessage(char const*)>
c0018d55:	e8 6f fb ff ff       	call   c00188c9 <HalInitialise()>
c0018d5a:	a1 90 cd 02 c0       	mov    eax,ds:0xc002cd90
c0018d5f:	83 e0 10             	and    eax,0x10
c0018d62:	83 f8 01             	cmp    eax,0x1
c0018d65:	19 c0                	sbb    eax,eax
c0018d67:	83 e0 46             	and    eax,0x46
c0018d6a:	83 c0 1e             	add    eax,0x1e
c0018d6d:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d70:	e8 88 19 ff ff       	call   c000a6fd <setupTimer(int)>
c0018d75:	83 c4 10             	add    esp,0x10
c0018d78:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c0018d7e:	f6 05 90 cd 02 c0 20 	test   BYTE PTR ds:0xc002cd90,0x20
c0018d85:	74 0c                	je     c0018d93 <CPU::open(int, int, void*)+0xeb>
c0018d87:	83 ec 0c             	sub    esp,0xc
c0018d8a:	53                   	push   ebx
c0018d8b:	e8 4c fe ff ff       	call   c0018bdc <CPU::setupFeatures()>
c0018d90:	83 c4 10             	add    esp,0x10
c0018d93:	83 c4 0c             	add    esp,0xc
c0018d96:	31 c0                	xor    eax,eax
c0018d98:	5b                   	pop    ebx
c0018d99:	5e                   	pop    esi
c0018d9a:	5f                   	pop    edi
c0018d9b:	5d                   	pop    ebp
c0018d9c:	c3                   	ret    

c0018d9d <convertLegacyIRQNumber(int)>:
c0018d9d:	83 ec 0c             	sub    esp,0xc
c0018da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018da4:	f6 05 8c d7 02 c0 01 	test   BYTE PTR ds:0xc002d78c,0x1
c0018dab:	74 0c                	je     c0018db9 <convertLegacyIRQNumber(int)+0x1c>
c0018dad:	83 f8 0f             	cmp    eax,0xf
c0018db0:	7f 0b                	jg     c0018dbd <convertLegacyIRQNumber(int)+0x20>
c0018db2:	0f b6 80 68 48 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdb798]
c0018db9:	83 c4 0c             	add    esp,0xc
c0018dbc:	c3                   	ret    
c0018dbd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018dc1:	83 ec 0c             	sub    esp,0xc
c0018dc4:	68 20 3d 02 c0       	push   0xc0023d20
c0018dc9:	e8 c8 5f ff ff       	call   c000ed96 <KePanic(char const*)>
c0018dce:	83 c4 10             	add    esp,0x10
c0018dd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dd5:	83 c4 0c             	add    esp,0xc
c0018dd8:	c3                   	ret    

c0018dd9 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c0018dd9:	56                   	push   esi
c0018dda:	31 c0                	xor    eax,eax
c0018ddc:	53                   	push   ebx
c0018ddd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018de1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018de5:	89 ca                	mov    edx,ecx
c0018de7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018deb:	c1 e2 04             	shl    edx,0x4
c0018dee:	83 bc 82 80 bd 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd4280],0x0
c0018df6:	74 17                	je     c0018e0f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c0018df8:	83 c0 01             	add    eax,0x1
c0018dfb:	83 f8 04             	cmp    eax,0x4
c0018dfe:	75 ee                	jne    c0018dee <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c0018e00:	c7 44 24 0c 81 3d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023d81
c0018e08:	5b                   	pop    ebx
c0018e09:	5e                   	pop    esi
c0018e0a:	e9 87 5f ff ff       	jmp    c000ed96 <KePanic(char const*)>
c0018e0f:	8d 04 88             	lea    eax,[eax+ecx*4]
c0018e12:	89 1c 85 80 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4280],ebx
c0018e19:	89 34 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],esi
c0018e20:	5b                   	pop    ebx
c0018e21:	5e                   	pop    esi
c0018e22:	c3                   	ret    

c0018e23 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0018e23:	57                   	push   edi
c0018e24:	f6 05 8c d7 02 c0 01 	test   BYTE PTR ds:0xc002d78c,0x1
c0018e2b:	56                   	push   esi
c0018e2c:	53                   	push   ebx
c0018e2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018e31:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018e35:	74 54                	je     c0018e8b <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x68>
c0018e37:	89 c7                	mov    edi,eax
c0018e39:	84 c0                	test   al,al
c0018e3b:	74 1d                	je     c0018e5a <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c0018e3d:	83 fe 0f             	cmp    esi,0xf
c0018e40:	0f 8f d5 00 00 00    	jg     c0018f1b <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf8>
c0018e46:	0f b6 b6 68 48 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdb798]
c0018e4d:	0f b7 bc 36 c0 aa 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd5540]
c0018e55:	d1 ef                	shr    edi,1
c0018e57:	83 e7 01             	and    edi,0x1
c0018e5a:	83 ec 08             	sub    esp,0x8
c0018e5d:	a1 e0 e0 02 c0       	mov    eax,ds:0xc002e0e0
c0018e62:	31 db                	xor    ebx,ebx
c0018e64:	50                   	push   eax
c0018e65:	68 8e 3d 02 c0       	push   0xc0023d8e
c0018e6a:	e8 f5 e0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018e6f:	83 c4 10             	add    esp,0x10
c0018e72:	a1 e0 e0 02 c0       	mov    eax,ds:0xc002e0e0
c0018e77:	85 c0                	test   eax,eax
c0018e79:	7f 55                	jg     c0018ed0 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c0018e7b:	83 ec 0c             	sub    esp,0xc
c0018e7e:	68 a5 3d 02 c0       	push   0xc0023da5
c0018e83:	e8 0e 5f ff ff       	call   c000ed96 <KePanic(char const*)>
c0018e88:	83 c4 10             	add    esp,0x10
c0018e8b:	8d 7e 20             	lea    edi,[esi+0x20]
c0018e8e:	89 f8                	mov    eax,edi
c0018e90:	31 d2                	xor    edx,edx
c0018e92:	c1 e0 04             	shl    eax,0x4
c0018e95:	8b 8c 90 80 bd 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd4280]
c0018e9c:	85 c9                	test   ecx,ecx
c0018e9e:	0f 84 8e 00 00 00    	je     c0018f32 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10f>
c0018ea4:	83 c2 01             	add    edx,0x1
c0018ea7:	83 fa 04             	cmp    edx,0x4
c0018eaa:	75 e9                	jne    c0018e95 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c0018eac:	83 ec 0c             	sub    esp,0xc
c0018eaf:	68 5c 3d 02 c0       	push   0xc0023d5c
c0018eb4:	e8 dd 5e ff ff       	call   c000ed96 <KePanic(char const*)>
c0018eb9:	83 c4 10             	add    esp,0x10
c0018ebc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0018ec1:	5b                   	pop    ebx
c0018ec2:	5e                   	pop    esi
c0018ec3:	5f                   	pop    edi
c0018ec4:	c3                   	ret    
c0018ec5:	83 c3 01             	add    ebx,0x1
c0018ec8:	39 1d e0 e0 02 c0    	cmp    DWORD PTR ds:0xc002e0e0,ebx
c0018ece:	7e ab                	jle    c0018e7b <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x58>
c0018ed0:	83 ec 08             	sub    esp,0x8
c0018ed3:	8b 04 9d 00 e1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1f00]
c0018eda:	56                   	push   esi
c0018edb:	50                   	push   eax
c0018edc:	e8 63 66 00 00       	call   c001f544 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0018ee1:	83 c4 10             	add    esp,0x10
c0018ee4:	84 c0                	test   al,al
c0018ee6:	74 dd                	je     c0018ec5 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa2>
c0018ee8:	83 ec 04             	sub    esp,0x4
c0018eeb:	89 f8                	mov    eax,edi
c0018eed:	8b 1c 9d 00 e1 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1f00]
c0018ef4:	0f b6 f8             	movzx  edi,al
c0018ef7:	57                   	push   edi
c0018ef8:	8d 7e 20             	lea    edi,[esi+0x20]
c0018efb:	6a 00                	push   0x0
c0018efd:	89 f8                	mov    eax,edi
c0018eff:	0f b6 c0             	movzx  eax,al
c0018f02:	50                   	push   eax
c0018f03:	89 f0                	mov    eax,esi
c0018f05:	6a 00                	push   0x0
c0018f07:	0f b6 c0             	movzx  eax,al
c0018f0a:	6a 00                	push   0x0
c0018f0c:	50                   	push   eax
c0018f0d:	53                   	push   ebx
c0018f0e:	e8 9d 67 00 00       	call   c001f6b0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0018f13:	83 c4 20             	add    esp,0x20
c0018f16:	e9 73 ff ff ff       	jmp    c0018e8e <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6b>
c0018f1b:	83 ec 0c             	sub    esp,0xc
c0018f1e:	31 ff                	xor    edi,edi
c0018f20:	68 20 3d 02 c0       	push   0xc0023d20
c0018f25:	e8 6c 5e ff ff       	call   c000ed96 <KePanic(char const*)>
c0018f2a:	83 c4 10             	add    esp,0x10
c0018f2d:	e9 28 ff ff ff       	jmp    c0018e5a <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c0018f32:	8d 04 ba             	lea    eax,[edx+edi*4]
c0018f35:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018f39:	89 14 85 80 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4280],edx
c0018f40:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f44:	5b                   	pop    ebx
c0018f45:	89 14 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],edx
c0018f4c:	89 f0                	mov    eax,esi
c0018f4e:	5e                   	pop    esi
c0018f4f:	5f                   	pop    edi
c0018f50:	c3                   	ret    

c0018f51 <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c0018f51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f55:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018f59:	c1 e0 04             	shl    eax,0x4
c0018f5c:	8d 50 10             	lea    edx,[eax+0x10]
c0018f5f:	39 88 80 bd 02 c0    	cmp    DWORD PTR [eax-0x3ffd4280],ecx
c0018f65:	74 08                	je     c0018f6f <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c0018f67:	83 c0 04             	add    eax,0x4
c0018f6a:	39 d0                	cmp    eax,edx
c0018f6c:	75 f1                	jne    c0018f5f <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c0018f6e:	c3                   	ret    
c0018f6f:	c7 80 80 bd 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd4280],0x0
c0018f79:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c0018f83:	eb e2                	jmp    c0018f67 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c0018f85 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0018f85:	53                   	push   ebx
c0018f86:	83 ec 08             	sub    esp,0x8
c0018f89:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018f8d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0018f92:	74 09                	je     c0018f9d <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c0018f94:	f6 05 8c d7 02 c0 01 	test   BYTE PTR ds:0xc002d78c,0x1
c0018f9b:	75 37                	jne    c0018fd4 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4f>
c0018f9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fa1:	83 c0 20             	add    eax,0x20
c0018fa4:	c1 e0 04             	shl    eax,0x4
c0018fa7:	8d 50 10             	lea    edx,[eax+0x10]
c0018faa:	39 98 80 bd 02 c0    	cmp    DWORD PTR [eax-0x3ffd4280],ebx
c0018fb0:	74 0c                	je     c0018fbe <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x39>
c0018fb2:	83 c0 04             	add    eax,0x4
c0018fb5:	39 d0                	cmp    eax,edx
c0018fb7:	75 f1                	jne    c0018faa <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x25>
c0018fb9:	83 c4 08             	add    esp,0x8
c0018fbc:	5b                   	pop    ebx
c0018fbd:	c3                   	ret    
c0018fbe:	c7 80 80 bd 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd4280],0x0
c0018fc8:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c0018fd2:	eb de                	jmp    c0018fb2 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2d>
c0018fd4:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c0018fd9:	7f 11                	jg     c0018fec <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x67>
c0018fdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fdf:	0f b6 80 68 48 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdb798]
c0018fe6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018fea:	eb b1                	jmp    c0018f9d <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c0018fec:	83 ec 0c             	sub    esp,0xc
c0018fef:	68 b2 3d 02 c0       	push   0xc0023db2
c0018ff4:	e8 9d 5d ff ff       	call   c000ed96 <KePanic(char const*)>
c0018ff9:	83 c4 10             	add    esp,0x10
c0018ffc:	eb 9f                	jmp    c0018f9d <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c0018ffe:	66 90                	xchg   ax,ax

c0019000 <picIoWait()>:
c0019000:	eb 00                	jmp    c0019002 <picIoWait()+0x2>
c0019002:	eb 00                	jmp    c0019004 <picIoWait()+0x4>
c0019004:	90                   	nop
c0019005:	c3                   	ret    
c0019006:	66 90                	xchg   ax,ax

c0019008 <picDisable()>:
c0019008:	83 ec 10             	sub    esp,0x10
c001900b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0019012:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0019017:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001901b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0019020:	ee                   	out    dx,al
c0019021:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0019028:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001902d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0019031:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0019036:	ee                   	out    dx,al
c0019037:	90                   	nop
c0019038:	83 c4 10             	add    esp,0x10
c001903b:	c3                   	ret    

c001903c <picGetIRQReg(int)>:
c001903c:	83 ec 10             	sub    esp,0x10
c001903f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019043:	0f b6 c0             	movzx  eax,al
c0019046:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001904d:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0019051:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0019055:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001905a:	ee                   	out    dx,al
c001905b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001905f:	0f b6 c0             	movzx  eax,al
c0019062:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0019069:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001906d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0019071:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0019076:	ee                   	out    dx,al
c0019077:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001907e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0019083:	89 c2                	mov    edx,eax
c0019085:	ec                   	in     al,dx
c0019086:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001908a:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001908e:	0f b6 c0             	movzx  eax,al
c0019091:	c1 e0 08             	shl    eax,0x8
c0019094:	89 c1                	mov    ecx,eax
c0019096:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001909d:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00190a2:	89 c2                	mov    edx,eax
c00190a4:	ec                   	in     al,dx
c00190a5:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00190a9:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00190ad:	0f b6 c0             	movzx  eax,al
c00190b0:	09 c8                	or     eax,ecx
c00190b2:	83 c4 10             	add    esp,0x10
c00190b5:	c3                   	ret    
c00190b6:	66 90                	xchg   ax,ax

c00190b8 <picOpen()>:
c00190b8:	83 ec 50             	sub    esp,0x50
c00190bb:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00190c2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00190c7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00190cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00190cf:	ee                   	out    dx,al
c00190d0:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00190d7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00190dc:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00190e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00190e4:	ee                   	out    dx,al
c00190e5:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00190ed:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00190f5:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00190fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019100:	89 c2                	mov    edx,eax
c0019102:	ec                   	in     al,dx
c0019103:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0019107:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001910b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001910f:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0019116:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001911a:	89 c2                	mov    edx,eax
c001911c:	ec                   	in     al,dx
c001911d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0019121:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0019125:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0019129:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0019130:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0019135:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0019139:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001913d:	ee                   	out    dx,al
c001913e:	e8 bd fe ff ff       	call   c0019000 <picIoWait()>
c0019143:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001914a:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001914f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0019153:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0019157:	ee                   	out    dx,al
c0019158:	e8 a3 fe ff ff       	call   c0019000 <picIoWait()>
c001915d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0019161:	0f b6 c0             	movzx  eax,al
c0019164:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001916b:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001916f:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0019173:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019177:	ee                   	out    dx,al
c0019178:	e8 83 fe ff ff       	call   c0019000 <picIoWait()>
c001917d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0019181:	0f b6 c0             	movzx  eax,al
c0019184:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001918b:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001918f:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0019193:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0019197:	ee                   	out    dx,al
c0019198:	e8 63 fe ff ff       	call   c0019000 <picIoWait()>
c001919d:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00191a4:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00191a9:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00191ad:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00191b1:	ee                   	out    dx,al
c00191b2:	e8 49 fe ff ff       	call   c0019000 <picIoWait()>
c00191b7:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00191be:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00191c3:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00191c7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00191cb:	ee                   	out    dx,al
c00191cc:	e8 2f fe ff ff       	call   c0019000 <picIoWait()>
c00191d1:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00191d8:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00191dd:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00191e1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00191e5:	ee                   	out    dx,al
c00191e6:	e8 15 fe ff ff       	call   c0019000 <picIoWait()>
c00191eb:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00191f2:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00191f7:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00191fb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00191ff:	ee                   	out    dx,al
c0019200:	e8 fb fd ff ff       	call   c0019000 <picIoWait()>
c0019205:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001920a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0019211:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0019215:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0019219:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001921d:	ee                   	out    dx,al
c001921e:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0019223:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001922a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001922e:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0019232:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0019236:	ee                   	out    dx,al
c0019237:	90                   	nop
c0019238:	83 c4 50             	add    esp,0x50
c001923b:	c3                   	ret    

c001923c <picEOI(int)>:
c001923c:	83 ec 10             	sub    esp,0x10
c001923f:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0019244:	75 1e                	jne    c0019264 <picEOI(int)+0x28>
c0019246:	6a 0b                	push   0xb
c0019248:	e8 ef fd ff ff       	call   c001903c <picGetIRQReg(int)>
c001924d:	83 c4 04             	add    esp,0x4
c0019250:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0019255:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001925a:	25 80 00 00 00       	and    eax,0x80
c001925f:	74 73                	je     c00192d4 <picEOI(int)+0x98>
c0019261:	8d 76 00             	lea    esi,[esi+0x0]
c0019264:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0019269:	75 31                	jne    c001929c <picEOI(int)+0x60>
c001926b:	6a 0b                	push   0xb
c001926d:	e8 ca fd ff ff       	call   c001903c <picGetIRQReg(int)>
c0019272:	83 c4 04             	add    esp,0x4
c0019275:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001927a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001927e:	98                   	cwde   
c001927f:	85 c0                	test   eax,eax
c0019281:	78 19                	js     c001929c <picEOI(int)+0x60>
c0019283:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001928a:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001928f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019293:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0019298:	ee                   	out    dx,al
c0019299:	eb 3d                	jmp    c00192d8 <picEOI(int)+0x9c>
c001929b:	90                   	nop
c001929c:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00192a1:	7e 19                	jle    c00192bc <picEOI(int)+0x80>
c00192a3:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00192aa:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00192af:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00192b3:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00192b8:	ee                   	out    dx,al
c00192b9:	8d 76 00             	lea    esi,[esi+0x0]
c00192bc:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00192c3:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00192c8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00192cc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00192d1:	ee                   	out    dx,al
c00192d2:	eb 04                	jmp    c00192d8 <picEOI(int)+0x9c>
c00192d4:	90                   	nop
c00192d5:	8d 76 00             	lea    esi,[esi+0x0]
c00192d8:	83 c4 10             	add    esp,0x10
c00192db:	c3                   	ret    

c00192dc <RTC::open(int, int, void*)>:
c00192dc:	31 c0                	xor    eax,eax
c00192de:	c3                   	ret    
c00192df:	90                   	nop

c00192e0 <RTC::close(int, int, void*)>:
c00192e0:	31 c0                	xor    eax,eax
c00192e2:	c3                   	ret    
c00192e3:	90                   	nop

c00192e4 <RTC::timeInSecondsUTC()>:
c00192e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00192e8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00192ee:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00192f4:	c3                   	ret    
c00192f5:	90                   	nop

c00192f6 <RTC::timeInDatetimeUTC()>:
c00192f6:	53                   	push   ebx
c00192f7:	83 ec 14             	sub    esp,0x14
c00192fa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00192fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019302:	8b 10                	mov    edx,DWORD PTR [eax]
c0019304:	50                   	push   eax
c0019305:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0019308:	83 c4 0c             	add    esp,0xc
c001930b:	52                   	push   edx
c001930c:	50                   	push   eax
c001930d:	53                   	push   ebx
c001930e:	e8 c3 fa fe ff       	call   c0008dd6 <KeSecondsToDatetime(unsigned long long)>
c0019313:	89 d8                	mov    eax,ebx
c0019315:	83 c4 14             	add    esp,0x14
c0019318:	5b                   	pop    ebx
c0019319:	c2 04 00             	ret    0x4

c001931c <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001931c:	56                   	push   esi
c001931d:	53                   	push   ebx
c001931e:	83 ec 14             	sub    esp,0x14
c0019321:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019325:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019327:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001932a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001932e:	52                   	push   edx
c001932f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019333:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019337:	50                   	push   eax
c0019338:	e8 99 fa fe ff       	call   c0008dd6 <KeSecondsToDatetime(unsigned long long)>
c001933d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019341:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019345:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0019349:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001934d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019351:	89 f0                	mov    eax,esi
c0019353:	83 c4 20             	add    esp,0x20
c0019356:	5b                   	pop    ebx
c0019357:	5e                   	pop    esi
c0019358:	ff e0                	jmp    eax

c001935a <RTC::~RTC()>:
c001935a:	83 ec 0c             	sub    esp,0xc
c001935d:	ba dc 3d 02 c0       	mov    edx,0xc0023ddc
c0019362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019366:	89 10                	mov    DWORD PTR [eax],edx
c0019368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001936c:	83 ec 0c             	sub    esp,0xc
c001936f:	50                   	push   eax
c0019370:	e8 f3 f7 fe ff       	call   c0008b68 <Clock::~Clock()>
c0019375:	83 c4 10             	add    esp,0x10
c0019378:	90                   	nop
c0019379:	83 c4 0c             	add    esp,0xc
c001937c:	c3                   	ret    
c001937d:	90                   	nop

c001937e <RTC::~RTC()>:
c001937e:	83 ec 0c             	sub    esp,0xc
c0019381:	83 ec 0c             	sub    esp,0xc
c0019384:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019388:	e8 cd ff ff ff       	call   c001935a <RTC::~RTC()>
c001938d:	83 c4 10             	add    esp,0x10
c0019390:	83 ec 08             	sub    esp,0x8
c0019393:	68 60 01 00 00       	push   0x160
c0019398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001939c:	e8 b3 33 ff ff       	call   c000c754 <operator delete(void*, unsigned long)>
c00193a1:	83 c4 10             	add    esp,0x10
c00193a4:	83 c4 0c             	add    esp,0xc
c00193a7:	c3                   	ret    

c00193a8 <RTC::get_update_in_progress_flag()>:
c00193a8:	83 ec 18             	sub    esp,0x18
c00193ab:	6a 0a                	push   0xa
c00193ad:	e8 09 db ff ff       	call   c0016ebb <x86ReadCMOS(unsigned char)>
c00193b2:	83 c4 1c             	add    esp,0x1c
c00193b5:	0f b6 c0             	movzx  eax,al
c00193b8:	c1 e8 07             	shr    eax,0x7
c00193bb:	c3                   	ret    

c00193bc <RTC::completeRTCRefresh()>:
c00193bc:	55                   	push   ebp
c00193bd:	57                   	push   edi
c00193be:	56                   	push   esi
c00193bf:	53                   	push   ebx
c00193c0:	83 ec 3c             	sub    esp,0x3c
c00193c3:	8b 1d ec a7 02 c0    	mov    ebx,DWORD PTR ds:0xc002a7ec
c00193c9:	83 ec 0c             	sub    esp,0xc
c00193cc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00193d0:	e8 d3 ff ff ff       	call   c00193a8 <RTC::get_update_in_progress_flag()>
c00193d5:	83 c4 10             	add    esp,0x10
c00193d8:	84 c0                	test   al,al
c00193da:	74 0e                	je     c00193ea <RTC::completeRTCRefresh()+0x2e>
c00193dc:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00193e2:	3b 05 ec a7 02 c0    	cmp    eax,DWORD PTR ds:0xc002a7ec
c00193e8:	73 df                	jae    c00193c9 <RTC::completeRTCRefresh()+0xd>
c00193ea:	83 ec 0c             	sub    esp,0xc
c00193ed:	6a 00                	push   0x0
c00193ef:	e8 c7 da ff ff       	call   c0016ebb <x86ReadCMOS(unsigned char)>
c00193f4:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c00193fb:	89 c5                	mov    ebp,eax
c00193fd:	e8 b9 da ff ff       	call   c0016ebb <x86ReadCMOS(unsigned char)>
c0019402:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019409:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001940d:	e8 a9 da ff ff       	call   c0016ebb <x86ReadCMOS(unsigned char)>
c0019412:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019419:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001941d:	e8 99 da ff ff       	call   c0016ebb <x86ReadCMOS(unsigned char)>
c0019422:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019429:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001942d:	e8 89 da ff ff       	call   c0016ebb <x86ReadCMOS(unsigned char)>
c0019432:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c0019439:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001943d:	e8 79 da ff ff       	call   c0016ebb <x86ReadCMOS(unsigned char)>
c0019442:	0f b6 c0             	movzx  eax,al
c0019445:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0019449:	83 c4 10             	add    esp,0x10
c001944c:	8b 1d ec a7 02 c0    	mov    ebx,DWORD PTR ds:0xc002a7ec
c0019452:	83 ec 0c             	sub    esp,0xc
c0019455:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019459:	e8 4a ff ff ff       	call   c00193a8 <RTC::get_update_in_progress_flag()>
c001945e:	83 c4 10             	add    esp,0x10
c0019461:	84 c0                	test   al,al
c0019463:	74 0e                	je     c0019473 <RTC::completeRTCRefresh()+0xb7>
c0019465:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001946b:	3b 05 ec a7 02 c0    	cmp    eax,DWORD PTR ds:0xc002a7ec
c0019471:	73 df                	jae    c0019452 <RTC::completeRTCRefresh()+0x96>
c0019473:	83 ec 0c             	sub    esp,0xc
c0019476:	6a 00                	push   0x0
c0019478:	e8 3e da ff ff       	call   c0016ebb <x86ReadCMOS(unsigned char)>
c001947d:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0019484:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0019488:	e8 2e da ff ff       	call   c0016ebb <x86ReadCMOS(unsigned char)>
c001948d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019494:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019498:	e8 1e da ff ff       	call   c0016ebb <x86ReadCMOS(unsigned char)>
c001949d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00194a4:	88 c3                	mov    bl,al
c00194a6:	e8 10 da ff ff       	call   c0016ebb <x86ReadCMOS(unsigned char)>
c00194ab:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00194b2:	89 c6                	mov    esi,eax
c00194b4:	e8 02 da ff ff       	call   c0016ebb <x86ReadCMOS(unsigned char)>
c00194b9:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c00194c0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00194c4:	e8 f2 d9 ff ff       	call   c0016ebb <x86ReadCMOS(unsigned char)>
c00194c9:	89 e9                	mov    ecx,ebp
c00194cb:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00194cf:	0f b6 f8             	movzx  edi,al
c00194d2:	83 c4 10             	add    esp,0x10
c00194d5:	0f b6 eb             	movzx  ebp,bl
c00194d8:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00194dc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00194e1:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00194e6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00194ea:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00194ee:	0f 94 c0             	sete   al
c00194f1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00194f5:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c00194f9:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00194fe:	0f 94 c2             	sete   dl
c0019501:	21 d0                	and    eax,edx
c0019503:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0019507:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001950b:	0f 94 c2             	sete   dl
c001950e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0019512:	21 c2                	and    edx,eax
c0019514:	89 f0                	mov    eax,esi
c0019516:	0f b6 c0             	movzx  eax,al
c0019519:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001951d:	89 f0                	mov    eax,esi
c001951f:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0019523:	0f 94 c0             	sete   al
c0019526:	21 d0                	and    eax,edx
c0019528:	31 d2                	xor    edx,edx
c001952a:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001952e:	0f 94 c2             	sete   dl
c0019531:	85 c2                	test   edx,eax
c0019533:	75 27                	jne    c001955c <RTC::completeRTCRefresh()+0x1a0>
c0019535:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0019539:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001953d:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0019541:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0019545:	89 f0                	mov    eax,esi
c0019547:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c001954b:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001954f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019553:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0019557:	e9 f0 fe ff ff       	jmp    c001944c <RTC::completeRTCRefresh()+0x90>
c001955c:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c0019560:	75 d3                	jne    c0019535 <RTC::completeRTCRefresh()+0x179>
c0019562:	83 ec 0c             	sub    esp,0xc
c0019565:	6a 0b                	push   0xb
c0019567:	e8 4f d9 ff ff       	call   c0016ebb <x86ReadCMOS(unsigned char)>
c001956c:	83 c4 10             	add    esp,0x10
c001956f:	a8 04                	test   al,0x4
c0019571:	75 7a                	jne    c00195ed <RTC::completeRTCRefresh()+0x231>
c0019573:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019577:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001957b:	83 e1 0f             	and    ecx,0xf
c001957e:	c1 ea 04             	shr    edx,0x4
c0019581:	83 e6 0f             	and    esi,0xf
c0019584:	6b d2 0a             	imul   edx,edx,0xa
c0019587:	c1 ef 04             	shr    edi,0x4
c001958a:	01 d1                	add    ecx,edx
c001958c:	6b ff 0a             	imul   edi,edi,0xa
c001958f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0019593:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0019597:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001959b:	c1 ea 04             	shr    edx,0x4
c001959e:	83 e1 0f             	and    ecx,0xf
c00195a1:	6b d2 0a             	imul   edx,edx,0xa
c00195a4:	01 d1                	add    ecx,edx
c00195a6:	89 ea                	mov    edx,ebp
c00195a8:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00195ac:	c1 ea 04             	shr    edx,0x4
c00195af:	89 d9                	mov    ecx,ebx
c00195b1:	83 e2 07             	and    edx,0x7
c00195b4:	83 e1 0f             	and    ecx,0xf
c00195b7:	6b d2 0a             	imul   edx,edx,0xa
c00195ba:	83 e3 80             	and    ebx,0xffffff80
c00195bd:	01 d1                	add    ecx,edx
c00195bf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00195c3:	09 cb                	or     ebx,ecx
c00195c5:	c1 ea 04             	shr    edx,0x4
c00195c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00195cc:	6b d2 0a             	imul   edx,edx,0xa
c00195cf:	83 e1 0f             	and    ecx,0xf
c00195d2:	01 d6                	add    esi,edx
c00195d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00195d8:	c1 ea 04             	shr    edx,0x4
c00195db:	6b d2 0a             	imul   edx,edx,0xa
c00195de:	01 d1                	add    ecx,edx
c00195e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00195e4:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00195e8:	83 e2 0f             	and    edx,0xf
c00195eb:	01 d7                	add    edi,edx
c00195ed:	a8 02                	test   al,0x2
c00195ef:	75 15                	jne    c0019606 <RTC::completeRTCRefresh()+0x24a>
c00195f1:	f6 c3 80             	test   bl,0x80
c00195f4:	74 10                	je     c0019606 <RTC::completeRTCRefresh()+0x24a>
c00195f6:	83 e3 7f             	and    ebx,0x7f
c00195f9:	b9 18 00 00 00       	mov    ecx,0x18
c00195fe:	8d 43 0c             	lea    eax,[ebx+0xc]
c0019601:	99                   	cdq    
c0019602:	f7 f9                	idiv   ecx
c0019604:	88 d3                	mov    bl,dl
c0019606:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001960c:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0019612:	77 06                	ja     c001961a <RTC::completeRTCRefresh()+0x25e>
c0019614:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c001961a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001961f:	31 c9                	xor    ecx,ecx
c0019621:	c1 e0 10             	shl    eax,0x10
c0019624:	89 cf                	mov    edi,ecx
c0019626:	c1 e5 10             	shl    ebp,0x10
c0019629:	31 d2                	xor    edx,edx
c001962b:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0019631:	09 c7                	or     edi,eax
c0019633:	89 f0                	mov    eax,esi
c0019635:	89 f9                	mov    ecx,edi
c0019637:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001963b:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001963f:	88 c2                	mov    dl,al
c0019641:	88 d9                	mov    cl,bl
c0019643:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0019647:	0f b7 c2             	movzx  eax,dx
c001964a:	09 e8                	or     eax,ebp
c001964c:	89 c2                	mov    edx,eax
c001964e:	50                   	push   eax
c001964f:	50                   	push   eax
c0019650:	51                   	push   ecx
c0019651:	52                   	push   edx
c0019652:	e8 00 f6 fe ff       	call   c0008c57 <KeDatetimeToSeconds(datetime_t)>
c0019657:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001965b:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0019661:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0019667:	83 c4 4c             	add    esp,0x4c
c001966a:	5b                   	pop    ebx
c001966b:	5e                   	pop    esi
c001966c:	5f                   	pop    edi
c001966d:	5d                   	pop    ebp
c001966e:	c3                   	ret    
c001966f:	90                   	nop

c0019670 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0019670:	55                   	push   ebp
c0019671:	57                   	push   edi
c0019672:	56                   	push   esi
c0019673:	53                   	push   ebx
c0019674:	83 ec 34             	sub    esp,0x34
c0019677:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001967b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001967f:	6a 00                	push   0x0
c0019681:	89 fb                	mov    ebx,edi
c0019683:	6a 00                	push   0x0
c0019685:	e8 85 d8 ff ff       	call   c0016f0f <x86WriteCMOS(unsigned char, unsigned char)>
c001968a:	5d                   	pop    ebp
c001968b:	58                   	pop    eax
c001968c:	6a 00                	push   0x0
c001968e:	6a 02                	push   0x2
c0019690:	e8 7a d8 ff ff       	call   c0016f0f <x86WriteCMOS(unsigned char, unsigned char)>
c0019695:	31 d2                	xor    edx,edx
c0019697:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001969e:	89 f9                	mov    ecx,edi
c00196a0:	89 f8                	mov    eax,edi
c00196a2:	c1 e9 10             	shr    ecx,0x10
c00196a5:	0f b6 c4             	movzx  eax,ah
c00196a8:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c00196ac:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00196b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00196b4:	b9 64 00 00 00       	mov    ecx,0x64
c00196b9:	89 f0                	mov    eax,esi
c00196bb:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00196bf:	89 f0                	mov    eax,esi
c00196c1:	0f b6 c4             	movzx  eax,ah
c00196c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00196c8:	89 f0                	mov    eax,esi
c00196ca:	c1 e8 10             	shr    eax,0x10
c00196cd:	f7 f1                	div    ecx
c00196cf:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00196d3:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00196d7:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00196db:	e8 db d7 ff ff       	call   c0016ebb <x86ReadCMOS(unsigned char)>
c00196e0:	83 c4 10             	add    esp,0x10
c00196e3:	89 c5                	mov    ebp,eax
c00196e5:	a8 04                	test   al,0x4
c00196e7:	75 6e                	jne    c0019757 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c00196e9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00196ed:	31 d2                	xor    edx,edx
c00196ef:	0f b6 c1             	movzx  eax,cl
c00196f2:	b9 0a 00 00 00       	mov    ecx,0xa
c00196f7:	f7 f1                	div    ecx
c00196f9:	c1 e0 04             	shl    eax,0x4
c00196fc:	09 d0                	or     eax,edx
c00196fe:	31 d2                	xor    edx,edx
c0019700:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019704:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0019709:	f7 f1                	div    ecx
c001970b:	c1 e0 04             	shl    eax,0x4
c001970e:	09 d0                	or     eax,edx
c0019710:	31 d2                	xor    edx,edx
c0019712:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019716:	0f b6 c3             	movzx  eax,bl
c0019719:	f7 f1                	div    ecx
c001971b:	c1 e0 04             	shl    eax,0x4
c001971e:	09 d0                	or     eax,edx
c0019720:	31 d2                	xor    edx,edx
c0019722:	89 c3                	mov    ebx,eax
c0019724:	89 f0                	mov    eax,esi
c0019726:	0f b6 c0             	movzx  eax,al
c0019729:	f7 f1                	div    ecx
c001972b:	c1 e0 04             	shl    eax,0x4
c001972e:	09 d0                	or     eax,edx
c0019730:	31 d2                	xor    edx,edx
c0019732:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019736:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001973b:	f7 f1                	div    ecx
c001973d:	c1 e0 04             	shl    eax,0x4
c0019740:	09 d0                	or     eax,edx
c0019742:	31 d2                	xor    edx,edx
c0019744:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019748:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001974c:	f7 f1                	div    ecx
c001974e:	c1 e0 04             	shl    eax,0x4
c0019751:	09 d0                	or     eax,edx
c0019753:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019757:	83 e5 02             	and    ebp,0x2
c001975a:	75 1e                	jne    c001977a <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001975c:	0f b6 c3             	movzx  eax,bl
c001975f:	83 f8 0b             	cmp    eax,0xb
c0019762:	76 10                	jbe    c0019774 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c0019764:	8d 53 f4             	lea    edx,[ebx-0xc]
c0019767:	88 d3                	mov    bl,dl
c0019769:	84 d2                	test   dl,dl
c001976b:	75 02                	jne    c001976f <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001976d:	b3 0c                	mov    bl,0xc
c001976f:	83 cb 80             	or     ebx,0xffffff80
c0019772:	eb 06                	jmp    c001977a <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c0019774:	85 c0                	test   eax,eax
c0019776:	75 02                	jne    c001977a <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c0019778:	b3 0c                	mov    bl,0xc
c001977a:	0f b6 db             	movzx  ebx,bl
c001977d:	50                   	push   eax
c001977e:	50                   	push   eax
c001977f:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0019784:	52                   	push   edx
c0019785:	6a 00                	push   0x0
c0019787:	e8 83 d7 ff ff       	call   c0016f0f <x86WriteCMOS(unsigned char, unsigned char)>
c001978c:	5a                   	pop    edx
c001978d:	59                   	pop    ecx
c001978e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019793:	50                   	push   eax
c0019794:	6a 02                	push   0x2
c0019796:	e8 74 d7 ff ff       	call   c0016f0f <x86WriteCMOS(unsigned char, unsigned char)>
c001979b:	5e                   	pop    esi
c001979c:	5f                   	pop    edi
c001979d:	53                   	push   ebx
c001979e:	6a 04                	push   0x4
c00197a0:	e8 6a d7 ff ff       	call   c0016f0f <x86WriteCMOS(unsigned char, unsigned char)>
c00197a5:	5d                   	pop    ebp
c00197a6:	58                   	pop    eax
c00197a7:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00197ac:	52                   	push   edx
c00197ad:	6a 07                	push   0x7
c00197af:	e8 5b d7 ff ff       	call   c0016f0f <x86WriteCMOS(unsigned char, unsigned char)>
c00197b4:	58                   	pop    eax
c00197b5:	5a                   	pop    edx
c00197b6:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00197bb:	50                   	push   eax
c00197bc:	6a 08                	push   0x8
c00197be:	e8 4c d7 ff ff       	call   c0016f0f <x86WriteCMOS(unsigned char, unsigned char)>
c00197c3:	59                   	pop    ecx
c00197c4:	5b                   	pop    ebx
c00197c5:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00197ca:	55                   	push   ebp
c00197cb:	6a 09                	push   0x9
c00197cd:	e8 3d d7 ff ff       	call   c0016f0f <x86WriteCMOS(unsigned char, unsigned char)>
c00197d2:	5e                   	pop    esi
c00197d3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00197d7:	e8 e0 fb ff ff       	call   c00193bc <RTC::completeRTCRefresh()>
c00197dc:	83 c4 3c             	add    esp,0x3c
c00197df:	b0 01                	mov    al,0x1
c00197e1:	5b                   	pop    ebx
c00197e2:	5e                   	pop    esi
c00197e3:	5f                   	pop    edi
c00197e4:	5d                   	pop    ebp
c00197e5:	c3                   	ret    

c00197e6 <rtcIRQHandler(regs*, void*)>:
c00197e6:	53                   	push   ebx
c00197e7:	83 ec 14             	sub    esp,0x14
c00197ea:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00197ee:	6a 0c                	push   0xc
c00197f0:	e8 c6 d6 ff ff       	call   c0016ebb <x86ReadCMOS(unsigned char)>
c00197f5:	83 c4 10             	add    esp,0x10
c00197f8:	a8 80                	test   al,0x80
c00197fa:	74 24                	je     c0019820 <rtcIRQHandler(regs*, void*)+0x3a>
c00197fc:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0019803:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001980a:	66 ff 05 94 d7 02 c0 	inc    WORD PTR ds:0xc002d794
c0019811:	75 0d                	jne    c0019820 <rtcIRQHandler(regs*, void*)+0x3a>
c0019813:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019817:	83 c4 08             	add    esp,0x8
c001981a:	5b                   	pop    ebx
c001981b:	e9 9c fb ff ff       	jmp    c00193bc <RTC::completeRTCRefresh()>
c0019820:	83 c4 08             	add    esp,0x8
c0019823:	5b                   	pop    ebx
c0019824:	c3                   	ret    
c0019825:	90                   	nop

c0019826 <RTC::RTC()>:
c0019826:	83 ec 1c             	sub    esp,0x1c
c0019829:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001982d:	83 ec 08             	sub    esp,0x8
c0019830:	68 bf 3d 02 c0       	push   0xc0023dbf
c0019835:	50                   	push   eax
c0019836:	e8 f7 f2 fe ff       	call   c0008b32 <Clock::Clock(char const*)>
c001983b:	83 c4 10             	add    esp,0x10
c001983e:	ba dc 3d 02 c0       	mov    edx,0xc0023ddc
c0019843:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019847:	89 10                	mov    DWORD PTR [eax],edx
c0019849:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001984d:	83 ec 0c             	sub    esp,0xc
c0019850:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019854:	6a 01                	push   0x1
c0019856:	68 e6 97 01 c0       	push   0xc00197e6
c001985b:	6a 08                	push   0x8
c001985d:	50                   	push   eax
c001985e:	e8 ab f7 fe ff       	call   c000900e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019863:	83 c4 20             	add    esp,0x20
c0019866:	89 c2                	mov    edx,eax
c0019868:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001986c:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0019872:	fa                   	cli    
c0019873:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0019878:	83 c0 01             	add    eax,0x1
c001987b:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0019880:	83 ec 0c             	sub    esp,0xc
c0019883:	6a 0b                	push   0xb
c0019885:	e8 31 d6 ff ff       	call   c0016ebb <x86ReadCMOS(unsigned char)>
c001988a:	83 c4 10             	add    esp,0x10
c001988d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019891:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019895:	83 c8 10             	or     eax,0x10
c0019898:	0f b6 c0             	movzx  eax,al
c001989b:	83 ec 08             	sub    esp,0x8
c001989e:	50                   	push   eax
c001989f:	6a 0b                	push   0xb
c00198a1:	e8 69 d6 ff ff       	call   c0016f0f <x86WriteCMOS(unsigned char, unsigned char)>
c00198a6:	83 c4 10             	add    esp,0x10
c00198a9:	83 ec 0c             	sub    esp,0xc
c00198ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00198b0:	e8 07 fb ff ff       	call   c00193bc <RTC::completeRTCRefresh()>
c00198b5:	83 c4 10             	add    esp,0x10
c00198b8:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c00198c0:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00198c5:	85 c0                	test   eax,eax
c00198c7:	75 01                	jne    c00198ca <RTC::RTC()+0xa4>
c00198c9:	fb                   	sti    
c00198ca:	90                   	nop
c00198cb:	83 c4 1c             	add    esp,0x1c
c00198ce:	c3                   	ret    
c00198cf:	90                   	nop

c00198d0 <HalConsoleScroll(int, int)>:
c00198d0:	83 ec 10             	sub    esp,0x10
c00198d3:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00198db:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00198e3:	90                   	nop
c00198e4:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00198e9:	0f 8f e1 00 00 00    	jg     c00199d0 <HalConsoleScroll(int, int)+0x100>
c00198ef:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00198f7:	90                   	nop
c00198f8:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0019900:	0f 8f be 00 00 00    	jg     c00199c4 <HalConsoleScroll(int, int)+0xf4>
c0019906:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001990a:	89 d0                	mov    eax,edx
c001990c:	c1 e0 02             	shl    eax,0x2
c001990f:	01 d0                	add    eax,edx
c0019911:	c1 e0 05             	shl    eax,0x5
c0019914:	89 c2                	mov    edx,eax
c0019916:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001991a:	01 d0                	add    eax,edx
c001991c:	89 c2                	mov    edx,eax
c001991e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019922:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0019925:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019929:	89 d0                	mov    eax,edx
c001992b:	c1 e0 02             	shl    eax,0x2
c001992e:	01 d0                	add    eax,edx
c0019930:	c1 e0 05             	shl    eax,0x5
c0019933:	89 c2                	mov    edx,eax
c0019935:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019939:	01 d0                	add    eax,edx
c001993b:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0019941:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019945:	01 c2                	add    edx,eax
c0019947:	8a 01                	mov    al,BYTE PTR [ecx]
c0019949:	88 02                	mov    BYTE PTR [edx],al
c001994b:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0019950:	75 66                	jne    c00199b8 <HalConsoleScroll(int, int)+0xe8>
c0019952:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019956:	83 e0 01             	and    eax,0x1
c0019959:	74 39                	je     c0019994 <HalConsoleScroll(int, int)+0xc4>
c001995b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001995f:	83 e0 0f             	and    eax,0xf
c0019962:	88 c2                	mov    dl,al
c0019964:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019968:	c1 e0 04             	shl    eax,0x4
c001996b:	09 d0                	or     eax,edx
c001996d:	88 c1                	mov    cl,al
c001996f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019973:	89 d0                	mov    eax,edx
c0019975:	c1 e0 02             	shl    eax,0x2
c0019978:	01 d0                	add    eax,edx
c001997a:	c1 e0 05             	shl    eax,0x5
c001997d:	89 c2                	mov    edx,eax
c001997f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019983:	01 d0                	add    eax,edx
c0019985:	89 c2                	mov    edx,eax
c0019987:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001998b:	01 d0                	add    eax,edx
c001998d:	88 ca                	mov    dl,cl
c001998f:	88 10                	mov    BYTE PTR [eax],dl
c0019991:	eb 25                	jmp    c00199b8 <HalConsoleScroll(int, int)+0xe8>
c0019993:	90                   	nop
c0019994:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019998:	89 d0                	mov    eax,edx
c001999a:	c1 e0 02             	shl    eax,0x2
c001999d:	01 d0                	add    eax,edx
c001999f:	c1 e0 05             	shl    eax,0x5
c00199a2:	89 c2                	mov    edx,eax
c00199a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199a8:	01 d0                	add    eax,edx
c00199aa:	89 c2                	mov    edx,eax
c00199ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199b0:	01 d0                	add    eax,edx
c00199b2:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00199b5:	8d 76 00             	lea    esi,[esi+0x0]
c00199b8:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c00199bd:	e9 36 ff ff ff       	jmp    c00198f8 <HalConsoleScroll(int, int)+0x28>
c00199c2:	66 90                	xchg   ax,ax
c00199c4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00199c9:	e9 16 ff ff ff       	jmp    c00198e4 <HalConsoleScroll(int, int)+0x14>
c00199ce:	66 90                	xchg   ax,ax
c00199d0:	90                   	nop
c00199d1:	83 c4 10             	add    esp,0x10
c00199d4:	c3                   	ret    
c00199d5:	8d 76 00             	lea    esi,[esi+0x0]

c00199d8 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00199d8:	83 ec 14             	sub    esp,0x14
c00199db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00199df:	88 04 24             	mov    BYTE PTR [esp],al
c00199e2:	8a 04 24             	mov    al,BYTE PTR [esp]
c00199e5:	0f b6 c0             	movzx  eax,al
c00199e8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00199ec:	89 d1                	mov    ecx,edx
c00199ee:	83 e1 0f             	and    ecx,0xf
c00199f1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00199f5:	c1 e2 04             	shl    edx,0x4
c00199f8:	0f b6 d2             	movzx  edx,dl
c00199fb:	09 ca                	or     edx,ecx
c00199fd:	c1 e2 08             	shl    edx,0x8
c0019a00:	09 d0                	or     eax,edx
c0019a02:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0019a07:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0019a0f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019a13:	89 d0                	mov    eax,edx
c0019a15:	c1 e0 02             	shl    eax,0x2
c0019a18:	01 d0                	add    eax,edx
c0019a1a:	c1 e0 04             	shl    eax,0x4
c0019a1d:	89 c2                	mov    edx,eax
c0019a1f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019a23:	01 d0                	add    eax,edx
c0019a25:	01 c0                	add    eax,eax
c0019a27:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0019a2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019a2f:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0019a34:	66 89 02             	mov    WORD PTR [edx],ax
c0019a37:	90                   	nop
c0019a38:	83 c4 14             	add    esp,0x14
c0019a3b:	c3                   	ret    

c0019a3c <HalConsoleCursorUpdate(int, int)>:
c0019a3c:	83 ec 20             	sub    esp,0x20
c0019a3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019a43:	89 c2                	mov    edx,eax
c0019a45:	c1 e2 02             	shl    edx,0x2
c0019a48:	01 d0                	add    eax,edx
c0019a4a:	c1 e0 04             	shl    eax,0x4
c0019a4d:	89 c2                	mov    edx,eax
c0019a4f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019a53:	01 d0                	add    eax,edx
c0019a55:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0019a5a:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0019a61:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0019a66:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019a6a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019a6e:	ee                   	out    dx,al
c0019a6f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0019a74:	0f b6 c0             	movzx  eax,al
c0019a77:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0019a7e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0019a82:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0019a86:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019a8a:	ee                   	out    dx,al
c0019a8b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0019a92:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0019a97:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0019a9b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019a9f:	ee                   	out    dx,al
c0019aa0:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0019aa5:	c1 e8 08             	shr    eax,0x8
c0019aa8:	0f b6 c0             	movzx  eax,al
c0019aab:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0019ab2:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0019ab6:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0019aba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019abe:	ee                   	out    dx,al
c0019abf:	90                   	nop
c0019ac0:	83 c4 20             	add    esp,0x20
c0019ac3:	c3                   	ret    

c0019ac4 <FAT::getName()>:
c0019ac4:	b8 10 3e 02 c0       	mov    eax,0xc0023e10
c0019ac9:	c3                   	ret    
c0019aca:	66 90                	xchg   ax,ax

c0019acc <FAT::tell(void*, unsigned long long*)>:
c0019acc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019ad1:	75 09                	jne    c0019adc <FAT::tell(void*, unsigned long long*)+0x10>
c0019ad3:	b8 04 00 00 00       	mov    eax,0x4
c0019ad8:	c3                   	ret    
c0019ad9:	8d 76 00             	lea    esi,[esi+0x0]
c0019adc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019ae1:	75 09                	jne    c0019aec <FAT::tell(void*, unsigned long long*)+0x20>
c0019ae3:	b8 04 00 00 00       	mov    eax,0x4
c0019ae8:	c3                   	ret    
c0019ae9:	8d 76 00             	lea    esi,[esi+0x0]
c0019aec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019af0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019af3:	ba 00 00 00 00       	mov    edx,0x0
c0019af8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019afc:	89 01                	mov    DWORD PTR [ecx],eax
c0019afe:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019b01:	b8 00 00 00 00       	mov    eax,0x0
c0019b06:	c3                   	ret    
c0019b07:	90                   	nop

c0019b08 <FAT::stat(void*, unsigned long long*)>:
c0019b08:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019b0d:	75 09                	jne    c0019b18 <FAT::stat(void*, unsigned long long*)+0x10>
c0019b0f:	b8 04 00 00 00       	mov    eax,0x4
c0019b14:	c3                   	ret    
c0019b15:	8d 76 00             	lea    esi,[esi+0x0]
c0019b18:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019b1d:	75 09                	jne    c0019b28 <FAT::stat(void*, unsigned long long*)+0x20>
c0019b1f:	b8 04 00 00 00       	mov    eax,0x4
c0019b24:	c3                   	ret    
c0019b25:	8d 76 00             	lea    esi,[esi+0x0]
c0019b28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b2c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019b2f:	ba 00 00 00 00       	mov    edx,0x0
c0019b34:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019b38:	89 01                	mov    DWORD PTR [ecx],eax
c0019b3a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019b3d:	b8 00 00 00 00       	mov    eax,0x0
c0019b42:	c3                   	ret    
c0019b43:	90                   	nop

c0019b44 <FAT::~FAT()>:
c0019b44:	83 ec 0c             	sub    esp,0xc
c0019b47:	ba 5c 3e 02 c0       	mov    edx,0xc0023e5c
c0019b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b50:	89 10                	mov    DWORD PTR [eax],edx
c0019b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b56:	83 ec 0c             	sub    esp,0xc
c0019b59:	50                   	push   eax
c0019b5a:	e8 35 e2 fe ff       	call   c0007d94 <Filesystem::~Filesystem()>
c0019b5f:	83 c4 10             	add    esp,0x10
c0019b62:	90                   	nop
c0019b63:	83 c4 0c             	add    esp,0xc
c0019b66:	c3                   	ret    
c0019b67:	90                   	nop

c0019b68 <FAT::~FAT()>:
c0019b68:	83 ec 0c             	sub    esp,0xc
c0019b6b:	83 ec 0c             	sub    esp,0xc
c0019b6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b72:	e8 cd ff ff ff       	call   c0019b44 <FAT::~FAT()>
c0019b77:	83 c4 10             	add    esp,0x10
c0019b7a:	83 ec 08             	sub    esp,0x8
c0019b7d:	6a 08                	push   0x8
c0019b7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b83:	e8 cc 2b ff ff       	call   c000c754 <operator delete(void*, unsigned long)>
c0019b88:	83 c4 10             	add    esp,0x10
c0019b8b:	83 c4 0c             	add    esp,0xc
c0019b8e:	c3                   	ret    
c0019b8f:	90                   	nop

c0019b90 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019b90:	83 ec 1c             	sub    esp,0x1c
c0019b93:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019b9a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019b9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019ba3:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019baa:	83 f8 ff             	cmp    eax,0xffffffff
c0019bad:	75 35                	jne    c0019be4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0019baf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019bb3:	88 c2                	mov    dl,al
c0019bb5:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019bba:	01 d0                	add    eax,edx
c0019bbc:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019bc0:	8b 15 a0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7a0
c0019bc6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019bca:	89 14 85 c0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2840],edx
c0019bd1:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019bd6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019bda:	89 14 85 40 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27c0],edx
c0019be1:	eb 19                	jmp    c0019bfc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0019be3:	90                   	nop
c0019be4:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019be8:	88 c2                	mov    dl,al
c0019bea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019bee:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019bf5:	01 d0                	add    eax,edx
c0019bf7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019bfb:	90                   	nop
c0019bfc:	83 ec 04             	sub    esp,0x4
c0019bff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019c03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019c07:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019c0b:	50                   	push   eax
c0019c0c:	e8 a7 b5 fe ff       	call   c00051b8 <f_getlabel>
c0019c11:	83 c4 10             	add    esp,0x10
c0019c14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019c18:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019c1d:	75 09                	jne    c0019c28 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0019c1f:	b8 00 00 00 00       	mov    eax,0x0
c0019c24:	eb 0a                	jmp    c0019c30 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0019c26:	66 90                	xchg   ax,ax
c0019c28:	b8 01 00 00 00       	mov    eax,0x1
c0019c2d:	8d 76 00             	lea    esi,[esi+0x0]
c0019c30:	83 c4 1c             	add    esp,0x1c
c0019c33:	c3                   	ret    

c0019c34 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019c34:	57                   	push   edi
c0019c35:	83 ec 58             	sub    esp,0x58
c0019c38:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019c40:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019c44:	b8 00 00 00 00       	mov    eax,0x0
c0019c49:	b9 0f 00 00 00       	mov    ecx,0xf
c0019c4e:	fc                   	cld    
c0019c4f:	89 d7                	mov    edi,edx
c0019c51:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019c53:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019c57:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019c5e:	83 f8 ff             	cmp    eax,0xffffffff
c0019c61:	75 35                	jne    c0019c98 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0019c63:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019c67:	88 c2                	mov    dl,al
c0019c69:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019c6e:	01 d0                	add    eax,edx
c0019c70:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019c74:	8b 15 a0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7a0
c0019c7a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019c7e:	89 14 85 c0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2840],edx
c0019c85:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019c8a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019c8e:	89 14 85 40 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27c0],edx
c0019c95:	eb 19                	jmp    c0019cb0 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0019c97:	90                   	nop
c0019c98:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019c9c:	88 c2                	mov    dl,al
c0019c9e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019ca2:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019ca9:	01 d0                	add    eax,edx
c0019cab:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019caf:	90                   	nop
c0019cb0:	83 ec 08             	sub    esp,0x8
c0019cb3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019cb7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019cbb:	50                   	push   eax
c0019cbc:	e8 7f 6b fe ff       	call   c0000840 <strcat>
c0019cc1:	83 c4 10             	add    esp,0x10
c0019cc4:	83 ec 0c             	sub    esp,0xc
c0019cc7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ccb:	50                   	push   eax
c0019ccc:	e8 38 b6 fe ff       	call   c0005309 <f_setlabel>
c0019cd1:	83 c4 10             	add    esp,0x10
c0019cd4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019cd8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019cdd:	75 09                	jne    c0019ce8 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0019cdf:	b8 00 00 00 00       	mov    eax,0x0
c0019ce4:	eb 0a                	jmp    c0019cf0 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0019ce6:	66 90                	xchg   ax,ax
c0019ce8:	b8 01 00 00 00       	mov    eax,0x1
c0019ced:	8d 76 00             	lea    esi,[esi+0x0]
c0019cf0:	83 c4 58             	add    esp,0x58
c0019cf3:	5f                   	pop    edi
c0019cf4:	c3                   	ret    
c0019cf5:	90                   	nop
c0019cf6:	66 90                	xchg   ax,ax

c0019cf8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019cf8:	83 ec 2c             	sub    esp,0x2c
c0019cfb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019d03:	83 ec 08             	sub    esp,0x8
c0019d06:	68 34 3e 02 c0       	push   0xc0023e34
c0019d0b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019d0f:	e8 3c 6a fe ff       	call   c0000750 <strcmp>
c0019d14:	83 c4 10             	add    esp,0x10
c0019d17:	85 c0                	test   eax,eax
c0019d19:	0f 94 c0             	sete   al
c0019d1c:	0f b6 c0             	movzx  eax,al
c0019d1f:	85 c0                	test   eax,eax
c0019d21:	74 0d                	je     c0019d30 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0019d23:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019d2b:	e9 c0 00 00 00       	jmp    c0019df0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019d30:	83 ec 08             	sub    esp,0x8
c0019d33:	68 26 3e 02 c0       	push   0xc0023e26
c0019d38:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019d3c:	e8 0f 6a fe ff       	call   c0000750 <strcmp>
c0019d41:	83 c4 10             	add    esp,0x10
c0019d44:	85 c0                	test   eax,eax
c0019d46:	0f 94 c0             	sete   al
c0019d49:	0f b6 c0             	movzx  eax,al
c0019d4c:	85 c0                	test   eax,eax
c0019d4e:	74 10                	je     c0019d60 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0019d50:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019d58:	e9 93 00 00 00       	jmp    c0019df0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019d5d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d60:	83 ec 08             	sub    esp,0x8
c0019d63:	68 2c 3e 02 c0       	push   0xc0023e2c
c0019d68:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019d6c:	e8 df 69 fe ff       	call   c0000750 <strcmp>
c0019d71:	83 c4 10             	add    esp,0x10
c0019d74:	85 c0                	test   eax,eax
c0019d76:	0f 94 c0             	sete   al
c0019d79:	0f b6 c0             	movzx  eax,al
c0019d7c:	85 c0                	test   eax,eax
c0019d7e:	74 0c                	je     c0019d8c <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0019d80:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019d88:	eb 66                	jmp    c0019df0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019d8a:	66 90                	xchg   ax,ax
c0019d8c:	83 ec 08             	sub    esp,0x8
c0019d8f:	68 3c 0f 02 c0       	push   0xc0020f3c
c0019d94:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019d98:	e8 b3 69 fe ff       	call   c0000750 <strcmp>
c0019d9d:	83 c4 10             	add    esp,0x10
c0019da0:	85 c0                	test   eax,eax
c0019da2:	0f 94 c0             	sete   al
c0019da5:	0f b6 c0             	movzx  eax,al
c0019da8:	85 c0                	test   eax,eax
c0019daa:	74 0c                	je     c0019db8 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0019dac:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019db4:	eb 3a                	jmp    c0019df0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019db6:	66 90                	xchg   ax,ax
c0019db8:	83 ec 08             	sub    esp,0x8
c0019dbb:	68 32 3e 02 c0       	push   0xc0023e32
c0019dc0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019dc4:	e8 87 69 fe ff       	call   c0000750 <strcmp>
c0019dc9:	83 c4 10             	add    esp,0x10
c0019dcc:	85 c0                	test   eax,eax
c0019dce:	0f 94 c0             	sete   al
c0019dd1:	0f b6 c0             	movzx  eax,al
c0019dd4:	85 c0                	test   eax,eax
c0019dd6:	74 0c                	je     c0019de4 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0019dd8:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019de0:	eb 0e                	jmp    c0019df0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019de2:	66 90                	xchg   ax,ax
c0019de4:	b8 08 00 00 00       	mov    eax,0x8
c0019de9:	e9 ea 00 00 00       	jmp    c0019ed8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019dee:	66 90                	xchg   ax,ax
c0019df0:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019df7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019dfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019e00:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019e07:	83 f8 ff             	cmp    eax,0xffffffff
c0019e0a:	75 34                	jne    c0019e40 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0019e0c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019e10:	88 c2                	mov    dl,al
c0019e12:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019e17:	01 d0                	add    eax,edx
c0019e19:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019e1d:	8b 15 a0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7a0
c0019e23:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019e27:	89 14 85 c0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2840],edx
c0019e2e:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019e33:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019e37:	89 14 85 40 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27c0],edx
c0019e3e:	eb 18                	jmp    c0019e58 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0019e40:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019e44:	88 c2                	mov    dl,al
c0019e46:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019e4a:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019e51:	01 d0                	add    eax,edx
c0019e53:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019e57:	90                   	nop
c0019e58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e5c:	88 04 24             	mov    BYTE PTR [esp],al
c0019e5f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019e63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019e67:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019e6f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019e74:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019e7c:	83 ec 0c             	sub    esp,0xc
c0019e7f:	68 00 20 00 00       	push   0x2000
c0019e84:	e8 c6 4b ff ff       	call   c000ea4f <malloc>
c0019e89:	83 c4 10             	add    esp,0x10
c0019e8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019e90:	68 00 20 00 00       	push   0x2000
c0019e95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019e99:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019e9d:	50                   	push   eax
c0019e9e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019ea2:	50                   	push   eax
c0019ea3:	e8 5e b7 fe ff       	call   c0005606 <f_mkfs>
c0019ea8:	83 c4 10             	add    esp,0x10
c0019eab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019eaf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019eb4:	75 0a                	jne    c0019ec0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0019eb6:	b8 00 00 00 00       	mov    eax,0x0
c0019ebb:	eb 1b                	jmp    c0019ed8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0019ec0:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019ec5:	75 09                	jne    c0019ed0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0019ec7:	b8 09 00 00 00       	mov    eax,0x9
c0019ecc:	eb 0a                	jmp    c0019ed8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019ece:	66 90                	xchg   ax,ax
c0019ed0:	b8 01 00 00 00       	mov    eax,0x1
c0019ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ed8:	83 c4 2c             	add    esp,0x2c
c0019edb:	c3                   	ret    

c0019edc <FAT::tryMount(LogicalDisk*, int)>:
c0019edc:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0019ee2:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019ee7:	83 f8 14             	cmp    eax,0x14
c0019eea:	75 18                	jne    c0019f04 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0019eec:	83 ec 0c             	sub    esp,0xc
c0019eef:	68 38 3e 02 c0       	push   0xc0023e38
c0019ef4:	e8 9d 4e ff ff       	call   c000ed96 <KePanic(char const*)>
c0019ef9:	83 c4 10             	add    esp,0x10
c0019efc:	b0 00                	mov    al,0x0
c0019efe:	e9 ed 01 00 00       	jmp    c001a0f0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019f03:	90                   	nop
c0019f04:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019f0b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019f11:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019f17:	3d 00 02 00 00       	cmp    eax,0x200
c0019f1c:	74 0a                	je     c0019f28 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0019f1e:	b0 00                	mov    al,0x0
c0019f20:	e9 cb 01 00 00       	jmp    c001a0f0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019f25:	8d 76 00             	lea    esi,[esi+0x0]
c0019f28:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0019f30:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019f37:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019f3e:	83 f8 ff             	cmp    eax,0xffffffff
c0019f41:	74 09                	je     c0019f4c <FAT::tryMount(LogicalDisk*, int)+0x70>
c0019f43:	b0 01                	mov    al,0x1
c0019f45:	e9 a6 01 00 00       	jmp    c001a0f0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019f4a:	66 90                	xchg   ax,ax
c0019f4c:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0019f56:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0019f5e:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0019f65:	88 c2                	mov    dl,al
c0019f67:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019f6c:	01 d0                	add    eax,edx
c0019f6e:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0019f75:	8b 15 a0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7a0
c0019f7b:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019f82:	89 14 85 c0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2840],edx
c0019f89:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019f8e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0019f95:	89 14 85 40 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27c0],edx
c0019f9c:	83 ec 0c             	sub    esp,0xc
c0019f9f:	68 34 02 00 00       	push   0x234
c0019fa4:	e8 a6 4a ff ff       	call   c000ea4f <malloc>
c0019fa9:	83 c4 10             	add    esp,0x10
c0019fac:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0019fb3:	83 ec 04             	sub    esp,0x4
c0019fb6:	6a 00                	push   0x0
c0019fb8:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019fbf:	50                   	push   eax
c0019fc0:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019fc7:	e8 15 9e fe ff       	call   c0003de1 <f_mount>
c0019fcc:	83 c4 10             	add    esp,0x10
c0019fcf:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019fd6:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0019fde:	74 1c                	je     c0019ffc <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019fe0:	83 ec 0c             	sub    esp,0xc
c0019fe3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019fea:	e8 80 4a ff ff       	call   c000ea6f <rfree>
c0019fef:	83 c4 10             	add    esp,0x10
c0019ff2:	b0 00                	mov    al,0x0
c0019ff4:	e9 f7 00 00 00       	jmp    c001a0f0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019ff9:	8d 76 00             	lea    esi,[esi+0x0]
c0019ffc:	83 ec 04             	sub    esp,0x4
c0019fff:	68 00 01 00 00       	push   0x100
c001a004:	6a 00                	push   0x0
c001a006:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001a00d:	50                   	push   eax
c001a00e:	e8 dd 64 fe ff       	call   c00004f0 <memset>
c001a013:	83 c4 10             	add    esp,0x10
c001a016:	83 ec 08             	sub    esp,0x8
c001a019:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001a020:	50                   	push   eax
c001a021:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001a028:	50                   	push   eax
c001a029:	e8 12 68 fe ff       	call   c0000840 <strcat>
c001a02e:	83 c4 10             	add    esp,0x10
c001a031:	83 ec 08             	sub    esp,0x8
c001a034:	68 46 3e 02 c0       	push   0xc0023e46
c001a039:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001a040:	50                   	push   eax
c001a041:	e8 fa 67 fe ff       	call   c0000840 <strcat>
c001a046:	83 c4 10             	add    esp,0x10
c001a049:	83 ec 04             	sub    esp,0x4
c001a04c:	6a 01                	push   0x1
c001a04e:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001a055:	50                   	push   eax
c001a056:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a05a:	50                   	push   eax
c001a05b:	e8 e3 9d fe ff       	call   c0003e43 <f_open>
c001a060:	83 c4 10             	add    esp,0x10
c001a063:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001a06a:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001a071:	85 c0                	test   eax,eax
c001a073:	74 0b                	je     c001a080 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001a075:	78 31                	js     c001a0a8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001a077:	83 e8 04             	sub    eax,0x4
c001a07a:	83 f8 01             	cmp    eax,0x1
c001a07d:	77 29                	ja     c001a0a8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001a07f:	90                   	nop
c001a080:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001a088:	83 ec 0c             	sub    esp,0xc
c001a08b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a08f:	50                   	push   eax
c001a090:	e8 7d a5 fe ff       	call   c0004612 <f_close>
c001a095:	83 c4 10             	add    esp,0x10
c001a098:	90                   	nop
c001a099:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001a0a1:	85 c0                	test   eax,eax
c001a0a3:	74 43                	je     c001a0e8 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001a0a5:	eb 31                	jmp    c001a0d8 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001a0a7:	90                   	nop
c001a0a8:	83 ec 0c             	sub    esp,0xc
c001a0ab:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001a0b2:	e8 b8 49 ff ff       	call   c000ea6f <rfree>
c001a0b7:	83 c4 10             	add    esp,0x10
c001a0ba:	83 ec 04             	sub    esp,0x4
c001a0bd:	6a 00                	push   0x0
c001a0bf:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001a0c6:	50                   	push   eax
c001a0c7:	6a 00                	push   0x0
c001a0c9:	e8 13 9d fe ff       	call   c0003de1 <f_mount>
c001a0ce:	83 c4 10             	add    esp,0x10
c001a0d1:	b0 00                	mov    al,0x0
c001a0d3:	eb 1b                	jmp    c001a0f0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001a0d5:	8d 76 00             	lea    esi,[esi+0x0]
c001a0d8:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c001a0dd:	83 c0 01             	add    eax,0x1
c001a0e0:	a3 a0 d7 02 c0       	mov    ds:0xc002d7a0,eax
c001a0e5:	8d 76 00             	lea    esi,[esi+0x0]
c001a0e8:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001a0ef:	90                   	nop
c001a0f0:	81 c4 4c 03 00 00    	add    esp,0x34c
c001a0f6:	c3                   	ret    
c001a0f7:	90                   	nop

c001a0f8 <FAT::allocateSwapfile(char const*, int)>:
c001a0f8:	55                   	push   ebp
c001a0f9:	57                   	push   edi
c001a0fa:	56                   	push   esi
c001a0fb:	53                   	push   ebx
c001a0fc:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001a102:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001a10d:	83 ec 0c             	sub    esp,0xc
c001a110:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001a117:	e8 33 49 ff ff       	call   c000ea4f <malloc>
c001a11c:	83 c4 10             	add    esp,0x10
c001a11f:	89 c7                	mov    edi,eax
c001a121:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001a126:	83 ec 04             	sub    esp,0x4
c001a129:	50                   	push   eax
c001a12a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001a131:	57                   	push   edi
c001a132:	e8 fb df fe ff       	call   c0008132 <File::File(char const*, Process*)>
c001a137:	83 c4 10             	add    esp,0x10
c001a13a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001a141:	83 ec 04             	sub    esp,0x4
c001a144:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a148:	50                   	push   eax
c001a149:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a14d:	50                   	push   eax
c001a14e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a155:	e8 f8 e2 fe ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c001a15a:	83 c4 10             	add    esp,0x10
c001a15d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001a164:	c1 e0 14             	shl    eax,0x14
c001a167:	89 c7                	mov    edi,eax
c001a169:	89 c5                	mov    ebp,eax
c001a16b:	c1 fd 1f             	sar    ebp,0x1f
c001a16e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a172:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a176:	89 f9                	mov    ecx,edi
c001a178:	31 c1                	xor    ecx,eax
c001a17a:	89 cb                	mov    ebx,ecx
c001a17c:	89 e9                	mov    ecx,ebp
c001a17e:	31 d1                	xor    ecx,edx
c001a180:	89 ce                	mov    esi,ecx
c001a182:	89 f0                	mov    eax,esi
c001a184:	09 d8                	or     eax,ebx
c001a186:	0f 84 9c 00 00 00    	je     c001a228 <FAT::allocateSwapfile(char const*, int)+0x130>
c001a18c:	83 ec 0c             	sub    esp,0xc
c001a18f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a196:	e8 83 e1 fe ff       	call   c000831e <File::unlink()>
c001a19b:	83 c4 10             	add    esp,0x10
c001a19e:	83 ec 08             	sub    esp,0x8
c001a1a1:	6a 12                	push   0x12
c001a1a3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a1aa:	e8 a1 df fe ff       	call   c0008150 <File::open(FileOpenMode)>
c001a1af:	83 c4 10             	add    esp,0x10
c001a1b2:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001a1b9:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001a1bf:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001a1c6:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001a1cd:	c1 e0 14             	shl    eax,0x14
c001a1d0:	83 ec 04             	sub    esp,0x4
c001a1d3:	6a 01                	push   0x1
c001a1d5:	50                   	push   eax
c001a1d6:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001a1dd:	e8 b7 b2 fe ff       	call   c0005499 <f_expand>
c001a1e2:	83 c4 10             	add    esp,0x10
c001a1e5:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001a1ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001a1ee:	83 c0 10             	add    eax,0x10
c001a1f1:	8b 00                	mov    eax,DWORD PTR [eax]
c001a1f3:	83 ec 0c             	sub    esp,0xc
c001a1f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a1fa:	52                   	push   edx
c001a1fb:	8d 54 24 30          	lea    edx,[esp+0x30]
c001a1ff:	52                   	push   edx
c001a200:	6a 00                	push   0x0
c001a202:	68 00 04 00 00       	push   0x400
c001a207:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001a20e:	ff d0                	call   eax
c001a210:	83 c4 20             	add    esp,0x20
c001a213:	83 ec 0c             	sub    esp,0xc
c001a216:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a21d:	e8 8c df fe ff       	call   c00081ae <File::close()>
c001a222:	83 c4 10             	add    esp,0x10
c001a225:	8d 76 00             	lea    esi,[esi+0x0]
c001a228:	83 ec 08             	sub    esp,0x8
c001a22b:	6a 01                	push   0x1
c001a22d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a234:	e8 17 df fe ff       	call   c0008150 <File::open(FileOpenMode)>
c001a239:	83 c4 10             	add    esp,0x10
c001a23c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001a243:	8b 00                	mov    eax,DWORD PTR [eax]
c001a245:	83 c0 0c             	add    eax,0xc
c001a248:	8b 00                	mov    eax,DWORD PTR [eax]
c001a24a:	83 ec 0c             	sub    esp,0xc
c001a24d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a251:	52                   	push   edx
c001a252:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001a256:	52                   	push   edx
c001a257:	6a 00                	push   0x0
c001a259:	6a 04                	push   0x4
c001a25b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001a262:	ff d0                	call   eax
c001a264:	83 c4 20             	add    esp,0x20
c001a267:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001a26e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001a274:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001a27b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001a282:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001a285:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001a28c:	83 ec 0c             	sub    esp,0xc
c001a28f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a296:	e8 13 df fe ff       	call   c00081ae <File::close()>
c001a29b:	83 c4 10             	add    esp,0x10
c001a29e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001a2a5:	ba 00 00 00 00       	mov    edx,0x0
c001a2aa:	81 c4 3c 04 00 00    	add    esp,0x43c
c001a2b0:	5b                   	pop    ebx
c001a2b1:	5e                   	pop    esi
c001a2b2:	5f                   	pop    edi
c001a2b3:	5d                   	pop    ebp
c001a2b4:	c3                   	ret    
c001a2b5:	90                   	nop
c001a2b6:	66 90                	xchg   ax,ax

c001a2b8 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001a2b8:	57                   	push   edi
c001a2b9:	56                   	push   esi
c001a2ba:	53                   	push   ebx
c001a2bb:	81 ec 50 02 00 00    	sub    esp,0x250
c001a2c1:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001a2c9:	74 0d                	je     c001a2d8 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001a2cb:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001a2d3:	75 0f                	jne    c001a2e4 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001a2d5:	8d 76 00             	lea    esi,[esi+0x0]
c001a2d8:	b8 04 00 00 00       	mov    eax,0x4
c001a2dd:	e9 3a 01 00 00       	jmp    c001a41c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001a2e2:	66 90                	xchg   ax,ax
c001a2e4:	83 ec 08             	sub    esp,0x8
c001a2e7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001a2ee:	50                   	push   eax
c001a2ef:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001a2f6:	e8 e4 a5 fe ff       	call   c00048df <f_readdir>
c001a2fb:	83 c4 10             	add    esp,0x10
c001a2fe:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001a305:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001a30c:	83 ec 0c             	sub    esp,0xc
c001a30f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a316:	83 c0 16             	add    eax,0x16
c001a319:	50                   	push   eax
c001a31a:	e8 51 62 fe ff       	call   c0000570 <strlen>
c001a31f:	83 c4 10             	add    esp,0x10
c001a322:	ba 00 00 00 00       	mov    edx,0x0
c001a327:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a32b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001a32f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001a336:	0f b6 c0             	movzx  eax,al
c001a339:	83 e0 10             	and    eax,0x10
c001a33c:	74 0a                	je     c001a348 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001a33e:	b8 02 00 00 00       	mov    eax,0x2
c001a343:	eb 0b                	jmp    c001a350 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001a345:	8d 76 00             	lea    esi,[esi+0x0]
c001a348:	b8 01 00 00 00       	mov    eax,0x1
c001a34d:	8d 76 00             	lea    esi,[esi+0x0]
c001a350:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a354:	83 ec 08             	sub    esp,0x8
c001a357:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001a35e:	83 c0 16             	add    eax,0x16
c001a361:	50                   	push   eax
c001a362:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a366:	83 c0 10             	add    eax,0x10
c001a369:	50                   	push   eax
c001a36a:	e8 d1 62 fe ff       	call   c0000640 <strcpy>
c001a36f:	83 c4 10             	add    esp,0x10
c001a372:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001a379:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001a380:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a384:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001a38b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001a392:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001a399:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001a3a0:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001a3a7:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001a3ae:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001a3b5:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001a3bc:	89 c6                	mov    esi,eax
c001a3be:	89 d7                	mov    edi,edx
c001a3c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a3c2:	89 c8                	mov    eax,ecx
c001a3c4:	89 fa                	mov    edx,edi
c001a3c6:	89 f3                	mov    ebx,esi
c001a3c8:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001a3cf:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001a3d6:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001a3dd:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001a3e4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a3ea:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001a3f1:	0f be c0             	movsx  eax,al
c001a3f4:	85 c0                	test   eax,eax
c001a3f6:	75 08                	jne    c001a400 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001a3f8:	b8 07 00 00 00       	mov    eax,0x7
c001a3fd:	eb 1d                	jmp    c001a41c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001a3ff:	90                   	nop
c001a400:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001a407:	85 c0                	test   eax,eax
c001a409:	75 09                	jne    c001a414 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001a40b:	b8 00 00 00 00       	mov    eax,0x0
c001a410:	eb 0a                	jmp    c001a41c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001a412:	66 90                	xchg   ax,ax
c001a414:	b8 01 00 00 00       	mov    eax,0x1
c001a419:	8d 76 00             	lea    esi,[esi+0x0]
c001a41c:	81 c4 50 02 00 00    	add    esp,0x250
c001a422:	5b                   	pop    ebx
c001a423:	5e                   	pop    esi
c001a424:	5f                   	pop    edi
c001a425:	c3                   	ret    
c001a426:	66 90                	xchg   ax,ax

c001a428 <FAT::read(void*, unsigned long, void*, int*)>:
c001a428:	83 ec 1c             	sub    esp,0x1c
c001a42b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a430:	74 0a                	je     c001a43c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001a432:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a437:	75 0b                	jne    c001a444 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001a439:	8d 76 00             	lea    esi,[esi+0x0]
c001a43c:	b8 04 00 00 00       	mov    eax,0x4
c001a441:	eb 41                	jmp    c001a484 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001a443:	90                   	nop
c001a444:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a448:	50                   	push   eax
c001a449:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a44d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a451:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a455:	e8 ac 9c fe ff       	call   c0004106 <f_read>
c001a45a:	83 c4 10             	add    esp,0x10
c001a45d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a461:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a465:	89 c2                	mov    edx,eax
c001a467:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a46b:	89 10                	mov    DWORD PTR [eax],edx
c001a46d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a471:	85 c0                	test   eax,eax
c001a473:	75 07                	jne    c001a47c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001a475:	b8 00 00 00 00       	mov    eax,0x0
c001a47a:	eb 08                	jmp    c001a484 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001a47c:	b8 01 00 00 00       	mov    eax,0x1
c001a481:	8d 76 00             	lea    esi,[esi+0x0]
c001a484:	83 c4 1c             	add    esp,0x1c
c001a487:	c3                   	ret    

c001a488 <FAT::write(void*, unsigned long, void*, int*)>:
c001a488:	83 ec 1c             	sub    esp,0x1c
c001a48b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a490:	74 0a                	je     c001a49c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001a492:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a497:	75 0b                	jne    c001a4a4 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001a499:	8d 76 00             	lea    esi,[esi+0x0]
c001a49c:	b8 04 00 00 00       	mov    eax,0x4
c001a4a1:	eb 41                	jmp    c001a4e4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001a4a3:	90                   	nop
c001a4a4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a4a8:	50                   	push   eax
c001a4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a4ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a4b1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a4b5:	e8 4b 9e fe ff       	call   c0004305 <f_write>
c001a4ba:	83 c4 10             	add    esp,0x10
c001a4bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a4c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a4c5:	89 c2                	mov    edx,eax
c001a4c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a4cb:	89 10                	mov    DWORD PTR [eax],edx
c001a4cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a4d1:	85 c0                	test   eax,eax
c001a4d3:	75 07                	jne    c001a4dc <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001a4d5:	b8 00 00 00 00       	mov    eax,0x0
c001a4da:	eb 08                	jmp    c001a4e4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001a4dc:	b8 01 00 00 00       	mov    eax,0x1
c001a4e1:	8d 76 00             	lea    esi,[esi+0x0]
c001a4e4:	83 c4 1c             	add    esp,0x1c
c001a4e7:	c3                   	ret    

c001a4e8 <FAT::close(void*)>:
c001a4e8:	83 ec 1c             	sub    esp,0x1c
c001a4eb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a4f0:	75 0a                	jne    c001a4fc <FAT::close(void*)+0x14>
c001a4f2:	b8 04 00 00 00       	mov    eax,0x4
c001a4f7:	eb 3f                	jmp    c001a538 <FAT::close(void*)+0x50>
c001a4f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a4fc:	83 ec 0c             	sub    esp,0xc
c001a4ff:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a503:	e8 0a a1 fe ff       	call   c0004612 <f_close>
c001a508:	83 c4 10             	add    esp,0x10
c001a50b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a50f:	83 ec 0c             	sub    esp,0xc
c001a512:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a516:	e8 44 45 ff ff       	call   c000ea5f <free>
c001a51b:	83 c4 10             	add    esp,0x10
c001a51e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a522:	85 c0                	test   eax,eax
c001a524:	75 0a                	jne    c001a530 <FAT::close(void*)+0x48>
c001a526:	b8 00 00 00 00       	mov    eax,0x0
c001a52b:	eb 0b                	jmp    c001a538 <FAT::close(void*)+0x50>
c001a52d:	8d 76 00             	lea    esi,[esi+0x0]
c001a530:	b8 01 00 00 00       	mov    eax,0x1
c001a535:	8d 76 00             	lea    esi,[esi+0x0]
c001a538:	83 c4 1c             	add    esp,0x1c
c001a53b:	c3                   	ret    

c001a53c <FAT::closeDir(void*)>:
c001a53c:	83 ec 1c             	sub    esp,0x1c
c001a53f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a544:	75 0a                	jne    c001a550 <FAT::closeDir(void*)+0x14>
c001a546:	b8 04 00 00 00       	mov    eax,0x4
c001a54b:	eb 3f                	jmp    c001a58c <FAT::closeDir(void*)+0x50>
c001a54d:	8d 76 00             	lea    esi,[esi+0x0]
c001a550:	83 ec 0c             	sub    esp,0xc
c001a553:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a557:	e8 61 a3 fe ff       	call   c00048bd <f_closedir>
c001a55c:	83 c4 10             	add    esp,0x10
c001a55f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a563:	83 ec 0c             	sub    esp,0xc
c001a566:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a56a:	e8 f0 44 ff ff       	call   c000ea5f <free>
c001a56f:	83 c4 10             	add    esp,0x10
c001a572:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a576:	85 c0                	test   eax,eax
c001a578:	75 0a                	jne    c001a584 <FAT::closeDir(void*)+0x48>
c001a57a:	b8 00 00 00 00       	mov    eax,0x0
c001a57f:	eb 0b                	jmp    c001a58c <FAT::closeDir(void*)+0x50>
c001a581:	8d 76 00             	lea    esi,[esi+0x0]
c001a584:	b8 01 00 00 00       	mov    eax,0x1
c001a589:	8d 76 00             	lea    esi,[esi+0x0]
c001a58c:	83 c4 1c             	add    esp,0x1c
c001a58f:	c3                   	ret    

c001a590 <FAT::truncate(void*, unsigned long long)>:
c001a590:	83 ec 2c             	sub    esp,0x2c
c001a593:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a597:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a59b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a59f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a5a3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a5a8:	75 0a                	jne    c001a5b4 <FAT::truncate(void*, unsigned long long)+0x24>
c001a5aa:	b8 04 00 00 00       	mov    eax,0x4
c001a5af:	eb 47                	jmp    c001a5f8 <FAT::truncate(void*, unsigned long long)+0x68>
c001a5b1:	8d 76 00             	lea    esi,[esi+0x0]
c001a5b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a5b8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a5bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a5bf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a5c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a5cb:	83 ec 08             	sub    esp,0x8
c001a5ce:	50                   	push   eax
c001a5cf:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a5d3:	e8 69 a0 fe ff       	call   c0004641 <f_lseek>
c001a5d8:	83 c4 10             	add    esp,0x10
c001a5db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a5df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a5e3:	85 c0                	test   eax,eax
c001a5e5:	75 09                	jne    c001a5f0 <FAT::truncate(void*, unsigned long long)+0x60>
c001a5e7:	b8 00 00 00 00       	mov    eax,0x0
c001a5ec:	eb 0a                	jmp    c001a5f8 <FAT::truncate(void*, unsigned long long)+0x68>
c001a5ee:	66 90                	xchg   ax,ax
c001a5f0:	b8 01 00 00 00       	mov    eax,0x1
c001a5f5:	8d 76 00             	lea    esi,[esi+0x0]
c001a5f8:	83 c4 2c             	add    esp,0x2c
c001a5fb:	c3                   	ret    

c001a5fc <FAT::seek(void*, unsigned long long)>:
c001a5fc:	83 ec 2c             	sub    esp,0x2c
c001a5ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a603:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a607:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a60b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a60f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a614:	75 0a                	jne    c001a620 <FAT::seek(void*, unsigned long long)+0x24>
c001a616:	b8 04 00 00 00       	mov    eax,0x4
c001a61b:	eb 33                	jmp    c001a650 <FAT::seek(void*, unsigned long long)+0x54>
c001a61d:	8d 76 00             	lea    esi,[esi+0x0]
c001a620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a624:	83 ec 08             	sub    esp,0x8
c001a627:	50                   	push   eax
c001a628:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a62c:	e8 10 a0 fe ff       	call   c0004641 <f_lseek>
c001a631:	83 c4 10             	add    esp,0x10
c001a634:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a638:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a63c:	85 c0                	test   eax,eax
c001a63e:	75 08                	jne    c001a648 <FAT::seek(void*, unsigned long long)+0x4c>
c001a640:	b8 00 00 00 00       	mov    eax,0x0
c001a645:	eb 09                	jmp    c001a650 <FAT::seek(void*, unsigned long long)+0x54>
c001a647:	90                   	nop
c001a648:	b8 01 00 00 00       	mov    eax,0x1
c001a64d:	8d 76 00             	lea    esi,[esi+0x0]
c001a650:	83 c4 2c             	add    esp,0x2c
c001a653:	c3                   	ret    

c001a654 <fatWrapperReadDisk>:
c001a654:	53                   	push   ebx
c001a655:	83 ec 18             	sub    esp,0x18
c001a658:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a65c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a660:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a665:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c001a66c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a670:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a674:	ba 00 00 00 00       	mov    edx,0x0
c001a679:	83 ec 0c             	sub    esp,0xc
c001a67c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a680:	53                   	push   ebx
c001a681:	52                   	push   edx
c001a682:	50                   	push   eax
c001a683:	51                   	push   ecx
c001a684:	e8 2f fa fe ff       	call   c000a0b8 <LogicalDisk::read(unsigned long long, int, void*)>
c001a689:	83 c4 20             	add    esp,0x20
c001a68c:	83 c4 18             	add    esp,0x18
c001a68f:	5b                   	pop    ebx
c001a690:	c3                   	ret    
c001a691:	8d 76 00             	lea    esi,[esi+0x0]

c001a694 <fatWrapperWriteDisk>:
c001a694:	53                   	push   ebx
c001a695:	83 ec 18             	sub    esp,0x18
c001a698:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a69c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a6a0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a6a5:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c001a6ac:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a6b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a6b4:	ba 00 00 00 00       	mov    edx,0x0
c001a6b9:	83 ec 0c             	sub    esp,0xc
c001a6bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a6c0:	53                   	push   ebx
c001a6c1:	52                   	push   edx
c001a6c2:	50                   	push   eax
c001a6c3:	51                   	push   ecx
c001a6c4:	e8 5b fa fe ff       	call   c000a124 <LogicalDisk::write(unsigned long long, int, void*)>
c001a6c9:	83 c4 20             	add    esp,0x20
c001a6cc:	83 c4 18             	add    esp,0x18
c001a6cf:	5b                   	pop    ebx
c001a6d0:	c3                   	ret    
c001a6d1:	8d 76 00             	lea    esi,[esi+0x0]

c001a6d4 <fatWrapperIoctl>:
c001a6d4:	53                   	push   ebx
c001a6d5:	83 ec 28             	sub    esp,0x28
c001a6d8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a6dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a6e0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a6e4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a6e8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a6ed:	83 f8 02             	cmp    eax,0x2
c001a6f0:	75 32                	jne    c001a724 <fatWrapperIoctl+0x50>
c001a6f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a6f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a6fa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a6ff:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c001a706:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a70c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a712:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a716:	66 89 02             	mov    WORD PTR [edx],ax
c001a719:	b8 00 00 00 00       	mov    eax,0x0
c001a71e:	e9 c5 00 00 00       	jmp    c001a7e8 <fatWrapperIoctl+0x114>
c001a723:	90                   	nop
c001a724:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a729:	83 f8 01             	cmp    eax,0x1
c001a72c:	75 6a                	jne    c001a798 <fatWrapperIoctl+0xc4>
c001a72e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a732:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a736:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a73b:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c001a742:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a748:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a74e:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a754:	89 c8                	mov    eax,ecx
c001a756:	89 da                	mov    edx,ebx
c001a758:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a75c:	c1 e0 0a             	shl    eax,0xa
c001a75f:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001a764:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c001a76b:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a771:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a777:	89 cb                	mov    ebx,ecx
c001a779:	c1 fb 1f             	sar    ebx,0x1f
c001a77c:	53                   	push   ebx
c001a77d:	51                   	push   ecx
c001a77e:	52                   	push   edx
c001a77f:	50                   	push   eax
c001a780:	e8 bf 59 00 00       	call   c0020144 <__udivdi3>
c001a785:	83 c4 10             	add    esp,0x10
c001a788:	89 c2                	mov    edx,eax
c001a78a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a78e:	89 10                	mov    DWORD PTR [eax],edx
c001a790:	b8 00 00 00 00       	mov    eax,0x0
c001a795:	eb 51                	jmp    c001a7e8 <fatWrapperIoctl+0x114>
c001a797:	90                   	nop
c001a798:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a79d:	85 c0                	test   eax,eax
c001a79f:	75 07                	jne    c001a7a8 <fatWrapperIoctl+0xd4>
c001a7a1:	b8 00 00 00 00       	mov    eax,0x0
c001a7a6:	eb 40                	jmp    c001a7e8 <fatWrapperIoctl+0x114>
c001a7a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a7ad:	83 f8 03             	cmp    eax,0x3
c001a7b0:	75 1a                	jne    c001a7cc <fatWrapperIoctl+0xf8>
c001a7b2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a7b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a7ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a7be:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a7c4:	b8 00 00 00 00       	mov    eax,0x0
c001a7c9:	eb 1d                	jmp    c001a7e8 <fatWrapperIoctl+0x114>
c001a7cb:	90                   	nop
c001a7cc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a7d1:	83 f8 04             	cmp    eax,0x4
c001a7d4:	75 0a                	jne    c001a7e0 <fatWrapperIoctl+0x10c>
c001a7d6:	b8 00 00 00 00       	mov    eax,0x0
c001a7db:	eb 0b                	jmp    c001a7e8 <fatWrapperIoctl+0x114>
c001a7dd:	8d 76 00             	lea    esi,[esi+0x0]
c001a7e0:	b8 04 00 00 00       	mov    eax,0x4
c001a7e5:	8d 76 00             	lea    esi,[esi+0x0]
c001a7e8:	83 c4 28             	add    esp,0x28
c001a7eb:	5b                   	pop    ebx
c001a7ec:	c3                   	ret    
c001a7ed:	90                   	nop
c001a7ee:	66 90                	xchg   ax,ax

c001a7f0 <FAT::FAT()>:
c001a7f0:	83 ec 1c             	sub    esp,0x1c
c001a7f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7f7:	83 ec 0c             	sub    esp,0xc
c001a7fa:	50                   	push   eax
c001a7fb:	e8 70 d5 fe ff       	call   c0007d70 <Filesystem::Filesystem()>
c001a800:	83 c4 10             	add    esp,0x10
c001a803:	ba 5c 3e 02 c0       	mov    edx,0xc0023e5c
c001a808:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a80c:	89 10                	mov    DWORD PTR [eax],edx
c001a80e:	c7 05 a0 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d7a0,0x0
c001a818:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a820:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a825:	7f 19                	jg     c001a840 <FAT::FAT()+0x50>
c001a827:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a82b:	c7 04 85 c0 d7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd2840],0xffffffff
c001a836:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a83b:	eb e3                	jmp    c001a820 <FAT::FAT()+0x30>
c001a83d:	8d 76 00             	lea    esi,[esi+0x0]
c001a840:	90                   	nop
c001a841:	83 c4 1c             	add    esp,0x1c
c001a844:	c3                   	ret    
c001a845:	90                   	nop
c001a846:	66 90                	xchg   ax,ax

c001a848 <FAT::fixFilepath(char*)>:
c001a848:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a84c:	8a 00                	mov    al,BYTE PTR [eax]
c001a84e:	0f be c0             	movsx  eax,al
c001a851:	83 f8 40             	cmp    eax,0x40
c001a854:	7e 2e                	jle    c001a884 <FAT::fixFilepath(char*)+0x3c>
c001a856:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a85a:	8a 00                	mov    al,BYTE PTR [eax]
c001a85c:	83 e8 41             	sub    eax,0x41
c001a85f:	88 c2                	mov    dl,al
c001a861:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a865:	88 10                	mov    BYTE PTR [eax],dl
c001a867:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a86b:	8a 00                	mov    al,BYTE PTR [eax]
c001a86d:	0f be c0             	movsx  eax,al
c001a870:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c001a877:	83 c0 30             	add    eax,0x30
c001a87a:	88 c2                	mov    dl,al
c001a87c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a880:	88 10                	mov    BYTE PTR [eax],dl
c001a882:	66 90                	xchg   ax,ax
c001a884:	90                   	nop
c001a885:	c3                   	ret    
c001a886:	66 90                	xchg   ax,ax

c001a888 <FAT::open(char const*, void**, FileOpenMode)>:
c001a888:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a88e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a896:	74 0c                	je     c001a8a4 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001a898:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a8a0:	75 0e                	jne    c001a8b0 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001a8a2:	66 90                	xchg   ax,ax
c001a8a4:	b8 04 00 00 00       	mov    eax,0x4
c001a8a9:	e9 46 01 00 00       	jmp    c001a9f4 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001a8ae:	66 90                	xchg   ax,ax
c001a8b0:	83 ec 08             	sub    esp,0x8
c001a8b3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a8ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a8be:	50                   	push   eax
c001a8bf:	e8 7c 5d fe ff       	call   c0000640 <strcpy>
c001a8c4:	83 c4 10             	add    esp,0x10
c001a8c7:	83 ec 08             	sub    esp,0x8
c001a8ca:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a8ce:	50                   	push   eax
c001a8cf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a8d6:	e8 6d ff ff ff       	call   c001a848 <FAT::fixFilepath(char*)>
c001a8db:	83 c4 10             	add    esp,0x10
c001a8de:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001a8e6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a8ed:	83 e0 01             	and    eax,0x1
c001a8f0:	74 12                	je     c001a904 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001a8f2:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a8f9:	83 c8 01             	or     eax,0x1
c001a8fc:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a903:	90                   	nop
c001a904:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a90b:	83 e0 04             	and    eax,0x4
c001a90e:	74 24                	je     c001a934 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001a910:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a917:	83 c8 30             	or     eax,0x30
c001a91a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a921:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a928:	83 c8 02             	or     eax,0x2
c001a92b:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a932:	66 90                	xchg   ax,ax
c001a934:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a93b:	83 e0 02             	and    eax,0x2
c001a93e:	74 14                	je     c001a954 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001a940:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a947:	83 c8 02             	or     eax,0x2
c001a94a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a951:	8d 76 00             	lea    esi,[esi+0x0]
c001a954:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a95b:	83 e0 08             	and    eax,0x8
c001a95e:	74 14                	je     c001a974 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001a960:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a967:	83 c8 04             	or     eax,0x4
c001a96a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a971:	8d 76 00             	lea    esi,[esi+0x0]
c001a974:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a97b:	83 e0 10             	and    eax,0x10
c001a97e:	74 14                	je     c001a994 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001a980:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a987:	83 c8 08             	or     eax,0x8
c001a98a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a991:	8d 76 00             	lea    esi,[esi+0x0]
c001a994:	83 ec 0c             	sub    esp,0xc
c001a997:	68 28 02 00 00       	push   0x228
c001a99c:	e8 ae 40 ff ff       	call   c000ea4f <malloc>
c001a9a1:	83 c4 10             	add    esp,0x10
c001a9a4:	89 c2                	mov    edx,eax
c001a9a6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a9ad:	89 10                	mov    DWORD PTR [eax],edx
c001a9af:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001a9b7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a9be:	8b 00                	mov    eax,DWORD PTR [eax]
c001a9c0:	83 ec 04             	sub    esp,0x4
c001a9c3:	52                   	push   edx
c001a9c4:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a9c8:	52                   	push   edx
c001a9c9:	50                   	push   eax
c001a9ca:	e8 74 94 fe ff       	call   c0003e43 <f_open>
c001a9cf:	83 c4 10             	add    esp,0x10
c001a9d2:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001a9d9:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001a9e1:	74 09                	je     c001a9ec <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001a9e3:	b8 01 00 00 00       	mov    eax,0x1
c001a9e8:	eb 0a                	jmp    c001a9f4 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001a9ea:	66 90                	xchg   ax,ax
c001a9ec:	b8 00 00 00 00       	mov    eax,0x0
c001a9f1:	8d 76 00             	lea    esi,[esi+0x0]
c001a9f4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a9fa:	c3                   	ret    
c001a9fb:	90                   	nop

c001a9fc <FAT::openDir(char const*, void**)>:
c001a9fc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aa02:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001aa0a:	74 0c                	je     c001aa18 <FAT::openDir(char const*, void**)+0x1c>
c001aa0c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001aa14:	75 0e                	jne    c001aa24 <FAT::openDir(char const*, void**)+0x28>
c001aa16:	66 90                	xchg   ax,ax
c001aa18:	b8 04 00 00 00       	mov    eax,0x4
c001aa1d:	e9 82 00 00 00       	jmp    c001aaa4 <FAT::openDir(char const*, void**)+0xa8>
c001aa22:	66 90                	xchg   ax,ax
c001aa24:	83 ec 08             	sub    esp,0x8
c001aa27:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa2e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aa32:	50                   	push   eax
c001aa33:	e8 08 5c fe ff       	call   c0000640 <strcpy>
c001aa38:	83 c4 10             	add    esp,0x10
c001aa3b:	83 ec 08             	sub    esp,0x8
c001aa3e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa42:	50                   	push   eax
c001aa43:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa4a:	e8 f9 fd ff ff       	call   c001a848 <FAT::fixFilepath(char*)>
c001aa4f:	83 c4 10             	add    esp,0x10
c001aa52:	83 ec 0c             	sub    esp,0xc
c001aa55:	6a 30                	push   0x30
c001aa57:	e8 f3 3f ff ff       	call   c000ea4f <malloc>
c001aa5c:	83 c4 10             	add    esp,0x10
c001aa5f:	89 c2                	mov    edx,eax
c001aa61:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aa68:	89 10                	mov    DWORD PTR [eax],edx
c001aa6a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aa71:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa73:	83 ec 08             	sub    esp,0x8
c001aa76:	8d 54 24 14          	lea    edx,[esp+0x14]
c001aa7a:	52                   	push   edx
c001aa7b:	50                   	push   eax
c001aa7c:	e8 71 9d fe ff       	call   c00047f2 <f_opendir>
c001aa81:	83 c4 10             	add    esp,0x10
c001aa84:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001aa8b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001aa93:	74 07                	je     c001aa9c <FAT::openDir(char const*, void**)+0xa0>
c001aa95:	b8 01 00 00 00       	mov    eax,0x1
c001aa9a:	eb 08                	jmp    c001aaa4 <FAT::openDir(char const*, void**)+0xa8>
c001aa9c:	b8 00 00 00 00       	mov    eax,0x0
c001aaa1:	8d 76 00             	lea    esi,[esi+0x0]
c001aaa4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aaaa:	c3                   	ret    
c001aaab:	90                   	nop

c001aaac <FAT::stat(char const*, unsigned long long*, bool*)>:
c001aaac:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001aab2:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001aaba:	75 0c                	jne    c001aac8 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001aabc:	b8 04 00 00 00       	mov    eax,0x4
c001aac1:	e9 d6 00 00 00       	jmp    c001ab9c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001aac6:	66 90                	xchg   ax,ax
c001aac8:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001aad0:	75 0a                	jne    c001aadc <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001aad2:	b8 04 00 00 00       	mov    eax,0x4
c001aad7:	e9 c0 00 00 00       	jmp    c001ab9c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001aadc:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001aae4:	75 0a                	jne    c001aaf0 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001aae6:	b8 04 00 00 00       	mov    eax,0x4
c001aaeb:	e9 ac 00 00 00       	jmp    c001ab9c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001aaf0:	83 ec 08             	sub    esp,0x8
c001aaf3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aafa:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ab01:	50                   	push   eax
c001ab02:	e8 39 5b fe ff       	call   c0000640 <strcpy>
c001ab07:	83 c4 10             	add    esp,0x10
c001ab0a:	83 ec 08             	sub    esp,0x8
c001ab0d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001ab14:	50                   	push   eax
c001ab15:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ab1c:	e8 27 fd ff ff       	call   c001a848 <FAT::fixFilepath(char*)>
c001ab21:	83 c4 10             	add    esp,0x10
c001ab24:	83 ec 08             	sub    esp,0x8
c001ab27:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ab2b:	50                   	push   eax
c001ab2c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ab33:	50                   	push   eax
c001ab34:	e8 38 9e fe ff       	call   c0004971 <f_stat>
c001ab39:	83 c4 10             	add    esp,0x10
c001ab3c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ab43:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ab4a:	85 c0                	test   eax,eax
c001ab4c:	74 0a                	je     c001ab58 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001ab4e:	83 f8 04             	cmp    eax,0x4
c001ab51:	74 39                	je     c001ab8c <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001ab53:	eb 3f                	jmp    c001ab94 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001ab55:	8d 76 00             	lea    esi,[esi+0x0]
c001ab58:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ab5c:	0f b6 c0             	movzx  eax,al
c001ab5f:	83 e0 10             	and    eax,0x10
c001ab62:	0f 95 c2             	setne  dl
c001ab65:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001ab6c:	88 10                	mov    BYTE PTR [eax],dl
c001ab6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab72:	ba 00 00 00 00       	mov    edx,0x0
c001ab77:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001ab7e:	89 01                	mov    DWORD PTR [ecx],eax
c001ab80:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ab83:	b8 00 00 00 00       	mov    eax,0x0
c001ab88:	eb 12                	jmp    c001ab9c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001ab8a:	66 90                	xchg   ax,ax
c001ab8c:	b8 02 00 00 00       	mov    eax,0x2
c001ab91:	eb 09                	jmp    c001ab9c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001ab93:	90                   	nop
c001ab94:	b8 01 00 00 00       	mov    eax,0x1
c001ab99:	8d 76 00             	lea    esi,[esi+0x0]
c001ab9c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001aba2:	c3                   	ret    
c001aba3:	90                   	nop

c001aba4 <FAT::unlink(char const*)>:
c001aba4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001abaa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001abb2:	75 08                	jne    c001abbc <FAT::unlink(char const*)+0x18>
c001abb4:	b8 04 00 00 00       	mov    eax,0x4
c001abb9:	eb 61                	jmp    c001ac1c <FAT::unlink(char const*)+0x78>
c001abbb:	90                   	nop
c001abbc:	83 ec 08             	sub    esp,0x8
c001abbf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001abc6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001abca:	50                   	push   eax
c001abcb:	e8 70 5a fe ff       	call   c0000640 <strcpy>
c001abd0:	83 c4 10             	add    esp,0x10
c001abd3:	83 ec 08             	sub    esp,0x8
c001abd6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001abda:	50                   	push   eax
c001abdb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001abe2:	e8 61 fc ff ff       	call   c001a848 <FAT::fixFilepath(char*)>
c001abe7:	83 c4 10             	add    esp,0x10
c001abea:	83 ec 0c             	sub    esp,0xc
c001abed:	8d 44 24 18          	lea    eax,[esp+0x18]
c001abf1:	50                   	push   eax
c001abf2:	e8 ec 9f fe ff       	call   c0004be3 <f_unlink>
c001abf7:	83 c4 10             	add    esp,0x10
c001abfa:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ac01:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ac08:	85 c0                	test   eax,eax
c001ac0a:	75 08                	jne    c001ac14 <FAT::unlink(char const*)+0x70>
c001ac0c:	b8 00 00 00 00       	mov    eax,0x0
c001ac11:	eb 09                	jmp    c001ac1c <FAT::unlink(char const*)+0x78>
c001ac13:	90                   	nop
c001ac14:	b8 01 00 00 00       	mov    eax,0x1
c001ac19:	8d 76 00             	lea    esi,[esi+0x0]
c001ac1c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ac22:	c3                   	ret    
c001ac23:	90                   	nop

c001ac24 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001ac24:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ac2a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001ac31:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001ac38:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001ac3c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ac40:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001ac48:	75 0a                	jne    c001ac54 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001ac4a:	b8 04 00 00 00       	mov    eax,0x4
c001ac4f:	e9 7c 01 00 00       	jmp    c001add0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001ac54:	83 ec 08             	sub    esp,0x8
c001ac57:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ac5e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ac62:	50                   	push   eax
c001ac63:	e8 d8 59 fe ff       	call   c0000640 <strcpy>
c001ac68:	83 c4 10             	add    esp,0x10
c001ac6b:	83 ec 08             	sub    esp,0x8
c001ac6e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ac72:	50                   	push   eax
c001ac73:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ac7a:	e8 c9 fb ff ff       	call   c001a848 <FAT::fixFilepath(char*)>
c001ac7f:	83 c4 10             	add    esp,0x10
c001ac82:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001ac8a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001ac92:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ac97:	83 e0 01             	and    eax,0x1
c001ac9a:	74 14                	je     c001acb0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001ac9c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001aca3:	83 c8 01             	or     eax,0x1
c001aca6:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001acad:	8d 76 00             	lea    esi,[esi+0x0]
c001acb0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001acb5:	83 e0 02             	and    eax,0x2
c001acb8:	74 12                	je     c001accc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001acba:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001acc1:	83 c8 20             	or     eax,0x20
c001acc4:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001accb:	90                   	nop
c001accc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001acd1:	83 e0 04             	and    eax,0x4
c001acd4:	74 12                	je     c001ace8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001acd6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001acdd:	83 c8 04             	or     eax,0x4
c001ace0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001ace7:	90                   	nop
c001ace8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001aced:	83 e0 08             	and    eax,0x8
c001acf0:	74 12                	je     c001ad04 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001acf2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001acf9:	83 c8 02             	or     eax,0x2
c001acfc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001ad03:	90                   	nop
c001ad04:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ad09:	83 e0 01             	and    eax,0x1
c001ad0c:	74 12                	je     c001ad20 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001ad0e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ad15:	83 c8 01             	or     eax,0x1
c001ad18:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ad1f:	90                   	nop
c001ad20:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ad25:	83 e0 02             	and    eax,0x2
c001ad28:	74 12                	je     c001ad3c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001ad2a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ad31:	83 c8 20             	or     eax,0x20
c001ad34:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ad3b:	90                   	nop
c001ad3c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ad41:	83 e0 04             	and    eax,0x4
c001ad44:	74 12                	je     c001ad58 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001ad46:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ad4d:	83 c8 04             	or     eax,0x4
c001ad50:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ad57:	90                   	nop
c001ad58:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ad5d:	83 e0 08             	and    eax,0x8
c001ad60:	74 12                	je     c001ad74 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001ad62:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ad69:	83 c8 02             	or     eax,0x2
c001ad6c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ad73:	90                   	nop
c001ad74:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001ad7b:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ad82:	09 d0                	or     eax,edx
c001ad84:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ad8b:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001ad93:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001ad9b:	83 ec 04             	sub    esp,0x4
c001ad9e:	52                   	push   edx
c001ad9f:	50                   	push   eax
c001ada0:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ada4:	50                   	push   eax
c001ada5:	e8 ae a2 fe ff       	call   c0005058 <f_chmod>
c001adaa:	83 c4 10             	add    esp,0x10
c001adad:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001adb4:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001adbb:	85 c0                	test   eax,eax
c001adbd:	75 09                	jne    c001adc8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001adbf:	b8 00 00 00 00       	mov    eax,0x0
c001adc4:	eb 0a                	jmp    c001add0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001adc6:	66 90                	xchg   ax,ax
c001adc8:	b8 01 00 00 00       	mov    eax,0x1
c001adcd:	8d 76 00             	lea    esi,[esi+0x0]
c001add0:	81 c4 2c 01 00 00    	add    esp,0x12c
c001add6:	c3                   	ret    
c001add7:	90                   	nop

c001add8 <FAT::rename(char const*, char const*)>:
c001add8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001adde:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001ade6:	74 0c                	je     c001adf4 <FAT::rename(char const*, char const*)+0x1c>
c001ade8:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001adf0:	75 0e                	jne    c001ae00 <FAT::rename(char const*, char const*)+0x28>
c001adf2:	66 90                	xchg   ax,ax
c001adf4:	b8 04 00 00 00       	mov    eax,0x4
c001adf9:	e9 9e 00 00 00       	jmp    c001ae9c <FAT::rename(char const*, char const*)+0xc4>
c001adfe:	66 90                	xchg   ax,ax
c001ae00:	83 ec 08             	sub    esp,0x8
c001ae03:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ae0a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ae11:	50                   	push   eax
c001ae12:	e8 29 58 fe ff       	call   c0000640 <strcpy>
c001ae17:	83 c4 10             	add    esp,0x10
c001ae1a:	83 ec 08             	sub    esp,0x8
c001ae1d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001ae24:	50                   	push   eax
c001ae25:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ae2c:	e8 17 fa ff ff       	call   c001a848 <FAT::fixFilepath(char*)>
c001ae31:	83 c4 10             	add    esp,0x10
c001ae34:	83 ec 08             	sub    esp,0x8
c001ae37:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001ae3e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ae42:	50                   	push   eax
c001ae43:	e8 f8 57 fe ff       	call   c0000640 <strcpy>
c001ae48:	83 c4 10             	add    esp,0x10
c001ae4b:	83 ec 08             	sub    esp,0x8
c001ae4e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ae52:	50                   	push   eax
c001ae53:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ae5a:	e8 e9 f9 ff ff       	call   c001a848 <FAT::fixFilepath(char*)>
c001ae5f:	83 c4 10             	add    esp,0x10
c001ae62:	83 ec 08             	sub    esp,0x8
c001ae65:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ae69:	50                   	push   eax
c001ae6a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ae71:	50                   	push   eax
c001ae72:	e8 29 a0 fe ff       	call   c0004ea0 <f_rename>
c001ae77:	83 c4 10             	add    esp,0x10
c001ae7a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001ae81:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001ae88:	85 c0                	test   eax,eax
c001ae8a:	75 08                	jne    c001ae94 <FAT::rename(char const*, char const*)+0xbc>
c001ae8c:	b8 00 00 00 00       	mov    eax,0x0
c001ae91:	eb 09                	jmp    c001ae9c <FAT::rename(char const*, char const*)+0xc4>
c001ae93:	90                   	nop
c001ae94:	b8 01 00 00 00       	mov    eax,0x1
c001ae99:	8d 76 00             	lea    esi,[esi+0x0]
c001ae9c:	81 c4 1c 02 00 00    	add    esp,0x21c
c001aea2:	c3                   	ret    
c001aea3:	90                   	nop

c001aea4 <FAT::mkdir(char const*)>:
c001aea4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aeaa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001aeb2:	75 08                	jne    c001aebc <FAT::mkdir(char const*)+0x18>
c001aeb4:	b8 04 00 00 00       	mov    eax,0x4
c001aeb9:	eb 61                	jmp    c001af1c <FAT::mkdir(char const*)+0x78>
c001aebb:	90                   	nop
c001aebc:	83 ec 08             	sub    esp,0x8
c001aebf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aec6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aeca:	50                   	push   eax
c001aecb:	e8 70 57 fe ff       	call   c0000640 <strcpy>
c001aed0:	83 c4 10             	add    esp,0x10
c001aed3:	83 ec 08             	sub    esp,0x8
c001aed6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aeda:	50                   	push   eax
c001aedb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aee2:	e8 61 f9 ff ff       	call   c001a848 <FAT::fixFilepath(char*)>
c001aee7:	83 c4 10             	add    esp,0x10
c001aeea:	83 ec 0c             	sub    esp,0xc
c001aeed:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aef1:	50                   	push   eax
c001aef2:	e8 0e 9e fe ff       	call   c0004d05 <f_mkdir>
c001aef7:	83 c4 10             	add    esp,0x10
c001aefa:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001af01:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001af08:	85 c0                	test   eax,eax
c001af0a:	75 08                	jne    c001af14 <FAT::mkdir(char const*)+0x70>
c001af0c:	b8 00 00 00 00       	mov    eax,0x0
c001af11:	eb 09                	jmp    c001af1c <FAT::mkdir(char const*)+0x78>
c001af13:	90                   	nop
c001af14:	b8 01 00 00 00       	mov    eax,0x1
c001af19:	8d 76 00             	lea    esi,[esi+0x0]
c001af1c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001af22:	c3                   	ret    
c001af23:	90                   	nop

c001af24 <FAT::exists(char const*)>:
c001af24:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001af2a:	83 ec 08             	sub    esp,0x8
c001af2d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001af34:	8d 44 24 10          	lea    eax,[esp+0x10]
c001af38:	50                   	push   eax
c001af39:	e8 02 57 fe ff       	call   c0000640 <strcpy>
c001af3e:	83 c4 10             	add    esp,0x10
c001af41:	83 ec 08             	sub    esp,0x8
c001af44:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001af48:	50                   	push   eax
c001af49:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001af50:	e8 f3 f8 ff ff       	call   c001a848 <FAT::fixFilepath(char*)>
c001af55:	83 c4 10             	add    esp,0x10
c001af58:	83 ec 08             	sub    esp,0x8
c001af5b:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001af62:	50                   	push   eax
c001af63:	8d 44 24 10          	lea    eax,[esp+0x10]
c001af67:	50                   	push   eax
c001af68:	e8 04 9a fe ff       	call   c0004971 <f_stat>
c001af6d:	83 c4 10             	add    esp,0x10
c001af70:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001af77:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001af7e:	85 c0                	test   eax,eax
c001af80:	75 06                	jne    c001af88 <FAT::exists(char const*)+0x64>
c001af82:	b0 01                	mov    al,0x1
c001af84:	eb 06                	jmp    c001af8c <FAT::exists(char const*)+0x68>
c001af86:	66 90                	xchg   ax,ax
c001af88:	b0 00                	mov    al,0x0
c001af8a:	66 90                	xchg   ax,ax
c001af8c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001af92:	c3                   	ret    
c001af93:	90                   	nop

c001af94 <isoReadDiscSectorHelper>:
c001af94:	83 ec 2c             	sub    esp,0x2c
c001af97:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001af9b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001af9f:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001afa4:	83 e8 41             	sub    eax,0x41
c001afa7:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c001afae:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001afb2:	ba 00 00 00 00       	mov    edx,0x0
c001afb7:	83 ec 0c             	sub    esp,0xc
c001afba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001afbe:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001afc2:	52                   	push   edx
c001afc3:	50                   	push   eax
c001afc4:	51                   	push   ecx
c001afc5:	e8 ee f0 fe ff       	call   c000a0b8 <LogicalDisk::read(unsigned long long, int, void*)>
c001afca:	83 c4 20             	add    esp,0x20
c001afcd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001afd1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001afd6:	74 0c                	je     c001afe4 <isoReadDiscSectorHelper+0x50>
c001afd8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001afdc:	c1 e0 0b             	shl    eax,0xb
c001afdf:	eb 0b                	jmp    c001afec <isoReadDiscSectorHelper+0x58>
c001afe1:	8d 76 00             	lea    esi,[esi+0x0]
c001afe4:	b8 00 00 00 00       	mov    eax,0x0
c001afe9:	8d 76 00             	lea    esi,[esi+0x0]
c001afec:	83 c4 2c             	add    esp,0x2c
c001afef:	c3                   	ret    

c001aff0 <iso_kprintf>:
c001aff0:	83 ec 0c             	sub    esp,0xc
c001aff3:	83 ec 08             	sub    esp,0x8
c001aff6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001affa:	68 01 3b 02 c0       	push   0xc0023b01
c001afff:	e8 60 bf fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001b004:	83 c4 10             	add    esp,0x10
c001b007:	90                   	nop
c001b008:	83 c4 0c             	add    esp,0xc
c001b00b:	c3                   	ret    

c001b00c <iso_kprintfd>:
c001b00c:	83 ec 0c             	sub    esp,0xc
c001b00f:	83 ec 08             	sub    esp,0x8
c001b012:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b016:	68 b9 1b 02 c0       	push   0xc0021bb9
c001b01b:	e8 44 bf fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001b020:	83 c4 10             	add    esp,0x10
c001b023:	90                   	nop
c001b024:	83 c4 0c             	add    esp,0xc
c001b027:	c3                   	ret    

c001b028 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001b028:	b8 08 00 00 00       	mov    eax,0x8
c001b02d:	c3                   	ret    

c001b02e <ISO9660::truncate(void*, unsigned long long)>:
c001b02e:	b8 01 00 00 00       	mov    eax,0x1
c001b033:	c3                   	ret    

c001b034 <ISO9660::getName()>:
c001b034:	b8 c0 3e 02 c0       	mov    eax,0xc0023ec0
c001b039:	c3                   	ret    

c001b03a <ISO9660::closeDir(void*)>:
c001b03a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b03e:	8b 00                	mov    eax,DWORD PTR [eax]
c001b040:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001b043:	90                   	nop

c001b044 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001b044:	b8 01 00 00 00       	mov    eax,0x1
c001b049:	c3                   	ret    

c001b04a <ISO9660::unlink(char const*)>:
c001b04a:	b8 01 00 00 00       	mov    eax,0x1
c001b04f:	c3                   	ret    

c001b050 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b050:	b8 03 00 00 00       	mov    eax,0x3
c001b055:	c3                   	ret    

c001b056 <ISO9660::rename(char const*, char const*)>:
c001b056:	b8 01 00 00 00       	mov    eax,0x1
c001b05b:	c3                   	ret    

c001b05c <ISO9660::mkdir(char const*)>:
c001b05c:	b8 01 00 00 00       	mov    eax,0x1
c001b061:	c3                   	ret    

c001b062 <ISO9660::~ISO9660()>:
c001b062:	83 ec 0c             	sub    esp,0xc
c001b065:	ba 00 40 02 c0       	mov    edx,0xc0024000
c001b06a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b06e:	89 10                	mov    DWORD PTR [eax],edx
c001b070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b074:	83 ec 0c             	sub    esp,0xc
c001b077:	50                   	push   eax
c001b078:	e8 17 cd fe ff       	call   c0007d94 <Filesystem::~Filesystem()>
c001b07d:	83 c4 10             	add    esp,0x10
c001b080:	90                   	nop
c001b081:	83 c4 0c             	add    esp,0xc
c001b084:	c3                   	ret    
c001b085:	90                   	nop

c001b086 <ISO9660::~ISO9660()>:
c001b086:	83 ec 0c             	sub    esp,0xc
c001b089:	83 ec 0c             	sub    esp,0xc
c001b08c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b090:	e8 cd ff ff ff       	call   c001b062 <ISO9660::~ISO9660()>
c001b095:	83 c4 10             	add    esp,0x10
c001b098:	83 ec 08             	sub    esp,0x8
c001b09b:	6a 08                	push   0x8
c001b09d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0a1:	e8 ae 16 ff ff       	call   c000c754 <operator delete(void*, unsigned long)>
c001b0a6:	83 c4 10             	add    esp,0x10
c001b0a9:	83 c4 0c             	add    esp,0xc
c001b0ac:	c3                   	ret    
c001b0ad:	90                   	nop

c001b0ae <ISO9660::exists(char const*)>:
c001b0ae:	83 ec 18             	sub    esp,0x18
c001b0b1:	68 db 3e 02 c0       	push   0xc0023edb
c001b0b6:	e8 db 3c ff ff       	call   c000ed96 <KePanic(char const*)>
c001b0bb:	31 c0                	xor    eax,eax
c001b0bd:	83 c4 1c             	add    esp,0x1c
c001b0c0:	c3                   	ret    
c001b0c1:	90                   	nop

c001b0c2 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001b0c2:	56                   	push   esi
c001b0c3:	53                   	push   ebx
c001b0c4:	53                   	push   ebx
c001b0c5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b0c9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b0cd:	85 db                	test   ebx,ebx
c001b0cf:	0f 84 ca 00 00 00    	je     c001b19f <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001b0d5:	85 f6                	test   esi,esi
c001b0d7:	0f 84 c2 00 00 00    	je     c001b19f <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001b0dd:	b8 03 00 00 00       	mov    eax,0x3
c001b0e2:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001b0e7:	0f 85 b7 00 00 00    	jne    c001b1a4 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001b0ed:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001b0ef:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b0f6:	38 0d a0 d8 02 c0    	cmp    BYTE PTR ds:0xc002d8a0,cl
c001b0fc:	74 1b                	je     c001b119 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001b0fe:	85 c0                	test   eax,eax
c001b100:	74 10                	je     c001b112 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001b102:	83 ec 0c             	sub    esp,0xc
c001b105:	68 f9 3e 02 c0       	push   0xc0023ef9
c001b10a:	e8 87 3c ff ff       	call   c000ed96 <KePanic(char const*)>
c001b10f:	83 c4 10             	add    esp,0x10
c001b112:	8a 03                	mov    al,BYTE PTR [ebx]
c001b114:	a2 a0 d8 02 c0       	mov    ds:0xc002d8a0,al
c001b119:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b11c:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001b123:	85 c0                	test   eax,eax
c001b125:	74 09                	je     c001b130 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001b127:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001b12e:	74 48                	je     c001b178 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001b130:	83 ec 0c             	sub    esp,0xc
c001b133:	68 09 3f 02 c0       	push   0xc0023f09
c001b138:	e8 27 be fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001b13d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b140:	83 c4 10             	add    esp,0x10
c001b143:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001b14a:	85 c0                	test   eax,eax
c001b14c:	74 17                	je     c001b165 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001b14e:	83 ec 0c             	sub    esp,0xc
c001b151:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001b158:	68 29 3f 02 c0       	push   0xc0023f29
c001b15d:	e8 02 be fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001b162:	83 c4 10             	add    esp,0x10
c001b165:	83 ec 0c             	sub    esp,0xc
c001b168:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b16f:	50                   	push   eax
c001b170:	e8 b9 ba fe ff       	call   c0006c2e <init_percd>
c001b175:	83 c4 10             	add    esp,0x10
c001b178:	83 c3 03             	add    ebx,0x3
c001b17b:	51                   	push   ecx
c001b17c:	51                   	push   ecx
c001b17d:	6a 00                	push   0x0
c001b17f:	53                   	push   ebx
c001b180:	e8 70 b5 fe ff       	call   c00066f5 <iso_open>
c001b185:	83 c4 10             	add    esp,0x10
c001b188:	89 c2                	mov    edx,eax
c001b18a:	b8 01 00 00 00       	mov    eax,0x1
c001b18f:	83 fa ff             	cmp    edx,0xffffffff
c001b192:	74 10                	je     c001b1a4 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001b194:	83 c2 32             	add    edx,0x32
c001b197:	31 c0                	xor    eax,eax
c001b199:	01 d2                	add    edx,edx
c001b19b:	89 16                	mov    DWORD PTR [esi],edx
c001b19d:	eb 05                	jmp    c001b1a4 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001b19f:	b8 04 00 00 00       	mov    eax,0x4
c001b1a4:	5a                   	pop    edx
c001b1a5:	5b                   	pop    ebx
c001b1a6:	5e                   	pop    esi
c001b1a7:	c3                   	ret    

c001b1a8 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001b1a8:	53                   	push   ebx
c001b1a9:	83 ec 08             	sub    esp,0x8
c001b1ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b1b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b1b4:	85 c0                	test   eax,eax
c001b1b6:	74 2d                	je     c001b1e5 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001b1b8:	85 db                	test   ebx,ebx
c001b1ba:	74 29                	je     c001b1e5 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001b1bc:	b9 02 00 00 00       	mov    ecx,0x2
c001b1c1:	52                   	push   edx
c001b1c2:	99                   	cdq    
c001b1c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1c7:	f7 f9                	idiv   ecx
c001b1c9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b1cd:	83 e8 32             	sub    eax,0x32
c001b1d0:	50                   	push   eax
c001b1d1:	e8 c7 b5 fe ff       	call   c000679d <iso_read>
c001b1d6:	83 c4 10             	add    esp,0x10
c001b1d9:	89 03                	mov    DWORD PTR [ebx],eax
c001b1db:	09 d0                	or     eax,edx
c001b1dd:	0f 94 c0             	sete   al
c001b1e0:	0f b6 c0             	movzx  eax,al
c001b1e3:	eb 05                	jmp    c001b1ea <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001b1e5:	b8 04 00 00 00       	mov    eax,0x4
c001b1ea:	83 c4 08             	add    esp,0x8
c001b1ed:	5b                   	pop    ebx
c001b1ee:	c3                   	ret    
c001b1ef:	90                   	nop

c001b1f0 <ISO9660::seek(void*, unsigned long long)>:
c001b1f0:	57                   	push   edi
c001b1f1:	56                   	push   esi
c001b1f2:	b8 04 00 00 00       	mov    eax,0x4
c001b1f7:	51                   	push   ecx
c001b1f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b1fc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b200:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b204:	85 d2                	test   edx,edx
c001b206:	74 26                	je     c001b22e <ISO9660::seek(void*, unsigned long long)+0x3e>
c001b208:	6a 00                	push   0x0
c001b20a:	b9 02 00 00 00       	mov    ecx,0x2
c001b20f:	57                   	push   edi
c001b210:	89 d0                	mov    eax,edx
c001b212:	56                   	push   esi
c001b213:	99                   	cdq    
c001b214:	f7 f9                	idiv   ecx
c001b216:	83 e8 32             	sub    eax,0x32
c001b219:	50                   	push   eax
c001b21a:	e8 94 b6 fe ff       	call   c00068b3 <iso_seek>
c001b21f:	83 c4 10             	add    esp,0x10
c001b222:	31 f0                	xor    eax,esi
c001b224:	31 fa                	xor    edx,edi
c001b226:	09 d0                	or     eax,edx
c001b228:	0f 95 c0             	setne  al
c001b22b:	0f b6 c0             	movzx  eax,al
c001b22e:	5a                   	pop    edx
c001b22f:	5e                   	pop    esi
c001b230:	5f                   	pop    edi
c001b231:	c3                   	ret    

c001b232 <ISO9660::tell(void*, unsigned long long*)>:
c001b232:	53                   	push   ebx
c001b233:	83 ec 08             	sub    esp,0x8
c001b236:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b23a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b23e:	85 c0                	test   eax,eax
c001b240:	74 24                	je     c001b266 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001b242:	85 db                	test   ebx,ebx
c001b244:	74 20                	je     c001b266 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001b246:	83 ec 0c             	sub    esp,0xc
c001b249:	b9 02 00 00 00       	mov    ecx,0x2
c001b24e:	99                   	cdq    
c001b24f:	f7 f9                	idiv   ecx
c001b251:	83 e8 32             	sub    eax,0x32
c001b254:	50                   	push   eax
c001b255:	e8 dd b6 fe ff       	call   c0006937 <iso_tell>
c001b25a:	83 c4 10             	add    esp,0x10
c001b25d:	89 03                	mov    DWORD PTR [ebx],eax
c001b25f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001b262:	31 c0                	xor    eax,eax
c001b264:	eb 05                	jmp    c001b26b <ISO9660::tell(void*, unsigned long long*)+0x39>
c001b266:	b8 04 00 00 00       	mov    eax,0x4
c001b26b:	83 c4 08             	add    esp,0x8
c001b26e:	5b                   	pop    ebx
c001b26f:	c3                   	ret    

c001b270 <ISO9660::stat(void*, unsigned long long*)>:
c001b270:	53                   	push   ebx
c001b271:	83 ec 14             	sub    esp,0x14
c001b274:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b278:	68 4d 3f 02 c0       	push   0xc0023f4d
c001b27d:	e8 e2 bc fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001b282:	83 c4 10             	add    esp,0x10
c001b285:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b28a:	74 2c                	je     c001b2b8 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001b28c:	85 db                	test   ebx,ebx
c001b28e:	74 28                	je     c001b2b8 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001b290:	83 ec 0c             	sub    esp,0xc
c001b293:	b9 02 00 00 00       	mov    ecx,0x2
c001b298:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b29c:	99                   	cdq    
c001b29d:	f7 f9                	idiv   ecx
c001b29f:	83 e8 32             	sub    eax,0x32
c001b2a2:	50                   	push   eax
c001b2a3:	e8 c0 b6 fe ff       	call   c0006968 <iso_total>
c001b2a8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b2af:	89 03                	mov    DWORD PTR [ebx],eax
c001b2b1:	83 c4 10             	add    esp,0x10
c001b2b4:	31 c0                	xor    eax,eax
c001b2b6:	eb 05                	jmp    c001b2bd <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001b2b8:	b8 04 00 00 00       	mov    eax,0x4
c001b2bd:	83 c4 08             	add    esp,0x8
c001b2c0:	5b                   	pop    ebx
c001b2c1:	c3                   	ret    

c001b2c2 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001b2c2:	55                   	push   ebp
c001b2c3:	57                   	push   edi
c001b2c4:	56                   	push   esi
c001b2c5:	53                   	push   ebx
c001b2c6:	83 ec 18             	sub    esp,0x18
c001b2c9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b2cd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001b2d1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b2d5:	68 55 3f 02 c0       	push   0xc0023f55
c001b2da:	e8 85 bc fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001b2df:	83 c4 10             	add    esp,0x10
c001b2e2:	85 ff                	test   edi,edi
c001b2e4:	0f 94 c0             	sete   al
c001b2e7:	85 f6                	test   esi,esi
c001b2e9:	0f 94 c2             	sete   dl
c001b2ec:	09 d0                	or     eax,edx
c001b2ee:	a8 01                	test   al,0x1
c001b2f0:	0f 85 dd 00 00 00    	jne    c001b3d3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001b2f6:	85 db                	test   ebx,ebx
c001b2f8:	0f 84 d5 00 00 00    	je     c001b3d3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001b2fe:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b301:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001b307:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001b30e:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b315:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001b317:	38 0d a0 d8 02 c0    	cmp    BYTE PTR ds:0xc002d8a0,cl
c001b31d:	74 1b                	je     c001b33a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001b31f:	85 c0                	test   eax,eax
c001b321:	74 10                	je     c001b333 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001b323:	83 ec 0c             	sub    esp,0xc
c001b326:	68 f9 3e 02 c0       	push   0xc0023ef9
c001b32b:	e8 66 3a ff ff       	call   c000ed96 <KePanic(char const*)>
c001b330:	83 c4 10             	add    esp,0x10
c001b333:	8a 03                	mov    al,BYTE PTR [ebx]
c001b335:	a2 a0 d8 02 c0       	mov    ds:0xc002d8a0,al
c001b33a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b33d:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001b344:	85 c0                	test   eax,eax
c001b346:	74 09                	je     c001b351 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001b348:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001b34f:	74 51                	je     c001b3a2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001b351:	83 ec 0c             	sub    esp,0xc
c001b354:	68 5d 3f 02 c0       	push   0xc0023f5d
c001b359:	e8 06 bc fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001b35e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b361:	83 c4 10             	add    esp,0x10
c001b364:	83 3c 85 7c a6 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd5984],0x0
c001b36c:	74 21                	je     c001b38f <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001b36e:	83 ec 0c             	sub    esp,0xc
c001b371:	68 7d 3f 02 c0       	push   0xc0023f7d
c001b376:	e8 e9 bb fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001b37b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b37e:	83 c4 10             	add    esp,0x10
c001b381:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001b388:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001b38f:	83 ec 0c             	sub    esp,0xc
c001b392:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b399:	50                   	push   eax
c001b39a:	e8 8f b8 fe ff       	call   c0006c2e <init_percd>
c001b39f:	83 c4 10             	add    esp,0x10
c001b3a2:	83 c3 03             	add    ebx,0x3
c001b3a5:	52                   	push   edx
c001b3a6:	52                   	push   edx
c001b3a7:	6a 00                	push   0x0
c001b3a9:	53                   	push   ebx
c001b3aa:	e8 46 b3 fe ff       	call   c00066f5 <iso_open>
c001b3af:	83 c4 10             	add    esp,0x10
c001b3b2:	89 c5                	mov    ebp,eax
c001b3b4:	83 f8 ff             	cmp    eax,0xffffffff
c001b3b7:	75 21                	jne    c001b3da <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001b3b9:	50                   	push   eax
c001b3ba:	50                   	push   eax
c001b3bb:	6a 01                	push   0x1
c001b3bd:	53                   	push   ebx
c001b3be:	e8 32 b3 fe ff       	call   c00066f5 <iso_open>
c001b3c3:	83 c4 10             	add    esp,0x10
c001b3c6:	ba 02 00 00 00       	mov    edx,0x2
c001b3cb:	40                   	inc    eax
c001b3cc:	74 2b                	je     c001b3f9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001b3ce:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001b3d1:	eb 24                	jmp    c001b3f7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001b3d3:	ba 04 00 00 00       	mov    edx,0x4
c001b3d8:	eb 1f                	jmp    c001b3f9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001b3da:	83 ec 0c             	sub    esp,0xc
c001b3dd:	50                   	push   eax
c001b3de:	e8 85 b5 fe ff       	call   c0006968 <iso_total>
c001b3e3:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001b3ea:	89 07                	mov    DWORD PTR [edi],eax
c001b3ec:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b3ef:	e8 8b b3 fe ff       	call   c000677f <iso_close>
c001b3f4:	83 c4 10             	add    esp,0x10
c001b3f7:	31 d2                	xor    edx,edx
c001b3f9:	83 c4 0c             	add    esp,0xc
c001b3fc:	89 d0                	mov    eax,edx
c001b3fe:	5b                   	pop    ebx
c001b3ff:	5e                   	pop    esi
c001b400:	5f                   	pop    edi
c001b401:	5d                   	pop    ebp
c001b402:	c3                   	ret    
c001b403:	90                   	nop

c001b404 <ISO9660::close(void*)>:
c001b404:	83 ec 0c             	sub    esp,0xc
c001b407:	b8 04 00 00 00       	mov    eax,0x4
c001b40c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b410:	85 d2                	test   edx,edx
c001b412:	74 1b                	je     c001b42f <ISO9660::close(void*)+0x2b>
c001b414:	83 ec 0c             	sub    esp,0xc
c001b417:	b9 02 00 00 00       	mov    ecx,0x2
c001b41c:	89 d0                	mov    eax,edx
c001b41e:	99                   	cdq    
c001b41f:	f7 f9                	idiv   ecx
c001b421:	83 e8 32             	sub    eax,0x32
c001b424:	50                   	push   eax
c001b425:	e8 55 b3 fe ff       	call   c000677f <iso_close>
c001b42a:	83 c4 10             	add    esp,0x10
c001b42d:	31 c0                	xor    eax,eax
c001b42f:	83 c4 0c             	add    esp,0xc
c001b432:	c3                   	ret    
c001b433:	90                   	nop

c001b434 <ISO9660::openDir(char const*, void**)>:
c001b434:	56                   	push   esi
c001b435:	53                   	push   ebx
c001b436:	50                   	push   eax
c001b437:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b43b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b43f:	85 db                	test   ebx,ebx
c001b441:	0f 84 bd 00 00 00    	je     c001b504 <ISO9660::openDir(char const*, void**)+0xd0>
c001b447:	85 f6                	test   esi,esi
c001b449:	0f 84 b5 00 00 00    	je     c001b504 <ISO9660::openDir(char const*, void**)+0xd0>
c001b44f:	8a 13                	mov    dl,BYTE PTR [ebx]
c001b451:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b458:	38 15 a0 d8 02 c0    	cmp    BYTE PTR ds:0xc002d8a0,dl
c001b45e:	74 1b                	je     c001b47b <ISO9660::openDir(char const*, void**)+0x47>
c001b460:	85 c0                	test   eax,eax
c001b462:	74 10                	je     c001b474 <ISO9660::openDir(char const*, void**)+0x40>
c001b464:	83 ec 0c             	sub    esp,0xc
c001b467:	68 f9 3e 02 c0       	push   0xc0023ef9
c001b46c:	e8 25 39 ff ff       	call   c000ed96 <KePanic(char const*)>
c001b471:	83 c4 10             	add    esp,0x10
c001b474:	8a 03                	mov    al,BYTE PTR [ebx]
c001b476:	a2 a0 d8 02 c0       	mov    ds:0xc002d8a0,al
c001b47b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b47e:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001b485:	85 c0                	test   eax,eax
c001b487:	74 10                	je     c001b499 <ISO9660::openDir(char const*, void**)+0x65>
c001b489:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001b490:	74 1a                	je     c001b4ac <ISO9660::openDir(char const*, void**)+0x78>
c001b492:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001b499:	83 ec 0c             	sub    esp,0xc
c001b49c:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b4a3:	50                   	push   eax
c001b4a4:	e8 85 b7 fe ff       	call   c0006c2e <init_percd>
c001b4a9:	83 c4 10             	add    esp,0x10
c001b4ac:	83 c3 03             	add    ebx,0x3
c001b4af:	50                   	push   eax
c001b4b0:	50                   	push   eax
c001b4b1:	6a 01                	push   0x1
c001b4b3:	53                   	push   ebx
c001b4b4:	e8 3c b2 fe ff       	call   c00066f5 <iso_open>
c001b4b9:	83 c4 10             	add    esp,0x10
c001b4bc:	89 c3                	mov    ebx,eax
c001b4be:	83 f8 ff             	cmp    eax,0xffffffff
c001b4c1:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001b4c6:	75 1c                	jne    c001b4e4 <ISO9660::openDir(char const*, void**)+0xb0>
c001b4c8:	53                   	push   ebx
c001b4c9:	53                   	push   ebx
c001b4ca:	68 a1 3f 02 c0       	push   0xc0023fa1
c001b4cf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b4d5:	e8 b4 60 ff ff       	call   c001158e <VgaText::puts(char const*)>
c001b4da:	83 c4 10             	add    esp,0x10
c001b4dd:	b8 01 00 00 00       	mov    eax,0x1
c001b4e2:	eb 25                	jmp    c001b509 <ISO9660::openDir(char const*, void**)+0xd5>
c001b4e4:	01 db                	add    ebx,ebx
c001b4e6:	51                   	push   ecx
c001b4e7:	83 c3 65             	add    ebx,0x65
c001b4ea:	51                   	push   ecx
c001b4eb:	68 b4 3f 02 c0       	push   0xc0023fb4
c001b4f0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b4f6:	e8 93 60 ff ff       	call   c001158e <VgaText::puts(char const*)>
c001b4fb:	89 1e                	mov    DWORD PTR [esi],ebx
c001b4fd:	83 c4 10             	add    esp,0x10
c001b500:	31 c0                	xor    eax,eax
c001b502:	eb 05                	jmp    c001b509 <ISO9660::openDir(char const*, void**)+0xd5>
c001b504:	b8 04 00 00 00       	mov    eax,0x4
c001b509:	5a                   	pop    edx
c001b50a:	5b                   	pop    ebx
c001b50b:	5e                   	pop    esi
c001b50c:	c3                   	ret    
c001b50d:	90                   	nop

c001b50e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b50e:	55                   	push   ebp
c001b50f:	57                   	push   edi
c001b510:	56                   	push   esi
c001b511:	53                   	push   ebx
c001b512:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b518:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001b51f:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b526:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001b52e:	0f 84 e7 00 00 00    	je     c001b61b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001b534:	85 db                	test   ebx,ebx
c001b536:	0f 84 df 00 00 00    	je     c001b61b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001b53c:	83 ec 0c             	sub    esp,0xc
c001b53f:	68 c7 3f 02 c0       	push   0xc0023fc7
c001b544:	e8 1b ba fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001b549:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001b550:	b9 02 00 00 00       	mov    ecx,0x2
c001b555:	99                   	cdq    
c001b556:	f7 f9                	idiv   ecx
c001b558:	83 e8 32             	sub    eax,0x32
c001b55b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b55e:	e8 57 b4 fe ff       	call   c00069ba <iso_readdir>
c001b563:	83 c4 10             	add    esp,0x10
c001b566:	89 c6                	mov    esi,eax
c001b568:	85 c0                	test   eax,eax
c001b56a:	75 37                	jne    c001b5a3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001b56c:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001b571:	56                   	push   esi
c001b572:	56                   	push   esi
c001b573:	68 d2 3f 02 c0       	push   0xc0023fd2
c001b578:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b57e:	e8 0b 60 ff ff       	call   c001158e <VgaText::puts(char const*)>
c001b583:	83 c4 0c             	add    esp,0xc
c001b586:	68 10 01 00 00       	push   0x110
c001b58b:	6a 00                	push   0x0
c001b58d:	57                   	push   edi
c001b58e:	e8 5d 4f fe ff       	call   c00004f0 <memset>
c001b593:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001b599:	83 c4 10             	add    esp,0x10
c001b59c:	b8 01 00 00 00       	mov    eax,0x1
c001b5a1:	eb 7d                	jmp    c001b620 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001b5a3:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001b5a9:	8d 68 08             	lea    ebp,[eax+0x8]
c001b5ac:	83 ec 0c             	sub    esp,0xc
c001b5af:	55                   	push   ebp
c001b5b0:	e8 bb 4f fe ff       	call   c0000570 <strlen>
c001b5b5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001b5bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b5c1:	83 c4 10             	add    esp,0x10
c001b5c4:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001b5c8:	75 0a                	jne    c001b5d4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001b5ca:	b8 02 00 00 00       	mov    eax,0x2
c001b5cf:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001b5d2:	74 05                	je     c001b5d9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001b5d4:	b8 01 00 00 00       	mov    eax,0x1
c001b5d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b5dd:	50                   	push   eax
c001b5de:	50                   	push   eax
c001b5df:	55                   	push   ebp
c001b5e0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b5e4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b5e8:	50                   	push   eax
c001b5e9:	e8 52 50 fe ff       	call   c0000640 <strcpy>
c001b5ee:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b5f5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b5f7:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001b5fd:	5a                   	pop    edx
c001b5fe:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001b603:	59                   	pop    ecx
c001b604:	68 e5 3f 02 c0       	push   0xc0023fe5
c001b609:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b60f:	e8 7a 5f ff ff       	call   c001158e <VgaText::puts(char const*)>
c001b614:	83 c4 10             	add    esp,0x10
c001b617:	31 c0                	xor    eax,eax
c001b619:	eb 05                	jmp    c001b620 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001b61b:	b8 04 00 00 00       	mov    eax,0x4
c001b620:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b626:	5b                   	pop    ebx
c001b627:	5e                   	pop    esi
c001b628:	5f                   	pop    edi
c001b629:	5d                   	pop    ebp
c001b62a:	c3                   	ret    

c001b62b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b62b:	57                   	push   edi
c001b62c:	56                   	push   esi
c001b62d:	53                   	push   ebx
c001b62e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b632:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b636:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b63a:	39 35 a4 d8 02 c0    	cmp    DWORD PTR ds:0xc002d8a4,esi
c001b640:	0f be cb             	movsx  ecx,bl
c001b643:	75 0b                	jne    c001b650 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001b645:	0f be 05 84 52 02 c0 	movsx  eax,BYTE PTR ds:0xc0025284
c001b64c:	39 c8                	cmp    eax,ecx
c001b64e:	74 47                	je     c001b697 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001b650:	83 ec 0c             	sub    esp,0xc
c001b653:	31 d2                	xor    edx,edx
c001b655:	68 c0 d8 02 c0       	push   0xc002d8c0
c001b65a:	6a 01                	push   0x1
c001b65c:	52                   	push   edx
c001b65d:	56                   	push   esi
c001b65e:	ff 34 8d 7c a6 02 c0 	push   DWORD PTR [ecx*4-0x3ffd5984]
c001b665:	e8 4e ea fe ff       	call   c000a0b8 <LogicalDisk::read(unsigned long long, int, void*)>
c001b66a:	83 c4 20             	add    esp,0x20
c001b66d:	85 c0                	test   eax,eax
c001b66f:	75 0e                	jne    c001b67f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001b671:	89 35 a4 d8 02 c0    	mov    DWORD PTR ds:0xc002d8a4,esi
c001b677:	88 1d 84 52 02 c0    	mov    BYTE PTR ds:0xc0025284,bl
c001b67d:	eb 18                	jmp    c001b697 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001b67f:	50                   	push   eax
c001b680:	68 00 08 00 00       	push   0x800
c001b685:	6a 00                	push   0x0
c001b687:	57                   	push   edi
c001b688:	e8 63 4e fe ff       	call   c00004f0 <memset>
c001b68d:	83 c4 10             	add    esp,0x10
c001b690:	b8 01 00 00 00       	mov    eax,0x1
c001b695:	eb 0e                	jmp    c001b6a5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001b697:	be c0 d8 02 c0       	mov    esi,0xc002d8c0
c001b69c:	b9 00 08 00 00       	mov    ecx,0x800
c001b6a1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b6a3:	31 c0                	xor    eax,eax
c001b6a5:	5b                   	pop    ebx
c001b6a6:	5e                   	pop    esi
c001b6a7:	5f                   	pop    edi
c001b6a8:	c3                   	ret    
c001b6a9:	90                   	nop

c001b6aa <ISO9660::tryMount(LogicalDisk*, int)>:
c001b6aa:	53                   	push   ebx
c001b6ab:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001b6b1:	c7 05 a4 d8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002d8a4,0xdeadbeef
c001b6bb:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001b6c2:	8d 58 41             	lea    ebx,[eax+0x41]
c001b6c5:	0f be db             	movsx  ebx,bl
c001b6c8:	53                   	push   ebx
c001b6c9:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b6cd:	50                   	push   eax
c001b6ce:	6a 10                	push   0x10
c001b6d0:	e8 56 ff ff ff       	call   c001b62b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b6d5:	83 c4 10             	add    esp,0x10
c001b6d8:	31 d2                	xor    edx,edx
c001b6da:	85 c0                	test   eax,eax
c001b6dc:	75 33                	jne    c001b711 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b6de:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b6e3:	75 2c                	jne    c001b711 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b6e5:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b6ea:	75 25                	jne    c001b711 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b6ec:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b6f1:	75 1e                	jne    c001b711 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b6f3:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b6f8:	75 17                	jne    c001b711 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b6fa:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b6ff:	75 10                	jne    c001b711 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b701:	83 ec 0c             	sub    esp,0xc
c001b704:	53                   	push   ebx
c001b705:	e8 24 b5 fe ff       	call   c0006c2e <init_percd>
c001b70a:	83 c4 10             	add    esp,0x10
c001b70d:	40                   	inc    eax
c001b70e:	0f 95 c2             	setne  dl
c001b711:	88 d0                	mov    al,dl
c001b713:	81 c4 08 08 00 00    	add    esp,0x808
c001b719:	5b                   	pop    ebx
c001b71a:	c3                   	ret    
c001b71b:	90                   	nop

c001b71c <ISO9660::ISO9660()>:
c001b71c:	83 ec 0c             	sub    esp,0xc
c001b71f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b723:	83 ec 0c             	sub    esp,0xc
c001b726:	50                   	push   eax
c001b727:	e8 44 c6 fe ff       	call   c0007d70 <Filesystem::Filesystem()>
c001b72c:	83 c4 10             	add    esp,0x10
c001b72f:	ba 00 40 02 c0       	mov    edx,0xc0024000
c001b734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b738:	89 10                	mov    DWORD PTR [eax],edx
c001b73a:	e8 01 b6 fe ff       	call   c0006d40 <fs_iso9660_init>
c001b73f:	90                   	nop
c001b740:	83 c4 0c             	add    esp,0xc
c001b743:	c3                   	ret    

c001b744 <SoundCard::beginPlayback()>:
c001b744:	c7 44 24 04 64 40 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024064
c001b74c:	e9 45 36 ff ff       	jmp    c000ed96 <KePanic(char const*)>
c001b751:	90                   	nop

c001b752 <SoundCard::stopPlayback()>:
c001b752:	c7 44 24 04 64 40 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024064
c001b75a:	e9 37 36 ff ff       	jmp    c000ed96 <KePanic(char const*)>
c001b75f:	90                   	nop

c001b760 <SoundCard::SoundCard(char const*)>:
c001b760:	83 ec 1c             	sub    esp,0x1c
c001b763:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b767:	83 ec 08             	sub    esp,0x8
c001b76a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b76e:	50                   	push   eax
c001b76f:	e8 50 da fe ff       	call   c00091c4 <Device::Device(char const*)>
c001b774:	83 c4 10             	add    esp,0x10
c001b777:	ba b0 40 02 c0       	mov    edx,0xc00240b0
c001b77c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b780:	89 10                	mov    DWORD PTR [eax],edx
c001b782:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b786:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b78d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b791:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001b79b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b79f:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001b7a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7ad:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001b7b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7bb:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001b7c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b7cd:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b7d2:	7f 1a                	jg     c001b7ee <SoundCard::SoundCard(char const*)+0x8e>
c001b7d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b7dc:	83 c2 54             	add    edx,0x54
c001b7df:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001b7e7:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001b7ec:	eb df                	jmp    c001b7cd <SoundCard::SoundCard(char const*)+0x6d>
c001b7ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7f2:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b7f9:	90                   	nop
c001b7fa:	83 c4 1c             	add    esp,0x1c
c001b7fd:	c3                   	ret    

c001b7fe <SoundCard::~SoundCard()>:
c001b7fe:	83 ec 0c             	sub    esp,0xc
c001b801:	ba b0 40 02 c0       	mov    edx,0xc00240b0
c001b806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b80a:	89 10                	mov    DWORD PTR [eax],edx
c001b80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b810:	83 ec 0c             	sub    esp,0xc
c001b813:	50                   	push   eax
c001b814:	e8 4b d7 fe ff       	call   c0008f64 <Device::~Device()>
c001b819:	83 c4 10             	add    esp,0x10
c001b81c:	90                   	nop
c001b81d:	83 c4 0c             	add    esp,0xc
c001b820:	c3                   	ret    
c001b821:	90                   	nop

c001b822 <SoundCard::~SoundCard()>:
c001b822:	83 ec 0c             	sub    esp,0xc
c001b825:	83 ec 0c             	sub    esp,0xc
c001b828:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b82c:	e8 cd ff ff ff       	call   c001b7fe <SoundCard::~SoundCard()>
c001b831:	83 c4 10             	add    esp,0x10
c001b834:	83 ec 08             	sub    esp,0x8
c001b837:	68 e8 01 00 00       	push   0x1e8
c001b83c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b840:	e8 0f 0f ff ff       	call   c000c754 <operator delete(void*, unsigned long)>
c001b845:	83 c4 10             	add    esp,0x10
c001b848:	83 c4 0c             	add    esp,0xc
c001b84b:	c3                   	ret    

c001b84c <SoundCard::configureRates(int, int, int)>:
c001b84c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b850:	31 c0                	xor    eax,eax
c001b852:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001b859:	75 20                	jne    c001b87b <SoundCard::configureRates(int, int, int)+0x2f>
c001b85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b85f:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001b865:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b869:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001b86f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b873:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001b879:	b0 01                	mov    al,0x1
c001b87b:	c3                   	ret    

c001b87c <SoundCard::getSamples16(int, short*)>:
c001b87c:	55                   	push   ebp
c001b87d:	57                   	push   edi
c001b87e:	31 ff                	xor    edi,edi
c001b880:	56                   	push   esi
c001b881:	53                   	push   ebx
c001b882:	31 db                	xor    ebx,ebx
c001b884:	83 ec 10             	sub    esp,0x10
c001b887:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b88b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b88f:	8d 04 36             	lea    eax,[esi+esi*1]
c001b892:	50                   	push   eax
c001b893:	6a 00                	push   0x0
c001b895:	55                   	push   ebp
c001b896:	e8 55 4c fe ff       	call   c00004f0 <memset>
c001b89b:	83 c4 10             	add    esp,0x10
c001b89e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8a2:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001b8a9:	85 c0                	test   eax,eax
c001b8ab:	74 1b                	je     c001b8c8 <SoundCard::getSamples16(int, short*)+0x4c>
c001b8ad:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001b8b1:	75 15                	jne    c001b8c8 <SoundCard::getSamples16(int, short*)+0x4c>
c001b8b3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b8b7:	55                   	push   ebp
c001b8b8:	56                   	push   esi
c001b8b9:	50                   	push   eax
c001b8ba:	e8 8d 03 00 00       	call   c001bc4c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001b8bf:	83 c4 10             	add    esp,0x10
c001b8c2:	39 c7                	cmp    edi,eax
c001b8c4:	7d 02                	jge    c001b8c8 <SoundCard::getSamples16(int, short*)+0x4c>
c001b8c6:	89 c7                	mov    edi,eax
c001b8c8:	43                   	inc    ebx
c001b8c9:	83 fb 20             	cmp    ebx,0x20
c001b8cc:	75 d0                	jne    c001b89e <SoundCard::getSamples16(int, short*)+0x22>
c001b8ce:	83 c4 0c             	add    esp,0xc
c001b8d1:	89 f8                	mov    eax,edi
c001b8d3:	5b                   	pop    ebx
c001b8d4:	5e                   	pop    esi
c001b8d5:	5f                   	pop    edi
c001b8d6:	5d                   	pop    ebp
c001b8d7:	c3                   	ret    

c001b8d8 <SoundCard::getSamples32(int, int*)>:
c001b8d8:	55                   	push   ebp
c001b8d9:	57                   	push   edi
c001b8da:	31 ff                	xor    edi,edi
c001b8dc:	56                   	push   esi
c001b8dd:	31 f6                	xor    esi,esi
c001b8df:	53                   	push   ebx
c001b8e0:	83 ec 10             	sub    esp,0x10
c001b8e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b8e7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b8eb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b8ef:	c1 e0 02             	shl    eax,0x2
c001b8f2:	50                   	push   eax
c001b8f3:	6a 00                	push   0x0
c001b8f5:	55                   	push   ebp
c001b8f6:	e8 f5 4b fe ff       	call   c00004f0 <memset>
c001b8fb:	83 c4 10             	add    esp,0x10
c001b8fe:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001b905:	85 c0                	test   eax,eax
c001b907:	74 1b                	je     c001b924 <SoundCard::getSamples32(int, int*)+0x4c>
c001b909:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001b90d:	75 15                	jne    c001b924 <SoundCard::getSamples32(int, int*)+0x4c>
c001b90f:	53                   	push   ebx
c001b910:	55                   	push   ebp
c001b911:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b915:	50                   	push   eax
c001b916:	e8 fd 03 00 00       	call   c001bd18 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001b91b:	83 c4 10             	add    esp,0x10
c001b91e:	39 c6                	cmp    esi,eax
c001b920:	7d 02                	jge    c001b924 <SoundCard::getSamples32(int, int*)+0x4c>
c001b922:	89 c6                	mov    esi,eax
c001b924:	47                   	inc    edi
c001b925:	83 ff 20             	cmp    edi,0x20
c001b928:	75 d4                	jne    c001b8fe <SoundCard::getSamples32(int, int*)+0x26>
c001b92a:	85 f6                	test   esi,esi
c001b92c:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001b933:	75 0f                	jne    c001b944 <SoundCard::getSamples32(int, int*)+0x6c>
c001b935:	85 c0                	test   eax,eax
c001b937:	74 1b                	je     c001b954 <SoundCard::getSamples32(int, int*)+0x7c>
c001b939:	83 ec 0c             	sub    esp,0xc
c001b93c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b93e:	53                   	push   ebx
c001b93f:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001b942:	eb 0d                	jmp    c001b951 <SoundCard::getSamples32(int, int*)+0x79>
c001b944:	85 c0                	test   eax,eax
c001b946:	75 0c                	jne    c001b954 <SoundCard::getSamples32(int, int*)+0x7c>
c001b948:	83 ec 0c             	sub    esp,0xc
c001b94b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b94d:	53                   	push   ebx
c001b94e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001b951:	83 c4 10             	add    esp,0x10
c001b954:	83 c4 0c             	add    esp,0xc
c001b957:	89 f0                	mov    eax,esi
c001b959:	5b                   	pop    ebx
c001b95a:	5e                   	pop    esi
c001b95b:	5f                   	pop    edi
c001b95c:	5d                   	pop    ebp
c001b95d:	c3                   	ret    

c001b95e <SoundCard::addChannel(SoundPort*)>:
c001b95e:	83 ec 0c             	sub    esp,0xc
c001b961:	31 c0                	xor    eax,eax
c001b963:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b967:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001b96f:	74 1b                	je     c001b98c <SoundCard::addChannel(SoundPort*)+0x2e>
c001b971:	40                   	inc    eax
c001b972:	83 f8 20             	cmp    eax,0x20
c001b975:	75 f0                	jne    c001b967 <SoundCard::addChannel(SoundPort*)+0x9>
c001b977:	83 ec 0c             	sub    esp,0xc
c001b97a:	68 89 40 02 c0       	push   0xc0024089
c001b97f:	e8 12 34 ff ff       	call   c000ed96 <KePanic(char const*)>
c001b984:	83 c4 10             	add    esp,0x10
c001b987:	83 c8 ff             	or     eax,0xffffffff
c001b98a:	eb 0b                	jmp    c001b997 <SoundCard::addChannel(SoundPort*)+0x39>
c001b98c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b990:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001b997:	83 c4 0c             	add    esp,0xc
c001b99a:	c3                   	ret    
c001b99b:	90                   	nop

c001b99c <SoundCard::removeChannel(int)>:
c001b99c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b9a4:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001b9af:	c3                   	ret    

c001b9b0 <SoundPort::SoundPort(int, int, int, int)>:
c001b9b0:	83 ec 0c             	sub    esp,0xc
c001b9b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9b7:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001b9be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9c2:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001b9c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9ca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b9ce:	89 10                	mov    DWORD PTR [eax],edx
c001b9d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b9d8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b9db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9df:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b9e3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001b9e6:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001b9eb:	75 13                	jne    c001ba00 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001b9ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9f1:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9f3:	05 a0 0f 00 00       	add    eax,0xfa0
c001b9f8:	01 c0                	add    eax,eax
c001b9fa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b9fe:	66 90                	xchg   ax,ax
c001ba00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba04:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ba08:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001ba0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba0f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001ba16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba1a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ba1d:	c1 e0 02             	shl    eax,0x2
c001ba20:	83 ec 0c             	sub    esp,0xc
c001ba23:	50                   	push   eax
c001ba24:	e8 26 30 ff ff       	call   c000ea4f <malloc>
c001ba29:	83 c4 10             	add    esp,0x10
c001ba2c:	89 c2                	mov    edx,eax
c001ba2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba32:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ba35:	90                   	nop
c001ba36:	83 c4 0c             	add    esp,0xc
c001ba39:	c3                   	ret    
c001ba3a:	66 90                	xchg   ax,ax

c001ba3c <SoundPort::~SoundPort()>:
c001ba3c:	83 ec 0c             	sub    esp,0xc
c001ba3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ba46:	85 c0                	test   eax,eax
c001ba48:	74 1e                	je     c001ba68 <SoundPort::~SoundPort()+0x2c>
c001ba4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba4e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ba51:	83 ec 0c             	sub    esp,0xc
c001ba54:	50                   	push   eax
c001ba55:	e8 05 30 ff ff       	call   c000ea5f <free>
c001ba5a:	83 c4 10             	add    esp,0x10
c001ba5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba61:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ba68:	90                   	nop
c001ba69:	83 c4 0c             	add    esp,0xc
c001ba6c:	c3                   	ret    
c001ba6d:	90                   	nop
c001ba6e:	66 90                	xchg   ax,ax

c001ba70 <SoundPort::unpause()>:
c001ba70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba74:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001ba78:	c3                   	ret    
c001ba79:	90                   	nop
c001ba7a:	66 90                	xchg   ax,ax

c001ba7c <SoundPort::pause()>:
c001ba7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba80:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ba84:	c3                   	ret    
c001ba85:	90                   	nop
c001ba86:	66 90                	xchg   ax,ax

c001ba88 <SoundPort::getBufferUsed()>:
c001ba88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba8c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ba8f:	c3                   	ret    

c001ba90 <SoundPort::getBufferSize()>:
c001ba90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba94:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ba97:	c3                   	ret    

c001ba98 <SoundPort::buffer8(signed char*, int)>:
c001ba98:	55                   	push   ebp
c001ba99:	57                   	push   edi
c001ba9a:	56                   	push   esi
c001ba9b:	53                   	push   ebx
c001ba9c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001baa0:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001baa4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001baa7:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001baaa:	74 70                	je     c001bb1c <SoundPort::buffer8(signed char*, int)+0x84>
c001baac:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bab0:	85 c9                	test   ecx,ecx
c001bab2:	7e 68                	jle    c001bb1c <SoundPort::buffer8(signed char*, int)+0x84>
c001bab4:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001bab8:	8d 48 01             	lea    ecx,[eax+0x1]
c001babb:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001babe:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001bac1:	89 f1                	mov    ecx,esi
c001bac3:	c1 e1 18             	shl    ecx,0x18
c001bac6:	29 f1                	sub    ecx,esi
c001bac8:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001bacb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bace:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001bad1:	74 51                	je     c001bb24 <SoundPort::buffer8(signed char*, int)+0x8c>
c001bad3:	31 ff                	xor    edi,edi
c001bad5:	eb 25                	jmp    c001bafc <SoundPort::buffer8(signed char*, int)+0x64>
c001bad7:	90                   	nop
c001bad8:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001badd:	8d 59 01             	lea    ebx,[ecx+0x1]
c001bae0:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001bae3:	89 f3                	mov    ebx,esi
c001bae5:	c1 e3 18             	shl    ebx,0x18
c001bae8:	29 f3                	sub    ebx,esi
c001baea:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001baed:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001baf0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001baf3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001baf6:	74 1c                	je     c001bb14 <SoundPort::buffer8(signed char*, int)+0x7c>
c001baf8:	89 c7                	mov    edi,eax
c001bafa:	66 90                	xchg   ax,ax
c001bafc:	8d 47 01             	lea    eax,[edi+0x1]
c001baff:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001bb03:	75 d3                	jne    c001bad8 <SoundPort::buffer8(signed char*, int)+0x40>
c001bb05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bb09:	8d 76 00             	lea    esi,[esi+0x0]
c001bb0c:	5b                   	pop    ebx
c001bb0d:	5e                   	pop    esi
c001bb0e:	5f                   	pop    edi
c001bb0f:	5d                   	pop    ebp
c001bb10:	c3                   	ret    
c001bb11:	8d 76 00             	lea    esi,[esi+0x0]
c001bb14:	5b                   	pop    ebx
c001bb15:	8d 47 02             	lea    eax,[edi+0x2]
c001bb18:	5e                   	pop    esi
c001bb19:	5f                   	pop    edi
c001bb1a:	5d                   	pop    ebp
c001bb1b:	c3                   	ret    
c001bb1c:	5b                   	pop    ebx
c001bb1d:	31 c0                	xor    eax,eax
c001bb1f:	5e                   	pop    esi
c001bb20:	5f                   	pop    edi
c001bb21:	5d                   	pop    ebp
c001bb22:	c3                   	ret    
c001bb23:	90                   	nop
c001bb24:	b8 01 00 00 00       	mov    eax,0x1
c001bb29:	eb e1                	jmp    c001bb0c <SoundPort::buffer8(signed char*, int)+0x74>
c001bb2b:	90                   	nop

c001bb2c <SoundPort::buffer16(short*, int)>:
c001bb2c:	55                   	push   ebp
c001bb2d:	57                   	push   edi
c001bb2e:	56                   	push   esi
c001bb2f:	53                   	push   ebx
c001bb30:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bb34:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001bb38:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001bb3b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001bb3e:	74 70                	je     c001bbb0 <SoundPort::buffer16(short*, int)+0x84>
c001bb40:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bb44:	85 c9                	test   ecx,ecx
c001bb46:	7e 68                	jle    c001bbb0 <SoundPort::buffer16(short*, int)+0x84>
c001bb48:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001bb4c:	8d 48 01             	lea    ecx,[eax+0x1]
c001bb4f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001bb52:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001bb55:	89 f1                	mov    ecx,esi
c001bb57:	c1 e1 10             	shl    ecx,0x10
c001bb5a:	29 f1                	sub    ecx,esi
c001bb5c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001bb5f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bb62:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001bb65:	74 51                	je     c001bbb8 <SoundPort::buffer16(short*, int)+0x8c>
c001bb67:	31 ff                	xor    edi,edi
c001bb69:	eb 25                	jmp    c001bb90 <SoundPort::buffer16(short*, int)+0x64>
c001bb6b:	90                   	nop
c001bb6c:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001bb71:	8d 59 01             	lea    ebx,[ecx+0x1]
c001bb74:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001bb77:	89 f3                	mov    ebx,esi
c001bb79:	c1 e3 10             	shl    ebx,0x10
c001bb7c:	29 f3                	sub    ebx,esi
c001bb7e:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001bb81:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001bb84:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bb87:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001bb8a:	74 1c                	je     c001bba8 <SoundPort::buffer16(short*, int)+0x7c>
c001bb8c:	89 c7                	mov    edi,eax
c001bb8e:	66 90                	xchg   ax,ax
c001bb90:	8d 47 01             	lea    eax,[edi+0x1]
c001bb93:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001bb97:	75 d3                	jne    c001bb6c <SoundPort::buffer16(short*, int)+0x40>
c001bb99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bb9d:	8d 76 00             	lea    esi,[esi+0x0]
c001bba0:	5b                   	pop    ebx
c001bba1:	5e                   	pop    esi
c001bba2:	5f                   	pop    edi
c001bba3:	5d                   	pop    ebp
c001bba4:	c3                   	ret    
c001bba5:	8d 76 00             	lea    esi,[esi+0x0]
c001bba8:	5b                   	pop    ebx
c001bba9:	8d 47 02             	lea    eax,[edi+0x2]
c001bbac:	5e                   	pop    esi
c001bbad:	5f                   	pop    edi
c001bbae:	5d                   	pop    ebp
c001bbaf:	c3                   	ret    
c001bbb0:	5b                   	pop    ebx
c001bbb1:	31 c0                	xor    eax,eax
c001bbb3:	5e                   	pop    esi
c001bbb4:	5f                   	pop    edi
c001bbb5:	5d                   	pop    ebp
c001bbb6:	c3                   	ret    
c001bbb7:	90                   	nop
c001bbb8:	b8 01 00 00 00       	mov    eax,0x1
c001bbbd:	eb e1                	jmp    c001bba0 <SoundPort::buffer16(short*, int)+0x74>
c001bbbf:	90                   	nop

c001bbc0 <SoundPort::buffer32(int*, int)>:
c001bbc0:	55                   	push   ebp
c001bbc1:	57                   	push   edi
c001bbc2:	56                   	push   esi
c001bbc3:	53                   	push   ebx
c001bbc4:	83 ec 04             	sub    esp,0x4
c001bbc7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bbcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbcf:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bbd2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001bbd6:	89 04 24             	mov    DWORD PTR [esp],eax
c001bbd9:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001bbdc:	74 5a                	je     c001bc38 <SoundPort::buffer32(int*, int)+0x78>
c001bbde:	85 c0                	test   eax,eax
c001bbe0:	7e 56                	jle    c001bc38 <SoundPort::buffer32(int*, int)+0x78>
c001bbe2:	8d 71 01             	lea    esi,[ecx+0x1]
c001bbe5:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001bbe8:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001bbeb:	8b 37                	mov    esi,DWORD PTR [edi]
c001bbed:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001bbf0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bbf3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001bbf6:	74 4c                	je     c001bc44 <SoundPort::buffer32(int*, int)+0x84>
c001bbf8:	31 f6                	xor    esi,esi
c001bbfa:	eb 1c                	jmp    c001bc18 <SoundPort::buffer32(int*, int)+0x58>
c001bbfc:	8d 69 01             	lea    ebp,[ecx+0x1]
c001bbff:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001bc02:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001bc05:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001bc08:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001bc0c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bc0f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001bc12:	74 18                	je     c001bc2c <SoundPort::buffer32(int*, int)+0x6c>
c001bc14:	89 de                	mov    esi,ebx
c001bc16:	66 90                	xchg   ax,ax
c001bc18:	8d 5e 01             	lea    ebx,[esi+0x1]
c001bc1b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001bc1e:	75 dc                	jne    c001bbfc <SoundPort::buffer32(int*, int)+0x3c>
c001bc20:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bc23:	90                   	nop
c001bc24:	83 c4 04             	add    esp,0x4
c001bc27:	5b                   	pop    ebx
c001bc28:	5e                   	pop    esi
c001bc29:	5f                   	pop    edi
c001bc2a:	5d                   	pop    ebp
c001bc2b:	c3                   	ret    
c001bc2c:	83 c4 04             	add    esp,0x4
c001bc2f:	8d 46 02             	lea    eax,[esi+0x2]
c001bc32:	5b                   	pop    ebx
c001bc33:	5e                   	pop    esi
c001bc34:	5f                   	pop    edi
c001bc35:	5d                   	pop    ebp
c001bc36:	c3                   	ret    
c001bc37:	90                   	nop
c001bc38:	83 c4 04             	add    esp,0x4
c001bc3b:	31 c0                	xor    eax,eax
c001bc3d:	5b                   	pop    ebx
c001bc3e:	5e                   	pop    esi
c001bc3f:	5f                   	pop    edi
c001bc40:	5d                   	pop    ebp
c001bc41:	c3                   	ret    
c001bc42:	66 90                	xchg   ax,ax
c001bc44:	b8 01 00 00 00       	mov    eax,0x1
c001bc49:	eb d9                	jmp    c001bc24 <SoundPort::buffer32(int*, int)+0x64>
c001bc4b:	90                   	nop

c001bc4c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001bc4c:	57                   	push   edi
c001bc4d:	56                   	push   esi
c001bc4e:	53                   	push   ebx
c001bc4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc53:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001bc57:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001bc5d:	39 03                	cmp    DWORD PTR [ebx],eax
c001bc5f:	74 13                	je     c001bc74 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001bc61:	83 ec 0c             	sub    esp,0xc
c001bc64:	68 dc 40 02 c0       	push   0xc00240dc
c001bc69:	e8 28 31 ff ff       	call   c000ed96 <KePanic(char const*)>
c001bc6e:	83 c4 10             	add    esp,0x10
c001bc71:	8d 76 00             	lea    esi,[esi+0x0]
c001bc74:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001bc7a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001bc7d:	74 11                	je     c001bc90 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001bc7f:	83 ec 0c             	sub    esp,0xc
c001bc82:	68 1b 41 02 c0       	push   0xc002411b
c001bc87:	e8 0a 31 ff ff       	call   c000ed96 <KePanic(char const*)>
c001bc8c:	83 c4 10             	add    esp,0x10
c001bc8f:	90                   	nop
c001bc90:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001bc96:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001bc99:	74 11                	je     c001bcac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001bc9b:	83 ec 0c             	sub    esp,0xc
c001bc9e:	68 1b 41 02 c0       	push   0xc002411b
c001bca3:	e8 ee 30 ff ff       	call   c000ed96 <KePanic(char const*)>
c001bca8:	83 c4 10             	add    esp,0x10
c001bcab:	90                   	nop
c001bcac:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001bcaf:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001bcb3:	7e 07                	jle    c001bcbc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001bcb5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bcb9:	8d 76 00             	lea    esi,[esi+0x0]
c001bcbc:	85 f6                	test   esi,esi
c001bcbe:	7e 2c                	jle    c001bcec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001bcc0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bcc4:	8d 3c 36             	lea    edi,[esi+esi*1]
c001bcc7:	31 c9                	xor    ecx,ecx
c001bcc9:	01 d7                	add    edi,edx
c001bccb:	90                   	nop
c001bccc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001bccf:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001bcd2:	85 c0                	test   eax,eax
c001bcd4:	79 06                	jns    c001bcdc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001bcd6:	05 ff 7f 00 00       	add    eax,0x7fff
c001bcdb:	90                   	nop
c001bcdc:	c1 f8 0f             	sar    eax,0xf
c001bcdf:	83 c1 04             	add    ecx,0x4
c001bce2:	66 01 02             	add    WORD PTR [edx],ax
c001bce5:	83 c2 02             	add    edx,0x2
c001bce8:	39 d7                	cmp    edi,edx
c001bcea:	75 e0                	jne    c001bccc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001bcec:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001bcef:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bcf2:	83 ec 04             	sub    esp,0x4
c001bcf5:	29 f0                	sub    eax,esi
c001bcf7:	c1 e0 02             	shl    eax,0x2
c001bcfa:	50                   	push   eax
c001bcfb:	8d 04 b2             	lea    eax,[edx+esi*4]
c001bcfe:	50                   	push   eax
c001bcff:	52                   	push   edx
c001bd00:	e8 cb 46 fe ff       	call   c00003d0 <memmove>
c001bd05:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001bd08:	83 c4 10             	add    esp,0x10
c001bd0b:	29 f0                	sub    eax,esi
c001bd0d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001bd10:	89 f0                	mov    eax,esi
c001bd12:	5b                   	pop    ebx
c001bd13:	5e                   	pop    esi
c001bd14:	5f                   	pop    edi
c001bd15:	c3                   	ret    
c001bd16:	66 90                	xchg   ax,ax

c001bd18 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001bd18:	57                   	push   edi
c001bd19:	56                   	push   esi
c001bd1a:	53                   	push   ebx
c001bd1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bd1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001bd23:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001bd27:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001bd2d:	39 06                	cmp    DWORD PTR [esi],eax
c001bd2f:	74 13                	je     c001bd44 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001bd31:	83 ec 0c             	sub    esp,0xc
c001bd34:	68 fc 40 02 c0       	push   0xc00240fc
c001bd39:	e8 58 30 ff ff       	call   c000ed96 <KePanic(char const*)>
c001bd3e:	83 c4 10             	add    esp,0x10
c001bd41:	8d 76 00             	lea    esi,[esi+0x0]
c001bd44:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001bd4a:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001bd4d:	74 11                	je     c001bd60 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001bd4f:	83 ec 0c             	sub    esp,0xc
c001bd52:	68 37 41 02 c0       	push   0xc0024137
c001bd57:	e8 3a 30 ff ff       	call   c000ed96 <KePanic(char const*)>
c001bd5c:	83 c4 10             	add    esp,0x10
c001bd5f:	90                   	nop
c001bd60:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001bd66:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001bd69:	74 11                	je     c001bd7c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001bd6b:	83 ec 0c             	sub    esp,0xc
c001bd6e:	68 37 41 02 c0       	push   0xc0024137
c001bd73:	e8 1e 30 ff ff       	call   c000ed96 <KePanic(char const*)>
c001bd78:	83 c4 10             	add    esp,0x10
c001bd7b:	90                   	nop
c001bd7c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001bd7f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001bd83:	7e 07                	jle    c001bd8c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001bd85:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bd89:	8d 76 00             	lea    esi,[esi+0x0]
c001bd8c:	85 ff                	test   edi,edi
c001bd8e:	7e 1c                	jle    c001bdac <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001bd90:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001bd97:	31 c0                	xor    eax,eax
c001bd99:	8d 76 00             	lea    esi,[esi+0x0]
c001bd9c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001bd9f:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001bda2:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001bda5:	83 c0 04             	add    eax,0x4
c001bda8:	39 c1                	cmp    ecx,eax
c001bdaa:	75 f0                	jne    c001bd9c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001bdac:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001bdaf:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001bdb2:	83 ec 04             	sub    esp,0x4
c001bdb5:	29 f8                	sub    eax,edi
c001bdb7:	c1 e0 02             	shl    eax,0x2
c001bdba:	50                   	push   eax
c001bdbb:	8d 04 ba             	lea    eax,[edx+edi*4]
c001bdbe:	50                   	push   eax
c001bdbf:	52                   	push   edx
c001bdc0:	e8 0b 46 fe ff       	call   c00003d0 <memmove>
c001bdc5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bdc8:	83 c4 10             	add    esp,0x10
c001bdcb:	29 f8                	sub    eax,edi
c001bdcd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001bdd0:	89 f8                	mov    eax,edi
c001bdd2:	5b                   	pop    ebx
c001bdd3:	5e                   	pop    esi
c001bdd4:	5f                   	pop    edi
c001bdd5:	c3                   	ret    

c001bdd6 <PCI::open(int, int, void*)>:
c001bdd6:	83 ec 18             	sub    esp,0x18
c001bdd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bddd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bde1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001bde7:	8b 10                	mov    edx,DWORD PTR [eax]
c001bde9:	50                   	push   eax
c001bdea:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001bded:	31 c0                	xor    eax,eax
c001bdef:	83 c4 1c             	add    esp,0x1c
c001bdf2:	c3                   	ret    
c001bdf3:	90                   	nop

c001bdf4 <PCI::close(int, int, void*)>:
c001bdf4:	31 c0                	xor    eax,eax
c001bdf6:	c3                   	ret    
c001bdf7:	90                   	nop

c001bdf8 <PCI::PCI()>:
c001bdf8:	83 ec 0c             	sub    esp,0xc
c001bdfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdff:	83 ec 08             	sub    esp,0x8
c001be02:	68 53 41 02 c0       	push   0xc0024153
c001be07:	50                   	push   eax
c001be08:	e8 ff ca fe ff       	call   c000890c <Bus::Bus(char const*)>
c001be0d:	83 c4 10             	add    esp,0x10
c001be10:	ba 60 42 02 c0       	mov    edx,0xc0024260
c001be15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be19:	89 10                	mov    DWORD PTR [eax],edx
c001be1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be1f:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001be29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be2d:	a3 c0 e0 02 c0       	mov    ds:0xc002e0c0,eax
c001be32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be36:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001be3c:	0f b6 d0             	movzx  edx,al
c001be3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be43:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001be4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be4e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001be54:	0f b6 d0             	movzx  edx,al
c001be57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be5b:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001be60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be64:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001be6a:	8d 50 01             	lea    edx,[eax+0x1]
c001be6d:	88 d1                	mov    cl,dl
c001be6f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001be73:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001be79:	0f b6 d0             	movzx  edx,al
c001be7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be80:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001be84:	83 c9 c0             	or     ecx,0xffffffc0
c001be87:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001be8b:	90                   	nop
c001be8c:	83 c4 0c             	add    esp,0xc
c001be8f:	c3                   	ret    

c001be90 <PCI::readBAR8(unsigned int, int)>:
c001be90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001be94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be98:	f6 c2 01             	test   dl,0x1
c001be9b:	74 07                	je     c001bea4 <PCI::readBAR8(unsigned int, int)+0x14>
c001be9d:	83 e2 fc             	and    edx,0xfffffffc
c001bea0:	01 c2                	add    edx,eax
c001bea2:	ec                   	in     al,dx
c001bea3:	c3                   	ret    
c001bea4:	83 e2 f0             	and    edx,0xfffffff0
c001bea7:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001beaa:	c3                   	ret    
c001beab:	90                   	nop

c001beac <PCI::readBAR16(unsigned int, int)>:
c001beac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001beb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001beb4:	f6 c2 01             	test   dl,0x1
c001beb7:	74 08                	je     c001bec1 <PCI::readBAR16(unsigned int, int)+0x15>
c001beb9:	83 e2 fc             	and    edx,0xfffffffc
c001bebc:	01 c2                	add    edx,eax
c001bebe:	66 ed                	in     ax,dx
c001bec0:	c3                   	ret    
c001bec1:	83 e2 f0             	and    edx,0xfffffff0
c001bec4:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001bec8:	c3                   	ret    
c001bec9:	90                   	nop

c001beca <PCI::readBAR32(unsigned int, int)>:
c001beca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bece:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bed2:	f6 c2 01             	test   dl,0x1
c001bed5:	74 07                	je     c001bede <PCI::readBAR32(unsigned int, int)+0x14>
c001bed7:	83 e2 fc             	and    edx,0xfffffffc
c001beda:	01 c2                	add    edx,eax
c001bedc:	ed                   	in     eax,dx
c001bedd:	c3                   	ret    
c001bede:	83 e2 f0             	and    edx,0xfffffff0
c001bee1:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001bee4:	c3                   	ret    
c001bee5:	90                   	nop

c001bee6 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001bee6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001beea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001beee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bef2:	f6 c2 01             	test   dl,0x1
c001bef5:	74 07                	je     c001befe <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001bef7:	83 e2 fc             	and    edx,0xfffffffc
c001befa:	01 ca                	add    edx,ecx
c001befc:	ee                   	out    dx,al
c001befd:	c3                   	ret    
c001befe:	83 e2 f0             	and    edx,0xfffffff0
c001bf01:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001bf04:	c3                   	ret    
c001bf05:	90                   	nop

c001bf06 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001bf06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bf0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf0e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bf12:	f6 c2 01             	test   dl,0x1
c001bf15:	74 08                	je     c001bf1f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001bf17:	83 e2 fc             	and    edx,0xfffffffc
c001bf1a:	01 ca                	add    edx,ecx
c001bf1c:	66 ef                	out    dx,ax
c001bf1e:	c3                   	ret    
c001bf1f:	83 e2 f0             	and    edx,0xfffffff0
c001bf22:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001bf26:	c3                   	ret    
c001bf27:	90                   	nop

c001bf28 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001bf28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bf2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf30:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bf34:	f6 c2 01             	test   dl,0x1
c001bf37:	74 07                	je     c001bf40 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001bf39:	83 e2 fc             	and    edx,0xfffffffc
c001bf3c:	01 ca                	add    edx,ecx
c001bf3e:	ef                   	out    dx,eax
c001bf3f:	c3                   	ret    
c001bf40:	83 e2 f0             	and    edx,0xfffffff0
c001bf43:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001bf46:	c3                   	ret    
c001bf47:	90                   	nop

c001bf48 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bf48:	55                   	push   ebp
c001bf49:	57                   	push   edi
c001bf4a:	56                   	push   esi
c001bf4b:	53                   	push   ebx
c001bf4c:	83 ec 0c             	sub    esp,0xc
c001bf4f:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001bf54:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001bf58:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001bf5c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bf60:	83 fe 07             	cmp    esi,0x7
c001bf63:	76 10                	jbe    c001bf75 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001bf65:	83 ec 0c             	sub    esp,0xc
c001bf68:	68 5b 41 02 c0       	push   0xc002415b
c001bf6d:	e8 24 2e ff ff       	call   c000ed96 <KePanic(char const*)>
c001bf72:	83 c4 10             	add    esp,0x10
c001bf75:	0f b6 db             	movzx  ebx,bl
c001bf78:	83 fb 0f             	cmp    ebx,0xf
c001bf7b:	76 10                	jbe    c001bf8d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001bf7d:	83 ec 0c             	sub    esp,0xc
c001bf80:	68 8b 41 02 c0       	push   0xc002418b
c001bf85:	e8 0c 2e ff ff       	call   c000ed96 <KePanic(char const*)>
c001bf8a:	83 c4 10             	add    esp,0x10
c001bf8d:	8d 04 36             	lea    eax,[esi+esi*1]
c001bf90:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bf95:	83 c8 f0             	or     eax,0xfffffff0
c001bf98:	ee                   	out    dx,al
c001bf99:	ba fa 0c 00 00       	mov    edx,0xcfa
c001bf9e:	89 e8                	mov    eax,ebp
c001bfa0:	ee                   	out    dx,al
c001bfa1:	83 c4 0c             	add    esp,0xc
c001bfa4:	89 d8                	mov    eax,ebx
c001bfa6:	89 f9                	mov    ecx,edi
c001bfa8:	c1 e0 08             	shl    eax,0x8
c001bfab:	0f b6 d9             	movzx  ebx,cl
c001bfae:	83 e3 fc             	and    ebx,0xfffffffc
c001bfb1:	09 d8                	or     eax,ebx
c001bfb3:	5b                   	pop    ebx
c001bfb4:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001bfb9:	5e                   	pop    esi
c001bfba:	5f                   	pop    edi
c001bfbb:	5d                   	pop    ebp
c001bfbc:	c3                   	ret    
c001bfbd:	90                   	nop

c001bfbe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bfbe:	57                   	push   edi
c001bfbf:	56                   	push   esi
c001bfc0:	53                   	push   ebx
c001bfc1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bfc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bfc9:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001bfcf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bfd3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bfd7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bfdb:	83 ff 01             	cmp    edi,0x1
c001bfde:	75 3f                	jne    c001c01f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001bfe0:	89 de                	mov    esi,ebx
c001bfe2:	0f b6 c0             	movzx  eax,al
c001bfe5:	81 e6 fc 00 00 00    	and    esi,0xfc
c001bfeb:	c1 e0 10             	shl    eax,0x10
c001bfee:	0f b6 c9             	movzx  ecx,cl
c001bff1:	09 f0                	or     eax,esi
c001bff3:	c1 e1 08             	shl    ecx,0x8
c001bff6:	0f b6 d2             	movzx  edx,dl
c001bff9:	09 c8                	or     eax,ecx
c001bffb:	c1 e2 0b             	shl    edx,0xb
c001bffe:	09 d0                	or     eax,edx
c001c000:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c005:	0d 00 00 00 80       	or     eax,0x80000000
c001c00a:	ef                   	out    dx,eax
c001c00b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c010:	ed                   	in     eax,dx
c001c011:	83 e3 02             	and    ebx,0x2
c001c014:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001c01b:	d3 e8                	shr    eax,cl
c001c01d:	eb 44                	jmp    c001c063 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001c01f:	83 ff 02             	cmp    edi,0x2
c001c022:	75 2d                	jne    c001c051 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001c024:	83 ec 0c             	sub    esp,0xc
c001c027:	0f b6 c9             	movzx  ecx,cl
c001c02a:	0f b6 d2             	movzx  edx,dl
c001c02d:	0f b6 fb             	movzx  edi,bl
c001c030:	0f b6 c0             	movzx  eax,al
c001c033:	57                   	push   edi
c001c034:	51                   	push   ecx
c001c035:	52                   	push   edx
c001c036:	50                   	push   eax
c001c037:	56                   	push   esi
c001c038:	e8 0b ff ff ff       	call   c001bf48 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c03d:	89 c2                	mov    edx,eax
c001c03f:	ed                   	in     eax,dx
c001c040:	83 e3 02             	and    ebx,0x2
c001c043:	83 c4 20             	add    esp,0x20
c001c046:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001c04d:	d3 e8                	shr    eax,cl
c001c04f:	eb 12                	jmp    c001c063 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001c051:	83 ec 0c             	sub    esp,0xc
c001c054:	68 bb 41 02 c0       	push   0xc00241bb
c001c059:	e8 38 2d ff ff       	call   c000ed96 <KePanic(char const*)>
c001c05e:	83 c4 10             	add    esp,0x10
c001c061:	31 c0                	xor    eax,eax
c001c063:	5b                   	pop    ebx
c001c064:	5e                   	pop    esi
c001c065:	5f                   	pop    edi
c001c066:	c3                   	ret    
c001c067:	90                   	nop

c001c068 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001c068:	83 ec 18             	sub    esp,0x18
c001c06b:	6a 00                	push   0x0
c001c06d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c072:	50                   	push   eax
c001c073:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c078:	50                   	push   eax
c001c079:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c07e:	50                   	push   eax
c001c07f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c083:	e8 36 ff ff ff       	call   c001bfbe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c088:	83 c4 2c             	add    esp,0x2c
c001c08b:	c3                   	ret    

c001c08c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001c08c:	83 ec 18             	sub    esp,0x18
c001c08f:	6a 0e                	push   0xe
c001c091:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c096:	50                   	push   eax
c001c097:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c09c:	50                   	push   eax
c001c09d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c0a2:	50                   	push   eax
c001c0a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c0a7:	e8 12 ff ff ff       	call   c001bfbe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c0ac:	83 c4 2c             	add    esp,0x2c
c001c0af:	0f b6 c0             	movzx  eax,al
c001c0b2:	c3                   	ret    
c001c0b3:	90                   	nop

c001c0b4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001c0b4:	55                   	push   ebp
c001c0b5:	57                   	push   edi
c001c0b6:	56                   	push   esi
c001c0b7:	53                   	push   ebx
c001c0b8:	83 ec 18             	sub    esp,0x18
c001c0bb:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001c0c0:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001c0c5:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001c0ca:	6a 0a                	push   0xa
c001c0cc:	56                   	push   esi
c001c0cd:	55                   	push   ebp
c001c0ce:	57                   	push   edi
c001c0cf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c0d3:	e8 e6 fe ff ff       	call   c001bfbe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c0d8:	83 c4 14             	add    esp,0x14
c001c0db:	89 c3                	mov    ebx,eax
c001c0dd:	6a 0a                	push   0xa
c001c0df:	0f b6 db             	movzx  ebx,bl
c001c0e2:	56                   	push   esi
c001c0e3:	55                   	push   ebp
c001c0e4:	57                   	push   edi
c001c0e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c0e9:	e8 d0 fe ff ff       	call   c001bfbe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c0ee:	83 c4 2c             	add    esp,0x2c
c001c0f1:	25 00 ff 00 00       	and    eax,0xff00
c001c0f6:	09 d8                	or     eax,ebx
c001c0f8:	5b                   	pop    ebx
c001c0f9:	5e                   	pop    esi
c001c0fa:	5f                   	pop    edi
c001c0fb:	5d                   	pop    ebp
c001c0fc:	c3                   	ret    
c001c0fd:	90                   	nop

c001c0fe <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001c0fe:	83 ec 18             	sub    esp,0x18
c001c101:	6a 08                	push   0x8
c001c103:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c108:	50                   	push   eax
c001c109:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c10e:	50                   	push   eax
c001c10f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c114:	50                   	push   eax
c001c115:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c119:	e8 a0 fe ff ff       	call   c001bfbe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c11e:	83 c4 2c             	add    esp,0x2c
c001c121:	0f b6 c4             	movzx  eax,ah
c001c124:	c3                   	ret    
c001c125:	90                   	nop

c001c126 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001c126:	83 ec 18             	sub    esp,0x18
c001c129:	6a 08                	push   0x8
c001c12b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c130:	50                   	push   eax
c001c131:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c136:	50                   	push   eax
c001c137:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c13c:	50                   	push   eax
c001c13d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c141:	e8 78 fe ff ff       	call   c001bfbe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c146:	83 c4 2c             	add    esp,0x2c
c001c149:	c3                   	ret    

c001c14a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001c14a:	83 ec 18             	sub    esp,0x18
c001c14d:	6a 3c                	push   0x3c
c001c14f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c154:	50                   	push   eax
c001c155:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c15a:	50                   	push   eax
c001c15b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c160:	50                   	push   eax
c001c161:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c165:	e8 54 fe ff ff       	call   c001bfbe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c16a:	83 c4 2c             	add    esp,0x2c
c001c16d:	c3                   	ret    

c001c16e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001c16e:	83 ec 18             	sub    esp,0x18
c001c171:	6a 18                	push   0x18
c001c173:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c178:	50                   	push   eax
c001c179:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c17e:	50                   	push   eax
c001c17f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c184:	50                   	push   eax
c001c185:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c189:	e8 30 fe ff ff       	call   c001bfbe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c18e:	83 c4 2c             	add    esp,0x2c
c001c191:	0f b6 c4             	movzx  eax,ah
c001c194:	c3                   	ret    
c001c195:	90                   	nop

c001c196 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c196:	55                   	push   ebp
c001c197:	57                   	push   edi
c001c198:	56                   	push   esi
c001c199:	53                   	push   ebx
c001c19a:	83 ec 28             	sub    esp,0x28
c001c19d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001c1a1:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001c1a6:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001c1ab:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001c1b0:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001c1b7:	8d 43 12             	lea    eax,[ebx+0x12]
c001c1ba:	83 c3 10             	add    ebx,0x10
c001c1bd:	0f b6 c0             	movzx  eax,al
c001c1c0:	0f b6 db             	movzx  ebx,bl
c001c1c3:	50                   	push   eax
c001c1c4:	51                   	push   ecx
c001c1c5:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001c1c9:	57                   	push   edi
c001c1ca:	55                   	push   ebp
c001c1cb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c1cf:	e8 ea fd ff ff       	call   c001bfbe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c1d4:	83 c4 14             	add    esp,0x14
c001c1d7:	89 c6                	mov    esi,eax
c001c1d9:	53                   	push   ebx
c001c1da:	c1 e6 10             	shl    esi,0x10
c001c1dd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c1e1:	51                   	push   ecx
c001c1e2:	57                   	push   edi
c001c1e3:	55                   	push   ebp
c001c1e4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c1e8:	e8 d1 fd ff ff       	call   c001bfbe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c1ed:	83 c4 3c             	add    esp,0x3c
c001c1f0:	0f b7 c0             	movzx  eax,ax
c001c1f3:	5b                   	pop    ebx
c001c1f4:	09 f0                	or     eax,esi
c001c1f6:	5e                   	pop    esi
c001c1f7:	5f                   	pop    edi
c001c1f8:	5d                   	pop    ebp
c001c1f9:	c3                   	ret    

c001c1fa <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001c1fa:	55                   	push   ebp
c001c1fb:	57                   	push   edi
c001c1fc:	56                   	push   esi
c001c1fd:	53                   	push   ebx
c001c1fe:	83 ec 0c             	sub    esp,0xc
c001c201:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c205:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001c209:	89 f5                	mov    ebp,esi
c001c20b:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001c211:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c215:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c219:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c21d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c221:	83 f9 01             	cmp    ecx,0x1
c001c224:	75 5d                	jne    c001c283 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001c226:	0f b6 c8             	movzx  ecx,al
c001c229:	0f b6 d2             	movzx  edx,dl
c001c22c:	c1 e1 10             	shl    ecx,0x10
c001c22f:	c1 e2 0b             	shl    edx,0xb
c001c232:	89 f0                	mov    eax,esi
c001c234:	25 fc 00 00 00       	and    eax,0xfc
c001c239:	09 c1                	or     ecx,eax
c001c23b:	89 e8                	mov    eax,ebp
c001c23d:	0f b6 c0             	movzx  eax,al
c001c240:	c1 e0 08             	shl    eax,0x8
c001c243:	09 c1                	or     ecx,eax
c001c245:	09 d1                	or     ecx,edx
c001c247:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c24c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001c252:	89 c8                	mov    eax,ecx
c001c254:	ef                   	out    dx,eax
c001c255:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c25a:	ed                   	in     eax,dx
c001c25b:	0f b7 db             	movzx  ebx,bx
c001c25e:	83 e6 02             	and    esi,0x2
c001c261:	74 0a                	je     c001c26d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001c263:	0f b7 d0             	movzx  edx,ax
c001c266:	c1 e3 10             	shl    ebx,0x10
c001c269:	09 d3                	or     ebx,edx
c001c26b:	eb 05                	jmp    c001c272 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001c26d:	66 31 c0             	xor    ax,ax
c001c270:	09 c3                	or     ebx,eax
c001c272:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c277:	89 c8                	mov    eax,ecx
c001c279:	ef                   	out    dx,eax
c001c27a:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c27f:	89 d8                	mov    eax,ebx
c001c281:	eb 41                	jmp    c001c2c4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001c283:	83 f9 02             	cmp    ecx,0x2
c001c286:	75 45                	jne    c001c2cd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001c288:	83 ec 0c             	sub    esp,0xc
c001c28b:	0f b6 d2             	movzx  edx,dl
c001c28e:	89 f1                	mov    ecx,esi
c001c290:	0f b6 c0             	movzx  eax,al
c001c293:	0f b6 f1             	movzx  esi,cl
c001c296:	89 e9                	mov    ecx,ebp
c001c298:	56                   	push   esi
c001c299:	0f b6 c9             	movzx  ecx,cl
c001c29c:	51                   	push   ecx
c001c29d:	52                   	push   edx
c001c29e:	50                   	push   eax
c001c29f:	57                   	push   edi
c001c2a0:	e8 a3 fc ff ff       	call   c001bf48 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2a5:	89 c2                	mov    edx,eax
c001c2a7:	ed                   	in     eax,dx
c001c2a8:	83 c4 20             	add    esp,0x20
c001c2ab:	0f b7 db             	movzx  ebx,bx
c001c2ae:	f6 c2 02             	test   dl,0x2
c001c2b1:	74 0c                	je     c001c2bf <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001c2b3:	0f b7 c8             	movzx  ecx,ax
c001c2b6:	89 d8                	mov    eax,ebx
c001c2b8:	c1 e0 10             	shl    eax,0x10
c001c2bb:	09 c8                	or     eax,ecx
c001c2bd:	eb 05                	jmp    c001c2c4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001c2bf:	66 31 c0             	xor    ax,ax
c001c2c2:	09 d8                	or     eax,ebx
c001c2c4:	ef                   	out    dx,eax
c001c2c5:	83 c4 0c             	add    esp,0xc
c001c2c8:	5b                   	pop    ebx
c001c2c9:	5e                   	pop    esi
c001c2ca:	5f                   	pop    edi
c001c2cb:	5d                   	pop    ebp
c001c2cc:	c3                   	ret    
c001c2cd:	c7 44 24 20 bb 41 02 c0 	mov    DWORD PTR [esp+0x20],0xc00241bb
c001c2d5:	83 c4 0c             	add    esp,0xc
c001c2d8:	5b                   	pop    ebx
c001c2d9:	5e                   	pop    esi
c001c2da:	5f                   	pop    edi
c001c2db:	5d                   	pop    ebp
c001c2dc:	e9 b5 2a ff ff       	jmp    c000ed96 <KePanic(char const*)>
c001c2e1:	90                   	nop

c001c2e2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001c2e2:	55                   	push   ebp
c001c2e3:	57                   	push   edi
c001c2e4:	56                   	push   esi
c001c2e5:	53                   	push   ebx
c001c2e6:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001c2ec:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001c2f3:	80 3d cc e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e0cc,0x0
c001c2fa:	0f 85 bd 00 00 00    	jne    c001c3bd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001c300:	83 ec 0c             	sub    esp,0xc
c001c303:	68 14 01 00 00       	push   0x114
c001c308:	e8 42 27 ff ff       	call   c000ea4f <malloc>
c001c30d:	83 c4 0c             	add    esp,0xc
c001c310:	89 c3                	mov    ebx,eax
c001c312:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c001c318:	68 c1 41 02 c0       	push   0xc00241c1
c001c31d:	50                   	push   eax
c001c31e:	e8 0f be fe ff       	call   c0008132 <File::File(char const*, Process*)>
c001c323:	83 c4 10             	add    esp,0x10
c001c326:	85 db                	test   ebx,ebx
c001c328:	0f 84 67 02 00 00    	je     c001c595 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001c32e:	56                   	push   esi
c001c32f:	56                   	push   esi
c001c330:	6a 01                	push   0x1
c001c332:	53                   	push   ebx
c001c333:	e8 18 be fe ff       	call   c0008150 <File::open(FileOpenMode)>
c001c338:	83 c4 10             	add    esp,0x10
c001c33b:	85 c0                	test   eax,eax
c001c33d:	0f 85 52 02 00 00    	jne    c001c595 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001c343:	52                   	push   edx
c001c344:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001c348:	50                   	push   eax
c001c349:	8d 44 24 48          	lea    eax,[esp+0x48]
c001c34d:	50                   	push   eax
c001c34e:	53                   	push   ebx
c001c34f:	e8 fe c0 fe ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c001c354:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c358:	40                   	inc    eax
c001c359:	89 04 24             	mov    DWORD PTR [esp],eax
c001c35c:	e8 ee 26 ff ff       	call   c000ea4f <malloc>
c001c361:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001c365:	a3 c8 e0 02 c0       	mov    ds:0xc002e0c8,eax
c001c36a:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001c36e:	59                   	pop    ecx
c001c36f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c371:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001c375:	51                   	push   ecx
c001c376:	50                   	push   eax
c001c377:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001c37b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001c37f:	53                   	push   ebx
c001c380:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c383:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001c387:	83 c4 20             	add    esp,0x20
c001c38a:	89 c8                	mov    eax,ecx
c001c38c:	99                   	cdq    
c001c38d:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001c391:	0f 85 fe 01 00 00    	jne    c001c595 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001c397:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001c39b:	0f 85 f4 01 00 00    	jne    c001c595 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001c3a1:	83 ec 0c             	sub    esp,0xc
c001c3a4:	53                   	push   ebx
c001c3a5:	e8 04 be fe ff       	call   c00081ae <File::close()>
c001c3aa:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c3ae:	c6 05 cc e0 02 c0 01 	mov    BYTE PTR ds:0xc002e0cc,0x1
c001c3b5:	a3 c4 e0 02 c0       	mov    ds:0xc002e0c4,eax
c001c3ba:	83 c4 10             	add    esp,0x10
c001c3bd:	a1 c4 e0 02 c0       	mov    eax,ds:0xc002e0c4
c001c3c2:	8b 1d c8 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0c8
c001c3c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c3cc:	31 f6                	xor    esi,esi
c001c3ce:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001c3d6:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001c3dd:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001c3e2:	31 c9                	xor    ecx,ecx
c001c3e4:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001c3ec:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001c3f1:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001c3f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c3fd:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001c405:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c409:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001c40d:	0f 8e 82 01 00 00    	jle    c001c595 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001c413:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001c416:	d4 40                	aam    0x40
c001c418:	d5 39                	aad    0x39
c001c41a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001c41e:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001c422:	d4 40                	aam    0x40
c001c424:	d5 39                	aad    0x39
c001c426:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c42a:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001c42e:	d4 40                	aam    0x40
c001c430:	d5 39                	aad    0x39
c001c432:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001c436:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001c43a:	d4 40                	aam    0x40
c001c43c:	d5 39                	aad    0x39
c001c43e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001c442:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001c446:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001c44a:	3c 56                	cmp    al,0x56
c001c44c:	74 43                	je     c001c491 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001c44e:	d4 40                	aam    0x40
c001c450:	d5 39                	aad    0x39
c001c452:	8d 48 d0             	lea    ecx,[eax-0x30]
c001c455:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001c459:	0f b6 c9             	movzx  ecx,cl
c001c45c:	c1 e1 04             	shl    ecx,0x4
c001c45f:	d4 40                	aam    0x40
c001c461:	d5 39                	aad    0x39
c001c463:	83 e8 30             	sub    eax,0x30
c001c466:	0f b6 c0             	movzx  eax,al
c001c469:	09 c1                	or     ecx,eax
c001c46b:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001c46f:	c1 e1 04             	shl    ecx,0x4
c001c472:	d4 40                	aam    0x40
c001c474:	d5 39                	aad    0x39
c001c476:	83 e8 30             	sub    eax,0x30
c001c479:	0f b6 c0             	movzx  eax,al
c001c47c:	09 c1                	or     ecx,eax
c001c47e:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001c482:	c1 e1 04             	shl    ecx,0x4
c001c485:	d4 40                	aam    0x40
c001c487:	d5 39                	aad    0x39
c001c489:	83 e8 30             	sub    eax,0x30
c001c48c:	0f b6 c0             	movzx  eax,al
c001c48f:	09 c1                	or     ecx,eax
c001c491:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001c495:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001c499:	3c 58                	cmp    al,0x58
c001c49b:	74 47                	je     c001c4e4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001c49d:	d4 40                	aam    0x40
c001c49f:	d5 39                	aad    0x39
c001c4a1:	8d 50 d0             	lea    edx,[eax-0x30]
c001c4a4:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001c4a8:	0f b6 d2             	movzx  edx,dl
c001c4ab:	c1 e2 04             	shl    edx,0x4
c001c4ae:	d4 40                	aam    0x40
c001c4b0:	d5 39                	aad    0x39
c001c4b2:	83 e8 30             	sub    eax,0x30
c001c4b5:	0f b6 c0             	movzx  eax,al
c001c4b8:	09 c2                	or     edx,eax
c001c4ba:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001c4be:	c1 e2 04             	shl    edx,0x4
c001c4c1:	d4 40                	aam    0x40
c001c4c3:	d5 39                	aad    0x39
c001c4c5:	83 e8 30             	sub    eax,0x30
c001c4c8:	0f b6 c0             	movzx  eax,al
c001c4cb:	09 c2                	or     edx,eax
c001c4cd:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001c4d1:	c1 e2 04             	shl    edx,0x4
c001c4d4:	d4 40                	aam    0x40
c001c4d6:	d5 39                	aad    0x39
c001c4d8:	83 e8 30             	sub    eax,0x30
c001c4db:	0f b6 c0             	movzx  eax,al
c001c4de:	09 c2                	or     edx,eax
c001c4e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c4e4:	83 c6 10             	add    esi,0x10
c001c4e7:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001c4eb:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001c4ef:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001c4f3:	83 fa 0a             	cmp    edx,0xa
c001c4f6:	74 0b                	je     c001c503 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001c4f8:	47                   	inc    edi
c001c4f9:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001c4fd:	75 19                	jne    c001c518 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001c4ff:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001c503:	31 c0                	xor    eax,eax
c001c505:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001c50a:	0f 94 c0             	sete   al
c001c50d:	01 c6                	add    esi,eax
c001c50f:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001c514:	75 0b                	jne    c001c521 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001c516:	eb 14                	jmp    c001c52c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001c518:	46                   	inc    esi
c001c519:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001c51c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001c51f:	eb ca                	jmp    c001c4eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001c521:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001c526:	0f 85 dd fe ff ff    	jne    c001c409 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001c52c:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001c531:	74 10                	je     c001c543 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001c533:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001c538:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001c53d:	0f 85 c6 fe ff ff    	jne    c001c409 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001c543:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c547:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c54b:	83 e8 30             	sub    eax,0x30
c001c54e:	83 ef 30             	sub    edi,0x30
c001c551:	c1 e0 04             	shl    eax,0x4
c001c554:	09 f8                	or     eax,edi
c001c556:	0f b6 c0             	movzx  eax,al
c001c559:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001c55d:	0f 85 a6 fe ff ff    	jne    c001c409 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001c563:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c567:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001c56b:	83 e8 30             	sub    eax,0x30
c001c56e:	83 ef 30             	sub    edi,0x30
c001c571:	c1 e0 04             	shl    eax,0x4
c001c574:	09 f8                	or     eax,edi
c001c576:	0f b6 c0             	movzx  eax,al
c001c579:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001c57d:	0f 85 86 fe ff ff    	jne    c001c409 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001c583:	50                   	push   eax
c001c584:	50                   	push   eax
c001c585:	8d 44 24 48          	lea    eax,[esp+0x48]
c001c589:	50                   	push   eax
c001c58a:	55                   	push   ebp
c001c58b:	e8 b0 40 fe ff       	call   c0000640 <strcpy>
c001c590:	83 c4 10             	add    esp,0x10
c001c593:	eb 06                	jmp    c001c59b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001c595:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001c599:	31 ed                	xor    ebp,ebp
c001c59b:	81 c4 4c 01 00 00    	add    esp,0x14c
c001c5a1:	89 e8                	mov    eax,ebp
c001c5a3:	5b                   	pop    ebx
c001c5a4:	5e                   	pop    esi
c001c5a5:	5f                   	pop    edi
c001c5a6:	5d                   	pop    ebp
c001c5a7:	c3                   	ret    

c001c5a8 <PCI::checkBus(unsigned char)>:
c001c5a8:	56                   	push   esi
c001c5a9:	53                   	push   ebx
c001c5aa:	31 db                	xor    ebx,ebx
c001c5ac:	51                   	push   ecx
c001c5ad:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c5b2:	52                   	push   edx
c001c5b3:	53                   	push   ebx
c001c5b4:	43                   	inc    ebx
c001c5b5:	56                   	push   esi
c001c5b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5ba:	e8 6f 03 00 00       	call   c001c92e <PCI::checkDevice(unsigned char, unsigned char)>
c001c5bf:	83 c4 10             	add    esp,0x10
c001c5c2:	83 fb 20             	cmp    ebx,0x20
c001c5c5:	75 eb                	jne    c001c5b2 <PCI::checkBus(unsigned char)+0xa>
c001c5c7:	58                   	pop    eax
c001c5c8:	5b                   	pop    ebx
c001c5c9:	5e                   	pop    esi
c001c5ca:	c3                   	ret    
c001c5cb:	90                   	nop

c001c5cc <PCI::foundDevice(PCIDeviceInfo)>:
c001c5cc:	55                   	push   ebp
c001c5cd:	57                   	push   edi
c001c5ce:	56                   	push   esi
c001c5cf:	53                   	push   ebx
c001c5d0:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001c5d6:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001c5de:	8b ac 24 a0 00 00 00 	mov    ebp,DWORD PTR [esp+0xa0]
c001c5e5:	3d ff ff 00 00       	cmp    eax,0xffff
c001c5ea:	0f 84 b7 01 00 00    	je     c001c7a7 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001c5f0:	0f b7 9c 24 a4 00 00 00 	movzx  ebx,WORD PTR [esp+0xa4]
c001c5f8:	66 81 fb 06 04       	cmp    bx,0x406
c001c5fd:	75 32                	jne    c001c631 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001c5ff:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001c607:	50                   	push   eax
c001c608:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001c610:	50                   	push   eax
c001c611:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001c619:	50                   	push   eax
c001c61a:	55                   	push   ebp
c001c61b:	e8 4e fb ff ff       	call   c001c16e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c620:	59                   	pop    ecx
c001c621:	0f b6 c0             	movzx  eax,al
c001c624:	5b                   	pop    ebx
c001c625:	50                   	push   eax
c001c626:	55                   	push   ebp
c001c627:	e8 7c ff ff ff       	call   c001c5a8 <PCI::checkBus(unsigned char)>
c001c62c:	e9 16 01 00 00       	jmp    c001c747 <PCI::foundDevice(PCIDeviceInfo)+0x17b>
c001c631:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001c638:	8b 85 cc 00 00 00    	mov    eax,DWORD PTR [ebp+0xcc]
c001c63e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001c642:	8b bc 24 a4 00 00 00 	mov    edi,DWORD PTR [esp+0xa4]
c001c649:	0f b6 b4 24 c4 00 00 00 	movzx  esi,BYTE PTR [esp+0xc4]
c001c651:	85 c0                	test   eax,eax
c001c653:	74 36                	je     c001c68b <PCI::foundDevice(PCIDeviceInfo)+0xbf>
c001c655:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c658:	85 d2                	test   edx,edx
c001c65a:	74 2b                	je     c001c687 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001c65c:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c001c662:	31 f9                	xor    ecx,edi
c001c664:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c001c66a:	75 1b                	jne    c001c687 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001c66c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c670:	39 8a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ecx
c001c676:	75 0f                	jne    c001c687 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001c678:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001c67f:	39 f2                	cmp    edx,esi
c001c681:	0f 84 20 01 00 00    	je     c001c7a7 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001c687:	8b 00                	mov    eax,DWORD PTR [eax]
c001c689:	eb c6                	jmp    c001c651 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001c68b:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c68f:	be f4 41 02 c0       	mov    esi,0xc00241f4
c001c694:	b9 07 00 00 00       	mov    ecx,0x7
c001c699:	fc                   	cld    
c001c69a:	31 d2                	xor    edx,edx
c001c69c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c69e:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001c6a5:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c6a9:	b9 12 00 00 00       	mov    ecx,0x12
c001c6ae:	83 ec 0c             	sub    esp,0xc
c001c6b1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c6b3:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001c6bb:	b9 0a 00 00 00       	mov    ecx,0xa
c001c6c0:	f7 f1                	div    ecx
c001c6c2:	83 c0 30             	add    eax,0x30
c001c6c5:	83 c2 30             	add    edx,0x30
c001c6c8:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001c6cc:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001c6d0:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001c6d8:	31 d2                	xor    edx,edx
c001c6da:	f7 f1                	div    ecx
c001c6dc:	83 c0 30             	add    eax,0x30
c001c6df:	83 c2 30             	add    edx,0x30
c001c6e2:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001c6e6:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001c6ea:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c6ee:	50                   	push   eax
c001c6ef:	e8 a0 ff fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001c6f4:	83 c4 10             	add    esp,0x10
c001c6f7:	81 fb 01 06 00 00    	cmp    ebx,0x601
c001c6fd:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001c704:	75 46                	jne    c001c74c <PCI::foundDevice(PCIDeviceInfo)+0x180>
c001c706:	83 ec 0c             	sub    esp,0xc
c001c709:	68 64 01 00 00       	push   0x164
c001c70e:	e8 3c 23 ff ff       	call   c000ea4f <malloc>
c001c713:	89 c3                	mov    ebx,eax
c001c715:	89 04 24             	mov    DWORD PTR [esp],eax
c001c718:	e8 39 11 00 00       	call   c001d856 <SATABus::SATABus()>
c001c71d:	58                   	pop    eax
c001c71e:	5a                   	pop    edx
c001c71f:	53                   	push   ebx
c001c720:	55                   	push   ebp
c001c721:	e8 3c c9 fe ff       	call   c0009062 <Device::addChild(Device*)>
c001c726:	83 ec 1c             	sub    esp,0x1c
c001c729:	b9 09 00 00 00       	mov    ecx,0x9
c001c72e:	89 e7                	mov    edi,esp
c001c730:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c732:	53                   	push   ebx
c001c733:	e8 70 c8 fe ff       	call   c0008fa8 <Device::preOpenPCI(PCIDeviceInfo)>
c001c738:	83 c4 30             	add    esp,0x30
c001c73b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c73d:	6a 00                	push   0x0
c001c73f:	6a 00                	push   0x0
c001c741:	6a 00                	push   0x0
c001c743:	53                   	push   ebx
c001c744:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c747:	83 c4 10             	add    esp,0x10
c001c74a:	eb 5b                	jmp    c001c7a7 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001c74c:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001c752:	75 19                	jne    c001c76d <PCI::foundDevice(PCIDeviceInfo)+0x1a1>
c001c754:	83 ec 0c             	sub    esp,0xc
c001c757:	68 70 02 00 00       	push   0x270
c001c75c:	e8 ee 22 ff ff       	call   c000ea4f <malloc>
c001c761:	89 c3                	mov    ebx,eax
c001c763:	89 04 24             	mov    DWORD PTR [esp],eax
c001c766:	e8 93 02 00 00       	call   c001c9fe <IDE::IDE()>
c001c76b:	eb b0                	jmp    c001c71d <PCI::foundDevice(PCIDeviceInfo)+0x151>
c001c76d:	83 ec 0c             	sub    esp,0xc
c001c770:	68 58 01 00 00       	push   0x158
c001c775:	e8 d5 22 ff ff       	call   c000ea4f <malloc>
c001c77a:	89 c3                	mov    ebx,eax
c001c77c:	58                   	pop    eax
c001c77d:	5a                   	pop    edx
c001c77e:	68 da 41 02 c0       	push   0xc00241da
c001c783:	53                   	push   ebx
c001c784:	e8 8d cb fe ff       	call   c0009316 <DriverlessDevice::DriverlessDevice(char const*)>
c001c789:	59                   	pop    ecx
c001c78a:	5f                   	pop    edi
c001c78b:	53                   	push   ebx
c001c78c:	55                   	push   ebp
c001c78d:	e8 d0 c8 fe ff       	call   c0009062 <Device::addChild(Device*)>
c001c792:	83 ec 1c             	sub    esp,0x1c
c001c795:	b9 09 00 00 00       	mov    ecx,0x9
c001c79a:	89 e7                	mov    edi,esp
c001c79c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c79e:	53                   	push   ebx
c001c79f:	e8 04 c8 fe ff       	call   c0008fa8 <Device::preOpenPCI(PCIDeviceInfo)>
c001c7a4:	83 c4 30             	add    esp,0x30
c001c7a7:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c7ad:	5b                   	pop    ebx
c001c7ae:	5e                   	pop    esi
c001c7af:	5f                   	pop    edi
c001c7b0:	5d                   	pop    ebp
c001c7b1:	c3                   	ret    

c001c7b2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c7b2:	55                   	push   ebp
c001c7b3:	57                   	push   edi
c001c7b4:	56                   	push   esi
c001c7b5:	53                   	push   ebx
c001c7b6:	83 ec 68             	sub    esp,0x68
c001c7b9:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001c7bd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001c7c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c7c8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001c7cf:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001c7d4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c7d8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001c7df:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001c7e4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c7e8:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001c7ed:	6a 0c                	push   0xc
c001c7ef:	57                   	push   edi
c001c7f0:	53                   	push   ebx
c001c7f1:	56                   	push   esi
c001c7f2:	55                   	push   ebp
c001c7f3:	e8 c6 f7 ff ff       	call   c001bfbe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c7f8:	83 c4 20             	add    esp,0x20
c001c7fb:	57                   	push   edi
c001c7fc:	53                   	push   ebx
c001c7fd:	56                   	push   esi
c001c7fe:	55                   	push   ebp
c001c7ff:	e8 b0 f8 ff ff       	call   c001c0b4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c804:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001c809:	57                   	push   edi
c001c80a:	53                   	push   ebx
c001c80b:	56                   	push   esi
c001c80c:	55                   	push   ebp
c001c80d:	e8 38 f9 ff ff       	call   c001c14a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c812:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c816:	83 c4 14             	add    esp,0x14
c001c819:	6a 3c                	push   0x3c
c001c81b:	57                   	push   edi
c001c81c:	53                   	push   ebx
c001c81d:	56                   	push   esi
c001c81e:	55                   	push   ebp
c001c81f:	e8 9a f7 ff ff       	call   c001bfbe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c824:	0f b6 c4             	movzx  eax,ah
c001c827:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c82b:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001c82f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001c833:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c001c838:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001c83e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001c844:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c848:	83 c4 20             	add    esp,0x20
c001c84b:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001c850:	74 30                	je     c001c882 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001c852:	31 c0                	xor    eax,eax
c001c854:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001c858:	7e 28                	jle    c001c882 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001c85a:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001c862:	39 cb                	cmp    ebx,ecx
c001c864:	75 19                	jne    c001c87f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001c866:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001c86e:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001c872:	75 0b                	jne    c001c87f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001c874:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001c87b:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001c87f:	40                   	inc    eax
c001c880:	eb d2                	jmp    c001c854 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001c882:	31 d2                	xor    edx,edx
c001c884:	83 ec 0c             	sub    esp,0xc
c001c887:	57                   	push   edi
c001c888:	53                   	push   ebx
c001c889:	56                   	push   esi
c001c88a:	52                   	push   edx
c001c88b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001c88f:	55                   	push   ebp
c001c890:	e8 01 f9 ff ff       	call   c001c196 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c895:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001c899:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c89d:	42                   	inc    edx
c001c89e:	83 c4 20             	add    esp,0x20
c001c8a1:	83 fa 06             	cmp    edx,0x6
c001c8a4:	75 de                	jne    c001c884 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001c8a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c8aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c8ae:	c1 e2 08             	shl    edx,0x8
c001c8b1:	83 ec 0c             	sub    esp,0xc
c001c8b4:	0f b6 c4             	movzx  eax,ah
c001c8b7:	09 d0                	or     eax,edx
c001c8b9:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001c8be:	6a 02                	push   0x2
c001c8c0:	57                   	push   edi
c001c8c1:	53                   	push   ebx
c001c8c2:	56                   	push   esi
c001c8c3:	55                   	push   ebp
c001c8c4:	e8 f5 f6 ff ff       	call   c001bfbe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c8c9:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001c8ce:	83 c4 20             	add    esp,0x20
c001c8d1:	57                   	push   edi
c001c8d2:	53                   	push   ebx
c001c8d3:	56                   	push   esi
c001c8d4:	55                   	push   ebp
c001c8d5:	e8 24 f8 ff ff       	call   c001c0fe <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c8da:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c8de:	57                   	push   edi
c001c8df:	53                   	push   ebx
c001c8e0:	56                   	push   esi
c001c8e1:	55                   	push   ebp
c001c8e2:	e8 81 f7 ff ff       	call   c001c068 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c8e7:	b9 09 00 00 00       	mov    ecx,0x9
c001c8ec:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001c8f1:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001c8f5:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001c8f9:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001c8fd:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001c901:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001c905:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001c909:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001c90d:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001c911:	83 ec 0c             	sub    esp,0xc
c001c914:	fc                   	cld    
c001c915:	89 e7                	mov    edi,esp
c001c917:	8d 74 24 58          	lea    esi,[esp+0x58]
c001c91b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c91d:	55                   	push   ebp
c001c91e:	e8 a9 fc ff ff       	call   c001c5cc <PCI::foundDevice(PCIDeviceInfo)>
c001c923:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c929:	5b                   	pop    ebx
c001c92a:	5e                   	pop    esi
c001c92b:	5f                   	pop    edi
c001c92c:	5d                   	pop    ebp
c001c92d:	c3                   	ret    

c001c92e <PCI::checkDevice(unsigned char, unsigned char)>:
c001c92e:	55                   	push   ebp
c001c92f:	57                   	push   edi
c001c930:	56                   	push   esi
c001c931:	53                   	push   ebx
c001c932:	83 ec 0c             	sub    esp,0xc
c001c935:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c939:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c93e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c943:	6a 00                	push   0x0
c001c945:	56                   	push   esi
c001c946:	57                   	push   edi
c001c947:	55                   	push   ebp
c001c948:	e8 1b f7 ff ff       	call   c001c068 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c94d:	6a 00                	push   0x0
c001c94f:	56                   	push   esi
c001c950:	57                   	push   edi
c001c951:	55                   	push   ebp
c001c952:	e8 5b fe ff ff       	call   c001c7b2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c957:	83 c4 20             	add    esp,0x20
c001c95a:	6a 00                	push   0x0
c001c95c:	56                   	push   esi
c001c95d:	57                   	push   edi
c001c95e:	55                   	push   ebp
c001c95f:	e8 28 f7 ff ff       	call   c001c08c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c964:	83 c4 10             	add    esp,0x10
c001c967:	a8 80                	test   al,0x80
c001c969:	74 2d                	je     c001c998 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001c96b:	bb 01 00 00 00       	mov    ebx,0x1
c001c970:	53                   	push   ebx
c001c971:	56                   	push   esi
c001c972:	57                   	push   edi
c001c973:	55                   	push   ebp
c001c974:	e8 ef f6 ff ff       	call   c001c068 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c979:	83 c4 10             	add    esp,0x10
c001c97c:	0f b7 c0             	movzx  eax,ax
c001c97f:	3d ff ff 00 00       	cmp    eax,0xffff
c001c984:	74 0c                	je     c001c992 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c986:	53                   	push   ebx
c001c987:	56                   	push   esi
c001c988:	57                   	push   edi
c001c989:	55                   	push   ebp
c001c98a:	e8 23 fe ff ff       	call   c001c7b2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c98f:	83 c4 10             	add    esp,0x10
c001c992:	43                   	inc    ebx
c001c993:	83 fb 08             	cmp    ebx,0x8
c001c996:	75 d8                	jne    c001c970 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c998:	83 c4 0c             	add    esp,0xc
c001c99b:	5b                   	pop    ebx
c001c99c:	5e                   	pop    esi
c001c99d:	5f                   	pop    edi
c001c99e:	5d                   	pop    ebp
c001c99f:	c3                   	ret    

c001c9a0 <PCI::detect()>:
c001c9a0:	56                   	push   esi
c001c9a1:	53                   	push   ebx
c001c9a2:	53                   	push   ebx
c001c9a3:	31 db                	xor    ebx,ebx
c001c9a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c9a9:	6a 00                	push   0x0
c001c9ab:	6a 00                	push   0x0
c001c9ad:	6a 00                	push   0x0
c001c9af:	56                   	push   esi
c001c9b0:	e8 d7 f6 ff ff       	call   c001c08c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c9b5:	83 c4 10             	add    esp,0x10
c001c9b8:	a8 80                	test   al,0x80
c001c9ba:	75 21                	jne    c001c9dd <PCI::detect()+0x3d>
c001c9bc:	51                   	push   ecx
c001c9bd:	51                   	push   ecx
c001c9be:	6a 00                	push   0x0
c001c9c0:	56                   	push   esi
c001c9c1:	e8 e2 fb ff ff       	call   c001c5a8 <PCI::checkBus(unsigned char)>
c001c9c6:	83 c4 10             	add    esp,0x10
c001c9c9:	eb 2a                	jmp    c001c9f5 <PCI::detect()+0x55>
c001c9cb:	52                   	push   edx
c001c9cc:	52                   	push   edx
c001c9cd:	53                   	push   ebx
c001c9ce:	43                   	inc    ebx
c001c9cf:	56                   	push   esi
c001c9d0:	e8 d3 fb ff ff       	call   c001c5a8 <PCI::checkBus(unsigned char)>
c001c9d5:	83 c4 10             	add    esp,0x10
c001c9d8:	83 fb 08             	cmp    ebx,0x8
c001c9db:	74 18                	je     c001c9f5 <PCI::detect()+0x55>
c001c9dd:	53                   	push   ebx
c001c9de:	6a 00                	push   0x0
c001c9e0:	6a 00                	push   0x0
c001c9e2:	56                   	push   esi
c001c9e3:	e8 80 f6 ff ff       	call   c001c068 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c9e8:	83 c4 10             	add    esp,0x10
c001c9eb:	0f b7 c0             	movzx  eax,ax
c001c9ee:	3d ff ff 00 00       	cmp    eax,0xffff
c001c9f3:	74 d6                	je     c001c9cb <PCI::detect()+0x2b>
c001c9f5:	58                   	pop    eax
c001c9f6:	5b                   	pop    ebx
c001c9f7:	5e                   	pop    esi
c001c9f8:	c3                   	ret    
c001c9f9:	90                   	nop

c001c9fa <IDE::close(int, int, void*)>:
c001c9fa:	83 c8 ff             	or     eax,0xffffffff
c001c9fd:	c3                   	ret    

c001c9fe <IDE::IDE()>:
c001c9fe:	83 ec 0c             	sub    esp,0xc
c001ca01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca05:	83 ec 08             	sub    esp,0x8
c001ca08:	68 84 42 02 c0       	push   0xc0024284
c001ca0d:	50                   	push   eax
c001ca0e:	e8 a9 c9 fe ff       	call   c00093bc <HardDiskController::HardDiskController(char const*)>
c001ca13:	83 c4 10             	add    esp,0x10
c001ca16:	ba b0 43 02 c0       	mov    edx,0xc00243b0
c001ca1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca1f:	89 10                	mov    DWORD PTR [eax],edx
c001ca21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca25:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001ca2c:	90                   	nop
c001ca2d:	83 c4 0c             	add    esp,0xc
c001ca30:	c3                   	ret    
c001ca31:	90                   	nop

c001ca32 <IDE::prepareInterrupt(unsigned char)>:
c001ca32:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ca37:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ca3b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001ca43:	c3                   	ret    

c001ca44 <selectDrive(unsigned char, unsigned char)>:
c001ca44:	c3                   	ret    
c001ca45:	90                   	nop

c001ca46 <IDE::getBase(unsigned char)>:
c001ca46:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001ca4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca4f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001ca57:	c3                   	ret    

c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001ca58:	55                   	push   ebp
c001ca59:	57                   	push   edi
c001ca5a:	56                   	push   esi
c001ca5b:	53                   	push   ebx
c001ca5c:	83 ec 1c             	sub    esp,0x1c
c001ca5f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ca63:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ca67:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001ca6a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ca6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ca72:	80 f9 03             	cmp    cl,0x3
c001ca75:	77 4f                	ja     c001cac6 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001ca77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ca7b:	0f b6 fa             	movzx  edi,dl
c001ca7e:	0f b6 db             	movzx  ebx,bl
c001ca81:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001ca84:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001ca89:	80 ca 80             	or     dl,0x80
c001ca8c:	52                   	push   edx
c001ca8d:	6a 0c                	push   0xc
c001ca8f:	57                   	push   edi
c001ca90:	56                   	push   esi
c001ca91:	e8 c2 ff ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca96:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ca9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ca9f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001caa3:	ee                   	out    dx,al
c001caa4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001caa9:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001caad:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001cab1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001cab5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001cabd:	83 c4 2c             	add    esp,0x2c
c001cac0:	5b                   	pop    ebx
c001cac1:	5e                   	pop    esi
c001cac2:	5f                   	pop    edi
c001cac3:	5d                   	pop    ebp
c001cac4:	eb 92                	jmp    c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cac6:	0f b6 cb             	movzx  ecx,bl
c001cac9:	83 f9 07             	cmp    ecx,0x7
c001cacc:	77 12                	ja     c001cae0 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001cace:	0f b6 d2             	movzx  edx,dl
c001cad1:	0f b6 db             	movzx  ebx,bl
c001cad4:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001cadc:	01 da                	add    edx,ebx
c001cade:	eb 2f                	jmp    c001cb0f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001cae0:	83 f9 0d             	cmp    ecx,0xd
c001cae3:	77 13                	ja     c001caf8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001cae5:	0f b6 d2             	movzx  edx,dl
c001cae8:	0f b6 db             	movzx  ebx,bl
c001caeb:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001caf2:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001caf6:	eb 17                	jmp    c001cb0f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001caf8:	83 f9 15             	cmp    ecx,0x15
c001cafb:	77 13                	ja     c001cb10 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001cafd:	0f b6 d2             	movzx  edx,dl
c001cb00:	0f b6 db             	movzx  ebx,bl
c001cb03:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001cb0b:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001cb0f:	ee                   	out    dx,al
c001cb10:	83 c4 1c             	add    esp,0x1c
c001cb13:	5b                   	pop    ebx
c001cb14:	5e                   	pop    esi
c001cb15:	5f                   	pop    edi
c001cb16:	5d                   	pop    ebp
c001cb17:	c3                   	ret    

c001cb18 <IDE::read(unsigned char, unsigned char)>:
c001cb18:	55                   	push   ebp
c001cb19:	57                   	push   edi
c001cb1a:	56                   	push   esi
c001cb1b:	53                   	push   ebx
c001cb1c:	83 ec 1c             	sub    esp,0x1c
c001cb1f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001cb23:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cb27:	8d 43 f8             	lea    eax,[ebx-0x8]
c001cb2a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001cb2e:	3c 03                	cmp    al,0x3
c001cb30:	77 40                	ja     c001cb72 <IDE::read(unsigned char, unsigned char)+0x5a>
c001cb32:	0f b6 f9             	movzx  edi,cl
c001cb35:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001cb38:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001cb3d:	0c 80                	or     al,0x80
c001cb3f:	50                   	push   eax
c001cb40:	6a 0c                	push   0xc
c001cb42:	57                   	push   edi
c001cb43:	56                   	push   esi
c001cb44:	e8 0f ff ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb49:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001cb4e:	0f b6 d3             	movzx  edx,bl
c001cb51:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001cb55:	ec                   	in     al,dx
c001cb56:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001cb5a:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001cb5f:	52                   	push   edx
c001cb60:	6a 0c                	push   0xc
c001cb62:	57                   	push   edi
c001cb63:	56                   	push   esi
c001cb64:	e8 ef fe ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb69:	83 c4 20             	add    esp,0x20
c001cb6c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001cb70:	eb 4c                	jmp    c001cbbe <IDE::read(unsigned char, unsigned char)+0xa6>
c001cb72:	0f b6 d3             	movzx  edx,bl
c001cb75:	83 fa 07             	cmp    edx,0x7
c001cb78:	77 12                	ja     c001cb8c <IDE::read(unsigned char, unsigned char)+0x74>
c001cb7a:	0f b6 c9             	movzx  ecx,cl
c001cb7d:	0f b6 d3             	movzx  edx,bl
c001cb80:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001cb88:	01 c2                	add    edx,eax
c001cb8a:	eb 31                	jmp    c001cbbd <IDE::read(unsigned char, unsigned char)+0xa5>
c001cb8c:	83 fa 0d             	cmp    edx,0xd
c001cb8f:	77 13                	ja     c001cba4 <IDE::read(unsigned char, unsigned char)+0x8c>
c001cb91:	0f b6 c9             	movzx  ecx,cl
c001cb94:	0f b6 d3             	movzx  edx,bl
c001cb97:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001cb9e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001cba2:	eb 19                	jmp    c001cbbd <IDE::read(unsigned char, unsigned char)+0xa5>
c001cba4:	31 c0                	xor    eax,eax
c001cba6:	83 fa 15             	cmp    edx,0x15
c001cba9:	77 13                	ja     c001cbbe <IDE::read(unsigned char, unsigned char)+0xa6>
c001cbab:	0f b6 c9             	movzx  ecx,cl
c001cbae:	0f b6 d3             	movzx  edx,bl
c001cbb1:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001cbb9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001cbbd:	ec                   	in     al,dx
c001cbbe:	83 c4 1c             	add    esp,0x1c
c001cbc1:	5b                   	pop    ebx
c001cbc2:	5e                   	pop    esi
c001cbc3:	5f                   	pop    edi
c001cbc4:	5d                   	pop    ebp
c001cbc5:	c3                   	ret    

c001cbc6 <IDE::waitInterrupt(unsigned char)>:
c001cbc6:	55                   	push   ebp
c001cbc7:	57                   	push   edi
c001cbc8:	56                   	push   esi
c001cbc9:	53                   	push   ebx
c001cbca:	31 db                	xor    ebx,ebx
c001cbcc:	83 ec 0c             	sub    esp,0xc
c001cbcf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001cbd3:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001cbd8:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001cbe0:	89 e8                	mov    eax,ebp
c001cbe2:	84 c0                	test   al,al
c001cbe4:	75 30                	jne    c001cc16 <IDE::waitInterrupt(unsigned char)+0x50>
c001cbe6:	50                   	push   eax
c001cbe7:	6a 0c                	push   0xc
c001cbe9:	56                   	push   esi
c001cbea:	57                   	push   edi
c001cbeb:	e8 28 ff ff ff       	call   c001cb18 <IDE::read(unsigned char, unsigned char)>
c001cbf0:	83 c4 10             	add    esp,0x10
c001cbf3:	a8 01                	test   al,0x1
c001cbf5:	75 27                	jne    c001cc1e <IDE::waitInterrupt(unsigned char)+0x58>
c001cbf7:	f6 c3 04             	test   bl,0x4
c001cbfa:	75 12                	jne    c001cc0e <IDE::waitInterrupt(unsigned char)+0x48>
c001cbfc:	83 fb 32             	cmp    ebx,0x32
c001cbff:	7e 0d                	jle    c001cc0e <IDE::waitInterrupt(unsigned char)+0x48>
c001cc01:	83 ec 0c             	sub    esp,0xc
c001cc04:	6a 64                	push   0x64
c001cc06:	e8 e9 8d ff ff       	call   c00159f4 <milliTenthSleep(unsigned int)>
c001cc0b:	83 c4 10             	add    esp,0x10
c001cc0e:	83 fb 3c             	cmp    ebx,0x3c
c001cc11:	74 0b                	je     c001cc1e <IDE::waitInterrupt(unsigned char)+0x58>
c001cc13:	43                   	inc    ebx
c001cc14:	eb c2                	jmp    c001cbd8 <IDE::waitInterrupt(unsigned char)+0x12>
c001cc16:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001cc1e:	83 c4 0c             	add    esp,0xc
c001cc21:	89 e8                	mov    eax,ebp
c001cc23:	5b                   	pop    ebx
c001cc24:	5e                   	pop    esi
c001cc25:	5f                   	pop    edi
c001cc26:	5d                   	pop    ebp
c001cc27:	c3                   	ret    

c001cc28 <ideChannel0IRQHandler(regs*, void*)>:
c001cc28:	83 ec 10             	sub    esp,0x10
c001cc2b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc2f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001cc36:	6a 07                	push   0x7
c001cc38:	6a 00                	push   0x0
c001cc3a:	50                   	push   eax
c001cc3b:	e8 d8 fe ff ff       	call   c001cb18 <IDE::read(unsigned char, unsigned char)>
c001cc40:	83 c4 1c             	add    esp,0x1c
c001cc43:	c3                   	ret    

c001cc44 <ideChannel1IRQHandler(regs*, void*)>:
c001cc44:	83 ec 10             	sub    esp,0x10
c001cc47:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc4b:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001cc52:	6a 07                	push   0x7
c001cc54:	6a 01                	push   0x1
c001cc56:	50                   	push   eax
c001cc57:	e8 bc fe ff ff       	call   c001cb18 <IDE::read(unsigned char, unsigned char)>
c001cc5c:	83 c4 1c             	add    esp,0x1c
c001cc5f:	c3                   	ret    

c001cc60 <IDE::enableIRQs(unsigned char, bool)>:
c001cc60:	57                   	push   edi
c001cc61:	b8 02 00 00 00       	mov    eax,0x2
c001cc66:	56                   	push   esi
c001cc67:	53                   	push   ebx
c001cc68:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cc6c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cc70:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001cc75:	74 02                	je     c001cc79 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001cc77:	31 c0                	xor    eax,eax
c001cc79:	0f b6 db             	movzx  ebx,bl
c001cc7c:	bf 04 00 00 00       	mov    edi,0x4
c001cc81:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001cc88:	50                   	push   eax
c001cc89:	6a 0c                	push   0xc
c001cc8b:	53                   	push   ebx
c001cc8c:	56                   	push   esi
c001cc8d:	e8 c6 fd ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc92:	83 c4 10             	add    esp,0x10
c001cc95:	50                   	push   eax
c001cc96:	6a 0c                	push   0xc
c001cc98:	53                   	push   ebx
c001cc99:	56                   	push   esi
c001cc9a:	e8 79 fe ff ff       	call   c001cb18 <IDE::read(unsigned char, unsigned char)>
c001cc9f:	83 c4 10             	add    esp,0x10
c001cca2:	4f                   	dec    edi
c001cca3:	75 f0                	jne    c001cc95 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001cca5:	5b                   	pop    ebx
c001cca6:	5e                   	pop    esi
c001cca7:	5f                   	pop    edi
c001cca8:	c3                   	ret    
c001cca9:	90                   	nop

c001ccaa <IDE::open(int, int, void*)>:
c001ccaa:	57                   	push   edi
c001ccab:	56                   	push   esi
c001ccac:	53                   	push   ebx
c001ccad:	83 ec 10             	sub    esp,0x10
c001ccb0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ccb4:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ccbd:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ccc6:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001cccd:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ccd4:	0f 85 84 02 00 00    	jne    c001cf5e <IDE::open(int, int, void*)+0x2b4>
c001ccda:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001cce0:	a8 70                	test   al,0x70
c001cce2:	75 44                	jne    c001cd28 <IDE::open(int, int, void*)+0x7e>
c001cce4:	ba 20 84 00 00       	mov    edx,0x8420
c001cce9:	0f a3 c2             	bt     edx,eax
c001ccec:	73 3a                	jae    c001cd28 <IDE::open(int, int, void*)+0x7e>
c001ccee:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ccf4:	83 ec 0c             	sub    esp,0xc
c001ccf7:	83 e0 fc             	and    eax,0xfffffffc
c001ccfa:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001cd01:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001cd07:	83 e0 fc             	and    eax,0xfffffffc
c001cd0a:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001cd11:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001cd17:	83 e0 fc             	and    eax,0xfffffffc
c001cd1a:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cd21:	68 f5 19 02 c0       	push   0xc00219f5
c001cd26:	eb 60                	jmp    c001cd88 <IDE::open(int, int, void*)+0xde>
c001cd28:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001cd32:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001cd3c:	be 64 00 00 00       	mov    esi,0x64
c001cd41:	57                   	push   edi
c001cd42:	57                   	push   edi
c001cd43:	68 9c 42 02 c0       	push   0xc002429c
c001cd48:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001cd4c:	57                   	push   edi
c001cd4d:	e8 ee 38 fe ff       	call   c0000640 <strcpy>
c001cd52:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001cd59:	31 d2                	xor    edx,edx
c001cd5b:	89 c8                	mov    eax,ecx
c001cd5d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cd60:	f7 f6                	div    esi
c001cd62:	be 0a 00 00 00       	mov    esi,0xa
c001cd67:	83 c0 30             	add    eax,0x30
c001cd6a:	31 d2                	xor    edx,edx
c001cd6c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001cd70:	89 c8                	mov    eax,ecx
c001cd72:	f7 f6                	div    esi
c001cd74:	89 d1                	mov    ecx,edx
c001cd76:	31 d2                	xor    edx,edx
c001cd78:	83 c1 30             	add    ecx,0x30
c001cd7b:	f7 f6                	div    esi
c001cd7d:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001cd81:	83 c2 30             	add    edx,0x30
c001cd84:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001cd88:	e8 07 f9 fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001cd8d:	bf f8 0c 00 00       	mov    edi,0xcf8
c001cd92:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001cd99:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001cda0:	c1 e1 10             	shl    ecx,0x10
c001cda3:	c1 e0 0b             	shl    eax,0xb
c001cda6:	83 c4 10             	add    esp,0x10
c001cda9:	09 c1                	or     ecx,eax
c001cdab:	89 fa                	mov    edx,edi
c001cdad:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001cdb4:	c1 e0 08             	shl    eax,0x8
c001cdb7:	09 c1                	or     ecx,eax
c001cdb9:	89 c8                	mov    eax,ecx
c001cdbb:	0d 08 00 00 80       	or     eax,0x80000008
c001cdc0:	ef                   	out    dx,eax
c001cdc1:	be fc 0c 00 00       	mov    esi,0xcfc
c001cdc6:	89 f2                	mov    edx,esi
c001cdc8:	ed                   	in     eax,dx
c001cdc9:	c1 e8 10             	shr    eax,0x10
c001cdcc:	3d ff ff 00 00       	cmp    eax,0xffff
c001cdd1:	0f 84 e5 00 00 00    	je     c001cebc <IDE::open(int, int, void*)+0x212>
c001cdd7:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001cddd:	89 fa                	mov    edx,edi
c001cddf:	89 c8                	mov    eax,ecx
c001cde1:	ef                   	out    dx,eax
c001cde2:	b0 fe                	mov    al,0xfe
c001cde4:	89 f2                	mov    edx,esi
c001cde6:	ee                   	out    dx,al
c001cde7:	89 c8                	mov    eax,ecx
c001cde9:	89 fa                	mov    edx,edi
c001cdeb:	ef                   	out    dx,eax
c001cdec:	89 f2                	mov    edx,esi
c001cdee:	ed                   	in     eax,dx
c001cdef:	3c fe                	cmp    al,0xfe
c001cdf1:	0f 85 85 00 00 00    	jne    c001ce7c <IDE::open(int, int, void*)+0x1d2>
c001cdf7:	83 ec 0c             	sub    esp,0xc
c001cdfa:	68 2b 1a 02 c0       	push   0xc0021a2b
c001cdff:	e8 90 f8 fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001ce04:	c7 04 24 a2 42 02 c0 	mov    DWORD PTR [esp],0xc00242a2
c001ce0b:	e8 54 a1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ce10:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001ce1a:	c7 04 24 6c 1c 02 c0 	mov    DWORD PTR [esp],0xc0021c6c
c001ce21:	e8 6e f8 fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001ce26:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001ce2d:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ce34:	c1 e1 10             	shl    ecx,0x10
c001ce37:	c1 e0 08             	shl    eax,0x8
c001ce3a:	89 fa                	mov    edx,edi
c001ce3c:	09 c1                	or     ecx,eax
c001ce3e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ce45:	c1 e0 0b             	shl    eax,0xb
c001ce48:	09 c1                	or     ecx,eax
c001ce4a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001ce50:	89 c8                	mov    eax,ecx
c001ce52:	ef                   	out    dx,eax
c001ce53:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001ce59:	89 f2                	mov    edx,esi
c001ce5b:	ee                   	out    dx,al
c001ce5c:	89 c8                	mov    eax,ecx
c001ce5e:	89 fa                	mov    edx,edi
c001ce60:	ef                   	out    dx,eax
c001ce61:	89 f2                	mov    edx,esi
c001ce63:	ed                   	in     eax,dx
c001ce64:	0f b6 c0             	movzx  eax,al
c001ce67:	83 c4 10             	add    esp,0x10
c001ce6a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001ce70:	74 5a                	je     c001cecc <IDE::open(int, int, void*)+0x222>
c001ce72:	83 ec 0c             	sub    esp,0xc
c001ce75:	68 b7 42 02 c0       	push   0xc00242b7
c001ce7a:	eb 48                	jmp    c001cec4 <IDE::open(int, int, void*)+0x21a>
c001ce7c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ce85:	75 2b                	jne    c001ceb2 <IDE::open(int, int, void*)+0x208>
c001ce87:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001ce8e:	3d 80 00 00 00       	cmp    eax,0x80
c001ce93:	74 07                	je     c001ce9c <IDE::open(int, int, void*)+0x1f2>
c001ce95:	3d 8a 00 00 00       	cmp    eax,0x8a
c001ce9a:	75 16                	jne    c001ceb2 <IDE::open(int, int, void*)+0x208>
c001ce9c:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001cea3:	83 ec 0c             	sub    esp,0xc
c001cea6:	68 1e 15 02 c0       	push   0xc002151e
c001ceab:	e8 e4 f7 fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001ceb0:	eb 17                	jmp    c001cec9 <IDE::open(int, int, void*)+0x21f>
c001ceb2:	83 ec 0c             	sub    esp,0xc
c001ceb5:	68 bf 42 02 c0       	push   0xc00242bf
c001ceba:	eb 08                	jmp    c001cec4 <IDE::open(int, int, void*)+0x21a>
c001cebc:	83 ec 0c             	sub    esp,0xc
c001cebf:	68 f0 42 02 c0       	push   0xc00242f0
c001cec4:	e8 cd 1e ff ff       	call   c000ed96 <KePanic(char const*)>
c001cec9:	83 c4 10             	add    esp,0x10
c001cecc:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001ced3:	0f 84 bf 00 00 00    	je     c001cf98 <IDE::open(int, int, void*)+0x2ee>
c001ced9:	83 ec 0c             	sub    esp,0xc
c001cedc:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001cee2:	83 e0 fc             	and    eax,0xfffffffc
c001cee5:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001ceec:	83 c0 08             	add    eax,0x8
c001ceef:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001cef6:	68 1a 43 02 c0       	push   0xc002431a
c001cefb:	e8 64 a0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001cf00:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001cf07:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001cf0e:	50                   	push   eax
c001cf0f:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001cf16:	50                   	push   eax
c001cf17:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001cf1e:	50                   	push   eax
c001cf1f:	ff 35 c0 e0 02 c0    	push   DWORD PTR ds:0xc002e0c0
c001cf25:	e8 94 f0 ff ff       	call   c001bfbe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cf2a:	83 c4 18             	add    esp,0x18
c001cf2d:	83 c8 07             	or     eax,0x7
c001cf30:	0f b7 c0             	movzx  eax,ax
c001cf33:	50                   	push   eax
c001cf34:	6a 04                	push   0x4
c001cf36:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001cf3d:	50                   	push   eax
c001cf3e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001cf45:	50                   	push   eax
c001cf46:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001cf4d:	50                   	push   eax
c001cf4e:	ff 35 c0 e0 02 c0    	push   DWORD PTR ds:0xc002e0c0
c001cf54:	e8 a1 f2 ff ff       	call   c001c1fa <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001cf59:	83 c4 20             	add    esp,0x20
c001cf5c:	eb 3a                	jmp    c001cf98 <IDE::open(int, int, void*)+0x2ee>
c001cf5e:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001cf64:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001cf6b:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001cf72:	05 06 02 00 00       	add    eax,0x206
c001cf77:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cf7e:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001cf85:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001cf8c:	05 06 02 00 00       	add    eax,0x206
c001cf91:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001cf98:	83 ec 0c             	sub    esp,0xc
c001cf9b:	68 6f 22 02 c0       	push   0xc002226f
c001cfa0:	e8 ef f6 fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001cfa5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001cfab:	83 c4 10             	add    esp,0x10
c001cfae:	89 c2                	mov    edx,eax
c001cfb0:	83 e2 0f             	and    edx,0xf
c001cfb3:	83 fa 08             	cmp    edx,0x8
c001cfb6:	75 0a                	jne    c001cfc2 <IDE::open(int, int, void*)+0x318>
c001cfb8:	83 e8 02             	sub    eax,0x2
c001cfbb:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cfc2:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001cfc8:	89 c2                	mov    edx,eax
c001cfca:	83 e2 0f             	and    edx,0xf
c001cfcd:	83 fa 08             	cmp    edx,0x8
c001cfd0:	75 0a                	jne    c001cfdc <IDE::open(int, int, void*)+0x332>
c001cfd2:	83 e8 02             	sub    eax,0x2
c001cfd5:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001cfdc:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001cfe3:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001cfea:	89 d0                	mov    eax,edx
c001cfec:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cfef:	8d 7a 01             	lea    edi,[edx+0x1]
c001cff2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cff6:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001cffa:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001cffe:	83 e1 3f             	and    ecx,0x3f
c001d001:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001d005:	89 f9                	mov    ecx,edi
c001d007:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001d00e:	0f b6 c9             	movzx  ecx,cl
c001d011:	8d 78 02             	lea    edi,[eax+0x2]
c001d014:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001d017:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001d01b:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001d01f:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001d023:	83 e2 3f             	and    edx,0x3f
c001d026:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001d02a:	89 f9                	mov    ecx,edi
c001d02c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001d032:	0f b6 d1             	movzx  edx,cl
c001d035:	8d 78 03             	lea    edi,[eax+0x3]
c001d038:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001d03b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001d03f:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001d043:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001d047:	83 e1 3f             	and    ecx,0x3f
c001d04a:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001d04e:	89 fa                	mov    edx,edi
c001d050:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001d056:	0f b6 ca             	movzx  ecx,dl
c001d059:	8d 78 04             	lea    edi,[eax+0x4]
c001d05c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001d05f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001d063:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001d067:	89 fa                	mov    edx,edi
c001d069:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001d06f:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001d073:	83 e2 3f             	and    edx,0x3f
c001d076:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001d07a:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001d081:	66 85 f6             	test   si,si
c001d084:	74 24                	je     c001d0aa <IDE::open(int, int, void*)+0x400>
c001d086:	89 f9                	mov    ecx,edi
c001d088:	83 c0 05             	add    eax,0x5
c001d08b:	0f b6 d1             	movzx  edx,cl
c001d08e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001d091:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001d095:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001d099:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001d09f:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001d0a3:	83 e0 3f             	and    eax,0x3f
c001d0a6:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001d0aa:	83 ec 0c             	sub    esp,0xc
c001d0ad:	68 32 43 02 c0       	push   0xc0024332
c001d0b2:	e8 dd f5 fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001d0b7:	58                   	pop    eax
c001d0b8:	5a                   	pop    edx
c001d0b9:	6a 00                	push   0x0
c001d0bb:	53                   	push   ebx
c001d0bc:	e8 71 f9 ff ff       	call   c001ca32 <IDE::prepareInterrupt(unsigned char)>
c001d0c1:	59                   	pop    ecx
c001d0c2:	5e                   	pop    esi
c001d0c3:	6a 01                	push   0x1
c001d0c5:	53                   	push   ebx
c001d0c6:	e8 67 f9 ff ff       	call   c001ca32 <IDE::prepareInterrupt(unsigned char)>
c001d0cb:	c7 04 24 81 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b81
c001d0d2:	e8 bd f5 fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001d0d7:	83 c4 0c             	add    esp,0xc
c001d0da:	6a 00                	push   0x0
c001d0dc:	6a 00                	push   0x0
c001d0de:	53                   	push   ebx
c001d0df:	e8 7c fb ff ff       	call   c001cc60 <IDE::enableIRQs(unsigned char, bool)>
c001d0e4:	83 c4 0c             	add    esp,0xc
c001d0e7:	6a 00                	push   0x0
c001d0e9:	6a 01                	push   0x1
c001d0eb:	53                   	push   ebx
c001d0ec:	e8 6f fb ff ff       	call   c001cc60 <IDE::enableIRQs(unsigned char, bool)>
c001d0f1:	c7 04 24 34 43 02 c0 	mov    DWORD PTR [esp],0xc0024334
c001d0f8:	e8 97 f5 fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001d0fd:	83 c4 10             	add    esp,0x10
c001d100:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001d107:	74 3c                	je     c001d145 <IDE::open(int, int, void*)+0x49b>
c001d109:	83 ec 0c             	sub    esp,0xc
c001d10c:	53                   	push   ebx
c001d10d:	6a 01                	push   0x1
c001d10f:	68 28 cc 01 c0       	push   0xc001cc28
c001d114:	6a 0e                	push   0xe
c001d116:	53                   	push   ebx
c001d117:	e8 f2 be fe ff       	call   c000900e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d11c:	83 c4 14             	add    esp,0x14
c001d11f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001d125:	53                   	push   ebx
c001d126:	6a 01                	push   0x1
c001d128:	68 44 cc 01 c0       	push   0xc001cc44
c001d12d:	6a 0f                	push   0xf
c001d12f:	53                   	push   ebx
c001d130:	e8 d9 be fe ff       	call   c000900e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d135:	83 c4 14             	add    esp,0x14
c001d138:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001d13e:	68 72 1e 02 c0       	push   0xc0021e72
c001d143:	eb 40                	jmp    c001d185 <IDE::open(int, int, void*)+0x4db>
c001d145:	83 ec 0c             	sub    esp,0xc
c001d148:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001d152:	53                   	push   ebx
c001d153:	6a 00                	push   0x0
c001d155:	68 28 cc 01 c0       	push   0xc001cc28
c001d15a:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001d160:	53                   	push   ebx
c001d161:	e8 a8 be fe ff       	call   c000900e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d166:	83 c4 14             	add    esp,0x14
c001d169:	53                   	push   ebx
c001d16a:	6a 00                	push   0x0
c001d16c:	68 44 cc 01 c0       	push   0xc001cc44
c001d171:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001d177:	53                   	push   ebx
c001d178:	e8 91 be fe ff       	call   c000900e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d17d:	83 c4 14             	add    esp,0x14
c001d180:	68 84 2c 02 c0       	push   0xc0022c84
c001d185:	e8 0a f5 fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001d18a:	83 c4 10             	add    esp,0x10
c001d18d:	83 ec 0c             	sub    esp,0xc
c001d190:	68 36 43 02 c0       	push   0xc0024336
c001d195:	e8 fa f4 fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001d19a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d19c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d19f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001d1a2:	c7 04 24 2d 33 02 c0 	mov    DWORD PTR [esp],0xc002332d
c001d1a9:	e8 e6 f4 fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001d1ae:	83 c4 0c             	add    esp,0xc
c001d1b1:	6a 07                	push   0x7
c001d1b3:	6a 00                	push   0x0
c001d1b5:	53                   	push   ebx
c001d1b6:	e8 5d f9 ff ff       	call   c001cb18 <IDE::read(unsigned char, unsigned char)>
c001d1bb:	83 c4 0c             	add    esp,0xc
c001d1be:	6a 07                	push   0x7
c001d1c0:	6a 01                	push   0x1
c001d1c2:	53                   	push   ebx
c001d1c3:	e8 50 f9 ff ff       	call   c001cb18 <IDE::read(unsigned char, unsigned char)>
c001d1c8:	c7 04 24 ec 29 02 c0 	mov    DWORD PTR [esp],0xc00229ec
c001d1cf:	e8 c0 f4 fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001d1d4:	83 c4 0c             	add    esp,0xc
c001d1d7:	6a 01                	push   0x1
c001d1d9:	6a 00                	push   0x0
c001d1db:	53                   	push   ebx
c001d1dc:	e8 7f fa ff ff       	call   c001cc60 <IDE::enableIRQs(unsigned char, bool)>
c001d1e1:	83 c4 0c             	add    esp,0xc
c001d1e4:	6a 01                	push   0x1
c001d1e6:	6a 01                	push   0x1
c001d1e8:	53                   	push   ebx
c001d1e9:	e8 72 fa ff ff       	call   c001cc60 <IDE::enableIRQs(unsigned char, bool)>
c001d1ee:	c7 04 24 39 43 02 c0 	mov    DWORD PTR [esp],0xc0024339
c001d1f5:	e8 9a f4 fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001d1fa:	83 c4 20             	add    esp,0x20
c001d1fd:	31 c0                	xor    eax,eax
c001d1ff:	5b                   	pop    ebx
c001d200:	5e                   	pop    esi
c001d201:	5f                   	pop    edi
c001d202:	c3                   	ret    
c001d203:	90                   	nop

c001d204 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001d204:	55                   	push   ebp
c001d205:	57                   	push   edi
c001d206:	56                   	push   esi
c001d207:	53                   	push   ebx
c001d208:	83 ec 1c             	sub    esp,0x1c
c001d20b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001d20f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d213:	8d 42 f8             	lea    eax,[edx-0x8]
c001d216:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d21a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001d21e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d222:	3c 03                	cmp    al,0x3
c001d224:	77 5a                	ja     c001d280 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001d226:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d22a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d22e:	0f b6 db             	movzx  ebx,bl
c001d231:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001d234:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001d239:	0c 80                	or     al,0x80
c001d23b:	50                   	push   eax
c001d23c:	6a 0c                	push   0xc
c001d23e:	53                   	push   ebx
c001d23f:	56                   	push   esi
c001d240:	e8 13 f8 ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d245:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001d24a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d24e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d252:	0f b6 d2             	movzx  edx,dl
c001d255:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001d259:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001d25b:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001d260:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001d264:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001d268:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001d26c:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001d274:	83 c4 2c             	add    esp,0x2c
c001d277:	5b                   	pop    ebx
c001d278:	5e                   	pop    esi
c001d279:	5f                   	pop    edi
c001d27a:	5d                   	pop    ebp
c001d27b:	e9 d8 f7 ff ff       	jmp    c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d280:	0f b6 c2             	movzx  eax,dl
c001d283:	83 f8 07             	cmp    eax,0x7
c001d286:	77 12                	ja     c001d29a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001d288:	0f b6 c2             	movzx  eax,dl
c001d28b:	0f b6 db             	movzx  ebx,bl
c001d28e:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001d296:	01 c2                	add    edx,eax
c001d298:	eb 2f                	jmp    c001d2c9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001d29a:	83 f8 0d             	cmp    eax,0xd
c001d29d:	77 13                	ja     c001d2b2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001d29f:	0f b6 db             	movzx  ebx,bl
c001d2a2:	0f b6 d2             	movzx  edx,dl
c001d2a5:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001d2ac:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001d2b0:	eb 17                	jmp    c001d2c9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001d2b2:	83 f8 15             	cmp    eax,0x15
c001d2b5:	77 14                	ja     c001d2cb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001d2b7:	0f b6 db             	movzx  ebx,bl
c001d2ba:	0f b6 d2             	movzx  edx,dl
c001d2bd:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001d2c5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001d2c9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001d2cb:	83 c4 1c             	add    esp,0x1c
c001d2ce:	5b                   	pop    ebx
c001d2cf:	5e                   	pop    esi
c001d2d0:	5f                   	pop    edi
c001d2d1:	5d                   	pop    ebp
c001d2d2:	c3                   	ret    
c001d2d3:	90                   	nop

c001d2d4 <IDE::detect()>:
c001d2d4:	55                   	push   ebp
c001d2d5:	57                   	push   edi
c001d2d6:	56                   	push   esi
c001d2d7:	53                   	push   ebx
c001d2d8:	81 ec 28 02 00 00    	sub    esp,0x228
c001d2de:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001d2e5:	68 3b 43 02 c0       	push   0xc002433b
c001d2ea:	e8 a5 f3 fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001d2ef:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001d2f5:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001d2f9:	83 c4 10             	add    esp,0x10
c001d2fc:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001d301:	0f 85 2f 04 00 00    	jne    c001d736 <IDE::detect()+0x462>
c001d307:	83 ec 0c             	sub    esp,0xc
c001d30a:	31 f6                	xor    esi,esi
c001d30c:	68 3e 43 02 c0       	push   0xc002433e
c001d311:	31 ff                	xor    edi,edi
c001d313:	e8 7c f3 fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001d318:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001d31f:	83 c4 10             	add    esp,0x10
c001d322:	83 ec 0c             	sub    esp,0xc
c001d325:	68 41 43 02 c0       	push   0xc0024341
c001d32a:	e8 65 f3 fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001d32f:	83 c4 10             	add    esp,0x10
c001d332:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d339:	83 ec 0c             	sub    esp,0xc
c001d33c:	31 ed                	xor    ebp,ebp
c001d33e:	68 44 43 02 c0       	push   0xc0024344
c001d343:	e8 4c f3 fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001d348:	89 f8                	mov    eax,edi
c001d34a:	c1 e0 06             	shl    eax,0x6
c001d34d:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001d355:	c7 04 24 47 43 02 c0 	mov    DWORD PTR [esp],0xc0024347
c001d35c:	e8 33 f3 fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001d361:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d365:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001d369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d36d:	c1 e0 04             	shl    eax,0x4
c001d370:	83 c8 a0             	or     eax,0xffffffa0
c001d373:	0f b6 c0             	movzx  eax,al
c001d376:	50                   	push   eax
c001d377:	6a 06                	push   0x6
c001d379:	56                   	push   esi
c001d37a:	53                   	push   ebx
c001d37b:	e8 d8 f6 ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d380:	83 c4 1c             	add    esp,0x1c
c001d383:	6a 0c                	push   0xc
c001d385:	56                   	push   esi
c001d386:	53                   	push   ebx
c001d387:	e8 8c f7 ff ff       	call   c001cb18 <IDE::read(unsigned char, unsigned char)>
c001d38c:	83 c4 0c             	add    esp,0xc
c001d38f:	6a 0c                	push   0xc
c001d391:	56                   	push   esi
c001d392:	53                   	push   ebx
c001d393:	e8 80 f7 ff ff       	call   c001cb18 <IDE::read(unsigned char, unsigned char)>
c001d398:	83 c4 0c             	add    esp,0xc
c001d39b:	6a 0c                	push   0xc
c001d39d:	56                   	push   esi
c001d39e:	53                   	push   ebx
c001d39f:	e8 74 f7 ff ff       	call   c001cb18 <IDE::read(unsigned char, unsigned char)>
c001d3a4:	83 c4 0c             	add    esp,0xc
c001d3a7:	6a 0c                	push   0xc
c001d3a9:	56                   	push   esi
c001d3aa:	53                   	push   ebx
c001d3ab:	e8 68 f7 ff ff       	call   c001cb18 <IDE::read(unsigned char, unsigned char)>
c001d3b0:	c7 04 24 4a 43 02 c0 	mov    DWORD PTR [esp],0xc002434a
c001d3b7:	e8 d8 f2 fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001d3bc:	68 ec 00 00 00       	push   0xec
c001d3c1:	6a 07                	push   0x7
c001d3c3:	56                   	push   esi
c001d3c4:	53                   	push   ebx
c001d3c5:	e8 8e f6 ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d3ca:	83 c4 1c             	add    esp,0x1c
c001d3cd:	6a 0c                	push   0xc
c001d3cf:	56                   	push   esi
c001d3d0:	53                   	push   ebx
c001d3d1:	e8 42 f7 ff ff       	call   c001cb18 <IDE::read(unsigned char, unsigned char)>
c001d3d6:	83 c4 0c             	add    esp,0xc
c001d3d9:	6a 0c                	push   0xc
c001d3db:	56                   	push   esi
c001d3dc:	53                   	push   ebx
c001d3dd:	e8 36 f7 ff ff       	call   c001cb18 <IDE::read(unsigned char, unsigned char)>
c001d3e2:	83 c4 0c             	add    esp,0xc
c001d3e5:	6a 0c                	push   0xc
c001d3e7:	56                   	push   esi
c001d3e8:	53                   	push   ebx
c001d3e9:	e8 2a f7 ff ff       	call   c001cb18 <IDE::read(unsigned char, unsigned char)>
c001d3ee:	83 c4 0c             	add    esp,0xc
c001d3f1:	6a 0c                	push   0xc
c001d3f3:	56                   	push   esi
c001d3f4:	53                   	push   ebx
c001d3f5:	e8 1e f7 ff ff       	call   c001cb18 <IDE::read(unsigned char, unsigned char)>
c001d3fa:	c7 04 24 4d 43 02 c0 	mov    DWORD PTR [esp],0xc002434d
c001d401:	e8 8e f2 fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001d406:	83 c4 0c             	add    esp,0xc
c001d409:	6a 0c                	push   0xc
c001d40b:	56                   	push   esi
c001d40c:	53                   	push   ebx
c001d40d:	e8 06 f7 ff ff       	call   c001cb18 <IDE::read(unsigned char, unsigned char)>
c001d412:	83 c4 10             	add    esp,0x10
c001d415:	84 c0                	test   al,al
c001d417:	75 1f                	jne    c001d438 <IDE::detect()+0x164>
c001d419:	83 ec 0c             	sub    esp,0xc
c001d41c:	68 50 43 02 c0       	push   0xc0024350
c001d421:	e8 6e f2 fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001d426:	e9 e9 02 00 00       	jmp    c001d714 <IDE::detect()+0x440>
c001d42b:	a8 80                	test   al,0x80
c001d42d:	74 21                	je     c001d450 <IDE::detect()+0x17c>
c001d42f:	45                   	inc    ebp
c001d430:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001d436:	7f 1e                	jg     c001d456 <IDE::detect()+0x182>
c001d438:	50                   	push   eax
c001d439:	6a 0c                	push   0xc
c001d43b:	56                   	push   esi
c001d43c:	53                   	push   ebx
c001d43d:	e8 d6 f6 ff ff       	call   c001cb18 <IDE::read(unsigned char, unsigned char)>
c001d442:	83 c4 10             	add    esp,0x10
c001d445:	a8 01                	test   al,0x1
c001d447:	74 e2                	je     c001d42b <IDE::detect()+0x157>
c001d449:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001d44e:	eb 22                	jmp    c001d472 <IDE::detect()+0x19e>
c001d450:	a8 08                	test   al,0x8
c001d452:	74 db                	je     c001d42f <IDE::detect()+0x15b>
c001d454:	eb 17                	jmp    c001d46d <IDE::detect()+0x199>
c001d456:	83 ec 0c             	sub    esp,0xc
c001d459:	6a 32                	push   0x32
c001d45b:	e8 94 85 ff ff       	call   c00159f4 <milliTenthSleep(unsigned int)>
c001d460:	83 c4 10             	add    esp,0x10
c001d463:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001d469:	75 cd                	jne    c001d438 <IDE::detect()+0x164>
c001d46b:	eb dc                	jmp    c001d449 <IDE::detect()+0x175>
c001d46d:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001d472:	83 ec 0c             	sub    esp,0xc
c001d475:	68 53 43 02 c0       	push   0xc0024353
c001d47a:	e8 15 f2 fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001d47f:	83 c4 10             	add    esp,0x10
c001d482:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001d487:	74 60                	je     c001d4e9 <IDE::detect()+0x215>
c001d489:	50                   	push   eax
c001d48a:	6a 04                	push   0x4
c001d48c:	56                   	push   esi
c001d48d:	53                   	push   ebx
c001d48e:	e8 85 f6 ff ff       	call   c001cb18 <IDE::read(unsigned char, unsigned char)>
c001d493:	83 c4 0c             	add    esp,0xc
c001d496:	89 c5                	mov    ebp,eax
c001d498:	6a 05                	push   0x5
c001d49a:	56                   	push   esi
c001d49b:	53                   	push   ebx
c001d49c:	e8 77 f6 ff ff       	call   c001cb18 <IDE::read(unsigned char, unsigned char)>
c001d4a1:	83 c4 10             	add    esp,0x10
c001d4a4:	89 e9                	mov    ecx,ebp
c001d4a6:	0f b6 c0             	movzx  eax,al
c001d4a9:	0f b6 e9             	movzx  ebp,cl
c001d4ac:	83 fd 14             	cmp    ebp,0x14
c001d4af:	75 07                	jne    c001d4b8 <IDE::detect()+0x1e4>
c001d4b1:	3d eb 00 00 00       	cmp    eax,0xeb
c001d4b6:	eb 0e                	jmp    c001d4c6 <IDE::detect()+0x1f2>
c001d4b8:	3d 96 00 00 00       	cmp    eax,0x96
c001d4bd:	0f 85 54 02 00 00    	jne    c001d717 <IDE::detect()+0x443>
c001d4c3:	83 fd 69             	cmp    ebp,0x69
c001d4c6:	0f 85 4b 02 00 00    	jne    c001d717 <IDE::detect()+0x443>
c001d4cc:	68 a1 00 00 00       	push   0xa1
c001d4d1:	6a 07                	push   0x7
c001d4d3:	56                   	push   esi
c001d4d4:	53                   	push   ebx
c001d4d5:	e8 7e f5 ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d4da:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001d4e1:	e8 0e 85 ff ff       	call   c00159f4 <milliTenthSleep(unsigned int)>
c001d4e6:	83 c4 10             	add    esp,0x10
c001d4e9:	83 ec 0c             	sub    esp,0xc
c001d4ec:	89 fd                	mov    ebp,edi
c001d4ee:	68 56 43 02 c0       	push   0xc0024356
c001d4f3:	c1 e5 06             	shl    ebp,0x6
c001d4f6:	e8 99 f1 fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001d4fb:	01 dd                	add    ebp,ebx
c001d4fd:	8d 54 24 20          	lea    edx,[esp+0x20]
c001d501:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001d508:	52                   	push   edx
c001d509:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001d50d:	6a 00                	push   0x0
c001d50f:	56                   	push   esi
c001d510:	53                   	push   ebx
c001d511:	e8 ee fc ff ff       	call   c001d204 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001d516:	83 c4 14             	add    esp,0x14
c001d519:	68 5a 43 02 c0       	push   0xc002435a
c001d51e:	e8 71 f1 fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001d523:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001d528:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001d52f:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001d536:	89 f0                	mov    eax,esi
c001d538:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001d53e:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d542:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001d548:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d54c:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001d553:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001d55b:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001d562:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001d56a:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001d570:	c7 04 24 5e 43 02 c0 	mov    DWORD PTR [esp],0xc002435e
c001d577:	e8 18 f1 fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001d57c:	83 c4 10             	add    esp,0x10
c001d57f:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001d586:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d58a:	74 09                	je     c001d595 <IDE::detect()+0x2c1>
c001d58c:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001d593:	eb 07                	jmp    c001d59c <IDE::detect()+0x2c8>
c001d595:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001d59c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d5a0:	89 f8                	mov    eax,edi
c001d5a2:	83 ec 0c             	sub    esp,0xc
c001d5a5:	c1 e0 06             	shl    eax,0x6
c001d5a8:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001d5ab:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001d5b1:	68 62 43 02 c0       	push   0xc0024362
c001d5b6:	e8 d9 f0 fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001d5bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d5bf:	89 e8                	mov    eax,ebp
c001d5c1:	83 c4 10             	add    esp,0x10
c001d5c4:	8d 6a 28             	lea    ebp,[edx+0x28]
c001d5c7:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001d5ca:	83 c0 02             	add    eax,0x2
c001d5cd:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001d5d3:	83 c2 02             	add    edx,0x2
c001d5d6:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001d5d9:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001d5df:	39 d5                	cmp    ebp,edx
c001d5e1:	75 e4                	jne    c001d5c7 <IDE::detect()+0x2f3>
c001d5e3:	89 f8                	mov    eax,edi
c001d5e5:	c1 e0 06             	shl    eax,0x6
c001d5e8:	01 d8                	add    eax,ebx
c001d5ea:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001d5f1:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001d5f8:	c1 ea 09             	shr    edx,0x9
c001d5fb:	83 e2 01             	and    edx,0x1
c001d5fe:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001d605:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001d60b:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001d60f:	74 0c                	je     c001d61d <IDE::detect()+0x349>
c001d611:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001d61a:	0f 95 c2             	setne  dl
c001d61d:	83 ec 0c             	sub    esp,0xc
c001d620:	89 fd                	mov    ebp,edi
c001d622:	c1 e5 06             	shl    ebp,0x6
c001d625:	01 dd                	add    ebp,ebx
c001d627:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001d62d:	68 66 43 02 c0       	push   0xc0024366
c001d632:	e8 5d f0 fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001d637:	83 c4 10             	add    esp,0x10
c001d63a:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001d63f:	75 66                	jne    c001d6a7 <IDE::detect()+0x3d3>
c001d641:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001d648:	0f 84 b8 00 00 00    	je     c001d706 <IDE::detect()+0x432>
c001d64e:	83 ec 0c             	sub    esp,0xc
c001d651:	68 6a 43 02 c0       	push   0xc002436a
c001d656:	e8 39 f0 fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001d65b:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001d662:	e8 e8 13 ff ff       	call   c000ea4f <malloc>
c001d667:	89 04 24             	mov    DWORD PTR [esp],eax
c001d66a:	89 c5                	mov    ebp,eax
c001d66c:	e8 43 05 00 00       	call   c001dbb4 <ATA::ATA()>
c001d671:	c7 04 24 6e 43 02 c0 	mov    DWORD PTR [esp],0xc002436e
c001d678:	e8 17 f0 fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001d67d:	59                   	pop    ecx
c001d67e:	58                   	pop    eax
c001d67f:	55                   	push   ebp
c001d680:	53                   	push   ebx
c001d681:	e8 dc b9 fe ff       	call   c0009062 <Device::addChild(Device*)>
c001d686:	c7 04 24 73 43 02 c0 	mov    DWORD PTR [esp],0xc0024373
c001d68d:	e8 02 f0 fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001d692:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d695:	53                   	push   ebx
c001d696:	57                   	push   edi
c001d697:	6a 00                	push   0x0
c001d699:	55                   	push   ebp
c001d69a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d69d:	83 c4 14             	add    esp,0x14
c001d6a0:	68 78 43 02 c0       	push   0xc0024378
c001d6a5:	eb 57                	jmp    c001d6fe <IDE::detect()+0x42a>
c001d6a7:	83 ec 0c             	sub    esp,0xc
c001d6aa:	68 7d 43 02 c0       	push   0xc002437d
c001d6af:	e8 e0 ef fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001d6b4:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001d6bb:	e8 8f 13 ff ff       	call   c000ea4f <malloc>
c001d6c0:	89 04 24             	mov    DWORD PTR [esp],eax
c001d6c3:	89 c5                	mov    ebp,eax
c001d6c5:	e8 98 0c 00 00       	call   c001e362 <ATAPI::ATAPI()>
c001d6ca:	c7 04 24 83 43 02 c0 	mov    DWORD PTR [esp],0xc0024383
c001d6d1:	e8 be ef fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001d6d6:	58                   	pop    eax
c001d6d7:	5a                   	pop    edx
c001d6d8:	55                   	push   ebp
c001d6d9:	53                   	push   ebx
c001d6da:	e8 83 b9 fe ff       	call   c0009062 <Device::addChild(Device*)>
c001d6df:	c7 04 24 8a 43 02 c0 	mov    DWORD PTR [esp],0xc002438a
c001d6e6:	e8 a9 ef fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001d6eb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d6ee:	53                   	push   ebx
c001d6ef:	57                   	push   edi
c001d6f0:	6a 00                	push   0x0
c001d6f2:	55                   	push   ebp
c001d6f3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d6f6:	83 c4 14             	add    esp,0x14
c001d6f9:	68 91 43 02 c0       	push   0xc0024391
c001d6fe:	e8 91 ef fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001d703:	83 c4 10             	add    esp,0x10
c001d706:	83 ec 0c             	sub    esp,0xc
c001d709:	47                   	inc    edi
c001d70a:	68 98 43 02 c0       	push   0xc0024398
c001d70f:	e8 80 ef fe ff       	call   c000c694 <KeSetBootMessage(char const*)>
c001d714:	83 c4 10             	add    esp,0x10
c001d717:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001d71b:	74 0c                	je     c001d729 <IDE::detect()+0x455>
c001d71d:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001d724:	e9 10 fc ff ff       	jmp    c001d339 <IDE::detect()+0x65>
c001d729:	4e                   	dec    esi
c001d72a:	74 0a                	je     c001d736 <IDE::detect()+0x462>
c001d72c:	be 01 00 00 00       	mov    esi,0x1
c001d731:	e9 ec fb ff ff       	jmp    c001d322 <IDE::detect()+0x4e>
c001d736:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d73c:	5b                   	pop    ebx
c001d73d:	5e                   	pop    esi
c001d73e:	5f                   	pop    edi
c001d73f:	5d                   	pop    ebp
c001d740:	c3                   	ret    
c001d741:	90                   	nop

c001d742 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d742:	55                   	push   ebp
c001d743:	57                   	push   edi
c001d744:	56                   	push   esi
c001d745:	53                   	push   ebx
c001d746:	83 ec 1c             	sub    esp,0x1c
c001d749:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d74d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d751:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d755:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d759:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d75d:	88 c3                	mov    bl,al
c001d75f:	25 ff 00 00 00       	and    eax,0xff
c001d764:	0f 84 88 00 00 00    	je     c001d7f2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d76a:	83 ec 0c             	sub    esp,0xc
c001d76d:	89 c7                	mov    edi,eax
c001d76f:	68 9c 43 02 c0       	push   0xc002439c
c001d774:	e8 eb 97 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001d779:	83 c4 10             	add    esp,0x10
c001d77c:	83 ff 01             	cmp    edi,0x1
c001d77f:	74 6b                	je     c001d7ec <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001d781:	83 ff 02             	cmp    edi,0x2
c001d784:	75 58                	jne    c001d7de <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001d786:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001d78b:	01 ff                	add    edi,edi
c001d78d:	50                   	push   eax
c001d78e:	09 fe                	or     esi,edi
c001d790:	6a 01                	push   0x1
c001d792:	89 f0                	mov    eax,esi
c001d794:	0f b6 f0             	movzx  esi,al
c001d797:	c1 e6 06             	shl    esi,0x6
c001d79a:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001d7a2:	50                   	push   eax
c001d7a3:	55                   	push   ebp
c001d7a4:	e8 6f f3 ff ff       	call   c001cb18 <IDE::read(unsigned char, unsigned char)>
c001d7a9:	83 c4 10             	add    esp,0x10
c001d7ac:	a8 01                	test   al,0x1
c001d7ae:	74 02                	je     c001d7b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001d7b0:	b3 07                	mov    bl,0x7
c001d7b2:	a8 02                	test   al,0x2
c001d7b4:	74 02                	je     c001d7b8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001d7b6:	b3 03                	mov    bl,0x3
c001d7b8:	a8 04                	test   al,0x4
c001d7ba:	74 02                	je     c001d7be <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001d7bc:	b3 14                	mov    bl,0x14
c001d7be:	a8 08                	test   al,0x8
c001d7c0:	74 02                	je     c001d7c4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001d7c2:	b3 03                	mov    bl,0x3
c001d7c4:	a8 10                	test   al,0x10
c001d7c6:	74 02                	je     c001d7ca <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001d7c8:	b3 15                	mov    bl,0x15
c001d7ca:	a8 20                	test   al,0x20
c001d7cc:	74 02                	je     c001d7d0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001d7ce:	b3 03                	mov    bl,0x3
c001d7d0:	a8 40                	test   al,0x40
c001d7d2:	74 02                	je     c001d7d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001d7d4:	b3 16                	mov    bl,0x16
c001d7d6:	a8 80                	test   al,0x80
c001d7d8:	74 18                	je     c001d7f2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d7da:	b3 0d                	mov    bl,0xd
c001d7dc:	eb 14                	jmp    c001d7f2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d7de:	83 ff 03             	cmp    edi,0x3
c001d7e1:	74 0d                	je     c001d7f0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001d7e3:	83 ff 04             	cmp    edi,0x4
c001d7e6:	75 0a                	jne    c001d7f2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d7e8:	b3 08                	mov    bl,0x8
c001d7ea:	eb 06                	jmp    c001d7f2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d7ec:	b3 13                	mov    bl,0x13
c001d7ee:	eb 02                	jmp    c001d7f2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d7f0:	b3 17                	mov    bl,0x17
c001d7f2:	83 c4 1c             	add    esp,0x1c
c001d7f5:	88 d8                	mov    al,bl
c001d7f7:	5b                   	pop    ebx
c001d7f8:	5e                   	pop    esi
c001d7f9:	5f                   	pop    edi
c001d7fa:	5d                   	pop    ebp
c001d7fb:	c3                   	ret    

c001d7fc <IDE::polling(unsigned char, unsigned int)>:
c001d7fc:	57                   	push   edi
c001d7fd:	56                   	push   esi
c001d7fe:	53                   	push   ebx
c001d7ff:	bb 04 00 00 00       	mov    ebx,0x4
c001d804:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d808:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d80d:	52                   	push   edx
c001d80e:	6a 0c                	push   0xc
c001d810:	56                   	push   esi
c001d811:	57                   	push   edi
c001d812:	e8 01 f3 ff ff       	call   c001cb18 <IDE::read(unsigned char, unsigned char)>
c001d817:	83 c4 10             	add    esp,0x10
c001d81a:	4b                   	dec    ebx
c001d81b:	75 f0                	jne    c001d80d <IDE::polling(unsigned char, unsigned int)+0x11>
c001d81d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d822:	50                   	push   eax
c001d823:	6a 0c                	push   0xc
c001d825:	56                   	push   esi
c001d826:	57                   	push   edi
c001d827:	e8 ec f2 ff ff       	call   c001cb18 <IDE::read(unsigned char, unsigned char)>
c001d82c:	83 c4 10             	add    esp,0x10
c001d82f:	a8 01                	test   al,0x1
c001d831:	75 17                	jne    c001d84a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001d833:	a8 20                	test   al,0x20
c001d835:	75 0f                	jne    c001d846 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001d837:	4b                   	dec    ebx
c001d838:	74 10                	je     c001d84a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001d83a:	a8 80                	test   al,0x80
c001d83c:	75 e4                	jne    c001d822 <IDE::polling(unsigned char, unsigned int)+0x26>
c001d83e:	a8 08                	test   al,0x8
c001d840:	74 e0                	je     c001d822 <IDE::polling(unsigned char, unsigned int)+0x26>
c001d842:	31 c0                	xor    eax,eax
c001d844:	eb 06                	jmp    c001d84c <IDE::polling(unsigned char, unsigned int)+0x50>
c001d846:	b0 01                	mov    al,0x1
c001d848:	eb 02                	jmp    c001d84c <IDE::polling(unsigned char, unsigned int)+0x50>
c001d84a:	b0 02                	mov    al,0x2
c001d84c:	5b                   	pop    ebx
c001d84d:	5e                   	pop    esi
c001d84e:	5f                   	pop    edi
c001d84f:	c3                   	ret    

c001d850 <SATABus::close(int, int, void*)>:
c001d850:	31 c0                	xor    eax,eax
c001d852:	c3                   	ret    
c001d853:	90                   	nop

c001d854 <SATABus::detect()>:
c001d854:	c3                   	ret    
c001d855:	90                   	nop

c001d856 <SATABus::SATABus()>:
c001d856:	83 ec 0c             	sub    esp,0xc
c001d859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d85d:	83 ec 08             	sub    esp,0x8
c001d860:	68 d4 43 02 c0       	push   0xc00243d4
c001d865:	50                   	push   eax
c001d866:	e8 51 bb fe ff       	call   c00093bc <HardDiskController::HardDiskController(char const*)>
c001d86b:	83 c4 10             	add    esp,0x10
c001d86e:	ba 00 44 02 c0       	mov    edx,0xc0024400
c001d873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d877:	89 10                	mov    DWORD PTR [eax],edx
c001d879:	83 ec 0c             	sub    esp,0xc
c001d87c:	6a 50                	push   0x50
c001d87e:	e8 e5 17 ff ff       	call   c000f068 <Phys::allocateContiguousPages(int)>
c001d883:	83 c4 10             	add    esp,0x10
c001d886:	89 c2                	mov    edx,eax
c001d888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d88c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d892:	83 ec 0c             	sub    esp,0xc
c001d895:	6a 50                	push   0x50
c001d897:	e8 25 49 ff ff       	call   c00121c1 <Virt::allocateKernelVirtualPages(int)>
c001d89c:	83 c4 10             	add    esp,0x10
c001d89f:	89 c2                	mov    edx,eax
c001d8a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8a5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d8ab:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c001d8b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d8b4:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001d8ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d8be:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001d8c4:	83 ec 0c             	sub    esp,0xc
c001d8c7:	6a 03                	push   0x3
c001d8c9:	6a 50                	push   0x50
c001d8cb:	51                   	push   ecx
c001d8cc:	52                   	push   edx
c001d8cd:	50                   	push   eax
c001d8ce:	e8 bb 51 ff ff       	call   c0012a8e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001d8d3:	83 c4 20             	add    esp,0x20
c001d8d6:	90                   	nop
c001d8d7:	83 c4 0c             	add    esp,0xc
c001d8da:	c3                   	ret    
c001d8db:	90                   	nop

c001d8dc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001d8dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d8e0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001d8e3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001d8e6:	09 c2                	or     edx,eax
c001d8e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8ec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d8f2:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d8f4:	31 c0                	xor    eax,eax
c001d8f6:	c1 e9 08             	shr    ecx,0x8
c001d8f9:	83 e1 0f             	and    ecx,0xf
c001d8fc:	39 c8                	cmp    eax,ecx
c001d8fe:	74 0a                	je     c001d90a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001d900:	f6 c2 01             	test   dl,0x1
c001d903:	74 08                	je     c001d90d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001d905:	d1 ea                	shr    edx,1
c001d907:	40                   	inc    eax
c001d908:	eb f2                	jmp    c001d8fc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001d90a:	83 c8 ff             	or     eax,0xffffffff
c001d90d:	c3                   	ret    

c001d90e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001d90e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d912:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001d915:	89 c2                	mov    edx,eax
c001d917:	c1 ea 08             	shr    edx,0x8
c001d91a:	83 e2 0f             	and    edx,0xf
c001d91d:	4a                   	dec    edx
c001d91e:	75 32                	jne    c001d952 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001d920:	83 e0 0f             	and    eax,0xf
c001d923:	83 f8 03             	cmp    eax,0x3
c001d926:	75 2a                	jne    c001d952 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001d928:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001d92b:	b8 02 00 00 00       	mov    eax,0x2
c001d930:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001d936:	74 1c                	je     c001d954 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001d938:	b8 04 00 00 00       	mov    eax,0x4
c001d93d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001d943:	74 0f                	je     c001d954 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001d945:	31 c0                	xor    eax,eax
c001d947:	83 fa 03             	cmp    edx,0x3
c001d94a:	0f 94 c0             	sete   al
c001d94d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001d951:	c3                   	ret    
c001d952:	31 c0                	xor    eax,eax
c001d954:	c3                   	ret    
c001d955:	90                   	nop

c001d956 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001d956:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d95a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d95d:	0f ba e2 0f          	bt     edx,0xf
c001d961:	72 f7                	jb     c001d95a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001d963:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d966:	83 ca 10             	or     edx,0x10
c001d969:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d96c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d96f:	83 ca 01             	or     edx,0x1
c001d972:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d975:	c3                   	ret    

c001d976 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001d976:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d97a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d97d:	83 e2 fe             	and    edx,0xfffffffe
c001d980:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d983:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d986:	83 e2 ef             	and    edx,0xffffffef
c001d989:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d98c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d98f:	0f ba e2 0e          	bt     edx,0xe
c001d993:	72 f7                	jb     c001d98c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001d995:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d998:	0f ba e2 0f          	bt     edx,0xf
c001d99c:	72 ee                	jb     c001d98c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001d99e:	c3                   	ret    
c001d99f:	90                   	nop

c001d9a0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001d9a0:	55                   	push   ebp
c001d9a1:	57                   	push   edi
c001d9a2:	56                   	push   esi
c001d9a3:	53                   	push   ebx
c001d9a4:	83 ec 1c             	sub    esp,0x1c
c001d9a7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d9ab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d9af:	53                   	push   ebx
c001d9b0:	56                   	push   esi
c001d9b1:	e8 c0 ff ff ff       	call   c001d976 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d9b6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d9ba:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001d9c0:	83 ec 0c             	sub    esp,0xc
c001d9c3:	c1 e5 0a             	shl    ebp,0xa
c001d9c6:	01 e8                	add    eax,ebp
c001d9c8:	89 03                	mov    DWORD PTR [ebx],eax
c001d9ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d9cc:	68 00 04 00 00       	push   0x400
c001d9d1:	6a 00                	push   0x0
c001d9d3:	50                   	push   eax
c001d9d4:	e8 17 2b fe ff       	call   c00004f0 <memset>
c001d9d9:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001d9df:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001d9e3:	01 e8                	add    eax,ebp
c001d9e5:	83 c4 1c             	add    esp,0x1c
c001d9e8:	89 03                	mov    DWORD PTR [ebx],eax
c001d9ea:	c1 e2 08             	shl    edx,0x8
c001d9ed:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d9f4:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001d9fa:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001da00:	01 f8                	add    eax,edi
c001da02:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001da05:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001da08:	68 00 01 00 00       	push   0x100
c001da0d:	6a 00                	push   0x0
c001da0f:	50                   	push   eax
c001da10:	e8 db 2a fe ff       	call   c00004f0 <memset>
c001da15:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001da1b:	01 fa                	add    edx,edi
c001da1d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001da21:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001da24:	c1 e7 0d             	shl    edi,0xd
c001da27:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001da2e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001da34:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001da3a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001da3e:	31 ff                	xor    edi,edi
c001da40:	83 c4 10             	add    esp,0x10
c001da43:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001da49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da4d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001da53:	83 c5 20             	add    ebp,0x20
c001da56:	01 f8                	add    eax,edi
c001da58:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001da5b:	52                   	push   edx
c001da5c:	68 00 01 00 00       	push   0x100
c001da61:	6a 00                	push   0x0
c001da63:	50                   	push   eax
c001da64:	e8 87 2a fe ff       	call   c00004f0 <memset>
c001da69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001da6d:	83 c4 10             	add    esp,0x10
c001da70:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001da76:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001da7d:	01 f8                	add    eax,edi
c001da7f:	81 c7 00 01 00 00    	add    edi,0x100
c001da85:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001da88:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001da8e:	75 b3                	jne    c001da43 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001da90:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001da97:	50                   	push   eax
c001da98:	50                   	push   eax
c001da99:	53                   	push   ebx
c001da9a:	56                   	push   esi
c001da9b:	e8 b6 fe ff ff       	call   c001d956 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001daa0:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001daa7:	83 c4 2c             	add    esp,0x2c
c001daaa:	5b                   	pop    ebx
c001daab:	5e                   	pop    esi
c001daac:	5f                   	pop    edi
c001daad:	5d                   	pop    ebp
c001daae:	c3                   	ret    
c001daaf:	90                   	nop

c001dab0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001dab0:	55                   	push   ebp
c001dab1:	57                   	push   edi
c001dab2:	56                   	push   esi
c001dab3:	53                   	push   ebx
c001dab4:	31 db                	xor    ebx,ebx
c001dab6:	83 ec 0c             	sub    esp,0xc
c001dab9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001dabd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001dac1:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001dac4:	f7 c7 01 00 00 00    	test   edi,0x1
c001daca:	74 7a                	je     c001db46 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001dacc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001dad0:	89 d8                	mov    eax,ebx
c001dad2:	c1 e0 07             	shl    eax,0x7
c001dad5:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001dadc:	55                   	push   ebp
c001dadd:	56                   	push   esi
c001dade:	e8 2b fe ff ff       	call   c001d90e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001dae3:	5a                   	pop    edx
c001dae4:	83 f8 01             	cmp    eax,0x1
c001dae7:	59                   	pop    ecx
c001dae8:	75 21                	jne    c001db0b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001daea:	50                   	push   eax
c001daeb:	53                   	push   ebx
c001daec:	55                   	push   ebp
c001daed:	56                   	push   esi
c001daee:	e8 ad fe ff ff       	call   c001d9a0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001daf3:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001dafa:	e8 50 0f ff ff       	call   c000ea4f <malloc>
c001daff:	89 c5                	mov    ebp,eax
c001db01:	89 04 24             	mov    DWORD PTR [esp],eax
c001db04:	e8 25 0f 00 00       	call   c001ea2e <SATA::SATA()>
c001db09:	eb 24                	jmp    c001db2f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001db0b:	83 f8 04             	cmp    eax,0x4
c001db0e:	75 36                	jne    c001db46 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001db10:	51                   	push   ecx
c001db11:	53                   	push   ebx
c001db12:	55                   	push   ebp
c001db13:	56                   	push   esi
c001db14:	e8 87 fe ff ff       	call   c001d9a0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001db19:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001db20:	e8 2a 0f ff ff       	call   c000ea4f <malloc>
c001db25:	89 c5                	mov    ebp,eax
c001db27:	89 04 24             	mov    DWORD PTR [esp],eax
c001db2a:	e8 97 12 00 00       	call   c001edc6 <SATAPI::SATAPI()>
c001db2f:	58                   	pop    eax
c001db30:	5a                   	pop    edx
c001db31:	55                   	push   ebp
c001db32:	56                   	push   esi
c001db33:	e8 2a b5 fe ff       	call   c0009062 <Device::addChild(Device*)>
c001db38:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001db3b:	56                   	push   esi
c001db3c:	6a 00                	push   0x0
c001db3e:	53                   	push   ebx
c001db3f:	55                   	push   ebp
c001db40:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001db43:	83 c4 20             	add    esp,0x20
c001db46:	d1 ef                	shr    edi,1
c001db48:	43                   	inc    ebx
c001db49:	83 fb 20             	cmp    ebx,0x20
c001db4c:	0f 85 72 ff ff ff    	jne    c001dac4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001db52:	83 c4 0c             	add    esp,0xc
c001db55:	5b                   	pop    ebx
c001db56:	5e                   	pop    esi
c001db57:	5f                   	pop    edi
c001db58:	5d                   	pop    ebp
c001db59:	c3                   	ret    

c001db5a <SATABus::open(int, int, void*)>:
c001db5a:	53                   	push   ebx
c001db5b:	83 ec 08             	sub    esp,0x8
c001db5e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001db62:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001db68:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001db6e:	e8 f1 79 ff ff       	call   c0015564 <KeDisablePreemption()>
c001db73:	52                   	push   edx
c001db74:	52                   	push   edx
c001db75:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001db7b:	53                   	push   ebx
c001db7c:	e8 2f ff ff ff       	call   c001dab0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001db81:	e8 06 7a ff ff       	call   c001558c <KeRestorePreemption()>
c001db86:	31 c0                	xor    eax,eax
c001db88:	83 c4 18             	add    esp,0x18
c001db8b:	5b                   	pop    ebx
c001db8c:	c3                   	ret    
c001db8d:	90                   	nop

c001db8e <ATA::close(int, int, void*)>:
c001db8e:	83 ec 0c             	sub    esp,0xc
c001db91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db95:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001db9b:	85 c0                	test   eax,eax
c001db9d:	74 0c                	je     c001dbab <ATA::close(int, int, void*)+0x1d>
c001db9f:	83 ec 0c             	sub    esp,0xc
c001dba2:	8b 10                	mov    edx,DWORD PTR [eax]
c001dba4:	50                   	push   eax
c001dba5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dba8:	83 c4 10             	add    esp,0x10
c001dbab:	31 c0                	xor    eax,eax
c001dbad:	83 c4 0c             	add    esp,0xc
c001dbb0:	c3                   	ret    
c001dbb1:	90                   	nop

c001dbb2 <ATA::powerSaving(PowerSavingLevel)>:
c001dbb2:	c3                   	ret    
c001dbb3:	90                   	nop

c001dbb4 <ATA::ATA()>:
c001dbb4:	83 ec 0c             	sub    esp,0xc
c001dbb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbbb:	83 ec 04             	sub    esp,0x4
c001dbbe:	68 00 02 00 00       	push   0x200
c001dbc3:	68 81 45 02 c0       	push   0xc0024581
c001dbc8:	50                   	push   eax
c001dbc9:	e8 78 b8 fe ff       	call   c0009446 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dbce:	83 c4 10             	add    esp,0x10
c001dbd1:	ba e8 44 02 c0       	mov    edx,0xc00244e8
c001dbd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbda:	89 10                	mov    DWORD PTR [eax],edx
c001dbdc:	90                   	nop
c001dbdd:	83 c4 0c             	add    esp,0xc
c001dbe0:	c3                   	ret    
c001dbe1:	90                   	nop

c001dbe2 <ATA::flush(bool)>:
c001dbe2:	53                   	push   ebx
c001dbe3:	83 ec 08             	sub    esp,0x8
c001dbe6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dbea:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001dbef:	83 f8 01             	cmp    eax,0x1
c001dbf2:	19 c0                	sbb    eax,eax
c001dbf4:	83 e0 fd             	and    eax,0xfffffffd
c001dbf7:	05 ea 00 00 00       	add    eax,0xea
c001dbfc:	50                   	push   eax
c001dbfd:	6a 07                	push   0x7
c001dbff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dc06:	50                   	push   eax
c001dc07:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dc0d:	e8 46 ee ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc12:	83 c4 0c             	add    esp,0xc
c001dc15:	6a 00                	push   0x0
c001dc17:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dc1e:	50                   	push   eax
c001dc1f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dc25:	e8 d2 fb ff ff       	call   c001d7fc <IDE::polling(unsigned char, unsigned int)>
c001dc2a:	83 c4 18             	add    esp,0x18
c001dc2d:	5b                   	pop    ebx
c001dc2e:	c3                   	ret    
c001dc2f:	90                   	nop

c001dc30 <ATA::readyForCommand()>:
c001dc30:	56                   	push   esi
c001dc31:	53                   	push   ebx
c001dc32:	53                   	push   ebx
c001dc33:	31 db                	xor    ebx,ebx
c001dc35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dc39:	51                   	push   ecx
c001dc3a:	6a 0c                	push   0xc
c001dc3c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001dc43:	50                   	push   eax
c001dc44:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001dc4a:	e8 c9 ee ff ff       	call   c001cb18 <IDE::read(unsigned char, unsigned char)>
c001dc4f:	83 c4 10             	add    esp,0x10
c001dc52:	a8 88                	test   al,0x88
c001dc54:	74 1f                	je     c001dc75 <ATA::readyForCommand()+0x45>
c001dc56:	43                   	inc    ebx
c001dc57:	83 fb 63             	cmp    ebx,0x63
c001dc5a:	7e dd                	jle    c001dc39 <ATA::readyForCommand()+0x9>
c001dc5c:	83 ec 0c             	sub    esp,0xc
c001dc5f:	6a 0a                	push   0xa
c001dc61:	e8 8e 7d ff ff       	call   c00159f4 <milliTenthSleep(unsigned int)>
c001dc66:	83 c4 10             	add    esp,0x10
c001dc69:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001dc6f:	75 c8                	jne    c001dc39 <ATA::readyForCommand()+0x9>
c001dc71:	31 c0                	xor    eax,eax
c001dc73:	eb 02                	jmp    c001dc77 <ATA::readyForCommand()+0x47>
c001dc75:	b0 01                	mov    al,0x1
c001dc77:	5a                   	pop    edx
c001dc78:	5b                   	pop    ebx
c001dc79:	5e                   	pop    esi
c001dc7a:	c3                   	ret    
c001dc7b:	90                   	nop

c001dc7c <ATA::access(unsigned long long, int, void*, bool)>:
c001dc7c:	55                   	push   ebp
c001dc7d:	57                   	push   edi
c001dc7e:	56                   	push   esi
c001dc7f:	53                   	push   ebx
c001dc80:	83 ec 2c             	sub    esp,0x2c
c001dc83:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dc87:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dc8b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001dc8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dc93:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001dc97:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001dc9b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dc9f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001dca5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dca9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001dcaf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dcb3:	c1 e0 06             	shl    eax,0x6
c001dcb6:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001dcbe:	74 5d                	je     c001dd1d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001dcc0:	89 fa                	mov    edx,edi
c001dcc2:	89 f0                	mov    eax,esi
c001dcc4:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001dcc8:	c1 ea 1c             	shr    edx,0x1c
c001dccb:	89 d1                	mov    ecx,edx
c001dccd:	09 c1                	or     ecx,eax
c001dccf:	74 25                	je     c001dcf6 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001dcd1:	31 ed                	xor    ebp,ebp
c001dcd3:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001dcda:	89 fa                	mov    edx,edi
c001dcdc:	89 f0                	mov    eax,esi
c001dcde:	0f ad d0             	shrd   eax,edx,cl
c001dce1:	d3 ea                	shr    edx,cl
c001dce3:	f6 c1 20             	test   cl,0x20
c001dce6:	74 02                	je     c001dcea <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001dce8:	89 d0                	mov    eax,edx
c001dcea:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001dcee:	45                   	inc    ebp
c001dcef:	83 fd 06             	cmp    ebp,0x6
c001dcf2:	75 df                	jne    c001dcd3 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001dcf4:	eb 76                	jmp    c001dd6c <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001dcf6:	89 f0                	mov    eax,esi
c001dcf8:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001dcfd:	89 fa                	mov    edx,edi
c001dcff:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001dd06:	0f ac d0 10          	shrd   eax,edx,0x10
c001dd0a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001dd0f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001dd13:	c1 ee 18             	shr    esi,0x18
c001dd16:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001dd1b:	eb 56                	jmp    c001dd73 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001dd1d:	6a 00                	push   0x0
c001dd1f:	6a 3f                	push   0x3f
c001dd21:	57                   	push   edi
c001dd22:	56                   	push   esi
c001dd23:	e8 1c 25 00 00       	call   c0020244 <__umoddi3>
c001dd28:	83 c4 10             	add    esp,0x10
c001dd2b:	40                   	inc    eax
c001dd2c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001dd30:	6a 00                	push   0x0
c001dd32:	68 f0 03 00 00       	push   0x3f0
c001dd37:	57                   	push   edi
c001dd38:	56                   	push   esi
c001dd39:	e8 06 24 00 00       	call   c0020144 <__udivdi3>
c001dd3e:	83 c4 10             	add    esp,0x10
c001dd41:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001dd46:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001dd4d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001dd52:	6a 00                	push   0x0
c001dd54:	6a 3f                	push   0x3f
c001dd56:	57                   	push   edi
c001dd57:	56                   	push   esi
c001dd58:	e8 e7 23 00 00       	call   c0020144 <__udivdi3>
c001dd5d:	83 c4 10             	add    esp,0x10
c001dd60:	83 e0 0f             	and    eax,0xf
c001dd63:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001dd68:	89 c6                	mov    esi,eax
c001dd6a:	eb 07                	jmp    c001dd73 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001dd6c:	31 f6                	xor    esi,esi
c001dd6e:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001dd73:	55                   	push   ebp
c001dd74:	6a 00                	push   0x0
c001dd76:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dd7d:	50                   	push   eax
c001dd7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dd82:	e8 d9 ee ff ff       	call   c001cc60 <IDE::enableIRQs(unsigned char, bool)>
c001dd87:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dd8a:	e8 a1 fe ff ff       	call   c001dc30 <ATA::readyForCommand()>
c001dd8f:	83 c4 10             	add    esp,0x10
c001dd92:	84 c0                	test   al,al
c001dd94:	75 0a                	jne    c001dda0 <ATA::access(unsigned long long, int, void*, bool)+0x124>
c001dd96:	be 01 00 00 00       	mov    esi,0x1
c001dd9b:	e9 c2 02 00 00       	jmp    c001e062 <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001dda0:	fa                   	cli    
c001dda1:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001dda7:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001ddad:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001ddb2:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ddb8:	75 0a                	jne    c001ddc4 <ATA::access(unsigned long long, int, void*, bool)+0x148>
c001ddba:	c1 e0 04             	shl    eax,0x4
c001ddbd:	09 c6                	or     esi,eax
c001ddbf:	83 ce a0             	or     esi,0xffffffa0
c001ddc2:	eb 08                	jmp    c001ddcc <ATA::access(unsigned long long, int, void*, bool)+0x150>
c001ddc4:	c1 e0 04             	shl    eax,0x4
c001ddc7:	09 c6                	or     esi,eax
c001ddc9:	83 ce e0             	or     esi,0xffffffe0
c001ddcc:	89 f0                	mov    eax,esi
c001ddce:	0f b6 d2             	movzx  edx,dl
c001ddd1:	0f b6 f0             	movzx  esi,al
c001ddd4:	56                   	push   esi
c001ddd5:	6a 06                	push   0x6
c001ddd7:	52                   	push   edx
c001ddd8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ddde:	e8 75 ec ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dde3:	83 c4 10             	add    esp,0x10
c001dde6:	6a 00                	push   0x0
c001dde8:	6a 01                	push   0x1
c001ddea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ddf1:	50                   	push   eax
c001ddf2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ddf8:	e8 5b ec ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ddfd:	83 c4 10             	add    esp,0x10
c001de00:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001de05:	83 f8 02             	cmp    eax,0x2
c001de08:	75 6e                	jne    c001de78 <ATA::access(unsigned long long, int, void*, bool)+0x1fc>
c001de0a:	6a 00                	push   0x0
c001de0c:	6a 08                	push   0x8
c001de0e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001de15:	50                   	push   eax
c001de16:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001de1c:	e8 37 ec ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de21:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001de26:	50                   	push   eax
c001de27:	6a 09                	push   0x9
c001de29:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001de30:	50                   	push   eax
c001de31:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001de37:	e8 1c ec ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de3c:	83 c4 20             	add    esp,0x20
c001de3f:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001de44:	50                   	push   eax
c001de45:	6a 0a                	push   0xa
c001de47:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001de4e:	50                   	push   eax
c001de4f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001de55:	e8 fe eb ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de5a:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001de5f:	50                   	push   eax
c001de60:	6a 0b                	push   0xb
c001de62:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001de69:	50                   	push   eax
c001de6a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001de70:	e8 e3 eb ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de75:	83 c4 20             	add    esp,0x20
c001de78:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001de7d:	50                   	push   eax
c001de7e:	6a 02                	push   0x2
c001de80:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001de87:	50                   	push   eax
c001de88:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001de8e:	e8 c5 eb ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de93:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001de98:	50                   	push   eax
c001de99:	6a 03                	push   0x3
c001de9b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dea2:	50                   	push   eax
c001dea3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dea9:	e8 aa eb ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001deae:	83 c4 20             	add    esp,0x20
c001deb1:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001deb6:	50                   	push   eax
c001deb7:	6a 04                	push   0x4
c001deb9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dec0:	50                   	push   eax
c001dec1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dec7:	e8 8c eb ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001decc:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ded1:	50                   	push   eax
c001ded2:	6a 05                	push   0x5
c001ded4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dedb:	50                   	push   eax
c001dedc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dee2:	e8 71 eb ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dee7:	83 c4 20             	add    esp,0x20
c001deea:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001deef:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001def4:	74 13                	je     c001df09 <ATA::access(unsigned long long, int, void*, bool)+0x28d>
c001def6:	83 f8 02             	cmp    eax,0x2
c001def9:	74 20                	je     c001df1b <ATA::access(unsigned long long, int, void*, bool)+0x29f>
c001defb:	48                   	dec    eax
c001defc:	0f 85 94 fe ff ff    	jne    c001dd96 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001df02:	b8 30 00 00 00       	mov    eax,0x30
c001df07:	eb 1e                	jmp    c001df27 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001df09:	83 f8 02             	cmp    eax,0x2
c001df0c:	74 14                	je     c001df22 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001df0e:	48                   	dec    eax
c001df0f:	b8 20 00 00 00       	mov    eax,0x20
c001df14:	74 11                	je     c001df27 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001df16:	e9 7b fe ff ff       	jmp    c001dd96 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001df1b:	b8 34 00 00 00       	mov    eax,0x34
c001df20:	eb 05                	jmp    c001df27 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001df22:	b8 24 00 00 00       	mov    eax,0x24
c001df27:	50                   	push   eax
c001df28:	6a 07                	push   0x7
c001df2a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001df31:	50                   	push   eax
c001df32:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001df38:	e8 1b eb ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001df3d:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001df44:	83 c4 10             	add    esp,0x10
c001df47:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c001df4e:	75 01                	jne    c001df51 <ATA::access(unsigned long long, int, void*, bool)+0x2d5>
c001df50:	fb                   	sti    
c001df51:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001df55:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001df5a:	85 f6                	test   esi,esi
c001df5c:	0f 84 dd 00 00 00    	je     c001e03f <ATA::access(unsigned long long, int, void*, bool)+0x3c3>
c001df62:	57                   	push   edi
c001df63:	6a 01                	push   0x1
c001df65:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001df6c:	50                   	push   eax
c001df6d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001df73:	e8 84 f8 ff ff       	call   c001d7fc <IDE::polling(unsigned char, unsigned int)>
c001df78:	83 c4 10             	add    esp,0x10
c001df7b:	0f b6 c0             	movzx  eax,al
c001df7e:	85 c0                	test   eax,eax
c001df80:	74 23                	je     c001dfa5 <ATA::access(unsigned long long, int, void*, bool)+0x329>
c001df82:	50                   	push   eax
c001df83:	89 c6                	mov    esi,eax
c001df85:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001df8c:	50                   	push   eax
c001df8d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001df94:	50                   	push   eax
c001df95:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001df9b:	e8 a2 f7 ff ff       	call   c001d742 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001dfa0:	e9 ba 00 00 00       	jmp    c001e05f <ATA::access(unsigned long long, int, void*, bool)+0x3e3>
c001dfa5:	85 ed                	test   ebp,ebp
c001dfa7:	74 49                	je     c001dff2 <ATA::access(unsigned long long, int, void*, bool)+0x376>
c001dfa9:	fa                   	cli    
c001dfaa:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001dfb0:	31 c9                	xor    ecx,ecx
c001dfb2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001dfb6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001dfba:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001dfbe:	51                   	push   ecx
c001dfbf:	51                   	push   ecx
c001dfc0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dfc7:	50                   	push   eax
c001dfc8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dfce:	e8 73 ea ff ff       	call   c001ca46 <IDE::getBase(unsigned char)>
c001dfd3:	89 c2                	mov    edx,eax
c001dfd5:	89 f8                	mov    eax,edi
c001dfd7:	66 ef                	out    dx,ax
c001dfd9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001dfdd:	83 c4 10             	add    esp,0x10
c001dfe0:	41                   	inc    ecx
c001dfe1:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001dfe7:	75 c9                	jne    c001dfb2 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001dfe9:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001dff0:	eb 35                	jmp    c001e027 <ATA::access(unsigned long long, int, void*, bool)+0x3ab>
c001dff2:	fa                   	cli    
c001dff3:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001dff9:	52                   	push   edx
c001dffa:	52                   	push   edx
c001dffb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e002:	50                   	push   eax
c001e003:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e009:	e8 38 ea ff ff       	call   c001ca46 <IDE::getBase(unsigned char)>
c001e00e:	b9 00 01 00 00       	mov    ecx,0x100
c001e013:	89 c2                	mov    edx,eax
c001e015:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001e019:	fc                   	cld    
c001e01a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001e01d:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001e024:	83 c4 10             	add    esp,0x10
c001e027:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c001e02e:	75 01                	jne    c001e031 <ATA::access(unsigned long long, int, void*, bool)+0x3b5>
c001e030:	fb                   	sti    
c001e031:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001e039:	4e                   	dec    esi
c001e03a:	e9 1b ff ff ff       	jmp    c001df5a <ATA::access(unsigned long long, int, void*, bool)+0x2de>
c001e03f:	31 f6                	xor    esi,esi
c001e041:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e046:	74 1a                	je     c001e062 <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001e048:	50                   	push   eax
c001e049:	50                   	push   eax
c001e04a:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001e04f:	83 f8 02             	cmp    eax,0x2
c001e052:	0f 94 c0             	sete   al
c001e055:	0f b6 c0             	movzx  eax,al
c001e058:	50                   	push   eax
c001e059:	53                   	push   ebx
c001e05a:	e8 83 fb ff ff       	call   c001dbe2 <ATA::flush(bool)>
c001e05f:	83 c4 10             	add    esp,0x10
c001e062:	83 c4 2c             	add    esp,0x2c
c001e065:	89 f0                	mov    eax,esi
c001e067:	5b                   	pop    ebx
c001e068:	5e                   	pop    esi
c001e069:	5f                   	pop    edi
c001e06a:	5d                   	pop    ebp
c001e06b:	c3                   	ret    

c001e06c <ATA::read(unsigned long long, int, void*)>:
c001e06c:	57                   	push   edi
c001e06d:	b8 04 00 00 00       	mov    eax,0x4
c001e072:	56                   	push   esi
c001e073:	53                   	push   ebx
c001e074:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e078:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e07c:	8d 7a ff             	lea    edi,[edx-0x1]
c001e07f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e083:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e087:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001e08d:	77 25                	ja     c001e0b4 <ATA::read(unsigned long long, int, void*)+0x48>
c001e08f:	b8 06 00 00 00       	mov    eax,0x6
c001e094:	85 f6                	test   esi,esi
c001e096:	74 1c                	je     c001e0b4 <ATA::read(unsigned long long, int, void*)+0x48>
c001e098:	50                   	push   eax
c001e099:	50                   	push   eax
c001e09a:	6a 00                	push   0x0
c001e09c:	56                   	push   esi
c001e09d:	52                   	push   edx
c001e09e:	53                   	push   ebx
c001e09f:	51                   	push   ecx
c001e0a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e0a4:	e8 d3 fb ff ff       	call   c001dc7c <ATA::access(unsigned long long, int, void*, bool)>
c001e0a9:	83 c4 20             	add    esp,0x20
c001e0ac:	85 c0                	test   eax,eax
c001e0ae:	0f 95 c0             	setne  al
c001e0b1:	0f b6 c0             	movzx  eax,al
c001e0b4:	5b                   	pop    ebx
c001e0b5:	5e                   	pop    esi
c001e0b6:	5f                   	pop    edi
c001e0b7:	c3                   	ret    

c001e0b8 <ATA::write(unsigned long long, int, void*)>:
c001e0b8:	57                   	push   edi
c001e0b9:	b8 04 00 00 00       	mov    eax,0x4
c001e0be:	56                   	push   esi
c001e0bf:	53                   	push   ebx
c001e0c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e0c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e0c8:	8d 7a ff             	lea    edi,[edx-0x1]
c001e0cb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e0cf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e0d3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001e0d9:	77 25                	ja     c001e100 <ATA::write(unsigned long long, int, void*)+0x48>
c001e0db:	b8 06 00 00 00       	mov    eax,0x6
c001e0e0:	85 f6                	test   esi,esi
c001e0e2:	74 1c                	je     c001e100 <ATA::write(unsigned long long, int, void*)+0x48>
c001e0e4:	50                   	push   eax
c001e0e5:	50                   	push   eax
c001e0e6:	6a 01                	push   0x1
c001e0e8:	56                   	push   esi
c001e0e9:	52                   	push   edx
c001e0ea:	53                   	push   ebx
c001e0eb:	51                   	push   ecx
c001e0ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e0f0:	e8 87 fb ff ff       	call   c001dc7c <ATA::access(unsigned long long, int, void*, bool)>
c001e0f5:	83 c4 20             	add    esp,0x20
c001e0f8:	85 c0                	test   eax,eax
c001e0fa:	0f 95 c0             	setne  al
c001e0fd:	0f b6 c0             	movzx  eax,al
c001e100:	5b                   	pop    ebx
c001e101:	5e                   	pop    esi
c001e102:	5f                   	pop    edi
c001e103:	c3                   	ret    

c001e104 <ATA::detectCHS()>:
c001e104:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e108:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001e10e:	c1 e0 06             	shl    eax,0x6
c001e111:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001e117:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001e121:	c7 44 24 04 24 44 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024424
c001e129:	e9 68 0c ff ff       	jmp    c000ed96 <KePanic(char const*)>

c001e12e <ATA::open(int, int, void*)>:
c001e12e:	53                   	push   ebx
c001e12f:	83 ec 08             	sub    esp,0x8
c001e132:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e136:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e13a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e13e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001e144:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e14a:	c1 e0 06             	shl    eax,0x6
c001e14d:	01 d0                	add    eax,edx
c001e14f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001e156:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001e15c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001e163:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001e16d:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001e173:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001e17a:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001e181:	75 0c                	jne    c001e18f <ATA::open(int, int, void*)+0x61>
c001e183:	83 ec 0c             	sub    esp,0xc
c001e186:	53                   	push   ebx
c001e187:	e8 78 ff ff ff       	call   c001e104 <ATA::detectCHS()>
c001e18c:	83 c4 10             	add    esp,0x10
c001e18f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001e195:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e19b:	c1 e0 06             	shl    eax,0x6
c001e19e:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001e1a5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e1af:	d1 e8                	shr    eax,1
c001e1b1:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001e1b7:	6a 04                	push   0x4
c001e1b9:	6a 0c                	push   0xc
c001e1bb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e1c2:	50                   	push   eax
c001e1c3:	52                   	push   edx
c001e1c4:	e8 8f e8 ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e1c9:	90                   	nop
c001e1ca:	90                   	nop
c001e1cb:	6a 00                	push   0x0
c001e1cd:	6a 0c                	push   0xc
c001e1cf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e1d6:	50                   	push   eax
c001e1d7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e1dd:	e8 76 e8 ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e1e2:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e1e8:	83 c4 20             	add    esp,0x20
c001e1eb:	c1 e0 06             	shl    eax,0x6
c001e1ee:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c001e1f4:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c001e1fb:	0f 84 00 01 00 00    	je     c001e301 <ATA::open(int, int, void*)+0x1d3>
c001e201:	83 ec 0c             	sub    esp,0xc
c001e204:	6a 08                	push   0x8
c001e206:	e8 5d 0e ff ff       	call   c000f068 <Phys::allocateContiguousPages(int)>
c001e20b:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e211:	c7 04 24 36 44 02 c0 	mov    DWORD PTR [esp],0xc0024436
c001e218:	e8 47 8d fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e21d:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001e224:	e8 98 3f ff ff       	call   c00121c1 <Virt::allocateKernelVirtualPages(int)>
c001e229:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e22f:	6a 03                	push   0x3
c001e231:	50                   	push   eax
c001e232:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e238:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c001e23e:	e8 61 46 ff ff       	call   c00128a4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e243:	83 c4 20             	add    esp,0x20
c001e246:	e8 3f 0d ff ff       	call   c000ef8a <Phys::allocatePage()>
c001e24b:	83 ec 0c             	sub    esp,0xc
c001e24e:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c001e254:	6a 01                	push   0x1
c001e256:	e8 66 3f ff ff       	call   c00121c1 <Virt::allocateKernelVirtualPages(int)>
c001e25b:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c001e261:	6a 03                	push   0x3
c001e263:	50                   	push   eax
c001e264:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c001e26a:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c001e270:	e8 2f 46 ff ff       	call   c00128a4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e275:	83 c4 14             	add    esp,0x14
c001e278:	68 6f 44 02 c0       	push   0xc002446f
c001e27d:	e8 e2 8c fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e282:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c001e289:	50                   	push   eax
c001e28a:	6a 12                	push   0x12
c001e28c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e293:	50                   	push   eax
c001e294:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e29a:	e8 b9 e7 ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e29f:	83 c4 20             	add    esp,0x20
c001e2a2:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c001e2a8:	0f b6 c4             	movzx  eax,ah
c001e2ab:	50                   	push   eax
c001e2ac:	6a 13                	push   0x13
c001e2ae:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e2b5:	50                   	push   eax
c001e2b6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e2bc:	e8 97 e7 ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e2c1:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c001e2c8:	50                   	push   eax
c001e2c9:	6a 14                	push   0x14
c001e2cb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e2d2:	50                   	push   eax
c001e2d3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e2d9:	e8 7a e7 ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e2de:	83 c4 20             	add    esp,0x20
c001e2e1:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c001e2e8:	50                   	push   eax
c001e2e9:	6a 15                	push   0x15
c001e2eb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e2f2:	50                   	push   eax
c001e2f3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e2f9:	e8 5a e7 ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e2fe:	83 c4 10             	add    esp,0x10
c001e301:	83 ec 0c             	sub    esp,0xc
c001e304:	53                   	push   ebx
c001e305:	e8 a4 b1 fe ff       	call   c00094ae <PhysicalDisk::startCache()>
c001e30a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e30d:	e8 3c c0 fe ff       	call   c000a34e <createPartitionsForDisk(PhysicalDisk*)>
c001e312:	31 c0                	xor    eax,eax
c001e314:	83 c4 18             	add    esp,0x18
c001e317:	5b                   	pop    ebx
c001e318:	c3                   	ret    

c001e319 <combineCharAndColour(char, unsigned char)>:
c001e319:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e31e:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001e324:	c1 e0 08             	shl    eax,0x8
c001e327:	09 d0                	or     eax,edx
c001e329:	c3                   	ret    

c001e32a <combineColours(unsigned char, unsigned char)>:
c001e32a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e32f:	c1 e0 04             	shl    eax,0x4
c001e332:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001e336:	c3                   	ret    
c001e337:	90                   	nop

c001e338 <ATAPI::write(unsigned long long, int, void*)>:
c001e338:	b8 03 00 00 00       	mov    eax,0x3
c001e33d:	c3                   	ret    

c001e33e <ATAPI::close(int, int, void*)>:
c001e33e:	83 ec 0c             	sub    esp,0xc
c001e341:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e345:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e34b:	85 c0                	test   eax,eax
c001e34d:	74 0c                	je     c001e35b <ATAPI::close(int, int, void*)+0x1d>
c001e34f:	83 ec 0c             	sub    esp,0xc
c001e352:	8b 10                	mov    edx,DWORD PTR [eax]
c001e354:	50                   	push   eax
c001e355:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e358:	83 c4 10             	add    esp,0x10
c001e35b:	31 c0                	xor    eax,eax
c001e35d:	83 c4 0c             	add    esp,0xc
c001e360:	c3                   	ret    
c001e361:	90                   	nop

c001e362 <ATAPI::ATAPI()>:
c001e362:	83 ec 0c             	sub    esp,0xc
c001e365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e369:	83 ec 04             	sub    esp,0x4
c001e36c:	68 00 08 00 00       	push   0x800
c001e371:	68 21 46 02 c0       	push   0xc0024621
c001e376:	50                   	push   eax
c001e377:	e8 ca b0 fe ff       	call   c0009446 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e37c:	83 c4 10             	add    esp,0x10
c001e37f:	ba 30 45 02 c0       	mov    edx,0xc0024530
c001e384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e388:	89 10                	mov    DWORD PTR [eax],edx
c001e38a:	90                   	nop
c001e38b:	83 c4 0c             	add    esp,0xc
c001e38e:	c3                   	ret    
c001e38f:	90                   	nop

c001e390 <ATAPI::readyForCommand()>:
c001e390:	56                   	push   esi
c001e391:	53                   	push   ebx
c001e392:	53                   	push   ebx
c001e393:	31 db                	xor    ebx,ebx
c001e395:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e399:	51                   	push   ecx
c001e39a:	6a 0c                	push   0xc
c001e39c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001e3a3:	50                   	push   eax
c001e3a4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001e3aa:	e8 69 e7 ff ff       	call   c001cb18 <IDE::read(unsigned char, unsigned char)>
c001e3af:	83 c4 10             	add    esp,0x10
c001e3b2:	a8 88                	test   al,0x88
c001e3b4:	74 25                	je     c001e3db <ATAPI::readyForCommand()+0x4b>
c001e3b6:	43                   	inc    ebx
c001e3b7:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001e3bd:	7e da                	jle    c001e399 <ATAPI::readyForCommand()+0x9>
c001e3bf:	83 ec 0c             	sub    esp,0xc
c001e3c2:	68 5e 01 00 00       	push   0x15e
c001e3c7:	e8 28 76 ff ff       	call   c00159f4 <milliTenthSleep(unsigned int)>
c001e3cc:	83 c4 10             	add    esp,0x10
c001e3cf:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001e3d5:	75 c2                	jne    c001e399 <ATAPI::readyForCommand()+0x9>
c001e3d7:	31 c0                	xor    eax,eax
c001e3d9:	eb 02                	jmp    c001e3dd <ATAPI::readyForCommand()+0x4d>
c001e3db:	b0 01                	mov    al,0x1
c001e3dd:	5a                   	pop    edx
c001e3de:	5b                   	pop    ebx
c001e3df:	5e                   	pop    esi
c001e3e0:	c3                   	ret    
c001e3e1:	90                   	nop

c001e3e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001e3e2:	55                   	push   ebp
c001e3e3:	57                   	push   edi
c001e3e4:	56                   	push   esi
c001e3e5:	53                   	push   ebx
c001e3e6:	83 ec 20             	sub    esp,0x20
c001e3e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001e3ed:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001e3f1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001e3f5:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e3f9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e3fd:	6a 01                	push   0x1
c001e3ff:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e406:	50                   	push   eax
c001e407:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e40d:	e8 4e e8 ff ff       	call   c001cc60 <IDE::enableIRQs(unsigned char, bool)>
c001e412:	5e                   	pop    esi
c001e413:	58                   	pop    eax
c001e414:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e41b:	50                   	push   eax
c001e41c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e422:	e8 0b e6 ff ff       	call   c001ca32 <IDE::prepareInterrupt(unsigned char)>
c001e427:	89 3c 24             	mov    DWORD PTR [esp],edi
c001e42a:	e8 61 ff ff ff       	call   c001e390 <ATAPI::readyForCommand()>
c001e42f:	83 c4 10             	add    esp,0x10
c001e432:	84 c0                	test   al,al
c001e434:	75 0a                	jne    c001e440 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001e436:	bb 01 00 00 00       	mov    ebx,0x1
c001e43b:	e9 60 02 00 00       	jmp    c001e6a0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001e440:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001e446:	c1 e0 04             	shl    eax,0x4
c001e449:	0f b6 c0             	movzx  eax,al
c001e44c:	50                   	push   eax
c001e44d:	6a 06                	push   0x6
c001e44f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e456:	50                   	push   eax
c001e457:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e45d:	e8 f6 e5 ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e462:	6a 00                	push   0x0
c001e464:	6a 01                	push   0x1
c001e466:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e46d:	50                   	push   eax
c001e46e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e474:	e8 df e5 ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e479:	83 c4 20             	add    esp,0x20
c001e47c:	0f b6 c3             	movzx  eax,bl
c001e47f:	0f b6 df             	movzx  ebx,bh
c001e482:	50                   	push   eax
c001e483:	6a 04                	push   0x4
c001e485:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e48c:	50                   	push   eax
c001e48d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e493:	e8 c0 e5 ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e498:	53                   	push   ebx
c001e499:	6a 05                	push   0x5
c001e49b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e4a2:	50                   	push   eax
c001e4a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e4a9:	e8 aa e5 ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e4ae:	83 c4 20             	add    esp,0x20
c001e4b1:	68 a0 00 00 00       	push   0xa0
c001e4b6:	6a 07                	push   0x7
c001e4b8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e4bf:	50                   	push   eax
c001e4c0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e4c6:	e8 8d e5 ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e4cb:	83 c4 0c             	add    esp,0xc
c001e4ce:	6a 01                	push   0x1
c001e4d0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e4d7:	50                   	push   eax
c001e4d8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e4de:	e8 19 f3 ff ff       	call   c001d7fc <IDE::polling(unsigned char, unsigned int)>
c001e4e3:	83 c4 10             	add    esp,0x10
c001e4e6:	0f b6 d8             	movzx  ebx,al
c001e4e9:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001e4ef:	85 db                	test   ebx,ebx
c001e4f1:	74 20                	je     c001e513 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001e4f3:	53                   	push   ebx
c001e4f4:	0f b6 c0             	movzx  eax,al
c001e4f7:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001e4fe:	52                   	push   edx
c001e4ff:	50                   	push   eax
c001e500:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e506:	e8 37 f2 ff ff       	call   c001d742 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001e50b:	83 c4 10             	add    esp,0x10
c001e50e:	e9 8d 01 00 00       	jmp    c001e6a0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001e513:	0f b6 c0             	movzx  eax,al
c001e516:	53                   	push   ebx
c001e517:	53                   	push   ebx
c001e518:	50                   	push   eax
c001e519:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e51f:	e8 22 e5 ff ff       	call   c001ca46 <IDE::getBase(unsigned char)>
c001e524:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001e528:	b9 06 00 00 00       	mov    ecx,0x6
c001e52d:	89 c2                	mov    edx,eax
c001e52f:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001e532:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001e536:	83 c4 10             	add    esp,0x10
c001e539:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001e53e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e542:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001e548:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001e54f:	85 db                	test   ebx,ebx
c001e551:	0f 84 ec 00 00 00    	je     c001e643 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001e557:	51                   	push   ecx
c001e558:	51                   	push   ecx
c001e559:	52                   	push   edx
c001e55a:	50                   	push   eax
c001e55b:	e8 66 e6 ff ff       	call   c001cbc6 <IDE::waitInterrupt(unsigned char)>
c001e560:	83 c4 10             	add    esp,0x10
c001e563:	84 c0                	test   al,al
c001e565:	0f 84 cb fe ff ff    	je     c001e436 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001e56b:	56                   	push   esi
c001e56c:	56                   	push   esi
c001e56d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e574:	50                   	push   eax
c001e575:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e57b:	e8 b2 e4 ff ff       	call   c001ca32 <IDE::prepareInterrupt(unsigned char)>
c001e580:	83 c4 0c             	add    esp,0xc
c001e583:	6a 04                	push   0x4
c001e585:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e58c:	50                   	push   eax
c001e58d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e593:	e8 80 e5 ff ff       	call   c001cb18 <IDE::read(unsigned char, unsigned char)>
c001e598:	83 c4 0c             	add    esp,0xc
c001e59b:	89 c6                	mov    esi,eax
c001e59d:	6a 05                	push   0x5
c001e59f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e5a6:	50                   	push   eax
c001e5a7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e5ad:	e8 66 e5 ff ff       	call   c001cb18 <IDE::read(unsigned char, unsigned char)>
c001e5b2:	89 f1                	mov    ecx,esi
c001e5b4:	0f b6 c0             	movzx  eax,al
c001e5b7:	0f b6 f1             	movzx  esi,cl
c001e5ba:	c1 e0 08             	shl    eax,0x8
c001e5bd:	09 c6                	or     esi,eax
c001e5bf:	d1 fe                	sar    esi,1
c001e5c1:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001e5c5:	83 c4 10             	add    esp,0x10
c001e5c8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001e5cd:	74 41                	je     c001e610 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001e5cf:	31 c9                	xor    ecx,ecx
c001e5d1:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001e5d7:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001e5de:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001e5e2:	75 0a                	jne    c001e5ee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001e5e4:	01 c9                	add    ecx,ecx
c001e5e6:	01 cd                	add    ebp,ecx
c001e5e8:	4b                   	dec    ebx
c001e5e9:	e9 54 ff ff ff       	jmp    c001e542 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001e5ee:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001e5f3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e5f7:	51                   	push   ecx
c001e5f8:	51                   	push   ecx
c001e5f9:	52                   	push   edx
c001e5fa:	50                   	push   eax
c001e5fb:	e8 46 e4 ff ff       	call   c001ca46 <IDE::getBase(unsigned char)>
c001e600:	89 c2                	mov    edx,eax
c001e602:	89 f0                	mov    eax,esi
c001e604:	66 ef                	out    dx,ax
c001e606:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e60a:	83 c4 10             	add    esp,0x10
c001e60d:	41                   	inc    ecx
c001e60e:	eb c1                	jmp    c001e5d1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001e610:	31 f6                	xor    esi,esi
c001e612:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001e618:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001e61f:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001e623:	75 06                	jne    c001e62b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001e625:	01 f6                	add    esi,esi
c001e627:	01 f5                	add    ebp,esi
c001e629:	eb bd                	jmp    c001e5e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001e62b:	51                   	push   ecx
c001e62c:	51                   	push   ecx
c001e62d:	52                   	push   edx
c001e62e:	50                   	push   eax
c001e62f:	e8 12 e4 ff ff       	call   c001ca46 <IDE::getBase(unsigned char)>
c001e634:	89 c2                	mov    edx,eax
c001e636:	66 ed                	in     ax,dx
c001e638:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001e63d:	83 c4 10             	add    esp,0x10
c001e640:	46                   	inc    esi
c001e641:	eb cf                	jmp    c001e612 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001e643:	51                   	push   ecx
c001e644:	51                   	push   ecx
c001e645:	52                   	push   edx
c001e646:	50                   	push   eax
c001e647:	e8 7a e5 ff ff       	call   c001cbc6 <IDE::waitInterrupt(unsigned char)>
c001e64c:	83 c4 10             	add    esp,0x10
c001e64f:	84 c0                	test   al,al
c001e651:	0f 84 df fd ff ff    	je     c001e436 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001e657:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e65c:	52                   	push   edx
c001e65d:	52                   	push   edx
c001e65e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e665:	50                   	push   eax
c001e666:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e66c:	e8 c1 e3 ff ff       	call   c001ca32 <IDE::prepareInterrupt(unsigned char)>
c001e671:	83 c4 10             	add    esp,0x10
c001e674:	50                   	push   eax
c001e675:	50                   	push   eax
c001e676:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e67d:	50                   	push   eax
c001e67e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e684:	e8 bd e3 ff ff       	call   c001ca46 <IDE::getBase(unsigned char)>
c001e689:	8d 50 07             	lea    edx,[eax+0x7]
c001e68c:	ec                   	in     al,dx
c001e68d:	83 c4 10             	add    esp,0x10
c001e690:	a8 88                	test   al,0x88
c001e692:	74 0a                	je     c001e69e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001e694:	4b                   	dec    ebx
c001e695:	75 dd                	jne    c001e674 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001e697:	bb 02 00 00 00       	mov    ebx,0x2
c001e69c:	eb 02                	jmp    c001e6a0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001e69e:	31 db                	xor    ebx,ebx
c001e6a0:	83 c4 1c             	add    esp,0x1c
c001e6a3:	89 d8                	mov    eax,ebx
c001e6a5:	5b                   	pop    ebx
c001e6a6:	5e                   	pop    esi
c001e6a7:	5f                   	pop    edi
c001e6a8:	5d                   	pop    ebp
c001e6a9:	c3                   	ret    

c001e6aa <ATAPI::diskRemoved()>:
c001e6aa:	53                   	push   ebx
c001e6ab:	83 ec 14             	sub    esp,0x14
c001e6ae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e6b2:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e6b9:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001e6bf:	e8 7a b9 fe ff       	call   c000a03e <LogicalDisk::unmount()>
c001e6c4:	58                   	pop    eax
c001e6c5:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e6cb:	e8 98 c3 fe ff       	call   c000aa68 <VCache::writeWriteBuffer()>
c001e6d0:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001e6d6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e6da:	83 c4 18             	add    esp,0x18
c001e6dd:	5b                   	pop    ebx
c001e6de:	e9 75 c3 fe ff       	jmp    c000aa58 <VCache::invalidateReadBuffer()>
c001e6e3:	90                   	nop

c001e6e4 <ATAPI::eject()>:
c001e6e4:	57                   	push   edi
c001e6e5:	b9 03 00 00 00       	mov    ecx,0x3
c001e6ea:	53                   	push   ebx
c001e6eb:	83 ec 14             	sub    esp,0x14
c001e6ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e6f2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e6f6:	fc                   	cld    
c001e6f7:	31 c0                	xor    eax,eax
c001e6f9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e6fb:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e700:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e705:	50                   	push   eax
c001e706:	50                   	push   eax
c001e707:	6a 00                	push   0x0
c001e709:	6a 00                	push   0x0
c001e70b:	6a 00                	push   0x0
c001e70d:	6a 02                	push   0x2
c001e70f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e713:	50                   	push   eax
c001e714:	53                   	push   ebx
c001e715:	e8 c8 fc ff ff       	call   c001e3e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e71a:	83 c4 14             	add    esp,0x14
c001e71d:	53                   	push   ebx
c001e71e:	e8 87 ff ff ff       	call   c001e6aa <ATAPI::diskRemoved()>
c001e723:	83 c4 24             	add    esp,0x24
c001e726:	31 c0                	xor    eax,eax
c001e728:	5b                   	pop    ebx
c001e729:	5f                   	pop    edi
c001e72a:	c3                   	ret    
c001e72b:	90                   	nop

c001e72c <ATAPI::diskInserted()>:
c001e72c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e730:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001e737:	c3                   	ret    

c001e738 <ATAPI::detectMedia()>:
c001e738:	56                   	push   esi
c001e739:	53                   	push   ebx
c001e73a:	83 ec 28             	sub    esp,0x28
c001e73d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e741:	6a 0c                	push   0xc
c001e743:	6a 00                	push   0x0
c001e745:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001e749:	56                   	push   esi
c001e74a:	e8 a1 1d fe ff       	call   c00004f0 <memset>
c001e74f:	58                   	pop    eax
c001e750:	5a                   	pop    edx
c001e751:	6a 00                	push   0x0
c001e753:	6a 00                	push   0x0
c001e755:	6a 00                	push   0x0
c001e757:	6a 00                	push   0x0
c001e759:	56                   	push   esi
c001e75a:	53                   	push   ebx
c001e75b:	e8 82 fc ff ff       	call   c001e3e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e760:	83 c4 1c             	add    esp,0x1c
c001e763:	6a 0c                	push   0xc
c001e765:	6a 00                	push   0x0
c001e767:	56                   	push   esi
c001e768:	e8 83 1d fe ff       	call   c00004f0 <memset>
c001e76d:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001e772:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001e777:	59                   	pop    ecx
c001e778:	58                   	pop    eax
c001e779:	6a 01                	push   0x1
c001e77b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001e77f:	50                   	push   eax
c001e780:	6a 00                	push   0x0
c001e782:	6a 12                	push   0x12
c001e784:	56                   	push   esi
c001e785:	53                   	push   ebx
c001e786:	e8 57 fc ff ff       	call   c001e3e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e78b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001e78f:	83 c4 20             	add    esp,0x20
c001e792:	83 e0 7f             	and    eax,0x7f
c001e795:	83 f8 70             	cmp    eax,0x70
c001e798:	74 15                	je     c001e7af <ATAPI::detectMedia()+0x77>
c001e79a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e7a1:	75 0c                	jne    c001e7af <ATAPI::detectMedia()+0x77>
c001e7a3:	83 ec 0c             	sub    esp,0xc
c001e7a6:	53                   	push   ebx
c001e7a7:	e8 80 ff ff ff       	call   c001e72c <ATAPI::diskInserted()>
c001e7ac:	83 c4 10             	add    esp,0x10
c001e7af:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e7b3:	83 e0 0f             	and    eax,0xf
c001e7b6:	83 f8 02             	cmp    eax,0x2
c001e7b9:	75 1b                	jne    c001e7d6 <ATAPI::detectMedia()+0x9e>
c001e7bb:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001e7c0:	75 2d                	jne    c001e7ef <ATAPI::detectMedia()+0xb7>
c001e7c2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e7c9:	74 24                	je     c001e7ef <ATAPI::detectMedia()+0xb7>
c001e7cb:	83 ec 0c             	sub    esp,0xc
c001e7ce:	53                   	push   ebx
c001e7cf:	e8 d6 fe ff ff       	call   c001e6aa <ATAPI::diskRemoved()>
c001e7d4:	eb 16                	jmp    c001e7ec <ATAPI::detectMedia()+0xb4>
c001e7d6:	85 c0                	test   eax,eax
c001e7d8:	75 15                	jne    c001e7ef <ATAPI::detectMedia()+0xb7>
c001e7da:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e7e1:	75 0c                	jne    c001e7ef <ATAPI::detectMedia()+0xb7>
c001e7e3:	83 ec 0c             	sub    esp,0xc
c001e7e6:	53                   	push   ebx
c001e7e7:	e8 40 ff ff ff       	call   c001e72c <ATAPI::diskInserted()>
c001e7ec:	83 c4 10             	add    esp,0x10
c001e7ef:	83 c4 24             	add    esp,0x24
c001e7f2:	5b                   	pop    ebx
c001e7f3:	5e                   	pop    esi
c001e7f4:	c3                   	ret    
c001e7f5:	90                   	nop

c001e7f6 <ATAPI::open(int, int, void*)>:
c001e7f6:	56                   	push   esi
c001e7f7:	53                   	push   ebx
c001e7f8:	50                   	push   eax
c001e7f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e7fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e801:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e805:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e80b:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001e811:	c1 e0 06             	shl    eax,0x6
c001e814:	01 d0                	add    eax,edx
c001e816:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001e81d:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001e823:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001e82a:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e834:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e83a:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e841:	6a 04                	push   0x4
c001e843:	6a 0c                	push   0xc
c001e845:	51                   	push   ecx
c001e846:	52                   	push   edx
c001e847:	e8 0c e2 ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e84c:	90                   	nop
c001e84d:	90                   	nop
c001e84e:	6a 00                	push   0x0
c001e850:	6a 0c                	push   0xc
c001e852:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e859:	50                   	push   eax
c001e85a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e860:	e8 f3 e1 ff ff       	call   c001ca58 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e865:	83 c4 14             	add    esp,0x14
c001e868:	68 78 01 00 00       	push   0x178
c001e86d:	e8 dd 01 ff ff       	call   c000ea4f <malloc>
c001e872:	83 c4 0c             	add    esp,0xc
c001e875:	89 c6                	mov    esi,eax
c001e877:	6a 00                	push   0x0
c001e879:	68 ff ff ff 7f       	push   0x7fffffff
c001e87e:	6a 00                	push   0x0
c001e880:	6a 00                	push   0x0
c001e882:	53                   	push   ebx
c001e883:	68 d3 46 02 c0       	push   0xc00246d3
c001e888:	50                   	push   eax
c001e889:	e8 ee b5 fe ff       	call   c0009e7c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e88e:	83 c4 14             	add    esp,0x14
c001e891:	56                   	push   esi
c001e892:	e8 a5 b6 fe ff       	call   c0009f3c <LogicalDisk::assignDriveLetter()>
c001e897:	5a                   	pop    edx
c001e898:	0f be c0             	movsx  eax,al
c001e89b:	59                   	pop    ecx
c001e89c:	50                   	push   eax
c001e89d:	68 18 45 02 c0       	push   0xc0024518
c001e8a2:	e8 bd 86 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e8a7:	58                   	pop    eax
c001e8a8:	5a                   	pop    edx
c001e8a9:	56                   	push   esi
c001e8aa:	53                   	push   ebx
c001e8ab:	e8 b2 a7 fe ff       	call   c0009062 <Device::addChild(Device*)>
c001e8b0:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001e8b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e8b9:	e8 f0 ab fe ff       	call   c00094ae <PhysicalDisk::startCache()>
c001e8be:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e8c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e8c8:	e8 6b fe ff ff       	call   c001e738 <ATAPI::detectMedia()>
c001e8cd:	83 c4 14             	add    esp,0x14
c001e8d0:	31 c0                	xor    eax,eax
c001e8d2:	5b                   	pop    ebx
c001e8d3:	5e                   	pop    esi
c001e8d4:	c3                   	ret    
c001e8d5:	90                   	nop

c001e8d6 <ATAPI::read(unsigned long long, int, void*)>:
c001e8d6:	55                   	push   ebp
c001e8d7:	57                   	push   edi
c001e8d8:	56                   	push   esi
c001e8d9:	53                   	push   ebx
c001e8da:	83 ec 1c             	sub    esp,0x1c
c001e8dd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e8e1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e8e5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e8e9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e8f0:	74 3c                	je     c001e92e <ATAPI::read(unsigned long long, int, void*)+0x58>
c001e8f2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e8f6:	b9 03 00 00 00       	mov    ecx,0x3
c001e8fb:	fc                   	cld    
c001e8fc:	31 c0                	xor    eax,eax
c001e8fe:	0f ce                	bswap  esi
c001e900:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e902:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001e907:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001e90b:	89 e8                	mov    eax,ebp
c001e90d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e911:	50                   	push   eax
c001e912:	50                   	push   eax
c001e913:	55                   	push   ebp
c001e914:	c1 e5 0b             	shl    ebp,0xb
c001e917:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e91b:	6a 00                	push   0x0
c001e91d:	55                   	push   ebp
c001e91e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e922:	50                   	push   eax
c001e923:	53                   	push   ebx
c001e924:	e8 b9 fa ff ff       	call   c001e3e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e929:	83 c4 20             	add    esp,0x20
c001e92c:	eb 1a                	jmp    c001e948 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001e92e:	83 ec 0c             	sub    esp,0xc
c001e931:	53                   	push   ebx
c001e932:	e8 01 fe ff ff       	call   c001e738 <ATAPI::detectMedia()>
c001e937:	83 c4 10             	add    esp,0x10
c001e93a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e941:	75 af                	jne    c001e8f2 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001e943:	b8 02 00 00 00       	mov    eax,0x2
c001e948:	83 c4 1c             	add    esp,0x1c
c001e94b:	5b                   	pop    ebx
c001e94c:	5e                   	pop    esi
c001e94d:	5f                   	pop    edi
c001e94e:	5d                   	pop    ebp
c001e94f:	c3                   	ret    

c001e950 <SATA::close(int, int, void*)>:
c001e950:	83 ec 0c             	sub    esp,0xc
c001e953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e957:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e95d:	85 c0                	test   eax,eax
c001e95f:	74 0c                	je     c001e96d <SATA::close(int, int, void*)+0x1d>
c001e961:	83 ec 0c             	sub    esp,0xc
c001e964:	8b 10                	mov    edx,DWORD PTR [eax]
c001e966:	50                   	push   eax
c001e967:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e96a:	83 c4 10             	add    esp,0x10
c001e96d:	31 c0                	xor    eax,eax
c001e96f:	83 c4 0c             	add    esp,0xc
c001e972:	c3                   	ret    
c001e973:	90                   	nop

c001e974 <SATA::powerSaving(PowerSavingLevel)>:
c001e974:	c3                   	ret    
c001e975:	90                   	nop

c001e976 <SATA::open(int, int, void*)>:
c001e976:	56                   	push   esi
c001e977:	53                   	push   ebx
c001e978:	83 ec 10             	sub    esp,0x10
c001e97b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e97f:	68 60 45 02 c0       	push   0xc0024560
c001e984:	e8 db 85 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e989:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e98d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001e997:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e99d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e9a7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e9ab:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e9b5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e9bb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001e9c2:	e8 c3 05 ff ff       	call   c000ef8a <Phys::allocatePage()>
c001e9c7:	89 c6                	mov    esi,eax
c001e9c9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e9cf:	81 c6 00 10 00 00    	add    esi,0x1000
c001e9d5:	e8 b0 05 ff ff       	call   c000ef8a <Phys::allocatePage()>
c001e9da:	83 c4 10             	add    esp,0x10
c001e9dd:	39 c6                	cmp    esi,eax
c001e9df:	74 10                	je     c001e9f1 <SATA::open(int, int, void*)+0x7b>
c001e9e1:	83 ec 0c             	sub    esp,0xc
c001e9e4:	68 6c 45 02 c0       	push   0xc002456c
c001e9e9:	e8 a8 03 ff ff       	call   c000ed96 <KePanic(char const*)>
c001e9ee:	83 c4 10             	add    esp,0x10
c001e9f1:	83 ec 0c             	sub    esp,0xc
c001e9f4:	6a 02                	push   0x2
c001e9f6:	e8 c6 37 ff ff       	call   c00121c1 <Virt::allocateKernelVirtualPages(int)>
c001e9fb:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ea01:	6a 03                	push   0x3
c001ea03:	50                   	push   eax
c001ea04:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001ea0a:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c001ea10:	e8 8f 3e ff ff       	call   c00128a4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ea15:	83 c4 14             	add    esp,0x14
c001ea18:	53                   	push   ebx
c001ea19:	e8 90 aa fe ff       	call   c00094ae <PhysicalDisk::startCache()>
c001ea1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ea21:	e8 28 b9 fe ff       	call   c000a34e <createPartitionsForDisk(PhysicalDisk*)>
c001ea26:	83 c4 14             	add    esp,0x14
c001ea29:	31 c0                	xor    eax,eax
c001ea2b:	5b                   	pop    ebx
c001ea2c:	5e                   	pop    esi
c001ea2d:	c3                   	ret    

c001ea2e <SATA::SATA()>:
c001ea2e:	83 ec 0c             	sub    esp,0xc
c001ea31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea35:	83 ec 04             	sub    esp,0x4
c001ea38:	68 00 02 00 00       	push   0x200
c001ea3d:	68 80 45 02 c0       	push   0xc0024580
c001ea42:	50                   	push   eax
c001ea43:	e8 fe a9 fe ff       	call   c0009446 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ea48:	83 c4 10             	add    esp,0x10
c001ea4b:	ba f0 45 02 c0       	mov    edx,0xc00245f0
c001ea50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea54:	89 10                	mov    DWORD PTR [eax],edx
c001ea56:	90                   	nop
c001ea57:	83 c4 0c             	add    esp,0xc
c001ea5a:	c3                   	ret    
c001ea5b:	90                   	nop

c001ea5c <SATA::access(unsigned long long, int, void*, bool)>:
c001ea5c:	55                   	push   ebp
c001ea5d:	57                   	push   edi
c001ea5e:	56                   	push   esi
c001ea5f:	53                   	push   ebx
c001ea60:	83 ec 2c             	sub    esp,0x2c
c001ea63:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ea67:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ea6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ea6f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ea73:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ea77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea7b:	fa                   	cli    
c001ea7c:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001ea82:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001ea87:	7e 10                	jle    c001ea99 <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c001ea89:	83 ec 0c             	sub    esp,0xc
c001ea8c:	68 90 45 02 c0       	push   0xc0024590
c001ea91:	e8 00 03 ff ff       	call   c000ed96 <KePanic(char const*)>
c001ea96:	83 c4 10             	add    esp,0x10
c001ea99:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ea9f:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001eaa5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001eaab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001eaaf:	89 d0                	mov    eax,edx
c001eab1:	c1 e0 07             	shl    eax,0x7
c001eab4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001eab8:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001eac2:	51                   	push   ecx
c001eac3:	8d 42 02             	lea    eax,[edx+0x2]
c001eac6:	51                   	push   ecx
c001eac7:	c1 e0 07             	shl    eax,0x7
c001eaca:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001eace:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ead2:	50                   	push   eax
c001ead3:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001ead9:	e8 fe ed ff ff       	call   c001d8dc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001eade:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001eae2:	83 c4 10             	add    esp,0x10
c001eae5:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001eaea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eaee:	0f 84 a4 01 00 00    	je     c001ec98 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c001eaf4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001eaf8:	c1 e0 09             	shl    eax,0x9
c001eafb:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001eb00:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001eb04:	74 0e                	je     c001eb14 <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c001eb06:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001eb0c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001eb10:	89 c1                	mov    ecx,eax
c001eb12:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001eb14:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001eb1a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001eb1e:	8d 42 02             	lea    eax,[edx+0x2]
c001eb21:	c1 e0 07             	shl    eax,0x7
c001eb24:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001eb28:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb2a:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001eb30:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001eb36:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eb3a:	c1 e1 05             	shl    ecx,0x5
c001eb3d:	01 c8                	add    eax,ecx
c001eb3f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eb43:	83 e1 01             	and    ecx,0x1
c001eb46:	89 ce                	mov    esi,ecx
c001eb48:	8a 08                	mov    cl,BYTE PTR [eax]
c001eb4a:	c1 e6 06             	shl    esi,0x6
c001eb4d:	83 e1 bf             	and    ecx,0xffffffbf
c001eb50:	09 f1                	or     ecx,esi
c001eb52:	88 08                	mov    BYTE PTR [eax],cl
c001eb54:	8b 08                	mov    ecx,DWORD PTR [eax]
c001eb56:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001eb5c:	81 c9 05 00 01 00    	or     ecx,0x10005
c001eb62:	89 08                	mov    DWORD PTR [eax],ecx
c001eb64:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001eb6a:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001eb70:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001eb76:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001eb79:	50                   	push   eax
c001eb7a:	68 90 00 00 00       	push   0x90
c001eb7f:	6a 00                	push   0x0
c001eb81:	56                   	push   esi
c001eb82:	e8 69 19 fe ff       	call   c00004f0 <memset>
c001eb87:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001eb8d:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001eb93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001eb97:	83 c4 10             	add    esp,0x10
c001eb9a:	48                   	dec    eax
c001eb9b:	25 ff ff 3f 00       	and    eax,0x3fffff
c001eba0:	89 c1                	mov    ecx,eax
c001eba2:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001eba8:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ebad:	09 c8                	or     eax,ecx
c001ebaf:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ebb5:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001ebbb:	83 c8 80             	or     eax,0xffffff80
c001ebbe:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001ebc4:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ebc7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ebcb:	25 00 7f 00 00       	and    eax,0x7f00
c001ebd0:	0d 27 80 ff ff       	or     eax,0xffff8027
c001ebd5:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ebda:	66 89 06             	mov    WORD PTR [esi],ax
c001ebdd:	b0 35                	mov    al,0x35
c001ebdf:	75 02                	jne    c001ebe3 <SATA::access(unsigned long long, int, void*, bool)+0x187>
c001ebe1:	b0 25                	mov    al,0x25
c001ebe3:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ebe6:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001ebea:	89 e8                	mov    eax,ebp
c001ebec:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ebf0:	c1 e8 10             	shr    eax,0x10
c001ebf3:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ebf6:	89 e8                	mov    eax,ebp
c001ebf8:	c1 e8 18             	shr    eax,0x18
c001ebfb:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ebfe:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ec02:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ec05:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ec09:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ec0c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ec10:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ec14:	89 d6                	mov    esi,edx
c001ec16:	31 c0                	xor    eax,eax
c001ec18:	c1 e6 07             	shl    esi,0x7
c001ec1b:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ec1f:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ec25:	80 e1 88             	and    cl,0x88
c001ec28:	74 0a                	je     c001ec34 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ec2a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ec2f:	74 0a                	je     c001ec3b <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001ec31:	40                   	inc    eax
c001ec32:	eb eb                	jmp    c001ec1f <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c001ec34:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ec39:	75 0a                	jne    c001ec45 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c001ec3b:	83 ec 0c             	sub    esp,0xc
c001ec3e:	68 c9 45 02 c0       	push   0xc00245c9
c001ec43:	eb 36                	jmp    c001ec7b <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001ec45:	b8 01 00 00 00       	mov    eax,0x1
c001ec4a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ec4e:	c1 e2 07             	shl    edx,0x7
c001ec51:	d3 e0                	shl    eax,cl
c001ec53:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001ec57:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001ec5d:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001ec63:	85 c8                	test   eax,ecx
c001ec65:	74 25                	je     c001ec8c <SATA::access(unsigned long long, int, void*, bool)+0x230>
c001ec67:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001ec6d:	0f ba e1 1e          	bt     ecx,0x1e
c001ec71:	73 ea                	jae    c001ec5d <SATA::access(unsigned long long, int, void*, bool)+0x201>
c001ec73:	83 ec 0c             	sub    esp,0xc
c001ec76:	68 d7 45 02 c0       	push   0xc00245d7
c001ec7b:	e8 e4 82 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ec80:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001ec87:	83 c4 10             	add    esp,0x10
c001ec8a:	eb 13                	jmp    c001ec9f <SATA::access(unsigned long long, int, void*, bool)+0x243>
c001ec8c:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ec92:	0f ba e0 1e          	bt     eax,0x1e
c001ec96:	73 18                	jae    c001ecb0 <SATA::access(unsigned long long, int, void*, bool)+0x254>
c001ec98:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001ec9f:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c001eca6:	75 01                	jne    c001eca9 <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c001eca8:	fb                   	sti    
c001eca9:	b8 01 00 00 00       	mov    eax,0x1
c001ecae:	eb 2c                	jmp    c001ecdc <SATA::access(unsigned long long, int, void*, bool)+0x280>
c001ecb0:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ecb5:	75 10                	jne    c001ecc7 <SATA::access(unsigned long long, int, void*, bool)+0x26b>
c001ecb7:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ecbd:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ecc1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ecc5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ecc7:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001ecce:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c001ecd3:	85 c0                	test   eax,eax
c001ecd5:	75 03                	jne    c001ecda <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c001ecd7:	fb                   	sti    
c001ecd8:	eb 02                	jmp    c001ecdc <SATA::access(unsigned long long, int, void*, bool)+0x280>
c001ecda:	31 c0                	xor    eax,eax
c001ecdc:	83 c4 2c             	add    esp,0x2c
c001ecdf:	5b                   	pop    ebx
c001ece0:	5e                   	pop    esi
c001ece1:	5f                   	pop    edi
c001ece2:	5d                   	pop    ebp
c001ece3:	c3                   	ret    

c001ece4 <SATA::read(unsigned long long, int, void*)>:
c001ece4:	57                   	push   edi
c001ece5:	b8 04 00 00 00       	mov    eax,0x4
c001ecea:	56                   	push   esi
c001eceb:	53                   	push   ebx
c001ecec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ecf0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ecf4:	8d 7a ff             	lea    edi,[edx-0x1]
c001ecf7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ecfb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ecff:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ed05:	77 25                	ja     c001ed2c <SATA::read(unsigned long long, int, void*)+0x48>
c001ed07:	b8 06 00 00 00       	mov    eax,0x6
c001ed0c:	85 f6                	test   esi,esi
c001ed0e:	74 1c                	je     c001ed2c <SATA::read(unsigned long long, int, void*)+0x48>
c001ed10:	50                   	push   eax
c001ed11:	50                   	push   eax
c001ed12:	6a 00                	push   0x0
c001ed14:	56                   	push   esi
c001ed15:	52                   	push   edx
c001ed16:	53                   	push   ebx
c001ed17:	51                   	push   ecx
c001ed18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ed1c:	e8 3b fd ff ff       	call   c001ea5c <SATA::access(unsigned long long, int, void*, bool)>
c001ed21:	83 c4 20             	add    esp,0x20
c001ed24:	85 c0                	test   eax,eax
c001ed26:	0f 95 c0             	setne  al
c001ed29:	0f b6 c0             	movzx  eax,al
c001ed2c:	5b                   	pop    ebx
c001ed2d:	5e                   	pop    esi
c001ed2e:	5f                   	pop    edi
c001ed2f:	c3                   	ret    

c001ed30 <SATA::write(unsigned long long, int, void*)>:
c001ed30:	55                   	push   ebp
c001ed31:	b8 04 00 00 00       	mov    eax,0x4
c001ed36:	57                   	push   edi
c001ed37:	56                   	push   esi
c001ed38:	53                   	push   ebx
c001ed39:	83 ec 0c             	sub    esp,0xc
c001ed3c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ed40:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ed44:	8d 73 ff             	lea    esi,[ebx-0x1]
c001ed47:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ed4b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ed4f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001ed55:	77 3d                	ja     c001ed94 <SATA::write(unsigned long long, int, void*)+0x64>
c001ed57:	b8 06 00 00 00       	mov    eax,0x6
c001ed5c:	85 ed                	test   ebp,ebp
c001ed5e:	74 34                	je     c001ed94 <SATA::write(unsigned long long, int, void*)+0x64>
c001ed60:	c1 e3 09             	shl    ebx,0x9
c001ed63:	01 eb                	add    ebx,ebp
c001ed65:	89 d6                	mov    esi,edx
c001ed67:	89 cf                	mov    edi,ecx
c001ed69:	83 c6 01             	add    esi,0x1
c001ed6c:	83 d7 00             	adc    edi,0x0
c001ed6f:	50                   	push   eax
c001ed70:	50                   	push   eax
c001ed71:	6a 01                	push   0x1
c001ed73:	55                   	push   ebp
c001ed74:	81 c5 00 02 00 00    	add    ebp,0x200
c001ed7a:	6a 01                	push   0x1
c001ed7c:	51                   	push   ecx
c001ed7d:	52                   	push   edx
c001ed7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ed82:	e8 d5 fc ff ff       	call   c001ea5c <SATA::access(unsigned long long, int, void*, bool)>
c001ed87:	83 c4 20             	add    esp,0x20
c001ed8a:	89 f2                	mov    edx,esi
c001ed8c:	89 f9                	mov    ecx,edi
c001ed8e:	39 dd                	cmp    ebp,ebx
c001ed90:	75 d3                	jne    c001ed65 <SATA::write(unsigned long long, int, void*)+0x35>
c001ed92:	31 c0                	xor    eax,eax
c001ed94:	83 c4 0c             	add    esp,0xc
c001ed97:	5b                   	pop    ebx
c001ed98:	5e                   	pop    esi
c001ed99:	5f                   	pop    edi
c001ed9a:	5d                   	pop    ebp
c001ed9b:	c3                   	ret    

c001ed9c <SATAPI::write(unsigned long long, int, void*)>:
c001ed9c:	b8 03 00 00 00       	mov    eax,0x3
c001eda1:	c3                   	ret    

c001eda2 <SATAPI::close(int, int, void*)>:
c001eda2:	83 ec 0c             	sub    esp,0xc
c001eda5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eda9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001edaf:	85 c0                	test   eax,eax
c001edb1:	74 0c                	je     c001edbf <SATAPI::close(int, int, void*)+0x1d>
c001edb3:	83 ec 0c             	sub    esp,0xc
c001edb6:	8b 10                	mov    edx,DWORD PTR [eax]
c001edb8:	50                   	push   eax
c001edb9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001edbc:	83 c4 10             	add    esp,0x10
c001edbf:	31 c0                	xor    eax,eax
c001edc1:	83 c4 0c             	add    esp,0xc
c001edc4:	c3                   	ret    
c001edc5:	90                   	nop

c001edc6 <SATAPI::SATAPI()>:
c001edc6:	83 ec 0c             	sub    esp,0xc
c001edc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edcd:	83 ec 04             	sub    esp,0x4
c001edd0:	68 00 08 00 00       	push   0x800
c001edd5:	68 20 46 02 c0       	push   0xc0024620
c001edda:	50                   	push   eax
c001eddb:	e8 66 a6 fe ff       	call   c0009446 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ede0:	83 c4 10             	add    esp,0x10
c001ede3:	ba 14 47 02 c0       	mov    edx,0xc0024714
c001ede8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edec:	89 10                	mov    DWORD PTR [eax],edx
c001edee:	90                   	nop
c001edef:	83 c4 0c             	add    esp,0xc
c001edf2:	c3                   	ret    
c001edf3:	90                   	nop

c001edf4 <SATAPI::diskRemoved()>:
c001edf4:	c3                   	ret    
c001edf5:	90                   	nop

c001edf6 <SATAPI::diskInserted()>:
c001edf6:	83 ec 18             	sub    esp,0x18
c001edf9:	68 2c 46 02 c0       	push   0xc002462c
c001edfe:	e8 61 81 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ee03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee07:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001ee0e:	83 c4 1c             	add    esp,0x1c
c001ee11:	c3                   	ret    

c001ee12 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001ee12:	55                   	push   ebp
c001ee13:	57                   	push   edi
c001ee14:	56                   	push   esi
c001ee15:	53                   	push   ebx
c001ee16:	83 ec 34             	sub    esp,0x34
c001ee19:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001ee1d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ee21:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001ee25:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ee29:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001ee2d:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001ee33:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ee39:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ee3d:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001ee43:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ee47:	83 c0 02             	add    eax,0x2
c001ee4a:	c1 e0 07             	shl    eax,0x7
c001ee4d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ee51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee59:	c1 e0 07             	shl    eax,0x7
c001ee5c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ee60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ee64:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ee6e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ee72:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001ee78:	e8 5f ea ff ff       	call   c001d8dc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ee7d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ee81:	83 c4 10             	add    esp,0x10
c001ee84:	b8 01 00 00 00       	mov    eax,0x1
c001ee89:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001ee8e:	0f 84 53 02 00 00    	je     c001f0e7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001ee94:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001ee9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee9e:	8b 00                	mov    eax,DWORD PTR [eax]
c001eea0:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001eea6:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001eeac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eeb0:	c1 e1 05             	shl    ecx,0x5
c001eeb3:	01 c8                	add    eax,ecx
c001eeb5:	8b 08                	mov    ecx,DWORD PTR [eax]
c001eeb7:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001eebd:	81 c9 25 00 01 00    	or     ecx,0x10025
c001eec3:	89 08                	mov    DWORD PTR [eax],ecx
c001eec5:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001eecb:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001eed1:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001eed7:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001eeda:	8d 7b 40             	lea    edi,[ebx+0x40]
c001eedd:	50                   	push   eax
c001eede:	68 90 00 00 00       	push   0x90
c001eee3:	6a 00                	push   0x0
c001eee5:	53                   	push   ebx
c001eee6:	e8 05 16 fe ff       	call   c00004f0 <memset>
c001eeeb:	b9 0c 00 00 00       	mov    ecx,0xc
c001eef0:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001eef4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001eef6:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001eefc:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001ef00:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001ef06:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001ef0a:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ef0e:	48                   	dec    eax
c001ef0f:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ef14:	89 c1                	mov    ecx,eax
c001ef16:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001ef1c:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ef21:	09 c8                	or     eax,ecx
c001ef23:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001ef29:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001ef2f:	83 c8 80             	or     eax,0xffffff80
c001ef32:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001ef38:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001ef3b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ef3f:	25 00 7f 00 00       	and    eax,0x7f00
c001ef44:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001ef48:	0d 27 80 ff ff       	or     eax,0xffff8027
c001ef4d:	66 89 03             	mov    WORD PTR [ebx],ax
c001ef50:	89 d0                	mov    eax,edx
c001ef52:	c1 ea 18             	shr    edx,0x18
c001ef55:	c1 e8 10             	shr    eax,0x10
c001ef58:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001ef5b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001ef5e:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001ef62:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001ef65:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ef69:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001ef6c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ef70:	83 c4 10             	add    esp,0x10
c001ef73:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001ef77:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef7b:	31 c0                	xor    eax,eax
c001ef7d:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001ef83:	80 e1 88             	and    cl,0x88
c001ef86:	74 0a                	je     c001ef92 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001ef88:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ef8d:	74 0a                	je     c001ef99 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001ef8f:	40                   	inc    eax
c001ef90:	eb eb                	jmp    c001ef7d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001ef92:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ef97:	75 43                	jne    c001efdc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001ef99:	83 ec 0c             	sub    esp,0xc
c001ef9c:	68 44 46 02 c0       	push   0xc0024644
c001efa1:	e8 be 7f fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001efa6:	58                   	pop    eax
c001efa7:	5a                   	pop    edx
c001efa8:	68 59 46 02 c0       	push   0xc0024659
c001efad:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c001efb3:	e8 d6 25 ff ff       	call   c001158e <VgaText::puts(char const*)>
c001efb8:	59                   	pop    ecx
c001efb9:	5b                   	pop    ebx
c001efba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001efbe:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001efc4:	e8 ad e9 ff ff       	call   c001d976 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001efc9:	5e                   	pop    esi
c001efca:	5f                   	pop    edi
c001efcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001efcf:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001efd5:	e8 7c e9 ff ff       	call   c001d956 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001efda:	eb 48                	jmp    c001f024 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001efdc:	be 01 00 00 00       	mov    esi,0x1
c001efe1:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001efe5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001efe9:	d3 e6                	shl    esi,cl
c001efeb:	c1 e7 07             	shl    edi,0x7
c001efee:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001eff4:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001eff9:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001effd:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001f003:	85 c6                	test   esi,eax
c001f005:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001f00b:	0f 84 a3 00 00 00    	je     c001f0b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001f011:	0f ba e0 1e          	bt     eax,0x1e
c001f015:	73 1a                	jae    c001f031 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001f017:	83 ec 0c             	sub    esp,0xc
c001f01a:	68 6b 46 02 c0       	push   0xc002466b
c001f01f:	e8 40 7f fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001f024:	83 c4 10             	add    esp,0x10
c001f027:	b8 01 00 00 00       	mov    eax,0x1
c001f02c:	e9 b6 00 00 00       	jmp    c001f0e7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001f031:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001f037:	83 f8 0d             	cmp    eax,0xd
c001f03a:	77 0a                	ja     c001f046 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001f03c:	83 ec 0c             	sub    esp,0xc
c001f03f:	68 c8 00 00 00       	push   0xc8
c001f044:	eb 28                	jmp    c001f06e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001f046:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001f04c:	83 f8 0d             	cmp    eax,0xd
c001f04f:	77 0a                	ja     c001f05b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001f051:	83 ec 0c             	sub    esp,0xc
c001f054:	68 58 02 00 00       	push   0x258
c001f059:	eb 13                	jmp    c001f06e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001f05b:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001f061:	83 f8 06             	cmp    eax,0x6
c001f064:	77 10                	ja     c001f076 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001f066:	83 ec 0c             	sub    esp,0xc
c001f069:	68 dc 05 00 00       	push   0x5dc
c001f06e:	e8 81 69 ff ff       	call   c00159f4 <milliTenthSleep(unsigned int)>
c001f073:	83 c4 10             	add    esp,0x10
c001f076:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001f07a:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001f07d:	75 06                	jne    c001f085 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001f07f:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001f083:	74 15                	je     c001f09a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001f085:	83 fb 06             	cmp    ebx,0x6
c001f088:	77 10                	ja     c001f09a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001f08a:	83 ec 0c             	sub    esp,0xc
c001f08d:	68 c4 09 00 00       	push   0x9c4
c001f092:	e8 5d 69 ff ff       	call   c00159f4 <milliTenthSleep(unsigned int)>
c001f097:	83 c4 10             	add    esp,0x10
c001f09a:	43                   	inc    ebx
c001f09b:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001f0a1:	0f 85 56 ff ff ff    	jne    c001effd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001f0a7:	83 ec 0c             	sub    esp,0xc
c001f0aa:	68 7e 46 02 c0       	push   0xc002467e
c001f0af:	e9 6b ff ff ff       	jmp    c001f01f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001f0b4:	0f ba e0 1e          	bt     eax,0x1e
c001f0b8:	73 0d                	jae    c001f0c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001f0ba:	83 ec 0c             	sub    esp,0xc
c001f0bd:	68 92 46 02 c0       	push   0xc0024692
c001f0c2:	e9 58 ff ff ff       	jmp    c001f01f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001f0c7:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001f0cc:	74 17                	je     c001f0e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001f0ce:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001f0d3:	74 10                	je     c001f0e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001f0d5:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001f0db:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f0df:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001f0e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f0e5:	31 c0                	xor    eax,eax
c001f0e7:	83 c4 2c             	add    esp,0x2c
c001f0ea:	5b                   	pop    ebx
c001f0eb:	5e                   	pop    esi
c001f0ec:	5f                   	pop    edi
c001f0ed:	5d                   	pop    ebp
c001f0ee:	c3                   	ret    
c001f0ef:	90                   	nop

c001f0f0 <SATAPI::eject()>:
c001f0f0:	57                   	push   edi
c001f0f1:	b9 03 00 00 00       	mov    ecx,0x3
c001f0f6:	83 ec 18             	sub    esp,0x18
c001f0f9:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f0fd:	fc                   	cld    
c001f0fe:	31 c0                	xor    eax,eax
c001f100:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f102:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001f107:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001f10c:	50                   	push   eax
c001f10d:	6a 00                	push   0x0
c001f10f:	6a 00                	push   0x0
c001f111:	6a 00                	push   0x0
c001f113:	6a 00                	push   0x0
c001f115:	6a 02                	push   0x2
c001f117:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f11b:	50                   	push   eax
c001f11c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f120:	e8 ed fc ff ff       	call   c001ee12 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f125:	31 c0                	xor    eax,eax
c001f127:	83 c4 38             	add    esp,0x38
c001f12a:	5f                   	pop    edi
c001f12b:	c3                   	ret    

c001f12c <SATAPI::detectMedia()>:
c001f12c:	53                   	push   ebx
c001f12d:	83 ec 14             	sub    esp,0x14
c001f130:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f134:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001f13a:	e8 29 b9 fe ff       	call   c000aa68 <VCache::writeWriteBuffer()>
c001f13f:	59                   	pop    ecx
c001f140:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001f146:	e8 0d b9 fe ff       	call   c000aa58 <VCache::invalidateReadBuffer()>
c001f14b:	c7 04 24 a7 46 02 c0 	mov    DWORD PTR [esp],0xc00246a7
c001f152:	e8 0d 7e fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001f157:	83 c4 10             	add    esp,0x10
c001f15a:	31 c0                	xor    eax,eax
c001f15c:	8b 14 85 80 a7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5880]
c001f163:	85 d2                	test   edx,edx
c001f165:	74 0f                	je     c001f176 <SATAPI::detectMedia()+0x4a>
c001f167:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001f16d:	75 07                	jne    c001f176 <SATAPI::detectMedia()+0x4a>
c001f16f:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001f176:	40                   	inc    eax
c001f177:	83 f8 1a             	cmp    eax,0x1a
c001f17a:	75 e0                	jne    c001f15c <SATAPI::detectMedia()+0x30>
c001f17c:	83 c4 08             	add    esp,0x8
c001f17f:	5b                   	pop    ebx
c001f180:	c3                   	ret    
c001f181:	90                   	nop

c001f182 <SATAPI::open(int, int, void*)>:
c001f182:	56                   	push   esi
c001f183:	53                   	push   ebx
c001f184:	51                   	push   ecx
c001f185:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f189:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f18d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f197:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f19d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f1a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f1ab:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f1b5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f1bb:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f1c2:	e8 c3 fd fe ff       	call   c000ef8a <Phys::allocatePage()>
c001f1c7:	89 c6                	mov    esi,eax
c001f1c9:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001f1cf:	81 c6 00 10 00 00    	add    esi,0x1000
c001f1d5:	e8 b0 fd fe ff       	call   c000ef8a <Phys::allocatePage()>
c001f1da:	39 c6                	cmp    esi,eax
c001f1dc:	74 10                	je     c001f1ee <SATAPI::open(int, int, void*)+0x6c>
c001f1de:	83 ec 0c             	sub    esp,0xc
c001f1e1:	68 bc 46 02 c0       	push   0xc00246bc
c001f1e6:	e8 ab fb fe ff       	call   c000ed96 <KePanic(char const*)>
c001f1eb:	83 c4 10             	add    esp,0x10
c001f1ee:	83 ec 0c             	sub    esp,0xc
c001f1f1:	6a 02                	push   0x2
c001f1f3:	e8 c9 2f ff ff       	call   c00121c1 <Virt::allocateKernelVirtualPages(int)>
c001f1f8:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001f1fe:	6a 03                	push   0x3
c001f200:	50                   	push   eax
c001f201:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001f207:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c001f20d:	e8 92 36 ff ff       	call   c00128a4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f212:	83 c4 14             	add    esp,0x14
c001f215:	68 78 01 00 00       	push   0x178
c001f21a:	e8 30 f8 fe ff       	call   c000ea4f <malloc>
c001f21f:	83 c4 0c             	add    esp,0xc
c001f222:	89 c6                	mov    esi,eax
c001f224:	6a 00                	push   0x0
c001f226:	68 ff ff ff 7f       	push   0x7fffffff
c001f22b:	6a 00                	push   0x0
c001f22d:	6a 00                	push   0x0
c001f22f:	53                   	push   ebx
c001f230:	68 d2 46 02 c0       	push   0xc00246d2
c001f235:	50                   	push   eax
c001f236:	e8 41 ac fe ff       	call   c0009e7c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001f23b:	83 c4 14             	add    esp,0x14
c001f23e:	56                   	push   esi
c001f23f:	e8 f8 ac fe ff       	call   c0009f3c <LogicalDisk::assignDriveLetter()>
c001f244:	5a                   	pop    edx
c001f245:	0f be c0             	movsx  eax,al
c001f248:	59                   	pop    ecx
c001f249:	50                   	push   eax
c001f24a:	68 18 45 02 c0       	push   0xc0024518
c001f24f:	e8 10 7d fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001f254:	58                   	pop    eax
c001f255:	5a                   	pop    edx
c001f256:	56                   	push   esi
c001f257:	53                   	push   ebx
c001f258:	e8 05 9e fe ff       	call   c0009062 <Device::addChild(Device*)>
c001f25d:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001f263:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f266:	e8 43 a2 fe ff       	call   c00094ae <PhysicalDisk::startCache()>
c001f26b:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001f272:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f275:	e8 b2 fe ff ff       	call   c001f12c <SATAPI::detectMedia()>
c001f27a:	83 c4 14             	add    esp,0x14
c001f27d:	31 c0                	xor    eax,eax
c001f27f:	5b                   	pop    ebx
c001f280:	5e                   	pop    esi
c001f281:	c3                   	ret    

c001f282 <SATAPI::read(unsigned long long, int, void*)>:
c001f282:	57                   	push   edi
c001f283:	56                   	push   esi
c001f284:	53                   	push   ebx
c001f285:	83 ec 30             	sub    esp,0x30
c001f288:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001f28c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001f290:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001f294:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f298:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f29c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f2a0:	83 fe 04             	cmp    esi,0x4
c001f2a3:	7e 10                	jle    c001f2b5 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001f2a5:	83 ec 0c             	sub    esp,0xc
c001f2a8:	68 e0 46 02 c0       	push   0xc00246e0
c001f2ad:	e8 e4 fa fe ff       	call   c000ed96 <KePanic(char const*)>
c001f2b2:	83 c4 10             	add    esp,0x10
c001f2b5:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001f2bb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f2c1:	51                   	push   ecx
c001f2c2:	50                   	push   eax
c001f2c3:	83 c0 02             	add    eax,0x2
c001f2c6:	c1 e0 07             	shl    eax,0x7
c001f2c9:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001f2cf:	50                   	push   eax
c001f2d0:	52                   	push   edx
c001f2d1:	e8 ca e6 ff ff       	call   c001d9a0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f2d6:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001f2da:	b9 03 00 00 00       	mov    ecx,0x3
c001f2df:	fc                   	cld    
c001f2e0:	31 c0                	xor    eax,eax
c001f2e2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f2e4:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001f2e9:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001f2ee:	83 c4 0c             	add    esp,0xc
c001f2f1:	6a 00                	push   0x0
c001f2f3:	6a 00                	push   0x0
c001f2f5:	6a 00                	push   0x0
c001f2f7:	6a 00                	push   0x0
c001f2f9:	6a 02                	push   0x2
c001f2fb:	8d 44 24 30          	lea    eax,[esp+0x30]
c001f2ff:	50                   	push   eax
c001f300:	53                   	push   ebx
c001f301:	e8 0c fb ff ff       	call   c001ee12 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f306:	83 c4 20             	add    esp,0x20
c001f309:	85 c0                	test   eax,eax
c001f30b:	75 44                	jne    c001f351 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001f30d:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001f311:	b9 03 00 00 00       	mov    ecx,0x3
c001f316:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f318:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f31c:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001f321:	0f c8                	bswap  eax
c001f323:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001f327:	89 f0                	mov    eax,esi
c001f329:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001f32d:	50                   	push   eax
c001f32e:	56                   	push   esi
c001f32f:	c1 e6 0b             	shl    esi,0xb
c001f332:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001f336:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f33a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f33e:	56                   	push   esi
c001f33f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001f343:	50                   	push   eax
c001f344:	53                   	push   ebx
c001f345:	e8 c8 fa ff ff       	call   c001ee12 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f34a:	83 c4 20             	add    esp,0x20
c001f34d:	85 c0                	test   eax,eax
c001f34f:	74 14                	je     c001f365 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001f351:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f355:	83 ec 0c             	sub    esp,0xc
c001f358:	53                   	push   ebx
c001f359:	e8 ce fd ff ff       	call   c001f12c <SATAPI::detectMedia()>
c001f35e:	83 c4 10             	add    esp,0x10
c001f361:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f365:	83 c4 30             	add    esp,0x30
c001f368:	5b                   	pop    ebx
c001f369:	5e                   	pop    esi
c001f36a:	5f                   	pop    edi
c001f36b:	c3                   	ret    

c001f36c <IOAPIC::close(int, int, void*)>:
c001f36c:	b8 00 00 00 00       	mov    eax,0x0
c001f371:	c3                   	ret    

c001f372 <apicGetBase()>:
c001f372:	55                   	push   ebp
c001f373:	89 e5                	mov    ebp,esp
c001f375:	83 ec 08             	sub    esp,0x8
c001f378:	83 ec 0c             	sub    esp,0xc
c001f37b:	68 44 47 02 c0       	push   0xc0024744
c001f380:	e8 11 fa fe ff       	call   c000ed96 <KePanic(char const*)>
c001f385:	83 c4 10             	add    esp,0x10
c001f388:	b8 00 00 00 00       	mov    eax,0x0
c001f38d:	c9                   	leave  
c001f38e:	c3                   	ret    
c001f38f:	90                   	nop

c001f390 <IOAPIC::IOAPIC()>:
c001f390:	83 ec 0c             	sub    esp,0xc
c001f393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f397:	83 ec 08             	sub    esp,0x8
c001f39a:	68 53 47 02 c0       	push   0xc0024753
c001f39f:	50                   	push   eax
c001f3a0:	e8 1f 9e fe ff       	call   c00091c4 <Device::Device(char const*)>
c001f3a5:	83 c4 10             	add    esp,0x10
c001f3a8:	ba 74 47 02 c0       	mov    edx,0xc0024774
c001f3ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3b1:	89 10                	mov    DWORD PTR [eax],edx
c001f3b3:	90                   	nop
c001f3b4:	83 c4 0c             	add    esp,0xc
c001f3b7:	c3                   	ret    

c001f3b8 <apicOpen()>:
c001f3b8:	55                   	push   ebp
c001f3b9:	89 e5                	mov    ebp,esp
c001f3bb:	53                   	push   ebx
c001f3bc:	83 ec 34             	sub    esp,0x34
c001f3bf:	83 ec 0c             	sub    esp,0xc
c001f3c2:	68 5b 47 02 c0       	push   0xc002475b
c001f3c7:	e8 98 7b fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001f3cc:	83 c4 10             	add    esp,0x10
c001f3cf:	a0 20 e1 02 c0       	mov    al,ds:0xc002e120
c001f3d4:	83 f0 01             	xor    eax,0x1
c001f3d7:	0f b6 c0             	movzx  eax,al
c001f3da:	85 c0                	test   eax,eax
c001f3dc:	0f 84 a3 00 00 00    	je     c001f485 <apicOpen()+0xcd>
c001f3e2:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001f3e6:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c001f3eb:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001f3ef:	0f b6 c0             	movzx  eax,al
c001f3f2:	39 c2                	cmp    edx,eax
c001f3f4:	0f 83 84 00 00 00    	jae    c001f47e <apicOpen()+0xc6>
c001f3fa:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001f401:	83 ec 0c             	sub    esp,0xc
c001f404:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001f407:	e8 43 f6 fe ff       	call   c000ea4f <malloc>
c001f40c:	83 c4 10             	add    esp,0x10
c001f40f:	89 c3                	mov    ebx,eax
c001f411:	83 ec 0c             	sub    esp,0xc
c001f414:	53                   	push   ebx
c001f415:	e8 76 ff ff ff       	call   c001f390 <IOAPIC::IOAPIC()>
c001f41a:	83 c4 10             	add    esp,0x10
c001f41d:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001f420:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001f424:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001f427:	89 14 85 00 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f00],edx
c001f42e:	a1 e0 e0 02 c0       	mov    eax,ds:0xc002e0e0
c001f433:	83 c0 01             	add    eax,0x1
c001f436:	a3 e0 e0 02 c0       	mov    ds:0xc002e0e0,eax
c001f43b:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c001f440:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001f446:	83 ec 08             	sub    esp,0x8
c001f449:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001f44c:	50                   	push   eax
c001f44d:	e8 10 9c fe ff       	call   c0009062 <Device::addChild(Device*)>
c001f452:	83 c4 10             	add    esp,0x10
c001f455:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f458:	8b 00                	mov    eax,DWORD PTR [eax]
c001f45a:	83 c0 08             	add    eax,0x8
c001f45d:	8b 00                	mov    eax,DWORD PTR [eax]
c001f45f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001f463:	6a 00                	push   0x0
c001f465:	6a 00                	push   0x0
c001f467:	52                   	push   edx
c001f468:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001f46b:	ff d0                	call   eax
c001f46d:	83 c4 10             	add    esp,0x10
c001f470:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001f473:	83 c0 01             	add    eax,0x1
c001f476:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001f479:	e9 68 ff ff ff       	jmp    c001f3e6 <apicOpen()+0x2e>
c001f47e:	c6 05 20 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e120,0x1
c001f485:	e8 e8 fe ff ff       	call   c001f372 <apicGetBase()>
c001f48a:	05 f0 00 00 00       	add    eax,0xf0
c001f48f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f492:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001f495:	8b 00                	mov    eax,DWORD PTR [eax]
c001f497:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001f49a:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001f4a1:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001f4a8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001f4ab:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001f4ae:	89 10                	mov    DWORD PTR [eax],edx
c001f4b0:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001f4b7:	a1 2c aa 02 c0       	mov    eax,ds:0xc002aa2c
c001f4bc:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001f4bf:	7d 7c                	jge    c001f53d <apicOpen()+0x185>
c001f4c1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f4c4:	8b 04 85 40 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55c0]
c001f4cb:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001f4ce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f4d1:	8b 04 85 40 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55c0]
c001f4d8:	c1 e8 08             	shr    eax,0x8
c001f4db:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001f4df:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f4e2:	8b 04 85 40 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55c0]
c001f4e9:	c1 e8 18             	shr    eax,0x18
c001f4ec:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001f4ef:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001f4f3:	3d ff 00 00 00       	cmp    eax,0xff
c001f4f8:	75 3a                	jne    c001f534 <apicOpen()+0x17c>
c001f4fa:	e8 73 fe ff ff       	call   c001f372 <apicGetBase()>
c001f4ff:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001f503:	83 fa 01             	cmp    edx,0x1
c001f506:	75 07                	jne    c001f50f <apicOpen()+0x157>
c001f508:	ba 60 03 00 00       	mov    edx,0x360
c001f50d:	eb 05                	jmp    c001f514 <apicOpen()+0x15c>
c001f50f:	ba 50 03 00 00       	mov    edx,0x350
c001f514:	01 d0                	add    eax,edx
c001f516:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001f519:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f51c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f51e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001f521:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001f528:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001f52c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f52f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001f532:	89 10                	mov    DWORD PTR [eax],edx
c001f534:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001f538:	e9 7a ff ff ff       	jmp    c001f4b7 <apicOpen()+0xff>
c001f53d:	90                   	nop
c001f53e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001f541:	c9                   	leave  
c001f542:	c3                   	ret    
c001f543:	90                   	nop

c001f544 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001f544:	55                   	push   ebp
c001f545:	89 e5                	mov    ebp,esp
c001f547:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f54a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f550:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001f553:	72 1d                	jb     c001f572 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001f555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f558:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001f55e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f561:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001f567:	01 d0                	add    eax,edx
c001f569:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001f56c:	73 04                	jae    c001f572 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001f56e:	b0 01                	mov    al,0x1
c001f570:	eb 02                	jmp    c001f574 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001f572:	b0 00                	mov    al,0x0
c001f574:	5d                   	pop    ebp
c001f575:	c3                   	ret    

c001f576 <IOAPIC::read(int)>:
c001f576:	55                   	push   ebp
c001f577:	89 e5                	mov    ebp,esp
c001f579:	83 ec 10             	sub    esp,0x10
c001f57c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f57f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f585:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001f588:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f58b:	0f b6 d0             	movzx  edx,al
c001f58e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f591:	89 10                	mov    DWORD PTR [eax],edx
c001f593:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f596:	83 c0 10             	add    eax,0x10
c001f599:	8b 00                	mov    eax,DWORD PTR [eax]
c001f59b:	c9                   	leave  
c001f59c:	c3                   	ret    
c001f59d:	90                   	nop

c001f59e <IOAPIC::open(int, int, void*)>:
c001f59e:	55                   	push   ebp
c001f59f:	89 e5                	mov    ebp,esp
c001f5a1:	57                   	push   edi
c001f5a2:	56                   	push   esi
c001f5a3:	53                   	push   ebx
c001f5a4:	83 ec 04             	sub    esp,0x4
c001f5a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f5aa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001f5ad:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f5b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f5b6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f5bc:	8b 14 85 20 ab 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd54e0]
c001f5c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f5c6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f5cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f5cf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f5d5:	8b 14 85 a0 ab 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5460]
c001f5dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f5df:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001f5e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f5e8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001f5ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f5f1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001f5f7:	0f b6 f0             	movzx  esi,al
c001f5fa:	89 d0                	mov    eax,edx
c001f5fc:	ba 00 00 00 00       	mov    edx,0x0
c001f601:	89 c7                	mov    edi,eax
c001f603:	83 e7 ff             	and    edi,0xffffffff
c001f606:	89 f9                	mov    ecx,edi
c001f608:	0f b6 da             	movzx  ebx,dl
c001f60b:	89 c8                	mov    eax,ecx
c001f60d:	89 da                	mov    edx,ebx
c001f60f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001f612:	8d 5e 08             	lea    ebx,[esi+0x8]
c001f615:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001f619:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001f61d:	83 e0 00             	and    eax,0x0
c001f620:	09 d0                	or     eax,edx
c001f622:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001f626:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f629:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001f62f:	8d 50 01             	lea    edx,[eax+0x1]
c001f632:	88 d1                	mov    cl,dl
c001f634:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001f637:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001f63d:	0f b6 d0             	movzx  edx,al
c001f640:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f643:	83 c2 08             	add    edx,0x8
c001f646:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001f64a:	0f b6 c9             	movzx  ecx,cl
c001f64d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001f653:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001f657:	6a 01                	push   0x1
c001f659:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f65c:	e8 15 ff ff ff       	call   c001f576 <IOAPIC::read(int)>
c001f661:	83 c4 08             	add    esp,0x8
c001f664:	c1 f8 10             	sar    eax,0x10
c001f667:	0f b6 c0             	movzx  eax,al
c001f66a:	8d 50 01             	lea    edx,[eax+0x1]
c001f66d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f670:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001f676:	b8 00 00 00 00       	mov    eax,0x0
c001f67b:	8d 65 f4             	lea    esp,[ebp-0xc]
c001f67e:	5b                   	pop    ebx
c001f67f:	5e                   	pop    esi
c001f680:	5f                   	pop    edi
c001f681:	5d                   	pop    ebp
c001f682:	c3                   	ret    
c001f683:	90                   	nop

c001f684 <IOAPIC::write(int, int)>:
c001f684:	55                   	push   ebp
c001f685:	89 e5                	mov    ebp,esp
c001f687:	83 ec 10             	sub    esp,0x10
c001f68a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f68d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f693:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001f696:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f699:	0f b6 d0             	movzx  edx,al
c001f69c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f69f:	89 10                	mov    DWORD PTR [eax],edx
c001f6a1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f6a4:	8d 50 10             	lea    edx,[eax+0x10]
c001f6a7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001f6aa:	89 02                	mov    DWORD PTR [edx],eax
c001f6ac:	90                   	nop
c001f6ad:	c9                   	leave  
c001f6ae:	c3                   	ret    
c001f6af:	90                   	nop

c001f6b0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001f6b0:	55                   	push   ebp
c001f6b1:	89 e5                	mov    ebp,esp
c001f6b3:	53                   	push   ebx
c001f6b4:	83 ec 2c             	sub    esp,0x2c
c001f6b7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f6ba:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001f6bd:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001f6c0:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001f6c3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001f6c6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001f6c9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001f6cc:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001f6cf:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001f6d2:	88 d8                	mov    al,bl
c001f6d4:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001f6d7:	88 c8                	mov    al,cl
c001f6d9:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001f6dc:	88 d0                	mov    al,dl
c001f6de:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001f6e1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001f6e5:	83 c0 08             	add    eax,0x8
c001f6e8:	01 c0                	add    eax,eax
c001f6ea:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001f6ed:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001f6f1:	83 c0 08             	add    eax,0x8
c001f6f4:	01 c0                	add    eax,eax
c001f6f6:	83 c0 01             	add    eax,0x1
c001f6f9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001f6fc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f6ff:	50                   	push   eax
c001f700:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f703:	e8 6e fe ff ff       	call   c001f576 <IOAPIC::read(int)>
c001f708:	83 c4 08             	add    esp,0x8
c001f70b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f70e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001f715:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f718:	c1 e0 18             	shl    eax,0x18
c001f71b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001f71e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001f721:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f724:	52                   	push   edx
c001f725:	50                   	push   eax
c001f726:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f729:	e8 56 ff ff ff       	call   c001f684 <IOAPIC::write(int, int)>
c001f72e:	83 c4 0c             	add    esp,0xc
c001f731:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f734:	50                   	push   eax
c001f735:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f738:	e8 39 fe ff ff       	call   c001f576 <IOAPIC::read(int)>
c001f73d:	83 c4 08             	add    esp,0x8
c001f740:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001f743:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001f74a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001f751:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001f758:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001f75c:	85 c0                	test   eax,eax
c001f75e:	74 09                	je     c001f769 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001f760:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001f767:	eb 07                	jmp    c001f770 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001f769:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001f770:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001f774:	85 c0                	test   eax,eax
c001f776:	74 09                	je     c001f781 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001f778:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001f77f:	eb 07                	jmp    c001f788 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001f781:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001f788:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001f78f:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001f793:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001f796:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001f799:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f79c:	52                   	push   edx
c001f79d:	50                   	push   eax
c001f79e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f7a1:	e8 de fe ff ff       	call   c001f684 <IOAPIC::write(int, int)>
c001f7a6:	83 c4 0c             	add    esp,0xc
c001f7a9:	90                   	nop
c001f7aa:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001f7ad:	c9                   	leave  
c001f7ae:	c3                   	ret    
c001f7af:	90                   	nop

c001f7b0 <APICTimer::close(int, int, void*)>:
c001f7b0:	b8 00 00 00 00       	mov    eax,0x0
c001f7b5:	c3                   	ret    
c001f7b6:	66 90                	xchg   ax,ax

c001f7b8 <apicTimerHandler(regs*, void*)>:
c001f7b8:	83 ec 0c             	sub    esp,0xc
c001f7bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f7bf:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f7c1:	b8 10 27 00 00       	mov    eax,0x2710
c001f7c6:	ba 00 00 00 00       	mov    edx,0x0
c001f7cb:	f7 f1                	div    ecx
c001f7cd:	83 ec 0c             	sub    esp,0xc
c001f7d0:	50                   	push   eax
c001f7d1:	e8 62 af fe ff       	call   c000a738 <timerHandler(unsigned int)>
c001f7d6:	83 c4 10             	add    esp,0x10
c001f7d9:	90                   	nop
c001f7da:	83 c4 0c             	add    esp,0xc
c001f7dd:	c3                   	ret    
c001f7de:	66 90                	xchg   ax,ax

c001f7e0 <APICTimer::open(int, int, void*)>:
c001f7e0:	83 ec 0c             	sub    esp,0xc
c001f7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7e7:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7e9:	83 c0 24             	add    eax,0x24
c001f7ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7ee:	83 ec 08             	sub    esp,0x8
c001f7f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7f9:	ff d0                	call   eax
c001f7fb:	83 c4 10             	add    esp,0x10
c001f7fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f802:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f806:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f810:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f814:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001f81a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f81e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f824:	83 ec 0c             	sub    esp,0xc
c001f827:	51                   	push   ecx
c001f828:	6a 01                	push   0x1
c001f82a:	68 b8 f7 01 c0       	push   0xc001f7b8
c001f82f:	52                   	push   edx
c001f830:	50                   	push   eax
c001f831:	e8 d8 97 fe ff       	call   c000900e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f836:	83 c4 20             	add    esp,0x20
c001f839:	89 c2                	mov    edx,eax
c001f83b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f83f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f845:	b8 00 00 00 00       	mov    eax,0x0
c001f84a:	83 c4 0c             	add    esp,0xc
c001f84d:	c3                   	ret    
c001f84e:	66 90                	xchg   ax,ax

c001f850 <APICTimer::write(int)>:
c001f850:	83 ec 0c             	sub    esp,0xc
c001f853:	83 ec 0c             	sub    esp,0xc
c001f856:	68 98 47 02 c0       	push   0xc0024798
c001f85b:	e8 36 f5 fe ff       	call   c000ed96 <KePanic(char const*)>
c001f860:	83 c4 10             	add    esp,0x10
c001f863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f867:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f86b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f871:	90                   	nop
c001f872:	83 c4 0c             	add    esp,0xc
c001f875:	c3                   	ret    
c001f876:	66 90                	xchg   ax,ax

c001f878 <APICTimer::APICTimer()>:
c001f878:	83 ec 0c             	sub    esp,0xc
c001f87b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f87f:	83 ec 08             	sub    esp,0x8
c001f882:	68 a8 47 02 c0       	push   0xc00247a8
c001f887:	50                   	push   eax
c001f888:	e8 df ad fe ff       	call   c000a66c <Timer::Timer(char const*)>
c001f88d:	83 c4 10             	add    esp,0x10
c001f890:	ba bc 47 02 c0       	mov    edx,0xc00247bc
c001f895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f899:	89 10                	mov    DWORD PTR [eax],edx
c001f89b:	90                   	nop
c001f89c:	83 c4 0c             	add    esp,0xc
c001f89f:	c3                   	ret    

c001f8a0 <PIT::write(int)>:
c001f8a0:	83 ec 10             	sub    esp,0x10
c001f8a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f8a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f8ab:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f8b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f8b5:	a3 24 e1 02 c0       	mov    ds:0xc002e124,eax
c001f8ba:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001f8bf:	89 c2                	mov    edx,eax
c001f8c1:	c1 fa 1f             	sar    edx,0x1f
c001f8c4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001f8c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f8cc:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001f8d3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001f8d8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001f8dc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001f8e1:	ee                   	out    dx,al
c001f8e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8e6:	0f b6 c0             	movzx  eax,al
c001f8e9:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001f8f0:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001f8f4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001f8f8:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001f8fd:	ee                   	out    dx,al
c001f8fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f902:	c1 f8 08             	sar    eax,0x8
c001f905:	0f b6 c0             	movzx  eax,al
c001f908:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001f90f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f913:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f917:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001f91c:	ee                   	out    dx,al
c001f91d:	90                   	nop
c001f91e:	83 c4 10             	add    esp,0x10
c001f921:	c3                   	ret    
c001f922:	66 90                	xchg   ax,ax

c001f924 <pitHandler(regs*, void*)>:
c001f924:	83 ec 0c             	sub    esp,0xc
c001f927:	8b 0d 24 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e124
c001f92d:	b8 10 27 00 00       	mov    eax,0x2710
c001f932:	89 c2                	mov    edx,eax
c001f934:	c1 fa 1f             	sar    edx,0x1f
c001f937:	f7 f9                	idiv   ecx
c001f939:	83 ec 0c             	sub    esp,0xc
c001f93c:	50                   	push   eax
c001f93d:	e8 f6 ad fe ff       	call   c000a738 <timerHandler(unsigned int)>
c001f942:	83 c4 10             	add    esp,0x10
c001f945:	90                   	nop
c001f946:	83 c4 0c             	add    esp,0xc
c001f949:	c3                   	ret    
c001f94a:	66 90                	xchg   ax,ax

c001f94c <PIT::open(int, int, void*)>:
c001f94c:	83 ec 0c             	sub    esp,0xc
c001f94f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f953:	8b 00                	mov    eax,DWORD PTR [eax]
c001f955:	83 c0 24             	add    eax,0x24
c001f958:	8b 00                	mov    eax,DWORD PTR [eax]
c001f95a:	83 ec 08             	sub    esp,0x8
c001f95d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f961:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f965:	ff d0                	call   eax
c001f967:	83 c4 10             	add    esp,0x10
c001f96a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f96e:	83 ec 0c             	sub    esp,0xc
c001f971:	6a 00                	push   0x0
c001f973:	6a 01                	push   0x1
c001f975:	68 24 f9 01 c0       	push   0xc001f924
c001f97a:	6a 00                	push   0x0
c001f97c:	50                   	push   eax
c001f97d:	e8 8c 96 fe ff       	call   c000900e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f982:	83 c4 20             	add    esp,0x20
c001f985:	89 c2                	mov    edx,eax
c001f987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f98b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f991:	b8 00 00 00 00       	mov    eax,0x0
c001f996:	83 c4 0c             	add    esp,0xc
c001f999:	c3                   	ret    
c001f99a:	66 90                	xchg   ax,ax

c001f99c <PIT::close(int, int, void*)>:
c001f99c:	83 ec 0c             	sub    esp,0xc
c001f99f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9a3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f9ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b1:	6a 01                	push   0x1
c001f9b3:	68 24 f9 01 c0       	push   0xc001f924
c001f9b8:	6a 00                	push   0x0
c001f9ba:	50                   	push   eax
c001f9bb:	e8 84 96 fe ff       	call   c0009044 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f9c0:	83 c4 10             	add    esp,0x10
c001f9c3:	b8 00 00 00 00       	mov    eax,0x0
c001f9c8:	83 c4 0c             	add    esp,0xc
c001f9cb:	c3                   	ret    

c001f9cc <PIT::PIT()>:
c001f9cc:	83 ec 0c             	sub    esp,0xc
c001f9cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d3:	83 ec 08             	sub    esp,0x8
c001f9d6:	68 e4 47 02 c0       	push   0xc00247e4
c001f9db:	50                   	push   eax
c001f9dc:	e8 8b ac fe ff       	call   c000a66c <Timer::Timer(char const*)>
c001f9e1:	83 c4 10             	add    esp,0x10
c001f9e4:	ba 0c 48 02 c0       	mov    edx,0xc002480c
c001f9e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ed:	89 10                	mov    DWORD PTR [eax],edx
c001f9ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9f3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f9f9:	0f b6 d0             	movzx  edx,al
c001f9fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa00:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001fa07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa0b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001fa11:	0f b6 d0             	movzx  edx,al
c001fa14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa18:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001fa1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa21:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001fa27:	8d 50 01             	lea    edx,[eax+0x1]
c001fa2a:	88 d1                	mov    cl,dl
c001fa2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fa30:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001fa36:	0f b6 d0             	movzx  edx,al
c001fa39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa3d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001fa41:	83 e1 3f             	and    ecx,0x3f
c001fa44:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001fa48:	90                   	nop
c001fa49:	83 c4 0c             	add    esp,0xc
c001fa4c:	c3                   	ret    
c001fa4d:	66 90                	xchg   ax,ax
c001fa4f:	90                   	nop

c001fa50 <avxDetect>:
c001fa50:	b8 01 00 00 00       	mov    eax,0x1
c001fa55:	0f a2                	cpuid  
c001fa57:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001fa5d:	74 15                	je     c001fa74 <avxDetect.noAVX>
c001fa5f:	b8 01 00 00 00       	mov    eax,0x1
c001fa64:	0f a2                	cpuid  
c001fa66:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001fa6c:	74 06                	je     c001fa74 <avxDetect.noAVX>
c001fa6e:	b8 01 00 00 00       	mov    eax,0x1
c001fa73:	c3                   	ret    

c001fa74 <avxDetect.noAVX>:
c001fa74:	b8 00 00 00 00       	mov    eax,0x0
c001fa79:	c3                   	ret    

c001fa7a <avxSave>:
c001fa7a:	53                   	push   ebx
c001fa7b:	52                   	push   edx
c001fa7c:	31 c0                	xor    eax,eax
c001fa7e:	48                   	dec    eax
c001fa7f:	89 c2                	mov    edx,eax
c001fa81:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fa85:	0f ae 23             	xsave  [ebx]
c001fa88:	5a                   	pop    edx
c001fa89:	5b                   	pop    ebx
c001fa8a:	c3                   	ret    

c001fa8b <avxLoad>:
c001fa8b:	53                   	push   ebx
c001fa8c:	52                   	push   edx
c001fa8d:	31 c0                	xor    eax,eax
c001fa8f:	48                   	dec    eax
c001fa90:	89 c2                	mov    edx,eax
c001fa92:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fa96:	0f ae 2b             	xrstor [ebx]
c001fa99:	5a                   	pop    edx
c001fa9a:	5b                   	pop    ebx
c001fa9b:	c3                   	ret    

c001fa9c <avxInit>:
c001fa9c:	e8 47 03 00 00       	call   c001fde8 <sseInit>
c001faa1:	50                   	push   eax
c001faa2:	51                   	push   ecx
c001faa3:	0f 20 e0             	mov    eax,cr4
c001faa6:	0d 00 00 04 00       	or     eax,0x40000
c001faab:	0f 22 e0             	mov    cr4,eax
c001faae:	31 c9                	xor    ecx,ecx
c001fab0:	0f 01 d0             	xgetbv 
c001fab3:	0d 07 00 00 00       	or     eax,0x7
c001fab8:	0f 01 d1             	xsetbv 
c001fabb:	59                   	pop    ecx
c001fabc:	58                   	pop    eax
c001fabd:	c3                   	ret    

c001fabe <avxClose>:
c001fabe:	c3                   	ret    
c001fabf:	90                   	nop

c001fac0 <isr0>:
c001fac0:	fa                   	cli    
c001fac1:	68 00 00 00 00       	push   0x0
c001fac6:	68 00 00 00 00       	push   0x0
c001facb:	e9 56 01 00 00       	jmp    c001fc26 <int_common_stub>

c001fad0 <isr1>:
c001fad0:	fa                   	cli    
c001fad1:	6a 00                	push   0x0
c001fad3:	6a 01                	push   0x1
c001fad5:	e9 4c 01 00 00       	jmp    c001fc26 <int_common_stub>

c001fada <isr2>:
c001fada:	fa                   	cli    
c001fadb:	6a 00                	push   0x0
c001fadd:	6a 02                	push   0x2
c001fadf:	e9 42 01 00 00       	jmp    c001fc26 <int_common_stub>

c001fae4 <isr3>:
c001fae4:	fa                   	cli    
c001fae5:	6a 00                	push   0x0
c001fae7:	6a 03                	push   0x3
c001fae9:	e9 38 01 00 00       	jmp    c001fc26 <int_common_stub>

c001faee <isr4>:
c001faee:	fa                   	cli    
c001faef:	6a 00                	push   0x0
c001faf1:	6a 04                	push   0x4
c001faf3:	e9 2e 01 00 00       	jmp    c001fc26 <int_common_stub>

c001faf8 <isr5>:
c001faf8:	fa                   	cli    
c001faf9:	6a 00                	push   0x0
c001fafb:	6a 05                	push   0x5
c001fafd:	e9 24 01 00 00       	jmp    c001fc26 <int_common_stub>

c001fb02 <isr6>:
c001fb02:	fa                   	cli    
c001fb03:	6a 00                	push   0x0
c001fb05:	6a 06                	push   0x6
c001fb07:	e9 1a 01 00 00       	jmp    c001fc26 <int_common_stub>

c001fb0c <isr7>:
c001fb0c:	fa                   	cli    
c001fb0d:	6a 00                	push   0x0
c001fb0f:	6a 07                	push   0x7
c001fb11:	e9 10 01 00 00       	jmp    c001fc26 <int_common_stub>

c001fb16 <isr8>:
c001fb16:	fa                   	cli    
c001fb17:	6a 08                	push   0x8
c001fb19:	e9 08 01 00 00       	jmp    c001fc26 <int_common_stub>

c001fb1e <isr9>:
c001fb1e:	fa                   	cli    
c001fb1f:	6a 00                	push   0x0
c001fb21:	6a 09                	push   0x9
c001fb23:	e9 fe 00 00 00       	jmp    c001fc26 <int_common_stub>

c001fb28 <isr10>:
c001fb28:	fa                   	cli    
c001fb29:	6a 0a                	push   0xa
c001fb2b:	e9 f6 00 00 00       	jmp    c001fc26 <int_common_stub>

c001fb30 <isr11>:
c001fb30:	fa                   	cli    
c001fb31:	6a 0b                	push   0xb
c001fb33:	e9 ee 00 00 00       	jmp    c001fc26 <int_common_stub>

c001fb38 <isr12>:
c001fb38:	fa                   	cli    
c001fb39:	6a 0c                	push   0xc
c001fb3b:	e9 e6 00 00 00       	jmp    c001fc26 <int_common_stub>

c001fb40 <isr13>:
c001fb40:	fa                   	cli    
c001fb41:	6a 0d                	push   0xd
c001fb43:	53                   	push   ebx
c001fb44:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fb48:	81 fb 16 fd 01 c0    	cmp    ebx,0xc001fd16
c001fb4e:	5b                   	pop    ebx
c001fb4f:	0f 84 c3 01 00 00    	je     c001fd18 <finishSignal2>
c001fb55:	e9 cc 00 00 00       	jmp    c001fc26 <int_common_stub>

c001fb5a <isr14>:
c001fb5a:	fa                   	cli    
c001fb5b:	6a 0e                	push   0xe
c001fb5d:	e9 c4 00 00 00       	jmp    c001fc26 <int_common_stub>

c001fb62 <isr15>:
c001fb62:	fa                   	cli    
c001fb63:	6a 00                	push   0x0
c001fb65:	6a 0f                	push   0xf
c001fb67:	e9 ba 00 00 00       	jmp    c001fc26 <int_common_stub>

c001fb6c <isr16>:
c001fb6c:	fa                   	cli    
c001fb6d:	6a 00                	push   0x0
c001fb6f:	6a 10                	push   0x10
c001fb71:	e9 b0 00 00 00       	jmp    c001fc26 <int_common_stub>

c001fb76 <isr17>:
c001fb76:	fa                   	cli    
c001fb77:	6a 00                	push   0x0
c001fb79:	6a 11                	push   0x11
c001fb7b:	e9 a6 00 00 00       	jmp    c001fc26 <int_common_stub>

c001fb80 <isr18>:
c001fb80:	fa                   	cli    
c001fb81:	6a 00                	push   0x0
c001fb83:	6a 12                	push   0x12
c001fb85:	e9 9c 00 00 00       	jmp    c001fc26 <int_common_stub>

c001fb8a <irq3>:
c001fb8a:	fa                   	cli    
c001fb8b:	6a 00                	push   0x0
c001fb8d:	6a 23                	push   0x23
c001fb8f:	e9 92 00 00 00       	jmp    c001fc26 <int_common_stub>

c001fb94 <irq4>:
c001fb94:	fa                   	cli    
c001fb95:	6a 00                	push   0x0
c001fb97:	6a 24                	push   0x24
c001fb99:	e9 88 00 00 00       	jmp    c001fc26 <int_common_stub>

c001fb9e <irq5>:
c001fb9e:	fa                   	cli    
c001fb9f:	6a 00                	push   0x0
c001fba1:	6a 25                	push   0x25
c001fba3:	e9 7e 00 00 00       	jmp    c001fc26 <int_common_stub>

c001fba8 <irq6>:
c001fba8:	fa                   	cli    
c001fba9:	6a 00                	push   0x0
c001fbab:	6a 26                	push   0x26
c001fbad:	e9 74 00 00 00       	jmp    c001fc26 <int_common_stub>

c001fbb2 <irq7>:
c001fbb2:	fa                   	cli    
c001fbb3:	6a 00                	push   0x0
c001fbb5:	6a 27                	push   0x27
c001fbb7:	e9 6a 00 00 00       	jmp    c001fc26 <int_common_stub>

c001fbbc <irq8>:
c001fbbc:	fa                   	cli    
c001fbbd:	6a 00                	push   0x0
c001fbbf:	6a 28                	push   0x28
c001fbc1:	e9 60 00 00 00       	jmp    c001fc26 <int_common_stub>

c001fbc6 <irq9>:
c001fbc6:	fa                   	cli    
c001fbc7:	6a 00                	push   0x0
c001fbc9:	6a 29                	push   0x29
c001fbcb:	e9 56 00 00 00       	jmp    c001fc26 <int_common_stub>

c001fbd0 <irq10>:
c001fbd0:	fa                   	cli    
c001fbd1:	6a 00                	push   0x0
c001fbd3:	6a 2a                	push   0x2a
c001fbd5:	e9 4c 00 00 00       	jmp    c001fc26 <int_common_stub>

c001fbda <irq11>:
c001fbda:	fa                   	cli    
c001fbdb:	6a 00                	push   0x0
c001fbdd:	6a 2b                	push   0x2b
c001fbdf:	e9 42 00 00 00       	jmp    c001fc26 <int_common_stub>

c001fbe4 <irq12>:
c001fbe4:	fa                   	cli    
c001fbe5:	6a 00                	push   0x0
c001fbe7:	6a 2c                	push   0x2c
c001fbe9:	e9 38 00 00 00       	jmp    c001fc26 <int_common_stub>

c001fbee <irq13>:
c001fbee:	fa                   	cli    
c001fbef:	6a 00                	push   0x0
c001fbf1:	6a 2d                	push   0x2d
c001fbf3:	e9 2e 00 00 00       	jmp    c001fc26 <int_common_stub>

c001fbf8 <irq14>:
c001fbf8:	fa                   	cli    
c001fbf9:	6a 00                	push   0x0
c001fbfb:	6a 2e                	push   0x2e
c001fbfd:	e9 24 00 00 00       	jmp    c001fc26 <int_common_stub>

c001fc02 <irq15>:
c001fc02:	fa                   	cli    
c001fc03:	6a 00                	push   0x0
c001fc05:	6a 2f                	push   0x2f
c001fc07:	e9 1a 00 00 00       	jmp    c001fc26 <int_common_stub>

c001fc0c <irq1>:
c001fc0c:	fa                   	cli    
c001fc0d:	6a 00                	push   0x0
c001fc0f:	6a 21                	push   0x21
c001fc11:	eb 13                	jmp    c001fc26 <int_common_stub>

c001fc13 <irq2>:
c001fc13:	fa                   	cli    
c001fc14:	6a 00                	push   0x0
c001fc16:	6a 22                	push   0x22
c001fc18:	eb 0c                	jmp    c001fc26 <int_common_stub>

c001fc1a <isr96>:
c001fc1a:	6a 00                	push   0x0
c001fc1c:	6a 60                	push   0x60
c001fc1e:	fb                   	sti    
c001fc1f:	eb 37                	jmp    c001fc58 <syscall_common_stub>

c001fc21 <irq0>:
c001fc21:	fa                   	cli    
c001fc22:	6a 00                	push   0x0
c001fc24:	6a 20                	push   0x20

c001fc26 <int_common_stub>:
c001fc26:	60                   	pusha  
c001fc27:	1e                   	push   ds
c001fc28:	06                   	push   es
c001fc29:	0f a0                	push   fs
c001fc2b:	0f a8                	push   gs
c001fc2d:	66 b8 10 00          	mov    ax,0x10
c001fc31:	66 8e d8             	mov    ds,ax
c001fc34:	66 8e c0             	mov    es,ax
c001fc37:	66 8e e0             	mov    fs,ax
c001fc3a:	66 8e e8             	mov    gs,ax
c001fc3d:	54                   	push   esp
c001fc3e:	fc                   	cld    
c001fc3f:	e8 00 e2 fe ff       	call   c000de44 <int_handler>
c001fc44:	81 c4 04 00 00 00    	add    esp,0x4
c001fc4a:	0f a9                	pop    gs
c001fc4c:	0f a1                	pop    fs
c001fc4e:	07                   	pop    es
c001fc4f:	1f                   	pop    ds
c001fc50:	61                   	popa   
c001fc51:	81 c4 08 00 00 00    	add    esp,0x8
c001fc57:	cf                   	iret   

c001fc58 <syscall_common_stub>:
c001fc58:	60                   	pusha  
c001fc59:	1e                   	push   ds
c001fc5a:	06                   	push   es
c001fc5b:	0f a0                	push   fs
c001fc5d:	0f a8                	push   gs
c001fc5f:	66 b8 10 00          	mov    ax,0x10
c001fc63:	66 8e d8             	mov    ds,ax
c001fc66:	66 8e c0             	mov    es,ax
c001fc69:	66 8e e0             	mov    fs,ax
c001fc6c:	66 8e e8             	mov    gs,ax
c001fc6f:	54                   	push   esp
c001fc70:	fc                   	cld    
c001fc71:	e8 ce e1 fe ff       	call   c000de44 <int_handler>
c001fc76:	81 c4 04 00 00 00    	add    esp,0x4
c001fc7c:	0f a9                	pop    gs
c001fc7e:	0f a1                	pop    fs
c001fc80:	07                   	pop    es
c001fc81:	1f                   	pop    ds
c001fc82:	e8 cc 03 ff ff       	call   c0010053 <KiCheckSignalZ>
c001fc87:	3d 00 00 00 00       	cmp    eax,0x0
c001fc8c:	0f 84 c0 00 00 00    	je     c001fd52 <skipSignals>
c001fc92:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001fc97:	61                   	popa   
c001fc98:	53                   	push   ebx
c001fc99:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001fc9f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001fca2:	5b                   	pop    ebx
c001fca3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001fca8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001fcab:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001fcae:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fcb1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001fcb4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001fcb7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001fcba:	81 c4 08 00 00 00    	add    esp,0x8
c001fcc0:	5e                   	pop    esi
c001fcc1:	5b                   	pop    ebx
c001fcc2:	59                   	pop    ecx
c001fcc3:	5a                   	pop    edx
c001fcc4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001fcc7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001fcca:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001fccd:	52                   	push   edx
c001fcce:	51                   	push   ecx
c001fccf:	53                   	push   ebx
c001fcd0:	56                   	push   esi
c001fcd1:	81 ec 08 00 00 00    	sub    esp,0x8
c001fcd7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001fcda:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001fcdd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001fce0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fce3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fce6:	60                   	pusha  
c001fce7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001fced:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001fcf0:	89 e3                	mov    ebx,esp
c001fcf2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001fcf5:	52                   	push   edx
c001fcf6:	68 16 fd 01 c0       	push   0xc001fd16
c001fcfb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001fcfe:	89 dc                	mov    esp,ebx
c001fd00:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001fd03:	68 23 00 00 00       	push   0x23
c001fd08:	51                   	push   ecx
c001fd09:	68 02 02 00 00       	push   0x202
c001fd0e:	68 1b 00 00 00       	push   0x1b
c001fd13:	ff 36                	push   DWORD PTR [esi]
c001fd15:	cf                   	iret   

c001fd16 <finishSignal>:
c001fd16:	cd 0f                	int    0xf

c001fd18 <finishSignal2>:
c001fd18:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001fd1e:	e8 ad 03 ff ff       	call   c00100d0 <KiFinishSignalZ>
c001fd23:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001fd29:	68 23 00 00 00       	push   0x23
c001fd2e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001fd31:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001fd34:	68 1b 00 00 00       	push   0x1b
c001fd39:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001fd3c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001fd3f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001fd42:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001fd45:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001fd48:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001fd4b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001fd4e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001fd51:	cf                   	iret   

c001fd52 <skipSignals>:
c001fd52:	61                   	popa   
c001fd53:	81 c4 08 00 00 00    	add    esp,0x8
c001fd59:	cf                   	iret   
c001fd5a:	90                   	nop
c001fd5b:	90                   	nop

c001fd5c <irq16>:
c001fd5c:	fa                   	cli    
c001fd5d:	6a 00                	push   0x0
c001fd5f:	6a 30                	push   0x30
c001fd61:	e9 c0 fe ff ff       	jmp    c001fc26 <int_common_stub>

c001fd66 <irq17>:
c001fd66:	fa                   	cli    
c001fd67:	6a 00                	push   0x0
c001fd69:	6a 31                	push   0x31
c001fd6b:	e9 b6 fe ff ff       	jmp    c001fc26 <int_common_stub>

c001fd70 <irq18>:
c001fd70:	fa                   	cli    
c001fd71:	6a 00                	push   0x0
c001fd73:	6a 32                	push   0x32
c001fd75:	e9 ac fe ff ff       	jmp    c001fc26 <int_common_stub>

c001fd7a <irq19>:
c001fd7a:	fa                   	cli    
c001fd7b:	6a 00                	push   0x0
c001fd7d:	6a 33                	push   0x33
c001fd7f:	e9 a2 fe ff ff       	jmp    c001fc26 <int_common_stub>

c001fd84 <irq20>:
c001fd84:	fa                   	cli    
c001fd85:	6a 00                	push   0x0
c001fd87:	6a 34                	push   0x34
c001fd89:	e9 98 fe ff ff       	jmp    c001fc26 <int_common_stub>

c001fd8e <irq21>:
c001fd8e:	fa                   	cli    
c001fd8f:	6a 00                	push   0x0
c001fd91:	6a 35                	push   0x35
c001fd93:	e9 8e fe ff ff       	jmp    c001fc26 <int_common_stub>

c001fd98 <irq22>:
c001fd98:	fa                   	cli    
c001fd99:	6a 00                	push   0x0
c001fd9b:	6a 36                	push   0x36
c001fd9d:	e9 84 fe ff ff       	jmp    c001fc26 <int_common_stub>

c001fda2 <irq23>:
c001fda2:	fa                   	cli    
c001fda3:	6a 00                	push   0x0
c001fda5:	6a 37                	push   0x37
c001fda7:	e9 7a fe ff ff       	jmp    c001fc26 <int_common_stub>
c001fdac:	66 90                	xchg   ax,ax
c001fdae:	66 90                	xchg   ax,ax

c001fdb0 <i386GetRDRAND>:
c001fdb0:	b9 64 00 00 00       	mov    ecx,0x64

c001fdb5 <retry>:
c001fdb5:	0f c7 f0             	rdrand eax
c001fdb8:	72 05                	jb     c001fdbf <retry.done>
c001fdba:	e2 f9                	loop   c001fdb5 <retry>

c001fdbc <retry.fail>:
c001fdbc:	31 c0                	xor    eax,eax
c001fdbe:	c3                   	ret    

c001fdbf <retry.done>:
c001fdbf:	c3                   	ret    

c001fdc0 <sseDetect>:
c001fdc0:	b8 01 00 00 00       	mov    eax,0x1
c001fdc5:	0f a2                	cpuid  
c001fdc7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001fdcd:	74 06                	je     c001fdd5 <sseDetect.noSSE>
c001fdcf:	b8 01 00 00 00       	mov    eax,0x1
c001fdd4:	c3                   	ret    

c001fdd5 <sseDetect.noSSE>:
c001fdd5:	31 c0                	xor    eax,eax
c001fdd7:	c3                   	ret    

c001fdd8 <sseSave>:
c001fdd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fddc:	0f ae 00             	fxsave [eax]
c001fddf:	c3                   	ret    

c001fde0 <sseLoad>:
c001fde0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fde4:	0f ae 08             	fxrstor [eax]
c001fde7:	c3                   	ret    

c001fde8 <sseInit>:
c001fde8:	e8 48 00 00 00       	call   c001fe35 <x87Init>
c001fded:	0f 20 e0             	mov    eax,cr4
c001fdf0:	66 0d 00 06          	or     ax,0x600
c001fdf4:	0f 22 e0             	mov    cr4,eax
c001fdf7:	c3                   	ret    

c001fdf8 <sseClose>:
c001fdf8:	c3                   	ret    
c001fdf9:	66 90                	xchg   ax,ax
c001fdfb:	66 90                	xchg   ax,ax
c001fdfd:	66 90                	xchg   ax,ax
c001fdff:	90                   	nop

c001fe00 <value_37F>:
c001fe00:	7f 03                	jg     c001fe05 <value_37A+0x1>

c001fe02 <value_37E>:
c001fe02:	7e 03                	jle    c001fe07 <x87Detect+0x1>

c001fe04 <value_37A>:
c001fe04:	7a 03                	jp     c001fe09 <x87Detect+0x3>

c001fe06 <x87Detect>:
c001fe06:	53                   	push   ebx
c001fe07:	51                   	push   ecx
c001fe08:	52                   	push   edx
c001fe09:	b8 01 00 00 00       	mov    eax,0x1
c001fe0e:	0f a2                	cpuid  
c001fe10:	f7 c2 01 00 00 00    	test   edx,0x1
c001fe16:	74 06                	je     c001fe1e <x87Detect.nox87>
c001fe18:	b8 01 00 00 00       	mov    eax,0x1
c001fe1d:	c3                   	ret    

c001fe1e <x87Detect.nox87>:
c001fe1e:	b8 00 00 00 00       	mov    eax,0x0
c001fe23:	5a                   	pop    edx
c001fe24:	59                   	pop    ecx
c001fe25:	5b                   	pop    ebx
c001fe26:	c3                   	ret    

c001fe27 <x87Save>:
c001fe27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe2b:	dd 30                	fnsave [eax]
c001fe2d:	c3                   	ret    

c001fe2e <x87Load>:
c001fe2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe32:	dd 20                	frstor [eax]
c001fe34:	c3                   	ret    

c001fe35 <x87Init>:
c001fe35:	0f 20 c0             	mov    eax,cr0
c001fe38:	66 25 fb ff          	and    ax,0xfffb
c001fe3c:	66 0d 22 00          	or     ax,0x22
c001fe40:	0f 22 c0             	mov    cr0,eax
c001fe43:	db e3                	fninit 
c001fe45:	0f 06                	clts   
c001fe47:	d9 2d 04 fe 01 c0    	fldcw  WORD PTR ds:0xc001fe04
c001fe4d:	c3                   	ret    

c001fe4e <x87Close>:
c001fe4e:	c3                   	ret    
c001fe4f:	90                   	nop

c001fe50 <__do_global_ctors_aux>:
c001fe50:	a1 04 0e 02 c0       	mov    eax,ds:0xc0020e04
c001fe55:	83 f8 ff             	cmp    eax,0xffffffff
c001fe58:	74 1a                	je     c001fe74 <__do_global_ctors_aux+0x24>
c001fe5a:	55                   	push   ebp
c001fe5b:	89 e5                	mov    ebp,esp
c001fe5d:	53                   	push   ebx
c001fe5e:	52                   	push   edx
c001fe5f:	bb 04 0e 02 c0       	mov    ebx,0xc0020e04
c001fe64:	ff d0                	call   eax
c001fe66:	83 eb 04             	sub    ebx,0x4
c001fe69:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fe6b:	83 f8 ff             	cmp    eax,0xffffffff
c001fe6e:	75 f4                	jne    c001fe64 <__do_global_ctors_aux+0x14>
c001fe70:	58                   	pop    eax
c001fe71:	5b                   	pop    ebx
c001fe72:	5d                   	pop    ebp
c001fe73:	c3                   	ret    
c001fe74:	c3                   	ret    
c001fe75:	66 90                	xchg   ax,ax
c001fe77:	90                   	nop

c001fe78 <__divdi3>:
c001fe78:	55                   	push   ebp
c001fe79:	57                   	push   edi
c001fe7a:	56                   	push   esi
c001fe7b:	53                   	push   ebx
c001fe7c:	83 ec 1c             	sub    esp,0x1c
c001fe7f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001fe83:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fe87:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001fe8a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001fe8e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fe92:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001fe96:	85 db                	test   ebx,ebx
c001fe98:	0f 88 8e 00 00 00    	js     c001ff2c <__divdi3+0xb4>
c001fe9e:	89 dd                	mov    ebp,ebx
c001fea0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fea8:	89 d3                	mov    ebx,edx
c001feaa:	85 d2                	test   edx,edx
c001feac:	79 0d                	jns    c001febb <__divdi3+0x43>
c001feae:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001feb2:	f7 d8                	neg    eax
c001feb4:	83 d2 00             	adc    edx,0x0
c001feb7:	f7 da                	neg    edx
c001feb9:	89 d3                	mov    ebx,edx
c001febb:	89 c7                	mov    edi,eax
c001febd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001fec0:	85 db                	test   ebx,ebx
c001fec2:	75 48                	jne    c001ff0c <__divdi3+0x94>
c001fec4:	39 ef                	cmp    edi,ebp
c001fec6:	76 24                	jbe    c001feec <__divdi3+0x74>
c001fec8:	89 ea                	mov    edx,ebp
c001feca:	f7 f7                	div    edi
c001fecc:	89 c1                	mov    ecx,eax
c001fece:	31 f6                	xor    esi,esi
c001fed0:	89 c8                	mov    eax,ecx
c001fed2:	89 f2                	mov    edx,esi
c001fed4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fed8:	85 c9                	test   ecx,ecx
c001feda:	74 07                	je     c001fee3 <__divdi3+0x6b>
c001fedc:	f7 d8                	neg    eax
c001fede:	83 d2 00             	adc    edx,0x0
c001fee1:	f7 da                	neg    edx
c001fee3:	83 c4 1c             	add    esp,0x1c
c001fee6:	5b                   	pop    ebx
c001fee7:	5e                   	pop    esi
c001fee8:	5f                   	pop    edi
c001fee9:	5d                   	pop    ebp
c001feea:	c3                   	ret    
c001feeb:	90                   	nop
c001feec:	85 ff                	test   edi,edi
c001feee:	75 0b                	jne    c001fefb <__divdi3+0x83>
c001fef0:	b8 01 00 00 00       	mov    eax,0x1
c001fef5:	31 d2                	xor    edx,edx
c001fef7:	f7 f3                	div    ebx
c001fef9:	89 c7                	mov    edi,eax
c001fefb:	31 d2                	xor    edx,edx
c001fefd:	89 e8                	mov    eax,ebp
c001feff:	f7 f7                	div    edi
c001ff01:	89 c6                	mov    esi,eax
c001ff03:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ff06:	f7 f7                	div    edi
c001ff08:	89 c1                	mov    ecx,eax
c001ff0a:	eb c4                	jmp    c001fed0 <__divdi3+0x58>
c001ff0c:	39 eb                	cmp    ebx,ebp
c001ff0e:	77 3c                	ja     c001ff4c <__divdi3+0xd4>
c001ff10:	0f bd f3             	bsr    esi,ebx
c001ff13:	83 f6 1f             	xor    esi,0x1f
c001ff16:	75 40                	jne    c001ff58 <__divdi3+0xe0>
c001ff18:	39 eb                	cmp    ebx,ebp
c001ff1a:	72 09                	jb     c001ff25 <__divdi3+0xad>
c001ff1c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001ff1f:	0f 87 97 00 00 00    	ja     c001ffbc <__divdi3+0x144>
c001ff25:	b9 01 00 00 00       	mov    ecx,0x1
c001ff2a:	eb a4                	jmp    c001fed0 <__divdi3+0x58>
c001ff2c:	f7 d9                	neg    ecx
c001ff2e:	83 d3 00             	adc    ebx,0x0
c001ff31:	f7 db                	neg    ebx
c001ff33:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ff36:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ff3a:	89 dd                	mov    ebp,ebx
c001ff3c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001ff44:	e9 5f ff ff ff       	jmp    c001fea8 <__divdi3+0x30>
c001ff49:	8d 76 00             	lea    esi,[esi+0x0]
c001ff4c:	31 f6                	xor    esi,esi
c001ff4e:	31 c9                	xor    ecx,ecx
c001ff50:	e9 7b ff ff ff       	jmp    c001fed0 <__divdi3+0x58>
c001ff55:	8d 76 00             	lea    esi,[esi+0x0]
c001ff58:	b8 20 00 00 00       	mov    eax,0x20
c001ff5d:	29 f0                	sub    eax,esi
c001ff5f:	89 f1                	mov    ecx,esi
c001ff61:	d3 e3                	shl    ebx,cl
c001ff63:	89 fa                	mov    edx,edi
c001ff65:	88 c1                	mov    cl,al
c001ff67:	d3 ea                	shr    edx,cl
c001ff69:	09 da                	or     edx,ebx
c001ff6b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ff6f:	89 f1                	mov    ecx,esi
c001ff71:	d3 e7                	shl    edi,cl
c001ff73:	89 eb                	mov    ebx,ebp
c001ff75:	88 c1                	mov    cl,al
c001ff77:	d3 eb                	shr    ebx,cl
c001ff79:	89 f1                	mov    ecx,esi
c001ff7b:	d3 e5                	shl    ebp,cl
c001ff7d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001ff80:	88 c1                	mov    cl,al
c001ff82:	d3 ea                	shr    edx,cl
c001ff84:	09 d5                	or     ebp,edx
c001ff86:	89 e8                	mov    eax,ebp
c001ff88:	89 da                	mov    edx,ebx
c001ff8a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001ff8e:	89 d3                	mov    ebx,edx
c001ff90:	89 c5                	mov    ebp,eax
c001ff92:	f7 e7                	mul    edi
c001ff94:	39 d3                	cmp    ebx,edx
c001ff96:	72 18                	jb     c001ffb0 <__divdi3+0x138>
c001ff98:	74 0a                	je     c001ffa4 <__divdi3+0x12c>
c001ff9a:	89 e9                	mov    ecx,ebp
c001ff9c:	31 f6                	xor    esi,esi
c001ff9e:	e9 2d ff ff ff       	jmp    c001fed0 <__divdi3+0x58>
c001ffa3:	90                   	nop
c001ffa4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001ffa7:	89 f1                	mov    ecx,esi
c001ffa9:	d3 e7                	shl    edi,cl
c001ffab:	39 c7                	cmp    edi,eax
c001ffad:	73 eb                	jae    c001ff9a <__divdi3+0x122>
c001ffaf:	90                   	nop
c001ffb0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001ffb3:	31 f6                	xor    esi,esi
c001ffb5:	e9 16 ff ff ff       	jmp    c001fed0 <__divdi3+0x58>
c001ffba:	66 90                	xchg   ax,ax
c001ffbc:	31 c9                	xor    ecx,ecx
c001ffbe:	e9 0d ff ff ff       	jmp    c001fed0 <__divdi3+0x58>
c001ffc3:	90                   	nop

c001ffc4 <__moddi3>:
c001ffc4:	55                   	push   ebp
c001ffc5:	57                   	push   edi
c001ffc6:	56                   	push   esi
c001ffc7:	53                   	push   ebx
c001ffc8:	83 ec 2c             	sub    esp,0x2c
c001ffcb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ffcf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001ffd3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ffd7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001ffdb:	85 db                	test   ebx,ebx
c001ffdd:	0f 88 85 00 00 00    	js     c0020068 <__moddi3+0xa4>
c001ffe3:	89 de                	mov    esi,ebx
c001ffe5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ffed:	89 d7                	mov    edi,edx
c001ffef:	85 d2                	test   edx,edx
c001fff1:	79 09                	jns    c001fffc <__moddi3+0x38>
c001fff3:	f7 d8                	neg    eax
c001fff5:	83 d2 00             	adc    edx,0x0
c001fff8:	f7 da                	neg    edx
c001fffa:	89 d7                	mov    edi,edx
c001fffc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020000:	89 cd                	mov    ebp,ecx
c0020002:	85 ff                	test   edi,edi
c0020004:	75 52                	jne    c0020058 <__moddi3+0x94>
c0020006:	89 c3                	mov    ebx,eax
c0020008:	39 f0                	cmp    eax,esi
c002000a:	76 24                	jbe    c0020030 <__moddi3+0x6c>
c002000c:	89 c8                	mov    eax,ecx
c002000e:	89 f2                	mov    edx,esi
c0020010:	f7 f3                	div    ebx
c0020012:	89 d6                	mov    esi,edx
c0020014:	89 f0                	mov    eax,esi
c0020016:	31 d2                	xor    edx,edx
c0020018:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002001c:	85 c9                	test   ecx,ecx
c002001e:	74 07                	je     c0020027 <__moddi3+0x63>
c0020020:	f7 d8                	neg    eax
c0020022:	83 d2 00             	adc    edx,0x0
c0020025:	f7 da                	neg    edx
c0020027:	83 c4 2c             	add    esp,0x2c
c002002a:	5b                   	pop    ebx
c002002b:	5e                   	pop    esi
c002002c:	5f                   	pop    edi
c002002d:	5d                   	pop    ebp
c002002e:	c3                   	ret    
c002002f:	90                   	nop
c0020030:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020034:	85 db                	test   ebx,ebx
c0020036:	75 0d                	jne    c0020045 <__moddi3+0x81>
c0020038:	b8 01 00 00 00       	mov    eax,0x1
c002003d:	31 d2                	xor    edx,edx
c002003f:	f7 f7                	div    edi
c0020041:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020045:	89 f0                	mov    eax,esi
c0020047:	31 d2                	xor    edx,edx
c0020049:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002004d:	f7 f7                	div    edi
c002004f:	89 e8                	mov    eax,ebp
c0020051:	f7 f7                	div    edi
c0020053:	89 d6                	mov    esi,edx
c0020055:	eb bd                	jmp    c0020014 <__moddi3+0x50>
c0020057:	90                   	nop
c0020058:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002005c:	39 f7                	cmp    edi,esi
c002005e:	76 20                	jbe    c0020080 <__moddi3+0xbc>
c0020060:	89 c8                	mov    eax,ecx
c0020062:	89 f2                	mov    edx,esi
c0020064:	eb b2                	jmp    c0020018 <__moddi3+0x54>
c0020066:	66 90                	xchg   ax,ax
c0020068:	f7 d9                	neg    ecx
c002006a:	83 d3 00             	adc    ebx,0x0
c002006d:	f7 db                	neg    ebx
c002006f:	89 de                	mov    esi,ebx
c0020071:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0020079:	e9 6f ff ff ff       	jmp    c001ffed <__moddi3+0x29>
c002007e:	66 90                	xchg   ax,ax
c0020080:	0f bd c7             	bsr    eax,edi
c0020083:	83 f0 1f             	xor    eax,0x1f
c0020086:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002008a:	75 24                	jne    c00200b0 <__moddi3+0xec>
c002008c:	39 f7                	cmp    edi,esi
c002008e:	72 06                	jb     c0020096 <__moddi3+0xd2>
c0020090:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0020094:	77 0c                	ja     c00200a2 <__moddi3+0xde>
c0020096:	89 e9                	mov    ecx,ebp
c0020098:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002009c:	19 fe                	sbb    esi,edi
c002009e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00200a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00200a6:	89 f2                	mov    edx,esi
c00200a8:	e9 6b ff ff ff       	jmp    c0020018 <__moddi3+0x54>
c00200ad:	8d 76 00             	lea    esi,[esi+0x0]
c00200b0:	b8 20 00 00 00       	mov    eax,0x20
c00200b5:	89 c2                	mov    edx,eax
c00200b7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00200bb:	29 da                	sub    edx,ebx
c00200bd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00200c1:	88 d9                	mov    cl,bl
c00200c3:	d3 e7                	shl    edi,cl
c00200c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00200c9:	88 d1                	mov    cl,dl
c00200cb:	d3 e8                	shr    eax,cl
c00200cd:	09 c7                	or     edi,eax
c00200cf:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00200d3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00200d7:	89 d8                	mov    eax,ebx
c00200d9:	88 d9                	mov    cl,bl
c00200db:	d3 e7                	shl    edi,cl
c00200dd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00200e1:	89 f3                	mov    ebx,esi
c00200e3:	88 d1                	mov    cl,dl
c00200e5:	d3 eb                	shr    ebx,cl
c00200e7:	89 c7                	mov    edi,eax
c00200e9:	88 c1                	mov    cl,al
c00200eb:	d3 e6                	shl    esi,cl
c00200ed:	89 e8                	mov    eax,ebp
c00200ef:	88 d1                	mov    cl,dl
c00200f1:	d3 e8                	shr    eax,cl
c00200f3:	09 f0                	or     eax,esi
c00200f5:	89 f9                	mov    ecx,edi
c00200f7:	d3 e5                	shl    ebp,cl
c00200f9:	89 da                	mov    edx,ebx
c00200fb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00200ff:	89 d3                	mov    ebx,edx
c0020101:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020105:	89 c6                	mov    esi,eax
c0020107:	89 d1                	mov    ecx,edx
c0020109:	39 d3                	cmp    ebx,edx
c002010b:	72 27                	jb     c0020134 <__moddi3+0x170>
c002010d:	74 21                	je     c0020130 <__moddi3+0x16c>
c002010f:	29 f5                	sub    ebp,esi
c0020111:	19 cb                	sbb    ebx,ecx
c0020113:	89 de                	mov    esi,ebx
c0020115:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0020119:	d3 e6                	shl    esi,cl
c002011b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002011f:	89 f9                	mov    ecx,edi
c0020121:	d3 ed                	shr    ebp,cl
c0020123:	09 ee                	or     esi,ebp
c0020125:	89 f0                	mov    eax,esi
c0020127:	d3 eb                	shr    ebx,cl
c0020129:	89 da                	mov    edx,ebx
c002012b:	e9 e8 fe ff ff       	jmp    c0020018 <__moddi3+0x54>
c0020130:	39 c5                	cmp    ebp,eax
c0020132:	73 db                	jae    c002010f <__moddi3+0x14b>
c0020134:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0020138:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002013c:	89 d1                	mov    ecx,edx
c002013e:	89 c6                	mov    esi,eax
c0020140:	eb cd                	jmp    c002010f <__moddi3+0x14b>
c0020142:	66 90                	xchg   ax,ax

c0020144 <__udivdi3>:
c0020144:	55                   	push   ebp
c0020145:	57                   	push   edi
c0020146:	56                   	push   esi
c0020147:	53                   	push   ebx
c0020148:	83 ec 1c             	sub    esp,0x1c
c002014b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002014f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020153:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020157:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002015b:	85 d2                	test   edx,edx
c002015d:	75 41                	jne    c00201a0 <__udivdi3+0x5c>
c002015f:	39 f7                	cmp    edi,esi
c0020161:	76 15                	jbe    c0020178 <__udivdi3+0x34>
c0020163:	89 e8                	mov    eax,ebp
c0020165:	89 f2                	mov    edx,esi
c0020167:	f7 f7                	div    edi
c0020169:	31 db                	xor    ebx,ebx
c002016b:	89 da                	mov    edx,ebx
c002016d:	83 c4 1c             	add    esp,0x1c
c0020170:	5b                   	pop    ebx
c0020171:	5e                   	pop    esi
c0020172:	5f                   	pop    edi
c0020173:	5d                   	pop    ebp
c0020174:	c3                   	ret    
c0020175:	8d 76 00             	lea    esi,[esi+0x0]
c0020178:	89 f9                	mov    ecx,edi
c002017a:	85 ff                	test   edi,edi
c002017c:	75 0b                	jne    c0020189 <__udivdi3+0x45>
c002017e:	b8 01 00 00 00       	mov    eax,0x1
c0020183:	31 d2                	xor    edx,edx
c0020185:	f7 f7                	div    edi
c0020187:	89 c1                	mov    ecx,eax
c0020189:	31 d2                	xor    edx,edx
c002018b:	89 f0                	mov    eax,esi
c002018d:	f7 f1                	div    ecx
c002018f:	89 c3                	mov    ebx,eax
c0020191:	89 e8                	mov    eax,ebp
c0020193:	f7 f1                	div    ecx
c0020195:	89 da                	mov    edx,ebx
c0020197:	83 c4 1c             	add    esp,0x1c
c002019a:	5b                   	pop    ebx
c002019b:	5e                   	pop    esi
c002019c:	5f                   	pop    edi
c002019d:	5d                   	pop    ebp
c002019e:	c3                   	ret    
c002019f:	90                   	nop
c00201a0:	39 f2                	cmp    edx,esi
c00201a2:	77 1c                	ja     c00201c0 <__udivdi3+0x7c>
c00201a4:	0f bd da             	bsr    ebx,edx
c00201a7:	83 f3 1f             	xor    ebx,0x1f
c00201aa:	75 24                	jne    c00201d0 <__udivdi3+0x8c>
c00201ac:	39 f2                	cmp    edx,esi
c00201ae:	72 08                	jb     c00201b8 <__udivdi3+0x74>
c00201b0:	39 ef                	cmp    edi,ebp
c00201b2:	0f 87 84 00 00 00    	ja     c002023c <__udivdi3+0xf8>
c00201b8:	b8 01 00 00 00       	mov    eax,0x1
c00201bd:	eb ac                	jmp    c002016b <__udivdi3+0x27>
c00201bf:	90                   	nop
c00201c0:	31 db                	xor    ebx,ebx
c00201c2:	31 c0                	xor    eax,eax
c00201c4:	89 da                	mov    edx,ebx
c00201c6:	83 c4 1c             	add    esp,0x1c
c00201c9:	5b                   	pop    ebx
c00201ca:	5e                   	pop    esi
c00201cb:	5f                   	pop    edi
c00201cc:	5d                   	pop    ebp
c00201cd:	c3                   	ret    
c00201ce:	66 90                	xchg   ax,ax
c00201d0:	b8 20 00 00 00       	mov    eax,0x20
c00201d5:	29 d8                	sub    eax,ebx
c00201d7:	88 d9                	mov    cl,bl
c00201d9:	d3 e2                	shl    edx,cl
c00201db:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00201df:	89 fa                	mov    edx,edi
c00201e1:	88 c1                	mov    cl,al
c00201e3:	d3 ea                	shr    edx,cl
c00201e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00201e9:	09 d1                	or     ecx,edx
c00201eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00201ef:	88 d9                	mov    cl,bl
c00201f1:	d3 e7                	shl    edi,cl
c00201f3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00201f7:	89 f7                	mov    edi,esi
c00201f9:	88 c1                	mov    cl,al
c00201fb:	d3 ef                	shr    edi,cl
c00201fd:	88 d9                	mov    cl,bl
c00201ff:	d3 e6                	shl    esi,cl
c0020201:	89 ea                	mov    edx,ebp
c0020203:	88 c1                	mov    cl,al
c0020205:	d3 ea                	shr    edx,cl
c0020207:	09 d6                	or     esi,edx
c0020209:	89 f0                	mov    eax,esi
c002020b:	89 fa                	mov    edx,edi
c002020d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0020211:	89 d7                	mov    edi,edx
c0020213:	89 c6                	mov    esi,eax
c0020215:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020219:	39 d7                	cmp    edi,edx
c002021b:	72 13                	jb     c0020230 <__udivdi3+0xec>
c002021d:	74 09                	je     c0020228 <__udivdi3+0xe4>
c002021f:	89 f0                	mov    eax,esi
c0020221:	31 db                	xor    ebx,ebx
c0020223:	e9 43 ff ff ff       	jmp    c002016b <__udivdi3+0x27>
c0020228:	88 d9                	mov    cl,bl
c002022a:	d3 e5                	shl    ebp,cl
c002022c:	39 c5                	cmp    ebp,eax
c002022e:	73 ef                	jae    c002021f <__udivdi3+0xdb>
c0020230:	8d 46 ff             	lea    eax,[esi-0x1]
c0020233:	31 db                	xor    ebx,ebx
c0020235:	e9 31 ff ff ff       	jmp    c002016b <__udivdi3+0x27>
c002023a:	66 90                	xchg   ax,ax
c002023c:	31 c0                	xor    eax,eax
c002023e:	e9 28 ff ff ff       	jmp    c002016b <__udivdi3+0x27>
c0020243:	90                   	nop

c0020244 <__umoddi3>:
c0020244:	55                   	push   ebp
c0020245:	57                   	push   edi
c0020246:	56                   	push   esi
c0020247:	53                   	push   ebx
c0020248:	83 ec 1c             	sub    esp,0x1c
c002024b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002024f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020253:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020257:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002025b:	89 da                	mov    edx,ebx
c002025d:	85 c0                	test   eax,eax
c002025f:	75 37                	jne    c0020298 <__umoddi3+0x54>
c0020261:	39 df                	cmp    edi,ebx
c0020263:	76 13                	jbe    c0020278 <__umoddi3+0x34>
c0020265:	89 f0                	mov    eax,esi
c0020267:	f7 f7                	div    edi
c0020269:	89 d0                	mov    eax,edx
c002026b:	31 d2                	xor    edx,edx
c002026d:	83 c4 1c             	add    esp,0x1c
c0020270:	5b                   	pop    ebx
c0020271:	5e                   	pop    esi
c0020272:	5f                   	pop    edi
c0020273:	5d                   	pop    ebp
c0020274:	c3                   	ret    
c0020275:	8d 76 00             	lea    esi,[esi+0x0]
c0020278:	89 fd                	mov    ebp,edi
c002027a:	85 ff                	test   edi,edi
c002027c:	75 0b                	jne    c0020289 <__umoddi3+0x45>
c002027e:	b8 01 00 00 00       	mov    eax,0x1
c0020283:	31 d2                	xor    edx,edx
c0020285:	f7 f7                	div    edi
c0020287:	89 c5                	mov    ebp,eax
c0020289:	89 d8                	mov    eax,ebx
c002028b:	31 d2                	xor    edx,edx
c002028d:	f7 f5                	div    ebp
c002028f:	89 f0                	mov    eax,esi
c0020291:	f7 f5                	div    ebp
c0020293:	89 d0                	mov    eax,edx
c0020295:	eb d4                	jmp    c002026b <__umoddi3+0x27>
c0020297:	90                   	nop
c0020298:	89 f1                	mov    ecx,esi
c002029a:	39 d8                	cmp    eax,ebx
c002029c:	76 0a                	jbe    c00202a8 <__umoddi3+0x64>
c002029e:	89 f0                	mov    eax,esi
c00202a0:	83 c4 1c             	add    esp,0x1c
c00202a3:	5b                   	pop    ebx
c00202a4:	5e                   	pop    esi
c00202a5:	5f                   	pop    edi
c00202a6:	5d                   	pop    ebp
c00202a7:	c3                   	ret    
c00202a8:	0f bd e8             	bsr    ebp,eax
c00202ab:	83 f5 1f             	xor    ebp,0x1f
c00202ae:	75 1c                	jne    c00202cc <__umoddi3+0x88>
c00202b0:	39 d8                	cmp    eax,ebx
c00202b2:	72 04                	jb     c00202b8 <__umoddi3+0x74>
c00202b4:	39 f7                	cmp    edi,esi
c00202b6:	77 08                	ja     c00202c0 <__umoddi3+0x7c>
c00202b8:	89 da                	mov    edx,ebx
c00202ba:	29 fe                	sub    esi,edi
c00202bc:	19 c2                	sbb    edx,eax
c00202be:	89 f1                	mov    ecx,esi
c00202c0:	89 c8                	mov    eax,ecx
c00202c2:	83 c4 1c             	add    esp,0x1c
c00202c5:	5b                   	pop    ebx
c00202c6:	5e                   	pop    esi
c00202c7:	5f                   	pop    edi
c00202c8:	5d                   	pop    ebp
c00202c9:	c3                   	ret    
c00202ca:	66 90                	xchg   ax,ax
c00202cc:	ba 20 00 00 00       	mov    edx,0x20
c00202d1:	29 ea                	sub    edx,ebp
c00202d3:	89 e9                	mov    ecx,ebp
c00202d5:	d3 e0                	shl    eax,cl
c00202d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00202db:	89 f8                	mov    eax,edi
c00202dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00202e1:	88 d1                	mov    cl,dl
c00202e3:	d3 e8                	shr    eax,cl
c00202e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00202e9:	09 c1                	or     ecx,eax
c00202eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00202ef:	89 e9                	mov    ecx,ebp
c00202f1:	d3 e7                	shl    edi,cl
c00202f3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00202f7:	89 d8                	mov    eax,ebx
c00202f9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00202fd:	88 d1                	mov    cl,dl
c00202ff:	d3 e8                	shr    eax,cl
c0020301:	89 c7                	mov    edi,eax
c0020303:	89 e9                	mov    ecx,ebp
c0020305:	d3 e3                	shl    ebx,cl
c0020307:	89 f0                	mov    eax,esi
c0020309:	88 d1                	mov    cl,dl
c002030b:	d3 e8                	shr    eax,cl
c002030d:	09 d8                	or     eax,ebx
c002030f:	89 e9                	mov    ecx,ebp
c0020311:	d3 e6                	shl    esi,cl
c0020313:	89 f3                	mov    ebx,esi
c0020315:	89 fa                	mov    edx,edi
c0020317:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002031b:	89 d1                	mov    ecx,edx
c002031d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020321:	89 c6                	mov    esi,eax
c0020323:	89 d7                	mov    edi,edx
c0020325:	39 d1                	cmp    ecx,edx
c0020327:	72 27                	jb     c0020350 <__umoddi3+0x10c>
c0020329:	74 21                	je     c002034c <__umoddi3+0x108>
c002032b:	89 ca                	mov    edx,ecx
c002032d:	29 f3                	sub    ebx,esi
c002032f:	19 fa                	sbb    edx,edi
c0020331:	89 d0                	mov    eax,edx
c0020333:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0020337:	d3 e0                	shl    eax,cl
c0020339:	89 e9                	mov    ecx,ebp
c002033b:	d3 eb                	shr    ebx,cl
c002033d:	09 d8                	or     eax,ebx
c002033f:	d3 ea                	shr    edx,cl
c0020341:	83 c4 1c             	add    esp,0x1c
c0020344:	5b                   	pop    ebx
c0020345:	5e                   	pop    esi
c0020346:	5f                   	pop    edi
c0020347:	5d                   	pop    ebp
c0020348:	c3                   	ret    
c0020349:	8d 76 00             	lea    esi,[esi+0x0]
c002034c:	39 c3                	cmp    ebx,eax
c002034e:	73 db                	jae    c002032b <__umoddi3+0xe7>
c0020350:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0020354:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0020358:	89 d7                	mov    edi,edx
c002035a:	89 c6                	mov    esi,eax
c002035c:	eb cd                	jmp    c002032b <__umoddi3+0xe7>

Disassembly of section .init:

c002035e <_init>:
c002035e:	55                   	push   ebp
c002035f:	89 e5                	mov    ebp,esp
c0020361:	e8 8e fd fd ff       	call   c00000f4 <frame_dummy>
c0020366:	e8 e5 fa ff ff       	call   c001fe50 <__do_global_ctors_aux>
c002036b:	5d                   	pop    ebp
c002036c:	c3                   	ret    

Disassembly of section .fini:

c002036d <_fini>:
c002036d:	55                   	push   ebp
c002036e:	89 e5                	mov    ebp,esp
c0020370:	e8 0f fd fd ff       	call   c0000084 <__do_global_dtors_aux>
c0020375:	5d                   	pop    ebp
c0020376:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0020378 <DriverlessDevice::~DriverlessDevice()>:
c0020378:	ba 20 1d 02 c0       	mov    edx,0xc0021d20
c002037d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020381:	89 10                	mov    DWORD PTR [eax],edx
c0020383:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020387:	50                   	push   eax
c0020388:	e8 d7 8b fe ff       	call   c0008f64 <Device::~Device()>
c002038d:	83 c4 04             	add    esp,0x4
c0020390:	90                   	nop
c0020391:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0020392 <DriverlessDevice::~DriverlessDevice()>:
c0020392:	83 ec 0c             	sub    esp,0xc
c0020395:	83 ec 0c             	sub    esp,0xc
c0020398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002039c:	e8 d7 ff ff ff       	call   c0020378 <DriverlessDevice::~DriverlessDevice()>
c00203a1:	83 c4 10             	add    esp,0x10
c00203a4:	83 ec 08             	sub    esp,0x8
c00203a7:	68 58 01 00 00       	push   0x158
c00203ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203b0:	e8 9f c3 fe ff       	call   c000c754 <operator delete(void*, unsigned long)>
c00203b5:	83 c4 10             	add    esp,0x10
c00203b8:	83 c4 0c             	add    esp,0xc
c00203bb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00203bc <LinkedList<Device>::addElement(Device*)>:
c00203bc:	83 ec 0c             	sub    esp,0xc
c00203bf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00203c4:	75 10                	jne    c00203d6 <LinkedList<Device>::addElement(Device*)+0x1a>
c00203c6:	83 ec 0c             	sub    esp,0xc
c00203c9:	68 b4 1c 02 c0       	push   0xc0021cb4
c00203ce:	e8 c3 e9 fe ff       	call   c000ed96 <KePanic(char const*)>
c00203d3:	83 c4 10             	add    esp,0x10
c00203d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203da:	8b 00                	mov    eax,DWORD PTR [eax]
c00203dc:	85 c0                	test   eax,eax
c00203de:	74 3a                	je     c002041a <LinkedList<Device>::addElement(Device*)+0x5e>
c00203e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00203e7:	85 c0                	test   eax,eax
c00203e9:	74 2f                	je     c002041a <LinkedList<Device>::addElement(Device*)+0x5e>
c00203eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00203f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00203f6:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00203fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020400:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020404:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002040b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002040e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0020418:	eb 68                	jmp    c0020482 <LinkedList<Device>::addElement(Device*)+0xc6>
c002041a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002041e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020420:	85 c0                	test   eax,eax
c0020422:	75 4e                	jne    c0020472 <LinkedList<Device>::addElement(Device*)+0xb6>
c0020424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020428:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002042b:	85 c0                	test   eax,eax
c002042d:	75 43                	jne    c0020472 <LinkedList<Device>::addElement(Device*)+0xb6>
c002042f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020433:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020437:	89 10                	mov    DWORD PTR [eax],edx
c0020439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002043d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020441:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020448:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002044b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0020455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020459:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002045c:	85 c0                	test   eax,eax
c002045e:	74 22                	je     c0020482 <LinkedList<Device>::addElement(Device*)+0xc6>
c0020460:	83 ec 0c             	sub    esp,0xc
c0020463:	68 d6 1c 02 c0       	push   0xc0021cd6
c0020468:	e8 29 e9 fe ff       	call   c000ed96 <KePanic(char const*)>
c002046d:	83 c4 10             	add    esp,0x10
c0020470:	eb 10                	jmp    c0020482 <LinkedList<Device>::addElement(Device*)+0xc6>
c0020472:	83 ec 0c             	sub    esp,0xc
c0020475:	68 e0 1c 02 c0       	push   0xc0021ce0
c002047a:	e8 17 e9 fe ff       	call   c000ed96 <KePanic(char const*)>
c002047f:	83 c4 10             	add    esp,0x10
c0020482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020486:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020489:	8d 50 01             	lea    edx,[eax+0x1]
c002048c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020490:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020493:	90                   	nop
c0020494:	83 c4 0c             	add    esp,0xc
c0020497:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0020498 <LinkedList<Device>::LinkedList()>:
c0020498:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002049c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00204a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00204a6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00204ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00204b1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00204b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00204bc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00204c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00204c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00204cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00204d1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00204d8:	90                   	nop
c00204d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00204dc <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00204dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00204e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00204e2:	85 c0                	test   eax,eax
c00204e4:	75 0e                	jne    c00204f4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00204e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00204ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00204ed:	85 c0                	test   eax,eax
c00204ef:	75 03                	jne    c00204f4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00204f1:	b0 01                	mov    al,0x1
c00204f3:	c3                   	ret    
c00204f4:	b0 00                	mov    al,0x0
c00204f6:	90                   	nop
c00204f7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00204f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00204f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00204fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00204fe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0020500 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0020500:	83 ec 0c             	sub    esp,0xc
c0020503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020507:	8b 00                	mov    eax,DWORD PTR [eax]
c0020509:	85 c0                	test   eax,eax
c002050b:	75 17                	jne    c0020524 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002050d:	83 ec 0c             	sub    esp,0xc
c0020510:	68 50 1f 02 c0       	push   0xc0021f50
c0020515:	e8 7c e8 fe ff       	call   c000ed96 <KePanic(char const*)>
c002051a:	83 c4 10             	add    esp,0x10
c002051d:	e9 96 00 00 00       	jmp    c00205b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0020522:	66 90                	xchg   ax,ax
c0020524:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020528:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002052b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002052e:	85 c0                	test   eax,eax
c0020530:	0f 95 c0             	setne  al
c0020533:	0f b6 c0             	movzx  eax,al
c0020536:	85 c0                	test   eax,eax
c0020538:	74 12                	je     c002054c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002053a:	83 ec 0c             	sub    esp,0xc
c002053d:	68 9b 1f 02 c0       	push   0xc0021f9b
c0020542:	e8 4f e8 fe ff       	call   c000ed96 <KePanic(char const*)>
c0020547:	83 c4 10             	add    esp,0x10
c002054a:	66 90                	xchg   ax,ax
c002054c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020550:	8b 00                	mov    eax,DWORD PTR [eax]
c0020552:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020555:	85 c0                	test   eax,eax
c0020557:	0f 94 c0             	sete   al
c002055a:	0f b6 c0             	movzx  eax,al
c002055d:	85 c0                	test   eax,eax
c002055f:	74 33                	je     c0020594 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0020561:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020565:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002056b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002056f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002057a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002057d:	83 f8 01             	cmp    eax,0x1
c0020580:	74 22                	je     c00205a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0020582:	83 ec 0c             	sub    esp,0xc
c0020585:	68 74 1f 02 c0       	push   0xc0021f74
c002058a:	e8 07 e8 fe ff       	call   c000ed96 <KePanic(char const*)>
c002058f:	83 c4 10             	add    esp,0x10
c0020592:	eb 10                	jmp    c00205a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0020594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020598:	8b 00                	mov    eax,DWORD PTR [eax]
c002059a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002059d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205a1:	89 10                	mov    DWORD PTR [eax],edx
c00205a3:	90                   	nop
c00205a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00205ab:	8d 50 ff             	lea    edx,[eax-0x1]
c00205ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205b2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00205b5:	8d 76 00             	lea    esi,[esi+0x0]
c00205b8:	83 c4 0c             	add    esp,0xc
c00205bb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00205bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00205bc:	83 ec 0c             	sub    esp,0xc
c00205bf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00205c4:	75 12                	jne    c00205d8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c00205c6:	83 ec 0c             	sub    esp,0xc
c00205c9:	68 b4 1c 02 c0       	push   0xc0021cb4
c00205ce:	e8 c3 e7 fe ff       	call   c000ed96 <KePanic(char const*)>
c00205d3:	83 c4 10             	add    esp,0x10
c00205d6:	66 90                	xchg   ax,ax
c00205d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00205de:	85 c0                	test   eax,eax
c00205e0:	74 36                	je     c0020618 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00205e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00205e9:	85 c0                	test   eax,eax
c00205eb:	74 2b                	je     c0020618 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00205ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00205f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00205f8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00205fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205ff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020603:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002060a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002060d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020614:	eb 6a                	jmp    c0020680 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0020616:	66 90                	xchg   ax,ax
c0020618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002061c:	8b 00                	mov    eax,DWORD PTR [eax]
c002061e:	85 c0                	test   eax,eax
c0020620:	75 4e                	jne    c0020670 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0020622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020626:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020629:	85 c0                	test   eax,eax
c002062b:	75 43                	jne    c0020670 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002062d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020631:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020635:	89 10                	mov    DWORD PTR [eax],edx
c0020637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002063b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002063f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020646:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020649:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020654:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020657:	85 c0                	test   eax,eax
c0020659:	74 25                	je     c0020680 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002065b:	83 ec 0c             	sub    esp,0xc
c002065e:	68 d6 1c 02 c0       	push   0xc0021cd6
c0020663:	e8 2e e7 fe ff       	call   c000ed96 <KePanic(char const*)>
c0020668:	83 c4 10             	add    esp,0x10
c002066b:	eb 13                	jmp    c0020680 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002066d:	8d 76 00             	lea    esi,[esi+0x0]
c0020670:	83 ec 0c             	sub    esp,0xc
c0020673:	68 e0 1c 02 c0       	push   0xc0021ce0
c0020678:	e8 19 e7 fe ff       	call   c000ed96 <KePanic(char const*)>
c002067d:	83 c4 10             	add    esp,0x10
c0020680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020684:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020687:	8d 50 01             	lea    edx,[eax+0x1]
c002068a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002068e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020691:	90                   	nop
c0020692:	83 c4 0c             	add    esp,0xc
c0020695:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0020698 <ACPI::~ACPI()>:
c0020698:	83 ec 0c             	sub    esp,0xc
c002069b:	ba f8 23 02 c0       	mov    edx,0xc00223f8
c00206a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206a4:	89 10                	mov    DWORD PTR [eax],edx
c00206a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206aa:	83 ec 0c             	sub    esp,0xc
c00206ad:	50                   	push   eax
c00206ae:	e8 b1 88 fe ff       	call   c0008f64 <Device::~Device()>
c00206b3:	83 c4 10             	add    esp,0x10
c00206b6:	90                   	nop
c00206b7:	83 c4 0c             	add    esp,0xc
c00206ba:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00206bc <ACPI::~ACPI()>:
c00206bc:	83 ec 0c             	sub    esp,0xc
c00206bf:	83 ec 0c             	sub    esp,0xc
c00206c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206c6:	e8 cd ff ff ff       	call   c0020698 <ACPI::~ACPI()>
c00206cb:	83 c4 10             	add    esp,0x10
c00206ce:	83 ec 08             	sub    esp,0x8
c00206d1:	68 64 12 00 00       	push   0x1264
c00206d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206da:	e8 75 c0 fe ff       	call   c000c754 <operator delete(void*, unsigned long)>
c00206df:	83 c4 10             	add    esp,0x10
c00206e2:	83 c4 0c             	add    esp,0xc
c00206e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00206e8 <LinkedList<Device>::~LinkedList()>:
c00206e8:	90                   	nop
c00206e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00206ec <LinkedList<Device>::isEmpty()>:
c00206ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00206f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00206f2:	85 c0                	test   eax,eax
c00206f4:	75 0e                	jne    c0020704 <LinkedList<Device>::isEmpty()+0x18>
c00206f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00206fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00206fd:	85 c0                	test   eax,eax
c00206ff:	75 03                	jne    c0020704 <LinkedList<Device>::isEmpty()+0x18>
c0020701:	b0 01                	mov    al,0x1
c0020703:	c3                   	ret    
c0020704:	b0 00                	mov    al,0x0
c0020706:	90                   	nop
c0020707:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0020708 <LinkedList<Device>::getFirstElement()>:
c0020708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002070c:	8b 00                	mov    eax,DWORD PTR [eax]
c002070e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0020710 <LinkedList<Device>::removeFirst()>:
c0020710:	83 ec 0c             	sub    esp,0xc
c0020713:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020717:	8b 00                	mov    eax,DWORD PTR [eax]
c0020719:	85 c0                	test   eax,eax
c002071b:	75 17                	jne    c0020734 <LinkedList<Device>::removeFirst()+0x24>
c002071d:	83 ec 0c             	sub    esp,0xc
c0020720:	68 50 1f 02 c0       	push   0xc0021f50
c0020725:	e8 6c e6 fe ff       	call   c000ed96 <KePanic(char const*)>
c002072a:	83 c4 10             	add    esp,0x10
c002072d:	e9 92 00 00 00       	jmp    c00207c4 <LinkedList<Device>::removeFirst()+0xb4>
c0020732:	66 90                	xchg   ax,ax
c0020734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020738:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002073b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020741:	85 c0                	test   eax,eax
c0020743:	74 13                	je     c0020758 <LinkedList<Device>::removeFirst()+0x48>
c0020745:	83 ec 0c             	sub    esp,0xc
c0020748:	68 9b 1f 02 c0       	push   0xc0021f9b
c002074d:	e8 44 e6 fe ff       	call   c000ed96 <KePanic(char const*)>
c0020752:	83 c4 10             	add    esp,0x10
c0020755:	8d 76 00             	lea    esi,[esi+0x0]
c0020758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002075c:	8b 00                	mov    eax,DWORD PTR [eax]
c002075e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020764:	85 c0                	test   eax,eax
c0020766:	75 34                	jne    c002079c <LinkedList<Device>::removeFirst()+0x8c>
c0020768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002076c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020776:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002077d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020781:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020784:	83 f8 01             	cmp    eax,0x1
c0020787:	74 27                	je     c00207b0 <LinkedList<Device>::removeFirst()+0xa0>
c0020789:	83 ec 0c             	sub    esp,0xc
c002078c:	68 74 1f 02 c0       	push   0xc0021f74
c0020791:	e8 00 e6 fe ff       	call   c000ed96 <KePanic(char const*)>
c0020796:	83 c4 10             	add    esp,0x10
c0020799:	eb 15                	jmp    c00207b0 <LinkedList<Device>::removeFirst()+0xa0>
c002079b:	90                   	nop
c002079c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00207a2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00207a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207ac:	89 10                	mov    DWORD PTR [eax],edx
c00207ae:	66 90                	xchg   ax,ax
c00207b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00207b7:	8d 50 ff             	lea    edx,[eax-0x1]
c00207ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00207c1:	8d 76 00             	lea    esi,[esi+0x0]
c00207c4:	83 c4 0c             	add    esp,0xc
c00207c7:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00207c8 <Computer::~Computer()>:
c00207c8:	83 ec 0c             	sub    esp,0xc
c00207cb:	ba 98 26 02 c0       	mov    edx,0xc0022698
c00207d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207d4:	89 10                	mov    DWORD PTR [eax],edx
c00207d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207da:	83 ec 0c             	sub    esp,0xc
c00207dd:	50                   	push   eax
c00207de:	e8 81 87 fe ff       	call   c0008f64 <Device::~Device()>
c00207e3:	83 c4 10             	add    esp,0x10
c00207e6:	90                   	nop
c00207e7:	83 c4 0c             	add    esp,0xc
c00207ea:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00207ec <Computer::~Computer()>:
c00207ec:	83 ec 0c             	sub    esp,0xc
c00207ef:	83 ec 0c             	sub    esp,0xc
c00207f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207f6:	e8 cd ff ff ff       	call   c00207c8 <Computer::~Computer()>
c00207fb:	83 c4 10             	add    esp,0x10
c00207fe:	83 ec 08             	sub    esp,0x8
c0020801:	68 6c 01 00 00       	push   0x16c
c0020806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002080a:	e8 45 bf fe ff       	call   c000c754 <operator delete(void*, unsigned long)>
c002080f:	83 c4 10             	add    esp,0x10
c0020812:	83 c4 0c             	add    esp,0xc
c0020815:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0020816 <idleCommon()>:
c0020816:	83 ec 0c             	sub    esp,0xc
c0020819:	fa                   	cli    
c002081a:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c0020820:	e8 d7 4f ff ff       	call   c00157fc <schedule()>
c0020825:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c002082c:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0020833:	75 01                	jne    c0020836 <idleCommon()+0x20>
c0020835:	fb                   	sti    
c0020836:	83 c4 0c             	add    esp,0xc
c0020839:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002083a <LinkedList<UnixFile>::~LinkedList()>:
c002083a:	90                   	nop
c002083b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002083c <LinkedList<UnixFile>::LinkedList()>:
c002083c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020840:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020846:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002084a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020851:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020855:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002085c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020860:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020866:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002086a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020871:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020875:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002087c:	90                   	nop
c002087d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002087e <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002087e:	83 ec 0c             	sub    esp,0xc
c0020881:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020886:	75 10                	jne    c0020898 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0020888:	83 ec 0c             	sub    esp,0xc
c002088b:	68 b4 1c 02 c0       	push   0xc0021cb4
c0020890:	e8 01 e5 fe ff       	call   c000ed96 <KePanic(char const*)>
c0020895:	83 c4 10             	add    esp,0x10
c0020898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002089c:	8b 00                	mov    eax,DWORD PTR [eax]
c002089e:	85 c0                	test   eax,eax
c00208a0:	74 34                	je     c00208d6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00208a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00208a9:	85 c0                	test   eax,eax
c00208ab:	74 29                	je     c00208d6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00208ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00208b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00208b8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00208bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00208c3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00208c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00208cd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00208d4:	eb 65                	jmp    c002093b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00208d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208da:	8b 00                	mov    eax,DWORD PTR [eax]
c00208dc:	85 c0                	test   eax,eax
c00208de:	75 4b                	jne    c002092b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00208e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00208e7:	85 c0                	test   eax,eax
c00208e9:	75 40                	jne    c002092b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00208eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208ef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00208f3:	89 10                	mov    DWORD PTR [eax],edx
c00208f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00208fd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020904:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020907:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002090e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020912:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020915:	85 c0                	test   eax,eax
c0020917:	74 22                	je     c002093b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0020919:	83 ec 0c             	sub    esp,0xc
c002091c:	68 d6 1c 02 c0       	push   0xc0021cd6
c0020921:	e8 70 e4 fe ff       	call   c000ed96 <KePanic(char const*)>
c0020926:	83 c4 10             	add    esp,0x10
c0020929:	eb 10                	jmp    c002093b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002092b:	83 ec 0c             	sub    esp,0xc
c002092e:	68 e0 1c 02 c0       	push   0xc0021ce0
c0020933:	e8 5e e4 fe ff       	call   c000ed96 <KePanic(char const*)>
c0020938:	83 c4 10             	add    esp,0x10
c002093b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002093f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020942:	8d 50 01             	lea    edx,[eax+0x1]
c0020945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020949:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002094c:	90                   	nop
c002094d:	83 c4 0c             	add    esp,0xc
c0020950:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0020952 <LinkedList<UnixFile>::getFirstElement()>:
c0020952:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020956:	8b 00                	mov    eax,DWORD PTR [eax]
c0020958:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002095a <LinkedList<UnixFile>::removeFirst()>:
c002095a:	83 ec 0c             	sub    esp,0xc
c002095d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020961:	8b 00                	mov    eax,DWORD PTR [eax]
c0020963:	85 c0                	test   eax,eax
c0020965:	75 12                	jne    c0020979 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0020967:	83 ec 0c             	sub    esp,0xc
c002096a:	68 50 1f 02 c0       	push   0xc0021f50
c002096f:	e8 22 e4 fe ff       	call   c000ed96 <KePanic(char const*)>
c0020974:	83 c4 10             	add    esp,0x10
c0020977:	eb 7e                	jmp    c00209f7 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0020979:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002097d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020980:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020983:	85 c0                	test   eax,eax
c0020985:	74 10                	je     c0020997 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0020987:	83 ec 0c             	sub    esp,0xc
c002098a:	68 9b 1f 02 c0       	push   0xc0021f9b
c002098f:	e8 02 e4 fe ff       	call   c000ed96 <KePanic(char const*)>
c0020994:	83 c4 10             	add    esp,0x10
c0020997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002099b:	8b 00                	mov    eax,DWORD PTR [eax]
c002099d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00209a0:	85 c0                	test   eax,eax
c00209a2:	75 33                	jne    c00209d7 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00209a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209a8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00209ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209b2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00209b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209bd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00209c0:	83 f8 01             	cmp    eax,0x1
c00209c3:	74 21                	je     c00209e6 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00209c5:	83 ec 0c             	sub    esp,0xc
c00209c8:	68 74 1f 02 c0       	push   0xc0021f74
c00209cd:	e8 c4 e3 fe ff       	call   c000ed96 <KePanic(char const*)>
c00209d2:	83 c4 10             	add    esp,0x10
c00209d5:	eb 0f                	jmp    c00209e6 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00209d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209db:	8b 00                	mov    eax,DWORD PTR [eax]
c00209dd:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00209e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209e4:	89 10                	mov    DWORD PTR [eax],edx
c00209e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00209ed:	8d 50 ff             	lea    edx,[eax-0x1]
c00209f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209f4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00209f7:	83 c4 0c             	add    esp,0xc
c00209fa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00209fc <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00209fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a00:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020a03:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0020a04 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0020a04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a08:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020a0b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0020a0c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0020a0c:	90                   	nop
c0020a0d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0020a10 <ThreadControlBlock::ThreadControlBlock()>:
c0020a10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a14:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020a1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a1f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0020a26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a2a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0020a31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a35:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0020a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a40:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0020a47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a4b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0020a4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a53:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0020a57:	90                   	nop
c0020a58:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0020a5c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0020a5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a60:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020a66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a6a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020a71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a75:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020a7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a80:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020a86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a8a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020a91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a95:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020a9c:	90                   	nop
c0020a9d:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0020a9e <CPU::~CPU()>:
c0020a9e:	83 ec 0c             	sub    esp,0xc
c0020aa1:	ba fc 3c 02 c0       	mov    edx,0xc0023cfc
c0020aa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020aaa:	89 10                	mov    DWORD PTR [eax],edx
c0020aac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ab0:	83 ec 0c             	sub    esp,0xc
c0020ab3:	50                   	push   eax
c0020ab4:	e8 ab 84 fe ff       	call   c0008f64 <Device::~Device()>
c0020ab9:	83 c4 10             	add    esp,0x10
c0020abc:	90                   	nop
c0020abd:	83 c4 0c             	add    esp,0xc
c0020ac0:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0020ac2 <CPU::~CPU()>:
c0020ac2:	83 ec 0c             	sub    esp,0xc
c0020ac5:	83 ec 0c             	sub    esp,0xc
c0020ac8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020acc:	e8 cd ff ff ff       	call   c0020a9e <CPU::~CPU()>
c0020ad1:	83 c4 10             	add    esp,0x10
c0020ad4:	83 ec 08             	sub    esp,0x8
c0020ad7:	68 78 11 00 00       	push   0x1178
c0020adc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020ae0:	e8 6f bc fe ff       	call   c000c754 <operator delete(void*, unsigned long)>
c0020ae5:	83 c4 10             	add    esp,0x10
c0020ae8:	83 c4 0c             	add    esp,0xc
c0020aeb:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0020aec <PCI::~PCI()>:
c0020aec:	83 ec 0c             	sub    esp,0xc
c0020aef:	ba 60 42 02 c0       	mov    edx,0xc0024260
c0020af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020af8:	89 10                	mov    DWORD PTR [eax],edx
c0020afa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020afe:	83 ec 0c             	sub    esp,0xc
c0020b01:	50                   	push   eax
c0020b02:	e8 3d 7e fe ff       	call   c0008944 <Bus::~Bus()>
c0020b07:	83 c4 10             	add    esp,0x10
c0020b0a:	90                   	nop
c0020b0b:	83 c4 0c             	add    esp,0xc
c0020b0e:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0020b10 <PCI::~PCI()>:
c0020b10:	83 ec 0c             	sub    esp,0xc
c0020b13:	83 ec 0c             	sub    esp,0xc
c0020b16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b1a:	e8 cd ff ff ff       	call   c0020aec <PCI::~PCI()>
c0020b1f:	83 c4 10             	add    esp,0x10
c0020b22:	83 ec 08             	sub    esp,0x8
c0020b25:	68 5c 01 00 00       	push   0x15c
c0020b2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b2e:	e8 21 bc fe ff       	call   c000c754 <operator delete(void*, unsigned long)>
c0020b33:	83 c4 10             	add    esp,0x10
c0020b36:	83 c4 0c             	add    esp,0xc
c0020b39:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0020b3a <IDE::~IDE()>:
c0020b3a:	83 ec 0c             	sub    esp,0xc
c0020b3d:	ba b0 43 02 c0       	mov    edx,0xc00243b0
c0020b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b46:	89 10                	mov    DWORD PTR [eax],edx
c0020b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b4c:	83 ec 0c             	sub    esp,0xc
c0020b4f:	50                   	push   eax
c0020b50:	e8 9f 88 fe ff       	call   c00093f4 <HardDiskController::~HardDiskController()>
c0020b55:	83 c4 10             	add    esp,0x10
c0020b58:	90                   	nop
c0020b59:	83 c4 0c             	add    esp,0xc
c0020b5c:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0020b5e <IDE::~IDE()>:
c0020b5e:	83 ec 0c             	sub    esp,0xc
c0020b61:	83 ec 0c             	sub    esp,0xc
c0020b64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b68:	e8 cd ff ff ff       	call   c0020b3a <IDE::~IDE()>
c0020b6d:	83 c4 10             	add    esp,0x10
c0020b70:	83 ec 08             	sub    esp,0x8
c0020b73:	68 70 02 00 00       	push   0x270
c0020b78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b7c:	e8 d3 bb fe ff       	call   c000c754 <operator delete(void*, unsigned long)>
c0020b81:	83 c4 10             	add    esp,0x10
c0020b84:	83 c4 0c             	add    esp,0xc
c0020b87:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020b88 <SATABus::~SATABus()>:
c0020b88:	83 ec 0c             	sub    esp,0xc
c0020b8b:	ba 00 44 02 c0       	mov    edx,0xc0024400
c0020b90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b94:	89 10                	mov    DWORD PTR [eax],edx
c0020b96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b9a:	83 ec 0c             	sub    esp,0xc
c0020b9d:	50                   	push   eax
c0020b9e:	e8 51 88 fe ff       	call   c00093f4 <HardDiskController::~HardDiskController()>
c0020ba3:	83 c4 10             	add    esp,0x10
c0020ba6:	90                   	nop
c0020ba7:	83 c4 0c             	add    esp,0xc
c0020baa:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0020bac <SATABus::~SATABus()>:
c0020bac:	83 ec 0c             	sub    esp,0xc
c0020baf:	83 ec 0c             	sub    esp,0xc
c0020bb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020bb6:	e8 cd ff ff ff       	call   c0020b88 <SATABus::~SATABus()>
c0020bbb:	83 c4 10             	add    esp,0x10
c0020bbe:	83 ec 08             	sub    esp,0x8
c0020bc1:	68 64 01 00 00       	push   0x164
c0020bc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020bca:	e8 85 bb fe ff       	call   c000c754 <operator delete(void*, unsigned long)>
c0020bcf:	83 c4 10             	add    esp,0x10
c0020bd2:	83 c4 0c             	add    esp,0xc
c0020bd5:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0020bd6 <ATA::~ATA()>:
c0020bd6:	83 ec 0c             	sub    esp,0xc
c0020bd9:	ba e8 44 02 c0       	mov    edx,0xc00244e8
c0020bde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020be2:	89 10                	mov    DWORD PTR [eax],edx
c0020be4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020be8:	83 ec 0c             	sub    esp,0xc
c0020beb:	50                   	push   eax
c0020bec:	e8 e5 88 fe ff       	call   c00094d6 <PhysicalDisk::~PhysicalDisk()>
c0020bf1:	83 c4 10             	add    esp,0x10
c0020bf4:	90                   	nop
c0020bf5:	83 c4 0c             	add    esp,0xc
c0020bf8:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0020bfa <ATA::~ATA()>:
c0020bfa:	83 ec 0c             	sub    esp,0xc
c0020bfd:	83 ec 0c             	sub    esp,0xc
c0020c00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c04:	e8 cd ff ff ff       	call   c0020bd6 <ATA::~ATA()>
c0020c09:	83 c4 10             	add    esp,0x10
c0020c0c:	83 ec 08             	sub    esp,0x8
c0020c0f:	68 8c 01 00 00       	push   0x18c
c0020c14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c18:	e8 37 bb fe ff       	call   c000c754 <operator delete(void*, unsigned long)>
c0020c1d:	83 c4 10             	add    esp,0x10
c0020c20:	83 c4 0c             	add    esp,0xc
c0020c23:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0020c24 <ATAPI::~ATAPI()>:
c0020c24:	83 ec 0c             	sub    esp,0xc
c0020c27:	ba 30 45 02 c0       	mov    edx,0xc0024530
c0020c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c30:	89 10                	mov    DWORD PTR [eax],edx
c0020c32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c36:	83 ec 0c             	sub    esp,0xc
c0020c39:	50                   	push   eax
c0020c3a:	e8 97 88 fe ff       	call   c00094d6 <PhysicalDisk::~PhysicalDisk()>
c0020c3f:	83 c4 10             	add    esp,0x10
c0020c42:	90                   	nop
c0020c43:	83 c4 0c             	add    esp,0xc
c0020c46:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020c48 <ATAPI::~ATAPI()>:
c0020c48:	83 ec 0c             	sub    esp,0xc
c0020c4b:	83 ec 0c             	sub    esp,0xc
c0020c4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c52:	e8 cd ff ff ff       	call   c0020c24 <ATAPI::~ATAPI()>
c0020c57:	83 c4 10             	add    esp,0x10
c0020c5a:	83 ec 08             	sub    esp,0x8
c0020c5d:	68 84 01 00 00       	push   0x184
c0020c62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c66:	e8 e9 ba fe ff       	call   c000c754 <operator delete(void*, unsigned long)>
c0020c6b:	83 c4 10             	add    esp,0x10
c0020c6e:	83 c4 0c             	add    esp,0xc
c0020c71:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0020c72 <SATA::~SATA()>:
c0020c72:	83 ec 0c             	sub    esp,0xc
c0020c75:	ba f0 45 02 c0       	mov    edx,0xc00245f0
c0020c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c7e:	89 10                	mov    DWORD PTR [eax],edx
c0020c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c84:	83 ec 0c             	sub    esp,0xc
c0020c87:	50                   	push   eax
c0020c88:	e8 49 88 fe ff       	call   c00094d6 <PhysicalDisk::~PhysicalDisk()>
c0020c8d:	83 c4 10             	add    esp,0x10
c0020c90:	90                   	nop
c0020c91:	83 c4 0c             	add    esp,0xc
c0020c94:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020c96 <SATA::~SATA()>:
c0020c96:	83 ec 0c             	sub    esp,0xc
c0020c99:	83 ec 0c             	sub    esp,0xc
c0020c9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020ca0:	e8 cd ff ff ff       	call   c0020c72 <SATA::~SATA()>
c0020ca5:	83 c4 10             	add    esp,0x10
c0020ca8:	83 ec 08             	sub    esp,0x8
c0020cab:	68 7c 01 00 00       	push   0x17c
c0020cb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020cb4:	e8 9b ba fe ff       	call   c000c754 <operator delete(void*, unsigned long)>
c0020cb9:	83 c4 10             	add    esp,0x10
c0020cbc:	83 c4 0c             	add    esp,0xc
c0020cbf:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0020cc0 <SATAPI::~SATAPI()>:
c0020cc0:	83 ec 0c             	sub    esp,0xc
c0020cc3:	ba 14 47 02 c0       	mov    edx,0xc0024714
c0020cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ccc:	89 10                	mov    DWORD PTR [eax],edx
c0020cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020cd2:	83 ec 0c             	sub    esp,0xc
c0020cd5:	50                   	push   eax
c0020cd6:	e8 fb 87 fe ff       	call   c00094d6 <PhysicalDisk::~PhysicalDisk()>
c0020cdb:	83 c4 10             	add    esp,0x10
c0020cde:	90                   	nop
c0020cdf:	83 c4 0c             	add    esp,0xc
c0020ce2:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0020ce4 <SATAPI::~SATAPI()>:
c0020ce4:	83 ec 0c             	sub    esp,0xc
c0020ce7:	83 ec 0c             	sub    esp,0xc
c0020cea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020cee:	e8 cd ff ff ff       	call   c0020cc0 <SATAPI::~SATAPI()>
c0020cf3:	83 c4 10             	add    esp,0x10
c0020cf6:	83 ec 08             	sub    esp,0x8
c0020cf9:	68 84 01 00 00       	push   0x184
c0020cfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d02:	e8 4d ba fe ff       	call   c000c754 <operator delete(void*, unsigned long)>
c0020d07:	83 c4 10             	add    esp,0x10
c0020d0a:	83 c4 0c             	add    esp,0xc
c0020d0d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020d0e <IOAPIC::~IOAPIC()>:
c0020d0e:	83 ec 0c             	sub    esp,0xc
c0020d11:	ba 74 47 02 c0       	mov    edx,0xc0024774
c0020d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d1a:	89 10                	mov    DWORD PTR [eax],edx
c0020d1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d20:	83 ec 0c             	sub    esp,0xc
c0020d23:	50                   	push   eax
c0020d24:	e8 3b 82 fe ff       	call   c0008f64 <Device::~Device()>
c0020d29:	83 c4 10             	add    esp,0x10
c0020d2c:	90                   	nop
c0020d2d:	83 c4 0c             	add    esp,0xc
c0020d30:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0020d32 <IOAPIC::~IOAPIC()>:
c0020d32:	83 ec 0c             	sub    esp,0xc
c0020d35:	83 ec 0c             	sub    esp,0xc
c0020d38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d3c:	e8 cd ff ff ff       	call   c0020d0e <IOAPIC::~IOAPIC()>
c0020d41:	83 c4 10             	add    esp,0x10
c0020d44:	83 ec 08             	sub    esp,0x8
c0020d47:	68 68 01 00 00       	push   0x168
c0020d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d50:	e8 ff b9 fe ff       	call   c000c754 <operator delete(void*, unsigned long)>
c0020d55:	83 c4 10             	add    esp,0x10
c0020d58:	83 c4 0c             	add    esp,0xc
c0020d5b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020d5c <APICTimer::~APICTimer()>:
c0020d5c:	83 ec 0c             	sub    esp,0xc
c0020d5f:	ba bc 47 02 c0       	mov    edx,0xc00247bc
c0020d64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d68:	89 10                	mov    DWORD PTR [eax],edx
c0020d6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d6e:	83 ec 0c             	sub    esp,0xc
c0020d71:	50                   	push   eax
c0020d72:	e8 2d 99 fe ff       	call   c000a6a4 <Timer::~Timer()>
c0020d77:	83 c4 10             	add    esp,0x10
c0020d7a:	90                   	nop
c0020d7b:	83 c4 0c             	add    esp,0xc
c0020d7e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0020d80 <APICTimer::~APICTimer()>:
c0020d80:	83 ec 0c             	sub    esp,0xc
c0020d83:	83 ec 0c             	sub    esp,0xc
c0020d86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d8a:	e8 cd ff ff ff       	call   c0020d5c <APICTimer::~APICTimer()>
c0020d8f:	83 c4 10             	add    esp,0x10
c0020d92:	83 ec 08             	sub    esp,0x8
c0020d95:	68 60 01 00 00       	push   0x160
c0020d9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d9e:	e8 b1 b9 fe ff       	call   c000c754 <operator delete(void*, unsigned long)>
c0020da3:	83 c4 10             	add    esp,0x10
c0020da6:	83 c4 0c             	add    esp,0xc
c0020da9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020dac <PIT::~PIT()>:
c0020dac:	83 ec 0c             	sub    esp,0xc
c0020daf:	ba 0c 48 02 c0       	mov    edx,0xc002480c
c0020db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020db8:	89 10                	mov    DWORD PTR [eax],edx
c0020dba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020dbe:	83 ec 0c             	sub    esp,0xc
c0020dc1:	50                   	push   eax
c0020dc2:	e8 dd 98 fe ff       	call   c000a6a4 <Timer::~Timer()>
c0020dc7:	83 c4 10             	add    esp,0x10
c0020dca:	90                   	nop
c0020dcb:	83 c4 0c             	add    esp,0xc
c0020dce:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0020dd0 <PIT::~PIT()>:
c0020dd0:	83 ec 0c             	sub    esp,0xc
c0020dd3:	83 ec 0c             	sub    esp,0xc
c0020dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020dda:	e8 cd ff ff ff       	call   c0020dac <PIT::~PIT()>
c0020ddf:	83 c4 10             	add    esp,0x10
c0020de2:	83 ec 08             	sub    esp,0x8
c0020de5:	68 5c 01 00 00       	push   0x15c
c0020dea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020dee:	e8 61 b9 fe ff       	call   c000c754 <operator delete(void*, unsigned long)>
c0020df3:	83 c4 10             	add    esp,0x10
c0020df6:	83 c4 0c             	add    esp,0xc
c0020df9:	c3                   	ret    

Disassembly of section userkernel:

c0026000 <KiDefaultSignalHandlerAbort(int)>:
c0026000:	57                   	push   edi
c0026001:	b9 07 00 00 00       	mov    ecx,0x7
c0026006:	56                   	push   esi
c0026007:	be bf 2a 02 c0       	mov    esi,0xc0022abf
c002600c:	83 ec 24             	sub    esp,0x24
c002600f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0026013:	fc                   	cld    
c0026014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0026016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002601a:	50                   	push   eax
c002601b:	6a 00                	push   0x0
c002601d:	6a 38                	push   0x38
c002601f:	6a 01                	push   0x1
c0026021:	e8 2c 00 00 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0026026:	83 c4 34             	add    esp,0x34
c0026029:	5e                   	pop    esi
c002602a:	5f                   	pop    edi
c002602b:	c3                   	ret    

c002602c <KiDefaultSignalHandlerTerminate(int)>:
c002602c:	57                   	push   edi
c002602d:	b9 08 00 00 00       	mov    ecx,0x8
c0026032:	56                   	push   esi
c0026033:	be db 2a 02 c0       	mov    esi,0xc0022adb
c0026038:	83 ec 24             	sub    esp,0x24
c002603b:	89 e7                	mov    edi,esp
c002603d:	fc                   	cld    
c002603e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0026040:	54                   	push   esp
c0026041:	6a 00                	push   0x0
c0026043:	6a 37                	push   0x37
c0026045:	6a 01                	push   0x1
c0026047:	e8 06 00 00 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002604c:	83 c4 34             	add    esp,0x34
c002604f:	5e                   	pop    esi
c0026050:	5f                   	pop    edi
c0026051:	c3                   	ret    

c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0026052:	53                   	push   ebx
c0026053:	83 ec 10             	sub    esp,0x10
c0026056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002605a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002605e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0026062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0026066:	cd 60                	int    0x60
c0026068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002606c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026078:	83 c4 10             	add    esp,0x10
c002607b:	5b                   	pop    ebx
c002607c:	c3                   	ret    

Disassembly of section align_previous:

c0027000 <DO_NOT_DELETE()>:
c0027000:	c3                   	ret    
