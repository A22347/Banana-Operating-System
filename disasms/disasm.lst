
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f7 fe 00 00       	call   c000ff17 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 08 73 02 c0       	mov    eax,0xc0027308
c0000025:	3d 08 73 02 c0       	cmp    eax,0xc0027308
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 08 73 02 c0       	push   0xc0027308
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 08 73 02 c0       	mov    eax,0xc0027308
c0000051:	2d 08 73 02 c0       	sub    eax,0xc0027308
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 08 73 02 c0       	push   0xc0027308
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 90 02 c0 00 	cmp    BYTE PTR ds:0xc00290c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 70 29 02 c0       	mov    ebx,0xc0022970
c0000097:	81 eb 6c 29 02 c0    	sub    ebx,0xc002296c
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 6c 29 02 c0       	mov    esi,0xc002296c
c00000a6:	a1 c4 90 02 c0       	mov    eax,ds:0xc00290c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 90 02 c0       	mov    ds:0xc00290c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 90 02 c0       	mov    eax,ds:0xc00290c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 08 73 02 c0       	push   0xc0027308
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 90 02 c0 01 	mov    BYTE PTR ds:0xc00290c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 90 02 c0       	push   0xc00290c8
c0000108:	68 08 73 02 c0       	push   0xc0027308
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 ff 66 01 00       	call   c00169ac <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 6c 45 01 00       	call   c0014831 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 dd 66 01 00       	call   c00169ac <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 3e 6c 01 00       	call   c0016f2c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 ad 71 01 00       	call   c00174a4 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 e0 f0 02 c0 	lgdtd  ds:0xc002f0e0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 ba f0 00 00       	jmp    c000f439 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 90 02 c0       	mov    ds:0xc00290e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 90 02 c0    	mov    DWORD PTR ds:0xc00290e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 90 02 c0    	mov    ebx,DWORD PTR ds:0xc00290e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 80 29 02 c0 02 	test   BYTE PTR [edx-0x3ffdd680],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 80 29 02 c0 01 	test   BYTE PTR [edx-0x3ffdd680],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 80 29 02 c0 08 	test   BYTE PTR [edx-0x3ffdd680],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 80 29 02 c0 04 	test   BYTE PTR [ecx-0x3ffdd680],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 80 29 02 c0 01 	test   BYTE PTR [edx-0x3ffdd680],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d5a:	85 c9                	test   ecx,ecx
c0000d5c:	0f 84 01 01 00 00    	je     c0000e63 <dlfree+0x110>
c0000d62:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d65:	8b 1d 00 91 02 c0    	mov    ebx,DWORD PTR ds:0xc0029100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c3                	cmp    ebx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 cb 03             	or     ebx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 1d 00 91 02 c0    	mov    DWORD PTR ds:0xc0029100,ebx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 1c 85 04 91 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd6efc]
c0000d8d:	89 19                	mov    DWORD PTR [ecx],ebx
c0000d8f:	89 14 85 04 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6efc],edx
c0000d96:	e9 c8 00 00 00       	jmp    c0000e63 <dlfree+0x110>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 cb 01             	or     ebx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 1d 00 91 02 c0    	mov    DWORD PTR ds:0xc0029100,ebx
c0000db0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000db3:	83 e3 fc             	and    ebx,0xfffffffc
c0000db6:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000dbf:	29 ca                	sub    edx,ecx
c0000dc1:	01 c8                	add    eax,ecx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dc9:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dcc:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000dcf:	39 35 2c 91 02 c0    	cmp    DWORD PTR ds:0xc002912c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000ddb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000dde:	80 e1 01             	and    cl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000de9:	01 d8                	add    eax,ebx
c0000deb:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dee:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000df1:	8b 0d 3c 91 02 c0    	mov    ecx,DWORD PTR ds:0xc002913c
c0000df7:	c7 42 0c 34 91 02 c0 	mov    DWORD PTR [edx+0xc],0xc0029134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 91 02 c0    	mov    DWORD PTR ds:0xc002913c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 d8                	add    eax,ebx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 91 02 c0    	mov    DWORD PTR ds:0xc002912c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 35                	jbe    c0000e63 <dlfree+0x110>
c0000e2e:	f6 05 00 91 02 c0 02 	test   BYTE PTR ds:0xc0029100,0x2
c0000e35:	74 2c                	je     c0000e63 <dlfree+0x110>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e47:	01 c8                	add    eax,ecx
c0000e49:	53                   	push   ebx
c0000e4a:	29 ca                	sub    edx,ecx
c0000e4c:	53                   	push   ebx
c0000e4d:	ff 0d 50 94 02 c0    	dec    DWORD PTR ds:0xc0029450
c0000e53:	50                   	push   eax
c0000e54:	29 05 64 94 02 c0    	sub    DWORD PTR ds:0xc0029464,eax
c0000e5a:	52                   	push   edx
c0000e5b:	e8 05 ee 00 00       	call   c000fc65 <munmap>
c0000e60:	83 c4 10             	add    esp,0x10
c0000e63:	5b                   	pop    ebx
c0000e64:	5e                   	pop    esi
c0000e65:	5f                   	pop    edi
c0000e66:	c3                   	ret    

c0000e67 <sYSMALLOc>:
c0000e67:	55                   	push   ebp
c0000e68:	57                   	push   edi
c0000e69:	56                   	push   esi
c0000e6a:	53                   	push   ebx
c0000e6b:	89 d3                	mov    ebx,edx
c0000e6d:	83 ec 2c             	sub    esp,0x2c
c0000e70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e74:	8b aa 5c 03 00 00    	mov    ebp,DWORD PTR [edx+0x35c]
c0000e7a:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e7d:	8d 45 ff             	lea    eax,[ebp-0x1]
c0000e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e84:	74 1f                	je     c0000ea5 <sYSMALLOc+0x3e>
c0000e86:	89 d0                	mov    eax,edx
c0000e88:	e8 df fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e8d:	83 ec 0c             	sub    esp,0xc
c0000e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000e94:	83 e8 07             	sub    eax,0x7
c0000e97:	50                   	push   eax
c0000e98:	e8 7d 03 00 00       	call   c000121a <dlmalloc>
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	e9 6d 03 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0000ea5:	f7 dd                	neg    ebp
c0000ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000eab:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0000eaf:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000eb5:	0f 87 be 00 00 00    	ja     c0000f79 <sYSMALLOc+0x112>
c0000ebb:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ec1:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000ec7:	0f 8d ac 00 00 00    	jge    c0000f79 <sYSMALLOc+0x112>
c0000ecd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0000ed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ed5:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000ed9:	21 ee                	and    esi,ebp
c0000edb:	39 fe                	cmp    esi,edi
c0000edd:	0f 86 96 00 00 00    	jbe    c0000f79 <sYSMALLOc+0x112>
c0000ee3:	52                   	push   edx
c0000ee4:	52                   	push   edx
c0000ee5:	6a 00                	push   0x0
c0000ee7:	6a ff                	push   0xffffffff
c0000ee9:	6a 0c                	push   0xc
c0000eeb:	6a 03                	push   0x3
c0000eed:	56                   	push   esi
c0000eee:	6a 00                	push   0x0
c0000ef0:	e8 12 ed 00 00       	call   c000fc07 <mmap>
c0000ef5:	83 c4 20             	add    esp,0x20
c0000ef8:	83 f8 ff             	cmp    eax,0xffffffff
c0000efb:	74 7c                	je     c0000f79 <sYSMALLOc+0x112>
c0000efd:	89 c1                	mov    ecx,eax
c0000eff:	83 e1 07             	and    ecx,0x7
c0000f02:	74 13                	je     c0000f17 <sYSMALLOc+0xb0>
c0000f04:	ba 08 00 00 00       	mov    edx,0x8
c0000f09:	29 ca                	sub    edx,ecx
c0000f0b:	89 f1                	mov    ecx,esi
c0000f0d:	01 d0                	add    eax,edx
c0000f0f:	29 d1                	sub    ecx,edx
c0000f11:	89 10                	mov    DWORD PTR [eax],edx
c0000f13:	89 ca                	mov    edx,ecx
c0000f15:	eb 08                	jmp    c0000f1f <sYSMALLOc+0xb8>
c0000f17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f1d:	89 f2                	mov    edx,esi
c0000f1f:	83 ca 02             	or     edx,0x2
c0000f22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f25:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f2b:	8d 57 01             	lea    edx,[edi+0x1]
c0000f2e:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f34:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f3a:	7e 06                	jle    c0000f42 <sYSMALLOc+0xdb>
c0000f3c:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f42:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f48:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f4e:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f54:	76 06                	jbe    c0000f5c <sYSMALLOc+0xf5>
c0000f56:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f5c:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f62:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f68:	0f 83 3f 01 00 00    	jae    c00010ad <sYSMALLOc+0x246>
c0000f6e:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000f74:	e9 34 01 00 00       	jmp    c00010ad <sYSMALLOc+0x246>
c0000f79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000f7c:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000f86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000f89:	83 e0 fc             	and    eax,0xfffffffc
c0000f8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0000f8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f93:	03 04 24             	add    eax,DWORD PTR [esp]
c0000f96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f9e:	83 c0 10             	add    eax,0x10
c0000fa1:	01 c5                	add    ebp,eax
c0000fa3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fa7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fae:	74 03                	je     c0000fb3 <sYSMALLOc+0x14c>
c0000fb0:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c0000fb3:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0000fb7:	23 6c 24 10          	and    ebp,DWORD PTR [esp+0x10]
c0000fbb:	89 ee                	mov    esi,ebp
c0000fbd:	7f 18                	jg     c0000fd7 <sYSMALLOc+0x170>
c0000fbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fc6:	74 27                	je     c0000fef <sYSMALLOc+0x188>
c0000fc8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000fcc:	03 34 24             	add    esi,DWORD PTR [esp]
c0000fcf:	01 ee                	add    esi,ebp
c0000fd1:	23 74 24 10          	and    esi,DWORD PTR [esp+0x10]
c0000fd5:	eb 18                	jmp    c0000fef <sYSMALLOc+0x188>
c0000fd7:	83 ec 0c             	sub    esp,0xc
c0000fda:	55                   	push   ebp
c0000fdb:	e8 f1 eb 00 00       	call   c000fbd1 <sbrk_thunk>
c0000fe0:	83 c4 10             	add    esp,0x10
c0000fe3:	89 c7                	mov    edi,eax
c0000fe5:	83 c8 ff             	or     eax,0xffffffff
c0000fe8:	83 ff ff             	cmp    edi,0xffffffff
c0000feb:	75 42                	jne    c000102f <sYSMALLOc+0x1c8>
c0000fed:	eb d0                	jmp    c0000fbf <sYSMALLOc+0x158>
c0000fef:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c0000ff5:	77 05                	ja     c0000ffc <sYSMALLOc+0x195>
c0000ff7:	be 00 c0 00 00       	mov    esi,0xc000
c0000ffc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0001000:	77 07                	ja     c0001009 <sYSMALLOc+0x1a2>
c0001002:	31 c0                	xor    eax,eax
c0001004:	e9 09 02 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0001009:	50                   	push   eax
c000100a:	50                   	push   eax
c000100b:	6a 00                	push   0x0
c000100d:	6a ff                	push   0xffffffff
c000100f:	6a 0c                	push   0xc
c0001011:	6a 03                	push   0x3
c0001013:	56                   	push   esi
c0001014:	6a 00                	push   0x0
c0001016:	e8 ec eb 00 00       	call   c000fc07 <mmap>
c000101b:	83 c4 20             	add    esp,0x20
c000101e:	89 c7                	mov    edi,eax
c0001020:	83 f8 ff             	cmp    eax,0xffffffff
c0001023:	74 dd                	je     c0001002 <sYSMALLOc+0x19b>
c0001025:	8d 04 30             	lea    eax,[eax+esi*1]
c0001028:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000102f:	8b ab 68 03 00 00    	mov    ebp,DWORD PTR [ebx+0x368]
c0001035:	01 f5                	add    ebp,esi
c0001037:	83 f8 ff             	cmp    eax,0xffffffff
c000103a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0001040:	75 73                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001042:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0001046:	75 6d                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001048:	03 34 24             	add    esi,DWORD PTR [esp]
c000104b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000104f:	83 ce 01             	or     esi,0x1
c0001052:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0001055:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c000105b:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001061:	73 06                	jae    c0001069 <sYSMALLOc+0x202>
c0001063:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001069:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000106f:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001075:	73 06                	jae    c000107d <sYSMALLOc+0x216>
c0001077:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000107d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001080:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001083:	83 e2 fc             	and    edx,0xfffffffc
c0001086:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000108a:	0f 82 72 ff ff ff    	jb     c0001002 <sYSMALLOc+0x19b>
c0001090:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001094:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0001098:	01 c1                	add    ecx,eax
c000109a:	83 ca 01             	or     edx,0x1
c000109d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010a0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00010a4:	83 cb 01             	or     ebx,0x1
c00010a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010ad:	83 c0 08             	add    eax,0x8
c00010b0:	e9 5d 01 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c00010b5:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010bb:	89 d1                	mov    ecx,edx
c00010bd:	83 e1 01             	and    ecx,0x1
c00010c0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010c4:	0f 95 44 24 1c       	setne  BYTE PTR [esp+0x1c]
c00010c9:	85 4c 24 1c          	test   DWORD PTR [esp+0x1c],ecx
c00010cd:	74 14                	je     c00010e3 <sYSMALLOc+0x27c>
c00010cf:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c00010d3:	76 0e                	jbe    c00010e3 <sYSMALLOc+0x27c>
c00010d5:	83 e2 fe             	and    edx,0xfffffffe
c00010d8:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00010de:	e9 89 00 00 00       	jmp    c000116c <sYSMALLOc+0x305>
c00010e3:	85 c9                	test   ecx,ecx
c00010e5:	0f 84 81 00 00 00    	je     c000116c <sYSMALLOc+0x305>
c00010eb:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010ef:	74 0e                	je     c00010ff <sYSMALLOc+0x298>
c00010f1:	89 f8                	mov    eax,edi
c00010f3:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00010f7:	01 c5                	add    ebp,eax
c00010f9:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00010ff:	89 fa                	mov    edx,edi
c0001101:	83 e2 07             	and    edx,0x7
c0001104:	74 0c                	je     c0001112 <sYSMALLOc+0x2ab>
c0001106:	b8 08 00 00 00       	mov    eax,0x8
c000110b:	29 d0                	sub    eax,edx
c000110d:	8d 14 07             	lea    edx,[edi+eax*1]
c0001110:	eb 04                	jmp    c0001116 <sYSMALLOc+0x2af>
c0001112:	89 fa                	mov    edx,edi
c0001114:	31 c0                	xor    eax,eax
c0001116:	03 04 24             	add    eax,DWORD PTR [esp]
c0001119:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000111d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0001121:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001124:	83 ec 0c             	sub    esp,0xc
c0001127:	01 f9                	add    ecx,edi
c0001129:	01 cd                	add    ebp,ecx
c000112b:	29 c8                	sub    eax,ecx
c000112d:	23 6c 24 1c          	and    ebp,DWORD PTR [esp+0x1c]
c0001131:	01 c5                	add    ebp,eax
c0001133:	55                   	push   ebp
c0001134:	e8 98 ea 00 00       	call   c000fbd1 <sbrk_thunk>
c0001139:	83 c4 10             	add    esp,0x10
c000113c:	83 f8 ff             	cmp    eax,0xffffffff
c000113f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0001143:	75 17                	jne    c000115c <sYSMALLOc+0x2f5>
c0001145:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001149:	83 ec 0c             	sub    esp,0xc
c000114c:	6a 00                	push   0x0
c000114e:	e8 7e ea 00 00       	call   c000fbd1 <sbrk_thunk>
c0001153:	83 c4 10             	add    esp,0x10
c0001156:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000115a:	eb 32                	jmp    c000118e <sYSMALLOc+0x327>
c000115c:	39 f8                	cmp    eax,edi
c000115e:	73 39                	jae    c0001199 <sYSMALLOc+0x332>
c0001160:	8d 04 37             	lea    eax,[edi+esi*1]
c0001163:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000116a:	eb 22                	jmp    c000118e <sYSMALLOc+0x327>
c000116c:	89 fa                	mov    edx,edi
c000116e:	83 f8 ff             	cmp    eax,0xffffffff
c0001171:	75 24                	jne    c0001197 <sYSMALLOc+0x330>
c0001173:	83 ec 0c             	sub    esp,0xc
c0001176:	6a 00                	push   0x0
c0001178:	e8 54 ea 00 00       	call   c000fbd1 <sbrk_thunk>
c000117d:	83 c4 10             	add    esp,0x10
c0001180:	89 c2                	mov    edx,eax
c0001182:	29 fa                	sub    edx,edi
c0001184:	29 f2                	sub    edx,esi
c0001186:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000118c:	89 fa                	mov    edx,edi
c000118e:	83 f8 ff             	cmp    eax,0xffffffff
c0001191:	0f 84 be fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c0001197:	31 ed                	xor    ebp,ebp
c0001199:	29 d0                	sub    eax,edx
c000119b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000119e:	01 e8                	add    eax,ebp
c00011a0:	83 c8 01             	or     eax,0x1
c00011a3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00011a6:	01 ab 68 03 00 00    	add    DWORD PTR [ebx+0x368],ebp
c00011ac:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00011b0:	0f 84 9f fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c00011b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00011bd:	83 ee 0c             	sub    esi,0xc
c00011c0:	83 e6 f8             	and    esi,0xfffffff8
c00011c3:	89 f0                	mov    eax,esi
c00011c5:	83 c8 01             	or     eax,0x1
c00011c8:	83 fe 0f             	cmp    esi,0xf
c00011cb:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00011ce:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c00011d6:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c00011de:	0f 86 71 fe ff ff    	jbe    c0001055 <sYSMALLOc+0x1ee>
c00011e4:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00011ea:	83 ec 0c             	sub    esp,0xc
c00011ed:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00011fb:	83 c0 08             	add    eax,0x8
c00011fe:	50                   	push   eax
c00011ff:	e8 4f fb ff ff       	call   c0000d53 <dlfree>
c0001204:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000120a:	83 c4 10             	add    esp,0x10
c000120d:	e9 43 fe ff ff       	jmp    c0001055 <sYSMALLOc+0x1ee>
c0001212:	83 c4 2c             	add    esp,0x2c
c0001215:	5b                   	pop    ebx
c0001216:	5e                   	pop    esi
c0001217:	5f                   	pop    edi
c0001218:	5d                   	pop    ebp
c0001219:	c3                   	ret    

c000121a <dlmalloc>:
c000121a:	55                   	push   ebp
c000121b:	57                   	push   edi
c000121c:	56                   	push   esi
c000121d:	53                   	push   ebx
c000121e:	83 ec 1c             	sub    esp,0x1c
c0001221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001225:	83 f8 df             	cmp    eax,0xffffffdf
c0001228:	0f 87 70 03 00 00    	ja     c000159e <dlmalloc+0x384>
c000122e:	83 c0 0b             	add    eax,0xb
c0001231:	be 10 00 00 00       	mov    esi,0x10
c0001236:	83 f8 0f             	cmp    eax,0xf
c0001239:	76 05                	jbe    c0001240 <dlmalloc+0x26>
c000123b:	83 e0 f8             	and    eax,0xfffffff8
c000123e:	89 c6                	mov    esi,eax
c0001240:	8b 3d 00 91 02 c0    	mov    edi,DWORD PTR ds:0xc0029100
c0001246:	f7 c7 01 00 00 00    	test   edi,0x1
c000124c:	75 17                	jne    c0001265 <dlmalloc+0x4b>
c000124e:	85 ff                	test   edi,edi
c0001250:	0f 85 05 03 00 00    	jne    c000155b <dlmalloc+0x341>
c0001256:	b8 00 91 02 c0       	mov    eax,0xc0029100
c000125b:	e8 0c fa ff ff       	call   c0000c6c <malloc_consolidate>
c0001260:	e9 f6 02 00 00       	jmp    c000155b <dlmalloc+0x341>
c0001265:	39 f7                	cmp    edi,esi
c0001267:	72 1f                	jb     c0001288 <dlmalloc+0x6e>
c0001269:	89 f2                	mov    edx,esi
c000126b:	c1 ea 03             	shr    edx,0x3
c000126e:	83 ea 02             	sub    edx,0x2
c0001271:	8b 04 95 04 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6efc]
c0001278:	85 c0                	test   eax,eax
c000127a:	74 0c                	je     c0001288 <dlmalloc+0x6e>
c000127c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000127f:	89 0c 95 04 91 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6efc],ecx
c0001286:	eb 30                	jmp    c00012b8 <dlmalloc+0x9e>
c0001288:	89 f0                	mov    eax,esi
c000128a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001290:	77 2e                	ja     c00012c0 <dlmalloc+0xa6>
c0001292:	c1 e8 03             	shr    eax,0x3
c0001295:	8d 14 c5 34 91 02 c0 	lea    edx,[eax*8-0x3ffd6ecc]
c000129c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012a0:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012a6:	39 c3                	cmp    ebx,eax
c00012a8:	74 2e                	je     c00012d8 <dlmalloc+0xbe>
c00012aa:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012ad:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012b2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012b5:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012b8:	83 c0 08             	add    eax,0x8
c00012bb:	e9 e0 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c00012c0:	e8 23 f9 ff ff       	call   c0000be8 <largebin_index>
c00012c5:	83 e7 02             	and    edi,0x2
c00012c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012cc:	74 0a                	je     c00012d8 <dlmalloc+0xbe>
c00012ce:	b8 00 91 02 c0       	mov    eax,0xc0029100
c00012d3:	e8 94 f9 ff ff       	call   c0000c6c <malloc_consolidate>
c00012d8:	8d 46 10             	lea    eax,[esi+0x10]
c00012db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012df:	8b 1d 40 91 02 c0    	mov    ebx,DWORD PTR ds:0xc0029140
c00012e5:	81 fb 34 91 02 c0    	cmp    ebx,0xc0029134
c00012eb:	0f 84 13 01 00 00    	je     c0001404 <dlmalloc+0x1ea>
c00012f1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00012f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00012f7:	83 e7 fc             	and    edi,0xfffffffc
c00012fa:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001300:	77 4c                	ja     c000134e <dlmalloc+0x134>
c0001302:	3d 34 91 02 c0       	cmp    eax,0xc0029134
c0001307:	75 45                	jne    c000134e <dlmalloc+0x134>
c0001309:	39 1d 30 91 02 c0    	cmp    DWORD PTR ds:0xc0029130,ebx
c000130f:	75 3d                	jne    c000134e <dlmalloc+0x134>
c0001311:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001315:	73 37                	jae    c000134e <dlmalloc+0x134>
c0001317:	8d 04 33             	lea    eax,[ebx+esi*1]
c000131a:	89 fa                	mov    edx,edi
c000131c:	a3 3c 91 02 c0       	mov    ds:0xc002913c,eax
c0001321:	a3 40 91 02 c0       	mov    ds:0xc0029140,eax
c0001326:	a3 30 91 02 c0       	mov    ds:0xc0029130,eax
c000132b:	29 f2                	sub    edx,esi
c000132d:	c7 40 08 34 91 02 c0 	mov    DWORD PTR [eax+0x8],0xc0029134
c0001334:	c7 40 0c 34 91 02 c0 	mov    DWORD PTR [eax+0xc],0xc0029134
c000133b:	83 ce 01             	or     esi,0x1
c000133e:	89 d1                	mov    ecx,edx
c0001340:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001343:	83 c9 01             	or     ecx,0x1
c0001346:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001349:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000134c:	eb 15                	jmp    c0001363 <dlmalloc+0x149>
c000134e:	a3 40 91 02 c0       	mov    ds:0xc0029140,eax
c0001353:	39 fe                	cmp    esi,edi
c0001355:	c7 40 08 34 91 02 c0 	mov    DWORD PTR [eax+0x8],0xc0029134
c000135c:	75 0d                	jne    c000136b <dlmalloc+0x151>
c000135e:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001363:	8d 43 08             	lea    eax,[ebx+0x8]
c0001366:	e9 35 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000136b:	89 f8                	mov    eax,edi
c000136d:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001373:	77 19                	ja     c000138e <dlmalloc+0x174>
c0001375:	c1 e8 03             	shr    eax,0x3
c0001378:	8d 14 00             	lea    edx,[eax+eax*1]
c000137b:	83 c2 0d             	add    edx,0xd
c000137e:	8d 2c 95 f8 90 02 c0 	lea    ebp,[edx*4-0x3ffd6f08]
c0001385:	8b 14 95 00 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6f00]
c000138c:	eb 46                	jmp    c00013d4 <dlmalloc+0x1ba>
c000138e:	e8 55 f8 ff ff       	call   c0000be8 <largebin_index>
c0001393:	8d 14 00             	lea    edx,[eax+eax*1]
c0001396:	83 c2 0d             	add    edx,0xd
c0001399:	8d 0c 95 00 91 02 c0 	lea    ecx,[edx*4-0x3ffd6f00]
c00013a0:	8b 14 95 00 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6f00]
c00013a7:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013aa:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013ae:	89 d5                	mov    ebp,edx
c00013b0:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013b4:	74 1e                	je     c00013d4 <dlmalloc+0x1ba>
c00013b6:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013b9:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013bc:	77 12                	ja     c00013d0 <dlmalloc+0x1b6>
c00013be:	83 cf 01             	or     edi,0x1
c00013c1:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013c4:	76 05                	jbe    c00013cb <dlmalloc+0x1b1>
c00013c6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013c9:	eb f6                	jmp    c00013c1 <dlmalloc+0x1a7>
c00013cb:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013ce:	eb 04                	jmp    c00013d4 <dlmalloc+0x1ba>
c00013d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00013d4:	89 c7                	mov    edi,eax
c00013d6:	88 c1                	mov    cl,al
c00013d8:	c1 ff 05             	sar    edi,0x5
c00013db:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00013df:	bf 01 00 00 00       	mov    edi,0x1
c00013e4:	d3 e7                	shl    edi,cl
c00013e6:	89 f8                	mov    eax,edi
c00013e8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00013ec:	09 04 bd 34 94 02 c0 	or     DWORD PTR [edi*4-0x3ffd6bcc],eax
c00013f3:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00013f6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00013f9:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00013fc:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00013ff:	e9 db fe ff ff       	jmp    c00012df <dlmalloc+0xc5>
c0001404:	81 fe ff 00 00 00    	cmp    esi,0xff
c000140a:	76 78                	jbe    c0001484 <dlmalloc+0x26a>
c000140c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001410:	8d 04 c5 34 91 02 c0 	lea    eax,[eax*8-0x3ffd6ecc]
c0001417:	8d 48 f8             	lea    ecx,[eax-0x8]
c000141a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000141d:	39 ca                	cmp    edx,ecx
c000141f:	74 63                	je     c0001484 <dlmalloc+0x26a>
c0001421:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001424:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001427:	83 e3 fc             	and    ebx,0xfffffffc
c000142a:	39 de                	cmp    esi,ebx
c000142c:	77 52                	ja     c0001480 <dlmalloc+0x266>
c000142e:	89 df                	mov    edi,ebx
c0001430:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001433:	29 f7                	sub    edi,esi
c0001435:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001438:	01 d3                	add    ebx,edx
c000143a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000143d:	83 ff 0f             	cmp    edi,0xf
c0001440:	8d 42 08             	lea    eax,[edx+0x8]
c0001443:	77 09                	ja     c000144e <dlmalloc+0x234>
c0001445:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001449:	e9 52 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000144e:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001451:	83 ce 01             	or     esi,0x1
c0001454:	89 0d 3c 91 02 c0    	mov    DWORD PTR ds:0xc002913c,ecx
c000145a:	89 0d 40 91 02 c0    	mov    DWORD PTR ds:0xc0029140,ecx
c0001460:	c7 41 08 34 91 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0029134
c0001467:	c7 41 0c 34 91 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0029134
c000146e:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001471:	89 fa                	mov    edx,edi
c0001473:	83 ca 01             	or     edx,0x1
c0001476:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001479:	89 3b                	mov    DWORD PTR [ebx],edi
c000147b:	e9 20 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c0001480:	89 c2                	mov    edx,eax
c0001482:	eb 99                	jmp    c000141d <dlmalloc+0x203>
c0001484:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001488:	b8 01 00 00 00       	mov    eax,0x1
c000148d:	41                   	inc    ecx
c000148e:	89 cb                	mov    ebx,ecx
c0001490:	8d 14 cd 2c 91 02 c0 	lea    edx,[ecx*8-0x3ffd6ed4]
c0001497:	c1 eb 05             	shr    ebx,0x5
c000149a:	d3 e0                	shl    eax,cl
c000149c:	8b 3c 9d 34 94 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd6bcc]
c00014a3:	39 f8                	cmp    eax,edi
c00014a5:	77 04                	ja     c00014ab <dlmalloc+0x291>
c00014a7:	85 c0                	test   eax,eax
c00014a9:	75 26                	jne    c00014d1 <dlmalloc+0x2b7>
c00014ab:	43                   	inc    ebx
c00014ac:	83 fb 02             	cmp    ebx,0x2
c00014af:	0f 87 a6 00 00 00    	ja     c000155b <dlmalloc+0x341>
c00014b5:	8b 3c 9d 34 94 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd6bcc]
c00014bc:	85 ff                	test   edi,edi
c00014be:	74 eb                	je     c00014ab <dlmalloc+0x291>
c00014c0:	89 d8                	mov    eax,ebx
c00014c2:	c1 e0 06             	shl    eax,0x6
c00014c5:	8d 14 85 2c 91 02 c0 	lea    edx,[eax*4-0x3ffd6ed4]
c00014cc:	b8 01 00 00 00       	mov    eax,0x1
c00014d1:	85 f8                	test   eax,edi
c00014d3:	75 07                	jne    c00014dc <dlmalloc+0x2c2>
c00014d5:	83 c2 08             	add    edx,0x8
c00014d8:	01 c0                	add    eax,eax
c00014da:	eb f5                	jmp    c00014d1 <dlmalloc+0x2b7>
c00014dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00014df:	39 ca                	cmp    edx,ecx
c00014e1:	75 14                	jne    c00014f7 <dlmalloc+0x2dd>
c00014e3:	89 c1                	mov    ecx,eax
c00014e5:	83 c2 08             	add    edx,0x8
c00014e8:	f7 d1                	not    ecx
c00014ea:	01 c0                	add    eax,eax
c00014ec:	21 cf                	and    edi,ecx
c00014ee:	89 3c 9d 34 94 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd6bcc],edi
c00014f5:	eb ac                	jmp    c00014a3 <dlmalloc+0x289>
c00014f7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00014fa:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00014fd:	83 e0 fc             	and    eax,0xfffffffc
c0001500:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001503:	89 c3                	mov    ebx,eax
c0001505:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001508:	29 f3                	sub    ebx,esi
c000150a:	8d 14 01             	lea    edx,[ecx+eax*1]
c000150d:	83 fb 0f             	cmp    ebx,0xf
c0001510:	8d 41 08             	lea    eax,[ecx+0x8]
c0001513:	77 09                	ja     c000151e <dlmalloc+0x304>
c0001515:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001519:	e9 82 00 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000151e:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001521:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001527:	89 3d 3c 91 02 c0    	mov    DWORD PTR ds:0xc002913c,edi
c000152d:	89 3d 40 91 02 c0    	mov    DWORD PTR ds:0xc0029140,edi
c0001533:	c7 47 08 34 91 02 c0 	mov    DWORD PTR [edi+0x8],0xc0029134
c000153a:	c7 47 0c 34 91 02 c0 	mov    DWORD PTR [edi+0xc],0xc0029134
c0001541:	77 06                	ja     c0001549 <dlmalloc+0x32f>
c0001543:	89 3d 30 91 02 c0    	mov    DWORD PTR ds:0xc0029130,edi
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000154f:	89 d9                	mov    ecx,ebx
c0001551:	83 c9 01             	or     ecx,0x1
c0001554:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001557:	89 1a                	mov    DWORD PTR [edx],ebx
c0001559:	eb 45                	jmp    c00015a0 <dlmalloc+0x386>
c000155b:	a1 2c 91 02 c0       	mov    eax,ds:0xc002912c
c0001560:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001563:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001566:	83 e2 fc             	and    edx,0xfffffffc
c0001569:	39 d1                	cmp    ecx,edx
c000156b:	77 1e                	ja     c000158b <dlmalloc+0x371>
c000156d:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001570:	89 f3                	mov    ebx,esi
c0001572:	89 0d 2c 91 02 c0    	mov    DWORD PTR ds:0xc002912c,ecx
c0001578:	83 cb 01             	or     ebx,0x1
c000157b:	29 f2                	sub    edx,esi
c000157d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001580:	83 ca 01             	or     edx,0x1
c0001583:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001586:	e9 2d fd ff ff       	jmp    c00012b8 <dlmalloc+0x9e>
c000158b:	83 c4 1c             	add    esp,0x1c
c000158e:	89 f0                	mov    eax,esi
c0001590:	5b                   	pop    ebx
c0001591:	ba 00 91 02 c0       	mov    edx,0xc0029100
c0001596:	5e                   	pop    esi
c0001597:	5f                   	pop    edi
c0001598:	5d                   	pop    ebp
c0001599:	e9 c9 f8 ff ff       	jmp    c0000e67 <sYSMALLOc>
c000159e:	31 c0                	xor    eax,eax
c00015a0:	83 c4 1c             	add    esp,0x1c
c00015a3:	5b                   	pop    ebx
c00015a4:	5e                   	pop    esi
c00015a5:	5f                   	pop    edi
c00015a6:	5d                   	pop    ebp
c00015a7:	c3                   	ret    

c00015a8 <iALLOc>:
c00015a8:	55                   	push   ebp
c00015a9:	89 c5                	mov    ebp,eax
c00015ab:	57                   	push   edi
c00015ac:	56                   	push   esi
c00015ad:	53                   	push   ebx
c00015ae:	83 ec 2c             	sub    esp,0x2c
c00015b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015bd:	83 3d 00 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029100,0x0
c00015c4:	75 12                	jne    c00015d8 <iALLOc+0x30>
c00015c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015ca:	b8 00 91 02 c0       	mov    eax,0xc0029100
c00015cf:	e8 98 f6 ff ff       	call   c0000c6c <malloc_consolidate>
c00015d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00015d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015dd:	74 12                	je     c00015f1 <iALLOc+0x49>
c00015df:	85 ed                	test   ebp,ebp
c00015e1:	0f 84 64 01 00 00    	je     c000174b <iALLOc+0x1a3>
c00015e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00015ef:	eb 33                	jmp    c0001624 <iALLOc+0x7c>
c00015f1:	85 ed                	test   ebp,ebp
c00015f3:	75 14                	jne    c0001609 <iALLOc+0x61>
c00015f5:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00015fd:	83 c4 2c             	add    esp,0x2c
c0001600:	5b                   	pop    ebx
c0001601:	5e                   	pop    esi
c0001602:	5f                   	pop    edi
c0001603:	5d                   	pop    ebp
c0001604:	e9 11 fc ff ff       	jmp    c000121a <dlmalloc>
c0001609:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001610:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001618:	83 f8 0f             	cmp    eax,0xf
c000161b:	76 07                	jbe    c0001624 <iALLOc+0x7c>
c000161d:	83 e0 f8             	and    eax,0xfffffff8
c0001620:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001624:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001629:	75 09                	jne    c0001634 <iALLOc+0x8c>
c000162b:	89 d0                	mov    eax,edx
c000162d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001630:	31 f6                	xor    esi,esi
c0001632:	eb 3b                	jmp    c000166f <iALLOc+0xc7>
c0001634:	8b 02                	mov    eax,DWORD PTR [edx]
c0001636:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000163e:	83 c0 0b             	add    eax,0xb
c0001641:	83 f8 0f             	cmp    eax,0xf
c0001644:	76 07                	jbe    c000164d <iALLOc+0xa5>
c0001646:	83 e0 f8             	and    eax,0xfffffff8
c0001649:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000164d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001651:	0f af f5             	imul   esi,ebp
c0001654:	eb 25                	jmp    c000167b <iALLOc+0xd3>
c0001656:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001658:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000165b:	bb 10 00 00 00       	mov    ebx,0x10
c0001660:	83 f9 0f             	cmp    ecx,0xf
c0001663:	76 05                	jbe    c000166a <iALLOc+0xc2>
c0001665:	83 e1 f8             	and    ecx,0xfffffff8
c0001668:	89 cb                	mov    ebx,ecx
c000166a:	01 de                	add    esi,ebx
c000166c:	83 c0 04             	add    eax,0x4
c000166f:	39 c7                	cmp    edi,eax
c0001671:	75 e3                	jne    c0001656 <iALLOc+0xae>
c0001673:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000167b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000167f:	8b 1d 54 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029454
c0001685:	83 ec 0c             	sub    esp,0xc
c0001688:	c7 05 54 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029454,0x0
c0001692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001696:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000169a:	50                   	push   eax
c000169b:	e8 7a fb ff ff       	call   c000121a <dlmalloc>
c00016a0:	83 c4 10             	add    esp,0x10
c00016a3:	89 1d 54 94 02 c0    	mov    DWORD PTR ds:0xc0029454,ebx
c00016a9:	85 c0                	test   eax,eax
c00016ab:	0f 84 92 00 00 00    	je     c0001743 <iALLOc+0x19b>
c00016b1:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016b4:	8d 78 f8             	lea    edi,[eax-0x8]
c00016b7:	83 e3 fc             	and    ebx,0xfffffffc
c00016ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016be:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016c3:	74 1e                	je     c00016e3 <iALLOc+0x13b>
c00016c5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016c9:	89 d9                	mov    ecx,ebx
c00016cb:	52                   	push   edx
c00016cc:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016d0:	83 e9 04             	sub    ecx,0x4
c00016d3:	51                   	push   ecx
c00016d4:	6a 00                	push   0x0
c00016d6:	50                   	push   eax
c00016d7:	e8 14 ee ff ff       	call   c00004f0 <memset>
c00016dc:	83 c4 10             	add    esp,0x10
c00016df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00016e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00016e8:	75 14                	jne    c00016fe <iALLOc+0x156>
c00016ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ed:	29 f3                	sub    ebx,esi
c00016ef:	8d 48 08             	lea    ecx,[eax+0x8]
c00016f2:	83 cb 01             	or     ebx,0x1
c00016f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016f9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00016fc:	89 f3                	mov    ebx,esi
c00016fe:	31 c0                	xor    eax,eax
c0001700:	4d                   	dec    ebp
c0001701:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001704:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001708:	39 c5                	cmp    ebp,eax
c000170a:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000170d:	74 2c                	je     c000173b <iALLOc+0x193>
c000170f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001713:	85 c9                	test   ecx,ecx
c0001715:	75 15                	jne    c000172c <iALLOc+0x184>
c0001717:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000171a:	8d 71 0b             	lea    esi,[ecx+0xb]
c000171d:	b9 10 00 00 00       	mov    ecx,0x10
c0001722:	83 fe 0f             	cmp    esi,0xf
c0001725:	76 05                	jbe    c000172c <iALLOc+0x184>
c0001727:	83 e6 f8             	and    esi,0xfffffff8
c000172a:	89 f1                	mov    ecx,esi
c000172c:	89 ce                	mov    esi,ecx
c000172e:	29 cb                	sub    ebx,ecx
c0001730:	83 ce 01             	or     esi,0x1
c0001733:	40                   	inc    eax
c0001734:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001737:	01 cf                	add    edi,ecx
c0001739:	eb c6                	jmp    c0001701 <iALLOc+0x159>
c000173b:	83 cb 01             	or     ebx,0x1
c000173e:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001741:	eb 08                	jmp    c000174b <iALLOc+0x1a3>
c0001743:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000174b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000174f:	83 c4 2c             	add    esp,0x2c
c0001752:	5b                   	pop    ebx
c0001753:	5e                   	pop    esi
c0001754:	5f                   	pop    edi
c0001755:	5d                   	pop    ebp
c0001756:	c3                   	ret    

c0001757 <dlrealloc>:
c0001757:	55                   	push   ebp
c0001758:	57                   	push   edi
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	83 ec 1c             	sub    esp,0x1c
c000175e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001762:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001766:	85 db                	test   ebx,ebx
c0001768:	75 10                	jne    c000177a <dlrealloc+0x23>
c000176a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000176e:	83 c4 1c             	add    esp,0x1c
c0001771:	5b                   	pop    ebx
c0001772:	5e                   	pop    esi
c0001773:	5f                   	pop    edi
c0001774:	5d                   	pop    ebp
c0001775:	e9 a0 fa ff ff       	jmp    c000121a <dlmalloc>
c000177a:	83 f8 df             	cmp    eax,0xffffffdf
c000177d:	0f 87 a5 01 00 00    	ja     c0001928 <dlrealloc+0x1d1>
c0001783:	83 c0 0b             	add    eax,0xb
c0001786:	bd 10 00 00 00       	mov    ebp,0x10
c000178b:	83 f8 0f             	cmp    eax,0xf
c000178e:	76 05                	jbe    c0001795 <dlrealloc+0x3e>
c0001790:	83 e0 f8             	and    eax,0xfffffff8
c0001793:	89 c5                	mov    ebp,eax
c0001795:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001798:	89 c6                	mov    esi,eax
c000179a:	83 e6 fc             	and    esi,0xfffffffc
c000179d:	a8 02                	test   al,0x2
c000179f:	0f 85 4e 01 00 00    	jne    c00018f3 <dlrealloc+0x19c>
c00017a5:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017a8:	39 f5                	cmp    ebp,esi
c00017aa:	0f 86 04 01 00 00    	jbe    c00018b4 <dlrealloc+0x15d>
c00017b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00017b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00017b6:	39 15 2c 91 02 c0    	cmp    DWORD PTR ds:0xc002912c,edx
c00017bc:	75 33                	jne    c00017f1 <dlrealloc+0x9a>
c00017be:	83 e1 fc             	and    ecx,0xfffffffc
c00017c1:	01 f1                	add    ecx,esi
c00017c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00017ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00017ce:	77 49                	ja     c0001819 <dlrealloc+0xc2>
c00017d0:	01 ef                	add    edi,ebp
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 e8                	or     eax,ebp
c00017d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00017da:	89 3d 2c 91 02 c0    	mov    DWORD PTR ds:0xc002912c,edi
c00017e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017e4:	29 e8                	sub    eax,ebp
c00017e6:	83 c8 01             	or     eax,0x1
c00017e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00017ec:	e9 39 01 00 00       	jmp    c000192a <dlrealloc+0x1d3>
c00017f1:	89 c8                	mov    eax,ecx
c00017f3:	83 e0 fe             	and    eax,0xfffffffe
c00017f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00017fb:	75 1c                	jne    c0001819 <dlrealloc+0xc2>
c00017fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001800:	01 f1                	add    ecx,esi
c0001802:	39 cd                	cmp    ebp,ecx
c0001804:	77 13                	ja     c0001819 <dlrealloc+0xc2>
c0001806:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001809:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000180c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000180f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001812:	89 ce                	mov    esi,ecx
c0001814:	e9 9b 00 00 00       	jmp    c00018b4 <dlrealloc+0x15d>
c0001819:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000181d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001820:	83 ec 0c             	sub    esp,0xc
c0001823:	50                   	push   eax
c0001824:	e8 f1 f9 ff ff       	call   c000121a <dlmalloc>
c0001829:	83 c4 10             	add    esp,0x10
c000182c:	85 c0                	test   eax,eax
c000182e:	0f 84 f4 00 00 00    	je     c0001928 <dlrealloc+0x1d1>
c0001834:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001837:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000183b:	39 ca                	cmp    edx,ecx
c000183d:	75 0a                	jne    c0001849 <dlrealloc+0xf2>
c000183f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001842:	83 e0 fc             	and    eax,0xfffffffc
c0001845:	01 c6                	add    esi,eax
c0001847:	eb 6b                	jmp    c00018b4 <dlrealloc+0x15d>
c0001849:	8d 4e fc             	lea    ecx,[esi-0x4]
c000184c:	83 f9 27             	cmp    ecx,0x27
c000184f:	76 08                	jbe    c0001859 <dlrealloc+0x102>
c0001851:	89 de                	mov    esi,ebx
c0001853:	89 c7                	mov    edi,eax
c0001855:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001857:	eb 43                	jmp    c000189c <dlrealloc+0x145>
c0001859:	8b 13                	mov    edx,DWORD PTR [ebx]
c000185b:	83 f9 13             	cmp    ecx,0x13
c000185e:	89 10                	mov    DWORD PTR [eax],edx
c0001860:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001863:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001866:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001869:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000186c:	76 2e                	jbe    c000189c <dlrealloc+0x145>
c000186e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001871:	83 f9 1b             	cmp    ecx,0x1b
c0001874:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001877:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000187a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000187d:	76 1d                	jbe    c000189c <dlrealloc+0x145>
c000187f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001882:	83 f9 23             	cmp    ecx,0x23
c0001885:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001888:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000188b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000188e:	76 0c                	jbe    c000189c <dlrealloc+0x145>
c0001890:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001893:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001896:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001899:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000189c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018a0:	83 ec 0c             	sub    esp,0xc
c00018a3:	53                   	push   ebx
c00018a4:	e8 aa f4 ff ff       	call   c0000d53 <dlfree>
c00018a9:	83 c4 10             	add    esp,0x10
c00018ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018b0:	89 c3                	mov    ebx,eax
c00018b2:	eb 76                	jmp    c000192a <dlrealloc+0x1d3>
c00018b4:	89 f2                	mov    edx,esi
c00018b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018b9:	29 ea                	sub    edx,ebp
c00018bb:	83 e1 01             	and    ecx,0x1
c00018be:	8d 04 37             	lea    eax,[edi+esi*1]
c00018c1:	83 fa 0f             	cmp    edx,0xf
c00018c4:	77 0b                	ja     c00018d1 <dlrealloc+0x17a>
c00018c6:	09 f1                	or     ecx,esi
c00018c8:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018cf:	eb 59                	jmp    c000192a <dlrealloc+0x1d3>
c00018d1:	01 ef                	add    edi,ebp
c00018d3:	83 ec 0c             	sub    esp,0xc
c00018d6:	09 cd                	or     ebp,ecx
c00018d8:	83 ca 01             	or     edx,0x1
c00018db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00018de:	83 c7 08             	add    edi,0x8
c00018e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00018e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018e8:	57                   	push   edi
c00018e9:	e8 65 f4 ff ff       	call   c0000d53 <dlfree>
c00018ee:	83 c4 10             	add    esp,0x10
c00018f1:	eb 37                	jmp    c000192a <dlrealloc+0x1d3>
c00018f3:	8d 45 04             	lea    eax,[ebp+0x4]
c00018f6:	39 f0                	cmp    eax,esi
c00018f8:	76 30                	jbe    c000192a <dlrealloc+0x1d3>
c00018fa:	83 ec 0c             	sub    esp,0xc
c00018fd:	83 ed 07             	sub    ebp,0x7
c0001900:	55                   	push   ebp
c0001901:	e8 14 f9 ff ff       	call   c000121a <dlmalloc>
c0001906:	83 c4 10             	add    esp,0x10
c0001909:	89 c5                	mov    ebp,eax
c000190b:	85 c0                	test   eax,eax
c000190d:	74 19                	je     c0001928 <dlrealloc+0x1d1>
c000190f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001912:	89 c7                	mov    edi,eax
c0001914:	89 de                	mov    esi,ebx
c0001916:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001918:	83 ec 0c             	sub    esp,0xc
c000191b:	53                   	push   ebx
c000191c:	89 eb                	mov    ebx,ebp
c000191e:	e8 30 f4 ff ff       	call   c0000d53 <dlfree>
c0001923:	83 c4 10             	add    esp,0x10
c0001926:	eb 02                	jmp    c000192a <dlrealloc+0x1d3>
c0001928:	31 db                	xor    ebx,ebx
c000192a:	83 c4 1c             	add    esp,0x1c
c000192d:	89 d8                	mov    eax,ebx
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlmemalign>:
c0001934:	55                   	push   ebp
c0001935:	57                   	push   edi
c0001936:	56                   	push   esi
c0001937:	53                   	push   ebx
c0001938:	83 ec 0c             	sub    esp,0xc
c000193b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000193f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001943:	83 fa 08             	cmp    edx,0x8
c0001946:	77 10                	ja     c0001958 <dlmemalign+0x24>
c0001948:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000194c:	83 c4 0c             	add    esp,0xc
c000194f:	5b                   	pop    ebx
c0001950:	5e                   	pop    esi
c0001951:	5f                   	pop    edi
c0001952:	5d                   	pop    ebp
c0001953:	e9 c2 f8 ff ff       	jmp    c000121a <dlmalloc>
c0001958:	bf 10 00 00 00       	mov    edi,0x10
c000195d:	83 fa 0f             	cmp    edx,0xf
c0001960:	76 13                	jbe    c0001975 <dlmemalign+0x41>
c0001962:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001965:	85 d1                	test   ecx,edx
c0001967:	75 04                	jne    c000196d <dlmemalign+0x39>
c0001969:	89 d7                	mov    edi,edx
c000196b:	eb 08                	jmp    c0001975 <dlmemalign+0x41>
c000196d:	39 d7                	cmp    edi,edx
c000196f:	73 04                	jae    c0001975 <dlmemalign+0x41>
c0001971:	01 ff                	add    edi,edi
c0001973:	eb f8                	jmp    c000196d <dlmemalign+0x39>
c0001975:	83 f8 df             	cmp    eax,0xffffffdf
c0001978:	76 07                	jbe    c0001981 <dlmemalign+0x4d>
c000197a:	31 c0                	xor    eax,eax
c000197c:	e9 ce 00 00 00       	jmp    c0001a4f <dlmemalign+0x11b>
c0001981:	83 c0 0b             	add    eax,0xb
c0001984:	bd 10 00 00 00       	mov    ebp,0x10
c0001989:	83 f8 0f             	cmp    eax,0xf
c000198c:	76 05                	jbe    c0001993 <dlmemalign+0x5f>
c000198e:	83 e0 f8             	and    eax,0xfffffff8
c0001991:	89 c5                	mov    ebp,eax
c0001993:	83 ec 0c             	sub    esp,0xc
c0001996:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000199a:	50                   	push   eax
c000199b:	e8 7a f8 ff ff       	call   c000121a <dlmalloc>
c00019a0:	83 c4 10             	add    esp,0x10
c00019a3:	89 c1                	mov    ecx,eax
c00019a5:	85 c0                	test   eax,eax
c00019a7:	74 d1                	je     c000197a <dlmemalign+0x46>
c00019a9:	31 d2                	xor    edx,edx
c00019ab:	8d 70 f8             	lea    esi,[eax-0x8]
c00019ae:	f7 f7                	div    edi
c00019b0:	85 d2                	test   edx,edx
c00019b2:	74 62                	je     c0001a16 <dlmemalign+0xe2>
c00019b4:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019b8:	89 f8                	mov    eax,edi
c00019ba:	f7 d8                	neg    eax
c00019bc:	21 c3                	and    ebx,eax
c00019be:	83 eb 08             	sub    ebx,0x8
c00019c1:	89 d8                	mov    eax,ebx
c00019c3:	29 f0                	sub    eax,esi
c00019c5:	83 f8 0f             	cmp    eax,0xf
c00019c8:	77 02                	ja     c00019cc <dlmemalign+0x98>
c00019ca:	01 fb                	add    ebx,edi
c00019cc:	89 d8                	mov    eax,ebx
c00019ce:	29 f0                	sub    eax,esi
c00019d0:	89 c6                	mov    esi,eax
c00019d2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00019d5:	89 c2                	mov    edx,eax
c00019d7:	83 e2 fc             	and    edx,0xfffffffc
c00019da:	29 f2                	sub    edx,esi
c00019dc:	a8 02                	test   al,0x2
c00019de:	74 10                	je     c00019f0 <dlmemalign+0xbc>
c00019e0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00019e3:	83 ca 02             	or     edx,0x2
c00019e6:	8d 43 08             	lea    eax,[ebx+0x8]
c00019e9:	89 33                	mov    DWORD PTR [ebx],esi
c00019eb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00019ee:	eb 5f                	jmp    c0001a4f <dlmemalign+0x11b>
c00019f0:	83 ec 0c             	sub    esp,0xc
c00019f3:	89 d0                	mov    eax,edx
c00019f5:	83 c8 01             	or     eax,0x1
c00019f8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00019fb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a00:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a03:	83 e0 01             	and    eax,0x1
c0001a06:	09 f0                	or     eax,esi
c0001a08:	89 de                	mov    esi,ebx
c0001a0a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a0d:	51                   	push   ecx
c0001a0e:	e8 40 f3 ff ff       	call   c0000d53 <dlfree>
c0001a13:	83 c4 10             	add    esp,0x10
c0001a16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a19:	a8 02                	test   al,0x2
c0001a1b:	75 2f                	jne    c0001a4c <dlmemalign+0x118>
c0001a1d:	83 e0 fc             	and    eax,0xfffffffc
c0001a20:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a23:	39 c2                	cmp    edx,eax
c0001a25:	73 25                	jae    c0001a4c <dlmemalign+0x118>
c0001a27:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a2a:	83 ec 0c             	sub    esp,0xc
c0001a2d:	29 e8                	sub    eax,ebp
c0001a2f:	83 c2 08             	add    edx,0x8
c0001a32:	83 c8 01             	or     eax,0x1
c0001a35:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001a38:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a3b:	83 e0 01             	and    eax,0x1
c0001a3e:	09 c5                	or     ebp,eax
c0001a40:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a43:	52                   	push   edx
c0001a44:	e8 0a f3 ff ff       	call   c0000d53 <dlfree>
c0001a49:	83 c4 10             	add    esp,0x10
c0001a4c:	8d 46 08             	lea    eax,[esi+0x8]
c0001a4f:	83 c4 0c             	add    esp,0xc
c0001a52:	5b                   	pop    ebx
c0001a53:	5e                   	pop    esi
c0001a54:	5f                   	pop    edi
c0001a55:	5d                   	pop    ebp
c0001a56:	c3                   	ret    

c0001a57 <dlcalloc>:
c0001a57:	53                   	push   ebx
c0001a58:	83 ec 14             	sub    esp,0x14
c0001a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a5f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a64:	50                   	push   eax
c0001a65:	e8 b0 f7 ff ff       	call   c000121a <dlmalloc>
c0001a6a:	83 c4 10             	add    esp,0x10
c0001a6d:	89 c3                	mov    ebx,eax
c0001a6f:	85 c0                	test   eax,eax
c0001a71:	74 6e                	je     c0001ae1 <dlcalloc+0x8a>
c0001a73:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001a76:	a8 02                	test   al,0x2
c0001a78:	75 67                	jne    c0001ae1 <dlcalloc+0x8a>
c0001a7a:	83 e0 fc             	and    eax,0xfffffffc
c0001a7d:	83 e8 04             	sub    eax,0x4
c0001a80:	83 f8 27             	cmp    eax,0x27
c0001a83:	76 0f                	jbe    c0001a94 <dlcalloc+0x3d>
c0001a85:	52                   	push   edx
c0001a86:	50                   	push   eax
c0001a87:	6a 00                	push   0x0
c0001a89:	53                   	push   ebx
c0001a8a:	e8 61 ea ff ff       	call   c00004f0 <memset>
c0001a8f:	83 c4 10             	add    esp,0x10
c0001a92:	eb 4d                	jmp    c0001ae1 <dlcalloc+0x8a>
c0001a94:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001a9a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001aa1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001aa8:	83 f8 13             	cmp    eax,0x13
c0001aab:	76 34                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001aad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ab4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001abb:	83 f8 1b             	cmp    eax,0x1b
c0001abe:	76 21                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ac0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001ac7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001ace:	83 f8 23             	cmp    eax,0x23
c0001ad1:	76 0e                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ad3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001ada:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001ae1:	89 d8                	mov    eax,ebx
c0001ae3:	83 c4 08             	add    esp,0x8
c0001ae6:	5b                   	pop    ebx
c0001ae7:	c3                   	ret    

c0001ae8 <dlcfree>:
c0001ae8:	e9 66 f2 ff ff       	jmp    c0000d53 <dlfree>

c0001aed <dlindependent_calloc>:
c0001aed:	83 ec 28             	sub    esp,0x28
c0001af0:	b9 03 00 00 00       	mov    ecx,0x3
c0001af5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001af9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001afd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b09:	e8 9a fa ff ff       	call   c00015a8 <iALLOc>
c0001b0e:	83 c4 2c             	add    esp,0x2c
c0001b11:	c3                   	ret    

c0001b12 <dlindependent_comalloc>:
c0001b12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b1a:	31 c9                	xor    ecx,ecx
c0001b1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b24:	e9 7f fa ff ff       	jmp    c00015a8 <iALLOc>

c0001b29 <dlvalloc>:
c0001b29:	83 ec 0c             	sub    esp,0xc
c0001b2c:	83 3d 00 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029100,0x0
c0001b33:	75 0a                	jne    c0001b3f <dlvalloc+0x16>
c0001b35:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001b3a:	e8 2d f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b3f:	50                   	push   eax
c0001b40:	50                   	push   eax
c0001b41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b45:	ff 35 5c 94 02 c0    	push   DWORD PTR ds:0xc002945c
c0001b4b:	e8 e4 fd ff ff       	call   c0001934 <dlmemalign>
c0001b50:	83 c4 1c             	add    esp,0x1c
c0001b53:	c3                   	ret    

c0001b54 <dlpvalloc>:
c0001b54:	83 ec 0c             	sub    esp,0xc
c0001b57:	83 3d 00 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029100,0x0
c0001b5e:	75 0a                	jne    c0001b6a <dlpvalloc+0x16>
c0001b60:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001b65:	e8 02 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b6a:	a1 5c 94 02 c0       	mov    eax,ds:0xc002945c
c0001b6f:	89 c1                	mov    ecx,eax
c0001b71:	52                   	push   edx
c0001b72:	f7 d9                	neg    ecx
c0001b74:	52                   	push   edx
c0001b75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001b79:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001b7d:	21 ca                	and    edx,ecx
c0001b7f:	52                   	push   edx
c0001b80:	50                   	push   eax
c0001b81:	e8 ae fd ff ff       	call   c0001934 <dlmemalign>
c0001b86:	83 c4 1c             	add    esp,0x1c
c0001b89:	c3                   	ret    

c0001b8a <dlmalloc_trim>:
c0001b8a:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001b8f:	e8 d8 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b94:	31 c0                	xor    eax,eax
c0001b96:	c3                   	ret    

c0001b97 <dlmalloc_usable_size>:
c0001b97:	53                   	push   ebx
c0001b98:	31 c0                	xor    eax,eax
c0001b9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001b9e:	85 c9                	test   ecx,ecx
c0001ba0:	74 24                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001ba2:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001ba5:	f6 c2 02             	test   dl,0x2
c0001ba8:	74 08                	je     c0001bb2 <dlmalloc_usable_size+0x1b>
c0001baa:	83 e2 fc             	and    edx,0xfffffffc
c0001bad:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bb0:	eb 14                	jmp    c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bb2:	89 d3                	mov    ebx,edx
c0001bb4:	31 c0                	xor    eax,eax
c0001bb6:	83 e3 fe             	and    ebx,0xfffffffe
c0001bb9:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bbe:	74 06                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bc0:	83 e2 fc             	and    edx,0xfffffffc
c0001bc3:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bc6:	5b                   	pop    ebx
c0001bc7:	c3                   	ret    

c0001bc8 <dlmallinfo>:
c0001bc8:	55                   	push   ebp
c0001bc9:	57                   	push   edi
c0001bca:	56                   	push   esi
c0001bcb:	53                   	push   ebx
c0001bcc:	83 ec 08             	sub    esp,0x8
c0001bcf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001bd3:	83 3d 2c 91 02 c0 00 	cmp    DWORD PTR ds:0xc002912c,0x0
c0001bda:	75 0a                	jne    c0001be6 <dlmallinfo+0x1e>
c0001bdc:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001be1:	e8 86 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001be6:	a1 2c 91 02 c0       	mov    eax,ds:0xc002912c
c0001beb:	31 ed                	xor    ebp,ebp
c0001bed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001bf0:	31 c9                	xor    ecx,ecx
c0001bf2:	83 e0 fc             	and    eax,0xfffffffc
c0001bf5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bf9:	31 c0                	xor    eax,eax
c0001bfb:	8b 14 85 04 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6efc]
c0001c02:	85 d2                	test   edx,edx
c0001c04:	74 0e                	je     c0001c14 <dlmallinfo+0x4c>
c0001c06:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c09:	45                   	inc    ebp
c0001c0a:	83 e6 fc             	and    esi,0xfffffffc
c0001c0d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c10:	01 f1                	add    ecx,esi
c0001c12:	eb ee                	jmp    c0001c02 <dlmallinfo+0x3a>
c0001c14:	40                   	inc    eax
c0001c15:	83 f8 0a             	cmp    eax,0xa
c0001c18:	75 e1                	jne    c0001bfb <dlmallinfo+0x33>
c0001c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c1e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c25:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c28:	b8 34 91 02 c0       	mov    eax,0xc0029134
c0001c2d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c30:	39 f0                	cmp    eax,esi
c0001c32:	74 10                	je     c0001c44 <dlmallinfo+0x7c>
c0001c34:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c37:	ff 04 24             	inc    DWORD PTR [esp]
c0001c3a:	83 e7 fc             	and    edi,0xfffffffc
c0001c3d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c40:	01 fa                	add    edx,edi
c0001c42:	eb ec                	jmp    c0001c30 <dlmallinfo+0x68>
c0001c44:	83 c0 08             	add    eax,0x8
c0001c47:	3d 2c 94 02 c0       	cmp    eax,0xc002942c
c0001c4c:	75 df                	jne    c0001c2d <dlmallinfo+0x65>
c0001c4e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c51:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c54:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c57:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0001c5c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c5f:	89 03                	mov    DWORD PTR [ebx],eax
c0001c61:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001c64:	8b 35 50 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029450
c0001c6a:	29 d0                	sub    eax,edx
c0001c6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c6f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001c72:	8b 35 64 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029464
c0001c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c7c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001c7f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001c82:	8b 35 74 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029474
c0001c88:	89 d8                	mov    eax,ebx
c0001c8a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001c8d:	83 c4 08             	add    esp,0x8
c0001c90:	5b                   	pop    ebx
c0001c91:	5e                   	pop    esi
c0001c92:	5f                   	pop    edi
c0001c93:	5d                   	pop    ebp
c0001c94:	c2 04 00             	ret    0x4

c0001c97 <dlmalloc_stats>:
c0001c97:	83 ec 30             	sub    esp,0x30
c0001c9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001c9e:	50                   	push   eax
c0001c9f:	e8 24 ff ff ff       	call   c0001bc8 <dlmallinfo>
c0001ca4:	83 c4 30             	add    esp,0x30
c0001ca7:	c3                   	ret    

c0001ca8 <dlmallopt>:
c0001ca8:	56                   	push   esi
c0001ca9:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001cae:	53                   	push   ebx
c0001caf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001cb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001cb7:	e8 b0 ef ff ff       	call   c0000c6c <malloc_consolidate>
c0001cbc:	8d 46 04             	lea    eax,[esi+0x4]
c0001cbf:	83 f8 05             	cmp    eax,0x5
c0001cc2:	77 5d                	ja     c0001d21 <dlmallopt+0x79>
c0001cc4:	ff 24 85 84 2a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd57c]
c0001ccb:	83 fb 50             	cmp    ebx,0x50
c0001cce:	77 51                	ja     c0001d21 <dlmallopt+0x79>
c0001cd0:	ba 08 00 00 00       	mov    edx,0x8
c0001cd5:	85 db                	test   ebx,ebx
c0001cd7:	74 12                	je     c0001ceb <dlmallopt+0x43>
c0001cd9:	83 c3 0b             	add    ebx,0xb
c0001cdc:	ba 10 00 00 00       	mov    edx,0x10
c0001ce1:	83 fb 0f             	cmp    ebx,0xf
c0001ce4:	76 05                	jbe    c0001ceb <dlmallopt+0x43>
c0001ce6:	89 da                	mov    edx,ebx
c0001ce8:	83 e2 f8             	and    edx,0xfffffff8
c0001ceb:	a1 00 91 02 c0       	mov    eax,ds:0xc0029100
c0001cf0:	83 e0 03             	and    eax,0x3
c0001cf3:	09 d0                	or     eax,edx
c0001cf5:	a3 00 91 02 c0       	mov    ds:0xc0029100,eax
c0001cfa:	eb 27                	jmp    c0001d23 <dlmallopt+0x7b>
c0001cfc:	89 1d 44 94 02 c0    	mov    DWORD PTR ds:0xc0029444,ebx
c0001d02:	eb 16                	jmp    c0001d1a <dlmallopt+0x72>
c0001d04:	89 1d 48 94 02 c0    	mov    DWORD PTR ds:0xc0029448,ebx
c0001d0a:	eb 0e                	jmp    c0001d1a <dlmallopt+0x72>
c0001d0c:	89 1d 4c 94 02 c0    	mov    DWORD PTR ds:0xc002944c,ebx
c0001d12:	eb 06                	jmp    c0001d1a <dlmallopt+0x72>
c0001d14:	89 1d 54 94 02 c0    	mov    DWORD PTR ds:0xc0029454,ebx
c0001d1a:	be 01 00 00 00       	mov    esi,0x1
c0001d1f:	eb 02                	jmp    c0001d23 <dlmallopt+0x7b>
c0001d21:	31 f6                	xor    esi,esi
c0001d23:	89 f0                	mov    eax,esi
c0001d25:	5b                   	pop    ebx
c0001d26:	5e                   	pop    esi
c0001d27:	c3                   	ret    

c0001d28 <isblank>:
c0001d28:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d2d:	74 09                	je     c0001d38 <isblank+0x10>
c0001d2f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d34:	75 0a                	jne    c0001d40 <isblank+0x18>
c0001d36:	66 90                	xchg   ax,ax
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <iscntrl>:
c0001d48:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d4d:	7e 09                	jle    c0001d58 <iscntrl+0x10>
c0001d4f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d54:	75 0a                	jne    c0001d60 <iscntrl+0x18>
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 01 00 00 00       	mov    eax,0x1
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax
c0001d60:	b8 00 00 00 00       	mov    eax,0x0
c0001d65:	c3                   	ret    
c0001d66:	66 90                	xchg   ax,ax

c0001d68 <isdigit>:
c0001d68:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d6d:	7e 0d                	jle    c0001d7c <isdigit+0x14>
c0001d6f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001d74:	7f 06                	jg     c0001d7c <isdigit+0x14>
c0001d76:	b8 01 00 00 00       	mov    eax,0x1
c0001d7b:	c3                   	ret    
c0001d7c:	b8 00 00 00 00       	mov    eax,0x0
c0001d81:	c3                   	ret    
c0001d82:	66 90                	xchg   ax,ax

c0001d84 <islower>:
c0001d84:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d89:	7e 0d                	jle    c0001d98 <islower+0x14>
c0001d8b:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001d90:	7f 06                	jg     c0001d98 <islower+0x14>
c0001d92:	b8 01 00 00 00       	mov    eax,0x1
c0001d97:	c3                   	ret    
c0001d98:	b8 00 00 00 00       	mov    eax,0x0
c0001d9d:	c3                   	ret    
c0001d9e:	66 90                	xchg   ax,ax

c0001da0 <isspace>:
c0001da0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001da5:	7c 19                	jl     c0001dc0 <isspace+0x20>
c0001da7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001dac:	7e 0a                	jle    c0001db8 <isspace+0x18>
c0001dae:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001db3:	75 0b                	jne    c0001dc0 <isspace+0x20>
c0001db5:	8d 76 00             	lea    esi,[esi+0x0]
c0001db8:	b8 01 00 00 00       	mov    eax,0x1
c0001dbd:	c3                   	ret    
c0001dbe:	66 90                	xchg   ax,ax
c0001dc0:	b8 00 00 00 00       	mov    eax,0x0
c0001dc5:	c3                   	ret    
c0001dc6:	66 90                	xchg   ax,ax

c0001dc8 <isupper>:
c0001dc8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dcd:	7e 0d                	jle    c0001ddc <isupper+0x14>
c0001dcf:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001dd4:	7f 06                	jg     c0001ddc <isupper+0x14>
c0001dd6:	b8 01 00 00 00       	mov    eax,0x1
c0001ddb:	c3                   	ret    
c0001ddc:	b8 00 00 00 00       	mov    eax,0x0
c0001de1:	c3                   	ret    
c0001de2:	66 90                	xchg   ax,ax

c0001de4 <isalpha>:
c0001de4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001de8:	e8 db ff ff ff       	call   c0001dc8 <isupper>
c0001ded:	83 c4 04             	add    esp,0x4
c0001df0:	85 c0                	test   eax,eax
c0001df2:	75 10                	jne    c0001e04 <isalpha+0x20>
c0001df4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001df8:	e8 87 ff ff ff       	call   c0001d84 <islower>
c0001dfd:	83 c4 04             	add    esp,0x4
c0001e00:	85 c0                	test   eax,eax
c0001e02:	74 08                	je     c0001e0c <isalpha+0x28>
c0001e04:	b8 01 00 00 00       	mov    eax,0x1
c0001e09:	c3                   	ret    
c0001e0a:	66 90                	xchg   ax,ax
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalnum>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 c7 ff ff ff       	call   c0001de4 <isalpha>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalnum+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 3b ff ff ff       	call   c0001d68 <isdigit>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalnum+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <ispunct>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalnum>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 28                	jne    c0001e7c <ispunct+0x38>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 43 ff ff ff       	call   c0001da0 <isspace>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	75 18                	jne    c0001e7c <ispunct+0x38>
c0001e64:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e68:	e8 db fe ff ff       	call   c0001d48 <iscntrl>
c0001e6d:	83 c4 04             	add    esp,0x4
c0001e70:	85 c0                	test   eax,eax
c0001e72:	75 08                	jne    c0001e7c <ispunct+0x38>
c0001e74:	b8 01 00 00 00       	mov    eax,0x1
c0001e79:	c3                   	ret    
c0001e7a:	66 90                	xchg   ax,ax
c0001e7c:	b8 00 00 00 00       	mov    eax,0x0
c0001e81:	c3                   	ret    
c0001e82:	66 90                	xchg   ax,ax

c0001e84 <isgraph>:
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 87 ff ff ff       	call   c0001e14 <isalnum>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 10                	jne    c0001ea4 <isgraph+0x20>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 a7 ff ff ff       	call   c0001e44 <ispunct>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	74 08                	je     c0001eac <isgraph+0x28>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isprint>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 c7 ff ff ff       	call   c0001e84 <isgraph>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 08                	jne    c0001ecc <isprint+0x18>
c0001ec4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ec9:	75 09                	jne    c0001ed4 <isprint+0x20>
c0001ecb:	90                   	nop
c0001ecc:	b8 01 00 00 00       	mov    eax,0x1
c0001ed1:	c3                   	ret    
c0001ed2:	66 90                	xchg   ax,ax
c0001ed4:	b8 00 00 00 00       	mov    eax,0x0
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax

c0001edc <isxdigit>:
c0001edc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee0:	e8 83 fe ff ff       	call   c0001d68 <isdigit>
c0001ee5:	83 c4 04             	add    esp,0x4
c0001ee8:	85 c0                	test   eax,eax
c0001eea:	75 20                	jne    c0001f0c <isxdigit+0x30>
c0001eec:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ef1:	7e 09                	jle    c0001efc <isxdigit+0x20>
c0001ef3:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ef8:	7e 12                	jle    c0001f0c <isxdigit+0x30>
c0001efa:	66 90                	xchg   ax,ax
c0001efc:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f01:	7e 11                	jle    c0001f14 <isxdigit+0x38>
c0001f03:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f08:	7f 0a                	jg     c0001f14 <isxdigit+0x38>
c0001f0a:	66 90                	xchg   ax,ax
c0001f0c:	b8 01 00 00 00       	mov    eax,0x1
c0001f11:	c3                   	ret    
c0001f12:	66 90                	xchg   ax,ax
c0001f14:	b8 00 00 00 00       	mov    eax,0x0
c0001f19:	c3                   	ret    
c0001f1a:	66 90                	xchg   ax,ax

c0001f1c <LWIP_PLATFORM_HTONS>:
c0001f1c:	83 ec 04             	sub    esp,0x4
c0001f1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f2b:	c1 e8 08             	shr    eax,0x8
c0001f2e:	89 c2                	mov    edx,eax
c0001f30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f34:	c1 e0 08             	shl    eax,0x8
c0001f37:	09 d0                	or     eax,edx
c0001f39:	83 c4 04             	add    esp,0x4
c0001f3c:	c3                   	ret    
c0001f3d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f40 <LWIP_PLATFORM_HTONL>:
c0001f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f44:	c1 e8 18             	shr    eax,0x18
c0001f47:	89 c2                	mov    edx,eax
c0001f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f4d:	c1 e8 08             	shr    eax,0x8
c0001f50:	25 00 ff 00 00       	and    eax,0xff00
c0001f55:	09 c2                	or     edx,eax
c0001f57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f5b:	c1 e0 08             	shl    eax,0x8
c0001f5e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f63:	09 c2                	or     edx,eax
c0001f65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f69:	c1 e0 18             	shl    eax,0x18
c0001f6c:	09 d0                	or     eax,edx
c0001f6e:	c3                   	ret    

c0001f6f <disk_status>:
c0001f6f:	31 c0                	xor    eax,eax
c0001f71:	c3                   	ret    

c0001f72 <disk_initialize>:
c0001f72:	31 c0                	xor    eax,eax
c0001f74:	c3                   	ret    

c0001f75 <disk_read>:
c0001f75:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f7a:	0f b6 04 85 c0 fb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0440]
c0001f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f86:	e9 51 a2 01 00       	jmp    c001c1dc <fatWrapperReadDisk>

c0001f8b <disk_write>:
c0001f8b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f90:	0f b6 04 85 c0 fb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0440]
c0001f98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f9c:	e9 7b a2 01 00       	jmp    c001c21c <fatWrapperWriteDisk>

c0001fa1 <disk_ioctl>:
c0001fa1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001faa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faf:	0f b6 04 85 c0 fb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0440]
c0001fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fbb:	e9 9c a2 01 00       	jmp    c001c25c <fatWrapperIoctl>

c0001fc0 <ld_word>:
c0001fc0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fc4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fc7:	c1 e2 08             	shl    edx,0x8
c0001fca:	09 d0                	or     eax,edx
c0001fcc:	c3                   	ret    

c0001fcd <ld_dword>:
c0001fcd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001fd1:	89 d1                	mov    ecx,edx
c0001fd3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fd7:	c1 e1 08             	shl    ecx,0x8
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	09 ca                	or     edx,ecx
c0001fdf:	c1 e2 08             	shl    edx,0x8
c0001fe2:	09 d0                	or     eax,edx
c0001fe4:	c3                   	ret    

c0001fe5 <st_word>:
c0001fe5:	66 89 10             	mov    WORD PTR [eax],dx
c0001fe8:	c3                   	ret    

c0001fe9 <st_dword>:
c0001fe9:	89 10                	mov    DWORD PTR [eax],edx
c0001feb:	c3                   	ret    

c0001fec <mem_cpy>:
c0001fec:	85 c9                	test   ecx,ecx
c0001fee:	74 10                	je     c0002000 <mem_cpy+0x14>
c0001ff0:	57                   	push   edi
c0001ff1:	01 c1                	add    ecx,eax
c0001ff3:	56                   	push   esi
c0001ff4:	89 c7                	mov    edi,eax
c0001ff6:	89 d6                	mov    esi,edx
c0001ff8:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ff9:	39 f9                	cmp    ecx,edi
c0001ffb:	75 fb                	jne    c0001ff8 <mem_cpy+0xc>
c0001ffd:	5e                   	pop    esi
c0001ffe:	5f                   	pop    edi
c0001fff:	c3                   	ret    
c0002000:	c3                   	ret    

c0002001 <mem_set>:
c0002001:	01 c1                	add    ecx,eax
c0002003:	40                   	inc    eax
c0002004:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0002007:	39 c8                	cmp    eax,ecx
c0002009:	75 f8                	jne    c0002003 <mem_set+0x2>
c000200b:	c3                   	ret    

c000200c <mem_cmp>:
c000200c:	57                   	push   edi
c000200d:	56                   	push   esi
c000200e:	89 c6                	mov    esi,eax
c0002010:	53                   	push   ebx
c0002011:	46                   	inc    esi
c0002012:	42                   	inc    edx
c0002013:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0002017:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000201b:	29 fb                	sub    ebx,edi
c000201d:	89 cf                	mov    edi,ecx
c000201f:	29 f7                	sub    edi,esi
c0002021:	01 c7                	add    edi,eax
c0002023:	74 04                	je     c0002029 <mem_cmp+0x1d>
c0002025:	85 db                	test   ebx,ebx
c0002027:	74 e8                	je     c0002011 <mem_cmp+0x5>
c0002029:	89 d8                	mov    eax,ebx
c000202b:	5b                   	pop    ebx
c000202c:	5e                   	pop    esi
c000202d:	5f                   	pop    edi
c000202e:	c3                   	ret    

c000202f <chk_chr>:
c000202f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002032:	85 c9                	test   ecx,ecx
c0002034:	74 07                	je     c000203d <chk_chr+0xe>
c0002036:	39 d1                	cmp    ecx,edx
c0002038:	74 03                	je     c000203d <chk_chr+0xe>
c000203a:	40                   	inc    eax
c000203b:	eb f2                	jmp    c000202f <chk_chr>
c000203d:	89 c8                	mov    eax,ecx
c000203f:	c3                   	ret    

c0002040 <dbc_1st>:
c0002040:	31 c0                	xor    eax,eax
c0002042:	c3                   	ret    

c0002043 <dbc_2nd>:
c0002043:	31 c0                	xor    eax,eax
c0002045:	c3                   	ret    

c0002046 <tchar2uni>:
c0002046:	57                   	push   edi
c0002047:	56                   	push   esi
c0002048:	53                   	push   ebx
c0002049:	8b 18                	mov    ebx,DWORD PTR [eax]
c000204b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000204d:	8d 73 01             	lea    esi,[ebx+0x1]
c0002050:	f6 c1 80             	test   cl,0x80
c0002053:	75 0a                	jne    c000205f <tchar2uni+0x19>
c0002055:	0f b6 d1             	movzx  edx,cl
c0002058:	89 f3                	mov    ebx,esi
c000205a:	e9 b2 00 00 00       	jmp    c0002111 <tchar2uni+0xcb>
c000205f:	89 ca                	mov    edx,ecx
c0002061:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002067:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000206d:	89 ca                	mov    edx,ecx
c000206f:	75 0a                	jne    c000207b <tchar2uni+0x35>
c0002071:	83 e2 1f             	and    edx,0x1f
c0002074:	b9 01 00 00 00       	mov    ecx,0x1
c0002079:	eb 37                	jmp    c00020b2 <tchar2uni+0x6c>
c000207b:	81 e2 f0 00 00 00    	and    edx,0xf0
c0002081:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002087:	75 0c                	jne    c0002095 <tchar2uni+0x4f>
c0002089:	89 ca                	mov    edx,ecx
c000208b:	b9 02 00 00 00       	mov    ecx,0x2
c0002090:	83 e2 0f             	and    edx,0xf
c0002093:	eb 1d                	jmp    c00020b2 <tchar2uni+0x6c>
c0002095:	89 cf                	mov    edi,ecx
c0002097:	83 ca ff             	or     edx,0xffffffff
c000209a:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020a0:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020a6:	75 70                	jne    c0002118 <tchar2uni+0xd2>
c00020a8:	89 ca                	mov    edx,ecx
c00020aa:	b9 03 00 00 00       	mov    ecx,0x3
c00020af:	83 e2 07             	and    edx,0x7
c00020b2:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020b6:	46                   	inc    esi
c00020b7:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020ba:	89 cf                	mov    edi,ecx
c00020bc:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020c2:	83 c7 80             	add    edi,0xffffff80
c00020c5:	75 4e                	jne    c0002115 <tchar2uni+0xcf>
c00020c7:	c1 e2 06             	shl    edx,0x6
c00020ca:	83 e1 3f             	and    ecx,0x3f
c00020cd:	09 ca                	or     edx,ecx
c00020cf:	39 de                	cmp    esi,ebx
c00020d1:	75 e3                	jne    c00020b6 <tchar2uni+0x70>
c00020d3:	8d 4a 80             	lea    ecx,[edx-0x80]
c00020d6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c00020dc:	77 37                	ja     c0002115 <tchar2uni+0xcf>
c00020de:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c00020e4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020ea:	76 29                	jbe    c0002115 <tchar2uni+0xcf>
c00020ec:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020f2:	76 1d                	jbe    c0002111 <tchar2uni+0xcb>
c00020f4:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c00020fa:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002100:	c1 e1 06             	shl    ecx,0x6
c0002103:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002109:	09 ca                	or     edx,ecx
c000210b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002111:	89 18                	mov    DWORD PTR [eax],ebx
c0002113:	eb 03                	jmp    c0002118 <tchar2uni+0xd2>
c0002115:	83 ca ff             	or     edx,0xffffffff
c0002118:	5b                   	pop    ebx
c0002119:	89 d0                	mov    eax,edx
c000211b:	5e                   	pop    esi
c000211c:	5f                   	pop    edi
c000211d:	c3                   	ret    

c000211e <put_utf>:
c000211e:	53                   	push   ebx
c000211f:	83 f8 7f             	cmp    eax,0x7f
c0002122:	89 c3                	mov    ebx,eax
c0002124:	b0 00                	mov    al,0x0
c0002126:	77 11                	ja     c0002139 <put_utf+0x1b>
c0002128:	85 c9                	test   ecx,ecx
c000212a:	0f 84 e5 00 00 00    	je     c0002215 <put_utf+0xf7>
c0002130:	88 1a                	mov    BYTE PTR [edx],bl
c0002132:	b0 01                	mov    al,0x1
c0002134:	e9 dc 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002139:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000213f:	77 23                	ja     c0002164 <put_utf+0x46>
c0002141:	83 f9 01             	cmp    ecx,0x1
c0002144:	0f 86 cb 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c000214a:	89 d8                	mov    eax,ebx
c000214c:	83 e3 3f             	and    ebx,0x3f
c000214f:	c1 e8 06             	shr    eax,0x6
c0002152:	83 cb 80             	or     ebx,0xffffff80
c0002155:	83 c8 c0             	or     eax,0xffffffc0
c0002158:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c000215b:	88 02                	mov    BYTE PTR [edx],al
c000215d:	b0 02                	mov    al,0x2
c000215f:	e9 b1 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002164:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c000216a:	77 40                	ja     c00021ac <put_utf+0x8e>
c000216c:	83 f9 02             	cmp    ecx,0x2
c000216f:	0f 86 a0 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002175:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c000217b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002181:	0f 86 8e 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002187:	89 d8                	mov    eax,ebx
c0002189:	c1 e8 0c             	shr    eax,0xc
c000218c:	83 c8 e0             	or     eax,0xffffffe0
c000218f:	88 02                	mov    BYTE PTR [edx],al
c0002191:	89 d8                	mov    eax,ebx
c0002193:	83 e3 3f             	and    ebx,0x3f
c0002196:	c1 e8 06             	shr    eax,0x6
c0002199:	83 cb 80             	or     ebx,0xffffff80
c000219c:	83 e0 3f             	and    eax,0x3f
c000219f:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021a2:	83 c8 80             	or     eax,0xffffff80
c00021a5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021a8:	b0 03                	mov    al,0x3
c00021aa:	eb 69                	jmp    c0002215 <put_utf+0xf7>
c00021ac:	83 f9 03             	cmp    ecx,0x3
c00021af:	76 64                	jbe    c0002215 <put_utf+0xf7>
c00021b1:	89 d9                	mov    ecx,ebx
c00021b3:	0f b7 c3             	movzx  eax,bx
c00021b6:	66 31 c9             	xor    cx,cx
c00021b9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021bf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021c5:	c1 e9 06             	shr    ecx,0x6
c00021c8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c00021ce:	77 43                	ja     c0002213 <put_utf+0xf5>
c00021d0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021d6:	77 3b                	ja     c0002213 <put_utf+0xf5>
c00021d8:	09 cb                	or     ebx,ecx
c00021da:	81 c3 00 00 01 00    	add    ebx,0x10000
c00021e0:	89 d8                	mov    eax,ebx
c00021e2:	c1 e8 12             	shr    eax,0x12
c00021e5:	83 c8 f0             	or     eax,0xfffffff0
c00021e8:	88 02                	mov    BYTE PTR [edx],al
c00021ea:	89 d8                	mov    eax,ebx
c00021ec:	c1 e8 0c             	shr    eax,0xc
c00021ef:	83 e0 3f             	and    eax,0x3f
c00021f2:	83 c8 80             	or     eax,0xffffff80
c00021f5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021f8:	89 d8                	mov    eax,ebx
c00021fa:	83 e3 3f             	and    ebx,0x3f
c00021fd:	c1 e8 06             	shr    eax,0x6
c0002200:	83 cb 80             	or     ebx,0xffffff80
c0002203:	83 e0 3f             	and    eax,0x3f
c0002206:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002209:	83 c8 80             	or     eax,0xffffff80
c000220c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000220f:	b0 04                	mov    al,0x4
c0002211:	eb 02                	jmp    c0002215 <put_utf+0xf7>
c0002213:	31 c0                	xor    eax,eax
c0002215:	5b                   	pop    ebx
c0002216:	c3                   	ret    

c0002217 <clst2sect>:
c0002217:	8d 4a fe             	lea    ecx,[edx-0x2]
c000221a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000221d:	83 ea 02             	sub    edx,0x2
c0002220:	39 ca                	cmp    edx,ecx
c0002222:	76 0d                	jbe    c0002231 <clst2sect+0x1a>
c0002224:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002228:	0f af d1             	imul   edx,ecx
c000222b:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000222e:	89 d0                	mov    eax,edx
c0002230:	c3                   	ret    
c0002231:	31 c0                	xor    eax,eax
c0002233:	c3                   	ret    

c0002234 <pick_lfn>:
c0002234:	55                   	push   ebp
c0002235:	57                   	push   edi
c0002236:	89 c7                	mov    edi,eax
c0002238:	56                   	push   esi
c0002239:	8d 42 1a             	lea    eax,[edx+0x1a]
c000223c:	53                   	push   ebx
c000223d:	89 d3                	mov    ebx,edx
c000223f:	e8 7c fd ff ff       	call   c0001fc0 <ld_word>
c0002244:	66 85 c0             	test   ax,ax
c0002247:	74 04                	je     c000224d <pick_lfn+0x19>
c0002249:	31 c0                	xor    eax,eax
c000224b:	eb 62                	jmp    c00022af <pick_lfn+0x7b>
c000224d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002250:	bd 01 00 00 00       	mov    ebp,0x1
c0002255:	83 e1 bf             	and    ecx,0xffffffbf
c0002258:	31 f6                	xor    esi,esi
c000225a:	49                   	dec    ecx
c000225b:	6b c9 0d             	imul   ecx,ecx,0xd
c000225e:	0f b6 86 e0 2b 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdd420]
c0002265:	01 d8                	add    eax,ebx
c0002267:	e8 54 fd ff ff       	call   c0001fc0 <ld_word>
c000226c:	66 85 ed             	test   bp,bp
c000226f:	74 11                	je     c0002282 <pick_lfn+0x4e>
c0002271:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002277:	77 d0                	ja     c0002249 <pick_lfn+0x15>
c0002279:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c000227d:	89 c5                	mov    ebp,eax
c000227f:	41                   	inc    ecx
c0002280:	eb 0a                	jmp    c000228c <pick_lfn+0x58>
c0002282:	0f b7 c0             	movzx  eax,ax
c0002285:	3d ff ff 00 00       	cmp    eax,0xffff
c000228a:	75 bd                	jne    c0002249 <pick_lfn+0x15>
c000228c:	46                   	inc    esi
c000228d:	83 fe 0d             	cmp    esi,0xd
c0002290:	75 cc                	jne    c000225e <pick_lfn+0x2a>
c0002292:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002295:	74 13                	je     c00022aa <pick_lfn+0x76>
c0002297:	66 85 ed             	test   bp,bp
c000229a:	74 0e                	je     c00022aa <pick_lfn+0x76>
c000229c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a2:	77 a5                	ja     c0002249 <pick_lfn+0x15>
c00022a4:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022aa:	b8 01 00 00 00       	mov    eax,0x1
c00022af:	5b                   	pop    ebx
c00022b0:	5e                   	pop    esi
c00022b1:	5f                   	pop    edi
c00022b2:	5d                   	pop    ebp
c00022b3:	c3                   	ret    

c00022b4 <put_lfn>:
c00022b4:	55                   	push   ebp
c00022b5:	57                   	push   edi
c00022b6:	89 d7                	mov    edi,edx
c00022b8:	56                   	push   esi
c00022b9:	31 f6                	xor    esi,esi
c00022bb:	53                   	push   ebx
c00022bc:	83 ec 0c             	sub    esp,0xc
c00022bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022c3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00022c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00022cb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022d1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00022d4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00022d7:	31 d2                	xor    edx,edx
c00022d9:	e8 07 fd ff ff       	call   c0001fe5 <st_word>
c00022de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00022e5:	0f b6 d9             	movzx  ebx,cl
c00022e8:	4b                   	dec    ebx
c00022e9:	6b db 0d             	imul   ebx,ebx,0xd
c00022ec:	0f b7 c6             	movzx  eax,si
c00022ef:	3d ff ff 00 00       	cmp    eax,0xffff
c00022f4:	74 09                	je     c00022ff <put_lfn+0x4b>
c00022f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022fa:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00022fe:	43                   	inc    ebx
c00022ff:	0f b7 ee             	movzx  ebp,si
c0002302:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002305:	89 ea                	mov    edx,ebp
c0002307:	0f b6 80 e0 2b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd420]
c000230e:	01 f8                	add    eax,edi
c0002310:	e8 d0 fc ff ff       	call   c0001fe5 <st_word>
c0002315:	85 ed                	test   ebp,ebp
c0002317:	75 05                	jne    c000231e <put_lfn+0x6a>
c0002319:	be ff ff 00 00       	mov    esi,0xffff
c000231e:	ff 04 24             	inc    DWORD PTR [esp]
c0002321:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002325:	75 c5                	jne    c00022ec <put_lfn+0x38>
c0002327:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000232d:	74 0b                	je     c000233a <put_lfn+0x86>
c000232f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002333:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002338:	75 07                	jne    c0002341 <put_lfn+0x8d>
c000233a:	83 c9 40             	or     ecx,0x40
c000233d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002341:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002345:	88 07                	mov    BYTE PTR [edi],al
c0002347:	83 c4 0c             	add    esp,0xc
c000234a:	5b                   	pop    ebx
c000234b:	5e                   	pop    esi
c000234c:	5f                   	pop    edi
c000234d:	5d                   	pop    ebp
c000234e:	c3                   	ret    

c000234f <gen_numname>:
c000234f:	57                   	push   edi
c0002350:	89 cf                	mov    edi,ecx
c0002352:	56                   	push   esi
c0002353:	b9 0b 00 00 00       	mov    ecx,0xb
c0002358:	53                   	push   ebx
c0002359:	89 c6                	mov    esi,eax
c000235b:	83 ec 10             	sub    esp,0x10
c000235e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002362:	e8 85 fc ff ff       	call   c0001fec <mem_cpy>
c0002367:	83 fb 05             	cmp    ebx,0x5
c000236a:	76 30                	jbe    c000239c <gen_numname+0x4d>
c000236c:	66 8b 07             	mov    ax,WORD PTR [edi]
c000236f:	66 85 c0             	test   ax,ax
c0002372:	74 28                	je     c000239c <gen_numname+0x4d>
c0002374:	83 c7 02             	add    edi,0x2
c0002377:	ba 10 00 00 00       	mov    edx,0x10
c000237c:	01 db                	add    ebx,ebx
c000237e:	89 c1                	mov    ecx,eax
c0002380:	c1 e0 10             	shl    eax,0x10
c0002383:	83 e1 01             	and    ecx,0x1
c0002386:	c1 e8 11             	shr    eax,0x11
c0002389:	01 cb                	add    ebx,ecx
c000238b:	0f ba e3 10          	bt     ebx,0x10
c000238f:	73 06                	jae    c0002397 <gen_numname+0x48>
c0002391:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002397:	4a                   	dec    edx
c0002398:	75 e2                	jne    c000237c <gen_numname+0x2d>
c000239a:	eb d0                	jmp    c000236c <gen_numname+0x1d>
c000239c:	b8 07 00 00 00       	mov    eax,0x7
c00023a1:	89 d9                	mov    ecx,ebx
c00023a3:	83 e1 0f             	and    ecx,0xf
c00023a6:	8d 79 30             	lea    edi,[ecx+0x30]
c00023a9:	89 fa                	mov    edx,edi
c00023ab:	83 ff 39             	cmp    edi,0x39
c00023ae:	76 03                	jbe    c00023b3 <gen_numname+0x64>
c00023b0:	8d 51 37             	lea    edx,[ecx+0x37]
c00023b3:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023b6:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023ba:	89 da                	mov    edx,ebx
c00023bc:	c1 ea 04             	shr    edx,0x4
c00023bf:	83 fb 0f             	cmp    ebx,0xf
c00023c2:	76 06                	jbe    c00023ca <gen_numname+0x7b>
c00023c4:	89 c8                	mov    eax,ecx
c00023c6:	89 d3                	mov    ebx,edx
c00023c8:	eb d7                	jmp    c00023a1 <gen_numname+0x52>
c00023ca:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023cf:	31 d2                	xor    edx,edx
c00023d1:	8d 58 fe             	lea    ebx,[eax-0x2]
c00023d4:	8d 04 16             	lea    eax,[esi+edx*1]
c00023d7:	39 ca                	cmp    edx,ecx
c00023d9:	73 19                	jae    c00023f4 <gen_numname+0xa5>
c00023db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00023de:	83 f8 20             	cmp    eax,0x20
c00023e1:	74 11                	je     c00023f4 <gen_numname+0xa5>
c00023e3:	e8 58 fc ff ff       	call   c0002040 <dbc_1st>
c00023e8:	85 c0                	test   eax,eax
c00023ea:	74 05                	je     c00023f1 <gen_numname+0xa2>
c00023ec:	39 d3                	cmp    ebx,edx
c00023ee:	74 04                	je     c00023f4 <gen_numname+0xa5>
c00023f0:	42                   	inc    edx
c00023f1:	42                   	inc    edx
c00023f2:	eb e0                	jmp    c00023d4 <gen_numname+0x85>
c00023f4:	b0 20                	mov    al,0x20
c00023f6:	83 f9 07             	cmp    ecx,0x7
c00023f9:	77 05                	ja     c0002400 <gen_numname+0xb1>
c00023fb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00023ff:	41                   	inc    ecx
c0002400:	42                   	inc    edx
c0002401:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002405:	83 fa 07             	cmp    edx,0x7
c0002408:	76 ea                	jbe    c00023f4 <gen_numname+0xa5>
c000240a:	83 c4 10             	add    esp,0x10
c000240d:	5b                   	pop    ebx
c000240e:	5e                   	pop    esi
c000240f:	5f                   	pop    edi
c0002410:	c3                   	ret    

c0002411 <sum_sfn>:
c0002411:	53                   	push   ebx
c0002412:	31 c9                	xor    ecx,ecx
c0002414:	31 db                	xor    ebx,ebx
c0002416:	0f b6 d1             	movzx  edx,cl
c0002419:	c1 e1 07             	shl    ecx,0x7
c000241c:	d1 ea                	shr    edx,1
c000241e:	09 ca                	or     edx,ecx
c0002420:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002423:	43                   	inc    ebx
c0002424:	01 ca                	add    edx,ecx
c0002426:	83 fb 0b             	cmp    ebx,0xb
c0002429:	88 d1                	mov    cl,dl
c000242b:	75 e9                	jne    c0002416 <sum_sfn+0x5>
c000242d:	88 d0                	mov    al,dl
c000242f:	5b                   	pop    ebx
c0002430:	c3                   	ret    

c0002431 <get_ldnumber>:
c0002431:	8b 10                	mov    edx,DWORD PTR [eax]
c0002433:	85 d2                	test   edx,edx
c0002435:	74 14                	je     c000244b <get_ldnumber+0x1a>
c0002437:	56                   	push   esi
c0002438:	53                   	push   ebx
c0002439:	89 d3                	mov    ebx,edx
c000243b:	43                   	inc    ebx
c000243c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000243f:	80 f9 1f             	cmp    cl,0x1f
c0002442:	76 0d                	jbe    c0002451 <get_ldnumber+0x20>
c0002444:	80 f9 3a             	cmp    cl,0x3a
c0002447:	75 f2                	jne    c000243b <get_ldnumber+0xa>
c0002449:	eb 0a                	jmp    c0002455 <get_ldnumber+0x24>
c000244b:	83 c9 ff             	or     ecx,0xffffffff
c000244e:	89 c8                	mov    eax,ecx
c0002450:	c3                   	ret    
c0002451:	31 c9                	xor    ecx,ecx
c0002453:	eb 24                	jmp    c0002479 <get_ldnumber+0x48>
c0002455:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002458:	8d 4e d0             	lea    ecx,[esi-0x30]
c000245b:	80 f9 09             	cmp    cl,0x9
c000245e:	77 16                	ja     c0002476 <get_ldnumber+0x45>
c0002460:	83 c2 02             	add    edx,0x2
c0002463:	83 c9 ff             	or     ecx,0xffffffff
c0002466:	39 d3                	cmp    ebx,edx
c0002468:	75 0f                	jne    c0002479 <get_ldnumber+0x48>
c000246a:	89 f2                	mov    edx,esi
c000246c:	89 18                	mov    DWORD PTR [eax],ebx
c000246e:	0f be ca             	movsx  ecx,dl
c0002471:	83 e9 30             	sub    ecx,0x30
c0002474:	eb 03                	jmp    c0002479 <get_ldnumber+0x48>
c0002476:	83 c9 ff             	or     ecx,0xffffffff
c0002479:	89 c8                	mov    eax,ecx
c000247b:	5b                   	pop    ebx
c000247c:	5e                   	pop    esi
c000247d:	c3                   	ret    

c000247e <validate>:
c000247e:	56                   	push   esi
c000247f:	53                   	push   ebx
c0002480:	89 d6                	mov    esi,edx
c0002482:	51                   	push   ecx
c0002483:	85 c0                	test   eax,eax
c0002485:	75 09                	jne    c0002490 <validate+0x12>
c0002487:	b8 09 00 00 00       	mov    eax,0x9
c000248c:	31 c9                	xor    ecx,ecx
c000248e:	eb 2e                	jmp    c00024be <validate+0x40>
c0002490:	89 c3                	mov    ebx,eax
c0002492:	8b 00                	mov    eax,DWORD PTR [eax]
c0002494:	85 c0                	test   eax,eax
c0002496:	74 ef                	je     c0002487 <validate+0x9>
c0002498:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000249b:	74 ea                	je     c0002487 <validate+0x9>
c000249d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024a0:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024a4:	75 e1                	jne    c0002487 <validate+0x9>
c00024a6:	83 ec 0c             	sub    esp,0xc
c00024a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024ad:	50                   	push   eax
c00024ae:	e8 bc fa ff ff       	call   c0001f6f <disk_status>
c00024b3:	83 c4 10             	add    esp,0x10
c00024b6:	a8 01                	test   al,0x1
c00024b8:	75 cd                	jne    c0002487 <validate+0x9>
c00024ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024bc:	31 c0                	xor    eax,eax
c00024be:	89 0e                	mov    DWORD PTR [esi],ecx
c00024c0:	5a                   	pop    edx
c00024c1:	5b                   	pop    ebx
c00024c2:	5e                   	pop    esi
c00024c3:	c3                   	ret    

c00024c4 <sync_window>:
c00024c4:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024c8:	74 58                	je     c0002522 <sync_window+0x5e>
c00024ca:	56                   	push   esi
c00024cb:	53                   	push   ebx
c00024cc:	8d 70 34             	lea    esi,[eax+0x34]
c00024cf:	51                   	push   ecx
c00024d0:	89 c3                	mov    ebx,eax
c00024d2:	6a 01                	push   0x1
c00024d4:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00024d7:	56                   	push   esi
c00024d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024dc:	50                   	push   eax
c00024dd:	e8 a9 fa ff ff       	call   c0001f8b <disk_write>
c00024e2:	83 c4 10             	add    esp,0x10
c00024e5:	ba 01 00 00 00       	mov    edx,0x1
c00024ea:	85 c0                	test   eax,eax
c00024ec:	75 2e                	jne    c000251c <sync_window+0x58>
c00024ee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024f1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00024f4:	89 c1                	mov    ecx,eax
c00024f6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00024fa:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00024fd:	39 d1                	cmp    ecx,edx
c00024ff:	73 19                	jae    c000251a <sync_window+0x56>
c0002501:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002505:	75 13                	jne    c000251a <sync_window+0x56>
c0002507:	6a 01                	push   0x1
c0002509:	01 d0                	add    eax,edx
c000250b:	50                   	push   eax
c000250c:	56                   	push   esi
c000250d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002511:	50                   	push   eax
c0002512:	e8 74 fa ff ff       	call   c0001f8b <disk_write>
c0002517:	83 c4 10             	add    esp,0x10
c000251a:	31 d2                	xor    edx,edx
c000251c:	89 d0                	mov    eax,edx
c000251e:	5a                   	pop    edx
c000251f:	5b                   	pop    ebx
c0002520:	5e                   	pop    esi
c0002521:	c3                   	ret    
c0002522:	31 d2                	xor    edx,edx
c0002524:	89 d0                	mov    eax,edx
c0002526:	c3                   	ret    

c0002527 <move_window>:
c0002527:	57                   	push   edi
c0002528:	56                   	push   esi
c0002529:	31 f6                	xor    esi,esi
c000252b:	53                   	push   ebx
c000252c:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000252f:	74 32                	je     c0002563 <move_window+0x3c>
c0002531:	89 c3                	mov    ebx,eax
c0002533:	89 d7                	mov    edi,edx
c0002535:	e8 8a ff ff ff       	call   c00024c4 <sync_window>
c000253a:	89 c6                	mov    esi,eax
c000253c:	85 c0                	test   eax,eax
c000253e:	75 23                	jne    c0002563 <move_window+0x3c>
c0002540:	6a 01                	push   0x1
c0002542:	8d 43 34             	lea    eax,[ebx+0x34]
c0002545:	57                   	push   edi
c0002546:	50                   	push   eax
c0002547:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000254b:	50                   	push   eax
c000254c:	e8 24 fa ff ff       	call   c0001f75 <disk_read>
c0002551:	83 c4 10             	add    esp,0x10
c0002554:	85 c0                	test   eax,eax
c0002556:	74 08                	je     c0002560 <move_window+0x39>
c0002558:	be 01 00 00 00       	mov    esi,0x1
c000255d:	83 cf ff             	or     edi,0xffffffff
c0002560:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002563:	89 f0                	mov    eax,esi
c0002565:	5b                   	pop    ebx
c0002566:	5e                   	pop    esi
c0002567:	5f                   	pop    edi
c0002568:	c3                   	ret    

c0002569 <check_fs>:
c0002569:	53                   	push   ebx
c000256a:	89 c3                	mov    ebx,eax
c000256c:	83 ec 08             	sub    esp,0x8
c000256f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002573:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000257a:	e8 a8 ff ff ff       	call   c0002527 <move_window>
c000257f:	ba 04 00 00 00       	mov    edx,0x4
c0002584:	85 c0                	test   eax,eax
c0002586:	75 68                	jne    c00025f0 <check_fs+0x87>
c0002588:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000258e:	e8 2d fa ff ff       	call   c0001fc0 <ld_word>
c0002593:	ba 03 00 00 00       	mov    edx,0x3
c0002598:	66 3d 55 aa          	cmp    ax,0xaa55
c000259c:	75 52                	jne    c00025f0 <check_fs+0x87>
c000259e:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025a1:	8d 50 18             	lea    edx,[eax+0x18]
c00025a4:	80 fa 01             	cmp    dl,0x1
c00025a7:	76 09                	jbe    c00025b2 <check_fs+0x49>
c00025a9:	ba 02 00 00 00       	mov    edx,0x2
c00025ae:	3c eb                	cmp    al,0xeb
c00025b0:	75 3e                	jne    c00025f0 <check_fs+0x87>
c00025b2:	ba 8c 5e 02 c0       	mov    edx,0xc0025e8c
c00025b7:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025ba:	b9 03 00 00 00       	mov    ecx,0x3
c00025bf:	e8 48 fa ff ff       	call   c000200c <mem_cmp>
c00025c4:	31 d2                	xor    edx,edx
c00025c6:	85 c0                	test   eax,eax
c00025c8:	74 26                	je     c00025f0 <check_fs+0x87>
c00025ca:	ba 9c 2a 02 c0       	mov    edx,0xc0022a9c
c00025cf:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00025d5:	b9 05 00 00 00       	mov    ecx,0x5
c00025da:	e8 2d fa ff ff       	call   c000200c <mem_cmp>
c00025df:	31 d2                	xor    edx,edx
c00025e1:	85 c0                	test   eax,eax
c00025e3:	74 0b                	je     c00025f0 <check_fs+0x87>
c00025e5:	31 d2                	xor    edx,edx
c00025e7:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00025eb:	0f 95 c2             	setne  dl
c00025ee:	01 d2                	add    edx,edx
c00025f0:	89 d0                	mov    eax,edx
c00025f2:	83 c4 08             	add    esp,0x8
c00025f5:	5b                   	pop    ebx
c00025f6:	c3                   	ret    

c00025f7 <find_volume>:
c00025f7:	55                   	push   ebp
c00025f8:	57                   	push   edi
c00025f9:	56                   	push   esi
c00025fa:	89 c6                	mov    esi,eax
c00025fc:	53                   	push   ebx
c00025fd:	89 d3                	mov    ebx,edx
c00025ff:	83 ec 2c             	sub    esp,0x2c
c0002602:	31 d2                	xor    edx,edx
c0002604:	e8 60 ff ff ff       	call   c0002569 <check_fs>
c0002609:	83 f8 02             	cmp    eax,0x2
c000260c:	74 06                	je     c0002614 <find_volume+0x1d>
c000260e:	77 62                	ja     c0002672 <find_volume+0x7b>
c0002610:	85 db                	test   ebx,ebx
c0002612:	74 5e                	je     c0002672 <find_volume+0x7b>
c0002614:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002618:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000261e:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002624:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002628:	89 cf                	mov    edi,ecx
c000262a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000262e:	89 e8                	mov    eax,ebp
c0002630:	83 c5 10             	add    ebp,0x10
c0002633:	e8 95 f9 ff ff       	call   c0001fcd <ld_dword>
c0002638:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000263c:	89 01                	mov    DWORD PTR [ecx],eax
c000263e:	83 c1 04             	add    ecx,0x4
c0002641:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002645:	75 e3                	jne    c000262a <find_volume+0x33>
c0002647:	31 ed                	xor    ebp,ebp
c0002649:	85 db                	test   ebx,ebx
c000264b:	74 03                	je     c0002650 <find_volume+0x59>
c000264d:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002650:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002653:	b8 03 00 00 00       	mov    eax,0x3
c0002658:	85 d2                	test   edx,edx
c000265a:	74 0c                	je     c0002668 <find_volume+0x71>
c000265c:	89 f0                	mov    eax,esi
c000265e:	e8 06 ff ff ff       	call   c0002569 <check_fs>
c0002663:	83 f8 01             	cmp    eax,0x1
c0002666:	76 0a                	jbe    c0002672 <find_volume+0x7b>
c0002668:	85 db                	test   ebx,ebx
c000266a:	75 06                	jne    c0002672 <find_volume+0x7b>
c000266c:	45                   	inc    ebp
c000266d:	83 fd 03             	cmp    ebp,0x3
c0002670:	76 de                	jbe    c0002650 <find_volume+0x59>
c0002672:	83 c4 2c             	add    esp,0x2c
c0002675:	5b                   	pop    ebx
c0002676:	5e                   	pop    esi
c0002677:	5f                   	pop    edi
c0002678:	5d                   	pop    ebp
c0002679:	c3                   	ret    

c000267a <mount_volume>:
c000267a:	55                   	push   ebp
c000267b:	89 d5                	mov    ebp,edx
c000267d:	57                   	push   edi
c000267e:	89 cf                	mov    edi,ecx
c0002680:	56                   	push   esi
c0002681:	53                   	push   ebx
c0002682:	bb 0b 00 00 00       	mov    ebx,0xb
c0002687:	83 ec 1c             	sub    esp,0x1c
c000268a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002690:	e8 9c fd ff ff       	call   c0002431 <get_ldnumber>
c0002695:	85 c0                	test   eax,eax
c0002697:	0f 88 c4 02 00 00    	js     c0002961 <mount_volume+0x2e7>
c000269d:	8b 34 85 a0 94 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd6b60]
c00026a4:	89 c2                	mov    edx,eax
c00026a6:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ab:	85 f6                	test   esi,esi
c00026ad:	0f 84 ae 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026b3:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026b6:	83 e7 fe             	and    edi,0xfffffffe
c00026b9:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026bc:	74 3a                	je     c00026f8 <mount_volume+0x7e>
c00026be:	89 04 24             	mov    DWORD PTR [esp],eax
c00026c1:	83 ec 0c             	sub    esp,0xc
c00026c4:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026c8:	50                   	push   eax
c00026c9:	e8 a1 f8 ff ff       	call   c0001f6f <disk_status>
c00026ce:	83 c4 10             	add    esp,0x10
c00026d1:	a8 01                	test   al,0x1
c00026d3:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00026d6:	75 20                	jne    c00026f8 <mount_volume+0x7e>
c00026d8:	31 db                	xor    ebx,ebx
c00026da:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026e0:	0f 84 7b 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026e6:	a8 04                	test   al,0x4
c00026e8:	0f 84 73 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026ee:	bb 0a 00 00 00       	mov    ebx,0xa
c00026f3:	e9 69 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c00026f8:	83 ec 0c             	sub    esp,0xc
c00026fb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00026fe:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002701:	0f b6 c2             	movzx  eax,dl
c0002704:	bb 03 00 00 00       	mov    ebx,0x3
c0002709:	50                   	push   eax
c000270a:	e8 63 f8 ff ff       	call   c0001f72 <disk_initialize>
c000270f:	83 c4 10             	add    esp,0x10
c0002712:	a8 01                	test   al,0x1
c0002714:	0f 85 47 02 00 00    	jne    c0002961 <mount_volume+0x2e7>
c000271a:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002720:	74 04                	je     c0002726 <mount_volume+0xac>
c0002722:	a8 04                	test   al,0x4
c0002724:	75 c8                	jne    c00026ee <mount_volume+0x74>
c0002726:	31 d2                	xor    edx,edx
c0002728:	89 f0                	mov    eax,esi
c000272a:	bb 01 00 00 00       	mov    ebx,0x1
c000272f:	e8 c3 fe ff ff       	call   c00025f7 <find_volume>
c0002734:	83 f8 04             	cmp    eax,0x4
c0002737:	0f 84 24 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c000273d:	83 f8 01             	cmp    eax,0x1
c0002740:	76 0a                	jbe    c000274c <mount_volume+0xd2>
c0002742:	bb 0d 00 00 00       	mov    ebx,0xd
c0002747:	e9 15 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c000274c:	8d 46 3f             	lea    eax,[esi+0x3f]
c000274f:	e8 6c f8 ff ff       	call   c0001fc0 <ld_word>
c0002754:	66 3d 00 02          	cmp    ax,0x200
c0002758:	75 e8                	jne    c0002742 <mount_volume+0xc8>
c000275a:	8d 46 4a             	lea    eax,[esi+0x4a]
c000275d:	e8 5e f8 ff ff       	call   c0001fc0 <ld_word>
c0002762:	0f b7 c0             	movzx  eax,ax
c0002765:	89 04 24             	mov    DWORD PTR [esp],eax
c0002768:	85 c0                	test   eax,eax
c000276a:	75 0b                	jne    c0002777 <mount_volume+0xfd>
c000276c:	8d 46 58             	lea    eax,[esi+0x58]
c000276f:	e8 59 f8 ff ff       	call   c0001fcd <ld_dword>
c0002774:	89 04 24             	mov    DWORD PTR [esp],eax
c0002777:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000277a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000277e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002781:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002784:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c0002787:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000278b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000278e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002792:	48                   	dec    eax
c0002793:	3c 01                	cmp    al,0x1
c0002795:	77 ab                	ja     c0002742 <mount_volume+0xc8>
c0002797:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c000279b:	89 c3                	mov    ebx,eax
c000279d:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027a1:	66 85 c0             	test   ax,ax
c00027a4:	74 9c                	je     c0002742 <mount_volume+0xc8>
c00027a6:	8d 40 ff             	lea    eax,[eax-0x1]
c00027a9:	85 d8                	test   eax,ebx
c00027ab:	75 95                	jne    c0002742 <mount_volume+0xc8>
c00027ad:	8d 46 45             	lea    eax,[esi+0x45]
c00027b0:	e8 0b f8 ff ff       	call   c0001fc0 <ld_word>
c00027b5:	89 c7                	mov    edi,eax
c00027b7:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027bb:	a8 0f                	test   al,0xf
c00027bd:	75 83                	jne    c0002742 <mount_volume+0xc8>
c00027bf:	8d 46 47             	lea    eax,[esi+0x47]
c00027c2:	e8 f9 f7 ff ff       	call   c0001fc0 <ld_word>
c00027c7:	0f b7 e8             	movzx  ebp,ax
c00027ca:	85 ed                	test   ebp,ebp
c00027cc:	75 0a                	jne    c00027d8 <mount_volume+0x15e>
c00027ce:	8d 46 54             	lea    eax,[esi+0x54]
c00027d1:	e8 f7 f7 ff ff       	call   c0001fcd <ld_dword>
c00027d6:	89 c5                	mov    ebp,eax
c00027d8:	8d 46 42             	lea    eax,[esi+0x42]
c00027db:	e8 e0 f7 ff ff       	call   c0001fc0 <ld_word>
c00027e0:	0f b7 c8             	movzx  ecx,ax
c00027e3:	85 c9                	test   ecx,ecx
c00027e5:	0f 84 57 ff ff ff    	je     c0002742 <mount_volume+0xc8>
c00027eb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00027f0:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c00027f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027f8:	0f b7 c7             	movzx  eax,di
c00027fb:	c1 e8 04             	shr    eax,0x4
c00027fe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002802:	01 c8                	add    eax,ecx
c0002804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002808:	39 c5                	cmp    ebp,eax
c000280a:	0f 82 32 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002810:	29 c5                	sub    ebp,eax
c0002812:	31 d2                	xor    edx,edx
c0002814:	89 e8                	mov    eax,ebp
c0002816:	f7 f3                	div    ebx
c0002818:	39 dd                	cmp    ebp,ebx
c000281a:	0f 82 22 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002820:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002825:	0f 87 17 ff ff ff    	ja     c0002742 <mount_volume+0xc8>
c000282b:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002830:	0f 86 1c 01 00 00    	jbe    c0002952 <mount_volume+0x2d8>
c0002836:	bb 03 00 00 00       	mov    ebx,0x3
c000283b:	8d 68 02             	lea    ebp,[eax+0x2]
c000283e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002846:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c000284a:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000284d:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002850:	01 c8                	add    eax,ecx
c0002852:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002855:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002858:	83 fb 03             	cmp    ebx,0x3
c000285b:	75 23                	jne    c0002880 <mount_volume+0x206>
c000285d:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002860:	e8 5b f7 ff ff       	call   c0001fc0 <ld_word>
c0002865:	09 c7                	or     edi,eax
c0002867:	66 85 ff             	test   di,di
c000286a:	0f 85 d2 fe ff ff    	jne    c0002742 <mount_volume+0xc8>
c0002870:	8d 46 60             	lea    eax,[esi+0x60]
c0002873:	c1 e5 02             	shl    ebp,0x2
c0002876:	e8 52 f7 ff ff       	call   c0001fcd <ld_dword>
c000287b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000287e:	eb 24                	jmp    c00028a4 <mount_volume+0x22a>
c0002880:	66 85 ff             	test   di,di
c0002883:	0f 84 b9 fe ff ff    	je     c0002742 <mount_volume+0xc8>
c0002889:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000288d:	83 fb 02             	cmp    ebx,0x2
c0002890:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002893:	75 04                	jne    c0002899 <mount_volume+0x21f>
c0002895:	01 ed                	add    ebp,ebp
c0002897:	eb 0b                	jmp    c00028a4 <mount_volume+0x22a>
c0002899:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c000289d:	83 e5 01             	and    ebp,0x1
c00028a0:	d1 e8                	shr    eax,1
c00028a2:	01 c5                	add    ebp,eax
c00028a4:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028aa:	c1 ed 09             	shr    ebp,0x9
c00028ad:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00028b0:	0f 87 8c fe ff ff    	ja     c0002742 <mount_volume+0xc8>
c00028b6:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00028bd:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00028c4:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00028c8:	83 fb 03             	cmp    ebx,0x3
c00028cb:	75 6e                	jne    c000293b <mount_volume+0x2c1>
c00028cd:	8d 46 64             	lea    eax,[esi+0x64]
c00028d0:	e8 eb f6 ff ff       	call   c0001fc0 <ld_word>
c00028d5:	66 48                	dec    ax
c00028d7:	75 62                	jne    c000293b <mount_volume+0x2c1>
c00028d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	42                   	inc    edx
c00028e0:	e8 42 fc ff ff       	call   c0002527 <move_window>
c00028e5:	85 c0                	test   eax,eax
c00028e7:	75 52                	jne    c000293b <mount_volume+0x2c1>
c00028e9:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00028ed:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00028f3:	e8 c8 f6 ff ff       	call   c0001fc0 <ld_word>
c00028f8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028fc:	75 3d                	jne    c000293b <mount_volume+0x2c1>
c00028fe:	8d 46 34             	lea    eax,[esi+0x34]
c0002901:	e8 c7 f6 ff ff       	call   c0001fcd <ld_dword>
c0002906:	3d 52 52 61 41       	cmp    eax,0x41615252
c000290b:	75 2e                	jne    c000293b <mount_volume+0x2c1>
c000290d:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002913:	e8 b5 f6 ff ff       	call   c0001fcd <ld_dword>
c0002918:	3d 72 72 41 61       	cmp    eax,0x61417272
c000291d:	75 1c                	jne    c000293b <mount_volume+0x2c1>
c000291f:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002925:	e8 a3 f6 ff ff       	call   c0001fcd <ld_dword>
c000292a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000292d:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002933:	e8 95 f6 ff ff       	call   c0001fcd <ld_dword>
c0002938:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000293b:	66 a1 80 94 02 c0    	mov    ax,ds:0xc0029480
c0002941:	88 1e                	mov    BYTE PTR [esi],bl
c0002943:	40                   	inc    eax
c0002944:	31 db                	xor    ebx,ebx
c0002946:	66 a3 80 94 02 c0    	mov    ds:0xc0029480,ax
c000294c:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002950:	eb 0f                	jmp    c0002961 <mount_volume+0x2e7>
c0002952:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002957:	19 db                	sbb    ebx,ebx
c0002959:	83 c3 02             	add    ebx,0x2
c000295c:	e9 da fe ff ff       	jmp    c000283b <mount_volume+0x1c1>
c0002961:	83 c4 1c             	add    esp,0x1c
c0002964:	89 d8                	mov    eax,ebx
c0002966:	5b                   	pop    ebx
c0002967:	5e                   	pop    esi
c0002968:	5f                   	pop    edi
c0002969:	5d                   	pop    ebp
c000296a:	c3                   	ret    

c000296b <put_fat>:
c000296b:	55                   	push   ebp
c000296c:	bd 02 00 00 00       	mov    ebp,0x2
c0002971:	57                   	push   edi
c0002972:	56                   	push   esi
c0002973:	53                   	push   ebx
c0002974:	83 ec 1c             	sub    esp,0x1c
c0002977:	83 fa 01             	cmp    edx,0x1
c000297a:	0f 86 38 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002980:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002983:	0f 86 2f 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002989:	89 c6                	mov    esi,eax
c000298b:	89 cf                	mov    edi,ecx
c000298d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002990:	89 d3                	mov    ebx,edx
c0002992:	83 f8 02             	cmp    eax,0x2
c0002995:	0f 84 b1 00 00 00    	je     c0002a4c <put_fat+0xe1>
c000299b:	83 f8 03             	cmp    eax,0x3
c000299e:	0f 84 d5 00 00 00    	je     c0002a79 <put_fat+0x10e>
c00029a4:	48                   	dec    eax
c00029a5:	0f 85 0d 01 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ab:	89 d1                	mov    ecx,edx
c00029ad:	89 f0                	mov    eax,esi
c00029af:	d1 e9                	shr    ecx,1
c00029b1:	01 d1                	add    ecx,edx
c00029b3:	89 ca                	mov    edx,ecx
c00029b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029b9:	c1 ea 09             	shr    edx,0x9
c00029bc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029bf:	e8 63 fb ff ff       	call   c0002527 <move_window>
c00029c4:	89 c5                	mov    ebp,eax
c00029c6:	85 c0                	test   eax,eax
c00029c8:	0f 85 ea 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029d2:	8d 46 34             	lea    eax,[esi+0x34]
c00029d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029d9:	8d 41 01             	lea    eax,[ecx+0x1]
c00029dc:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00029e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029e6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00029ea:	89 f8                	mov    eax,edi
c00029ec:	83 e3 01             	and    ebx,0x1
c00029ef:	74 11                	je     c0002a02 <put_fat+0x97>
c00029f1:	8a 11                	mov    dl,BYTE PTR [ecx]
c00029f3:	89 f8                	mov    eax,edi
c00029f5:	83 e2 0f             	and    edx,0xf
c00029f8:	c1 e0 04             	shl    eax,0x4
c00029fb:	25 f0 0f 00 00       	and    eax,0xff0
c0002a00:	09 d0                	or     eax,edx
c0002a02:	88 01                	mov    BYTE PTR [ecx],al
c0002a04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a0c:	c1 ea 09             	shr    edx,0x9
c0002a0f:	89 f0                	mov    eax,esi
c0002a11:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a14:	e8 0e fb ff ff       	call   c0002527 <move_window>
c0002a19:	89 c5                	mov    ebp,eax
c0002a1b:	85 c0                	test   eax,eax
c0002a1d:	0f 85 95 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c0002a23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a27:	25 ff 01 00 00       	and    eax,0x1ff
c0002a2c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a30:	85 db                	test   ebx,ebx
c0002a32:	74 07                	je     c0002a3b <put_fat+0xd0>
c0002a34:	c1 ef 04             	shr    edi,0x4
c0002a37:	89 f9                	mov    ecx,edi
c0002a39:	eb 0d                	jmp    c0002a48 <put_fat+0xdd>
c0002a3b:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a3d:	c1 ef 08             	shr    edi,0x8
c0002a40:	83 e1 f0             	and    ecx,0xfffffff0
c0002a43:	83 e7 0f             	and    edi,0xf
c0002a46:	09 f9                	or     ecx,edi
c0002a48:	88 08                	mov    BYTE PTR [eax],cl
c0002a4a:	eb 27                	jmp    c0002a73 <put_fat+0x108>
c0002a4c:	c1 ea 08             	shr    edx,0x8
c0002a4f:	89 f0                	mov    eax,esi
c0002a51:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a54:	e8 ce fa ff ff       	call   c0002527 <move_window>
c0002a59:	89 c5                	mov    ebp,eax
c0002a5b:	85 c0                	test   eax,eax
c0002a5d:	75 59                	jne    c0002ab8 <put_fat+0x14d>
c0002a5f:	01 db                	add    ebx,ebx
c0002a61:	0f b7 d7             	movzx  edx,di
c0002a64:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002a6a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002a6e:	e8 72 f5 ff ff       	call   c0001fe5 <st_word>
c0002a73:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a77:	eb 3f                	jmp    c0002ab8 <put_fat+0x14d>
c0002a79:	c1 ea 07             	shr    edx,0x7
c0002a7c:	89 f0                	mov    eax,esi
c0002a7e:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a81:	e8 a1 fa ff ff       	call   c0002527 <move_window>
c0002a86:	89 c5                	mov    ebp,eax
c0002a88:	85 c0                	test   eax,eax
c0002a8a:	75 2c                	jne    c0002ab8 <put_fat+0x14d>
c0002a8c:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002a92:	c1 e3 02             	shl    ebx,0x2
c0002a95:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002a9b:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002a9f:	89 d8                	mov    eax,ebx
c0002aa1:	e8 27 f5 ff ff       	call   c0001fcd <ld_dword>
c0002aa6:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aab:	09 f8                	or     eax,edi
c0002aad:	89 c2                	mov    edx,eax
c0002aaf:	89 d8                	mov    eax,ebx
c0002ab1:	e8 33 f5 ff ff       	call   c0001fe9 <st_dword>
c0002ab6:	eb bb                	jmp    c0002a73 <put_fat+0x108>
c0002ab8:	83 c4 1c             	add    esp,0x1c
c0002abb:	89 e8                	mov    eax,ebp
c0002abd:	5b                   	pop    ebx
c0002abe:	5e                   	pop    esi
c0002abf:	5f                   	pop    edi
c0002ac0:	5d                   	pop    ebp
c0002ac1:	c3                   	ret    

c0002ac2 <dir_clear>:
c0002ac2:	55                   	push   ebp
c0002ac3:	57                   	push   edi
c0002ac4:	56                   	push   esi
c0002ac5:	89 c6                	mov    esi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	83 ec 1c             	sub    esp,0x1c
c0002acb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002acf:	e8 f0 f9 ff ff       	call   c00024c4 <sync_window>
c0002ad4:	85 c0                	test   eax,eax
c0002ad6:	0f 85 c0 00 00 00    	jne    c0002b9c <dir_clear+0xda>
c0002adc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ae0:	89 f0                	mov    eax,esi
c0002ae2:	e8 30 f7 ff ff       	call   c0002217 <clst2sect>
c0002ae7:	31 d2                	xor    edx,edx
c0002ae9:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002aec:	89 c5                	mov    ebp,eax
c0002aee:	b9 00 02 00 00       	mov    ecx,0x200
c0002af3:	8d 46 34             	lea    eax,[esi+0x34]
c0002af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002afa:	e8 02 f5 ff ff       	call   c0002001 <mem_set>
c0002aff:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b03:	c1 e3 09             	shl    ebx,0x9
c0002b06:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b0c:	76 1b                	jbe    c0002b29 <dir_clear+0x67>
c0002b0e:	bb 00 80 00 00       	mov    ebx,0x8000
c0002b13:	eb 14                	jmp    c0002b29 <dir_clear+0x67>
c0002b15:	83 ec 0c             	sub    esp,0xc
c0002b18:	53                   	push   ebx
c0002b19:	e8 ea 32 00 00       	call   c0005e08 <ff_memalloc>
c0002b1e:	83 c4 10             	add    esp,0x10
c0002b21:	89 c7                	mov    edi,eax
c0002b23:	85 c0                	test   eax,eax
c0002b25:	75 7c                	jne    c0002ba3 <dir_clear+0xe1>
c0002b27:	d1 eb                	shr    ebx,1
c0002b29:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b2f:	77 e4                	ja     c0002b15 <dir_clear+0x53>
c0002b31:	31 db                	xor    ebx,ebx
c0002b33:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b37:	39 d8                	cmp    eax,ebx
c0002b39:	76 53                	jbe    c0002b8e <dir_clear+0xcc>
c0002b3b:	6a 01                	push   0x1
c0002b3d:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b40:	50                   	push   eax
c0002b41:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b49:	50                   	push   eax
c0002b4a:	e8 3c f4 ff ff       	call   c0001f8b <disk_write>
c0002b4f:	83 c4 10             	add    esp,0x10
c0002b52:	85 c0                	test   eax,eax
c0002b54:	75 38                	jne    c0002b8e <dir_clear+0xcc>
c0002b56:	43                   	inc    ebx
c0002b57:	eb da                	jmp    c0002b33 <dir_clear+0x71>
c0002b59:	52                   	push   edx
c0002b5a:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b61:	50                   	push   eax
c0002b62:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b66:	57                   	push   edi
c0002b67:	50                   	push   eax
c0002b68:	e8 1e f4 ff ff       	call   c0001f8b <disk_write>
c0002b6d:	83 c4 10             	add    esp,0x10
c0002b70:	85 c0                	test   eax,eax
c0002b72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b76:	75 0a                	jne    c0002b82 <dir_clear+0xc0>
c0002b78:	01 d3                	add    ebx,edx
c0002b7a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7e:	39 d8                	cmp    eax,ebx
c0002b80:	77 d7                	ja     c0002b59 <dir_clear+0x97>
c0002b82:	83 ec 0c             	sub    esp,0xc
c0002b85:	57                   	push   edi
c0002b86:	e8 95 32 00 00       	call   c0005e20 <ff_memfree>
c0002b8b:	83 c4 10             	add    esp,0x10
c0002b8e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b92:	39 d8                	cmp    eax,ebx
c0002b94:	0f 95 c0             	setne  al
c0002b97:	0f b6 c0             	movzx  eax,al
c0002b9a:	eb 19                	jmp    c0002bb5 <dir_clear+0xf3>
c0002b9c:	b8 01 00 00 00       	mov    eax,0x1
c0002ba1:	eb 12                	jmp    c0002bb5 <dir_clear+0xf3>
c0002ba3:	89 d9                	mov    ecx,ebx
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	e8 55 f4 ff ff       	call   c0002001 <mem_set>
c0002bac:	89 da                	mov    edx,ebx
c0002bae:	31 db                	xor    ebx,ebx
c0002bb0:	c1 ea 09             	shr    edx,0x9
c0002bb3:	eb c5                	jmp    c0002b7a <dir_clear+0xb8>
c0002bb5:	83 c4 1c             	add    esp,0x1c
c0002bb8:	5b                   	pop    ebx
c0002bb9:	5e                   	pop    esi
c0002bba:	5f                   	pop    edi
c0002bbb:	5d                   	pop    ebp
c0002bbc:	c3                   	ret    

c0002bbd <create_name>:
c0002bbd:	55                   	push   ebp
c0002bbe:	57                   	push   edi
c0002bbf:	89 d7                	mov    edi,edx
c0002bc1:	56                   	push   esi
c0002bc2:	31 f6                	xor    esi,esi
c0002bc4:	53                   	push   ebx
c0002bc5:	83 ec 3c             	sub    esp,0x3c
c0002bc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002bcc:	8b 02                	mov    eax,DWORD PTR [edx]
c0002bce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0002bd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002bdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bdf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002be3:	e8 5e f4 ff ff       	call   c0002046 <tchar2uni>
c0002be8:	89 c3                	mov    ebx,eax
c0002bea:	83 f8 ff             	cmp    eax,0xffffffff
c0002bed:	75 0a                	jne    c0002bf9 <create_name+0x3c>
c0002bef:	b8 06 00 00 00       	mov    eax,0x6
c0002bf4:	e9 93 02 00 00       	jmp    c0002e8c <create_name+0x2cf>
c0002bf9:	3d ff ff 00 00       	cmp    eax,0xffff
c0002bfe:	76 0c                	jbe    c0002c0c <create_name+0x4f>
c0002c00:	c1 e8 10             	shr    eax,0x10
c0002c03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c07:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002c0b:	46                   	inc    esi
c0002c0c:	0f b7 d3             	movzx  edx,bx
c0002c0f:	83 fa 1f             	cmp    edx,0x1f
c0002c12:	76 4a                	jbe    c0002c5e <create_name+0xa1>
c0002c14:	83 fa 5c             	cmp    edx,0x5c
c0002c17:	74 30                	je     c0002c49 <create_name+0x8c>
c0002c19:	83 fa 2f             	cmp    edx,0x2f
c0002c1c:	74 2b                	je     c0002c49 <create_name+0x8c>
c0002c1e:	83 fa 7f             	cmp    edx,0x7f
c0002c21:	77 0e                	ja     c0002c31 <create_name+0x74>
c0002c23:	b8 a2 2a 02 c0       	mov    eax,0xc0022aa2
c0002c28:	e8 02 f4 ff ff       	call   c000202f <chk_chr>
c0002c2d:	85 c0                	test   eax,eax
c0002c2f:	75 be                	jne    c0002bef <create_name+0x32>
c0002c31:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c37:	77 b6                	ja     c0002bef <create_name+0x32>
c0002c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c3d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c41:	46                   	inc    esi
c0002c42:	eb 9b                	jmp    c0002bdf <create_name+0x22>
c0002c44:	40                   	inc    eax
c0002c45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c4d:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c50:	83 fa 2f             	cmp    edx,0x2f
c0002c53:	74 ef                	je     c0002c44 <create_name+0x87>
c0002c55:	83 fa 5c             	cmp    edx,0x5c
c0002c58:	74 ea                	je     c0002c44 <create_name+0x87>
c0002c5a:	31 db                	xor    ebx,ebx
c0002c5c:	eb 02                	jmp    c0002c60 <create_name+0xa3>
c0002c5e:	b3 04                	mov    bl,0x4
c0002c60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c64:	89 07                	mov    DWORD PTR [edi],eax
c0002c66:	85 f6                	test   esi,esi
c0002c68:	74 16                	je     c0002c80 <create_name+0xc3>
c0002c6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c6e:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002c73:	83 f8 20             	cmp    eax,0x20
c0002c76:	74 05                	je     c0002c7d <create_name+0xc0>
c0002c78:	83 f8 2e             	cmp    eax,0x2e
c0002c7b:	75 03                	jne    c0002c80 <create_name+0xc3>
c0002c7d:	4e                   	dec    esi
c0002c7e:	eb e6                	jmp    c0002c66 <create_name+0xa9>
c0002c80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c84:	31 ff                	xor    edi,edi
c0002c86:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002c8c:	85 f6                	test   esi,esi
c0002c8e:	0f 84 5b ff ff ff    	je     c0002bef <create_name+0x32>
c0002c94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c98:	8d 57 01             	lea    edx,[edi+0x1]
c0002c9b:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c9f:	83 f8 20             	cmp    eax,0x20
c0002ca2:	75 04                	jne    c0002ca8 <create_name+0xeb>
c0002ca4:	89 d7                	mov    edi,edx
c0002ca6:	eb ec                	jmp    c0002c94 <create_name+0xd7>
c0002ca8:	85 ff                	test   edi,edi
c0002caa:	75 05                	jne    c0002cb1 <create_name+0xf4>
c0002cac:	83 f8 2e             	cmp    eax,0x2e
c0002caf:	75 08                	jne    c0002cb9 <create_name+0xfc>
c0002cb1:	83 cb 03             	or     ebx,0x3
c0002cb4:	eb 03                	jmp    c0002cb9 <create_name+0xfc>
c0002cb6:	4e                   	dec    esi
c0002cb7:	74 0c                	je     c0002cc5 <create_name+0x108>
c0002cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cbd:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002cc3:	75 f1                	jne    c0002cb6 <create_name+0xf9>
c0002cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002cc9:	b9 0b 00 00 00       	mov    ecx,0xb
c0002cce:	83 c0 20             	add    eax,0x20
c0002cd1:	ba 20 00 00 00       	mov    edx,0x20
c0002cd6:	31 ed                	xor    ebp,ebp
c0002cd8:	e8 24 f3 ff ff       	call   c0002001 <mem_set>
c0002cdd:	b9 08 00 00 00       	mov    ecx,0x8
c0002ce2:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002ce7:	8d 47 01             	lea    eax,[edi+0x1]
c0002cea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002cee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cf2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002cf6:	89 c7                	mov    edi,eax
c0002cf8:	85 c0                	test   eax,eax
c0002cfa:	0f 84 25 01 00 00    	je     c0002e25 <create_name+0x268>
c0002d00:	83 f8 20             	cmp    eax,0x20
c0002d03:	74 0f                	je     c0002d14 <create_name+0x157>
c0002d05:	83 f8 2e             	cmp    eax,0x2e
c0002d08:	75 13                	jne    c0002d1d <create_name+0x160>
c0002d0a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d0e:	0f 84 6a 01 00 00    	je     c0002e7e <create_name+0x2c1>
c0002d14:	83 cb 03             	or     ebx,0x3
c0002d17:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002d1b:	eb ca                	jmp    c0002ce7 <create_name+0x12a>
c0002d1d:	39 cd                	cmp    ebp,ecx
c0002d1f:	73 0b                	jae    c0002d2c <create_name+0x16f>
c0002d21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d25:	75 3f                	jne    c0002d66 <create_name+0x1a9>
c0002d27:	e9 52 01 00 00       	jmp    c0002e7e <create_name+0x2c1>
c0002d2c:	83 f9 0b             	cmp    ecx,0xb
c0002d2f:	75 0d                	jne    c0002d3e <create_name+0x181>
c0002d31:	83 cb 03             	or     ebx,0x3
c0002d34:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d39:	e9 e7 00 00 00       	jmp    c0002e25 <create_name+0x268>
c0002d3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d42:	74 0d                	je     c0002d51 <create_name+0x194>
c0002d44:	83 cb 03             	or     ebx,0x3
c0002d47:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d4b:	0f 87 d4 00 00 00    	ja     c0002e25 <create_name+0x268>
c0002d51:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d56:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002d5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d5f:	bd 08 00 00 00       	mov    ebp,0x8
c0002d64:	eb b1                	jmp    c0002d17 <create_name+0x15a>
c0002d66:	83 f8 7f             	cmp    eax,0x7f
c0002d69:	76 66                	jbe    c0002dd1 <create_name+0x214>
c0002d6b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6f:	89 d9                	mov    ecx,ebx
c0002d71:	83 c9 02             	or     ecx,0x2
c0002d74:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d78:	52                   	push   edx
c0002d79:	52                   	push   edx
c0002d7a:	68 b5 01 00 00       	push   0x1b5
c0002d7f:	50                   	push   eax
c0002d80:	e8 b3 30 00 00       	call   c0005e38 <ff_uni2oem>
c0002d85:	83 c4 10             	add    esp,0x10
c0002d88:	89 c7                	mov    edi,eax
c0002d8a:	a8 80                	test   al,0x80
c0002d8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002d90:	74 0c                	je     c0002d9e <create_name+0x1e1>
c0002d92:	83 e7 7f             	and    edi,0x7f
c0002d95:	0f b6 bf 60 2b 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdd4a0]
c0002d9c:	eb 2a                	jmp    c0002dc8 <create_name+0x20b>
c0002d9e:	0f b7 c0             	movzx  eax,ax
c0002da1:	3d ff 00 00 00       	cmp    eax,0xff
c0002da6:	76 20                	jbe    c0002dc8 <create_name+0x20b>
c0002da8:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002dab:	39 ea                	cmp    edx,ebp
c0002dad:	77 0a                	ja     c0002db9 <create_name+0x1fc>
c0002daf:	83 cb 03             	or     ebx,0x3
c0002db2:	89 cd                	mov    ebp,ecx
c0002db4:	e9 5e ff ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002db9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002dbd:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002dc1:	45                   	inc    ebp
c0002dc2:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dc6:	eb 4d                	jmp    c0002e15 <create_name+0x258>
c0002dc8:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dcc:	66 85 ff             	test   di,di
c0002dcf:	74 19                	je     c0002dea <create_name+0x22d>
c0002dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dd5:	0f b7 d7             	movzx  edx,di
c0002dd8:	b8 ab 2a 02 c0       	mov    eax,0xc0022aab
c0002ddd:	e8 4d f2 ff ff       	call   c000202f <chk_chr>
c0002de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002de6:	85 c0                	test   eax,eax
c0002de8:	74 0a                	je     c0002df4 <create_name+0x237>
c0002dea:	83 cb 03             	or     ebx,0x3
c0002ded:	bf 5f 00 00 00       	mov    edi,0x5f
c0002df2:	eb 21                	jmp    c0002e15 <create_name+0x258>
c0002df4:	8d 47 bf             	lea    eax,[edi-0x41]
c0002df7:	66 83 f8 19          	cmp    ax,0x19
c0002dfb:	77 07                	ja     c0002e04 <create_name+0x247>
c0002dfd:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e02:	eb 11                	jmp    c0002e15 <create_name+0x258>
c0002e04:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e07:	66 83 f8 19          	cmp    ax,0x19
c0002e0b:	77 08                	ja     c0002e15 <create_name+0x258>
c0002e0d:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e12:	83 ef 20             	sub    edi,0x20
c0002e15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002e19:	89 f8                	mov    eax,edi
c0002e1b:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002e1f:	45                   	inc    ebp
c0002e20:	e9 f2 fe ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e29:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002e2d:	75 04                	jne    c0002e33 <create_name+0x276>
c0002e2f:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002e33:	83 f9 08             	cmp    ecx,0x8
c0002e36:	75 05                	jne    c0002e3d <create_name+0x280>
c0002e38:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e41:	83 e0 0c             	and    eax,0xc
c0002e44:	83 f8 0c             	cmp    eax,0xc
c0002e47:	74 0c                	je     c0002e55 <create_name+0x298>
c0002e49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e4d:	83 e0 03             	and    eax,0x3
c0002e50:	83 f8 03             	cmp    eax,0x3
c0002e53:	75 05                	jne    c0002e5a <create_name+0x29d>
c0002e55:	83 cb 02             	or     ebx,0x2
c0002e58:	eb 19                	jmp    c0002e73 <create_name+0x2b6>
c0002e5a:	f6 c3 02             	test   bl,0x2
c0002e5d:	75 14                	jne    c0002e73 <create_name+0x2b6>
c0002e5f:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002e64:	74 03                	je     c0002e69 <create_name+0x2ac>
c0002e66:	83 cb 10             	or     ebx,0x10
c0002e69:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002e6e:	74 03                	je     c0002e73 <create_name+0x2b6>
c0002e70:	83 cb 08             	or     ebx,0x8
c0002e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e77:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002e7a:	31 c0                	xor    eax,eax
c0002e7c:	eb 0e                	jmp    c0002e8c <create_name+0x2cf>
c0002e7e:	83 f9 0b             	cmp    ecx,0xb
c0002e81:	0f 85 ca fe ff ff    	jne    c0002d51 <create_name+0x194>
c0002e87:	e9 a5 fe ff ff       	jmp    c0002d31 <create_name+0x174>
c0002e8c:	83 c4 3c             	add    esp,0x3c
c0002e8f:	5b                   	pop    ebx
c0002e90:	5e                   	pop    esi
c0002e91:	5f                   	pop    edi
c0002e92:	5d                   	pop    ebp
c0002e93:	c3                   	ret    

c0002e94 <cmp_lfn>:
c0002e94:	55                   	push   ebp
c0002e95:	57                   	push   edi
c0002e96:	89 d7                	mov    edi,edx
c0002e98:	56                   	push   esi
c0002e99:	53                   	push   ebx
c0002e9a:	83 ec 1c             	sub    esp,0x1c
c0002e9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ea1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ea4:	e8 17 f1 ff ff       	call   c0001fc0 <ld_word>
c0002ea9:	66 85 c0             	test   ax,ax
c0002eac:	74 07                	je     c0002eb5 <cmp_lfn+0x21>
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	e9 a1 00 00 00       	jmp    c0002f56 <cmp_lfn+0xc2>
c0002eb5:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002eb7:	bd 01 00 00 00       	mov    ebp,0x1
c0002ebc:	83 e3 3f             	and    ebx,0x3f
c0002ebf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ec7:	4b                   	dec    ebx
c0002ec8:	6b db 0d             	imul   ebx,ebx,0xd
c0002ecb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ecf:	0f b6 80 e0 2b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd420]
c0002ed6:	01 f8                	add    eax,edi
c0002ed8:	e8 e3 f0 ff ff       	call   c0001fc0 <ld_word>
c0002edd:	66 85 ed             	test   bp,bp
c0002ee0:	89 c6                	mov    esi,eax
c0002ee2:	74 3c                	je     c0002f20 <cmp_lfn+0x8c>
c0002ee4:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eea:	77 c2                	ja     c0002eae <cmp_lfn+0x1a>
c0002eec:	83 ec 0c             	sub    esp,0xc
c0002eef:	0f b7 c0             	movzx  eax,ax
c0002ef2:	50                   	push   eax
c0002ef3:	e8 58 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002ef8:	89 c5                	mov    ebp,eax
c0002efa:	8d 43 01             	lea    eax,[ebx+0x1]
c0002efd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002f01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002f05:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f09:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f0c:	e8 3f 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002f11:	83 c4 10             	add    esp,0x10
c0002f14:	39 c5                	cmp    ebp,eax
c0002f16:	75 96                	jne    c0002eae <cmp_lfn+0x1a>
c0002f18:	89 f5                	mov    ebp,esi
c0002f1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002f1e:	eb 0b                	jmp    c0002f2b <cmp_lfn+0x97>
c0002f20:	0f b7 c8             	movzx  ecx,ax
c0002f23:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002f29:	75 83                	jne    c0002eae <cmp_lfn+0x1a>
c0002f2b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002f2f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002f34:	75 95                	jne    c0002ecb <cmp_lfn+0x37>
c0002f36:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f39:	74 16                	je     c0002f51 <cmp_lfn+0xbd>
c0002f3b:	66 85 ed             	test   bp,bp
c0002f3e:	74 11                	je     c0002f51 <cmp_lfn+0xbd>
c0002f40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002f44:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f49:	0f 94 c0             	sete   al
c0002f4c:	0f b6 c0             	movzx  eax,al
c0002f4f:	eb 05                	jmp    c0002f56 <cmp_lfn+0xc2>
c0002f51:	b8 01 00 00 00       	mov    eax,0x1
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	5b                   	pop    ebx
c0002f5a:	5e                   	pop    esi
c0002f5b:	5f                   	pop    edi
c0002f5c:	5d                   	pop    ebp
c0002f5d:	c3                   	ret    

c0002f5e <sync_fs>:
c0002f5e:	56                   	push   esi
c0002f5f:	53                   	push   ebx
c0002f60:	53                   	push   ebx
c0002f61:	89 c3                	mov    ebx,eax
c0002f63:	e8 5c f5 ff ff       	call   c00024c4 <sync_window>
c0002f68:	85 c0                	test   eax,eax
c0002f6a:	0f 85 9a 00 00 00    	jne    c000300a <sync_fs+0xac>
c0002f70:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f73:	75 7b                	jne    c0002ff0 <sync_fs+0x92>
c0002f75:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002f79:	75 75                	jne    c0002ff0 <sync_fs+0x92>
c0002f7b:	b9 00 02 00 00       	mov    ecx,0x200
c0002f80:	8d 73 34             	lea    esi,[ebx+0x34]
c0002f83:	31 d2                	xor    edx,edx
c0002f85:	89 f0                	mov    eax,esi
c0002f87:	e8 75 f0 ff ff       	call   c0002001 <mem_set>
c0002f8c:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002f92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f97:	e8 49 f0 ff ff       	call   c0001fe5 <st_word>
c0002f9c:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fa1:	89 f0                	mov    eax,esi
c0002fa3:	e8 41 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fa8:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fae:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fb3:	e8 31 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fb8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fbb:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fc1:	e8 23 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fc6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002fc9:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002fcf:	e8 15 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002fd9:	40                   	inc    eax
c0002fda:	50                   	push   eax
c0002fdb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fde:	56                   	push   esi
c0002fdf:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fe3:	50                   	push   eax
c0002fe4:	e8 a2 ef ff ff       	call   c0001f8b <disk_write>
c0002fe9:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002fed:	83 c4 10             	add    esp,0x10
c0002ff0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ff4:	51                   	push   ecx
c0002ff5:	6a 00                	push   0x0
c0002ff7:	6a 00                	push   0x0
c0002ff9:	50                   	push   eax
c0002ffa:	e8 a2 ef ff ff       	call   c0001fa1 <disk_ioctl>
c0002fff:	83 c4 10             	add    esp,0x10
c0003002:	85 c0                	test   eax,eax
c0003004:	0f 95 c0             	setne  al
c0003007:	0f b6 c0             	movzx  eax,al
c000300a:	5a                   	pop    edx
c000300b:	5b                   	pop    ebx
c000300c:	5e                   	pop    esi
c000300d:	c3                   	ret    

c000300e <create_partition>:
c000300e:	55                   	push   ebp
c000300f:	0f b6 c0             	movzx  eax,al
c0003012:	57                   	push   edi
c0003013:	56                   	push   esi
c0003014:	53                   	push   ebx
c0003015:	83 ec 40             	sub    esp,0x40
c0003018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000301c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003020:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003024:	8d 44 24 30          	lea    eax,[esp+0x30]
c0003028:	50                   	push   eax
c0003029:	6a 01                	push   0x1
c000302b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000302f:	e8 6d ef ff ff       	call   c0001fa1 <disk_ioctl>
c0003034:	83 c4 10             	add    esp,0x10
c0003037:	85 c0                	test   eax,eax
c0003039:	0f 85 6a 01 00 00    	jne    c00031a9 <create_partition+0x19b>
c000303f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003043:	b9 05 00 00 00       	mov    ecx,0x5
c0003048:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000304c:	be 08 00 00 00       	mov    esi,0x8
c0003051:	89 f0                	mov    eax,esi
c0003053:	31 d2                	xor    edx,edx
c0003055:	0f b6 d8             	movzx  ebx,al
c0003058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000305c:	f7 f3                	div    ebx
c000305e:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003063:	76 0a                	jbe    c000306f <create_partition+0x61>
c0003065:	d1 e6                	shl    esi,1
c0003067:	49                   	dec    ecx
c0003068:	75 e7                	jne    c0003051 <create_partition+0x43>
c000306a:	be ff ff ff ff       	mov    esi,0xffffffff
c000306f:	b9 00 02 00 00       	mov    ecx,0x200
c0003074:	31 d2                	xor    edx,edx
c0003076:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000307a:	e8 82 ef ff ff       	call   c0002001 <mem_set>
c000307f:	b9 64 00 00 00       	mov    ecx,0x64
c0003084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003088:	31 d2                	xor    edx,edx
c000308a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003092:	f7 f1                	div    ecx
c0003094:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003099:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000309d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030a1:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030a7:	89 f0                	mov    eax,esi
c00030a9:	0f b6 c0             	movzx  eax,al
c00030ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030b0:	85 c9                	test   ecx,ecx
c00030b2:	75 34                	jne    c00030e8 <create_partition+0xda>
c00030b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030b8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030bd:	05 fe 01 00 00       	add    eax,0x1fe
c00030c2:	e8 1e ef ff ff       	call   c0001fe5 <st_word>
c00030c7:	6a 01                	push   0x1
c00030c9:	6a 00                	push   0x0
c00030cb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00030cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00030d3:	e8 b3 ee ff ff       	call   c0001f8b <disk_write>
c00030d8:	83 c4 10             	add    esp,0x10
c00030db:	85 c0                	test   eax,eax
c00030dd:	0f 95 c0             	setne  al
c00030e0:	0f b6 c0             	movzx  eax,al
c00030e3:	e9 c6 00 00 00       	jmp    c00031ae <create_partition+0x1a0>
c00030e8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00030ec:	76 c6                	jbe    c00030b4 <create_partition+0xa6>
c00030ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030f6:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030f9:	83 fe 64             	cmp    esi,0x64
c00030fc:	77 0d                	ja     c000310b <create_partition+0xfd>
c00030fe:	74 07                	je     c0003107 <create_partition+0xf9>
c0003100:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003105:	eb 04                	jmp    c000310b <create_partition+0xfd>
c0003107:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000310b:	31 c0                	xor    eax,eax
c000310d:	89 f2                	mov    edx,esi
c000310f:	01 ca                	add    edx,ecx
c0003111:	0f 92 c0             	setb   al
c0003114:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0003118:	77 04                	ja     c000311e <create_partition+0x110>
c000311a:	85 c0                	test   eax,eax
c000311c:	74 08                	je     c0003126 <create_partition+0x118>
c000311e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003122:	29 ce                	sub    esi,ecx
c0003124:	eb 04                	jmp    c000312a <create_partition+0x11c>
c0003126:	85 f6                	test   esi,esi
c0003128:	74 8a                	je     c00030b4 <create_partition+0xa6>
c000312a:	89 ca                	mov    edx,ecx
c000312c:	89 d8                	mov    eax,ebx
c000312e:	bf 3f 00 00 00       	mov    edi,0x3f
c0003133:	e8 b1 ee ff ff       	call   c0001fe9 <st_dword>
c0003138:	8d 43 04             	lea    eax,[ebx+0x4]
c000313b:	89 f2                	mov    edx,esi
c000313d:	83 c3 10             	add    ebx,0x10
c0003140:	e8 a4 ee ff ff       	call   c0001fe9 <st_dword>
c0003145:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003149:	31 d2                	xor    edx,edx
c000314b:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c000314e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003152:	89 c8                	mov    eax,ecx
c0003154:	01 f1                	add    ecx,esi
c0003156:	f7 f7                	div    edi
c0003158:	89 d5                	mov    ebp,edx
c000315a:	31 d2                	xor    edx,edx
c000315c:	45                   	inc    ebp
c000315d:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003161:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003164:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003167:	89 c2                	mov    edx,eax
c0003169:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316c:	c1 ea 02             	shr    edx,0x2
c000316f:	83 e2 c0             	and    edx,0xffffffc0
c0003172:	09 ea                	or     edx,ebp
c0003174:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003177:	31 d2                	xor    edx,edx
c0003179:	f7 f7                	div    edi
c000317b:	89 d6                	mov    esi,edx
c000317d:	31 d2                	xor    edx,edx
c000317f:	46                   	inc    esi
c0003180:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003184:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003187:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c000318a:	89 c7                	mov    edi,eax
c000318c:	c1 ef 02             	shr    edi,0x2
c000318f:	83 e7 c0             	and    edi,0xffffffc0
c0003192:	09 fe                	or     esi,edi
c0003194:	89 f2                	mov    edx,esi
c0003196:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003199:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c000319e:	0f 85 0c ff ff ff    	jne    c00030b0 <create_partition+0xa2>
c00031a4:	e9 0b ff ff ff       	jmp    c00030b4 <create_partition+0xa6>
c00031a9:	b8 01 00 00 00       	mov    eax,0x1
c00031ae:	83 c4 3c             	add    esp,0x3c
c00031b1:	5b                   	pop    ebx
c00031b2:	5e                   	pop    esi
c00031b3:	5f                   	pop    edi
c00031b4:	5d                   	pop    ebp
c00031b5:	c3                   	ret    

c00031b6 <get_fileinfo>:
c00031b6:	55                   	push   ebp
c00031b7:	57                   	push   edi
c00031b8:	56                   	push   esi
c00031b9:	53                   	push   ebx
c00031ba:	83 ec 1c             	sub    esp,0x1c
c00031bd:	8b 30                	mov    esi,DWORD PTR [eax]
c00031bf:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031c3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031c7:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031cb:	0f 84 d3 01 00 00    	je     c00033a4 <get_fileinfo+0x1ee>
c00031d1:	89 d3                	mov    ebx,edx
c00031d3:	89 c6                	mov    esi,eax
c00031d5:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031d9:	74 72                	je     c000324d <get_fileinfo+0x97>
c00031db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00031e3:	31 ed                	xor    ebp,ebp
c00031e5:	31 ff                	xor    edi,edi
c00031e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00031eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00031ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00031f2:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00031f6:	89 c2                	mov    edx,eax
c00031f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031fc:	85 c0                	test   eax,eax
c00031fe:	74 41                	je     c0003241 <get_fileinfo+0x8b>
c0003200:	0f b7 c5             	movzx  eax,bp
c0003203:	85 c0                	test   eax,eax
c0003205:	75 0d                	jne    c0003214 <get_fileinfo+0x5e>
c0003207:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000320d:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003212:	76 22                	jbe    c0003236 <get_fileinfo+0x80>
c0003214:	c1 e0 10             	shl    eax,0x10
c0003217:	b9 ff 00 00 00       	mov    ecx,0xff
c000321c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003220:	29 f9                	sub    ecx,edi
c0003222:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003226:	e8 f3 ee ff ff       	call   c000211e <put_utf>
c000322b:	0f b6 c0             	movzx  eax,al
c000322e:	85 c0                	test   eax,eax
c0003230:	74 0d                	je     c000323f <get_fileinfo+0x89>
c0003232:	01 c7                	add    edi,eax
c0003234:	31 d2                	xor    edx,edx
c0003236:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000323b:	89 d5                	mov    ebp,edx
c000323d:	eb a8                	jmp    c00031e7 <get_fileinfo+0x31>
c000323f:	31 ff                	xor    edi,edi
c0003241:	66 85 ed             	test   bp,bp
c0003244:	74 02                	je     c0003248 <get_fileinfo+0x92>
c0003246:	31 ff                	xor    edi,edi
c0003248:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c000324d:	31 ff                	xor    edi,edi
c000324f:	31 c9                	xor    ecx,ecx
c0003251:	83 f9 0a             	cmp    ecx,0xa
c0003254:	0f 87 ac 00 00 00    	ja     c0003306 <get_fileinfo+0x150>
c000325a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000325d:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003260:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003264:	89 c2                	mov    edx,eax
c0003266:	83 f8 20             	cmp    eax,0x20
c0003269:	0f 84 90 00 00 00    	je     c00032ff <get_fileinfo+0x149>
c000326f:	83 f8 05             	cmp    eax,0x5
c0003272:	75 05                	jne    c0003279 <get_fileinfo+0xc3>
c0003274:	ba e5 00 00 00       	mov    edx,0xe5
c0003279:	83 ff 0b             	cmp    edi,0xb
c000327c:	77 0b                	ja     c0003289 <get_fileinfo+0xd3>
c000327e:	83 fd 09             	cmp    ebp,0x9
c0003281:	75 06                	jne    c0003289 <get_fileinfo+0xd3>
c0003283:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003288:	47                   	inc    edi
c0003289:	0f b7 c2             	movzx  eax,dx
c000328c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003290:	e8 ab ed ff ff       	call   c0002040 <dbc_1st>
c0003295:	85 c0                	test   eax,eax
c0003297:	74 2f                	je     c00032c8 <get_fileinfo+0x112>
c0003299:	83 fd 08             	cmp    ebp,0x8
c000329c:	74 2a                	je     c00032c8 <get_fileinfo+0x112>
c000329e:	83 fd 0b             	cmp    ebp,0xb
c00032a1:	74 25                	je     c00032c8 <get_fileinfo+0x112>
c00032a3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032a6:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00032ae:	e8 90 ed ff ff       	call   c0002043 <dbc_2nd>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <get_fileinfo+0x112>
c00032b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032bb:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00032c0:	c1 e0 08             	shl    eax,0x8
c00032c3:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032c6:	09 c2                	or     edx,eax
c00032c8:	0f b7 d2             	movzx  edx,dx
c00032cb:	50                   	push   eax
c00032cc:	50                   	push   eax
c00032cd:	68 b5 01 00 00       	push   0x1b5
c00032d2:	52                   	push   edx
c00032d3:	e8 00 2c 00 00       	call   c0005ed8 <ff_oem2uni>
c00032d8:	83 c4 10             	add    esp,0x10
c00032db:	0f b7 c0             	movzx  eax,ax
c00032de:	85 c0                	test   eax,eax
c00032e0:	75 04                	jne    c00032e6 <get_fileinfo+0x130>
c00032e2:	31 ff                	xor    edi,edi
c00032e4:	eb 20                	jmp    c0003306 <get_fileinfo+0x150>
c00032e6:	b9 0c 00 00 00       	mov    ecx,0xc
c00032eb:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00032ef:	29 f9                	sub    ecx,edi
c00032f1:	e8 28 ee ff ff       	call   c000211e <put_utf>
c00032f6:	0f b6 c0             	movzx  eax,al
c00032f9:	85 c0                	test   eax,eax
c00032fb:	74 e5                	je     c00032e2 <get_fileinfo+0x12c>
c00032fd:	01 c7                	add    edi,eax
c00032ff:	89 e9                	mov    ecx,ebp
c0003301:	e9 4b ff ff ff       	jmp    c0003251 <get_fileinfo+0x9b>
c0003306:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000330b:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000330f:	75 5f                	jne    c0003370 <get_fileinfo+0x1ba>
c0003311:	85 ff                	test   edi,edi
c0003313:	75 0b                	jne    c0003320 <get_fileinfo+0x16a>
c0003315:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003319:	ba 01 00 00 00       	mov    edx,0x1
c000331e:	eb 3e                	jmp    c000335e <get_fileinfo+0x1a8>
c0003320:	bf 08 00 00 00       	mov    edi,0x8
c0003325:	31 d2                	xor    edx,edx
c0003327:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c000332d:	84 c0                	test   al,al
c000332f:	74 2d                	je     c000335e <get_fileinfo+0x1a8>
c0003331:	66 83 f8 2e          	cmp    ax,0x2e
c0003335:	74 1b                	je     c0003352 <get_fileinfo+0x19c>
c0003337:	8d 48 bf             	lea    ecx,[eax-0x41]
c000333a:	66 83 f9 19          	cmp    cx,0x19
c000333e:	77 17                	ja     c0003357 <get_fileinfo+0x1a1>
c0003340:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003343:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003346:	21 f9                	and    ecx,edi
c0003348:	80 e1 18             	and    cl,0x18
c000334b:	74 0a                	je     c0003357 <get_fileinfo+0x1a1>
c000334d:	83 c0 20             	add    eax,0x20
c0003350:	eb 05                	jmp    c0003357 <get_fileinfo+0x1a1>
c0003352:	bf 10 00 00 00       	mov    edi,0x10
c0003357:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000335b:	42                   	inc    edx
c000335c:	eb c9                	jmp    c0003327 <get_fileinfo+0x171>
c000335e:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003363:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003366:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000336a:	75 04                	jne    c0003370 <get_fileinfo+0x1ba>
c000336c:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003370:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003373:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003376:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003379:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000337c:	83 c0 1c             	add    eax,0x1c
c000337f:	e8 49 ec ff ff       	call   c0001fcd <ld_dword>
c0003384:	89 03                	mov    DWORD PTR [ebx],eax
c0003386:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003389:	83 c0 16             	add    eax,0x16
c000338c:	e8 2f ec ff ff       	call   c0001fc0 <ld_word>
c0003391:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003395:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003398:	83 c0 18             	add    eax,0x18
c000339b:	e8 20 ec ff ff       	call   c0001fc0 <ld_word>
c00033a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <ld_clust.isra.0>:
c00033ac:	56                   	push   esi
c00033ad:	89 c6                	mov    esi,eax
c00033af:	53                   	push   ebx
c00033b0:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033b3:	89 d3                	mov    ebx,edx
c00033b5:	e8 06 ec ff ff       	call   c0001fc0 <ld_word>
c00033ba:	0f b7 c8             	movzx  ecx,ax
c00033bd:	89 f0                	mov    eax,esi
c00033bf:	3c 03                	cmp    al,0x3
c00033c1:	75 0d                	jne    c00033d0 <ld_clust.isra.0+0x24>
c00033c3:	8d 43 14             	lea    eax,[ebx+0x14]
c00033c6:	e8 f5 eb ff ff       	call   c0001fc0 <ld_word>
c00033cb:	c1 e0 10             	shl    eax,0x10
c00033ce:	09 c1                	or     ecx,eax
c00033d0:	89 c8                	mov    eax,ecx
c00033d2:	5b                   	pop    ebx
c00033d3:	5e                   	pop    esi
c00033d4:	c3                   	ret    

c00033d5 <st_clust.isra.1>:
c00033d5:	56                   	push   esi
c00033d6:	89 c6                	mov    esi,eax
c00033d8:	53                   	push   ebx
c00033d9:	89 d3                	mov    ebx,edx
c00033db:	0f b7 d1             	movzx  edx,cx
c00033de:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00033e1:	e8 ff eb ff ff       	call   c0001fe5 <st_word>
c00033e6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00033e9:	75 0f                	jne    c00033fa <st_clust.isra.1+0x25>
c00033eb:	c1 e9 10             	shr    ecx,0x10
c00033ee:	8d 43 14             	lea    eax,[ebx+0x14]
c00033f1:	89 ca                	mov    edx,ecx
c00033f3:	5b                   	pop    ebx
c00033f4:	5e                   	pop    esi
c00033f5:	e9 eb eb ff ff       	jmp    c0001fe5 <st_word>
c00033fa:	5b                   	pop    ebx
c00033fb:	5e                   	pop    esi
c00033fc:	c3                   	ret    

c00033fd <get_fat.isra.2>:
c00033fd:	b9 01 00 00 00       	mov    ecx,0x1
c0003402:	83 fa 01             	cmp    edx,0x1
c0003405:	0f 86 f3 00 00 00    	jbe    c00034fe <get_fat.isra.2+0x101>
c000340b:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000340e:	0f 83 ea 00 00 00    	jae    c00034fe <get_fat.isra.2+0x101>
c0003414:	55                   	push   ebp
c0003415:	57                   	push   edi
c0003416:	89 c7                	mov    edi,eax
c0003418:	56                   	push   esi
c0003419:	89 d6                	mov    esi,edx
c000341b:	53                   	push   ebx
c000341c:	83 ec 0c             	sub    esp,0xc
c000341f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003422:	83 f8 02             	cmp    eax,0x2
c0003425:	74 78                	je     c000349f <get_fat.isra.2+0xa2>
c0003427:	83 f8 03             	cmp    eax,0x3
c000342a:	0f 84 96 00 00 00    	je     c00034c6 <get_fat.isra.2+0xc9>
c0003430:	48                   	dec    eax
c0003431:	0f 85 bd 00 00 00    	jne    c00034f4 <get_fat.isra.2+0xf7>
c0003437:	89 d3                	mov    ebx,edx
c0003439:	89 f8                	mov    eax,edi
c000343b:	d1 eb                	shr    ebx,1
c000343d:	01 d3                	add    ebx,edx
c000343f:	89 da                	mov    edx,ebx
c0003441:	c1 ea 09             	shr    edx,0x9
c0003444:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003447:	e8 db f0 ff ff       	call   c0002527 <move_window>
c000344c:	85 c0                	test   eax,eax
c000344e:	74 08                	je     c0003458 <get_fat.isra.2+0x5b>
c0003450:	83 c9 ff             	or     ecx,0xffffffff
c0003453:	e9 9c 00 00 00       	jmp    c00034f4 <get_fat.isra.2+0xf7>
c0003458:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000345b:	89 f8                	mov    eax,edi
c000345d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003463:	89 ea                	mov    edx,ebp
c0003465:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003469:	c1 ea 09             	shr    edx,0x9
c000346c:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000346f:	e8 b3 f0 ff ff       	call   c0002527 <move_window>
c0003474:	85 c0                	test   eax,eax
c0003476:	75 d8                	jne    c0003450 <get_fat.isra.2+0x53>
c0003478:	0f b6 c3             	movzx  eax,bl
c000347b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003481:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003486:	c1 e3 08             	shl    ebx,0x8
c0003489:	09 c3                	or     ebx,eax
c000348b:	89 d9                	mov    ecx,ebx
c000348d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003493:	83 e6 01             	and    esi,0x1
c0003496:	74 5c                	je     c00034f4 <get_fat.isra.2+0xf7>
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	c1 e9 04             	shr    ecx,0x4
c000349d:	eb 55                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c000349f:	c1 ea 08             	shr    edx,0x8
c00034a2:	89 f8                	mov    eax,edi
c00034a4:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034a7:	e8 7b f0 ff ff       	call   c0002527 <move_window>
c00034ac:	85 c0                	test   eax,eax
c00034ae:	75 a0                	jne    c0003450 <get_fat.isra.2+0x53>
c00034b0:	01 f6                	add    esi,esi
c00034b2:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00034b8:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034bc:	e8 ff ea ff ff       	call   c0001fc0 <ld_word>
c00034c1:	0f b7 c8             	movzx  ecx,ax
c00034c4:	eb 2e                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c00034c6:	c1 ea 07             	shr    edx,0x7
c00034c9:	89 f8                	mov    eax,edi
c00034cb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034ce:	e8 54 f0 ff ff       	call   c0002527 <move_window>
c00034d3:	85 c0                	test   eax,eax
c00034d5:	0f 85 75 ff ff ff    	jne    c0003450 <get_fat.isra.2+0x53>
c00034db:	c1 e6 02             	shl    esi,0x2
c00034de:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00034e4:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034e8:	e8 e0 ea ff ff       	call   c0001fcd <ld_dword>
c00034ed:	25 ff ff ff 0f       	and    eax,0xfffffff
c00034f2:	89 c1                	mov    ecx,eax
c00034f4:	83 c4 0c             	add    esp,0xc
c00034f7:	89 c8                	mov    eax,ecx
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    
c00034fe:	89 c8                	mov    eax,ecx
c0003500:	c3                   	ret    

c0003501 <dir_sdi>:
c0003501:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003507:	0f 87 b6 00 00 00    	ja     c00035c3 <dir_sdi+0xc2>
c000350d:	55                   	push   ebp
c000350e:	57                   	push   edi
c000350f:	56                   	push   esi
c0003510:	53                   	push   ebx
c0003511:	89 d3                	mov    ebx,edx
c0003513:	83 ec 1c             	sub    esp,0x1c
c0003516:	f6 c2 1f             	test   dl,0x1f
c0003519:	74 0a                	je     c0003525 <dir_sdi+0x24>
c000351b:	b8 02 00 00 00       	mov    eax,0x2
c0003520:	e9 96 00 00 00       	jmp    c00035bb <dir_sdi+0xba>
c0003525:	89 c6                	mov    esi,eax
c0003527:	8b 38                	mov    edi,DWORD PTR [eax]
c0003529:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000352c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000352f:	85 c9                	test   ecx,ecx
c0003531:	75 23                	jne    c0003556 <dir_sdi+0x55>
c0003533:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003536:	76 07                	jbe    c000353f <dir_sdi+0x3e>
c0003538:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000353b:	85 c0                	test   eax,eax
c000353d:	75 15                	jne    c0003554 <dir_sdi+0x53>
c000353f:	89 da                	mov    edx,ebx
c0003541:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003545:	c1 ea 05             	shr    edx,0x5
c0003548:	39 c2                	cmp    edx,eax
c000354a:	73 cf                	jae    c000351b <dir_sdi+0x1a>
c000354c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000354f:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003552:	eb 3d                	jmp    c0003591 <dir_sdi+0x90>
c0003554:	89 c1                	mov    ecx,eax
c0003556:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000355a:	c1 e5 09             	shl    ebp,0x9
c000355d:	89 ca                	mov    edx,ecx
c000355f:	39 eb                	cmp    ebx,ebp
c0003561:	72 1c                	jb     c000357f <dir_sdi+0x7e>
c0003563:	8b 06                	mov    eax,DWORD PTR [esi]
c0003565:	e8 93 fe ff ff       	call   c00033fd <get_fat.isra.2>
c000356a:	89 c1                	mov    ecx,eax
c000356c:	83 f8 ff             	cmp    eax,0xffffffff
c000356f:	74 45                	je     c00035b6 <dir_sdi+0xb5>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	76 a5                	jbe    c000351b <dir_sdi+0x1a>
c0003576:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003579:	76 a0                	jbe    c000351b <dir_sdi+0x1a>
c000357b:	29 eb                	sub    ebx,ebp
c000357d:	eb de                	jmp    c000355d <dir_sdi+0x5c>
c000357f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003583:	89 f8                	mov    eax,edi
c0003585:	e8 8d ec ff ff       	call   c0002217 <clst2sect>
c000358a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000358e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003591:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003594:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003597:	85 d2                	test   edx,edx
c0003599:	74 80                	je     c000351b <dir_sdi+0x1a>
c000359b:	89 d8                	mov    eax,ebx
c000359d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035a3:	c1 e8 09             	shr    eax,0x9
c00035a6:	01 d0                	add    eax,edx
c00035a8:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035ab:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00035af:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035b2:	31 c0                	xor    eax,eax
c00035b4:	eb 05                	jmp    c00035bb <dir_sdi+0xba>
c00035b6:	b8 01 00 00 00       	mov    eax,0x1
c00035bb:	83 c4 1c             	add    esp,0x1c
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    
c00035c3:	b8 02 00 00 00       	mov    eax,0x2
c00035c8:	c3                   	ret    

c00035c9 <create_chain>:
c00035c9:	55                   	push   ebp
c00035ca:	89 c5                	mov    ebp,eax
c00035cc:	57                   	push   edi
c00035cd:	89 d7                	mov    edi,edx
c00035cf:	56                   	push   esi
c00035d0:	53                   	push   ebx
c00035d1:	83 ec 1c             	sub    esp,0x1c
c00035d4:	85 d2                	test   edx,edx
c00035d6:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d8:	75 0e                	jne    c00035e8 <create_chain+0x1f>
c00035da:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00035dd:	85 c9                	test   ecx,ecx
c00035df:	74 34                	je     c0003615 <create_chain+0x4c>
c00035e1:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00035e4:	77 34                	ja     c000361a <create_chain+0x51>
c00035e6:	eb 2d                	jmp    c0003615 <create_chain+0x4c>
c00035e8:	89 f0                	mov    eax,esi
c00035ea:	e8 0e fe ff ff       	call   c00033fd <get_fat.isra.2>
c00035ef:	89 c3                	mov    ebx,eax
c00035f1:	83 f8 01             	cmp    eax,0x1
c00035f4:	77 0a                	ja     c0003600 <create_chain+0x37>
c00035f6:	bb 01 00 00 00       	mov    ebx,0x1
c00035fb:	e9 fe 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003600:	83 f8 ff             	cmp    eax,0xffffffff
c0003603:	0f 84 f2 00 00 00    	je     c00036fb <create_chain+0x132>
c0003609:	89 f9                	mov    ecx,edi
c000360b:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000360e:	76 0a                	jbe    c000361a <create_chain+0x51>
c0003610:	e9 e9 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003615:	b9 01 00 00 00       	mov    ecx,0x1
c000361a:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000361e:	75 07                	jne    c0003627 <create_chain+0x5e>
c0003620:	31 db                	xor    ebx,ebx
c0003622:	e9 d7 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003627:	39 f9                	cmp    ecx,edi
c0003629:	75 46                	jne    c0003671 <create_chain+0xa8>
c000362b:	8d 59 01             	lea    ebx,[ecx+0x1]
c000362e:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003631:	77 05                	ja     c0003638 <create_chain+0x6f>
c0003633:	bb 02 00 00 00       	mov    ebx,0x2
c0003638:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000363c:	89 da                	mov    edx,ebx
c000363e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003641:	e8 b7 fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003646:	83 f8 01             	cmp    eax,0x1
c0003649:	74 ab                	je     c00035f6 <create_chain+0x2d>
c000364b:	83 f8 ff             	cmp    eax,0xffffffff
c000364e:	0f 84 a7 00 00 00    	je     c00036fb <create_chain+0x132>
c0003654:	85 c0                	test   eax,eax
c0003656:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000365a:	74 11                	je     c000366d <create_chain+0xa4>
c000365c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000365f:	83 f8 01             	cmp    eax,0x1
c0003662:	76 0d                	jbe    c0003671 <create_chain+0xa8>
c0003664:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003667:	73 08                	jae    c0003671 <create_chain+0xa8>
c0003669:	89 c1                	mov    ecx,eax
c000366b:	eb 04                	jmp    c0003671 <create_chain+0xa8>
c000366d:	85 db                	test   ebx,ebx
c000366f:	75 3d                	jne    c00036ae <create_chain+0xe5>
c0003671:	89 cb                	mov    ebx,ecx
c0003673:	43                   	inc    ebx
c0003674:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003677:	77 0a                	ja     c0003683 <create_chain+0xba>
c0003679:	83 f9 01             	cmp    ecx,0x1
c000367c:	76 a2                	jbe    c0003620 <create_chain+0x57>
c000367e:	bb 02 00 00 00       	mov    ebx,0x2
c0003683:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003687:	89 da                	mov    edx,ebx
c0003689:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000368c:	e8 6c fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003691:	85 c0                	test   eax,eax
c0003693:	74 19                	je     c00036ae <create_chain+0xe5>
c0003695:	83 f8 01             	cmp    eax,0x1
c0003698:	0f 84 58 ff ff ff    	je     c00035f6 <create_chain+0x2d>
c000369e:	40                   	inc    eax
c000369f:	74 5a                	je     c00036fb <create_chain+0x132>
c00036a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036a5:	39 cb                	cmp    ebx,ecx
c00036a7:	75 ca                	jne    c0003673 <create_chain+0xaa>
c00036a9:	e9 72 ff ff ff       	jmp    c0003620 <create_chain+0x57>
c00036ae:	83 c9 ff             	or     ecx,0xffffffff
c00036b1:	89 da                	mov    edx,ebx
c00036b3:	89 f0                	mov    eax,esi
c00036b5:	e8 b1 f2 ff ff       	call   c000296b <put_fat>
c00036ba:	85 c0                	test   eax,eax
c00036bc:	75 36                	jne    c00036f4 <create_chain+0x12b>
c00036be:	85 ff                	test   edi,edi
c00036c0:	75 16                	jne    c00036d8 <create_chain+0x10f>
c00036c2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00036c5:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00036c8:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00036cb:	8d 57 fe             	lea    edx,[edi-0x2]
c00036ce:	39 d0                	cmp    eax,edx
c00036d0:	77 17                	ja     c00036e9 <create_chain+0x120>
c00036d2:	48                   	dec    eax
c00036d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00036d6:	eb 11                	jmp    c00036e9 <create_chain+0x120>
c00036d8:	89 d9                	mov    ecx,ebx
c00036da:	89 fa                	mov    edx,edi
c00036dc:	89 f0                	mov    eax,esi
c00036de:	e8 88 f2 ff ff       	call   c000296b <put_fat>
c00036e3:	85 c0                	test   eax,eax
c00036e5:	74 db                	je     c00036c2 <create_chain+0xf9>
c00036e7:	eb 0b                	jmp    c00036f4 <create_chain+0x12b>
c00036e9:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c00036ec:	83 c8 01             	or     eax,0x1
c00036ef:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00036f2:	eb 0a                	jmp    c00036fe <create_chain+0x135>
c00036f4:	48                   	dec    eax
c00036f5:	0f 85 fb fe ff ff    	jne    c00035f6 <create_chain+0x2d>
c00036fb:	83 cb ff             	or     ebx,0xffffffff
c00036fe:	83 c4 1c             	add    esp,0x1c
c0003701:	89 d8                	mov    eax,ebx
c0003703:	5b                   	pop    ebx
c0003704:	5e                   	pop    esi
c0003705:	5f                   	pop    edi
c0003706:	5d                   	pop    ebp
c0003707:	c3                   	ret    

c0003708 <remove_chain>:
c0003708:	55                   	push   ebp
c0003709:	57                   	push   edi
c000370a:	56                   	push   esi
c000370b:	89 d6                	mov    esi,edx
c000370d:	53                   	push   ebx
c000370e:	83 ec 0c             	sub    esp,0xc
c0003711:	83 fa 01             	cmp    edx,0x1
c0003714:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003716:	76 6a                	jbe    c0003782 <remove_chain+0x7a>
c0003718:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000371b:	76 65                	jbe    c0003782 <remove_chain+0x7a>
c000371d:	89 c5                	mov    ebp,eax
c000371f:	89 ca                	mov    edx,ecx
c0003721:	85 c9                	test   ecx,ecx
c0003723:	74 0e                	je     c0003733 <remove_chain+0x2b>
c0003725:	83 c9 ff             	or     ecx,0xffffffff
c0003728:	89 d8                	mov    eax,ebx
c000372a:	e8 3c f2 ff ff       	call   c000296b <put_fat>
c000372f:	85 c0                	test   eax,eax
c0003731:	75 5b                	jne    c000378e <remove_chain+0x86>
c0003733:	89 f2                	mov    edx,esi
c0003735:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003738:	e8 c0 fc ff ff       	call   c00033fd <get_fat.isra.2>
c000373d:	89 c7                	mov    edi,eax
c000373f:	85 c0                	test   eax,eax
c0003741:	75 04                	jne    c0003747 <remove_chain+0x3f>
c0003743:	31 c0                	xor    eax,eax
c0003745:	eb 47                	jmp    c000378e <remove_chain+0x86>
c0003747:	83 f8 01             	cmp    eax,0x1
c000374a:	74 36                	je     c0003782 <remove_chain+0x7a>
c000374c:	83 f8 ff             	cmp    eax,0xffffffff
c000374f:	74 38                	je     c0003789 <remove_chain+0x81>
c0003751:	31 c9                	xor    ecx,ecx
c0003753:	89 f2                	mov    edx,esi
c0003755:	89 d8                	mov    eax,ebx
c0003757:	e8 0f f2 ff ff       	call   c000296b <put_fat>
c000375c:	85 c0                	test   eax,eax
c000375e:	75 2e                	jne    c000378e <remove_chain+0x86>
c0003760:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003763:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003766:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003769:	39 c8                	cmp    eax,ecx
c000376b:	73 0d                	jae    c000377a <remove_chain+0x72>
c000376d:	40                   	inc    eax
c000376e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003771:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003774:	83 c8 01             	or     eax,0x1
c0003777:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000377a:	89 fe                	mov    esi,edi
c000377c:	39 fa                	cmp    edx,edi
c000377e:	77 b3                	ja     c0003733 <remove_chain+0x2b>
c0003780:	eb c1                	jmp    c0003743 <remove_chain+0x3b>
c0003782:	b8 02 00 00 00       	mov    eax,0x2
c0003787:	eb 05                	jmp    c000378e <remove_chain+0x86>
c0003789:	b8 01 00 00 00       	mov    eax,0x1
c000378e:	83 c4 0c             	add    esp,0xc
c0003791:	5b                   	pop    ebx
c0003792:	5e                   	pop    esi
c0003793:	5f                   	pop    edi
c0003794:	5d                   	pop    ebp
c0003795:	c3                   	ret    

c0003796 <dir_next>:
c0003796:	55                   	push   ebp
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	83 ec 1c             	sub    esp,0x1c
c000379d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037a2:	83 c7 20             	add    edi,0x20
c00037a5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037ab:	76 07                	jbe    c00037b4 <dir_next+0x1e>
c00037ad:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037b4:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037b7:	b9 04 00 00 00       	mov    ecx,0x4
c00037bc:	85 f6                	test   esi,esi
c00037be:	0f 84 cd 00 00 00    	je     c0003891 <dir_next+0xfb>
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	89 d1                	mov    ecx,edx
c00037c8:	89 f8                	mov    eax,edi
c00037ca:	25 ff 01 00 00       	and    eax,0x1ff
c00037cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037d3:	0f 85 a8 00 00 00    	jne    c0003881 <dir_next+0xeb>
c00037d9:	46                   	inc    esi
c00037da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037dd:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00037e0:	85 d2                	test   edx,edx
c00037e2:	75 22                	jne    c0003806 <dir_next+0x70>
c00037e4:	89 fa                	mov    edx,edi
c00037e6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037ea:	c1 ea 05             	shr    edx,0x5
c00037ed:	39 c2                	cmp    edx,eax
c00037ef:	0f 82 8c 00 00 00    	jb     c0003881 <dir_next+0xeb>
c00037f5:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037fc:	b9 04 00 00 00       	mov    ecx,0x4
c0003801:	e9 8b 00 00 00       	jmp    c0003891 <dir_next+0xfb>
c0003806:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000380a:	89 fe                	mov    esi,edi
c000380c:	48                   	dec    eax
c000380d:	c1 ee 09             	shr    esi,0x9
c0003810:	85 f0                	test   eax,esi
c0003812:	75 6d                	jne    c0003881 <dir_next+0xeb>
c0003814:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003818:	89 e8                	mov    eax,ebp
c000381a:	e8 de fb ff ff       	call   c00033fd <get_fat.isra.2>
c000381f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003823:	89 c6                	mov    esi,eax
c0003825:	83 f8 01             	cmp    eax,0x1
c0003828:	77 07                	ja     c0003831 <dir_next+0x9b>
c000382a:	b9 02 00 00 00       	mov    ecx,0x2
c000382f:	eb 60                	jmp    c0003891 <dir_next+0xfb>
c0003831:	83 f8 ff             	cmp    eax,0xffffffff
c0003834:	75 07                	jne    c000383d <dir_next+0xa7>
c0003836:	b9 01 00 00 00       	mov    ecx,0x1
c000383b:	eb 54                	jmp    c0003891 <dir_next+0xfb>
c000383d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003840:	77 30                	ja     c0003872 <dir_next+0xdc>
c0003842:	85 c9                	test   ecx,ecx
c0003844:	74 af                	je     c00037f5 <dir_next+0x5f>
c0003846:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 79 fd ff ff       	call   c00035c9 <create_chain>
c0003850:	b9 07 00 00 00       	mov    ecx,0x7
c0003855:	89 c6                	mov    esi,eax
c0003857:	85 c0                	test   eax,eax
c0003859:	74 36                	je     c0003891 <dir_next+0xfb>
c000385b:	83 f8 01             	cmp    eax,0x1
c000385e:	74 ca                	je     c000382a <dir_next+0x94>
c0003860:	83 f8 ff             	cmp    eax,0xffffffff
c0003863:	74 d1                	je     c0003836 <dir_next+0xa0>
c0003865:	89 c2                	mov    edx,eax
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 54 f2 ff ff       	call   c0002ac2 <dir_clear>
c000386e:	85 c0                	test   eax,eax
c0003870:	75 c4                	jne    c0003836 <dir_next+0xa0>
c0003872:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003875:	89 f2                	mov    edx,esi
c0003877:	89 e8                	mov    eax,ebp
c0003879:	e8 99 e9 ff ff       	call   c0002217 <clst2sect>
c000387e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003881:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003885:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003888:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c000388c:	31 c9                	xor    ecx,ecx
c000388e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003891:	83 c4 1c             	add    esp,0x1c
c0003894:	89 c8                	mov    eax,ecx
c0003896:	5b                   	pop    ebx
c0003897:	5e                   	pop    esi
c0003898:	5f                   	pop    edi
c0003899:	5d                   	pop    ebp
c000389a:	c3                   	ret    

c000389b <dir_alloc>:
c000389b:	55                   	push   ebp
c000389c:	89 c5                	mov    ebp,eax
c000389e:	57                   	push   edi
c000389f:	89 d7                	mov    edi,edx
c00038a1:	56                   	push   esi
c00038a2:	31 d2                	xor    edx,edx
c00038a4:	53                   	push   ebx
c00038a5:	83 ec 0c             	sub    esp,0xc
c00038a8:	8b 30                	mov    esi,DWORD PTR [eax]
c00038aa:	e8 52 fc ff ff       	call   c0003501 <dir_sdi>
c00038af:	85 c0                	test   eax,eax
c00038b1:	75 3b                	jne    c00038ee <dir_alloc+0x53>
c00038b3:	31 db                	xor    ebx,ebx
c00038b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038b8:	89 f0                	mov    eax,esi
c00038ba:	e8 68 ec ff ff       	call   c0002527 <move_window>
c00038bf:	85 c0                	test   eax,eax
c00038c1:	75 2b                	jne    c00038ee <dir_alloc+0x53>
c00038c3:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038c6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038c9:	85 d2                	test   edx,edx
c00038cb:	74 08                	je     c00038d5 <dir_alloc+0x3a>
c00038cd:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00038d3:	75 07                	jne    c00038dc <dir_alloc+0x41>
c00038d5:	43                   	inc    ebx
c00038d6:	39 fb                	cmp    ebx,edi
c00038d8:	75 04                	jne    c00038de <dir_alloc+0x43>
c00038da:	eb 1c                	jmp    c00038f8 <dir_alloc+0x5d>
c00038dc:	31 db                	xor    ebx,ebx
c00038de:	ba 01 00 00 00       	mov    edx,0x1
c00038e3:	89 e8                	mov    eax,ebp
c00038e5:	e8 ac fe ff ff       	call   c0003796 <dir_next>
c00038ea:	85 c0                	test   eax,eax
c00038ec:	74 c7                	je     c00038b5 <dir_alloc+0x1a>
c00038ee:	83 f8 04             	cmp    eax,0x4
c00038f1:	75 05                	jne    c00038f8 <dir_alloc+0x5d>
c00038f3:	b8 07 00 00 00       	mov    eax,0x7
c00038f8:	83 c4 0c             	add    esp,0xc
c00038fb:	5b                   	pop    ebx
c00038fc:	5e                   	pop    esi
c00038fd:	5f                   	pop    edi
c00038fe:	5d                   	pop    ebp
c00038ff:	c3                   	ret    

c0003900 <dir_read>:
c0003900:	55                   	push   ebp
c0003901:	57                   	push   edi
c0003902:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003907:	56                   	push   esi
c0003908:	be 04 00 00 00       	mov    esi,0x4
c000390d:	53                   	push   ebx
c000390e:	89 c3                	mov    ebx,eax
c0003910:	83 ec 1c             	sub    esp,0x1c
c0003913:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003917:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003919:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000391e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003921:	85 d2                	test   edx,edx
c0003923:	0f 84 e3 00 00 00    	je     c0003a0c <dir_read+0x10c>
c0003929:	89 e8                	mov    eax,ebp
c000392b:	e8 f7 eb ff ff       	call   c0002527 <move_window>
c0003930:	89 c6                	mov    esi,eax
c0003932:	85 c0                	test   eax,eax
c0003934:	0f 85 dd 00 00 00    	jne    c0003a17 <dir_read+0x117>
c000393a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000393d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003940:	88 04 24             	mov    BYTE PTR [esp],al
c0003943:	85 c0                	test   eax,eax
c0003945:	0f 84 c7 00 00 00    	je     c0003a12 <dir_read+0x112>
c000394b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000394e:	83 e1 3f             	and    ecx,0x3f
c0003951:	83 f8 2e             	cmp    eax,0x2e
c0003954:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003957:	0f 84 95 00 00 00    	je     c00039f2 <dir_read+0xf2>
c000395d:	3d e5 00 00 00       	cmp    eax,0xe5
c0003962:	0f 84 8a 00 00 00    	je     c00039f2 <dir_read+0xf2>
c0003968:	0f b6 c9             	movzx  ecx,cl
c000396b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000396f:	83 e1 df             	and    ecx,0xffffffdf
c0003972:	83 f9 08             	cmp    ecx,0x8
c0003975:	0f 94 c1             	sete   cl
c0003978:	0f b6 c9             	movzx  ecx,cl
c000397b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000397f:	75 71                	jne    c00039f2 <dir_read+0xf2>
c0003981:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003986:	75 4a                	jne    c00039d2 <dir_read+0xd2>
c0003988:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c000398c:	74 16                	je     c00039a4 <dir_read+0xa4>
c000398e:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003991:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003998:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000399c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000399f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039a2:	eb 0e                	jmp    c00039b2 <dir_read+0xb2>
c00039a4:	89 f9                	mov    ecx,edi
c00039a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ab:	0f b6 c9             	movzx  ecx,cl
c00039ae:	39 c1                	cmp    ecx,eax
c00039b0:	75 45                	jne    c00039f7 <dir_read+0xf7>
c00039b2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039bb:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039be:	75 37                	jne    c00039f7 <dir_read+0xf7>
c00039c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039c3:	e8 6c e8 ff ff       	call   c0002234 <pick_lfn>
c00039c8:	85 c0                	test   eax,eax
c00039ca:	74 2b                	je     c00039f7 <dir_read+0xf7>
c00039cc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00039cf:	4f                   	dec    edi
c00039d0:	eb 25                	jmp    c00039f7 <dir_read+0xf7>
c00039d2:	89 f8                	mov    eax,edi
c00039d4:	84 c0                	test   al,al
c00039d6:	75 11                	jne    c00039e9 <dir_read+0xe9>
c00039d8:	89 d0                	mov    eax,edx
c00039da:	e8 32 ea ff ff       	call   c0002411 <sum_sfn>
c00039df:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039e3:	75 04                	jne    c00039e9 <dir_read+0xe9>
c00039e5:	31 f6                	xor    esi,esi
c00039e7:	eb 35                	jmp    c0003a1e <dir_read+0x11e>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	eb 2c                	jmp    c0003a1e <dir_read+0x11e>
c00039f2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039f7:	31 d2                	xor    edx,edx
c00039f9:	89 d8                	mov    eax,ebx
c00039fb:	e8 96 fd ff ff       	call   c0003796 <dir_next>
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	85 c0                	test   eax,eax
c0003a04:	0f 84 14 ff ff ff    	je     c000391e <dir_read+0x1e>
c0003a0a:	eb 0b                	jmp    c0003a17 <dir_read+0x117>
c0003a0c:	85 f6                	test   esi,esi
c0003a0e:	74 d5                	je     c00039e5 <dir_read+0xe5>
c0003a10:	eb 05                	jmp    c0003a17 <dir_read+0x117>
c0003a12:	be 04 00 00 00       	mov    esi,0x4
c0003a17:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a1e:	83 c4 1c             	add    esp,0x1c
c0003a21:	89 f0                	mov    eax,esi
c0003a23:	5b                   	pop    ebx
c0003a24:	5e                   	pop    esi
c0003a25:	5f                   	pop    edi
c0003a26:	5d                   	pop    ebp
c0003a27:	c3                   	ret    

c0003a28 <dir_remove>:
c0003a28:	57                   	push   edi
c0003a29:	56                   	push   esi
c0003a2a:	53                   	push   ebx
c0003a2b:	89 c3                	mov    ebx,eax
c0003a2d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a30:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a32:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a35:	83 fa ff             	cmp    edx,0xffffffff
c0003a38:	74 09                	je     c0003a43 <dir_remove+0x1b>
c0003a3a:	e8 c2 fa ff ff       	call   c0003501 <dir_sdi>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 34                	jne    c0003a77 <dir_remove+0x4f>
c0003a43:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a46:	89 f0                	mov    eax,esi
c0003a48:	e8 da ea ff ff       	call   c0002527 <move_window>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 1c                	jne    c0003a6d <dir_remove+0x45>
c0003a51:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a54:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a57:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5b:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a5e:	73 17                	jae    c0003a77 <dir_remove+0x4f>
c0003a60:	31 d2                	xor    edx,edx
c0003a62:	89 d8                	mov    eax,ebx
c0003a64:	e8 2d fd ff ff       	call   c0003796 <dir_next>
c0003a69:	85 c0                	test   eax,eax
c0003a6b:	74 d6                	je     c0003a43 <dir_remove+0x1b>
c0003a6d:	83 f8 04             	cmp    eax,0x4
c0003a70:	75 05                	jne    c0003a77 <dir_remove+0x4f>
c0003a72:	b8 02 00 00 00       	mov    eax,0x2
c0003a77:	5b                   	pop    ebx
c0003a78:	5e                   	pop    esi
c0003a79:	5f                   	pop    edi
c0003a7a:	c3                   	ret    

c0003a7b <dir_find>:
c0003a7b:	55                   	push   ebp
c0003a7c:	31 d2                	xor    edx,edx
c0003a7e:	57                   	push   edi
c0003a7f:	56                   	push   esi
c0003a80:	53                   	push   ebx
c0003a81:	89 c3                	mov    ebx,eax
c0003a83:	83 ec 1c             	sub    esp,0x1c
c0003a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0003a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 6e fa ff ff       	call   c0003501 <dir_sdi>
c0003a93:	89 c6                	mov    esi,eax
c0003a95:	85 c0                	test   eax,eax
c0003a97:	0f 85 1d 01 00 00    	jne    c0003bba <dir_find+0x13f>
c0003a9d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003aa4:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003aa9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003aae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ab5:	e8 6d ea ff ff       	call   c0002527 <move_window>
c0003aba:	89 c6                	mov    esi,eax
c0003abc:	85 c0                	test   eax,eax
c0003abe:	0f 85 f6 00 00 00    	jne    c0003bba <dir_find+0x13f>
c0003ac4:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003ac7:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003acb:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003acf:	85 c9                	test   ecx,ecx
c0003ad1:	0f 84 de 00 00 00    	je     c0003bb5 <dir_find+0x13a>
c0003ad7:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ada:	89 d0                	mov    eax,edx
c0003adc:	83 e0 3f             	and    eax,0x3f
c0003adf:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003ae5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ae8:	0f 84 a6 00 00 00    	je     c0003b94 <dir_find+0x119>
c0003aee:	80 e2 08             	and    dl,0x8
c0003af1:	0f b6 c0             	movzx  eax,al
c0003af4:	74 0b                	je     c0003b01 <dir_find+0x86>
c0003af6:	83 f8 0f             	cmp    eax,0xf
c0003af9:	0f 85 95 00 00 00    	jne    c0003b94 <dir_find+0x119>
c0003aff:	eb 05                	jmp    c0003b06 <dir_find+0x8b>
c0003b01:	83 f8 0f             	cmp    eax,0xf
c0003b04:	75 62                	jne    c0003b68 <dir_find+0xed>
c0003b06:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b0a:	0f 85 90 00 00 00    	jne    c0003ba0 <dir_find+0x125>
c0003b10:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003b15:	74 17                	je     c0003b2e <dir_find+0xb3>
c0003b17:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003b1a:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003b22:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003b26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b29:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b2c:	eb 13                	jmp    c0003b41 <dir_find+0xc6>
c0003b2e:	89 f8                	mov    eax,edi
c0003b30:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b35:	0f b6 d0             	movzx  edx,al
c0003b38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003b3d:	39 c2                	cmp    edx,eax
c0003b3f:	75 5f                	jne    c0003ba0 <dir_find+0x125>
c0003b41:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003b45:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b4a:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003b4d:	75 51                	jne    c0003ba0 <dir_find+0x125>
c0003b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b53:	89 ea                	mov    edx,ebp
c0003b55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b58:	e8 37 f3 ff ff       	call   c0002e94 <cmp_lfn>
c0003b5d:	85 c0                	test   eax,eax
c0003b5f:	74 3f                	je     c0003ba0 <dir_find+0x125>
c0003b61:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003b65:	4f                   	dec    edi
c0003b66:	eb 38                	jmp    c0003ba0 <dir_find+0x125>
c0003b68:	89 f8                	mov    eax,edi
c0003b6a:	84 c0                	test   al,al
c0003b6c:	75 0d                	jne    c0003b7b <dir_find+0x100>
c0003b6e:	89 e8                	mov    eax,ebp
c0003b70:	e8 9c e8 ff ff       	call   c0002411 <sum_sfn>
c0003b75:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003b79:	74 3f                	je     c0003bba <dir_find+0x13f>
c0003b7b:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003b7f:	75 13                	jne    c0003b94 <dir_find+0x119>
c0003b81:	8d 53 20             	lea    edx,[ebx+0x20]
c0003b84:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b89:	89 e8                	mov    eax,ebp
c0003b8b:	e8 7c e4 ff ff       	call   c000200c <mem_cmp>
c0003b90:	85 c0                	test   eax,eax
c0003b92:	74 26                	je     c0003bba <dir_find+0x13f>
c0003b94:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b9b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ba0:	31 d2                	xor    edx,edx
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 ed fb ff ff       	call   c0003796 <dir_next>
c0003ba9:	89 c6                	mov    esi,eax
c0003bab:	85 c0                	test   eax,eax
c0003bad:	0f 84 fb fe ff ff    	je     c0003aae <dir_find+0x33>
c0003bb3:	eb 05                	jmp    c0003bba <dir_find+0x13f>
c0003bb5:	be 04 00 00 00       	mov    esi,0x4
c0003bba:	83 c4 1c             	add    esp,0x1c
c0003bbd:	89 f0                	mov    eax,esi
c0003bbf:	5b                   	pop    ebx
c0003bc0:	5e                   	pop    esi
c0003bc1:	5f                   	pop    edi
c0003bc2:	5d                   	pop    ebp
c0003bc3:	c3                   	ret    

c0003bc4 <follow_path>:
c0003bc4:	56                   	push   esi
c0003bc5:	53                   	push   ebx
c0003bc6:	89 c3                	mov    ebx,eax
c0003bc8:	83 ec 14             	sub    esp,0x14
c0003bcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003bcf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003bd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bd5:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003bd8:	83 fa 5c             	cmp    edx,0x5c
c0003bdb:	75 07                	jne    c0003be4 <follow_path+0x20>
c0003bdd:	40                   	inc    eax
c0003bde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003be2:	eb ed                	jmp    c0003bd1 <follow_path+0xd>
c0003be4:	83 fa 2f             	cmp    edx,0x2f
c0003be7:	74 f4                	je     c0003bdd <follow_path+0x19>
c0003be9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003bf0:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003bf3:	77 3e                	ja     c0003c33 <follow_path+0x6f>
c0003bf5:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003bf9:	31 d2                	xor    edx,edx
c0003bfb:	89 d8                	mov    eax,ebx
c0003bfd:	e8 ff f8 ff ff       	call   c0003501 <dir_sdi>
c0003c02:	eb 4f                	jmp    c0003c53 <follow_path+0x8f>
c0003c04:	89 d8                	mov    eax,ebx
c0003c06:	e8 70 fe ff ff       	call   c0003a7b <dir_find>
c0003c0b:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c0e:	85 c0                	test   eax,eax
c0003c10:	75 32                	jne    c0003c44 <follow_path+0x80>
c0003c12:	80 e2 04             	and    dl,0x4
c0003c15:	75 3c                	jne    c0003c53 <follow_path+0x8f>
c0003c17:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c1b:	74 31                	je     c0003c4e <follow_path+0x8a>
c0003c1d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c20:	25 ff 01 00 00       	and    eax,0x1ff
c0003c25:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c29:	8a 06                	mov    al,BYTE PTR [esi]
c0003c2b:	e8 7c f7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003c30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c33:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c37:	89 d8                	mov    eax,ebx
c0003c39:	e8 7f ef ff ff       	call   c0002bbd <create_name>
c0003c3e:	85 c0                	test   eax,eax
c0003c40:	74 c2                	je     c0003c04 <follow_path+0x40>
c0003c42:	eb 0f                	jmp    c0003c53 <follow_path+0x8f>
c0003c44:	83 f8 04             	cmp    eax,0x4
c0003c47:	75 0a                	jne    c0003c53 <follow_path+0x8f>
c0003c49:	80 e2 04             	and    dl,0x4
c0003c4c:	75 05                	jne    c0003c53 <follow_path+0x8f>
c0003c4e:	b8 05 00 00 00       	mov    eax,0x5
c0003c53:	83 c4 14             	add    esp,0x14
c0003c56:	5b                   	pop    ebx
c0003c57:	5e                   	pop    esi
c0003c58:	c3                   	ret    

c0003c59 <dir_register>:
c0003c59:	55                   	push   ebp
c0003c5a:	57                   	push   edi
c0003c5b:	56                   	push   esi
c0003c5c:	be 06 00 00 00       	mov    esi,0x6
c0003c61:	53                   	push   ebx
c0003c62:	83 ec 2c             	sub    esp,0x2c
c0003c65:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003c68:	80 e2 a0             	and    dl,0xa0
c0003c6b:	0f 85 66 01 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003c71:	8b 38                	mov    edi,DWORD PTR [eax]
c0003c73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003c7b:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003c7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c82:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003c87:	74 06                	je     c0003c8f <dir_register+0x36>
c0003c89:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003c8d:	eb ef                	jmp    c0003c7e <dir_register+0x25>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	b9 0c 00 00 00       	mov    ecx,0xc
c0003c96:	8d 40 20             	lea    eax,[eax+0x20]
c0003c99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c9d:	89 c2                	mov    edx,eax
c0003c9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ca3:	e8 44 e3 ff ff       	call   c0001fec <mem_cpy>
c0003ca8:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003cad:	74 48                	je     c0003cf7 <dir_register+0x9e>
c0003caf:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cb3:	bd 01 00 00 00       	mov    ebp,0x1
c0003cb8:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cbb:	55                   	push   ebp
c0003cbc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003cc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cc4:	e8 86 e6 ff ff       	call   c000234f <gen_numname>
c0003cc9:	58                   	pop    eax
c0003cca:	89 d8                	mov    eax,ebx
c0003ccc:	e8 aa fd ff ff       	call   c0003a7b <dir_find>
c0003cd1:	89 c6                	mov    esi,eax
c0003cd3:	85 c0                	test   eax,eax
c0003cd5:	75 10                	jne    c0003ce7 <dir_register+0x8e>
c0003cd7:	45                   	inc    ebp
c0003cd8:	83 fd 64             	cmp    ebp,0x64
c0003cdb:	75 db                	jne    c0003cb8 <dir_register+0x5f>
c0003cdd:	be 07 00 00 00       	mov    esi,0x7
c0003ce2:	e9 f0 00 00 00       	jmp    c0003dd7 <dir_register+0x17e>
c0003ce7:	83 f8 04             	cmp    eax,0x4
c0003cea:	0f 85 e7 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003cf0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003cf4:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003cf7:	bd 01 00 00 00       	mov    ebp,0x1
c0003cfc:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d01:	74 13                	je     c0003d16 <dir_register+0xbd>
c0003d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d07:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d0c:	83 c0 0c             	add    eax,0xc
c0003d0f:	31 d2                	xor    edx,edx
c0003d11:	f7 f1                	div    ecx
c0003d13:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d16:	89 ea                	mov    edx,ebp
c0003d18:	89 d8                	mov    eax,ebx
c0003d1a:	e8 7c fb ff ff       	call   c000389b <dir_alloc>
c0003d1f:	89 c6                	mov    esi,eax
c0003d21:	85 c0                	test   eax,eax
c0003d23:	0f 85 ae 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d29:	4d                   	dec    ebp
c0003d2a:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003d2e:	74 67                	je     c0003d97 <dir_register+0x13e>
c0003d30:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d33:	89 e8                	mov    eax,ebp
c0003d35:	c1 e0 05             	shl    eax,0x5
c0003d38:	29 c2                	sub    edx,eax
c0003d3a:	89 d8                	mov    eax,ebx
c0003d3c:	e8 c0 f7 ff ff       	call   c0003501 <dir_sdi>
c0003d41:	89 c6                	mov    esi,eax
c0003d43:	85 c0                	test   eax,eax
c0003d45:	0f 85 8c 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d4f:	e8 bd e6 ff ff       	call   c0002411 <sum_sfn>
c0003d54:	0f b6 e8             	movzx  ebp,al
c0003d57:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d5a:	89 f8                	mov    eax,edi
c0003d5c:	e8 c6 e7 ff ff       	call   c0002527 <move_window>
c0003d61:	89 c6                	mov    esi,eax
c0003d63:	85 c0                	test   eax,eax
c0003d65:	75 70                	jne    c0003dd7 <dir_register+0x17e>
c0003d67:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003d6c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d6f:	83 ec 0c             	sub    esp,0xc
c0003d72:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003d75:	55                   	push   ebp
c0003d76:	e8 39 e5 ff ff       	call   c00022b4 <put_lfn>
c0003d7b:	31 d2                	xor    edx,edx
c0003d7d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d81:	89 d8                	mov    eax,ebx
c0003d83:	e8 0e fa ff ff       	call   c0003796 <dir_next>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	89 c6                	mov    esi,eax
c0003d8d:	85 c0                	test   eax,eax
c0003d8f:	75 46                	jne    c0003dd7 <dir_register+0x17e>
c0003d91:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003d95:	75 c0                	jne    c0003d57 <dir_register+0xfe>
c0003d97:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d9a:	89 f8                	mov    eax,edi
c0003d9c:	e8 86 e7 ff ff       	call   c0002527 <move_window>
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	85 c0                	test   eax,eax
c0003da5:	75 30                	jne    c0003dd7 <dir_register+0x17e>
c0003da7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003daa:	b9 20 00 00 00       	mov    ecx,0x20
c0003daf:	31 d2                	xor    edx,edx
c0003db1:	e8 4b e2 ff ff       	call   c0002001 <mem_set>
c0003db6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003db9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dc2:	e8 25 e2 ff ff       	call   c0001fec <mem_cpy>
c0003dc7:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003dca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dcd:	83 e0 18             	and    eax,0x18
c0003dd0:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003dd3:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dd7:	83 c4 2c             	add    esp,0x2c
c0003dda:	89 f0                	mov    eax,esi
c0003ddc:	5b                   	pop    ebx
c0003ddd:	5e                   	pop    esi
c0003dde:	5f                   	pop    edi
c0003ddf:	5d                   	pop    ebp
c0003de0:	c3                   	ret    

c0003de1 <f_mount>:
c0003de1:	53                   	push   ebx
c0003de2:	83 ec 18             	sub    esp,0x18
c0003de5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003de9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003df1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003df5:	e8 37 e6 ff ff       	call   c0002431 <get_ldnumber>
c0003dfa:	89 c2                	mov    edx,eax
c0003dfc:	b8 0b 00 00 00       	mov    eax,0xb
c0003e01:	85 d2                	test   edx,edx
c0003e03:	78 39                	js     c0003e3e <f_mount+0x5d>
c0003e05:	8b 04 95 a0 94 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6b60]
c0003e0c:	85 c0                	test   eax,eax
c0003e0e:	74 03                	je     c0003e13 <f_mount+0x32>
c0003e10:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e17:	85 c0                	test   eax,eax
c0003e19:	74 03                	je     c0003e1e <f_mount+0x3d>
c0003e1b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e22:	89 04 95 a0 94 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6b60],eax
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	84 db                	test   bl,bl
c0003e2d:	74 0f                	je     c0003e3e <f_mount+0x5d>
c0003e2f:	31 c9                	xor    ecx,ecx
c0003e31:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e35:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e39:	e8 3c e8 ff ff       	call   c000267a <mount_volume>
c0003e3e:	83 c4 18             	add    esp,0x18
c0003e41:	5b                   	pop    ebx
c0003e42:	c3                   	ret    

c0003e43 <f_open>:
c0003e43:	55                   	push   ebp
c0003e44:	b8 09 00 00 00       	mov    eax,0x9
c0003e49:	57                   	push   edi
c0003e4a:	56                   	push   esi
c0003e4b:	53                   	push   ebx
c0003e4c:	83 ec 5c             	sub    esp,0x5c
c0003e4f:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e53:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e57:	85 db                	test   ebx,ebx
c0003e59:	0f 84 9f 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003e5f:	89 fd                	mov    ebp,edi
c0003e61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e65:	83 e5 3f             	and    ebp,0x3f
c0003e68:	89 e8                	mov    eax,ebp
c0003e6a:	89 ee                	mov    esi,ebp
c0003e6c:	0f b6 c8             	movzx  ecx,al
c0003e6f:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003e73:	e8 02 e8 ff ff       	call   c000267a <mount_volume>
c0003e78:	85 c0                	test   eax,eax
c0003e7a:	0f 85 78 02 00 00    	jne    c00040f8 <f_open+0x2b5>
c0003e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e84:	83 ec 0c             	sub    esp,0xc
c0003e87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003e8b:	68 00 02 00 00       	push   0x200
c0003e90:	e8 73 1f 00 00       	call   c0005e08 <ff_memalloc>
c0003e95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	b8 11 00 00 00       	mov    eax,0x11
c0003ea1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ea6:	0f 84 52 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003eac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003eb8:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ebb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ebf:	e8 00 fd ff ff       	call   c0003bc4 <follow_path>
c0003ec4:	85 c0                	test   eax,eax
c0003ec6:	75 0c                	jne    c0003ed4 <f_open+0x91>
c0003ec8:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ecd:	74 05                	je     c0003ed4 <f_open+0x91>
c0003ecf:	b8 06 00 00 00       	mov    eax,0x6
c0003ed4:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003eda:	0f 84 d5 00 00 00    	je     c0003fb5 <f_open+0x172>
c0003ee0:	85 c0                	test   eax,eax
c0003ee2:	74 21                	je     c0003f05 <f_open+0xc2>
c0003ee4:	83 f8 04             	cmp    eax,0x4
c0003ee7:	0f 85 f0 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003eed:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ef1:	e8 63 fd ff ff       	call   c0003c59 <dir_register>
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	0f 85 df 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003efe:	83 cd 08             	or     ebp,0x8
c0003f01:	89 ee                	mov    esi,ebp
c0003f03:	eb 2c                	jmp    c0003f31 <f_open+0xee>
c0003f05:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f09:	b8 07 00 00 00       	mov    eax,0x7
c0003f0e:	80 e2 11             	and    dl,0x11
c0003f11:	0f 85 c6 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f17:	b8 08 00 00 00       	mov    eax,0x8
c0003f1c:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f22:	0f 85 b5 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f28:	83 e7 08             	and    edi,0x8
c0003f2b:	0f 84 b1 00 00 00    	je     c0003fe2 <f_open+0x19f>
c0003f31:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f39:	89 ea                	mov    edx,ebp
c0003f3b:	8a 00                	mov    al,BYTE PTR [eax]
c0003f3d:	e8 6a f4 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003f42:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f47:	89 c7                	mov    edi,eax
c0003f49:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f4c:	e8 98 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f55:	31 c9                	xor    ecx,ecx
c0003f57:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f5f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003f63:	e8 6d f4 ff ff       	call   c00033d5 <st_clust.isra.1>
c0003f68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f6c:	31 d2                	xor    edx,edx
c0003f6e:	83 c0 1c             	add    eax,0x1c
c0003f71:	e8 73 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f7a:	85 ff                	test   edi,edi
c0003f7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f80:	74 60                	je     c0003fe2 <f_open+0x19f>
c0003f82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f86:	31 c9                	xor    ecx,ecx
c0003f88:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003f8b:	89 fa                	mov    edx,edi
c0003f8d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f91:	e8 72 f7 ff ff       	call   c0003708 <remove_chain>
c0003f96:	85 c0                	test   eax,eax
c0003f98:	0f 85 3f 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f9e:	89 ea                	mov    edx,ebp
c0003fa0:	4f                   	dec    edi
c0003fa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fa5:	e8 7d e5 ff ff       	call   c0002527 <move_window>
c0003faa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fae:	85 c0                	test   eax,eax
c0003fb0:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003fb3:	eb 27                	jmp    c0003fdc <f_open+0x199>
c0003fb5:	85 c0                	test   eax,eax
c0003fb7:	0f 85 20 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fbd:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003fc1:	b8 04 00 00 00       	mov    eax,0x4
c0003fc6:	f6 c2 10             	test   dl,0x10
c0003fc9:	0f 85 0e 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fcf:	83 e7 02             	and    edi,0x2
c0003fd2:	74 0e                	je     c0003fe2 <f_open+0x19f>
c0003fd4:	b8 07 00 00 00       	mov    eax,0x7
c0003fd9:	80 e2 01             	and    dl,0x1
c0003fdc:	0f 85 fb 00 00 00    	jne    c00040dd <f_open+0x29a>
c0003fe2:	f7 c6 08 00 00 00    	test   esi,0x8
c0003fe8:	74 03                	je     c0003fed <f_open+0x1aa>
c0003fea:	83 ce 40             	or     esi,0x40
c0003fed:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003ff1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ff5:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003ff8:	89 fa                	mov    edx,edi
c0003ffa:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ffd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004000:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004003:	e8 a4 f3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004008:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000400b:	8d 47 1c             	lea    eax,[edi+0x1c]
c000400e:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004011:	e8 b7 df ff ff       	call   c0001fcd <ld_dword>
c0004016:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004018:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000401b:	31 d2                	xor    edx,edx
c000401d:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004021:	b9 00 02 00 00       	mov    ecx,0x200
c0004026:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000402a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c000402e:	89 f0                	mov    eax,esi
c0004030:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004037:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000403a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004041:	89 f8                	mov    eax,edi
c0004043:	e8 b9 df ff ff       	call   c0002001 <mem_set>
c0004048:	83 e6 20             	and    esi,0x20
c000404b:	75 07                	jne    c0004054 <f_open+0x211>
c000404d:	31 c0                	xor    eax,eax
c000404f:	e9 89 00 00 00       	jmp    c00040dd <f_open+0x29a>
c0004054:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0004057:	85 ed                	test   ebp,ebp
c0004059:	74 f2                	je     c000404d <f_open+0x20a>
c000405b:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c000405e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004062:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004065:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0004069:	c1 e6 09             	shl    esi,0x9
c000406c:	39 ee                	cmp    esi,ebp
c000406e:	73 1c                	jae    c000408c <f_open+0x249>
c0004070:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004072:	29 f5                	sub    ebp,esi
c0004074:	e8 84 f3 ff ff       	call   c00033fd <get_fat.isra.2>
c0004079:	89 c2                	mov    edx,eax
c000407b:	83 f8 01             	cmp    eax,0x1
c000407e:	76 10                	jbe    c0004090 <f_open+0x24d>
c0004080:	83 f8 ff             	cmp    eax,0xffffffff
c0004083:	75 e7                	jne    c000406c <f_open+0x229>
c0004085:	b8 01 00 00 00       	mov    eax,0x1
c000408a:	eb 09                	jmp    c0004095 <f_open+0x252>
c000408c:	31 c0                	xor    eax,eax
c000408e:	eb 05                	jmp    c0004095 <f_open+0x252>
c0004090:	b8 02 00 00 00       	mov    eax,0x2
c0004095:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0004098:	85 c0                	test   eax,eax
c000409a:	75 41                	jne    c00040dd <f_open+0x29a>
c000409c:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c00040a2:	74 a9                	je     c000404d <f_open+0x20a>
c00040a4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00040a8:	89 f0                	mov    eax,esi
c00040aa:	e8 68 e1 ff ff       	call   c0002217 <clst2sect>
c00040af:	89 c2                	mov    edx,eax
c00040b1:	b8 02 00 00 00       	mov    eax,0x2
c00040b6:	85 d2                	test   edx,edx
c00040b8:	74 23                	je     c00040dd <f_open+0x29a>
c00040ba:	c1 ed 09             	shr    ebp,0x9
c00040bd:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c00040c1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00040c4:	6a 01                	push   0x1
c00040c6:	50                   	push   eax
c00040c7:	57                   	push   edi
c00040c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00040cc:	50                   	push   eax
c00040cd:	e8 a3 de ff ff       	call   c0001f75 <disk_read>
c00040d2:	83 c4 10             	add    esp,0x10
c00040d5:	85 c0                	test   eax,eax
c00040d7:	0f 95 c0             	setne  al
c00040da:	0f b6 c0             	movzx  eax,al
c00040dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00040e1:	83 ec 0c             	sub    esp,0xc
c00040e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00040e8:	e8 33 1d 00 00       	call   c0005e20 <ff_memfree>
c00040ed:	83 c4 10             	add    esp,0x10
c00040f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040f4:	85 c0                	test   eax,eax
c00040f6:	74 06                	je     c00040fe <f_open+0x2bb>
c00040f8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00040fe:	83 c4 5c             	add    esp,0x5c
c0004101:	5b                   	pop    ebx
c0004102:	5e                   	pop    esi
c0004103:	5f                   	pop    edi
c0004104:	5d                   	pop    ebp
c0004105:	c3                   	ret    

c0004106 <f_read>:
c0004106:	55                   	push   ebp
c0004107:	57                   	push   edi
c0004108:	56                   	push   esi
c0004109:	53                   	push   ebx
c000410a:	83 ec 2c             	sub    esp,0x2c
c000410d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004111:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004115:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000411b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000411f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004123:	89 d8                	mov    eax,ebx
c0004125:	e8 54 e3 ff ff       	call   c000247e <validate>
c000412a:	89 c5                	mov    ebp,eax
c000412c:	85 c0                	test   eax,eax
c000412e:	0f 85 c7 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004134:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004138:	85 ed                	test   ebp,ebp
c000413a:	0f 85 bb 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004140:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004144:	0f 84 ac 01 00 00    	je     c00042f6 <f_read+0x1f0>
c000414a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000414d:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004150:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004154:	39 f0                	cmp    eax,esi
c0004156:	0f 86 b0 00 00 00    	jbe    c000420c <f_read+0x106>
c000415c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0004160:	e9 a7 00 00 00       	jmp    c000420c <f_read+0x106>
c0004165:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004168:	a9 ff 01 00 00       	test   eax,0x1ff
c000416d:	0f 85 56 01 00 00    	jne    c00042c9 <f_read+0x1c3>
c0004173:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004177:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c000417b:	89 c2                	mov    edx,eax
c000417d:	4f                   	dec    edi
c000417e:	c1 ea 09             	shr    edx,0x9
c0004181:	21 d7                	and    edi,edx
c0004183:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0004187:	0f 84 8f 00 00 00    	je     c000421c <f_read+0x116>
c000418d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004191:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004194:	89 c8                	mov    eax,ecx
c0004196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000419a:	e8 78 e0 ff ff       	call   c0002217 <clst2sect>
c000419f:	85 c0                	test   eax,eax
c00041a1:	0f 84 8d 00 00 00    	je     c0004234 <f_read+0x12e>
c00041a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ab:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c00041b3:	8d 3c 01             	lea    edi,[ecx+eax*1]
c00041b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041ba:	0f 86 bf 00 00 00    	jbe    c000427f <f_read+0x179>
c00041c0:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00041c4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041c8:	c1 ee 09             	shr    esi,0x9
c00041cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041cf:	01 f2                	add    edx,esi
c00041d1:	39 c2                	cmp    edx,eax
c00041d3:	76 06                	jbe    c00041db <f_read+0xd5>
c00041d5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041d9:	89 c6                	mov    esi,eax
c00041db:	56                   	push   esi
c00041dc:	57                   	push   edi
c00041dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041e5:	50                   	push   eax
c00041e6:	e8 8a dd ff ff       	call   c0001f75 <disk_read>
c00041eb:	83 c4 10             	add    esp,0x10
c00041ee:	85 c0                	test   eax,eax
c00041f0:	75 55                	jne    c0004247 <f_read+0x141>
c00041f2:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041f6:	75 65                	jne    c000425d <f_read+0x157>
c00041f8:	c1 e6 09             	shl    esi,0x9
c00041fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041ff:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004203:	01 30                	add    DWORD PTR [eax],esi
c0004205:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004209:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000420c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004211:	0f 85 4e ff ff ff    	jne    c0004165 <f_read+0x5f>
c0004217:	e9 df 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c000421c:	85 c0                	test   eax,eax
c000421e:	75 05                	jne    c0004225 <f_read+0x11f>
c0004220:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004223:	eb 0a                	jmp    c000422f <f_read+0x129>
c0004225:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004228:	8b 03                	mov    eax,DWORD PTR [ebx]
c000422a:	e8 ce f1 ff ff       	call   c00033fd <get_fat.isra.2>
c000422f:	83 f8 01             	cmp    eax,0x1
c0004232:	77 0e                	ja     c0004242 <f_read+0x13c>
c0004234:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004238:	bd 02 00 00 00       	mov    ebp,0x2
c000423d:	e9 b9 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004242:	83 f8 ff             	cmp    eax,0xffffffff
c0004245:	75 0e                	jne    c0004255 <f_read+0x14f>
c0004247:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000424b:	bd 01 00 00 00       	mov    ebp,0x1
c0004250:	e9 a6 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004255:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004258:	e9 30 ff ff ff       	jmp    c000418d <f_read+0x87>
c000425d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004260:	29 f8                	sub    eax,edi
c0004262:	39 f0                	cmp    eax,esi
c0004264:	73 92                	jae    c00041f8 <f_read+0xf2>
c0004266:	c1 e0 09             	shl    eax,0x9
c0004269:	8d 53 28             	lea    edx,[ebx+0x28]
c000426c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004270:	b9 00 02 00 00       	mov    ecx,0x200
c0004275:	e8 72 dd ff ff       	call   c0001fec <mem_cpy>
c000427a:	e9 79 ff ff ff       	jmp    c00041f8 <f_read+0xf2>
c000427f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004282:	39 f8                	cmp    eax,edi
c0004284:	74 40                	je     c00042c6 <f_read+0x1c0>
c0004286:	8d 73 28             	lea    esi,[ebx+0x28]
c0004289:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000428d:	74 1e                	je     c00042ad <f_read+0x1a7>
c000428f:	6a 01                	push   0x1
c0004291:	50                   	push   eax
c0004292:	56                   	push   esi
c0004293:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004297:	50                   	push   eax
c0004298:	e8 ee dc ff ff       	call   c0001f8b <disk_write>
c000429d:	83 c4 10             	add    esp,0x10
c00042a0:	85 c0                	test   eax,eax
c00042a2:	75 a3                	jne    c0004247 <f_read+0x141>
c00042a4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042a7:	83 e0 7f             	and    eax,0x7f
c00042aa:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ad:	6a 01                	push   0x1
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b9:	50                   	push   eax
c00042ba:	e8 b6 dc ff ff       	call   c0001f75 <disk_read>
c00042bf:	83 c4 10             	add    esp,0x10
c00042c2:	85 c0                	test   eax,eax
c00042c4:	75 81                	jne    c0004247 <f_read+0x141>
c00042c6:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00042c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042cc:	ba 00 02 00 00       	mov    edx,0x200
c00042d1:	25 ff 01 00 00       	and    eax,0x1ff
c00042d6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00042da:	29 c2                	sub    edx,eax
c00042dc:	39 d6                	cmp    esi,edx
c00042de:	76 02                	jbe    c00042e2 <f_read+0x1dc>
c00042e0:	89 d6                	mov    esi,edx
c00042e2:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042e6:	89 f1                	mov    ecx,esi
c00042e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042ec:	e8 fb dc ff ff       	call   c0001fec <mem_cpy>
c00042f1:	e9 05 ff ff ff       	jmp    c00041fb <f_read+0xf5>
c00042f6:	bd 07 00 00 00       	mov    ebp,0x7
c00042fb:	83 c4 2c             	add    esp,0x2c
c00042fe:	89 e8                	mov    eax,ebp
c0004300:	5b                   	pop    ebx
c0004301:	5e                   	pop    esi
c0004302:	5f                   	pop    edi
c0004303:	5d                   	pop    ebp
c0004304:	c3                   	ret    

c0004305 <f_write>:
c0004305:	55                   	push   ebp
c0004306:	57                   	push   edi
c0004307:	56                   	push   esi
c0004308:	53                   	push   ebx
c0004309:	83 ec 2c             	sub    esp,0x2c
c000430c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004310:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004314:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000431a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000431e:	89 d8                	mov    eax,ebx
c0004320:	e8 59 e1 ff ff       	call   c000247e <validate>
c0004325:	89 c5                	mov    ebp,eax
c0004327:	85 c0                	test   eax,eax
c0004329:	0f 85 14 02 00 00    	jne    c0004543 <f_write+0x23e>
c000432f:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004333:	85 ed                	test   ebp,ebp
c0004335:	0f 85 08 02 00 00    	jne    c0004543 <f_write+0x23e>
c000433b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433f:	0f 84 f9 01 00 00    	je     c000453e <f_write+0x239>
c0004345:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004348:	89 c7                	mov    edi,eax
c000434a:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c000434e:	0f 83 ef 00 00 00    	jae    c0004443 <f_write+0x13e>
c0004354:	f7 d0                	not    eax
c0004356:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000435a:	e9 e4 00 00 00       	jmp    c0004443 <f_write+0x13e>
c000435f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004362:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004368:	0f 85 9a 01 00 00    	jne    c0004508 <f_write+0x203>
c000436e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004372:	89 d1                	mov    ecx,edx
c0004374:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004378:	c1 e9 09             	shr    ecx,0x9
c000437b:	48                   	dec    eax
c000437c:	21 c8                	and    eax,ecx
c000437e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004382:	0f 84 c8 00 00 00    	je     c0004450 <f_write+0x14b>
c0004388:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000438c:	0f 85 22 01 00 00    	jne    c00044b4 <f_write+0x1af>
c0004392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004396:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004399:	89 c8                	mov    eax,ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	e8 73 de ff ff       	call   c0002217 <clst2sect>
c00043a4:	85 c0                	test   eax,eax
c00043a6:	0f 84 d2 00 00 00    	je     c000447e <f_write+0x179>
c00043ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00043b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b4:	01 c7                	add    edi,eax
c00043b6:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043be:	0f 86 1c 01 00 00    	jbe    c00044e0 <f_write+0x1db>
c00043c4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043c8:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043cc:	c1 ee 09             	shr    esi,0x9
c00043cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043d3:	01 f2                	add    edx,esi
c00043d5:	39 c2                	cmp    edx,eax
c00043d7:	76 06                	jbe    c00043df <f_write+0xda>
c00043d9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043dd:	89 c6                	mov    esi,eax
c00043df:	56                   	push   esi
c00043e0:	57                   	push   edi
c00043e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043e9:	50                   	push   eax
c00043ea:	e8 9c db ff ff       	call   c0001f8b <disk_write>
c00043ef:	83 c4 10             	add    esp,0x10
c00043f2:	85 c0                	test   eax,eax
c00043f4:	0f 85 97 00 00 00    	jne    c0004491 <f_write+0x18c>
c00043fa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00043fd:	29 fa                	sub    edx,edi
c00043ff:	39 f2                	cmp    edx,esi
c0004401:	73 1d                	jae    c0004420 <f_write+0x11b>
c0004403:	8d 43 28             	lea    eax,[ebx+0x28]
c0004406:	c1 e2 09             	shl    edx,0x9
c0004409:	b9 00 02 00 00       	mov    ecx,0x200
c000440e:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004412:	e8 d5 db ff ff       	call   c0001fec <mem_cpy>
c0004417:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000441a:	83 e0 7f             	and    eax,0x7f
c000441d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004420:	c1 e6 09             	shl    esi,0x9
c0004423:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004427:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000442b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000442f:	01 30                	add    DWORD PTR [eax],esi
c0004431:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004434:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004437:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000443a:	39 f0                	cmp    eax,esi
c000443c:	73 02                	jae    c0004440 <f_write+0x13b>
c000443e:	89 f0                	mov    eax,esi
c0004440:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004443:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004448:	0f 85 11 ff ff ff    	jne    c000435f <f_write+0x5a>
c000444e:	eb 1b                	jmp    c000446b <f_write+0x166>
c0004450:	85 d2                	test   edx,edx
c0004452:	75 09                	jne    c000445d <f_write+0x158>
c0004454:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004457:	85 c0                	test   eax,eax
c0004459:	75 1e                	jne    c0004479 <f_write+0x174>
c000445b:	eb 03                	jmp    c0004460 <f_write+0x15b>
c000445d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004460:	89 d8                	mov    eax,ebx
c0004462:	e8 62 f1 ff ff       	call   c00035c9 <create_chain>
c0004467:	85 c0                	test   eax,eax
c0004469:	75 0e                	jne    c0004479 <f_write+0x174>
c000446b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000446e:	83 c8 40             	or     eax,0x40
c0004471:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004474:	e9 ca 00 00 00       	jmp    c0004543 <f_write+0x23e>
c0004479:	83 f8 01             	cmp    eax,0x1
c000447c:	75 0e                	jne    c000448c <f_write+0x187>
c000447e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004482:	bd 02 00 00 00       	mov    ebp,0x2
c0004487:	e9 b7 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000448c:	83 f8 ff             	cmp    eax,0xffffffff
c000448f:	75 0e                	jne    c000449f <f_write+0x19a>
c0004491:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004495:	bd 01 00 00 00       	mov    ebp,0x1
c000449a:	e9 a4 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000449f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044a2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044a6:	0f 85 dc fe ff ff    	jne    c0004388 <f_write+0x83>
c00044ac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044af:	e9 d4 fe ff ff       	jmp    c0004388 <f_write+0x83>
c00044b4:	6a 01                	push   0x1
c00044b6:	8d 43 28             	lea    eax,[ebx+0x28]
c00044b9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044bc:	50                   	push   eax
c00044bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044c5:	50                   	push   eax
c00044c6:	e8 c0 da ff ff       	call   c0001f8b <disk_write>
c00044cb:	83 c4 10             	add    esp,0x10
c00044ce:	85 c0                	test   eax,eax
c00044d0:	75 bf                	jne    c0004491 <f_write+0x18c>
c00044d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044d5:	83 e0 7f             	and    eax,0x7f
c00044d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044db:	e9 b2 fe ff ff       	jmp    c0004392 <f_write+0x8d>
c00044e0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00044e3:	74 20                	je     c0004505 <f_write+0x200>
c00044e5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044e8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00044eb:	76 18                	jbe    c0004505 <f_write+0x200>
c00044ed:	6a 01                	push   0x1
c00044ef:	8d 43 28             	lea    eax,[ebx+0x28]
c00044f2:	57                   	push   edi
c00044f3:	50                   	push   eax
c00044f4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00044f8:	50                   	push   eax
c00044f9:	e8 77 da ff ff       	call   c0001f75 <disk_read>
c00044fe:	83 c4 10             	add    esp,0x10
c0004501:	85 c0                	test   eax,eax
c0004503:	75 8c                	jne    c0004491 <f_write+0x18c>
c0004505:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004508:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000450b:	ba 00 02 00 00       	mov    edx,0x200
c0004510:	25 ff 01 00 00       	and    eax,0x1ff
c0004515:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004519:	29 c2                	sub    edx,eax
c000451b:	39 d6                	cmp    esi,edx
c000451d:	76 02                	jbe    c0004521 <f_write+0x21c>
c000451f:	89 d6                	mov    esi,edx
c0004521:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004525:	89 f1                	mov    ecx,esi
c0004527:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000452b:	e8 bc da ff ff       	call   c0001fec <mem_cpy>
c0004530:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004533:	83 c8 80             	or     eax,0xffffff80
c0004536:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004539:	e9 e5 fe ff ff       	jmp    c0004423 <f_write+0x11e>
c000453e:	bd 07 00 00 00       	mov    ebp,0x7
c0004543:	83 c4 2c             	add    esp,0x2c
c0004546:	89 e8                	mov    eax,ebp
c0004548:	5b                   	pop    ebx
c0004549:	5e                   	pop    esi
c000454a:	5f                   	pop    edi
c000454b:	5d                   	pop    ebp
c000454c:	c3                   	ret    

c000454d <f_sync>:
c000454d:	56                   	push   esi
c000454e:	53                   	push   ebx
c000454f:	83 ec 14             	sub    esp,0x14
c0004552:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004556:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 1d df ff ff       	call   c000247e <validate>
c0004561:	85 c0                	test   eax,eax
c0004563:	0f 85 a3 00 00 00    	jne    c000460c <f_sync+0xbf>
c0004569:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000456c:	f6 c2 40             	test   dl,0x40
c000456f:	0f 84 97 00 00 00    	je     c000460c <f_sync+0xbf>
c0004575:	80 e2 80             	and    dl,0x80
c0004578:	74 2e                	je     c00045a8 <f_sync+0x5b>
c000457a:	6a 01                	push   0x1
c000457c:	8d 43 28             	lea    eax,[ebx+0x28]
c000457f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004582:	50                   	push   eax
c0004583:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004587:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000458b:	50                   	push   eax
c000458c:	e8 fa d9 ff ff       	call   c0001f8b <disk_write>
c0004591:	83 c4 10             	add    esp,0x10
c0004594:	89 c2                	mov    edx,eax
c0004596:	b8 01 00 00 00       	mov    eax,0x1
c000459b:	85 d2                	test   edx,edx
c000459d:	75 6d                	jne    c000460c <f_sync+0xbf>
c000459f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045a2:	83 e0 7f             	and    eax,0x7f
c00045a5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045a8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045af:	e8 73 df ff ff       	call   c0002527 <move_window>
c00045b4:	85 c0                	test   eax,eax
c00045b6:	75 54                	jne    c000460c <f_sync+0xbf>
c00045b8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045bb:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045be:	89 f2                	mov    edx,esi
c00045c0:	83 c8 20             	or     eax,0x20
c00045c3:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045c6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045cb:	e8 05 ee ff ff       	call   c00033d5 <st_clust.isra.1>
c00045d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045d3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045d6:	e8 0e da ff ff       	call   c0001fe9 <st_dword>
c00045db:	8d 46 16             	lea    eax,[esi+0x16]
c00045de:	ba 00 00 21 50       	mov    edx,0x50210000
c00045e3:	e8 01 da ff ff       	call   c0001fe9 <st_dword>
c00045e8:	31 d2                	xor    edx,edx
c00045ea:	8d 46 12             	lea    eax,[esi+0x12]
c00045ed:	e8 f3 d9 ff ff       	call   c0001fe5 <st_word>
c00045f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00045fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045fe:	e8 5b e9 ff ff       	call   c0002f5e <sync_fs>
c0004603:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004606:	83 e2 bf             	and    edx,0xffffffbf
c0004609:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000460c:	83 c4 14             	add    esp,0x14
c000460f:	5b                   	pop    ebx
c0004610:	5e                   	pop    esi
c0004611:	c3                   	ret    

c0004612 <f_close>:
c0004612:	53                   	push   ebx
c0004613:	83 ec 24             	sub    esp,0x24
c0004616:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000461a:	53                   	push   ebx
c000461b:	e8 2d ff ff ff       	call   c000454d <f_sync>
c0004620:	83 c4 10             	add    esp,0x10
c0004623:	85 c0                	test   eax,eax
c0004625:	75 15                	jne    c000463c <f_close+0x2a>
c0004627:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000462b:	89 d8                	mov    eax,ebx
c000462d:	e8 4c de ff ff       	call   c000247e <validate>
c0004632:	85 c0                	test   eax,eax
c0004634:	75 06                	jne    c000463c <f_close+0x2a>
c0004636:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000463c:	83 c4 18             	add    esp,0x18
c000463f:	5b                   	pop    ebx
c0004640:	c3                   	ret    

c0004641 <f_lseek>:
c0004641:	55                   	push   ebp
c0004642:	57                   	push   edi
c0004643:	56                   	push   esi
c0004644:	53                   	push   ebx
c0004645:	83 ec 2c             	sub    esp,0x2c
c0004648:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000464c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004650:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004654:	89 d8                	mov    eax,ebx
c0004656:	e8 23 de ff ff       	call   c000247e <validate>
c000465b:	89 c5                	mov    ebp,eax
c000465d:	85 c0                	test   eax,eax
c000465f:	0f 85 83 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004665:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004669:	85 ed                	test   ebp,ebp
c000466b:	0f 85 77 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004671:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004674:	39 f0                	cmp    eax,esi
c0004676:	73 08                	jae    c0004680 <f_lseek+0x3f>
c0004678:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000467c:	75 02                	jne    c0004680 <f_lseek+0x3f>
c000467e:	89 c6                	mov    esi,eax
c0004680:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004683:	85 f6                	test   esi,esi
c0004685:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000468c:	75 07                	jne    c0004695 <f_lseek+0x54>
c000468e:	31 f6                	xor    esi,esi
c0004690:	e9 e2 00 00 00       	jmp    c0004777 <f_lseek+0x136>
c0004695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004699:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000469d:	c1 e7 09             	shl    edi,0x9
c00046a0:	85 c9                	test   ecx,ecx
c00046a2:	74 28                	je     c00046cc <f_lseek+0x8b>
c00046a4:	49                   	dec    ecx
c00046a5:	31 d2                	xor    edx,edx
c00046a7:	8d 46 ff             	lea    eax,[esi-0x1]
c00046aa:	f7 f7                	div    edi
c00046ac:	31 d2                	xor    edx,edx
c00046ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046b2:	89 c8                	mov    eax,ecx
c00046b4:	f7 f7                	div    edi
c00046b6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046ba:	72 10                	jb     c00046cc <f_lseek+0x8b>
c00046bc:	89 f8                	mov    eax,edi
c00046be:	f7 d8                	neg    eax
c00046c0:	21 c1                	and    ecx,eax
c00046c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046c5:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046c8:	29 ce                	sub    esi,ecx
c00046ca:	eb 3c                	jmp    c0004708 <f_lseek+0xc7>
c00046cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046cf:	85 c0                	test   eax,eax
c00046d1:	75 32                	jne    c0004705 <f_lseek+0xc4>
c00046d3:	31 d2                	xor    edx,edx
c00046d5:	89 d8                	mov    eax,ebx
c00046d7:	e8 ed ee ff ff       	call   c00035c9 <create_chain>
c00046dc:	83 f8 01             	cmp    eax,0x1
c00046df:	75 0e                	jne    c00046ef <f_lseek+0xae>
c00046e1:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00046e5:	bd 02 00 00 00       	mov    ebp,0x2
c00046ea:	e9 f9 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c00046ef:	83 f8 ff             	cmp    eax,0xffffffff
c00046f2:	75 0e                	jne    c0004702 <f_lseek+0xc1>
c00046f4:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00046f8:	bd 01 00 00 00       	mov    ebp,0x1
c00046fd:	e9 e6 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c0004702:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004705:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004708:	85 c0                	test   eax,eax
c000470a:	74 82                	je     c000468e <f_lseek+0x4d>
c000470c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000470f:	39 fe                	cmp    esi,edi
c0004711:	76 3d                	jbe    c0004750 <f_lseek+0x10f>
c0004713:	01 fa                	add    edx,edi
c0004715:	29 fe                	sub    esi,edi
c0004717:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000471a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000471e:	89 c2                	mov    edx,eax
c0004720:	74 0d                	je     c000472f <f_lseek+0xee>
c0004722:	89 d8                	mov    eax,ebx
c0004724:	e8 a0 ee ff ff       	call   c00035c9 <create_chain>
c0004729:	85 c0                	test   eax,eax
c000472b:	75 09                	jne    c0004736 <f_lseek+0xf5>
c000472d:	eb 1f                	jmp    c000474e <f_lseek+0x10d>
c000472f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004731:	e8 c7 ec ff ff       	call   c00033fd <get_fat.isra.2>
c0004736:	83 f8 ff             	cmp    eax,0xffffffff
c0004739:	74 b9                	je     c00046f4 <f_lseek+0xb3>
c000473b:	83 f8 01             	cmp    eax,0x1
c000473e:	76 a1                	jbe    c00046e1 <f_lseek+0xa0>
c0004740:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004744:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004747:	76 98                	jbe    c00046e1 <f_lseek+0xa0>
c0004749:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000474c:	eb be                	jmp    c000470c <f_lseek+0xcb>
c000474e:	31 f6                	xor    esi,esi
c0004750:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004753:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004759:	0f 84 2f ff ff ff    	je     c000468e <f_lseek+0x4d>
c000475f:	89 c2                	mov    edx,eax
c0004761:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004765:	e8 ad da ff ff       	call   c0002217 <clst2sect>
c000476a:	85 c0                	test   eax,eax
c000476c:	0f 84 6f ff ff ff    	je     c00046e1 <f_lseek+0xa0>
c0004772:	c1 ee 09             	shr    esi,0x9
c0004775:	01 c6                	add    esi,eax
c0004777:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000477a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000477d:	76 0c                	jbe    c000478b <f_lseek+0x14a>
c000477f:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004785:	83 ca 40             	or     edx,0x40
c0004788:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000478b:	a9 ff 01 00 00       	test   eax,0x1ff
c0004790:	74 56                	je     c00047e8 <f_lseek+0x1a7>
c0004792:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004795:	39 f0                	cmp    eax,esi
c0004797:	74 4f                	je     c00047e8 <f_lseek+0x1a7>
c0004799:	8d 7b 28             	lea    edi,[ebx+0x28]
c000479c:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047a0:	74 26                	je     c00047c8 <f_lseek+0x187>
c00047a2:	6a 01                	push   0x1
c00047a4:	50                   	push   eax
c00047a5:	57                   	push   edi
c00047a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047aa:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047ae:	50                   	push   eax
c00047af:	e8 d7 d7 ff ff       	call   c0001f8b <disk_write>
c00047b4:	83 c4 10             	add    esp,0x10
c00047b7:	85 c0                	test   eax,eax
c00047b9:	0f 85 35 ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047bf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047c2:	83 e0 7f             	and    eax,0x7f
c00047c5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047c8:	6a 01                	push   0x1
c00047ca:	56                   	push   esi
c00047cb:	57                   	push   edi
c00047cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047d0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047d4:	50                   	push   eax
c00047d5:	e8 9b d7 ff ff       	call   c0001f75 <disk_read>
c00047da:	83 c4 10             	add    esp,0x10
c00047dd:	85 c0                	test   eax,eax
c00047df:	0f 85 0f ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047e5:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00047e8:	83 c4 2c             	add    esp,0x2c
c00047eb:	89 e8                	mov    eax,ebp
c00047ed:	5b                   	pop    ebx
c00047ee:	5e                   	pop    esi
c00047ef:	5f                   	pop    edi
c00047f0:	5d                   	pop    ebp
c00047f1:	c3                   	ret    

c00047f2 <f_opendir>:
c00047f2:	56                   	push   esi
c00047f3:	b8 09 00 00 00       	mov    eax,0x9
c00047f8:	53                   	push   ebx
c00047f9:	83 ec 24             	sub    esp,0x24
c00047fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004800:	85 db                	test   ebx,ebx
c0004802:	0f 84 af 00 00 00    	je     c00048b7 <f_opendir+0xc5>
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000480e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004812:	e8 63 de ff ff       	call   c000267a <mount_volume>
c0004817:	85 c0                	test   eax,eax
c0004819:	0f 85 92 00 00 00    	jne    c00048b1 <f_opendir+0xbf>
c000481f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004823:	83 ec 0c             	sub    esp,0xc
c0004826:	89 03                	mov    DWORD PTR [ebx],eax
c0004828:	68 00 02 00 00       	push   0x200
c000482d:	e8 d6 15 00 00       	call   c0005e08 <ff_memalloc>
c0004832:	83 c4 10             	add    esp,0x10
c0004835:	89 c6                	mov    esi,eax
c0004837:	b8 11 00 00 00       	mov    eax,0x11
c000483c:	85 f6                	test   esi,esi
c000483e:	74 77                	je     c00048b7 <f_opendir+0xc5>
c0004840:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004844:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004848:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000484b:	89 d8                	mov    eax,ebx
c000484d:	e8 72 f3 ff ff       	call   c0003bc4 <follow_path>
c0004852:	85 c0                	test   eax,eax
c0004854:	75 37                	jne    c000488d <f_opendir+0x9b>
c0004856:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000485a:	75 1c                	jne    c0004878 <f_opendir+0x86>
c000485c:	b8 05 00 00 00       	mov    eax,0x5
c0004861:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004865:	74 26                	je     c000488d <f_opendir+0x9b>
c0004867:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000486a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486e:	8a 00                	mov    al,BYTE PTR [eax]
c0004870:	e8 37 eb ff ff       	call   c00033ac <ld_clust.isra.0>
c0004875:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004878:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000487c:	31 d2                	xor    edx,edx
c000487e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004882:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004886:	89 d8                	mov    eax,ebx
c0004888:	e8 74 ec ff ff       	call   c0003501 <dir_sdi>
c000488d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004891:	83 ec 0c             	sub    esp,0xc
c0004894:	56                   	push   esi
c0004895:	e8 86 15 00 00       	call   c0005e20 <ff_memfree>
c000489a:	83 c4 10             	add    esp,0x10
c000489d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a1:	83 f8 04             	cmp    eax,0x4
c00048a4:	74 06                	je     c00048ac <f_opendir+0xba>
c00048a6:	85 c0                	test   eax,eax
c00048a8:	74 0d                	je     c00048b7 <f_opendir+0xc5>
c00048aa:	eb 05                	jmp    c00048b1 <f_opendir+0xbf>
c00048ac:	b8 05 00 00 00       	mov    eax,0x5
c00048b1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048b7:	83 c4 24             	add    esp,0x24
c00048ba:	5b                   	pop    ebx
c00048bb:	5e                   	pop    esi
c00048bc:	c3                   	ret    

c00048bd <f_closedir>:
c00048bd:	53                   	push   ebx
c00048be:	83 ec 18             	sub    esp,0x18
c00048c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048c5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048c9:	89 d8                	mov    eax,ebx
c00048cb:	e8 ae db ff ff       	call   c000247e <validate>
c00048d0:	85 c0                	test   eax,eax
c00048d2:	75 06                	jne    c00048da <f_closedir+0x1d>
c00048d4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048da:	83 c4 18             	add    esp,0x18
c00048dd:	5b                   	pop    ebx
c00048de:	c3                   	ret    

c00048df <f_readdir>:
c00048df:	57                   	push   edi
c00048e0:	56                   	push   esi
c00048e1:	53                   	push   ebx
c00048e2:	83 ec 20             	sub    esp,0x20
c00048e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00048e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00048ed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048f1:	89 d8                	mov    eax,ebx
c00048f3:	e8 86 db ff ff       	call   c000247e <validate>
c00048f8:	85 c0                	test   eax,eax
c00048fa:	75 6e                	jne    c000496a <f_readdir+0x8b>
c00048fc:	85 ff                	test   edi,edi
c00048fe:	75 0b                	jne    c000490b <f_readdir+0x2c>
c0004900:	31 d2                	xor    edx,edx
c0004902:	89 d8                	mov    eax,ebx
c0004904:	e8 f8 eb ff ff       	call   c0003501 <dir_sdi>
c0004909:	eb 5f                	jmp    c000496a <f_readdir+0x8b>
c000490b:	83 ec 0c             	sub    esp,0xc
c000490e:	68 00 02 00 00       	push   0x200
c0004913:	e8 f0 14 00 00       	call   c0005e08 <ff_memalloc>
c0004918:	83 c4 10             	add    esp,0x10
c000491b:	89 c6                	mov    esi,eax
c000491d:	b8 11 00 00 00       	mov    eax,0x11
c0004922:	85 f6                	test   esi,esi
c0004924:	74 44                	je     c000496a <f_readdir+0x8b>
c0004926:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000492a:	31 d2                	xor    edx,edx
c000492c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000492f:	89 d8                	mov    eax,ebx
c0004931:	e8 ca ef ff ff       	call   c0003900 <dir_read>
c0004936:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000493b:	75 19                	jne    c0004956 <f_readdir+0x77>
c000493d:	89 fa                	mov    edx,edi
c000493f:	89 d8                	mov    eax,ebx
c0004941:	e8 70 e8 ff ff       	call   c00031b6 <get_fileinfo>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	e8 47 ee ff ff       	call   c0003796 <dir_next>
c000494f:	83 f8 04             	cmp    eax,0x4
c0004952:	75 02                	jne    c0004956 <f_readdir+0x77>
c0004954:	31 c0                	xor    eax,eax
c0004956:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000495a:	83 ec 0c             	sub    esp,0xc
c000495d:	56                   	push   esi
c000495e:	e8 bd 14 00 00       	call   c0005e20 <ff_memfree>
c0004963:	83 c4 10             	add    esp,0x10
c0004966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000496a:	83 c4 20             	add    esp,0x20
c000496d:	5b                   	pop    ebx
c000496e:	5e                   	pop    esi
c000496f:	5f                   	pop    edi
c0004970:	c3                   	ret    

c0004971 <f_stat>:
c0004971:	57                   	push   edi
c0004972:	31 c9                	xor    ecx,ecx
c0004974:	56                   	push   esi
c0004975:	53                   	push   ebx
c0004976:	83 ec 30             	sub    esp,0x30
c0004979:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000497d:	89 e2                	mov    edx,esp
c000497f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004983:	e8 f2 dc ff ff       	call   c000267a <mount_volume>
c0004988:	89 c3                	mov    ebx,eax
c000498a:	85 c0                	test   eax,eax
c000498c:	75 59                	jne    c00049e7 <f_stat+0x76>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	bb 11 00 00 00       	mov    ebx,0x11
c0004996:	68 00 02 00 00       	push   0x200
c000499b:	e8 68 14 00 00       	call   c0005e08 <ff_memalloc>
c00049a0:	83 c4 10             	add    esp,0x10
c00049a3:	89 c6                	mov    esi,eax
c00049a5:	85 c0                	test   eax,eax
c00049a7:	74 3e                	je     c00049e7 <f_stat+0x76>
c00049a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049b0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049b3:	89 e0                	mov    eax,esp
c00049b5:	e8 0a f2 ff ff       	call   c0003bc4 <follow_path>
c00049ba:	89 c3                	mov    ebx,eax
c00049bc:	85 c0                	test   eax,eax
c00049be:	75 1b                	jne    c00049db <f_stat+0x6a>
c00049c0:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049c5:	75 0f                	jne    c00049d6 <f_stat+0x65>
c00049c7:	85 ff                	test   edi,edi
c00049c9:	74 10                	je     c00049db <f_stat+0x6a>
c00049cb:	89 fa                	mov    edx,edi
c00049cd:	89 e0                	mov    eax,esp
c00049cf:	e8 e2 e7 ff ff       	call   c00031b6 <get_fileinfo>
c00049d4:	eb 05                	jmp    c00049db <f_stat+0x6a>
c00049d6:	bb 06 00 00 00       	mov    ebx,0x6
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	56                   	push   esi
c00049df:	e8 3c 14 00 00       	call   c0005e20 <ff_memfree>
c00049e4:	83 c4 10             	add    esp,0x10
c00049e7:	83 c4 30             	add    esp,0x30
c00049ea:	89 d8                	mov    eax,ebx
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	c3                   	ret    

c00049f0 <f_getfree>:
c00049f0:	55                   	push   ebp
c00049f1:	31 c9                	xor    ecx,ecx
c00049f3:	57                   	push   edi
c00049f4:	56                   	push   esi
c00049f5:	53                   	push   ebx
c00049f6:	83 ec 2c             	sub    esp,0x2c
c00049f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049fd:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a01:	e8 74 dc ff ff       	call   c000267a <mount_volume>
c0004a06:	89 c7                	mov    edi,eax
c0004a08:	85 c0                	test   eax,eax
c0004a0a:	0f 85 df 00 00 00    	jne    c0004aef <f_getfree+0xff>
c0004a10:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004a14:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a18:	89 30                	mov    DWORD PTR [eax],esi
c0004a1a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004a1d:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004a20:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004a23:	39 d0                	cmp    eax,edx
c0004a25:	77 0b                	ja     c0004a32 <f_getfree+0x42>
c0004a27:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a2b:	89 01                	mov    DWORD PTR [ecx],eax
c0004a2d:	e9 bd 00 00 00       	jmp    c0004aef <f_getfree+0xff>
c0004a32:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004a35:	75 29                	jne    c0004a60 <f_getfree+0x70>
c0004a37:	bd 02 00 00 00       	mov    ebp,0x2
c0004a3c:	31 db                	xor    ebx,ebx
c0004a3e:	89 ea                	mov    edx,ebp
c0004a40:	89 f0                	mov    eax,esi
c0004a42:	e8 b6 e9 ff ff       	call   c00033fd <get_fat.isra.2>
c0004a47:	83 f8 ff             	cmp    eax,0xffffffff
c0004a4a:	74 7d                	je     c0004ac9 <f_getfree+0xd9>
c0004a4c:	83 f8 01             	cmp    eax,0x1
c0004a4f:	74 7f                	je     c0004ad0 <f_getfree+0xe0>
c0004a51:	83 d3 00             	adc    ebx,0x0
c0004a54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a58:	45                   	inc    ebp
c0004a59:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004a5c:	77 e0                	ja     c0004a3e <f_getfree+0x4e>
c0004a5e:	eb 79                	jmp    c0004ad9 <f_getfree+0xe9>
c0004a60:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004a63:	31 db                	xor    ebx,ebx
c0004a65:	31 f6                	xor    esi,esi
c0004a67:	85 f6                	test   esi,esi
c0004a69:	75 18                	jne    c0004a83 <f_getfree+0x93>
c0004a6b:	8d 42 01             	lea    eax,[edx+0x1]
c0004a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a76:	e8 ac da ff ff       	call   c0002527 <move_window>
c0004a7b:	85 c0                	test   eax,eax
c0004a7d:	75 58                	jne    c0004ad7 <f_getfree+0xe7>
c0004a7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004a87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004a8b:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004a8f:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004a92:	75 13                	jne    c0004aa7 <f_getfree+0xb7>
c0004a94:	e8 27 d5 ff ff       	call   c0001fc0 <ld_word>
c0004a99:	0f b7 c0             	movzx  eax,ax
c0004a9c:	83 f8 01             	cmp    eax,0x1
c0004a9f:	83 d3 00             	adc    ebx,0x0
c0004aa2:	83 c6 02             	add    esi,0x2
c0004aa5:	eb 13                	jmp    c0004aba <f_getfree+0xca>
c0004aa7:	e8 21 d5 ff ff       	call   c0001fcd <ld_dword>
c0004aac:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004ab1:	83 f8 01             	cmp    eax,0x1
c0004ab4:	83 d3 00             	adc    ebx,0x0
c0004ab7:	83 c6 04             	add    esi,0x4
c0004aba:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004ac0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ac4:	4d                   	dec    ebp
c0004ac5:	75 a0                	jne    c0004a67 <f_getfree+0x77>
c0004ac7:	eb 10                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ac9:	bf 01 00 00 00       	mov    edi,0x1
c0004ace:	eb 09                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad0:	bf 02 00 00 00       	mov    edi,0x2
c0004ad5:	eb 02                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad7:	89 c7                	mov    edi,eax
c0004ad9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004add:	89 18                	mov    DWORD PTR [eax],ebx
c0004adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae3:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004ae6:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004ae9:	83 ca 01             	or     edx,0x1
c0004aec:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004aef:	83 c4 2c             	add    esp,0x2c
c0004af2:	89 f8                	mov    eax,edi
c0004af4:	5b                   	pop    ebx
c0004af5:	5e                   	pop    esi
c0004af6:	5f                   	pop    edi
c0004af7:	5d                   	pop    ebp
c0004af8:	c3                   	ret    

c0004af9 <f_truncate>:
c0004af9:	56                   	push   esi
c0004afa:	53                   	push   ebx
c0004afb:	83 ec 14             	sub    esp,0x14
c0004afe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b06:	89 d8                	mov    eax,ebx
c0004b08:	e8 71 d9 ff ff       	call   c000247e <validate>
c0004b0d:	89 c6                	mov    esi,eax
c0004b0f:	85 c0                	test   eax,eax
c0004b11:	0f 85 c4 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b17:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b1b:	85 f6                	test   esi,esi
c0004b1d:	0f 85 b8 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b23:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b27:	0f 84 a9 00 00 00    	je     c0004bd6 <f_truncate+0xdd>
c0004b2d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b30:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b33:	0f 83 a2 00 00 00    	jae    c0004bdb <f_truncate+0xe2>
c0004b39:	85 c0                	test   eax,eax
c0004b3b:	75 15                	jne    c0004b52 <f_truncate+0x59>
c0004b3d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b40:	31 c9                	xor    ecx,ecx
c0004b42:	89 d8                	mov    eax,ebx
c0004b44:	e8 bf eb ff ff       	call   c0003708 <remove_chain>
c0004b49:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b50:	eb 35                	jmp    c0004b87 <f_truncate+0x8e>
c0004b52:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b57:	e8 a1 e8 ff ff       	call   c00033fd <get_fat.isra.2>
c0004b5c:	89 c2                	mov    edx,eax
c0004b5e:	b8 01 00 00 00       	mov    eax,0x1
c0004b63:	83 fa ff             	cmp    edx,0xffffffff
c0004b66:	74 1f                	je     c0004b87 <f_truncate+0x8e>
c0004b68:	b8 02 00 00 00       	mov    eax,0x2
c0004b6d:	83 fa 01             	cmp    edx,0x1
c0004b70:	74 15                	je     c0004b87 <f_truncate+0x8e>
c0004b72:	31 c0                	xor    eax,eax
c0004b74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b78:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b7b:	76 0a                	jbe    c0004b87 <f_truncate+0x8e>
c0004b7d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b80:	89 d8                	mov    eax,ebx
c0004b82:	e8 81 eb ff ff       	call   c0003708 <remove_chain>
c0004b87:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004b8a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004b8d:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004b90:	83 ca 40             	or     edx,0x40
c0004b93:	85 c0                	test   eax,eax
c0004b95:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004b98:	75 35                	jne    c0004bcf <f_truncate+0xd6>
c0004b9a:	80 e2 80             	and    dl,0x80
c0004b9d:	74 3c                	je     c0004bdb <f_truncate+0xe2>
c0004b9f:	6a 01                	push   0x1
c0004ba1:	8d 43 28             	lea    eax,[ebx+0x28]
c0004ba4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004ba7:	50                   	push   eax
c0004ba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bb0:	50                   	push   eax
c0004bb1:	e8 d5 d3 ff ff       	call   c0001f8b <disk_write>
c0004bb6:	83 c4 10             	add    esp,0x10
c0004bb9:	85 c0                	test   eax,eax
c0004bbb:	75 0d                	jne    c0004bca <f_truncate+0xd1>
c0004bbd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bc0:	31 f6                	xor    esi,esi
c0004bc2:	83 e0 7f             	and    eax,0x7f
c0004bc5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004bc8:	eb 11                	jmp    c0004bdb <f_truncate+0xe2>
c0004bca:	b8 01 00 00 00       	mov    eax,0x1
c0004bcf:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	eb 05                	jmp    c0004bdb <f_truncate+0xe2>
c0004bd6:	be 07 00 00 00       	mov    esi,0x7
c0004bdb:	89 f0                	mov    eax,esi
c0004bdd:	83 c4 14             	add    esp,0x14
c0004be0:	5b                   	pop    ebx
c0004be1:	5e                   	pop    esi
c0004be2:	c3                   	ret    

c0004be3 <f_unlink>:
c0004be3:	55                   	push   ebp
c0004be4:	b9 02 00 00 00       	mov    ecx,0x2
c0004be9:	57                   	push   edi
c0004bea:	56                   	push   esi
c0004beb:	53                   	push   ebx
c0004bec:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004bf2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004bf6:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004bfd:	e8 78 da ff ff       	call   c000267a <mount_volume>
c0004c02:	85 c0                	test   eax,eax
c0004c04:	0f 85 f0 00 00 00    	jne    c0004cfa <f_unlink+0x117>
c0004c0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c0e:	83 ec 0c             	sub    esp,0xc
c0004c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c15:	68 00 02 00 00       	push   0x200
c0004c1a:	e8 e9 11 00 00       	call   c0005e08 <ff_memalloc>
c0004c1f:	83 c4 10             	add    esp,0x10
c0004c22:	89 c3                	mov    ebx,eax
c0004c24:	b8 11 00 00 00       	mov    eax,0x11
c0004c29:	85 db                	test   ebx,ebx
c0004c2b:	0f 84 c9 00 00 00    	je     c0004cfa <f_unlink+0x117>
c0004c31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c35:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c3c:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c43:	e8 7c ef ff ff       	call   c0003bc4 <follow_path>
c0004c48:	85 c0                	test   eax,eax
c0004c4a:	0f 85 96 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c50:	b8 06 00 00 00       	mov    eax,0x6
c0004c55:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c5a:	0f 85 86 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c60:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c65:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c6b:	74 07                	je     c0004c74 <f_unlink+0x91>
c0004c6d:	b8 07 00 00 00       	mov    eax,0x7
c0004c72:	eb 72                	jmp    c0004ce6 <f_unlink+0x103>
c0004c74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c78:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c7c:	8a 07                	mov    al,BYTE PTR [edi]
c0004c7e:	e8 29 e7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004c83:	83 e5 10             	and    ebp,0x10
c0004c86:	89 c6                	mov    esi,eax
c0004c88:	75 0f                	jne    c0004c99 <f_unlink+0xb6>
c0004c8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c8e:	e8 95 ed ff ff       	call   c0003a28 <dir_remove>
c0004c93:	85 c0                	test   eax,eax
c0004c95:	74 2f                	je     c0004cc6 <f_unlink+0xe3>
c0004c97:	eb 4d                	jmp    c0004ce6 <f_unlink+0x103>
c0004c99:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004c9d:	31 d2                	xor    edx,edx
c0004c9f:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004ca3:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ca7:	e8 55 e8 ff ff       	call   c0003501 <dir_sdi>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	75 36                	jne    c0004ce6 <f_unlink+0x103>
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cb6:	e8 45 ec ff ff       	call   c0003900 <dir_read>
c0004cbb:	85 c0                	test   eax,eax
c0004cbd:	74 ae                	je     c0004c6d <f_unlink+0x8a>
c0004cbf:	83 f8 04             	cmp    eax,0x4
c0004cc2:	75 22                	jne    c0004ce6 <f_unlink+0x103>
c0004cc4:	eb c4                	jmp    c0004c8a <f_unlink+0xa7>
c0004cc6:	85 f6                	test   esi,esi
c0004cc8:	75 0b                	jne    c0004cd5 <f_unlink+0xf2>
c0004cca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cce:	e8 8b e2 ff ff       	call   c0002f5e <sync_fs>
c0004cd3:	eb 11                	jmp    c0004ce6 <f_unlink+0x103>
c0004cd5:	31 c9                	xor    ecx,ecx
c0004cd7:	89 f2                	mov    edx,esi
c0004cd9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cdd:	e8 26 ea ff ff       	call   c0003708 <remove_chain>
c0004ce2:	85 c0                	test   eax,eax
c0004ce4:	74 e4                	je     c0004cca <f_unlink+0xe7>
c0004ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cea:	83 ec 0c             	sub    esp,0xc
c0004ced:	53                   	push   ebx
c0004cee:	e8 2d 11 00 00       	call   c0005e20 <ff_memfree>
c0004cf3:	83 c4 10             	add    esp,0x10
c0004cf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cfa:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d00:	5b                   	pop    ebx
c0004d01:	5e                   	pop    esi
c0004d02:	5f                   	pop    edi
c0004d03:	5d                   	pop    ebp
c0004d04:	c3                   	ret    

c0004d05 <f_mkdir>:
c0004d05:	57                   	push   edi
c0004d06:	b9 02 00 00 00       	mov    ecx,0x2
c0004d0b:	56                   	push   esi
c0004d0c:	53                   	push   ebx
c0004d0d:	83 ec 50             	sub    esp,0x50
c0004d10:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 5d d9 ff ff       	call   c000267a <mount_volume>
c0004d1d:	89 c3                	mov    ebx,eax
c0004d1f:	85 c0                	test   eax,eax
c0004d21:	0f 85 70 01 00 00    	jne    c0004e97 <f_mkdir+0x192>
c0004d27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d2b:	bb 11 00 00 00       	mov    ebx,0x11
c0004d30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004d34:	83 ec 0c             	sub    esp,0xc
c0004d37:	68 00 02 00 00       	push   0x200
c0004d3c:	e8 c7 10 00 00       	call   c0005e08 <ff_memalloc>
c0004d41:	83 c4 10             	add    esp,0x10
c0004d44:	89 c7                	mov    edi,eax
c0004d46:	85 c0                	test   eax,eax
c0004d48:	0f 84 49 01 00 00    	je     c0004e97 <f_mkdir+0x192>
c0004d4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d52:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d56:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d59:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d5d:	e8 62 ee ff ff       	call   c0003bc4 <follow_path>
c0004d62:	89 c3                	mov    ebx,eax
c0004d64:	85 c0                	test   eax,eax
c0004d66:	74 3e                	je     c0004da6 <f_mkdir+0xa1>
c0004d68:	83 f8 04             	cmp    eax,0x4
c0004d6b:	75 3e                	jne    c0004dab <f_mkdir+0xa6>
c0004d6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d71:	31 d2                	xor    edx,edx
c0004d73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d77:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d7b:	e8 49 e8 ff ff       	call   c00035c9 <create_chain>
c0004d80:	89 c6                	mov    esi,eax
c0004d82:	85 c0                	test   eax,eax
c0004d84:	74 0c                	je     c0004d92 <f_mkdir+0x8d>
c0004d86:	bb 02 00 00 00       	mov    ebx,0x2
c0004d8b:	83 f8 01             	cmp    eax,0x1
c0004d8e:	74 07                	je     c0004d97 <f_mkdir+0x92>
c0004d90:	eb 2a                	jmp    c0004dbc <f_mkdir+0xb7>
c0004d92:	bb 07 00 00 00       	mov    ebx,0x7
c0004d97:	31 c9                	xor    ecx,ecx
c0004d99:	89 f2                	mov    edx,esi
c0004d9b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d9f:	e8 64 e9 ff ff       	call   c0003708 <remove_chain>
c0004da4:	eb 05                	jmp    c0004dab <f_mkdir+0xa6>
c0004da6:	bb 08 00 00 00       	mov    ebx,0x8
c0004dab:	83 ec 0c             	sub    esp,0xc
c0004dae:	57                   	push   edi
c0004daf:	e8 6c 10 00 00       	call   c0005e20 <ff_memfree>
c0004db4:	83 c4 10             	add    esp,0x10
c0004db7:	e9 db 00 00 00       	jmp    c0004e97 <f_mkdir+0x192>
c0004dbc:	bb 01 00 00 00       	mov    ebx,0x1
c0004dc1:	83 f8 ff             	cmp    eax,0xffffffff
c0004dc4:	74 d1                	je     c0004d97 <f_mkdir+0x92>
c0004dc6:	89 f2                	mov    edx,esi
c0004dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dcc:	e8 f1 dc ff ff       	call   c0002ac2 <dir_clear>
c0004dd1:	89 c3                	mov    ebx,eax
c0004dd3:	85 c0                	test   eax,eax
c0004dd5:	75 c0                	jne    c0004d97 <f_mkdir+0x92>
c0004dd7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de0:	ba 20 00 00 00       	mov    edx,0x20
c0004de5:	83 c0 34             	add    eax,0x34
c0004de8:	e8 14 d2 ff ff       	call   c0002001 <mem_set>
c0004ded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df1:	ba 00 00 21 50       	mov    edx,0x50210000
c0004df6:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004dfa:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004dfe:	83 c0 4a             	add    eax,0x4a
c0004e01:	e8 e3 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0a:	89 f1                	mov    ecx,esi
c0004e0c:	8d 50 34             	lea    edx,[eax+0x34]
c0004e0f:	e8 c1 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e18:	b9 20 00 00 00       	mov    ecx,0x20
c0004e1d:	8d 50 34             	lea    edx,[eax+0x34]
c0004e20:	83 c0 54             	add    eax,0x54
c0004e23:	e8 c4 d1 ff ff       	call   c0001fec <mem_cpy>
c0004e28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e2c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e30:	8d 50 54             	lea    edx,[eax+0x54]
c0004e33:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e37:	e8 99 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e40:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e44:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e48:	e8 0c ee ff ff       	call   c0003c59 <dir_register>
c0004e4d:	89 c3                	mov    ebx,eax
c0004e4f:	85 c0                	test   eax,eax
c0004e51:	0f 85 40 ff ff ff    	jne    c0004d97 <f_mkdir+0x92>
c0004e57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e5b:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e60:	83 c0 16             	add    eax,0x16
c0004e63:	e8 81 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e68:	89 f1                	mov    ecx,esi
c0004e6a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e72:	e8 5e e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e7b:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e83:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8b:	e8 ce e0 ff ff       	call   c0002f5e <sync_fs>
c0004e90:	89 c3                	mov    ebx,eax
c0004e92:	e9 14 ff ff ff       	jmp    c0004dab <f_mkdir+0xa6>
c0004e97:	83 c4 50             	add    esp,0x50
c0004e9a:	89 d8                	mov    eax,ebx
c0004e9c:	5b                   	pop    ebx
c0004e9d:	5e                   	pop    esi
c0004e9e:	5f                   	pop    edi
c0004e9f:	c3                   	ret    

c0004ea0 <f_rename>:
c0004ea0:	57                   	push   edi
c0004ea1:	56                   	push   esi
c0004ea2:	53                   	push   ebx
c0004ea3:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ea9:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004eb0:	e8 7c d5 ff ff       	call   c0002431 <get_ldnumber>
c0004eb5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ebe:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ec5:	e8 b0 d7 ff ff       	call   c000267a <mount_volume>
c0004eca:	85 c0                	test   eax,eax
c0004ecc:	0f 85 7c 01 00 00    	jne    c000504e <f_rename+0x1ae>
c0004ed2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004edd:	68 00 02 00 00       	push   0x200
c0004ee2:	e8 21 0f 00 00       	call   c0005e08 <ff_memalloc>
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	89 c6                	mov    esi,eax
c0004eec:	b8 11 00 00 00       	mov    eax,0x11
c0004ef1:	85 f6                	test   esi,esi
c0004ef3:	0f 84 55 01 00 00    	je     c000504e <f_rename+0x1ae>
c0004ef9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efd:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f04:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f07:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f0b:	e8 b4 ec ff ff       	call   c0003bc4 <follow_path>
c0004f10:	85 c0                	test   eax,eax
c0004f12:	0f 85 22 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f18:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f1c:	b8 06 00 00 00       	mov    eax,0x6
c0004f21:	80 e2 a0             	and    dl,0xa0
c0004f24:	0f 85 10 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f2a:	b9 20 00 00 00       	mov    ecx,0x20
c0004f2f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f37:	e8 b0 d0 ff ff       	call   c0001fec <mem_cpy>
c0004f3c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f41:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f45:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f49:	e8 9e d0 ff ff       	call   c0001fec <mem_cpy>
c0004f4e:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f59:	e8 66 ec ff ff       	call   c0003bc4 <follow_path>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	75 20                	jne    c0004f82 <f_rename+0xe2>
c0004f62:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f66:	b8 08 00 00 00       	mov    eax,0x8
c0004f6b:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f6f:	0f 85 c5 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f75:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f79:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f80:	eb 03                	jmp    c0004f85 <f_rename+0xe5>
c0004f82:	83 f8 04             	cmp    eax,0x4
c0004f85:	0f 85 af 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f8b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f8f:	e8 c5 ec ff ff       	call   c0003c59 <dir_register>
c0004f94:	85 c0                	test   eax,eax
c0004f96:	0f 85 9e 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f9c:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fa3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fa8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fab:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004faf:	e8 38 d0 ff ff       	call   c0001fec <mem_cpy>
c0004fb4:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fb8:	a8 10                	test   al,0x10
c0004fba:	75 03                	jne    c0004fbf <f_rename+0x11f>
c0004fbc:	83 c8 20             	or     eax,0x20
c0004fbf:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fc6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fca:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fce:	74 54                	je     c0005024 <f_rename+0x184>
c0004fd0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004fd4:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004fd8:	74 4a                	je     c0005024 <f_rename+0x184>
c0004fda:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004fde:	89 da                	mov    edx,ebx
c0004fe0:	8a 07                	mov    al,BYTE PTR [edi]
c0004fe2:	e8 c5 e3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004fe7:	89 c2                	mov    edx,eax
c0004fe9:	89 f8                	mov    eax,edi
c0004feb:	e8 27 d2 ff ff       	call   c0002217 <clst2sect>
c0004ff0:	89 c2                	mov    edx,eax
c0004ff2:	b8 02 00 00 00       	mov    eax,0x2
c0004ff7:	85 d2                	test   edx,edx
c0004ff9:	74 3f                	je     c000503a <f_rename+0x19a>
c0004ffb:	89 f8                	mov    eax,edi
c0004ffd:	e8 25 d5 ff ff       	call   c0002527 <move_window>
c0005002:	85 c0                	test   eax,eax
c0005004:	75 34                	jne    c000503a <f_rename+0x19a>
c0005006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000500a:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000500e:	75 14                	jne    c0005024 <f_rename+0x184>
c0005010:	8d 50 54             	lea    edx,[eax+0x54]
c0005013:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005017:	e8 b9 e3 ff ff       	call   c00033d5 <st_clust.isra.1>
c000501c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005020:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005024:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005028:	e8 fb e9 ff ff       	call   c0003a28 <dir_remove>
c000502d:	85 c0                	test   eax,eax
c000502f:	75 09                	jne    c000503a <f_rename+0x19a>
c0005031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005035:	e8 24 df ff ff       	call   c0002f5e <sync_fs>
c000503a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000503e:	83 ec 0c             	sub    esp,0xc
c0005041:	56                   	push   esi
c0005042:	e8 d9 0d 00 00       	call   c0005e20 <ff_memfree>
c0005047:	83 c4 10             	add    esp,0x10
c000504a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000504e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005054:	5b                   	pop    ebx
c0005055:	5e                   	pop    esi
c0005056:	5f                   	pop    edi
c0005057:	c3                   	ret    

c0005058 <f_chmod>:
c0005058:	57                   	push   edi
c0005059:	b9 02 00 00 00       	mov    ecx,0x2
c000505e:	56                   	push   esi
c000505f:	53                   	push   ebx
c0005060:	83 ec 50             	sub    esp,0x50
c0005063:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005067:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000506b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000506f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005073:	e8 02 d6 ff ff       	call   c000267a <mount_volume>
c0005078:	85 c0                	test   eax,eax
c000507a:	0f 85 81 00 00 00    	jne    c0005101 <f_chmod+0xa9>
c0005080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005084:	83 ec 0c             	sub    esp,0xc
c0005087:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000508b:	68 00 02 00 00       	push   0x200
c0005090:	e8 73 0d 00 00       	call   c0005e08 <ff_memalloc>
c0005095:	83 c4 10             	add    esp,0x10
c0005098:	89 c6                	mov    esi,eax
c000509a:	b8 11 00 00 00       	mov    eax,0x11
c000509f:	85 f6                	test   esi,esi
c00050a1:	74 5e                	je     c0005101 <f_chmod+0xa9>
c00050a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b2:	e8 0d eb ff ff       	call   c0003bc4 <follow_path>
c00050b7:	85 c0                	test   eax,eax
c00050b9:	75 32                	jne    c00050ed <f_chmod+0x95>
c00050bb:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050bf:	b8 06 00 00 00       	mov    eax,0x6
c00050c4:	80 e2 a0             	and    dl,0xa0
c00050c7:	75 24                	jne    c00050ed <f_chmod+0x95>
c00050c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cd:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050d0:	31 d7                	xor    edi,edx
c00050d2:	21 fb                	and    ebx,edi
c00050d4:	83 e3 27             	and    ebx,0x27
c00050d7:	31 d3                	xor    ebx,edx
c00050d9:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e8:	e8 71 de ff ff       	call   c0002f5e <sync_fs>
c00050ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050f1:	83 ec 0c             	sub    esp,0xc
c00050f4:	56                   	push   esi
c00050f5:	e8 26 0d 00 00       	call   c0005e20 <ff_memfree>
c00050fa:	83 c4 10             	add    esp,0x10
c00050fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005101:	83 c4 50             	add    esp,0x50
c0005104:	5b                   	pop    ebx
c0005105:	5e                   	pop    esi
c0005106:	5f                   	pop    edi
c0005107:	c3                   	ret    

c0005108 <f_utime>:
c0005108:	56                   	push   esi
c0005109:	b9 02 00 00 00       	mov    ecx,0x2
c000510e:	53                   	push   ebx
c000510f:	83 ec 54             	sub    esp,0x54
c0005112:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005116:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000511a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000511e:	e8 57 d5 ff ff       	call   c000267a <mount_volume>
c0005123:	85 c0                	test   eax,eax
c0005125:	0f 85 87 00 00 00    	jne    c00051b2 <f_utime+0xaa>
c000512b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000512f:	83 ec 0c             	sub    esp,0xc
c0005132:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005136:	68 00 02 00 00       	push   0x200
c000513b:	e8 c8 0c 00 00       	call   c0005e08 <ff_memalloc>
c0005140:	83 c4 10             	add    esp,0x10
c0005143:	89 c3                	mov    ebx,eax
c0005145:	b8 11 00 00 00       	mov    eax,0x11
c000514a:	85 db                	test   ebx,ebx
c000514c:	74 64                	je     c00051b2 <f_utime+0xaa>
c000514e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005152:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005156:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005159:	8d 44 24 20          	lea    eax,[esp+0x20]
c000515d:	e8 62 ea ff ff       	call   c0003bc4 <follow_path>
c0005162:	85 c0                	test   eax,eax
c0005164:	75 38                	jne    c000519e <f_utime+0x96>
c0005166:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000516a:	b8 06 00 00 00       	mov    eax,0x6
c000516f:	80 e2 a0             	and    dl,0xa0
c0005172:	75 2a                	jne    c000519e <f_utime+0x96>
c0005174:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005178:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c000517c:	c1 e2 10             	shl    edx,0x10
c000517f:	09 c2                	or     edx,eax
c0005181:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005185:	83 c0 16             	add    eax,0x16
c0005188:	e8 5c ce ff ff       	call   c0001fe9 <st_dword>
c000518d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005191:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005195:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005199:	e8 c0 dd ff ff       	call   c0002f5e <sync_fs>
c000519e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051a2:	83 ec 0c             	sub    esp,0xc
c00051a5:	53                   	push   ebx
c00051a6:	e8 75 0c 00 00       	call   c0005e20 <ff_memfree>
c00051ab:	83 c4 10             	add    esp,0x10
c00051ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051b2:	83 c4 54             	add    esp,0x54
c00051b5:	5b                   	pop    ebx
c00051b6:	5e                   	pop    esi
c00051b7:	c3                   	ret    

c00051b8 <f_getlabel>:
c00051b8:	55                   	push   ebp
c00051b9:	31 c9                	xor    ecx,ecx
c00051bb:	57                   	push   edi
c00051bc:	56                   	push   esi
c00051bd:	53                   	push   ebx
c00051be:	83 ec 5c             	sub    esp,0x5c
c00051c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051c5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051c9:	e8 ac d4 ff ff       	call   c000267a <mount_volume>
c00051ce:	89 c6                	mov    esi,eax
c00051d0:	85 c0                	test   eax,eax
c00051d2:	0f 85 27 01 00 00    	jne    c00052ff <f_getlabel+0x147>
c00051d8:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00051dd:	0f 84 d0 00 00 00    	je     c00052b3 <f_getlabel+0xfb>
c00051e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e7:	31 d2                	xor    edx,edx
c00051e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051ed:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051f5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051f9:	e8 03 e3 ff ff       	call   c0003501 <dir_sdi>
c00051fe:	85 c0                	test   eax,eax
c0005200:	0f 85 a1 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c0005206:	ba 01 00 00 00       	mov    edx,0x1
c000520b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000520f:	e8 ec e6 ff ff       	call   c0003900 <dir_read>
c0005214:	85 c0                	test   eax,eax
c0005216:	0f 85 8b 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c000521c:	31 db                	xor    ebx,ebx
c000521e:	31 c9                	xor    ecx,ecx
c0005220:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005224:	8d 79 01             	lea    edi,[ecx+0x1]
c0005227:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000522c:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005235:	e8 06 ce ff ff       	call   c0002040 <dbc_1st>
c000523a:	85 c0                	test   eax,eax
c000523c:	74 16                	je     c0005254 <f_getlabel+0x9c>
c000523e:	83 ff 0b             	cmp    edi,0xb
c0005241:	74 11                	je     c0005254 <f_getlabel+0x9c>
c0005243:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000524c:	8d 79 02             	lea    edi,[ecx+0x2]
c000524f:	c1 e0 08             	shl    eax,0x8
c0005252:	09 c2                	or     edx,eax
c0005254:	0f b7 d2             	movzx  edx,dx
c0005257:	50                   	push   eax
c0005258:	50                   	push   eax
c0005259:	68 b5 01 00 00       	push   0x1b5
c000525e:	52                   	push   edx
c000525f:	e8 74 0c 00 00       	call   c0005ed8 <ff_oem2uni>
c0005264:	83 c4 10             	add    esp,0x10
c0005267:	0f b7 c0             	movzx  eax,ax
c000526a:	85 c0                	test   eax,eax
c000526c:	74 22                	je     c0005290 <f_getlabel+0xd8>
c000526e:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005272:	b9 04 00 00 00       	mov    ecx,0x4
c0005277:	01 da                	add    edx,ebx
c0005279:	e8 a0 ce ff ff       	call   c000211e <put_utf>
c000527e:	0f b6 c0             	movzx  eax,al
c0005281:	85 c0                	test   eax,eax
c0005283:	74 0b                	je     c0005290 <f_getlabel+0xd8>
c0005285:	01 c3                	add    ebx,eax
c0005287:	83 ff 0b             	cmp    edi,0xb
c000528a:	74 06                	je     c0005292 <f_getlabel+0xda>
c000528c:	89 f9                	mov    ecx,edi
c000528e:	eb 90                	jmp    c0005220 <f_getlabel+0x68>
c0005290:	31 db                	xor    ebx,ebx
c0005292:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0005296:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0005299:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c000529d:	74 14                	je     c00052b3 <f_getlabel+0xfb>
c000529f:	4b                   	dec    ebx
c00052a0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00052a3:	74 f1                	je     c0005296 <f_getlabel+0xde>
c00052a5:	eb 0c                	jmp    c00052b3 <f_getlabel+0xfb>
c00052a7:	83 f8 04             	cmp    eax,0x4
c00052aa:	75 51                	jne    c00052fd <f_getlabel+0x145>
c00052ac:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00052b0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00052b3:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052b8:	74 45                	je     c00052ff <f_getlabel+0x147>
c00052ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052c1:	e8 61 d2 ff ff       	call   c0002527 <move_window>
c00052c6:	89 c6                	mov    esi,eax
c00052c8:	85 c0                	test   eax,eax
c00052ca:	75 33                	jne    c00052ff <f_getlabel+0x147>
c00052cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052d0:	b8 43 00 00 00       	mov    eax,0x43
c00052d5:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052d8:	83 f9 03             	cmp    ecx,0x3
c00052db:	74 0f                	je     c00052ec <f_getlabel+0x134>
c00052dd:	31 c0                	xor    eax,eax
c00052df:	83 f9 04             	cmp    ecx,0x4
c00052e2:	0f 94 c0             	sete   al
c00052e5:	48                   	dec    eax
c00052e6:	83 e0 c3             	and    eax,0xffffffc3
c00052e9:	83 c0 64             	add    eax,0x64
c00052ec:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00052f0:	e8 d8 cc ff ff       	call   c0001fcd <ld_dword>
c00052f5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00052f9:	89 07                	mov    DWORD PTR [edi],eax
c00052fb:	eb 02                	jmp    c00052ff <f_getlabel+0x147>
c00052fd:	89 c6                	mov    esi,eax
c00052ff:	83 c4 5c             	add    esp,0x5c
c0005302:	89 f0                	mov    eax,esi
c0005304:	5b                   	pop    ebx
c0005305:	5e                   	pop    esi
c0005306:	5f                   	pop    edi
c0005307:	5d                   	pop    ebp
c0005308:	c3                   	ret    

c0005309 <f_setlabel>:
c0005309:	57                   	push   edi
c000530a:	b9 02 00 00 00       	mov    ecx,0x2
c000530f:	56                   	push   esi
c0005310:	53                   	push   ebx
c0005311:	83 ec 50             	sub    esp,0x50
c0005314:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005318:	8d 44 24 60          	lea    eax,[esp+0x60]
c000531c:	e8 59 d3 ff ff       	call   c000267a <mount_volume>
c0005321:	89 c6                	mov    esi,eax
c0005323:	85 c0                	test   eax,eax
c0005325:	0f 85 65 01 00 00    	jne    c0005490 <f_setlabel+0x187>
c000532b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005330:	ba 20 00 00 00       	mov    edx,0x20
c0005335:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005339:	31 db                	xor    ebx,ebx
c000533b:	e8 c1 cc ff ff       	call   c0002001 <mem_set>
c0005340:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005344:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005347:	76 5d                	jbe    c00053a6 <f_setlabel+0x9d>
c0005349:	8d 44 24 60          	lea    eax,[esp+0x60]
c000534d:	e8 f4 cc ff ff       	call   c0002046 <tchar2uni>
c0005352:	3d ff ff 00 00       	cmp    eax,0xffff
c0005357:	76 0a                	jbe    c0005363 <f_setlabel+0x5a>
c0005359:	be 06 00 00 00       	mov    esi,0x6
c000535e:	e9 2d 01 00 00       	jmp    c0005490 <f_setlabel+0x187>
c0005363:	83 ec 0c             	sub    esp,0xc
c0005366:	50                   	push   eax
c0005367:	e8 e4 0b 00 00       	call   c0005f50 <ff_wtoupper>
c000536c:	5a                   	pop    edx
c000536d:	59                   	pop    ecx
c000536e:	68 b5 01 00 00       	push   0x1b5
c0005373:	50                   	push   eax
c0005374:	e8 bf 0a 00 00       	call   c0005e38 <ff_uni2oem>
c0005379:	83 c4 10             	add    esp,0x10
c000537c:	0f b7 f0             	movzx  esi,ax
c000537f:	89 f7                	mov    edi,esi
c0005381:	85 f6                	test   esi,esi
c0005383:	74 d4                	je     c0005359 <f_setlabel+0x50>
c0005385:	89 f2                	mov    edx,esi
c0005387:	b8 30 2b 02 c0       	mov    eax,0xc0022b30
c000538c:	e8 9e cc ff ff       	call   c000202f <chk_chr>
c0005391:	85 c0                	test   eax,eax
c0005393:	75 c4                	jne    c0005359 <f_setlabel+0x50>
c0005395:	81 fe ff 00 00 00    	cmp    esi,0xff
c000539b:	0f 87 c9 00 00 00    	ja     c000546a <f_setlabel+0x161>
c00053a1:	e9 e0 00 00 00       	jmp    c0005486 <f_setlabel+0x17d>
c00053a6:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ab:	74 ac                	je     c0005359 <f_setlabel+0x50>
c00053ad:	85 db                	test   ebx,ebx
c00053af:	74 0e                	je     c00053bf <f_setlabel+0xb6>
c00053b1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053b4:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053b9:	75 04                	jne    c00053bf <f_setlabel+0xb6>
c00053bb:	89 c3                	mov    ebx,eax
c00053bd:	eb ee                	jmp    c00053ad <f_setlabel+0xa4>
c00053bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053c3:	31 d2                	xor    edx,edx
c00053c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053c9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053d1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053d5:	e8 27 e1 ff ff       	call   c0003501 <dir_sdi>
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 ac 00 00 00    	jne    c0005490 <f_setlabel+0x187>
c00053e4:	ba 01 00 00 00       	mov    edx,0x1
c00053e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053ed:	e8 0e e5 ff ff       	call   c0003900 <dir_read>
c00053f2:	85 c0                	test   eax,eax
c00053f4:	75 18                	jne    c000540e <f_setlabel+0x105>
c00053f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053fa:	85 db                	test   ebx,ebx
c00053fc:	74 0b                	je     c0005409 <f_setlabel+0x100>
c00053fe:	b9 0b 00 00 00       	mov    ecx,0xb
c0005403:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005407:	eb 47                	jmp    c0005450 <f_setlabel+0x147>
c0005409:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000540c:	eb 47                	jmp    c0005455 <f_setlabel+0x14c>
c000540e:	83 f8 04             	cmp    eax,0x4
c0005411:	75 53                	jne    c0005466 <f_setlabel+0x15d>
c0005413:	85 db                	test   ebx,ebx
c0005415:	74 79                	je     c0005490 <f_setlabel+0x187>
c0005417:	ba 01 00 00 00       	mov    edx,0x1
c000541c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005420:	e8 76 e4 ff ff       	call   c000389b <dir_alloc>
c0005425:	89 c6                	mov    esi,eax
c0005427:	85 c0                	test   eax,eax
c0005429:	75 65                	jne    c0005490 <f_setlabel+0x187>
c000542b:	b9 20 00 00 00       	mov    ecx,0x20
c0005430:	31 d2                	xor    edx,edx
c0005432:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005436:	e8 c6 cb ff ff       	call   c0002001 <mem_set>
c000543b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000543f:	b9 0b 00 00 00       	mov    ecx,0xb
c0005444:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005448:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000544c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005450:	e8 97 cb ff ff       	call   c0001fec <mem_cpy>
c0005455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005459:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000545d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005461:	e8 f8 da ff ff       	call   c0002f5e <sync_fs>
c0005466:	89 c6                	mov    esi,eax
c0005468:	eb 26                	jmp    c0005490 <f_setlabel+0x187>
c000546a:	83 fb 09             	cmp    ebx,0x9
c000546d:	0f 87 e6 fe ff ff    	ja     c0005359 <f_setlabel+0x50>
c0005473:	89 f0                	mov    eax,esi
c0005475:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005479:	43                   	inc    ebx
c000547a:	89 f8                	mov    eax,edi
c000547c:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005480:	43                   	inc    ebx
c0005481:	e9 ba fe ff ff       	jmp    c0005340 <f_setlabel+0x37>
c0005486:	83 fb 0a             	cmp    ebx,0xa
c0005489:	76 ef                	jbe    c000547a <f_setlabel+0x171>
c000548b:	e9 c9 fe ff ff       	jmp    c0005359 <f_setlabel+0x50>
c0005490:	83 c4 50             	add    esp,0x50
c0005493:	89 f0                	mov    eax,esi
c0005495:	5b                   	pop    ebx
c0005496:	5e                   	pop    esi
c0005497:	5f                   	pop    edi
c0005498:	c3                   	ret    

c0005499 <f_expand>:
c0005499:	55                   	push   ebp
c000549a:	57                   	push   edi
c000549b:	56                   	push   esi
c000549c:	53                   	push   ebx
c000549d:	83 ec 2c             	sub    esp,0x2c
c00054a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054ac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054b0:	89 d8                	mov    eax,ebx
c00054b2:	e8 c7 cf ff ff       	call   c000247e <validate>
c00054b7:	89 c6                	mov    esi,eax
c00054b9:	85 c0                	test   eax,eax
c00054bb:	0f 85 3b 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054c1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054c5:	85 f6                	test   esi,esi
c00054c7:	0f 85 2f 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054cd:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054d2:	75 0a                	jne    c00054de <f_expand+0x45>
c00054d4:	be 07 00 00 00       	mov    esi,0x7
c00054d9:	e9 1e 01 00 00       	jmp    c00055fc <f_expand+0x163>
c00054de:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00054e2:	75 f0                	jne    c00054d4 <f_expand+0x3b>
c00054e4:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00054e8:	74 ea                	je     c00054d4 <f_expand+0x3b>
c00054ea:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00054ee:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00054f2:	c1 e1 09             	shl    ecx,0x9
c00054f5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00054f8:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00054fc:	0f 95 c0             	setne  al
c00054ff:	31 d2                	xor    edx,edx
c0005501:	0f b6 c0             	movzx  eax,al
c0005504:	89 c7                	mov    edi,eax
c0005506:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000550a:	f7 f1                	div    ecx
c000550c:	01 f8                	add    eax,edi
c000550e:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005511:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005515:	83 ff 01             	cmp    edi,0x1
c0005518:	76 05                	jbe    c000551f <f_expand+0x86>
c000551a:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c000551d:	77 05                	ja     c0005524 <f_expand+0x8b>
c000551f:	bf 02 00 00 00       	mov    edi,0x2
c0005524:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005527:	89 fd                	mov    ebp,edi
c0005529:	31 c9                	xor    ecx,ecx
c000552b:	89 ea                	mov    edx,ebp
c000552d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005531:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005533:	45                   	inc    ebp
c0005534:	e8 c4 de ff ff       	call   c00033fd <get_fat.isra.2>
c0005539:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000553d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005541:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005544:	77 05                	ja     c000554b <f_expand+0xb2>
c0005546:	bd 02 00 00 00       	mov    ebp,0x2
c000554b:	83 f8 01             	cmp    eax,0x1
c000554e:	74 20                	je     c0005570 <f_expand+0xd7>
c0005550:	83 f8 ff             	cmp    eax,0xffffffff
c0005553:	74 25                	je     c000557a <f_expand+0xe1>
c0005555:	85 c0                	test   eax,eax
c0005557:	75 09                	jne    c0005562 <f_expand+0xc9>
c0005559:	41                   	inc    ecx
c000555a:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000555e:	75 07                	jne    c0005567 <f_expand+0xce>
c0005560:	eb 1f                	jmp    c0005581 <f_expand+0xe8>
c0005562:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005565:	31 c9                	xor    ecx,ecx
c0005567:	39 fd                	cmp    ebp,edi
c0005569:	75 c0                	jne    c000552b <f_expand+0x92>
c000556b:	e9 64 ff ff ff       	jmp    c00054d4 <f_expand+0x3b>
c0005570:	be 02 00 00 00       	mov    esi,0x2
c0005575:	e9 82 00 00 00       	jmp    c00055fc <f_expand+0x163>
c000557a:	be 01 00 00 00       	mov    esi,0x1
c000557f:	eb 7b                	jmp    c00055fc <f_expand+0x163>
c0005581:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005586:	74 2b                	je     c00055b3 <f_expand+0x11a>
c0005588:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000558b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000558f:	85 ed                	test   ebp,ebp
c0005591:	74 24                	je     c00055b7 <f_expand+0x11e>
c0005593:	83 c9 ff             	or     ecx,0xffffffff
c0005596:	83 fd 01             	cmp    ebp,0x1
c0005599:	74 03                	je     c000559e <f_expand+0x105>
c000559b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000559e:	89 fa                	mov    edx,edi
c00055a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055a4:	e8 c2 d3 ff ff       	call   c000296b <put_fat>
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 4d                	jne    c00055fa <f_expand+0x161>
c00055ad:	89 f8                	mov    eax,edi
c00055af:	4d                   	dec    ebp
c00055b0:	47                   	inc    edi
c00055b1:	eb dc                	jmp    c000558f <f_expand+0xf6>
c00055b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055b6:	48                   	dec    eax
c00055b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055bb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055c0:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055c3:	74 37                	je     c00055fc <f_expand+0x163>
c00055c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055c8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055d5:	83 c8 40             	or     eax,0x40
c00055d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055db:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00055de:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055e1:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00055e4:	39 c8                	cmp    eax,ecx
c00055e6:	77 14                	ja     c00055fc <f_expand+0x163>
c00055e8:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00055ec:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00055ef:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00055f2:	83 c8 01             	or     eax,0x1
c00055f5:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00055f8:	eb 02                	jmp    c00055fc <f_expand+0x163>
c00055fa:	89 c6                	mov    esi,eax
c00055fc:	83 c4 2c             	add    esp,0x2c
c00055ff:	89 f0                	mov    eax,esi
c0005601:	5b                   	pop    ebx
c0005602:	5e                   	pop    esi
c0005603:	5f                   	pop    edi
c0005604:	5d                   	pop    ebp
c0005605:	c3                   	ret    

c0005606 <f_mkfs>:
c0005606:	55                   	push   ebp
c0005607:	57                   	push   edi
c0005608:	56                   	push   esi
c0005609:	be 0b 00 00 00       	mov    esi,0xb
c000560e:	53                   	push   ebx
c000560f:	83 ec 5c             	sub    esp,0x5c
c0005612:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005616:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000561a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000561e:	e8 0e ce ff ff       	call   c0002431 <get_ldnumber>
c0005623:	85 c0                	test   eax,eax
c0005625:	0f 88 d1 07 00 00    	js     c0005dfc <f_mkfs+0x7f6>
c000562b:	8b 14 85 a0 94 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6b60]
c0005632:	85 d2                	test   edx,edx
c0005634:	74 03                	je     c0005639 <f_mkfs+0x33>
c0005636:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005639:	85 db                	test   ebx,ebx
c000563b:	75 05                	jne    c0005642 <f_mkfs+0x3c>
c000563d:	bb 20 2b 02 c0       	mov    ebx,0xc0022b20
c0005642:	83 ec 0c             	sub    esp,0xc
c0005645:	0f b6 c0             	movzx  eax,al
c0005648:	be 03 00 00 00       	mov    esi,0x3
c000564d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005651:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005655:	e8 18 c9 ff ff       	call   c0001f72 <disk_initialize>
c000565a:	83 c4 10             	add    esp,0x10
c000565d:	a8 01                	test   al,0x1
c000565f:	0f 85 97 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005665:	be 0a 00 00 00       	mov    esi,0xa
c000566a:	a8 04                	test   al,0x4
c000566c:	0f 85 8a 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005672:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005675:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005679:	85 c0                	test   eax,eax
c000567b:	75 20                	jne    c000569d <f_mkfs+0x97>
c000567d:	51                   	push   ecx
c000567e:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005682:	50                   	push   eax
c0005683:	6a 03                	push   0x3
c0005685:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005689:	e8 13 c9 ff ff       	call   c0001fa1 <disk_ioctl>
c000568e:	83 c4 10             	add    esp,0x10
c0005691:	85 c0                	test   eax,eax
c0005693:	74 08                	je     c000569d <f_mkfs+0x97>
c0005695:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000569d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056a1:	8d 42 ff             	lea    eax,[edx-0x1]
c00056a4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056a9:	77 04                	ja     c00056af <f_mkfs+0xa9>
c00056ab:	85 c2                	test   edx,eax
c00056ad:	74 08                	je     c00056b7 <f_mkfs+0xb1>
c00056af:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056b7:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056ba:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056c2:	48                   	dec    eax
c00056c3:	3c 01                	cmp    al,0x1
c00056c5:	76 05                	jbe    c00056cc <f_mkfs+0xc6>
c00056c7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00056d3:	48                   	dec    eax
c00056d4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056d9:	77 07                	ja     c00056e2 <f_mkfs+0xdc>
c00056db:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00056e0:	74 08                	je     c00056ea <f_mkfs+0xe4>
c00056e2:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00056ea:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00056ed:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00056f3:	77 07                	ja     c00056fc <f_mkfs+0xf6>
c00056f5:	8d 47 ff             	lea    eax,[edi-0x1]
c00056f8:	85 f8                	test   eax,edi
c00056fa:	74 02                	je     c00056fe <f_mkfs+0xf8>
c00056fc:	31 ff                	xor    edi,edi
c00056fe:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005706:	77 0a                	ja     c0005712 <f_mkfs+0x10c>
c0005708:	be 11 00 00 00       	mov    esi,0x11
c000570d:	e9 ea 06 00 00       	jmp    c0005dfc <f_mkfs+0x7f6>
c0005712:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005714:	85 ed                	test   ebp,ebp
c0005716:	89 eb                	mov    ebx,ebp
c0005718:	75 1e                	jne    c0005738 <f_mkfs+0x132>
c000571a:	83 ec 0c             	sub    esp,0xc
c000571d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005724:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005729:	50                   	push   eax
c000572a:	e8 d9 06 00 00       	call   c0005e08 <ff_memalloc>
c000572f:	83 c4 10             	add    esp,0x10
c0005732:	89 c3                	mov    ebx,eax
c0005734:	85 c0                	test   eax,eax
c0005736:	74 d0                	je     c0005708 <f_mkfs+0x102>
c0005738:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005740:	52                   	push   edx
c0005741:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005745:	50                   	push   eax
c0005746:	6a 01                	push   0x1
c0005748:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000574c:	e8 50 c8 ff ff       	call   c0001fa1 <disk_ioctl>
c0005751:	83 c4 10             	add    esp,0x10
c0005754:	85 c0                	test   eax,eax
c0005756:	0f 85 49 06 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c000575c:	89 f0                	mov    eax,esi
c000575e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005766:	83 e0 08             	and    eax,0x8
c0005769:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000576d:	75 18                	jne    c0005787 <f_mkfs+0x181>
c000576f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005773:	83 f8 3f             	cmp    eax,0x3f
c0005776:	76 0f                	jbe    c0005787 <f_mkfs+0x181>
c0005778:	83 e8 3f             	sub    eax,0x3f
c000577b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005783:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005787:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000578b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000578f:	83 f8 7f             	cmp    eax,0x7f
c0005792:	0f 86 5b 02 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005798:	b9 80 00 00 00       	mov    ecx,0x80
c000579d:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057a3:	77 05                	ja     c00057aa <f_mkfs+0x1a4>
c00057a5:	c1 ef 09             	shr    edi,0x9
c00057a8:	89 f9                	mov    ecx,edi
c00057aa:	89 f0                	mov    eax,esi
c00057ac:	89 f7                	mov    edi,esi
c00057ae:	83 e0 01             	and    eax,0x1
c00057b1:	83 e7 02             	and    edi,0x2
c00057b4:	0f b6 c0             	movzx  eax,al
c00057b7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057bb:	74 0a                	je     c00057c7 <f_mkfs+0x1c1>
c00057bd:	85 c0                	test   eax,eax
c00057bf:	0f 84 4f 01 00 00    	je     c0005914 <f_mkfs+0x30e>
c00057c5:	eb 37                	jmp    c00057fe <f_mkfs+0x1f8>
c00057c7:	be 13 00 00 00       	mov    esi,0x13
c00057cc:	85 c0                	test   eax,eax
c00057ce:	75 2e                	jne    c00057fe <f_mkfs+0x1f8>
c00057d0:	e9 e7 05 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00057d5:	83 f8 02             	cmp    eax,0x2
c00057d8:	0f 85 0d 02 00 00    	jne    c00059eb <f_mkfs+0x3e5>
c00057de:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057e4:	0f 86 e4 01 00 00    	jbe    c00059ce <f_mkfs+0x3c8>
c00057ea:	85 c9                	test   ecx,ecx
c00057ec:	0f 85 dc 05 00 00    	jne    c0005dce <f_mkfs+0x7c8>
c00057f2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f5:	83 f9 40             	cmp    ecx,0x40
c00057f8:	0f 87 e0 05 00 00    	ja     c0005dde <f_mkfs+0x7d8>
c00057fe:	89 cf                	mov    edi,ecx
c0005800:	85 c9                	test   ecx,ecx
c0005802:	75 1c                	jne    c0005820 <f_mkfs+0x21a>
c0005804:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005808:	b8 00 2b 02 c0       	mov    eax,0xc0022b00
c000580d:	c1 ee 0c             	shr    esi,0xc
c0005810:	bf 01 00 00 00       	mov    edi,0x1
c0005815:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005818:	85 d2                	test   edx,edx
c000581a:	0f 85 63 01 00 00    	jne    c0005983 <f_mkfs+0x37d>
c0005820:	31 d2                	xor    edx,edx
c0005822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005826:	f7 f7                	div    edi
c0005828:	3d f5 0f 00 00       	cmp    eax,0xff5
c000582d:	0f 86 62 01 00 00    	jbe    c0005995 <f_mkfs+0x38f>
c0005833:	83 c0 02             	add    eax,0x2
c0005836:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000583b:	01 c0                	add    eax,eax
c000583d:	05 ff 01 00 00       	add    eax,0x1ff
c0005842:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000584a:	c1 e8 09             	shr    eax,0x9
c000584d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005855:	c1 e0 05             	shl    eax,0x5
c0005858:	c1 e8 09             	shr    eax,0x9
c000585b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000585f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005864:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586c:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005870:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005878:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c000587d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005881:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005885:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005889:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000588d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005891:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005895:	f7 d8                	neg    eax
c0005897:	21 c6                	and    esi,eax
c0005899:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000589e:	29 d6                	sub    esi,edx
c00058a0:	83 f8 03             	cmp    eax,0x3
c00058a3:	0f 85 ff 00 00 00    	jne    c00059a8 <f_mkfs+0x3a2>
c00058a9:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058ad:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058b1:	89 f8                	mov    eax,edi
c00058b3:	c1 e0 04             	shl    eax,0x4
c00058b6:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00058ba:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058be:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058c2:	0f 82 2b 01 00 00    	jb     c00059f3 <f_mkfs+0x3ed>
c00058c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058d0:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00058d4:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00058d9:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00058dd:	29 d0                	sub    eax,edx
c00058df:	31 d2                	xor    edx,edx
c00058e1:	f7 f7                	div    edi
c00058e3:	89 c6                	mov    esi,eax
c00058e5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058ea:	83 f8 03             	cmp    eax,0x3
c00058ed:	0f 85 e2 fe ff ff    	jne    c00057d5 <f_mkfs+0x1cf>
c00058f3:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00058f9:	0f 87 03 01 00 00    	ja     c0005a02 <f_mkfs+0x3fc>
c00058ff:	85 c9                	test   ecx,ecx
c0005901:	0f 85 ec 00 00 00    	jne    c00059f3 <f_mkfs+0x3ed>
c0005907:	83 ff 01             	cmp    edi,0x1
c000590a:	0f 86 e3 00 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005910:	d1 ef                	shr    edi,1
c0005912:	89 f9                	mov    ecx,edi
c0005914:	89 ce                	mov    esi,ecx
c0005916:	85 c9                	test   ecx,ecx
c0005918:	75 25                	jne    c000593f <f_mkfs+0x339>
c000591a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000591e:	b8 10 2b 02 c0       	mov    eax,0xc0022b10
c0005923:	c1 ee 11             	shr    esi,0x11
c0005926:	b9 01 00 00 00       	mov    ecx,0x1
c000592b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000592e:	85 d2                	test   edx,edx
c0005930:	74 0b                	je     c000593d <f_mkfs+0x337>
c0005932:	83 c0 02             	add    eax,0x2
c0005935:	39 f2                	cmp    edx,esi
c0005937:	77 04                	ja     c000593d <f_mkfs+0x337>
c0005939:	01 c9                	add    ecx,ecx
c000593b:	eb ee                	jmp    c000592b <f_mkfs+0x325>
c000593d:	31 f6                	xor    esi,esi
c000593f:	31 d2                	xor    edx,edx
c0005941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005945:	f7 f1                	div    ecx
c0005947:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000594e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005953:	c1 ea 09             	shr    edx,0x9
c0005956:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000595b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000595f:	0f 87 8e 00 00 00    	ja     c00059f3 <f_mkfs+0x3ed>
c0005965:	89 cf                	mov    edi,ecx
c0005967:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000596f:	89 f1                	mov    ecx,esi
c0005971:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005979:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c000597e:	e9 dc fe ff ff       	jmp    c000585f <f_mkfs+0x259>
c0005983:	83 c0 02             	add    eax,0x2
c0005986:	39 f2                	cmp    edx,esi
c0005988:	0f 87 92 fe ff ff    	ja     c0005820 <f_mkfs+0x21a>
c000598e:	01 ff                	add    edi,edi
c0005990:	e9 80 fe ff ff       	jmp    c0005815 <f_mkfs+0x20f>
c0005995:	8d 04 40             	lea    eax,[eax+eax*2]
c0005998:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000599d:	40                   	inc    eax
c000599e:	d1 e8                	shr    eax,1
c00059a0:	83 c0 03             	add    eax,0x3
c00059a3:	e9 95 fe ff ff       	jmp    c000583d <f_mkfs+0x237>
c00059a8:	31 d2                	xor    edx,edx
c00059aa:	89 f0                	mov    eax,esi
c00059ac:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059b0:	85 d2                	test   edx,edx
c00059b2:	74 09                	je     c00059bd <f_mkfs+0x3b7>
c00059b4:	4e                   	dec    esi
c00059b5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059b9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059bd:	89 f0                	mov    eax,esi
c00059bf:	31 d2                	xor    edx,edx
c00059c1:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059c5:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00059c9:	e9 e3 fe ff ff       	jmp    c00058b1 <f_mkfs+0x2ab>
c00059ce:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059d4:	77 2c                	ja     c0005a02 <f_mkfs+0x3fc>
c00059d6:	85 c9                	test   ecx,ecx
c00059d8:	75 19                	jne    c00059f3 <f_mkfs+0x3ed>
c00059da:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00059dd:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059e3:	0f 86 15 fe ff ff    	jbe    c00057fe <f_mkfs+0x1f8>
c00059e9:	eb 08                	jmp    c00059f3 <f_mkfs+0x3ed>
c00059eb:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059f1:	76 0a                	jbe    c00059fd <f_mkfs+0x3f7>
c00059f3:	be 0e 00 00 00       	mov    esi,0xe
c00059f8:	e9 bf 03 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00059fd:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a02:	31 d2                	xor    edx,edx
c0005a04:	b9 00 02 00 00       	mov    ecx,0x200
c0005a09:	89 d8                	mov    eax,ebx
c0005a0b:	e8 f1 c5 ff ff       	call   c0002001 <mem_set>
c0005a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a15:	ba b2 2a 02 c0       	mov    edx,0xc0022ab2
c0005a1a:	89 d8                	mov    eax,ebx
c0005a1c:	e8 cb c5 ff ff       	call   c0001fec <mem_cpy>
c0005a21:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a24:	ba 00 02 00 00       	mov    edx,0x200
c0005a29:	e8 b7 c5 ff ff       	call   c0001fe5 <st_word>
c0005a2e:	89 f8                	mov    eax,edi
c0005a30:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a35:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a38:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a3b:	e8 a5 c5 ff ff       	call   c0001fe5 <st_word>
c0005a40:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a44:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a4c:	83 f8 03             	cmp    eax,0x3
c0005a4f:	75 08                	jne    c0005a59 <f_mkfs+0x453>
c0005a51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005a59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005a5d:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a60:	e8 80 c5 ff ff       	call   c0001fe5 <st_word>
c0005a65:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005a69:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005a6f:	77 0a                	ja     c0005a7b <f_mkfs+0x475>
c0005a71:	8d 43 13             	lea    eax,[ebx+0x13]
c0005a74:	e8 6c c5 ff ff       	call   c0001fe5 <st_word>
c0005a79:	eb 08                	jmp    c0005a83 <f_mkfs+0x47d>
c0005a7b:	8d 43 20             	lea    eax,[ebx+0x20]
c0005a7e:	e8 66 c5 ff ff       	call   c0001fe9 <st_dword>
c0005a83:	8d 43 18             	lea    eax,[ebx+0x18]
c0005a86:	ba 3f 00 00 00       	mov    edx,0x3f
c0005a8b:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005a8f:	e8 51 c5 ff ff       	call   c0001fe5 <st_word>
c0005a94:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005a97:	ba ff 00 00 00       	mov    edx,0xff
c0005a9c:	e8 44 c5 ff ff       	call   c0001fe5 <st_word>
c0005aa1:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005aa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005aa8:	e8 3c c5 ff ff       	call   c0001fe9 <st_dword>
c0005aad:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ab2:	83 f8 03             	cmp    eax,0x3
c0005ab5:	75 57                	jne    c0005b0e <f_mkfs+0x508>
c0005ab7:	8d 43 43             	lea    eax,[ebx+0x43]
c0005aba:	ba 00 00 21 50       	mov    edx,0x50210000
c0005abf:	e8 25 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ac4:	8d 43 24             	lea    eax,[ebx+0x24]
c0005ac7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005acb:	e8 19 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ad0:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005ad3:	ba 02 00 00 00       	mov    edx,0x2
c0005ad8:	e8 0c c5 ff ff       	call   c0001fe9 <st_dword>
c0005add:	8d 43 30             	lea    eax,[ebx+0x30]
c0005ae0:	ba 01 00 00 00       	mov    edx,0x1
c0005ae5:	e8 fb c4 ff ff       	call   c0001fe5 <st_word>
c0005aea:	8d 43 32             	lea    eax,[ebx+0x32]
c0005aed:	ba 06 00 00 00       	mov    edx,0x6
c0005af2:	e8 ee c4 ff ff       	call   c0001fe5 <st_word>
c0005af7:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005afb:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005aff:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b02:	b9 13 00 00 00       	mov    ecx,0x13
c0005b07:	ba be 2a 02 c0       	mov    edx,0xc0022abe
c0005b0c:	eb 2f                	jmp    c0005b3d <f_mkfs+0x537>
c0005b0e:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b11:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b16:	e8 ce c4 ff ff       	call   c0001fe9 <st_dword>
c0005b1b:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b20:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b23:	e8 bd c4 ff ff       	call   c0001fe5 <st_word>
c0005b28:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b2c:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b30:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b33:	b9 13 00 00 00       	mov    ecx,0x13
c0005b38:	ba d2 2a 02 c0       	mov    edx,0xc0022ad2
c0005b3d:	e8 aa c4 ff ff       	call   c0001fec <mem_cpy>
c0005b42:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b48:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b51:	e8 8f c4 ff ff       	call   c0001fe5 <st_word>
c0005b56:	6a 01                	push   0x1
c0005b58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b5c:	53                   	push   ebx
c0005b5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b61:	e8 25 c4 ff ff       	call   c0001f8b <disk_write>
c0005b66:	83 c4 10             	add    esp,0x10
c0005b69:	85 c0                	test   eax,eax
c0005b6b:	0f 85 34 02 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005b71:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b76:	83 f8 03             	cmp    eax,0x3
c0005b79:	0f 85 98 00 00 00    	jne    c0005c17 <f_mkfs+0x611>
c0005b7f:	6a 01                	push   0x1
c0005b81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b85:	83 c0 06             	add    eax,0x6
c0005b88:	50                   	push   eax
c0005b89:	53                   	push   ebx
c0005b8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b8e:	e8 f8 c3 ff ff       	call   c0001f8b <disk_write>
c0005b93:	b9 00 02 00 00       	mov    ecx,0x200
c0005b98:	31 d2                	xor    edx,edx
c0005b9a:	89 d8                	mov    eax,ebx
c0005b9c:	e8 60 c4 ff ff       	call   c0002001 <mem_set>
c0005ba1:	ba 52 52 61 41       	mov    edx,0x41615252
c0005ba6:	89 d8                	mov    eax,ebx
c0005ba8:	e8 3c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bad:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bb3:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bb8:	e8 2c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bbd:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bc0:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005bc6:	e8 1e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bcb:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005bd1:	ba 02 00 00 00       	mov    edx,0x2
c0005bd6:	e8 0e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bdb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005be0:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005be6:	e8 fa c3 ff ff       	call   c0001fe5 <st_word>
c0005beb:	6a 01                	push   0x1
c0005bed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005bf1:	83 c0 07             	add    eax,0x7
c0005bf4:	50                   	push   eax
c0005bf5:	53                   	push   ebx
c0005bf6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005bfa:	e8 8c c3 ff ff       	call   c0001f8b <disk_write>
c0005bff:	83 c4 20             	add    esp,0x20
c0005c02:	6a 01                	push   0x1
c0005c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005c08:	40                   	inc    eax
c0005c09:	50                   	push   eax
c0005c0a:	53                   	push   ebx
c0005c0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c0f:	e8 77 c3 ff ff       	call   c0001f8b <disk_write>
c0005c14:	83 c4 10             	add    esp,0x10
c0005c17:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c1b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c1f:	c1 e8 09             	shr    eax,0x9
c0005c22:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c2c:	31 d2                	xor    edx,edx
c0005c2e:	89 d8                	mov    eax,ebx
c0005c30:	e8 cc c3 ff ff       	call   c0002001 <mem_set>
c0005c35:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c3a:	31 c9                	xor    ecx,ecx
c0005c3c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005c44:	83 f8 01             	cmp    eax,0x1
c0005c47:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c4b:	0f 94 c1             	sete   cl
c0005c4e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005c52:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005c56:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005c5e:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005c66:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c6b:	75 21                	jne    c0005c8e <f_mkfs+0x688>
c0005c6d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c72:	89 d8                	mov    eax,ebx
c0005c74:	e8 70 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c79:	8d 43 04             	lea    eax,[ebx+0x4]
c0005c7c:	83 ca ff             	or     edx,0xffffffff
c0005c7f:	e8 65 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c84:	8d 43 08             	lea    eax,[ebx+0x8]
c0005c87:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005c8c:	eb 06                	jmp    c0005c94 <f_mkfs+0x68e>
c0005c8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c92:	89 d8                	mov    eax,ebx
c0005c94:	e8 50 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ca1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005ca5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ca9:	39 ce                	cmp    esi,ecx
c0005cab:	76 02                	jbe    c0005caf <f_mkfs+0x6a9>
c0005cad:	89 ce                	mov    esi,ecx
c0005caf:	56                   	push   esi
c0005cb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005cb4:	53                   	push   ebx
c0005cb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cb9:	e8 cd c2 ff ff       	call   c0001f8b <disk_write>
c0005cbe:	83 c4 10             	add    esp,0x10
c0005cc1:	85 c0                	test   eax,eax
c0005cc3:	0f 85 dc 00 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005cc9:	31 d2                	xor    edx,edx
c0005ccb:	b9 00 02 00 00       	mov    ecx,0x200
c0005cd0:	89 d8                	mov    eax,ebx
c0005cd2:	e8 2a c3 ff ff       	call   c0002001 <mem_set>
c0005cd7:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005cdb:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005cdf:	75 c0                	jne    c0005ca1 <f_mkfs+0x69b>
c0005ce1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ce5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005ced:	40                   	inc    eax
c0005cee:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005cf2:	0f 87 6e ff ff ff    	ja     c0005c66 <f_mkfs+0x660>
c0005cf8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cfd:	83 f8 03             	cmp    eax,0x3
c0005d00:	74 04                	je     c0005d06 <f_mkfs+0x700>
c0005d02:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005d06:	89 fe                	mov    esi,edi
c0005d08:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d0c:	76 04                	jbe    c0005d12 <f_mkfs+0x70c>
c0005d0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d12:	56                   	push   esi
c0005d13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d17:	53                   	push   ebx
c0005d18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d1c:	e8 6a c2 ff ff       	call   c0001f8b <disk_write>
c0005d21:	83 c4 10             	add    esp,0x10
c0005d24:	85 c0                	test   eax,eax
c0005d26:	75 7d                	jne    c0005da5 <f_mkfs+0x79f>
c0005d28:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d2c:	29 f7                	sub    edi,esi
c0005d2e:	75 d6                	jne    c0005d06 <f_mkfs+0x700>
c0005d30:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d35:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d3a:	83 f8 03             	cmp    eax,0x3
c0005d3d:	74 1e                	je     c0005d5d <f_mkfs+0x757>
c0005d3f:	b9 06 00 00 00       	mov    ecx,0x6
c0005d44:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d4c:	77 0f                	ja     c0005d5d <f_mkfs+0x757>
c0005d4e:	b9 04 00 00 00       	mov    ecx,0x4
c0005d53:	83 f8 02             	cmp    eax,0x2
c0005d56:	74 05                	je     c0005d5d <f_mkfs+0x757>
c0005d58:	b9 01 00 00 00       	mov    ecx,0x1
c0005d5d:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d62:	75 2a                	jne    c0005d8e <f_mkfs+0x788>
c0005d64:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d68:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d70:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	53                   	push   ebx
c0005d78:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005d7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d80:	e8 89 d2 ff ff       	call   c000300e <create_partition>
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	89 c6                	mov    esi,eax
c0005d8a:	85 c0                	test   eax,eax
c0005d8c:	75 2e                	jne    c0005dbc <f_mkfs+0x7b6>
c0005d8e:	31 f6                	xor    esi,esi
c0005d90:	50                   	push   eax
c0005d91:	6a 00                	push   0x0
c0005d93:	6a 00                	push   0x0
c0005d95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d99:	e8 03 c2 ff ff       	call   c0001fa1 <disk_ioctl>
c0005d9e:	83 c4 10             	add    esp,0x10
c0005da1:	85 c0                	test   eax,eax
c0005da3:	74 17                	je     c0005dbc <f_mkfs+0x7b6>
c0005da5:	85 ed                	test   ebp,ebp
c0005da7:	75 0c                	jne    c0005db5 <f_mkfs+0x7af>
c0005da9:	83 ec 0c             	sub    esp,0xc
c0005dac:	53                   	push   ebx
c0005dad:	e8 6e 00 00 00       	call   c0005e20 <ff_memfree>
c0005db2:	83 c4 10             	add    esp,0x10
c0005db5:	be 01 00 00 00       	mov    esi,0x1
c0005dba:	eb 40                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dbc:	85 ed                	test   ebp,ebp
c0005dbe:	75 3c                	jne    c0005dfc <f_mkfs+0x7f6>
c0005dc0:	83 ec 0c             	sub    esp,0xc
c0005dc3:	53                   	push   ebx
c0005dc4:	e8 57 00 00 00       	call   c0005e20 <ff_memfree>
c0005dc9:	83 c4 10             	add    esp,0x10
c0005dcc:	eb 2e                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dce:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005dd3:	0f 85 3b fb ff ff    	jne    c0005914 <f_mkfs+0x30e>
c0005dd9:	e9 15 fc ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dde:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005de3:	0f 85 31 fb ff ff    	jne    c000591a <f_mkfs+0x314>
c0005de9:	89 cf                	mov    edi,ecx
c0005deb:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005df1:	0f 86 29 fa ff ff    	jbe    c0005820 <f_mkfs+0x21a>
c0005df7:	e9 f7 fb ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dfc:	83 c4 5c             	add    esp,0x5c
c0005dff:	89 f0                	mov    eax,esi
c0005e01:	5b                   	pop    ebx
c0005e02:	5e                   	pop    esi
c0005e03:	5f                   	pop    edi
c0005e04:	5d                   	pop    ebp
c0005e05:	c3                   	ret    
c0005e06:	66 90                	xchg   ax,ax

c0005e08 <ff_memalloc>:
c0005e08:	83 ec 0c             	sub    esp,0xc
c0005e0b:	83 ec 0c             	sub    esp,0xc
c0005e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e12:	e8 d0 9e 00 00       	call   c000fce7 <malloc>
c0005e17:	83 c4 10             	add    esp,0x10
c0005e1a:	83 c4 0c             	add    esp,0xc
c0005e1d:	c3                   	ret    
c0005e1e:	66 90                	xchg   ax,ax

c0005e20 <ff_memfree>:
c0005e20:	83 ec 0c             	sub    esp,0xc
c0005e23:	83 ec 0c             	sub    esp,0xc
c0005e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e2a:	e8 c8 9e 00 00       	call   c000fcf7 <free>
c0005e2f:	83 c4 10             	add    esp,0x10
c0005e32:	90                   	nop
c0005e33:	83 c4 0c             	add    esp,0xc
c0005e36:	c3                   	ret    
c0005e37:	90                   	nop

c0005e38 <ff_uni2oem>:
c0005e38:	83 ec 14             	sub    esp,0x14
c0005e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e43:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e4a:	c7 44 24 0c 00 2f 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022f00
c0005e52:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e57:	77 0b                	ja     c0005e64 <ff_uni2oem+0x2c>
c0005e59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e5d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e62:	eb 68                	jmp    c0005ecc <ff_uni2oem+0x94>
c0005e64:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e6c:	77 5e                	ja     c0005ecc <ff_uni2oem+0x94>
c0005e6e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e72:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e77:	75 53                	jne    c0005ecc <ff_uni2oem+0x94>
c0005e79:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e80:	eb 12                	jmp    c0005e94 <ff_uni2oem+0x5c>
c0005e82:	66 90                	xchg   ax,ax
c0005e84:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e89:	83 c0 01             	add    eax,0x1
c0005e8c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e91:	8d 76 00             	lea    esi,[esi+0x0]
c0005e94:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e99:	83 f8 7f             	cmp    eax,0x7f
c0005e9c:	77 1e                	ja     c0005ebc <ff_uni2oem+0x84>
c0005e9e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ea3:	01 c0                	add    eax,eax
c0005ea5:	89 c2                	mov    edx,eax
c0005ea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eab:	01 d0                	add    eax,edx
c0005ead:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eb0:	0f b7 c0             	movzx  eax,ax
c0005eb3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005eb7:	75 cb                	jne    c0005e84 <ff_uni2oem+0x4c>
c0005eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0005ebc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ec1:	83 e8 80             	sub    eax,0xffffff80
c0005ec4:	0f b6 c0             	movzx  eax,al
c0005ec7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ecc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ed1:	83 c4 14             	add    esp,0x14
c0005ed4:	c3                   	ret    
c0005ed5:	8d 76 00             	lea    esi,[esi+0x0]

c0005ed8 <ff_oem2uni>:
c0005ed8:	83 ec 18             	sub    esp,0x18
c0005edb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ee3:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005ee8:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005eec:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ef3:	c7 44 24 10 00 2f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022f00
c0005efb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f00:	83 f8 7f             	cmp    eax,0x7f
c0005f03:	77 0b                	ja     c0005f10 <ff_oem2uni+0x38>
c0005f05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f09:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f0e:	eb 34                	jmp    c0005f44 <ff_oem2uni+0x6c>
c0005f10:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f14:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f19:	75 29                	jne    c0005f44 <ff_oem2uni+0x6c>
c0005f1b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f20:	3d ff 00 00 00       	cmp    eax,0xff
c0005f25:	77 1d                	ja     c0005f44 <ff_oem2uni+0x6c>
c0005f27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f2c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f31:	01 c0                	add    eax,eax
c0005f33:	89 c2                	mov    edx,eax
c0005f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f39:	01 d0                	add    eax,edx
c0005f3b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f3e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f43:	90                   	nop
c0005f44:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f49:	83 c4 18             	add    esp,0x18
c0005f4c:	c3                   	ret    
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0005f50 <ff_wtoupper>:
c0005f50:	83 ec 10             	sub    esp,0x10
c0005f53:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f5b:	0f 87 ab 01 00 00    	ja     c000610c <ff_wtoupper+0x1bc>
c0005f61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f65:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f6a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f6f:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f74:	77 0a                	ja     c0005f80 <ff_wtoupper+0x30>
c0005f76:	b8 00 2d 02 c0       	mov    eax,0xc0022d00
c0005f7b:	eb 0b                	jmp    c0005f88 <ff_wtoupper+0x38>
c0005f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f80:	b8 40 2c 02 c0       	mov    eax,0xc0022c40
c0005f85:	8d 76 00             	lea    esi,[esi+0x0]
c0005f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f90:	8d 50 02             	lea    edx,[eax+0x2]
c0005f93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f97:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f9a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005f9f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 84 54 01 00 00    	je     c0006100 <ff_wtoupper+0x1b0>
c0005fac:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fb1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fb6:	39 c2                	cmp    edx,eax
c0005fb8:	0f 82 42 01 00 00    	jb     c0006100 <ff_wtoupper+0x1b0>
c0005fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fc2:	8d 50 02             	lea    edx,[eax+0x2]
c0005fc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fcc:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005fd1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fd6:	c1 e8 08             	shr    eax,0x8
c0005fd9:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005fde:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005fe3:	0f b6 c0             	movzx  eax,al
c0005fe6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005feb:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ff0:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005ff5:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005ffa:	01 ca                	add    edx,ecx
c0005ffc:	39 d0                	cmp    eax,edx
c0005ffe:	0f 8d d8 00 00 00    	jge    c00060dc <ff_wtoupper+0x18c>
c0006004:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006009:	83 f8 08             	cmp    eax,0x8
c000600c:	0f 87 ea 00 00 00    	ja     c00060fc <ff_wtoupper+0x1ac>
c0006012:	8b 04 85 00 2c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd400]
c0006019:	ff e0                	jmp    eax
c000601b:	90                   	nop
c000601c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006021:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006026:	29 c2                	sub    edx,eax
c0006028:	89 d0                	mov    eax,edx
c000602a:	01 c0                	add    eax,eax
c000602c:	89 c2                	mov    edx,eax
c000602e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006032:	01 d0                	add    eax,edx
c0006034:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006037:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000603c:	e9 97 00 00 00       	jmp    c00060d8 <ff_wtoupper+0x188>
c0006041:	8d 76 00             	lea    esi,[esi+0x0]
c0006044:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0006049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000604d:	89 d1                	mov    ecx,edx
c000604f:	29 c1                	sub    ecx,eax
c0006051:	89 c8                	mov    eax,ecx
c0006053:	83 e0 01             	and    eax,0x1
c0006056:	89 c2                	mov    edx,eax
c0006058:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000605d:	29 d0                	sub    eax,edx
c000605f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006064:	eb 72                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006066:	66 90                	xchg   ax,ax
c0006068:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000606d:	83 e8 10             	sub    eax,0x10
c0006070:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006075:	eb 61                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006077:	90                   	nop
c0006078:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000607d:	83 e8 20             	sub    eax,0x20
c0006080:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006085:	eb 51                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006087:	90                   	nop
c0006088:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000608d:	83 e8 30             	sub    eax,0x30
c0006090:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006095:	eb 41                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006097:	90                   	nop
c0006098:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000609d:	83 e8 1a             	sub    eax,0x1a
c00060a0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a5:	eb 31                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060a7:	90                   	nop
c00060a8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060ad:	83 c0 08             	add    eax,0x8
c00060b0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b5:	eb 21                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060b7:	90                   	nop
c00060b8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060bd:	83 e8 50             	sub    eax,0x50
c00060c0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c5:	eb 11                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060c7:	90                   	nop
c00060c8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060cd:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d7:	90                   	nop
c00060d8:	eb 22                	jmp    c00060fc <ff_wtoupper+0x1ac>
c00060da:	66 90                	xchg   ax,ax
c00060dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060e1:	85 c0                	test   eax,eax
c00060e3:	0f 85 a3 fe ff ff    	jne    c0005f8c <ff_wtoupper+0x3c>
c00060e9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00060ee:	01 c0                	add    eax,eax
c00060f0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00060f4:	e9 93 fe ff ff       	jmp    c0005f8c <ff_wtoupper+0x3c>
c00060f9:	8d 76 00             	lea    esi,[esi+0x0]
c00060fc:	90                   	nop
c00060fd:	8d 76 00             	lea    esi,[esi+0x0]
c0006100:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006105:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006109:	8d 76 00             	lea    esi,[esi+0x0]
c000610c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006110:	83 c4 10             	add    esp,0x10
c0006113:	c3                   	ret    

c0006114 <utf2ucs>:
c0006114:	57                   	push   edi
c0006115:	31 c9                	xor    ecx,ecx
c0006117:	56                   	push   esi
c0006118:	89 d7                	mov    edi,edx
c000611a:	53                   	push   ebx
c000611b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000611f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006123:	89 de                	mov    esi,ebx
c0006125:	c1 fe 08             	sar    esi,0x8
c0006128:	89 f2                	mov    edx,esi
c000612a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c000612d:	41                   	inc    ecx
c000612e:	85 db                	test   ebx,ebx
c0006130:	75 e9                	jne    c000611b <utf2ucs+0x7>
c0006132:	5b                   	pop    ebx
c0006133:	5e                   	pop    esi
c0006134:	5f                   	pop    edi
c0006135:	c3                   	ret    

c0006136 <ucs2utfn>:
c0006136:	83 e1 fe             	and    ecx,0xfffffffe
c0006139:	01 d1                	add    ecx,edx
c000613b:	39 d1                	cmp    ecx,edx
c000613d:	75 04                	jne    c0006143 <ucs2utfn+0xd>
c000613f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006142:	c3                   	ret    
c0006143:	57                   	push   edi
c0006144:	56                   	push   esi
c0006145:	53                   	push   ebx
c0006146:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006149:	83 c2 02             	add    edx,0x2
c000614c:	89 de                	mov    esi,ebx
c000614e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006152:	c1 e6 08             	shl    esi,0x8
c0006155:	09 f3                	or     ebx,esi
c0006157:	83 fb 3b             	cmp    ebx,0x3b
c000615a:	74 50                	je     c00061ac <ucs2utfn+0x76>
c000615c:	83 fb 7f             	cmp    ebx,0x7f
c000615f:	7f 05                	jg     c0006166 <ucs2utfn+0x30>
c0006161:	88 18                	mov    BYTE PTR [eax],bl
c0006163:	40                   	inc    eax
c0006164:	eb 42                	jmp    c00061a8 <ucs2utfn+0x72>
c0006166:	89 de                	mov    esi,ebx
c0006168:	89 df                	mov    edi,ebx
c000616a:	c1 fe 06             	sar    esi,0x6
c000616d:	83 e7 3f             	and    edi,0x3f
c0006170:	83 cf 80             	or     edi,0xffffff80
c0006173:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006179:	7f 12                	jg     c000618d <ucs2utfn+0x57>
c000617b:	83 ce c0             	or     esi,0xffffffc0
c000617e:	83 c0 02             	add    eax,0x2
c0006181:	89 f3                	mov    ebx,esi
c0006183:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006186:	89 fb                	mov    ebx,edi
c0006188:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000618b:	eb 1b                	jmp    c00061a8 <ucs2utfn+0x72>
c000618d:	c1 fb 0c             	sar    ebx,0xc
c0006190:	83 e6 3f             	and    esi,0x3f
c0006193:	83 cb e0             	or     ebx,0xffffffe0
c0006196:	83 ce 80             	or     esi,0xffffff80
c0006199:	88 18                	mov    BYTE PTR [eax],bl
c000619b:	89 f3                	mov    ebx,esi
c000619d:	83 c0 03             	add    eax,0x3
c00061a0:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061a3:	89 fb                	mov    ebx,edi
c00061a5:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061a8:	39 d1                	cmp    ecx,edx
c00061aa:	75 9a                	jne    c0006146 <ucs2utfn+0x10>
c00061ac:	5b                   	pop    ebx
c00061ad:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061b0:	5e                   	pop    esi
c00061b1:	5f                   	pop    edi
c00061b2:	c3                   	ret    

c00061b3 <isjoliet>:
c00061b3:	31 d2                	xor    edx,edx
c00061b5:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061b8:	75 26                	jne    c00061e0 <isjoliet+0x2d>
c00061ba:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061be:	75 20                	jne    c00061e0 <isjoliet+0x2d>
c00061c0:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061c4:	ba 02 00 00 00       	mov    edx,0x2
c00061c9:	83 f8 43             	cmp    eax,0x43
c00061cc:	74 12                	je     c00061e0 <isjoliet+0x2d>
c00061ce:	ba 03 00 00 00       	mov    edx,0x3
c00061d3:	83 f8 45             	cmp    eax,0x45
c00061d6:	74 08                	je     c00061e0 <isjoliet+0x2d>
c00061d8:	31 d2                	xor    edx,edx
c00061da:	83 f8 40             	cmp    eax,0x40
c00061dd:	0f 94 c2             	sete   dl
c00061e0:	89 d0                	mov    eax,edx
c00061e2:	c3                   	ret    

c00061e3 <htohl_32>:
c00061e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00061e5:	c3                   	ret    

c00061e6 <iso_733>:
c00061e6:	eb fb                	jmp    c00061e3 <htohl_32>

c00061e8 <bgrad_cache>:
c00061e8:	83 fa 0e             	cmp    edx,0xe
c00061eb:	77 16                	ja     c0006203 <bgrad_cache+0x1b>
c00061ed:	53                   	push   ebx
c00061ee:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00061f1:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00061f5:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00061f8:	42                   	inc    edx
c00061f9:	83 fa 0f             	cmp    edx,0xf
c00061fc:	75 f3                	jne    c00061f1 <bgrad_cache+0x9>
c00061fe:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006201:	5b                   	pop    ebx
c0006202:	c3                   	ret    
c0006203:	c3                   	ret    

c0006204 <ucscompare>:
c0006204:	55                   	push   ebp
c0006205:	57                   	push   edi
c0006206:	89 c7                	mov    edi,eax
c0006208:	56                   	push   esi
c0006209:	89 d6                	mov    esi,edx
c000620b:	53                   	push   ebx
c000620c:	31 d2                	xor    edx,edx
c000620e:	83 ec 1c             	sub    esp,0x1c
c0006211:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006215:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000621a:	c1 e3 08             	shl    ebx,0x8
c000621d:	09 c3                	or     ebx,eax
c000621f:	39 ca                	cmp    edx,ecx
c0006221:	7d 42                	jge    c0006265 <ucscompare+0x61>
c0006223:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006227:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000622c:	c1 e0 08             	shl    eax,0x8
c000622f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006233:	09 e8                	or     eax,ebp
c0006235:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006239:	83 f8 3b             	cmp    eax,0x3b
c000623c:	74 27                	je     c0006265 <ucscompare+0x61>
c000623e:	83 ec 0c             	sub    esp,0xc
c0006241:	50                   	push   eax
c0006242:	e8 09 a7 ff ff       	call   c0000950 <tolower>
c0006247:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000624a:	89 c5                	mov    ebp,eax
c000624c:	e8 ff a6 ff ff       	call   c0000950 <tolower>
c0006251:	83 c4 10             	add    esp,0x10
c0006254:	39 c5                	cmp    ebp,eax
c0006256:	75 20                	jne    c0006278 <ucscompare+0x74>
c0006258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000625c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006260:	83 c2 02             	add    edx,0x2
c0006263:	eb ac                	jmp    c0006211 <ucscompare+0xd>
c0006265:	85 db                	test   ebx,ebx
c0006267:	0f 95 c2             	setne  dl
c000626a:	31 c0                	xor    eax,eax
c000626c:	83 fb 2f             	cmp    ebx,0x2f
c000626f:	0f 95 c0             	setne  al
c0006272:	21 d0                	and    eax,edx
c0006274:	f7 d8                	neg    eax
c0006276:	eb 03                	jmp    c000627b <ucscompare+0x77>
c0006278:	83 c8 ff             	or     eax,0xffffffff
c000627b:	83 c4 1c             	add    esp,0x1c
c000627e:	5b                   	pop    ebx
c000627f:	5e                   	pop    esi
c0006280:	5f                   	pop    edi
c0006281:	5d                   	pop    ebp
c0006282:	c3                   	ret    

c0006283 <fncompare>:
c0006283:	55                   	push   ebp
c0006284:	57                   	push   edi
c0006285:	89 c7                	mov    edi,eax
c0006287:	56                   	push   esi
c0006288:	89 ce                	mov    esi,ecx
c000628a:	53                   	push   ebx
c000628b:	31 db                	xor    ebx,ebx
c000628d:	83 ec 1c             	sub    esp,0x1c
c0006290:	39 d3                	cmp    ebx,edx
c0006292:	7d 45                	jge    c00062d9 <fncompare+0x56>
c0006294:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006298:	83 f8 3b             	cmp    eax,0x3b
c000629b:	74 3c                	je     c00062d9 <fncompare+0x56>
c000629d:	83 f8 2e             	cmp    eax,0x2e
c00062a0:	75 0e                	jne    c00062b0 <fncompare+0x2d>
c00062a2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062a5:	39 d9                	cmp    ecx,ebx
c00062a7:	74 30                	je     c00062d9 <fncompare+0x56>
c00062a9:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062ae:	74 29                	je     c00062d9 <fncompare+0x56>
c00062b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062b4:	83 ec 0c             	sub    esp,0xc
c00062b7:	50                   	push   eax
c00062b8:	e8 93 a6 ff ff       	call   c0000950 <tolower>
c00062bd:	89 c5                	mov    ebp,eax
c00062bf:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00062c6:	e8 85 a6 ff ff       	call   c0000950 <tolower>
c00062cb:	83 c4 10             	add    esp,0x10
c00062ce:	39 c5                	cmp    ebp,eax
c00062d0:	75 1e                	jne    c00062f0 <fncompare+0x6d>
c00062d2:	43                   	inc    ebx
c00062d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062d7:	eb b7                	jmp    c0006290 <fncompare+0xd>
c00062d9:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00062dd:	85 d2                	test   edx,edx
c00062df:	0f 95 c1             	setne  cl
c00062e2:	31 c0                	xor    eax,eax
c00062e4:	83 fa 2f             	cmp    edx,0x2f
c00062e7:	0f 95 c0             	setne  al
c00062ea:	21 c8                	and    eax,ecx
c00062ec:	f7 d8                	neg    eax
c00062ee:	eb 03                	jmp    c00062f3 <fncompare+0x70>
c00062f0:	83 c8 ff             	or     eax,0xffffffff
c00062f3:	83 c4 1c             	add    esp,0x1c
c00062f6:	5b                   	pop    ebx
c00062f7:	5e                   	pop    esi
c00062f8:	5f                   	pop    edi
c00062f9:	5d                   	pop    ebp
c00062fa:	c3                   	ret    

c00062fb <bclear_cache>:
c00062fb:	83 ec 18             	sub    esp,0x18
c00062fe:	68 00 30 02 c0       	push   0xc0023000
c0006303:	e8 70 68 01 00       	call   c001cb78 <iso_kprintf>
c0006308:	83 c4 10             	add    esp,0x10
c000630b:	31 c0                	xor    eax,eax
c000630d:	8b 14 85 20 90 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6fe0]
c0006314:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000631a:	8b 14 85 80 90 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6f80]
c0006321:	40                   	inc    eax
c0006322:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006328:	83 f8 10             	cmp    eax,0x10
c000632b:	75 e0                	jne    c000630d <bclear_cache+0x12>
c000632d:	83 c4 0c             	add    esp,0xc
c0006330:	c3                   	ret    

c0006331 <bclear>:
c0006331:	eb c8                	jmp    c00062fb <bclear_cache>

c0006333 <iso_break_all>:
c0006333:	83 ec 18             	sub    esp,0x18
c0006336:	68 0e 30 02 c0       	push   0xc002300e
c000633b:	e8 38 68 01 00       	call   c001cb78 <iso_kprintf>
c0006340:	83 c4 10             	add    esp,0x10
c0006343:	31 c0                	xor    eax,eax
c0006345:	c7 80 d0 95 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd6a30],0x1
c000634f:	05 94 00 00 00       	add    eax,0x94
c0006354:	3d 40 09 00 00       	cmp    eax,0x940
c0006359:	75 ea                	jne    c0006345 <iso_break_all+0x12>
c000635b:	83 c4 0c             	add    esp,0xc
c000635e:	c3                   	ret    

c000635f <isoReadDiscSector>:
c000635f:	83 ec 0c             	sub    esp,0xc
c0006362:	0f be 05 60 90 02 c0 	movsx  eax,BYTE PTR ds:0xc0029060
c0006369:	50                   	push   eax
c000636a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000636e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006376:	e8 a1 67 01 00       	call   c001cb1c <isoReadDiscSectorHelper>
c000637b:	83 c4 1c             	add    esp,0x1c
c000637e:	c3                   	ret    

c000637f <bread_cache>:
c000637f:	55                   	push   ebp
c0006380:	57                   	push   edi
c0006381:	89 d7                	mov    edi,edx
c0006383:	56                   	push   esi
c0006384:	ba 0f 00 00 00       	mov    edx,0xf
c0006389:	53                   	push   ebx
c000638a:	89 c6                	mov    esi,eax
c000638c:	83 ec 0c             	sub    esp,0xc
c000638f:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0006392:	39 38                	cmp    DWORD PTR [eax],edi
c0006394:	74 3c                	je     c00063d2 <bread_cache+0x53>
c0006396:	4a                   	dec    edx
c0006397:	83 fa ff             	cmp    edx,0xffffffff
c000639a:	75 f3                	jne    c000638f <bread_cache+0x10>
c000639c:	31 db                	xor    ebx,ebx
c000639e:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063a1:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063a4:	74 08                	je     c00063ae <bread_cache+0x2f>
c00063a6:	43                   	inc    ebx
c00063a7:	83 fb 10             	cmp    ebx,0x10
c00063aa:	75 f2                	jne    c000639e <bread_cache+0x1f>
c00063ac:	31 db                	xor    ebx,ebx
c00063ae:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063b1:	50                   	push   eax
c00063b2:	6a 01                	push   0x1
c00063b4:	57                   	push   edi
c00063b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063b8:	83 c0 04             	add    eax,0x4
c00063bb:	50                   	push   eax
c00063bc:	e8 9e ff ff ff       	call   c000635f <isoReadDiscSector>
c00063c1:	83 c4 10             	add    esp,0x10
c00063c4:	83 c9 ff             	or     ecx,0xffffffff
c00063c7:	85 c0                	test   eax,eax
c00063c9:	78 13                	js     c00063de <bread_cache+0x5f>
c00063cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063ce:	89 da                	mov    edx,ebx
c00063d0:	89 38                	mov    DWORD PTR [eax],edi
c00063d2:	89 f0                	mov    eax,esi
c00063d4:	e8 0f fe ff ff       	call   c00061e8 <bgrad_cache>
c00063d9:	b9 0f 00 00 00       	mov    ecx,0xf
c00063de:	83 c4 0c             	add    esp,0xc
c00063e1:	89 c8                	mov    eax,ecx
c00063e3:	5b                   	pop    ebx
c00063e4:	5e                   	pop    esi
c00063e5:	5f                   	pop    edi
c00063e6:	5d                   	pop    ebp
c00063e7:	c3                   	ret    

c00063e8 <biread>:
c00063e8:	89 c2                	mov    edx,eax
c00063ea:	b8 80 90 02 c0       	mov    eax,0xc0029080
c00063ef:	eb 8e                	jmp    c000637f <bread_cache>

c00063f1 <bdread>:
c00063f1:	89 c2                	mov    edx,eax
c00063f3:	b8 20 90 02 c0       	mov    eax,0xc0029020
c00063f8:	eb 85                	jmp    c000637f <bread_cache>

c00063fa <strnicmp>:
c00063fa:	55                   	push   ebp
c00063fb:	57                   	push   edi
c00063fc:	31 ff                	xor    edi,edi
c00063fe:	56                   	push   esi
c00063ff:	53                   	push   ebx
c0006400:	83 ec 0c             	sub    esp,0xc
c0006403:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006407:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000640b:	74 43                	je     c0006450 <strnicmp+0x56>
c000640d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006411:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006415:	85 c0                	test   eax,eax
c0006417:	74 37                	je     c0006450 <strnicmp+0x56>
c0006419:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c000641d:	85 d2                	test   edx,edx
c000641f:	74 2f                	je     c0006450 <strnicmp+0x56>
c0006421:	39 d0                	cmp    eax,edx
c0006423:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006426:	75 04                	jne    c000642c <strnicmp+0x32>
c0006428:	89 ef                	mov    edi,ebp
c000642a:	eb db                	jmp    c0006407 <strnicmp+0xd>
c000642c:	83 ec 0c             	sub    esp,0xc
c000642f:	50                   	push   eax
c0006430:	e8 1b a5 ff ff       	call   c0000950 <tolower>
c0006435:	89 c3                	mov    ebx,eax
c0006437:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000643b:	89 ef                	mov    edi,ebp
c000643d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006440:	e8 0b a5 ff ff       	call   c0000950 <tolower>
c0006445:	83 c4 10             	add    esp,0x10
c0006448:	29 c3                	sub    ebx,eax
c000644a:	89 d8                	mov    eax,ebx
c000644c:	74 b9                	je     c0006407 <strnicmp+0xd>
c000644e:	eb 02                	jmp    c0006452 <strnicmp+0x58>
c0006450:	31 c0                	xor    eax,eax
c0006452:	83 c4 0c             	add    esp,0xc
c0006455:	5b                   	pop    ebx
c0006456:	5e                   	pop    esi
c0006457:	5f                   	pop    edi
c0006458:	5d                   	pop    ebp
c0006459:	c3                   	ret    

c000645a <find_object>:
c000645a:	55                   	push   ebp
c000645b:	57                   	push   edi
c000645c:	89 c7                	mov    edi,eax
c000645e:	56                   	push   esi
c000645f:	53                   	push   ebx
c0006460:	89 d3                	mov    ebx,edx
c0006462:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006468:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000646f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006473:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006477:	83 3d b4 9e 02 c0 00 	cmp    DWORD PTR ds:0xc0029eb4,0x0
c000647e:	74 0b                	je     c000648b <find_object+0x31>
c0006480:	89 fa                	mov    edx,edi
c0006482:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006486:	e8 89 fc ff ff       	call   c0006114 <utf2ucs>
c000648b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000648e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006492:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006497:	7e 11                	jle    c00064aa <find_object+0x50>
c0006499:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000649d:	e8 46 ff ff ff       	call   c00063e8 <biread>
c00064a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00064a6:	85 c0                	test   eax,eax
c00064a8:	79 07                	jns    c00064b1 <find_object+0x57>
c00064aa:	31 db                	xor    ebx,ebx
c00064ac:	e9 56 01 00 00       	jmp    c0006607 <find_object+0x1ad>
c00064b1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00064b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00064c1:	8b 04 85 80 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f80]
c00064c8:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00064cc:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064cf:	85 f6                	test   esi,esi
c00064d1:	75 0e                	jne    c00064e1 <find_object+0x87>
c00064d3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00064d7:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00064df:	eb b1                	jmp    c0006492 <find_object+0x38>
c00064e1:	8b 2d b4 9e 02 c0    	mov    ebp,DWORD PTR ds:0xc0029eb4
c00064e7:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00064eb:	85 ed                	test   ebp,ebp
c00064ed:	89 c8                	mov    eax,ecx
c00064ef:	74 2b                	je     c000651c <find_object+0xc2>
c00064f1:	8d 43 21             	lea    eax,[ebx+0x21]
c00064f4:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064f8:	e8 07 fd ff ff       	call   c0006204 <ucscompare>
c00064fd:	85 c0                	test   eax,eax
c00064ff:	0f 84 bf 00 00 00    	je     c00065c4 <find_object+0x16a>
c0006505:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006508:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c000650c:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006514:	0f 8e da 00 00 00    	jle    c00065f4 <find_object+0x19a>
c000651a:	eb b7                	jmp    c00064d3 <find_object+0x79>
c000651c:	29 ce                	sub    esi,ecx
c000651e:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006522:	a8 01                	test   al,0x1
c0006524:	74 05                	je     c000652b <find_object+0xd1>
c0006526:	83 ee 21             	sub    esi,0x21
c0006529:	eb 5a                	jmp    c0006585 <find_object+0x12b>
c000652b:	42                   	inc    edx
c000652c:	83 ee 22             	sub    esi,0x22
c000652f:	eb 54                	jmp    c0006585 <find_object+0x12b>
c0006531:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006534:	48                   	dec    eax
c0006535:	3c 01                	cmp    al,0x1
c0006537:	77 51                	ja     c000658a <find_object+0x130>
c0006539:	50                   	push   eax
c000653a:	6a 02                	push   0x2
c000653c:	68 1d 30 02 c0       	push   0xc002301d
c0006541:	52                   	push   edx
c0006542:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006546:	e8 95 a2 ff ff       	call   c00007e0 <strncmp>
c000654b:	83 c4 10             	add    esp,0x10
c000654e:	85 c0                	test   eax,eax
c0006550:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006554:	75 27                	jne    c000657d <find_object+0x123>
c0006556:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000655a:	8d 68 fb             	lea    ebp,[eax-0x5]
c000655d:	50                   	push   eax
c000655e:	8d 42 05             	lea    eax,[edx+0x5]
c0006561:	55                   	push   ebp
c0006562:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006566:	50                   	push   eax
c0006567:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000656b:	50                   	push   eax
c000656c:	e8 0f a1 ff ff       	call   c0000680 <strncpy>
c0006571:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006576:	83 c4 10             	add    esp,0x10
c0006579:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657d:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006581:	29 c6                	sub    esi,eax
c0006583:	01 c2                	add    edx,eax
c0006585:	83 fe 03             	cmp    esi,0x3
c0006588:	7f a7                	jg     c0006531 <find_object+0xd7>
c000658a:	85 ed                	test   ebp,ebp
c000658c:	7e 40                	jle    c00065ce <find_object+0x174>
c000658e:	51                   	push   ecx
c000658f:	51                   	push   ecx
c0006590:	6a 2f                	push   0x2f
c0006592:	57                   	push   edi
c0006593:	e8 08 a2 ff ff       	call   c00007a0 <strchr>
c0006598:	83 c4 10             	add    esp,0x10
c000659b:	85 c0                	test   eax,eax
c000659d:	74 04                	je     c00065a3 <find_object+0x149>
c000659f:	29 f8                	sub    eax,edi
c00065a1:	eb 0c                	jmp    c00065af <find_object+0x155>
c00065a3:	83 ec 0c             	sub    esp,0xc
c00065a6:	57                   	push   edi
c00065a7:	e8 c4 9f ff ff       	call   c0000570 <strlen>
c00065ac:	83 c4 10             	add    esp,0x10
c00065af:	52                   	push   edx
c00065b0:	50                   	push   eax
c00065b1:	57                   	push   edi
c00065b2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065b6:	50                   	push   eax
c00065b7:	e8 3e fe ff ff       	call   c00063fa <strnicmp>
c00065bc:	83 c4 10             	add    esp,0x10
c00065bf:	e9 39 ff ff ff       	jmp    c00064fd <find_object+0xa3>
c00065c4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065c8:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00065cc:	eb 1e                	jmp    c00065ec <find_object+0x192>
c00065ce:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065d2:	8d 43 21             	lea    eax,[ebx+0x21]
c00065d5:	89 f9                	mov    ecx,edi
c00065d7:	e8 a7 fc ff ff       	call   c0006283 <fncompare>
c00065dc:	85 c0                	test   eax,eax
c00065de:	0f 85 21 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065e4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065e8:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00065ec:	0f 85 13 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065f2:	eb 13                	jmp    c0006607 <find_object+0x1ad>
c00065f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00065f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00065fc:	0f 8f b7 fe ff ff    	jg     c00064b9 <find_object+0x5f>
c0006602:	e9 cc fe ff ff       	jmp    c00064d3 <find_object+0x79>
c0006607:	81 c4 2c 01 00 00    	add    esp,0x12c
c000660d:	89 d8                	mov    eax,ebx
c000660f:	5b                   	pop    ebx
c0006610:	5e                   	pop    esi
c0006611:	5f                   	pop    edi
c0006612:	5d                   	pop    ebp
c0006613:	c3                   	ret    

c0006614 <find_object_path>:
c0006614:	55                   	push   ebp
c0006615:	57                   	push   edi
c0006616:	89 d7                	mov    edi,edx
c0006618:	56                   	push   esi
c0006619:	89 c6                	mov    esi,eax
c000661b:	53                   	push   ebx
c000661c:	89 cb                	mov    ebx,ecx
c000661e:	83 ec 0c             	sub    esp,0xc
c0006621:	50                   	push   eax
c0006622:	50                   	push   eax
c0006623:	6a 2f                	push   0x2f
c0006625:	56                   	push   esi
c0006626:	e8 75 a1 ff ff       	call   c00007a0 <strchr>
c000662b:	83 c4 10             	add    esp,0x10
c000662e:	89 c5                	mov    ebp,eax
c0006630:	85 c0                	test   eax,eax
c0006632:	74 3a                	je     c000666e <find_object_path+0x5a>
c0006634:	39 ee                	cmp    esi,ebp
c0006636:	74 31                	je     c0006669 <find_object_path+0x55>
c0006638:	8d 43 0a             	lea    eax,[ebx+0xa]
c000663b:	e8 a6 fb ff ff       	call   c00061e6 <iso_733>
c0006640:	89 c2                	mov    edx,eax
c0006642:	8d 43 02             	lea    eax,[ebx+0x2]
c0006645:	e8 9c fb ff ff       	call   c00061e6 <iso_733>
c000664a:	83 ec 0c             	sub    esp,0xc
c000664d:	89 c1                	mov    ecx,eax
c000664f:	52                   	push   edx
c0006650:	89 f0                	mov    eax,esi
c0006652:	ba 01 00 00 00       	mov    edx,0x1
c0006657:	e8 fe fd ff ff       	call   c000645a <find_object>
c000665c:	83 c4 10             	add    esp,0x10
c000665f:	89 c3                	mov    ebx,eax
c0006661:	85 c0                	test   eax,eax
c0006663:	75 04                	jne    c0006669 <find_object_path+0x55>
c0006665:	31 db                	xor    ebx,ebx
c0006667:	eb 36                	jmp    c000669f <find_object_path+0x8b>
c0006669:	8d 75 01             	lea    esi,[ebp+0x1]
c000666c:	eb b3                	jmp    c0006621 <find_object_path+0xd>
c000666e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006671:	74 28                	je     c000669b <find_object_path+0x87>
c0006673:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006676:	e8 6b fb ff ff       	call   c00061e6 <iso_733>
c000667b:	89 c2                	mov    edx,eax
c000667d:	8d 43 02             	lea    eax,[ebx+0x2]
c0006680:	e8 61 fb ff ff       	call   c00061e6 <iso_733>
c0006685:	83 ec 0c             	sub    esp,0xc
c0006688:	89 c1                	mov    ecx,eax
c000668a:	52                   	push   edx
c000668b:	89 f0                	mov    eax,esi
c000668d:	89 fa                	mov    edx,edi
c000668f:	e8 c6 fd ff ff       	call   c000645a <find_object>
c0006694:	83 c4 10             	add    esp,0x10
c0006697:	89 c3                	mov    ebx,eax
c0006699:	eb 04                	jmp    c000669f <find_object_path+0x8b>
c000669b:	85 ff                	test   edi,edi
c000669d:	74 c6                	je     c0006665 <find_object_path+0x51>
c000669f:	83 c4 0c             	add    esp,0xc
c00066a2:	89 d8                	mov    eax,ebx
c00066a4:	5b                   	pop    ebx
c00066a5:	5e                   	pop    esi
c00066a6:	5f                   	pop    edi
c00066a7:	5d                   	pop    ebp
c00066a8:	c3                   	ret    

c00066a9 <stricmp>:
c00066a9:	57                   	push   edi
c00066aa:	56                   	push   esi
c00066ab:	31 f6                	xor    esi,esi
c00066ad:	53                   	push   ebx
c00066ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b2:	83 ec 0c             	sub    esp,0xc
c00066b5:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066bd:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066c1:	50                   	push   eax
c00066c2:	e8 69 a2 ff ff       	call   c0000930 <toupper>
c00066c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00066ca:	e8 81 a2 ff ff       	call   c0000950 <tolower>
c00066cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066d2:	89 c3                	mov    ebx,eax
c00066d4:	e8 57 a2 ff ff       	call   c0000930 <toupper>
c00066d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00066dc:	e8 6f a2 ff ff       	call   c0000950 <tolower>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	39 c3                	cmp    ebx,eax
c00066e6:	75 05                	jne    c00066ed <stricmp+0x44>
c00066e8:	46                   	inc    esi
c00066e9:	85 db                	test   ebx,ebx
c00066eb:	75 c1                	jne    c00066ae <stricmp+0x5>
c00066ed:	29 c3                	sub    ebx,eax
c00066ef:	89 d8                	mov    eax,ebx
c00066f1:	5b                   	pop    ebx
c00066f2:	5e                   	pop    esi
c00066f3:	5f                   	pop    edi
c00066f4:	c3                   	ret    

c00066f5 <iso_open>:
c00066f5:	57                   	push   edi
c00066f6:	31 c0                	xor    eax,eax
c00066f8:	56                   	push   esi
c00066f9:	b9 80 9e 02 c0       	mov    ecx,0xc0029e80
c00066fe:	53                   	push   ebx
c00066ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006704:	0f 95 c0             	setne  al
c0006707:	89 c2                	mov    edx,eax
c0006709:	89 c6                	mov    esi,eax
c000670b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000670f:	e8 00 ff ff ff       	call   c0006614 <find_object_path>
c0006714:	83 ca ff             	or     edx,0xffffffff
c0006717:	85 c0                	test   eax,eax
c0006719:	74 5e                	je     c0006779 <iso_open+0x84>
c000671b:	89 c1                	mov    ecx,eax
c000671d:	31 d2                	xor    edx,edx
c000671f:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006725:	83 bf 40 95 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd6ac0],0x0
c000672c:	75 42                	jne    c0006770 <iso_open+0x7b>
c000672e:	8d 41 02             	lea    eax,[ecx+0x2]
c0006731:	c7 87 40 95 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd6ac0],0xffffffff
c000673b:	e8 a6 fa ff ff       	call   c00061e6 <iso_733>
c0006740:	89 b7 44 95 02 c0    	mov    DWORD PTR [edi-0x3ffd6abc],esi
c0006746:	89 87 40 95 02 c0    	mov    DWORD PTR [edi-0x3ffd6ac0],eax
c000674c:	c7 87 48 95 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd6ab8],0x0
c0006756:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006759:	e8 88 fa ff ff       	call   c00061e6 <iso_733>
c000675e:	c7 87 d0 95 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd6a30],0x0
c0006768:	89 87 4c 95 02 c0    	mov    DWORD PTR [edi-0x3ffd6ab4],eax
c000676e:	eb 09                	jmp    c0006779 <iso_open+0x84>
c0006770:	42                   	inc    edx
c0006771:	83 fa 10             	cmp    edx,0x10
c0006774:	75 a9                	jne    c000671f <iso_open+0x2a>
c0006776:	83 ca ff             	or     edx,0xffffffff
c0006779:	5b                   	pop    ebx
c000677a:	89 d0                	mov    eax,edx
c000677c:	5e                   	pop    esi
c000677d:	5f                   	pop    edi
c000677e:	c3                   	ret    

c000677f <iso_close>:
c000677f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006783:	83 f8 0f             	cmp    eax,0xf
c0006786:	7f 10                	jg     c0006798 <iso_close+0x19>
c0006788:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000678e:	c7 80 40 95 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6ac0],0x0
c0006798:	e9 5e fb ff ff       	jmp    c00062fb <bclear_cache>

c000679d <iso_read>:
c000679d:	55                   	push   ebp
c000679e:	57                   	push   edi
c000679f:	56                   	push   esi
c00067a0:	53                   	push   ebx
c00067a1:	83 ec 1c             	sub    esp,0x1c
c00067a4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067a8:	83 fd 0f             	cmp    ebp,0xf
c00067ab:	7e 0a                	jle    c00067b7 <iso_read+0x1a>
c00067ad:	83 c8 ff             	or     eax,0xffffffff
c00067b0:	89 c2                	mov    edx,eax
c00067b2:	e9 f4 00 00 00       	jmp    c00068ab <iso_read+0x10e>
c00067b7:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067bd:	83 bd 40 95 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd6ac0],0x0
c00067c4:	74 e7                	je     c00067ad <iso_read+0x10>
c00067c6:	8b 95 d0 95 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd6a30]
c00067cc:	85 d2                	test   edx,edx
c00067ce:	75 dd                	jne    c00067ad <iso_read+0x10>
c00067d0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067d5:	0f 84 cd 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067db:	8b 85 48 95 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd6ab8]
c00067e1:	8b 8d 4c 95 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd6ab4]
c00067e7:	29 c1                	sub    ecx,eax
c00067e9:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00067ed:	76 04                	jbe    c00067f3 <iso_read+0x56>
c00067ef:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00067f3:	85 c9                	test   ecx,ecx
c00067f5:	0f 84 ad 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067fb:	89 c6                	mov    esi,eax
c00067fd:	bb 00 08 00 00       	mov    ebx,0x800
c0006802:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006808:	c1 e8 0b             	shr    eax,0xb
c000680b:	29 f3                	sub    ebx,esi
c000680d:	03 85 40 95 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd6ac0]
c0006813:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006819:	7e 3f                	jle    c000685a <iso_read+0xbd>
c000681b:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006821:	75 37                	jne    c000685a <iso_read+0xbd>
c0006823:	be 20 00 00 00       	mov    esi,0x20
c0006828:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000682e:	7f 05                	jg     c0006835 <iso_read+0x98>
c0006830:	89 ce                	mov    esi,ecx
c0006832:	c1 fe 0b             	sar    esi,0xb
c0006835:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006839:	89 f3                	mov    ebx,esi
c000683b:	c1 e3 0b             	shl    ebx,0xb
c000683e:	52                   	push   edx
c000683f:	56                   	push   esi
c0006840:	50                   	push   eax
c0006841:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006845:	e8 15 fb ff ff       	call   c000635f <isoReadDiscSector>
c000684a:	83 c4 10             	add    esp,0x10
c000684d:	85 c0                	test   eax,eax
c000684f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006853:	7f 3e                	jg     c0006893 <iso_read+0xf6>
c0006855:	e9 53 ff ff ff       	jmp    c00067ad <iso_read+0x10>
c000685a:	39 cb                	cmp    ebx,ecx
c000685c:	7e 02                	jle    c0006860 <iso_read+0xc3>
c000685e:	89 cb                	mov    ebx,ecx
c0006860:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006864:	e8 88 fb ff ff       	call   c00063f1 <bdread>
c0006869:	85 c0                	test   eax,eax
c000686b:	0f 88 3c ff ff ff    	js     c00067ad <iso_read+0x10>
c0006871:	8b 0c 85 20 90 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6fe0]
c0006878:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000687c:	8b 85 48 95 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd6ab8]
c0006882:	25 ff 07 00 00       	and    eax,0x7ff
c0006887:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c000688b:	89 d9                	mov    ecx,ebx
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006893:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006897:	01 9d 48 95 02 c0    	add    DWORD PTR [ebp-0x3ffd6ab8],ebx
c000689d:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068a1:	01 da                	add    edx,ebx
c00068a3:	e9 28 ff ff ff       	jmp    c00067d0 <iso_read+0x33>
c00068a8:	89 d0                	mov    eax,edx
c00068aa:	99                   	cdq    
c00068ab:	83 c4 1c             	add    esp,0x1c
c00068ae:	5b                   	pop    ebx
c00068af:	5e                   	pop    esi
c00068b0:	5f                   	pop    edi
c00068b1:	5d                   	pop    ebp
c00068b2:	c3                   	ret    

c00068b3 <iso_seek>:
c00068b3:	55                   	push   ebp
c00068b4:	83 c8 ff             	or     eax,0xffffffff
c00068b7:	57                   	push   edi
c00068b8:	89 c2                	mov    edx,eax
c00068ba:	56                   	push   esi
c00068bb:	53                   	push   ebx
c00068bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068c8:	83 fe 0f             	cmp    esi,0xf
c00068cb:	7f 65                	jg     c0006932 <iso_seek+0x7f>
c00068cd:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068d3:	8d 8d 40 95 02 c0    	lea    ecx,[ebp-0x3ffd6ac0]
c00068d9:	83 bd 40 95 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd6ac0],0x0
c00068e0:	74 50                	je     c0006932 <iso_seek+0x7f>
c00068e2:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068e9:	75 47                	jne    c0006932 <iso_seek+0x7f>
c00068eb:	83 fb 01             	cmp    ebx,0x1
c00068ee:	74 0e                	je     c00068fe <iso_seek+0x4b>
c00068f0:	83 fb 02             	cmp    ebx,0x2
c00068f3:	74 0e                	je     c0006903 <iso_seek+0x50>
c00068f5:	85 db                	test   ebx,ebx
c00068f7:	75 39                	jne    c0006932 <iso_seek+0x7f>
c00068f9:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00068fc:	eb 0d                	jmp    c000690b <iso_seek+0x58>
c00068fe:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006901:	eb 08                	jmp    c000690b <iso_seek+0x58>
c0006903:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006906:	01 f8                	add    eax,edi
c0006908:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000690b:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006911:	8b 88 4c 95 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd6ab4]
c0006917:	05 40 95 02 c0       	add    eax,0xc0029540
c000691c:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000691f:	76 03                	jbe    c0006924 <iso_seek+0x71>
c0006921:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006924:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000692a:	8b 82 48 95 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd6ab8]
c0006930:	31 d2                	xor    edx,edx
c0006932:	5b                   	pop    ebx
c0006933:	5e                   	pop    esi
c0006934:	5f                   	pop    edi
c0006935:	5d                   	pop    ebp
c0006936:	c3                   	ret    

c0006937 <iso_tell>:
c0006937:	83 c8 ff             	or     eax,0xffffffff
c000693a:	53                   	push   ebx
c000693b:	89 c2                	mov    edx,eax
c000693d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006941:	83 f9 0f             	cmp    ecx,0xf
c0006944:	7f 20                	jg     c0006966 <iso_tell+0x2f>
c0006946:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000694c:	83 bb 40 95 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd6ac0],0x0
c0006953:	74 11                	je     c0006966 <iso_tell+0x2f>
c0006955:	83 bb d0 95 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd6a30],0x0
c000695c:	75 08                	jne    c0006966 <iso_tell+0x2f>
c000695e:	8b 83 48 95 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd6ab8]
c0006964:	31 d2                	xor    edx,edx
c0006966:	5b                   	pop    ebx
c0006967:	c3                   	ret    

c0006968 <iso_total>:
c0006968:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000696c:	83 c8 ff             	or     eax,0xffffffff
c000696f:	83 fa 0f             	cmp    edx,0xf
c0006972:	7f 1e                	jg     c0006992 <iso_total+0x2a>
c0006974:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000697a:	83 ba 40 95 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd6ac0],0x0
c0006981:	74 0f                	je     c0006992 <iso_total+0x2a>
c0006983:	83 ba d0 95 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd6a30],0x0
c000698a:	75 06                	jne    c0006992 <iso_total+0x2a>
c000698c:	8b 82 4c 95 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd6ab4]
c0006992:	c3                   	ret    

c0006993 <fn_postprocess>:
c0006993:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006997:	89 d0                	mov    eax,edx
c0006999:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000699c:	83 f9 3b             	cmp    ecx,0x3b
c000699f:	74 07                	je     c00069a8 <fn_postprocess+0x15>
c00069a1:	85 c9                	test   ecx,ecx
c00069a3:	74 03                	je     c00069a8 <fn_postprocess+0x15>
c00069a5:	40                   	inc    eax
c00069a6:	eb f1                	jmp    c0006999 <fn_postprocess+0x6>
c00069a8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069ab:	39 d0                	cmp    eax,edx
c00069ad:	76 0a                	jbe    c00069b9 <fn_postprocess+0x26>
c00069af:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069b3:	75 04                	jne    c00069b9 <fn_postprocess+0x26>
c00069b5:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b9:	c3                   	ret    

c00069ba <iso_readdir>:
c00069ba:	55                   	push   ebp
c00069bb:	57                   	push   edi
c00069bc:	56                   	push   esi
c00069bd:	53                   	push   ebx
c00069be:	83 ec 1c             	sub    esp,0x1c
c00069c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069c5:	83 fb 0f             	cmp    ebx,0xf
c00069c8:	7f 28                	jg     c00069f2 <iso_readdir+0x38>
c00069ca:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069d0:	8d b8 40 95 02 c0    	lea    edi,[eax-0x3ffd6ac0]
c00069d6:	83 b8 40 95 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd6ac0],0x0
c00069dd:	74 13                	je     c00069f2 <iso_readdir+0x38>
c00069df:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069e3:	74 0d                	je     c00069f2 <iso_readdir+0x38>
c00069e5:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00069ec:	0f 84 b1 00 00 00    	je     c0006aa3 <iso_readdir+0xe9>
c00069f2:	83 ec 0c             	sub    esp,0xc
c00069f5:	68 20 30 02 c0       	push   0xc0023020
c00069fa:	e8 79 61 01 00       	call   c001cb78 <iso_kprintf>
c00069ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a02:	e8 8d 61 01 00       	call   c001cb94 <iso_kprintfd>
c0006a07:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a0d:	c7 04 24 25 30 02 c0 	mov    DWORD PTR [esp],0xc0023025
c0006a14:	e8 5f 61 01 00       	call   c001cb78 <iso_kprintf>
c0006a19:	5d                   	pop    ebp
c0006a1a:	ff b3 40 95 02 c0    	push   DWORD PTR [ebx-0x3ffd6ac0]
c0006a20:	e8 6f 61 01 00       	call   c001cb94 <iso_kprintfd>
c0006a25:	c7 04 24 2b 30 02 c0 	mov    DWORD PTR [esp],0xc002302b
c0006a2c:	e8 47 61 01 00       	call   c001cb78 <iso_kprintf>
c0006a31:	58                   	pop    eax
c0006a32:	ff b3 44 95 02 c0    	push   DWORD PTR [ebx-0x3ffd6abc]
c0006a38:	e8 57 61 01 00       	call   c001cb94 <iso_kprintfd>
c0006a3d:	c7 04 24 31 30 02 c0 	mov    DWORD PTR [esp],0xc0023031
c0006a44:	e8 2f 61 01 00       	call   c001cb78 <iso_kprintf>
c0006a49:	58                   	pop    eax
c0006a4a:	ff b3 d0 95 02 c0    	push   DWORD PTR [ebx-0x3ffd6a30]
c0006a50:	e8 3f 61 01 00       	call   c001cb94 <iso_kprintfd>
c0006a55:	83 c4 10             	add    esp,0x10
c0006a58:	eb 42                	jmp    c0006a9c <iso_readdir+0xe2>
c0006a5a:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a5d:	8b 34 85 80 90 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd6f80]
c0006a64:	89 d1                	mov    ecx,edx
c0006a66:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a6c:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a70:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a73:	75 35                	jne    c0006aaa <iso_readdir+0xf0>
c0006a75:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a7b:	81 c2 00 08 00 00    	add    edx,0x800
c0006a81:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a84:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a87:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a8a:	73 1e                	jae    c0006aaa <iso_readdir+0xf0>
c0006a8c:	c1 ea 0b             	shr    edx,0xb
c0006a8f:	8b 07                	mov    eax,DWORD PTR [edi]
c0006a91:	01 d0                	add    eax,edx
c0006a93:	e8 50 f9 ff ff       	call   c00063e8 <biread>
c0006a98:	85 c0                	test   eax,eax
c0006a9a:	79 be                	jns    c0006a5a <iso_readdir+0xa0>
c0006a9c:	31 c0                	xor    eax,eax
c0006a9e:	e9 66 01 00 00       	jmp    c0006c09 <iso_readdir+0x24f>
c0006aa3:	31 f6                	xor    esi,esi
c0006aa5:	83 c8 ff             	or     eax,0xffffffff
c0006aa8:	eb da                	jmp    c0006a84 <iso_readdir+0xca>
c0006aaa:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ab0:	8b ba 48 95 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd6ab8]
c0006ab6:	81 c2 40 95 02 c0    	add    edx,0xc0029540
c0006abc:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006abf:	73 db                	jae    c0006a9c <iso_readdir+0xe2>
c0006ac1:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ac5:	75 34                	jne    c0006afb <iso_readdir+0x141>
c0006ac7:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006acb:	75 2e                	jne    c0006afb <iso_readdir+0x141>
c0006acd:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ad0:	8b 34 85 80 90 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd6f80]
c0006ad7:	01 f9                	add    ecx,edi
c0006ad9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006adc:	89 c8                	mov    eax,ecx
c0006ade:	25 ff 07 00 00       	and    eax,0x7ff
c0006ae3:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006ae8:	01 c8                	add    eax,ecx
c0006aea:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006aed:	25 ff 07 00 00       	and    eax,0x7ff
c0006af2:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006af6:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006af9:	74 a1                	je     c0006a9c <iso_readdir+0xe2>
c0006afb:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b01:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b05:	8d 56 21             	lea    edx,[esi+0x21]
c0006b08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b0c:	8d a8 58 95 02 c0    	lea    ebp,[eax-0x3ffd6aa8]
c0006b12:	83 3d b4 9e 02 c0 00 	cmp    DWORD PTR ds:0xc0029eb4,0x0
c0006b19:	74 0c                	je     c0006b27 <iso_readdir+0x16d>
c0006b1b:	89 e8                	mov    eax,ebp
c0006b1d:	e8 14 f6 ff ff       	call   c0006136 <ucs2utfn>
c0006b22:	e9 a6 00 00 00       	jmp    c0006bcd <iso_readdir+0x213>
c0006b27:	57                   	push   edi
c0006b28:	51                   	push   ecx
c0006b29:	52                   	push   edx
c0006b2a:	55                   	push   ebp
c0006b2b:	e8 50 9b ff ff       	call   c0000680 <strncpy>
c0006b30:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b34:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006b3a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b3d:	c6 84 01 58 95 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd6aa8],0x0
c0006b45:	e8 49 fe ff ff       	call   c0006993 <fn_postprocess>
c0006b4a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b4e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b51:	83 c4 10             	add    esp,0x10
c0006b54:	29 d0                	sub    eax,edx
c0006b56:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006b5a:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006b5e:	74 05                	je     c0006b65 <iso_readdir+0x1ab>
c0006b60:	83 e8 21             	sub    eax,0x21
c0006b63:	eb 04                	jmp    c0006b69 <iso_readdir+0x1af>
c0006b65:	47                   	inc    edi
c0006b66:	83 e8 22             	sub    eax,0x22
c0006b69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b6d:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b77:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b7c:	7e 4f                	jle    c0006bcd <iso_readdir+0x213>
c0006b7e:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006b81:	48                   	dec    eax
c0006b82:	3c 01                	cmp    al,0x1
c0006b84:	77 47                	ja     c0006bcd <iso_readdir+0x213>
c0006b86:	52                   	push   edx
c0006b87:	6a 02                	push   0x2
c0006b89:	68 1d 30 02 c0       	push   0xc002301d
c0006b8e:	57                   	push   edi
c0006b8f:	e8 4c 9c ff ff       	call   c00007e0 <strncmp>
c0006b94:	83 c4 10             	add    esp,0x10
c0006b97:	85 c0                	test   eax,eax
c0006b99:	75 26                	jne    c0006bc1 <iso_readdir+0x207>
c0006b9b:	50                   	push   eax
c0006b9c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006ba0:	83 e8 05             	sub    eax,0x5
c0006ba3:	50                   	push   eax
c0006ba4:	8d 47 05             	lea    eax,[edi+0x5]
c0006ba7:	50                   	push   eax
c0006ba8:	55                   	push   ebp
c0006ba9:	e8 d2 9a ff ff       	call   c0000680 <strncpy>
c0006bae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006bb2:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bb6:	83 c4 10             	add    esp,0x10
c0006bb9:	c6 84 08 53 95 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd6aad],0x0
c0006bc1:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bc5:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006bc9:	01 c7                	add    edi,eax
c0006bcb:	eb aa                	jmp    c0006b77 <iso_readdir+0x1bd>
c0006bcd:	83 c8 ff             	or     eax,0xffffffff
c0006bd0:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bd4:	89 c2                	mov    edx,eax
c0006bd6:	75 0a                	jne    c0006be2 <iso_readdir+0x228>
c0006bd8:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bdb:	e8 06 f6 ff ff       	call   c00061e6 <iso_733>
c0006be0:	31 d2                	xor    edx,edx
c0006be2:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006be8:	89 83 50 95 02 c0    	mov    DWORD PTR [ebx-0x3ffd6ab0],eax
c0006bee:	89 93 54 95 02 c0    	mov    DWORD PTR [ebx-0x3ffd6aac],edx
c0006bf4:	81 c3 40 95 02 c0    	add    ebx,0xc0029540
c0006bfa:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006bfd:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c04:	05 50 95 02 c0       	add    eax,0xc0029550
c0006c09:	83 c4 1c             	add    esp,0x1c
c0006c0c:	5b                   	pop    ebx
c0006c0d:	5e                   	pop    esi
c0006c0e:	5f                   	pop    edi
c0006c0f:	5d                   	pop    ebp
c0006c10:	c3                   	ret    

c0006c11 <iso_reset>:
c0006c11:	83 ec 18             	sub    esp,0x18
c0006c14:	68 3a 30 02 c0       	push   0xc002303a
c0006c19:	e8 5a 5f 01 00       	call   c001cb78 <iso_kprintf>
c0006c1e:	e8 10 f7 ff ff       	call   c0006333 <iso_break_all>
c0006c23:	e8 09 f7 ff ff       	call   c0006331 <bclear>
c0006c28:	31 c0                	xor    eax,eax
c0006c2a:	83 c4 1c             	add    esp,0x1c
c0006c2d:	c3                   	ret    

c0006c2e <init_percd>:
c0006c2e:	57                   	push   edi
c0006c2f:	56                   	push   esi
c0006c30:	53                   	push   ebx
c0006c31:	bb 01 00 00 00       	mov    ebx,0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	a2 60 90 02 c0       	mov    ds:0xc0029060,al
c0006c3f:	e8 cd ff ff ff       	call   c0006c11 <iso_reset>
c0006c44:	c7 05 b4 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029eb4,0x0
c0006c4e:	a1 ac 9e 02 c0       	mov    eax,ds:0xc0029eac
c0006c53:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c57:	e8 8c f7 ff ff       	call   c00063e8 <biread>
c0006c5c:	89 c6                	mov    esi,eax
c0006c5e:	85 c0                	test   eax,eax
c0006c60:	0f 88 ba 00 00 00    	js     c0006d20 <init_percd+0xf2>
c0006c66:	8b 04 85 80 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f80]
c0006c6d:	83 c0 04             	add    eax,0x4
c0006c70:	52                   	push   edx
c0006c71:	6a 06                	push   0x6
c0006c73:	68 45 30 02 c0       	push   0xc0023045
c0006c78:	50                   	push   eax
c0006c79:	e8 02 97 ff ff       	call   c0000380 <memcmp>
c0006c7e:	83 c4 10             	add    esp,0x10
c0006c81:	85 c0                	test   eax,eax
c0006c83:	74 08                	je     c0006c8d <init_percd+0x5f>
c0006c85:	43                   	inc    ebx
c0006c86:	83 fb 04             	cmp    ebx,0x4
c0006c89:	75 c3                	jne    c0006c4e <init_percd+0x20>
c0006c8b:	eb 1a                	jmp    c0006ca7 <init_percd+0x79>
c0006c8d:	8b 04 b5 80 90 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd6f80]
c0006c94:	83 c0 5c             	add    eax,0x5c
c0006c97:	e8 17 f5 ff ff       	call   c00061b3 <isjoliet>
c0006c9c:	a3 b4 9e 02 c0       	mov    ds:0xc0029eb4,eax
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 e0                	je     c0006c85 <init_percd+0x57>
c0006ca5:	eb 3e                	jmp    c0006ce5 <init_percd+0xb7>
c0006ca7:	83 3d b4 9e 02 c0 00 	cmp    DWORD PTR ds:0xc0029eb4,0x0
c0006cae:	75 35                	jne    c0006ce5 <init_percd+0xb7>
c0006cb0:	a1 ac 9e 02 c0       	mov    eax,ds:0xc0029eac
c0006cb5:	83 c0 10             	add    eax,0x10
c0006cb8:	e8 2b f7 ff ff       	call   c00063e8 <biread>
c0006cbd:	89 c6                	mov    esi,eax
c0006cbf:	85 c0                	test   eax,eax
c0006cc1:	78 5f                	js     c0006d22 <init_percd+0xf4>
c0006cc3:	83 cb ff             	or     ebx,0xffffffff
c0006cc6:	50                   	push   eax
c0006cc7:	8b 04 b5 80 90 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd6f80]
c0006cce:	6a 06                	push   0x6
c0006cd0:	83 c0 04             	add    eax,0x4
c0006cd3:	68 4c 30 02 c0       	push   0xc002304c
c0006cd8:	50                   	push   eax
c0006cd9:	e8 a2 96 ff ff       	call   c0000380 <memcmp>
c0006cde:	83 c4 10             	add    esp,0x10
c0006ce1:	85 c0                	test   eax,eax
c0006ce3:	75 3d                	jne    c0006d22 <init_percd+0xf4>
c0006ce5:	8b 34 b5 80 90 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd6f80]
c0006cec:	bf 80 9e 02 c0       	mov    edi,0xc0029e80
c0006cf1:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006cf7:	b9 22 00 00 00       	mov    ecx,0x22
c0006cfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cfe:	b8 82 9e 02 c0       	mov    eax,0xc0029e82
c0006d03:	31 db                	xor    ebx,ebx
c0006d05:	e8 dc f4 ff ff       	call   c00061e6 <iso_733>
c0006d0a:	a3 a8 9e 02 c0       	mov    ds:0xc0029ea8,eax
c0006d0f:	b8 8a 9e 02 c0       	mov    eax,0xc0029e8a
c0006d14:	e8 cd f4 ff ff       	call   c00061e6 <iso_733>
c0006d19:	a3 a4 9e 02 c0       	mov    ds:0xc0029ea4,eax
c0006d1e:	eb 02                	jmp    c0006d22 <init_percd+0xf4>
c0006d20:	89 c3                	mov    ebx,eax
c0006d22:	89 d8                	mov    eax,ebx
c0006d24:	5b                   	pop    ebx
c0006d25:	5e                   	pop    esi
c0006d26:	5f                   	pop    edi
c0006d27:	c3                   	ret    

c0006d28 <iso_ioctl>:
c0006d28:	83 ec 18             	sub    esp,0x18
c0006d2b:	68 53 30 02 c0       	push   0xc0023053
c0006d30:	e8 43 5e 01 00       	call   c001cb78 <iso_kprintf>
c0006d35:	e8 d7 fe ff ff       	call   c0006c11 <iso_reset>
c0006d3a:	31 c0                	xor    eax,eax
c0006d3c:	83 c4 1c             	add    esp,0x1c
c0006d3f:	c3                   	ret    

c0006d40 <fs_iso9660_init>:
c0006d40:	53                   	push   ebx
c0006d41:	31 db                	xor    ebx,ebx
c0006d43:	83 ec 14             	sub    esp,0x14
c0006d46:	68 5e 30 02 c0       	push   0xc002305e
c0006d4b:	e8 28 5e 01 00       	call   c001cb78 <iso_kprintf>
c0006d50:	83 c4 0c             	add    esp,0xc
c0006d53:	68 40 09 00 00       	push   0x940
c0006d58:	6a 00                	push   0x0
c0006d5a:	68 40 95 02 c0       	push   0xc0029540
c0006d5f:	e8 8c 97 ff ff       	call   c00004f0 <memset>
c0006d64:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d6b:	c7 05 40 95 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0029540,0xffffffff
c0006d75:	e8 6d 8f 00 00       	call   c000fce7 <malloc>
c0006d7a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d81:	a3 b0 9e 02 c0       	mov    ds:0xc0029eb0,eax
c0006d86:	e8 5c 8f 00 00       	call   c000fce7 <malloc>
c0006d8b:	83 c4 10             	add    esp,0x10
c0006d8e:	a3 20 95 02 c0       	mov    ds:0xc0029520,eax
c0006d93:	83 ec 0c             	sub    esp,0xc
c0006d96:	68 04 08 00 00       	push   0x804
c0006d9b:	e8 47 8f 00 00       	call   c000fce7 <malloc>
c0006da0:	89 04 9d 80 90 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd6f80],eax
c0006da7:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dad:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006db4:	e8 2e 8f 00 00       	call   c000fce7 <malloc>
c0006db9:	83 c4 10             	add    esp,0x10
c0006dbc:	89 04 9d 20 90 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd6fe0],eax
c0006dc3:	43                   	inc    ebx
c0006dc4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dca:	83 fb 10             	cmp    ebx,0x10
c0006dcd:	75 c4                	jne    c0006d93 <fs_iso9660_init+0x53>
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	83 c4 08             	add    esp,0x8
c0006dd4:	5b                   	pop    ebx
c0006dd5:	c3                   	ret    

c0006dd6 <fs_iso9660_shutdown>:
c0006dd6:	53                   	push   ebx
c0006dd7:	31 db                	xor    ebx,ebx
c0006dd9:	83 ec 08             	sub    esp,0x8
c0006ddc:	83 ec 0c             	sub    esp,0xc
c0006ddf:	ff 34 9d 80 90 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6f80]
c0006de6:	e8 0c 8f 00 00       	call   c000fcf7 <free>
c0006deb:	58                   	pop    eax
c0006dec:	ff 34 9d 20 90 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6fe0]
c0006df3:	43                   	inc    ebx
c0006df4:	e8 fe 8e 00 00       	call   c000fcf7 <free>
c0006df9:	83 c4 10             	add    esp,0x10
c0006dfc:	83 fb 10             	cmp    ebx,0x10
c0006dff:	75 db                	jne    c0006ddc <fs_iso9660_shutdown+0x6>
c0006e01:	a1 b0 9e 02 c0       	mov    eax,ds:0xc0029eb0
c0006e06:	85 c0                	test   eax,eax
c0006e08:	74 0c                	je     c0006e16 <fs_iso9660_shutdown+0x40>
c0006e0a:	83 ec 0c             	sub    esp,0xc
c0006e0d:	50                   	push   eax
c0006e0e:	e8 e4 8e 00 00       	call   c000fcf7 <free>
c0006e13:	83 c4 10             	add    esp,0x10
c0006e16:	a1 20 95 02 c0       	mov    eax,ds:0xc0029520
c0006e1b:	85 c0                	test   eax,eax
c0006e1d:	74 0c                	je     c0006e2b <fs_iso9660_shutdown+0x55>
c0006e1f:	83 ec 0c             	sub    esp,0xc
c0006e22:	50                   	push   eax
c0006e23:	e8 cf 8e 00 00       	call   c000fcf7 <free>
c0006e28:	83 c4 10             	add    esp,0x10
c0006e2b:	c7 05 20 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029520,0x0
c0006e35:	c7 05 b0 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029eb0,0x0
c0006e3f:	31 c0                	xor    eax,eax
c0006e41:	83 c4 08             	add    esp,0x8
c0006e44:	5b                   	pop    ebx
c0006e45:	c3                   	ret    

c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e46:	55                   	push   ebp
c0006e47:	57                   	push   edi
c0006e48:	56                   	push   esi
c0006e49:	be 70 30 02 c0       	mov    esi,0xc0023070
c0006e4e:	53                   	push   ebx
c0006e4f:	83 ec 20             	sub    esp,0x20
c0006e52:	a0 6f 30 02 c0       	mov    al,ds:0xc002306f
c0006e57:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0006e5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0006e5f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0006e63:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0006e67:	b8 10 00 00 00       	mov    eax,0x10
c0006e6c:	f7 c7 02 00 00 00    	test   edi,0x2
c0006e72:	75 60                	jne    c0006ed4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0006e74:	89 c1                	mov    ecx,eax
c0006e76:	c1 e9 02             	shr    ecx,0x2
c0006e79:	fc                   	cld    
c0006e7a:	31 d2                	xor    edx,edx
c0006e7c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0006e7e:	a8 02                	test   al,0x2
c0006e80:	74 0b                	je     c0006e8d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c0006e82:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006e85:	66 89 17             	mov    WORD PTR [edi],dx
c0006e88:	ba 02 00 00 00       	mov    edx,0x2
c0006e8d:	a8 01                	test   al,0x1
c0006e8f:	74 06                	je     c0006e97 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c0006e91:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0006e94:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0006e97:	89 ee                	mov    esi,ebp
c0006e99:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006e9d:	eb 02                	jmp    c0006ea1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c0006e9f:	89 c6                	mov    esi,eax
c0006ea1:	31 d2                	xor    edx,edx
c0006ea3:	83 c1 01             	add    ecx,0x1
c0006ea6:	89 f0                	mov    eax,esi
c0006ea8:	f7 f3                	div    ebx
c0006eaa:	39 de                	cmp    esi,ebx
c0006eac:	73 f1                	jae    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c0006eae:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0006eb1:	eb 02                	jmp    c0006eb5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c0006eb3:	89 c5                	mov    ebp,eax
c0006eb5:	31 d2                	xor    edx,edx
c0006eb7:	83 e9 01             	sub    ecx,0x1
c0006eba:	89 e8                	mov    eax,ebp
c0006ebc:	f7 f3                	div    ebx
c0006ebe:	39 dd                	cmp    ebp,ebx
c0006ec0:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec4:	88 11                	mov    BYTE PTR [ecx],dl
c0006ec6:	73 eb                	jae    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c0006ec8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0006ecc:	83 c4 20             	add    esp,0x20
c0006ecf:	5b                   	pop    ebx
c0006ed0:	5e                   	pop    esi
c0006ed1:	5f                   	pop    edi
c0006ed2:	5d                   	pop    ebp
c0006ed3:	c3                   	ret    
c0006ed4:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006ed7:	83 c7 02             	add    edi,0x2
c0006eda:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c0006ede:	83 c6 02             	add    esi,0x2
c0006ee1:	83 e8 02             	sub    eax,0x2
c0006ee4:	eb 8e                	jmp    c0006e74 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c0006ee6 <Dbg::logc(char)>:
c0006ee6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006eea:	f6 05 24 f1 02 c0 10 	test   BYTE PTR ds:0xc002f124,0x10
c0006ef1:	75 12                	jne    c0006f05 <Dbg::logc(char)+0x1f>
c0006ef3:	ba fd 03 00 00       	mov    edx,0x3fd
c0006ef8:	ec                   	in     al,dx
c0006ef9:	a8 20                	test   al,0x20
c0006efb:	74 fb                	je     c0006ef8 <Dbg::logc(char)+0x12>
c0006efd:	ba f8 03 00 00       	mov    edx,0x3f8
c0006f02:	88 c8                	mov    al,cl
c0006f04:	ee                   	out    dx,al
c0006f05:	c3                   	ret    

c0006f06 <Dbg::logs(char*)>:
c0006f06:	53                   	push   ebx
c0006f07:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006f0b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f0e:	85 c0                	test   eax,eax
c0006f10:	74 11                	je     c0006f23 <Dbg::logs(char*)+0x1d>
c0006f12:	83 c3 01             	add    ebx,0x1
c0006f15:	50                   	push   eax
c0006f16:	e8 cb ff ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006f1b:	58                   	pop    eax
c0006f1c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1f:	85 c0                	test   eax,eax
c0006f21:	75 ef                	jne    c0006f12 <Dbg::logs(char*)+0xc>
c0006f23:	5b                   	pop    ebx
c0006f24:	c3                   	ret    

c0006f25 <Dbg::logWriteInt(unsigned int)>:
c0006f25:	83 ec 10             	sub    esp,0x10
c0006f28:	6a 0a                	push   0xa
c0006f2a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f2e:	50                   	push   eax
c0006f2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006f33:	50                   	push   eax
c0006f34:	e8 0d ff ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f39:	50                   	push   eax
c0006f3a:	e8 c7 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0006f3f:	83 c4 20             	add    esp,0x20
c0006f42:	c3                   	ret    

c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f43:	83 ec 10             	sub    esp,0x10
c0006f46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006f4a:	50                   	push   eax
c0006f4b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f4f:	50                   	push   eax
c0006f50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006f54:	52                   	push   edx
c0006f55:	e8 ec fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f5a:	50                   	push   eax
c0006f5b:	e8 a6 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0006f60:	83 c4 20             	add    esp,0x20
c0006f63:	c3                   	ret    

c0006f64 <Dbg::kprintf(char const*, ...)>:
c0006f64:	55                   	push   ebp
c0006f65:	57                   	push   edi
c0006f66:	56                   	push   esi
c0006f67:	53                   	push   ebx
c0006f68:	83 ec 1c             	sub    esp,0x1c
c0006f6b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006f6f:	85 db                	test   ebx,ebx
c0006f71:	0f 84 44 01 00 00    	je     c00070bb <Dbg::kprintf(char const*, ...)+0x157>
c0006f77:	f6 05 24 f1 02 c0 10 	test   BYTE PTR ds:0xc002f124,0x10
c0006f7e:	74 08                	je     c0006f88 <Dbg::kprintf(char const*, ...)+0x24>
c0006f80:	83 c4 1c             	add    esp,0x1c
c0006f83:	5b                   	pop    ebx
c0006f84:	5e                   	pop    esi
c0006f85:	5f                   	pop    edi
c0006f86:	5d                   	pop    ebp
c0006f87:	c3                   	ret    
c0006f88:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006f8c:	31 ff                	xor    edi,edi
c0006f8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006f92:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f95:	85 c0                	test   eax,eax
c0006f97:	74 e7                	je     c0006f80 <Dbg::kprintf(char const*, ...)+0x1c>
c0006f99:	8d 77 01             	lea    esi,[edi+0x1]
c0006f9c:	83 f8 25             	cmp    eax,0x25
c0006f9f:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fa2:	75 4c                	jne    c0006ff0 <Dbg::kprintf(char const*, ...)+0x8c>
c0006fa4:	83 c7 02             	add    edi,0x2
c0006fa7:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006faa:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fad:	83 e8 25             	sub    eax,0x25
c0006fb0:	0f b6 c0             	movzx  eax,al
c0006fb3:	83 f8 53             	cmp    eax,0x53
c0006fb6:	0f 87 e1 00 00 00    	ja     c000709d <Dbg::kprintf(char const*, ...)+0x139>
c0006fbc:	ff 24 85 94 30 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdcf6c]
c0006fc3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006fc7:	83 ec 0c             	sub    esp,0xc
c0006fca:	89 c8                	mov    eax,ecx
c0006fcc:	83 c1 04             	add    ecx,0x4
c0006fcf:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006fd3:	8b 00                	mov    eax,DWORD PTR [eax]
c0006fd5:	50                   	push   eax
c0006fd6:	e8 4a ff ff ff       	call   c0006f25 <Dbg::logWriteInt(unsigned int)>
c0006fdb:	83 c4 10             	add    esp,0x10
c0006fde:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006fe1:	85 c0                	test   eax,eax
c0006fe3:	74 9b                	je     c0006f80 <Dbg::kprintf(char const*, ...)+0x1c>
c0006fe5:	8d 77 01             	lea    esi,[edi+0x1]
c0006fe8:	83 f8 25             	cmp    eax,0x25
c0006feb:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fee:	74 b4                	je     c0006fa4 <Dbg::kprintf(char const*, ...)+0x40>
c0006ff0:	83 ec 0c             	sub    esp,0xc
c0006ff3:	89 f7                	mov    edi,esi
c0006ff5:	50                   	push   eax
c0006ff6:	89 ee                	mov    esi,ebp
c0006ff8:	e8 e9 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006ffd:	83 c4 10             	add    esp,0x10
c0007000:	eb dc                	jmp    c0006fde <Dbg::kprintf(char const*, ...)+0x7a>
c0007002:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	89 c8                	mov    eax,ecx
c000700b:	83 c1 04             	add    ecx,0x4
c000700e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0007010:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007014:	55                   	push   ebp
c0007015:	e8 ec fe ff ff       	call   c0006f06 <Dbg::logs(char*)>
c000701a:	83 c4 10             	add    esp,0x10
c000701d:	eb bf                	jmp    c0006fde <Dbg::kprintf(char const*, ...)+0x7a>
c000701f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007023:	83 ec 0c             	sub    esp,0xc
c0007026:	89 d0                	mov    eax,edx
c0007028:	83 c2 04             	add    edx,0x4
c000702b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000702f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007031:	51                   	push   ecx
c0007032:	e8 ee fe ff ff       	call   c0006f25 <Dbg::logWriteInt(unsigned int)>
c0007037:	83 c4 10             	add    esp,0x10
c000703a:	eb a2                	jmp    c0006fde <Dbg::kprintf(char const*, ...)+0x7a>
c000703c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007040:	83 ec 0c             	sub    esp,0xc
c0007043:	89 d0                	mov    eax,edx
c0007045:	83 c2 04             	add    edx,0x4
c0007048:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000704b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000704f:	50                   	push   eax
c0007050:	e8 91 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007055:	83 c4 10             	add    esp,0x10
c0007058:	eb 84                	jmp    c0006fde <Dbg::kprintf(char const*, ...)+0x7a>
c000705a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000705e:	89 c8                	mov    eax,ecx
c0007060:	83 c1 04             	add    ecx,0x4
c0007063:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007067:	83 ec 08             	sub    esp,0x8
c000706a:	6a 10                	push   0x10
c000706c:	8b 10                	mov    edx,DWORD PTR [eax]
c000706e:	52                   	push   edx
c000706f:	e8 cf fe ff ff       	call   c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>
c0007074:	83 c4 10             	add    esp,0x10
c0007077:	e9 62 ff ff ff       	jmp    c0006fde <Dbg::kprintf(char const*, ...)+0x7a>
c000707c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007080:	89 d0                	mov    eax,edx
c0007082:	83 c2 08             	add    edx,0x8
c0007085:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007089:	eb dc                	jmp    c0007067 <Dbg::kprintf(char const*, ...)+0x103>
c000708b:	83 ec 0c             	sub    esp,0xc
c000708e:	6a 25                	push   0x25
c0007090:	e8 51 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007095:	83 c4 10             	add    esp,0x10
c0007098:	e9 41 ff ff ff       	jmp    c0006fde <Dbg::kprintf(char const*, ...)+0x7a>
c000709d:	83 ec 0c             	sub    esp,0xc
c00070a0:	6a 25                	push   0x25
c00070a2:	e8 3f fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070a7:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00070ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00070ae:	e8 33 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070b3:	83 c4 10             	add    esp,0x10
c00070b6:	e9 23 ff ff ff       	jmp    c0006fde <Dbg::kprintf(char const*, ...)+0x7a>
c00070bb:	83 ec 0c             	sub    esp,0xc
c00070be:	68 80 30 02 c0       	push   0xc0023080
c00070c3:	e8 9c fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070c8:	83 c4 10             	add    esp,0x10
c00070cb:	e9 b0 fe ff ff       	jmp    c0006f80 <Dbg::kprintf(char const*, ...)+0x1c>

c00070d0 <KiUbsanPrintDetails(char const*, void*)>:
c00070d0:	83 ec 1c             	sub    esp,0x1c
c00070d3:	83 ec 08             	sub    esp,0x8
c00070d6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070da:	68 e4 31 02 c0       	push   0xc00231e4
c00070df:	e8 80 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070e4:	83 c4 10             	add    esp,0x10
c00070e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00070eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00070f5:	83 ec 08             	sub    esp,0x8
c00070f8:	50                   	push   eax
c00070f9:	68 f8 31 02 c0       	push   0xc00231f8
c00070fe:	e8 61 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007103:	83 c4 10             	add    esp,0x10
c0007106:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000710a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000710d:	83 ec 08             	sub    esp,0x8
c0007110:	50                   	push   eax
c0007111:	68 02 32 02 c0       	push   0xc0023202
c0007116:	e8 49 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000711b:	83 c4 10             	add    esp,0x10
c000711e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007122:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0007125:	83 ec 08             	sub    esp,0x8
c0007128:	50                   	push   eax
c0007129:	68 0c 32 02 c0       	push   0xc002320c
c000712e:	e8 31 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007133:	83 c4 10             	add    esp,0x10
c0007136:	90                   	nop
c0007137:	83 c4 1c             	add    esp,0x1c
c000713a:	c3                   	ret    
c000713b:	90                   	nop

c000713c <__ubsan_handle_type_mismatch_v1>:
c000713c:	83 ec 0c             	sub    esp,0xc
c000713f:	83 ec 08             	sub    esp,0x8
c0007142:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007146:	68 50 33 02 c0       	push   0xc0023350
c000714b:	e8 80 ff ff ff       	call   c00070d0 <KiUbsanPrintDetails(char const*, void*)>
c0007150:	83 c4 10             	add    esp,0x10
c0007153:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007158:	75 16                	jne    c0007170 <__ubsan_handle_type_mismatch_v1+0x34>
c000715a:	83 ec 0c             	sub    esp,0xc
c000715d:	68 16 32 02 c0       	push   0xc0023216
c0007162:	e8 fd fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007167:	83 c4 10             	add    esp,0x10
c000716a:	e9 91 00 00 00       	jmp    c0007200 <__ubsan_handle_type_mismatch_v1+0xc4>
c000716f:	90                   	nop
c0007170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007174:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007177:	85 c0                	test   eax,eax
c0007179:	74 29                	je     c00071a4 <__ubsan_handle_type_mismatch_v1+0x68>
c000717b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000717f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007182:	83 e8 01             	sub    eax,0x1
c0007185:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0007189:	75 19                	jne    c00071a4 <__ubsan_handle_type_mismatch_v1+0x68>
c000718b:	83 ec 08             	sub    esp,0x8
c000718e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007192:	68 70 33 02 c0       	push   0xc0023370
c0007197:	e8 c8 fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000719c:	83 c4 10             	add    esp,0x10
c000719f:	eb 5f                	jmp    c0007200 <__ubsan_handle_type_mismatch_v1+0xc4>
c00071a1:	8d 76 00             	lea    esi,[esi+0x0]
c00071a4:	83 ec 0c             	sub    esp,0xc
c00071a7:	68 2b 32 02 c0       	push   0xc002322b
c00071ac:	e8 b3 fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00071b1:	83 c4 10             	add    esp,0x10
c00071b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071b8:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071bb:	0f b6 c0             	movzx  eax,al
c00071be:	83 ec 08             	sub    esp,0x8
c00071c1:	50                   	push   eax
c00071c2:	68 45 32 02 c0       	push   0xc0023245
c00071c7:	e8 98 fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00071cc:	83 c4 10             	add    esp,0x10
c00071cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071d3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071d6:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071e1:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071e4:	0f b6 c0             	movzx  eax,al
c00071e7:	8b 04 85 a0 68 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9760]
c00071ee:	51                   	push   ecx
c00071ef:	52                   	push   edx
c00071f0:	50                   	push   eax
c00071f1:	68 98 33 02 c0       	push   0xc0023398
c00071f6:	e8 69 fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00071fb:	83 c4 10             	add    esp,0x10
c00071fe:	66 90                	xchg   ax,ax
c0007200:	83 ec 0c             	sub    esp,0xc
c0007203:	68 50 33 02 c0       	push   0xc0023350
c0007208:	e8 21 8e 00 00       	call   c001002e <KePanic(char const*)>
c000720d:	83 c4 10             	add    esp,0x10
c0007210:	90                   	nop
c0007211:	83 c4 0c             	add    esp,0xc
c0007214:	c3                   	ret    
c0007215:	8d 76 00             	lea    esi,[esi+0x0]

c0007218 <__ubsan_handle_pointer_overflow>:
c0007218:	83 ec 0c             	sub    esp,0xc
c000721b:	83 ec 08             	sub    esp,0x8
c000721e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007222:	68 e0 33 02 c0       	push   0xc00233e0
c0007227:	e8 a4 fe ff ff       	call   c00070d0 <KiUbsanPrintDetails(char const*, void*)>
c000722c:	83 c4 10             	add    esp,0x10
c000722f:	83 ec 0c             	sub    esp,0xc
c0007232:	68 e0 33 02 c0       	push   0xc00233e0
c0007237:	e8 f2 8d 00 00       	call   c001002e <KePanic(char const*)>
c000723c:	83 c4 10             	add    esp,0x10
c000723f:	90                   	nop
c0007240:	83 c4 0c             	add    esp,0xc
c0007243:	c3                   	ret    

c0007244 <__ubsan_handle_out_of_bounds>:
c0007244:	83 ec 0c             	sub    esp,0xc
c0007247:	83 ec 08             	sub    esp,0x8
c000724a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000724e:	68 50 32 02 c0       	push   0xc0023250
c0007253:	e8 78 fe ff ff       	call   c00070d0 <KiUbsanPrintDetails(char const*, void*)>
c0007258:	83 c4 10             	add    esp,0x10
c000725b:	83 ec 0c             	sub    esp,0xc
c000725e:	68 50 32 02 c0       	push   0xc0023250
c0007263:	e8 c6 8d 00 00       	call   c001002e <KePanic(char const*)>
c0007268:	83 c4 10             	add    esp,0x10
c000726b:	90                   	nop
c000726c:	83 c4 0c             	add    esp,0xc
c000726f:	c3                   	ret    

c0007270 <__ubsan_handle_add_overflow>:
c0007270:	83 ec 0c             	sub    esp,0xc
c0007273:	83 ec 08             	sub    esp,0x8
c0007276:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000727a:	68 6d 32 02 c0       	push   0xc002326d
c000727f:	e8 4c fe ff ff       	call   c00070d0 <KiUbsanPrintDetails(char const*, void*)>
c0007284:	83 c4 10             	add    esp,0x10
c0007287:	83 ec 0c             	sub    esp,0xc
c000728a:	68 6d 32 02 c0       	push   0xc002326d
c000728f:	e8 9a 8d 00 00       	call   c001002e <KePanic(char const*)>
c0007294:	83 c4 10             	add    esp,0x10
c0007297:	90                   	nop
c0007298:	83 c4 0c             	add    esp,0xc
c000729b:	c3                   	ret    

c000729c <__ubsan_handle_load_invalid_value>:
c000729c:	83 ec 0c             	sub    esp,0xc
c000729f:	83 ec 08             	sub    esp,0x8
c00072a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072a6:	68 00 34 02 c0       	push   0xc0023400
c00072ab:	e8 20 fe ff ff       	call   c00070d0 <KiUbsanPrintDetails(char const*, void*)>
c00072b0:	83 c4 10             	add    esp,0x10
c00072b3:	83 ec 0c             	sub    esp,0xc
c00072b6:	68 00 34 02 c0       	push   0xc0023400
c00072bb:	e8 6e 8d 00 00       	call   c001002e <KePanic(char const*)>
c00072c0:	83 c4 10             	add    esp,0x10
c00072c3:	90                   	nop
c00072c4:	83 c4 0c             	add    esp,0xc
c00072c7:	c3                   	ret    

c00072c8 <__ubsan_handle_divrem_overflow>:
c00072c8:	83 ec 0c             	sub    esp,0xc
c00072cb:	83 ec 08             	sub    esp,0x8
c00072ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072d2:	68 24 34 02 c0       	push   0xc0023424
c00072d7:	e8 f4 fd ff ff       	call   c00070d0 <KiUbsanPrintDetails(char const*, void*)>
c00072dc:	83 c4 10             	add    esp,0x10
c00072df:	83 ec 0c             	sub    esp,0xc
c00072e2:	68 24 34 02 c0       	push   0xc0023424
c00072e7:	e8 42 8d 00 00       	call   c001002e <KePanic(char const*)>
c00072ec:	83 c4 10             	add    esp,0x10
c00072ef:	90                   	nop
c00072f0:	83 c4 0c             	add    esp,0xc
c00072f3:	c3                   	ret    

c00072f4 <__ubsan_handle_mul_overflow>:
c00072f4:	83 ec 0c             	sub    esp,0xc
c00072f7:	83 ec 08             	sub    esp,0x8
c00072fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072fe:	68 89 32 02 c0       	push   0xc0023289
c0007303:	e8 c8 fd ff ff       	call   c00070d0 <KiUbsanPrintDetails(char const*, void*)>
c0007308:	83 c4 10             	add    esp,0x10
c000730b:	83 ec 0c             	sub    esp,0xc
c000730e:	68 89 32 02 c0       	push   0xc0023289
c0007313:	e8 16 8d 00 00       	call   c001002e <KePanic(char const*)>
c0007318:	83 c4 10             	add    esp,0x10
c000731b:	90                   	nop
c000731c:	83 c4 0c             	add    esp,0xc
c000731f:	c3                   	ret    

c0007320 <__ubsan_handle_sub_overflow>:
c0007320:	83 ec 0c             	sub    esp,0xc
c0007323:	83 ec 08             	sub    esp,0x8
c0007326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000732a:	68 a5 32 02 c0       	push   0xc00232a5
c000732f:	e8 9c fd ff ff       	call   c00070d0 <KiUbsanPrintDetails(char const*, void*)>
c0007334:	83 c4 10             	add    esp,0x10
c0007337:	83 ec 0c             	sub    esp,0xc
c000733a:	68 a5 32 02 c0       	push   0xc00232a5
c000733f:	e8 ea 8c 00 00       	call   c001002e <KePanic(char const*)>
c0007344:	83 c4 10             	add    esp,0x10
c0007347:	90                   	nop
c0007348:	83 c4 0c             	add    esp,0xc
c000734b:	c3                   	ret    

c000734c <__ubsan_handle_shift_out_of_bounds>:
c000734c:	83 ec 0c             	sub    esp,0xc
c000734f:	83 ec 08             	sub    esp,0x8
c0007352:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007356:	68 44 34 02 c0       	push   0xc0023444
c000735b:	e8 70 fd ff ff       	call   c00070d0 <KiUbsanPrintDetails(char const*, void*)>
c0007360:	83 c4 10             	add    esp,0x10
c0007363:	83 ec 0c             	sub    esp,0xc
c0007366:	68 44 34 02 c0       	push   0xc0023444
c000736b:	e8 be 8c 00 00       	call   c001002e <KePanic(char const*)>
c0007370:	83 c4 10             	add    esp,0x10
c0007373:	90                   	nop
c0007374:	83 c4 0c             	add    esp,0xc
c0007377:	c3                   	ret    

c0007378 <__ubsan_handle_negate_overflow>:
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	83 ec 08             	sub    esp,0x8
c000737e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007382:	68 68 34 02 c0       	push   0xc0023468
c0007387:	e8 44 fd ff ff       	call   c00070d0 <KiUbsanPrintDetails(char const*, void*)>
c000738c:	83 c4 10             	add    esp,0x10
c000738f:	83 ec 0c             	sub    esp,0xc
c0007392:	68 68 34 02 c0       	push   0xc0023468
c0007397:	e8 92 8c 00 00       	call   c001002e <KePanic(char const*)>
c000739c:	83 c4 10             	add    esp,0x10
c000739f:	90                   	nop
c00073a0:	83 c4 0c             	add    esp,0xc
c00073a3:	c3                   	ret    

c00073a4 <KiIsHashInTable(unsigned short)>:
c00073a4:	0f b7 d0             	movzx  edx,ax
c00073a7:	83 e0 07             	and    eax,0x7
c00073aa:	c1 fa 03             	sar    edx,0x3
c00073ad:	88 c1                	mov    cl,al
c00073af:	0f b6 92 00 a3 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd5d00]
c00073b6:	d3 fa                	sar    edx,cl
c00073b8:	89 d0                	mov    eax,edx
c00073ba:	83 e0 01             	and    eax,0x1
c00073bd:	c3                   	ret    

c00073be <KiSetHashInTable(unsigned short, bool)>:
c00073be:	56                   	push   esi
c00073bf:	53                   	push   ebx
c00073c0:	0f b7 d8             	movzx  ebx,ax
c00073c3:	83 e0 07             	and    eax,0x7
c00073c6:	c1 fb 03             	sar    ebx,0x3
c00073c9:	89 c1                	mov    ecx,eax
c00073cb:	0f b6 b3 00 a3 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd5d00]
c00073d2:	b8 01 00 00 00       	mov    eax,0x1
c00073d7:	d3 e0                	shl    eax,cl
c00073d9:	84 d2                	test   dl,dl
c00073db:	74 04                	je     c00073e1 <KiSetHashInTable(unsigned short, bool)+0x23>
c00073dd:	09 f0                	or     eax,esi
c00073df:	eb 04                	jmp    c00073e5 <KiSetHashInTable(unsigned short, bool)+0x27>
c00073e1:	f7 d0                	not    eax
c00073e3:	21 f0                	and    eax,esi
c00073e5:	88 83 00 a3 02 c0    	mov    BYTE PTR [ebx-0x3ffd5d00],al
c00073eb:	5b                   	pop    ebx
c00073ec:	5e                   	pop    esi
c00073ed:	c3                   	ret    

c00073ee <KiFlushSymlinkChanges()>:
c00073ee:	57                   	push   edi
c00073ef:	56                   	push   esi
c00073f0:	53                   	push   ebx
c00073f1:	83 ec 1c             	sub    esp,0x1c
c00073f4:	68 14 01 00 00       	push   0x114
c00073f9:	e8 e9 88 00 00       	call   c000fce7 <malloc>
c00073fe:	83 c4 0c             	add    esp,0xc
c0007401:	89 c3                	mov    ebx,eax
c0007403:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c0007409:	68 87 34 02 c0       	push   0xc0023487
c000740e:	50                   	push   eax
c000740f:	e8 52 0d 00 00       	call   c0008166 <File::File(char const*, Process*)>
c0007414:	83 c4 10             	add    esp,0x10
c0007417:	85 db                	test   ebx,ebx
c0007419:	75 10                	jne    c000742b <KiFlushSymlinkChanges()+0x3d>
c000741b:	83 ec 0c             	sub    esp,0xc
c000741e:	68 a5 34 02 c0       	push   0xc00234a5
c0007423:	e8 06 8c 00 00       	call   c001002e <KePanic(char const*)>
c0007428:	83 c4 10             	add    esp,0x10
c000742b:	50                   	push   eax
c000742c:	50                   	push   eax
c000742d:	6a 06                	push   0x6
c000742f:	53                   	push   ebx
c0007430:	e8 4f 0d 00 00       	call   c0008184 <File::open(FileOpenMode)>
c0007435:	83 c4 10             	add    esp,0x10
c0007438:	85 c0                	test   eax,eax
c000743a:	74 10                	je     c000744c <KiFlushSymlinkChanges()+0x5e>
c000743c:	83 ec 0c             	sub    esp,0xc
c000743f:	68 bf 34 02 c0       	push   0xc00234bf
c0007444:	e8 e5 8b 00 00       	call   c001002e <KePanic(char const*)>
c0007449:	83 c4 10             	add    esp,0x10
c000744c:	31 f6                	xor    esi,esi
c000744e:	39 35 c0 9e 02 c0    	cmp    DWORD PTR ds:0xc0029ec0,esi
c0007454:	7e 70                	jle    c00074c6 <KiFlushSymlinkChanges()+0xd8>
c0007456:	83 ec 0c             	sub    esp,0xc
c0007459:	8b 13                	mov    edx,DWORD PTR [ebx]
c000745b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000745f:	89 f0                	mov    eax,esi
c0007461:	57                   	push   edi
c0007462:	c1 e0 08             	shl    eax,0x8
c0007465:	05 00 9f 02 c0       	add    eax,0xc0029f00
c000746a:	50                   	push   eax
c000746b:	6a 00                	push   0x0
c000746d:	68 00 01 00 00       	push   0x100
c0007472:	53                   	push   ebx
c0007473:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0007476:	83 c4 20             	add    esp,0x20
c0007479:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0007481:	74 10                	je     c0007493 <KiFlushSymlinkChanges()+0xa5>
c0007483:	83 ec 0c             	sub    esp,0xc
c0007486:	68 d9 34 02 c0       	push   0xc00234d9
c000748b:	e8 9e 8b 00 00       	call   c001002e <KePanic(char const*)>
c0007490:	83 c4 10             	add    esp,0x10
c0007493:	83 ec 0c             	sub    esp,0xc
c0007496:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007498:	8d 14 f5 e0 9e 02 c0 	lea    edx,[esi*8-0x3ffd6120]
c000749f:	57                   	push   edi
c00074a0:	52                   	push   edx
c00074a1:	6a 00                	push   0x0
c00074a3:	6a 08                	push   0x8
c00074a5:	53                   	push   ebx
c00074a6:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00074a9:	83 c4 20             	add    esp,0x20
c00074ac:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00074b1:	74 10                	je     c00074c3 <KiFlushSymlinkChanges()+0xd5>
c00074b3:	83 ec 0c             	sub    esp,0xc
c00074b6:	68 f3 34 02 c0       	push   0xc00234f3
c00074bb:	e8 6e 8b 00 00       	call   c001002e <KePanic(char const*)>
c00074c0:	83 c4 10             	add    esp,0x10
c00074c3:	46                   	inc    esi
c00074c4:	eb 88                	jmp    c000744e <KiFlushSymlinkChanges()+0x60>
c00074c6:	83 ec 0c             	sub    esp,0xc
c00074c9:	53                   	push   ebx
c00074ca:	e8 13 0d 00 00       	call   c00081e2 <File::close()>
c00074cf:	83 c4 10             	add    esp,0x10
c00074d2:	85 db                	test   ebx,ebx
c00074d4:	74 0c                	je     c00074e2 <KiFlushSymlinkChanges()+0xf4>
c00074d6:	83 ec 0c             	sub    esp,0xc
c00074d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074db:	53                   	push   ebx
c00074dc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00074df:	83 c4 10             	add    esp,0x10
c00074e2:	c7 05 c0 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ec0,0x0
c00074ec:	83 c4 10             	add    esp,0x10
c00074ef:	5b                   	pop    ebx
c00074f0:	5e                   	pop    esi
c00074f1:	5f                   	pop    edi
c00074f2:	c3                   	ret    

c00074f3 <KiDeinitialiseSymlinks(void*)>:
c00074f3:	e9 f6 fe ff ff       	jmp    c00073ee <KiFlushSymlinkChanges()>

c00074f8 <KiGetSymlinkHash(char const*)>:
c00074f8:	53                   	push   ebx
c00074f9:	89 c3                	mov    ebx,eax
c00074fb:	83 ec 14             	sub    esp,0x14
c00074fe:	50                   	push   eax
c00074ff:	e8 6c 90 ff ff       	call   c0000570 <strlen>
c0007504:	5a                   	pop    edx
c0007505:	59                   	pop    ecx
c0007506:	50                   	push   eax
c0007507:	53                   	push   ebx
c0007508:	e8 e0 6e 00 00       	call   c000e3ed <KeCalculateCRC32(unsigned char*, int)>
c000750d:	83 c4 18             	add    esp,0x18
c0007510:	89 c2                	mov    edx,eax
c0007512:	5b                   	pop    ebx
c0007513:	c1 ea 10             	shr    edx,0x10
c0007516:	31 d0                	xor    eax,edx
c0007518:	c3                   	ret    

c0007519 <KiCreateSymlinkID()>:
c0007519:	55                   	push   ebp
c000751a:	57                   	push   edi
c000751b:	56                   	push   esi
c000751c:	53                   	push   ebx
c000751d:	31 db                	xor    ebx,ebx
c000751f:	83 ec 1c             	sub    esp,0x1c
c0007522:	e8 fc 94 00 00       	call   c0010a23 <KeRand()>
c0007527:	43                   	inc    ebx
c0007528:	8b 2d 00 c3 02 c0    	mov    ebp,DWORD PTR ds:0xc002c300
c000752e:	31 d2                	xor    edx,edx
c0007530:	8d 4d 01             	lea    ecx,[ebp+0x1]
c0007533:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0007537:	89 0d 00 c3 02 c0    	mov    DWORD PTR ds:0xc002c300,ecx
c000753d:	c1 e0 1f             	shl    eax,0x1f
c0007540:	89 d7                	mov    edi,edx
c0007542:	89 c6                	mov    esi,eax
c0007544:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0007548:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007550:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007556:	75 10                	jne    c0007568 <KiCreateSymlinkID()+0x4f>
c0007558:	83 ec 0c             	sub    esp,0xc
c000755b:	68 0d 35 02 c0       	push   0xc002350d
c0007560:	e8 c9 8a 00 00       	call   c001002e <KePanic(char const*)>
c0007565:	83 c4 10             	add    esp,0x10
c0007568:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000756c:	75 04                	jne    c0007572 <KiCreateSymlinkID()+0x59>
c000756e:	39 f5                	cmp    ebp,esi
c0007570:	74 b0                	je     c0007522 <KiCreateSymlinkID()+0x9>
c0007572:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007576:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000757a:	31 f0                	xor    eax,esi
c000757c:	83 c4 1c             	add    esp,0x1c
c000757f:	31 fa                	xor    edx,edi
c0007581:	5b                   	pop    ebx
c0007582:	5e                   	pop    esi
c0007583:	5f                   	pop    edi
c0007584:	5d                   	pop    ebp
c0007585:	c3                   	ret    

c0007586 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007586:	53                   	push   ebx
c0007587:	83 ec 0c             	sub    esp,0xc
c000758a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000758e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0007592:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007596:	a1 c0 9e 02 c0       	mov    eax,ds:0xc0029ec0
c000759b:	68 00 01 00 00       	push   0x100
c00075a0:	89 0c c5 e4 9e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd611c],ecx
c00075a7:	6a 00                	push   0x0
c00075a9:	89 14 c5 e0 9e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6120],edx
c00075b0:	c1 e0 08             	shl    eax,0x8
c00075b3:	05 00 9f 02 c0       	add    eax,0xc0029f00
c00075b8:	50                   	push   eax
c00075b9:	e8 32 8f ff ff       	call   c00004f0 <memset>
c00075be:	58                   	pop    eax
c00075bf:	a1 c0 9e 02 c0       	mov    eax,ds:0xc0029ec0
c00075c4:	5a                   	pop    edx
c00075c5:	c1 e0 08             	shl    eax,0x8
c00075c8:	53                   	push   ebx
c00075c9:	05 00 9f 02 c0       	add    eax,0xc0029f00
c00075ce:	50                   	push   eax
c00075cf:	e8 6c 90 ff ff       	call   c0000640 <strcpy>
c00075d4:	89 d8                	mov    eax,ebx
c00075d6:	e8 1d ff ff ff       	call   c00074f8 <KiGetSymlinkHash(char const*)>
c00075db:	ba 01 00 00 00       	mov    edx,0x1
c00075e0:	0f b7 c0             	movzx  eax,ax
c00075e3:	e8 d6 fd ff ff       	call   c00073be <KiSetHashInTable(unsigned short, bool)>
c00075e8:	a1 c0 9e 02 c0       	mov    eax,ds:0xc0029ec0
c00075ed:	83 c4 10             	add    esp,0x10
c00075f0:	40                   	inc    eax
c00075f1:	a3 c0 9e 02 c0       	mov    ds:0xc0029ec0,eax
c00075f6:	83 f8 03             	cmp    eax,0x3
c00075f9:	7e 09                	jle    c0007604 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c00075fb:	83 c4 08             	add    esp,0x8
c00075fe:	5b                   	pop    ebx
c00075ff:	e9 ea fd ff ff       	jmp    c00073ee <KiFlushSymlinkChanges()>
c0007604:	83 c4 08             	add    esp,0x8
c0007607:	5b                   	pop    ebx
c0007608:	c3                   	ret    

c0007609 <KeInitialiseSymlinks()>:
c0007609:	57                   	push   edi
c000760a:	56                   	push   esi
c000760b:	53                   	push   ebx
c000760c:	81 ec 14 01 00 00    	sub    esp,0x114
c0007612:	c7 05 00 c3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c300,0x0
c000761c:	68 00 20 00 00       	push   0x2000
c0007621:	c7 05 c0 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ec0,0x0
c000762b:	6a 00                	push   0x0
c000762d:	68 00 a3 02 c0       	push   0xc002a300
c0007632:	e8 b9 8e ff ff       	call   c00004f0 <memset>
c0007637:	59                   	pop    ecx
c0007638:	5b                   	pop    ebx
c0007639:	6a 00                	push   0x0
c000763b:	68 f3 74 00 c0       	push   0xc00074f3
c0007640:	e8 90 5b 00 00       	call   c000d1d5 <KeRegisterAtexit(void (*)(void*), void*)>
c0007645:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000764c:	e8 96 86 00 00       	call   c000fce7 <malloc>
c0007651:	83 c4 0c             	add    esp,0xc
c0007654:	89 c3                	mov    ebx,eax
c0007656:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c000765c:	68 87 34 02 c0       	push   0xc0023487
c0007661:	50                   	push   eax
c0007662:	e8 ff 0a 00 00       	call   c0008166 <File::File(char const*, Process*)>
c0007667:	83 c4 10             	add    esp,0x10
c000766a:	85 db                	test   ebx,ebx
c000766c:	75 10                	jne    c000767e <KeInitialiseSymlinks()+0x75>
c000766e:	83 ec 0c             	sub    esp,0xc
c0007671:	68 16 35 02 c0       	push   0xc0023516
c0007676:	e8 b3 89 00 00       	call   c001002e <KePanic(char const*)>
c000767b:	83 c4 10             	add    esp,0x10
c000767e:	83 ec 0c             	sub    esp,0xc
c0007681:	53                   	push   ebx
c0007682:	e8 c1 0d 00 00       	call   c0008448 <File::exists()>
c0007687:	83 c4 10             	add    esp,0x10
c000768a:	84 c0                	test   al,al
c000768c:	75 3a                	jne    c00076c8 <KeInitialiseSymlinks()+0xbf>
c000768e:	52                   	push   edx
c000768f:	52                   	push   edx
c0007690:	6a 12                	push   0x12
c0007692:	53                   	push   ebx
c0007693:	e8 ec 0a 00 00       	call   c0008184 <File::open(FileOpenMode)>
c0007698:	83 c4 10             	add    esp,0x10
c000769b:	85 c0                	test   eax,eax
c000769d:	74 10                	je     c00076af <KeInitialiseSymlinks()+0xa6>
c000769f:	83 ec 0c             	sub    esp,0xc
c00076a2:	68 33 35 02 c0       	push   0xc0023533
c00076a7:	e8 82 89 00 00       	call   c001002e <KePanic(char const*)>
c00076ac:	83 c4 10             	add    esp,0x10
c00076af:	83 ec 0c             	sub    esp,0xc
c00076b2:	53                   	push   ebx
c00076b3:	e8 2a 0b 00 00       	call   c00081e2 <File::close()>
c00076b8:	83 c4 10             	add    esp,0x10
c00076bb:	85 db                	test   ebx,ebx
c00076bd:	0f 84 9e 00 00 00    	je     c0007761 <KeInitialiseSymlinks()+0x158>
c00076c3:	e9 8d 00 00 00       	jmp    c0007755 <KeInitialiseSymlinks()+0x14c>
c00076c8:	50                   	push   eax
c00076c9:	50                   	push   eax
c00076ca:	6a 01                	push   0x1
c00076cc:	53                   	push   ebx
c00076cd:	e8 b2 0a 00 00       	call   c0008184 <File::open(FileOpenMode)>
c00076d2:	83 c4 10             	add    esp,0x10
c00076d5:	85 c0                	test   eax,eax
c00076d7:	74 10                	je     c00076e9 <KeInitialiseSymlinks()+0xe0>
c00076d9:	83 ec 0c             	sub    esp,0xc
c00076dc:	68 50 35 02 c0       	push   0xc0023550
c00076e1:	e8 48 89 00 00       	call   c001002e <KePanic(char const*)>
c00076e6:	83 c4 10             	add    esp,0x10
c00076e9:	83 ec 0c             	sub    esp,0xc
c00076ec:	ff 05 00 c3 02 c0    	inc    DWORD PTR ds:0xc002c300
c00076f2:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00076f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076f8:	57                   	push   edi
c00076f9:	8d 74 24 20          	lea    esi,[esp+0x20]
c00076fd:	56                   	push   esi
c00076fe:	6a 00                	push   0x0
c0007700:	68 00 01 00 00       	push   0x100
c0007705:	53                   	push   ebx
c0007706:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007709:	83 c4 20             	add    esp,0x20
c000770c:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007714:	75 33                	jne    c0007749 <KeInitialiseSymlinks()+0x140>
c0007716:	83 ec 0c             	sub    esp,0xc
c0007719:	8b 03                	mov    eax,DWORD PTR [ebx]
c000771b:	57                   	push   edi
c000771c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007720:	52                   	push   edx
c0007721:	6a 00                	push   0x0
c0007723:	6a 08                	push   0x8
c0007725:	53                   	push   ebx
c0007726:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007729:	83 c4 20             	add    esp,0x20
c000772c:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007731:	75 16                	jne    c0007749 <KeInitialiseSymlinks()+0x140>
c0007733:	89 f0                	mov    eax,esi
c0007735:	e8 be fd ff ff       	call   c00074f8 <KiGetSymlinkHash(char const*)>
c000773a:	ba 01 00 00 00       	mov    edx,0x1
c000773f:	0f b7 c0             	movzx  eax,ax
c0007742:	e8 77 fc ff ff       	call   c00073be <KiSetHashInTable(unsigned short, bool)>
c0007747:	eb a0                	jmp    c00076e9 <KeInitialiseSymlinks()+0xe0>
c0007749:	83 ec 0c             	sub    esp,0xc
c000774c:	53                   	push   ebx
c000774d:	e8 90 0a 00 00       	call   c00081e2 <File::close()>
c0007752:	83 c4 10             	add    esp,0x10
c0007755:	83 ec 0c             	sub    esp,0xc
c0007758:	8b 03                	mov    eax,DWORD PTR [ebx]
c000775a:	53                   	push   ebx
c000775b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000775e:	83 c4 10             	add    esp,0x10
c0007761:	81 c4 10 01 00 00    	add    esp,0x110
c0007767:	5b                   	pop    ebx
c0007768:	5e                   	pop    esi
c0007769:	5f                   	pop    edi
c000776a:	c3                   	ret    

c000776b <KiIsSymlinkRegistered(char const*)>:
c000776b:	55                   	push   ebp
c000776c:	57                   	push   edi
c000776d:	56                   	push   esi
c000776e:	53                   	push   ebx
c000776f:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007775:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000777c:	89 f0                	mov    eax,esi
c000777e:	e8 75 fd ff ff       	call   c00074f8 <KiGetSymlinkHash(char const*)>
c0007783:	0f b7 c0             	movzx  eax,ax
c0007786:	e8 19 fc ff ff       	call   c00073a4 <KiIsHashInTable(unsigned short)>
c000778b:	31 d2                	xor    edx,edx
c000778d:	88 c1                	mov    cl,al
c000778f:	31 c0                	xor    eax,eax
c0007791:	84 c9                	test   cl,cl
c0007793:	0f 84 31 01 00 00    	je     c00078ca <KiIsSymlinkRegistered(char const*)+0x15f>
c0007799:	31 db                	xor    ebx,ebx
c000779b:	39 1d c0 9e 02 c0    	cmp    DWORD PTR ds:0xc0029ec0,ebx
c00077a1:	7e 30                	jle    c00077d3 <KiIsSymlinkRegistered(char const*)+0x68>
c00077a3:	89 d8                	mov    eax,ebx
c00077a5:	51                   	push   ecx
c00077a6:	c1 e0 08             	shl    eax,0x8
c00077a9:	51                   	push   ecx
c00077aa:	05 00 9f 02 c0       	add    eax,0xc0029f00
c00077af:	50                   	push   eax
c00077b0:	56                   	push   esi
c00077b1:	e8 9a 8f ff ff       	call   c0000750 <strcmp>
c00077b6:	83 c4 10             	add    esp,0x10
c00077b9:	85 c0                	test   eax,eax
c00077bb:	75 13                	jne    c00077d0 <KiIsSymlinkRegistered(char const*)+0x65>
c00077bd:	8b 04 dd e0 9e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd6120]
c00077c4:	8b 14 dd e4 9e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd611c]
c00077cb:	e9 fa 00 00 00       	jmp    c00078ca <KiIsSymlinkRegistered(char const*)+0x15f>
c00077d0:	43                   	inc    ebx
c00077d1:	eb c8                	jmp    c000779b <KiIsSymlinkRegistered(char const*)+0x30>
c00077d3:	83 ec 0c             	sub    esp,0xc
c00077d6:	68 14 01 00 00       	push   0x114
c00077db:	e8 07 85 00 00       	call   c000fce7 <malloc>
c00077e0:	83 c4 0c             	add    esp,0xc
c00077e3:	89 c3                	mov    ebx,eax
c00077e5:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c00077eb:	68 87 34 02 c0       	push   0xc0023487
c00077f0:	50                   	push   eax
c00077f1:	e8 70 09 00 00       	call   c0008166 <File::File(char const*, Process*)>
c00077f6:	83 c4 10             	add    esp,0x10
c00077f9:	85 db                	test   ebx,ebx
c00077fb:	75 12                	jne    c000780f <KiIsSymlinkRegistered(char const*)+0xa4>
c00077fd:	83 ec 0c             	sub    esp,0xc
c0007800:	68 6b 35 02 c0       	push   0xc002356b
c0007805:	e8 24 88 00 00       	call   c001002e <KePanic(char const*)>
c000780a:	83 c4 10             	add    esp,0x10
c000780d:	eb 10                	jmp    c000781f <KiIsSymlinkRegistered(char const*)+0xb4>
c000780f:	83 ec 0c             	sub    esp,0xc
c0007812:	53                   	push   ebx
c0007813:	e8 30 0c 00 00       	call   c0008448 <File::exists()>
c0007818:	83 c4 10             	add    esp,0x10
c000781b:	84 c0                	test   al,al
c000781d:	74 de                	je     c00077fd <KiIsSymlinkRegistered(char const*)+0x92>
c000781f:	52                   	push   edx
c0007820:	52                   	push   edx
c0007821:	6a 01                	push   0x1
c0007823:	53                   	push   ebx
c0007824:	e8 5b 09 00 00       	call   c0008184 <File::open(FileOpenMode)>
c0007829:	83 c4 10             	add    esp,0x10
c000782c:	85 c0                	test   eax,eax
c000782e:	74 10                	je     c0007840 <KiIsSymlinkRegistered(char const*)+0xd5>
c0007830:	83 ec 0c             	sub    esp,0xc
c0007833:	68 86 35 02 c0       	push   0xc0023586
c0007838:	e8 f1 87 00 00       	call   c001002e <KePanic(char const*)>
c000783d:	83 c4 10             	add    esp,0x10
c0007840:	83 ec 0c             	sub    esp,0xc
c0007843:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007845:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0007849:	55                   	push   ebp
c000784a:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000784e:	57                   	push   edi
c000784f:	6a 00                	push   0x0
c0007851:	68 00 01 00 00       	push   0x100
c0007856:	53                   	push   ebx
c0007857:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000785a:	83 c4 20             	add    esp,0x20
c000785d:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007865:	75 4b                	jne    c00078b2 <KiIsSymlinkRegistered(char const*)+0x147>
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000786c:	55                   	push   ebp
c000786d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007871:	52                   	push   edx
c0007872:	6a 00                	push   0x0
c0007874:	6a 08                	push   0x8
c0007876:	53                   	push   ebx
c0007877:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000787a:	83 c4 20             	add    esp,0x20
c000787d:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007882:	75 2e                	jne    c00078b2 <KiIsSymlinkRegistered(char const*)+0x147>
c0007884:	50                   	push   eax
c0007885:	50                   	push   eax
c0007886:	57                   	push   edi
c0007887:	56                   	push   esi
c0007888:	e8 c3 8e ff ff       	call   c0000750 <strcmp>
c000788d:	83 c4 10             	add    esp,0x10
c0007890:	85 c0                	test   eax,eax
c0007892:	75 ac                	jne    c0007840 <KiIsSymlinkRegistered(char const*)+0xd5>
c0007894:	83 ec 0c             	sub    esp,0xc
c0007897:	53                   	push   ebx
c0007898:	e8 45 09 00 00       	call   c00081e2 <File::close()>
c000789d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000789f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00078a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078a9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078ad:	83 c4 10             	add    esp,0x10
c00078b0:	eb 18                	jmp    c00078ca <KiIsSymlinkRegistered(char const*)+0x15f>
c00078b2:	83 ec 0c             	sub    esp,0xc
c00078b5:	53                   	push   ebx
c00078b6:	e8 27 09 00 00       	call   c00081e2 <File::close()>
c00078bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078c0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00078c3:	83 c4 10             	add    esp,0x10
c00078c6:	31 c0                	xor    eax,eax
c00078c8:	31 d2                	xor    edx,edx
c00078ca:	81 c4 1c 01 00 00    	add    esp,0x11c
c00078d0:	5b                   	pop    ebx
c00078d1:	5e                   	pop    esi
c00078d2:	5f                   	pop    edi
c00078d3:	5d                   	pop    ebp
c00078d4:	c3                   	ret    

c00078d5 <KeDereferenceSymlink(char const*, char*)>:
c00078d5:	55                   	push   ebp
c00078d6:	57                   	push   edi
c00078d7:	56                   	push   esi
c00078d8:	53                   	push   ebx
c00078d9:	83 ec 48             	sub    esp,0x48
c00078dc:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00078e0:	56                   	push   esi
c00078e1:	e8 85 fe ff ff       	call   c000776b <KiIsSymlinkRegistered(char const*)>
c00078e6:	83 c4 10             	add    esp,0x10
c00078e9:	89 c7                	mov    edi,eax
c00078eb:	89 d0                	mov    eax,edx
c00078ed:	09 f8                	or     eax,edi
c00078ef:	75 07                	jne    c00078f8 <KeDereferenceSymlink(char const*, char*)+0x23>
c00078f1:	31 c0                	xor    eax,eax
c00078f3:	e9 7c 01 00 00       	jmp    c0007a74 <KeDereferenceSymlink(char const*, char*)+0x19f>
c00078f8:	83 ec 0c             	sub    esp,0xc
c00078fb:	89 d5                	mov    ebp,edx
c00078fd:	68 14 01 00 00       	push   0x114
c0007902:	e8 e0 83 00 00       	call   c000fce7 <malloc>
c0007907:	83 c4 0c             	add    esp,0xc
c000790a:	89 c3                	mov    ebx,eax
c000790c:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c0007912:	56                   	push   esi
c0007913:	50                   	push   eax
c0007914:	e8 4d 08 00 00       	call   c0008166 <File::File(char const*, Process*)>
c0007919:	83 c4 10             	add    esp,0x10
c000791c:	85 db                	test   ebx,ebx
c000791e:	0f 84 32 01 00 00    	je     c0007a56 <KeDereferenceSymlink(char const*, char*)+0x181>
c0007924:	56                   	push   esi
c0007925:	56                   	push   esi
c0007926:	6a 01                	push   0x1
c0007928:	53                   	push   ebx
c0007929:	e8 56 08 00 00       	call   c0008184 <File::open(FileOpenMode)>
c000792e:	83 c4 10             	add    esp,0x10
c0007931:	85 c0                	test   eax,eax
c0007933:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007935:	74 09                	je     c0007940 <KeDereferenceSymlink(char const*, char*)+0x6b>
c0007937:	83 ec 0c             	sub    esp,0xc
c000793a:	53                   	push   ebx
c000793b:	e9 10 01 00 00       	jmp    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x17b>
c0007940:	83 ec 0c             	sub    esp,0xc
c0007943:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007947:	56                   	push   esi
c0007948:	8d 54 24 37          	lea    edx,[esp+0x37]
c000794c:	52                   	push   edx
c000794d:	6a 00                	push   0x0
c000794f:	6a 08                	push   0x8
c0007951:	53                   	push   ebx
c0007952:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007955:	83 c4 20             	add    esp,0x20
c0007958:	85 c0                	test   eax,eax
c000795a:	0f 85 e2 00 00 00    	jne    c0007a42 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007960:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007965:	0f 85 d7 00 00 00    	jne    c0007a42 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000796b:	83 ec 0c             	sub    esp,0xc
c000796e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007970:	56                   	push   esi
c0007971:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007975:	52                   	push   edx
c0007976:	6a 00                	push   0x0
c0007978:	6a 08                	push   0x8
c000797a:	53                   	push   ebx
c000797b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000797e:	83 c4 20             	add    esp,0x20
c0007981:	85 c0                	test   eax,eax
c0007983:	0f 85 b9 00 00 00    	jne    c0007a42 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007989:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000798e:	0f 85 ae 00 00 00    	jne    c0007a42 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007994:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0007998:	0f 85 53 ff ff ff    	jne    c00078f1 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000799e:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c00079a2:	0f 85 49 ff ff ff    	jne    c00078f1 <KeDereferenceSymlink(char const*, char*)+0x1c>
c00079a8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00079b0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00079b8:	51                   	push   ecx
c00079b9:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00079bd:	50                   	push   eax
c00079be:	8d 44 24 20          	lea    eax,[esp+0x20]
c00079c2:	50                   	push   eax
c00079c3:	53                   	push   ebx
c00079c4:	e8 bd 0a 00 00       	call   c0008486 <File::stat(unsigned long long*, bool*)>
c00079c9:	83 c4 10             	add    esp,0x10
c00079cc:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00079d1:	75 6f                	jne    c0007a42 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079d3:	31 c9                	xor    ecx,ecx
c00079d5:	bf 0f 00 00 00       	mov    edi,0xf
c00079da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00079de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079e2:	39 c7                	cmp    edi,eax
c00079e4:	89 cf                	mov    edi,ecx
c00079e6:	19 d7                	sbb    edi,edx
c00079e8:	73 58                	jae    c0007a42 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079ea:	83 c0 f0             	add    eax,0xfffffff0
c00079ed:	bf ff 00 00 00       	mov    edi,0xff
c00079f2:	83 d2 ff             	adc    edx,0xffffffff
c00079f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079f9:	39 c7                	cmp    edi,eax
c00079fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079ff:	19 d1                	sbb    ecx,edx
c0007a01:	72 53                	jb     c0007a56 <KeDereferenceSymlink(char const*, char*)+0x181>
c0007a03:	40                   	inc    eax
c0007a04:	52                   	push   edx
c0007a05:	50                   	push   eax
c0007a06:	6a 00                	push   0x0
c0007a08:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0007a0c:	e8 df 8a ff ff       	call   c00004f0 <memset>
c0007a11:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a13:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a16:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0007a1a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a1e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a22:	53                   	push   ebx
c0007a23:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007a26:	83 c4 20             	add    esp,0x20
c0007a29:	85 c0                	test   eax,eax
c0007a2b:	75 15                	jne    c0007a42 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a31:	89 c7                	mov    edi,eax
c0007a33:	c1 ff 1f             	sar    edi,0x1f
c0007a36:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0007a3a:	75 06                	jne    c0007a42 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a3c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0007a40:	74 19                	je     c0007a5b <KeDereferenceSymlink(char const*, char*)+0x186>
c0007a42:	83 ec 0c             	sub    esp,0xc
c0007a45:	53                   	push   ebx
c0007a46:	e8 97 07 00 00       	call   c00081e2 <File::close()>
c0007a4b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a4d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a50:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a53:	83 c4 10             	add    esp,0x10
c0007a56:	83 c8 ff             	or     eax,0xffffffff
c0007a59:	eb 19                	jmp    c0007a74 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a5b:	83 ec 0c             	sub    esp,0xc
c0007a5e:	53                   	push   ebx
c0007a5f:	e8 7e 07 00 00       	call   c00081e2 <File::close()>
c0007a64:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a66:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a69:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a6c:	83 c4 10             	add    esp,0x10
c0007a6f:	b8 01 00 00 00       	mov    eax,0x1
c0007a74:	83 c4 3c             	add    esp,0x3c
c0007a77:	5b                   	pop    ebx
c0007a78:	5e                   	pop    esi
c0007a79:	5f                   	pop    edi
c0007a7a:	5d                   	pop    ebp
c0007a7b:	c3                   	ret    

c0007a7c <KeCreateSymlink(char const*, char const*)>:
c0007a7c:	55                   	push   ebp
c0007a7d:	57                   	push   edi
c0007a7e:	56                   	push   esi
c0007a7f:	53                   	push   ebx
c0007a80:	83 ec 38             	sub    esp,0x38
c0007a83:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a87:	68 14 01 00 00       	push   0x114
c0007a8c:	e8 56 82 00 00       	call   c000fce7 <malloc>
c0007a91:	6a 00                	push   0x0
c0007a93:	89 c3                	mov    ebx,eax
c0007a95:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c0007a9b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a9f:	50                   	push   eax
c0007aa0:	e8 c3 05 00 00       	call   c0008068 <File::File(char const*, Process*, bool)>
c0007aa5:	83 c4 20             	add    esp,0x20
c0007aa8:	b8 01 00 00 00       	mov    eax,0x1
c0007aad:	85 db                	test   ebx,ebx
c0007aaf:	0f 84 fb 00 00 00    	je     c0007bb0 <KeCreateSymlink(char const*, char const*)+0x134>
c0007ab5:	52                   	push   edx
c0007ab6:	52                   	push   edx
c0007ab7:	6a 12                	push   0x12
c0007ab9:	53                   	push   ebx
c0007aba:	e8 c5 06 00 00       	call   c0008184 <File::open(FileOpenMode)>
c0007abf:	83 c4 10             	add    esp,0x10
c0007ac2:	85 c0                	test   eax,eax
c0007ac4:	74 0b                	je     c0007ad1 <KeCreateSymlink(char const*, char const*)+0x55>
c0007ac6:	83 ec 0c             	sub    esp,0xc
c0007ac9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007acb:	53                   	push   ebx
c0007acc:	e9 d4 00 00 00       	jmp    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x129>
c0007ad1:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007ad5:	be a1 35 02 c0       	mov    esi,0xc00235a1
c0007ada:	b9 09 00 00 00       	mov    ecx,0x9
c0007adf:	fc                   	cld    
c0007ae0:	83 ec 0c             	sub    esp,0xc
c0007ae3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007ae5:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007ae9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007aeb:	56                   	push   esi
c0007aec:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007af0:	52                   	push   edx
c0007af1:	6a 00                	push   0x0
c0007af3:	6a 08                	push   0x8
c0007af5:	53                   	push   ebx
c0007af6:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007af9:	83 c4 20             	add    esp,0x20
c0007afc:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b01:	0f 85 90 00 00 00    	jne    c0007b97 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b07:	85 c0                	test   eax,eax
c0007b09:	0f 85 88 00 00 00    	jne    c0007b97 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b0f:	e8 05 fa ff ff       	call   c0007519 <KiCreateSymlinkID()>
c0007b14:	83 ec 0c             	sub    esp,0xc
c0007b17:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007b1b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007b1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b21:	56                   	push   esi
c0007b22:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007b26:	52                   	push   edx
c0007b27:	6a 00                	push   0x0
c0007b29:	6a 08                	push   0x8
c0007b2b:	53                   	push   ebx
c0007b2c:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007b2f:	83 c4 20             	add    esp,0x20
c0007b32:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b37:	75 5e                	jne    c0007b97 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b39:	85 c0                	test   eax,eax
c0007b3b:	75 5a                	jne    c0007b97 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b3d:	83 ec 0c             	sub    esp,0xc
c0007b40:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b42:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007b45:	55                   	push   ebp
c0007b46:	e8 25 8a ff ff       	call   c0000570 <strlen>
c0007b4b:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b4e:	31 d2                	xor    edx,edx
c0007b50:	55                   	push   ebp
c0007b51:	52                   	push   edx
c0007b52:	50                   	push   eax
c0007b53:	53                   	push   ebx
c0007b54:	ff d7                	call   edi
c0007b56:	83 c4 14             	add    esp,0x14
c0007b59:	89 c6                	mov    esi,eax
c0007b5b:	55                   	push   ebp
c0007b5c:	e8 0f 8a ff ff       	call   c0000570 <strlen>
c0007b61:	83 c4 10             	add    esp,0x10
c0007b64:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b68:	75 2d                	jne    c0007b97 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b6a:	85 f6                	test   esi,esi
c0007b6c:	75 29                	jne    c0007b97 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b6e:	50                   	push   eax
c0007b6f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b73:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b77:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b7b:	e8 06 fa ff ff       	call   c0007586 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b83:	e8 5a 06 00 00       	call   c00081e2 <File::close()>
c0007b88:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b8d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b90:	83 c4 10             	add    esp,0x10
c0007b93:	31 c0                	xor    eax,eax
c0007b95:	eb 19                	jmp    c0007bb0 <KeCreateSymlink(char const*, char const*)+0x134>
c0007b97:	83 ec 0c             	sub    esp,0xc
c0007b9a:	53                   	push   ebx
c0007b9b:	e8 42 06 00 00       	call   c00081e2 <File::close()>
c0007ba0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ba2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007ba5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007ba8:	83 c4 10             	add    esp,0x10
c0007bab:	b8 01 00 00 00       	mov    eax,0x1
c0007bb0:	83 c4 2c             	add    esp,0x2c
c0007bb3:	5b                   	pop    ebx
c0007bb4:	5e                   	pop    esi
c0007bb5:	5f                   	pop    edi
c0007bb6:	5d                   	pop    ebp
c0007bb7:	c3                   	ret    

c0007bb8 <File::read(unsigned long long, void*, int*)>:
c0007bb8:	53                   	push   ebx
c0007bb9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007bbd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007bc1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bc8:	83 f8 19             	cmp    eax,0x19
c0007bcb:	77 35                	ja     c0007c02 <File::read(unsigned long long, void*, int*)+0x4a>
c0007bcd:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0007bd4:	85 c0                	test   eax,eax
c0007bd6:	74 2a                	je     c0007c02 <File::read(unsigned long long, void*, int*)+0x4a>
c0007bd8:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007bde:	85 c0                	test   eax,eax
c0007be0:	74 20                	je     c0007c02 <File::read(unsigned long long, void*, int*)+0x4a>
c0007be2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007be6:	74 21                	je     c0007c09 <File::read(unsigned long long, void*, int*)+0x51>
c0007be8:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bea:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bee:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007bf4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bf8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007bfc:	5b                   	pop    ebx
c0007bfd:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007c00:	ff e0                	jmp    eax
c0007c02:	b8 0b 00 00 00       	mov    eax,0xb
c0007c07:	eb 05                	jmp    c0007c0e <File::read(unsigned long long, void*, int*)+0x56>
c0007c09:	b8 05 00 00 00       	mov    eax,0x5
c0007c0e:	5b                   	pop    ebx
c0007c0f:	c3                   	ret    

c0007c10 <File::write(unsigned long long, void*, int*)>:
c0007c10:	53                   	push   ebx
c0007c11:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c15:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c19:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c20:	83 f8 19             	cmp    eax,0x19
c0007c23:	77 35                	ja     c0007c5a <File::write(unsigned long long, void*, int*)+0x4a>
c0007c25:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0007c2c:	85 c0                	test   eax,eax
c0007c2e:	74 2a                	je     c0007c5a <File::write(unsigned long long, void*, int*)+0x4a>
c0007c30:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c36:	85 c0                	test   eax,eax
c0007c38:	74 20                	je     c0007c5a <File::write(unsigned long long, void*, int*)+0x4a>
c0007c3a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c3e:	74 21                	je     c0007c61 <File::write(unsigned long long, void*, int*)+0x51>
c0007c40:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c42:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c46:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c50:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c54:	5b                   	pop    ebx
c0007c55:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c58:	ff e0                	jmp    eax
c0007c5a:	b8 0b 00 00 00       	mov    eax,0xb
c0007c5f:	eb 05                	jmp    c0007c66 <File::write(unsigned long long, void*, int*)+0x56>
c0007c61:	b8 05 00 00 00       	mov    eax,0x5
c0007c66:	5b                   	pop    ebx
c0007c67:	c3                   	ret    

c0007c68 <Directory::read(unsigned long long, void*, int*)>:
c0007c68:	53                   	push   ebx
c0007c69:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c6d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c71:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c78:	83 f8 19             	cmp    eax,0x19
c0007c7b:	77 35                	ja     c0007cb2 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c7d:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0007c84:	85 c0                	test   eax,eax
c0007c86:	74 2a                	je     c0007cb2 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c88:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c8e:	85 c0                	test   eax,eax
c0007c90:	74 20                	je     c0007cb2 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c92:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c96:	74 21                	je     c0007cb9 <Directory::read(unsigned long long, void*, int*)+0x51>
c0007c98:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c9a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c9e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007ca4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ca8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007cac:	5b                   	pop    ebx
c0007cad:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007cb0:	ff e0                	jmp    eax
c0007cb2:	b8 0b 00 00 00       	mov    eax,0xb
c0007cb7:	eb 05                	jmp    c0007cbe <Directory::read(unsigned long long, void*, int*)+0x56>
c0007cb9:	b8 05 00 00 00       	mov    eax,0x5
c0007cbe:	5b                   	pop    ebx
c0007cbf:	c3                   	ret    

c0007cc0 <Directory::write(unsigned long long, void*, int*)>:
c0007cc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cc4:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007ccb:	b8 0b 00 00 00       	mov    eax,0xb
c0007cd0:	83 fa 19             	cmp    edx,0x19
c0007cd3:	77 18                	ja     c0007ced <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007cd5:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c0007cdc:	85 d2                	test   edx,edx
c0007cde:	74 0d                	je     c0007ced <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007ce0:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007ce7:	19 c0                	sbb    eax,eax
c0007ce9:	83 e0 0a             	and    eax,0xa
c0007cec:	40                   	inc    eax
c0007ced:	c3                   	ret    

c0007cee <File::isAtty()>:
c0007cee:	31 c0                	xor    eax,eax
c0007cf0:	c3                   	ret    
c0007cf1:	90                   	nop

c0007cf2 <Directory::isAtty()>:
c0007cf2:	31 c0                	xor    eax,eax
c0007cf4:	c3                   	ret    
c0007cf5:	90                   	nop

c0007cf6 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007cf6:	b8 0a 00 00 00       	mov    eax,0xa
c0007cfb:	c3                   	ret    

c0007cfc <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007cfc:	b8 0a 00 00 00       	mov    eax,0xa
c0007d01:	c3                   	ret    

c0007d02 <Filesystem::allocateSwapfile(char const*, int)>:
c0007d02:	31 c0                	xor    eax,eax
c0007d04:	31 d2                	xor    edx,edx
c0007d06:	c3                   	ret    
c0007d07:	90                   	nop

c0007d08 <File::~File()>:
c0007d08:	83 ec 0c             	sub    esp,0xc
c0007d0b:	ba 78 36 02 c0       	mov    edx,0xc0023678
c0007d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d14:	89 10                	mov    DWORD PTR [eax],edx
c0007d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d1a:	83 ec 0c             	sub    esp,0xc
c0007d1d:	50                   	push   eax
c0007d1e:	e8 2f b5 00 00       	call   c0013252 <UnixFile::~UnixFile()>
c0007d23:	83 c4 10             	add    esp,0x10
c0007d26:	90                   	nop
c0007d27:	83 c4 0c             	add    esp,0xc
c0007d2a:	c3                   	ret    
c0007d2b:	90                   	nop

c0007d2c <File::~File()>:
c0007d2c:	83 ec 0c             	sub    esp,0xc
c0007d2f:	83 ec 0c             	sub    esp,0xc
c0007d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d36:	e8 cd ff ff ff       	call   c0007d08 <File::~File()>
c0007d3b:	83 c4 10             	add    esp,0x10
c0007d3e:	83 ec 08             	sub    esp,0x8
c0007d41:	68 14 01 00 00       	push   0x114
c0007d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d4a:	e8 0c 56 00 00       	call   c000d35b <operator delete(void*, unsigned long)>
c0007d4f:	83 c4 10             	add    esp,0x10
c0007d52:	83 c4 0c             	add    esp,0xc
c0007d55:	c3                   	ret    

c0007d56 <Directory::~Directory()>:
c0007d56:	83 ec 0c             	sub    esp,0xc
c0007d59:	ba 94 36 02 c0       	mov    edx,0xc0023694
c0007d5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d62:	89 10                	mov    DWORD PTR [eax],edx
c0007d64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d68:	83 ec 0c             	sub    esp,0xc
c0007d6b:	50                   	push   eax
c0007d6c:	e8 e1 b4 00 00       	call   c0013252 <UnixFile::~UnixFile()>
c0007d71:	83 c4 10             	add    esp,0x10
c0007d74:	90                   	nop
c0007d75:	83 c4 0c             	add    esp,0xc
c0007d78:	c3                   	ret    
c0007d79:	90                   	nop

c0007d7a <Directory::~Directory()>:
c0007d7a:	83 ec 0c             	sub    esp,0xc
c0007d7d:	83 ec 0c             	sub    esp,0xc
c0007d80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d84:	e8 cd ff ff ff       	call   c0007d56 <Directory::~Directory()>
c0007d89:	83 c4 10             	add    esp,0x10
c0007d8c:	83 ec 08             	sub    esp,0x8
c0007d8f:	68 14 01 00 00       	push   0x114
c0007d94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d98:	e8 be 55 00 00       	call   c000d35b <operator delete(void*, unsigned long)>
c0007d9d:	83 c4 10             	add    esp,0x10
c0007da0:	83 c4 0c             	add    esp,0xc
c0007da3:	c3                   	ret    

c0007da4 <Filesystem::Filesystem()>:
c0007da4:	ba 0c 36 02 c0       	mov    edx,0xc002360c
c0007da9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dad:	89 10                	mov    DWORD PTR [eax],edx
c0007daf:	8b 15 04 c3 02 c0    	mov    edx,DWORD PTR ds:0xc002c304
c0007db5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007db9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007dbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dc0:	a3 04 c3 02 c0       	mov    ds:0xc002c304,eax
c0007dc5:	90                   	nop
c0007dc6:	c3                   	ret    
c0007dc7:	90                   	nop

c0007dc8 <Filesystem::~Filesystem()>:
c0007dc8:	ba 0c 36 02 c0       	mov    edx,0xc002360c
c0007dcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dd1:	89 10                	mov    DWORD PTR [eax],edx
c0007dd3:	90                   	nop
c0007dd4:	c3                   	ret    
c0007dd5:	90                   	nop

c0007dd6 <Filesystem::~Filesystem()>:
c0007dd6:	83 ec 0c             	sub    esp,0xc
c0007dd9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007ddd:	e8 e6 ff ff ff       	call   c0007dc8 <Filesystem::~Filesystem()>
c0007de2:	83 c4 04             	add    esp,0x4
c0007de5:	83 ec 08             	sub    esp,0x8
c0007de8:	6a 08                	push   0x8
c0007dea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dee:	e8 68 55 00 00       	call   c000d35b <operator delete(void*, unsigned long)>
c0007df3:	83 c4 10             	add    esp,0x10
c0007df6:	83 c4 0c             	add    esp,0xc
c0007df9:	c3                   	ret    

c0007dfa <Fs::getcwd(Process*, char*, int)>:
c0007dfa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007dfe:	31 c0                	xor    eax,eax
c0007e00:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007e03:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007e07:	7d 15                	jge    c0007e1e <Fs::getcwd(Process*, char*, int)+0x24>
c0007e09:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007e0d:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007e14:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007e17:	84 c9                	test   cl,cl
c0007e19:	74 06                	je     c0007e21 <Fs::getcwd(Process*, char*, int)+0x27>
c0007e1b:	40                   	inc    eax
c0007e1c:	eb e2                	jmp    c0007e00 <Fs::getcwd(Process*, char*, int)+0x6>
c0007e1e:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007e21:	31 c0                	xor    eax,eax
c0007e23:	c3                   	ret    

c0007e24 <Fs::initVFS()>:
c0007e24:	83 ec 18             	sub    esp,0x18
c0007e27:	6a 08                	push   0x8
c0007e29:	e8 b9 7e 00 00       	call   c000fce7 <malloc>
c0007e2e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e31:	e8 42 45 01 00       	call   c001c378 <FAT::FAT()>
c0007e36:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007e3d:	e8 a5 7e 00 00       	call   c000fce7 <malloc>
c0007e42:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e45:	e8 5a 54 01 00       	call   c001d2a4 <ISO9660::ISO9660()>
c0007e4a:	83 c4 1c             	add    esp,0x1c
c0007e4d:	c3                   	ret    

c0007e4e <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e4e:	55                   	push   ebp
c0007e4f:	57                   	push   edi
c0007e50:	56                   	push   esi
c0007e51:	53                   	push   ebx
c0007e52:	81 ec 10 04 00 00    	sub    esp,0x410
c0007e58:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c0007e5f:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c0007e66:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c0007e6e:	68 00 04 00 00       	push   0x400
c0007e73:	6a 00                	push   0x0
c0007e75:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0007e79:	57                   	push   edi
c0007e7a:	e8 71 86 ff ff       	call   c00004f0 <memset>
c0007e7f:	83 c4 10             	add    esp,0x10
c0007e82:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c0007e86:	75 0b                	jne    c0007e93 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c0007e88:	50                   	push   eax
c0007e89:	50                   	push   eax
c0007e8a:	55                   	push   ebp
c0007e8b:	57                   	push   edi
c0007e8c:	e8 af 87 ff ff       	call   c0000640 <strcpy>
c0007e91:	eb 51                	jmp    c0007ee4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c0007e93:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007e97:	83 f8 5c             	cmp    eax,0x5c
c0007e9a:	74 05                	je     c0007ea1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c0007e9c:	83 f8 2f             	cmp    eax,0x2f
c0007e9f:	75 1e                	jne    c0007ebf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c0007ea1:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0007ea8:	8a 00                	mov    al,BYTE PTR [eax]
c0007eaa:	3c 60                	cmp    al,0x60
c0007eac:	7e 03                	jle    c0007eb1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c0007eae:	83 e8 20             	sub    eax,0x20
c0007eb1:	88 04 24             	mov    BYTE PTR [esp],al
c0007eb4:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007ebb:	50                   	push   eax
c0007ebc:	50                   	push   eax
c0007ebd:	eb 1e                	jmp    c0007edd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c0007ebf:	50                   	push   eax
c0007ec0:	50                   	push   eax
c0007ec1:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c0007ec8:	57                   	push   edi
c0007ec9:	e8 72 87 ff ff       	call   c0000640 <strcpy>
c0007ece:	58                   	pop    eax
c0007ecf:	5a                   	pop    edx
c0007ed0:	68 31 54 02 c0       	push   0xc0025431
c0007ed5:	57                   	push   edi
c0007ed6:	e8 65 89 ff ff       	call   c0000840 <strcat>
c0007edb:	59                   	pop    ecx
c0007edc:	58                   	pop    eax
c0007edd:	55                   	push   ebp
c0007ede:	57                   	push   edi
c0007edf:	e8 5c 89 ff ff       	call   c0000840 <strcat>
c0007ee4:	83 c4 10             	add    esp,0x10
c0007ee7:	8a 04 24             	mov    al,BYTE PTR [esp]
c0007eea:	3c 60                	cmp    al,0x60
c0007eec:	7e 03                	jle    c0007ef1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c0007eee:	83 e8 20             	sub    eax,0x20
c0007ef1:	88 04 24             	mov    BYTE PTR [esp],al
c0007ef4:	88 06                	mov    BYTE PTR [esi],al
c0007ef6:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007efd:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c0007f03:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c0007f07:	bf 03 00 00 00       	mov    edi,0x3
c0007f0c:	b8 03 00 00 00       	mov    eax,0x3
c0007f11:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c0007f15:	89 e9                	mov    ecx,ebp
c0007f17:	85 ed                	test   ebp,ebp
c0007f19:	0f 84 97 00 00 00    	je     c0007fb6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c0007f1f:	8d 57 01             	lea    edx,[edi+0x1]
c0007f22:	83 fd 5c             	cmp    ebp,0x5c
c0007f25:	74 05                	je     c0007f2c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c0007f27:	83 fd 2f             	cmp    ebp,0x2f
c0007f2a:	75 12                	jne    c0007f3e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f2c:	89 c5                	mov    ebp,eax
c0007f2e:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007f33:	74 09                	je     c0007f3e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f35:	40                   	inc    eax
c0007f36:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c0007f3a:	89 d7                	mov    edi,edx
c0007f3c:	eb d3                	jmp    c0007f11 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007f3e:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0007f43:	0f be e9             	movsx  ebp,cl
c0007f46:	75 5e                	jne    c0007fa6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f48:	83 fd 2e             	cmp    ebp,0x2e
c0007f4b:	75 59                	jne    c0007fa6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f4d:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c0007f51:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c0007f56:	74 18                	je     c0007f70 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c0007f58:	83 fd 2e             	cmp    ebp,0x2e
c0007f5b:	74 53                	je     c0007fb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f5d:	89 fa                	mov    edx,edi
c0007f5f:	42                   	inc    edx
c0007f60:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f64:	83 f9 2f             	cmp    ecx,0x2f
c0007f67:	74 f6                	je     c0007f5f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f69:	83 f9 5c             	cmp    ecx,0x5c
c0007f6c:	74 f1                	je     c0007f5f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f6e:	eb ca                	jmp    c0007f3a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f70:	83 fd 2e             	cmp    ebp,0x2e
c0007f73:	74 3b                	je     c0007fb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f75:	83 f8 03             	cmp    eax,0x3
c0007f78:	74 c0                	je     c0007f3a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f7a:	42                   	inc    edx
c0007f7b:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f7f:	83 f9 5c             	cmp    ecx,0x5c
c0007f82:	74 f6                	je     c0007f7a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007f84:	83 f9 2f             	cmp    ecx,0x2f
c0007f87:	74 f1                	je     c0007f7a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007f89:	48                   	dec    eax
c0007f8a:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007f8e:	75 06                	jne    c0007f96 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007f90:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f94:	eb f3                	jmp    c0007f89 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c0007f96:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007f9a:	74 07                	je     c0007fa3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c0007f9c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007fa0:	48                   	dec    eax
c0007fa1:	eb f3                	jmp    c0007f96 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007fa3:	40                   	inc    eax
c0007fa4:	eb 94                	jmp    c0007f3a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fa6:	83 fd 5c             	cmp    ebp,0x5c
c0007fa9:	74 8f                	je     c0007f3a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fab:	83 fd 2f             	cmp    ebp,0x2f
c0007fae:	74 8a                	je     c0007f3a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fb0:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c0007fb3:	40                   	inc    eax
c0007fb4:	eb 84                	jmp    c0007f3a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fb6:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007fba:	83 ec 0c             	sub    esp,0xc
c0007fbd:	56                   	push   esi
c0007fbe:	e8 ad 85 ff ff       	call   c0000570 <strlen>
c0007fc3:	83 c4 10             	add    esp,0x10
c0007fc6:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c0007fcb:	74 17                	je     c0007fe4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007fcd:	83 ec 0c             	sub    esp,0xc
c0007fd0:	56                   	push   esi
c0007fd1:	e8 9a 85 ff ff       	call   c0000570 <strlen>
c0007fd6:	83 c4 10             	add    esp,0x10
c0007fd9:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007fde:	74 04                	je     c0007fe4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007fe0:	31 ff                	xor    edi,edi
c0007fe2:	eb 5c                	jmp    c0008040 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0007fe4:	83 ec 0c             	sub    esp,0xc
c0007fe7:	56                   	push   esi
c0007fe8:	e8 83 85 ff ff       	call   c0000570 <strlen>
c0007fed:	83 c4 10             	add    esp,0x10
c0007ff0:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c0007ff5:	74 e9                	je     c0007fe0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c0007ff7:	83 ec 0c             	sub    esp,0xc
c0007ffa:	56                   	push   esi
c0007ffb:	e8 70 85 ff ff       	call   c0000570 <strlen>
c0008000:	83 c4 10             	add    esp,0x10
c0008003:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c0008008:	eb b0                	jmp    c0007fba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000800a:	52                   	push   edx
c000800b:	52                   	push   edx
c000800c:	56                   	push   esi
c000800d:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c0008011:	55                   	push   ebp
c0008012:	e8 29 86 ff ff       	call   c0000640 <strcpy>
c0008017:	59                   	pop    ecx
c0008018:	58                   	pop    eax
c0008019:	56                   	push   esi
c000801a:	55                   	push   ebp
c000801b:	e8 b5 f8 ff ff       	call   c00078d5 <KeDereferenceSymlink(char const*, char*)>
c0008020:	83 c4 10             	add    esp,0x10
c0008023:	48                   	dec    eax
c0008024:	75 37                	jne    c000805d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0008026:	50                   	push   eax
c0008027:	56                   	push   esi
c0008028:	55                   	push   ebp
c0008029:	68 aa 35 02 c0       	push   0xc00235aa
c000802e:	e8 31 ef ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008033:	83 c4 10             	add    esp,0x10
c0008036:	8d 47 01             	lea    eax,[edi+0x1]
c0008039:	83 ff 14             	cmp    edi,0x14
c000803c:	74 08                	je     c0008046 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c000803e:	89 c7                	mov    edi,eax
c0008040:	85 db                	test   ebx,ebx
c0008042:	75 c6                	jne    c000800a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c0008044:	eb 17                	jmp    c000805d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0008046:	83 ec 0c             	sub    esp,0xc
c0008049:	bf 15 00 00 00       	mov    edi,0x15
c000804e:	68 c5 35 02 c0       	push   0xc00235c5
c0008053:	e8 d6 7f 00 00       	call   c001002e <KePanic(char const*)>
c0008058:	83 c4 10             	add    esp,0x10
c000805b:	eb e3                	jmp    c0008040 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c000805d:	81 c4 0c 04 00 00    	add    esp,0x40c
c0008063:	5b                   	pop    ebx
c0008064:	5e                   	pop    esi
c0008065:	5f                   	pop    edi
c0008066:	5d                   	pop    ebp
c0008067:	c3                   	ret    

c0008068 <File::File(char const*, Process*, bool)>:
c0008068:	83 ec 1c             	sub    esp,0x1c
c000806b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000806f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008073:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008077:	83 ec 08             	sub    esp,0x8
c000807a:	6a 00                	push   0x0
c000807c:	50                   	push   eax
c000807d:	e8 ea af 00 00       	call   c001306c <UnixFile::UnixFile(int)>
c0008082:	83 c4 10             	add    esp,0x10
c0008085:	ba 78 36 02 c0       	mov    edx,0xc0023678
c000808a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000808e:	89 10                	mov    DWORD PTR [eax],edx
c0008090:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0008095:	85 c0                	test   eax,eax
c0008097:	74 0f                	je     c00080a8 <File::File(char const*, Process*, bool)+0x40>
c0008099:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c000809e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c00080a2:	74 04                	je     c00080a8 <File::File(char const*, Process*, bool)+0x40>
c00080a4:	b0 01                	mov    al,0x1
c00080a6:	eb 02                	jmp    c00080aa <File::File(char const*, Process*, bool)+0x42>
c00080a8:	b0 00                	mov    al,0x0
c00080aa:	0f b6 c0             	movzx  eax,al
c00080ad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080b1:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00080b7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080bb:	83 c2 0d             	add    edx,0xd
c00080be:	50                   	push   eax
c00080bf:	51                   	push   ecx
c00080c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00080c4:	52                   	push   edx
c00080c5:	e8 84 fd ff ff       	call   c0007e4e <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00080ca:	83 c4 10             	add    esp,0x10
c00080cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080d8:	83 c2 0d             	add    edx,0xd
c00080db:	83 ec 04             	sub    esp,0x4
c00080de:	50                   	push   eax
c00080df:	52                   	push   edx
c00080e0:	68 eb 35 02 c0       	push   0xc00235eb
c00080e5:	e8 7a ee ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00080ea:	83 c4 10             	add    esp,0x10
c00080ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080f1:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00080f4:	83 e8 41             	sub    eax,0x41
c00080f7:	88 c2                	mov    dl,al
c00080f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080fd:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008103:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008107:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000810b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000810f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008115:	0f b6 c0             	movzx  eax,al
c0008118:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c000811f:	85 c0                	test   eax,eax
c0008121:	74 3e                	je     c0008161 <File::File(char const*, Process*, bool)+0xf9>
c0008123:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008127:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000812d:	0f b6 c0             	movzx  eax,al
c0008130:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008137:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000813d:	85 c0                	test   eax,eax
c000813f:	75 20                	jne    c0008161 <File::File(char const*, Process*, bool)+0xf9>
c0008141:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008145:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000814b:	0f b6 c0             	movzx  eax,al
c000814e:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008155:	83 ec 0c             	sub    esp,0xc
c0008158:	50                   	push   eax
c0008159:	e8 64 28 00 00       	call   c000a9c2 <LogicalDisk::mount()>
c000815e:	83 c4 10             	add    esp,0x10
c0008161:	90                   	nop
c0008162:	83 c4 1c             	add    esp,0x1c
c0008165:	c3                   	ret    

c0008166 <File::File(char const*, Process*)>:
c0008166:	83 ec 0c             	sub    esp,0xc
c0008169:	6a 01                	push   0x1
c000816b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000816f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008173:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008177:	e8 ec fe ff ff       	call   c0008068 <File::File(char const*, Process*, bool)>
c000817c:	83 c4 10             	add    esp,0x10
c000817f:	90                   	nop
c0008180:	83 c4 0c             	add    esp,0xc
c0008183:	c3                   	ret    

c0008184 <File::open(FileOpenMode)>:
c0008184:	53                   	push   ebx
c0008185:	b8 0b 00 00 00       	mov    eax,0xb
c000818a:	83 ec 08             	sub    esp,0x8
c000818d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008191:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008198:	83 fa 19             	cmp    edx,0x19
c000819b:	77 40                	ja     c00081dd <File::open(FileOpenMode)+0x59>
c000819d:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c00081a4:	85 d2                	test   edx,edx
c00081a6:	74 35                	je     c00081dd <File::open(FileOpenMode)+0x59>
c00081a8:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00081ae:	85 d2                	test   edx,edx
c00081b0:	74 2b                	je     c00081dd <File::open(FileOpenMode)+0x59>
c00081b2:	b8 06 00 00 00       	mov    eax,0x6
c00081b7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00081bb:	75 20                	jne    c00081dd <File::open(FileOpenMode)+0x59>
c00081bd:	8b 02                	mov    eax,DWORD PTR [edx]
c00081bf:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00081c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00081c9:	51                   	push   ecx
c00081ca:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00081cd:	51                   	push   ecx
c00081ce:	52                   	push   edx
c00081cf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00081d2:	83 c4 10             	add    esp,0x10
c00081d5:	85 c0                	test   eax,eax
c00081d7:	75 04                	jne    c00081dd <File::open(FileOpenMode)+0x59>
c00081d9:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00081dd:	83 c4 08             	add    esp,0x8
c00081e0:	5b                   	pop    ebx
c00081e1:	c3                   	ret    

c00081e2 <File::close()>:
c00081e2:	53                   	push   ebx
c00081e3:	b8 0b 00 00 00       	mov    eax,0xb
c00081e8:	83 ec 08             	sub    esp,0x8
c00081eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00081ef:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00081f6:	83 f9 19             	cmp    ecx,0x19
c00081f9:	77 41                	ja     c000823c <File::close()+0x5a>
c00081fb:	8b 1c 8d e0 ca 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd3520]
c0008202:	85 db                	test   ebx,ebx
c0008204:	74 36                	je     c000823c <File::close()+0x5a>
c0008206:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000820d:	74 2d                	je     c000823c <File::close()+0x5a>
c000820f:	b8 05 00 00 00       	mov    eax,0x5
c0008214:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008218:	74 22                	je     c000823c <File::close()+0x5a>
c000821a:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000821e:	8b 04 8d e0 ca 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd3520]
c0008225:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000822b:	53                   	push   ebx
c000822c:	53                   	push   ebx
c000822d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000822f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008235:	50                   	push   eax
c0008236:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c0008239:	83 c4 10             	add    esp,0x10
c000823c:	83 c4 08             	add    esp,0x8
c000823f:	5b                   	pop    ebx
c0008240:	c3                   	ret    
c0008241:	90                   	nop

c0008242 <File::seek(unsigned long long)>:
c0008242:	56                   	push   esi
c0008243:	53                   	push   ebx
c0008244:	b8 0b 00 00 00       	mov    eax,0xb
c0008249:	51                   	push   ecx
c000824a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000824e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008252:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008259:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000825d:	83 fa 19             	cmp    edx,0x19
c0008260:	77 31                	ja     c0008293 <File::seek(unsigned long long)+0x51>
c0008262:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c0008269:	85 d2                	test   edx,edx
c000826b:	74 26                	je     c0008293 <File::seek(unsigned long long)+0x51>
c000826d:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008273:	85 d2                	test   edx,edx
c0008275:	74 1c                	je     c0008293 <File::seek(unsigned long long)+0x51>
c0008277:	b8 05 00 00 00       	mov    eax,0x5
c000827c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008280:	74 11                	je     c0008293 <File::seek(unsigned long long)+0x51>
c0008282:	8b 02                	mov    eax,DWORD PTR [edx]
c0008284:	53                   	push   ebx
c0008285:	51                   	push   ecx
c0008286:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000828c:	52                   	push   edx
c000828d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0008290:	83 c4 10             	add    esp,0x10
c0008293:	5a                   	pop    edx
c0008294:	5b                   	pop    ebx
c0008295:	5e                   	pop    esi
c0008296:	c3                   	ret    
c0008297:	90                   	nop

c0008298 <File::truncate(unsigned long long)>:
c0008298:	56                   	push   esi
c0008299:	53                   	push   ebx
c000829a:	b8 0b 00 00 00       	mov    eax,0xb
c000829f:	51                   	push   ecx
c00082a0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00082a4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00082a8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00082af:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00082b3:	83 fa 19             	cmp    edx,0x19
c00082b6:	77 31                	ja     c00082e9 <File::truncate(unsigned long long)+0x51>
c00082b8:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c00082bf:	85 d2                	test   edx,edx
c00082c1:	74 26                	je     c00082e9 <File::truncate(unsigned long long)+0x51>
c00082c3:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082c9:	85 d2                	test   edx,edx
c00082cb:	74 1c                	je     c00082e9 <File::truncate(unsigned long long)+0x51>
c00082cd:	b8 05 00 00 00       	mov    eax,0x5
c00082d2:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082d6:	74 11                	je     c00082e9 <File::truncate(unsigned long long)+0x51>
c00082d8:	8b 02                	mov    eax,DWORD PTR [edx]
c00082da:	53                   	push   ebx
c00082db:	51                   	push   ecx
c00082dc:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082e2:	52                   	push   edx
c00082e3:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00082e6:	83 c4 10             	add    esp,0x10
c00082e9:	5a                   	pop    edx
c00082ea:	5b                   	pop    ebx
c00082eb:	5e                   	pop    esi
c00082ec:	c3                   	ret    
c00082ed:	90                   	nop

c00082ee <File::tell(unsigned long long*)>:
c00082ee:	83 ec 0c             	sub    esp,0xc
c00082f1:	b8 0b 00 00 00       	mov    eax,0xb
c00082f6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00082fa:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0008301:	83 fa 19             	cmp    edx,0x19
c0008304:	77 34                	ja     c000833a <File::tell(unsigned long long*)+0x4c>
c0008306:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c000830d:	85 d2                	test   edx,edx
c000830f:	74 29                	je     c000833a <File::tell(unsigned long long*)+0x4c>
c0008311:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008317:	85 d2                	test   edx,edx
c0008319:	74 1f                	je     c000833a <File::tell(unsigned long long*)+0x4c>
c000831b:	b8 05 00 00 00       	mov    eax,0x5
c0008320:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0008324:	74 14                	je     c000833a <File::tell(unsigned long long*)+0x4c>
c0008326:	50                   	push   eax
c0008327:	8b 02                	mov    eax,DWORD PTR [edx]
c0008329:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000832d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0008333:	52                   	push   edx
c0008334:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0008337:	83 c4 10             	add    esp,0x10
c000833a:	83 c4 0c             	add    esp,0xc
c000833d:	c3                   	ret    

c000833e <File::rewind()>:
c000833e:	83 ec 10             	sub    esp,0x10
c0008341:	6a 00                	push   0x0
c0008343:	6a 00                	push   0x0
c0008345:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008349:	e8 f4 fe ff ff       	call   c0008242 <File::seek(unsigned long long)>
c000834e:	83 c4 1c             	add    esp,0x1c
c0008351:	c3                   	ret    

c0008352 <File::unlink()>:
c0008352:	83 ec 0c             	sub    esp,0xc
c0008355:	b8 0b 00 00 00       	mov    eax,0xb
c000835a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000835e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008365:	83 f9 19             	cmp    ecx,0x19
c0008368:	77 2f                	ja     c0008399 <File::unlink()+0x47>
c000836a:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008371:	85 c9                	test   ecx,ecx
c0008373:	74 24                	je     c0008399 <File::unlink()+0x47>
c0008375:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000837b:	85 c9                	test   ecx,ecx
c000837d:	74 1a                	je     c0008399 <File::unlink()+0x47>
c000837f:	b8 06 00 00 00       	mov    eax,0x6
c0008384:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008388:	75 0f                	jne    c0008399 <File::unlink()+0x47>
c000838a:	83 c2 0d             	add    edx,0xd
c000838d:	50                   	push   eax
c000838e:	50                   	push   eax
c000838f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008391:	52                   	push   edx
c0008392:	51                   	push   ecx
c0008393:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008396:	83 c4 10             	add    esp,0x10
c0008399:	83 c4 0c             	add    esp,0xc
c000839c:	c3                   	ret    
c000839d:	90                   	nop

c000839e <File::rename(char const*)>:
c000839e:	83 ec 0c             	sub    esp,0xc
c00083a1:	b8 0b 00 00 00       	mov    eax,0xb
c00083a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083aa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083b1:	83 f9 19             	cmp    ecx,0x19
c00083b4:	77 32                	ja     c00083e8 <File::rename(char const*)+0x4a>
c00083b6:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00083bd:	85 c9                	test   ecx,ecx
c00083bf:	74 27                	je     c00083e8 <File::rename(char const*)+0x4a>
c00083c1:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083c7:	85 c9                	test   ecx,ecx
c00083c9:	74 1d                	je     c00083e8 <File::rename(char const*)+0x4a>
c00083cb:	b8 06 00 00 00       	mov    eax,0x6
c00083d0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083d4:	75 12                	jne    c00083e8 <File::rename(char const*)+0x4a>
c00083d6:	83 c2 0d             	add    edx,0xd
c00083d9:	50                   	push   eax
c00083da:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083e0:	52                   	push   edx
c00083e1:	51                   	push   ecx
c00083e2:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00083e5:	83 c4 10             	add    esp,0x10
c00083e8:	83 c4 0c             	add    esp,0xc
c00083eb:	c3                   	ret    

c00083ec <File::chfatattr(unsigned char, unsigned char)>:
c00083ec:	57                   	push   edi
c00083ed:	b8 0b 00 00 00       	mov    eax,0xb
c00083f2:	56                   	push   esi
c00083f3:	53                   	push   ebx
c00083f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083f8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00083fc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008403:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008407:	83 f9 19             	cmp    ecx,0x19
c000840a:	77 37                	ja     c0008443 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000840c:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008413:	85 c9                	test   ecx,ecx
c0008415:	74 2c                	je     c0008443 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008417:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000841d:	85 c9                	test   ecx,ecx
c000841f:	74 22                	je     c0008443 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008421:	b8 06 00 00 00       	mov    eax,0x6
c0008426:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000842a:	75 17                	jne    c0008443 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000842c:	8b 39                	mov    edi,DWORD PTR [ecx]
c000842e:	89 f0                	mov    eax,esi
c0008430:	83 c2 0d             	add    edx,0xd
c0008433:	0f b6 f0             	movzx  esi,al
c0008436:	0f b6 db             	movzx  ebx,bl
c0008439:	56                   	push   esi
c000843a:	53                   	push   ebx
c000843b:	52                   	push   edx
c000843c:	51                   	push   ecx
c000843d:	ff 57 38             	call   DWORD PTR [edi+0x38]
c0008440:	83 c4 10             	add    esp,0x10
c0008443:	5b                   	pop    ebx
c0008444:	5e                   	pop    esi
c0008445:	5f                   	pop    edi
c0008446:	c3                   	ret    
c0008447:	90                   	nop

c0008448 <File::exists()>:
c0008448:	83 ec 0c             	sub    esp,0xc
c000844b:	31 c0                	xor    eax,eax
c000844d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008451:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008458:	83 f9 19             	cmp    ecx,0x19
c000845b:	77 24                	ja     c0008481 <File::exists()+0x39>
c000845d:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008464:	85 c9                	test   ecx,ecx
c0008466:	74 19                	je     c0008481 <File::exists()+0x39>
c0008468:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000846e:	85 c9                	test   ecx,ecx
c0008470:	74 0f                	je     c0008481 <File::exists()+0x39>
c0008472:	83 c2 0d             	add    edx,0xd
c0008475:	50                   	push   eax
c0008476:	50                   	push   eax
c0008477:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008479:	52                   	push   edx
c000847a:	51                   	push   ecx
c000847b:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000847e:	83 c4 10             	add    esp,0x10
c0008481:	83 c4 0c             	add    esp,0xc
c0008484:	c3                   	ret    
c0008485:	90                   	nop

c0008486 <File::stat(unsigned long long*, bool*)>:
c0008486:	56                   	push   esi
c0008487:	53                   	push   ebx
c0008488:	50                   	push   eax
c0008489:	b8 0b 00 00 00       	mov    eax,0xb
c000848e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008492:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008496:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000849d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00084a1:	83 f9 19             	cmp    ecx,0x19
c00084a4:	77 3d                	ja     c00084e3 <File::stat(unsigned long long*, bool*)+0x5d>
c00084a6:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00084ad:	85 c9                	test   ecx,ecx
c00084af:	74 32                	je     c00084e3 <File::stat(unsigned long long*, bool*)+0x5d>
c00084b1:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00084b7:	85 c9                	test   ecx,ecx
c00084b9:	74 28                	je     c00084e3 <File::stat(unsigned long long*, bool*)+0x5d>
c00084bb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00084bd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00084c1:	74 13                	je     c00084d6 <File::stat(unsigned long long*, bool*)+0x50>
c00084c3:	83 ec 04             	sub    esp,0x4
c00084c6:	56                   	push   esi
c00084c7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00084cd:	51                   	push   ecx
c00084ce:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00084d1:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00084d4:	eb 0a                	jmp    c00084e0 <File::stat(unsigned long long*, bool*)+0x5a>
c00084d6:	53                   	push   ebx
c00084d7:	83 c2 0d             	add    edx,0xd
c00084da:	56                   	push   esi
c00084db:	52                   	push   edx
c00084dc:	51                   	push   ecx
c00084dd:	ff 50 34             	call   DWORD PTR [eax+0x34]
c00084e0:	83 c4 10             	add    esp,0x10
c00084e3:	5a                   	pop    edx
c00084e4:	5b                   	pop    ebx
c00084e5:	5e                   	pop    esi
c00084e6:	c3                   	ret    

c00084e7 <Fs::setcwd(Process*, char*)>:
c00084e7:	55                   	push   ebp
c00084e8:	57                   	push   edi
c00084e9:	56                   	push   esi
c00084ea:	53                   	push   ebx
c00084eb:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00084f1:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c00084f8:	6a 00                	push   0x0
c00084fa:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0008500:	57                   	push   edi
c0008501:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0008508:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000850c:	56                   	push   esi
c000850d:	e8 3c f9 ff ff       	call   c0007e4e <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008512:	89 34 24             	mov    DWORD PTR [esp],esi
c0008515:	e8 56 80 ff ff       	call   c0000570 <strlen>
c000851a:	83 c4 10             	add    esp,0x10
c000851d:	83 f8 02             	cmp    eax,0x2
c0008520:	77 15                	ja     c0008537 <Fs::setcwd(Process*, char*)+0x50>
c0008522:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c0008527:	83 eb 41             	sub    ebx,0x41
c000852a:	8b 04 9d e0 ca 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3520]
c0008531:	85 c0                	test   eax,eax
c0008533:	75 1c                	jne    c0008551 <Fs::setcwd(Process*, char*)+0x6a>
c0008535:	eb 2f                	jmp    c0008566 <Fs::setcwd(Process*, char*)+0x7f>
c0008537:	83 ec 0c             	sub    esp,0xc
c000853a:	56                   	push   esi
c000853b:	e8 30 80 ff ff       	call   c0000570 <strlen>
c0008540:	83 c4 10             	add    esp,0x10
c0008543:	83 f8 03             	cmp    eax,0x3
c0008546:	75 57                	jne    c000859f <Fs::setcwd(Process*, char*)+0xb8>
c0008548:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000854d:	75 50                	jne    c000859f <Fs::setcwd(Process*, char*)+0xb8>
c000854f:	eb d1                	jmp    c0008522 <Fs::setcwd(Process*, char*)+0x3b>
c0008551:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c0008558:	75 0c                	jne    c0008566 <Fs::setcwd(Process*, char*)+0x7f>
c000855a:	83 ec 0c             	sub    esp,0xc
c000855d:	50                   	push   eax
c000855e:	e8 5f 24 00 00       	call   c000a9c2 <LogicalDisk::mount()>
c0008563:	83 c4 10             	add    esp,0x10
c0008566:	b8 03 00 00 00       	mov    eax,0x3
c000856b:	83 fb 19             	cmp    ebx,0x19
c000856e:	0f 87 c6 00 00 00    	ja     c000863a <Fs::setcwd(Process*, char*)+0x153>
c0008574:	8b 14 9d e0 ca 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd3520]
c000857b:	b8 05 00 00 00       	mov    eax,0x5
c0008580:	85 d2                	test   edx,edx
c0008582:	0f 84 b2 00 00 00    	je     c000863a <Fs::setcwd(Process*, char*)+0x153>
c0008588:	b8 06 00 00 00       	mov    eax,0x6
c000858d:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008594:	0f 85 92 00 00 00    	jne    c000862c <Fs::setcwd(Process*, char*)+0x145>
c000859a:	e9 9b 00 00 00       	jmp    c000863a <Fs::setcwd(Process*, char*)+0x153>
c000859f:	83 ec 0c             	sub    esp,0xc
c00085a2:	68 14 01 00 00       	push   0x114
c00085a7:	e8 3b 77 00 00       	call   c000fce7 <malloc>
c00085ac:	83 c4 0c             	add    esp,0xc
c00085af:	89 c3                	mov    ebx,eax
c00085b1:	55                   	push   ebp
c00085b2:	56                   	push   esi
c00085b3:	50                   	push   eax
c00085b4:	e8 ad fb ff ff       	call   c0008166 <File::File(char const*, Process*)>
c00085b9:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00085be:	83 c4 0c             	add    esp,0xc
c00085c1:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00085c5:	50                   	push   eax
c00085c6:	8d 44 24 10          	lea    eax,[esp+0x10]
c00085ca:	50                   	push   eax
c00085cb:	53                   	push   ebx
c00085cc:	e8 b5 fe ff ff       	call   c0008486 <File::stat(unsigned long long*, bool*)>
c00085d1:	83 c4 10             	add    esp,0x10
c00085d4:	83 f8 02             	cmp    eax,0x2
c00085d7:	74 27                	je     c0008600 <Fs::setcwd(Process*, char*)+0x119>
c00085d9:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00085de:	75 1c                	jne    c00085fc <Fs::setcwd(Process*, char*)+0x115>
c00085e0:	b8 02 00 00 00       	mov    eax,0x2
c00085e5:	85 db                	test   ebx,ebx
c00085e7:	74 51                	je     c000863a <Fs::setcwd(Process*, char*)+0x153>
c00085e9:	83 ec 0c             	sub    esp,0xc
c00085ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085ee:	53                   	push   ebx
c00085ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085f2:	83 c4 10             	add    esp,0x10
c00085f5:	b8 02 00 00 00       	mov    eax,0x2
c00085fa:	eb 3e                	jmp    c000863a <Fs::setcwd(Process*, char*)+0x153>
c00085fc:	85 c0                	test   eax,eax
c00085fe:	74 1c                	je     c000861c <Fs::setcwd(Process*, char*)+0x135>
c0008600:	b8 01 00 00 00       	mov    eax,0x1
c0008605:	85 db                	test   ebx,ebx
c0008607:	74 31                	je     c000863a <Fs::setcwd(Process*, char*)+0x153>
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000860e:	53                   	push   ebx
c000860f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008612:	83 c4 10             	add    esp,0x10
c0008615:	b8 01 00 00 00       	mov    eax,0x1
c000861a:	eb 1e                	jmp    c000863a <Fs::setcwd(Process*, char*)+0x153>
c000861c:	85 db                	test   ebx,ebx
c000861e:	74 0c                	je     c000862c <Fs::setcwd(Process*, char*)+0x145>
c0008620:	83 ec 0c             	sub    esp,0xc
c0008623:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008625:	53                   	push   ebx
c0008626:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008629:	83 c4 10             	add    esp,0x10
c000862c:	50                   	push   eax
c000862d:	50                   	push   eax
c000862e:	56                   	push   esi
c000862f:	57                   	push   edi
c0008630:	e8 0b 80 ff ff       	call   c0000640 <strcpy>
c0008635:	83 c4 10             	add    esp,0x10
c0008638:	31 c0                	xor    eax,eax
c000863a:	81 c4 1c 02 00 00    	add    esp,0x21c
c0008640:	5b                   	pop    ebx
c0008641:	5e                   	pop    esi
c0008642:	5f                   	pop    edi
c0008643:	5d                   	pop    ebp
c0008644:	c3                   	ret    
c0008645:	90                   	nop

c0008646 <Directory::Directory(char const*, Process*)>:
c0008646:	83 ec 0c             	sub    esp,0xc
c0008649:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000864d:	83 ec 08             	sub    esp,0x8
c0008650:	6a 00                	push   0x0
c0008652:	50                   	push   eax
c0008653:	e8 14 aa 00 00       	call   c001306c <UnixFile::UnixFile(int)>
c0008658:	83 c4 10             	add    esp,0x10
c000865b:	ba 94 36 02 c0       	mov    edx,0xc0023694
c0008660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008664:	89 10                	mov    DWORD PTR [eax],edx
c0008666:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c000866b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000866f:	0f 95 c0             	setne  al
c0008672:	0f b6 c0             	movzx  eax,al
c0008675:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008679:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000867f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008683:	83 c2 0d             	add    edx,0xd
c0008686:	50                   	push   eax
c0008687:	51                   	push   ecx
c0008688:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000868c:	52                   	push   edx
c000868d:	e8 bc f7 ff ff       	call   c0007e4e <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008692:	83 c4 10             	add    esp,0x10
c0008695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008699:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000869c:	83 e8 41             	sub    eax,0x41
c000869f:	88 c2                	mov    dl,al
c00086a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086a5:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00086ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086af:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00086b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086b7:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086bd:	0f b6 c0             	movzx  eax,al
c00086c0:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c00086c7:	85 c0                	test   eax,eax
c00086c9:	74 3e                	je     c0008709 <Directory::Directory(char const*, Process*)+0xc3>
c00086cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086cf:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086d5:	0f b6 c0             	movzx  eax,al
c00086d8:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c00086df:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00086e5:	85 c0                	test   eax,eax
c00086e7:	75 20                	jne    c0008709 <Directory::Directory(char const*, Process*)+0xc3>
c00086e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086ed:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086f3:	0f b6 c0             	movzx  eax,al
c00086f6:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c00086fd:	83 ec 0c             	sub    esp,0xc
c0008700:	50                   	push   eax
c0008701:	e8 bc 22 00 00       	call   c000a9c2 <LogicalDisk::mount()>
c0008706:	83 c4 10             	add    esp,0x10
c0008709:	90                   	nop
c000870a:	83 c4 0c             	add    esp,0xc
c000870d:	c3                   	ret    

c000870e <Directory::open()>:
c000870e:	53                   	push   ebx
c000870f:	b8 0b 00 00 00       	mov    eax,0xb
c0008714:	83 ec 08             	sub    esp,0x8
c0008717:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000871b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008722:	83 fa 19             	cmp    edx,0x19
c0008725:	77 3d                	ja     c0008764 <Directory::open()+0x56>
c0008727:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c000872e:	85 d2                	test   edx,edx
c0008730:	74 32                	je     c0008764 <Directory::open()+0x56>
c0008732:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008738:	85 d2                	test   edx,edx
c000873a:	74 28                	je     c0008764 <Directory::open()+0x56>
c000873c:	b8 06 00 00 00       	mov    eax,0x6
c0008741:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008745:	75 1d                	jne    c0008764 <Directory::open()+0x56>
c0008747:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000874d:	50                   	push   eax
c000874e:	8b 02                	mov    eax,DWORD PTR [edx]
c0008750:	51                   	push   ecx
c0008751:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008754:	51                   	push   ecx
c0008755:	52                   	push   edx
c0008756:	ff 50 50             	call   DWORD PTR [eax+0x50]
c0008759:	83 c4 10             	add    esp,0x10
c000875c:	85 c0                	test   eax,eax
c000875e:	75 04                	jne    c0008764 <Directory::open()+0x56>
c0008760:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008764:	83 c4 08             	add    esp,0x8
c0008767:	5b                   	pop    ebx
c0008768:	c3                   	ret    
c0008769:	90                   	nop

c000876a <Directory::close()>:
c000876a:	53                   	push   ebx
c000876b:	b8 0b 00 00 00       	mov    eax,0xb
c0008770:	83 ec 08             	sub    esp,0x8
c0008773:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008777:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000877e:	83 f9 19             	cmp    ecx,0x19
c0008781:	77 41                	ja     c00087c4 <Directory::close()+0x5a>
c0008783:	8b 1c 8d e0 ca 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd3520]
c000878a:	85 db                	test   ebx,ebx
c000878c:	74 36                	je     c00087c4 <Directory::close()+0x5a>
c000878e:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008795:	74 2d                	je     c00087c4 <Directory::close()+0x5a>
c0008797:	b8 05 00 00 00       	mov    eax,0x5
c000879c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087a0:	74 22                	je     c00087c4 <Directory::close()+0x5a>
c00087a2:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00087a6:	8b 04 8d e0 ca 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd3520]
c00087ad:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00087b3:	53                   	push   ebx
c00087b4:	53                   	push   ebx
c00087b5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00087b7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00087bd:	50                   	push   eax
c00087be:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c00087c1:	83 c4 10             	add    esp,0x10
c00087c4:	83 c4 08             	add    esp,0x8
c00087c7:	5b                   	pop    ebx
c00087c8:	c3                   	ret    
c00087c9:	90                   	nop

c00087ca <Directory::unlink()>:
c00087ca:	83 ec 0c             	sub    esp,0xc
c00087cd:	b8 0b 00 00 00       	mov    eax,0xb
c00087d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087d6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087dd:	83 f9 19             	cmp    ecx,0x19
c00087e0:	77 2f                	ja     c0008811 <Directory::unlink()+0x47>
c00087e2:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00087e9:	85 c9                	test   ecx,ecx
c00087eb:	74 24                	je     c0008811 <Directory::unlink()+0x47>
c00087ed:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00087f3:	85 c9                	test   ecx,ecx
c00087f5:	74 1a                	je     c0008811 <Directory::unlink()+0x47>
c00087f7:	b8 06 00 00 00       	mov    eax,0x6
c00087fc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008800:	75 0f                	jne    c0008811 <Directory::unlink()+0x47>
c0008802:	83 c2 0d             	add    edx,0xd
c0008805:	50                   	push   eax
c0008806:	50                   	push   eax
c0008807:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008809:	52                   	push   edx
c000880a:	51                   	push   ecx
c000880b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000880e:	83 c4 10             	add    esp,0x10
c0008811:	83 c4 0c             	add    esp,0xc
c0008814:	c3                   	ret    
c0008815:	90                   	nop

c0008816 <Directory::rename(char const*)>:
c0008816:	83 ec 0c             	sub    esp,0xc
c0008819:	b8 0b 00 00 00       	mov    eax,0xb
c000881e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008822:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008829:	83 f9 19             	cmp    ecx,0x19
c000882c:	77 32                	ja     c0008860 <Directory::rename(char const*)+0x4a>
c000882e:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008835:	85 c9                	test   ecx,ecx
c0008837:	74 27                	je     c0008860 <Directory::rename(char const*)+0x4a>
c0008839:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000883f:	85 c9                	test   ecx,ecx
c0008841:	74 1d                	je     c0008860 <Directory::rename(char const*)+0x4a>
c0008843:	b8 06 00 00 00       	mov    eax,0x6
c0008848:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000884c:	75 12                	jne    c0008860 <Directory::rename(char const*)+0x4a>
c000884e:	83 c2 0d             	add    edx,0xd
c0008851:	50                   	push   eax
c0008852:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008854:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008858:	52                   	push   edx
c0008859:	51                   	push   ecx
c000885a:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000885d:	83 c4 10             	add    esp,0x10
c0008860:	83 c4 0c             	add    esp,0xc
c0008863:	c3                   	ret    

c0008864 <Directory::exists()>:
c0008864:	83 ec 0c             	sub    esp,0xc
c0008867:	31 c0                	xor    eax,eax
c0008869:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000886d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008874:	83 f9 19             	cmp    ecx,0x19
c0008877:	77 24                	ja     c000889d <Directory::exists()+0x39>
c0008879:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008880:	85 c9                	test   ecx,ecx
c0008882:	74 19                	je     c000889d <Directory::exists()+0x39>
c0008884:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000888a:	85 c9                	test   ecx,ecx
c000888c:	74 0f                	je     c000889d <Directory::exists()+0x39>
c000888e:	83 c2 0d             	add    edx,0xd
c0008891:	50                   	push   eax
c0008892:	50                   	push   eax
c0008893:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008895:	52                   	push   edx
c0008896:	51                   	push   ecx
c0008897:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000889a:	83 c4 10             	add    esp,0x10
c000889d:	83 c4 0c             	add    esp,0xc
c00088a0:	c3                   	ret    
c00088a1:	90                   	nop

c00088a2 <Directory::read(dirent*)>:
c00088a2:	83 ec 1c             	sub    esp,0x1c
c00088a5:	b8 0b 00 00 00       	mov    eax,0xb
c00088aa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00088ae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088b5:	83 f9 19             	cmp    ecx,0x19
c00088b8:	77 30                	ja     c00088ea <Directory::read(dirent*)+0x48>
c00088ba:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00088c1:	85 c9                	test   ecx,ecx
c00088c3:	74 25                	je     c00088ea <Directory::read(dirent*)+0x48>
c00088c5:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c00088cc:	74 1c                	je     c00088ea <Directory::read(dirent*)+0x48>
c00088ce:	83 ec 0c             	sub    esp,0xc
c00088d1:	8b 02                	mov    eax,DWORD PTR [edx]
c00088d3:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00088d7:	51                   	push   ecx
c00088d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00088dc:	6a 00                	push   0x0
c00088de:	68 10 01 00 00       	push   0x110
c00088e3:	52                   	push   edx
c00088e4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00088e7:	83 c4 20             	add    esp,0x20
c00088ea:	83 c4 1c             	add    esp,0x1c
c00088ed:	c3                   	ret    

c00088ee <Directory::create()>:
c00088ee:	83 ec 0c             	sub    esp,0xc
c00088f1:	b8 0b 00 00 00       	mov    eax,0xb
c00088f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008901:	83 f9 19             	cmp    ecx,0x19
c0008904:	77 2f                	ja     c0008935 <Directory::create()+0x47>
c0008906:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c000890d:	85 c9                	test   ecx,ecx
c000890f:	74 24                	je     c0008935 <Directory::create()+0x47>
c0008911:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008917:	85 c9                	test   ecx,ecx
c0008919:	74 1a                	je     c0008935 <Directory::create()+0x47>
c000891b:	b8 06 00 00 00       	mov    eax,0x6
c0008920:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008924:	75 0f                	jne    c0008935 <Directory::create()+0x47>
c0008926:	83 c2 0d             	add    edx,0xd
c0008929:	50                   	push   eax
c000892a:	50                   	push   eax
c000892b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000892d:	52                   	push   edx
c000892e:	51                   	push   ecx
c000892f:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0008932:	83 c4 10             	add    esp,0x10
c0008935:	83 c4 0c             	add    esp,0xc
c0008938:	c3                   	ret    
c0008939:	90                   	nop

c000893a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000893a:	b8 0a 00 00 00       	mov    eax,0xa
c000893f:	c3                   	ret    

c0008940 <Bus::Bus(char const*)>:
c0008940:	83 ec 0c             	sub    esp,0xc
c0008943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008947:	83 ec 08             	sub    esp,0x8
c000894a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000894e:	50                   	push   eax
c000894f:	e8 3e 12 00 00       	call   c0009b92 <Device::Device(char const*)>
c0008954:	83 c4 10             	add    esp,0x10
c0008957:	ba b0 36 02 c0       	mov    edx,0xc00236b0
c000895c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008960:	89 10                	mov    DWORD PTR [eax],edx
c0008962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008966:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008970:	90                   	nop
c0008971:	83 c4 0c             	add    esp,0xc
c0008974:	c3                   	ret    
c0008975:	90                   	nop
c0008976:	66 90                	xchg   ax,ax

c0008978 <Bus::~Bus()>:
c0008978:	83 ec 0c             	sub    esp,0xc
c000897b:	ba b0 36 02 c0       	mov    edx,0xc00236b0
c0008980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008984:	89 10                	mov    DWORD PTR [eax],edx
c0008986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898a:	83 ec 0c             	sub    esp,0xc
c000898d:	50                   	push   eax
c000898e:	e8 9f 0f 00 00       	call   c0009932 <Device::~Device()>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	90                   	nop
c0008997:	83 c4 0c             	add    esp,0xc
c000899a:	c3                   	ret    
c000899b:	90                   	nop

c000899c <Bus::~Bus()>:
c000899c:	83 ec 0c             	sub    esp,0xc
c000899f:	83 ec 0c             	sub    esp,0xc
c00089a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089a6:	e8 cd ff ff ff       	call   c0008978 <Bus::~Bus()>
c00089ab:	83 c4 10             	add    esp,0x10
c00089ae:	83 ec 08             	sub    esp,0x8
c00089b1:	68 58 01 00 00       	push   0x158
c00089b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089ba:	e8 9c 49 00 00       	call   c000d35b <operator delete(void*, unsigned long)>
c00089bf:	83 c4 10             	add    esp,0x10
c00089c2:	83 c4 0c             	add    esp,0xc
c00089c5:	c3                   	ret    

c00089c6 <KeBeepThread(void*)>:
c00089c6:	83 ec 0c             	sub    esp,0xc
c00089c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089cd:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c00089d4:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c00089db:	75 01                	jne    c00089de <KeBeepThread(void*)+0x18>
c00089dd:	fb                   	sti    
c00089de:	6b c0 0a             	imul   eax,eax,0xa
c00089e1:	52                   	push   edx
c00089e2:	52                   	push   edx
c00089e3:	99                   	cdq    
c00089e4:	52                   	push   edx
c00089e5:	50                   	push   eax
c00089e6:	e8 49 ea 00 00       	call   c0017434 <milliTenthSleep(unsigned long long)>
c00089eb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00089f2:	e8 ec 1b 01 00       	call   c001a5e3 <HalMakeBeep(int)>
c00089f7:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00089ff:	83 c4 1c             	add    esp,0x1c
c0008a02:	e9 f9 e8 00 00       	jmp    c0017300 <blockTask(TaskState)>

c0008a07 <KeBeep(int, int, bool)>:
c0008a07:	56                   	push   esi
c0008a08:	53                   	push   ebx
c0008a09:	83 ec 10             	sub    esp,0x10
c0008a0c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a10:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a18:	e8 c6 1b 01 00       	call   c001a5e3 <HalMakeBeep(int)>
c0008a1d:	83 c4 10             	add    esp,0x10
c0008a20:	89 f0                	mov    eax,esi
c0008a22:	84 c0                	test   al,al
c0008a24:	74 1f                	je     c0008a45 <KeBeep(int, int, bool)+0x3e>
c0008a26:	50                   	push   eax
c0008a27:	50                   	push   eax
c0008a28:	6b c3 0a             	imul   eax,ebx,0xa
c0008a2b:	99                   	cdq    
c0008a2c:	52                   	push   edx
c0008a2d:	50                   	push   eax
c0008a2e:	e8 01 ea 00 00       	call   c0017434 <milliTenthSleep(unsigned long long)>
c0008a33:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a3b:	83 c4 14             	add    esp,0x14
c0008a3e:	5b                   	pop    ebx
c0008a3f:	5e                   	pop    esi
c0008a40:	e9 9e 1b 01 00       	jmp    c001a5e3 <HalMakeBeep(int)>
c0008a45:	68 e6 00 00 00       	push   0xe6
c0008a4a:	53                   	push   ebx
c0008a4b:	68 c6 89 00 c0       	push   0xc00089c6
c0008a50:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c0008a56:	e8 25 e5 00 00       	call   c0016f80 <Process::createThread(void (*)(void*), void*, int)>
c0008a5b:	83 c4 14             	add    esp,0x14
c0008a5e:	5b                   	pop    ebx
c0008a5f:	5e                   	pop    esi
c0008a60:	c3                   	ret    
c0008a61:	90                   	nop

c0008a62 <KeLoadTimezoneStrings()>:
c0008a62:	55                   	push   ebp
c0008a63:	89 e5                	mov    ebp,esp
c0008a65:	53                   	push   ebx
c0008a66:	83 ec 44             	sub    esp,0x44
c0008a69:	c6 05 20 c3 02 c0 01 	mov    BYTE PTR ds:0xc002c320,0x1
c0008a70:	c7 45 dc 14 01 00 00 	mov    DWORD PTR [ebp-0x24],0x114
c0008a77:	83 ec 0c             	sub    esp,0xc
c0008a7a:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0008a7d:	e8 65 72 00 00       	call   c000fce7 <malloc>
c0008a82:	83 c4 10             	add    esp,0x10
c0008a85:	89 c3                	mov    ebx,eax
c0008a87:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0008a8c:	83 ec 04             	sub    esp,0x4
c0008a8f:	50                   	push   eax
c0008a90:	68 e0 36 02 c0       	push   0xc00236e0
c0008a95:	53                   	push   ebx
c0008a96:	e8 cb f6 ff ff       	call   c0008166 <File::File(char const*, Process*)>
c0008a9b:	83 c4 10             	add    esp,0x10
c0008a9e:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0008aa1:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008aa5:	75 10                	jne    c0008ab7 <KeLoadTimezoneStrings()+0x55>
c0008aa7:	83 ec 0c             	sub    esp,0xc
c0008aaa:	68 ff 36 02 c0       	push   0xc00236ff
c0008aaf:	e8 7a 75 00 00       	call   c001002e <KePanic(char const*)>
c0008ab4:	83 c4 10             	add    esp,0x10
c0008ab7:	83 ec 08             	sub    esp,0x8
c0008aba:	6a 01                	push   0x1
c0008abc:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008abf:	e8 c0 f6 ff ff       	call   c0008184 <File::open(FileOpenMode)>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	83 ec 04             	sub    esp,0x4
c0008aca:	8d 45 cf             	lea    eax,[ebp-0x31]
c0008acd:	50                   	push   eax
c0008ace:	8d 45 d0             	lea    eax,[ebp-0x30]
c0008ad1:	50                   	push   eax
c0008ad2:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008ad5:	e8 ac f9 ff ff       	call   c0008486 <File::stat(unsigned long long*, bool*)>
c0008ada:	83 c4 10             	add    esp,0x10
c0008add:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008ae0:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008ae3:	83 ec 08             	sub    esp,0x8
c0008ae6:	50                   	push   eax
c0008ae7:	68 15 37 02 c0       	push   0xc0023715
c0008aec:	e8 73 e4 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008af1:	83 c4 10             	add    esp,0x10
c0008af4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008af7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008afa:	83 c0 01             	add    eax,0x1
c0008afd:	83 ec 0c             	sub    esp,0xc
c0008b00:	50                   	push   eax
c0008b01:	e8 e1 71 00 00       	call   c000fce7 <malloc>
c0008b06:	83 c4 10             	add    esp,0x10
c0008b09:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0008b0c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b0f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b12:	83 ec 04             	sub    esp,0x4
c0008b15:	50                   	push   eax
c0008b16:	6a 00                	push   0x0
c0008b18:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b1b:	e8 d0 79 ff ff       	call   c00004f0 <memset>
c0008b20:	83 c4 10             	add    esp,0x10
c0008b23:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b26:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b28:	83 c0 0c             	add    eax,0xc
c0008b2b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008b2d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b30:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b33:	83 ec 0c             	sub    esp,0xc
c0008b36:	8d 5d c8             	lea    ebx,[ebp-0x38]
c0008b39:	53                   	push   ebx
c0008b3a:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b3d:	52                   	push   edx
c0008b3e:	50                   	push   eax
c0008b3f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b42:	ff d1                	call   ecx
c0008b44:	83 c4 20             	add    esp,0x20
c0008b47:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0008b4a:	83 ec 08             	sub    esp,0x8
c0008b4d:	50                   	push   eax
c0008b4e:	68 25 37 02 c0       	push   0xc0023725
c0008b53:	e8 0c e4 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008b58:	83 c4 10             	add    esp,0x10
c0008b5b:	83 ec 0c             	sub    esp,0xc
c0008b5e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b61:	e8 7c f6 ff ff       	call   c00081e2 <File::close()>
c0008b66:	83 c4 10             	add    esp,0x10
c0008b69:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008b6d:	74 15                	je     c0008b84 <KeLoadTimezoneStrings()+0x122>
c0008b6f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b72:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b74:	83 c0 08             	add    eax,0x8
c0008b77:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b79:	83 ec 0c             	sub    esp,0xc
c0008b7c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b7f:	ff d0                	call   eax
c0008b81:	83 c4 10             	add    esp,0x10
c0008b84:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0008b8b:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0008b92:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
c0008b99:	7f 3a                	jg     c0008bd5 <KeLoadTimezoneStrings()+0x173>
c0008b9b:	83 ec 0c             	sub    esp,0xc
c0008b9e:	6a 78                	push   0x78
c0008ba0:	e8 42 71 00 00       	call   c000fce7 <malloc>
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	89 c2                	mov    edx,eax
c0008baa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bad:	89 14 85 40 c3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3cc0],edx
c0008bb4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bb7:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008bbe:	83 ec 08             	sub    esp,0x8
c0008bc1:	68 2e 37 02 c0       	push   0xc002372e
c0008bc6:	50                   	push   eax
c0008bc7:	e8 74 7a ff ff       	call   c0000640 <strcpy>
c0008bcc:	83 c4 10             	add    esp,0x10
c0008bcf:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0008bd3:	eb bd                	jmp    c0008b92 <KeLoadTimezoneStrings()+0x130>
c0008bd5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0008bdc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008bdf:	8d 50 01             	lea    edx,[eax+0x1]
c0008be2:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0008be5:	89 c2                	mov    edx,eax
c0008be7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0008bea:	01 d0                	add    eax,edx
c0008bec:	8a 00                	mov    al,BYTE PTR [eax]
c0008bee:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
c0008bf1:	c6 45 c7 00          	mov    BYTE PTR [ebp-0x39],0x0
c0008bf5:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008bf8:	0f be c0             	movsx  eax,al
c0008bfb:	83 f8 0d             	cmp    eax,0xd
c0008bfe:	0f 84 82 01 00 00    	je     c0008d86 <KeLoadTimezoneStrings()+0x324>
c0008c04:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c07:	0f be c0             	movsx  eax,al
c0008c0a:	83 f8 09             	cmp    eax,0x9
c0008c0d:	75 44                	jne    c0008c53 <KeLoadTimezoneStrings()+0x1f1>
c0008c0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c12:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008c19:	83 ec 0c             	sub    esp,0xc
c0008c1c:	50                   	push   eax
c0008c1d:	e8 4e 79 ff ff       	call   c0000570 <strlen>
c0008c22:	83 c4 10             	add    esp,0x10
c0008c25:	83 f8 08             	cmp    eax,0x8
c0008c28:	0f 96 c0             	setbe  al
c0008c2b:	0f b6 c0             	movzx  eax,al
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	0f 84 56 01 00 00    	je     c0008d8c <KeLoadTimezoneStrings()+0x32a>
c0008c36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c39:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008c40:	83 ec 08             	sub    esp,0x8
c0008c43:	68 2e 37 02 c0       	push   0xc002372e
c0008c48:	50                   	push   eax
c0008c49:	e8 f2 7b ff ff       	call   c0000840 <strcat>
c0008c4e:	83 c4 10             	add    esp,0x10
c0008c51:	eb bc                	jmp    c0008c0f <KeLoadTimezoneStrings()+0x1ad>
c0008c53:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c56:	0f be c0             	movsx  eax,al
c0008c59:	83 f8 0a             	cmp    eax,0xa
c0008c5c:	0f 85 9b 00 00 00    	jne    c0008cfd <KeLoadTimezoneStrings()+0x29b>
c0008c62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c65:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 fb 78 ff ff       	call   c0000570 <strlen>
c0008c75:	83 c4 10             	add    esp,0x10
c0008c78:	83 f8 35             	cmp    eax,0x35
c0008c7b:	0f 96 c0             	setbe  al
c0008c7e:	0f b6 c0             	movzx  eax,al
c0008c81:	85 c0                	test   eax,eax
c0008c83:	74 1d                	je     c0008ca2 <KeLoadTimezoneStrings()+0x240>
c0008c85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c88:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008c8f:	83 ec 08             	sub    esp,0x8
c0008c92:	68 2e 37 02 c0       	push   0xc002372e
c0008c97:	50                   	push   eax
c0008c98:	e8 a3 7b ff ff       	call   c0000840 <strcat>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	eb c0                	jmp    c0008c62 <KeLoadTimezoneStrings()+0x200>
c0008ca2:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0008ca6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008ca9:	89 c2                	mov    edx,eax
c0008cab:	c1 fa 1f             	sar    edx,0x1f
c0008cae:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0008cb1:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0008cb4:	39 c8                	cmp    eax,ecx
c0008cb6:	89 d0                	mov    eax,edx
c0008cb8:	19 d8                	sbb    eax,ebx
c0008cba:	0f 82 d2 00 00 00    	jb     c0008d92 <KeLoadTimezoneStrings()+0x330>
c0008cc0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008cc3:	a3 24 c3 02 c0       	mov    ds:0xc002c324,eax
c0008cc8:	83 ec 08             	sub    esp,0x8
c0008ccb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008cce:	68 30 37 02 c0       	push   0xc0023730
c0008cd3:	e8 8c e2 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008cd8:	83 c4 10             	add    esp,0x10
c0008cdb:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008ce0:	83 ec 08             	sub    esp,0x8
c0008ce3:	50                   	push   eax
c0008ce4:	68 45 37 02 c0       	push   0xc0023745
c0008ce9:	e8 76 e2 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008cee:	83 c4 10             	add    esp,0x10
c0008cf1:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0008cf8:	e9 9b 00 00 00       	jmp    c0008d98 <KeLoadTimezoneStrings()+0x336>
c0008cfd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d00:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d07:	83 ec 0c             	sub    esp,0xc
c0008d0a:	50                   	push   eax
c0008d0b:	e8 60 78 ff ff       	call   c0000570 <strlen>
c0008d10:	83 c4 10             	add    esp,0x10
c0008d13:	83 f8 31             	cmp    eax,0x31
c0008d16:	0f 96 c0             	setbe  al
c0008d19:	0f b6 c0             	movzx  eax,al
c0008d1c:	85 c0                	test   eax,eax
c0008d1e:	74 1f                	je     c0008d3f <KeLoadTimezoneStrings()+0x2dd>
c0008d20:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d23:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d2a:	83 ec 08             	sub    esp,0x8
c0008d2d:	8d 55 c6             	lea    edx,[ebp-0x3a]
c0008d30:	52                   	push   edx
c0008d31:	50                   	push   eax
c0008d32:	e8 09 7b ff ff       	call   c0000840 <strcat>
c0008d37:	83 c4 10             	add    esp,0x10
c0008d3a:	e9 9d fe ff ff       	jmp    c0008bdc <KeLoadTimezoneStrings()+0x17a>
c0008d3f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d42:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d49:	83 ec 0c             	sub    esp,0xc
c0008d4c:	50                   	push   eax
c0008d4d:	e8 1e 78 ff ff       	call   c0000570 <strlen>
c0008d52:	83 c4 10             	add    esp,0x10
c0008d55:	83 f8 32             	cmp    eax,0x32
c0008d58:	0f 94 c0             	sete   al
c0008d5b:	0f b6 c0             	movzx  eax,al
c0008d5e:	85 c0                	test   eax,eax
c0008d60:	0f 84 76 fe ff ff    	je     c0008bdc <KeLoadTimezoneStrings()+0x17a>
c0008d66:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d69:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d70:	83 ec 08             	sub    esp,0x8
c0008d73:	68 49 37 02 c0       	push   0xc0023749
c0008d78:	50                   	push   eax
c0008d79:	e8 c2 7a ff ff       	call   c0000840 <strcat>
c0008d7e:	83 c4 10             	add    esp,0x10
c0008d81:	e9 56 fe ff ff       	jmp    c0008bdc <KeLoadTimezoneStrings()+0x17a>
c0008d86:	90                   	nop
c0008d87:	e9 50 fe ff ff       	jmp    c0008bdc <KeLoadTimezoneStrings()+0x17a>
c0008d8c:	90                   	nop
c0008d8d:	e9 4a fe ff ff       	jmp    c0008bdc <KeLoadTimezoneStrings()+0x17a>
c0008d92:	90                   	nop
c0008d93:	e9 44 fe ff ff       	jmp    c0008bdc <KeLoadTimezoneStrings()+0x17a>
c0008d98:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008d9d:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008da0:	7d 49                	jge    c0008deb <KeLoadTimezoneStrings()+0x389>
c0008da2:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008da7:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008daa:	0f 9c c0             	setl   al
c0008dad:	0f b6 d0             	movzx  edx,al
c0008db0:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008db5:	52                   	push   edx
c0008db6:	50                   	push   eax
c0008db7:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dba:	68 4e 37 02 c0       	push   0xc002374e
c0008dbf:	e8 a0 e1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008dc4:	83 c4 10             	add    esp,0x10
c0008dc7:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0008dca:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008dd1:	83 ec 04             	sub    esp,0x4
c0008dd4:	50                   	push   eax
c0008dd5:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dd8:	68 5c 37 02 c0       	push   0xc002375c
c0008ddd:	e8 82 e1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008de2:	83 c4 10             	add    esp,0x10
c0008de5:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
c0008de9:	eb ad                	jmp    c0008d98 <KeLoadTimezoneStrings()+0x336>
c0008deb:	90                   	nop
c0008dec:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0008def:	c9                   	leave  
c0008df0:	c3                   	ret    

c0008df1 <KeGetTimezoneStringFromID(int)>:
c0008df1:	55                   	push   ebp
c0008df2:	89 e5                	mov    ebp,esp
c0008df4:	83 ec 08             	sub    esp,0x8
c0008df7:	83 ec 08             	sub    esp,0x8
c0008dfa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008dfd:	68 65 37 02 c0       	push   0xc0023765
c0008e02:	e8 5d e1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008e07:	83 c4 10             	add    esp,0x10
c0008e0a:	a0 20 c3 02 c0       	mov    al,ds:0xc002c320
c0008e0f:	83 f0 01             	xor    eax,0x1
c0008e12:	0f b6 c0             	movzx  eax,al
c0008e15:	85 c0                	test   eax,eax
c0008e17:	74 15                	je     c0008e2e <KeGetTimezoneStringFromID(int)+0x3d>
c0008e19:	e8 44 fc ff ff       	call   c0008a62 <KeLoadTimezoneStrings()>
c0008e1e:	83 ec 0c             	sub    esp,0xc
c0008e21:	68 83 37 02 c0       	push   0xc0023783
c0008e26:	e8 39 e1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008e2b:	83 c4 10             	add    esp,0x10
c0008e2e:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008e33:	83 ec 04             	sub    esp,0x4
c0008e36:	50                   	push   eax
c0008e37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e3a:	68 94 37 02 c0       	push   0xc0023794
c0008e3f:	e8 20 e1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008e44:	83 c4 10             	add    esp,0x10
c0008e47:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008e4c:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
c0008e4f:	7d 06                	jge    c0008e57 <KeGetTimezoneStringFromID(int)+0x66>
c0008e51:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0008e55:	79 07                	jns    c0008e5e <KeGetTimezoneStringFromID(int)+0x6d>
c0008e57:	b8 00 00 00 00       	mov    eax,0x0
c0008e5c:	eb 2e                	jmp    c0008e8c <KeGetTimezoneStringFromID(int)+0x9b>
c0008e5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e61:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008e68:	83 c0 01             	add    eax,0x1
c0008e6b:	83 ec 04             	sub    esp,0x4
c0008e6e:	50                   	push   eax
c0008e6f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e72:	68 a7 37 02 c0       	push   0xc00237a7
c0008e77:	e8 e8 e0 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008e7c:	83 c4 10             	add    esp,0x10
c0008e7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e82:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008e89:	83 c0 01             	add    eax,0x1
c0008e8c:	c9                   	leave  
c0008e8d:	c3                   	ret    

c0008e8e <KeUpdateTimezone(char const*)>:
c0008e8e:	55                   	push   ebp
c0008e8f:	89 e5                	mov    ebp,esp
c0008e91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e94:	8a 00                	mov    al,BYTE PTR [eax]
c0008e96:	0f be c0             	movsx  eax,al
c0008e99:	83 f8 2b             	cmp    eax,0x2b
c0008e9c:	74 11                	je     c0008eaf <KeUpdateTimezone(char const*)+0x21>
c0008e9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ea1:	8a 00                	mov    al,BYTE PTR [eax]
c0008ea3:	0f be c0             	movsx  eax,al
c0008ea6:	83 f8 2d             	cmp    eax,0x2d
c0008ea9:	0f 85 be 00 00 00    	jne    c0008f6d <KeUpdateTimezone(char const*)+0xdf>
c0008eaf:	c6 05 60 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c660,0x0
c0008eb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eb9:	83 c0 02             	add    eax,0x2
c0008ebc:	8a 00                	mov    al,BYTE PTR [eax]
c0008ebe:	0f be c0             	movsx  eax,al
c0008ec1:	83 f8 2e             	cmp    eax,0x2e
c0008ec4:	75 10                	jne    c0008ed6 <KeUpdateTimezone(char const*)+0x48>
c0008ec6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ec9:	83 c0 03             	add    eax,0x3
c0008ecc:	8a 00                	mov    al,BYTE PTR [eax]
c0008ece:	0f be c0             	movsx  eax,al
c0008ed1:	83 f8 35             	cmp    eax,0x35
c0008ed4:	74 20                	je     c0008ef6 <KeUpdateTimezone(char const*)+0x68>
c0008ed6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ed9:	83 c0 03             	add    eax,0x3
c0008edc:	8a 00                	mov    al,BYTE PTR [eax]
c0008ede:	0f be c0             	movsx  eax,al
c0008ee1:	83 f8 2e             	cmp    eax,0x2e
c0008ee4:	75 14                	jne    c0008efa <KeUpdateTimezone(char const*)+0x6c>
c0008ee6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ee9:	83 c0 04             	add    eax,0x4
c0008eec:	8a 00                	mov    al,BYTE PTR [eax]
c0008eee:	0f be c0             	movsx  eax,al
c0008ef1:	83 f8 35             	cmp    eax,0x35
c0008ef4:	75 04                	jne    c0008efa <KeUpdateTimezone(char const*)+0x6c>
c0008ef6:	b0 01                	mov    al,0x1
c0008ef8:	eb 02                	jmp    c0008efc <KeUpdateTimezone(char const*)+0x6e>
c0008efa:	b0 00                	mov    al,0x0
c0008efc:	a2 61 c6 02 c0       	mov    ds:0xc002c661,al
c0008f01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f04:	83 c0 01             	add    eax,0x1
c0008f07:	8a 00                	mov    al,BYTE PTR [eax]
c0008f09:	0f be c0             	movsx  eax,al
c0008f0c:	83 e8 30             	sub    eax,0x30
c0008f0f:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f17:	83 c0 03             	add    eax,0x3
c0008f1a:	8a 00                	mov    al,BYTE PTR [eax]
c0008f1c:	0f be c0             	movsx  eax,al
c0008f1f:	83 f8 2e             	cmp    eax,0x2e
c0008f22:	75 2e                	jne    c0008f52 <KeUpdateTimezone(char const*)+0xc4>
c0008f24:	8b 15 64 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c664
c0008f2a:	89 d0                	mov    eax,edx
c0008f2c:	c1 e0 02             	shl    eax,0x2
c0008f2f:	01 d0                	add    eax,edx
c0008f31:	01 c0                	add    eax,eax
c0008f33:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f3b:	83 c0 02             	add    eax,0x2
c0008f3e:	8a 00                	mov    al,BYTE PTR [eax]
c0008f40:	0f be c0             	movsx  eax,al
c0008f43:	8d 50 d0             	lea    edx,[eax-0x30]
c0008f46:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0008f4b:	01 d0                	add    eax,edx
c0008f4d:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f55:	8a 00                	mov    al,BYTE PTR [eax]
c0008f57:	0f be c0             	movsx  eax,al
c0008f5a:	83 f8 2d             	cmp    eax,0x2d
c0008f5d:	75 26                	jne    c0008f85 <KeUpdateTimezone(char const*)+0xf7>
c0008f5f:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0008f64:	f7 d8                	neg    eax
c0008f66:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f6b:	eb 18                	jmp    c0008f85 <KeUpdateTimezone(char const*)+0xf7>
c0008f6d:	c6 05 60 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c660,0x0
c0008f74:	c6 05 61 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c661,0x0
c0008f7b:	c7 05 64 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c664,0x0
c0008f85:	90                   	nop
c0008f86:	5d                   	pop    ebp
c0008f87:	c3                   	ret    

c0008f88 <KeSetTimezone(char const*)>:
c0008f88:	55                   	push   ebp
c0008f89:	89 e5                	mov    ebp,esp
c0008f8b:	83 ec 18             	sub    esp,0x18
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	68 b4 37 02 c0       	push   0xc00237b4
c0008f96:	e8 15 44 00 00       	call   c000d3b0 <CmOpen(char const*)>
c0008f9b:	83 c4 10             	add    esp,0x10
c0008f9e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008fa1:	83 ec 08             	sub    esp,0x8
c0008fa4:	68 d9 37 02 c0       	push   0xc00237d9
c0008fa9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fac:	e8 ff 4f 00 00       	call   c000dfb0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008fb1:	83 c4 10             	add    esp,0x10
c0008fb4:	83 ec 04             	sub    esp,0x4
c0008fb7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fba:	50                   	push   eax
c0008fbb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fbe:	e8 bf 48 00 00       	call   c000d882 <CmSetString(Reghive_Tag*, int, char const*)>
c0008fc3:	83 c4 10             	add    esp,0x10
c0008fc6:	83 ec 0c             	sub    esp,0xc
c0008fc9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fcc:	e8 fd 44 00 00       	call   c000d4ce <CmClose(Reghive_Tag*)>
c0008fd1:	83 c4 10             	add    esp,0x10
c0008fd4:	83 ec 0c             	sub    esp,0xc
c0008fd7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fda:	e8 af fe ff ff       	call   c0008e8e <KeUpdateTimezone(char const*)>
c0008fdf:	83 c4 10             	add    esp,0x10
c0008fe2:	90                   	nop
c0008fe3:	c9                   	leave  
c0008fe4:	c3                   	ret    

c0008fe5 <KeSetTimezone(int)>:
c0008fe5:	55                   	push   ebp
c0008fe6:	89 e5                	mov    ebp,esp
c0008fe8:	83 ec 18             	sub    esp,0x18
c0008feb:	83 ec 0c             	sub    esp,0xc
c0008fee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008ff1:	e8 fb fd ff ff       	call   c0008df1 <KeGetTimezoneStringFromID(int)>
c0008ff6:	83 c4 10             	add    esp,0x10
c0008ff9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008ffc:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009000:	74 12                	je     c0009014 <KeSetTimezone(int)+0x2f>
c0009002:	83 ec 0c             	sub    esp,0xc
c0009005:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009008:	e8 7b ff ff ff       	call   c0008f88 <KeSetTimezone(char const*)>
c000900d:	83 c4 10             	add    esp,0x10
c0009010:	b0 01                	mov    al,0x1
c0009012:	eb 02                	jmp    c0009016 <KeSetTimezone(int)+0x31>
c0009014:	b0 00                	mov    al,0x0
c0009016:	c9                   	leave  
c0009017:	c3                   	ret    

c0009018 <KeLoadTimezone()>:
c0009018:	55                   	push   ebp
c0009019:	89 e5                	mov    ebp,esp
c000901b:	81 ec 68 02 00 00    	sub    esp,0x268
c0009021:	c6 85 98 fd ff ff 00 	mov    BYTE PTR [ebp-0x268],0x0
c0009028:	83 ec 0c             	sub    esp,0xc
c000902b:	68 b4 37 02 c0       	push   0xc00237b4
c0009030:	e8 7b 43 00 00       	call   c000d3b0 <CmOpen(char const*)>
c0009035:	83 c4 10             	add    esp,0x10
c0009038:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000903b:	83 ec 08             	sub    esp,0x8
c000903e:	68 d9 37 02 c0       	push   0xc00237d9
c0009043:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009046:	e8 65 4f 00 00       	call   c000dfb0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000904b:	83 c4 10             	add    esp,0x10
c000904e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009051:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009055:	7e 18                	jle    c000906f <KeLoadTimezone()+0x57>
c0009057:	83 ec 04             	sub    esp,0x4
c000905a:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009060:	50                   	push   eax
c0009061:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009064:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009067:	e8 b4 44 00 00       	call   c000d520 <CmGetString(Reghive_Tag*, int, char*)>
c000906c:	83 c4 10             	add    esp,0x10
c000906f:	83 ec 0c             	sub    esp,0xc
c0009072:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009075:	e8 54 44 00 00       	call   c000d4ce <CmClose(Reghive_Tag*)>
c000907a:	83 c4 10             	add    esp,0x10
c000907d:	83 ec 0c             	sub    esp,0xc
c0009080:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009086:	50                   	push   eax
c0009087:	e8 02 fe ff ff       	call   c0008e8e <KeUpdateTimezone(char const*)>
c000908c:	83 c4 10             	add    esp,0x10
c000908f:	90                   	nop
c0009090:	c9                   	leave  
c0009091:	c3                   	ret    

c0009092 <Clock::Clock(char const*)>:
c0009092:	83 ec 0c             	sub    esp,0xc
c0009095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009099:	83 ec 08             	sub    esp,0x8
c000909c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090a0:	50                   	push   eax
c00090a1:	e8 ec 0a 00 00       	call   c0009b92 <Device::Device(char const*)>
c00090a6:	83 c4 10             	add    esp,0x10
c00090a9:	ba 38 38 02 c0       	mov    edx,0xc0023838
c00090ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090b2:	89 10                	mov    DWORD PTR [eax],edx
c00090b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090b8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00090c2:	90                   	nop
c00090c3:	83 c4 0c             	add    esp,0xc
c00090c6:	c3                   	ret    
c00090c7:	90                   	nop

c00090c8 <Clock::~Clock()>:
c00090c8:	83 ec 0c             	sub    esp,0xc
c00090cb:	ba 38 38 02 c0       	mov    edx,0xc0023838
c00090d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d4:	89 10                	mov    DWORD PTR [eax],edx
c00090d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090da:	83 ec 0c             	sub    esp,0xc
c00090dd:	50                   	push   eax
c00090de:	e8 4f 08 00 00       	call   c0009932 <Device::~Device()>
c00090e3:	83 c4 10             	add    esp,0x10
c00090e6:	90                   	nop
c00090e7:	83 c4 0c             	add    esp,0xc
c00090ea:	c3                   	ret    
c00090eb:	90                   	nop

c00090ec <Clock::~Clock()>:
c00090ec:	83 ec 0c             	sub    esp,0xc
c00090ef:	83 ec 0c             	sub    esp,0xc
c00090f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090f6:	e8 cd ff ff ff       	call   c00090c8 <Clock::~Clock()>
c00090fb:	83 c4 10             	add    esp,0x10
c00090fe:	83 ec 08             	sub    esp,0x8
c0009101:	68 58 01 00 00       	push   0x158
c0009106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000910a:	e8 4c 42 00 00       	call   c000d35b <operator delete(void*, unsigned long)>
c000910f:	83 c4 10             	add    esp,0x10
c0009112:	83 c4 0c             	add    esp,0xc
c0009115:	c3                   	ret    

c0009116 <Clock::timeInSecondsLocal()>:
c0009116:	55                   	push   ebp
c0009117:	89 e5                	mov    ebp,esp
c0009119:	53                   	push   ebx
c000911a:	83 ec 04             	sub    esp,0x4
c000911d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009120:	8b 00                	mov    eax,DWORD PTR [eax]
c0009122:	83 c0 24             	add    eax,0x24
c0009125:	8b 00                	mov    eax,DWORD PTR [eax]
c0009127:	83 ec 0c             	sub    esp,0xc
c000912a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000912d:	ff d0                	call   eax
c000912f:	83 c4 10             	add    esp,0x10
c0009132:	89 c1                	mov    ecx,eax
c0009134:	89 d3                	mov    ebx,edx
c0009136:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c000913b:	0f b6 d0             	movzx  edx,al
c000913e:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0009143:	01 c2                	add    edx,eax
c0009145:	89 d0                	mov    eax,edx
c0009147:	01 c0                	add    eax,eax
c0009149:	01 d0                	add    eax,edx
c000914b:	01 c0                	add    eax,eax
c000914d:	01 d0                	add    eax,edx
c000914f:	c1 e0 05             	shl    eax,0x5
c0009152:	01 d0                	add    eax,edx
c0009154:	c1 e0 04             	shl    eax,0x4
c0009157:	89 c2                	mov    edx,eax
c0009159:	c1 fa 1f             	sar    edx,0x1f
c000915c:	01 c1                	add    ecx,eax
c000915e:	11 d3                	adc    ebx,edx
c0009160:	a0 61 c6 02 c0       	mov    al,ds:0xc002c661
c0009165:	0f b6 c0             	movzx  eax,al
c0009168:	85 c0                	test   eax,eax
c000916a:	74 0c                	je     c0009178 <Clock::timeInSecondsLocal()+0x62>
c000916c:	b8 08 07 00 00       	mov    eax,0x708
c0009171:	ba 00 00 00 00       	mov    edx,0x0
c0009176:	eb 0a                	jmp    c0009182 <Clock::timeInSecondsLocal()+0x6c>
c0009178:	b8 00 00 00 00       	mov    eax,0x0
c000917d:	ba 00 00 00 00       	mov    edx,0x0
c0009182:	01 c8                	add    eax,ecx
c0009184:	11 da                	adc    edx,ebx
c0009186:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0009189:	c9                   	leave  
c000918a:	c3                   	ret    
c000918b:	90                   	nop

c000918c <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000918c:	55                   	push   ebp
c000918d:	89 e5                	mov    ebp,esp
c000918f:	56                   	push   esi
c0009190:	53                   	push   ebx
c0009191:	83 ec 10             	sub    esp,0x10
c0009194:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009197:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000919a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000919d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00091a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00091a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00091a5:	83 c0 2c             	add    eax,0x2c
c00091a8:	8b 30                	mov    esi,DWORD PTR [eax]
c00091aa:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c00091af:	0f b6 d0             	movzx  edx,al
c00091b2:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c00091b7:	01 c2                	add    edx,eax
c00091b9:	89 d0                	mov    eax,edx
c00091bb:	01 c0                	add    eax,eax
c00091bd:	01 d0                	add    eax,edx
c00091bf:	01 c0                	add    eax,eax
c00091c1:	01 d0                	add    eax,edx
c00091c3:	c1 e0 05             	shl    eax,0x5
c00091c6:	01 d0                	add    eax,edx
c00091c8:	c1 e0 04             	shl    eax,0x4
c00091cb:	89 c2                	mov    edx,eax
c00091cd:	c1 fa 1f             	sar    edx,0x1f
c00091d0:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00091d3:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
c00091d6:	29 c1                	sub    ecx,eax
c00091d8:	19 d3                	sbb    ebx,edx
c00091da:	a0 61 c6 02 c0       	mov    al,ds:0xc002c661
c00091df:	0f b6 c0             	movzx  eax,al
c00091e2:	85 c0                	test   eax,eax
c00091e4:	74 0c                	je     c00091f2 <Clock::setTimeInSecondsLocal(unsigned long long)+0x66>
c00091e6:	b8 08 07 00 00       	mov    eax,0x708
c00091eb:	ba 00 00 00 00       	mov    edx,0x0
c00091f0:	eb 0a                	jmp    c00091fc <Clock::setTimeInSecondsLocal(unsigned long long)+0x70>
c00091f2:	b8 00 00 00 00       	mov    eax,0x0
c00091f7:	ba 00 00 00 00       	mov    edx,0x0
c00091fc:	29 c1                	sub    ecx,eax
c00091fe:	19 d3                	sbb    ebx,edx
c0009200:	89 c8                	mov    eax,ecx
c0009202:	89 da                	mov    edx,ebx
c0009204:	83 ec 04             	sub    esp,0x4
c0009207:	52                   	push   edx
c0009208:	50                   	push   eax
c0009209:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000920c:	ff d6                	call   esi
c000920e:	83 c4 10             	add    esp,0x10
c0009211:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009214:	5b                   	pop    ebx
c0009215:	5e                   	pop    esi
c0009216:	5d                   	pop    ebp
c0009217:	c3                   	ret    

c0009218 <KeDatetimeToSeconds(datetime_t)>:
c0009218:	55                   	push   ebp
c0009219:	89 e5                	mov    ebp,esp
c000921b:	53                   	push   ebx
c000921c:	83 ec 24             	sub    esp,0x24
c000921f:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009223:	2d 6c 07 00 00       	sub    eax,0x76c
c0009228:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c000922c:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c000922f:	83 e8 01             	sub    eax,0x1
c0009232:	88 45 09             	mov    BYTE PTR [ebp+0x9],al
c0009235:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c000923c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0009243:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000924a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0009251:	8a 45 0e             	mov    al,BYTE PTR [ebp+0xe]
c0009254:	0f b6 c8             	movzx  ecx,al
c0009257:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000925a:	0f b6 d0             	movzx  edx,al
c000925d:	89 d0                	mov    eax,edx
c000925f:	01 c0                	add    eax,eax
c0009261:	01 d0                	add    eax,edx
c0009263:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000926a:	01 d0                	add    eax,edx
c000926c:	c1 e0 02             	shl    eax,0x2
c000926f:	01 c1                	add    ecx,eax
c0009271:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0009274:	0f b6 d0             	movzx  edx,al
c0009277:	89 d0                	mov    eax,edx
c0009279:	01 c0                	add    eax,eax
c000927b:	01 d0                	add    eax,edx
c000927d:	01 c0                	add    eax,eax
c000927f:	01 d0                	add    eax,edx
c0009281:	c1 e0 05             	shl    eax,0x5
c0009284:	01 d0                	add    eax,edx
c0009286:	c1 e0 04             	shl    eax,0x4
c0009289:	01 c8                	add    eax,ecx
c000928b:	89 c2                	mov    edx,eax
c000928d:	c1 fa 1f             	sar    edx,0x1f
c0009290:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0009293:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009296:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
c0009299:	0f b6 c0             	movzx  eax,al
c000929c:	83 e8 01             	sub    eax,0x1
c000929f:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00092a2:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00092a5:	0f b6 c0             	movzx  eax,al
c00092a8:	8b 04 85 00 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc800]
c00092af:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00092b2:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00092b5:	0f b6 c0             	movzx  eax,al
c00092b8:	83 f8 01             	cmp    eax,0x1
c00092bb:	76 7c                	jbe    c0009339 <KeDatetimeToSeconds(datetime_t)+0x121>
c00092bd:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092c1:	0f b7 c0             	movzx  eax,ax
c00092c4:	83 e0 03             	and    eax,0x3
c00092c7:	85 c0                	test   eax,eax
c00092c9:	75 6e                	jne    c0009339 <KeDatetimeToSeconds(datetime_t)+0x121>
c00092cb:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092cf:	0f b7 c8             	movzx  ecx,ax
c00092d2:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00092d7:	89 c8                	mov    eax,ecx
c00092d9:	f7 e2                	mul    edx
c00092db:	c1 ea 05             	shr    edx,0x5
c00092de:	89 d0                	mov    eax,edx
c00092e0:	c1 e0 02             	shl    eax,0x2
c00092e3:	01 d0                	add    eax,edx
c00092e5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00092ec:	01 d0                	add    eax,edx
c00092ee:	c1 e0 02             	shl    eax,0x2
c00092f1:	29 c1                	sub    ecx,eax
c00092f3:	89 c8                	mov    eax,ecx
c00092f5:	0f b7 c0             	movzx  eax,ax
c00092f8:	85 c0                	test   eax,eax
c00092fa:	75 39                	jne    c0009335 <KeDatetimeToSeconds(datetime_t)+0x11d>
c00092fc:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009300:	0f b7 c0             	movzx  eax,ax
c0009303:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009309:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000930e:	f7 e9                	imul   ecx
c0009310:	c1 fa 07             	sar    edx,0x7
c0009313:	89 c8                	mov    eax,ecx
c0009315:	c1 f8 1f             	sar    eax,0x1f
c0009318:	29 c2                	sub    edx,eax
c000931a:	89 d0                	mov    eax,edx
c000931c:	c1 e0 02             	shl    eax,0x2
c000931f:	01 d0                	add    eax,edx
c0009321:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009328:	01 d0                	add    eax,edx
c000932a:	c1 e0 04             	shl    eax,0x4
c000932d:	29 c1                	sub    ecx,eax
c000932f:	89 ca                	mov    edx,ecx
c0009331:	85 d2                	test   edx,edx
c0009333:	75 04                	jne    c0009339 <KeDatetimeToSeconds(datetime_t)+0x121>
c0009335:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009339:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000933d:	0f b7 c0             	movzx  eax,ax
c0009340:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009343:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009346:	83 f8 46             	cmp    eax,0x46
c0009349:	0f 9f c0             	setg   al
c000934c:	0f b6 c0             	movzx  eax,al
c000934f:	85 c0                	test   eax,eax
c0009351:	0f 84 a4 00 00 00    	je     c00093fb <KeDatetimeToSeconds(datetime_t)+0x1e3>
c0009357:	c7 45 e0 46 00 00 00 	mov    DWORD PTR [ebp-0x20],0x46
c000935e:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009362:	0f b7 d0             	movzx  edx,ax
c0009365:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009368:	39 c2                	cmp    edx,eax
c000936a:	0f 8e b8 01 00 00    	jle    c0009528 <KeDatetimeToSeconds(datetime_t)+0x310>
c0009370:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009373:	83 e0 03             	and    eax,0x3
c0009376:	85 c0                	test   eax,eax
c0009378:	75 6b                	jne    c00093e5 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c000937a:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000937d:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009382:	f7 e9                	imul   ecx
c0009384:	c1 fa 05             	sar    edx,0x5
c0009387:	89 c8                	mov    eax,ecx
c0009389:	c1 f8 1f             	sar    eax,0x1f
c000938c:	29 c2                	sub    edx,eax
c000938e:	89 d0                	mov    eax,edx
c0009390:	c1 e0 02             	shl    eax,0x2
c0009393:	01 d0                	add    eax,edx
c0009395:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000939c:	01 d0                	add    eax,edx
c000939e:	c1 e0 02             	shl    eax,0x2
c00093a1:	29 c1                	sub    ecx,eax
c00093a3:	89 ca                	mov    edx,ecx
c00093a5:	85 d2                	test   edx,edx
c00093a7:	75 35                	jne    c00093de <KeDatetimeToSeconds(datetime_t)+0x1c6>
c00093a9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093ac:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00093b2:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00093b7:	f7 e9                	imul   ecx
c00093b9:	c1 fa 07             	sar    edx,0x7
c00093bc:	89 c8                	mov    eax,ecx
c00093be:	c1 f8 1f             	sar    eax,0x1f
c00093c1:	29 c2                	sub    edx,eax
c00093c3:	89 d0                	mov    eax,edx
c00093c5:	c1 e0 02             	shl    eax,0x2
c00093c8:	01 d0                	add    eax,edx
c00093ca:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00093d1:	01 d0                	add    eax,edx
c00093d3:	c1 e0 04             	shl    eax,0x4
c00093d6:	29 c1                	sub    ecx,eax
c00093d8:	89 ca                	mov    edx,ecx
c00093da:	85 d2                	test   edx,edx
c00093dc:	75 07                	jne    c00093e5 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c00093de:	b8 6e 01 00 00       	mov    eax,0x16e
c00093e3:	eb 05                	jmp    c00093ea <KeDatetimeToSeconds(datetime_t)+0x1d2>
c00093e5:	b8 6d 01 00 00       	mov    eax,0x16d
c00093ea:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00093ed:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093f0:	83 c0 01             	add    eax,0x1
c00093f3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00093f6:	e9 63 ff ff ff       	jmp    c000935e <KeDatetimeToSeconds(datetime_t)+0x146>
c00093fb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093fe:	83 f8 45             	cmp    eax,0x45
c0009401:	0f 8f 21 01 00 00    	jg     c0009528 <KeDatetimeToSeconds(datetime_t)+0x310>
c0009407:	c7 45 e0 45 00 00 00 	mov    DWORD PTR [ebp-0x20],0x45
c000940e:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009412:	0f b7 d0             	movzx  edx,ax
c0009415:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009418:	39 c2                	cmp    edx,eax
c000941a:	0f 8d 8b 00 00 00    	jge    c00094ab <KeDatetimeToSeconds(datetime_t)+0x293>
c0009420:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009423:	83 e0 03             	and    eax,0x3
c0009426:	85 c0                	test   eax,eax
c0009428:	75 6b                	jne    c0009495 <KeDatetimeToSeconds(datetime_t)+0x27d>
c000942a:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000942d:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009432:	f7 e9                	imul   ecx
c0009434:	c1 fa 05             	sar    edx,0x5
c0009437:	89 c8                	mov    eax,ecx
c0009439:	c1 f8 1f             	sar    eax,0x1f
c000943c:	29 c2                	sub    edx,eax
c000943e:	89 d0                	mov    eax,edx
c0009440:	c1 e0 02             	shl    eax,0x2
c0009443:	01 d0                	add    eax,edx
c0009445:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000944c:	01 d0                	add    eax,edx
c000944e:	c1 e0 02             	shl    eax,0x2
c0009451:	29 c1                	sub    ecx,eax
c0009453:	89 ca                	mov    edx,ecx
c0009455:	85 d2                	test   edx,edx
c0009457:	75 35                	jne    c000948e <KeDatetimeToSeconds(datetime_t)+0x276>
c0009459:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000945c:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009462:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009467:	f7 e9                	imul   ecx
c0009469:	c1 fa 07             	sar    edx,0x7
c000946c:	89 c8                	mov    eax,ecx
c000946e:	c1 f8 1f             	sar    eax,0x1f
c0009471:	29 c2                	sub    edx,eax
c0009473:	89 d0                	mov    eax,edx
c0009475:	c1 e0 02             	shl    eax,0x2
c0009478:	01 d0                	add    eax,edx
c000947a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009481:	01 d0                	add    eax,edx
c0009483:	c1 e0 04             	shl    eax,0x4
c0009486:	29 c1                	sub    ecx,eax
c0009488:	89 ca                	mov    edx,ecx
c000948a:	85 d2                	test   edx,edx
c000948c:	75 07                	jne    c0009495 <KeDatetimeToSeconds(datetime_t)+0x27d>
c000948e:	b8 6e 01 00 00       	mov    eax,0x16e
c0009493:	eb 05                	jmp    c000949a <KeDatetimeToSeconds(datetime_t)+0x282>
c0009495:	b8 6d 01 00 00       	mov    eax,0x16d
c000949a:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c000949d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094a0:	83 e8 01             	sub    eax,0x1
c00094a3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00094a6:	e9 63 ff ff ff       	jmp    c000940e <KeDatetimeToSeconds(datetime_t)+0x1f6>
c00094ab:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094ae:	83 e0 03             	and    eax,0x3
c00094b1:	85 c0                	test   eax,eax
c00094b3:	75 6b                	jne    c0009520 <KeDatetimeToSeconds(datetime_t)+0x308>
c00094b5:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00094b8:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00094bd:	f7 e9                	imul   ecx
c00094bf:	c1 fa 05             	sar    edx,0x5
c00094c2:	89 c8                	mov    eax,ecx
c00094c4:	c1 f8 1f             	sar    eax,0x1f
c00094c7:	29 c2                	sub    edx,eax
c00094c9:	89 d0                	mov    eax,edx
c00094cb:	c1 e0 02             	shl    eax,0x2
c00094ce:	01 d0                	add    eax,edx
c00094d0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094d7:	01 d0                	add    eax,edx
c00094d9:	c1 e0 02             	shl    eax,0x2
c00094dc:	29 c1                	sub    ecx,eax
c00094de:	89 ca                	mov    edx,ecx
c00094e0:	85 d2                	test   edx,edx
c00094e2:	75 35                	jne    c0009519 <KeDatetimeToSeconds(datetime_t)+0x301>
c00094e4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094e7:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00094ed:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00094f2:	f7 e9                	imul   ecx
c00094f4:	c1 fa 07             	sar    edx,0x7
c00094f7:	89 c8                	mov    eax,ecx
c00094f9:	c1 f8 1f             	sar    eax,0x1f
c00094fc:	29 c2                	sub    edx,eax
c00094fe:	89 d0                	mov    eax,edx
c0009500:	c1 e0 02             	shl    eax,0x2
c0009503:	01 d0                	add    eax,edx
c0009505:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000950c:	01 d0                	add    eax,edx
c000950e:	c1 e0 04             	shl    eax,0x4
c0009511:	29 c1                	sub    ecx,eax
c0009513:	89 ca                	mov    edx,ecx
c0009515:	85 d2                	test   edx,edx
c0009517:	75 07                	jne    c0009520 <KeDatetimeToSeconds(datetime_t)+0x308>
c0009519:	b8 6e 01 00 00       	mov    eax,0x16e
c000951e:	eb 05                	jmp    c0009525 <KeDatetimeToSeconds(datetime_t)+0x30d>
c0009520:	b8 6d 01 00 00       	mov    eax,0x16d
c0009525:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c0009528:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000952b:	89 c2                	mov    edx,eax
c000952d:	c1 fa 1f             	sar    edx,0x1f
c0009530:	69 da 80 51 01 00    	imul   ebx,edx,0x15180
c0009536:	6b c8 00             	imul   ecx,eax,0x0
c0009539:	01 d9                	add    ecx,ebx
c000953b:	bb 80 51 01 00       	mov    ebx,0x15180
c0009540:	f7 e3                	mul    ebx
c0009542:	01 d1                	add    ecx,edx
c0009544:	89 ca                	mov    edx,ecx
c0009546:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0009549:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c000954c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000954f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0009552:	83 c4 24             	add    esp,0x24
c0009555:	5b                   	pop    ebx
c0009556:	5d                   	pop    ebp
c0009557:	c3                   	ret    

c0009558 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0009558:	55                   	push   ebp
c0009559:	89 e5                	mov    ebp,esp
c000955b:	56                   	push   esi
c000955c:	53                   	push   ebx
c000955d:	83 ec 20             	sub    esp,0x20
c0009560:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0009563:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009566:	e8 ad fc ff ff       	call   c0009218 <KeDatetimeToSeconds(datetime_t)>
c000956b:	83 c4 08             	add    esp,0x8
c000956e:	89 c3                	mov    ebx,eax
c0009570:	89 d6                	mov    esi,edx
c0009572:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c0009577:	0f b6 d0             	movzx  edx,al
c000957a:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c000957f:	01 c2                	add    edx,eax
c0009581:	89 d0                	mov    eax,edx
c0009583:	01 c0                	add    eax,eax
c0009585:	01 d0                	add    eax,edx
c0009587:	01 c0                	add    eax,eax
c0009589:	01 d0                	add    eax,edx
c000958b:	c1 e0 05             	shl    eax,0x5
c000958e:	01 d0                	add    eax,edx
c0009590:	c1 e0 04             	shl    eax,0x4
c0009593:	89 c2                	mov    edx,eax
c0009595:	c1 fa 1f             	sar    edx,0x1f
c0009598:	29 c3                	sub    ebx,eax
c000959a:	19 d6                	sbb    esi,edx
c000959c:	a0 61 c6 02 c0       	mov    al,ds:0xc002c661
c00095a1:	0f b6 c0             	movzx  eax,al
c00095a4:	85 c0                	test   eax,eax
c00095a6:	74 0c                	je     c00095b4 <Clock::setTimeInDatetimeLocal(datetime_t)+0x5c>
c00095a8:	b8 08 07 00 00       	mov    eax,0x708
c00095ad:	ba 00 00 00 00       	mov    edx,0x0
c00095b2:	eb 0a                	jmp    c00095be <Clock::setTimeInDatetimeLocal(datetime_t)+0x66>
c00095b4:	b8 00 00 00 00       	mov    eax,0x0
c00095b9:	ba 00 00 00 00       	mov    edx,0x0
c00095be:	29 c3                	sub    ebx,eax
c00095c0:	19 d6                	sbb    esi,edx
c00095c2:	89 d8                	mov    eax,ebx
c00095c4:	89 f2                	mov    edx,esi
c00095c6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00095c9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00095cc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00095cf:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00095d2:	89 d0                	mov    eax,edx
c00095d4:	31 d2                	xor    edx,edx
c00095d6:	89 c3                	mov    ebx,eax
c00095d8:	89 d6                	mov    esi,edx
c00095da:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00095dd:	80 e5 ff             	and    ch,0xff
c00095e0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00095e3:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c00095e6:	83 e1 00             	and    ecx,0x0
c00095e9:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00095ec:	83 ec 0c             	sub    esp,0xc
c00095ef:	56                   	push   esi
c00095f0:	53                   	push   ebx
c00095f1:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00095f4:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00095f7:	68 ee 37 02 c0       	push   0xc00237ee
c00095fc:	e8 63 d9 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0009601:	83 c4 20             	add    esp,0x20
c0009604:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009607:	8b 00                	mov    eax,DWORD PTR [eax]
c0009609:	83 c0 2c             	add    eax,0x2c
c000960c:	8b 00                	mov    eax,DWORD PTR [eax]
c000960e:	83 ec 04             	sub    esp,0x4
c0009611:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009614:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009617:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000961a:	ff d0                	call   eax
c000961c:	83 c4 10             	add    esp,0x10
c000961f:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009622:	5b                   	pop    ebx
c0009623:	5e                   	pop    esi
c0009624:	5d                   	pop    ebp
c0009625:	c3                   	ret    

c0009626 <KeSecondsToDatetime(unsigned long long)>:
c0009626:	55                   	push   ebp
c0009627:	89 e5                	mov    ebp,esp
c0009629:	83 ec 48             	sub    esp,0x48
c000962c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000962f:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0009632:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009635:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0009638:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c000963b:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c000963e:	6a 00                	push   0x0
c0009640:	68 80 51 01 00       	push   0x15180
c0009645:	52                   	push   edx
c0009646:	50                   	push   eax
c0009647:	e8 58 86 01 00       	call   c0021ca4 <__udivdi3>
c000964c:	83 c4 10             	add    esp,0x10
c000964f:	05 6c fa 0a 00       	add    eax,0xafa6c
c0009654:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009657:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c000965a:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c000965d:	6a 00                	push   0x0
c000965f:	68 80 51 01 00       	push   0x15180
c0009664:	52                   	push   edx
c0009665:	50                   	push   eax
c0009666:	e8 39 87 01 00       	call   c0021da4 <__umoddi3>
c000966b:	83 c4 10             	add    esp,0x10
c000966e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009671:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009675:	79 0b                	jns    c0009682 <KeSecondsToDatetime(unsigned long long)+0x5c>
c0009677:	81 45 f0 80 51 01 00 	add    DWORD PTR [ebp-0x10],0x15180
c000967e:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
c0009682:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009685:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c000968a:	89 c8                	mov    eax,ecx
c000968c:	f7 ea                	imul   edx
c000968e:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009691:	c1 f8 0b             	sar    eax,0xb
c0009694:	89 c2                	mov    edx,eax
c0009696:	89 c8                	mov    eax,ecx
c0009698:	c1 f8 1f             	sar    eax,0x1f
c000969b:	29 c2                	sub    edx,eax
c000969d:	89 d0                	mov    eax,edx
c000969f:	88 c2                	mov    dl,al
c00096a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096a4:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c00096a7:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096aa:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c00096af:	89 c8                	mov    eax,ecx
c00096b1:	f7 ea                	imul   edx
c00096b3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096b6:	c1 f8 0b             	sar    eax,0xb
c00096b9:	89 c2                	mov    edx,eax
c00096bb:	89 c8                	mov    eax,ecx
c00096bd:	c1 f8 1f             	sar    eax,0x1f
c00096c0:	29 c2                	sub    edx,eax
c00096c2:	89 d0                	mov    eax,edx
c00096c4:	01 c0                	add    eax,eax
c00096c6:	01 d0                	add    eax,edx
c00096c8:	01 c0                	add    eax,eax
c00096ca:	01 d0                	add    eax,edx
c00096cc:	c1 e0 05             	shl    eax,0x5
c00096cf:	01 d0                	add    eax,edx
c00096d1:	c1 e0 04             	shl    eax,0x4
c00096d4:	29 c1                	sub    ecx,eax
c00096d6:	89 c8                	mov    eax,ecx
c00096d8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00096db:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096de:	ba 89 88 88 88       	mov    edx,0x88888889
c00096e3:	89 c8                	mov    eax,ecx
c00096e5:	f7 ea                	imul   edx
c00096e7:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096ea:	c1 f8 05             	sar    eax,0x5
c00096ed:	89 c2                	mov    edx,eax
c00096ef:	89 c8                	mov    eax,ecx
c00096f1:	c1 f8 1f             	sar    eax,0x1f
c00096f4:	29 c2                	sub    edx,eax
c00096f6:	89 d0                	mov    eax,edx
c00096f8:	88 c2                	mov    dl,al
c00096fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096fd:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009700:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009703:	ba 89 88 88 88       	mov    edx,0x88888889
c0009708:	89 c8                	mov    eax,ecx
c000970a:	f7 ea                	imul   edx
c000970c:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000970f:	c1 f8 05             	sar    eax,0x5
c0009712:	89 c2                	mov    edx,eax
c0009714:	89 c8                	mov    eax,ecx
c0009716:	c1 f8 1f             	sar    eax,0x1f
c0009719:	29 c2                	sub    edx,eax
c000971b:	89 d0                	mov    eax,edx
c000971d:	01 c0                	add    eax,eax
c000971f:	01 d0                	add    eax,edx
c0009721:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009728:	01 d0                	add    eax,edx
c000972a:	c1 e0 02             	shl    eax,0x2
c000972d:	29 c1                	sub    ecx,eax
c000972f:	89 ca                	mov    edx,ecx
c0009731:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009734:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
c0009737:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000973b:	79 20                	jns    c000975d <KeSecondsToDatetime(unsigned long long)+0x137>
c000973d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009740:	8d 88 50 c5 fd ff    	lea    ecx,[eax-0x23ab0]
c0009746:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c000974b:	89 c8                	mov    eax,ecx
c000974d:	f7 ea                	imul   edx
c000974f:	c1 fa 0f             	sar    edx,0xf
c0009752:	89 c8                	mov    eax,ecx
c0009754:	c1 f8 1f             	sar    eax,0x1f
c0009757:	29 c2                	sub    edx,eax
c0009759:	89 d0                	mov    eax,edx
c000975b:	eb 18                	jmp    c0009775 <KeSecondsToDatetime(unsigned long long)+0x14f>
c000975d:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c0009760:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009765:	89 c8                	mov    eax,ecx
c0009767:	f7 ea                	imul   edx
c0009769:	c1 fa 0f             	sar    edx,0xf
c000976c:	89 c8                	mov    eax,ecx
c000976e:	c1 f8 1f             	sar    eax,0x1f
c0009771:	29 c2                	sub    edx,eax
c0009773:	89 d0                	mov    eax,edx
c0009775:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0009778:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000977b:	89 d0                	mov    eax,edx
c000977d:	c1 e0 03             	shl    eax,0x3
c0009780:	01 d0                	add    eax,edx
c0009782:	c1 e0 04             	shl    eax,0x4
c0009785:	01 d0                	add    eax,edx
c0009787:	c1 e0 04             	shl    eax,0x4
c000978a:	29 d0                	sub    eax,edx
c000978c:	89 c2                	mov    edx,eax
c000978e:	c1 e2 06             	shl    edx,0x6
c0009791:	29 c2                	sub    edx,eax
c0009793:	89 d0                	mov    eax,edx
c0009795:	f7 d8                	neg    eax
c0009797:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000979a:	01 d0                	add    eax,edx
c000979c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000979f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097a2:	c1 e8 02             	shr    eax,0x2
c00097a5:	ba d9 7c c6 59       	mov    edx,0x59c67cd9
c00097aa:	f7 e2                	mul    edx
c00097ac:	c1 ea 07             	shr    edx,0x7
c00097af:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097b2:	29 d0                	sub    eax,edx
c00097b4:	89 c1                	mov    ecx,eax
c00097b6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097b9:	c1 e8 02             	shr    eax,0x2
c00097bc:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c00097c1:	f7 e2                	mul    edx
c00097c3:	89 d0                	mov    eax,edx
c00097c5:	c1 e8 0b             	shr    eax,0xb
c00097c8:	01 c1                	add    ecx,eax
c00097ca:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097cd:	c1 e8 04             	shr    eax,0x4
c00097d0:	ba 41 d6 72 00       	mov    edx,0x72d641
c00097d5:	f7 e2                	mul    edx
c00097d7:	89 d0                	mov    eax,edx
c00097d9:	c1 e8 04             	shr    eax,0x4
c00097dc:	29 c1                	sub    ecx,eax
c00097de:	ba 61 f3 19 67       	mov    edx,0x6719f361
c00097e3:	89 c8                	mov    eax,ecx
c00097e5:	f7 e2                	mul    edx
c00097e7:	89 c8                	mov    eax,ecx
c00097e9:	29 d0                	sub    eax,edx
c00097eb:	d1 e8                	shr    eax,1
c00097ed:	01 d0                	add    eax,edx
c00097ef:	c1 e8 08             	shr    eax,0x8
c00097f2:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00097f5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00097f8:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00097fd:	f7 e2                	mul    edx
c00097ff:	89 d1                	mov    ecx,edx
c0009801:	c1 e9 05             	shr    ecx,0x5
c0009804:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0009807:	89 d0                	mov    eax,edx
c0009809:	c1 e0 03             	shl    eax,0x3
c000980c:	01 d0                	add    eax,edx
c000980e:	c1 e0 03             	shl    eax,0x3
c0009811:	01 d0                	add    eax,edx
c0009813:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000981a:	01 c2                	add    edx,eax
c000981c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000981f:	c1 e8 02             	shr    eax,0x2
c0009822:	01 d0                	add    eax,edx
c0009824:	29 c1                	sub    ecx,eax
c0009826:	89 ca                	mov    edx,ecx
c0009828:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000982b:	01 d0                	add    eax,edx
c000982d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009830:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0009833:	89 d0                	mov    eax,edx
c0009835:	c1 e0 02             	shl    eax,0x2
c0009838:	01 d0                	add    eax,edx
c000983a:	83 c0 02             	add    eax,0x2
c000983d:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c0009842:	f7 e2                	mul    edx
c0009844:	89 d0                	mov    eax,edx
c0009846:	c1 e8 07             	shr    eax,0x7
c0009849:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000984c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000984f:	89 d0                	mov    eax,edx
c0009851:	c1 e0 03             	shl    eax,0x3
c0009854:	01 d0                	add    eax,edx
c0009856:	01 c0                	add    eax,eax
c0009858:	01 d0                	add    eax,edx
c000985a:	c1 e0 03             	shl    eax,0x3
c000985d:	01 d0                	add    eax,edx
c000985f:	83 c0 02             	add    eax,0x2
c0009862:	ba cd cc cc cc       	mov    edx,0xcccccccd
c0009867:	f7 e2                	mul    edx
c0009869:	c1 ea 02             	shr    edx,0x2
c000986c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000986f:	29 d0                	sub    eax,edx
c0009871:	83 c0 01             	add    eax,0x1
c0009874:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0009877:	83 7d dc 09          	cmp    DWORD PTR [ebp-0x24],0x9
c000987b:	77 07                	ja     c0009884 <KeSecondsToDatetime(unsigned long long)+0x25e>
c000987d:	b8 02 00 00 00       	mov    eax,0x2
c0009882:	eb 05                	jmp    c0009889 <KeSecondsToDatetime(unsigned long long)+0x263>
c0009884:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
c0009889:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
c000988c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000988f:	89 d0                	mov    eax,edx
c0009891:	c1 e0 02             	shl    eax,0x2
c0009894:	01 d0                	add    eax,edx
c0009896:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000989d:	01 d0                	add    eax,edx
c000989f:	c1 e0 04             	shl    eax,0x4
c00098a2:	89 c2                	mov    edx,eax
c00098a4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00098a7:	01 c2                	add    edx,eax
c00098a9:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
c00098ad:	0f 96 c0             	setbe  al
c00098b0:	0f b6 c0             	movzx  eax,al
c00098b3:	01 d0                	add    eax,edx
c00098b5:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00098b8:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00098bb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00098be:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00098c2:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00098c5:	83 c0 01             	add    eax,0x1
c00098c8:	88 c2                	mov    dl,al
c00098ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098cd:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00098d0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00098d3:	88 c2                	mov    dl,al
c00098d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098d8:	88 10                	mov    BYTE PTR [eax],dl
c00098da:	90                   	nop
c00098db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098de:	c9                   	leave  
c00098df:	c2 04 00             	ret    0x4

c00098e2 <Clock::timeInDatetimeLocal()>:
c00098e2:	55                   	push   ebp
c00098e3:	89 e5                	mov    ebp,esp
c00098e5:	83 ec 08             	sub    esp,0x8
c00098e8:	83 ec 0c             	sub    esp,0xc
c00098eb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00098ee:	e8 23 f8 ff ff       	call   c0009116 <Clock::timeInSecondsLocal()>
c00098f3:	83 c4 10             	add    esp,0x10
c00098f6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00098f9:	83 ec 04             	sub    esp,0x4
c00098fc:	52                   	push   edx
c00098fd:	50                   	push   eax
c00098fe:	51                   	push   ecx
c00098ff:	e8 22 fd ff ff       	call   c0009626 <KeSecondsToDatetime(unsigned long long)>
c0009904:	83 c4 0c             	add    esp,0xc
c0009907:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000990a:	c9                   	leave  
c000990b:	c2 04 00             	ret    0x4

c000990e <Device::hibernate()>:
c000990e:	c3                   	ret    
c000990f:	90                   	nop

c0009910 <Device::wake()>:
c0009910:	c3                   	ret    
c0009911:	90                   	nop

c0009912 <Device::detect()>:
c0009912:	c3                   	ret    
c0009913:	90                   	nop

c0009914 <Device::disableLegacy()>:
c0009914:	c3                   	ret    
c0009915:	90                   	nop

c0009916 <Device::powerSaving(PowerSavingLevel)>:
c0009916:	c3                   	ret    
c0009917:	90                   	nop

c0009918 <DriverlessDevice::close(int, int, void*)>:
c0009918:	31 c0                	xor    eax,eax
c000991a:	c3                   	ret    
c000991b:	90                   	nop

c000991c <DriverlessDevice::detect()>:
c000991c:	c3                   	ret    
c000991d:	90                   	nop

c000991e <DriverlessDevice::open(int, int, void*)>:
c000991e:	83 ec 18             	sub    esp,0x18
c0009921:	68 6c 38 02 c0       	push   0xc002386c
c0009926:	e8 03 67 00 00       	call   c001002e <KePanic(char const*)>
c000992b:	83 c8 ff             	or     eax,0xffffffff
c000992e:	83 c4 1c             	add    esp,0x1c
c0009931:	c3                   	ret    

c0009932 <Device::~Device()>:
c0009932:	ba 10 39 02 c0       	mov    edx,0xc0023910
c0009937:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000993b:	89 10                	mov    DWORD PTR [eax],edx
c000993d:	90                   	nop
c000993e:	c3                   	ret    
c000993f:	90                   	nop

c0009940 <Device::~Device()>:
c0009940:	83 ec 0c             	sub    esp,0xc
c0009943:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009947:	e8 e6 ff ff ff       	call   c0009932 <Device::~Device()>
c000994c:	83 c4 04             	add    esp,0x4
c000994f:	83 ec 08             	sub    esp,0x8
c0009952:	68 58 01 00 00       	push   0x158
c0009957:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000995b:	e8 fb 39 00 00       	call   c000d35b <operator delete(void*, unsigned long)>
c0009960:	83 c4 10             	add    esp,0x10
c0009963:	83 c4 0c             	add    esp,0xc
c0009966:	c3                   	ret    
c0009967:	90                   	nop

c0009968 <Device::findAndLoadDriver()>:
c0009968:	c7 44 24 04 8a 38 02 c0 	mov    DWORD PTR [esp+0x4],0xc002388a
c0009970:	e9 ef d5 ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c0009975:	90                   	nop

c0009976 <Device::preOpenPCI(PCIDeviceInfo)>:
c0009976:	57                   	push   edi
c0009977:	b9 09 00 00 00       	mov    ecx,0x9
c000997c:	56                   	push   esi
c000997d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0009981:	8d 74 24 10          	lea    esi,[esp+0x10]
c0009985:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000998f:	81 c7 18 01 00 00    	add    edi,0x118
c0009995:	fc                   	cld    
c0009996:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0009998:	5e                   	pop    esi
c0009999:	5f                   	pop    edi
c000999a:	c3                   	ret    
c000999b:	90                   	nop

c000999c <Device::preOpenACPI(void*, char*, char*)>:
c000999c:	57                   	push   edi
c000999d:	b9 1e 00 00 00       	mov    ecx,0x1e
c00099a2:	56                   	push   esi
c00099a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099a7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00099ab:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c00099b5:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c00099bb:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c00099c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00099c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00099c7:	b9 0e 00 00 00       	mov    ecx,0xe
c00099cc:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c00099d2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00099d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00099d8:	5e                   	pop    esi
c00099d9:	5f                   	pop    edi
c00099da:	c3                   	ret    
c00099db:	90                   	nop

c00099dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00099dc:	53                   	push   ebx
c00099dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099e1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00099e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00099e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00099ed:	0f b6 c0             	movzx  eax,al
c00099f0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00099f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099f8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00099fc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009a00:	5b                   	pop    ebx
c0009a01:	e9 a5 0f 01 00       	jmp    c001a9ab <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c0009a06 <Device::getParent()>:
c0009a06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a0a:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0009a10:	c3                   	ret    
c0009a11:	90                   	nop

c0009a12 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0009a12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a16:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a1a:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0009a1f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009a23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009a27:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a2b:	e9 dd 10 01 00       	jmp    c001ab0d <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c0009a30 <Device::addChild(Device*)>:
c0009a30:	53                   	push   ebx
c0009a31:	83 ec 08             	sub    esp,0x8
c0009a34:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009a3c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009a42:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0009a48:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009a4a:	85 d2                	test   edx,edx
c0009a4c:	74 04                	je     c0009a52 <Device::addChild(Device*)+0x22>
c0009a4e:	89 d3                	mov    ebx,edx
c0009a50:	eb f6                	jmp    c0009a48 <Device::addChild(Device*)+0x18>
c0009a52:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009a55:	83 ec 0c             	sub    esp,0xc
c0009a58:	6a 08                	push   0x8
c0009a5a:	e8 88 62 00 00       	call   c000fce7 <malloc>
c0009a5f:	89 03                	mov    DWORD PTR [ebx],eax
c0009a61:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a67:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a6e:	83 c4 18             	add    esp,0x18
c0009a71:	5b                   	pop    ebx
c0009a72:	c3                   	ret    
c0009a73:	90                   	nop

c0009a74 <Device::removeAllChildren()>:
c0009a74:	56                   	push   esi
c0009a75:	53                   	push   ebx
c0009a76:	52                   	push   edx
c0009a77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009a7b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0009a81:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009a84:	74 17                	je     c0009a9d <Device::removeAllChildren()+0x29>
c0009a86:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009a89:	85 c0                	test   eax,eax
c0009a8b:	74 0c                	je     c0009a99 <Device::removeAllChildren()+0x25>
c0009a8d:	83 ec 0c             	sub    esp,0xc
c0009a90:	8b 10                	mov    edx,DWORD PTR [eax]
c0009a92:	50                   	push   eax
c0009a93:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0009a96:	83 c4 10             	add    esp,0x10
c0009a99:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009a9b:	eb e4                	jmp    c0009a81 <Device::removeAllChildren()+0xd>
c0009a9d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009aa3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009aa9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009aaf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ab6:	58                   	pop    eax
c0009ab7:	5b                   	pop    ebx
c0009ab8:	5e                   	pop    esi
c0009ab9:	c3                   	ret    

c0009aba <Device::hibernateAll()>:
c0009aba:	53                   	push   ebx
c0009abb:	83 ec 14             	sub    esp,0x14
c0009abe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ac2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009ac4:	53                   	push   ebx
c0009ac5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009ac8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009ace:	83 c4 10             	add    esp,0x10
c0009ad1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009ad4:	74 0f                	je     c0009ae5 <Device::hibernateAll()+0x2b>
c0009ad6:	83 ec 0c             	sub    esp,0xc
c0009ad9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009adc:	e8 d9 ff ff ff       	call   c0009aba <Device::hibernateAll()>
c0009ae1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009ae3:	eb e9                	jmp    c0009ace <Device::hibernateAll()+0x14>
c0009ae5:	83 c4 08             	add    esp,0x8
c0009ae8:	5b                   	pop    ebx
c0009ae9:	c3                   	ret    

c0009aea <Device::wakeAll()>:
c0009aea:	53                   	push   ebx
c0009aeb:	83 ec 14             	sub    esp,0x14
c0009aee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009af2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009af4:	53                   	push   ebx
c0009af5:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0009af8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009afe:	83 c4 10             	add    esp,0x10
c0009b01:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b04:	74 0f                	je     c0009b15 <Device::wakeAll()+0x2b>
c0009b06:	83 ec 0c             	sub    esp,0xc
c0009b09:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b0c:	e8 d9 ff ff ff       	call   c0009aea <Device::wakeAll()>
c0009b11:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b13:	eb e9                	jmp    c0009afe <Device::wakeAll()+0x14>
c0009b15:	83 c4 08             	add    esp,0x8
c0009b18:	5b                   	pop    ebx
c0009b19:	c3                   	ret    

c0009b1a <Device::detectAll()>:
c0009b1a:	53                   	push   ebx
c0009b1b:	83 ec 14             	sub    esp,0x14
c0009b1e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009b22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b24:	53                   	push   ebx
c0009b25:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0009b28:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b2e:	83 c4 10             	add    esp,0x10
c0009b31:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b34:	74 0f                	je     c0009b45 <Device::detectAll()+0x2b>
c0009b36:	83 ec 0c             	sub    esp,0xc
c0009b39:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b3c:	e8 d9 ff ff ff       	call   c0009b1a <Device::detectAll()>
c0009b41:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b43:	eb e9                	jmp    c0009b2e <Device::detectAll()+0x14>
c0009b45:	83 c4 08             	add    esp,0x8
c0009b48:	5b                   	pop    ebx
c0009b49:	c3                   	ret    

c0009b4a <Device::disableLegacyAll()>:
c0009b4a:	c3                   	ret    
c0009b4b:	90                   	nop

c0009b4c <Device::loadDriversForAll()>:
c0009b4c:	c3                   	ret    
c0009b4d:	90                   	nop

c0009b4e <Device::powerSavingAll(PowerSavingLevel)>:
c0009b4e:	56                   	push   esi
c0009b4f:	53                   	push   ebx
c0009b50:	83 ec 0c             	sub    esp,0xc
c0009b53:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009b57:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0009b5b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b5d:	56                   	push   esi
c0009b5e:	53                   	push   ebx
c0009b5f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009b62:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b68:	83 c4 10             	add    esp,0x10
c0009b6b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b6e:	74 0f                	je     c0009b7f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0009b70:	52                   	push   edx
c0009b71:	52                   	push   edx
c0009b72:	56                   	push   esi
c0009b73:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b76:	e8 d3 ff ff ff       	call   c0009b4e <Device::powerSavingAll(PowerSavingLevel)>
c0009b7b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b7d:	eb e9                	jmp    c0009b68 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0009b7f:	58                   	pop    eax
c0009b80:	5b                   	pop    ebx
c0009b81:	5e                   	pop    esi
c0009b82:	c3                   	ret    
c0009b83:	90                   	nop

c0009b84 <Device::setName(char const*)>:
c0009b84:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0009b8c:	e9 af 6a ff ff       	jmp    c0000640 <strcpy>
c0009b91:	90                   	nop

c0009b92 <Device::Device(char const*)>:
c0009b92:	83 ec 1c             	sub    esp,0x1c
c0009b95:	ba 10 39 02 c0       	mov    edx,0xc0023910
c0009b9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b9e:	89 10                	mov    DWORD PTR [eax],edx
c0009ba0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ba4:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0009bae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bb2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009bbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bc0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009bca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bce:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009bd8:	83 ec 08             	sub    esp,0x8
c0009bdb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009bdf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009be3:	e8 9c ff ff ff       	call   c0009b84 <Device::setName(char const*)>
c0009be8:	83 c4 10             	add    esp,0x10
c0009beb:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009bf3:	83 ec 0c             	sub    esp,0xc
c0009bf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009bfa:	e8 e8 60 00 00       	call   c000fce7 <malloc>
c0009bff:	83 c4 10             	add    esp,0x10
c0009c02:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009c08:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c0f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009c13:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0009c19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c1d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009c23:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009c29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c2d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009c33:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c3e:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0009c45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c49:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009c50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c54:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009c5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c62:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009c6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c70:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009c7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c7e:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c0009c88:	90                   	nop
c0009c89:	83 c4 1c             	add    esp,0x1c
c0009c8c:	c3                   	ret    
c0009c8d:	90                   	nop

c0009c8e <Device::getName()>:
c0009c8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c92:	05 d0 00 00 00       	add    eax,0xd0
c0009c97:	c3                   	ret    

c0009c98 <Device::closeAll()>:
c0009c98:	53                   	push   ebx
c0009c99:	83 ec 08             	sub    esp,0x8
c0009c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009ca0:	53                   	push   ebx
c0009ca1:	e8 e8 ff ff ff       	call   c0009c8e <Device::getName()>
c0009ca6:	52                   	push   edx
c0009ca7:	50                   	push   eax
c0009ca8:	68 c4 38 02 c0       	push   0xc00238c4
c0009cad:	e8 b2 d2 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0009cb2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009cb4:	6a 00                	push   0x0
c0009cb6:	6a 00                	push   0x0
c0009cb8:	6a 00                	push   0x0
c0009cba:	53                   	push   ebx
c0009cbb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009cbe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009cc4:	83 c4 20             	add    esp,0x20
c0009cc7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009cca:	74 12                	je     c0009cde <Device::closeAll()+0x46>
c0009ccc:	83 ec 0c             	sub    esp,0xc
c0009ccf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009cd2:	e8 c1 ff ff ff       	call   c0009c98 <Device::closeAll()>
c0009cd7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009cd9:	83 c4 10             	add    esp,0x10
c0009cdc:	eb e9                	jmp    c0009cc7 <Device::closeAll()+0x2f>
c0009cde:	83 c4 08             	add    esp,0x8
c0009ce1:	5b                   	pop    ebx
c0009ce2:	c3                   	ret    
c0009ce3:	90                   	nop

c0009ce4 <DriverlessDevice::DriverlessDevice(char const*)>:
c0009ce4:	83 ec 0c             	sub    esp,0xc
c0009ce7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ceb:	83 ec 08             	sub    esp,0x8
c0009cee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cf2:	50                   	push   eax
c0009cf3:	e8 9a fe ff ff       	call   c0009b92 <Device::Device(char const*)>
c0009cf8:	83 c4 10             	add    esp,0x10
c0009cfb:	ba 3c 39 02 c0       	mov    edx,0xc002393c
c0009d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d04:	89 10                	mov    DWORD PTR [eax],edx
c0009d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d0a:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009d14:	90                   	nop
c0009d15:	83 c4 0c             	add    esp,0xc
c0009d18:	c3                   	ret    
c0009d19:	90                   	nop

c0009d1a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0009d1a:	57                   	push   edi
c0009d1b:	56                   	push   esi
c0009d1c:	53                   	push   ebx
c0009d1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009d21:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009d25:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009d29:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009d2f:	75 0c                	jne    c0009d3d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009d31:	52                   	push   edx
c0009d32:	52                   	push   edx
c0009d33:	53                   	push   ebx
c0009d34:	56                   	push   esi
c0009d35:	e8 e2 81 01 00       	call   c0021f1c <LinkedList<Device>::addElement(Device*)>
c0009d3a:	83 c4 10             	add    esp,0x10
c0009d3d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009d43:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009d46:	74 12                	je     c0009d5a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0009d48:	50                   	push   eax
c0009d49:	57                   	push   edi
c0009d4a:	56                   	push   esi
c0009d4b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009d4e:	e8 c7 ff ff ff       	call   c0009d1a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009d53:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009d55:	83 c4 10             	add    esp,0x10
c0009d58:	eb e9                	jmp    c0009d43 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0009d5a:	5b                   	pop    ebx
c0009d5b:	5e                   	pop    esi
c0009d5c:	5f                   	pop    edi
c0009d5d:	c3                   	ret    

c0009d5e <getDevicesOfType(DeviceType)>:
c0009d5e:	53                   	push   ebx
c0009d5f:	83 ec 14             	sub    esp,0x14
c0009d62:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009d66:	53                   	push   ebx
c0009d67:	e8 8c 82 01 00       	call   c0021ff8 <LinkedList<Device>::LinkedList()>
c0009d6c:	83 c4 0c             	add    esp,0xc
c0009d6f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d73:	53                   	push   ebx
c0009d74:	ff 35 d0 d0 02 c0    	push   DWORD PTR ds:0xc002d0d0
c0009d7a:	e8 9b ff ff ff       	call   c0009d1a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009d7f:	89 d8                	mov    eax,ebx
c0009d81:	83 c4 18             	add    esp,0x18
c0009d84:	5b                   	pop    ebx
c0009d85:	c2 04 00             	ret    0x4

c0009d88 <HardDiskController::HardDiskController(char const*)>:
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d8f:	83 ec 08             	sub    esp,0x8
c0009d92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d96:	50                   	push   eax
c0009d97:	e8 f6 fd ff ff       	call   c0009b92 <Device::Device(char const*)>
c0009d9c:	83 c4 10             	add    esp,0x10
c0009d9f:	ba 68 39 02 c0       	mov    edx,0xc0023968
c0009da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009da8:	89 10                	mov    DWORD PTR [eax],edx
c0009daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dae:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0009db8:	90                   	nop
c0009db9:	83 c4 0c             	add    esp,0xc
c0009dbc:	c3                   	ret    
c0009dbd:	90                   	nop
c0009dbe:	66 90                	xchg   ax,ax

c0009dc0 <HardDiskController::~HardDiskController()>:
c0009dc0:	83 ec 0c             	sub    esp,0xc
c0009dc3:	ba 68 39 02 c0       	mov    edx,0xc0023968
c0009dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dcc:	89 10                	mov    DWORD PTR [eax],edx
c0009dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dd2:	83 ec 0c             	sub    esp,0xc
c0009dd5:	50                   	push   eax
c0009dd6:	e8 57 fb ff ff       	call   c0009932 <Device::~Device()>
c0009ddb:	83 c4 10             	add    esp,0x10
c0009dde:	90                   	nop
c0009ddf:	83 c4 0c             	add    esp,0xc
c0009de2:	c3                   	ret    
c0009de3:	90                   	nop

c0009de4 <HardDiskController::~HardDiskController()>:
c0009de4:	83 ec 0c             	sub    esp,0xc
c0009de7:	83 ec 0c             	sub    esp,0xc
c0009dea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dee:	e8 cd ff ff ff       	call   c0009dc0 <HardDiskController::~HardDiskController()>
c0009df3:	83 c4 10             	add    esp,0x10
c0009df6:	83 ec 08             	sub    esp,0x8
c0009df9:	68 58 01 00 00       	push   0x158
c0009dfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e02:	e8 54 35 00 00       	call   c000d35b <operator delete(void*, unsigned long)>
c0009e07:	83 c4 10             	add    esp,0x10
c0009e0a:	83 c4 0c             	add    esp,0xc
c0009e0d:	c3                   	ret    

c0009e0e <PhysicalDisk::eject()>:
c0009e0e:	83 c8 ff             	or     eax,0xffffffff
c0009e11:	c3                   	ret    

c0009e12 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009e12:	83 ec 0c             	sub    esp,0xc
c0009e15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e19:	83 ec 08             	sub    esp,0x8
c0009e1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e20:	50                   	push   eax
c0009e21:	e8 6c fd ff ff       	call   c0009b92 <Device::Device(char const*)>
c0009e26:	83 c4 10             	add    esp,0x10
c0009e29:	ba 94 39 02 c0       	mov    edx,0xc0023994
c0009e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e32:	89 10                	mov    DWORD PTR [eax],edx
c0009e34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e38:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009e3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e43:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0009e4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e4e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0009e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e5c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e60:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0009e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e6a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0009e74:	90                   	nop
c0009e75:	83 c4 0c             	add    esp,0xc
c0009e78:	c3                   	ret    
c0009e79:	90                   	nop

c0009e7a <PhysicalDisk::startCache()>:
c0009e7a:	56                   	push   esi
c0009e7b:	53                   	push   ebx
c0009e7c:	83 ec 10             	sub    esp,0x10
c0009e7f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009e83:	6a 44                	push   0x44
c0009e85:	e8 5d 5e 00 00       	call   c000fce7 <malloc>
c0009e8a:	89 c6                	mov    esi,eax
c0009e8c:	58                   	pop    eax
c0009e8d:	5a                   	pop    edx
c0009e8e:	53                   	push   ebx
c0009e8f:	56                   	push   esi
c0009e90:	e8 d3 13 00 00       	call   c000b268 <VCache::VCache(PhysicalDisk*)>
c0009e95:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0009e9b:	83 c4 14             	add    esp,0x14
c0009e9e:	5b                   	pop    ebx
c0009e9f:	5e                   	pop    esi
c0009ea0:	c3                   	ret    
c0009ea1:	90                   	nop

c0009ea2 <PhysicalDisk::~PhysicalDisk()>:
c0009ea2:	83 ec 0c             	sub    esp,0xc
c0009ea5:	ba 94 39 02 c0       	mov    edx,0xc0023994
c0009eaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009eae:	89 10                	mov    DWORD PTR [eax],edx
c0009eb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009eb4:	83 ec 0c             	sub    esp,0xc
c0009eb7:	50                   	push   eax
c0009eb8:	e8 75 fa ff ff       	call   c0009932 <Device::~Device()>
c0009ebd:	83 c4 10             	add    esp,0x10
c0009ec0:	90                   	nop
c0009ec1:	83 c4 0c             	add    esp,0xc
c0009ec4:	c3                   	ret    
c0009ec5:	90                   	nop

c0009ec6 <PhysicalDisk::~PhysicalDisk()>:
c0009ec6:	83 ec 0c             	sub    esp,0xc
c0009ec9:	83 ec 0c             	sub    esp,0xc
c0009ecc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed0:	e8 cd ff ff ff       	call   c0009ea2 <PhysicalDisk::~PhysicalDisk()>
c0009ed5:	83 c4 10             	add    esp,0x10
c0009ed8:	83 ec 08             	sub    esp,0x8
c0009edb:	68 6c 01 00 00       	push   0x16c
c0009ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ee4:	e8 72 34 00 00       	call   c000d35b <operator delete(void*, unsigned long)>
c0009ee9:	83 c4 10             	add    esp,0x10
c0009eec:	83 c4 0c             	add    esp,0xc
c0009eef:	c3                   	ret    

c0009ef0 <startGUI(void*)>:
c0009ef0:	55                   	push   ebp
c0009ef1:	89 e5                	mov    ebp,esp
c0009ef3:	53                   	push   ebx
c0009ef4:	83 ec 04             	sub    esp,0x4
c0009ef7:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0009eff:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0009f04:	85 c0                	test   eax,eax
c0009f06:	75 01                	jne    c0009f09 <startGUI(void*)+0x19>
c0009f08:	fb                   	sti    
c0009f09:	8b 1d d0 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0d0
c0009f0f:	83 ec 08             	sub    esp,0x8
c0009f12:	6a 01                	push   0x1
c0009f14:	68 c4 39 02 c0       	push   0xc00239c4
c0009f19:	e8 7a c7 00 00       	call   c0016698 <Thr::loadDLL(char const*, bool)>
c0009f1e:	83 c4 10             	add    esp,0x10
c0009f21:	83 ec 08             	sub    esp,0x8
c0009f24:	53                   	push   ebx
c0009f25:	50                   	push   eax
c0009f26:	e8 bf c9 00 00       	call   c00168ea <Thr::executeDLL(unsigned long, void*)>
c0009f2b:	83 c4 10             	add    esp,0x10
c0009f2e:	8b 1d d0 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0d0
c0009f34:	83 ec 08             	sub    esp,0x8
c0009f37:	6a 01                	push   0x1
c0009f39:	68 de 39 02 c0       	push   0xc00239de
c0009f3e:	e8 55 c7 00 00       	call   c0016698 <Thr::loadDLL(char const*, bool)>
c0009f43:	83 c4 10             	add    esp,0x10
c0009f46:	83 ec 08             	sub    esp,0x8
c0009f49:	53                   	push   ebx
c0009f4a:	50                   	push   eax
c0009f4b:	e8 9a c9 00 00       	call   c00168ea <Thr::executeDLL(unsigned long, void*)>
c0009f50:	83 c4 10             	add    esp,0x10
c0009f53:	eb fe                	jmp    c0009f53 <startGUI(void*)+0x63>

c0009f55 <startGUIVESA(void*)>:
c0009f55:	55                   	push   ebp
c0009f56:	89 e5                	mov    ebp,esp
c0009f58:	53                   	push   ebx
c0009f59:	83 ec 04             	sub    esp,0x4
c0009f5c:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0009f64:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0009f69:	85 c0                	test   eax,eax
c0009f6b:	75 01                	jne    c0009f6e <startGUIVESA(void*)+0x19>
c0009f6d:	fb                   	sti    
c0009f6e:	8b 1d d0 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0d0
c0009f74:	83 ec 08             	sub    esp,0x8
c0009f77:	6a 01                	push   0x1
c0009f79:	68 fc 39 02 c0       	push   0xc00239fc
c0009f7e:	e8 15 c7 00 00       	call   c0016698 <Thr::loadDLL(char const*, bool)>
c0009f83:	83 c4 10             	add    esp,0x10
c0009f86:	83 ec 08             	sub    esp,0x8
c0009f89:	53                   	push   ebx
c0009f8a:	50                   	push   eax
c0009f8b:	e8 5a c9 00 00       	call   c00168ea <Thr::executeDLL(unsigned long, void*)>
c0009f90:	83 c4 10             	add    esp,0x10
c0009f93:	8b 1d d0 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0d0
c0009f99:	83 ec 08             	sub    esp,0x8
c0009f9c:	6a 01                	push   0x1
c0009f9e:	68 de 39 02 c0       	push   0xc00239de
c0009fa3:	e8 f0 c6 00 00       	call   c0016698 <Thr::loadDLL(char const*, bool)>
c0009fa8:	83 c4 10             	add    esp,0x10
c0009fab:	83 ec 08             	sub    esp,0x8
c0009fae:	53                   	push   ebx
c0009faf:	50                   	push   eax
c0009fb0:	e8 35 c9 00 00       	call   c00168ea <Thr::executeDLL(unsigned long, void*)>
c0009fb5:	83 c4 10             	add    esp,0x10
c0009fb8:	eb fe                	jmp    c0009fb8 <startGUIVESA(void*)+0x63>

c0009fba <sendKeyToTerminal(unsigned char)>:
c0009fba:	55                   	push   ebp
c0009fbb:	89 e5                	mov    ebp,esp
c0009fbd:	83 ec 28             	sub    esp,0x28
c0009fc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009fc3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0009fc6:	a1 b4 f1 02 c0       	mov    eax,ds:0xc002f1b4
c0009fcb:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0009fcf:	83 ec 08             	sub    esp,0x8
c0009fd2:	52                   	push   edx
c0009fd3:	50                   	push   eax
c0009fd4:	e8 09 8c 00 00       	call   c0012be2 <VgaText::receiveKey(unsigned char)>
c0009fd9:	83 c4 10             	add    esp,0x10
c0009fdc:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fe0:	83 f8 0a             	cmp    eax,0xa
c0009fe3:	74 16                	je     c0009ffb <sendKeyToTerminal(unsigned char)+0x41>
c0009fe5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fe9:	83 f8 03             	cmp    eax,0x3
c0009fec:	74 0d                	je     c0009ffb <sendKeyToTerminal(unsigned char)+0x41>
c0009fee:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009ff2:	83 f8 1c             	cmp    eax,0x1c
c0009ff5:	0f 85 92 00 00 00    	jne    c000a08d <sendKeyToTerminal(unsigned char)+0xd3>
c0009ffb:	fa                   	cli    
c0009ffc:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000a001:	83 c0 01             	add    eax,0x1
c000a004:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c000a009:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c000a00e:	83 c0 01             	add    eax,0x1
c000a011:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c000a016:	a1 80 c6 02 c0       	mov    eax,ds:0xc002c680
c000a01b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a01e:	c7 05 80 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c680,0x0
c000a028:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000a02c:	74 1f                	je     c000a04d <sendKeyToTerminal(unsigned char)+0x93>
c000a02e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a031:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000a034:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a037:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a03a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a03d:	83 ec 0c             	sub    esp,0xc
c000a040:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000a043:	e8 54 d5 00 00       	call   c001759c <unblockTask(ThreadControlBlock*)>
c000a048:	83 c4 10             	add    esp,0x10
c000a04b:	eb db                	jmp    c000a028 <sendKeyToTerminal(unsigned char)+0x6e>
c000a04d:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c000a052:	83 e8 01             	sub    eax,0x1
c000a055:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c000a05a:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c000a05f:	85 c0                	test   eax,eax
c000a061:	75 18                	jne    c000a07b <sendKeyToTerminal(unsigned char)+0xc1>
c000a063:	a1 28 fa 02 c0       	mov    eax,ds:0xc002fa28
c000a068:	85 c0                	test   eax,eax
c000a06a:	74 0f                	je     c000a07b <sendKeyToTerminal(unsigned char)+0xc1>
c000a06c:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c000a076:	e8 c5 d1 00 00       	call   c0017240 <schedule()>
c000a07b:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000a083:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000a088:	85 c0                	test   eax,eax
c000a08a:	75 01                	jne    c000a08d <sendKeyToTerminal(unsigned char)+0xd3>
c000a08c:	fb                   	sti    
c000a08d:	90                   	nop
c000a08e:	c9                   	leave  
c000a08f:	c3                   	ret    

c000a090 <sendKeyboardToken(KeyboardToken)>:
c000a090:	55                   	push   ebp
c000a091:	89 e5                	mov    ebp,esp
c000a093:	83 ec 18             	sub    esp,0x18
c000a096:	e8 c4 68 00 00       	call   c001095f <KeUserIOReceived()>
c000a09b:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000a09e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0a1:	0f b7 c0             	movzx  eax,ax
c000a0a4:	83 f2 01             	xor    edx,0x1
c000a0a7:	88 90 a0 c6 02 c0    	mov    BYTE PTR [eax-0x3ffd3960],dl
c000a0ad:	a1 88 c6 02 c0       	mov    eax,ds:0xc002c688
c000a0b2:	85 c0                	test   eax,eax
c000a0b4:	74 24                	je     c000a0da <sendKeyboardToken(KeyboardToken)+0x4a>
c000a0b6:	8b 0d 88 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c688
c000a0bc:	83 ec 04             	sub    esp,0x4
c000a0bf:	68 a0 c6 02 c0       	push   0xc002c6a0
c000a0c4:	83 ec 08             	sub    esp,0x8
c000a0c7:	89 e2                	mov    edx,esp
c000a0c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0cc:	89 02                	mov    DWORD PTR [edx],eax
c000a0ce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a0d1:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000a0d5:	ff d1                	call   ecx
c000a0d7:	83 c4 10             	add    esp,0x10
c000a0da:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000a0de:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000a0e1:	0f b6 c0             	movzx  eax,al
c000a0e4:	85 c0                	test   eax,eax
c000a0e6:	0f 84 da 00 00 00    	je     c000a1c6 <sendKeyboardToken(KeyboardToken)+0x136>
c000a0ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0ef:	0f b7 c0             	movzx  eax,ax
c000a0f2:	3d 18 03 00 00       	cmp    eax,0x318
c000a0f7:	75 06                	jne    c000a0ff <sendKeyboardToken(KeyboardToken)+0x6f>
c000a0f9:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000a0ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a102:	0f b7 c0             	movzx  eax,ax
c000a105:	3d 19 03 00 00       	cmp    eax,0x319
c000a10a:	75 06                	jne    c000a112 <sendKeyboardToken(KeyboardToken)+0x82>
c000a10c:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000a112:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a115:	0f b7 c0             	movzx  eax,ax
c000a118:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a11d:	75 06                	jne    c000a125 <sendKeyboardToken(KeyboardToken)+0x95>
c000a11f:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000a125:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a128:	0f b7 c0             	movzx  eax,ax
c000a12b:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a130:	75 06                	jne    c000a138 <sendKeyboardToken(KeyboardToken)+0xa8>
c000a132:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000a138:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a13b:	0f b7 c0             	movzx  eax,ax
c000a13e:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a143:	75 06                	jne    c000a14b <sendKeyboardToken(KeyboardToken)+0xbb>
c000a145:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000a14b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a14e:	0f b7 c0             	movzx  eax,ax
c000a151:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a156:	75 06                	jne    c000a15e <sendKeyboardToken(KeyboardToken)+0xce>
c000a158:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a15e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a161:	0f b7 c0             	movzx  eax,ax
c000a164:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a169:	75 06                	jne    c000a171 <sendKeyboardToken(KeyboardToken)+0xe1>
c000a16b:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000a171:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a174:	0f b7 c0             	movzx  eax,ax
c000a177:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a17c:	75 06                	jne    c000a184 <sendKeyboardToken(KeyboardToken)+0xf4>
c000a17e:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000a184:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a187:	0f b7 c0             	movzx  eax,ax
c000a18a:	3d 20 03 00 00       	cmp    eax,0x320
c000a18f:	75 06                	jne    c000a197 <sendKeyboardToken(KeyboardToken)+0x107>
c000a191:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000a197:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a19a:	0f b7 c0             	movzx  eax,ax
c000a19d:	3d 21 03 00 00       	cmp    eax,0x321
c000a1a2:	75 06                	jne    c000a1aa <sendKeyboardToken(KeyboardToken)+0x11a>
c000a1a4:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000a1aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1ad:	0f b7 c0             	movzx  eax,ax
c000a1b0:	3d 22 03 00 00       	cmp    eax,0x322
c000a1b5:	0f 85 f1 00 00 00    	jne    c000a2ac <sendKeyboardToken(KeyboardToken)+0x21c>
c000a1bb:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000a1c1:	e9 e6 00 00 00       	jmp    c000a2ac <sendKeyboardToken(KeyboardToken)+0x21c>
c000a1c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1c9:	0f b7 c0             	movzx  eax,ax
c000a1cc:	3d 18 03 00 00       	cmp    eax,0x318
c000a1d1:	75 0a                	jne    c000a1dd <sendKeyboardToken(KeyboardToken)+0x14d>
c000a1d3:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000a1d9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1e0:	0f b7 c0             	movzx  eax,ax
c000a1e3:	3d 19 03 00 00       	cmp    eax,0x319
c000a1e8:	75 0a                	jne    c000a1f4 <sendKeyboardToken(KeyboardToken)+0x164>
c000a1ea:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000a1f0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1f7:	0f b7 c0             	movzx  eax,ax
c000a1fa:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a1ff:	75 0a                	jne    c000a20b <sendKeyboardToken(KeyboardToken)+0x17b>
c000a201:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000a207:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a20b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a20e:	0f b7 c0             	movzx  eax,ax
c000a211:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a216:	75 0a                	jne    c000a222 <sendKeyboardToken(KeyboardToken)+0x192>
c000a218:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000a21e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a222:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a225:	0f b7 c0             	movzx  eax,ax
c000a228:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a22d:	75 0a                	jne    c000a239 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000a22f:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000a235:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a23c:	0f b7 c0             	movzx  eax,ax
c000a23f:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a244:	75 0a                	jne    c000a250 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000a246:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a24c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a250:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a253:	0f b7 c0             	movzx  eax,ax
c000a256:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a25b:	75 0a                	jne    c000a267 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000a25d:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000a263:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a267:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a26a:	0f b7 c0             	movzx  eax,ax
c000a26d:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a272:	75 0a                	jne    c000a27e <sendKeyboardToken(KeyboardToken)+0x1ee>
c000a274:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000a27a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a27e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a281:	0f b7 c0             	movzx  eax,ax
c000a284:	3d 20 03 00 00       	cmp    eax,0x320
c000a289:	75 0a                	jne    c000a295 <sendKeyboardToken(KeyboardToken)+0x205>
c000a28b:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000a291:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a295:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a298:	0f b7 c0             	movzx  eax,ax
c000a29b:	3d 21 03 00 00       	cmp    eax,0x321
c000a2a0:	75 0a                	jne    c000a2ac <sendKeyboardToken(KeyboardToken)+0x21c>
c000a2a2:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000a2a8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a2ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2af:	0f b7 c0             	movzx  eax,ax
c000a2b2:	3d 00 02 00 00       	cmp    eax,0x200
c000a2b7:	75 2f                	jne    c000a2e8 <sendKeyboardToken(KeyboardToken)+0x258>
c000a2b9:	a0 a0 ca 02 c0       	mov    al,ds:0xc002caa0
c000a2be:	83 f0 01             	xor    eax,0x1
c000a2c1:	0f b6 c0             	movzx  eax,al
c000a2c4:	85 c0                	test   eax,eax
c000a2c6:	74 20                	je     c000a2e8 <sendKeyboardToken(KeyboardToken)+0x258>
c000a2c8:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c000a2cd:	6a 01                	push   0x1
c000a2cf:	6a 00                	push   0x0
c000a2d1:	68 f0 9e 00 c0       	push   0xc0009ef0
c000a2d6:	50                   	push   eax
c000a2d7:	e8 a4 cc 00 00       	call   c0016f80 <Process::createThread(void (*)(void*), void*, int)>
c000a2dc:	83 c4 10             	add    esp,0x10
c000a2df:	c6 05 a0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002caa0,0x1
c000a2e6:	eb 3a                	jmp    c000a322 <sendKeyboardToken(KeyboardToken)+0x292>
c000a2e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2eb:	0f b7 c0             	movzx  eax,ax
c000a2ee:	3d 01 02 00 00       	cmp    eax,0x201
c000a2f3:	75 2d                	jne    c000a322 <sendKeyboardToken(KeyboardToken)+0x292>
c000a2f5:	a0 a0 ca 02 c0       	mov    al,ds:0xc002caa0
c000a2fa:	83 f0 01             	xor    eax,0x1
c000a2fd:	0f b6 c0             	movzx  eax,al
c000a300:	85 c0                	test   eax,eax
c000a302:	74 1e                	je     c000a322 <sendKeyboardToken(KeyboardToken)+0x292>
c000a304:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c000a309:	6a 01                	push   0x1
c000a30b:	6a 00                	push   0x0
c000a30d:	68 55 9f 00 c0       	push   0xc0009f55
c000a312:	50                   	push   eax
c000a313:	e8 68 cc 00 00       	call   c0016f80 <Process::createThread(void (*)(void*), void*, int)>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	c6 05 a0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002caa0,0x1
c000a322:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a325:	0f b7 c0             	movzx  eax,ax
c000a328:	3d 25 03 00 00       	cmp    eax,0x325
c000a32d:	75 06                	jne    c000a335 <sendKeyboardToken(KeyboardToken)+0x2a5>
c000a32f:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000a335:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a338:	0f b7 c0             	movzx  eax,ax
c000a33b:	3d 24 03 00 00       	cmp    eax,0x324
c000a340:	75 06                	jne    c000a348 <sendKeyboardToken(KeyboardToken)+0x2b8>
c000a342:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000a348:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a34b:	0f b7 c0             	movzx  eax,ax
c000a34e:	3d 23 03 00 00       	cmp    eax,0x323
c000a353:	75 06                	jne    c000a35b <sendKeyboardToken(KeyboardToken)+0x2cb>
c000a355:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000a35b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a35e:	0f b7 c0             	movzx  eax,ax
c000a361:	3d 26 03 00 00       	cmp    eax,0x326
c000a366:	75 06                	jne    c000a36e <sendKeyboardToken(KeyboardToken)+0x2de>
c000a368:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000a36e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a371:	0f b7 c0             	movzx  eax,ax
c000a374:	3d 27 03 00 00       	cmp    eax,0x327
c000a379:	75 06                	jne    c000a381 <sendKeyboardToken(KeyboardToken)+0x2f1>
c000a37b:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000a381:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a384:	0f b7 c0             	movzx  eax,ax
c000a387:	3d 22 03 00 00       	cmp    eax,0x322
c000a38c:	75 06                	jne    c000a394 <sendKeyboardToken(KeyboardToken)+0x304>
c000a38e:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000a394:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000a398:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a39b:	83 f0 01             	xor    eax,0x1
c000a39e:	0f b6 c0             	movzx  eax,al
c000a3a1:	85 c0                	test   eax,eax
c000a3a3:	74 7c                	je     c000a421 <sendKeyboardToken(KeyboardToken)+0x391>
c000a3a5:	a0 a1 c7 02 c0       	mov    al,ds:0xc002c7a1
c000a3aa:	0f b6 c0             	movzx  eax,al
c000a3ad:	85 c0                	test   eax,eax
c000a3af:	74 43                	je     c000a3f4 <sendKeyboardToken(KeyboardToken)+0x364>
c000a3b1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a3b5:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000a3b9:	85 c0                	test   eax,eax
c000a3bb:	74 2b                	je     c000a3e8 <sendKeyboardToken(KeyboardToken)+0x358>
c000a3bd:	8b 15 a4 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002caa4
c000a3c3:	89 d0                	mov    eax,edx
c000a3c5:	c1 e0 02             	shl    eax,0x2
c000a3c8:	01 d0                	add    eax,edx
c000a3ca:	01 c0                	add    eax,eax
c000a3cc:	a3 a4 ca 02 c0       	mov    ds:0xc002caa4,eax
c000a3d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3d4:	0f b7 c0             	movzx  eax,ax
c000a3d7:	8d 50 d0             	lea    edx,[eax-0x30]
c000a3da:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a3df:	01 d0                	add    eax,edx
c000a3e1:	a3 a4 ca 02 c0       	mov    ds:0xc002caa4,eax
c000a3e6:	eb 71                	jmp    c000a459 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3e8:	c7 05 a4 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002caa4,0x0
c000a3f2:	eb 65                	jmp    c000a459 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3f4:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a3f9:	85 c0                	test   eax,eax
c000a3fb:	74 18                	je     c000a415 <sendKeyboardToken(KeyboardToken)+0x385>
c000a3fd:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a402:	0f b6 c0             	movzx  eax,al
c000a405:	83 ec 0c             	sub    esp,0xc
c000a408:	50                   	push   eax
c000a409:	e8 ac fb ff ff       	call   c0009fba <sendKeyToTerminal(unsigned char)>
c000a40e:	83 c4 10             	add    esp,0x10
c000a411:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a415:	c7 05 a4 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002caa4,0x0
c000a41f:	eb 38                	jmp    c000a459 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a421:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a424:	0f b7 c0             	movzx  eax,ax
c000a427:	3d 01 01 00 00       	cmp    eax,0x101
c000a42c:	75 2b                	jne    c000a459 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a42e:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a433:	85 c0                	test   eax,eax
c000a435:	74 18                	je     c000a44f <sendKeyboardToken(KeyboardToken)+0x3bf>
c000a437:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a43c:	0f b6 c0             	movzx  eax,al
c000a43f:	83 ec 0c             	sub    esp,0xc
c000a442:	50                   	push   eax
c000a443:	e8 72 fb ff ff       	call   c0009fba <sendKeyToTerminal(unsigned char)>
c000a448:	83 c4 10             	add    esp,0x10
c000a44b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a44f:	c7 05 a4 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002caa4,0x0
c000a459:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a45c:	83 f0 01             	xor    eax,0x1
c000a45f:	0f b6 c0             	movzx  eax,al
c000a462:	85 c0                	test   eax,eax
c000a464:	74 5a                	je     c000a4c0 <sendKeyboardToken(KeyboardToken)+0x430>
c000a466:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a469:	83 f0 01             	xor    eax,0x1
c000a46c:	0f b6 c0             	movzx  eax,al
c000a46f:	85 c0                	test   eax,eax
c000a471:	74 4d                	je     c000a4c0 <sendKeyboardToken(KeyboardToken)+0x430>
c000a473:	a0 a0 c7 02 c0       	mov    al,ds:0xc002c7a0
c000a478:	83 f0 01             	xor    eax,0x1
c000a47b:	0f b6 c0             	movzx  eax,al
c000a47e:	85 c0                	test   eax,eax
c000a480:	74 3e                	je     c000a4c0 <sendKeyboardToken(KeyboardToken)+0x430>
c000a482:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a485:	0f b7 c0             	movzx  eax,ax
c000a488:	83 f8 1f             	cmp    eax,0x1f
c000a48b:	76 0b                	jbe    c000a498 <sendKeyboardToken(KeyboardToken)+0x408>
c000a48d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a490:	0f b7 c0             	movzx  eax,ax
c000a493:	83 f8 7e             	cmp    eax,0x7e
c000a496:	76 16                	jbe    c000a4ae <sendKeyboardToken(KeyboardToken)+0x41e>
c000a498:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a49b:	0f b7 c0             	movzx  eax,ax
c000a49e:	83 f8 0a             	cmp    eax,0xa
c000a4a1:	74 0b                	je     c000a4ae <sendKeyboardToken(KeyboardToken)+0x41e>
c000a4a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4a6:	0f b7 c0             	movzx  eax,ax
c000a4a9:	83 f8 08             	cmp    eax,0x8
c000a4ac:	75 12                	jne    c000a4c0 <sendKeyboardToken(KeyboardToken)+0x430>
c000a4ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4b1:	0f b6 c0             	movzx  eax,al
c000a4b4:	83 ec 0c             	sub    esp,0xc
c000a4b7:	50                   	push   eax
c000a4b8:	e8 fd fa ff ff       	call   c0009fba <sendKeyToTerminal(unsigned char)>
c000a4bd:	83 c4 10             	add    esp,0x10
c000a4c0:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a4c3:	83 f0 01             	xor    eax,0x1
c000a4c6:	0f b6 c0             	movzx  eax,al
c000a4c9:	85 c0                	test   eax,eax
c000a4cb:	74 5d                	je     c000a52a <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4cd:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a4d0:	83 f0 01             	xor    eax,0x1
c000a4d3:	0f b6 c0             	movzx  eax,al
c000a4d6:	85 c0                	test   eax,eax
c000a4d8:	74 50                	je     c000a52a <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4da:	a0 a0 c7 02 c0       	mov    al,ds:0xc002c7a0
c000a4df:	0f b6 c0             	movzx  eax,al
c000a4e2:	85 c0                	test   eax,eax
c000a4e4:	74 44                	je     c000a52a <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4e9:	0f b7 c0             	movzx  eax,ax
c000a4ec:	83 f8 3f             	cmp    eax,0x3f
c000a4ef:	76 39                	jbe    c000a52a <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4f4:	0f b7 c0             	movzx  eax,ax
c000a4f7:	83 f8 7f             	cmp    eax,0x7f
c000a4fa:	77 2e                	ja     c000a52a <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4ff:	88 c2                	mov    dl,al
c000a501:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a504:	0f b7 c0             	movzx  eax,ax
c000a507:	83 f8 5f             	cmp    eax,0x5f
c000a50a:	76 04                	jbe    c000a510 <sendKeyboardToken(KeyboardToken)+0x480>
c000a50c:	b0 20                	mov    al,0x20
c000a50e:	eb 02                	jmp    c000a512 <sendKeyboardToken(KeyboardToken)+0x482>
c000a510:	b0 00                	mov    al,0x0
c000a512:	89 d1                	mov    ecx,edx
c000a514:	29 c1                	sub    ecx,eax
c000a516:	89 c8                	mov    eax,ecx
c000a518:	83 e8 40             	sub    eax,0x40
c000a51b:	0f b6 c0             	movzx  eax,al
c000a51e:	83 ec 0c             	sub    esp,0xc
c000a521:	50                   	push   eax
c000a522:	e8 93 fa ff ff       	call   c0009fba <sendKeyToTerminal(unsigned char)>
c000a527:	83 c4 10             	add    esp,0x10
c000a52a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a52d:	0f b7 c0             	movzx  eax,ax
c000a530:	3d 00 03 00 00       	cmp    eax,0x300
c000a535:	75 12                	jne    c000a549 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a537:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a53a:	83 f0 01             	xor    eax,0x1
c000a53d:	0f b6 c0             	movzx  eax,al
c000a540:	85 c0                	test   eax,eax
c000a542:	74 05                	je     c000a549 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a544:	e8 8e 7d 00 00       	call   c00122d7 <doTerminalCycle()>
c000a549:	90                   	nop
c000a54a:	c9                   	leave  
c000a54b:	c3                   	ret    

c000a54c <clearInternalKeybuffer(VgaText*)>:
c000a54c:	55                   	push   ebp
c000a54d:	89 e5                	mov    ebp,esp
c000a54f:	83 ec 08             	sub    esp,0x8
c000a552:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a555:	05 02 01 00 00       	add    eax,0x102
c000a55a:	83 ec 0c             	sub    esp,0xc
c000a55d:	50                   	push   eax
c000a55e:	e8 0d 60 ff ff       	call   c0000570 <strlen>
c000a563:	83 c4 10             	add    esp,0x10
c000a566:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a569:	81 c2 02 01 00 00    	add    edx,0x102
c000a56f:	83 ec 04             	sub    esp,0x4
c000a572:	50                   	push   eax
c000a573:	6a 00                	push   0x0
c000a575:	52                   	push   edx
c000a576:	e8 75 5f ff ff       	call   c00004f0 <memset>
c000a57b:	83 c4 10             	add    esp,0x10
c000a57e:	90                   	nop
c000a57f:	c9                   	leave  
c000a580:	c3                   	ret    

c000a581 <readKeyboard(VgaText*, char*, unsigned long)>:
c000a581:	55                   	push   ebp
c000a582:	89 e5                	mov    ebp,esp
c000a584:	83 ec 18             	sub    esp,0x18
c000a587:	a1 88 c6 02 c0       	mov    eax,ds:0xc002c688
c000a58c:	85 c0                	test   eax,eax
c000a58e:	74 2a                	je     c000a5ba <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000a590:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000a596:	8b 0d 88 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c688
c000a59c:	83 ec 04             	sub    esp,0x4
c000a59f:	68 a0 c6 02 c0       	push   0xc002c6a0
c000a5a4:	83 ec 08             	sub    esp,0x8
c000a5a7:	89 e2                	mov    edx,esp
c000a5a9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000a5ac:	89 02                	mov    DWORD PTR [edx],eax
c000a5ae:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a5b1:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000a5b5:	ff d1                	call   ecx
c000a5b7:	83 c4 10             	add    esp,0x10
c000a5ba:	fb                   	sti    
c000a5bb:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000a5c2:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000a5c6:	0f 84 08 01 00 00    	je     c000a6d4 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000a5cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5cf:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a5d5:	0f be c0             	movsx  eax,al
c000a5d8:	85 c0                	test   eax,eax
c000a5da:	75 27                	jne    c000a603 <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c000a5dc:	fa                   	cli    
c000a5dd:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000a5e2:	83 c0 01             	add    eax,0x1
c000a5e5:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c000a5ea:	e8 51 cc 00 00       	call   c0017240 <schedule()>
c000a5ef:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000a5f7:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000a5fc:	85 c0                	test   eax,eax
c000a5fe:	75 cc                	jne    c000a5cc <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a600:	fb                   	sti    
c000a601:	eb c9                	jmp    c000a5cc <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a603:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a606:	8d 50 01             	lea    edx,[eax+0x1]
c000a609:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000a60c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a60f:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000a615:	88 10                	mov    BYTE PTR [eax],dl
c000a617:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a61a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a620:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000a623:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a627:	83 f8 03             	cmp    eax,0x3
c000a62a:	75 1e                	jne    c000a64a <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c000a62c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a631:	8b 00                	mov    eax,DWORD PTR [eax]
c000a633:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a636:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a63c:	83 ec 08             	sub    esp,0x8
c000a63f:	6a 02                	push   0x2
c000a641:	50                   	push   eax
c000a642:	e8 64 6b 00 00       	call   c00111ab <KeRaiseSignal(SigHandlerBlock*, int)>
c000a647:	83 c4 10             	add    esp,0x10
c000a64a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a64e:	83 f8 1c             	cmp    eax,0x1c
c000a651:	75 1e                	jne    c000a671 <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c000a653:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a658:	8b 00                	mov    eax,DWORD PTR [eax]
c000a65a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a65d:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a663:	83 ec 08             	sub    esp,0x8
c000a666:	6a 09                	push   0x9
c000a668:	50                   	push   eax
c000a669:	e8 3d 6b 00 00       	call   c00111ab <KeRaiseSignal(SigHandlerBlock*, int)>
c000a66e:	83 c4 10             	add    esp,0x10
c000a671:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a674:	05 02 01 00 00       	add    eax,0x102
c000a679:	83 ec 0c             	sub    esp,0xc
c000a67c:	50                   	push   eax
c000a67d:	e8 ee 5e ff ff       	call   c0000570 <strlen>
c000a682:	83 c4 10             	add    esp,0x10
c000a685:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a688:	81 c2 02 01 00 00    	add    edx,0x102
c000a68e:	8d 4a 01             	lea    ecx,[edx+0x1]
c000a691:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a694:	81 c2 02 01 00 00    	add    edx,0x102
c000a69a:	83 ec 04             	sub    esp,0x4
c000a69d:	50                   	push   eax
c000a69e:	51                   	push   ecx
c000a69f:	52                   	push   edx
c000a6a0:	e8 2b 5d ff ff       	call   c00003d0 <memmove>
c000a6a5:	83 c4 10             	add    esp,0x10
c000a6a8:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000a6ac:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000a6b0:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a6b4:	83 f8 0a             	cmp    eax,0xa
c000a6b7:	74 16                	je     c000a6cf <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a6b9:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a6bd:	83 f8 03             	cmp    eax,0x3
c000a6c0:	74 0d                	je     c000a6cf <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a6c2:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a6c6:	83 f8 1c             	cmp    eax,0x1c
c000a6c9:	0f 85 f3 fe ff ff    	jne    c000a5c2 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000a6cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a6d2:	eb 03                	jmp    c000a6d7 <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c000a6d4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a6d7:	c9                   	leave  
c000a6d8:	c3                   	ret    
c000a6d9:	90                   	nop

c000a6da <Keyboard::Keyboard(char const*)>:
c000a6da:	83 ec 0c             	sub    esp,0xc
c000a6dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6e1:	83 ec 08             	sub    esp,0x8
c000a6e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6e8:	50                   	push   eax
c000a6e9:	e8 a4 f4 ff ff       	call   c0009b92 <Device::Device(char const*)>
c000a6ee:	83 c4 10             	add    esp,0x10
c000a6f1:	ba 20 3a 02 c0       	mov    edx,0xc0023a20
c000a6f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6fa:	89 10                	mov    DWORD PTR [eax],edx
c000a6fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a700:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000a70a:	c6 05 84 c6 02 c0 01 	mov    BYTE PTR ds:0xc002c684,0x1
c000a711:	90                   	nop
c000a712:	83 c4 0c             	add    esp,0xc
c000a715:	c3                   	ret    

c000a716 <Keyboard::~Keyboard()>:
c000a716:	83 ec 0c             	sub    esp,0xc
c000a719:	ba 20 3a 02 c0       	mov    edx,0xc0023a20
c000a71e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a722:	89 10                	mov    DWORD PTR [eax],edx
c000a724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a728:	83 ec 0c             	sub    esp,0xc
c000a72b:	50                   	push   eax
c000a72c:	e8 01 f2 ff ff       	call   c0009932 <Device::~Device()>
c000a731:	83 c4 10             	add    esp,0x10
c000a734:	90                   	nop
c000a735:	83 c4 0c             	add    esp,0xc
c000a738:	c3                   	ret    
c000a739:	90                   	nop

c000a73a <Keyboard::~Keyboard()>:
c000a73a:	83 ec 0c             	sub    esp,0xc
c000a73d:	83 ec 0c             	sub    esp,0xc
c000a740:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a744:	e8 cd ff ff ff       	call   c000a716 <Keyboard::~Keyboard()>
c000a749:	83 c4 10             	add    esp,0x10
c000a74c:	83 ec 08             	sub    esp,0x8
c000a74f:	68 5c 01 00 00       	push   0x15c
c000a754:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a758:	e8 fe 2b 00 00       	call   c000d35b <operator delete(void*, unsigned long)>
c000a75d:	83 c4 10             	add    esp,0x10
c000a760:	83 c4 0c             	add    esp,0xc
c000a763:	c3                   	ret    

c000a764 <LogicalDisk::close(int, int, void*)>:
c000a764:	83 c8 ff             	or     eax,0xffffffff
c000a767:	c3                   	ret    

c000a768 <LogicalDisk::~LogicalDisk()>:
c000a768:	83 ec 0c             	sub    esp,0xc
c000a76b:	ba 98 3a 02 c0       	mov    edx,0xc0023a98
c000a770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a774:	89 10                	mov    DWORD PTR [eax],edx
c000a776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a77a:	83 ec 0c             	sub    esp,0xc
c000a77d:	50                   	push   eax
c000a77e:	e8 af f1 ff ff       	call   c0009932 <Device::~Device()>
c000a783:	83 c4 10             	add    esp,0x10
c000a786:	90                   	nop
c000a787:	83 c4 0c             	add    esp,0xc
c000a78a:	c3                   	ret    
c000a78b:	90                   	nop

c000a78c <LogicalDisk::~LogicalDisk()>:
c000a78c:	83 ec 0c             	sub    esp,0xc
c000a78f:	83 ec 0c             	sub    esp,0xc
c000a792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a796:	e8 cd ff ff ff       	call   c000a768 <LogicalDisk::~LogicalDisk()>
c000a79b:	83 c4 10             	add    esp,0x10
c000a79e:	83 ec 08             	sub    esp,0x8
c000a7a1:	68 78 01 00 00       	push   0x178
c000a7a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7aa:	e8 ac 2b 00 00       	call   c000d35b <operator delete(void*, unsigned long)>
c000a7af:	83 c4 10             	add    esp,0x10
c000a7b2:	83 c4 0c             	add    esp,0xc
c000a7b5:	c3                   	ret    

c000a7b6 <LogicalDisk::open(int, int, void*)>:
c000a7b6:	83 ec 18             	sub    esp,0x18
c000a7b9:	68 4c 3a 02 c0       	push   0xc0023a4c
c000a7be:	e8 6b 58 00 00       	call   c001002e <KePanic(char const*)>
c000a7c3:	83 c8 ff             	or     eax,0xffffffff
c000a7c6:	83 c4 1c             	add    esp,0x1c
c000a7c9:	c3                   	ret    

c000a7ca <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000a7ca:	53                   	push   ebx
c000a7cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a7cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a7d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a7d7:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000a7dd:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000a7e3:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000a7e9:	77 10                	ja     c000a7fb <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000a7eb:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000a7f1:	89 d3                	mov    ebx,edx
c000a7f3:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000a7f9:	72 05                	jb     c000a800 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000a7fb:	83 c8 ff             	or     eax,0xffffffff
c000a7fe:	89 c2                	mov    edx,eax
c000a800:	5b                   	pop    ebx
c000a801:	c3                   	ret    

c000a802 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000a802:	56                   	push   esi
c000a803:	83 c8 ff             	or     eax,0xffffffff
c000a806:	53                   	push   ebx
c000a807:	89 c2                	mov    edx,eax
c000a809:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a80d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000a811:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a815:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a81b:	77 27                	ja     c000a844 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a81d:	89 d8                	mov    eax,ebx
c000a81f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000a825:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000a82b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000a830:	89 c2                	mov    edx,eax
c000a832:	73 10                	jae    c000a844 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a834:	89 c8                	mov    eax,ecx
c000a836:	89 da                	mov    edx,ebx
c000a838:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000a83e:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000a844:	5b                   	pop    ebx
c000a845:	5e                   	pop    esi
c000a846:	c3                   	ret    
c000a847:	90                   	nop

c000a848 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a848:	83 ec 1c             	sub    esp,0x1c
c000a84b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000a84f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a853:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a857:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a85b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a85f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a862:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a866:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a86a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a86e:	83 ec 08             	sub    esp,0x8
c000a871:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a875:	50                   	push   eax
c000a876:	e8 17 f3 ff ff       	call   c0009b92 <Device::Device(char const*)>
c000a87b:	83 c4 10             	add    esp,0x10
c000a87e:	ba 98 3a 02 c0       	mov    edx,0xc0023a98
c000a883:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a887:	89 10                	mov    DWORD PTR [eax],edx
c000a889:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a88d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a894:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a898:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000a89f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8a3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a8aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8ae:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000a8b8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a8bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a8c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a8c4:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000a8ca:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000a8d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a8d4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a8d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8db:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000a8e1:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000a8e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8eb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000a8ef:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000a8f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8f9:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a903:	90                   	nop
c000a904:	83 c4 1c             	add    esp,0x1c
c000a907:	c3                   	ret    

c000a908 <LogicalDisk::assignDriveLetter()>:
c000a908:	55                   	push   ebp
c000a909:	57                   	push   edi
c000a90a:	56                   	push   esi
c000a90b:	53                   	push   ebx
c000a90c:	83 ec 14             	sub    esp,0x14
c000a90f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a913:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000a919:	b0 41                	mov    al,0x41
c000a91b:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000a921:	84 d2                	test   dl,dl
c000a923:	75 02                	jne    c000a927 <LogicalDisk::assignDriveLetter()+0x1f>
c000a925:	b0 43                	mov    al,0x43
c000a927:	8b 3d c0 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002cac0
c000a92d:	0f b6 ca             	movzx  ecx,dl
c000a930:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000a934:	0f be e8             	movsx  ebp,al
c000a937:	8b 3d c4 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002cac4
c000a93d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a941:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000a945:	3c 43                	cmp    al,0x43
c000a947:	75 10                	jne    c000a959 <LogicalDisk::assignDriveLetter()+0x51>
c000a949:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000a950:	75 5a                	jne    c000a9ac <LogicalDisk::assignDriveLetter()+0xa4>
c000a952:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a957:	75 53                	jne    c000a9ac <LogicalDisk::assignDriveLetter()+0xa4>
c000a959:	8d 75 bf             	lea    esi,[ebp-0x41]
c000a95c:	ba 01 00 00 00       	mov    edx,0x1
c000a961:	89 34 24             	mov    DWORD PTR [esp],esi
c000a964:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000a967:	d3 e2                	shl    edx,cl
c000a969:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a96d:	89 d7                	mov    edi,edx
c000a96f:	89 d6                	mov    esi,edx
c000a971:	c1 ff 1f             	sar    edi,0x1f
c000a974:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000a978:	21 f9                	and    ecx,edi
c000a97a:	09 d1                	or     ecx,edx
c000a97c:	75 2e                	jne    c000a9ac <LogicalDisk::assignDriveLetter()+0xa4>
c000a97e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000a982:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a986:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000a98c:	09 f2                	or     edx,esi
c000a98e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000a991:	89 15 c0 ca 02 c0    	mov    DWORD PTR ds:0xc002cac0,edx
c000a997:	89 1c b5 e0 ca 02 c0 	mov    DWORD PTR [esi*4-0x3ffd3520],ebx
c000a99e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a9a2:	09 fa                	or     edx,edi
c000a9a4:	89 15 c4 ca 02 c0    	mov    DWORD PTR ds:0xc002cac4,edx
c000a9aa:	eb 0d                	jmp    c000a9b9 <LogicalDisk::assignDriveLetter()+0xb1>
c000a9ac:	8d 50 01             	lea    edx,[eax+0x1]
c000a9af:	45                   	inc    ebp
c000a9b0:	88 d0                	mov    al,dl
c000a9b2:	80 fa 5b             	cmp    dl,0x5b
c000a9b5:	75 8e                	jne    c000a945 <LogicalDisk::assignDriveLetter()+0x3d>
c000a9b7:	31 c0                	xor    eax,eax
c000a9b9:	83 c4 14             	add    esp,0x14
c000a9bc:	5b                   	pop    ebx
c000a9bd:	5e                   	pop    esi
c000a9be:	5f                   	pop    edi
c000a9bf:	5d                   	pop    ebp
c000a9c0:	c3                   	ret    
c000a9c1:	90                   	nop

c000a9c2 <LogicalDisk::mount()>:
c000a9c2:	56                   	push   esi
c000a9c3:	53                   	push   ebx
c000a9c4:	53                   	push   ebx
c000a9c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a9c9:	8b 1d 04 c3 02 c0    	mov    ebx,DWORD PTR ds:0xc002c304
c000a9cf:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a9d9:	85 db                	test   ebx,ebx
c000a9db:	74 27                	je     c000aa04 <LogicalDisk::mount()+0x42>
c000a9dd:	51                   	push   ecx
c000a9de:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a9e5:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a9e7:	83 e8 41             	sub    eax,0x41
c000a9ea:	50                   	push   eax
c000a9eb:	56                   	push   esi
c000a9ec:	53                   	push   ebx
c000a9ed:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a9f0:	83 c4 10             	add    esp,0x10
c000a9f3:	84 c0                	test   al,al
c000a9f5:	74 08                	je     c000a9ff <LogicalDisk::mount()+0x3d>
c000a9f7:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a9fd:	eb 07                	jmp    c000aa06 <LogicalDisk::mount()+0x44>
c000a9ff:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000aa02:	eb d5                	jmp    c000a9d9 <LogicalDisk::mount()+0x17>
c000aa04:	31 c0                	xor    eax,eax
c000aa06:	5a                   	pop    edx
c000aa07:	5b                   	pop    ebx
c000aa08:	5e                   	pop    esi
c000aa09:	c3                   	ret    

c000aa0a <LogicalDisk::unmount()>:
c000aa0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa0e:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000aa18:	c3                   	ret    
c000aa19:	90                   	nop

c000aa1a <LogicalDisk::eject()>:
c000aa1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa1e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000aa24:	8b 10                	mov    edx,DWORD PTR [eax]
c000aa26:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa2a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000aa2d:	90                   	nop

c000aa2e <LogicalDisk::unassignDriveLetter()>:
c000aa2e:	57                   	push   edi
c000aa2f:	56                   	push   esi
c000aa30:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aa34:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000aa3b:	85 c9                	test   ecx,ecx
c000aa3d:	75 0f                	jne    c000aa4e <LogicalDisk::unassignDriveLetter()+0x20>
c000aa3f:	c7 44 24 0c 70 3a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023a70
c000aa47:	5e                   	pop    esi
c000aa48:	5f                   	pop    edi
c000aa49:	e9 e0 55 00 00       	jmp    c001002e <KePanic(char const*)>
c000aa4e:	83 e9 41             	sub    ecx,0x41
c000aa51:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000aa58:	b8 01 00 00 00       	mov    eax,0x1
c000aa5d:	c7 04 8d e0 ca 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd3520],0x0
c000aa68:	d3 e0                	shl    eax,cl
c000aa6a:	89 c7                	mov    edi,eax
c000aa6c:	f7 d0                	not    eax
c000aa6e:	c1 ff 1f             	sar    edi,0x1f
c000aa71:	21 05 c0 ca 02 c0    	and    DWORD PTR ds:0xc002cac0,eax
c000aa77:	89 fe                	mov    esi,edi
c000aa79:	f7 d6                	not    esi
c000aa7b:	21 35 c4 ca 02 c0    	and    DWORD PTR ds:0xc002cac4,esi
c000aa81:	5e                   	pop    esi
c000aa82:	5f                   	pop    edi
c000aa83:	c3                   	ret    

c000aa84 <LogicalDisk::read(unsigned long long, int, void*)>:
c000aa84:	57                   	push   edi
c000aa85:	56                   	push   esi
c000aa86:	53                   	push   ebx
c000aa87:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aa8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aa8f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aa93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa97:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aa9d:	77 41                	ja     c000aae0 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000aa9f:	99                   	cdq    
c000aaa0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aaa6:	01 c8                	add    eax,ecx
c000aaa8:	11 da                	adc    edx,ebx
c000aaaa:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aab0:	19 d7                	sbb    edi,edx
c000aab2:	72 33                	jb     c000aae7 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000aab4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aaba:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aac0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aac4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aac8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000aace:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000aad4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aad8:	5b                   	pop    ebx
c000aad9:	5e                   	pop    esi
c000aada:	5f                   	pop    edi
c000aadb:	e9 a2 0b 00 00       	jmp    c000b682 <VCache::read(unsigned long long, int, void*)>
c000aae0:	b8 05 00 00 00       	mov    eax,0x5
c000aae5:	eb 05                	jmp    c000aaec <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000aae7:	b8 07 00 00 00       	mov    eax,0x7
c000aaec:	5b                   	pop    ebx
c000aaed:	5e                   	pop    esi
c000aaee:	5f                   	pop    edi
c000aaef:	c3                   	ret    

c000aaf0 <LogicalDisk::write(unsigned long long, int, void*)>:
c000aaf0:	57                   	push   edi
c000aaf1:	56                   	push   esi
c000aaf2:	53                   	push   ebx
c000aaf3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aaf7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aafb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aaff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab03:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ab09:	77 41                	ja     c000ab4c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000ab0b:	99                   	cdq    
c000ab0c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ab12:	01 c8                	add    eax,ecx
c000ab14:	11 da                	adc    edx,ebx
c000ab16:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ab1c:	19 d7                	sbb    edi,edx
c000ab1e:	72 33                	jb     c000ab53 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000ab20:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ab26:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ab2c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ab30:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ab34:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ab3a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ab40:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ab44:	5b                   	pop    ebx
c000ab45:	5e                   	pop    esi
c000ab46:	5f                   	pop    edi
c000ab47:	e9 68 09 00 00       	jmp    c000b4b4 <VCache::write(unsigned long long, int, void*)>
c000ab4c:	b8 05 00 00 00       	mov    eax,0x5
c000ab51:	eb 05                	jmp    c000ab58 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ab53:	b8 07 00 00 00       	mov    eax,0x7
c000ab58:	5b                   	pop    ebx
c000ab59:	5e                   	pop    esi
c000ab5a:	5f                   	pop    edi
c000ab5b:	c3                   	ret    

c000ab5c <Mouse::Mouse(char const*)>:
c000ab5c:	83 ec 0c             	sub    esp,0xc
c000ab5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab63:	83 ec 08             	sub    esp,0x8
c000ab66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab6a:	50                   	push   eax
c000ab6b:	e8 22 f0 ff ff       	call   c0009b92 <Device::Device(char const*)>
c000ab70:	83 c4 10             	add    esp,0x10
c000ab73:	ba c4 3a 02 c0       	mov    edx,0xc0023ac4
c000ab78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7c:	89 10                	mov    DWORD PTR [eax],edx
c000ab7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab82:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ab8c:	90                   	nop
c000ab8d:	83 c4 0c             	add    esp,0xc
c000ab90:	c3                   	ret    
c000ab91:	90                   	nop
c000ab92:	66 90                	xchg   ax,ax

c000ab94 <Mouse::~Mouse()>:
c000ab94:	83 ec 0c             	sub    esp,0xc
c000ab97:	ba c4 3a 02 c0       	mov    edx,0xc0023ac4
c000ab9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aba0:	89 10                	mov    DWORD PTR [eax],edx
c000aba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aba6:	83 ec 0c             	sub    esp,0xc
c000aba9:	50                   	push   eax
c000abaa:	e8 83 ed ff ff       	call   c0009932 <Device::~Device()>
c000abaf:	83 c4 10             	add    esp,0x10
c000abb2:	90                   	nop
c000abb3:	83 c4 0c             	add    esp,0xc
c000abb6:	c3                   	ret    
c000abb7:	90                   	nop

c000abb8 <Mouse::~Mouse()>:
c000abb8:	83 ec 0c             	sub    esp,0xc
c000abbb:	83 ec 0c             	sub    esp,0xc
c000abbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abc2:	e8 cd ff ff ff       	call   c000ab94 <Mouse::~Mouse()>
c000abc7:	83 c4 10             	add    esp,0x10
c000abca:	83 ec 08             	sub    esp,0x8
c000abcd:	68 58 01 00 00       	push   0x158
c000abd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abd6:	e8 80 27 00 00       	call   c000d35b <operator delete(void*, unsigned long)>
c000abdb:	83 c4 10             	add    esp,0x10
c000abde:	83 c4 0c             	add    esp,0xc
c000abe1:	c3                   	ret    

c000abe2 <NIC::getMAC()>:
c000abe2:	31 c0                	xor    eax,eax
c000abe4:	31 d2                	xor    edx,edx
c000abe6:	c3                   	ret    
c000abe7:	90                   	nop

c000abe8 <NIC::write(int, unsigned char*, int*)>:
c000abe8:	b8 01 00 00 00       	mov    eax,0x1
c000abed:	c3                   	ret    

c000abee <NIC::NIC(char const*)>:
c000abee:	83 ec 0c             	sub    esp,0xc
c000abf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abf5:	83 ec 08             	sub    esp,0x8
c000abf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abfc:	50                   	push   eax
c000abfd:	e8 90 ef ff ff       	call   c0009b92 <Device::Device(char const*)>
c000ac02:	83 c4 10             	add    esp,0x10
c000ac05:	ba f0 3a 02 c0       	mov    edx,0xc0023af0
c000ac0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac0e:	89 10                	mov    DWORD PTR [eax],edx
c000ac10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac14:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000ac1e:	90                   	nop
c000ac1f:	83 c4 0c             	add    esp,0xc
c000ac22:	c3                   	ret    
c000ac23:	90                   	nop

c000ac24 <NIC::~NIC()>:
c000ac24:	83 ec 0c             	sub    esp,0xc
c000ac27:	ba f0 3a 02 c0       	mov    edx,0xc0023af0
c000ac2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac30:	89 10                	mov    DWORD PTR [eax],edx
c000ac32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac36:	83 ec 0c             	sub    esp,0xc
c000ac39:	50                   	push   eax
c000ac3a:	e8 f3 ec ff ff       	call   c0009932 <Device::~Device()>
c000ac3f:	83 c4 10             	add    esp,0x10
c000ac42:	90                   	nop
c000ac43:	83 c4 0c             	add    esp,0xc
c000ac46:	c3                   	ret    
c000ac47:	90                   	nop

c000ac48 <NIC::~NIC()>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	83 ec 0c             	sub    esp,0xc
c000ac4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac52:	e8 cd ff ff ff       	call   c000ac24 <NIC::~NIC()>
c000ac57:	83 c4 10             	add    esp,0x10
c000ac5a:	83 ec 08             	sub    esp,0x8
c000ac5d:	68 58 01 00 00       	push   0x158
c000ac62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac66:	e8 f0 26 00 00       	call   c000d35b <operator delete(void*, unsigned long)>
c000ac6b:	83 c4 10             	add    esp,0x10
c000ac6e:	83 c4 0c             	add    esp,0xc
c000ac71:	c3                   	ret    

c000ac72 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ac72:	55                   	push   ebp
c000ac73:	57                   	push   edi
c000ac74:	56                   	push   esi
c000ac75:	53                   	push   ebx
c000ac76:	81 ec 28 01 00 00    	sub    esp,0x128
c000ac7c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000ac83:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000ac8a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000ac91:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000ac98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ac9c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000aca0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000aca7:	e8 e2 ef ff ff       	call   c0009c8e <Device::getName()>
c000acac:	5a                   	pop    edx
c000acad:	59                   	pop    ecx
c000acae:	50                   	push   eax
c000acaf:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000acb3:	55                   	push   ebp
c000acb4:	e8 87 59 ff ff       	call   c0000640 <strcpy>
c000acb9:	5b                   	pop    ebx
c000acba:	58                   	pop    eax
c000acbb:	68 1c 3b 02 c0       	push   0xc0023b1c
c000acc0:	55                   	push   ebp
c000acc1:	e8 7a 5b ff ff       	call   c0000840 <strcat>
c000acc6:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000accd:	e8 15 50 00 00       	call   c000fce7 <malloc>
c000acd2:	83 c4 0c             	add    esp,0xc
c000acd5:	89 c3                	mov    ebx,eax
c000acd7:	57                   	push   edi
c000acd8:	56                   	push   esi
c000acd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acdd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ace1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000ace8:	55                   	push   ebp
c000ace9:	50                   	push   eax
c000acea:	e8 59 fb ff ff       	call   c000a848 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000acef:	83 c4 14             	add    esp,0x14
c000acf2:	53                   	push   ebx
c000acf3:	e8 10 fc ff ff       	call   c000a908 <LogicalDisk::assignDriveLetter()>
c000acf8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000acfb:	e8 c2 fc ff ff       	call   c000a9c2 <LogicalDisk::mount()>
c000ad00:	58                   	pop    eax
c000ad01:	5a                   	pop    edx
c000ad02:	53                   	push   ebx
c000ad03:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ad0a:	e8 21 ed ff ff       	call   c0009a30 <Device::addChild(Device*)>
c000ad0f:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ad15:	5b                   	pop    ebx
c000ad16:	5e                   	pop    esi
c000ad17:	5f                   	pop    edi
c000ad18:	5d                   	pop    ebp
c000ad19:	c3                   	ret    

c000ad1a <createPartitionsForDisk(PhysicalDisk*)>:
c000ad1a:	55                   	push   ebp
c000ad1b:	57                   	push   edi
c000ad1c:	56                   	push   esi
c000ad1d:	53                   	push   ebx
c000ad1e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ad24:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ad2b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ad31:	3d 00 02 00 00       	cmp    eax,0x200
c000ad36:	74 27                	je     c000ad5f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ad38:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ad3e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ad44:	83 ec 10             	sub    esp,0x10
c000ad47:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ad4b:	99                   	cdq    
c000ad4c:	c1 e6 0a             	shl    esi,0xa
c000ad4f:	52                   	push   edx
c000ad50:	89 fd                	mov    ebp,edi
c000ad52:	50                   	push   eax
c000ad53:	55                   	push   ebp
c000ad54:	56                   	push   esi
c000ad55:	e8 4a 6f 01 00       	call   c0021ca4 <__udivdi3>
c000ad5a:	e9 b9 00 00 00       	jmp    c000ae18 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad5f:	83 ec 0c             	sub    esp,0xc
c000ad62:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ad64:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ad68:	56                   	push   esi
c000ad69:	6a 01                	push   0x1
c000ad6b:	6a 00                	push   0x0
c000ad6d:	6a 00                	push   0x0
c000ad6f:	53                   	push   ebx
c000ad70:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad73:	83 c4 20             	add    esp,0x20
c000ad76:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ad7e:	75 0a                	jne    c000ad8a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ad80:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000ad88:	74 2c                	je     c000adb6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ad8a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ad90:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ad96:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ad9c:	83 ec 10             	sub    esp,0x10
c000ad9f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ada3:	89 f7                	mov    edi,esi
c000ada5:	c1 e0 0a             	shl    eax,0xa
c000ada8:	c1 ff 1f             	sar    edi,0x1f
c000adab:	57                   	push   edi
c000adac:	56                   	push   esi
c000adad:	52                   	push   edx
c000adae:	50                   	push   eax
c000adaf:	e8 f0 6e 01 00       	call   c0021ca4 <__udivdi3>
c000adb4:	eb 62                	jmp    c000ae18 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000adb6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000adbd:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000adc4:	89 cf                	mov    edi,ecx
c000adc6:	83 e2 7f             	and    edx,0x7f
c000adc9:	83 e7 7f             	and    edi,0x7f
c000adcc:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000add3:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000add6:	83 e0 7f             	and    eax,0x7f
c000add9:	8d 14 01             	lea    edx,[ecx+eax*1]
c000addc:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000ade3:	83 e0 7f             	and    eax,0x7f
c000ade6:	01 d0                	add    eax,edx
c000ade8:	89 c5                	mov    ebp,eax
c000adea:	84 c0                	test   al,al
c000adec:	74 41                	je     c000ae2f <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000adee:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000adf4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000adfa:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ae00:	83 ec 10             	sub    esp,0x10
c000ae03:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ae07:	89 f7                	mov    edi,esi
c000ae09:	c1 e0 0a             	shl    eax,0xa
c000ae0c:	c1 ff 1f             	sar    edi,0x1f
c000ae0f:	57                   	push   edi
c000ae10:	56                   	push   esi
c000ae11:	52                   	push   edx
c000ae12:	50                   	push   eax
c000ae13:	e8 8c 6e 01 00       	call   c0021ca4 <__udivdi3>
c000ae18:	83 c4 14             	add    esp,0x14
c000ae1b:	52                   	push   edx
c000ae1c:	50                   	push   eax
c000ae1d:	6a 00                	push   0x0
c000ae1f:	6a 00                	push   0x0
c000ae21:	53                   	push   ebx
c000ae22:	e8 4b fe ff ff       	call   c000ac72 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000ae27:	83 c4 20             	add    esp,0x20
c000ae2a:	e9 73 01 00 00       	jmp    c000afa2 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000ae2f:	89 f0                	mov    eax,esi
c000ae31:	31 c9                	xor    ecx,ecx
c000ae33:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000ae3a:	75 02                	jne    c000ae3e <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000ae3c:	89 cd                	mov    ebp,ecx
c000ae3e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000ae45:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000ae4c:	c1 e2 08             	shl    edx,0x8
c000ae4f:	c1 e6 10             	shl    esi,0x10
c000ae52:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000ae5a:	09 f2                	or     edx,esi
c000ae5c:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000ae64:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000ae6b:	83 c0 10             	add    eax,0x10
c000ae6e:	09 f2                	or     edx,esi
c000ae70:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000ae77:	c1 e6 18             	shl    esi,0x18
c000ae7a:	09 f2                	or     edx,esi
c000ae7c:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000ae83:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000ae87:	c1 e6 10             	shl    esi,0x10
c000ae8a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000ae91:	c1 e2 08             	shl    edx,0x8
c000ae94:	09 f2                	or     edx,esi
c000ae96:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000ae9d:	09 f2                	or     edx,esi
c000ae9f:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000aea6:	c1 e6 18             	shl    esi,0x18
c000aea9:	09 f2                	or     edx,esi
c000aeab:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000aeaf:	41                   	inc    ecx
c000aeb0:	83 f9 04             	cmp    ecx,0x4
c000aeb3:	0f 85 7a ff ff ff    	jne    c000ae33 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000aeb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aebd:	83 f0 01             	xor    eax,0x1
c000aec0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000aec4:	75 4f                	jne    c000af15 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000aec6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aeca:	83 f0 01             	xor    eax,0x1
c000aecd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000aed1:	75 42                	jne    c000af15 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000aed3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000aedb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000aee3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000aee9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000aeef:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000aef5:	0f a4 c2 0a          	shld   edx,eax,0xa
c000aef9:	89 f7                	mov    edi,esi
c000aefb:	c1 e0 0a             	shl    eax,0xa
c000aefe:	c1 ff 1f             	sar    edi,0x1f
c000af01:	57                   	push   edi
c000af02:	56                   	push   esi
c000af03:	52                   	push   edx
c000af04:	50                   	push   eax
c000af05:	e8 9a 6d 01 00       	call   c0021ca4 <__udivdi3>
c000af0a:	83 c4 10             	add    esp,0x10
c000af0d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000af11:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000af15:	89 e8                	mov    eax,ebp
c000af17:	0f b6 e8             	movzx  ebp,al
c000af1a:	85 ed                	test   ebp,ebp
c000af1c:	74 50                	je     c000af6e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000af1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af22:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000af26:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000af2a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000af2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af32:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000af36:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000af3a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000af3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000af42:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000af46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af4a:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000af4e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000af52:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af56:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af5e:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000af62:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000af66:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000af6a:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000af6e:	31 ed                	xor    ebp,ebp
c000af70:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af74:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af78:	89 f8                	mov    eax,edi
c000af7a:	09 f0                	or     eax,esi
c000af7c:	74 1e                	je     c000af9c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000af7e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000af82:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000af86:	89 d1                	mov    ecx,edx
c000af88:	09 c1                	or     ecx,eax
c000af8a:	74 10                	je     c000af9c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000af8c:	83 ec 0c             	sub    esp,0xc
c000af8f:	57                   	push   edi
c000af90:	56                   	push   esi
c000af91:	52                   	push   edx
c000af92:	50                   	push   eax
c000af93:	53                   	push   ebx
c000af94:	e8 d9 fc ff ff       	call   c000ac72 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000af99:	83 c4 20             	add    esp,0x20
c000af9c:	45                   	inc    ebp
c000af9d:	83 fd 04             	cmp    ebp,0x4
c000afa0:	75 ce                	jne    c000af70 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000afa2:	81 c4 5c 02 00 00    	add    esp,0x25c
c000afa8:	5b                   	pop    ebx
c000afa9:	5e                   	pop    esi
c000afaa:	5f                   	pop    edi
c000afab:	5d                   	pop    ebp
c000afac:	c3                   	ret    
c000afad:	66 90                	xchg   ax,ax
c000afaf:	90                   	nop

c000afb0 <Serial::Serial(char const*)>:
c000afb0:	83 ec 0c             	sub    esp,0xc
c000afb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afb7:	83 ec 08             	sub    esp,0x8
c000afba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afbe:	50                   	push   eax
c000afbf:	e8 ce eb ff ff       	call   c0009b92 <Device::Device(char const*)>
c000afc4:	83 c4 10             	add    esp,0x10
c000afc7:	ba 30 3b 02 c0       	mov    edx,0xc0023b30
c000afcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afd0:	89 10                	mov    DWORD PTR [eax],edx
c000afd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afd6:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000afe0:	90                   	nop
c000afe1:	83 c4 0c             	add    esp,0xc
c000afe4:	c3                   	ret    
c000afe5:	90                   	nop
c000afe6:	66 90                	xchg   ax,ax

c000afe8 <Serial::~Serial()>:
c000afe8:	83 ec 0c             	sub    esp,0xc
c000afeb:	ba 30 3b 02 c0       	mov    edx,0xc0023b30
c000aff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff4:	89 10                	mov    DWORD PTR [eax],edx
c000aff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000affa:	83 ec 0c             	sub    esp,0xc
c000affd:	50                   	push   eax
c000affe:	e8 2f e9 ff ff       	call   c0009932 <Device::~Device()>
c000b003:	83 c4 10             	add    esp,0x10
c000b006:	90                   	nop
c000b007:	83 c4 0c             	add    esp,0xc
c000b00a:	c3                   	ret    
c000b00b:	90                   	nop

c000b00c <Serial::~Serial()>:
c000b00c:	83 ec 0c             	sub    esp,0xc
c000b00f:	83 ec 0c             	sub    esp,0xc
c000b012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b016:	e8 cd ff ff ff       	call   c000afe8 <Serial::~Serial()>
c000b01b:	83 c4 10             	add    esp,0x10
c000b01e:	83 ec 08             	sub    esp,0x8
c000b021:	68 58 01 00 00       	push   0x158
c000b026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b02a:	e8 2c 23 00 00       	call   c000d35b <operator delete(void*, unsigned long)>
c000b02f:	83 c4 10             	add    esp,0x10
c000b032:	83 c4 0c             	add    esp,0xc
c000b035:	c3                   	ret    
c000b036:	66 90                	xchg   ax,ax

c000b038 <Timer::Timer(char const*)>:
c000b038:	83 ec 0c             	sub    esp,0xc
c000b03b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b03f:	83 ec 08             	sub    esp,0x8
c000b042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b046:	50                   	push   eax
c000b047:	e8 46 eb ff ff       	call   c0009b92 <Device::Device(char const*)>
c000b04c:	83 c4 10             	add    esp,0x10
c000b04f:	ba 0c 3c 02 c0       	mov    edx,0xc0023c0c
c000b054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b058:	89 10                	mov    DWORD PTR [eax],edx
c000b05a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b05e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000b068:	90                   	nop
c000b069:	83 c4 0c             	add    esp,0xc
c000b06c:	c3                   	ret    
c000b06d:	90                   	nop
c000b06e:	66 90                	xchg   ax,ax

c000b070 <Timer::~Timer()>:
c000b070:	83 ec 0c             	sub    esp,0xc
c000b073:	ba 0c 3c 02 c0       	mov    edx,0xc0023c0c
c000b078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b07c:	89 10                	mov    DWORD PTR [eax],edx
c000b07e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b082:	83 ec 0c             	sub    esp,0xc
c000b085:	50                   	push   eax
c000b086:	e8 a7 e8 ff ff       	call   c0009932 <Device::~Device()>
c000b08b:	83 c4 10             	add    esp,0x10
c000b08e:	90                   	nop
c000b08f:	83 c4 0c             	add    esp,0xc
c000b092:	c3                   	ret    
c000b093:	90                   	nop

c000b094 <Timer::~Timer()>:
c000b094:	83 ec 0c             	sub    esp,0xc
c000b097:	83 ec 0c             	sub    esp,0xc
c000b09a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b09e:	e8 cd ff ff ff       	call   c000b070 <Timer::~Timer()>
c000b0a3:	83 c4 10             	add    esp,0x10
c000b0a6:	83 ec 08             	sub    esp,0x8
c000b0a9:	68 5c 01 00 00       	push   0x15c
c000b0ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0b2:	e8 a4 22 00 00       	call   c000d35b <operator delete(void*, unsigned long)>
c000b0b7:	83 c4 10             	add    esp,0x10
c000b0ba:	83 c4 0c             	add    esp,0xc
c000b0bd:	c3                   	ret    

c000b0be <Timer::read()>:
c000b0be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0c2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b0c8:	c3                   	ret    

c000b0c9 <setupTimer(int)>:
c000b0c9:	53                   	push   ebx
c000b0ca:	83 ec 14             	sub    esp,0x14
c000b0cd:	68 5c 01 00 00       	push   0x15c
c000b0d2:	e8 10 4c 00 00       	call   c000fce7 <malloc>
c000b0d7:	89 04 24             	mov    DWORD PTR [esp],eax
c000b0da:	89 c3                	mov    ebx,eax
c000b0dc:	e8 7b 64 01 00       	call   c002155c <PIT::PIT()>
c000b0e1:	58                   	pop    eax
c000b0e2:	5a                   	pop    edx
c000b0e3:	53                   	push   ebx
c000b0e4:	ff 35 d0 d0 02 c0    	push   DWORD PTR ds:0xc002d0d0
c000b0ea:	e8 41 e9 ff ff       	call   c0009a30 <Device::addChild(Device*)>
c000b0ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0f1:	6a 00                	push   0x0
c000b0f3:	6a 00                	push   0x0
c000b0f5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b0f9:	53                   	push   ebx
c000b0fa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0fd:	89 d8                	mov    eax,ebx
c000b0ff:	83 c4 28             	add    esp,0x28
c000b102:	5b                   	pop    ebx
c000b103:	c3                   	ret    

c000b104 <timerHandler(unsigned int)>:
c000b104:	57                   	push   edi
c000b105:	31 d2                	xor    edx,edx
c000b107:	56                   	push   esi
c000b108:	53                   	push   ebx
c000b109:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b10d:	01 1d 50 cb 02 c0    	add    DWORD PTR ds:0xc002cb50,ebx
c000b113:	11 15 54 cb 02 c0    	adc    DWORD PTR ds:0xc002cb54,edx
c000b119:	80 3d d5 d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0d5,0x0
c000b120:	75 12                	jne    c000b134 <timerHandler(unsigned int)+0x30>
c000b122:	c7 44 24 10 bf 3b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023bbf
c000b12a:	5b                   	pop    ebx
c000b12b:	5e                   	pop    esi
c000b12c:	5f                   	pop    edi
c000b12d:	e9 32 be ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c000b132:	66 90                	xchg   ax,ax
c000b134:	fa                   	cli    
c000b135:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c000b13b:	83 ec 0c             	sub    esp,0xc
c000b13e:	68 40 fa 02 c0       	push   0xc002fa40
c000b143:	e8 f4 6e 01 00       	call   c002203c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b148:	83 c4 10             	add    esp,0x10
c000b14b:	84 c0                	test   al,al
c000b14d:	0f 85 a9 00 00 00    	jne    c000b1fc <timerHandler(unsigned int)+0xf8>
c000b153:	83 ec 0c             	sub    esp,0xc
c000b156:	68 40 fa 02 c0       	push   0xc002fa40
c000b15b:	e8 f8 6e 01 00       	call   c0022058 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b160:	83 c4 10             	add    esp,0x10
c000b163:	89 c6                	mov    esi,eax
c000b165:	8d 76 00             	lea    esi,[esi+0x0]
c000b168:	83 ec 0c             	sub    esp,0xc
c000b16b:	68 40 fa 02 c0       	push   0xc002fa40
c000b170:	e8 e3 6e 01 00       	call   c0022058 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b175:	c7 04 24 40 fa 02 c0 	mov    DWORD PTR [esp],0xc002fa40
c000b17c:	89 c7                	mov    edi,eax
c000b17e:	e8 dd 6e 01 00       	call   c0022060 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000b183:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c000b186:	83 c4 10             	add    esp,0x10
c000b189:	8b 4f 30             	mov    ecx,DWORD PTR [edi+0x30]
c000b18c:	39 15 50 cb 02 c0    	cmp    DWORD PTR ds:0xc002cb50,edx
c000b192:	a1 54 cb 02 c0       	mov    eax,ds:0xc002cb54
c000b197:	19 c8                	sbb    eax,ecx
c000b199:	72 21                	jb     c000b1bc <timerHandler(unsigned int)+0xb8>
c000b19b:	83 ec 0c             	sub    esp,0xc
c000b19e:	57                   	push   edi
c000b19f:	e8 f8 c3 00 00       	call   c001759c <unblockTask(ThreadControlBlock*)>
c000b1a4:	83 c4 10             	add    esp,0x10
c000b1a7:	39 fe                	cmp    esi,edi
c000b1a9:	75 25                	jne    c000b1d0 <timerHandler(unsigned int)+0xcc>
c000b1ab:	83 ec 0c             	sub    esp,0xc
c000b1ae:	68 40 fa 02 c0       	push   0xc002fa40
c000b1b3:	e8 a0 6e 01 00       	call   c0022058 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b1b8:	89 c6                	mov    esi,eax
c000b1ba:	eb 10                	jmp    c000b1cc <timerHandler(unsigned int)+0xc8>
c000b1bc:	50                   	push   eax
c000b1bd:	50                   	push   eax
c000b1be:	57                   	push   edi
c000b1bf:	68 40 fa 02 c0       	push   0xc002fa40
c000b1c4:	e8 53 6f 01 00       	call   c002211c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000b1c9:	8d 76 00             	lea    esi,[esi+0x0]
c000b1cc:	83 c4 10             	add    esp,0x10
c000b1cf:	90                   	nop
c000b1d0:	83 ec 0c             	sub    esp,0xc
c000b1d3:	68 40 fa 02 c0       	push   0xc002fa40
c000b1d8:	e8 5f 6e 01 00       	call   c002203c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b1dd:	83 c4 10             	add    esp,0x10
c000b1e0:	84 c0                	test   al,al
c000b1e2:	75 18                	jne    c000b1fc <timerHandler(unsigned int)+0xf8>
c000b1e4:	83 ec 0c             	sub    esp,0xc
c000b1e7:	68 40 fa 02 c0       	push   0xc002fa40
c000b1ec:	e8 67 6e 01 00       	call   c0022058 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b1f1:	83 c4 10             	add    esp,0x10
c000b1f4:	39 f0                	cmp    eax,esi
c000b1f6:	0f 85 6c ff ff ff    	jne    c000b168 <timerHandler(unsigned int)+0x64>
c000b1fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b201:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b204:	85 c0                	test   eax,eax
c000b206:	74 48                	je     c000b250 <timerHandler(unsigned int)+0x14c>
c000b208:	80 3d d4 d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0d4,0x0
c000b20f:	74 3f                	je     c000b250 <timerHandler(unsigned int)+0x14c>
c000b211:	3d e8 03 00 00       	cmp    eax,0x3e8
c000b216:	76 1c                	jbe    c000b234 <timerHandler(unsigned int)+0x130>
c000b218:	83 ec 0c             	sub    esp,0xc
c000b21b:	68 d5 3b 02 c0       	push   0xc0023bd5
c000b220:	e8 3f bd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b225:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b22a:	83 c4 10             	add    esp,0x10
c000b22d:	c7 40 38 e8 03 00 00 	mov    DWORD PTR [eax+0x38],0x3e8
c000b234:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b23a:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000b23d:	89 c1                	mov    ecx,eax
c000b23f:	29 d9                	sub    ecx,ebx
c000b241:	39 d8                	cmp    eax,ebx
c000b243:	89 4a 38             	mov    DWORD PTR [edx+0x38],ecx
c000b246:	77 08                	ja     c000b250 <timerHandler(unsigned int)+0x14c>
c000b248:	e8 f3 bf 00 00       	call   c0017240 <schedule()>
c000b24d:	8d 76 00             	lea    esi,[esi+0x0]
c000b250:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c000b257:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c000b25e:	75 04                	jne    c000b264 <timerHandler(unsigned int)+0x160>
c000b260:	fb                   	sti    
c000b261:	8d 76 00             	lea    esi,[esi+0x0]
c000b264:	5b                   	pop    ebx
c000b265:	5e                   	pop    esi
c000b266:	5f                   	pop    edi
c000b267:	c3                   	ret    

c000b268 <VCache::VCache(PhysicalDisk*)>:
c000b268:	53                   	push   ebx
c000b269:	83 ec 18             	sub    esp,0x18
c000b26c:	ba 7c 3c 02 c0       	mov    edx,0xc0023c7c
c000b271:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b275:	89 10                	mov    DWORD PTR [eax],edx
c000b277:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b27b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000b282:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b286:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000b28d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b291:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000b298:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000b29f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2a3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000b2aa:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000b2b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2b5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000b2bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2c0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b2c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2c8:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000b2cf:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000b2d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2da:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b2de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2e2:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000b2e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2ea:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b2ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2f2:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000b2f9:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000b301:	83 ec 0c             	sub    esp,0xc
c000b304:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b308:	e8 da 49 00 00       	call   c000fce7 <malloc>
c000b30d:	83 c4 10             	add    esp,0x10
c000b310:	89 c3                	mov    ebx,eax
c000b312:	83 ec 0c             	sub    esp,0xc
c000b315:	53                   	push   ebx
c000b316:	e8 f9 4c 00 00       	call   c0010014 <Mutex::Mutex()>
c000b31b:	83 c4 10             	add    esp,0x10
c000b31e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b322:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000b325:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b329:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b32d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000b330:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b334:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b33b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b33f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b345:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b349:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b34c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b350:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000b356:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b35c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b360:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000b363:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000b366:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b36a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b36e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b372:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b378:	05 00 01 00 00       	add    eax,0x100
c000b37d:	c1 e0 04             	shl    eax,0x4
c000b380:	83 ec 0c             	sub    esp,0xc
c000b383:	50                   	push   eax
c000b384:	e8 5e 49 00 00       	call   c000fce7 <malloc>
c000b389:	83 c4 10             	add    esp,0x10
c000b38c:	89 c2                	mov    edx,eax
c000b38e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b392:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b395:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b399:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000b3a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3a4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b3a8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b3ac:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b3b2:	89 d0                	mov    eax,edx
c000b3b4:	c1 e0 02             	shl    eax,0x2
c000b3b7:	01 d0                	add    eax,edx
c000b3b9:	c1 e0 04             	shl    eax,0x4
c000b3bc:	83 ec 0c             	sub    esp,0xc
c000b3bf:	50                   	push   eax
c000b3c0:	e8 22 49 00 00       	call   c000fce7 <malloc>
c000b3c5:	83 c4 10             	add    esp,0x10
c000b3c8:	89 c2                	mov    edx,eax
c000b3ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3ce:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000b3d1:	90                   	nop
c000b3d2:	83 c4 18             	add    esp,0x18
c000b3d5:	5b                   	pop    ebx
c000b3d6:	c3                   	ret    
c000b3d7:	90                   	nop

c000b3d8 <VCache::invalidateReadBuffer()>:
c000b3d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3dc:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000b3e2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b3e6:	c3                   	ret    
c000b3e7:	90                   	nop

c000b3e8 <VCache::writeWriteBuffer()>:
c000b3e8:	53                   	push   ebx
c000b3e9:	83 ec 08             	sub    esp,0x8
c000b3ec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b3f0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b3f4:	74 1e                	je     c000b414 <VCache::writeWriteBuffer()+0x2c>
c000b3f6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b3f9:	83 ec 0c             	sub    esp,0xc
c000b3fc:	8b 10                	mov    edx,DWORD PTR [eax]
c000b3fe:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000b401:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000b404:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000b407:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b40a:	50                   	push   eax
c000b40b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b40e:	83 c4 20             	add    esp,0x20
c000b411:	8d 76 00             	lea    esi,[esi+0x0]
c000b414:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b41b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000b422:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000b426:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000b42d:	83 c4 08             	add    esp,0x8
c000b430:	5b                   	pop    ebx
c000b431:	c3                   	ret    
c000b432:	66 90                	xchg   ax,ax

c000b434 <VCache::~VCache()>:
c000b434:	83 ec 0c             	sub    esp,0xc
c000b437:	ba 7c 3c 02 c0       	mov    edx,0xc0023c7c
c000b43c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b440:	89 10                	mov    DWORD PTR [eax],edx
c000b442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b446:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000b449:	0f b6 c0             	movzx  eax,al
c000b44c:	85 c0                	test   eax,eax
c000b44e:	74 10                	je     c000b460 <VCache::~VCache()+0x2c>
c000b450:	83 ec 0c             	sub    esp,0xc
c000b453:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b457:	e8 8c ff ff ff       	call   c000b3e8 <VCache::writeWriteBuffer()>
c000b45c:	83 c4 10             	add    esp,0x10
c000b45f:	90                   	nop
c000b460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b464:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b467:	83 ec 0c             	sub    esp,0xc
c000b46a:	50                   	push   eax
c000b46b:	e8 87 48 00 00       	call   c000fcf7 <free>
c000b470:	83 c4 10             	add    esp,0x10
c000b473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b477:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b47a:	83 ec 0c             	sub    esp,0xc
c000b47d:	50                   	push   eax
c000b47e:	e8 74 48 00 00       	call   c000fcf7 <free>
c000b483:	83 c4 10             	add    esp,0x10
c000b486:	90                   	nop
c000b487:	83 c4 0c             	add    esp,0xc
c000b48a:	c3                   	ret    
c000b48b:	90                   	nop

c000b48c <VCache::~VCache()>:
c000b48c:	83 ec 0c             	sub    esp,0xc
c000b48f:	83 ec 0c             	sub    esp,0xc
c000b492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b496:	e8 99 ff ff ff       	call   c000b434 <VCache::~VCache()>
c000b49b:	83 c4 10             	add    esp,0x10
c000b49e:	83 ec 08             	sub    esp,0x8
c000b4a1:	6a 44                	push   0x44
c000b4a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a7:	e8 af 1e 00 00       	call   c000d35b <operator delete(void*, unsigned long)>
c000b4ac:	83 c4 10             	add    esp,0x10
c000b4af:	83 c4 0c             	add    esp,0xc
c000b4b2:	c3                   	ret    
c000b4b3:	90                   	nop

c000b4b4 <VCache::write(unsigned long long, int, void*)>:
c000b4b4:	55                   	push   ebp
c000b4b5:	57                   	push   edi
c000b4b6:	56                   	push   esi
c000b4b7:	53                   	push   ebx
c000b4b8:	83 ec 1c             	sub    esp,0x1c
c000b4bb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b4bf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b4c3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000b4c7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b4cb:	e8 68 ba 00 00       	call   c0016f38 <KeDisablePreemption()>
c000b4d0:	b9 00 10 00 00       	mov    ecx,0x1000
c000b4d5:	50                   	push   eax
c000b4d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b4d9:	0f af c3             	imul   eax,ebx
c000b4dc:	05 ff 0f 00 00       	add    eax,0xfff
c000b4e1:	99                   	cdq    
c000b4e2:	f7 f9                	idiv   ecx
c000b4e4:	50                   	push   eax
c000b4e5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b4e9:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b4ef:	e8 2e 8d 00 00       	call   c0014222 <VAS::canLockPages(unsigned long, int)>
c000b4f4:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000b4f8:	83 c4 10             	add    esp,0x10
c000b4fb:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b500:	74 2a                	je     c000b52c <VCache::write(unsigned long long, int, void*)+0x78>
c000b502:	b9 00 10 00 00       	mov    ecx,0x1000
c000b507:	50                   	push   eax
c000b508:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b50b:	0f af c3             	imul   eax,ebx
c000b50e:	05 ff 0f 00 00       	add    eax,0xfff
c000b513:	99                   	cdq    
c000b514:	f7 f9                	idiv   ecx
c000b516:	50                   	push   eax
c000b517:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b51b:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b521:	e8 f6 90 00 00       	call   c001461c <VAS::lockPages(unsigned long, int)>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	8d 76 00             	lea    esi,[esi+0x0]
c000b52c:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000b530:	74 0e                	je     c000b540 <VCache::write(unsigned long long, int, void*)+0x8c>
c000b532:	83 ec 0c             	sub    esp,0xc
c000b535:	55                   	push   ebp
c000b536:	e8 9d fe ff ff       	call   c000b3d8 <VCache::invalidateReadBuffer()>
c000b53b:	83 c4 10             	add    esp,0x10
c000b53e:	66 90                	xchg   ax,ax
c000b540:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000b544:	74 72                	je     c000b5b8 <VCache::write(unsigned long long, int, void*)+0x104>
c000b546:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000b549:	89 c8                	mov    eax,ecx
c000b54b:	99                   	cdq    
c000b54c:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000b54f:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000b552:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b556:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b55a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b55e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b562:	31 f0                	xor    eax,esi
c000b564:	31 fa                	xor    edx,edi
c000b566:	09 d0                	or     eax,edx
c000b568:	75 42                	jne    c000b5ac <VCache::write(unsigned long long, int, void*)+0xf8>
c000b56a:	83 fb 01             	cmp    ebx,0x1
c000b56d:	75 3d                	jne    c000b5ac <VCache::write(unsigned long long, int, void*)+0xf8>
c000b56f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b572:	89 cf                	mov    edi,ecx
c000b574:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b57a:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b57e:	0f af f8             	imul   edi,eax
c000b581:	89 c1                	mov    ecx,eax
c000b583:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000b586:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b588:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000b58b:	40                   	inc    eax
c000b58c:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000b58f:	83 f8 50             	cmp    eax,0x50
c000b592:	0f 85 a8 00 00 00    	jne    c000b640 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b598:	83 ec 0c             	sub    esp,0xc
c000b59b:	55                   	push   ebp
c000b59c:	e8 47 fe ff ff       	call   c000b3e8 <VCache::writeWriteBuffer()>
c000b5a1:	83 c4 10             	add    esp,0x10
c000b5a4:	e9 97 00 00 00       	jmp    c000b640 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b5a9:	8d 76 00             	lea    esi,[esi+0x0]
c000b5ac:	83 ec 0c             	sub    esp,0xc
c000b5af:	55                   	push   ebp
c000b5b0:	e8 33 fe ff ff       	call   c000b3e8 <VCache::writeWriteBuffer()>
c000b5b5:	83 c4 10             	add    esp,0x10
c000b5b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b5bb:	83 fb 4f             	cmp    ebx,0x4f
c000b5be:	7f 20                	jg     c000b5e0 <VCache::write(unsigned long long, int, void*)+0x12c>
c000b5c0:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000b5c3:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000b5c6:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000b5c9:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000b5cd:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000b5d0:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b5d6:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b5da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b5dc:	eb 62                	jmp    c000b640 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b5de:	66 90                	xchg   ax,ax
c000b5e0:	83 ec 0c             	sub    esp,0xc
c000b5e3:	8b 10                	mov    edx,DWORD PTR [eax]
c000b5e5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b5e9:	53                   	push   ebx
c000b5ea:	57                   	push   edi
c000b5eb:	56                   	push   esi
c000b5ec:	50                   	push   eax
c000b5ed:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b5f0:	83 c4 20             	add    esp,0x20
c000b5f3:	89 c6                	mov    esi,eax
c000b5f5:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b5fa:	74 28                	je     c000b624 <VCache::write(unsigned long long, int, void*)+0x170>
c000b5fc:	b9 00 10 00 00       	mov    ecx,0x1000
c000b601:	52                   	push   edx
c000b602:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b606:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b60c:	99                   	cdq    
c000b60d:	f7 f9                	idiv   ecx
c000b60f:	50                   	push   eax
c000b610:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b614:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b61a:	e8 3f 8c 00 00       	call   c001425e <VAS::unlockPages(unsigned long, int)>
c000b61f:	83 c4 10             	add    esp,0x10
c000b622:	66 90                	xchg   ax,ax
c000b624:	e8 37 b9 00 00       	call   c0016f60 <KeRestorePreemption()>
c000b629:	85 f6                	test   esi,esi
c000b62b:	74 4b                	je     c000b678 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b62d:	83 ec 0c             	sub    esp,0xc
c000b630:	68 34 3c 02 c0       	push   0xc0023c34
c000b635:	e8 2a b9 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b63a:	83 c4 10             	add    esp,0x10
c000b63d:	eb 39                	jmp    c000b678 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b63f:	90                   	nop
c000b640:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b645:	74 29                	je     c000b670 <VCache::write(unsigned long long, int, void*)+0x1bc>
c000b647:	b9 00 10 00 00       	mov    ecx,0x1000
c000b64c:	50                   	push   eax
c000b64d:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b651:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b657:	99                   	cdq    
c000b658:	f7 f9                	idiv   ecx
c000b65a:	50                   	push   eax
c000b65b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b65f:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b665:	e8 f4 8b 00 00       	call   c001425e <VAS::unlockPages(unsigned long, int)>
c000b66a:	83 c4 10             	add    esp,0x10
c000b66d:	8d 76 00             	lea    esi,[esi+0x0]
c000b670:	e8 eb b8 00 00       	call   c0016f60 <KeRestorePreemption()>
c000b675:	31 f6                	xor    esi,esi
c000b677:	90                   	nop
c000b678:	83 c4 1c             	add    esp,0x1c
c000b67b:	89 f0                	mov    eax,esi
c000b67d:	5b                   	pop    ebx
c000b67e:	5e                   	pop    esi
c000b67f:	5f                   	pop    edi
c000b680:	5d                   	pop    ebp
c000b681:	c3                   	ret    

c000b682 <VCache::read(unsigned long long, int, void*)>:
c000b682:	55                   	push   ebp
c000b683:	57                   	push   edi
c000b684:	bf 00 10 00 00       	mov    edi,0x1000
c000b689:	56                   	push   esi
c000b68a:	53                   	push   ebx
c000b68b:	83 ec 2c             	sub    esp,0x2c
c000b68e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b692:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000b696:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b69a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000b69e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6a2:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000b6a6:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b6aa:	e8 89 b8 00 00       	call   c0016f38 <KeDisablePreemption()>
c000b6af:	50                   	push   eax
c000b6b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b6b3:	0f af c6             	imul   eax,esi
c000b6b6:	05 ff 0f 00 00       	add    eax,0xfff
c000b6bb:	99                   	cdq    
c000b6bc:	f7 ff                	idiv   edi
c000b6be:	50                   	push   eax
c000b6bf:	55                   	push   ebp
c000b6c0:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b6c6:	e8 57 8b 00 00       	call   c0014222 <VAS::canLockPages(unsigned long, int)>
c000b6cb:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000b6cf:	83 c4 10             	add    esp,0x10
c000b6d2:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000b6d7:	74 1f                	je     c000b6f8 <VCache::read(unsigned long long, int, void*)+0x76>
c000b6d9:	50                   	push   eax
c000b6da:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b6dd:	0f af c6             	imul   eax,esi
c000b6e0:	05 ff 0f 00 00       	add    eax,0xfff
c000b6e5:	99                   	cdq    
c000b6e6:	f7 ff                	idiv   edi
c000b6e8:	50                   	push   eax
c000b6e9:	55                   	push   ebp
c000b6ea:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b6f0:	e8 27 8f 00 00       	call   c001461c <VAS::lockPages(unsigned long, int)>
c000b6f5:	83 c4 10             	add    esp,0x10
c000b6f8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b6fc:	74 0e                	je     c000b70c <VCache::read(unsigned long long, int, void*)+0x8a>
c000b6fe:	83 ec 0c             	sub    esp,0xc
c000b701:	53                   	push   ebx
c000b702:	e8 e1 fc ff ff       	call   c000b3e8 <VCache::writeWriteBuffer()>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	66 90                	xchg   ax,ax
c000b70c:	83 fe 01             	cmp    esi,0x1
c000b70f:	0f 85 ef 00 00 00    	jne    c000b804 <VCache::read(unsigned long long, int, void*)+0x182>
c000b715:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000b718:	80 b9 68 01 00 00 00 	cmp    BYTE PTR [ecx+0x168],0x0
c000b71f:	0f 85 df 00 00 00    	jne    c000b804 <VCache::read(unsigned long long, int, void*)+0x182>
c000b725:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b728:	89 fe                	mov    esi,edi
c000b72a:	f7 de                	neg    esi
c000b72c:	89 f0                	mov    eax,esi
c000b72e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000b732:	c1 f8 1f             	sar    eax,0x1f
c000b735:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b739:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b73d:	89 f0                	mov    eax,esi
c000b73f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000b743:	23 74 24 0c          	and    esi,DWORD PTR [esp+0xc]
c000b747:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000b74b:	89 f2                	mov    edx,esi
c000b74d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000b752:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000b756:	74 0c                	je     c000b764 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b758:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000b75b:	75 07                	jne    c000b764 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b75d:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000b760:	74 4e                	je     c000b7b0 <VCache::read(unsigned long long, int, void*)+0x12e>
c000b762:	66 90                	xchg   ax,ax
c000b764:	83 ec 0c             	sub    esp,0xc
c000b767:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000b76b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000b76e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000b771:	8b 31                	mov    esi,DWORD PTR [ecx]
c000b773:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000b776:	57                   	push   edi
c000b777:	52                   	push   edx
c000b778:	50                   	push   eax
c000b779:	51                   	push   ecx
c000b77a:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000b77d:	83 c4 20             	add    esp,0x20
c000b780:	89 c7                	mov    edi,eax
c000b782:	85 c0                	test   eax,eax
c000b784:	74 2a                	je     c000b7b0 <VCache::read(unsigned long long, int, void*)+0x12e>
c000b786:	83 ec 0c             	sub    esp,0xc
c000b789:	68 4c 3c 02 c0       	push   0xc0023c4c
c000b78e:	e8 d1 b7 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b793:	83 c4 10             	add    esp,0x10
c000b796:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b79b:	0f 84 b3 00 00 00    	je     c000b854 <VCache::read(unsigned long long, int, void*)+0x1d2>
c000b7a1:	51                   	push   ecx
c000b7a2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b7a5:	05 ff 0f 00 00       	add    eax,0xfff
c000b7aa:	e9 8d 00 00 00       	jmp    c000b83c <VCache::read(unsigned long long, int, void*)+0x1ba>
c000b7af:	90                   	nop
c000b7b0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b7b3:	89 ef                	mov    edi,ebp
c000b7b5:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b7bb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b7be:	8d 70 ff             	lea    esi,[eax-0x1]
c000b7c1:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b7c5:	0f af f1             	imul   esi,ecx
c000b7c8:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000b7cb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b7cd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b7d2:	74 24                	je     c000b7f8 <VCache::read(unsigned long long, int, void*)+0x176>
c000b7d4:	b9 00 10 00 00       	mov    ecx,0x1000
c000b7d9:	52                   	push   edx
c000b7da:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b7dd:	05 ff 0f 00 00       	add    eax,0xfff
c000b7e2:	99                   	cdq    
c000b7e3:	f7 f9                	idiv   ecx
c000b7e5:	50                   	push   eax
c000b7e6:	55                   	push   ebp
c000b7e7:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b7ed:	e8 6c 8a 00 00       	call   c001425e <VAS::unlockPages(unsigned long, int)>
c000b7f2:	83 c4 10             	add    esp,0x10
c000b7f5:	8d 76 00             	lea    esi,[esi+0x0]
c000b7f8:	e8 63 b7 00 00       	call   c0016f60 <KeRestorePreemption()>
c000b7fd:	31 ff                	xor    edi,edi
c000b7ff:	eb 5b                	jmp    c000b85c <VCache::read(unsigned long long, int, void*)+0x1da>
c000b801:	8d 76 00             	lea    esi,[esi+0x0]
c000b804:	83 ec 0c             	sub    esp,0xc
c000b807:	53                   	push   ebx
c000b808:	e8 cb fb ff ff       	call   c000b3d8 <VCache::invalidateReadBuffer()>
c000b80d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b810:	8b 10                	mov    edx,DWORD PTR [eax]
c000b812:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b815:	56                   	push   esi
c000b816:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b81a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b81e:	50                   	push   eax
c000b81f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000b822:	83 c4 20             	add    esp,0x20
c000b825:	89 c7                	mov    edi,eax
c000b827:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000b82c:	74 26                	je     c000b854 <VCache::read(unsigned long long, int, void*)+0x1d2>
c000b82e:	50                   	push   eax
c000b82f:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000b833:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000b839:	8d 76 00             	lea    esi,[esi+0x0]
c000b83c:	b9 00 10 00 00       	mov    ecx,0x1000
c000b841:	99                   	cdq    
c000b842:	f7 f9                	idiv   ecx
c000b844:	50                   	push   eax
c000b845:	55                   	push   ebp
c000b846:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b84c:	e8 0d 8a 00 00       	call   c001425e <VAS::unlockPages(unsigned long, int)>
c000b851:	83 c4 10             	add    esp,0x10
c000b854:	e8 07 b7 00 00       	call   c0016f60 <KeRestorePreemption()>
c000b859:	8d 76 00             	lea    esi,[esi+0x0]
c000b85c:	83 c4 2c             	add    esp,0x2c
c000b85f:	89 f8                	mov    eax,edi
c000b861:	5b                   	pop    ebx
c000b862:	5e                   	pop    esi
c000b863:	5f                   	pop    edi
c000b864:	5d                   	pop    ebp
c000b865:	c3                   	ret    

c000b866 <Video::putrect(int, int, int, int, unsigned int)>:
c000b866:	55                   	push   ebp
c000b867:	57                   	push   edi
c000b868:	56                   	push   esi
c000b869:	53                   	push   ebx
c000b86a:	83 ec 1c             	sub    esp,0x1c
c000b86d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b871:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b875:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000b879:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000b87d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b881:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b885:	01 df                	add    edi,ebx
c000b887:	39 fb                	cmp    ebx,edi
c000b889:	7d 1f                	jge    c000b8aa <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000b88b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b88f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000b893:	7d 12                	jge    c000b8a7 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000b895:	8b 16                	mov    edx,DWORD PTR [esi]
c000b897:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b89b:	53                   	push   ebx
c000b89c:	55                   	push   ebp
c000b89d:	45                   	inc    ebp
c000b89e:	56                   	push   esi
c000b89f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b8a2:	83 c4 10             	add    esp,0x10
c000b8a5:	eb e8                	jmp    c000b88f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000b8a7:	43                   	inc    ebx
c000b8a8:	eb dd                	jmp    c000b887 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000b8aa:	83 c4 1c             	add    esp,0x1c
c000b8ad:	5b                   	pop    ebx
c000b8ae:	5e                   	pop    esi
c000b8af:	5f                   	pop    edi
c000b8b0:	5d                   	pop    ebp
c000b8b1:	c3                   	ret    

c000b8b2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000b8b2:	55                   	push   ebp
c000b8b3:	57                   	push   edi
c000b8b4:	31 ff                	xor    edi,edi
c000b8b6:	56                   	push   esi
c000b8b7:	53                   	push   ebx
c000b8b8:	83 ec 1c             	sub    esp,0x1c
c000b8bb:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000b8bf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b8c3:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000b8ca:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000b8cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8d3:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000b8d7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b8db:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000b8de:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b8e2:	01 f9                	add    ecx,edi
c000b8e4:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000b8e8:	7d 2f                	jge    c000b919 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000b8ea:	31 f6                	xor    esi,esi
c000b8ec:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b8f0:	01 f2                	add    edx,esi
c000b8f2:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000b8f6:	7d 1a                	jge    c000b912 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000b8f8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b8fb:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000b8fe:	46                   	inc    esi
c000b8ff:	51                   	push   ecx
c000b900:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b904:	52                   	push   edx
c000b905:	55                   	push   ebp
c000b906:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b909:	83 c4 10             	add    esp,0x10
c000b90c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b910:	eb da                	jmp    c000b8ec <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000b912:	47                   	inc    edi
c000b913:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000b917:	eb c5                	jmp    c000b8de <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000b919:	83 c4 1c             	add    esp,0x1c
c000b91c:	5b                   	pop    ebx
c000b91d:	5e                   	pop    esi
c000b91e:	5f                   	pop    edi
c000b91f:	5d                   	pop    ebp
c000b920:	c3                   	ret    
c000b921:	90                   	nop

c000b922 <Video::blit(unsigned int*, int, int, int, int)>:
c000b922:	55                   	push   ebp
c000b923:	57                   	push   edi
c000b924:	56                   	push   esi
c000b925:	53                   	push   ebx
c000b926:	83 ec 1c             	sub    esp,0x1c
c000b929:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b92d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b931:	85 c0                	test   eax,eax
c000b933:	79 02                	jns    c000b937 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000b935:	31 c0                	xor    eax,eax
c000b937:	c1 e0 02             	shl    eax,0x2
c000b93a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b93e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b942:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b946:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000b94a:	39 d8                	cmp    eax,ebx
c000b94c:	7e 49                	jle    c000b997 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000b94e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b954:	7c 41                	jl     c000b997 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000b956:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b95a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b95e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b962:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000b966:	39 f9                	cmp    ecx,edi
c000b968:	7e 22                	jle    c000b98c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000b96a:	83 c5 04             	add    ebp,0x4
c000b96d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b973:	7c 14                	jl     c000b989 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000b975:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b977:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000b97a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b97e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b982:	56                   	push   esi
c000b983:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b986:	83 c4 10             	add    esp,0x10
c000b989:	47                   	inc    edi
c000b98a:	eb d2                	jmp    c000b95e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000b98c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b990:	43                   	inc    ebx
c000b991:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b995:	eb ab                	jmp    c000b942 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000b997:	83 c4 1c             	add    esp,0x1c
c000b99a:	5b                   	pop    ebx
c000b99b:	5e                   	pop    esi
c000b99c:	5f                   	pop    edi
c000b99d:	5d                   	pop    ebp
c000b99e:	c3                   	ret    
c000b99f:	90                   	nop

c000b9a0 <Video::clearScreen(unsigned int)>:
c000b9a0:	57                   	push   edi
c000b9a1:	56                   	push   esi
c000b9a2:	53                   	push   ebx
c000b9a3:	31 db                	xor    ebx,ebx
c000b9a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b9a9:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b9af:	7e 1f                	jle    c000b9d0 <Video::clearScreen(unsigned int)+0x30>
c000b9b1:	31 ff                	xor    edi,edi
c000b9b3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b9b9:	7e 12                	jle    c000b9cd <Video::clearScreen(unsigned int)+0x2d>
c000b9bb:	8b 06                	mov    eax,DWORD PTR [esi]
c000b9bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9c1:	53                   	push   ebx
c000b9c2:	57                   	push   edi
c000b9c3:	47                   	inc    edi
c000b9c4:	56                   	push   esi
c000b9c5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b9c8:	83 c4 10             	add    esp,0x10
c000b9cb:	eb e6                	jmp    c000b9b3 <Video::clearScreen(unsigned int)+0x13>
c000b9cd:	43                   	inc    ebx
c000b9ce:	eb d9                	jmp    c000b9a9 <Video::clearScreen(unsigned int)+0x9>
c000b9d0:	5b                   	pop    ebx
c000b9d1:	5e                   	pop    esi
c000b9d2:	5f                   	pop    edi
c000b9d3:	c3                   	ret    

c000b9d4 <Video::putpixel(int, int, unsigned int)>:
c000b9d4:	c7 44 24 04 84 3c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023c84
c000b9dc:	e9 4d 46 00 00       	jmp    c001002e <KePanic(char const*)>
c000b9e1:	90                   	nop

c000b9e2 <Video::readPixelApprox(int, int)>:
c000b9e2:	83 ec 18             	sub    esp,0x18
c000b9e5:	68 a5 3c 02 c0       	push   0xc0023ca5
c000b9ea:	e8 3f 46 00 00       	call   c001002e <KePanic(char const*)>
c000b9ef:	31 c0                	xor    eax,eax
c000b9f1:	83 c4 1c             	add    esp,0x1c
c000b9f4:	c3                   	ret    
c000b9f5:	90                   	nop

c000b9f6 <Video::Video(char const*)>:
c000b9f6:	83 ec 0c             	sub    esp,0xc
c000b9f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9fd:	83 ec 08             	sub    esp,0x8
c000ba00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba04:	50                   	push   eax
c000ba05:	e8 88 e1 ff ff       	call   c0009b92 <Device::Device(char const*)>
c000ba0a:	83 c4 10             	add    esp,0x10
c000ba0d:	ba 48 3d 02 c0       	mov    edx,0xc0023d48
c000ba12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba16:	89 10                	mov    DWORD PTR [eax],edx
c000ba18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba1c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ba26:	90                   	nop
c000ba27:	83 c4 0c             	add    esp,0xc
c000ba2a:	c3                   	ret    
c000ba2b:	90                   	nop

c000ba2c <Video::~Video()>:
c000ba2c:	83 ec 0c             	sub    esp,0xc
c000ba2f:	ba 48 3d 02 c0       	mov    edx,0xc0023d48
c000ba34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba38:	89 10                	mov    DWORD PTR [eax],edx
c000ba3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba3e:	83 ec 0c             	sub    esp,0xc
c000ba41:	50                   	push   eax
c000ba42:	e8 eb de ff ff       	call   c0009932 <Device::~Device()>
c000ba47:	83 c4 10             	add    esp,0x10
c000ba4a:	90                   	nop
c000ba4b:	83 c4 0c             	add    esp,0xc
c000ba4e:	c3                   	ret    
c000ba4f:	90                   	nop

c000ba50 <Video::~Video()>:
c000ba50:	83 ec 0c             	sub    esp,0xc
c000ba53:	83 ec 0c             	sub    esp,0xc
c000ba56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba5a:	e8 cd ff ff ff       	call   c000ba2c <Video::~Video()>
c000ba5f:	83 c4 10             	add    esp,0x10
c000ba62:	83 ec 08             	sub    esp,0x8
c000ba65:	68 64 01 00 00       	push   0x164
c000ba6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba6e:	e8 e8 18 00 00       	call   c000d35b <operator delete(void*, unsigned long)>
c000ba73:	83 c4 10             	add    esp,0x10
c000ba76:	83 c4 0c             	add    esp,0xc
c000ba79:	c3                   	ret    

c000ba7a <Video::isMonochrome()>:
c000ba7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba7e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ba84:	c3                   	ret    
c000ba85:	90                   	nop

c000ba86 <Video::getWidth()>:
c000ba86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba8a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ba90:	c3                   	ret    
c000ba91:	90                   	nop

c000ba92 <Video::getHeight()>:
c000ba92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba96:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ba9c:	c3                   	ret    
c000ba9d:	90                   	nop

c000ba9e <Video::drawCursor(int, int, unsigned int*, int)>:
c000ba9e:	55                   	push   ebp
c000ba9f:	57                   	push   edi
c000baa0:	56                   	push   esi
c000baa1:	53                   	push   ebx
c000baa2:	83 ec 2c             	sub    esp,0x2c
c000baa5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000baa9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000baad:	83 f8 01             	cmp    eax,0x1
c000bab0:	19 c9                	sbb    ecx,ecx
c000bab2:	31 db                	xor    ebx,ebx
c000bab4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000bab8:	89 cd                	mov    ebp,ecx
c000baba:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000bac2:	f7 d5                	not    ebp
c000bac4:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000baca:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bace:	01 d8                	add    eax,ebx
c000bad0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bad4:	56                   	push   esi
c000bad5:	e8 b8 ff ff ff       	call   c000ba92 <Video::getHeight()>
c000bada:	59                   	pop    ecx
c000badb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000badf:	7e 70                	jle    c000bb51 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000bae1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bae5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000bae9:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000baec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000baf0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000baf4:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000bafb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000baff:	89 f8                	mov    eax,edi
c000bb01:	83 c0 20             	add    eax,0x20
c000bb04:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb08:	56                   	push   esi
c000bb09:	e8 78 ff ff ff       	call   c000ba86 <Video::getWidth()>
c000bb0e:	5a                   	pop    edx
c000bb0f:	39 c7                	cmp    edi,eax
c000bb11:	7d 34                	jge    c000bb47 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000bb13:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000bb18:	74 05                	je     c000bb1f <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000bb1a:	8b 06                	mov    eax,DWORD PTR [esi]
c000bb1c:	55                   	push   ebp
c000bb1d:	eb 0d                	jmp    c000bb2c <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000bb1f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000bb24:	74 12                	je     c000bb38 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000bb26:	8b 06                	mov    eax,DWORD PTR [esi]
c000bb28:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb2c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bb30:	57                   	push   edi
c000bb31:	56                   	push   esi
c000bb32:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bb35:	83 c4 10             	add    esp,0x10
c000bb38:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000bb3c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000bb40:	47                   	inc    edi
c000bb41:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000bb45:	75 c1                	jne    c000bb08 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000bb47:	43                   	inc    ebx
c000bb48:	83 fb 20             	cmp    ebx,0x20
c000bb4b:	0f 85 79 ff ff ff    	jne    c000baca <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000bb51:	83 c4 2c             	add    esp,0x2c
c000bb54:	5b                   	pop    ebx
c000bb55:	5e                   	pop    esi
c000bb56:	5f                   	pop    edi
c000bb57:	5d                   	pop    ebp
c000bb58:	c3                   	ret    
c000bb59:	90                   	nop

c000bb5a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000bb5a:	55                   	push   ebp
c000bb5b:	57                   	push   edi
c000bb5c:	56                   	push   esi
c000bb5d:	53                   	push   ebx
c000bb5e:	83 ec 48             	sub    esp,0x48
c000bb61:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000bb65:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000bb69:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000bb6d:	c1 e0 08             	shl    eax,0x8
c000bb70:	01 d0                	add    eax,edx
c000bb72:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000bb76:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb7a:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000bb7e:	c1 e0 08             	shl    eax,0x8
c000bb81:	01 d0                	add    eax,edx
c000bb83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bb8b:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000bb90:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bb94:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb98:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000bb9f:	50                   	push   eax
c000bba0:	e8 42 41 00 00       	call   c000fce7 <malloc>
c000bba5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bba9:	83 c4 10             	add    esp,0x10
c000bbac:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000bbb1:	75 10                	jne    c000bbc3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c000bbb3:	83 ec 0c             	sub    esp,0xc
c000bbb6:	68 d0 3c 02 c0       	push   0xc0023cd0
c000bbbb:	e8 6e 44 00 00       	call   c001002e <KePanic(char const*)>
c000bbc0:	83 c4 10             	add    esp,0x10
c000bbc3:	51                   	push   ecx
c000bbc4:	51                   	push   ecx
c000bbc5:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bbc9:	50                   	push   eax
c000bbca:	68 e0 3c 02 c0       	push   0xc0023ce0
c000bbcf:	e8 90 b3 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000bbd4:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000bbd7:	83 e0 20             	and    eax,0x20
c000bbda:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000bbde:	85 c0                	test   eax,eax
c000bbe0:	5e                   	pop    esi
c000bbe1:	0f 94 c0             	sete   al
c000bbe4:	5f                   	pop    edi
c000bbe5:	0f b6 c0             	movzx  eax,al
c000bbe8:	be 12 00 00 00       	mov    esi,0x12
c000bbed:	50                   	push   eax
c000bbee:	68 ea 3c 02 c0       	push   0xc0023cea
c000bbf3:	e8 6c b3 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000bbf8:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 d0                	mov    eax,edx
c000bc01:	85 d2                	test   edx,edx
c000bc03:	74 11                	je     c000bc16 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000bc05:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c000bc09:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000bc0d:	c1 fe 03             	sar    esi,0x3
c000bc10:	0f af f1             	imul   esi,ecx
c000bc13:	83 c6 12             	add    esi,0x12
c000bc16:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000bc1b:	74 07                	je     c000bc24 <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c000bc1d:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000bc22:	75 12                	jne    c000bc36 <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c000bc24:	83 ec 0c             	sub    esp,0xc
c000bc27:	68 f8 3c 02 c0       	push   0xc0023cf8
c000bc2c:	e8 33 b3 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000bc31:	e9 a0 02 00 00       	jmp    c000bed6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c000bc36:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000bc3a:	83 f9 02             	cmp    ecx,0x2
c000bc3d:	74 0e                	je     c000bc4d <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c000bc3f:	83 f9 0a             	cmp    ecx,0xa
c000bc42:	0f 84 c8 00 00 00    	je     c000bd10 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c000bc48:	e9 72 02 00 00       	jmp    c000bebf <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c000bc4d:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bc52:	75 0e                	jne    c000bc62 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000bc54:	84 c0                	test   al,al
c000bc56:	75 0a                	jne    c000bc62 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000bc58:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bc5b:	83 e8 18             	sub    eax,0x18
c000bc5e:	a8 f7                	test   al,0xf7
c000bc60:	74 0d                	je     c000bc6f <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c000bc62:	83 ec 0c             	sub    esp,0xc
c000bc65:	68 0d 3d 02 c0       	push   0xc0023d0d
c000bc6a:	e9 58 02 00 00       	jmp    c000bec7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000bc6f:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000bc74:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bc7c:	31 c0                	xor    eax,eax
c000bc7e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bc82:	89 c7                	mov    edi,eax
c000bc84:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bc8c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bc91:	75 15                	jne    c000bca8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000bc93:	99                   	cdq    
c000bc94:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000bc98:	85 d2                	test   edx,edx
c000bc9a:	75 0c                	jne    c000bca8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000bc9c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000bca0:	29 c7                	sub    edi,eax
c000bca2:	4f                   	dec    edi
c000bca3:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c000bca8:	31 d2                	xor    edx,edx
c000bcaa:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bcae:	75 08                	jne    c000bcb8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000bcb0:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c000bcb5:	c1 e2 18             	shl    edx,0x18
c000bcb8:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c000bcbd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000bcc1:	c1 e1 10             	shl    ecx,0x10
c000bcc4:	8d 47 01             	lea    eax,[edi+0x1]
c000bcc7:	89 cd                	mov    ebp,ecx
c000bcc9:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c000bcce:	c1 e1 08             	shl    ecx,0x8
c000bcd1:	09 e9                	or     ecx,ebp
c000bcd3:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bcd7:	09 e9                	or     ecx,ebp
c000bcd9:	09 d1                	or     ecx,edx
c000bcdb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bcdf:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c000bce2:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000bce6:	c1 fa 03             	sar    edx,0x3
c000bce9:	01 d6                	add    esi,edx
c000bceb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bcef:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000bcf3:	7e 04                	jle    c000bcf9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c000bcf5:	89 c7                	mov    edi,eax
c000bcf7:	eb 93                	jmp    c000bc8c <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000bcf9:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bcfd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd01:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bd05:	0f 8f 77 ff ff ff    	jg     c000bc82 <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c000bd0b:	e9 d3 01 00 00       	jmp    c000bee3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd10:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bd15:	75 0e                	jne    c000bd25 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000bd17:	85 d2                	test   edx,edx
c000bd19:	75 0a                	jne    c000bd25 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000bd1b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bd1e:	83 e8 18             	sub    eax,0x18
c000bd21:	a8 f7                	test   al,0xf7
c000bd23:	74 0d                	je     c000bd32 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c000bd25:	83 ec 0c             	sub    esp,0xc
c000bd28:	68 1b 3d 02 c0       	push   0xc0023d1b
c000bd2d:	e9 95 01 00 00       	jmp    c000bec7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000bd32:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd3a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bd42:	31 c9                	xor    ecx,ecx
c000bd44:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bd48:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c000bd4c:	0f 8e 91 01 00 00    	jle    c000bee3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd52:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c000bd56:	0f 8d 87 01 00 00    	jge    c000bee3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd5c:	8d 46 01             	lea    eax,[esi+0x1]
c000bd5f:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bd63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bd67:	83 fd 7f             	cmp    ebp,0x7f
c000bd6a:	89 e8                	mov    eax,ebp
c000bd6c:	0f 8e 9d 00 00 00    	jle    c000be0f <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c000bd72:	83 e0 7f             	and    eax,0x7f
c000bd75:	31 d2                	xor    edx,edx
c000bd77:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd7b:	40                   	inc    eax
c000bd7c:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bd80:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd84:	75 0a                	jne    c000bd90 <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c000bd86:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c000bd8b:	89 ea                	mov    edx,ebp
c000bd8d:	c1 e2 18             	shl    edx,0x18
c000bd90:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c000bd95:	c1 e0 10             	shl    eax,0x10
c000bd98:	89 c7                	mov    edi,eax
c000bd9a:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000bd9f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bda3:	c1 e0 08             	shl    eax,0x8
c000bda6:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bdaa:	09 f8                	or     eax,edi
c000bdac:	31 f6                	xor    esi,esi
c000bdae:	09 c5                	or     ebp,eax
c000bdb0:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c000bdb5:	09 d5                	or     ebp,edx
c000bdb7:	85 ff                	test   edi,edi
c000bdb9:	75 1d                	jne    c000bdd8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000bdbb:	89 c8                	mov    eax,ecx
c000bdbd:	99                   	cdq    
c000bdbe:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000bdc2:	85 d2                	test   edx,edx
c000bdc4:	75 12                	jne    c000bdd8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000bdc6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bdca:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000bdce:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bdd2:	49                   	dec    ecx
c000bdd3:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000bdd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bddc:	8d 51 01             	lea    edx,[ecx+0x1]
c000bddf:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000bde2:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c000bde6:	8d 46 01             	lea    eax,[esi+0x1]
c000bde9:	7e 06                	jle    c000bdf1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c000bdeb:	89 c6                	mov    esi,eax
c000bded:	89 d1                	mov    ecx,edx
c000bdef:	eb c6                	jmp    c000bdb7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c000bdf1:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000bdf5:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bdf9:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000bdfd:	c1 f8 03             	sar    eax,0x3
c000be00:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000be04:	89 d1                	mov    ecx,edx
c000be06:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000be0a:	e9 35 ff ff ff       	jmp    c000bd44 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c000be0f:	8d 45 01             	lea    eax,[ebp+0x1]
c000be12:	31 f6                	xor    esi,esi
c000be14:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be18:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000be1d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be21:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000be26:	75 1d                	jne    c000be45 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000be28:	89 c8                	mov    eax,ecx
c000be2a:	99                   	cdq    
c000be2b:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000be2f:	85 d2                	test   edx,edx
c000be31:	75 12                	jne    c000be45 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000be33:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000be37:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000be3b:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000be3f:	49                   	dec    ecx
c000be40:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000be45:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000be4d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000be51:	75 10                	jne    c000be63 <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c000be53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be57:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c000be5c:	c1 e7 18             	shl    edi,0x18
c000be5f:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000be63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be67:	8d 51 01             	lea    edx,[ecx+0x1]
c000be6a:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c000be6f:	c1 e0 10             	shl    eax,0x10
c000be72:	89 c7                	mov    edi,eax
c000be74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be78:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c000be7d:	c1 e0 08             	shl    eax,0x8
c000be80:	09 f8                	or     eax,edi
c000be82:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000be86:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c000be8a:	09 f8                	or     eax,edi
c000be8c:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000be90:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000be94:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000be97:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000be9b:	c1 f8 03             	sar    eax,0x3
c000be9e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000bea2:	8d 46 01             	lea    eax,[esi+0x1]
c000bea5:	39 f5                	cmp    ebp,esi
c000bea7:	7e 09                	jle    c000beb2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c000bea9:	89 c6                	mov    esi,eax
c000beab:	89 d1                	mov    ecx,edx
c000bead:	e9 6f ff ff ff       	jmp    c000be21 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c000beb2:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000beb6:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000beba:	e9 45 ff ff ff       	jmp    c000be04 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c000bebf:	52                   	push   edx
c000bec0:	52                   	push   edx
c000bec1:	51                   	push   ecx
c000bec2:	68 2a 3d 02 c0       	push   0xc0023d2a
c000bec7:	e8 98 b0 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000becc:	58                   	pop    eax
c000becd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bed1:	e8 21 3e 00 00       	call   c000fcf7 <free>
c000bed6:	83 c4 10             	add    esp,0x10
c000bed9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000bee1:	eb 14                	jmp    c000bef7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c000bee3:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bee7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000beeb:	89 18                	mov    DWORD PTR [eax],ebx
c000beed:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000bef1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bef5:	89 18                	mov    DWORD PTR [eax],ebx
c000bef7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000befb:	83 c4 3c             	add    esp,0x3c
c000befe:	5b                   	pop    ebx
c000beff:	5e                   	pop    esi
c000bf00:	5f                   	pop    edi
c000bf01:	5d                   	pop    ebp
c000bf02:	c3                   	ret    
c000bf03:	90                   	nop

c000bf04 <Video::putTGA(int, int, unsigned char*, int)>:
c000bf04:	55                   	push   ebp
c000bf05:	57                   	push   edi
c000bf06:	56                   	push   esi
c000bf07:	53                   	push   ebx
c000bf08:	83 ec 28             	sub    esp,0x28
c000bf0b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000bf0f:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bf13:	50                   	push   eax
c000bf14:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bf18:	50                   	push   eax
c000bf19:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bf1d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bf21:	57                   	push   edi
c000bf22:	e8 33 fc ff ff       	call   c000bb5a <Video::tgaParse(unsigned char*, int, int*, int*)>
c000bf27:	83 c4 20             	add    esp,0x20
c000bf2a:	85 c0                	test   eax,eax
c000bf2c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bf30:	74 3a                	je     c000bf6c <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000bf32:	89 c6                	mov    esi,eax
c000bf34:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf38:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bf3c:	39 d8                	cmp    eax,ebx
c000bf3e:	7e 2c                	jle    c000bf6c <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000bf40:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bf44:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf48:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bf4c:	39 e8                	cmp    eax,ebp
c000bf4e:	7e 19                	jle    c000bf69 <Video::putTGA(int, int, unsigned char*, int)+0x65>
c000bf50:	83 c6 04             	add    esi,0x4
c000bf53:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000bf56:	85 c0                	test   eax,eax
c000bf58:	79 0c                	jns    c000bf66 <Video::putTGA(int, int, unsigned char*, int)+0x62>
c000bf5a:	8b 17                	mov    edx,DWORD PTR [edi]
c000bf5c:	50                   	push   eax
c000bf5d:	53                   	push   ebx
c000bf5e:	55                   	push   ebp
c000bf5f:	57                   	push   edi
c000bf60:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bf63:	83 c4 10             	add    esp,0x10
c000bf66:	45                   	inc    ebp
c000bf67:	eb db                	jmp    c000bf44 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000bf69:	43                   	inc    ebx
c000bf6a:	eb c8                	jmp    c000bf34 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000bf6c:	83 c4 1c             	add    esp,0x1c
c000bf6f:	5b                   	pop    ebx
c000bf70:	5e                   	pop    esi
c000bf71:	5f                   	pop    edi
c000bf72:	5d                   	pop    ebp
c000bf73:	c3                   	ret    

c000bf74 <ACPI::close(int, int, void*)>:
c000bf74:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf79:	c3                   	ret    
c000bf7a:	66 90                	xchg   ax,ax

c000bf7c <loadACPITables(unsigned char*)>:
c000bf7c:	57                   	push   edi
c000bf7d:	56                   	push   esi
c000bf7e:	53                   	push   ebx
c000bf7f:	83 ec 60             	sub    esp,0x60
c000bf82:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000bf87:	0f 84 43 02 00 00    	je     c000c1d0 <loadACPITables(unsigned char*)+0x254>
c000bf8d:	a0 80 cd 02 c0       	mov    al,ds:0xc002cd80
c000bf92:	0f b6 c0             	movzx  eax,al
c000bf95:	85 c0                	test   eax,eax
c000bf97:	74 7b                	je     c000c014 <loadACPITables(unsigned char*)+0x98>
c000bf99:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bf9d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bfa1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bfa5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bfa8:	83 e8 24             	sub    eax,0x24
c000bfab:	c1 e8 03             	shr    eax,0x3
c000bfae:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfb2:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000bfba:	66 90                	xchg   ax,ax
c000bfbc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bfc0:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000bfc4:	0f 8d ba 00 00 00    	jge    c000c084 <loadACPITables(unsigned char*)+0x108>
c000bfca:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bfce:	83 c0 24             	add    eax,0x24
c000bfd1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfd5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bfd9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000bfdd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bfe1:	c1 e0 03             	shl    eax,0x3
c000bfe4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000bfe8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000bfec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000bfef:	8b 00                	mov    eax,DWORD PTR [eax]
c000bff1:	89 c1                	mov    ecx,eax
c000bff3:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000bff8:	8d 50 01             	lea    edx,[eax+0x1]
c000bffb:	89 15 60 cb 02 c0    	mov    DWORD PTR ds:0xc002cb60,edx
c000c001:	89 ca                	mov    edx,ecx
c000c003:	89 14 c5 84 cb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd347c],edx
c000c00a:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000c00f:	eb ab                	jmp    c000bfbc <loadACPITables(unsigned char*)+0x40>
c000c011:	8d 76 00             	lea    esi,[esi+0x0]
c000c014:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c018:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c01c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c020:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c023:	83 e8 24             	sub    eax,0x24
c000c026:	c1 e8 02             	shr    eax,0x2
c000c029:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c02d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000c035:	8d 76 00             	lea    esi,[esi+0x0]
c000c038:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c03c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000c040:	7d 42                	jge    c000c084 <loadACPITables(unsigned char*)+0x108>
c000c042:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c046:	83 c0 24             	add    eax,0x24
c000c049:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c04d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c051:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c055:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c059:	c1 e0 02             	shl    eax,0x2
c000c05c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000c060:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c064:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c066:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000c06b:	8d 50 01             	lea    edx,[eax+0x1]
c000c06e:	89 15 60 cb 02 c0    	mov    DWORD PTR ds:0xc002cb60,edx
c000c074:	89 ca                	mov    edx,ecx
c000c076:	89 14 c5 84 cb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd347c],edx
c000c07d:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000c082:	eb b4                	jmp    c000c038 <loadACPITables(unsigned char*)+0xbc>
c000c084:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000c08c:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000c091:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000c095:	0f 8d 39 01 00 00    	jge    c000c1d4 <loadACPITables(unsigned char*)+0x258>
c000c09b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c09f:	8b 04 c5 84 cb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd347c]
c000c0a6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0b6:	25 ff 0f 00 00       	and    eax,0xfff
c000c0bb:	89 c6                	mov    esi,eax
c000c0bd:	8b 1d 50 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f250
c000c0c3:	83 ec 0c             	sub    esp,0xc
c000c0c6:	6a 01                	push   0x1
c000c0c8:	e8 00 74 00 00       	call   c00134cd <Virt::allocateKernelVirtualPages(int)>
c000c0cd:	83 c4 10             	add    esp,0x10
c000c0d0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c0d4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c0da:	83 ec 0c             	sub    esp,0xc
c000c0dd:	6a 01                	push   0x1
c000c0df:	6a 01                	push   0x1
c000c0e1:	50                   	push   eax
c000c0e2:	52                   	push   edx
c000c0e3:	53                   	push   ebx
c000c0e4:	e8 b1 7c 00 00       	call   c0013d9a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c0e9:	83 c4 20             	add    esp,0x20
c000c0ec:	09 f0                	or     eax,esi
c000c0ee:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0f2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c0f6:	c1 e0 03             	shl    eax,0x3
c000c0f9:	05 80 cb 02 c0       	add    eax,0xc002cb80
c000c0fe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c102:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c106:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c10a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000c112:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c116:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c11a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c11e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c122:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c126:	89 c6                	mov    esi,eax
c000c128:	89 d7                	mov    edi,edx
c000c12a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c12c:	89 c8                	mov    eax,ecx
c000c12e:	89 fa                	mov    edx,edi
c000c130:	89 f3                	mov    ebx,esi
c000c132:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c136:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c13a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c13e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c142:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c145:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c149:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c14d:	05 00 10 00 00       	add    eax,0x1000
c000c152:	c1 e8 0c             	shr    eax,0xc
c000c155:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c159:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c15d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c161:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c165:	25 ff 0f 00 00       	and    eax,0xfff
c000c16a:	89 c6                	mov    esi,eax
c000c16c:	8b 1d 50 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f250
c000c172:	83 ec 0c             	sub    esp,0xc
c000c175:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c179:	e8 4f 73 00 00       	call   c00134cd <Virt::allocateKernelVirtualPages(int)>
c000c17e:	83 c4 10             	add    esp,0x10
c000c181:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c185:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c18b:	83 ec 0c             	sub    esp,0xc
c000c18e:	6a 01                	push   0x1
c000c190:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c194:	50                   	push   eax
c000c195:	52                   	push   edx
c000c196:	53                   	push   ebx
c000c197:	e8 fe 7b 00 00       	call   c0013d9a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c19c:	83 c4 20             	add    esp,0x20
c000c19f:	09 f0                	or     eax,esi
c000c1a1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1a9:	83 ec 0c             	sub    esp,0xc
c000c1ac:	50                   	push   eax
c000c1ad:	e8 23 76 00 00       	call   c00137d5 <Virt::freeKernelVirtualPages(unsigned long)>
c000c1b2:	83 c4 10             	add    esp,0x10
c000c1b5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c1b9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c1bd:	89 14 c5 84 cb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd347c],edx
c000c1c4:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000c1c9:	e9 be fe ff ff       	jmp    c000c08c <loadACPITables(unsigned char*)+0x110>
c000c1ce:	66 90                	xchg   ax,ax
c000c1d0:	90                   	nop
c000c1d1:	8d 76 00             	lea    esi,[esi+0x0]
c000c1d4:	83 c4 60             	add    esp,0x60
c000c1d7:	5b                   	pop    ebx
c000c1d8:	5e                   	pop    esi
c000c1d9:	5f                   	pop    edi
c000c1da:	c3                   	ret    
c000c1db:	90                   	nop

c000c1dc <findRSDT(unsigned char*)>:
c000c1dc:	57                   	push   edi
c000c1dd:	56                   	push   esi
c000c1de:	53                   	push   ebx
c000c1df:	83 ec 50             	sub    esp,0x50
c000c1e2:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c1e7:	85 c0                	test   eax,eax
c000c1e9:	75 0d                	jne    c000c1f8 <findRSDT(unsigned char*)+0x1c>
c000c1eb:	b8 00 00 00 00       	mov    eax,0x0
c000c1f0:	e9 2b 01 00 00       	jmp    c000c320 <findRSDT(unsigned char*)+0x144>
c000c1f5:	8d 76 00             	lea    esi,[esi+0x0]
c000c1f8:	89 e0                	mov    eax,esp
c000c1fa:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c1fe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c202:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c206:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000c20e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c212:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c216:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c21a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000c21e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000c222:	89 c6                	mov    esi,eax
c000c224:	89 d7                	mov    edi,edx
c000c226:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c228:	89 c8                	mov    eax,ecx
c000c22a:	89 fa                	mov    edx,edi
c000c22c:	89 f3                	mov    ebx,esi
c000c22e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000c232:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c236:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c23a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000c23e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000c242:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000c24a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c24e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c252:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c25a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c25e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c262:	25 ff 0f 00 00       	and    eax,0xfff
c000c267:	89 c6                	mov    esi,eax
c000c269:	8b 1d 50 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f250
c000c26f:	83 ec 0c             	sub    esp,0xc
c000c272:	6a 02                	push   0x2
c000c274:	e8 54 72 00 00       	call   c00134cd <Virt::allocateKernelVirtualPages(int)>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c280:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c286:	83 ec 0c             	sub    esp,0xc
c000c289:	6a 01                	push   0x1
c000c28b:	6a 02                	push   0x2
c000c28d:	50                   	push   eax
c000c28e:	52                   	push   edx
c000c28f:	53                   	push   ebx
c000c290:	e8 05 7b 00 00       	call   c0013d9a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c295:	83 c4 20             	add    esp,0x20
c000c298:	09 f0                	or     eax,esi
c000c29a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c29e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2a2:	25 ff 0f 00 00       	and    eax,0xfff
c000c2a7:	89 c6                	mov    esi,eax
c000c2a9:	8b 1d 50 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f250
c000c2af:	83 ec 0c             	sub    esp,0xc
c000c2b2:	6a 02                	push   0x2
c000c2b4:	e8 14 72 00 00       	call   c00134cd <Virt::allocateKernelVirtualPages(int)>
c000c2b9:	83 c4 10             	add    esp,0x10
c000c2bc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c2c0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c2c6:	83 ec 0c             	sub    esp,0xc
c000c2c9:	6a 01                	push   0x1
c000c2cb:	6a 02                	push   0x2
c000c2cd:	50                   	push   eax
c000c2ce:	52                   	push   edx
c000c2cf:	53                   	push   ebx
c000c2d0:	e8 c5 7a 00 00       	call   c0013d9a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c2d5:	83 c4 20             	add    esp,0x20
c000c2d8:	09 f0                	or     eax,esi
c000c2da:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c2de:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c2e3:	85 c0                	test   eax,eax
c000c2e5:	75 11                	jne    c000c2f8 <findRSDT(unsigned char*)+0x11c>
c000c2e7:	c6 05 80 cd 02 c0 00 	mov    BYTE PTR ds:0xc002cd80,0x0
c000c2ee:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2f2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c2f6:	eb 24                	jmp    c000c31c <findRSDT(unsigned char*)+0x140>
c000c2f8:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c2fd:	83 f8 02             	cmp    eax,0x2
c000c300:	75 12                	jne    c000c314 <findRSDT(unsigned char*)+0x138>
c000c302:	c6 05 80 cd 02 c0 01 	mov    BYTE PTR ds:0xc002cd80,0x1
c000c309:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c30d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c311:	eb 09                	jmp    c000c31c <findRSDT(unsigned char*)+0x140>
c000c313:	90                   	nop
c000c314:	b8 00 00 00 00       	mov    eax,0x0
c000c319:	eb 05                	jmp    c000c320 <findRSDT(unsigned char*)+0x144>
c000c31b:	90                   	nop
c000c31c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c320:	83 c4 50             	add    esp,0x50
c000c323:	5b                   	pop    ebx
c000c324:	5e                   	pop    esi
c000c325:	5f                   	pop    edi
c000c326:	c3                   	ret    
c000c327:	90                   	nop

c000c328 <findDataTable(unsigned char*, char*)>:
c000c328:	83 ec 1c             	sub    esp,0x1c
c000c32b:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000c330:	75 0a                	jne    c000c33c <findDataTable(unsigned char*, char*)+0x14>
c000c332:	b8 00 00 00 00       	mov    eax,0x0
c000c337:	eb 5f                	jmp    c000c398 <findDataTable(unsigned char*, char*)+0x70>
c000c339:	8d 76 00             	lea    esi,[esi+0x0]
c000c33c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c344:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000c349:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000c34d:	7d 41                	jge    c000c390 <findDataTable(unsigned char*, char*)+0x68>
c000c34f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c353:	c1 e0 03             	shl    eax,0x3
c000c356:	05 80 cb 02 c0       	add    eax,0xc002cb80
c000c35b:	83 ec 04             	sub    esp,0x4
c000c35e:	6a 04                	push   0x4
c000c360:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c364:	50                   	push   eax
c000c365:	e8 16 40 ff ff       	call   c0000380 <memcmp>
c000c36a:	83 c4 10             	add    esp,0x10
c000c36d:	85 c0                	test   eax,eax
c000c36f:	0f 94 c0             	sete   al
c000c372:	0f b6 c0             	movzx  eax,al
c000c375:	85 c0                	test   eax,eax
c000c377:	74 0f                	je     c000c388 <findDataTable(unsigned char*, char*)+0x60>
c000c379:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c37d:	8b 04 c5 84 cb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd347c]
c000c384:	eb 12                	jmp    c000c398 <findDataTable(unsigned char*, char*)+0x70>
c000c386:	66 90                	xchg   ax,ax
c000c388:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000c38d:	eb b5                	jmp    c000c344 <findDataTable(unsigned char*, char*)+0x1c>
c000c38f:	90                   	nop
c000c390:	b8 00 00 00 00       	mov    eax,0x0
c000c395:	8d 76 00             	lea    esi,[esi+0x0]
c000c398:	83 c4 1c             	add    esp,0x1c
c000c39b:	c3                   	ret    

c000c39c <scanMADT()>:
c000c39c:	53                   	push   ebx
c000c39d:	83 ec 38             	sub    esp,0x38
c000c3a0:	c7 05 88 cd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cd88,0x0
c000c3aa:	c7 05 84 cd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cd84,0x0
c000c3b4:	83 ec 0c             	sub    esp,0xc
c000c3b7:	68 8c 3d 02 c0       	push   0xc0023d8c
c000c3bc:	e8 a3 ab ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c3c1:	83 c4 10             	add    esp,0x10
c000c3c4:	e8 5d d8 00 00       	call   c0019c26 <HalFindRSDP()>
c000c3c9:	a3 88 cd 02 c0       	mov    ds:0xc002cd88,eax
c000c3ce:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c3d3:	85 c0                	test   eax,eax
c000c3d5:	0f 84 41 04 00 00    	je     c000c81c <scanMADT()+0x480>
c000c3db:	83 ec 0c             	sub    esp,0xc
c000c3de:	68 9a 3d 02 c0       	push   0xc0023d9a
c000c3e3:	e8 7c ab ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c3e8:	83 c4 10             	add    esp,0x10
c000c3eb:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c3f0:	83 ec 0c             	sub    esp,0xc
c000c3f3:	50                   	push   eax
c000c3f4:	e8 e3 fd ff ff       	call   c000c1dc <findRSDT(unsigned char*)>
c000c3f9:	83 c4 10             	add    esp,0x10
c000c3fc:	a3 84 cd 02 c0       	mov    ds:0xc002cd84,eax
c000c401:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000c406:	85 c0                	test   eax,eax
c000c408:	0f 84 12 04 00 00    	je     c000c820 <scanMADT()+0x484>
c000c40e:	8b 15 84 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cd84
c000c414:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c419:	83 ec 04             	sub    esp,0x4
c000c41c:	52                   	push   edx
c000c41d:	50                   	push   eax
c000c41e:	68 28 3f 02 c0       	push   0xc0023f28
c000c423:	e8 3c ab ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c428:	83 c4 10             	add    esp,0x10
c000c42b:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000c430:	83 ec 0c             	sub    esp,0xc
c000c433:	50                   	push   eax
c000c434:	e8 43 fb ff ff       	call   c000bf7c <loadACPITables(unsigned char*)>
c000c439:	83 c4 10             	add    esp,0x10
c000c43c:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000c441:	83 ec 08             	sub    esp,0x8
c000c444:	68 a9 3d 02 c0       	push   0xc0023da9
c000c449:	50                   	push   eax
c000c44a:	e8 d9 fe ff ff       	call   c000c328 <findDataTable(unsigned char*, char*)>
c000c44f:	83 c4 10             	add    esp,0x10
c000c452:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c456:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000c45b:	0f 84 c3 03 00 00    	je     c000c824 <scanMADT()+0x488>
c000c461:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c469:	8d 76 00             	lea    esi,[esi+0x0]
c000c46c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c470:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c473:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000c477:	0f 87 af 03 00 00    	ja     c000c82c <scanMADT()+0x490>
c000c47d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000c485:	0f 87 a1 03 00 00    	ja     c000c82c <scanMADT()+0x490>
c000c48b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c48f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c493:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c497:	8d 50 01             	lea    edx,[eax+0x1]
c000c49a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c49e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c4a2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c4a6:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000c4aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4ae:	8d 50 01             	lea    edx,[eax+0x1]
c000c4b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4b5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c4b9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c4bd:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000c4c1:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000c4c6:	83 f8 02             	cmp    eax,0x2
c000c4c9:	0f 86 59 03 00 00    	jbe    c000c828 <scanMADT()+0x48c>
c000c4cf:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c4d4:	85 c0                	test   eax,eax
c000c4d6:	75 58                	jne    c000c530 <scanMADT()+0x194>
c000c4d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4dc:	8d 50 01             	lea    edx,[eax+0x1]
c000c4df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e3:	8a 15 80 cf 02 c0    	mov    dl,BYTE PTR ds:0xc002cf80
c000c4e9:	0f b6 d2             	movzx  edx,dl
c000c4ec:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c4f0:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c4f4:	88 82 c0 cf 02 c0    	mov    BYTE PTR [edx-0x3ffd3040],al
c000c4fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4fe:	8d 50 01             	lea    edx,[eax+0x1]
c000c501:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c505:	8a 15 80 cf 02 c0    	mov    dl,BYTE PTR ds:0xc002cf80
c000c50b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c50e:	88 0d 80 cf 02 c0    	mov    BYTE PTR ds:0xc002cf80,cl
c000c514:	0f b6 d2             	movzx  edx,dl
c000c517:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c51b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c51f:	88 82 a0 cf 02 c0    	mov    BYTE PTR [edx-0x3ffd3060],al
c000c525:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c52a:	e9 d9 02 00 00       	jmp    c000c808 <scanMADT()+0x46c>
c000c52f:	90                   	nop
c000c530:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c535:	83 f8 01             	cmp    eax,0x1
c000c538:	0f 85 1a 01 00 00    	jne    c000c658 <scanMADT()+0x2bc>
c000c53e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c542:	8d 50 01             	lea    edx,[eax+0x1]
c000c545:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c549:	8a 15 40 ce 02 c0    	mov    dl,BYTE PTR ds:0xc002ce40
c000c54f:	0f b6 d2             	movzx  edx,dl
c000c552:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c556:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c55a:	88 82 60 ce 02 c0    	mov    BYTE PTR [edx-0x3ffd31a0],al
c000c560:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000c565:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c569:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c56d:	01 d0                	add    eax,edx
c000c56f:	83 c0 2c             	add    eax,0x2c
c000c572:	8a 00                	mov    al,BYTE PTR [eax]
c000c574:	0f b6 d0             	movzx  edx,al
c000c577:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c57b:	8d 48 01             	lea    ecx,[eax+0x1]
c000c57e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c582:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c586:	0f b6 c0             	movzx  eax,al
c000c589:	c1 e0 08             	shl    eax,0x8
c000c58c:	89 d1                	mov    ecx,edx
c000c58e:	09 c1                	or     ecx,eax
c000c590:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c594:	8d 50 02             	lea    edx,[eax+0x2]
c000c597:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c59b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c59f:	0f b6 c0             	movzx  eax,al
c000c5a2:	c1 e0 10             	shl    eax,0x10
c000c5a5:	09 c1                	or     ecx,eax
c000c5a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5ab:	8d 50 03             	lea    edx,[eax+0x3]
c000c5ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5b2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5b6:	0f b6 c0             	movzx  eax,al
c000c5b9:	c1 e0 18             	shl    eax,0x18
c000c5bc:	09 c1                	or     ecx,eax
c000c5be:	89 ca                	mov    edx,ecx
c000c5c0:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c5c5:	0f b6 c0             	movzx  eax,al
c000c5c8:	89 14 85 80 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3180],edx
c000c5cf:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c5d4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c5d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5dc:	01 d0                	add    eax,edx
c000c5de:	83 c0 2c             	add    eax,0x2c
c000c5e1:	8a 00                	mov    al,BYTE PTR [eax]
c000c5e3:	0f b6 d0             	movzx  edx,al
c000c5e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5ea:	8d 48 01             	lea    ecx,[eax+0x1]
c000c5ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5f1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c5f5:	0f b6 c0             	movzx  eax,al
c000c5f8:	c1 e0 08             	shl    eax,0x8
c000c5fb:	89 d1                	mov    ecx,edx
c000c5fd:	09 c1                	or     ecx,eax
c000c5ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c603:	8d 50 02             	lea    edx,[eax+0x2]
c000c606:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c60a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c60e:	0f b6 c0             	movzx  eax,al
c000c611:	c1 e0 10             	shl    eax,0x10
c000c614:	09 c1                	or     ecx,eax
c000c616:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c61a:	8d 50 03             	lea    edx,[eax+0x3]
c000c61d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c621:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c625:	0f b6 c0             	movzx  eax,al
c000c628:	c1 e0 18             	shl    eax,0x18
c000c62b:	09 c1                	or     ecx,eax
c000c62d:	89 ca                	mov    edx,ecx
c000c62f:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c634:	0f b6 c0             	movzx  eax,al
c000c637:	89 14 85 00 cf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3100],edx
c000c63e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c643:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c648:	83 c0 01             	add    eax,0x1
c000c64b:	a2 40 ce 02 c0       	mov    ds:0xc002ce40,al
c000c650:	e9 b3 01 00 00       	jmp    c000c808 <scanMADT()+0x46c>
c000c655:	8d 76 00             	lea    esi,[esi+0x0]
c000c658:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c65d:	83 f8 02             	cmp    eax,0x2
c000c660:	0f 85 ea 00 00 00    	jne    c000c750 <scanMADT()+0x3b4>
c000c666:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c66a:	8d 50 01             	lea    edx,[eax+0x1]
c000c66d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c671:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c675:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c679:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000c67d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c681:	8d 50 01             	lea    edx,[eax+0x1]
c000c684:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c688:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c68c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c690:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000c694:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c698:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c69c:	01 d0                	add    eax,edx
c000c69e:	83 c0 2c             	add    eax,0x2c
c000c6a1:	8a 00                	mov    al,BYTE PTR [eax]
c000c6a3:	0f b6 d0             	movzx  edx,al
c000c6a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6aa:	8d 48 01             	lea    ecx,[eax+0x1]
c000c6ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6b1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c6b5:	0f b6 c0             	movzx  eax,al
c000c6b8:	c1 e0 08             	shl    eax,0x8
c000c6bb:	89 d1                	mov    ecx,edx
c000c6bd:	09 c1                	or     ecx,eax
c000c6bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6c3:	8d 50 02             	lea    edx,[eax+0x2]
c000c6c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6ca:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c6ce:	0f b6 c0             	movzx  eax,al
c000c6d1:	c1 e0 10             	shl    eax,0x10
c000c6d4:	09 c1                	or     ecx,eax
c000c6d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6da:	8d 50 03             	lea    edx,[eax+0x3]
c000c6dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6e1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c6e5:	0f b6 c0             	movzx  eax,al
c000c6e8:	c1 e0 18             	shl    eax,0x18
c000c6eb:	09 c8                	or     eax,ecx
c000c6ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c6f1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c6f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6fe:	01 d0                	add    eax,edx
c000c700:	83 c0 2c             	add    eax,0x2c
c000c703:	8a 00                	mov    al,BYTE PTR [eax]
c000c705:	0f b6 c0             	movzx  eax,al
c000c708:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c70c:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c70f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c713:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000c717:	0f b6 d2             	movzx  edx,dl
c000c71a:	c1 e2 08             	shl    edx,0x8
c000c71d:	09 d0                	or     eax,edx
c000c71f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000c724:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c729:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c72e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c732:	88 90 c8 68 02 c0    	mov    BYTE PTR [eax-0x3ffd9738],dl
c000c738:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000c73d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000c742:	66 89 84 12 20 ce 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd31e0],ax
c000c74a:	e9 b9 00 00 00       	jmp    c000c808 <scanMADT()+0x46c>
c000c74f:	90                   	nop
c000c750:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c755:	83 f8 04             	cmp    eax,0x4
c000c758:	0f 85 9a 00 00 00    	jne    c000c7f8 <scanMADT()+0x45c>
c000c75e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c762:	8d 50 01             	lea    edx,[eax+0x1]
c000c765:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c769:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c76d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c771:	0f b6 c0             	movzx  eax,al
c000c774:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c778:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c77c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c780:	01 d0                	add    eax,edx
c000c782:	83 c0 2c             	add    eax,0x2c
c000c785:	8a 00                	mov    al,BYTE PTR [eax]
c000c787:	0f b6 d0             	movzx  edx,al
c000c78a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c78e:	8d 48 01             	lea    ecx,[eax+0x1]
c000c791:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c795:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c799:	0f b6 c0             	movzx  eax,al
c000c79c:	c1 e0 08             	shl    eax,0x8
c000c79f:	09 d0                	or     eax,edx
c000c7a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c7a5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c7aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7ae:	8d 50 01             	lea    edx,[eax+0x1]
c000c7b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7b5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c7b9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c7bd:	0f b6 c0             	movzx  eax,al
c000c7c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7c8:	c1 e0 08             	shl    eax,0x8
c000c7cb:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c7cf:	89 c1                	mov    ecx,eax
c000c7d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c7d5:	c1 e0 18             	shl    eax,0x18
c000c7d8:	89 c3                	mov    ebx,eax
c000c7da:	a1 8c cd 02 c0       	mov    eax,ds:0xc002cd8c
c000c7df:	8d 50 01             	lea    edx,[eax+0x1]
c000c7e2:	89 15 8c cd 02 c0    	mov    DWORD PTR ds:0xc002cd8c,edx
c000c7e8:	09 d9                	or     ecx,ebx
c000c7ea:	89 ca                	mov    edx,ecx
c000c7ec:	89 14 85 a0 cd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3260],edx
c000c7f3:	eb 13                	jmp    c000c808 <scanMADT()+0x46c>
c000c7f5:	8d 76 00             	lea    esi,[esi+0x0]
c000c7f8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c7fd:	83 f8 05             	cmp    eax,0x5
c000c800:	75 06                	jne    c000c808 <scanMADT()+0x46c>
c000c802:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000c807:	90                   	nop
c000c808:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000c80d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c811:	01 d0                	add    eax,edx
c000c813:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c817:	e9 50 fc ff ff       	jmp    c000c46c <scanMADT()+0xd0>
c000c81c:	90                   	nop
c000c81d:	eb 0d                	jmp    c000c82c <scanMADT()+0x490>
c000c81f:	90                   	nop
c000c820:	90                   	nop
c000c821:	eb 09                	jmp    c000c82c <scanMADT()+0x490>
c000c823:	90                   	nop
c000c824:	90                   	nop
c000c825:	eb 05                	jmp    c000c82c <scanMADT()+0x490>
c000c827:	90                   	nop
c000c828:	90                   	nop
c000c829:	8d 76 00             	lea    esi,[esi+0x0]
c000c82c:	83 c4 38             	add    esp,0x38
c000c82f:	5b                   	pop    ebx
c000c830:	c3                   	ret    
c000c831:	90                   	nop
c000c832:	66 90                	xchg   ax,ax

c000c834 <ACPI::ACPI()>:
c000c834:	83 ec 0c             	sub    esp,0xc
c000c837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c83b:	83 ec 08             	sub    esp,0x8
c000c83e:	68 ae 3d 02 c0       	push   0xc0023dae
c000c843:	50                   	push   eax
c000c844:	e8 49 d3 ff ff       	call   c0009b92 <Device::Device(char const*)>
c000c849:	83 c4 10             	add    esp,0x10
c000c84c:	ba cc 3f 02 c0       	mov    edx,0xc0023fcc
c000c851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c855:	89 10                	mov    DWORD PTR [eax],edx
c000c857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c85b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000c862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c866:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000c870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c874:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000c87e:	e8 19 fb ff ff       	call   c000c39c <scanMADT()>
c000c883:	90                   	nop
c000c884:	83 c4 0c             	add    esp,0xc
c000c887:	c3                   	ret    

c000c888 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000c888:	83 ec 2c             	sub    esp,0x2c
c000c88b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c88f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c893:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c897:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000c89b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000c8a0:	88 d0                	mov    al,dl
c000c8a2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c8a6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c8ab:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c8b3:	90                   	nop
c000c8b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8b8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c8be:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c8c2:	0f 8d b0 00 00 00    	jge    c000c978 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000c8c8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8d0:	83 c2 2a             	add    edx,0x2a
c000c8d3:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000c8d7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000c8dc:	0f b7 c0             	movzx  eax,ax
c000c8df:	39 c2                	cmp    edx,eax
c000c8e1:	0f 85 85 00 00 00    	jne    c000c96c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c8e7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8ef:	83 c2 2a             	add    edx,0x2a
c000c8f2:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000c8f6:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000c8fb:	0f b6 c0             	movzx  eax,al
c000c8fe:	39 c2                	cmp    edx,eax
c000c900:	75 6a                	jne    c000c96c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c902:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c907:	85 c0                	test   eax,eax
c000c909:	74 3d                	je     c000c948 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000c90b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c90f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c913:	83 c2 2a             	add    edx,0x2a
c000c916:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000c91a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c91e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c921:	39 c2                	cmp    edx,eax
c000c923:	74 13                	je     c000c938 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000c925:	83 ec 0c             	sub    esp,0xc
c000c928:	68 4c 3f 02 c0       	push   0xc0023f4c
c000c92d:	e8 fc 36 00 00       	call   c001002e <KePanic(char const*)>
c000c932:	83 c4 10             	add    esp,0x10
c000c935:	8d 76 00             	lea    esi,[esi+0x0]
c000c938:	83 ec 0c             	sub    esp,0xc
c000c93b:	68 b3 3d 02 c0       	push   0xc0023db3
c000c940:	e8 e9 36 00 00       	call   c001002e <KePanic(char const*)>
c000c945:	83 c4 10             	add    esp,0x10
c000c948:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c94c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c950:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c954:	83 c2 2a             	add    edx,0x2a
c000c957:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000c95b:	8b 02                	mov    eax,DWORD PTR [edx]
c000c95d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000c960:	89 01                	mov    DWORD PTR [ecx],eax
c000c962:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000c965:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c96a:	66 90                	xchg   ax,ax
c000c96c:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000c971:	e9 3e ff ff ff       	jmp    c000c8b4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000c976:	66 90                	xchg   ax,ax
c000c978:	90                   	nop
c000c979:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c97d:	83 c4 2c             	add    esp,0x2c
c000c980:	c2 04 00             	ret    0x4
c000c983:	90                   	nop

c000c984 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000c984:	83 ec 1c             	sub    esp,0x1c
c000c987:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c98b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c98f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c993:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000c998:	88 c8                	mov    al,cl
c000c99a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000c99e:	88 d0                	mov    al,dl
c000c9a0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c9a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9a8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9b2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c9b5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000c9b9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000c9bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9c1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c9c7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c9cb:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000c9ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c9d2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000c9d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9db:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9e1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000c9e5:	83 c0 01             	add    eax,0x1
c000c9e8:	88 c1                	mov    cl,al
c000c9ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ee:	83 c2 2a             	add    edx,0x2a
c000c9f1:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000c9f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9f9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca03:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ca06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ca0a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ca0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca12:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ca18:	8d 50 01             	lea    edx,[eax+0x1]
c000ca1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca1f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ca25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca29:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ca2f:	3d 00 02 00 00       	cmp    eax,0x200
c000ca34:	75 12                	jne    c000ca48 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000ca36:	83 ec 0c             	sub    esp,0xc
c000ca39:	68 c2 3d 02 c0       	push   0xc0023dc2
c000ca3e:	e8 eb 35 00 00       	call   c001002e <KePanic(char const*)>
c000ca43:	83 c4 10             	add    esp,0x10
c000ca46:	66 90                	xchg   ax,ax
c000ca48:	90                   	nop
c000ca49:	83 c4 1c             	add    esp,0x1c
c000ca4c:	c3                   	ret    
c000ca4d:	90                   	nop
c000ca4e:	66 90                	xchg   ax,ax

c000ca50 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ca50:	b8 00 00 00 00       	mov    eax,0x0
c000ca55:	c3                   	ret    
c000ca56:	66 90                	xchg   ax,ax

c000ca58 <ACPI::detectPCI()>:
c000ca58:	53                   	push   ebx
c000ca59:	83 ec 28             	sub    esp,0x28
c000ca5c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ca61:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ca66:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000ca6b:	83 ec 08             	sub    esp,0x8
c000ca6e:	68 df 3d 02 c0       	push   0xc0023ddf
c000ca73:	50                   	push   eax
c000ca74:	e8 af f8 ff ff       	call   c000c328 <findDataTable(unsigned char*, char*)>
c000ca79:	83 c4 10             	add    esp,0x10
c000ca7c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ca80:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ca85:	74 0d                	je     c000ca94 <ACPI::detectPCI()+0x3c>
c000ca87:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca8c:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ca91:	8d 76 00             	lea    esi,[esi+0x0]
c000ca94:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ca9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000caa0:	8a 00                	mov    al,BYTE PTR [eax]
c000caa2:	0f b6 c0             	movzx  eax,al
c000caa5:	83 f8 01             	cmp    eax,0x1
c000caa8:	75 0e                	jne    c000cab8 <ACPI::detectPCI()+0x60>
c000caaa:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000caaf:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cab4:	eb 2e                	jmp    c000cae4 <ACPI::detectPCI()+0x8c>
c000cab6:	66 90                	xchg   ax,ax
c000cab8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cabc:	8a 00                	mov    al,BYTE PTR [eax]
c000cabe:	0f b6 c0             	movzx  eax,al
c000cac1:	83 f8 02             	cmp    eax,0x2
c000cac4:	75 1e                	jne    c000cae4 <ACPI::detectPCI()+0x8c>
c000cac6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cacb:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cad0:	85 c0                	test   eax,eax
c000cad2:	74 10                	je     c000cae4 <ACPI::detectPCI()+0x8c>
c000cad4:	83 ec 0c             	sub    esp,0xc
c000cad7:	68 7c 3f 02 c0       	push   0xc0023f7c
c000cadc:	e8 4d 35 00 00       	call   c001002e <KePanic(char const*)>
c000cae1:	83 c4 10             	add    esp,0x10
c000cae4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000cae8:	83 f0 01             	xor    eax,0x1
c000caeb:	0f b6 c0             	movzx  eax,al
c000caee:	85 c0                	test   eax,eax
c000caf0:	74 46                	je     c000cb38 <ACPI::detectPCI()+0xe0>
c000caf2:	e8 39 36 ff ff       	call   c0000130 <manualPCIProbe>
c000caf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cafb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000cb00:	75 0e                	jne    c000cb10 <ACPI::detectPCI()+0xb8>
c000cb02:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb07:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cb0c:	eb 2a                	jmp    c000cb38 <ACPI::detectPCI()+0xe0>
c000cb0e:	66 90                	xchg   ax,ax
c000cb10:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000cb15:	75 21                	jne    c000cb38 <ACPI::detectPCI()+0xe0>
c000cb17:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb1c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cb21:	85 c0                	test   eax,eax
c000cb23:	74 13                	je     c000cb38 <ACPI::detectPCI()+0xe0>
c000cb25:	83 ec 0c             	sub    esp,0xc
c000cb28:	68 7c 3f 02 c0       	push   0xc0023f7c
c000cb2d:	e8 fc 34 00 00       	call   c001002e <KePanic(char const*)>
c000cb32:	83 c4 10             	add    esp,0x10
c000cb35:	8d 76 00             	lea    esi,[esi+0x0]
c000cb38:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000cb3d:	85 c0                	test   eax,eax
c000cb3f:	0f 84 87 00 00 00    	je     c000cbcc <ACPI::detectPCI()+0x174>
c000cb45:	83 ec 0c             	sub    esp,0xc
c000cb48:	68 e4 3d 02 c0       	push   0xc0023de4
c000cb4d:	e8 49 07 00 00       	call   c000d29b <KeSetBootMessage(char const*)>
c000cb52:	83 c4 10             	add    esp,0x10
c000cb55:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000cb5d:	83 ec 0c             	sub    esp,0xc
c000cb60:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cb64:	e8 7e 31 00 00       	call   c000fce7 <malloc>
c000cb69:	83 c4 10             	add    esp,0x10
c000cb6c:	89 c3                	mov    ebx,eax
c000cb6e:	83 ec 0c             	sub    esp,0xc
c000cb71:	53                   	push   ebx
c000cb72:	e8 09 0e 01 00       	call   c001d980 <PCI::PCI()>
c000cb77:	83 c4 10             	add    esp,0x10
c000cb7a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cb7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb82:	83 ec 08             	sub    esp,0x8
c000cb85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb89:	50                   	push   eax
c000cb8a:	e8 a1 ce ff ff       	call   c0009a30 <Device::addChild(Device*)>
c000cb8f:	83 c4 10             	add    esp,0x10
c000cb92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb96:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb98:	83 c0 08             	add    eax,0x8
c000cb9b:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb9d:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000cba2:	85 d2                	test   edx,edx
c000cba4:	74 0a                	je     c000cbb0 <ACPI::detectPCI()+0x158>
c000cba6:	ba 01 00 00 00       	mov    edx,0x1
c000cbab:	eb 0b                	jmp    c000cbb8 <ACPI::detectPCI()+0x160>
c000cbad:	8d 76 00             	lea    esi,[esi+0x0]
c000cbb0:	ba 02 00 00 00       	mov    edx,0x2
c000cbb5:	8d 76 00             	lea    esi,[esi+0x0]
c000cbb8:	6a 00                	push   0x0
c000cbba:	6a 00                	push   0x0
c000cbbc:	52                   	push   edx
c000cbbd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbc1:	ff d0                	call   eax
c000cbc3:	83 c4 10             	add    esp,0x10
c000cbc6:	e9 91 00 00 00       	jmp    c000cc5c <ACPI::detectPCI()+0x204>
c000cbcb:	90                   	nop
c000cbcc:	83 ec 0c             	sub    esp,0xc
c000cbcf:	68 fc 3d 02 c0       	push   0xc0023dfc
c000cbd4:	e8 c2 06 00 00       	call   c000d29b <KeSetBootMessage(char const*)>
c000cbd9:	83 c4 10             	add    esp,0x10
c000cbdc:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000cbe3:	83 ec 0c             	sub    esp,0xc
c000cbe6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbea:	e8 f8 30 00 00       	call   c000fce7 <malloc>
c000cbef:	83 c4 10             	add    esp,0x10
c000cbf2:	89 c3                	mov    ebx,eax
c000cbf4:	83 ec 0c             	sub    esp,0xc
c000cbf7:	53                   	push   ebx
c000cbf8:	e8 89 19 01 00       	call   c001e586 <IDE::IDE()>
c000cbfd:	83 c4 10             	add    esp,0x10
c000cc00:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000cc04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc08:	83 ec 08             	sub    esp,0x8
c000cc0b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cc0f:	50                   	push   eax
c000cc10:	e8 1b ce ff ff       	call   c0009a30 <Device::addChild(Device*)>
c000cc15:	83 c4 10             	add    esp,0x10
c000cc18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc1c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000cc26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc2a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000cc33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc37:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000cc40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc44:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc46:	83 c0 08             	add    eax,0x8
c000cc49:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc4b:	6a 00                	push   0x0
c000cc4d:	6a 00                	push   0x0
c000cc4f:	6a 00                	push   0x0
c000cc51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc55:	ff d0                	call   eax
c000cc57:	83 c4 10             	add    esp,0x10
c000cc5a:	66 90                	xchg   ax,ax
c000cc5c:	90                   	nop
c000cc5d:	83 c4 28             	add    esp,0x28
c000cc60:	5b                   	pop    ebx
c000cc61:	c3                   	ret    
c000cc62:	66 90                	xchg   ax,ax

c000cc64 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000cc64:	83 ec 0c             	sub    esp,0xc
c000cc67:	83 ec 0c             	sub    esp,0xc
c000cc6a:	68 11 3e 02 c0       	push   0xc0023e11
c000cc6f:	e8 ba 33 00 00       	call   c001002e <KePanic(char const*)>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	90                   	nop
c000cc78:	83 c4 0c             	add    esp,0xc
c000cc7b:	c3                   	ret    

c000cc7c <ACPI::open(int, int, void*)>:
c000cc7c:	57                   	push   edi
c000cc7d:	56                   	push   esi
c000cc7e:	53                   	push   ebx
c000cc7f:	81 ec 70 01 00 00    	sub    esp,0x170
c000cc85:	83 ec 0c             	sub    esp,0xc
c000cc88:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000cc8f:	e8 c4 fd ff ff       	call   c000ca58 <ACPI::detectPCI()>
c000cc94:	83 c4 10             	add    esp,0x10
c000cc97:	83 ec 0c             	sub    esp,0xc
c000cc9a:	68 a4 3f 02 c0       	push   0xc0023fa4
c000cc9f:	e8 f7 05 00 00       	call   c000d29b <KeSetBootMessage(char const*)>
c000cca4:	83 c4 10             	add    esp,0x10
c000cca7:	b8 4c 05 00 00       	mov    eax,0x54c
c000ccac:	8a 00                	mov    al,BYTE PTR [eax]
c000ccae:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000ccb5:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000ccbd:	83 f8 01             	cmp    eax,0x1
c000ccc0:	75 12                	jne    c000ccd4 <ACPI::open(int, int, void*)+0x58>
c000ccc2:	83 ec 0c             	sub    esp,0xc
c000ccc5:	68 22 3e 02 c0       	push   0xc0023e22
c000ccca:	e8 89 8e 00 00       	call   c0015b58 <Thr::loadKernelSymbolTable(char const*)>
c000cccf:	83 c4 10             	add    esp,0x10
c000ccd2:	eb 34                	jmp    c000cd08 <ACPI::open(int, int, void*)+0x8c>
c000ccd4:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000ccdc:	3d bb 00 00 00       	cmp    eax,0xbb
c000cce1:	75 15                	jne    c000ccf8 <ACPI::open(int, int, void*)+0x7c>
c000cce3:	83 ec 0c             	sub    esp,0xc
c000cce6:	68 40 3e 02 c0       	push   0xc0023e40
c000cceb:	e8 68 8e 00 00       	call   c0015b58 <Thr::loadKernelSymbolTable(char const*)>
c000ccf0:	83 c4 10             	add    esp,0x10
c000ccf3:	eb 13                	jmp    c000cd08 <ACPI::open(int, int, void*)+0x8c>
c000ccf5:	8d 76 00             	lea    esi,[esi+0x0]
c000ccf8:	83 ec 0c             	sub    esp,0xc
c000ccfb:	68 5e 3e 02 c0       	push   0xc0023e5e
c000cd00:	e8 29 33 00 00       	call   c001002e <KePanic(char const*)>
c000cd05:	83 c4 10             	add    esp,0x10
c000cd08:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000cd10:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000cd1b:	83 ec 0c             	sub    esp,0xc
c000cd1e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000cd25:	e8 bd 2f 00 00       	call   c000fce7 <malloc>
c000cd2a:	83 c4 10             	add    esp,0x10
c000cd2d:	89 c3                	mov    ebx,eax
c000cd2f:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c000cd34:	83 ec 04             	sub    esp,0x4
c000cd37:	50                   	push   eax
c000cd38:	68 78 3e 02 c0       	push   0xc0023e78
c000cd3d:	53                   	push   ebx
c000cd3e:	e8 23 b4 ff ff       	call   c0008166 <File::File(char const*, Process*)>
c000cd43:	83 c4 10             	add    esp,0x10
c000cd46:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000cd4d:	83 ec 08             	sub    esp,0x8
c000cd50:	6a 01                	push   0x1
c000cd52:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cd59:	e8 26 b4 ff ff       	call   c0008184 <File::open(FileOpenMode)>
c000cd5e:	83 c4 10             	add    esp,0x10
c000cd61:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000cd68:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000cd70:	75 16                	jne    c000cd88 <ACPI::open(int, int, void*)+0x10c>
c000cd72:	83 ec 0c             	sub    esp,0xc
c000cd75:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cd7c:	e8 61 b4 ff ff       	call   c00081e2 <File::close()>
c000cd81:	83 c4 10             	add    esp,0x10
c000cd84:	eb 0a                	jmp    c000cd90 <ACPI::open(int, int, void*)+0x114>
c000cd86:	66 90                	xchg   ax,ax
c000cd88:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000cd90:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000cd98:	74 1e                	je     c000cdb8 <ACPI::open(int, int, void*)+0x13c>
c000cd9a:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000cda1:	8b 00                	mov    eax,DWORD PTR [eax]
c000cda3:	83 c0 08             	add    eax,0x8
c000cda6:	8b 00                	mov    eax,DWORD PTR [eax]
c000cda8:	83 ec 0c             	sub    esp,0xc
c000cdab:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cdb2:	ff d0                	call   eax
c000cdb4:	83 c4 10             	add    esp,0x10
c000cdb7:	90                   	nop
c000cdb8:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000cdbf:	83 f0 01             	xor    eax,0x1
c000cdc2:	0f b6 c0             	movzx  eax,al
c000cdc5:	85 c0                	test   eax,eax
c000cdc7:	74 2f                	je     c000cdf8 <ACPI::open(int, int, void*)+0x17c>
c000cdc9:	83 ec 0c             	sub    esp,0xc
c000cdcc:	68 96 3e 02 c0       	push   0xc0023e96
c000cdd1:	e8 c5 04 00 00       	call   c000d29b <KeSetBootMessage(char const*)>
c000cdd6:	83 c4 10             	add    esp,0x10
c000cdd9:	c7 84 24 60 01 00 00 0c 00 00 00 	mov    DWORD PTR [esp+0x160],0xc
c000cde4:	83 ec 0c             	sub    esp,0xc
c000cde7:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000cdee:	e8 09 69 00 00       	call   c00136fc <Virt::setupPageSwapping(int)>
c000cdf3:	83 c4 10             	add    esp,0x10
c000cdf6:	66 90                	xchg   ax,ax
c000cdf8:	83 ec 0c             	sub    esp,0xc
c000cdfb:	68 b1 3e 02 c0       	push   0xc0023eb1
c000ce00:	e8 96 04 00 00       	call   c000d29b <KeSetBootMessage(char const*)>
c000ce05:	83 c4 10             	add    esp,0x10
c000ce08:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ce0f:	83 ec 08             	sub    esp,0x8
c000ce12:	6a 13                	push   0x13
c000ce14:	50                   	push   eax
c000ce15:	e8 44 cf ff ff       	call   c0009d5e <getDevicesOfType(DeviceType)>
c000ce1a:	83 c4 0c             	add    esp,0xc
c000ce1d:	8d 76 00             	lea    esi,[esi+0x0]
c000ce20:	83 ec 0c             	sub    esp,0xc
c000ce23:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ce2a:	50                   	push   eax
c000ce2b:	e8 1c 54 01 00       	call   c002224c <LinkedList<Device>::isEmpty()>
c000ce30:	83 c4 10             	add    esp,0x10
c000ce33:	83 f0 01             	xor    eax,0x1
c000ce36:	0f b6 c0             	movzx  eax,al
c000ce39:	85 c0                	test   eax,eax
c000ce3b:	0f 84 47 01 00 00    	je     c000cf88 <ACPI::open(int, int, void*)+0x30c>
c000ce41:	83 ec 0c             	sub    esp,0xc
c000ce44:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ce4b:	50                   	push   eax
c000ce4c:	e8 17 54 01 00       	call   c0022268 <LinkedList<Device>::getFirstElement()>
c000ce51:	83 c4 10             	add    esp,0x10
c000ce54:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ce5b:	83 ec 0c             	sub    esp,0xc
c000ce5e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ce65:	50                   	push   eax
c000ce66:	e8 05 54 01 00       	call   c0022270 <LinkedList<Device>::removeFirst()>
c000ce6b:	83 c4 10             	add    esp,0x10
c000ce6e:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ce75:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ce7c:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ce83:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ce87:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ce8d:	ba 09 00 00 00       	mov    edx,0x9
c000ce92:	fc                   	cld    
c000ce93:	89 c7                	mov    edi,eax
c000ce95:	89 de                	mov    esi,ebx
c000ce97:	89 d1                	mov    ecx,edx
c000ce99:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ce9b:	83 ec 08             	sub    esp,0x8
c000ce9e:	8d 44 24 38          	lea    eax,[esp+0x38]
c000cea2:	50                   	push   eax
c000cea3:	83 ec 24             	sub    esp,0x24
c000cea6:	89 e0                	mov    eax,esp
c000cea8:	89 c3                	mov    ebx,eax
c000ceaa:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ceae:	ba 09 00 00 00       	mov    edx,0x9
c000ceb3:	89 df                	mov    edi,ebx
c000ceb5:	89 c6                	mov    esi,eax
c000ceb7:	89 d1                	mov    ecx,edx
c000ceb9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000cebb:	e8 aa 0f 01 00       	call   c001de6a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000cec0:	83 c4 30             	add    esp,0x30
c000cec3:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ceca:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ced2:	0f 84 48 ff ff ff    	je     c000ce20 <ACPI::open(int, int, void*)+0x1a4>
c000ced8:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000cee3:	83 ec 0c             	sub    esp,0xc
c000cee6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ceed:	e8 f5 2d 00 00       	call   c000fce7 <malloc>
c000cef2:	83 c4 10             	add    esp,0x10
c000cef5:	89 c3                	mov    ebx,eax
c000cef7:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c000cefc:	83 ec 04             	sub    esp,0x4
c000ceff:	50                   	push   eax
c000cf00:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cf07:	53                   	push   ebx
c000cf08:	e8 59 b2 ff ff       	call   c0008166 <File::File(char const*, Process*)>
c000cf0d:	83 c4 10             	add    esp,0x10
c000cf10:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000cf17:	83 ec 0c             	sub    esp,0xc
c000cf1a:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cf21:	e8 22 b5 ff ff       	call   c0008448 <File::exists()>
c000cf26:	83 c4 10             	add    esp,0x10
c000cf29:	0f b6 c0             	movzx  eax,al
c000cf2c:	85 c0                	test   eax,eax
c000cf2e:	74 28                	je     c000cf58 <ACPI::open(int, int, void*)+0x2dc>
c000cf30:	83 ec 08             	sub    esp,0x8
c000cf33:	6a 01                	push   0x1
c000cf35:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000cf3c:	e8 57 97 00 00       	call   c0016698 <Thr::loadDLL(char const*, bool)>
c000cf41:	83 c4 10             	add    esp,0x10
c000cf44:	83 ec 08             	sub    esp,0x8
c000cf47:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000cf4e:	50                   	push   eax
c000cf4f:	e8 96 99 00 00       	call   c00168ea <Thr::executeDLL(unsigned long, void*)>
c000cf54:	83 c4 10             	add    esp,0x10
c000cf57:	90                   	nop
c000cf58:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000cf60:	0f 84 ba fe ff ff    	je     c000ce20 <ACPI::open(int, int, void*)+0x1a4>
c000cf66:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000cf6d:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf6f:	83 c0 08             	add    eax,0x8
c000cf72:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf74:	83 ec 0c             	sub    esp,0xc
c000cf77:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cf7e:	ff d0                	call   eax
c000cf80:	83 c4 10             	add    esp,0x10
c000cf83:	e9 98 fe ff ff       	jmp    c000ce20 <ACPI::open(int, int, void*)+0x1a4>
c000cf88:	83 ec 0c             	sub    esp,0xc
c000cf8b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000cf92:	50                   	push   eax
c000cf93:	e8 b0 52 01 00       	call   c0022248 <LinkedList<Device>::~LinkedList()>
c000cf98:	83 c4 10             	add    esp,0x10
c000cf9b:	8b 1d d0 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0d0
c000cfa1:	83 ec 08             	sub    esp,0x8
c000cfa4:	6a 01                	push   0x1
c000cfa6:	68 cb 3e 02 c0       	push   0xc0023ecb
c000cfab:	e8 e8 96 00 00       	call   c0016698 <Thr::loadDLL(char const*, bool)>
c000cfb0:	83 c4 10             	add    esp,0x10
c000cfb3:	83 ec 08             	sub    esp,0x8
c000cfb6:	53                   	push   ebx
c000cfb7:	50                   	push   eax
c000cfb8:	e8 2d 99 00 00       	call   c00168ea <Thr::executeDLL(unsigned long, void*)>
c000cfbd:	83 c4 10             	add    esp,0x10
c000cfc0:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000cfc5:	85 c0                	test   eax,eax
c000cfc7:	0f 84 ef 00 00 00    	je     c000d0bc <ACPI::open(int, int, void*)+0x440>
c000cfcd:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000cfd2:	85 c0                	test   eax,eax
c000cfd4:	0f 84 e2 00 00 00    	je     c000d0bc <ACPI::open(int, int, void*)+0x440>
c000cfda:	83 ec 0c             	sub    esp,0xc
c000cfdd:	68 e8 3e 02 c0       	push   0xc0023ee8
c000cfe2:	e8 b4 02 00 00       	call   c000d29b <KeSetBootMessage(char const*)>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000cff5:	83 ec 0c             	sub    esp,0xc
c000cff8:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000cfff:	e8 e3 2c 00 00       	call   c000fce7 <malloc>
c000d004:	83 c4 10             	add    esp,0x10
c000d007:	89 c3                	mov    ebx,eax
c000d009:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c000d00e:	83 ec 04             	sub    esp,0x4
c000d011:	50                   	push   eax
c000d012:	68 05 3f 02 c0       	push   0xc0023f05
c000d017:	53                   	push   ebx
c000d018:	e8 49 b1 ff ff       	call   c0008166 <File::File(char const*, Process*)>
c000d01d:	83 c4 10             	add    esp,0x10
c000d020:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000d027:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d02f:	74 17                	je     c000d048 <ACPI::open(int, int, void*)+0x3cc>
c000d031:	83 ec 0c             	sub    esp,0xc
c000d034:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000d03b:	e8 08 b4 ff ff       	call   c0008448 <File::exists()>
c000d040:	83 c4 10             	add    esp,0x10
c000d043:	0f b6 c0             	movzx  eax,al
c000d046:	85 c0                	test   eax,eax
c000d048:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d050:	74 2a                	je     c000d07c <ACPI::open(int, int, void*)+0x400>
c000d052:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d05a:	74 20                	je     c000d07c <ACPI::open(int, int, void*)+0x400>
c000d05c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000d063:	8b 00                	mov    eax,DWORD PTR [eax]
c000d065:	83 c0 08             	add    eax,0x8
c000d068:	8b 00                	mov    eax,DWORD PTR [eax]
c000d06a:	83 ec 0c             	sub    esp,0xc
c000d06d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000d074:	ff d0                	call   eax
c000d076:	83 c4 10             	add    esp,0x10
c000d079:	8d 76 00             	lea    esi,[esi+0x0]
c000d07c:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000d081:	83 ec 08             	sub    esp,0x8
c000d084:	68 22 3f 02 c0       	push   0xc0023f22
c000d089:	50                   	push   eax
c000d08a:	e8 99 f2 ff ff       	call   c000c328 <findDataTable(unsigned char*, char*)>
c000d08f:	83 c4 10             	add    esp,0x10
c000d092:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000d099:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000d0a1:	74 19                	je     c000d0bc <ACPI::open(int, int, void*)+0x440>
c000d0a3:	83 ec 08             	sub    esp,0x8
c000d0a6:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000d0ad:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000d0b4:	e8 ab fb ff ff       	call   c000cc64 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000d0b9:	83 c4 10             	add    esp,0x10
c000d0bc:	b8 00 00 00 00       	mov    eax,0x0
c000d0c1:	81 c4 70 01 00 00    	add    esp,0x170
c000d0c7:	5b                   	pop    ebx
c000d0c8:	5e                   	pop    esi
c000d0c9:	5f                   	pop    edi
c000d0ca:	c3                   	ret    
c000d0cb:	90                   	nop

c000d0cc <KeAssertionFailed(char*, char const*, char const*, int)>:
c000d0cc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000d0d2:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000d0d9:	89 c2                	mov    edx,eax
c000d0db:	c1 fa 1f             	sar    edx,0x1f
c000d0de:	83 ec 04             	sub    esp,0x4
c000d0e1:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000d0e5:	51                   	push   ecx
c000d0e6:	52                   	push   edx
c000d0e7:	50                   	push   eax
c000d0e8:	e8 ef 29 00 00       	call   c000fadc <KeItoa(long long, char*)>
c000d0ed:	83 c4 10             	add    esp,0x10
c000d0f0:	83 ec 08             	sub    esp,0x8
c000d0f3:	68 f0 3f 02 c0       	push   0xc0023ff0
c000d0f8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0fc:	50                   	push   eax
c000d0fd:	e8 3e 35 ff ff       	call   c0000640 <strcpy>
c000d102:	83 c4 10             	add    esp,0x10
c000d105:	83 ec 08             	sub    esp,0x8
c000d108:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000d10f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d113:	50                   	push   eax
c000d114:	e8 27 37 ff ff       	call   c0000840 <strcat>
c000d119:	83 c4 10             	add    esp,0x10
c000d11c:	83 ec 08             	sub    esp,0x8
c000d11f:	68 fe 3f 02 c0       	push   0xc0023ffe
c000d124:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d128:	50                   	push   eax
c000d129:	e8 12 37 ff ff       	call   c0000840 <strcat>
c000d12e:	83 c4 10             	add    esp,0x10
c000d131:	83 ec 08             	sub    esp,0x8
c000d134:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d13b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d13f:	50                   	push   eax
c000d140:	e8 fb 36 ff ff       	call   c0000840 <strcat>
c000d145:	83 c4 10             	add    esp,0x10
c000d148:	83 ec 08             	sub    esp,0x8
c000d14b:	68 01 40 02 c0       	push   0xc0024001
c000d150:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d154:	50                   	push   eax
c000d155:	e8 e6 36 ff ff       	call   c0000840 <strcat>
c000d15a:	83 c4 10             	add    esp,0x10
c000d15d:	83 ec 08             	sub    esp,0x8
c000d160:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000d167:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d16b:	50                   	push   eax
c000d16c:	e8 cf 36 ff ff       	call   c0000840 <strcat>
c000d171:	83 c4 10             	add    esp,0x10
c000d174:	83 ec 08             	sub    esp,0x8
c000d177:	68 01 40 02 c0       	push   0xc0024001
c000d17c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d180:	50                   	push   eax
c000d181:	e8 ba 36 ff ff       	call   c0000840 <strcat>
c000d186:	83 c4 10             	add    esp,0x10
c000d189:	83 ec 08             	sub    esp,0x8
c000d18c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d190:	50                   	push   eax
c000d191:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d195:	50                   	push   eax
c000d196:	e8 a5 36 ff ff       	call   c0000840 <strcat>
c000d19b:	83 c4 10             	add    esp,0x10
c000d19e:	83 ec 0c             	sub    esp,0xc
c000d1a1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d1a5:	50                   	push   eax
c000d1a6:	e8 83 2e 00 00       	call   c001002e <KePanic(char const*)>
c000d1ab:	83 c4 10             	add    esp,0x10
c000d1ae:	90                   	nop
c000d1af:	81 c4 2c 02 00 00    	add    esp,0x22c
c000d1b5:	c3                   	ret    

c000d1b6 <KeInitialiseAtexit()>:
c000d1b6:	83 ec 10             	sub    esp,0x10
c000d1b9:	c7 05 e0 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cfe0,0x0
c000d1c3:	6a 60                	push   0x60
c000d1c5:	6a 00                	push   0x0
c000d1c7:	68 60 d0 02 c0       	push   0xc002d060
c000d1cc:	e8 1f 33 ff ff       	call   c00004f0 <memset>
c000d1d1:	83 c4 1c             	add    esp,0x1c
c000d1d4:	c3                   	ret    

c000d1d5 <KeRegisterAtexit(void (*)(void*), void*)>:
c000d1d5:	a1 e0 cf 02 c0       	mov    eax,ds:0xc002cfe0
c000d1da:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d1de:	89 14 85 60 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2fa0],edx
c000d1e5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1e9:	89 14 85 00 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3000],edx
c000d1f0:	40                   	inc    eax
c000d1f1:	a3 e0 cf 02 c0       	mov    ds:0xc002cfe0,eax
c000d1f6:	83 f8 17             	cmp    eax,0x17
c000d1f9:	7e 0d                	jle    c000d208 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000d1fb:	c7 44 24 04 03 40 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024003
c000d203:	e9 26 2e 00 00       	jmp    c001002e <KePanic(char const*)>
c000d208:	c3                   	ret    

c000d209 <KeExecuteAtexit()>:
c000d209:	53                   	push   ebx
c000d20a:	31 db                	xor    ebx,ebx
c000d20c:	83 ec 08             	sub    esp,0x8
c000d20f:	39 1d e0 cf 02 c0    	cmp    DWORD PTR ds:0xc002cfe0,ebx
c000d215:	7e 50                	jle    c000d267 <KeExecuteAtexit()+0x5e>
c000d217:	8b 04 9d 60 d0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2fa0]
c000d21e:	85 c0                	test   eax,eax
c000d220:	74 42                	je     c000d264 <KeExecuteAtexit()+0x5b>
c000d222:	51                   	push   ecx
c000d223:	50                   	push   eax
c000d224:	53                   	push   ebx
c000d225:	68 1c 40 02 c0       	push   0xc002401c
c000d22a:	e8 35 9d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d22f:	58                   	pop    eax
c000d230:	ff 34 9d 00 d0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd3000]
c000d237:	ff 14 9d 60 d0 02 c0 	call   DWORD PTR [ebx*4-0x3ffd2fa0]
c000d23e:	c7 04 24 3e 40 02 c0 	mov    DWORD PTR [esp],0xc002403e
c000d245:	e8 1a 9d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d24a:	c7 04 24 d7 43 02 c0 	mov    DWORD PTR [esp],0xc00243d7
c000d251:	c7 04 9d 60 d0 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd2fa0],0x0
c000d25c:	e8 03 9d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d261:	83 c4 10             	add    esp,0x10
c000d264:	43                   	inc    ebx
c000d265:	eb a8                	jmp    c000d20f <KeExecuteAtexit()+0x6>
c000d267:	83 c4 08             	add    esp,0x8
c000d26a:	5b                   	pop    ebx
c000d26b:	c3                   	ret    

c000d26c <KeDisplaySplashScreen()>:
c000d26c:	53                   	push   ebx
c000d26d:	bb 01 00 00 00       	mov    ebx,0x1
c000d272:	83 ec 08             	sub    esp,0x8
c000d275:	43                   	inc    ebx
c000d276:	0f be 83 41 40 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdbfbf]
c000d27d:	85 c0                	test   eax,eax
c000d27f:	74 15                	je     c000d296 <KeDisplaySplashScreen()+0x2a>
c000d281:	83 ec 0c             	sub    esp,0xc
c000d284:	6a 01                	push   0x1
c000d286:	53                   	push   ebx
c000d287:	6a 00                	push   0x0
c000d289:	6a 0f                	push   0xf
c000d28b:	50                   	push   eax
c000d28c:	e8 cf e2 00 00       	call   c001b560 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d291:	83 c4 20             	add    esp,0x20
c000d294:	eb df                	jmp    c000d275 <KeDisplaySplashScreen()+0x9>
c000d296:	83 c4 08             	add    esp,0x8
c000d299:	5b                   	pop    ebx
c000d29a:	c3                   	ret    

c000d29b <KeSetBootMessage(char const*)>:
c000d29b:	57                   	push   edi
c000d29c:	56                   	push   esi
c000d29d:	53                   	push   ebx
c000d29e:	81 ec a4 00 00 00    	sub    esp,0xa4
c000d2a4:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000d2ab:	68 9e 00 00 00       	push   0x9e
c000d2b0:	6a 00                	push   0x0
c000d2b2:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000d2b6:	56                   	push   esi
c000d2b7:	e8 34 32 ff ff       	call   c00004f0 <memset>
c000d2bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d2bf:	e8 ac 32 ff ff       	call   c0000570 <strlen>
c000d2c4:	ba 50 00 00 00       	mov    edx,0x50
c000d2c9:	83 c4 10             	add    esp,0x10
c000d2cc:	29 c2                	sub    edx,eax
c000d2ce:	31 c9                	xor    ecx,ecx
c000d2d0:	83 e2 fe             	and    edx,0xfffffffe
c000d2d3:	01 f2                	add    edx,esi
c000d2d5:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000d2da:	84 c0                	test   al,al
c000d2dc:	74 0a                	je     c000d2e8 <KeSetBootMessage(char const*)+0x4d>
c000d2de:	80 cc 07             	or     ah,0x7
c000d2e1:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000d2e5:	41                   	inc    ecx
c000d2e6:	eb ed                	jmp    c000d2d5 <KeSetBootMessage(char const*)+0x3a>
c000d2e8:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000d2ed:	b9 9e 00 00 00       	mov    ecx,0x9e
c000d2f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d2f4:	50                   	push   eax
c000d2f5:	50                   	push   eax
c000d2f6:	53                   	push   ebx
c000d2f7:	68 56 40 02 c0       	push   0xc0024056
c000d2fc:	e8 63 9c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d301:	81 c4 b0 00 00 00    	add    esp,0xb0
c000d307:	5b                   	pop    ebx
c000d308:	5e                   	pop    esi
c000d309:	5f                   	pop    edi
c000d30a:	c3                   	ret    

c000d30b <__cxa_atexit>:
c000d30b:	31 c0                	xor    eax,eax
c000d30d:	c3                   	ret    

c000d30e <__cxa_finalize>:
c000d30e:	c3                   	ret    

c000d30f <__stack_chk_fail>:
c000d30f:	55                   	push   ebp
c000d310:	89 e5                	mov    ebp,esp
c000d312:	83 ec 10             	sub    esp,0x10
c000d315:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d318:	68 64 40 02 c0       	push   0xc0024064
c000d31d:	e8 42 9c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d322:	58                   	pop    eax
c000d323:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d326:	5a                   	pop    edx
c000d327:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d32a:	68 64 40 02 c0       	push   0xc0024064
c000d32f:	e8 30 9c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d334:	c7 04 24 6c 40 02 c0 	mov    DWORD PTR [esp],0xc002406c
c000d33b:	e8 ee 2c 00 00       	call   c001002e <KePanic(char const*)>
c000d340:	83 c4 10             	add    esp,0x10
c000d343:	c9                   	leave  
c000d344:	c3                   	ret    

c000d345 <__cxa_pure_virtual>:
c000d345:	83 ec 18             	sub    esp,0x18
c000d348:	68 84 40 02 c0       	push   0xc0024084
c000d34d:	e8 dc 2c 00 00       	call   c001002e <KePanic(char const*)>
c000d352:	83 c4 1c             	add    esp,0x1c
c000d355:	c3                   	ret    

c000d356 <operator new[](unsigned long)>:
c000d356:	e9 8c 29 00 00       	jmp    c000fce7 <malloc>

c000d35b <operator delete(void*, unsigned long)>:
c000d35b:	e9 a7 29 00 00       	jmp    c000fd07 <rfree>

c000d360 <operator delete[](void*)>:
c000d360:	e9 a2 29 00 00       	jmp    c000fd07 <rfree>

c000d365 <operator delete[](void*, unsigned long)>:
c000d365:	e9 9d 29 00 00       	jmp    c000fd07 <rfree>
c000d36a:	66 90                	xchg   ax,ax

c000d36c <CUnlockScheduler>:
c000d36c:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000d374:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000d379:	85 c0                	test   eax,eax
c000d37b:	75 03                	jne    c000d380 <CUnlockScheduler+0x14>
c000d37d:	fb                   	sti    
c000d37e:	66 90                	xchg   ax,ax
c000d380:	90                   	nop
c000d381:	c3                   	ret    
c000d382:	66 90                	xchg   ax,ax

c000d384 <CLockScheduler>:
c000d384:	fa                   	cli    
c000d385:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000d38a:	83 c0 01             	add    eax,0x1
c000d38d:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c000d392:	90                   	nop
c000d393:	c3                   	ret    

c000d394 <CPrintf>:
c000d394:	83 ec 0c             	sub    esp,0xc
c000d397:	83 ec 08             	sub    esp,0x8
c000d39a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d39e:	68 97 40 02 c0       	push   0xc0024097
c000d3a3:	e8 bc 9b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d3a8:	83 c4 10             	add    esp,0x10
c000d3ab:	90                   	nop
c000d3ac:	83 c4 0c             	add    esp,0xc
c000d3af:	c3                   	ret    

c000d3b0 <CmOpen(char const*)>:
c000d3b0:	57                   	push   edi
c000d3b1:	56                   	push   esi
c000d3b2:	53                   	push   ebx
c000d3b3:	83 ec 1c             	sub    esp,0x1c
c000d3b6:	6a 30                	push   0x30
c000d3b8:	e8 2a 29 00 00       	call   c000fce7 <malloc>
c000d3bd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000d3c4:	89 c3                	mov    ebx,eax
c000d3c6:	e8 1c 29 00 00       	call   c000fce7 <malloc>
c000d3cb:	83 c4 0c             	add    esp,0xc
c000d3ce:	89 c6                	mov    esi,eax
c000d3d0:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c000d3d6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d3da:	50                   	push   eax
c000d3db:	e8 86 ad ff ff       	call   c0008166 <File::File(char const*, Process*)>
c000d3e0:	83 c4 0c             	add    esp,0xc
c000d3e3:	89 33                	mov    DWORD PTR [ebx],esi
c000d3e5:	8d 44 24 07          	lea    eax,[esp+0x7]
c000d3e9:	50                   	push   eax
c000d3ea:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d3ee:	50                   	push   eax
c000d3ef:	56                   	push   esi
c000d3f0:	e8 91 b0 ff ff       	call   c0008486 <File::stat(unsigned long long*, bool*)>
c000d3f5:	5a                   	pop    edx
c000d3f6:	59                   	pop    ecx
c000d3f7:	6a 01                	push   0x1
c000d3f9:	ff 33                	push   DWORD PTR [ebx]
c000d3fb:	e8 84 ad ff ff       	call   c0008184 <File::open(FileOpenMode)>
c000d400:	5e                   	pop    esi
c000d401:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d405:	e8 dd 28 00 00       	call   c000fce7 <malloc>
c000d40a:	5a                   	pop    edx
c000d40b:	89 c7                	mov    edi,eax
c000d40d:	8d 74 24 10          	lea    esi,[esp+0x10]
c000d411:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d413:	8b 10                	mov    edx,DWORD PTR [eax]
c000d415:	56                   	push   esi
c000d416:	57                   	push   edi
c000d417:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d41b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d41f:	50                   	push   eax
c000d420:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d423:	83 c4 14             	add    esp,0x14
c000d426:	ff 33                	push   DWORD PTR [ebx]
c000d428:	e8 b5 ad ff ff       	call   c00081e2 <File::close()>
c000d42d:	59                   	pop    ecx
c000d42e:	58                   	pop    eax
c000d42f:	6a 13                	push   0x13
c000d431:	ff 33                	push   DWORD PTR [ebx]
c000d433:	e8 4c ad ff ff       	call   c0008184 <File::open(FileOpenMode)>
c000d438:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d43a:	8b 10                	mov    edx,DWORD PTR [eax]
c000d43c:	89 34 24             	mov    DWORD PTR [esp],esi
c000d43f:	57                   	push   edi
c000d440:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d444:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d448:	50                   	push   eax
c000d449:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d44c:	83 c4 14             	add    esp,0x14
c000d44f:	57                   	push   edi
c000d450:	e8 a2 28 00 00       	call   c000fcf7 <free>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000d45b:	75 10                	jne    c000d46d <CmOpen(char const*)+0xbd>
c000d45d:	83 ec 0c             	sub    esp,0xc
c000d460:	68 9a 40 02 c0       	push   0xc002409a
c000d465:	e8 c4 2b 00 00       	call   c001002e <KePanic(char const*)>
c000d46a:	83 c4 10             	add    esp,0x10
c000d46d:	8d 7b 05             	lea    edi,[ebx+0x5]
c000d470:	50                   	push   eax
c000d471:	6a 00                	push   0x0
c000d473:	6a 00                	push   0x0
c000d475:	ff 33                	push   DWORD PTR [ebx]
c000d477:	e8 c6 ad ff ff       	call   c0008242 <File::seek(unsigned long long)>
c000d47c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d47e:	8b 10                	mov    edx,DWORD PTR [eax]
c000d480:	89 34 24             	mov    DWORD PTR [esp],esi
c000d483:	57                   	push   edi
c000d484:	6a 00                	push   0x0
c000d486:	6a 2b                	push   0x2b
c000d488:	50                   	push   eax
c000d489:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d48c:	83 c4 1c             	add    esp,0x1c
c000d48f:	6a 00                	push   0x0
c000d491:	6a 00                	push   0x0
c000d493:	ff 33                	push   DWORD PTR [ebx]
c000d495:	e8 a8 ad ff ff       	call   c0008242 <File::seek(unsigned long long)>
c000d49a:	83 c4 0c             	add    esp,0xc
c000d49d:	6a 08                	push   0x8
c000d49f:	68 ab 40 02 c0       	push   0xc00240ab
c000d4a4:	57                   	push   edi
c000d4a5:	e8 d6 2e ff ff       	call   c0000380 <memcmp>
c000d4aa:	83 c4 10             	add    esp,0x10
c000d4ad:	85 c0                	test   eax,eax
c000d4af:	74 10                	je     c000d4c1 <CmOpen(char const*)+0x111>
c000d4b1:	83 ec 0c             	sub    esp,0xc
c000d4b4:	68 b4 40 02 c0       	push   0xc00240b4
c000d4b9:	e8 70 2b 00 00       	call   c001002e <KePanic(char const*)>
c000d4be:	83 c4 10             	add    esp,0x10
c000d4c1:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000d4c5:	89 d8                	mov    eax,ebx
c000d4c7:	83 c4 10             	add    esp,0x10
c000d4ca:	5b                   	pop    ebx
c000d4cb:	5e                   	pop    esi
c000d4cc:	5f                   	pop    edi
c000d4cd:	c3                   	ret    

c000d4ce <CmClose(Reghive_Tag*)>:
c000d4ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d4d2:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d4d6:	74 0b                	je     c000d4e3 <CmClose(Reghive_Tag*)+0x15>
c000d4d8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d4da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d4de:	e9 ff ac ff ff       	jmp    c00081e2 <File::close()>
c000d4e3:	c3                   	ret    

c000d4e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000d4e4:	53                   	push   ebx
c000d4e5:	83 ec 18             	sub    esp,0x18
c000d4e8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d4ec:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d4f0:	74 29                	je     c000d51b <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d4f2:	50                   	push   eax
c000d4f3:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d4f8:	99                   	cdq    
c000d4f9:	52                   	push   edx
c000d4fa:	50                   	push   eax
c000d4fb:	ff 33                	push   DWORD PTR [ebx]
c000d4fd:	e8 40 ad ff ff       	call   c0008242 <File::seek(unsigned long long)>
c000d502:	5a                   	pop    edx
c000d503:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d505:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d509:	8b 10                	mov    edx,DWORD PTR [eax]
c000d50b:	51                   	push   ecx
c000d50c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d510:	6a 00                	push   0x0
c000d512:	6a 2b                	push   0x2b
c000d514:	50                   	push   eax
c000d515:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d518:	83 c4 20             	add    esp,0x20
c000d51b:	83 c4 18             	add    esp,0x18
c000d51e:	5b                   	pop    ebx
c000d51f:	c3                   	ret    

c000d520 <CmGetString(Reghive_Tag*, int, char*)>:
c000d520:	55                   	push   ebp
c000d521:	57                   	push   edi
c000d522:	56                   	push   esi
c000d523:	53                   	push   ebx
c000d524:	31 db                	xor    ebx,ebx
c000d526:	83 ec 70             	sub    esp,0x70
c000d529:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000d530:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000d534:	50                   	push   eax
c000d535:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000d53c:	55                   	push   ebp
c000d53d:	e8 a2 ff ff ff       	call   c000d4e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d542:	83 c4 10             	add    esp,0x10
c000d545:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000d54a:	c1 e0 08             	shl    eax,0x8
c000d54d:	89 c2                	mov    edx,eax
c000d54f:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000d554:	09 d0                	or     eax,edx
c000d556:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000d55b:	c1 e0 08             	shl    eax,0x8
c000d55e:	09 d0                	or     eax,edx
c000d560:	74 25                	je     c000d587 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000d562:	6b fb 0d             	imul   edi,ebx,0xd
c000d565:	52                   	push   edx
c000d566:	8d 54 24 39          	lea    edx,[esp+0x39]
c000d56a:	52                   	push   edx
c000d56b:	50                   	push   eax
c000d56c:	55                   	push   ebp
c000d56d:	e8 72 ff ff ff       	call   c000d4e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d572:	8d 74 24 49          	lea    esi,[esp+0x49]
c000d576:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000d57d:	b9 27 00 00 00       	mov    ecx,0x27
c000d582:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d584:	83 c4 10             	add    esp,0x10
c000d587:	83 c3 03             	add    ebx,0x3
c000d58a:	83 fb 15             	cmp    ebx,0x15
c000d58d:	75 b6                	jne    c000d545 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000d58f:	83 c4 6c             	add    esp,0x6c
c000d592:	5b                   	pop    ebx
c000d593:	5e                   	pop    esi
c000d594:	5f                   	pop    edi
c000d595:	5d                   	pop    ebp
c000d596:	c3                   	ret    

c000d597 <CmEnterDirectory(Reghive_Tag*, int)>:
c000d597:	83 ec 40             	sub    esp,0x40
c000d59a:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d59e:	50                   	push   eax
c000d59f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5a7:	e8 38 ff ff ff       	call   c000d4e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d5ac:	83 c4 10             	add    esp,0x10
c000d5af:	83 c8 ff             	or     eax,0xffffffff
c000d5b2:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000d5b7:	75 19                	jne    c000d5d2 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000d5b9:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000d5be:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000d5c3:	c1 e0 08             	shl    eax,0x8
c000d5c6:	09 c2                	or     edx,eax
c000d5c8:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000d5cd:	c1 e0 10             	shl    eax,0x10
c000d5d0:	09 d0                	or     eax,edx
c000d5d2:	83 c4 3c             	add    esp,0x3c
c000d5d5:	c3                   	ret    

c000d5d6 <CmGetNext(Reghive_Tag*, int)>:
c000d5d6:	83 ec 40             	sub    esp,0x40
c000d5d9:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d5dd:	50                   	push   eax
c000d5de:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5e2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5e6:	e8 f9 fe ff ff       	call   c000d4e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d5eb:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000d5f0:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000d5f5:	c1 e0 08             	shl    eax,0x8
c000d5f8:	09 c2                	or     edx,eax
c000d5fa:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000d5ff:	83 c4 4c             	add    esp,0x4c
c000d602:	c1 e0 10             	shl    eax,0x10
c000d605:	09 d0                	or     eax,edx
c000d607:	c3                   	ret    

c000d608 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000d608:	53                   	push   ebx
c000d609:	83 ec 18             	sub    esp,0x18
c000d60c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d610:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d614:	74 29                	je     c000d63f <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d616:	50                   	push   eax
c000d617:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d61c:	99                   	cdq    
c000d61d:	52                   	push   edx
c000d61e:	50                   	push   eax
c000d61f:	ff 33                	push   DWORD PTR [ebx]
c000d621:	e8 1c ac ff ff       	call   c0008242 <File::seek(unsigned long long)>
c000d626:	5a                   	pop    edx
c000d627:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d629:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d62d:	8b 10                	mov    edx,DWORD PTR [eax]
c000d62f:	51                   	push   ecx
c000d630:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d634:	6a 00                	push   0x0
c000d636:	6a 2b                	push   0x2b
c000d638:	50                   	push   eax
c000d639:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d63c:	83 c4 20             	add    esp,0x20
c000d63f:	83 c4 18             	add    esp,0x18
c000d642:	5b                   	pop    ebx
c000d643:	c3                   	ret    

c000d644 <CmFreeExtent(Reghive_Tag*, int)>:
c000d644:	53                   	push   ebx
c000d645:	83 ec 3c             	sub    esp,0x3c
c000d648:	6a 2b                	push   0x2b
c000d64a:	6a 00                	push   0x0
c000d64c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d650:	53                   	push   ebx
c000d651:	e8 9a 2e ff ff       	call   c00004f0 <memset>
c000d656:	83 c4 0c             	add    esp,0xc
c000d659:	53                   	push   ebx
c000d65a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d65e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d662:	e8 a1 ff ff ff       	call   c000d608 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d667:	83 c4 48             	add    esp,0x48
c000d66a:	5b                   	pop    ebx
c000d66b:	c3                   	ret    

c000d66c <CmUpdateHeader(Reghive_Tag*)>:
c000d66c:	83 ec 0c             	sub    esp,0xc
c000d66f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d673:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d677:	74 10                	je     c000d689 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000d679:	52                   	push   edx
c000d67a:	8d 50 05             	lea    edx,[eax+0x5]
c000d67d:	52                   	push   edx
c000d67e:	6a 00                	push   0x0
c000d680:	50                   	push   eax
c000d681:	e8 82 ff ff ff       	call   c000d608 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d686:	83 c4 10             	add    esp,0x10
c000d689:	83 c4 0c             	add    esp,0xc
c000d68c:	c3                   	ret    

c000d68d <CmExpand(Reghive_Tag*, int)>:
c000d68d:	57                   	push   edi
c000d68e:	56                   	push   esi
c000d68f:	83 ce ff             	or     esi,0xffffffff
c000d692:	53                   	push   ebx
c000d693:	83 ec 30             	sub    esp,0x30
c000d696:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d69a:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d69e:	74 5f                	je     c000d6ff <CmExpand(Reghive_Tag*, int)+0x72>
c000d6a0:	31 d2                	xor    edx,edx
c000d6a2:	31 f6                	xor    esi,esi
c000d6a4:	50                   	push   eax
c000d6a5:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000d6a9:	52                   	push   edx
c000d6aa:	50                   	push   eax
c000d6ab:	ff 33                	push   DWORD PTR [ebx]
c000d6ad:	e8 90 ab ff ff       	call   c0008242 <File::seek(unsigned long long)>
c000d6b2:	83 c4 0c             	add    esp,0xc
c000d6b5:	6a 2b                	push   0x2b
c000d6b7:	6a 00                	push   0x0
c000d6b9:	8d 7c 24 11          	lea    edi,[esp+0x11]
c000d6bd:	57                   	push   edi
c000d6be:	e8 2d 2e ff ff       	call   c00004f0 <memset>
c000d6c3:	83 c4 10             	add    esp,0x10
c000d6c6:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d6ca:	7d 1b                	jge    c000d6e7 <CmExpand(Reghive_Tag*, int)+0x5a>
c000d6cc:	83 ec 0c             	sub    esp,0xc
c000d6cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d6d1:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000d6d5:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6d7:	46                   	inc    esi
c000d6d8:	51                   	push   ecx
c000d6d9:	57                   	push   edi
c000d6da:	6a 00                	push   0x0
c000d6dc:	6a 2b                	push   0x2b
c000d6de:	50                   	push   eax
c000d6df:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d6e2:	83 c4 20             	add    esp,0x20
c000d6e5:	eb df                	jmp    c000d6c6 <CmExpand(Reghive_Tag*, int)+0x39>
c000d6e7:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000d6eb:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c000d6ee:	83 ec 0c             	sub    esp,0xc
c000d6f1:	01 f2                	add    edx,esi
c000d6f3:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c000d6f6:	53                   	push   ebx
c000d6f7:	e8 70 ff ff ff       	call   c000d66c <CmUpdateHeader(Reghive_Tag*)>
c000d6fc:	83 c4 10             	add    esp,0x10
c000d6ff:	83 c4 30             	add    esp,0x30
c000d702:	89 f0                	mov    eax,esi
c000d704:	5b                   	pop    ebx
c000d705:	5e                   	pop    esi
c000d706:	5f                   	pop    edi
c000d707:	c3                   	ret    

c000d708 <CmFindUnusedExtent(Reghive_Tag*)>:
c000d708:	55                   	push   ebp
c000d709:	57                   	push   edi
c000d70a:	56                   	push   esi
c000d70b:	53                   	push   ebx
c000d70c:	83 cb ff             	or     ebx,0xffffffff
c000d70f:	83 ec 1c             	sub    esp,0x1c
c000d712:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d716:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000d71a:	74 68                	je     c000d784 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d71c:	be 2b 00 00 00       	mov    esi,0x2b
c000d721:	51                   	push   ecx
c000d722:	31 ff                	xor    edi,edi
c000d724:	6a 00                	push   0x0
c000d726:	31 db                	xor    ebx,ebx
c000d728:	6a 00                	push   0x0
c000d72a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d72d:	e8 10 ab ff ff       	call   c0008242 <File::seek(unsigned long long)>
c000d732:	83 c4 10             	add    esp,0x10
c000d735:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000d738:	76 3b                	jbe    c000d775 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000d73a:	83 ec 0c             	sub    esp,0xc
c000d73d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d740:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d744:	8b 10                	mov    edx,DWORD PTR [eax]
c000d746:	51                   	push   ecx
c000d747:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000d74b:	51                   	push   ecx
c000d74c:	6a 00                	push   0x0
c000d74e:	6a 01                	push   0x1
c000d750:	50                   	push   eax
c000d751:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d754:	83 c4 20             	add    esp,0x20
c000d757:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000d75c:	74 26                	je     c000d784 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d75e:	43                   	inc    ebx
c000d75f:	52                   	push   edx
c000d760:	57                   	push   edi
c000d761:	56                   	push   esi
c000d762:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d765:	e8 d8 aa ff ff       	call   c0008242 <File::seek(unsigned long long)>
c000d76a:	83 c6 2b             	add    esi,0x2b
c000d76d:	83 d7 00             	adc    edi,0x0
c000d770:	83 c4 10             	add    esp,0x10
c000d773:	eb c0                	jmp    c000d735 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000d775:	50                   	push   eax
c000d776:	50                   	push   eax
c000d777:	6a 40                	push   0x40
c000d779:	55                   	push   ebp
c000d77a:	e8 0e ff ff ff       	call   c000d68d <CmExpand(Reghive_Tag*, int)>
c000d77f:	83 c4 10             	add    esp,0x10
c000d782:	89 c3                	mov    ebx,eax
c000d784:	83 c4 1c             	add    esp,0x1c
c000d787:	89 d8                	mov    eax,ebx
c000d789:	5b                   	pop    ebx
c000d78a:	5e                   	pop    esi
c000d78b:	5f                   	pop    edi
c000d78c:	5d                   	pop    ebp
c000d78d:	c3                   	ret    

c000d78e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000d78e:	55                   	push   ebp
c000d78f:	57                   	push   edi
c000d790:	56                   	push   esi
c000d791:	53                   	push   ebx
c000d792:	81 ec 88 00 00 00    	sub    esp,0x88
c000d798:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000d79f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d7a6:	e8 5d ff ff ff       	call   c000d708 <CmFindUnusedExtent(Reghive_Tag*)>
c000d7ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d7af:	83 c4 0c             	add    esp,0xc
c000d7b2:	6a 2b                	push   0x2b
c000d7b4:	6a 00                	push   0x0
c000d7b6:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000d7ba:	55                   	push   ebp
c000d7bb:	e8 30 2d ff ff       	call   c00004f0 <memset>
c000d7c0:	83 c4 10             	add    esp,0x10
c000d7c3:	85 db                	test   ebx,ebx
c000d7c5:	74 12                	je     c000d7d9 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000d7c7:	51                   	push   ecx
c000d7c8:	55                   	push   ebp
c000d7c9:	53                   	push   ebx
c000d7ca:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d7d1:	e8 0e fd ff ff       	call   c000d4e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d7d6:	83 c4 10             	add    esp,0x10
c000d7d9:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000d7dd:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d7e4:	b9 2b 00 00 00       	mov    ecx,0x2b
c000d7e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7eb:	85 db                	test   ebx,ebx
c000d7ed:	74 49                	je     c000d838 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000d7ef:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000d7f4:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000d7f9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d7fd:	c1 e0 08             	shl    eax,0x8
c000d800:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000d806:	09 c8                	or     eax,ecx
c000d808:	74 11                	je     c000d81b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000d80a:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000d80e:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000d812:	c1 e8 10             	shr    eax,0x10
c000d815:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000d819:	eb 0f                	jmp    c000d82a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000d81b:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d820:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d825:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d82a:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000d82e:	c1 ea 08             	shr    edx,0x8
c000d831:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000d836:	eb 0f                	jmp    c000d847 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000d838:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d83d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d842:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d847:	52                   	push   edx
c000d848:	8d 44 24 49          	lea    eax,[esp+0x49]
c000d84c:	50                   	push   eax
c000d84d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d851:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d858:	e8 ab fd ff ff       	call   c000d608 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d85d:	83 c4 10             	add    esp,0x10
c000d860:	85 db                	test   ebx,ebx
c000d862:	74 12                	je     c000d876 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000d864:	50                   	push   eax
c000d865:	55                   	push   ebp
c000d866:	53                   	push   ebx
c000d867:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d86e:	e8 95 fd ff ff       	call   c000d608 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d873:	83 c4 10             	add    esp,0x10
c000d876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d87a:	83 c4 7c             	add    esp,0x7c
c000d87d:	5b                   	pop    ebx
c000d87e:	5e                   	pop    esi
c000d87f:	5f                   	pop    edi
c000d880:	5d                   	pop    ebp
c000d881:	c3                   	ret    

c000d882 <CmSetString(Reghive_Tag*, int, char const*)>:
c000d882:	55                   	push   ebp
c000d883:	57                   	push   edi
c000d884:	56                   	push   esi
c000d885:	53                   	push   ebx
c000d886:	bb 27 00 00 00       	mov    ebx,0x27
c000d88b:	81 ec 88 00 00 00    	sub    esp,0x88
c000d891:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d898:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000d89f:	e8 cc 2c ff ff       	call   c0000570 <strlen>
c000d8a4:	8d 48 26             	lea    ecx,[eax+0x26]
c000d8a7:	89 c8                	mov    eax,ecx
c000d8a9:	99                   	cdq    
c000d8aa:	f7 fb                	idiv   ebx
c000d8ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d8b0:	83 c4 10             	add    esp,0x10
c000d8b3:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000d8b9:	7e 10                	jle    c000d8cb <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000d8bb:	83 ec 0c             	sub    esp,0xc
c000d8be:	68 c5 40 02 c0       	push   0xc00240c5
c000d8c3:	e8 66 27 00 00       	call   c001002e <KePanic(char const*)>
c000d8c8:	83 c4 10             	add    esp,0x10
c000d8cb:	31 ff                	xor    edi,edi
c000d8cd:	50                   	push   eax
c000d8ce:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000d8d2:	53                   	push   ebx
c000d8d3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d8da:	56                   	push   esi
c000d8db:	e8 04 fc ff ff       	call   c000d4e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d8e0:	83 c4 10             	add    esp,0x10
c000d8e3:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c000d8e7:	89 d0                	mov    eax,edx
c000d8e9:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c000d8ed:	c1 e0 08             	shl    eax,0x8
c000d8f0:	09 c2                	or     edx,eax
c000d8f2:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000d8f6:	c1 e2 08             	shl    edx,0x8
c000d8f9:	09 c2                	or     edx,eax
c000d8fb:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000d8ff:	7e 76                	jle    c000d977 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c000d901:	85 d2                	test   edx,edx
c000d903:	75 25                	jne    c000d92a <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000d905:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000d90a:	8d 44 24 45          	lea    eax,[esp+0x45]
c000d90e:	50                   	push   eax
c000d90f:	6a 00                	push   0x0
c000d911:	6a 00                	push   0x0
c000d913:	56                   	push   esi
c000d914:	e8 75 fe ff ff       	call   c000d78e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d919:	83 c4 10             	add    esp,0x10
c000d91c:	89 c2                	mov    edx,eax
c000d91e:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000d921:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000d924:	c1 f8 10             	sar    eax,0x10
c000d927:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000d92a:	55                   	push   ebp
c000d92b:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c000d92f:	55                   	push   ebp
c000d930:	52                   	push   edx
c000d931:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d935:	56                   	push   esi
c000d936:	e8 a9 fb ff ff       	call   c000d4e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d93b:	83 c4 0c             	add    esp,0xc
c000d93e:	6a 27                	push   0x27
c000d940:	6a 00                	push   0x0
c000d942:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d946:	51                   	push   ecx
c000d947:	e8 a4 2b ff ff       	call   c00004f0 <memset>
c000d94c:	83 c4 0c             	add    esp,0xc
c000d94f:	6b c7 27             	imul   eax,edi,0x27
c000d952:	6a 27                	push   0x27
c000d954:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000d95b:	50                   	push   eax
c000d95c:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d960:	51                   	push   ecx
c000d961:	e8 1a 2d ff ff       	call   c0000680 <strncpy>
c000d966:	83 c4 0c             	add    esp,0xc
c000d969:	55                   	push   ebp
c000d96a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d96e:	52                   	push   edx
c000d96f:	56                   	push   esi
c000d970:	e8 93 fc ff ff       	call   c000d608 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d975:	eb 19                	jmp    c000d990 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c000d977:	85 d2                	test   edx,edx
c000d979:	74 18                	je     c000d993 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c000d97b:	51                   	push   ecx
c000d97c:	51                   	push   ecx
c000d97d:	52                   	push   edx
c000d97e:	56                   	push   esi
c000d97f:	e8 c0 fc ff ff       	call   c000d644 <CmFreeExtent(Reghive_Tag*, int)>
c000d984:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000d988:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000d98c:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000d990:	83 c4 10             	add    esp,0x10
c000d993:	47                   	inc    edi
c000d994:	83 c3 03             	add    ebx,0x3
c000d997:	83 ff 07             	cmp    edi,0x7
c000d99a:	0f 85 43 ff ff ff    	jne    c000d8e3 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000d9a0:	50                   	push   eax
c000d9a1:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000d9a5:	50                   	push   eax
c000d9a6:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d9ad:	56                   	push   esi
c000d9ae:	e8 55 fc ff ff       	call   c000d608 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d9b3:	81 c4 8c 00 00 00    	add    esp,0x8c
c000d9b9:	5b                   	pop    ebx
c000d9ba:	5e                   	pop    esi
c000d9bb:	5f                   	pop    edi
c000d9bc:	5d                   	pop    ebp
c000d9bd:	c3                   	ret    

c000d9be <CmGetMatch(char*, char*, bool, bool*)>:
c000d9be:	56                   	push   esi
c000d9bf:	53                   	push   ebx
c000d9c0:	50                   	push   eax
c000d9c1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d9c5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d9ca:	74 25                	je     c000d9f1 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000d9cc:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d9cf:	31 db                	xor    ebx,ebx
c000d9d1:	50                   	push   eax
c000d9d2:	50                   	push   eax
c000d9d3:	8d 04 9d e0 68 02 c0 	lea    eax,[ebx*4-0x3ffd9720]
c000d9da:	50                   	push   eax
c000d9db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9df:	e8 6c 2d ff ff       	call   c0000750 <strcmp>
c000d9e4:	83 c4 10             	add    esp,0x10
c000d9e7:	85 c0                	test   eax,eax
c000d9e9:	74 2e                	je     c000da19 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d9eb:	43                   	inc    ebx
c000d9ec:	83 fb 3f             	cmp    ebx,0x3f
c000d9ef:	75 e0                	jne    c000d9d1 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000d9f1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d9f4:	31 db                	xor    ebx,ebx
c000d9f6:	8d 04 9d e0 68 02 c0 	lea    eax,[ebx*4-0x3ffd9720]
c000d9fd:	51                   	push   ecx
c000d9fe:	51                   	push   ecx
c000d9ff:	50                   	push   eax
c000da00:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000da04:	e8 47 2d ff ff       	call   c0000750 <strcmp>
c000da09:	83 c4 10             	add    esp,0x10
c000da0c:	85 c0                	test   eax,eax
c000da0e:	74 09                	je     c000da19 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000da10:	43                   	inc    ebx
c000da11:	83 fb 3f             	cmp    ebx,0x3f
c000da14:	75 e0                	jne    c000d9f6 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000da16:	83 cb ff             	or     ebx,0xffffffff
c000da19:	89 d8                	mov    eax,ebx
c000da1b:	5a                   	pop    edx
c000da1c:	5b                   	pop    ebx
c000da1d:	5e                   	pop    esi
c000da1e:	c3                   	ret    

c000da1f <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000da1f:	55                   	push   ebp
c000da20:	31 c0                	xor    eax,eax
c000da22:	57                   	push   edi
c000da23:	56                   	push   esi
c000da24:	53                   	push   ebx
c000da25:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000da29:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000da2d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000da2f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000da33:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000da36:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da3a:	83 fd 1f             	cmp    ebp,0x1f
c000da3d:	7f 0b                	jg     c000da4a <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000da3f:	0f b6 c2             	movzx  eax,dl
c000da42:	d3 e0                	shl    eax,cl
c000da44:	09 07                	or     DWORD PTR [edi],eax
c000da46:	b0 01                	mov    al,0x1
c000da48:	01 33                	add    DWORD PTR [ebx],esi
c000da4a:	5b                   	pop    ebx
c000da4b:	5e                   	pop    esi
c000da4c:	5f                   	pop    edi
c000da4d:	5d                   	pop    ebp
c000da4e:	c3                   	ret    

c000da4f <CmGetShift(unsigned int*, int*, int, bool*)>:
c000da4f:	57                   	push   edi
c000da50:	56                   	push   esi
c000da51:	53                   	push   ebx
c000da52:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000da56:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000da5a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da5e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000da62:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000da64:	7c 17                	jl     c000da7d <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000da66:	8b 17                	mov    edx,DWORD PTR [edi]
c000da68:	b8 01 00 00 00       	mov    eax,0x1
c000da6d:	d3 e0                	shl    eax,cl
c000da6f:	48                   	dec    eax
c000da70:	21 d0                	and    eax,edx
c000da72:	d3 ea                	shr    edx,cl
c000da74:	89 17                	mov    DWORD PTR [edi],edx
c000da76:	29 0b                	sub    DWORD PTR [ebx],ecx
c000da78:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000da7b:	eb 05                	jmp    c000da82 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000da7d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000da80:	31 c0                	xor    eax,eax
c000da82:	5b                   	pop    ebx
c000da83:	5e                   	pop    esi
c000da84:	5f                   	pop    edi
c000da85:	c3                   	ret    

c000da86 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000da86:	83 ec 40             	sub    esp,0x40
c000da89:	8d 44 24 09          	lea    eax,[esp+0x9]
c000da8d:	50                   	push   eax
c000da8e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000da92:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000da96:	e8 49 fa ff ff       	call   c000d4e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000da9b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000da9f:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000daa3:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000daa7:	89 10                	mov    DWORD PTR [eax],edx
c000daa9:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000daac:	83 c4 4c             	add    esp,0x4c
c000daaf:	c3                   	ret    

c000dab0 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000dab0:	55                   	push   ebp
c000dab1:	57                   	push   edi
c000dab2:	56                   	push   esi
c000dab3:	53                   	push   ebx
c000dab4:	83 ec 40             	sub    esp,0x40
c000dab7:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000dabb:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000dabf:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000dac3:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000dac7:	53                   	push   ebx
c000dac8:	56                   	push   esi
c000dac9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dacd:	e8 12 fa ff ff       	call   c000d4e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dad2:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000dad6:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000dada:	83 c4 0c             	add    esp,0xc
c000dadd:	53                   	push   ebx
c000dade:	56                   	push   esi
c000dadf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dae3:	e8 20 fb ff ff       	call   c000d608 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000dae8:	83 c4 4c             	add    esp,0x4c
c000daeb:	5b                   	pop    ebx
c000daec:	5e                   	pop    esi
c000daed:	5f                   	pop    edi
c000daee:	5d                   	pop    ebp
c000daef:	c3                   	ret    

c000daf0 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000daf0:	55                   	push   ebp
c000daf1:	57                   	push   edi
c000daf2:	56                   	push   esi
c000daf3:	31 f6                	xor    esi,esi
c000daf5:	53                   	push   ebx
c000daf6:	31 db                	xor    ebx,ebx
c000daf8:	83 ec 40             	sub    esp,0x40
c000dafb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000db03:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000db0b:	6a 12                	push   0x12
c000db0d:	68 ee 00 00 00       	push   0xee
c000db12:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000db16:	e8 d5 29 ff ff       	call   c00004f0 <memset>
c000db1b:	83 c4 10             	add    esp,0x10
c000db1e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000db22:	6a 08                	push   0x8
c000db24:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000db28:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000db2c:	50                   	push   eax
c000db2d:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000db31:	55                   	push   ebp
c000db32:	57                   	push   edi
c000db33:	e8 e7 fe ff ff       	call   c000da1f <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000db38:	83 c4 10             	add    esp,0x10
c000db3b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000db3f:	50                   	push   eax
c000db40:	6a 06                	push   0x6
c000db42:	55                   	push   ebp
c000db43:	57                   	push   edi
c000db44:	e8 06 ff ff ff       	call   c000da4f <CmGetShift(unsigned int*, int*, int, bool*)>
c000db49:	83 c4 10             	add    esp,0x10
c000db4c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000db51:	74 07                	je     c000db5a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000db53:	46                   	inc    esi
c000db54:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000db58:	eb e1                	jmp    c000db3b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000db5a:	43                   	inc    ebx
c000db5b:	83 fb 12             	cmp    ebx,0x12
c000db5e:	75 c2                	jne    c000db22 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000db60:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000db64:	31 db                	xor    ebx,ebx
c000db66:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000db69:	50                   	push   eax
c000db6a:	50                   	push   eax
c000db6b:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c000db70:	43                   	inc    ebx
c000db71:	8d 04 85 e0 68 02 c0 	lea    eax,[eax*4-0x3ffd9720]
c000db78:	50                   	push   eax
c000db79:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000db7d:	e8 be 2c ff ff       	call   c0000840 <strcat>
c000db82:	83 c4 10             	add    esp,0x10
c000db85:	83 fb 18             	cmp    ebx,0x18
c000db88:	75 df                	jne    c000db69 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000db8a:	83 c4 3c             	add    esp,0x3c
c000db8d:	31 c0                	xor    eax,eax
c000db8f:	5b                   	pop    ebx
c000db90:	5e                   	pop    esi
c000db91:	5f                   	pop    edi
c000db92:	5d                   	pop    ebp
c000db93:	c3                   	ret    

c000db94 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000db94:	83 ec 40             	sub    esp,0x40
c000db97:	8d 44 24 09          	lea    eax,[esp+0x9]
c000db9b:	50                   	push   eax
c000db9c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dba0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dba4:	e8 3b f9 ff ff       	call   c000d4e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dba9:	58                   	pop    eax
c000dbaa:	5a                   	pop    edx
c000dbab:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000dbaf:	8d 44 24 15          	lea    eax,[esp+0x15]
c000dbb3:	50                   	push   eax
c000dbb4:	e8 37 ff ff ff       	call   c000daf0 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000dbb9:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000dbbe:	83 c4 4c             	add    esp,0x4c
c000dbc1:	c3                   	ret    

c000dbc2 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000dbc2:	55                   	push   ebp
c000dbc3:	57                   	push   edi
c000dbc4:	56                   	push   esi
c000dbc5:	53                   	push   ebx
c000dbc6:	31 db                	xor    ebx,ebx
c000dbc8:	83 ec 70             	sub    esp,0x70
c000dbcb:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000dbd2:	6a 30                	push   0x30
c000dbd4:	6a 00                	push   0x0
c000dbd6:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000dbda:	56                   	push   esi
c000dbdb:	e8 10 29 ff ff       	call   c00004f0 <memset>
c000dbe0:	83 c4 10             	add    esp,0x10
c000dbe3:	83 ec 0c             	sub    esp,0xc
c000dbe6:	57                   	push   edi
c000dbe7:	e8 84 29 ff ff       	call   c0000570 <strlen>
c000dbec:	83 c4 10             	add    esp,0x10
c000dbef:	39 d8                	cmp    eax,ebx
c000dbf1:	76 16                	jbe    c000dc09 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000dbf3:	83 ec 0c             	sub    esp,0xc
c000dbf6:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000dbfa:	50                   	push   eax
c000dbfb:	e8 30 2d ff ff       	call   c0000930 <toupper>
c000dc00:	83 c4 10             	add    esp,0x10
c000dc03:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000dc06:	43                   	inc    ebx
c000dc07:	eb da                	jmp    c000dbe3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000dc09:	31 f6                	xor    esi,esi
c000dc0b:	52                   	push   edx
c000dc0c:	31 ff                	xor    edi,edi
c000dc0e:	6a 18                	push   0x18
c000dc10:	6a 3f                	push   0x3f
c000dc12:	8d 44 24 24          	lea    eax,[esp+0x24]
c000dc16:	50                   	push   eax
c000dc17:	e8 d4 28 ff ff       	call   c00004f0 <memset>
c000dc1c:	83 c4 10             	add    esp,0x10
c000dc1f:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c000dc23:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c000dc27:	84 c0                	test   al,al
c000dc29:	0f 84 b0 00 00 00    	je     c000dcdf <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000dc2f:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000dc33:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000dc38:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000dc3c:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c000dc41:	8d 6e 01             	lea    ebp,[esi+0x1]
c000dc44:	83 ec 0c             	sub    esp,0xc
c000dc47:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000dc4b:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000dc4f:	53                   	push   ebx
c000dc50:	e8 1b 29 ff ff       	call   c0000570 <strlen>
c000dc55:	83 c4 10             	add    esp,0x10
c000dc58:	85 c0                	test   eax,eax
c000dc5a:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dc5e:	74 0b                	je     c000dc6b <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000dc60:	50                   	push   eax
c000dc61:	6a 01                	push   0x1
c000dc63:	53                   	push   ebx
c000dc64:	8d 44 24 20          	lea    eax,[esp+0x20]
c000dc68:	50                   	push   eax
c000dc69:	eb 0a                	jmp    c000dc75 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000dc6b:	50                   	push   eax
c000dc6c:	6a 00                	push   0x0
c000dc6e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000dc72:	50                   	push   eax
c000dc73:	6a 00                	push   0x0
c000dc75:	e8 44 fd ff ff       	call   c000d9be <CmGetMatch(char*, char*, bool, bool*)>
c000dc7a:	83 c4 10             	add    esp,0x10
c000dc7d:	83 f8 ff             	cmp    eax,0xffffffff
c000dc80:	75 1a                	jne    c000dc9c <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000dc82:	83 ec 0c             	sub    esp,0xc
c000dc85:	68 da 40 02 c0       	push   0xc00240da
c000dc8a:	e8 9f 23 00 00       	call   c001002e <KePanic(char const*)>
c000dc8f:	83 c4 10             	add    esp,0x10
c000dc92:	b8 02 00 00 00       	mov    eax,0x2
c000dc97:	e9 bc 00 00 00       	jmp    c000dd58 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dc9c:	83 ff 18             	cmp    edi,0x18
c000dc9f:	75 1a                	jne    c000dcbb <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000dca1:	83 ec 0c             	sub    esp,0xc
c000dca4:	68 ef 40 02 c0       	push   0xc00240ef
c000dca9:	e8 80 23 00 00       	call   c001002e <KePanic(char const*)>
c000dcae:	83 c4 10             	add    esp,0x10
c000dcb1:	b8 01 00 00 00       	mov    eax,0x1
c000dcb6:	e9 9d 00 00 00       	jmp    c000dd58 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dcbb:	47                   	inc    edi
c000dcbc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dcc1:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000dcc5:	74 02                	je     c000dcc9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c000dcc7:	89 ee                	mov    esi,ebp
c000dcc9:	83 ec 0c             	sub    esp,0xc
c000dccc:	53                   	push   ebx
c000dccd:	e8 9e 28 ff ff       	call   c0000570 <strlen>
c000dcd2:	83 c4 10             	add    esp,0x10
c000dcd5:	85 c0                	test   eax,eax
c000dcd7:	74 06                	je     c000dcdf <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000dcd9:	46                   	inc    esi
c000dcda:	e9 40 ff ff ff       	jmp    c000dc1f <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000dcdf:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000dce7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dcef:	31 f6                	xor    esi,esi
c000dcf1:	50                   	push   eax
c000dcf2:	31 ff                	xor    edi,edi
c000dcf4:	6a 12                	push   0x12
c000dcf6:	68 ee 00 00 00       	push   0xee
c000dcfb:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000dd02:	e8 e9 27 ff ff       	call   c00004f0 <memset>
c000dd07:	83 c4 10             	add    esp,0x10
c000dd0a:	83 fe 17             	cmp    esi,0x17
c000dd0d:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000dd11:	7e 26                	jle    c000dd39 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c000dd13:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dd17:	50                   	push   eax
c000dd18:	6a 08                	push   0x8
c000dd1a:	55                   	push   ebp
c000dd1b:	53                   	push   ebx
c000dd1c:	e8 2e fd ff ff       	call   c000da4f <CmGetShift(unsigned int*, int*, int, bool*)>
c000dd21:	83 c4 10             	add    esp,0x10
c000dd24:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dd29:	74 26                	je     c000dd51 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c000dd2b:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000dd32:	4e                   	dec    esi
c000dd33:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000dd36:	47                   	inc    edi
c000dd37:	eb 1c                	jmp    c000dd55 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000dd39:	6a 06                	push   0x6
c000dd3b:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c000dd40:	50                   	push   eax
c000dd41:	55                   	push   ebp
c000dd42:	53                   	push   ebx
c000dd43:	e8 d7 fc ff ff       	call   c000da1f <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000dd48:	83 c4 10             	add    esp,0x10
c000dd4b:	84 c0                	test   al,al
c000dd4d:	75 06                	jne    c000dd55 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000dd4f:	eb c2                	jmp    c000dd13 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c000dd51:	31 c0                	xor    eax,eax
c000dd53:	eb 03                	jmp    c000dd58 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dd55:	46                   	inc    esi
c000dd56:	eb b2                	jmp    c000dd0a <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c000dd58:	83 c4 6c             	add    esp,0x6c
c000dd5b:	5b                   	pop    ebx
c000dd5c:	5e                   	pop    esi
c000dd5d:	5f                   	pop    edi
c000dd5e:	5d                   	pop    ebp
c000dd5f:	c3                   	ret    

c000dd60 <CmCreateString(Reghive_Tag*, int, char const*)>:
c000dd60:	53                   	push   ebx
c000dd61:	83 ec 3c             	sub    esp,0x3c
c000dd64:	6a 2b                	push   0x2b
c000dd66:	6a 00                	push   0x0
c000dd68:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000dd6c:	53                   	push   ebx
c000dd6d:	e8 7e 27 ff ff       	call   c00004f0 <memset>
c000dd72:	58                   	pop    eax
c000dd73:	5a                   	pop    edx
c000dd74:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dd78:	50                   	push   eax
c000dd79:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dd7d:	e8 40 fe ff ff       	call   c000dbc2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dd82:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000dd87:	83 c4 0c             	add    esp,0xc
c000dd8a:	6a 15                	push   0x15
c000dd8c:	6a 00                	push   0x0
c000dd8e:	8d 44 24 27          	lea    eax,[esp+0x27]
c000dd92:	50                   	push   eax
c000dd93:	e8 58 27 ff ff       	call   c00004f0 <memset>
c000dd98:	53                   	push   ebx
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd9f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dda3:	e8 e6 f9 ff ff       	call   c000d78e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dda8:	83 c4 58             	add    esp,0x58
c000ddab:	5b                   	pop    ebx
c000ddac:	c3                   	ret    

c000ddad <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000ddad:	56                   	push   esi
c000ddae:	53                   	push   ebx
c000ddaf:	83 ec 48             	sub    esp,0x48
c000ddb2:	6a 12                	push   0x12
c000ddb4:	68 ff 00 00 00       	push   0xff
c000ddb9:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000ddbd:	56                   	push   esi
c000ddbe:	e8 2d 27 ff ff       	call   c00004f0 <memset>
c000ddc3:	5a                   	pop    edx
c000ddc4:	59                   	pop    ecx
c000ddc5:	56                   	push   esi
c000ddc6:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ddca:	e8 f3 fd ff ff       	call   c000dbc2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000ddcf:	83 c4 10             	add    esp,0x10
c000ddd2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000ddd6:	85 db                	test   ebx,ebx
c000ddd8:	74 42                	je     c000de1c <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000ddda:	50                   	push   eax
c000dddb:	8d 44 24 19          	lea    eax,[esp+0x19]
c000dddf:	50                   	push   eax
c000dde0:	53                   	push   ebx
c000dde1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dde5:	e8 fa f6 ff ff       	call   c000d4e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ddea:	83 c4 0c             	add    esp,0xc
c000dded:	6a 12                	push   0x12
c000ddef:	8d 44 24 21          	lea    eax,[esp+0x21]
c000ddf3:	50                   	push   eax
c000ddf4:	56                   	push   esi
c000ddf5:	e8 86 25 ff ff       	call   c0000380 <memcmp>
c000ddfa:	83 c4 10             	add    esp,0x10
c000ddfd:	85 c0                	test   eax,eax
c000ddff:	74 1e                	je     c000de1f <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000de01:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000de06:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000de0b:	c1 e3 08             	shl    ebx,0x8
c000de0e:	09 d8                	or     eax,ebx
c000de10:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000de15:	c1 e3 10             	shl    ebx,0x10
c000de18:	09 c3                	or     ebx,eax
c000de1a:	eb ba                	jmp    c000ddd6 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000de1c:	83 cb ff             	or     ebx,0xffffffff
c000de1f:	89 d8                	mov    eax,ebx
c000de21:	83 c4 44             	add    esp,0x44
c000de24:	5b                   	pop    ebx
c000de25:	5e                   	pop    esi
c000de26:	c3                   	ret    

c000de27 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000de27:	57                   	push   edi
c000de28:	56                   	push   esi
c000de29:	53                   	push   ebx
c000de2a:	83 ec 34             	sub    esp,0x34
c000de2d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000de31:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000de35:	6a 2b                	push   0x2b
c000de37:	6a 00                	push   0x0
c000de39:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000de3d:	53                   	push   ebx
c000de3e:	e8 ad 26 ff ff       	call   c00004f0 <memset>
c000de43:	58                   	pop    eax
c000de44:	5a                   	pop    edx
c000de45:	8d 44 24 11          	lea    eax,[esp+0x11]
c000de49:	50                   	push   eax
c000de4a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000de4e:	e8 6f fd ff ff       	call   c000dbc2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000de53:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000de57:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000de5b:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000de5f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000de63:	53                   	push   ebx
c000de64:	6a 00                	push   0x0
c000de66:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000de6a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000de6e:	e8 1b f9 ff ff       	call   c000d78e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000de73:	83 c4 50             	add    esp,0x50
c000de76:	5b                   	pop    ebx
c000de77:	5e                   	pop    esi
c000de78:	5f                   	pop    edi
c000de79:	c3                   	ret    

c000de7a <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000de7a:	55                   	push   ebp
c000de7b:	57                   	push   edi
c000de7c:	56                   	push   esi
c000de7d:	53                   	push   ebx
c000de7e:	83 ec 40             	sub    esp,0x40
c000de81:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000de85:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000de89:	6a 2b                	push   0x2b
c000de8b:	6a 00                	push   0x0
c000de8d:	8d 74 24 11          	lea    esi,[esp+0x11]
c000de91:	56                   	push   esi
c000de92:	e8 59 26 ff ff       	call   c00004f0 <memset>
c000de97:	5f                   	pop    edi
c000de98:	89 ef                	mov    edi,ebp
c000de9a:	58                   	pop    eax
c000de9b:	8d 44 24 11          	lea    eax,[esp+0x11]
c000de9f:	50                   	push   eax
c000dea0:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000dea4:	e8 19 fd ff ff       	call   c000dbc2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dea9:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000deae:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000deb3:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000deb8:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000debd:	83 c4 10             	add    esp,0x10
c000dec0:	85 ed                	test   ebp,ebp
c000dec2:	74 14                	je     c000ded8 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000dec4:	51                   	push   ecx
c000dec5:	51                   	push   ecx
c000dec6:	57                   	push   edi
c000dec7:	53                   	push   ebx
c000dec8:	e8 09 f7 ff ff       	call   c000d5d6 <CmGetNext(Reghive_Tag*, int)>
c000decd:	83 c4 10             	add    esp,0x10
c000ded0:	85 c0                	test   eax,eax
c000ded2:	74 04                	je     c000ded8 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000ded4:	89 c7                	mov    edi,eax
c000ded6:	eb e8                	jmp    c000dec0 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000ded8:	56                   	push   esi
c000ded9:	6a 00                	push   0x0
c000dedb:	57                   	push   edi
c000dedc:	53                   	push   ebx
c000dedd:	e8 ac f8 ff ff       	call   c000d78e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dee2:	83 c4 0c             	add    esp,0xc
c000dee5:	89 c7                	mov    edi,eax
c000dee7:	56                   	push   esi
c000dee8:	50                   	push   eax
c000dee9:	53                   	push   ebx
c000deea:	e8 f5 f5 ff ff       	call   c000d4e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000deef:	58                   	pop    eax
c000def0:	5a                   	pop    edx
c000def1:	6a 6c                	push   0x6c
c000def3:	6a 00                	push   0x0
c000def5:	6a 00                	push   0x0
c000def7:	68 00 41 02 c0       	push   0xc0024100
c000defc:	57                   	push   edi
c000defd:	53                   	push   ebx
c000defe:	e8 24 ff ff ff       	call   c000de27 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000df03:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000df07:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000df0b:	c1 e8 10             	shr    eax,0x10
c000df0e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000df12:	83 c4 1c             	add    esp,0x1c
c000df15:	56                   	push   esi
c000df16:	57                   	push   edi
c000df17:	53                   	push   ebx
c000df18:	e8 eb f6 ff ff       	call   c000d608 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000df1d:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000df22:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000df27:	c1 e0 08             	shl    eax,0x8
c000df2a:	09 c2                	or     edx,eax
c000df2c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000df31:	83 c4 4c             	add    esp,0x4c
c000df34:	c1 e0 10             	shl    eax,0x10
c000df37:	5b                   	pop    ebx
c000df38:	09 d0                	or     eax,edx
c000df3a:	5e                   	pop    esi
c000df3b:	5f                   	pop    edi
c000df3c:	5d                   	pop    ebp
c000df3d:	c3                   	ret    

c000df3e <zStrtok(char*, char const*)>:
c000df3e:	55                   	push   ebp
c000df3f:	57                   	push   edi
c000df40:	56                   	push   esi
c000df41:	53                   	push   ebx
c000df42:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000df46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000df4a:	85 db                	test   ebx,ebx
c000df4c:	74 2f                	je     c000df7d <zStrtok(char*, char const*)+0x3f>
c000df4e:	85 c0                	test   eax,eax
c000df50:	75 09                	jne    c000df5b <zStrtok(char*, char const*)+0x1d>
c000df52:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000df57:	85 c0                	test   eax,eax
c000df59:	74 50                	je     c000dfab <zStrtok(char*, char const*)+0x6d>
c000df5b:	31 c9                	xor    ecx,ecx
c000df5d:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000df61:	74 03                	je     c000df66 <zStrtok(char*, char const*)+0x28>
c000df63:	41                   	inc    ecx
c000df64:	eb f7                	jmp    c000df5d <zStrtok(char*, char const*)+0x1f>
c000df66:	31 d2                	xor    edx,edx
c000df68:	39 ca                	cmp    edx,ecx
c000df6a:	74 15                	je     c000df81 <zStrtok(char*, char const*)+0x43>
c000df6c:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000df70:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000df73:	8d 3c 10             	lea    edi,[eax+edx*1]
c000df76:	39 ee                	cmp    esi,ebp
c000df78:	74 13                	je     c000df8d <zStrtok(char*, char const*)+0x4f>
c000df7a:	42                   	inc    edx
c000df7b:	eb eb                	jmp    c000df68 <zStrtok(char*, char const*)+0x2a>
c000df7d:	31 c0                	xor    eax,eax
c000df7f:	eb 2a                	jmp    c000dfab <zStrtok(char*, char const*)+0x6d>
c000df81:	c7 05 c0 d0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d0c0,0x0
c000df8b:	eb 1e                	jmp    c000dfab <zStrtok(char*, char const*)+0x6d>
c000df8d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000df90:	39 ce                	cmp    esi,ecx
c000df92:	75 0a                	jne    c000df9e <zStrtok(char*, char const*)+0x60>
c000df94:	40                   	inc    eax
c000df95:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c000df9a:	89 d8                	mov    eax,ebx
c000df9c:	eb 0d                	jmp    c000dfab <zStrtok(char*, char const*)+0x6d>
c000df9e:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000dfa2:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000dfa5:	89 15 c0 d0 02 c0    	mov    DWORD PTR ds:0xc002d0c0,edx
c000dfab:	5b                   	pop    ebx
c000dfac:	5e                   	pop    esi
c000dfad:	5f                   	pop    edi
c000dfae:	5d                   	pop    ebp
c000dfaf:	c3                   	ret    

c000dfb0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000dfb0:	57                   	push   edi
c000dfb1:	56                   	push   esi
c000dfb2:	53                   	push   ebx
c000dfb3:	81 ec 08 01 00 00    	sub    esp,0x108
c000dfb9:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000dfc0:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000dfc7:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000dfcb:	53                   	push   ebx
c000dfcc:	e8 6f 26 ff ff       	call   c0000640 <strcpy>
c000dfd1:	59                   	pop    ecx
c000dfd2:	5e                   	pop    esi
c000dfd3:	68 31 54 02 c0       	push   0xc0025431
c000dfd8:	53                   	push   ebx
c000dfd9:	bb 01 00 00 00       	mov    ebx,0x1
c000dfde:	e8 5b ff ff ff       	call   c000df3e <zStrtok(char*, char const*)>
c000dfe3:	83 c4 10             	add    esp,0x10
c000dfe6:	85 c0                	test   eax,eax
c000dfe8:	74 3b                	je     c000e025 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000dfea:	52                   	push   edx
c000dfeb:	50                   	push   eax
c000dfec:	6a 01                	push   0x1
c000dfee:	57                   	push   edi
c000dfef:	e8 b9 fd ff ff       	call   c000ddad <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000dff4:	59                   	pop    ecx
c000dff5:	89 c3                	mov    ebx,eax
c000dff7:	5e                   	pop    esi
c000dff8:	68 31 54 02 c0       	push   0xc0025431
c000dffd:	6a 00                	push   0x0
c000dfff:	e8 3a ff ff ff       	call   c000df3e <zStrtok(char*, char const*)>
c000e004:	83 c4 10             	add    esp,0x10
c000e007:	89 c6                	mov    esi,eax
c000e009:	85 c0                	test   eax,eax
c000e00b:	74 18                	je     c000e025 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e00d:	52                   	push   edx
c000e00e:	52                   	push   edx
c000e00f:	53                   	push   ebx
c000e010:	57                   	push   edi
c000e011:	e8 81 f5 ff ff       	call   c000d597 <CmEnterDirectory(Reghive_Tag*, int)>
c000e016:	83 c4 10             	add    esp,0x10
c000e019:	89 c3                	mov    ebx,eax
c000e01b:	83 f8 ff             	cmp    eax,0xffffffff
c000e01e:	74 05                	je     c000e025 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e020:	50                   	push   eax
c000e021:	56                   	push   esi
c000e022:	53                   	push   ebx
c000e023:	eb c9                	jmp    c000dfee <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000e025:	81 c4 00 01 00 00    	add    esp,0x100
c000e02b:	89 d8                	mov    eax,ebx
c000e02d:	5b                   	pop    ebx
c000e02e:	5e                   	pop    esi
c000e02f:	5f                   	pop    edi
c000e030:	c3                   	ret    

c000e031 <CmDisplayTree(Reghive_Tag*, int, int)>:
c000e031:	55                   	push   ebp
c000e032:	57                   	push   edi
c000e033:	56                   	push   esi
c000e034:	53                   	push   ebx
c000e035:	83 ec 5c             	sub    esp,0x5c
c000e038:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000e03c:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000e040:	85 db                	test   ebx,ebx
c000e042:	0f 8e 84 00 00 00    	jle    c000e0cc <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000e048:	31 ed                	xor    ebp,ebp
c000e04a:	57                   	push   edi
c000e04b:	6a 32                	push   0x32
c000e04d:	6a 00                	push   0x0
c000e04f:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000e053:	57                   	push   edi
c000e054:	e8 97 24 ff ff       	call   c00004f0 <memset>
c000e059:	83 c4 0c             	add    esp,0xc
c000e05c:	57                   	push   edi
c000e05d:	53                   	push   ebx
c000e05e:	56                   	push   esi
c000e05f:	e8 30 fb ff ff       	call   c000db94 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000e064:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e068:	83 c4 10             	add    esp,0x10
c000e06b:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000e06f:	7d 13                	jge    c000e084 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000e071:	83 ec 0c             	sub    esp,0xc
c000e074:	45                   	inc    ebp
c000e075:	68 6f 5c 02 c0       	push   0xc0025c6f
c000e07a:	e8 e5 8e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000e07f:	83 c4 10             	add    esp,0x10
c000e082:	eb e7                	jmp    c000e06b <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000e084:	51                   	push   ecx
c000e085:	57                   	push   edi
c000e086:	53                   	push   ebx
c000e087:	68 06 41 02 c0       	push   0xc0024106
c000e08c:	e8 d3 8e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000e091:	83 c4 10             	add    esp,0x10
c000e094:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000e099:	75 1e                	jne    c000e0b9 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000e09b:	52                   	push   edx
c000e09c:	52                   	push   edx
c000e09d:	53                   	push   ebx
c000e09e:	56                   	push   esi
c000e09f:	e8 f3 f4 ff ff       	call   c000d597 <CmEnterDirectory(Reghive_Tag*, int)>
c000e0a4:	83 c4 0c             	add    esp,0xc
c000e0a7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000e0ab:	8d 51 04             	lea    edx,[ecx+0x4]
c000e0ae:	52                   	push   edx
c000e0af:	50                   	push   eax
c000e0b0:	56                   	push   esi
c000e0b1:	e8 7b ff ff ff       	call   c000e031 <CmDisplayTree(Reghive_Tag*, int, int)>
c000e0b6:	83 c4 10             	add    esp,0x10
c000e0b9:	50                   	push   eax
c000e0ba:	50                   	push   eax
c000e0bb:	53                   	push   ebx
c000e0bc:	56                   	push   esi
c000e0bd:	e8 14 f5 ff ff       	call   c000d5d6 <CmGetNext(Reghive_Tag*, int)>
c000e0c2:	83 c4 10             	add    esp,0x10
c000e0c5:	89 c3                	mov    ebx,eax
c000e0c7:	e9 74 ff ff ff       	jmp    c000e040 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000e0cc:	83 c4 5c             	add    esp,0x5c
c000e0cf:	5b                   	pop    ebx
c000e0d0:	5e                   	pop    esi
c000e0d1:	5f                   	pop    edi
c000e0d2:	5d                   	pop    ebp
c000e0d3:	c3                   	ret    

c000e0d4 <CmSplitFinalSlashInPlace(char*)>:
c000e0d4:	53                   	push   ebx
c000e0d5:	83 ec 14             	sub    esp,0x14
c000e0d8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e0dc:	53                   	push   ebx
c000e0dd:	e8 8e 24 ff ff       	call   c0000570 <strlen>
c000e0e2:	83 c4 10             	add    esp,0x10
c000e0e5:	48                   	dec    eax
c000e0e6:	85 c0                	test   eax,eax
c000e0e8:	74 15                	je     c000e0ff <CmSplitFinalSlashInPlace(char*)+0x2b>
c000e0ea:	8d 14 03             	lea    edx,[ebx+eax*1]
c000e0ed:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000e0f1:	75 09                	jne    c000e0fc <CmSplitFinalSlashInPlace(char*)+0x28>
c000e0f3:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000e0f6:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000e0fa:	eb 05                	jmp    c000e101 <CmSplitFinalSlashInPlace(char*)+0x2d>
c000e0fc:	48                   	dec    eax
c000e0fd:	eb e7                	jmp    c000e0e6 <CmSplitFinalSlashInPlace(char*)+0x12>
c000e0ff:	31 c0                	xor    eax,eax
c000e101:	83 c4 08             	add    esp,0x8
c000e104:	5b                   	pop    ebx
c000e105:	c3                   	ret    
c000e106:	66 90                	xchg   ax,ax

c000e108 <Krnl::handlePowerButton()>:
c000e108:	83 ec 0c             	sub    esp,0xc
c000e10b:	e8 5a 28 00 00       	call   c001096a <KeHandlePowerButton()>
c000e110:	90                   	nop
c000e111:	83 c4 0c             	add    esp,0xc
c000e114:	c3                   	ret    
c000e115:	8d 76 00             	lea    esi,[esi+0x0]

c000e118 <Krnl::handleSleepButton()>:
c000e118:	83 ec 0c             	sub    esp,0xc
c000e11b:	e8 62 28 00 00       	call   c0010982 <KeHandleSleepButton()>
c000e120:	90                   	nop
c000e121:	83 c4 0c             	add    esp,0xc
c000e124:	c3                   	ret    
c000e125:	90                   	nop

c000e126 <Computer::close(int, int, void*)>:
c000e126:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e12b:	c3                   	ret    

c000e12c <KeFirstTask()>:
c000e12c:	53                   	push   ebx
c000e12d:	83 ec 14             	sub    esp,0x14
c000e130:	fb                   	sti    
c000e131:	68 10 41 02 c0       	push   0xc0024110
c000e136:	e8 60 f1 ff ff       	call   c000d29b <KeSetBootMessage(char const*)>
c000e13b:	c7 04 24 c4 07 00 00 	mov    DWORD PTR [esp],0x7c4
c000e142:	e8 a0 1b 00 00       	call   c000fce7 <malloc>
c000e147:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e14e:	89 c3                	mov    ebx,eax
c000e150:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c000e155:	50                   	push   eax
c000e156:	68 29 41 02 c0       	push   0xc0024129
c000e15b:	6a 01                	push   0x1
c000e15d:	53                   	push   ebx
c000e15e:	e8 dd 8b 00 00       	call   c0016d40 <Process::Process(bool, char const*, Process*, char**)>
c000e163:	83 c4 20             	add    esp,0x20
c000e166:	68 ff 00 00 00       	push   0xff
c000e16b:	6a 00                	push   0x0
c000e16d:	68 25 ef 00 c0       	push   0xc000ef25
c000e172:	53                   	push   ebx
c000e173:	e8 08 8e 00 00       	call   c0016f80 <Process::createThread(void (*)(void*), void*, int)>
c000e178:	8b 15 58 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa58
c000e17e:	6a 7a                	push   0x7a
c000e180:	6a 00                	push   0x0
c000e182:	68 28 79 01 c0       	push   0xc0017928
c000e187:	52                   	push   edx
c000e188:	e8 f3 8d 00 00       	call   c0016f80 <Process::createThread(void (*)(void*), void*, int)>
c000e18d:	83 c4 14             	add    esp,0x14
c000e190:	a3 10 fa 02 c0       	mov    ds:0xc002fa10,eax
c000e195:	68 bc 41 02 c0       	push   0xc00241bc
c000e19a:	e8 fc f0 ff ff       	call   c000d29b <KeSetBootMessage(char const*)>
c000e19f:	c6 05 d5 d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0d5,0x1
c000e1a6:	e8 e3 28 00 00       	call   c0010a8e <KeInitRand()>
c000e1ab:	e8 5a 9b 00 00       	call   c0017d0a <Vm::initialise8086()>
c000e1b0:	e8 6f 9c ff ff       	call   c0007e24 <Fs::initVFS()>
c000e1b5:	c7 04 24 b1 3e 02 c0 	mov    DWORD PTR [esp],0xc0023eb1
c000e1bc:	e8 da f0 ff ff       	call   c000d29b <KeSetBootMessage(char const*)>
c000e1c1:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c000e1c6:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000e1cc:	8b 10                	mov    edx,DWORD PTR [eax]
c000e1ce:	6a 00                	push   0x0
c000e1d0:	6a 00                	push   0x0
c000e1d2:	6a 00                	push   0x0
c000e1d4:	50                   	push   eax
c000e1d5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e1d8:	83 c4 14             	add    esp,0x14
c000e1db:	68 bc 41 02 c0       	push   0xc00241bc
c000e1e0:	e8 b6 f0 ff ff       	call   c000d29b <KeSetBootMessage(char const*)>
c000e1e5:	e8 1f 94 ff ff       	call   c0007609 <KeInitialiseSymlinks()>
c000e1ea:	e8 df 06 00 00       	call   c000e8ce <KeLoadSystemEnv()>
c000e1ef:	e8 a6 27 00 00       	call   c001099a <KeSetupPowerManager()>
c000e1f4:	c7 04 24 e0 41 02 c0 	mov    DWORD PTR [esp],0xc00241e0
c000e1fb:	e8 9b f0 ff ff       	call   c000d29b <KeSetBootMessage(char const*)>
c000e200:	59                   	pop    ecx
c000e201:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c000e206:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000e20c:	53                   	push   ebx
c000e20d:	e8 3a b9 ff ff       	call   c0009b4c <Device::loadDriversForAll()>
c000e212:	c7 04 24 36 41 02 c0 	mov    DWORD PTR [esp],0xc0024136
c000e219:	e8 7d f0 ff ff       	call   c000d29b <KeSetBootMessage(char const*)>
c000e21e:	58                   	pop    eax
c000e21f:	8b 1d d0 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0d0
c000e225:	5a                   	pop    edx
c000e226:	6a 01                	push   0x1
c000e228:	68 47 41 02 c0       	push   0xc0024147
c000e22d:	e8 66 84 00 00       	call   c0016698 <Thr::loadDLL(char const*, bool)>
c000e232:	59                   	pop    ecx
c000e233:	5a                   	pop    edx
c000e234:	53                   	push   ebx
c000e235:	50                   	push   eax
c000e236:	e8 af 86 00 00       	call   c00168ea <Thr::executeDLL(unsigned long, void*)>
c000e23b:	83 c4 10             	add    esp,0x10
c000e23e:	83 ec 0c             	sub    esp,0xc
c000e241:	6a 02                	push   0x2
c000e243:	e8 b8 90 00 00       	call   c0017300 <blockTask(TaskState)>
c000e248:	83 c4 10             	add    esp,0x10
c000e24b:	eb f1                	jmp    c000e23e <KeFirstTask()+0x112>
c000e24d:	90                   	nop

c000e24e <Computer::Computer()>:
c000e24e:	83 ec 0c             	sub    esp,0xc
c000e251:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e255:	83 ec 08             	sub    esp,0x8
c000e258:	68 63 41 02 c0       	push   0xc0024163
c000e25d:	50                   	push   eax
c000e25e:	e8 2f b9 ff ff       	call   c0009b92 <Device::Device(char const*)>
c000e263:	83 c4 10             	add    esp,0x10
c000e266:	ba 7c 42 02 c0       	mov    edx,0xc002427c
c000e26b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e26f:	89 10                	mov    DWORD PTR [eax],edx
c000e271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e275:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e27f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e283:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e28d:	90                   	nop
c000e28e:	83 c4 0c             	add    esp,0xc
c000e291:	c3                   	ret    

c000e292 <KePrepareShutdown()>:
c000e292:	83 ec 0c             	sub    esp,0xc
c000e295:	e8 6f ef ff ff       	call   c000d209 <KeExecuteAtexit()>
c000e29a:	83 ec 0c             	sub    esp,0xc
c000e29d:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c000e2a2:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000e2a8:	50                   	push   eax
c000e2a9:	e8 ea b9 ff ff       	call   c0009c98 <Device::closeAll()>
c000e2ae:	83 c4 1c             	add    esp,0x1c
c000e2b1:	c3                   	ret    

c000e2b2 <KeShutdown()>:
c000e2b2:	83 ec 0c             	sub    esp,0xc
c000e2b5:	e8 d8 ff ff ff       	call   c000e292 <KePrepareShutdown()>
c000e2ba:	a1 cc d0 02 c0       	mov    eax,ds:0xc002d0cc
c000e2bf:	85 c0                	test   eax,eax
c000e2c1:	74 02                	je     c000e2c5 <KeShutdown()+0x13>
c000e2c3:	ff d0                	call   eax
c000e2c5:	83 ec 0c             	sub    esp,0xc
c000e2c8:	68 00 42 02 c0       	push   0xc0024200
c000e2cd:	e8 5c 1d 00 00       	call   c001002e <KePanic(char const*)>
c000e2d2:	83 c4 1c             	add    esp,0x1c
c000e2d5:	c3                   	ret    

c000e2d6 <KeSleep()>:
c000e2d6:	a1 c4 d0 02 c0       	mov    eax,ds:0xc002d0c4
c000e2db:	85 c0                	test   eax,eax
c000e2dd:	74 02                	je     c000e2e1 <KeSleep()+0xb>
c000e2df:	ff e0                	jmp    eax
c000e2e1:	c3                   	ret    

c000e2e2 <KeRestart()>:
c000e2e2:	83 ec 0c             	sub    esp,0xc
c000e2e5:	e8 a8 ff ff ff       	call   c000e292 <KePrepareShutdown()>
c000e2ea:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c000e2ef:	85 c0                	test   eax,eax
c000e2f1:	74 02                	je     c000e2f5 <KeRestart()+0x13>
c000e2f3:	ff d0                	call   eax
c000e2f5:	e4 64                	in     al,0x64
c000e2f7:	a8 02                	test   al,0x2
c000e2f9:	75 fa                	jne    c000e2f5 <KeRestart()+0x13>
c000e2fb:	b0 fe                	mov    al,0xfe
c000e2fd:	e6 64                	out    0x64,al
c000e2ff:	83 c4 0c             	add    esp,0xc
c000e302:	c3                   	ret    
c000e303:	90                   	nop

c000e304 <Computer::open(int, int, void*)>:
c000e304:	56                   	push   esi
c000e305:	53                   	push   ebx
c000e306:	83 ec 04             	sub    esp,0x4
c000e309:	f6 05 24 f1 02 c0 04 	test   BYTE PTR ds:0xc002f124,0x4
c000e310:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e314:	0f 94 05 e0 6f 02 c0 	sete   BYTE PTR ds:0xc0026fe0
c000e31b:	39 1d d0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0d0,ebx
c000e321:	74 10                	je     c000e333 <Computer::open(int, int, void*)+0x2f>
c000e323:	83 ec 0c             	sub    esp,0xc
c000e326:	68 24 42 02 c0       	push   0xc0024224
c000e32b:	e8 fe 1c 00 00       	call   c001002e <KePanic(char const*)>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	83 ec 0c             	sub    esp,0xc
c000e336:	68 6c 41 02 c0       	push   0xc002416c
c000e33b:	e8 5b ef ff ff       	call   c000d29b <KeSetBootMessage(char const*)>
c000e340:	e8 1c b8 00 00       	call   c0019b61 <HalEnableNMI()>
c000e345:	c7 04 24 78 11 00 00 	mov    DWORD PTR [esp],0x1178
c000e34c:	e8 96 19 00 00       	call   c000fce7 <malloc>
c000e351:	89 04 24             	mov    DWORD PTR [esp],eax
c000e354:	89 c6                	mov    esi,eax
c000e356:	e8 f3 c2 00 00       	call   c001a64e <CPU::CPU()>
c000e35b:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000e361:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e365:	50                   	push   eax
c000e366:	6a 00                	push   0x0
c000e368:	6a 00                	push   0x0
c000e36a:	56                   	push   esi
c000e36b:	e8 c0 c4 00 00       	call   c001a830 <CPU::open(int, int, void*)>
c000e370:	83 c4 20             	add    esp,0x20
c000e373:	e8 0e aa 00 00       	call   c0018d86 <HalDetectFeatures()>
c000e378:	83 ec 0c             	sub    esp,0xc
c000e37b:	68 86 41 02 c0       	push   0xc0024186
c000e380:	e8 16 ef ff ff       	call   c000d29b <KeSetBootMessage(char const*)>
c000e385:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000e38c:	e8 56 19 00 00       	call   c000fce7 <malloc>
c000e391:	89 04 24             	mov    DWORD PTR [esp],eax
c000e394:	89 c6                	mov    esi,eax
c000e396:	e8 99 e4 ff ff       	call   c000c834 <ACPI::ACPI()>
c000e39b:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000e3a1:	5a                   	pop    edx
c000e3a2:	59                   	pop    ecx
c000e3a3:	56                   	push   esi
c000e3a4:	53                   	push   ebx
c000e3a5:	e8 86 b6 ff ff       	call   c0009a30 <Device::addChild(Device*)>
c000e3aa:	5e                   	pop    esi
c000e3ab:	58                   	pop    eax
c000e3ac:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e3b2:	50                   	push   eax
c000e3b3:	53                   	push   ebx
c000e3b4:	e8 77 b6 ff ff       	call   c0009a30 <Device::addChild(Device*)>
c000e3b9:	c7 04 24 50 42 02 c0 	mov    DWORD PTR [esp],0xc0024250
c000e3c0:	e8 d6 ee ff ff       	call   c000d29b <KeSetBootMessage(char const*)>
c000e3c5:	e8 df be 00 00       	call   c001a2a9 <HalInitialiseCoprocessor()>
c000e3ca:	c7 04 24 9e 41 02 c0 	mov    DWORD PTR [esp],0xc002419e
c000e3d1:	e8 c5 ee ff ff       	call   c000d29b <KeSetBootMessage(char const*)>
c000e3d6:	c7 04 24 2c e1 00 c0 	mov    DWORD PTR [esp],0xc000e12c
c000e3dd:	e8 16 8d 00 00       	call   c00170f8 <setupMultitasking(void (*)())>
c000e3e2:	83 c4 14             	add    esp,0x14
c000e3e5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e3ea:	5b                   	pop    ebx
c000e3eb:	5e                   	pop    esi
c000e3ec:	c3                   	ret    

c000e3ed <KeCalculateCRC32(unsigned char*, int)>:
c000e3ed:	53                   	push   ebx
c000e3ee:	83 c8 ff             	or     eax,0xffffffff
c000e3f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e3f5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e3f9:	01 cb                	add    ebx,ecx
c000e3fb:	39 d9                	cmp    ecx,ebx
c000e3fd:	74 15                	je     c000e414 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000e3ff:	41                   	inc    ecx
c000e400:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000e403:	31 c2                	xor    edx,eax
c000e405:	c1 e8 08             	shr    eax,0x8
c000e408:	0f b6 d2             	movzx  edx,dl
c000e40b:	33 04 95 e0 69 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffd9620]
c000e412:	eb e7                	jmp    c000e3fb <KeCalculateCRC32(unsigned char*, int)+0xe>
c000e414:	f7 d0                	not    eax
c000e416:	5b                   	pop    ebx
c000e417:	c3                   	ret    

c000e418 <EnvVarContainer::getEnv(char const*)>:
c000e418:	57                   	push   edi
c000e419:	56                   	push   esi
c000e41a:	53                   	push   ebx
c000e41b:	31 db                	xor    ebx,ebx
c000e41d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e421:	39 1e                	cmp    DWORD PTR [esi],ebx
c000e423:	7e 2b                	jle    c000e450 <EnvVarContainer::getEnv(char const*)+0x38>
c000e425:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000e42c:	50                   	push   eax
c000e42d:	50                   	push   eax
c000e42e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e431:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000e434:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e438:	e8 13 23 ff ff       	call   c0000750 <strcmp>
c000e43d:	83 c4 10             	add    esp,0x10
c000e440:	85 c0                	test   eax,eax
c000e442:	75 09                	jne    c000e44d <EnvVarContainer::getEnv(char const*)+0x35>
c000e444:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e447:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000e44b:	eb 05                	jmp    c000e452 <EnvVarContainer::getEnv(char const*)+0x3a>
c000e44d:	43                   	inc    ebx
c000e44e:	eb d1                	jmp    c000e421 <EnvVarContainer::getEnv(char const*)+0x9>
c000e450:	31 c0                	xor    eax,eax
c000e452:	5b                   	pop    ebx
c000e453:	5e                   	pop    esi
c000e454:	5f                   	pop    edi
c000e455:	c3                   	ret    

c000e456 <EnvVarContainer::setEnv(char const*, char const*)>:
c000e456:	55                   	push   ebp
c000e457:	57                   	push   edi
c000e458:	56                   	push   esi
c000e459:	53                   	push   ebx
c000e45a:	83 ec 28             	sub    esp,0x28
c000e45d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e461:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e465:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e469:	56                   	push   esi
c000e46a:	e8 01 21 ff ff       	call   c0000570 <strlen>
c000e46f:	40                   	inc    eax
c000e470:	89 04 24             	mov    DWORD PTR [esp],eax
c000e473:	e8 6f 18 00 00       	call   c000fce7 <malloc>
c000e478:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e47b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e47f:	e8 ec 20 ff ff       	call   c0000570 <strlen>
c000e484:	40                   	inc    eax
c000e485:	89 04 24             	mov    DWORD PTR [esp],eax
c000e488:	e8 5a 18 00 00       	call   c000fce7 <malloc>
c000e48d:	89 34 24             	mov    DWORD PTR [esp],esi
c000e490:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e494:	e8 d7 20 ff ff       	call   c0000570 <strlen>
c000e499:	83 c4 0c             	add    esp,0xc
c000e49c:	40                   	inc    eax
c000e49d:	50                   	push   eax
c000e49e:	6a 00                	push   0x0
c000e4a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e4a4:	e8 47 20 ff ff       	call   c00004f0 <memset>
c000e4a9:	89 34 24             	mov    DWORD PTR [esp],esi
c000e4ac:	e8 bf 20 ff ff       	call   c0000570 <strlen>
c000e4b1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e4b5:	8d 48 01             	lea    ecx,[eax+0x1]
c000e4b8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e4ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e4bd:	89 de                	mov    esi,ebx
c000e4bf:	e8 ac 20 ff ff       	call   c0000570 <strlen>
c000e4c4:	83 c4 0c             	add    esp,0xc
c000e4c7:	40                   	inc    eax
c000e4c8:	50                   	push   eax
c000e4c9:	6a 00                	push   0x0
c000e4cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e4cf:	e8 1c 20 ff ff       	call   c00004f0 <memset>
c000e4d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e4d7:	e8 94 20 ff ff       	call   c0000570 <strlen>
c000e4dc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e4e0:	8d 48 01             	lea    ecx,[eax+0x1]
c000e4e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e4e5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e4e8:	40                   	inc    eax
c000e4e9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e4ec:	c1 e0 03             	shl    eax,0x3
c000e4ef:	5a                   	pop    edx
c000e4f0:	59                   	pop    ecx
c000e4f1:	50                   	push   eax
c000e4f2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000e4f5:	e8 d9 17 00 00       	call   c000fcd3 <realloc>
c000e4fa:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e4fe:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e501:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e504:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e508:	b9 08 00 00 00       	mov    ecx,0x8
c000e50d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e50f:	83 c4 2c             	add    esp,0x2c
c000e512:	5b                   	pop    ebx
c000e513:	5e                   	pop    esi
c000e514:	5f                   	pop    edi
c000e515:	5d                   	pop    ebp
c000e516:	c3                   	ret    
c000e517:	90                   	nop

c000e518 <EnvVarContainer::deleteEnv(char const*)>:
c000e518:	c3                   	ret    
c000e519:	90                   	nop

c000e51a <EnvVarContainer::loadFrom(char const*, char const*)>:
c000e51a:	55                   	push   ebp
c000e51b:	57                   	push   edi
c000e51c:	56                   	push   esi
c000e51d:	53                   	push   ebx
c000e51e:	81 ec 38 01 00 00    	sub    esp,0x138
c000e524:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000e52b:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000e532:	68 14 01 00 00       	push   0x114
c000e537:	e8 ab 17 00 00       	call   c000fce7 <malloc>
c000e53c:	83 c4 0c             	add    esp,0xc
c000e53f:	89 c3                	mov    ebx,eax
c000e541:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e544:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e54b:	50                   	push   eax
c000e54c:	e8 15 9c ff ff       	call   c0008166 <File::File(char const*, Process*)>
c000e551:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e554:	e8 ef 9e ff ff       	call   c0008448 <File::exists()>
c000e559:	83 c4 10             	add    esp,0x10
c000e55c:	84 c0                	test   al,al
c000e55e:	75 31                	jne    c000e591 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000e560:	50                   	push   eax
c000e561:	50                   	push   eax
c000e562:	6a 12                	push   0x12
c000e564:	53                   	push   ebx
c000e565:	e8 1a 9c ff ff       	call   c0008184 <File::open(FileOpenMode)>
c000e56a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e56c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000e56f:	89 34 24             	mov    DWORD PTR [esp],esi
c000e572:	e8 f9 1f ff ff       	call   c0000570 <strlen>
c000e577:	5a                   	pop    edx
c000e578:	31 d2                	xor    edx,edx
c000e57a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000e57e:	51                   	push   ecx
c000e57f:	56                   	push   esi
c000e580:	52                   	push   edx
c000e581:	50                   	push   eax
c000e582:	53                   	push   ebx
c000e583:	ff d7                	call   edi
c000e585:	83 c4 14             	add    esp,0x14
c000e588:	53                   	push   ebx
c000e589:	e8 54 9c ff ff       	call   c00081e2 <File::close()>
c000e58e:	83 c4 10             	add    esp,0x10
c000e591:	56                   	push   esi
c000e592:	31 f6                	xor    esi,esi
c000e594:	68 00 01 00 00       	push   0x100
c000e599:	6a 00                	push   0x0
c000e59b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e59f:	50                   	push   eax
c000e5a0:	e8 4b 1f ff ff       	call   c00004f0 <memset>
c000e5a5:	5f                   	pop    edi
c000e5a6:	58                   	pop    eax
c000e5a7:	6a 01                	push   0x1
c000e5a9:	53                   	push   ebx
c000e5aa:	e8 d5 9b ff ff       	call   c0008184 <File::open(FileOpenMode)>
c000e5af:	83 c4 10             	add    esp,0x10
c000e5b2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e5ba:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e5c2:	83 ec 0c             	sub    esp,0xc
c000e5c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e5c7:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000e5cb:	51                   	push   ecx
c000e5cc:	8d 54 24 23          	lea    edx,[esp+0x23]
c000e5d0:	52                   	push   edx
c000e5d1:	6a 00                	push   0x0
c000e5d3:	6a 01                	push   0x1
c000e5d5:	53                   	push   ebx
c000e5d6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e5d9:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000e5de:	83 c4 20             	add    esp,0x20
c000e5e1:	89 c2                	mov    edx,eax
c000e5e3:	85 c0                	test   eax,eax
c000e5e5:	0f 84 36 01 00 00    	je     c000e721 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000e5eb:	83 f8 0d             	cmp    eax,0xd
c000e5ee:	0f 84 22 01 00 00    	je     c000e716 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e5f4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e5f9:	0f 84 f0 00 00 00    	je     c000e6ef <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000e5ff:	83 f8 0a             	cmp    eax,0xa
c000e602:	74 13                	je     c000e617 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e604:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e609:	74 0c                	je     c000e617 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e60b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e611:	0f 8e f6 00 00 00    	jle    c000e70d <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000e617:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e61b:	83 ec 0c             	sub    esp,0xc
c000e61e:	8d 78 01             	lea    edi,[eax+0x1]
c000e621:	57                   	push   edi
c000e622:	e8 c0 16 00 00       	call   c000fce7 <malloc>
c000e627:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000e62b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e62f:	8d 56 04             	lea    edx,[esi+0x4]
c000e632:	89 14 24             	mov    DWORD PTR [esp],edx
c000e635:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e639:	e8 a9 16 00 00       	call   c000fce7 <malloc>
c000e63e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e642:	83 c4 0c             	add    esp,0xc
c000e645:	57                   	push   edi
c000e646:	6a 00                	push   0x0
c000e648:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e64c:	e8 9f 1e ff ff       	call   c00004f0 <memset>
c000e651:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e655:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000e659:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e65d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e65f:	83 c4 0c             	add    esp,0xc
c000e662:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e666:	52                   	push   edx
c000e667:	6a 00                	push   0x0
c000e669:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e66d:	e8 7e 1e ff ff       	call   c00004f0 <memset>
c000e672:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e676:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000e67a:	89 34 24             	mov    DWORD PTR [esp],esi
c000e67d:	e8 ee 1e ff ff       	call   c0000570 <strlen>
c000e682:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000e686:	89 c1                	mov    ecx,eax
c000e688:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e68a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e68d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000e690:	40                   	inc    eax
c000e691:	83 c4 10             	add    esp,0x10
c000e694:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e697:	85 d2                	test   edx,edx
c000e699:	75 0c                	jne    c000e6a7 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000e69b:	83 ec 0c             	sub    esp,0xc
c000e69e:	6a 08                	push   0x8
c000e6a0:	e8 42 16 00 00       	call   c000fce7 <malloc>
c000e6a5:	eb 0c                	jmp    c000e6b3 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000e6a7:	c1 e0 03             	shl    eax,0x3
c000e6aa:	51                   	push   ecx
c000e6ab:	51                   	push   ecx
c000e6ac:	50                   	push   eax
c000e6ad:	52                   	push   edx
c000e6ae:	e8 20 16 00 00       	call   c000fcd3 <realloc>
c000e6b3:	83 c4 10             	add    esp,0x10
c000e6b6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e6b9:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e6bc:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000e6bf:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e6c3:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e6c7:	b9 08 00 00 00       	mov    ecx,0x8
c000e6cc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e6ce:	31 f6                	xor    esi,esi
c000e6d0:	50                   	push   eax
c000e6d1:	68 00 01 00 00       	push   0x100
c000e6d6:	6a 00                	push   0x0
c000e6d8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e6dc:	50                   	push   eax
c000e6dd:	e8 0e 1e ff ff       	call   c00004f0 <memset>
c000e6e2:	83 c4 10             	add    esp,0x10
c000e6e5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e6ed:	eb 27                	jmp    c000e716 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e6ef:	83 f8 3d             	cmp    eax,0x3d
c000e6f2:	74 1e                	je     c000e712 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000e6f4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e6fa:	7f 07                	jg     c000e703 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000e6fc:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c000e700:	46                   	inc    esi
c000e701:	eb 13                	jmp    c000e716 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e703:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000e70b:	eb 09                	jmp    c000e716 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e70d:	83 f8 3d             	cmp    eax,0x3d
c000e710:	75 ea                	jne    c000e6fc <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000e712:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000e716:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e71b:	0f 85 99 fe ff ff    	jne    c000e5ba <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000e721:	83 ec 0c             	sub    esp,0xc
c000e724:	53                   	push   ebx
c000e725:	e8 b8 9a ff ff       	call   c00081e2 <File::close()>
c000e72a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e72c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e72f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e732:	81 c4 3c 01 00 00    	add    esp,0x13c
c000e738:	5b                   	pop    ebx
c000e739:	5e                   	pop    esi
c000e73a:	5f                   	pop    edi
c000e73b:	5d                   	pop    ebp
c000e73c:	c3                   	ret    
c000e73d:	90                   	nop

c000e73e <EnvVarContainer::__loadSystem()>:
c000e73e:	83 ec 10             	sub    esp,0x10
c000e741:	68 e0 6d 02 c0       	push   0xc0026de0
c000e746:	68 a0 42 02 c0       	push   0xc00242a0
c000e74b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e74f:	e8 c6 fd ff ff       	call   c000e51a <EnvVarContainer::loadFrom(char const*, char const*)>
c000e754:	83 c4 1c             	add    esp,0x1c
c000e757:	c3                   	ret    

c000e758 <EnvVarContainer::__loadUser()>:
c000e758:	c3                   	ret    
c000e759:	90                   	nop

c000e75a <EnvVarContainer::EnvVarContainer(Process*)>:
c000e75a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e75e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e764:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e768:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e76c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e76f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e773:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e77a:	90                   	nop
c000e77b:	c3                   	ret    

c000e77c <EnvVarContainer::~EnvVarContainer()>:
c000e77c:	83 ec 0c             	sub    esp,0xc
c000e77f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e783:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e786:	85 c0                	test   eax,eax
c000e788:	74 1d                	je     c000e7a7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e78a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e78e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e790:	85 c0                	test   eax,eax
c000e792:	74 13                	je     c000e7a7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e798:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e79b:	83 ec 0c             	sub    esp,0xc
c000e79e:	50                   	push   eax
c000e79f:	e8 53 15 00 00       	call   c000fcf7 <free>
c000e7a4:	83 c4 10             	add    esp,0x10
c000e7a7:	90                   	nop
c000e7a8:	83 c4 0c             	add    esp,0xc
c000e7ab:	c3                   	ret    

c000e7ac <KeGetEnv(Process*, char const*)>:
c000e7ac:	53                   	push   ebx
c000e7ad:	83 ec 08             	sub    esp,0x8
c000e7b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e7b8:	39 05 58 fa 02 c0    	cmp    DWORD PTR ds:0xc002fa58,eax
c000e7be:	74 04                	je     c000e7c4 <KeGetEnv(Process*, char const*)+0x18>
c000e7c0:	85 c0                	test   eax,eax
c000e7c2:	75 0b                	jne    c000e7cf <KeGetEnv(Process*, char const*)+0x23>
c000e7c4:	a1 d8 d0 02 c0       	mov    eax,ds:0xc002d0d8
c000e7c9:	85 c0                	test   eax,eax
c000e7cb:	75 19                	jne    c000e7e6 <KeGetEnv(Process*, char const*)+0x3a>
c000e7cd:	eb 27                	jmp    c000e7f6 <KeGetEnv(Process*, char const*)+0x4a>
c000e7cf:	52                   	push   edx
c000e7d0:	52                   	push   edx
c000e7d1:	53                   	push   ebx
c000e7d2:	ff b0 ba 07 00 00    	push   DWORD PTR [eax+0x7ba]
c000e7d8:	e8 3b fc ff ff       	call   c000e418 <EnvVarContainer::getEnv(char const*)>
c000e7dd:	83 c4 10             	add    esp,0x10
c000e7e0:	85 c0                	test   eax,eax
c000e7e2:	75 28                	jne    c000e80c <KeGetEnv(Process*, char const*)+0x60>
c000e7e4:	eb de                	jmp    c000e7c4 <KeGetEnv(Process*, char const*)+0x18>
c000e7e6:	52                   	push   edx
c000e7e7:	52                   	push   edx
c000e7e8:	53                   	push   ebx
c000e7e9:	50                   	push   eax
c000e7ea:	e8 29 fc ff ff       	call   c000e418 <EnvVarContainer::getEnv(char const*)>
c000e7ef:	83 c4 10             	add    esp,0x10
c000e7f2:	85 c0                	test   eax,eax
c000e7f4:	75 16                	jne    c000e80c <KeGetEnv(Process*, char const*)+0x60>
c000e7f6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000e7fa:	a1 dc d0 02 c0       	mov    eax,ds:0xc002d0dc
c000e7ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e803:	83 c4 08             	add    esp,0x8
c000e806:	5b                   	pop    ebx
c000e807:	e9 0c fc ff ff       	jmp    c000e418 <EnvVarContainer::getEnv(char const*)>
c000e80c:	83 c4 08             	add    esp,0x8
c000e80f:	5b                   	pop    ebx
c000e810:	c3                   	ret    

c000e811 <KeSetEnvSystem(char const*, char const*)>:
c000e811:	83 ec 10             	sub    esp,0x10
c000e814:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e818:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e81c:	ff 35 dc d0 02 c0    	push   DWORD PTR ds:0xc002d0dc
c000e822:	e8 2f fc ff ff       	call   c000e456 <EnvVarContainer::setEnv(char const*, char const*)>
c000e827:	83 c4 1c             	add    esp,0x1c
c000e82a:	c3                   	ret    

c000e82b <KeSetEnvUser(char const*, char const*)>:
c000e82b:	a1 d8 d0 02 c0       	mov    eax,ds:0xc002d0d8
c000e830:	85 c0                	test   eax,eax
c000e832:	74 15                	je     c000e849 <KeSetEnvUser(char const*, char const*)+0x1e>
c000e834:	83 ec 10             	sub    esp,0x10
c000e837:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e83b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e83f:	50                   	push   eax
c000e840:	e8 11 fc ff ff       	call   c000e456 <EnvVarContainer::setEnv(char const*, char const*)>
c000e845:	83 c4 1c             	add    esp,0x1c
c000e848:	c3                   	ret    
c000e849:	c3                   	ret    

c000e84a <KeSetEnvProcess(Process*, char const*, char const*)>:
c000e84a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e84e:	8b 80 ba 07 00 00    	mov    eax,DWORD PTR [eax+0x7ba]
c000e854:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e858:	e9 f9 fb ff ff       	jmp    c000e456 <EnvVarContainer::setEnv(char const*, char const*)>

c000e85d <KeDeleteEnvSystem(char const*)>:
c000e85d:	c3                   	ret    

c000e85e <KeDeleteEnvUser(char const*)>:
c000e85e:	c3                   	ret    

c000e85f <KeDeleteEnvProcess(Process*, char const*)>:
c000e85f:	c3                   	ret    

c000e860 <KeNewProcessEnv(Process*)>:
c000e860:	83 ec 28             	sub    esp,0x28
c000e863:	6a 0c                	push   0xc
c000e865:	e8 7d 14 00 00       	call   c000fce7 <malloc>
c000e86a:	5a                   	pop    edx
c000e86b:	59                   	pop    ecx
c000e86c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e870:	50                   	push   eax
c000e871:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e875:	e8 e0 fe ff ff       	call   c000e75a <EnvVarContainer::EnvVarContainer(Process*)>
c000e87a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e87e:	83 c4 2c             	add    esp,0x2c
c000e881:	c3                   	ret    

c000e882 <KeCopyProcessEnv(Process*, Process*)>:
c000e882:	57                   	push   edi
c000e883:	56                   	push   esi
c000e884:	53                   	push   ebx
c000e885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e889:	83 ec 0c             	sub    esp,0xc
c000e88c:	8b b8 ba 07 00 00    	mov    edi,DWORD PTR [eax+0x7ba]
c000e892:	6a 0c                	push   0xc
c000e894:	e8 4e 14 00 00       	call   c000fce7 <malloc>
c000e899:	89 c3                	mov    ebx,eax
c000e89b:	58                   	pop    eax
c000e89c:	5a                   	pop    edx
c000e89d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8a1:	53                   	push   ebx
c000e8a2:	e8 b3 fe ff ff       	call   c000e75a <EnvVarContainer::EnvVarContainer(Process*)>
c000e8a7:	8b 07                	mov    eax,DWORD PTR [edi]
c000e8a9:	89 03                	mov    DWORD PTR [ebx],eax
c000e8ab:	c1 e0 03             	shl    eax,0x3
c000e8ae:	89 04 24             	mov    DWORD PTR [esp],eax
c000e8b1:	e8 31 14 00 00       	call   c000fce7 <malloc>
c000e8b6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e8b9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e8bb:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000e8be:	c1 e1 03             	shl    ecx,0x3
c000e8c1:	89 c7                	mov    edi,eax
c000e8c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e8c5:	83 c4 10             	add    esp,0x10
c000e8c8:	89 d8                	mov    eax,ebx
c000e8ca:	5b                   	pop    ebx
c000e8cb:	5e                   	pop    esi
c000e8cc:	5f                   	pop    edi
c000e8cd:	c3                   	ret    

c000e8ce <KeLoadSystemEnv()>:
c000e8ce:	53                   	push   ebx
c000e8cf:	83 ec 14             	sub    esp,0x14
c000e8d2:	6a 0c                	push   0xc
c000e8d4:	e8 0e 14 00 00       	call   c000fce7 <malloc>
c000e8d9:	89 c3                	mov    ebx,eax
c000e8db:	58                   	pop    eax
c000e8dc:	5a                   	pop    edx
c000e8dd:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c000e8e3:	53                   	push   ebx
c000e8e4:	e8 71 fe ff ff       	call   c000e75a <EnvVarContainer::EnvVarContainer(Process*)>
c000e8e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e8ec:	89 1d dc d0 02 c0    	mov    DWORD PTR ds:0xc002d0dc,ebx
c000e8f2:	e8 47 fe ff ff       	call   c000e73e <EnvVarContainer::__loadSystem()>
c000e8f7:	83 c4 18             	add    esp,0x18
c000e8fa:	5b                   	pop    ebx
c000e8fb:	c3                   	ret    

c000e8fc <KeLoadUserEnv()>:
c000e8fc:	53                   	push   ebx
c000e8fd:	83 ec 14             	sub    esp,0x14
c000e900:	6a 0c                	push   0xc
c000e902:	e8 e0 13 00 00       	call   c000fce7 <malloc>
c000e907:	89 c3                	mov    ebx,eax
c000e909:	58                   	pop    eax
c000e90a:	5a                   	pop    edx
c000e90b:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c000e911:	53                   	push   ebx
c000e912:	e8 43 fe ff ff       	call   c000e75a <EnvVarContainer::EnvVarContainer(Process*)>
c000e917:	89 1d d8 d0 02 c0    	mov    DWORD PTR ds:0xc002d0d8,ebx
c000e91d:	83 c4 18             	add    esp,0x18
c000e920:	5b                   	pop    ebx
c000e921:	c3                   	ret    

c000e922 <KeFlushEnv()>:
c000e922:	c3                   	ret    

c000e923 <KeGetProcessTotalEnvCount(Process*)>:
c000e923:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e927:	8b 15 d8 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0d8
c000e92d:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e933:	a1 dc d0 02 c0       	mov    eax,ds:0xc002d0dc
c000e938:	8b 00                	mov    eax,DWORD PTR [eax]
c000e93a:	03 01                	add    eax,DWORD PTR [ecx]
c000e93c:	85 d2                	test   edx,edx
c000e93e:	74 02                	je     c000e942 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000e940:	03 02                	add    eax,DWORD PTR [edx]
c000e942:	c3                   	ret    

c000e943 <KeGetProcessEnvPair(Process*, int)>:
c000e943:	57                   	push   edi
c000e944:	56                   	push   esi
c000e945:	8b 35 d8 d0 02 c0    	mov    esi,DWORD PTR ds:0xc002d0d8
c000e94b:	53                   	push   ebx
c000e94c:	85 f6                	test   esi,esi
c000e94e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e952:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e956:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e95c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e960:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e962:	75 16                	jne    c000e97a <KeGetProcessEnvPair(Process*, int)+0x37>
c000e964:	39 c2                	cmp    edx,eax
c000e966:	7c 16                	jl     c000e97e <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e968:	8b 0d dc d0 02 c0    	mov    ecx,DWORD PTR ds:0xc002d0dc
c000e96e:	8b 31                	mov    esi,DWORD PTR [ecx]
c000e970:	01 c6                	add    esi,eax
c000e972:	39 d6                	cmp    esi,edx
c000e974:	7e 3c                	jle    c000e9b2 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e976:	29 c2                	sub    edx,eax
c000e978:	eb 04                	jmp    c000e97e <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e97a:	39 c2                	cmp    edx,eax
c000e97c:	7d 05                	jge    c000e983 <KeGetProcessEnvPair(Process*, int)+0x40>
c000e97e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000e981:	eb 20                	jmp    c000e9a3 <KeGetProcessEnvPair(Process*, int)+0x60>
c000e983:	8b 3e                	mov    edi,DWORD PTR [esi]
c000e985:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000e988:	39 d1                	cmp    ecx,edx
c000e98a:	7e 04                	jle    c000e990 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000e98c:	29 c2                	sub    edx,eax
c000e98e:	eb 10                	jmp    c000e9a0 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000e990:	8b 35 dc d0 02 c0    	mov    esi,DWORD PTR ds:0xc002d0dc
c000e996:	03 0e                	add    ecx,DWORD PTR [esi]
c000e998:	39 d1                	cmp    ecx,edx
c000e99a:	7e 16                	jle    c000e9b2 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e99c:	29 c2                	sub    edx,eax
c000e99e:	29 fa                	sub    edx,edi
c000e9a0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e9a3:	8d 14 d0             	lea    edx,[eax+edx*8]
c000e9a6:	8b 02                	mov    eax,DWORD PTR [edx]
c000e9a8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e9ab:	89 03                	mov    DWORD PTR [ebx],eax
c000e9ad:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000e9b0:	eb 1d                	jmp    c000e9cf <KeGetProcessEnvPair(Process*, int)+0x8c>
c000e9b2:	83 ec 0c             	sub    esp,0xc
c000e9b5:	68 c2 42 02 c0       	push   0xc00242c2
c000e9ba:	e8 6f 16 00 00       	call   c001002e <KePanic(char const*)>
c000e9bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000e9c5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000e9cc:	83 c4 10             	add    esp,0x10
c000e9cf:	89 d8                	mov    eax,ebx
c000e9d1:	5b                   	pop    ebx
c000e9d2:	5e                   	pop    esi
c000e9d3:	5f                   	pop    edi
c000e9d4:	c2 04 00             	ret    0x4
c000e9d7:	90                   	nop

c000e9d8 <KeSetupInterrupts()>:
c000e9d8:	83 ec 10             	sub    esp,0x10
c000e9db:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e9e3:	90                   	nop
c000e9e4:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000e9ec:	7f 5a                	jg     c000ea48 <KeSetupInterrupts()+0x70>
c000e9ee:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e9f6:	66 90                	xchg   ax,ax
c000e9f8:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000e9fd:	7f 41                	jg     c000ea40 <KeSetupInterrupts()+0x68>
c000e9ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea03:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ea0a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea0e:	01 d0                	add    eax,edx
c000ea10:	c7 04 85 e0 e0 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd1f20],0x0
c000ea1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea1f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ea26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea2a:	01 d0                	add    eax,edx
c000ea2c:	c7 04 85 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd2f20],0x0
c000ea37:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000ea3c:	eb ba                	jmp    c000e9f8 <KeSetupInterrupts()+0x20>
c000ea3e:	66 90                	xchg   ax,ax
c000ea40:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000ea45:	eb 9d                	jmp    c000e9e4 <KeSetupInterrupts()+0xc>
c000ea47:	90                   	nop
c000ea48:	90                   	nop
c000ea49:	83 c4 10             	add    esp,0x10
c000ea4c:	c3                   	ret    
c000ea4d:	8d 76 00             	lea    esi,[esi+0x0]

c000ea50 <int_handler>:
c000ea50:	83 ec 2c             	sub    esp,0x2c
c000ea53:	90                   	nop
c000ea54:	a0 28 f1 02 c0       	mov    al,ds:0xc002f128
c000ea59:	0f b6 c0             	movzx  eax,al
c000ea5c:	85 c0                	test   eax,eax
c000ea5e:	74 04                	je     c000ea64 <int_handler+0x14>
c000ea60:	fa                   	cli    
c000ea61:	f4                   	hlt    
c000ea62:	eb f0                	jmp    c000ea54 <int_handler+0x4>
c000ea64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea68:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000ea6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ea6f:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000ea74:	7e 1a                	jle    c000ea90 <int_handler+0x40>
c000ea76:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000ea7b:	7f 13                	jg     c000ea90 <int_handler+0x40>
c000ea7d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea81:	83 e8 20             	sub    eax,0x20
c000ea84:	83 ec 0c             	sub    esp,0xc
c000ea87:	50                   	push   eax
c000ea88:	e8 93 bb 00 00       	call   c001a620 <HalEndOfInterrupt(int)>
c000ea8d:	83 c4 10             	add    esp,0x10
c000ea90:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea94:	c1 e0 04             	shl    eax,0x4
c000ea97:	05 e0 e0 02 c0       	add    eax,0xc002e0e0
c000ea9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000eaa0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eaa4:	c1 e0 04             	shl    eax,0x4
c000eaa7:	05 e0 d0 02 c0       	add    eax,0xc002d0e0
c000eaac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eab0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000eab8:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000eabd:	0f 8f ad 00 00 00    	jg     c000eb70 <int_handler+0x120>
c000eac3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eac7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000eace:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ead2:	01 d0                	add    eax,edx
c000ead4:	8b 00                	mov    eax,DWORD PTR [eax]
c000ead6:	85 c0                	test   eax,eax
c000ead8:	0f 84 86 00 00 00    	je     c000eb64 <int_handler+0x114>
c000eade:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eae2:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000eae5:	83 f8 60             	cmp    eax,0x60
c000eae8:	75 46                	jne    c000eb30 <int_handler+0xe0>
c000eaea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eaee:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000eaf5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eaf9:	01 d0                	add    eax,edx
c000eafb:	8b 00                	mov    eax,DWORD PTR [eax]
c000eafd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eb01:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000eb08:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000eb0c:	01 ca                	add    edx,ecx
c000eb0e:	8b 12                	mov    edx,DWORD PTR [edx]
c000eb10:	83 ec 08             	sub    esp,0x8
c000eb13:	52                   	push   edx
c000eb14:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eb18:	ff d0                	call   eax
c000eb1a:	83 c4 10             	add    esp,0x10
c000eb1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000eb21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000eb25:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb29:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb2d:	eb 4d                	jmp    c000eb7c <int_handler+0x12c>
c000eb2f:	90                   	nop
c000eb30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eb34:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000eb3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb3f:	01 d0                	add    eax,edx
c000eb41:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb43:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eb47:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000eb4e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000eb52:	01 ca                	add    edx,ecx
c000eb54:	8b 12                	mov    edx,DWORD PTR [edx]
c000eb56:	83 ec 08             	sub    esp,0x8
c000eb59:	52                   	push   edx
c000eb5a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eb5e:	ff d0                	call   eax
c000eb60:	83 c4 10             	add    esp,0x10
c000eb63:	90                   	nop
c000eb64:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000eb69:	e9 4a ff ff ff       	jmp    c000eab8 <int_handler+0x68>
c000eb6e:	66 90                	xchg   ax,ax
c000eb70:	b8 00 00 00 00       	mov    eax,0x0
c000eb75:	ba 00 00 00 00       	mov    edx,0x0
c000eb7a:	66 90                	xchg   ax,ax
c000eb7c:	83 c4 2c             	add    esp,0x2c
c000eb7f:	c3                   	ret    

c000eb80 <KeDisplayProgramFault(char const*)>:
c000eb80:	83 ec 0c             	sub    esp,0xc
c000eb83:	83 ec 0c             	sub    esp,0xc
c000eb86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb8a:	e8 d5 83 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000eb8f:	83 c4 10             	add    esp,0x10
c000eb92:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000eb97:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb99:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eb9c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000eba2:	85 c0                	test   eax,eax
c000eba4:	74 22                	je     c000ebc8 <KeDisplayProgramFault(char const*)+0x48>
c000eba6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000ebab:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebad:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ebb0:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000ebb6:	6a 04                	push   0x4
c000ebb8:	6a 0f                	push   0xf
c000ebba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ebbe:	50                   	push   eax
c000ebbf:	e8 44 3d 00 00       	call   c0012908 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000ebc4:	83 c4 10             	add    esp,0x10
c000ebc7:	90                   	nop
c000ebc8:	90                   	nop
c000ebc9:	83 c4 0c             	add    esp,0xc
c000ebcc:	c3                   	ret    
c000ebcd:	8d 76 00             	lea    esi,[esi+0x0]

c000ebd0 <KeGeneralProtectionFault(void*, void*)>:
c000ebd0:	83 ec 0c             	sub    esp,0xc
c000ebd3:	83 ec 0c             	sub    esp,0xc
c000ebd6:	68 dc 42 02 c0       	push   0xc00242dc
c000ebdb:	e8 84 83 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ebe0:	83 c4 10             	add    esp,0x10
c000ebe3:	83 ec 08             	sub    esp,0x8
c000ebe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebee:	e8 1d b0 00 00       	call   c0019c10 <HalHandleGeneralProtectionFault(void*, void*)>
c000ebf3:	83 c4 10             	add    esp,0x10
c000ebf6:	0f b6 c0             	movzx  eax,al
c000ebf9:	85 c0                	test   eax,eax
c000ebfb:	75 2f                	jne    c000ec2c <KeGeneralProtectionFault(void*, void*)+0x5c>
c000ebfd:	83 ec 0c             	sub    esp,0xc
c000ec00:	68 e7 42 02 c0       	push   0xc00242e7
c000ec05:	e8 76 ff ff ff       	call   c000eb80 <KeDisplayProgramFault(char const*)>
c000ec0a:	83 c4 10             	add    esp,0x10
c000ec0d:	83 ec 0c             	sub    esp,0xc
c000ec10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec14:	e8 43 b1 00 00       	call   c0019d5c <HalDisplayDebugInfo(void*)>
c000ec19:	83 c4 10             	add    esp,0x10
c000ec1c:	83 ec 0c             	sub    esp,0xc
c000ec1f:	6a 00                	push   0x0
c000ec21:	e8 2a 8f 00 00       	call   c0017b50 <Thr::terminateFromIRQ(int)>
c000ec26:	83 c4 10             	add    esp,0x10
c000ec29:	eb 05                	jmp    c000ec30 <KeGeneralProtectionFault(void*, void*)+0x60>
c000ec2b:	90                   	nop
c000ec2c:	90                   	nop
c000ec2d:	8d 76 00             	lea    esi,[esi+0x0]
c000ec30:	83 c4 0c             	add    esp,0xc
c000ec33:	c3                   	ret    

c000ec34 <KePageFault(void*, void*)>:
c000ec34:	83 ec 0c             	sub    esp,0xc
c000ec37:	83 ec 0c             	sub    esp,0xc
c000ec3a:	68 00 43 02 c0       	push   0xc0024300
c000ec3f:	e8 20 83 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ec44:	83 c4 10             	add    esp,0x10
c000ec47:	83 ec 08             	sub    esp,0x8
c000ec4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec52:	e8 94 b0 00 00       	call   c0019ceb <HalHandlePageFault(void*, void*)>
c000ec57:	83 c4 10             	add    esp,0x10
c000ec5a:	0f b6 c0             	movzx  eax,al
c000ec5d:	85 c0                	test   eax,eax
c000ec5f:	75 2f                	jne    c000ec90 <KePageFault(void*, void*)+0x5c>
c000ec61:	83 ec 0c             	sub    esp,0xc
c000ec64:	68 0d 43 02 c0       	push   0xc002430d
c000ec69:	e8 12 ff ff ff       	call   c000eb80 <KeDisplayProgramFault(char const*)>
c000ec6e:	83 c4 10             	add    esp,0x10
c000ec71:	83 ec 0c             	sub    esp,0xc
c000ec74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec78:	e8 df b0 00 00       	call   c0019d5c <HalDisplayDebugInfo(void*)>
c000ec7d:	83 c4 10             	add    esp,0x10
c000ec80:	83 ec 0c             	sub    esp,0xc
c000ec83:	6a 00                	push   0x0
c000ec85:	e8 c6 8e 00 00       	call   c0017b50 <Thr::terminateFromIRQ(int)>
c000ec8a:	83 c4 10             	add    esp,0x10
c000ec8d:	eb 05                	jmp    c000ec94 <KePageFault(void*, void*)+0x60>
c000ec8f:	90                   	nop
c000ec90:	90                   	nop
c000ec91:	8d 76 00             	lea    esi,[esi+0x0]
c000ec94:	83 c4 0c             	add    esp,0xc
c000ec97:	c3                   	ret    

c000ec98 <KeNonMaskableInterrupt(void*, void*)>:
c000ec98:	83 ec 0c             	sub    esp,0xc
c000ec9b:	e8 4a b4 00 00       	call   c001a0ea <HalReceivedNMI()>
c000eca0:	90                   	nop
c000eca1:	83 c4 0c             	add    esp,0xc
c000eca4:	c3                   	ret    
c000eca5:	8d 76 00             	lea    esi,[esi+0x0]

c000eca8 <KeOtherFault(void*, void*)>:
c000eca8:	83 ec 0c             	sub    esp,0xc
c000ecab:	83 ec 0c             	sub    esp,0xc
c000ecae:	68 18 43 02 c0       	push   0xc0024318
c000ecb3:	e8 c8 fe ff ff       	call   c000eb80 <KeDisplayProgramFault(char const*)>
c000ecb8:	83 c4 10             	add    esp,0x10
c000ecbb:	83 ec 0c             	sub    esp,0xc
c000ecbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ecc2:	e8 95 b0 00 00       	call   c0019d5c <HalDisplayDebugInfo(void*)>
c000ecc7:	83 c4 10             	add    esp,0x10
c000ecca:	83 ec 0c             	sub    esp,0xc
c000eccd:	6a 00                	push   0x0
c000eccf:	e8 7c 8e 00 00       	call   c0017b50 <Thr::terminateFromIRQ(int)>
c000ecd4:	83 c4 10             	add    esp,0x10
c000ecd7:	90                   	nop
c000ecd8:	83 c4 0c             	add    esp,0xc
c000ecdb:	c3                   	ret    

c000ecdc <KeOpcodeFault(void*, void*)>:
c000ecdc:	55                   	push   ebp
c000ecdd:	89 e5                	mov    ebp,esp
c000ecdf:	83 ec 08             	sub    esp,0x8
c000ece2:	83 ec 08             	sub    esp,0x8
c000ece5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000ece8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000eceb:	e8 2a b0 00 00       	call   c0019d1a <HalHandleOpcodeFault(void*, void*)>
c000ecf0:	83 c4 10             	add    esp,0x10
c000ecf3:	0f b6 c0             	movzx  eax,al
c000ecf6:	85 c0                	test   eax,eax
c000ecf8:	75 2e                	jne    c000ed28 <KeOpcodeFault(void*, void*)+0x4c>
c000ecfa:	83 ec 0c             	sub    esp,0xc
c000ecfd:	68 40 43 02 c0       	push   0xc0024340
c000ed02:	e8 79 fe ff ff       	call   c000eb80 <KeDisplayProgramFault(char const*)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	83 ec 0c             	sub    esp,0xc
c000ed0d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ed10:	e8 47 b0 00 00       	call   c0019d5c <HalDisplayDebugInfo(void*)>
c000ed15:	83 c4 10             	add    esp,0x10
c000ed18:	83 ec 0c             	sub    esp,0xc
c000ed1b:	6a 00                	push   0x0
c000ed1d:	e8 2e 8e 00 00       	call   c0017b50 <Thr::terminateFromIRQ(int)>
c000ed22:	83 c4 10             	add    esp,0x10
c000ed25:	eb 05                	jmp    c000ed2c <KeOpcodeFault(void*, void*)+0x50>
c000ed27:	90                   	nop
c000ed28:	90                   	nop
c000ed29:	8d 76 00             	lea    esi,[esi+0x0]
c000ed2c:	c9                   	leave  
c000ed2d:	c3                   	ret    
c000ed2e:	66 90                	xchg   ax,ax

c000ed30 <KeDoubleFault(void*, void*)>:
c000ed30:	55                   	push   ebp
c000ed31:	89 e5                	mov    ebp,esp
c000ed33:	83 ec 08             	sub    esp,0x8
c000ed36:	83 ec 0c             	sub    esp,0xc
c000ed39:	68 4d 43 02 c0       	push   0xc002434d
c000ed3e:	e8 eb 12 00 00       	call   c001002e <KePanic(char const*)>
c000ed43:	83 c4 10             	add    esp,0x10
c000ed46:	90                   	nop
c000ed47:	c9                   	leave  
c000ed48:	c3                   	ret    
c000ed49:	90                   	nop

c000ed4a <GDTEntry::setBase(unsigned int)>:
c000ed4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed4e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed52:	89 c1                	mov    ecx,eax
c000ed54:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ed58:	c1 e9 10             	shr    ecx,0x10
c000ed5b:	c1 e8 18             	shr    eax,0x18
c000ed5e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ed61:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ed64:	c3                   	ret    
c000ed65:	90                   	nop

c000ed66 <GDTEntry::setLimit(unsigned int)>:
c000ed66:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ed6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed6e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ed71:	66 89 01             	mov    WORD PTR [ecx],ax
c000ed74:	83 e2 f0             	and    edx,0xfffffff0
c000ed77:	c1 e8 10             	shr    eax,0x10
c000ed7a:	83 e0 0f             	and    eax,0xf
c000ed7d:	09 d0                	or     eax,edx
c000ed7f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ed82:	c3                   	ret    
c000ed83:	90                   	nop

c000ed84 <GDT::GDT()>:
c000ed84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed88:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ed8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed92:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ed98:	90                   	nop
c000ed99:	c3                   	ret    

c000ed9a <GDT::addEntry(GDTEntry)>:
c000ed9a:	53                   	push   ebx
c000ed9b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ed9f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eda3:	8b 02                	mov    eax,DWORD PTR [edx]
c000eda5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eda9:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000edad:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000edb1:	8d 48 01             	lea    ecx,[eax+0x1]
c000edb4:	c1 e0 03             	shl    eax,0x3
c000edb7:	89 0a                	mov    DWORD PTR [edx],ecx
c000edb9:	5b                   	pop    ebx
c000edba:	c3                   	ret    
c000edbb:	90                   	nop

c000edbc <GDT::getNumberOfEntries()>:
c000edbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edc0:	8b 00                	mov    eax,DWORD PTR [eax]
c000edc2:	c3                   	ret    
c000edc3:	90                   	nop

c000edc4 <GDT::flush()>:
c000edc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edc8:	8b 10                	mov    edx,DWORD PTR [eax]
c000edca:	83 c0 04             	add    eax,0x4
c000edcd:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000edd4:	a3 e2 f0 02 c0       	mov    ds:0xc002f0e2,eax
c000edd9:	66 89 15 e0 f0 02 c0 	mov    WORD PTR ds:0xc002f0e0,dx
c000ede0:	e9 75 15 ff ff       	jmp    c000035a <loadGDT>
c000ede5:	90                   	nop

c000ede6 <GDT::setup()>:
c000ede6:	57                   	push   edi
c000ede7:	56                   	push   esi
c000ede8:	53                   	push   ebx
c000ede9:	83 ec 30             	sub    esp,0x30
c000edec:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000edf0:	6a 00                	push   0x0
c000edf2:	8d 74 24 14          	lea    esi,[esp+0x14]
c000edf6:	56                   	push   esi
c000edf7:	e8 4e ff ff ff       	call   c000ed4a <GDTEntry::setBase(unsigned int)>
c000edfc:	6a 00                	push   0x0
c000edfe:	56                   	push   esi
c000edff:	e8 62 ff ff ff       	call   c000ed66 <GDTEntry::setLimit(unsigned int)>
c000ee04:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000ee0c:	6a 00                	push   0x0
c000ee0e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000ee12:	56                   	push   esi
c000ee13:	e8 32 ff ff ff       	call   c000ed4a <GDTEntry::setBase(unsigned int)>
c000ee18:	68 ff ff ff 00       	push   0xffffff
c000ee1d:	56                   	push   esi
c000ee1e:	e8 43 ff ff ff       	call   c000ed66 <GDTEntry::setLimit(unsigned int)>
c000ee23:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ee27:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ee2b:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000ee2f:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000ee33:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ee38:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ee3d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ee41:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ee45:	89 f8                	mov    eax,edi
c000ee47:	89 fa                	mov    edx,edi
c000ee49:	80 e4 f7             	and    ah,0xf7
c000ee4c:	80 ce 60             	or     dh,0x60
c000ee4f:	89 c7                	mov    edi,eax
c000ee51:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ee55:	80 cc 60             	or     ah,0x60
c000ee58:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ee5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ee60:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000ee64:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee68:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ee6c:	83 c4 20             	add    esp,0x20
c000ee6f:	6a 00                	push   0x0
c000ee71:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ee75:	50                   	push   eax
c000ee76:	e8 cf fe ff ff       	call   c000ed4a <GDTEntry::setBase(unsigned int)>
c000ee7b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000ee7f:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000ee83:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000ee87:	83 e0 3f             	and    eax,0x3f
c000ee8a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000ee8e:	6a 00                	push   0x0
c000ee90:	8d 44 24 34          	lea    eax,[esp+0x34]
c000ee94:	50                   	push   eax
c000ee95:	e8 b0 fe ff ff       	call   c000ed4a <GDTEntry::setBase(unsigned int)>
c000ee9a:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000ee9e:	83 e0 3f             	and    eax,0x3f
c000eea1:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000eea5:	83 c4 0c             	add    esp,0xc
c000eea8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eeac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eeb0:	53                   	push   ebx
c000eeb1:	e8 e4 fe ff ff       	call   c000ed9a <GDT::addEntry(GDTEntry)>
c000eeb6:	83 c4 0c             	add    esp,0xc
c000eeb9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eebd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eec1:	53                   	push   ebx
c000eec2:	e8 d3 fe ff ff       	call   c000ed9a <GDT::addEntry(GDTEntry)>
c000eec7:	83 c4 0c             	add    esp,0xc
c000eeca:	57                   	push   edi
c000eecb:	56                   	push   esi
c000eecc:	53                   	push   ebx
c000eecd:	e8 c8 fe ff ff       	call   c000ed9a <GDT::addEntry(GDTEntry)>
c000eed2:	83 c4 0c             	add    esp,0xc
c000eed5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000eed9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000eedd:	53                   	push   ebx
c000eede:	e8 b7 fe ff ff       	call   c000ed9a <GDT::addEntry(GDTEntry)>
c000eee3:	83 c4 0c             	add    esp,0xc
c000eee6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000eeea:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000eeee:	53                   	push   ebx
c000eeef:	e8 a6 fe ff ff       	call   c000ed9a <GDT::addEntry(GDTEntry)>
c000eef4:	83 c4 0c             	add    esp,0xc
c000eef7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eefb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeff:	53                   	push   ebx
c000ef00:	e8 95 fe ff ff       	call   c000ed9a <GDT::addEntry(GDTEntry)>
c000ef05:	83 c4 0c             	add    esp,0xc
c000ef08:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef0c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef10:	53                   	push   ebx
c000ef11:	e8 84 fe ff ff       	call   c000ed9a <GDT::addEntry(GDTEntry)>
c000ef16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef19:	e8 a6 fe ff ff       	call   c000edc4 <GDT::flush()>
c000ef1e:	83 c4 40             	add    esp,0x40
c000ef21:	5b                   	pop    ebx
c000ef22:	5e                   	pop    esi
c000ef23:	5f                   	pop    edi
c000ef24:	c3                   	ret    

c000ef25 <idleFunction(void*)>:
c000ef25:	83 ec 0c             	sub    esp,0xc
c000ef28:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c000ef2f:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c000ef36:	75 01                	jne    c000ef39 <idleFunction(void*)+0x14>
c000ef38:	fb                   	sti    
c000ef39:	e8 47 b2 00 00       	call   c001a185 <HalSystemIdle()>
c000ef3e:	e8 33 34 01 00       	call   c0022376 <idleCommon()>
c000ef43:	eb f4                	jmp    c000ef39 <idleFunction(void*)+0x14>
c000ef45:	66 90                	xchg   ax,ax
c000ef47:	90                   	nop

c000ef48 <IDTEntry::IDTEntry(bool)>:
c000ef48:	53                   	push   ebx
c000ef49:	83 ec 04             	sub    esp,0x4
c000ef4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef50:	88 04 24             	mov    BYTE PTR [esp],al
c000ef53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef57:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000ef5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef61:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000ef65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef69:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef6c:	83 e2 f0             	and    edx,0xfffffff0
c000ef6f:	83 ca 0e             	or     edx,0xe
c000ef72:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef79:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef7c:	83 e2 ef             	and    edx,0xffffffef
c000ef7f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef82:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000ef86:	85 c0                	test   eax,eax
c000ef88:	74 06                	je     c000ef90 <IDTEntry::IDTEntry(bool)+0x48>
c000ef8a:	b2 03                	mov    dl,0x3
c000ef8c:	eb 06                	jmp    c000ef94 <IDTEntry::IDTEntry(bool)+0x4c>
c000ef8e:	66 90                	xchg   ax,ax
c000ef90:	b2 00                	mov    dl,0x0
c000ef92:	66 90                	xchg   ax,ax
c000ef94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef98:	83 e2 03             	and    edx,0x3
c000ef9b:	89 d3                	mov    ebx,edx
c000ef9d:	c1 e3 05             	shl    ebx,0x5
c000efa0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efa3:	83 e2 9f             	and    edx,0xffffff9f
c000efa6:	88 d1                	mov    cl,dl
c000efa8:	88 da                	mov    dl,bl
c000efaa:	09 ca                	or     edx,ecx
c000efac:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efaf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efb3:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efb6:	83 ca 80             	or     edx,0xffffff80
c000efb9:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efbc:	90                   	nop
c000efbd:	83 c4 04             	add    esp,0x4
c000efc0:	5b                   	pop    ebx
c000efc1:	c3                   	ret    

c000efc2 <IDTEntry::setOffset(unsigned int)>:
c000efc2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000efc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efca:	66 89 02             	mov    WORD PTR [edx],ax
c000efcd:	c1 e8 10             	shr    eax,0x10
c000efd0:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000efd4:	c3                   	ret    
c000efd5:	90                   	nop
c000efd6:	66 90                	xchg   ax,ax

c000efd8 <IDT::IDT()>:
c000efd8:	90                   	nop
c000efd9:	c3                   	ret    

c000efda <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000efda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efde:	83 c0 30             	add    eax,0x30
c000efe1:	c3                   	ret    

c000efe2 <IDT::addEntry(IDTEntry, int)>:
c000efe2:	53                   	push   ebx
c000efe3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efe7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000efeb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000efef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eff3:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000eff6:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000effa:	5b                   	pop    ebx
c000effb:	c3                   	ret    

c000effc <IDT::addEntry(int, void (*)(), bool)>:
c000effc:	53                   	push   ebx
c000effd:	83 ec 10             	sub    esp,0x10
c000f000:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f005:	50                   	push   eax
c000f006:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f00a:	53                   	push   ebx
c000f00b:	e8 38 ff ff ff       	call   c000ef48 <IDTEntry::IDTEntry(bool)>
c000f010:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f014:	53                   	push   ebx
c000f015:	e8 a8 ff ff ff       	call   c000efc2 <IDTEntry::setOffset(unsigned int)>
c000f01a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f01e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f022:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f026:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f02a:	e8 b3 ff ff ff       	call   c000efe2 <IDT::addEntry(IDTEntry, int)>
c000f02f:	83 c4 30             	add    esp,0x30
c000f032:	5b                   	pop    ebx
c000f033:	c3                   	ret    

c000f034 <IDT::flush()>:
c000f034:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f038:	66 c7 05 e8 f0 02 c0 ff 07 	mov    WORD PTR ds:0xc002f0e8,0x7ff
c000f041:	a3 ea f0 02 c0       	mov    ds:0xc002f0ea,eax
c000f046:	0f 01 1d e8 f0 02 c0 	lidtd  ds:0xc002f0e8
c000f04d:	c3                   	ret    

c000f04e <IDT::setup()>:
c000f04e:	57                   	push   edi
c000f04f:	56                   	push   esi
c000f050:	53                   	push   ebx
c000f051:	83 ec 10             	sub    esp,0x10
c000f054:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f058:	6a 00                	push   0x0
c000f05a:	68 50 16 02 c0       	push   0xc0021650
c000f05f:	6a 00                	push   0x0
c000f061:	53                   	push   ebx
c000f062:	e8 95 ff ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f067:	6a 00                	push   0x0
c000f069:	68 60 16 02 c0       	push   0xc0021660
c000f06e:	6a 01                	push   0x1
c000f070:	53                   	push   ebx
c000f071:	e8 86 ff ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f076:	83 c4 20             	add    esp,0x20
c000f079:	6a 00                	push   0x0
c000f07b:	68 6a 16 02 c0       	push   0xc002166a
c000f080:	6a 02                	push   0x2
c000f082:	53                   	push   ebx
c000f083:	e8 74 ff ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f088:	6a 00                	push   0x0
c000f08a:	68 74 16 02 c0       	push   0xc0021674
c000f08f:	6a 03                	push   0x3
c000f091:	53                   	push   ebx
c000f092:	e8 65 ff ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f097:	83 c4 20             	add    esp,0x20
c000f09a:	6a 00                	push   0x0
c000f09c:	68 7e 16 02 c0       	push   0xc002167e
c000f0a1:	6a 04                	push   0x4
c000f0a3:	53                   	push   ebx
c000f0a4:	e8 53 ff ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f0a9:	6a 00                	push   0x0
c000f0ab:	68 88 16 02 c0       	push   0xc0021688
c000f0b0:	6a 05                	push   0x5
c000f0b2:	53                   	push   ebx
c000f0b3:	e8 44 ff ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f0b8:	83 c4 20             	add    esp,0x20
c000f0bb:	6a 00                	push   0x0
c000f0bd:	68 92 16 02 c0       	push   0xc0021692
c000f0c2:	6a 06                	push   0x6
c000f0c4:	53                   	push   ebx
c000f0c5:	e8 32 ff ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f0ca:	6a 00                	push   0x0
c000f0cc:	68 9c 16 02 c0       	push   0xc002169c
c000f0d1:	6a 07                	push   0x7
c000f0d3:	53                   	push   ebx
c000f0d4:	e8 23 ff ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f0d9:	83 c4 20             	add    esp,0x20
c000f0dc:	6a 00                	push   0x0
c000f0de:	68 a6 16 02 c0       	push   0xc00216a6
c000f0e3:	6a 08                	push   0x8
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 11 ff ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	68 ae 16 02 c0       	push   0xc00216ae
c000f0f2:	6a 09                	push   0x9
c000f0f4:	53                   	push   ebx
c000f0f5:	e8 02 ff ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f0fa:	83 c4 20             	add    esp,0x20
c000f0fd:	6a 00                	push   0x0
c000f0ff:	68 b8 16 02 c0       	push   0xc00216b8
c000f104:	6a 0a                	push   0xa
c000f106:	53                   	push   ebx
c000f107:	e8 f0 fe ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f10c:	6a 00                	push   0x0
c000f10e:	68 c0 16 02 c0       	push   0xc00216c0
c000f113:	6a 0b                	push   0xb
c000f115:	53                   	push   ebx
c000f116:	e8 e1 fe ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f11b:	83 c4 20             	add    esp,0x20
c000f11e:	6a 00                	push   0x0
c000f120:	68 c8 16 02 c0       	push   0xc00216c8
c000f125:	6a 0c                	push   0xc
c000f127:	53                   	push   ebx
c000f128:	e8 cf fe ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f12d:	6a 00                	push   0x0
c000f12f:	68 d0 16 02 c0       	push   0xc00216d0
c000f134:	6a 0d                	push   0xd
c000f136:	53                   	push   ebx
c000f137:	e8 c0 fe ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f13c:	83 c4 20             	add    esp,0x20
c000f13f:	6a 00                	push   0x0
c000f141:	68 ea 16 02 c0       	push   0xc00216ea
c000f146:	6a 0e                	push   0xe
c000f148:	53                   	push   ebx
c000f149:	e8 ae fe ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f14e:	6a 00                	push   0x0
c000f150:	68 f2 16 02 c0       	push   0xc00216f2
c000f155:	6a 0f                	push   0xf
c000f157:	53                   	push   ebx
c000f158:	e8 9f fe ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f15d:	83 c4 20             	add    esp,0x20
c000f160:	6a 00                	push   0x0
c000f162:	68 fc 16 02 c0       	push   0xc00216fc
c000f167:	6a 10                	push   0x10
c000f169:	53                   	push   ebx
c000f16a:	e8 8d fe ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f16f:	6a 00                	push   0x0
c000f171:	68 06 17 02 c0       	push   0xc0021706
c000f176:	6a 11                	push   0x11
c000f178:	53                   	push   ebx
c000f179:	e8 7e fe ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f17e:	83 c4 20             	add    esp,0x20
c000f181:	6a 00                	push   0x0
c000f183:	68 10 17 02 c0       	push   0xc0021710
c000f188:	6a 12                	push   0x12
c000f18a:	53                   	push   ebx
c000f18b:	e8 6c fe ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f190:	6a 01                	push   0x1
c000f192:	68 aa 17 02 c0       	push   0xc00217aa
c000f197:	6a 60                	push   0x60
c000f199:	53                   	push   ebx
c000f19a:	e8 5d fe ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f19f:	83 c4 20             	add    esp,0x20
c000f1a2:	6a 00                	push   0x0
c000f1a4:	68 b1 17 02 c0       	push   0xc00217b1
c000f1a9:	6a 20                	push   0x20
c000f1ab:	53                   	push   ebx
c000f1ac:	e8 4b fe ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f1b1:	6a 00                	push   0x0
c000f1b3:	68 9c 17 02 c0       	push   0xc002179c
c000f1b8:	6a 21                	push   0x21
c000f1ba:	53                   	push   ebx
c000f1bb:	e8 3c fe ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f1c0:	83 c4 20             	add    esp,0x20
c000f1c3:	6a 00                	push   0x0
c000f1c5:	68 a3 17 02 c0       	push   0xc00217a3
c000f1ca:	6a 22                	push   0x22
c000f1cc:	53                   	push   ebx
c000f1cd:	e8 2a fe ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f1d2:	6a 00                	push   0x0
c000f1d4:	68 1a 17 02 c0       	push   0xc002171a
c000f1d9:	6a 23                	push   0x23
c000f1db:	53                   	push   ebx
c000f1dc:	e8 1b fe ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f1e1:	83 c4 20             	add    esp,0x20
c000f1e4:	6a 00                	push   0x0
c000f1e6:	68 24 17 02 c0       	push   0xc0021724
c000f1eb:	6a 24                	push   0x24
c000f1ed:	53                   	push   ebx
c000f1ee:	e8 09 fe ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f1f3:	6a 00                	push   0x0
c000f1f5:	68 2e 17 02 c0       	push   0xc002172e
c000f1fa:	6a 25                	push   0x25
c000f1fc:	53                   	push   ebx
c000f1fd:	e8 fa fd ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f202:	83 c4 20             	add    esp,0x20
c000f205:	6a 00                	push   0x0
c000f207:	68 38 17 02 c0       	push   0xc0021738
c000f20c:	6a 26                	push   0x26
c000f20e:	53                   	push   ebx
c000f20f:	e8 e8 fd ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f214:	6a 00                	push   0x0
c000f216:	68 42 17 02 c0       	push   0xc0021742
c000f21b:	6a 27                	push   0x27
c000f21d:	53                   	push   ebx
c000f21e:	e8 d9 fd ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f223:	83 c4 20             	add    esp,0x20
c000f226:	6a 00                	push   0x0
c000f228:	68 4c 17 02 c0       	push   0xc002174c
c000f22d:	6a 28                	push   0x28
c000f22f:	53                   	push   ebx
c000f230:	e8 c7 fd ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f235:	6a 00                	push   0x0
c000f237:	68 56 17 02 c0       	push   0xc0021756
c000f23c:	6a 29                	push   0x29
c000f23e:	53                   	push   ebx
c000f23f:	e8 b8 fd ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f244:	83 c4 20             	add    esp,0x20
c000f247:	6a 00                	push   0x0
c000f249:	68 60 17 02 c0       	push   0xc0021760
c000f24e:	6a 2a                	push   0x2a
c000f250:	53                   	push   ebx
c000f251:	e8 a6 fd ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f256:	6a 00                	push   0x0
c000f258:	68 6a 17 02 c0       	push   0xc002176a
c000f25d:	6a 2b                	push   0x2b
c000f25f:	53                   	push   ebx
c000f260:	e8 97 fd ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f265:	83 c4 20             	add    esp,0x20
c000f268:	6a 00                	push   0x0
c000f26a:	68 74 17 02 c0       	push   0xc0021774
c000f26f:	6a 2c                	push   0x2c
c000f271:	53                   	push   ebx
c000f272:	e8 85 fd ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f277:	6a 00                	push   0x0
c000f279:	68 7e 17 02 c0       	push   0xc002177e
c000f27e:	6a 2d                	push   0x2d
c000f280:	53                   	push   ebx
c000f281:	e8 76 fd ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f286:	83 c4 20             	add    esp,0x20
c000f289:	6a 00                	push   0x0
c000f28b:	68 88 17 02 c0       	push   0xc0021788
c000f290:	6a 2e                	push   0x2e
c000f292:	53                   	push   ebx
c000f293:	e8 64 fd ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f298:	6a 00                	push   0x0
c000f29a:	68 92 17 02 c0       	push   0xc0021792
c000f29f:	6a 2f                	push   0x2f
c000f2a1:	53                   	push   ebx
c000f2a2:	e8 55 fd ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f2a7:	83 c4 20             	add    esp,0x20
c000f2aa:	6a 00                	push   0x0
c000f2ac:	68 b4 18 02 c0       	push   0xc00218b4
c000f2b1:	6a 30                	push   0x30
c000f2b3:	53                   	push   ebx
c000f2b4:	e8 43 fd ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f2b9:	6a 00                	push   0x0
c000f2bb:	68 be 18 02 c0       	push   0xc00218be
c000f2c0:	6a 31                	push   0x31
c000f2c2:	53                   	push   ebx
c000f2c3:	e8 34 fd ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f2c8:	83 c4 20             	add    esp,0x20
c000f2cb:	6a 00                	push   0x0
c000f2cd:	68 c8 18 02 c0       	push   0xc00218c8
c000f2d2:	6a 32                	push   0x32
c000f2d4:	53                   	push   ebx
c000f2d5:	e8 22 fd ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f2da:	6a 00                	push   0x0
c000f2dc:	68 d2 18 02 c0       	push   0xc00218d2
c000f2e1:	6a 33                	push   0x33
c000f2e3:	53                   	push   ebx
c000f2e4:	e8 13 fd ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f2e9:	83 c4 20             	add    esp,0x20
c000f2ec:	6a 00                	push   0x0
c000f2ee:	68 dc 18 02 c0       	push   0xc00218dc
c000f2f3:	6a 34                	push   0x34
c000f2f5:	53                   	push   ebx
c000f2f6:	e8 01 fd ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f2fb:	6a 00                	push   0x0
c000f2fd:	68 e6 18 02 c0       	push   0xc00218e6
c000f302:	6a 35                	push   0x35
c000f304:	53                   	push   ebx
c000f305:	e8 f2 fc ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f30a:	83 c4 20             	add    esp,0x20
c000f30d:	6a 00                	push   0x0
c000f30f:	68 f0 18 02 c0       	push   0xc00218f0
c000f314:	6a 36                	push   0x36
c000f316:	53                   	push   ebx
c000f317:	e8 e0 fc ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f31c:	6a 00                	push   0x0
c000f31e:	68 fa 18 02 c0       	push   0xc00218fa
c000f323:	6a 37                	push   0x37
c000f325:	53                   	push   ebx
c000f326:	e8 d1 fc ff ff       	call   c000effc <IDT::addEntry(int, void (*)(), bool)>
c000f32b:	83 c4 1c             	add    esp,0x1c
c000f32e:	6a 03                	push   0x3
c000f330:	6a 02                	push   0x2
c000f332:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000f338:	e8 77 49 00 00       	call   c0013cb4 <VAS::allocatePages(int, int)>
c000f33d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f344:	89 c6                	mov    esi,eax
c000f346:	e8 9c 09 00 00       	call   c000fce7 <malloc>
c000f34b:	81 c6 00 20 00 00    	add    esi,0x2000
c000f351:	89 04 24             	mov    DWORD PTR [esp],eax
c000f354:	89 c7                	mov    edi,eax
c000f356:	e8 15 3a 00 00       	call   c0012d70 <TSS::TSS()>
c000f35b:	83 c4 0c             	add    esp,0xc
c000f35e:	68 a6 16 02 c0       	push   0xc00216a6
c000f363:	56                   	push   esi
c000f364:	57                   	push   edi
c000f365:	e8 4a 3a 00 00       	call   c0012db4 <TSS::setup(unsigned long, unsigned long)>
c000f36a:	89 c6                	mov    esi,eax
c000f36c:	58                   	pop    eax
c000f36d:	5a                   	pop    edx
c000f36e:	6a 00                	push   0x0
c000f370:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f374:	50                   	push   eax
c000f375:	e8 ce fb ff ff       	call   c000ef48 <IDTEntry::IDTEntry(bool)>
c000f37a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f37e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f383:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f38a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f390:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f394:	80 ce 05             	or     dh,0x5
c000f397:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f39a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f39e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3a2:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f3a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3a8:	e8 87 fc ff ff       	call   c000f034 <IDT::flush()>
c000f3ad:	83 c4 20             	add    esp,0x20
c000f3b0:	5b                   	pop    ebx
c000f3b1:	5e                   	pop    esi
c000f3b2:	5f                   	pop    edi
c000f3b3:	c3                   	ret    

c000f3b4 <CPU::current()>:
c000f3b4:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c000f3b9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f3bf:	c3                   	ret    

c000f3c0 <operator new(unsigned long)>:
c000f3c0:	e9 22 09 00 00       	jmp    c000fce7 <malloc>

c000f3c5 <operator delete(void*)>:
c000f3c5:	e9 3d 09 00 00       	jmp    c000fd07 <rfree>

c000f3ca <disableIRQs()>:
c000f3ca:	fa                   	cli    
c000f3cb:	c3                   	ret    

c000f3cc <enableIRQs()>:
c000f3cc:	fb                   	sti    
c000f3cd:	c3                   	ret    

c000f3ce <lockScheduler()>:
c000f3ce:	fa                   	cli    
c000f3cf:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c000f3d5:	c3                   	ret    

c000f3d6 <unlockScheduler()>:
c000f3d6:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c000f3dd:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c000f3e4:	75 01                	jne    c000f3e7 <unlockScheduler()+0x11>
c000f3e6:	fb                   	sti    
c000f3e7:	c3                   	ret    

c000f3e8 <lockStuff()>:
c000f3e8:	fa                   	cli    
c000f3e9:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c000f3ef:	ff 05 2c fa 02 c0    	inc    DWORD PTR ds:0xc002fa2c
c000f3f5:	c3                   	ret    

c000f3f6 <unlockStuff()>:
c000f3f6:	83 ec 0c             	sub    esp,0xc
c000f3f9:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c000f3fe:	48                   	dec    eax
c000f3ff:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c000f404:	75 18                	jne    c000f41e <unlockStuff()+0x28>
c000f406:	83 3d 28 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa28,0x0
c000f40d:	74 0f                	je     c000f41e <unlockStuff()+0x28>
c000f40f:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c000f419:	e8 22 7e 00 00       	call   c0017240 <schedule()>
c000f41e:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c000f425:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c000f42c:	75 01                	jne    c000f42f <unlockStuff()+0x39>
c000f42e:	fb                   	sti    
c000f42f:	83 c4 0c             	add    esp,0xc
c000f432:	c3                   	ret    

c000f433 <Virt::getAKernelVAS()>:
c000f433:	a1 50 f2 02 c0       	mov    eax,ds:0xc002f250
c000f438:	c3                   	ret    

c000f439 <__not_memcpy>:
c000f439:	57                   	push   edi
c000f43a:	56                   	push   esi
c000f43b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f43f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f443:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f447:	89 c7                	mov    edi,eax
c000f449:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f44b:	5e                   	pop    esi
c000f44c:	5f                   	pop    edi
c000f44d:	c3                   	ret    

c000f44e <KeFormatDate(char*, int, int, int, int, bool)>:
c000f44e:	55                   	push   ebp
c000f44f:	b9 0a 00 00 00       	mov    ecx,0xa
c000f454:	57                   	push   edi
c000f455:	56                   	push   esi
c000f456:	53                   	push   ebx
c000f457:	bb e8 03 00 00       	mov    ebx,0x3e8
c000f45c:	81 ec ac 00 00 00    	sub    esp,0xac
c000f462:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f469:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000f46e:	99                   	cdq    
c000f46f:	f7 f9                	idiv   ecx
c000f471:	89 d5                	mov    ebp,edx
c000f473:	99                   	cdq    
c000f474:	f7 f9                	idiv   ecx
c000f476:	8d 42 30             	lea    eax,[edx+0x30]
c000f479:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f47d:	8d 45 30             	lea    eax,[ebp+0x30]
c000f480:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000f484:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f48b:	99                   	cdq    
c000f48c:	f7 fb                	idiv   ebx
c000f48e:	bb 64 00 00 00       	mov    ebx,0x64
c000f493:	99                   	cdq    
c000f494:	f7 f9                	idiv   ecx
c000f496:	8d 42 30             	lea    eax,[edx+0x30]
c000f499:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000f49d:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f4a4:	99                   	cdq    
c000f4a5:	f7 fb                	idiv   ebx
c000f4a7:	31 db                	xor    ebx,ebx
c000f4a9:	99                   	cdq    
c000f4aa:	f7 f9                	idiv   ecx
c000f4ac:	8d 42 30             	lea    eax,[edx+0x30]
c000f4af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000f4b3:	0f b6 84 24 d4 00 00 00 	movzx  eax,BYTE PTR [esp+0xd4]
c000f4bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f4bf:	0f be 8b 04 f1 02 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffd0efc]
c000f4c6:	83 f9 59             	cmp    ecx,0x59
c000f4c9:	74 1c                	je     c000f4e7 <KeFormatDate(char*, int, int, int, int, bool)+0x99>
c000f4cb:	8b ac 24 cc 00 00 00 	mov    ebp,DWORD PTR [esp+0xcc]
c000f4d2:	83 f9 4d             	cmp    ecx,0x4d
c000f4d5:	0f 84 e3 00 00 00    	je     c000f5be <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000f4db:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c000f4e2:	e9 d7 00 00 00       	jmp    c000f5be <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000f4e7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000f4ec:	74 27                	je     c000f515 <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000f4ee:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000f4f2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f4f7:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f4fb:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000f4ff:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f503:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f507:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000f50b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f50f:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f513:	eb 15                	jmp    c000f52a <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000f515:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f519:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f51d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f521:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f525:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000f52a:	50                   	push   eax
c000f52b:	50                   	push   eax
c000f52c:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000f530:	57                   	push   edi
c000f531:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f535:	56                   	push   esi
c000f536:	e8 05 13 ff ff       	call   c0000840 <strcat>
c000f53b:	83 c4 10             	add    esp,0x10
c000f53e:	83 fb 02             	cmp    ebx,0x2
c000f541:	74 1a                	je     c000f55d <KeFormatDate(char*, int, int, int, int, bool)+0x10f>
c000f543:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f548:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c000f54d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f551:	55                   	push   ebp
c000f552:	55                   	push   ebp
c000f553:	57                   	push   edi
c000f554:	56                   	push   esi
c000f555:	e8 e6 12 ff ff       	call   c0000840 <strcat>
c000f55a:	83 c4 10             	add    esp,0x10
c000f55d:	43                   	inc    ebx
c000f55e:	83 fb 03             	cmp    ebx,0x3
c000f561:	0f 85 58 ff ff ff    	jne    c000f4bf <KeFormatDate(char*, int, int, int, int, bool)+0x71>
c000f567:	51                   	push   ecx
c000f568:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000f56f:	6a 00                	push   0x0
c000f571:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f578:	e8 73 0f ff ff       	call   c00004f0 <memset>
c000f57d:	89 34 24             	mov    DWORD PTR [esp],esi
c000f580:	e8 eb 0f ff ff       	call   c0000570 <strlen>
c000f585:	83 c4 10             	add    esp,0x10
c000f588:	40                   	inc    eax
c000f589:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000f590:	72 17                	jb     c000f5a9 <KeFormatDate(char*, int, int, int, int, bool)+0x15b>
c000f592:	52                   	push   edx
c000f593:	52                   	push   edx
c000f594:	56                   	push   esi
c000f595:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f59c:	e8 9f 10 ff ff       	call   c0000640 <strcpy>
c000f5a1:	83 c4 10             	add    esp,0x10
c000f5a4:	e9 8a 00 00 00       	jmp    c000f633 <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000f5a9:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000f5b0:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000f5b7:	8d 48 ff             	lea    ecx,[eax-0x1]
c000f5ba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f5bc:	eb 75                	jmp    c000f633 <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000f5be:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000f5c2:	89 ef                	mov    edi,ebp
c000f5c4:	50                   	push   eax
c000f5c5:	c1 ff 1f             	sar    edi,0x1f
c000f5c8:	50                   	push   eax
c000f5c9:	57                   	push   edi
c000f5ca:	55                   	push   ebp
c000f5cb:	e8 70 04 00 00       	call   c000fa40 <KeGetDigitsInNumber(long long)>
c000f5d0:	83 c4 10             	add    esp,0x10
c000f5d3:	48                   	dec    eax
c000f5d4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f5d8:	75 1c                	jne    c000f5f6 <KeFormatDate(char*, int, int, int, int, bool)+0x1a8>
c000f5da:	83 f9 44             	cmp    ecx,0x44
c000f5dd:	75 09                	jne    c000f5e8 <KeFormatDate(char*, int, int, int, int, bool)+0x19a>
c000f5df:	80 3d 20 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f120,0x0
c000f5e6:	eb 0c                	jmp    c000f5f4 <KeFormatDate(char*, int, int, int, int, bool)+0x1a6>
c000f5e8:	83 f9 4d             	cmp    ecx,0x4d
c000f5eb:	75 2b                	jne    c000f618 <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000f5ed:	80 3d 21 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f121,0x0
c000f5f4:	74 22                	je     c000f618 <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000f5f6:	89 e8                	mov    eax,ebp
c000f5f8:	b9 0a 00 00 00       	mov    ecx,0xa
c000f5fd:	99                   	cdq    
c000f5fe:	f7 f9                	idiv   ecx
c000f600:	89 d5                	mov    ebp,edx
c000f602:	99                   	cdq    
c000f603:	f7 f9                	idiv   ecx
c000f605:	83 c2 30             	add    edx,0x30
c000f608:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f60c:	8d 55 30             	lea    edx,[ebp+0x30]
c000f60f:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000f613:	e9 0d ff ff ff       	jmp    c000f525 <KeFormatDate(char*, int, int, int, int, bool)+0xd7>
c000f618:	89 e8                	mov    eax,ebp
c000f61a:	b9 0a 00 00 00       	mov    ecx,0xa
c000f61f:	99                   	cdq    
c000f620:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f625:	f7 f9                	idiv   ecx
c000f627:	83 c2 30             	add    edx,0x30
c000f62a:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f62e:	e9 f7 fe ff ff       	jmp    c000f52a <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000f633:	81 c4 ac 00 00 00    	add    esp,0xac
c000f639:	5b                   	pop    ebx
c000f63a:	5e                   	pop    esi
c000f63b:	5f                   	pop    edi
c000f63c:	5d                   	pop    ebp
c000f63d:	c3                   	ret    

c000f63e <KeFormatShortDate(char*, int, int, int, int)>:
c000f63e:	83 ec 14             	sub    esp,0x14
c000f641:	6a 00                	push   0x0
c000f643:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f647:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f64b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f64f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f653:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f657:	e8 f2 fd ff ff       	call   c000f44e <KeFormatDate(char*, int, int, int, int, bool)>
c000f65c:	83 c4 2c             	add    esp,0x2c
c000f65f:	c3                   	ret    

c000f660 <KeFormatLongDate(char*, int, int, int, int)>:
c000f660:	83 ec 14             	sub    esp,0x14
c000f663:	6a 01                	push   0x1
c000f665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f66d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f671:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f675:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f679:	e8 d0 fd ff ff       	call   c000f44e <KeFormatDate(char*, int, int, int, int, bool)>
c000f67e:	83 c4 2c             	add    esp,0x2c
c000f681:	c3                   	ret    

c000f682 <KeSetLocale(klocale_t)>:
c000f682:	57                   	push   edi
c000f683:	b9 09 00 00 00       	mov    ecx,0x9
c000f688:	56                   	push   esi
c000f689:	bf 00 f1 02 c0       	mov    edi,0xc002f100
c000f68e:	fc                   	cld    
c000f68f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f693:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f695:	5e                   	pop    esi
c000f696:	5f                   	pop    edi
c000f697:	c3                   	ret    

c000f698 <KeInitialiseLocale()>:
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	83 ec 3c             	sub    esp,0x3c
c000f69d:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000f6a5:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000f6ad:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000f6b5:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000f6bd:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000f6c4:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000f6cc:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000f6d4:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000f6db:	68 5a 43 02 c0       	push   0xc002435a
c000f6e0:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f6e4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000f6e8:	50                   	push   eax
c000f6e9:	e8 52 0f ff ff       	call   c0000640 <strcpy>
c000f6ee:	83 ec 20             	sub    esp,0x20
c000f6f1:	b9 09 00 00 00       	mov    ecx,0x9
c000f6f6:	fc                   	cld    
c000f6f7:	89 e7                	mov    edi,esp
c000f6f9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f6fb:	e8 82 ff ff ff       	call   c000f682 <KeSetLocale(klocale_t)>
c000f700:	83 c4 64             	add    esp,0x64
c000f703:	5e                   	pop    esi
c000f704:	5f                   	pop    edi
c000f705:	c3                   	ret    

c000f706 <KeFormatCurrency(char*, int, long long, long long)>:
c000f706:	c3                   	ret    

c000f707 <KeFormatCurrency(char*, int, double)>:
c000f707:	c3                   	ret    

c000f708 <KeFormatNumber(char*, long long, long long)>:
c000f708:	c3                   	ret    

c000f709 <KeFormatNumber(char*, double)>:
c000f709:	c3                   	ret    
c000f70a:	66 90                	xchg   ax,ax

c000f70c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000f70c:	55                   	push   ebp
c000f70d:	57                   	push   edi
c000f70e:	56                   	push   esi
c000f70f:	53                   	push   ebx
c000f710:	83 ec 5c             	sub    esp,0x5c
c000f713:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f717:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f71b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000f71f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f723:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000f727:	bb 6f 30 02 c0       	mov    ebx,0xc002306f
c000f72c:	bd 11 00 00 00       	mov    ebp,0x11
c000f731:	89 d0                	mov    eax,edx
c000f733:	83 e0 01             	and    eax,0x1
c000f736:	74 10                	je     c000f748 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x3c>
c000f738:	8a 03                	mov    al,BYTE PTR [ebx]
c000f73a:	88 02                	mov    BYTE PTR [edx],al
c000f73c:	8d 52 01             	lea    edx,[edx+0x1]
c000f73f:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000f742:	83 ed 01             	sub    ebp,0x1
c000f745:	8d 76 00             	lea    esi,[esi+0x0]
c000f748:	89 d0                	mov    eax,edx
c000f74a:	83 e0 02             	and    eax,0x2
c000f74d:	74 11                	je     c000f760 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000f74f:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000f752:	66 89 02             	mov    WORD PTR [edx],ax
c000f755:	8d 52 02             	lea    edx,[edx+0x2]
c000f758:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000f75b:	83 ed 02             	sub    ebp,0x2
c000f75e:	66 90                	xchg   ax,ax
c000f760:	89 e8                	mov    eax,ebp
c000f762:	c1 e8 02             	shr    eax,0x2
c000f765:	fc                   	cld    
c000f766:	89 d7                	mov    edi,edx
c000f768:	89 de                	mov    esi,ebx
c000f76a:	89 c1                	mov    ecx,eax
c000f76c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f76e:	89 f3                	mov    ebx,esi
c000f770:	89 fa                	mov    edx,edi
c000f772:	b9 00 00 00 00       	mov    ecx,0x0
c000f777:	89 e8                	mov    eax,ebp
c000f779:	83 e0 02             	and    eax,0x2
c000f77c:	74 0e                	je     c000f78c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x80>
c000f77e:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000f782:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000f786:	8d 41 02             	lea    eax,[ecx+0x2]
c000f789:	89 c1                	mov    ecx,eax
c000f78b:	90                   	nop
c000f78c:	89 e8                	mov    eax,ebp
c000f78e:	83 e0 01             	and    eax,0x1
c000f791:	74 09                	je     c000f79c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x90>
c000f793:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000f796:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000f799:	8d 76 00             	lea    esi,[esi+0x0]
c000f79c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000f7a0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f7a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f7a8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f7ac:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f7b0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f7b4:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000f7b9:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f7bd:	89 c2                	mov    edx,eax
c000f7bf:	c1 fa 1f             	sar    edx,0x1f
c000f7c2:	52                   	push   edx
c000f7c3:	50                   	push   eax
c000f7c4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f7c8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f7cc:	e8 d3 24 01 00       	call   c0021ca4 <__udivdi3>
c000f7d1:	83 c4 10             	add    esp,0x10
c000f7d4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f7d8:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f7dc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f7e0:	80 f4 00             	xor    ah,0x0
c000f7e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f7e7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f7eb:	80 f4 00             	xor    ah,0x0
c000f7ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f7f2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000f7f6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f7fa:	89 f8                	mov    eax,edi
c000f7fc:	09 f0                	or     eax,esi
c000f7fe:	74 04                	je     c000f804 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xf8>
c000f800:	eb b2                	jmp    c000f7b4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa8>
c000f802:	66 90                	xchg   ax,ax
c000f804:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f808:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f80b:	90                   	nop
c000f80c:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f810:	89 c1                	mov    ecx,eax
c000f812:	89 c3                	mov    ebx,eax
c000f814:	c1 fb 1f             	sar    ebx,0x1f
c000f817:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f81b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f81f:	53                   	push   ebx
c000f820:	51                   	push   ecx
c000f821:	52                   	push   edx
c000f822:	50                   	push   eax
c000f823:	e8 7c 25 01 00       	call   c0021da4 <__umoddi3>
c000f828:	83 c4 10             	add    esp,0x10
c000f82b:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000f830:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000f834:	01 c8                	add    eax,ecx
c000f836:	8a 10                	mov    dl,BYTE PTR [eax]
c000f838:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f83c:	88 10                	mov    BYTE PTR [eax],dl
c000f83e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f842:	89 c2                	mov    edx,eax
c000f844:	c1 fa 1f             	sar    edx,0x1f
c000f847:	52                   	push   edx
c000f848:	50                   	push   eax
c000f849:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f84d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f851:	e8 4e 24 01 00       	call   c0021ca4 <__udivdi3>
c000f856:	83 c4 10             	add    esp,0x10
c000f859:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f85d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f861:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f865:	80 f4 00             	xor    ah,0x0
c000f868:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f86c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f870:	80 f4 00             	xor    ah,0x0
c000f873:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f877:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f87b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f87f:	89 f8                	mov    eax,edi
c000f881:	09 f0                	or     eax,esi
c000f883:	74 03                	je     c000f888 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x17c>
c000f885:	eb 85                	jmp    c000f80c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x100>
c000f887:	90                   	nop
c000f888:	90                   	nop
c000f889:	83 c4 5c             	add    esp,0x5c
c000f88c:	5b                   	pop    ebx
c000f88d:	5e                   	pop    esi
c000f88e:	5f                   	pop    edi
c000f88f:	5d                   	pop    ebp
c000f890:	c3                   	ret    
c000f891:	8d 76 00             	lea    esi,[esi+0x0]

c000f894 <KeBasedSignedIntegerToString(long long, char*, int)>:
c000f894:	55                   	push   ebp
c000f895:	57                   	push   edi
c000f896:	56                   	push   esi
c000f897:	53                   	push   ebx
c000f898:	83 ec 5c             	sub    esp,0x5c
c000f89b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f89f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f8a3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000f8a7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f8ab:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000f8af:	bb 6f 30 02 c0       	mov    ebx,0xc002306f
c000f8b4:	bd 11 00 00 00       	mov    ebp,0x11
c000f8b9:	89 d0                	mov    eax,edx
c000f8bb:	83 e0 01             	and    eax,0x1
c000f8be:	74 10                	je     c000f8d0 <KeBasedSignedIntegerToString(long long, char*, int)+0x3c>
c000f8c0:	8a 03                	mov    al,BYTE PTR [ebx]
c000f8c2:	88 02                	mov    BYTE PTR [edx],al
c000f8c4:	8d 52 01             	lea    edx,[edx+0x1]
c000f8c7:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000f8ca:	83 ed 01             	sub    ebp,0x1
c000f8cd:	8d 76 00             	lea    esi,[esi+0x0]
c000f8d0:	89 d0                	mov    eax,edx
c000f8d2:	83 e0 02             	and    eax,0x2
c000f8d5:	74 11                	je     c000f8e8 <KeBasedSignedIntegerToString(long long, char*, int)+0x54>
c000f8d7:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000f8da:	66 89 02             	mov    WORD PTR [edx],ax
c000f8dd:	8d 52 02             	lea    edx,[edx+0x2]
c000f8e0:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000f8e3:	83 ed 02             	sub    ebp,0x2
c000f8e6:	66 90                	xchg   ax,ax
c000f8e8:	89 e8                	mov    eax,ebp
c000f8ea:	c1 e8 02             	shr    eax,0x2
c000f8ed:	fc                   	cld    
c000f8ee:	89 d7                	mov    edi,edx
c000f8f0:	89 de                	mov    esi,ebx
c000f8f2:	89 c1                	mov    ecx,eax
c000f8f4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f8f6:	89 f3                	mov    ebx,esi
c000f8f8:	89 fa                	mov    edx,edi
c000f8fa:	b9 00 00 00 00       	mov    ecx,0x0
c000f8ff:	89 e8                	mov    eax,ebp
c000f901:	83 e0 02             	and    eax,0x2
c000f904:	74 0e                	je     c000f914 <KeBasedSignedIntegerToString(long long, char*, int)+0x80>
c000f906:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000f90a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000f90e:	8d 41 02             	lea    eax,[ecx+0x2]
c000f911:	89 c1                	mov    ecx,eax
c000f913:	90                   	nop
c000f914:	89 e8                	mov    eax,ebp
c000f916:	83 e0 01             	and    eax,0x1
c000f919:	74 09                	je     c000f924 <KeBasedSignedIntegerToString(long long, char*, int)+0x90>
c000f91b:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000f91e:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000f921:	8d 76 00             	lea    esi,[esi+0x0]
c000f924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000f928:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f92c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000f931:	79 1d                	jns    c000f950 <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000f933:	f7 5c 24 18          	neg    DWORD PTR [esp+0x18]
c000f937:	83 54 24 1c 00       	adc    DWORD PTR [esp+0x1c],0x0
c000f93c:	f7 5c 24 1c          	neg    DWORD PTR [esp+0x1c]
c000f940:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f944:	8d 50 01             	lea    edx,[eax+0x1]
c000f947:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000f94b:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000f94e:	66 90                	xchg   ax,ax
c000f950:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f954:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f958:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f95c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f960:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000f965:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f969:	89 c2                	mov    edx,eax
c000f96b:	c1 fa 1f             	sar    edx,0x1f
c000f96e:	52                   	push   edx
c000f96f:	50                   	push   eax
c000f970:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f974:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f978:	e8 27 23 01 00       	call   c0021ca4 <__udivdi3>
c000f97d:	83 c4 10             	add    esp,0x10
c000f980:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f984:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f988:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f98c:	80 f4 00             	xor    ah,0x0
c000f98f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f993:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f997:	80 f4 00             	xor    ah,0x0
c000f99a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f99e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000f9a2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f9a6:	89 f8                	mov    eax,edi
c000f9a8:	09 f0                	or     eax,esi
c000f9aa:	74 04                	je     c000f9b0 <KeBasedSignedIntegerToString(long long, char*, int)+0x11c>
c000f9ac:	eb b2                	jmp    c000f960 <KeBasedSignedIntegerToString(long long, char*, int)+0xcc>
c000f9ae:	66 90                	xchg   ax,ax
c000f9b0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f9b4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f9b7:	90                   	nop
c000f9b8:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f9bc:	89 c1                	mov    ecx,eax
c000f9be:	89 c3                	mov    ebx,eax
c000f9c0:	c1 fb 1f             	sar    ebx,0x1f
c000f9c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f9c7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f9cb:	53                   	push   ebx
c000f9cc:	51                   	push   ecx
c000f9cd:	52                   	push   edx
c000f9ce:	50                   	push   eax
c000f9cf:	e8 50 21 01 00       	call   c0021b24 <__moddi3>
c000f9d4:	83 c4 10             	add    esp,0x10
c000f9d7:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000f9dc:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000f9e0:	01 c8                	add    eax,ecx
c000f9e2:	8a 10                	mov    dl,BYTE PTR [eax]
c000f9e4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f9e8:	88 10                	mov    BYTE PTR [eax],dl
c000f9ea:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f9ee:	89 c2                	mov    edx,eax
c000f9f0:	c1 fa 1f             	sar    edx,0x1f
c000f9f3:	52                   	push   edx
c000f9f4:	50                   	push   eax
c000f9f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f9f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f9fd:	e8 d6 1f 01 00       	call   c00219d8 <__divdi3>
c000fa02:	83 c4 10             	add    esp,0x10
c000fa05:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fa09:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fa0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fa11:	80 f4 00             	xor    ah,0x0
c000fa14:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fa18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fa1c:	80 f4 00             	xor    ah,0x0
c000fa1f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000fa23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fa27:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fa2b:	89 f8                	mov    eax,edi
c000fa2d:	09 f0                	or     eax,esi
c000fa2f:	74 03                	je     c000fa34 <KeBasedSignedIntegerToString(long long, char*, int)+0x1a0>
c000fa31:	eb 85                	jmp    c000f9b8 <KeBasedSignedIntegerToString(long long, char*, int)+0x124>
c000fa33:	90                   	nop
c000fa34:	90                   	nop
c000fa35:	83 c4 5c             	add    esp,0x5c
c000fa38:	5b                   	pop    ebx
c000fa39:	5e                   	pop    esi
c000fa3a:	5f                   	pop    edi
c000fa3b:	5d                   	pop    ebp
c000fa3c:	c3                   	ret    
c000fa3d:	8d 76 00             	lea    esi,[esi+0x0]

c000fa40 <KeGetDigitsInNumber(long long)>:
c000fa40:	56                   	push   esi
c000fa41:	53                   	push   ebx
c000fa42:	83 ec 24             	sub    esp,0x24
c000fa45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fa4d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa55:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000fa5d:	8d 76 00             	lea    esi,[esi+0x0]
c000fa60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa64:	80 f4 00             	xor    ah,0x0
c000fa67:	89 c3                	mov    ebx,eax
c000fa69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa6d:	80 f4 00             	xor    ah,0x0
c000fa70:	89 c6                	mov    esi,eax
c000fa72:	89 f0                	mov    eax,esi
c000fa74:	09 d8                	or     eax,ebx
c000fa76:	74 28                	je     c000faa0 <KeGetDigitsInNumber(long long)+0x60>
c000fa78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa7c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fa80:	6a 00                	push   0x0
c000fa82:	6a 0a                	push   0xa
c000fa84:	52                   	push   edx
c000fa85:	50                   	push   eax
c000fa86:	e8 4d 1f 01 00       	call   c00219d8 <__divdi3>
c000fa8b:	83 c4 10             	add    esp,0x10
c000fa8e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fa92:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fa96:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000fa9b:	eb c3                	jmp    c000fa60 <KeGetDigitsInNumber(long long)+0x20>
c000fa9d:	8d 76 00             	lea    esi,[esi+0x0]
c000faa0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000faa4:	83 c4 24             	add    esp,0x24
c000faa7:	5b                   	pop    ebx
c000faa8:	5e                   	pop    esi
c000faa9:	c3                   	ret    
c000faaa:	66 90                	xchg   ax,ax

c000faac <KeItoa(unsigned long long, char*)>:
c000faac:	83 ec 1c             	sub    esp,0x1c
c000faaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fab3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fab7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fabb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fabf:	6a 0a                	push   0xa
c000fac1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fac5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fac9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000facd:	e8 3a fc ff ff       	call   c000f70c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000fad2:	83 c4 10             	add    esp,0x10
c000fad5:	90                   	nop
c000fad6:	83 c4 1c             	add    esp,0x1c
c000fad9:	c3                   	ret    
c000fada:	66 90                	xchg   ax,ax

c000fadc <KeItoa(long long, char*)>:
c000fadc:	83 ec 1c             	sub    esp,0x1c
c000fadf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fae3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fae7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000faeb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000faef:	6a 0a                	push   0xa
c000faf1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000faf5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000faf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fafd:	e8 92 fd ff ff       	call   c000f894 <KeBasedSignedIntegerToString(long long, char*, int)>
c000fb02:	83 c4 10             	add    esp,0x10
c000fb05:	90                   	nop
c000fb06:	83 c4 1c             	add    esp,0x1c
c000fb09:	c3                   	ret    
c000fb0a:	66 90                	xchg   ax,ax

c000fb0c <KeXtoa(unsigned long long, char*)>:
c000fb0c:	83 ec 1c             	sub    esp,0x1c
c000fb0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fb17:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fb1f:	6a 10                	push   0x10
c000fb21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fb25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fb29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fb2d:	e8 da fb ff ff       	call   c000f70c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000fb32:	83 c4 10             	add    esp,0x10
c000fb35:	90                   	nop
c000fb36:	83 c4 1c             	add    esp,0x1c
c000fb39:	c3                   	ret    

c000fb3a <sbrk>:
c000fb3a:	55                   	push   ebp
c000fb3b:	57                   	push   edi
c000fb3c:	56                   	push   esi
c000fb3d:	53                   	push   ebx
c000fb3e:	83 ec 1c             	sub    esp,0x1c
c000fb41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fb45:	85 c0                	test   eax,eax
c000fb47:	74 61                	je     c000fbaa <sbrk+0x70>
c000fb49:	78 66                	js     c000fbb1 <sbrk+0x77>
c000fb4b:	8b 15 30 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026e30
c000fb51:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fb55:	05 ff 0f 00 00       	add    eax,0xfff
c000fb5a:	89 c5                	mov    ebp,eax
c000fb5c:	78 6b                	js     c000fbc9 <sbrk+0x8f>
c000fb5e:	c1 fd 0c             	sar    ebp,0xc
c000fb61:	bb 00 00 00 00       	mov    ebx,0x0
c000fb66:	8b 35 50 f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f250
c000fb6c:	8b 3d 30 6e 02 c0    	mov    edi,DWORD PTR ds:0xc0026e30
c000fb72:	e8 ab 06 00 00       	call   c0010222 <Phys::allocatePage()>
c000fb77:	68 01 04 00 00       	push   0x401
c000fb7c:	57                   	push   edi
c000fb7d:	50                   	push   eax
c000fb7e:	56                   	push   esi
c000fb7f:	e8 2c 40 00 00       	call   c0013bb0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000fb84:	81 05 30 6e 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0026e30,0x1000
c000fb8e:	83 c3 01             	add    ebx,0x1
c000fb91:	83 c4 10             	add    esp,0x10
c000fb94:	39 dd                	cmp    ebp,ebx
c000fb96:	75 ce                	jne    c000fb66 <sbrk+0x2c>
c000fb98:	0f 20 d8             	mov    eax,cr3
c000fb9b:	0f 22 d8             	mov    cr3,eax
c000fb9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fba2:	83 c4 1c             	add    esp,0x1c
c000fba5:	5b                   	pop    ebx
c000fba6:	5e                   	pop    esi
c000fba7:	5f                   	pop    edi
c000fba8:	5d                   	pop    ebp
c000fba9:	c3                   	ret    
c000fbaa:	a1 30 6e 02 c0       	mov    eax,ds:0xc0026e30
c000fbaf:	eb f1                	jmp    c000fba2 <sbrk+0x68>
c000fbb1:	83 ec 08             	sub    esp,0x8
c000fbb4:	50                   	push   eax
c000fbb5:	68 60 43 02 c0       	push   0xc0024360
c000fbba:	e8 a5 73 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fbbf:	83 c4 10             	add    esp,0x10
c000fbc2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000fbc7:	eb d9                	jmp    c000fba2 <sbrk+0x68>
c000fbc9:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c000fbcf:	eb 8d                	jmp    c000fb5e <sbrk+0x24>

c000fbd1 <sbrk_thunk>:
c000fbd1:	83 ec 0c             	sub    esp,0xc
c000fbd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbd8:	3d ff bf 00 00       	cmp    eax,0xbfff
c000fbdd:	7f 10                	jg     c000fbef <sbrk_thunk+0x1e>
c000fbdf:	83 ec 0c             	sub    esp,0xc
c000fbe2:	50                   	push   eax
c000fbe3:	e8 52 ff ff ff       	call   c000fb3a <sbrk>
c000fbe8:	83 c4 10             	add    esp,0x10
c000fbeb:	83 c4 0c             	add    esp,0xc
c000fbee:	c3                   	ret    
c000fbef:	83 ec 08             	sub    esp,0x8
c000fbf2:	50                   	push   eax
c000fbf3:	68 90 43 02 c0       	push   0xc0024390
c000fbf8:	e8 67 73 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fbfd:	83 c4 10             	add    esp,0x10
c000fc00:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000fc05:	eb e4                	jmp    c000fbeb <sbrk_thunk+0x1a>

c000fc07 <mmap>:
c000fc07:	55                   	push   ebp
c000fc08:	57                   	push   edi
c000fc09:	56                   	push   esi
c000fc0a:	53                   	push   ebx
c000fc0b:	83 ec 18             	sub    esp,0x18
c000fc0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fc12:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000fc18:	89 fb                	mov    ebx,edi
c000fc1a:	c1 eb 0c             	shr    ebx,0xc
c000fc1d:	53                   	push   ebx
c000fc1e:	e8 aa 38 00 00       	call   c00134cd <Virt::allocateKernelVirtualPages(int)>
c000fc23:	89 c5                	mov    ebp,eax
c000fc25:	83 c4 10             	add    esp,0x10
c000fc28:	85 db                	test   ebx,ebx
c000fc2a:	7e 2f                	jle    c000fc5b <mmap+0x54>
c000fc2c:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000fc32:	01 c7                	add    edi,eax
c000fc34:	89 c3                	mov    ebx,eax
c000fc36:	8b 35 50 f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f250
c000fc3c:	e8 e1 05 00 00       	call   c0010222 <Phys::allocatePage()>
c000fc41:	68 01 04 00 00       	push   0x401
c000fc46:	53                   	push   ebx
c000fc47:	50                   	push   eax
c000fc48:	56                   	push   esi
c000fc49:	e8 62 3f 00 00       	call   c0013bb0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000fc4e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000fc54:	83 c4 10             	add    esp,0x10
c000fc57:	39 fb                	cmp    ebx,edi
c000fc59:	75 db                	jne    c000fc36 <mmap+0x2f>
c000fc5b:	89 e8                	mov    eax,ebp
c000fc5d:	83 c4 0c             	add    esp,0xc
c000fc60:	5b                   	pop    ebx
c000fc61:	5e                   	pop    esi
c000fc62:	5f                   	pop    edi
c000fc63:	5d                   	pop    ebp
c000fc64:	c3                   	ret    

c000fc65 <munmap>:
c000fc65:	83 ec 18             	sub    esp,0x18
c000fc68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc6c:	e8 64 3b 00 00       	call   c00137d5 <Virt::freeKernelVirtualPages(unsigned long)>
c000fc71:	b8 00 00 00 00       	mov    eax,0x0
c000fc76:	83 c4 1c             	add    esp,0x1c
c000fc79:	c3                   	ret    

c000fc7a <liballoc_lock()>:
c000fc7a:	fa                   	cli    
c000fc7b:	83 05 30 fa 02 c0 01 	add    DWORD PTR ds:0xc002fa30,0x1
c000fc82:	b8 00 00 00 00       	mov    eax,0x0
c000fc87:	c3                   	ret    

c000fc88 <liballoc_unlock()>:
c000fc88:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000fc90:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c000fc97:	75 01                	jne    c000fc9a <liballoc_unlock()+0x12>
c000fc99:	fb                   	sti    
c000fc9a:	b8 00 00 00 00       	mov    eax,0x0
c000fc9f:	c3                   	ret    

c000fca0 <liballoc_alloc(int)>:
c000fca0:	83 ec 10             	sub    esp,0x10
c000fca3:	6a 01                	push   0x1
c000fca5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fca9:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000fcaf:	e8 00 40 00 00       	call   c0013cb4 <VAS::allocatePages(int, int)>
c000fcb4:	83 c4 1c             	add    esp,0x1c
c000fcb7:	c3                   	ret    

c000fcb8 <liballoc_free(void*, int)>:
c000fcb8:	83 ec 14             	sub    esp,0x14
c000fcbb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fcbf:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000fcc5:	e8 48 3c 00 00       	call   c0013912 <VAS::freeAllocatedPages(unsigned long)>
c000fcca:	b8 00 00 00 00       	mov    eax,0x0
c000fccf:	83 c4 1c             	add    esp,0x1c
c000fcd2:	c3                   	ret    

c000fcd3 <realloc>:
c000fcd3:	83 ec 14             	sub    esp,0x14
c000fcd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcde:	e8 74 1a ff ff       	call   c0001757 <dlrealloc>
c000fce3:	83 c4 1c             	add    esp,0x1c
c000fce6:	c3                   	ret    

c000fce7 <malloc>:
c000fce7:	83 ec 18             	sub    esp,0x18
c000fcea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcee:	e8 27 15 ff ff       	call   c000121a <dlmalloc>
c000fcf3:	83 c4 1c             	add    esp,0x1c
c000fcf6:	c3                   	ret    

c000fcf7 <free>:
c000fcf7:	83 ec 18             	sub    esp,0x18
c000fcfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcfe:	e8 50 10 ff ff       	call   c0000d53 <dlfree>
c000fd03:	83 c4 1c             	add    esp,0x1c
c000fd06:	c3                   	ret    

c000fd07 <rfree>:
c000fd07:	83 ec 18             	sub    esp,0x18
c000fd0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd0e:	e8 40 10 ff ff       	call   c0000d53 <dlfree>
c000fd13:	83 c4 1c             	add    esp,0x1c
c000fd16:	c3                   	ret    

c000fd17 <calloc>:
c000fd17:	56                   	push   esi
c000fd18:	53                   	push   ebx
c000fd19:	83 ec 10             	sub    esp,0x10
c000fd1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fd20:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000fd25:	53                   	push   ebx
c000fd26:	e8 bc ff ff ff       	call   c000fce7 <malloc>
c000fd2b:	89 c6                	mov    esi,eax
c000fd2d:	83 c4 0c             	add    esp,0xc
c000fd30:	53                   	push   ebx
c000fd31:	6a 00                	push   0x0
c000fd33:	50                   	push   eax
c000fd34:	e8 b7 07 ff ff       	call   c00004f0 <memset>
c000fd39:	89 f0                	mov    eax,esi
c000fd3b:	83 c4 14             	add    esp,0x14
c000fd3e:	5b                   	pop    ebx
c000fd3f:	5e                   	pop    esi
c000fd40:	c3                   	ret    
c000fd41:	66 90                	xchg   ax,ax
c000fd43:	90                   	nop

c000fd44 <KeMailboxTryPost(Mailbox*, void*)>:
c000fd44:	83 ec 10             	sub    esp,0x10
c000fd47:	fa                   	cli    
c000fd48:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fd4d:	83 c0 01             	add    eax,0x1
c000fd50:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c000fd55:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fd5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd61:	85 c0                	test   eax,eax
c000fd63:	75 23                	jne    c000fd88 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000fd65:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd69:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fd6d:	89 10                	mov    DWORD PTR [eax],edx
c000fd6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd76:	8d 50 01             	lea    edx,[eax+0x1]
c000fd79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd7d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fd80:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000fd85:	8d 76 00             	lea    esi,[esi+0x0]
c000fd88:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000fd90:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fd95:	85 c0                	test   eax,eax
c000fd97:	75 03                	jne    c000fd9c <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000fd99:	fb                   	sti    
c000fd9a:	66 90                	xchg   ax,ax
c000fd9c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fda0:	83 c4 10             	add    esp,0x10
c000fda3:	c3                   	ret    

c000fda4 <KeMailboxTryGet(Mailbox*, void**)>:
c000fda4:	83 ec 10             	sub    esp,0x10
c000fda7:	fa                   	cli    
c000fda8:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fdad:	83 c0 01             	add    eax,0x1
c000fdb0:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c000fdb5:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fdba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fdbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fdc1:	83 f8 01             	cmp    eax,0x1
c000fdc4:	75 22                	jne    c000fde8 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000fdc6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fdca:	8b 10                	mov    edx,DWORD PTR [eax]
c000fdcc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fdd0:	89 10                	mov    DWORD PTR [eax],edx
c000fdd2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fdd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fdd9:	8d 50 ff             	lea    edx,[eax-0x1]
c000fddc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fde0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fde3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000fde8:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000fdf0:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fdf5:	85 c0                	test   eax,eax
c000fdf7:	75 03                	jne    c000fdfc <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000fdf9:	fb                   	sti    
c000fdfa:	66 90                	xchg   ax,ax
c000fdfc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fe00:	83 c4 10             	add    esp,0x10
c000fe03:	c3                   	ret    

c000fe04 <KeMailboxCreate()>:
c000fe04:	83 ec 1c             	sub    esp,0x1c
c000fe07:	83 ec 0c             	sub    esp,0xc
c000fe0a:	6a 08                	push   0x8
c000fe0c:	e8 d6 fe ff ff       	call   c000fce7 <malloc>
c000fe11:	83 c4 10             	add    esp,0x10
c000fe14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe1c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fe22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe26:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fe2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe31:	83 c4 1c             	add    esp,0x1c
c000fe34:	c3                   	ret    
c000fe35:	8d 76 00             	lea    esi,[esi+0x0]

c000fe38 <KeMailboxPost(Mailbox*, void*)>:
c000fe38:	83 ec 1c             	sub    esp,0x1c
c000fe3b:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fe40:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fe44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fe48:	e8 f7 fe ff ff       	call   c000fd44 <KeMailboxTryPost(Mailbox*, void*)>
c000fe4d:	83 c4 08             	add    esp,0x8
c000fe50:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fe54:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fe58:	83 f0 01             	xor    eax,0x1
c000fe5b:	0f b6 c0             	movzx  eax,al
c000fe5e:	85 c0                	test   eax,eax
c000fe60:	74 26                	je     c000fe88 <KeMailboxPost(Mailbox*, void*)+0x50>
c000fe62:	fa                   	cli    
c000fe63:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fe68:	83 c0 01             	add    eax,0x1
c000fe6b:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c000fe70:	e8 cb 73 00 00       	call   c0017240 <schedule()>
c000fe75:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000fe7d:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fe82:	85 c0                	test   eax,eax
c000fe84:	75 02                	jne    c000fe88 <KeMailboxPost(Mailbox*, void*)+0x50>
c000fe86:	fb                   	sti    
c000fe87:	90                   	nop
c000fe88:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fe8d:	85 c0                	test   eax,eax
c000fe8f:	75 03                	jne    c000fe94 <KeMailboxPost(Mailbox*, void*)+0x5c>
c000fe91:	eb ad                	jmp    c000fe40 <KeMailboxPost(Mailbox*, void*)+0x8>
c000fe93:	90                   	nop
c000fe94:	90                   	nop
c000fe95:	83 c4 1c             	add    esp,0x1c
c000fe98:	c3                   	ret    
c000fe99:	8d 76 00             	lea    esi,[esi+0x0]

c000fe9c <KeMailboxGet(Mailbox*, void**)>:
c000fe9c:	83 ec 1c             	sub    esp,0x1c
c000fe9f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fea4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fea8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000feac:	e8 f3 fe ff ff       	call   c000fda4 <KeMailboxTryGet(Mailbox*, void**)>
c000feb1:	83 c4 08             	add    esp,0x8
c000feb4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000feb8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000febc:	83 f0 01             	xor    eax,0x1
c000febf:	0f b6 c0             	movzx  eax,al
c000fec2:	85 c0                	test   eax,eax
c000fec4:	74 26                	je     c000feec <KeMailboxGet(Mailbox*, void**)+0x50>
c000fec6:	fa                   	cli    
c000fec7:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fecc:	83 c0 01             	add    eax,0x1
c000fecf:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c000fed4:	e8 67 73 00 00       	call   c0017240 <schedule()>
c000fed9:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000fee1:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fee6:	85 c0                	test   eax,eax
c000fee8:	75 02                	jne    c000feec <KeMailboxGet(Mailbox*, void**)+0x50>
c000feea:	fb                   	sti    
c000feeb:	90                   	nop
c000feec:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fef1:	85 c0                	test   eax,eax
c000fef3:	75 03                	jne    c000fef8 <KeMailboxGet(Mailbox*, void**)+0x5c>
c000fef5:	eb ad                	jmp    c000fea4 <KeMailboxGet(Mailbox*, void**)+0x8>
c000fef7:	90                   	nop
c000fef8:	90                   	nop
c000fef9:	83 c4 1c             	add    esp,0x1c
c000fefc:	c3                   	ret    
c000fefd:	8d 76 00             	lea    esi,[esi+0x0]

c000ff00 <KeMailboxDestroy(Mailbox*)>:
c000ff00:	83 ec 0c             	sub    esp,0xc
c000ff03:	83 ec 0c             	sub    esp,0xc
c000ff06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff0a:	e8 e8 fd ff ff       	call   c000fcf7 <free>
c000ff0f:	83 c4 10             	add    esp,0x10
c000ff12:	90                   	nop
c000ff13:	83 c4 0c             	add    esp,0xc
c000ff16:	c3                   	ret    

c000ff17 <KeEntryPoint>:
c000ff17:	57                   	push   edi
c000ff18:	bf f9 03 00 00       	mov    edi,0x3f9
c000ff1d:	56                   	push   esi
c000ff1e:	89 fa                	mov    edx,edi
c000ff20:	53                   	push   ebx
c000ff21:	31 f6                	xor    esi,esi
c000ff23:	83 ec 2c             	sub    esp,0x2c
c000ff26:	a1 00 05 00 00       	mov    eax,ds:0x500
c000ff2b:	a3 24 f1 02 c0       	mov    ds:0xc002f124,eax
c000ff30:	89 f0                	mov    eax,esi
c000ff32:	ee                   	out    dx,al
c000ff33:	bb fb 03 00 00       	mov    ebx,0x3fb
c000ff38:	b0 80                	mov    al,0x80
c000ff3a:	89 da                	mov    edx,ebx
c000ff3c:	ee                   	out    dx,al
c000ff3d:	b1 03                	mov    cl,0x3
c000ff3f:	ba f8 03 00 00       	mov    edx,0x3f8
c000ff44:	88 c8                	mov    al,cl
c000ff46:	ee                   	out    dx,al
c000ff47:	89 f0                	mov    eax,esi
c000ff49:	89 fa                	mov    edx,edi
c000ff4b:	ee                   	out    dx,al
c000ff4c:	88 c8                	mov    al,cl
c000ff4e:	89 da                	mov    edx,ebx
c000ff50:	ee                   	out    dx,al
c000ff51:	b0 c7                	mov    al,0xc7
c000ff53:	ba fa 03 00 00       	mov    edx,0x3fa
c000ff58:	ee                   	out    dx,al
c000ff59:	b0 0b                	mov    al,0xb
c000ff5b:	ba fc 03 00 00       	mov    edx,0x3fc
c000ff60:	ee                   	out    dx,al
c000ff61:	68 9f 43 02 c0       	push   0xc002439f
c000ff66:	e8 f9 6f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ff6b:	e8 fc d2 ff ff       	call   c000d26c <KeDisplaySplashScreen()>
c000ff70:	a1 24 05 00 00       	mov    eax,ds:0x524
c000ff75:	05 ff 0f 00 00       	add    eax,0xfff
c000ff7a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ff7f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff82:	e8 2c 04 00 00       	call   c00103b3 <Phys::physicalMemorySetup(unsigned int)>
c000ff87:	e8 1f 37 00 00       	call   c00136ab <Virt::virtualMemorySetup()>
c000ff8c:	e8 25 d2 ff ff       	call   c000d1b6 <KeInitialiseAtexit()>
c000ff91:	c7 04 24 b6 43 02 c0 	mov    DWORD PTR [esp],0xc00243b6
c000ff98:	e8 c7 6f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ff9d:	58                   	pop    eax
c000ff9e:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000ffa2:	53                   	push   ebx
c000ffa3:	e8 ea 39 00 00       	call   c0013992 <VAS::VAS()>
c000ffa8:	c7 04 24 c6 43 02 c0 	mov    DWORD PTR [esp],0xc00243c6
c000ffaf:	89 1d 50 f2 02 c0    	mov    DWORD PTR ds:0xc002f250,ebx
c000ffb5:	e8 aa 6f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ffba:	e8 ff 1e 01 00       	call   c0021ebe <_init>
c000ffbf:	c7 04 24 da 43 02 c0 	mov    DWORD PTR [esp],0xc00243da
c000ffc6:	e8 99 6f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ffcb:	c7 04 24 6c 01 00 00 	mov    DWORD PTR [esp],0x16c
c000ffd2:	e8 10 fd ff ff       	call   c000fce7 <malloc>
c000ffd7:	89 04 24             	mov    DWORD PTR [esp],eax
c000ffda:	89 c6                	mov    esi,eax
c000ffdc:	e8 6d e2 ff ff       	call   c000e24e <Computer::Computer()>
c000ffe1:	5a                   	pop    edx
c000ffe2:	89 35 d0 d0 02 c0    	mov    DWORD PTR ds:0xc002d0d0,esi
c000ffe8:	59                   	pop    ecx
c000ffe9:	56                   	push   esi
c000ffea:	68 e9 43 02 c0       	push   0xc00243e9
c000ffef:	e8 70 6f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fff4:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c000fff9:	8b 10                	mov    edx,DWORD PTR [eax]
c000fffb:	53                   	push   ebx
c000fffc:	6a 00                	push   0x0
c000fffe:	6a 00                	push   0x0
c0010000:	50                   	push   eax
c0010001:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010004:	83 c4 14             	add    esp,0x14
c0010007:	53                   	push   ebx
c0010008:	e8 3b 3a 00 00       	call   c0013a48 <VAS::~VAS()>
c001000d:	83 c4 30             	add    esp,0x30
c0010010:	5b                   	pop    ebx
c0010011:	5e                   	pop    esi
c0010012:	5f                   	pop    edi
c0010013:	c3                   	ret    

c0010014 <Mutex::Mutex()>:
c0010014:	83 ec 0c             	sub    esp,0xc
c0010017:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001001b:	83 ec 08             	sub    esp,0x8
c001001e:	6a 01                	push   0x1
c0010020:	50                   	push   eax
c0010021:	e8 56 0c 00 00       	call   c0010c7c <Semaphore::Semaphore(int)>
c0010026:	83 c4 10             	add    esp,0x10
c0010029:	90                   	nop
c001002a:	83 c4 0c             	add    esp,0xc
c001002d:	c3                   	ret    

c001002e <KePanic(char const*)>:
c001002e:	c6 05 28 f1 02 c0 01 	mov    BYTE PTR ds:0xc002f128,0x1
c0010035:	e9 f3 a2 00 00       	jmp    c001a32d <HalPanic(char const*)>

c001003a <Phys::allocateDMA(unsigned long)>:
c001003a:	55                   	push   ebp
c001003b:	31 ed                	xor    ebp,ebp
c001003d:	57                   	push   edi
c001003e:	56                   	push   esi
c001003f:	53                   	push   ebx
c0010040:	31 db                	xor    ebx,ebx
c0010042:	83 ec 1c             	sub    esp,0x1c
c0010045:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010049:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010051:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0010057:	31 c0                	xor    eax,eax
c0010059:	c1 ef 0c             	shr    edi,0xc
c001005c:	eb 1b                	jmp    c0010079 <Phys::allocateDMA(unsigned long)+0x3f>
c001005e:	85 c0                	test   eax,eax
c0010060:	75 06                	jne    c0010068 <Phys::allocateDMA(unsigned long)+0x2e>
c0010062:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010066:	89 dd                	mov    ebp,ebx
c0010068:	8d 70 01             	lea    esi,[eax+0x1]
c001006b:	39 f7                	cmp    edi,esi
c001006d:	74 37                	je     c00100a6 <Phys::allocateDMA(unsigned long)+0x6c>
c001006f:	89 f0                	mov    eax,esi
c0010071:	83 c3 01             	add    ebx,0x1
c0010074:	83 fb 0f             	cmp    ebx,0xf
c0010077:	7f 13                	jg     c001008c <Phys::allocateDMA(unsigned long)+0x52>
c0010079:	80 bb 44 f1 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd0ebc],0x0
c0010080:	74 dc                	je     c001005e <Phys::allocateDMA(unsigned long)+0x24>
c0010082:	31 c0                	xor    eax,eax
c0010084:	83 c3 01             	add    ebx,0x1
c0010087:	83 fb 0f             	cmp    ebx,0xf
c001008a:	7e ed                	jle    c0010079 <Phys::allocateDMA(unsigned long)+0x3f>
c001008c:	83 ec 0c             	sub    esp,0xc
c001008f:	68 00 44 02 c0       	push   0xc0024400
c0010094:	e8 95 ff ff ff       	call   c001002e <KePanic(char const*)>
c0010099:	83 c4 10             	add    esp,0x10
c001009c:	31 c0                	xor    eax,eax
c001009e:	83 c4 1c             	add    esp,0x1c
c00100a1:	5b                   	pop    ebx
c00100a2:	5e                   	pop    esi
c00100a3:	5f                   	pop    edi
c00100a4:	5d                   	pop    ebp
c00100a5:	c3                   	ret    
c00100a6:	89 e9                	mov    ecx,ebp
c00100a8:	c1 f9 04             	sar    ecx,0x4
c00100ab:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00100af:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c00100b3:	89 ca                	mov    edx,ecx
c00100b5:	83 ea 01             	sub    edx,0x1
c00100b8:	79 03                	jns    c00100bd <Phys::allocateDMA(unsigned long)+0x83>
c00100ba:	8d 51 0e             	lea    edx,[ecx+0xe]
c00100bd:	c1 fa 04             	sar    edx,0x4
c00100c0:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c00100c4:	74 08                	je     c00100ce <Phys::allocateDMA(unsigned long)+0x94>
c00100c6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00100ca:	31 c0                	xor    eax,eax
c00100cc:	eb b6                	jmp    c0010084 <Phys::allocateDMA(unsigned long)+0x4a>
c00100ce:	85 f6                	test   esi,esi
c00100d0:	74 17                	je     c00100e9 <Phys::allocateDMA(unsigned long)+0xaf>
c00100d2:	8d 95 44 f1 02 c0    	lea    edx,[ebp-0x3ffd0ebc]
c00100d8:	8d 84 05 45 f1 02 c0 	lea    eax,[ebp+eax*1-0x3ffd0ebb]
c00100df:	c6 02 01             	mov    BYTE PTR [edx],0x1
c00100e2:	83 c2 01             	add    edx,0x1
c00100e5:	39 d0                	cmp    eax,edx
c00100e7:	75 f6                	jne    c00100df <Phys::allocateDMA(unsigned long)+0xa5>
c00100e9:	a1 3c f1 02 c0       	mov    eax,ds:0xc002f13c
c00100ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00100f2:	01 f8                	add    eax,edi
c00100f4:	85 d2                	test   edx,edx
c00100f6:	a3 3c f1 02 c0       	mov    ds:0xc002f13c,eax
c00100fb:	74 17                	je     c0010114 <Phys::allocateDMA(unsigned long)+0xda>
c00100fd:	83 ec 0c             	sub    esp,0xc
c0010100:	68 00 44 02 c0       	push   0xc0024400
c0010105:	e8 24 ff ff ff       	call   c001002e <KePanic(char const*)>
c001010a:	83 c4 10             	add    esp,0x10
c001010d:	89 f0                	mov    eax,esi
c001010f:	e9 5d ff ff ff       	jmp    c0010071 <Phys::allocateDMA(unsigned long)+0x37>
c0010114:	c1 e5 0c             	shl    ebp,0xc
c0010117:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c001011d:	e9 7c ff ff ff       	jmp    c001009e <Phys::allocateDMA(unsigned long)+0x64>

c0010122 <Phys::freeDMA(unsigned long, unsigned long)>:
c0010122:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010126:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c001012c:	a1 3c f1 02 c0       	mov    eax,ds:0xc002f13c
c0010131:	c1 ea 0c             	shr    edx,0xc
c0010134:	29 d0                	sub    eax,edx
c0010136:	a3 3c f1 02 c0       	mov    ds:0xc002f13c,eax
c001013b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001013f:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0010144:	c1 e8 0c             	shr    eax,0xc
c0010147:	85 d2                	test   edx,edx
c0010149:	74 11                	je     c001015c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c001014b:	05 44 f1 02 c0       	add    eax,0xc002f144
c0010150:	01 c2                	add    edx,eax
c0010152:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0010155:	83 c0 01             	add    eax,0x1
c0010158:	39 d0                	cmp    eax,edx
c001015a:	75 f6                	jne    c0010152 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c001015c:	c3                   	ret    

c001015d <Phys::setPageState(unsigned long, bool)>:
c001015d:	57                   	push   edi
c001015e:	56                   	push   esi
c001015f:	8b 35 34 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026e34
c0010165:	53                   	push   ebx
c0010166:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c001016b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001016f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010173:	0f b6 c0             	movzx  eax,al
c0010176:	89 ca                	mov    edx,ecx
c0010178:	83 e1 07             	and    ecx,0x7
c001017b:	c1 ea 03             	shr    edx,0x3
c001017e:	d3 c3                	rol    ebx,cl
c0010180:	01 d6                	add    esi,edx
c0010182:	d3 e0                	shl    eax,cl
c0010184:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0010187:	21 fb                	and    ebx,edi
c0010189:	88 1e                	mov    BYTE PTR [esi],bl
c001018b:	8b 1d 34 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026e34
c0010191:	01 da                	add    edx,ebx
c0010193:	8a 0a                	mov    cl,BYTE PTR [edx]
c0010195:	09 c8                	or     eax,ecx
c0010197:	88 02                	mov    BYTE PTR [edx],al
c0010199:	5b                   	pop    ebx
c001019a:	5e                   	pop    esi
c001019b:	5f                   	pop    edi
c001019c:	c3                   	ret    

c001019d <Phys::getPageState(unsigned long)>:
c001019d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00101a1:	8b 15 34 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026e34
c00101a7:	89 c8                	mov    eax,ecx
c00101a9:	83 e1 07             	and    ecx,0x7
c00101ac:	c1 e8 03             	shr    eax,0x3
c00101af:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c00101b3:	d3 f8                	sar    eax,cl
c00101b5:	83 e0 01             	and    eax,0x1
c00101b8:	c3                   	ret    

c00101b9 <Phys::freePage(unsigned long)>:
c00101b9:	53                   	push   ebx
c00101ba:	83 ec 08             	sub    esp,0x8
c00101bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101c1:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c00101c7:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00101cd:	76 41                	jbe    c0010210 <Phys::freePage(unsigned long)+0x57>
c00101cf:	c1 e8 0c             	shr    eax,0xc
c00101d2:	50                   	push   eax
c00101d3:	89 c3                	mov    ebx,eax
c00101d5:	e8 c3 ff ff ff       	call   c001019d <Phys::getPageState(unsigned long)>
c00101da:	5a                   	pop    edx
c00101db:	84 c0                	test   al,al
c00101dd:	74 20                	je     c00101ff <Phys::freePage(unsigned long)+0x46>
c00101df:	83 ec 08             	sub    esp,0x8
c00101e2:	a1 3c f1 02 c0       	mov    eax,ds:0xc002f13c
c00101e7:	6a 00                	push   0x0
c00101e9:	83 e8 01             	sub    eax,0x1
c00101ec:	53                   	push   ebx
c00101ed:	a3 3c f1 02 c0       	mov    ds:0xc002f13c,eax
c00101f2:	e8 66 ff ff ff       	call   c001015d <Phys::setPageState(unsigned long, bool)>
c00101f7:	83 c4 10             	add    esp,0x10
c00101fa:	83 c4 08             	add    esp,0x8
c00101fd:	5b                   	pop    ebx
c00101fe:	c3                   	ret    
c00101ff:	c7 44 24 10 05 45 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024505
c0010207:	83 c4 08             	add    esp,0x8
c001020a:	5b                   	pop    ebx
c001020b:	e9 1e fe ff ff       	jmp    c001002e <KePanic(char const*)>
c0010210:	68 00 10 00 00       	push   0x1000
c0010215:	50                   	push   eax
c0010216:	e8 07 ff ff ff       	call   c0010122 <Phys::freeDMA(unsigned long, unsigned long)>
c001021b:	59                   	pop    ecx
c001021c:	5b                   	pop    ebx
c001021d:	83 c4 08             	add    esp,0x8
c0010220:	5b                   	pop    ebx
c0010221:	c3                   	ret    

c0010222 <Phys::allocatePage()>:
c0010222:	56                   	push   esi
c0010223:	53                   	push   ebx
c0010224:	83 ec 14             	sub    esp,0x14
c0010227:	8b 35 30 f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f130
c001022d:	89 f3                	mov    ebx,esi
c001022f:	eb 0a                	jmp    c001023b <Phys::allocatePage()+0x19>
c0010231:	89 1d 30 f1 02 c0    	mov    DWORD PTR ds:0xc002f130,ebx
c0010237:	39 de                	cmp    esi,ebx
c0010239:	74 26                	je     c0010261 <Phys::allocatePage()+0x3f>
c001023b:	53                   	push   ebx
c001023c:	e8 5c ff ff ff       	call   c001019d <Phys::getPageState(unsigned long)>
c0010241:	59                   	pop    ecx
c0010242:	84 c0                	test   al,al
c0010244:	74 67                	je     c00102ad <Phys::allocatePage()+0x8b>
c0010246:	83 c3 01             	add    ebx,0x1
c0010249:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c001024f:	75 e0                	jne    c0010231 <Phys::allocatePage()+0xf>
c0010251:	31 db                	xor    ebx,ebx
c0010253:	c7 05 30 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f130,0x0
c001025d:	39 de                	cmp    esi,ebx
c001025f:	75 da                	jne    c001023b <Phys::allocatePage()+0x19>
c0010261:	83 ec 0c             	sub    esp,0xc
c0010264:	a0 54 f1 02 c0       	mov    al,ds:0xc002f154
c0010269:	83 f0 01             	xor    eax,0x1
c001026c:	a2 54 f1 02 c0       	mov    ds:0xc002f154,al
c0010271:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010276:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010279:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c001027f:	51                   	push   ecx
c0010280:	e8 73 44 00 00       	call   c00146f8 <VAS::scanForEviction()>
c0010285:	83 c4 10             	add    esp,0x10
c0010288:	85 c0                	test   eax,eax
c001028a:	75 48                	jne    c00102d4 <Phys::allocatePage()+0xb2>
c001028c:	83 ec 0c             	sub    esp,0xc
c001028f:	68 28 44 02 c0       	push   0xc0024428
c0010294:	e8 95 fd ff ff       	call   c001002e <KePanic(char const*)>
c0010299:	83 c4 10             	add    esp,0x10
c001029c:	8b 1d 30 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f130
c00102a2:	53                   	push   ebx
c00102a3:	e8 f5 fe ff ff       	call   c001019d <Phys::getPageState(unsigned long)>
c00102a8:	59                   	pop    ecx
c00102a9:	84 c0                	test   al,al
c00102ab:	75 99                	jne    c0010246 <Phys::allocatePage()+0x24>
c00102ad:	6a 01                	push   0x1
c00102af:	53                   	push   ebx
c00102b0:	e8 a8 fe ff ff       	call   c001015d <Phys::setPageState(unsigned long, bool)>
c00102b5:	8b 1d 3c f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f13c
c00102bb:	a1 30 f1 02 c0       	mov    eax,ds:0xc002f130
c00102c0:	83 c3 01             	add    ebx,0x1
c00102c3:	5e                   	pop    esi
c00102c4:	89 1d 3c f1 02 c0    	mov    DWORD PTR ds:0xc002f13c,ebx
c00102ca:	c1 e0 0c             	shl    eax,0xc
c00102cd:	5a                   	pop    edx
c00102ce:	83 c4 14             	add    esp,0x14
c00102d1:	5b                   	pop    ebx
c00102d2:	5e                   	pop    esi
c00102d3:	c3                   	ret    
c00102d4:	83 ec 08             	sub    esp,0x8
c00102d7:	8b 15 3c f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f13c
c00102dd:	6a 01                	push   0x1
c00102df:	83 c2 01             	add    edx,0x1
c00102e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00102e6:	89 15 3c f1 02 c0    	mov    DWORD PTR ds:0xc002f13c,edx
c00102ec:	89 c2                	mov    edx,eax
c00102ee:	c1 ea 0c             	shr    edx,0xc
c00102f1:	52                   	push   edx
c00102f2:	e8 66 fe ff ff       	call   c001015d <Phys::setPageState(unsigned long, bool)>
c00102f7:	83 c4 10             	add    esp,0x10
c00102fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00102fe:	eb ce                	jmp    c00102ce <Phys::allocatePage()+0xac>

c0010300 <Phys::allocateContiguousPages(int)>:
c0010300:	57                   	push   edi
c0010301:	56                   	push   esi
c0010302:	53                   	push   ebx
c0010303:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0010307:	fa                   	cli    
c0010308:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c001030e:	83 ec 0c             	sub    esp,0xc
c0010311:	83 c2 01             	add    edx,0x1
c0010314:	68 58 44 02 c0       	push   0xc0024458
c0010319:	89 15 30 fa 02 c0    	mov    DWORD PTR ds:0xc002fa30,edx
c001031f:	31 db                	xor    ebx,ebx
c0010321:	e8 3e 6c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010326:	83 c4 10             	add    esp,0x10
c0010329:	85 db                	test   ebx,ebx
c001032b:	75 11                	jne    c001033e <Phys::allocateContiguousPages(int)+0x3e>
c001032d:	e8 f0 fe ff ff       	call   c0010222 <Phys::allocatePage()>
c0010332:	83 ff 01             	cmp    edi,0x1
c0010335:	89 c6                	mov    esi,eax
c0010337:	74 21                	je     c001035a <Phys::allocateContiguousPages(int)+0x5a>
c0010339:	bb 01 00 00 00       	mov    ebx,0x1
c001033e:	e8 df fe ff ff       	call   c0010222 <Phys::allocatePage()>
c0010343:	89 da                	mov    edx,ebx
c0010345:	c1 e2 0c             	shl    edx,0xc
c0010348:	01 f2                	add    edx,esi
c001034a:	39 c2                	cmp    edx,eax
c001034c:	74 24                	je     c0010372 <Phys::allocateContiguousPages(int)+0x72>
c001034e:	bb 01 00 00 00       	mov    ebx,0x1
c0010353:	89 c6                	mov    esi,eax
c0010355:	83 ff 01             	cmp    edi,0x1
c0010358:	75 e4                	jne    c001033e <Phys::allocateContiguousPages(int)+0x3e>
c001035a:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0010362:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0010367:	85 c0                	test   eax,eax
c0010369:	75 01                	jne    c001036c <Phys::allocateContiguousPages(int)+0x6c>
c001036b:	fb                   	sti    
c001036c:	89 f0                	mov    eax,esi
c001036e:	5b                   	pop    ebx
c001036f:	5e                   	pop    esi
c0010370:	5f                   	pop    edi
c0010371:	c3                   	ret    
c0010372:	83 c3 01             	add    ebx,0x1
c0010375:	39 fb                	cmp    ebx,edi
c0010377:	75 b0                	jne    c0010329 <Phys::allocateContiguousPages(int)+0x29>
c0010379:	eb df                	jmp    c001035a <Phys::allocateContiguousPages(int)+0x5a>

c001037b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001037b:	56                   	push   esi
c001037c:	53                   	push   ebx
c001037d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010381:	39 1d 34 f1 02 c0    	cmp    DWORD PTR ds:0xc002f134,ebx
c0010387:	73 06                	jae    c001038f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010389:	89 1d 34 f1 02 c0    	mov    DWORD PTR ds:0xc002f134,ebx
c001038f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010393:	c1 eb 0c             	shr    ebx,0xc
c0010396:	c1 e8 0c             	shr    eax,0xc
c0010399:	39 d8                	cmp    eax,ebx
c001039b:	73 13                	jae    c00103b0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001039d:	6a 00                	push   0x0
c001039f:	8d 70 01             	lea    esi,[eax+0x1]
c00103a2:	50                   	push   eax
c00103a3:	e8 b5 fd ff ff       	call   c001015d <Phys::setPageState(unsigned long, bool)>
c00103a8:	5a                   	pop    edx
c00103a9:	89 f0                	mov    eax,esi
c00103ab:	59                   	pop    ecx
c00103ac:	39 f3                	cmp    ebx,esi
c00103ae:	75 ed                	jne    c001039d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00103b0:	5b                   	pop    ebx
c00103b1:	5e                   	pop    esi
c00103b2:	c3                   	ret    

c00103b3 <Phys::physicalMemorySetup(unsigned int)>:
c00103b3:	55                   	push   ebp
c00103b4:	57                   	push   edi
c00103b5:	56                   	push   esi
c00103b6:	53                   	push   ebx
c00103b7:	83 ec 40             	sub    esp,0x40
c00103ba:	6a 10                	push   0x10
c00103bc:	6a 00                	push   0x0
c00103be:	68 44 f1 02 c0       	push   0xc002f144
c00103c3:	e8 28 01 ff ff       	call   c00004f0 <memset>
c00103c8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00103cc:	25 00 f0 ff ff       	and    eax,0xfffff000
c00103d1:	05 00 10 00 00       	add    eax,0x1000
c00103d6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00103da:	5b                   	pop    ebx
c00103db:	31 db                	xor    ebx,ebx
c00103dd:	5e                   	pop    esi
c00103de:	50                   	push   eax
c00103df:	68 1b 45 02 c0       	push   0xc002451b
c00103e4:	e8 7b 6b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00103e9:	83 c4 10             	add    esp,0x10
c00103ec:	83 ec 08             	sub    esp,0x8
c00103ef:	6a 01                	push   0x1
c00103f1:	53                   	push   ebx
c00103f2:	83 c3 01             	add    ebx,0x1
c00103f5:	e8 63 fd ff ff       	call   c001015d <Phys::setPageState(unsigned long, bool)>
c00103fa:	83 c4 10             	add    esp,0x10
c00103fd:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010403:	75 e7                	jne    c00103ec <Phys::physicalMemorySetup(unsigned int)+0x39>
c0010405:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c001040c:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0010413:	c1 e0 08             	shl    eax,0x8
c0010416:	09 c2                	or     edx,eax
c0010418:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001041c:	0f 84 98 01 00 00    	je     c00105ba <Phys::physicalMemorySetup(unsigned int)+0x207>
c0010422:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010426:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001042e:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010433:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010437:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001043f:	eb 1c                	jmp    c001045d <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0010441:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010445:	83 c3 18             	add    ebx,0x18
c0010448:	83 c6 01             	add    esi,0x1
c001044b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001044f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010453:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010457:	0f 84 6d 01 00 00    	je     c00105ca <Phys::physicalMemorySetup(unsigned int)+0x217>
c001045d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010460:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010463:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010466:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001046a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001046e:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010470:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010473:	01 f0                	add    eax,esi
c0010475:	55                   	push   ebp
c0010476:	11 fa                	adc    edx,edi
c0010478:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001047c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010480:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010484:	51                   	push   ecx
c0010485:	56                   	push   esi
c0010486:	68 b8 44 02 c0       	push   0xc00244b8
c001048b:	e8 d4 6a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010490:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010494:	83 c4 10             	add    esp,0x10
c0010497:	09 f8                	or     eax,edi
c0010499:	0f 85 2b 01 00 00    	jne    c00105ca <Phys::physicalMemorySetup(unsigned int)+0x217>
c001049f:	83 fd 01             	cmp    ebp,0x1
c00104a2:	75 9d                	jne    c0010441 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00104a4:	ba 00 00 08 00       	mov    edx,0x80000
c00104a9:	89 c1                	mov    ecx,eax
c00104ab:	39 f2                	cmp    edx,esi
c00104ad:	19 f9                	sbb    ecx,edi
c00104af:	0f 82 ab 00 00 00    	jb     c0010560 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c00104b5:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00104b9:	89 c1                	mov    ecx,eax
c00104bb:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c00104bf:	0f 83 9b 00 00 00    	jae    c0010560 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c00104c5:	ba 00 00 0a 00       	mov    edx,0xa0000
c00104ca:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00104ce:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00104d2:	39 fa                	cmp    edx,edi
c00104d4:	19 e8                	sbb    eax,ebp
c00104d6:	0f 82 b0 01 00 00    	jb     c001068c <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c00104dc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00104e0:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00104e4:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00104ea:	ba ff 1f 00 00       	mov    edx,0x1fff
c00104ef:	83 d5 ff             	adc    ebp,0xffffffff
c00104f2:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00104f6:	31 c0                	xor    eax,eax
c00104f8:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00104fc:	39 fa                	cmp    edx,edi
c00104fe:	89 c1                	mov    ecx,eax
c0010500:	19 e9                	sbb    ecx,ebp
c0010502:	0f 83 39 ff ff ff    	jae    c0010441 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0010508:	be 00 00 08 00       	mov    esi,0x80000
c001050d:	83 ec 04             	sub    esp,0x4
c0010510:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010514:	57                   	push   edi
c0010515:	56                   	push   esi
c0010516:	68 dc 44 02 c0       	push   0xc00244dc
c001051b:	e8 44 6a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010520:	5d                   	pop    ebp
c0010521:	58                   	pop    eax
c0010522:	57                   	push   edi
c0010523:	56                   	push   esi
c0010524:	e8 52 fe ff ff       	call   c001037b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010529:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001052d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010531:	83 c4 0c             	add    esp,0xc
c0010534:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010538:	8b 15 40 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f140
c001053e:	01 d0                	add    eax,edx
c0010540:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010547:	a3 40 f1 02 c0       	mov    ds:0xc002f140,eax
c001054c:	52                   	push   edx
c001054d:	50                   	push   eax
c001054e:	68 41 45 02 c0       	push   0xc0024541
c0010553:	e8 0c 6a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010558:	83 c4 10             	add    esp,0x10
c001055b:	e9 e1 fe ff ff       	jmp    c0010441 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0010560:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010564:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010568:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001056c:	39 ea                	cmp    edx,ebp
c001056e:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010572:	0f 82 c9 fe ff ff    	jb     c0010441 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0010578:	ba ff 1f 00 00       	mov    edx,0x1fff
c001057d:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010581:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010585:	0f 83 b6 fe ff ff    	jae    c0010441 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c001058b:	39 ee                	cmp    esi,ebp
c001058d:	89 f8                	mov    eax,edi
c001058f:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010593:	0f 83 74 ff ff ff    	jae    c001050d <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0010599:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001059d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00105a1:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00105a5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00105a9:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c00105ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00105b1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00105b5:	e9 53 ff ff ff       	jmp    c001050d <Phys::physicalMemorySetup(unsigned int)+0x15a>
c00105ba:	83 ec 0c             	sub    esp,0xc
c00105bd:	68 33 45 02 c0       	push   0xc0024533
c00105c2:	e8 67 fa ff ff       	call   c001002e <KePanic(char const*)>
c00105c7:	83 c4 10             	add    esp,0x10
c00105ca:	83 ec 08             	sub    esp,0x8
c00105cd:	bb 60 00 00 00       	mov    ebx,0x60
c00105d2:	6a 00                	push   0x0
c00105d4:	6a 06                	push   0x6
c00105d6:	e8 82 fb ff ff       	call   c001015d <Phys::setPageState(unsigned long, bool)>
c00105db:	58                   	pop    eax
c00105dc:	5a                   	pop    edx
c00105dd:	6a 00                	push   0x0
c00105df:	6a 07                	push   0x7
c00105e1:	e8 77 fb ff ff       	call   c001015d <Phys::setPageState(unsigned long, bool)>
c00105e6:	8b 0d 40 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f140
c00105ec:	83 c4 10             	add    esp,0x10
c00105ef:	83 c1 02             	add    ecx,0x2
c00105f2:	89 0d 40 f1 02 c0    	mov    DWORD PTR ds:0xc002f140,ecx
c00105f8:	83 ec 08             	sub    esp,0x8
c00105fb:	6a 00                	push   0x0
c00105fd:	53                   	push   ebx
c00105fe:	83 c3 01             	add    ebx,0x1
c0010601:	e8 57 fb ff ff       	call   c001015d <Phys::setPageState(unsigned long, bool)>
c0010606:	83 c4 10             	add    esp,0x10
c0010609:	81 fb 80 00 00 00    	cmp    ebx,0x80
c001060f:	75 e7                	jne    c00105f8 <Phys::physicalMemorySetup(unsigned int)+0x245>
c0010611:	a1 40 f1 02 c0       	mov    eax,ds:0xc002f140
c0010616:	bb 40 01 00 00       	mov    ebx,0x140
c001061b:	83 c0 20             	add    eax,0x20
c001061e:	a3 40 f1 02 c0       	mov    ds:0xc002f140,eax
c0010623:	eb 26                	jmp    c001064b <Phys::physicalMemorySetup(unsigned int)+0x298>
c0010625:	83 ec 08             	sub    esp,0x8
c0010628:	6a 00                	push   0x0
c001062a:	53                   	push   ebx
c001062b:	83 c3 01             	add    ebx,0x1
c001062e:	e8 2a fb ff ff       	call   c001015d <Phys::setPageState(unsigned long, bool)>
c0010633:	a1 40 f1 02 c0       	mov    eax,ds:0xc002f140
c0010638:	83 c4 10             	add    esp,0x10
c001063b:	83 c0 01             	add    eax,0x1
c001063e:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0010644:	a3 40 f1 02 c0       	mov    ds:0xc002f140,eax
c0010649:	74 07                	je     c0010652 <Phys::physicalMemorySetup(unsigned int)+0x29f>
c001064b:	3d ff 03 00 00       	cmp    eax,0x3ff
c0010650:	7e d3                	jle    c0010625 <Phys::physicalMemorySetup(unsigned int)+0x272>
c0010652:	bb d0 01 00 00       	mov    ebx,0x1d0
c0010657:	3d ff 07 00 00       	cmp    eax,0x7ff
c001065c:	7f 26                	jg     c0010684 <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c001065e:	83 ec 08             	sub    esp,0x8
c0010661:	6a 00                	push   0x0
c0010663:	53                   	push   ebx
c0010664:	83 c3 01             	add    ebx,0x1
c0010667:	e8 f1 fa ff ff       	call   c001015d <Phys::setPageState(unsigned long, bool)>
c001066c:	a1 40 f1 02 c0       	mov    eax,ds:0xc002f140
c0010671:	83 c4 10             	add    esp,0x10
c0010674:	83 c0 01             	add    eax,0x1
c0010677:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c001067d:	a3 40 f1 02 c0       	mov    ds:0xc002f140,eax
c0010682:	75 d3                	jne    c0010657 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c0010684:	83 c4 3c             	add    esp,0x3c
c0010687:	5b                   	pop    ebx
c0010688:	5e                   	pop    esi
c0010689:	5f                   	pop    edi
c001068a:	5d                   	pop    ebp
c001068b:	c3                   	ret    
c001068c:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010694:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001069c:	e9 3b fe ff ff       	jmp    c00104dc <Phys::physicalMemorySetup(unsigned int)+0x129>
c00106a1:	90                   	nop

c00106a2 <Pipe::isAtty()>:
c00106a2:	31 c0                	xor    eax,eax
c00106a4:	c3                   	ret    
c00106a5:	90                   	nop

c00106a6 <Pipe::~Pipe()>:
c00106a6:	83 ec 0c             	sub    esp,0xc
c00106a9:	ba a0 45 02 c0       	mov    edx,0xc00245a0
c00106ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106b2:	89 10                	mov    DWORD PTR [eax],edx
c00106b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106b8:	83 ec 0c             	sub    esp,0xc
c00106bb:	50                   	push   eax
c00106bc:	e8 91 2b 00 00       	call   c0013252 <UnixFile::~UnixFile()>
c00106c1:	83 c4 10             	add    esp,0x10
c00106c4:	90                   	nop
c00106c5:	83 c4 0c             	add    esp,0xc
c00106c8:	c3                   	ret    
c00106c9:	90                   	nop

c00106ca <Pipe::~Pipe()>:
c00106ca:	83 ec 0c             	sub    esp,0xc
c00106cd:	83 ec 0c             	sub    esp,0xc
c00106d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106d4:	e8 cd ff ff ff       	call   c00106a6 <Pipe::~Pipe()>
c00106d9:	83 c4 10             	add    esp,0x10
c00106dc:	83 ec 08             	sub    esp,0x8
c00106df:	6a 20                	push   0x20
c00106e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106e5:	e8 71 cc ff ff       	call   c000d35b <operator delete(void*, unsigned long)>
c00106ea:	83 c4 10             	add    esp,0x10
c00106ed:	83 c4 0c             	add    esp,0xc
c00106f0:	c3                   	ret    
c00106f1:	90                   	nop

c00106f2 <Pipe::write(unsigned long long, void*, int*)>:
c00106f2:	55                   	push   ebp
c00106f3:	57                   	push   edi
c00106f4:	56                   	push   esi
c00106f5:	53                   	push   ebx
c00106f6:	83 ec 1c             	sub    esp,0x1c
c00106f9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00106fd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010701:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0010704:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010708:	89 04 24             	mov    DWORD PTR [esp],eax
c001070b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001070f:	89 d8                	mov    eax,ebx
c0010711:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010714:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010718:	89 d6                	mov    esi,edx
c001071a:	89 d7                	mov    edi,edx
c001071c:	c1 ff 1f             	sar    edi,0x1f
c001071f:	03 34 24             	add    esi,DWORD PTR [esp]
c0010722:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0010726:	c1 f8 1f             	sar    eax,0x1f
c0010729:	39 f3                	cmp    ebx,esi
c001072b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001072f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010733:	19 f8                	sbb    eax,edi
c0010735:	b8 01 00 00 00       	mov    eax,0x1
c001073a:	72 6e                	jb     c00107aa <Pipe::write(unsigned long long, void*, int*)+0xb8>
c001073c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001073f:	01 d0                	add    eax,edx
c0010741:	99                   	cdq    
c0010742:	f7 fb                	idiv   ebx
c0010744:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010748:	29 d3                	sub    ebx,edx
c001074a:	89 d7                	mov    edi,edx
c001074c:	89 de                	mov    esi,ebx
c001074e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010751:	c1 fb 1f             	sar    ebx,0x1f
c0010754:	39 f2                	cmp    edx,esi
c0010756:	19 d8                	sbb    eax,ebx
c0010758:	b8 00 00 00 00       	mov    eax,0x0
c001075d:	72 04                	jb     c0010763 <Pipe::write(unsigned long long, void*, int*)+0x71>
c001075f:	89 d0                	mov    eax,edx
c0010761:	29 f0                	sub    eax,esi
c0010763:	89 d3                	mov    ebx,edx
c0010765:	29 c3                	sub    ebx,eax
c0010767:	74 0b                	je     c0010774 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0010769:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001076c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010770:	89 d9                	mov    ecx,ebx
c0010772:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010774:	85 c0                	test   eax,eax
c0010776:	74 0d                	je     c0010785 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0010778:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001077c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001077f:	89 de                	mov    esi,ebx
c0010781:	89 c1                	mov    ecx,eax
c0010783:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010785:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010788:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001078d:	75 10                	jne    c001079f <Pipe::write(unsigned long long, void*, int*)+0xad>
c001078f:	83 ec 0c             	sub    esp,0xc
c0010792:	68 5d 45 02 c0       	push   0xc002455d
c0010797:	e8 92 f8 ff ff       	call   c001002e <KePanic(char const*)>
c001079c:	83 c4 10             	add    esp,0x10
c001079f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00107a3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00107a6:	89 08                	mov    DWORD PTR [eax],ecx
c00107a8:	31 c0                	xor    eax,eax
c00107aa:	83 c4 1c             	add    esp,0x1c
c00107ad:	5b                   	pop    ebx
c00107ae:	5e                   	pop    esi
c00107af:	5f                   	pop    edi
c00107b0:	5d                   	pop    ebp
c00107b1:	c3                   	ret    

c00107b2 <Pipe::read(unsigned long long, void*, int*)>:
c00107b2:	55                   	push   ebp
c00107b3:	57                   	push   edi
c00107b4:	56                   	push   esi
c00107b5:	53                   	push   ebx
c00107b6:	83 ec 1c             	sub    esp,0x1c
c00107b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00107bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00107c1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00107c5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00107c8:	89 c8                	mov    eax,ecx
c00107ca:	99                   	cdq    
c00107cb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00107cf:	74 27                	je     c00107f8 <Pipe::read(unsigned long long, void*, int*)+0x46>
c00107d1:	39 f9                	cmp    ecx,edi
c00107d3:	89 d1                	mov    ecx,edx
c00107d5:	19 f1                	sbb    ecx,esi
c00107d7:	73 1f                	jae    c00107f8 <Pipe::read(unsigned long long, void*, int*)+0x46>
c00107d9:	fa                   	cli    
c00107da:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c00107e0:	e8 5b 6a 00 00       	call   c0017240 <schedule()>
c00107e5:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c00107ec:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c00107f3:	75 d0                	jne    c00107c5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00107f5:	fb                   	sti    
c00107f6:	eb cd                	jmp    c00107c5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00107f8:	39 f8                	cmp    eax,edi
c00107fa:	89 d1                	mov    ecx,edx
c00107fc:	89 3c 24             	mov    DWORD PTR [esp],edi
c00107ff:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010803:	19 f1                	sbb    ecx,esi
c0010805:	73 07                	jae    c001080e <Pipe::read(unsigned long long, void*, int*)+0x5c>
c0010807:	89 04 24             	mov    DWORD PTR [esp],eax
c001080a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001080e:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0010811:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0010814:	29 f7                	sub    edi,esi
c0010816:	89 f8                	mov    eax,edi
c0010818:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001081c:	99                   	cdq    
c001081d:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0010820:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010824:	19 d0                	sbb    eax,edx
c0010826:	73 07                	jae    c001082f <Pipe::read(unsigned long long, void*, int*)+0x7d>
c0010828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001082b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001082f:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0010832:	89 ea                	mov    edx,ebp
c0010834:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010838:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001083d:	74 0d                	je     c001084c <Pipe::read(unsigned long long, void*, int*)+0x9a>
c001083f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010842:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0010846:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001084a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001084c:	85 d2                	test   edx,edx
c001084e:	74 11                	je     c0010861 <Pipe::read(unsigned long long, void*, int*)+0xaf>
c0010850:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010854:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0010857:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001085b:	89 d1                	mov    ecx,edx
c001085d:	89 c7                	mov    edi,eax
c001085f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010861:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010864:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0010867:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001086a:	99                   	cdq    
c001086b:	89 f7                	mov    edi,esi
c001086d:	03 04 24             	add    eax,DWORD PTR [esp]
c0010870:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0010874:	c1 ff 1f             	sar    edi,0x1f
c0010877:	57                   	push   edi
c0010878:	56                   	push   esi
c0010879:	52                   	push   edx
c001087a:	50                   	push   eax
c001087b:	e8 24 15 01 00       	call   c0021da4 <__umoddi3>
c0010880:	83 c4 10             	add    esp,0x10
c0010883:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010886:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001088b:	75 10                	jne    c001089d <Pipe::read(unsigned long long, void*, int*)+0xeb>
c001088d:	83 ec 0c             	sub    esp,0xc
c0010890:	68 7a 45 02 c0       	push   0xc002457a
c0010895:	e8 94 f7 ff ff       	call   c001002e <KePanic(char const*)>
c001089a:	83 c4 10             	add    esp,0x10
c001089d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00108a1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00108a4:	89 10                	mov    DWORD PTR [eax],edx
c00108a6:	83 c4 1c             	add    esp,0x1c
c00108a9:	31 c0                	xor    eax,eax
c00108ab:	5b                   	pop    ebx
c00108ac:	5e                   	pop    esi
c00108ad:	5f                   	pop    edi
c00108ae:	5d                   	pop    ebp
c00108af:	c3                   	ret    

c00108b0 <Pipe::Pipe(int)>:
c00108b0:	83 ec 0c             	sub    esp,0xc
c00108b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b7:	83 ec 08             	sub    esp,0x8
c00108ba:	6a 00                	push   0x0
c00108bc:	50                   	push   eax
c00108bd:	e8 aa 27 00 00       	call   c001306c <UnixFile::UnixFile(int)>
c00108c2:	83 c4 10             	add    esp,0x10
c00108c5:	ba a0 45 02 c0       	mov    edx,0xc00245a0
c00108ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ce:	89 10                	mov    DWORD PTR [eax],edx
c00108d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00108d8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00108db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108df:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00108e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ea:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00108f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108f5:	83 ec 0c             	sub    esp,0xc
c00108f8:	50                   	push   eax
c00108f9:	e8 e9 f3 ff ff       	call   c000fce7 <malloc>
c00108fe:	83 c4 10             	add    esp,0x10
c0010901:	89 c2                	mov    edx,eax
c0010903:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010907:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001090a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001090e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010912:	90                   	nop
c0010913:	83 c4 0c             	add    esp,0xc
c0010916:	c3                   	ret    

c0010917 <KePowerThread(void*)>:
c0010917:	83 ec 0c             	sub    esp,0xc
c001091a:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c0010921:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c0010928:	75 01                	jne    c001092b <KePowerThread(void*)+0x14>
c001092a:	fb                   	sti    
c001092b:	c6 05 60 f1 02 c0 00 	mov    BYTE PTR ds:0xc002f160,0x0
c0010932:	50                   	push   eax
c0010933:	50                   	push   eax
c0010934:	6a 00                	push   0x0
c0010936:	6a 0a                	push   0xa
c0010938:	e8 0f 6b 00 00       	call   c001744c <sleep(unsigned long long)>
c001093d:	83 05 a4 f1 02 c0 0a 	add    DWORD PTR ds:0xc002f1a4,0xa
c0010944:	83 c4 10             	add    esp,0x10
c0010947:	eb e2                	jmp    c001092b <KePowerThread(void*)+0x14>

c0010949 <KeChangePowerSettings(PowerSettings)>:
c0010949:	57                   	push   edi
c001094a:	b9 09 00 00 00       	mov    ecx,0x9
c001094f:	56                   	push   esi
c0010950:	bf 80 f1 02 c0       	mov    edi,0xc002f180
c0010955:	fc                   	cld    
c0010956:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001095a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001095c:	5e                   	pop    esi
c001095d:	5f                   	pop    edi
c001095e:	c3                   	ret    

c001095f <KeUserIOReceived()>:
c001095f:	c7 05 a4 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1a4,0x0
c0010969:	c3                   	ret    

c001096a <KeHandlePowerButton()>:
c001096a:	a1 80 f1 02 c0       	mov    eax,ds:0xc002f180
c001096f:	83 f8 02             	cmp    eax,0x2
c0010972:	75 05                	jne    c0010979 <KeHandlePowerButton()+0xf>
c0010974:	e9 39 d9 ff ff       	jmp    c000e2b2 <KeShutdown()>
c0010979:	48                   	dec    eax
c001097a:	75 05                	jne    c0010981 <KeHandlePowerButton()+0x17>
c001097c:	e9 55 d9 ff ff       	jmp    c000e2d6 <KeSleep()>
c0010981:	c3                   	ret    

c0010982 <KeHandleSleepButton()>:
c0010982:	a1 84 f1 02 c0       	mov    eax,ds:0xc002f184
c0010987:	83 f8 02             	cmp    eax,0x2
c001098a:	75 05                	jne    c0010991 <KeHandleSleepButton()+0xf>
c001098c:	e9 21 d9 ff ff       	jmp    c000e2b2 <KeShutdown()>
c0010991:	48                   	dec    eax
c0010992:	75 05                	jne    c0010999 <KeHandleSleepButton()+0x17>
c0010994:	e9 3d d9 ff ff       	jmp    c000e2d6 <KeSleep()>
c0010999:	c3                   	ret    

c001099a <KeSetupPowerManager()>:
c001099a:	83 ec 0c             	sub    esp,0xc
c001099d:	c7 05 a4 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1a4,0x0
c00109a7:	68 f0 00 00 00       	push   0xf0
c00109ac:	c6 05 60 f1 02 c0 00 	mov    BYTE PTR ds:0xc002f160,0x0
c00109b3:	6a 00                	push   0x0
c00109b5:	68 17 09 01 c0       	push   0xc0010917
c00109ba:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c00109c0:	e8 bb 65 00 00       	call   c0016f80 <Process::createThread(void (*)(void*), void*, int)>
c00109c5:	c7 05 80 f1 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002f180,0x2
c00109cf:	c7 05 84 f1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002f184,0x1
c00109d9:	c7 05 88 f1 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002f188,0x3
c00109e3:	c7 05 8c f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f18c,0x0
c00109ed:	c7 05 98 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f198,0x0
c00109f7:	c7 05 90 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f190,0x0
c0010a01:	c7 05 9c f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f19c,0x0
c0010a0b:	c7 05 94 f1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002f194,0x3c
c0010a15:	c7 05 a0 f1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002f1a0,0x3c
c0010a1f:	83 c4 1c             	add    esp,0x1c
c0010a22:	c3                   	ret    

c0010a23 <KeRand()>:
c0010a23:	69 05 a8 f1 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002f1a8,0x2875
c0010a2d:	69 0d ac f1 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002f1ac,0xa2e7b175
c0010a37:	53                   	push   ebx
c0010a38:	01 c1                	add    ecx,eax
c0010a3a:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010a3f:	f7 25 a8 f1 02 c0    	mul    DWORD PTR ds:0xc002f1a8
c0010a45:	01 ca                	add    edx,ecx
c0010a47:	05 ef 04 b5 00       	add    eax,0xb504ef
c0010a4c:	83 d2 00             	adc    edx,0x0
c0010a4f:	a3 a8 f1 02 c0       	mov    ds:0xc002f1a8,eax
c0010a54:	0f b7 da             	movzx  ebx,dx
c0010a57:	89 da                	mov    edx,ebx
c0010a59:	89 1d ac f1 02 c0    	mov    DWORD PTR ds:0xc002f1ac,ebx
c0010a5f:	0f ac d0 0e          	shrd   eax,edx,0xe
c0010a63:	5b                   	pop    ebx
c0010a64:	c3                   	ret    

c0010a65 <KeSeedRand(unsigned int)>:
c0010a65:	53                   	push   ebx
c0010a66:	83 ec 08             	sub    esp,0x8
c0010a69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a6d:	e8 ab 9b 00 00       	call   c001a61d <HalGetRand()>
c0010a72:	c7 05 ac f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1ac,0x0
c0010a7c:	31 d8                	xor    eax,ebx
c0010a7e:	a3 a8 f1 02 c0       	mov    ds:0xc002f1a8,eax
c0010a83:	e8 9b ff ff ff       	call   c0010a23 <KeRand()>
c0010a88:	83 c4 08             	add    esp,0x8
c0010a8b:	5b                   	pop    ebx
c0010a8c:	eb 95                	jmp    c0010a23 <KeRand()>

c0010a8e <KeInitRand()>:
c0010a8e:	83 ec 0c             	sub    esp,0xc
c0010a91:	e8 ab 99 00 00       	call   c001a441 <HalQueryPerformanceCounter()>
c0010a96:	0f 20 da             	mov    edx,cr3
c0010a99:	0f 22 da             	mov    cr3,edx
c0010a9c:	0f 20 da             	mov    edx,cr3
c0010a9f:	0f 22 da             	mov    cr3,edx
c0010aa2:	0f 20 da             	mov    edx,cr3
c0010aa5:	0f 22 da             	mov    cr3,edx
c0010aa8:	0f 20 da             	mov    edx,cr3
c0010aab:	0f 22 da             	mov    cr3,edx
c0010aae:	83 ec 0c             	sub    esp,0xc
c0010ab1:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010ab6:	50                   	push   eax
c0010ab7:	e8 a9 ff ff ff       	call   c0010a65 <KeSeedRand(unsigned int)>
c0010abc:	83 c4 1c             	add    esp,0x1c
c0010abf:	c3                   	ret    

c0010ac0 <KeResolveCompatibilitySymbol(char*)>:
c0010ac0:	83 ec 0c             	sub    esp,0xc
c0010ac3:	83 ec 08             	sub    esp,0x8
c0010ac6:	68 b4 45 02 c0       	push   0xc00245b4
c0010acb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010acf:	e8 7c fc fe ff       	call   c0000750 <strcmp>
c0010ad4:	83 c4 10             	add    esp,0x10
c0010ad7:	85 c0                	test   eax,eax
c0010ad9:	0f 94 c0             	sete   al
c0010adc:	0f b6 c0             	movzx  eax,al
c0010adf:	85 c0                	test   eax,eax
c0010ae1:	74 0d                	je     c0010af0 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010ae3:	b8 d0 d0 02 c0       	mov    eax,0xc002d0d0
c0010ae8:	e9 8b 01 00 00       	jmp    c0010c78 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010aed:	8d 76 00             	lea    esi,[esi+0x0]
c0010af0:	83 ec 08             	sub    esp,0x8
c0010af3:	68 bd 45 02 c0       	push   0xc00245bd
c0010af8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010afc:	e8 4f fc fe ff       	call   c0000750 <strcmp>
c0010b01:	83 c4 10             	add    esp,0x10
c0010b04:	85 c0                	test   eax,eax
c0010b06:	0f 94 c0             	sete   al
c0010b09:	0f b6 c0             	movzx  eax,al
c0010b0c:	85 c0                	test   eax,eax
c0010b0e:	74 0c                	je     c0010b1c <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010b10:	b8 a4 1c 02 c0       	mov    eax,0xc0021ca4
c0010b15:	e9 5e 01 00 00       	jmp    c0010c78 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b1a:	66 90                	xchg   ax,ax
c0010b1c:	83 ec 08             	sub    esp,0x8
c0010b1f:	68 c7 45 02 c0       	push   0xc00245c7
c0010b24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b28:	e8 23 fc fe ff       	call   c0000750 <strcmp>
c0010b2d:	83 c4 10             	add    esp,0x10
c0010b30:	85 c0                	test   eax,eax
c0010b32:	0f 94 c0             	sete   al
c0010b35:	0f b6 c0             	movzx  eax,al
c0010b38:	85 c0                	test   eax,eax
c0010b3a:	74 0c                	je     c0010b48 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010b3c:	b8 d8 19 02 c0       	mov    eax,0xc00219d8
c0010b41:	e9 32 01 00 00       	jmp    c0010c78 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b46:	66 90                	xchg   ax,ax
c0010b48:	83 ec 08             	sub    esp,0x8
c0010b4b:	68 d0 45 02 c0       	push   0xc00245d0
c0010b50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b54:	e8 f7 fb fe ff       	call   c0000750 <strcmp>
c0010b59:	83 c4 10             	add    esp,0x10
c0010b5c:	85 c0                	test   eax,eax
c0010b5e:	0f 94 c0             	sete   al
c0010b61:	0f b6 c0             	movzx  eax,al
c0010b64:	85 c0                	test   eax,eax
c0010b66:	74 0c                	je     c0010b74 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010b68:	b8 2e 00 01 c0       	mov    eax,0xc001002e
c0010b6d:	e9 06 01 00 00       	jmp    c0010c78 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b72:	66 90                	xchg   ax,ax
c0010b74:	83 ec 08             	sub    esp,0x8
c0010b77:	68 e3 45 02 c0       	push   0xc00245e3
c0010b7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b80:	e8 cb fb fe ff       	call   c0000750 <strcmp>
c0010b85:	83 c4 10             	add    esp,0x10
c0010b88:	85 c0                	test   eax,eax
c0010b8a:	0f 94 c0             	sete   al
c0010b8d:	0f b6 c0             	movzx  eax,al
c0010b90:	85 c0                	test   eax,eax
c0010b92:	74 0c                	je     c0010ba0 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010b94:	b8 9b d2 00 c0       	mov    eax,0xc000d29b
c0010b99:	e9 da 00 00 00       	jmp    c0010c78 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b9e:	66 90                	xchg   ax,ax
c0010ba0:	83 ec 08             	sub    esp,0x8
c0010ba3:	68 00 46 02 c0       	push   0xc0024600
c0010ba8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bac:	e8 9f fb fe ff       	call   c0000750 <strcmp>
c0010bb1:	83 c4 10             	add    esp,0x10
c0010bb4:	85 c0                	test   eax,eax
c0010bb6:	0f 94 c0             	sete   al
c0010bb9:	0f b6 c0             	movzx  eax,al
c0010bbc:	85 c0                	test   eax,eax
c0010bbe:	74 0c                	je     c0010bcc <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010bc0:	b8 a4 1d 02 c0       	mov    eax,0xc0021da4
c0010bc5:	e9 ae 00 00 00       	jmp    c0010c78 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010bca:	66 90                	xchg   ax,ax
c0010bcc:	83 ec 08             	sub    esp,0x8
c0010bcf:	68 0a 46 02 c0       	push   0xc002460a
c0010bd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bd8:	e8 73 fb fe ff       	call   c0000750 <strcmp>
c0010bdd:	83 c4 10             	add    esp,0x10
c0010be0:	85 c0                	test   eax,eax
c0010be2:	0f 94 c0             	sete   al
c0010be5:	0f b6 c0             	movzx  eax,al
c0010be8:	85 c0                	test   eax,eax
c0010bea:	74 0c                	je     c0010bf8 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010bec:	b8 24 1b 02 c0       	mov    eax,0xc0021b24
c0010bf1:	e9 82 00 00 00       	jmp    c0010c78 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010bf6:	66 90                	xchg   ax,ax
c0010bf8:	83 ec 08             	sub    esp,0x8
c0010bfb:	68 13 46 02 c0       	push   0xc0024613
c0010c00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c04:	e8 47 fb fe ff       	call   c0000750 <strcmp>
c0010c09:	83 c4 10             	add    esp,0x10
c0010c0c:	85 c0                	test   eax,eax
c0010c0e:	0f 94 c0             	sete   al
c0010c11:	0f b6 c0             	movzx  eax,al
c0010c14:	85 c0                	test   eax,eax
c0010c16:	74 08                	je     c0010c20 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010c18:	b8 d4 d0 02 c0       	mov    eax,0xc002d0d4
c0010c1d:	eb 59                	jmp    c0010c78 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010c1f:	90                   	nop
c0010c20:	83 ec 08             	sub    esp,0x8
c0010c23:	68 2b 46 02 c0       	push   0xc002462b
c0010c28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c2c:	e8 1f fb fe ff       	call   c0000750 <strcmp>
c0010c31:	83 c4 10             	add    esp,0x10
c0010c34:	85 c0                	test   eax,eax
c0010c36:	0f 94 c0             	sete   al
c0010c39:	0f b6 c0             	movzx  eax,al
c0010c3c:	85 c0                	test   eax,eax
c0010c3e:	74 08                	je     c0010c48 <KeResolveCompatibilitySymbol(char*)+0x188>
c0010c40:	b8 d4 d0 02 c0       	mov    eax,0xc002d0d4
c0010c45:	eb 31                	jmp    c0010c78 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010c47:	90                   	nop
c0010c48:	83 ec 08             	sub    esp,0x8
c0010c4b:	68 38 46 02 c0       	push   0xc0024638
c0010c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c54:	e8 f7 fa fe ff       	call   c0000750 <strcmp>
c0010c59:	83 c4 10             	add    esp,0x10
c0010c5c:	85 c0                	test   eax,eax
c0010c5e:	0f 94 c0             	sete   al
c0010c61:	0f b6 c0             	movzx  eax,al
c0010c64:	85 c0                	test   eax,eax
c0010c66:	74 08                	je     c0010c70 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010c68:	b8 d5 d0 02 c0       	mov    eax,0xc002d0d5
c0010c6d:	eb 09                	jmp    c0010c78 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010c6f:	90                   	nop
c0010c70:	b8 00 00 00 00       	mov    eax,0x0
c0010c75:	8d 76 00             	lea    esi,[esi+0x0]
c0010c78:	83 c4 0c             	add    esp,0xc
c0010c7b:	c3                   	ret    

c0010c7c <Semaphore::Semaphore(int)>:
c0010c7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c84:	89 10                	mov    DWORD PTR [eax],edx
c0010c86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c8a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0010c91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c95:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ca0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0010ca7:	90                   	nop
c0010ca8:	c3                   	ret    
c0010ca9:	90                   	nop
c0010caa:	66 90                	xchg   ax,ax

c0010cac <Semaphore::tryAcquire()>:
c0010cac:	83 ec 0c             	sub    esp,0xc
c0010caf:	fa                   	cli    
c0010cb0:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0010cb5:	83 c0 01             	add    eax,0x1
c0010cb8:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0010cbd:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010cc2:	83 c0 01             	add    eax,0x1
c0010cc5:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0010cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cce:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0010cd7:	39 c2                	cmp    edx,eax
c0010cd9:	7d 59                	jge    c0010d34 <Semaphore::tryAcquire()+0x88>
c0010cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cdf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010ce2:	8d 50 01             	lea    edx,[eax+0x1]
c0010ce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ce9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010cec:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010cf1:	83 e8 01             	sub    eax,0x1
c0010cf4:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0010cf9:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010cfe:	85 c0                	test   eax,eax
c0010d00:	75 1a                	jne    c0010d1c <Semaphore::tryAcquire()+0x70>
c0010d02:	a1 28 fa 02 c0       	mov    eax,ds:0xc002fa28
c0010d07:	85 c0                	test   eax,eax
c0010d09:	74 11                	je     c0010d1c <Semaphore::tryAcquire()+0x70>
c0010d0b:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c0010d15:	e8 26 65 00 00       	call   c0017240 <schedule()>
c0010d1a:	66 90                	xchg   ax,ax
c0010d1c:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0010d24:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0010d29:	85 c0                	test   eax,eax
c0010d2b:	75 03                	jne    c0010d30 <Semaphore::tryAcquire()+0x84>
c0010d2d:	fb                   	sti    
c0010d2e:	66 90                	xchg   ax,ax
c0010d30:	b0 01                	mov    al,0x1
c0010d32:	eb 48                	jmp    c0010d7c <Semaphore::tryAcquire()+0xd0>
c0010d34:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010d39:	83 e8 01             	sub    eax,0x1
c0010d3c:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0010d41:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010d46:	85 c0                	test   eax,eax
c0010d48:	75 1a                	jne    c0010d64 <Semaphore::tryAcquire()+0xb8>
c0010d4a:	a1 28 fa 02 c0       	mov    eax,ds:0xc002fa28
c0010d4f:	85 c0                	test   eax,eax
c0010d51:	74 11                	je     c0010d64 <Semaphore::tryAcquire()+0xb8>
c0010d53:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c0010d5d:	e8 de 64 00 00       	call   c0017240 <schedule()>
c0010d62:	66 90                	xchg   ax,ax
c0010d64:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0010d6c:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0010d71:	85 c0                	test   eax,eax
c0010d73:	75 03                	jne    c0010d78 <Semaphore::tryAcquire()+0xcc>
c0010d75:	fb                   	sti    
c0010d76:	66 90                	xchg   ax,ax
c0010d78:	b0 00                	mov    al,0x0
c0010d7a:	66 90                	xchg   ax,ax
c0010d7c:	83 c4 0c             	add    esp,0xc
c0010d7f:	c3                   	ret    

c0010d80 <Semaphore::assertLocked(char const*)>:
c0010d80:	83 ec 0c             	sub    esp,0xc
c0010d83:	fa                   	cli    
c0010d84:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0010d89:	83 c0 01             	add    eax,0x1
c0010d8c:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0010d91:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010d96:	83 c0 01             	add    eax,0x1
c0010d99:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0010d9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010da2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010da5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010da9:	8b 00                	mov    eax,DWORD PTR [eax]
c0010dab:	39 c2                	cmp    edx,eax
c0010dad:	7d 11                	jge    c0010dc0 <Semaphore::assertLocked(char const*)+0x40>
c0010daf:	83 ec 0c             	sub    esp,0xc
c0010db2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010db6:	e8 73 f2 ff ff       	call   c001002e <KePanic(char const*)>
c0010dbb:	83 c4 10             	add    esp,0x10
c0010dbe:	66 90                	xchg   ax,ax
c0010dc0:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010dc5:	83 e8 01             	sub    eax,0x1
c0010dc8:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0010dcd:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010dd2:	85 c0                	test   eax,eax
c0010dd4:	75 1a                	jne    c0010df0 <Semaphore::assertLocked(char const*)+0x70>
c0010dd6:	a1 28 fa 02 c0       	mov    eax,ds:0xc002fa28
c0010ddb:	85 c0                	test   eax,eax
c0010ddd:	74 11                	je     c0010df0 <Semaphore::assertLocked(char const*)+0x70>
c0010ddf:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c0010de9:	e8 52 64 00 00       	call   c0017240 <schedule()>
c0010dee:	66 90                	xchg   ax,ax
c0010df0:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0010df8:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0010dfd:	85 c0                	test   eax,eax
c0010dff:	75 03                	jne    c0010e04 <Semaphore::assertLocked(char const*)+0x84>
c0010e01:	fb                   	sti    
c0010e02:	66 90                	xchg   ax,ax
c0010e04:	90                   	nop
c0010e05:	83 c4 0c             	add    esp,0xc
c0010e08:	c3                   	ret    
c0010e09:	90                   	nop
c0010e0a:	66 90                	xchg   ax,ax

c0010e0c <Semaphore::acquire(int)>:
c0010e0c:	83 ec 1c             	sub    esp,0x1c
c0010e0f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0010e14:	0f 84 ae 00 00 00    	je     c0010ec8 <Semaphore::acquire(int)+0xbc>
c0010e1a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010e22:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0010e27:	90                   	nop
c0010e28:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0010e2d:	85 c0                	test   eax,eax
c0010e2f:	0f 84 87 00 00 00    	je     c0010ebc <Semaphore::acquire(int)+0xb0>
c0010e35:	83 ec 0c             	sub    esp,0xc
c0010e38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e3c:	e8 6b fe ff ff       	call   c0010cac <Semaphore::tryAcquire()>
c0010e41:	83 c4 10             	add    esp,0x10
c0010e44:	83 f0 01             	xor    eax,0x1
c0010e47:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0010e4b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0010e4f:	83 f0 01             	xor    eax,0x1
c0010e52:	0f b6 c0             	movzx  eax,al
c0010e55:	85 c0                	test   eax,eax
c0010e57:	75 5f                	jne    c0010eb8 <Semaphore::acquire(int)+0xac>
c0010e59:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0010e5e:	7f 34                	jg     c0010e94 <Semaphore::acquire(int)+0x88>
c0010e60:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010e64:	89 d0                	mov    eax,edx
c0010e66:	c1 e0 02             	shl    eax,0x2
c0010e69:	01 d0                	add    eax,edx
c0010e6b:	01 c0                	add    eax,eax
c0010e6d:	89 c2                	mov    edx,eax
c0010e6f:	c1 fa 1f             	sar    edx,0x1f
c0010e72:	83 ec 08             	sub    esp,0x8
c0010e75:	52                   	push   edx
c0010e76:	50                   	push   eax
c0010e77:	e8 b8 65 00 00       	call   c0017434 <milliTenthSleep(unsigned long long)>
c0010e7c:	83 c4 10             	add    esp,0x10
c0010e7f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010e83:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0010e87:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0010e8f:	eb 97                	jmp    c0010e28 <Semaphore::acquire(int)+0x1c>
c0010e91:	8d 76 00             	lea    esi,[esi+0x0]
c0010e94:	83 ec 08             	sub    esp,0x8
c0010e97:	6a 00                	push   0x0
c0010e99:	68 90 01 00 00       	push   0x190
c0010e9e:	e8 91 65 00 00       	call   c0017434 <milliTenthSleep(unsigned long long)>
c0010ea3:	83 c4 10             	add    esp,0x10
c0010ea6:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0010eab:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0010eb0:	e9 73 ff ff ff       	jmp    c0010e28 <Semaphore::acquire(int)+0x1c>
c0010eb5:	8d 76 00             	lea    esi,[esi+0x0]
c0010eb8:	90                   	nop
c0010eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0010ebc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ec0:	e9 fb 00 00 00       	jmp    c0010fc0 <Semaphore::acquire(int)+0x1b4>
c0010ec5:	8d 76 00             	lea    esi,[esi+0x0]
c0010ec8:	fa                   	cli    
c0010ec9:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0010ece:	83 c0 01             	add    eax,0x1
c0010ed1:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0010ed6:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010edb:	83 c0 01             	add    eax,0x1
c0010ede:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0010ee3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ee7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010eea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eee:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ef0:	39 c2                	cmp    edx,eax
c0010ef2:	7d 14                	jge    c0010f08 <Semaphore::acquire(int)+0xfc>
c0010ef4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ef8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010efb:	8d 50 01             	lea    edx,[eax+0x1]
c0010efe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f02:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010f05:	eb 6d                	jmp    c0010f74 <Semaphore::acquire(int)+0x168>
c0010f07:	90                   	nop
c0010f08:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010f0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f0f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010f16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f1d:	85 c0                	test   eax,eax
c0010f1f:	75 13                	jne    c0010f34 <Semaphore::acquire(int)+0x128>
c0010f21:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010f26:	8b 10                	mov    edx,DWORD PTR [eax]
c0010f28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f2c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f2f:	eb 17                	jmp    c0010f48 <Semaphore::acquire(int)+0x13c>
c0010f31:	8d 76 00             	lea    esi,[esi+0x0]
c0010f34:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0010f39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f3d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010f40:	8b 12                	mov    edx,DWORD PTR [edx]
c0010f42:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010f45:	8d 76 00             	lea    esi,[esi+0x0]
c0010f48:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010f4d:	8b 10                	mov    edx,DWORD PTR [eax]
c0010f4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f53:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010f56:	83 ec 0c             	sub    esp,0xc
c0010f59:	68 48 46 02 c0       	push   0xc0024648
c0010f5e:	e8 01 60 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010f63:	83 c4 10             	add    esp,0x10
c0010f66:	83 ec 0c             	sub    esp,0xc
c0010f69:	6a 05                	push   0x5
c0010f6b:	e8 90 63 00 00       	call   c0017300 <blockTask(TaskState)>
c0010f70:	83 c4 10             	add    esp,0x10
c0010f73:	90                   	nop
c0010f74:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010f79:	83 e8 01             	sub    eax,0x1
c0010f7c:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0010f81:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010f86:	85 c0                	test   eax,eax
c0010f88:	75 1a                	jne    c0010fa4 <Semaphore::acquire(int)+0x198>
c0010f8a:	a1 28 fa 02 c0       	mov    eax,ds:0xc002fa28
c0010f8f:	85 c0                	test   eax,eax
c0010f91:	74 11                	je     c0010fa4 <Semaphore::acquire(int)+0x198>
c0010f93:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c0010f9d:	e8 9e 62 00 00       	call   c0017240 <schedule()>
c0010fa2:	66 90                	xchg   ax,ax
c0010fa4:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0010fac:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0010fb1:	85 c0                	test   eax,eax
c0010fb3:	75 03                	jne    c0010fb8 <Semaphore::acquire(int)+0x1ac>
c0010fb5:	fb                   	sti    
c0010fb6:	66 90                	xchg   ax,ax
c0010fb8:	b8 00 00 00 00       	mov    eax,0x0
c0010fbd:	8d 76 00             	lea    esi,[esi+0x0]
c0010fc0:	83 c4 1c             	add    esp,0x1c
c0010fc3:	c3                   	ret    

c0010fc4 <Semaphore::acquire()>:
c0010fc4:	83 ec 0c             	sub    esp,0xc
c0010fc7:	83 ec 08             	sub    esp,0x8
c0010fca:	6a 00                	push   0x0
c0010fcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fd0:	e8 37 fe ff ff       	call   c0010e0c <Semaphore::acquire(int)>
c0010fd5:	83 c4 10             	add    esp,0x10
c0010fd8:	90                   	nop
c0010fd9:	83 c4 0c             	add    esp,0xc
c0010fdc:	c3                   	ret    
c0010fdd:	90                   	nop
c0010fde:	66 90                	xchg   ax,ax

c0010fe0 <Semaphore::release()>:
c0010fe0:	83 ec 1c             	sub    esp,0x1c
c0010fe3:	fa                   	cli    
c0010fe4:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0010fe9:	83 c0 01             	add    eax,0x1
c0010fec:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0010ff1:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010ff6:	83 c0 01             	add    eax,0x1
c0010ff9:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0010ffe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011002:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011005:	85 c0                	test   eax,eax
c0011007:	74 2b                	je     c0011034 <Semaphore::release()+0x54>
c0011009:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001100d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011010:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011014:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011018:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001101b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001101f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011022:	83 ec 0c             	sub    esp,0xc
c0011025:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011029:	e8 6e 65 00 00       	call   c001759c <unblockTask(ThreadControlBlock*)>
c001102e:	83 c4 10             	add    esp,0x10
c0011031:	eb 15                	jmp    c0011048 <Semaphore::release()+0x68>
c0011033:	90                   	nop
c0011034:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011038:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001103b:	8d 50 ff             	lea    edx,[eax-0x1]
c001103e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011042:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011045:	8d 76 00             	lea    esi,[esi+0x0]
c0011048:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c001104d:	83 e8 01             	sub    eax,0x1
c0011050:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0011055:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c001105a:	85 c0                	test   eax,eax
c001105c:	75 1a                	jne    c0011078 <Semaphore::release()+0x98>
c001105e:	a1 28 fa 02 c0       	mov    eax,ds:0xc002fa28
c0011063:	85 c0                	test   eax,eax
c0011065:	74 11                	je     c0011078 <Semaphore::release()+0x98>
c0011067:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c0011071:	e8 ca 61 00 00       	call   c0017240 <schedule()>
c0011076:	66 90                	xchg   ax,ax
c0011078:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0011080:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0011085:	85 c0                	test   eax,eax
c0011087:	75 03                	jne    c001108c <Semaphore::release()+0xac>
c0011089:	fb                   	sti    
c001108a:	66 90                	xchg   ax,ax
c001108c:	90                   	nop
c001108d:	83 c4 1c             	add    esp,0x1c
c0011090:	c3                   	ret    

c0011091 <KiSigKill(int)>:
c0011091:	83 ec 0c             	sub    esp,0xc
c0011094:	6a 00                	push   0x0
c0011096:	6a 00                	push   0x0
c0011098:	6a ff                	push   0xffffffff
c001109a:	6a 01                	push   0x1
c001109c:	e8 b1 6f 01 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00110a1:	83 c4 1c             	add    esp,0x1c
c00110a4:	c3                   	ret    

c00110a5 <KiDefaultSignalHandlerIgnore(int)>:
c00110a5:	c3                   	ret    

c00110a6 <KiDefaultSignalHandlerPause(int)>:
c00110a6:	57                   	push   edi
c00110a7:	b9 07 00 00 00       	mov    ecx,0x7
c00110ac:	56                   	push   esi
c00110ad:	be a3 46 02 c0       	mov    esi,0xc00246a3
c00110b2:	83 ec 24             	sub    esp,0x24
c00110b5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00110b9:	fc                   	cld    
c00110ba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00110bc:	8d 44 24 04          	lea    eax,[esp+0x4]
c00110c0:	50                   	push   eax
c00110c1:	6a 00                	push   0x0
c00110c3:	6a 00                	push   0x0
c00110c5:	6a 27                	push   0x27
c00110c7:	e8 86 6f 01 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00110cc:	83 c4 34             	add    esp,0x34
c00110cf:	5e                   	pop    esi
c00110d0:	5f                   	pop    edi
c00110d1:	c3                   	ret    

c00110d2 <KiDefaultSignalHandlerResume(int)>:
c00110d2:	57                   	push   edi
c00110d3:	b9 1d 00 00 00       	mov    ecx,0x1d
c00110d8:	56                   	push   esi
c00110d9:	be bf 46 02 c0       	mov    esi,0xc00246bf
c00110de:	83 ec 24             	sub    esp,0x24
c00110e1:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00110e5:	fc                   	cld    
c00110e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110e8:	8d 44 24 03          	lea    eax,[esp+0x3]
c00110ec:	50                   	push   eax
c00110ed:	6a 00                	push   0x0
c00110ef:	6a 00                	push   0x0
c00110f1:	6a 27                	push   0x27
c00110f3:	e8 5a 6f 01 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00110f8:	83 c4 34             	add    esp,0x34
c00110fb:	5e                   	pop    esi
c00110fc:	5f                   	pop    edi
c00110fd:	c3                   	ret    

c00110fe <KeDeinitSignals(SigHandlerBlock*)>:
c00110fe:	e9 f4 eb ff ff       	jmp    c000fcf7 <free>

c0011103 <KeInitSignals()>:
c0011103:	53                   	push   ebx
c0011104:	83 ec 14             	sub    esp,0x14
c0011107:	68 c8 00 00 00       	push   0xc8
c001110c:	e8 d6 eb ff ff       	call   c000fce7 <malloc>
c0011111:	83 c4 0c             	add    esp,0xc
c0011114:	89 c3                	mov    ebx,eax
c0011116:	6a 04                	push   0x4
c0011118:	6a 00                	push   0x0
c001111a:	50                   	push   eax
c001111b:	e8 d0 f3 fe ff       	call   c00004f0 <memset>
c0011120:	c7 83 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xbc],0x0
c001112a:	c7 83 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xc0],0x0
c0011134:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c001113b:	83 c4 0c             	add    esp,0xc
c001113e:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0011144:	6a 20                	push   0x20
c0011146:	6a 00                	push   0x0
c0011148:	50                   	push   eax
c0011149:	e8 a2 f3 fe ff       	call   c00004f0 <memset>
c001114e:	83 c4 0c             	add    esp,0xc
c0011151:	6a 44                	push   0x44
c0011153:	6a 00                	push   0x0
c0011155:	53                   	push   ebx
c0011156:	e8 95 f3 fe ff       	call   c00004f0 <memset>
c001115b:	83 c4 0c             	add    esp,0xc
c001115e:	8d 83 88 00 00 00    	lea    eax,[ebx+0x88]
c0011164:	6a 11                	push   0x11
c0011166:	6a 00                	push   0x0
c0011168:	50                   	push   eax
c0011169:	e8 82 f3 fe ff       	call   c00004f0 <memset>
c001116e:	89 d8                	mov    eax,ebx
c0011170:	83 c4 18             	add    esp,0x18
c0011173:	5b                   	pop    ebx
c0011174:	c3                   	ret    

c0011175 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011175:	53                   	push   ebx
c0011176:	b8 01 00 00 00       	mov    eax,0x1
c001117b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001117f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011183:	83 f9 10             	cmp    ecx,0x10
c0011186:	7f 21                	jg     c00111a9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011188:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001118b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001118f:	89 03                	mov    DWORD PTR [ebx],eax
c0011191:	b8 01 00 00 00       	mov    eax,0x1
c0011196:	d3 e0                	shl    eax,cl
c0011198:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001119c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001119f:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c00111a7:	31 c0                	xor    eax,eax
c00111a9:	5b                   	pop    ebx
c00111aa:	c3                   	ret    

c00111ab <KeRaiseSignal(SigHandlerBlock*, int)>:
c00111ab:	55                   	push   ebp
c00111ac:	57                   	push   edi
c00111ad:	bf 08 00 00 00       	mov    edi,0x8
c00111b2:	56                   	push   esi
c00111b3:	53                   	push   ebx
c00111b4:	83 ec 14             	sub    esp,0x14
c00111b7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00111bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00111bf:	68 dc 46 02 c0       	push   0xc00246dc
c00111c4:	e8 9b 5d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00111c9:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00111d0:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00111d6:	83 c4 10             	add    esp,0x10
c00111d9:	31 c9                	xor    ecx,ecx
c00111db:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00111df:	99                   	cdq    
c00111e0:	f7 ff                	idiv   edi
c00111e2:	8d 42 24             	lea    eax,[edx+0x24]
c00111e5:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00111e9:	85 f6                	test   esi,esi
c00111eb:	75 1a                	jne    c0011207 <KeRaiseSignal(SigHandlerBlock*, int)+0x5c>
c00111ed:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00111f1:	89 7c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],edi
c00111f5:	50                   	push   eax
c00111f6:	50                   	push   eax
c00111f7:	52                   	push   edx
c00111f8:	68 f2 46 02 c0       	push   0xc00246f2
c00111fd:	e8 62 5d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011202:	83 c4 10             	add    esp,0x10
c0011205:	eb 1b                	jmp    c0011222 <KeRaiseSignal(SigHandlerBlock*, int)+0x77>
c0011207:	41                   	inc    ecx
c0011208:	83 f9 08             	cmp    ecx,0x8
c001120b:	75 ce                	jne    c00111db <KeRaiseSignal(SigHandlerBlock*, int)+0x30>
c001120d:	83 ec 0c             	sub    esp,0xc
c0011210:	be 01 00 00 00       	mov    esi,0x1
c0011215:	68 13 47 02 c0       	push   0xc0024713
c001121a:	e8 45 5d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001121f:	83 c4 10             	add    esp,0x10
c0011222:	83 c4 0c             	add    esp,0xc
c0011225:	89 f0                	mov    eax,esi
c0011227:	5b                   	pop    ebx
c0011228:	5e                   	pop    esi
c0011229:	5f                   	pop    edi
c001122a:	5d                   	pop    ebp
c001122b:	c3                   	ret    

c001122c <KeCheckSignal(SigHandlerBlock*, int*)>:
c001122c:	55                   	push   ebp
c001122d:	57                   	push   edi
c001122e:	56                   	push   esi
c001122f:	53                   	push   ebx
c0011230:	83 ec 1c             	sub    esp,0x1c
c0011233:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0011237:	85 db                	test   ebx,ebx
c0011239:	0f 84 e0 00 00 00    	je     c001131f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c001123f:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011246:	0f 84 d3 00 00 00    	je     c001131f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c001124c:	31 c9                	xor    ecx,ecx
c001124e:	bf 08 00 00 00       	mov    edi,0x8
c0011253:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011259:	8d 04 0e             	lea    eax,[esi+ecx*1]
c001125c:	99                   	cdq    
c001125d:	f7 ff                	idiv   edi
c001125f:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011266:	85 ed                	test   ebp,ebp
c0011268:	0f 84 d2 00 00 00    	je     c0011340 <KeCheckSignal(SigHandlerBlock*, int*)+0x114>
c001126e:	89 e9                	mov    ecx,ebp
c0011270:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011276:	bf 01 00 00 00       	mov    edi,0x1
c001127b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001127f:	d3 e7                	shl    edi,cl
c0011281:	31 c9                	xor    ecx,ecx
c0011283:	b8 01 00 00 00       	mov    eax,0x1
c0011288:	d3 e0                	shl    eax,cl
c001128a:	85 44 24 0c          	test   DWORD PTR [esp+0xc],eax
c001128e:	74 0a                	je     c001129a <KeCheckSignal(SigHandlerBlock*, int*)+0x6e>
c0011290:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011294:	0f 85 85 00 00 00    	jne    c001131f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c001129a:	41                   	inc    ecx
c001129b:	83 f9 11             	cmp    ecx,0x11
c001129e:	75 e3                	jne    c0011283 <KeCheckSignal(SigHandlerBlock*, int*)+0x57>
c00112a0:	46                   	inc    esi
c00112a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112a5:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00112ab:	09 f8                	or     eax,edi
c00112ad:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c00112b8:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00112be:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00112c5:	31 c0                	xor    eax,eax
c00112c7:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00112cf:	74 09                	je     c00112da <KeCheckSignal(SigHandlerBlock*, int*)+0xae>
c00112d1:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00112d8:	eb 06                	jmp    c00112e0 <KeCheckSignal(SigHandlerBlock*, int*)+0xb4>
c00112da:	40                   	inc    eax
c00112db:	83 f8 08             	cmp    eax,0x8
c00112de:	75 e7                	jne    c00112c7 <KeCheckSignal(SigHandlerBlock*, int*)+0x9b>
c00112e0:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c00112e3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00112e7:	83 fd 09             	cmp    ebp,0x9
c00112ea:	89 2a                	mov    DWORD PTR [edx],ebp
c00112ec:	75 14                	jne    c0011302 <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c00112ee:	83 ec 0c             	sub    esp,0xc
c00112f1:	68 24 47 02 c0       	push   0xc0024724
c00112f6:	e8 69 5c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00112fb:	b8 91 10 01 c0       	mov    eax,0xc0011091
c0011300:	eb 39                	jmp    c001133b <KeCheckSignal(SigHandlerBlock*, int*)+0x10f>
c0011302:	83 f8 01             	cmp    eax,0x1
c0011305:	75 1c                	jne    c0011323 <KeCheckSignal(SigHandlerBlock*, int*)+0xf7>
c0011307:	83 ec 0c             	sub    esp,0xc
c001130a:	f7 d7                	not    edi
c001130c:	68 2e 47 02 c0       	push   0xc002472e
c0011311:	e8 4e 5c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011316:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c001131c:	83 c4 10             	add    esp,0x10
c001131f:	31 c0                	xor    eax,eax
c0011321:	eb 30                	jmp    c0011353 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011323:	85 c0                	test   eax,eax
c0011325:	75 2c                	jne    c0011353 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011327:	83 ec 0c             	sub    esp,0xc
c001132a:	68 3b 47 02 c0       	push   0xc002473b
c001132f:	e8 30 5c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011334:	8b 04 ad 40 6e 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffd91c0]
c001133b:	83 c4 10             	add    esp,0x10
c001133e:	eb 13                	jmp    c0011353 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011340:	46                   	inc    esi
c0011341:	41                   	inc    ecx
c0011342:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011348:	83 f9 08             	cmp    ecx,0x8
c001134b:	0f 85 02 ff ff ff    	jne    c0011253 <KeCheckSignal(SigHandlerBlock*, int*)+0x27>
c0011351:	eb cc                	jmp    c001131f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011353:	83 c4 1c             	add    esp,0x1c
c0011356:	5b                   	pop    ebx
c0011357:	5e                   	pop    esi
c0011358:	5f                   	pop    edi
c0011359:	5d                   	pop    ebp
c001135a:	c3                   	ret    

c001135b <KiCheckSignalZ>:
c001135b:	80 3d d4 d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0d4,0x0
c0011362:	74 43                	je     c00113a7 <KiCheckSignalZ+0x4c>
c0011364:	83 ec 24             	sub    esp,0x24
c0011367:	8d 44 24 14          	lea    eax,[esp+0x14]
c001136b:	50                   	push   eax
c001136c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011371:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011374:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c001137a:	e8 ad fe ff ff       	call   c001122c <KeCheckSignal(SigHandlerBlock*, int*)>
c001137f:	83 c4 10             	add    esp,0x10
c0011382:	31 d2                	xor    edx,edx
c0011384:	85 c0                	test   eax,eax
c0011386:	74 19                	je     c00113a1 <KiCheckSignalZ+0x46>
c0011388:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001138e:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011391:	89 02                	mov    DWORD PTR [edx],eax
c0011393:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c001139a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001139e:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00113a1:	89 d0                	mov    eax,edx
c00113a3:	83 c4 1c             	add    esp,0x1c
c00113a6:	c3                   	ret    
c00113a7:	31 d2                	xor    edx,edx
c00113a9:	89 d0                	mov    eax,edx
c00113ab:	c3                   	ret    

c00113ac <KeCompleteSignal(SigHandlerBlock*, int)>:
c00113ac:	56                   	push   esi
c00113ad:	53                   	push   ebx
c00113ae:	bb 01 00 00 00       	mov    ebx,0x1
c00113b3:	52                   	push   edx
c00113b4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00113b8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00113bc:	d3 e3                	shl    ebx,cl
c00113be:	83 f9 10             	cmp    ecx,0x10
c00113c1:	7f 08                	jg     c00113cb <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00113c3:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00113c9:	75 10                	jne    c00113db <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00113cb:	83 ec 0c             	sub    esp,0xc
c00113ce:	68 5e 47 02 c0       	push   0xc002475e
c00113d3:	e8 56 ec ff ff       	call   c001002e <KePanic(char const*)>
c00113d8:	83 c4 10             	add    esp,0x10
c00113db:	f7 d3                	not    ebx
c00113dd:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00113e3:	58                   	pop    eax
c00113e4:	5b                   	pop    ebx
c00113e5:	5e                   	pop    esi
c00113e6:	c3                   	ret    

c00113e7 <KiFinishSignalZ>:
c00113e7:	53                   	push   ebx
c00113e8:	83 ec 08             	sub    esp,0x8
c00113eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00113f4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00113f7:	83 fa 08             	cmp    edx,0x8
c00113fa:	75 0c                	jne    c0011408 <KiFinishSignalZ+0x21>
c00113fc:	83 ec 0c             	sub    esp,0xc
c00113ff:	50                   	push   eax
c0011400:	e8 97 61 00 00       	call   c001759c <unblockTask(ThreadControlBlock*)>
c0011405:	83 c4 10             	add    esp,0x10
c0011408:	50                   	push   eax
c0011409:	50                   	push   eax
c001140a:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001140d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011412:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011415:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c001141b:	e8 8c ff ff ff       	call   c00113ac <KeCompleteSignal(SigHandlerBlock*, int)>
c0011420:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011426:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001142d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011434:	83 c4 18             	add    esp,0x18
c0011437:	5b                   	pop    ebx
c0011438:	c3                   	ret    

c0011439 <SysSeekDir(regs*)>:
c0011439:	31 c0                	xor    eax,eax
c001143b:	31 d2                	xor    edx,edx
c001143d:	c3                   	ret    

c001143e <SysTellDir(regs*)>:
c001143e:	31 c0                	xor    eax,eax
c0011440:	31 d2                	xor    edx,edx
c0011442:	c3                   	ret    

c0011443 <SysVerify(regs*)>:
c0011443:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011447:	31 d2                	xor    edx,edx
c0011449:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001144c:	c3                   	ret    

c001144d <SysGetArgc(regs*)>:
c001144d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011452:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011455:	8b 80 b6 05 00 00    	mov    eax,DWORD PTR [eax+0x5b6]
c001145b:	89 c2                	mov    edx,eax
c001145d:	c1 fa 1f             	sar    edx,0x1f
c0011460:	c3                   	ret    

c0011461 <SysTTYName(regs*)>:
c0011461:	b8 01 00 00 00       	mov    eax,0x1
c0011466:	31 d2                	xor    edx,edx
c0011468:	c3                   	ret    

c0011469 <SysFormatDisk(regs*)>:
c0011469:	56                   	push   esi
c001146a:	53                   	push   ebx
c001146b:	83 ec 04             	sub    esp,0x4
c001146e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011472:	8b 1d 04 c3 02 c0    	mov    ebx,DWORD PTR ds:0xc002c304
c0011478:	eb 28                	jmp    c00114a2 <SysFormatDisk(regs*)+0x39>
c001147a:	83 ec 0c             	sub    esp,0xc
c001147d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011480:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011483:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011485:	51                   	push   ecx
c0011486:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011489:	51                   	push   ecx
c001148a:	50                   	push   eax
c001148b:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0011492:	50                   	push   eax
c0011493:	53                   	push   ebx
c0011494:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011497:	83 c4 20             	add    esp,0x20
c001149a:	83 f8 08             	cmp    eax,0x8
c001149d:	75 14                	jne    c00114b3 <SysFormatDisk(regs*)+0x4a>
c001149f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00114a2:	85 db                	test   ebx,ebx
c00114a4:	75 d4                	jne    c001147a <SysFormatDisk(regs*)+0x11>
c00114a6:	83 c4 04             	add    esp,0x4
c00114a9:	b8 03 00 00 00       	mov    eax,0x3
c00114ae:	31 d2                	xor    edx,edx
c00114b0:	5b                   	pop    ebx
c00114b1:	5e                   	pop    esi
c00114b2:	c3                   	ret    
c00114b3:	85 c0                	test   eax,eax
c00114b5:	74 1f                	je     c00114d6 <SysFormatDisk(regs*)+0x6d>
c00114b7:	83 f8 09             	cmp    eax,0x9
c00114ba:	74 0d                	je     c00114c9 <SysFormatDisk(regs*)+0x60>
c00114bc:	83 c4 04             	add    esp,0x4
c00114bf:	b8 02 00 00 00       	mov    eax,0x2
c00114c4:	31 d2                	xor    edx,edx
c00114c6:	5b                   	pop    ebx
c00114c7:	5e                   	pop    esi
c00114c8:	c3                   	ret    
c00114c9:	83 c4 04             	add    esp,0x4
c00114cc:	b8 01 00 00 00       	mov    eax,0x1
c00114d1:	31 d2                	xor    edx,edx
c00114d3:	5b                   	pop    ebx
c00114d4:	5e                   	pop    esi
c00114d5:	c3                   	ret    
c00114d6:	83 c4 04             	add    esp,0x4
c00114d9:	31 c0                	xor    eax,eax
c00114db:	31 d2                	xor    edx,edx
c00114dd:	5b                   	pop    ebx
c00114de:	5e                   	pop    esi
c00114df:	c3                   	ret    

c00114e0 <SysSetDiskVolumeLabel(regs*)>:
c00114e0:	56                   	push   esi
c00114e1:	53                   	push   ebx
c00114e2:	83 ec 04             	sub    esp,0x4
c00114e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00114e9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00114ec:	83 f8 19             	cmp    eax,0x19
c00114ef:	77 33                	ja     c0011524 <SysSetDiskVolumeLabel(regs*)+0x44>
c00114f1:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c00114f8:	85 c9                	test   ecx,ecx
c00114fa:	74 28                	je     c0011524 <SysSetDiskVolumeLabel(regs*)+0x44>
c00114fc:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00114ff:	85 db                	test   ebx,ebx
c0011501:	74 21                	je     c0011524 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011503:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011509:	85 d2                	test   edx,edx
c001150b:	74 17                	je     c0011524 <SysSetDiskVolumeLabel(regs*)+0x44>
c001150d:	8b 32                	mov    esi,DWORD PTR [edx]
c001150f:	53                   	push   ebx
c0011510:	50                   	push   eax
c0011511:	51                   	push   ecx
c0011512:	52                   	push   edx
c0011513:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011516:	83 c4 10             	add    esp,0x10
c0011519:	89 c2                	mov    edx,eax
c001151b:	83 c4 04             	add    esp,0x4
c001151e:	c1 fa 1f             	sar    edx,0x1f
c0011521:	5b                   	pop    ebx
c0011522:	5e                   	pop    esi
c0011523:	c3                   	ret    
c0011524:	83 c4 04             	add    esp,0x4
c0011527:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001152c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011531:	5b                   	pop    ebx
c0011532:	5e                   	pop    esi
c0011533:	c3                   	ret    

c0011534 <SysGetDiskVolumeLabel(regs*)>:
c0011534:	57                   	push   edi
c0011535:	56                   	push   esi
c0011536:	53                   	push   ebx
c0011537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001153b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001153e:	83 fa 19             	cmp    edx,0x19
c0011541:	77 3c                	ja     c001157f <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011543:	8b 0c 95 e0 ca 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd3520]
c001154a:	85 c9                	test   ecx,ecx
c001154c:	74 31                	je     c001157f <SysGetDiskVolumeLabel(regs*)+0x4b>
c001154e:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011551:	85 db                	test   ebx,ebx
c0011553:	74 2a                	je     c001157f <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011555:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011558:	85 f6                	test   esi,esi
c001155a:	74 23                	je     c001157f <SysGetDiskVolumeLabel(regs*)+0x4b>
c001155c:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011562:	85 c0                	test   eax,eax
c0011564:	74 19                	je     c001157f <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011566:	83 ec 0c             	sub    esp,0xc
c0011569:	8b 38                	mov    edi,DWORD PTR [eax]
c001156b:	56                   	push   esi
c001156c:	53                   	push   ebx
c001156d:	52                   	push   edx
c001156e:	51                   	push   ecx
c001156f:	50                   	push   eax
c0011570:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011573:	83 c4 20             	add    esp,0x20
c0011576:	89 c2                	mov    edx,eax
c0011578:	5b                   	pop    ebx
c0011579:	c1 fa 1f             	sar    edx,0x1f
c001157c:	5e                   	pop    esi
c001157d:	5f                   	pop    edi
c001157e:	c3                   	ret    
c001157f:	5b                   	pop    ebx
c0011580:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011585:	ba ff ff ff ff       	mov    edx,0xffffffff
c001158a:	5e                   	pop    esi
c001158b:	5f                   	pop    edi
c001158c:	c3                   	ret    

c001158d <SysRealpath(regs*)>:
c001158d:	83 ec 0c             	sub    esp,0xc
c0011590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011594:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011597:	85 d2                	test   edx,edx
c0011599:	74 07                	je     c00115a2 <SysRealpath(regs*)+0x15>
c001159b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001159e:	85 c0                	test   eax,eax
c00115a0:	75 0b                	jne    c00115ad <SysRealpath(regs*)+0x20>
c00115a2:	b8 01 00 00 00       	mov    eax,0x1
c00115a7:	31 d2                	xor    edx,edx
c00115a9:	83 c4 0c             	add    esp,0xc
c00115ac:	c3                   	ret    
c00115ad:	6a 00                	push   0x0
c00115af:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00115b5:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00115b8:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00115be:	51                   	push   ecx
c00115bf:	52                   	push   edx
c00115c0:	50                   	push   eax
c00115c1:	e8 88 68 ff ff       	call   c0007e4e <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00115c6:	83 c4 10             	add    esp,0x10
c00115c9:	31 c0                	xor    eax,eax
c00115cb:	31 d2                	xor    edx,edx
c00115cd:	83 c4 0c             	add    esp,0xc
c00115d0:	c3                   	ret    

c00115d1 <SysReadDir(regs*)>:
c00115d1:	53                   	push   ebx
c00115d2:	83 ec 18             	sub    esp,0x18
c00115d5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00115d9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00115dc:	83 f8 02             	cmp    eax,0x2
c00115df:	76 61                	jbe    c0011642 <SysReadDir(regs*)+0x71>
c00115e1:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00115e8:	77 49                	ja     c0011633 <SysReadDir(regs*)+0x62>
c00115ea:	83 ec 0c             	sub    esp,0xc
c00115ed:	50                   	push   eax
c00115ee:	e8 6e 1d 00 00       	call   c0013361 <KeGetFileFromDescriptor(int)>
c00115f3:	83 c4 10             	add    esp,0x10
c00115f6:	85 c0                	test   eax,eax
c00115f8:	74 39                	je     c0011633 <SysReadDir(regs*)+0x62>
c00115fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011602:	83 ec 0c             	sub    esp,0xc
c0011605:	8b 10                	mov    edx,DWORD PTR [eax]
c0011607:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001160b:	51                   	push   ecx
c001160c:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001160f:	51                   	push   ecx
c0011610:	6a 00                	push   0x0
c0011612:	68 10 01 00 00       	push   0x110
c0011617:	50                   	push   eax
c0011618:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001161b:	83 c4 20             	add    esp,0x20
c001161e:	85 c0                	test   eax,eax
c0011620:	74 29                	je     c001164b <SysReadDir(regs*)+0x7a>
c0011622:	83 f8 07             	cmp    eax,0x7
c0011625:	74 1b                	je     c0011642 <SysReadDir(regs*)+0x71>
c0011627:	b8 02 00 00 00       	mov    eax,0x2
c001162c:	31 d2                	xor    edx,edx
c001162e:	83 c4 18             	add    esp,0x18
c0011631:	5b                   	pop    ebx
c0011632:	c3                   	ret    
c0011633:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011638:	ba ff ff ff ff       	mov    edx,0xffffffff
c001163d:	83 c4 18             	add    esp,0x18
c0011640:	5b                   	pop    ebx
c0011641:	c3                   	ret    
c0011642:	b8 01 00 00 00       	mov    eax,0x1
c0011647:	31 d2                	xor    edx,edx
c0011649:	eb e3                	jmp    c001162e <SysReadDir(regs*)+0x5d>
c001164b:	31 c0                	xor    eax,eax
c001164d:	31 d2                	xor    edx,edx
c001164f:	eb dd                	jmp    c001162e <SysReadDir(regs*)+0x5d>

c0011651 <SysIsATTY(regs*)>:
c0011651:	83 ec 0c             	sub    esp,0xc
c0011654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011658:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001165b:	83 f8 02             	cmp    eax,0x2
c001165e:	76 07                	jbe    c0011667 <SysIsATTY(regs*)+0x16>
c0011660:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011665:	75 26                	jne    c001168d <SysIsATTY(regs*)+0x3c>
c0011667:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001166c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001166f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0011675:	85 c0                	test   eax,eax
c0011677:	74 24                	je     c001169d <SysIsATTY(regs*)+0x4c>
c0011679:	83 ec 0c             	sub    esp,0xc
c001167c:	8b 10                	mov    edx,DWORD PTR [eax]
c001167e:	50                   	push   eax
c001167f:	ff 12                	call   DWORD PTR [edx]
c0011681:	31 d2                	xor    edx,edx
c0011683:	0f b6 c0             	movzx  eax,al
c0011686:	83 c4 10             	add    esp,0x10
c0011689:	83 c4 0c             	add    esp,0xc
c001168c:	c3                   	ret    
c001168d:	83 ec 0c             	sub    esp,0xc
c0011690:	50                   	push   eax
c0011691:	e8 cb 1c 00 00       	call   c0013361 <KeGetFileFromDescriptor(int)>
c0011696:	83 c4 10             	add    esp,0x10
c0011699:	85 c0                	test   eax,eax
c001169b:	75 dc                	jne    c0011679 <SysIsATTY(regs*)+0x28>
c001169d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00116a2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00116a7:	83 c4 0c             	add    esp,0xc
c00116aa:	c3                   	ret    

c00116ab <SysSeek(regs*)>:
c00116ab:	53                   	push   ebx
c00116ac:	83 ec 08             	sub    esp,0x8
c00116af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00116b3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00116b6:	8d 50 fd             	lea    edx,[eax-0x3]
c00116b9:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00116bf:	77 39                	ja     c00116fa <SysSeek(regs*)+0x4f>
c00116c1:	83 ec 0c             	sub    esp,0xc
c00116c4:	50                   	push   eax
c00116c5:	e8 97 1c 00 00       	call   c0013361 <KeGetFileFromDescriptor(int)>
c00116ca:	83 c4 10             	add    esp,0x10
c00116cd:	85 c0                	test   eax,eax
c00116cf:	74 29                	je     c00116fa <SysSeek(regs*)+0x4f>
c00116d1:	83 ec 04             	sub    esp,0x4
c00116d4:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00116d7:	31 db                	xor    ebx,ebx
c00116d9:	53                   	push   ebx
c00116da:	51                   	push   ecx
c00116db:	50                   	push   eax
c00116dc:	e8 61 6b ff ff       	call   c0008242 <File::seek(unsigned long long)>
c00116e1:	83 c4 10             	add    esp,0x10
c00116e4:	85 c0                	test   eax,eax
c00116e6:	0f 95 c0             	setne  al
c00116e9:	31 d2                	xor    edx,edx
c00116eb:	0f b6 c0             	movzx  eax,al
c00116ee:	f7 d8                	neg    eax
c00116f0:	83 d2 00             	adc    edx,0x0
c00116f3:	83 c4 08             	add    esp,0x8
c00116f6:	f7 da                	neg    edx
c00116f8:	5b                   	pop    ebx
c00116f9:	c3                   	ret    
c00116fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00116ff:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011704:	83 c4 08             	add    esp,0x8
c0011707:	5b                   	pop    ebx
c0011708:	c3                   	ret    

c0011709 <SysTell(regs*)>:
c0011709:	53                   	push   ebx
c001170a:	83 ec 08             	sub    esp,0x8
c001170d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011711:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011714:	83 f8 02             	cmp    eax,0x2
c0011717:	76 56                	jbe    c001176f <SysTell(regs*)+0x66>
c0011719:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001171e:	76 19                	jbe    c0011739 <SysTell(regs*)+0x30>
c0011720:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011723:	31 d2                	xor    edx,edx
c0011725:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001172b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011732:	31 c0                	xor    eax,eax
c0011734:	83 c4 08             	add    esp,0x8
c0011737:	5b                   	pop    ebx
c0011738:	c3                   	ret    
c0011739:	83 ec 0c             	sub    esp,0xc
c001173c:	50                   	push   eax
c001173d:	e8 1f 1c 00 00       	call   c0013361 <KeGetFileFromDescriptor(int)>
c0011742:	83 c4 10             	add    esp,0x10
c0011745:	85 c0                	test   eax,eax
c0011747:	74 26                	je     c001176f <SysTell(regs*)+0x66>
c0011749:	83 ec 08             	sub    esp,0x8
c001174c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001174f:	52                   	push   edx
c0011750:	50                   	push   eax
c0011751:	e8 98 6b ff ff       	call   c00082ee <File::tell(unsigned long long*)>
c0011756:	83 c4 10             	add    esp,0x10
c0011759:	85 c0                	test   eax,eax
c001175b:	0f 95 c0             	setne  al
c001175e:	31 d2                	xor    edx,edx
c0011760:	0f b6 c0             	movzx  eax,al
c0011763:	f7 d8                	neg    eax
c0011765:	83 d2 00             	adc    edx,0x0
c0011768:	83 c4 08             	add    esp,0x8
c001176b:	f7 da                	neg    edx
c001176d:	5b                   	pop    ebx
c001176e:	c3                   	ret    
c001176f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011774:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011779:	83 c4 08             	add    esp,0x8
c001177c:	5b                   	pop    ebx
c001177d:	c3                   	ret    

c001177e <SysSize(regs*)>:
c001177e:	53                   	push   ebx
c001177f:	83 ec 18             	sub    esp,0x18
c0011782:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011786:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011789:	83 f8 02             	cmp    eax,0x2
c001178c:	76 5b                	jbe    c00117e9 <SysSize(regs*)+0x6b>
c001178e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011793:	76 19                	jbe    c00117ae <SysSize(regs*)+0x30>
c0011795:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011798:	31 d2                	xor    edx,edx
c001179a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00117a0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00117a7:	31 c0                	xor    eax,eax
c00117a9:	83 c4 18             	add    esp,0x18
c00117ac:	5b                   	pop    ebx
c00117ad:	c3                   	ret    
c00117ae:	83 ec 0c             	sub    esp,0xc
c00117b1:	50                   	push   eax
c00117b2:	e8 aa 1b 00 00       	call   c0013361 <KeGetFileFromDescriptor(int)>
c00117b7:	83 c4 10             	add    esp,0x10
c00117ba:	85 c0                	test   eax,eax
c00117bc:	74 2b                	je     c00117e9 <SysSize(regs*)+0x6b>
c00117be:	83 ec 04             	sub    esp,0x4
c00117c1:	8d 54 24 13          	lea    edx,[esp+0x13]
c00117c5:	52                   	push   edx
c00117c6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00117c9:	52                   	push   edx
c00117ca:	50                   	push   eax
c00117cb:	e8 b6 6c ff ff       	call   c0008486 <File::stat(unsigned long long*, bool*)>
c00117d0:	83 c4 10             	add    esp,0x10
c00117d3:	85 c0                	test   eax,eax
c00117d5:	0f 95 c0             	setne  al
c00117d8:	31 d2                	xor    edx,edx
c00117da:	0f b6 c0             	movzx  eax,al
c00117dd:	f7 d8                	neg    eax
c00117df:	83 d2 00             	adc    edx,0x0
c00117e2:	83 c4 18             	add    esp,0x18
c00117e5:	f7 da                	neg    edx
c00117e7:	5b                   	pop    ebx
c00117e8:	c3                   	ret    
c00117e9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00117ee:	ba ff ff ff ff       	mov    edx,0xffffffff
c00117f3:	83 c4 18             	add    esp,0x18
c00117f6:	5b                   	pop    ebx
c00117f7:	c3                   	ret    

c00117f8 <SysSizeFromFilename(regs*)>:
c00117f8:	55                   	push   ebp
c00117f9:	57                   	push   edi
c00117fa:	56                   	push   esi
c00117fb:	53                   	push   ebx
c00117fc:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011802:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011809:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001180c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001180f:	85 f6                	test   esi,esi
c0011811:	74 34                	je     c0011847 <SysSizeFromFilename(regs*)+0x4f>
c0011813:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011819:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001181c:	83 f8 02             	cmp    eax,0x2
c001181f:	76 2d                	jbe    c001184e <SysSizeFromFilename(regs*)+0x56>
c0011821:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011826:	76 3b                	jbe    c0011863 <SysSizeFromFilename(regs*)+0x6b>
c0011828:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001182b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011831:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011838:	81 c4 4c 02 00 00    	add    esp,0x24c
c001183e:	31 c0                	xor    eax,eax
c0011840:	5b                   	pop    ebx
c0011841:	31 d2                	xor    edx,edx
c0011843:	5e                   	pop    esi
c0011844:	5f                   	pop    edi
c0011845:	5d                   	pop    ebp
c0011846:	c3                   	ret    
c0011847:	89 f8                	mov    eax,edi
c0011849:	83 f8 02             	cmp    eax,0x2
c001184c:	77 d3                	ja     c0011821 <SysSizeFromFilename(regs*)+0x29>
c001184e:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011854:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011859:	5b                   	pop    ebx
c001185a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001185f:	5e                   	pop    esi
c0011860:	5f                   	pop    edi
c0011861:	5d                   	pop    ebp
c0011862:	c3                   	ret    
c0011863:	83 ec 0c             	sub    esp,0xc
c0011866:	68 14 01 00 00       	push   0x114
c001186b:	e8 77 e4 ff ff       	call   c000fce7 <malloc>
c0011870:	6a 01                	push   0x1
c0011872:	89 c5                	mov    ebp,eax
c0011874:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011879:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001187c:	50                   	push   eax
c001187d:	57                   	push   edi
c001187e:	55                   	push   ebp
c001187f:	e8 e4 67 ff ff       	call   c0008068 <File::File(char const*, Process*, bool)>
c0011884:	83 c4 20             	add    esp,0x20
c0011887:	85 ed                	test   ebp,ebp
c0011889:	74 c3                	je     c001184e <SysSizeFromFilename(regs*)+0x56>
c001188b:	83 ec 04             	sub    esp,0x4
c001188e:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011892:	50                   	push   eax
c0011893:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011896:	51                   	push   ecx
c0011897:	55                   	push   ebp
c0011898:	e8 e9 6b ff ff       	call   c0008486 <File::stat(unsigned long long*, bool*)>
c001189d:	89 c3                	mov    ebx,eax
c001189f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00118a2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00118a5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118a8:	83 c4 10             	add    esp,0x10
c00118ab:	85 db                	test   ebx,ebx
c00118ad:	75 9f                	jne    c001184e <SysSizeFromFilename(regs*)+0x56>
c00118af:	6a 00                	push   0x0
c00118b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118b9:	05 0c 01 00 00       	add    eax,0x10c
c00118be:	50                   	push   eax
c00118bf:	57                   	push   edi
c00118c0:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00118c7:	53                   	push   ebx
c00118c8:	e8 81 65 ff ff       	call   c0007e4e <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00118cd:	58                   	pop    eax
c00118ce:	5a                   	pop    edx
c00118cf:	8d 44 24 18          	lea    eax,[esp+0x18]
c00118d3:	50                   	push   eax
c00118d4:	53                   	push   ebx
c00118d5:	e8 fb 5f ff ff       	call   c00078d5 <KeDereferenceSymlink(char const*, char*)>
c00118da:	83 c4 10             	add    esp,0x10
c00118dd:	83 f8 01             	cmp    eax,0x1
c00118e0:	74 1a                	je     c00118fc <SysSizeFromFilename(regs*)+0x104>
c00118e2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00118e7:	74 26                	je     c001190f <SysSizeFromFilename(regs*)+0x117>
c00118e9:	85 f6                	test   esi,esi
c00118eb:	0f 84 47 ff ff ff    	je     c0011838 <SysSizeFromFilename(regs*)+0x40>
c00118f1:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00118f7:	e9 3c ff ff ff       	jmp    c0011838 <SysSizeFromFilename(regs*)+0x40>
c00118fc:	85 f6                	test   esi,esi
c00118fe:	0f 84 34 ff ff ff    	je     c0011838 <SysSizeFromFilename(regs*)+0x40>
c0011904:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001190a:	e9 29 ff ff ff       	jmp    c0011838 <SysSizeFromFilename(regs*)+0x40>
c001190f:	85 f6                	test   esi,esi
c0011911:	0f 84 21 ff ff ff    	je     c0011838 <SysSizeFromFilename(regs*)+0x40>
c0011917:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001191d:	e9 16 ff ff ff       	jmp    c0011838 <SysSizeFromFilename(regs*)+0x40>

c0011922 <SysSizeFromFilenameNoSymlink(regs*)>:
c0011922:	55                   	push   ebp
c0011923:	57                   	push   edi
c0011924:	56                   	push   esi
c0011925:	53                   	push   ebx
c0011926:	81 ec 4c 02 00 00    	sub    esp,0x24c
c001192c:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011933:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011936:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011939:	85 f6                	test   esi,esi
c001193b:	74 34                	je     c0011971 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c001193d:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011943:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011946:	83 f8 02             	cmp    eax,0x2
c0011949:	76 2d                	jbe    c0011978 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c001194b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011950:	76 3b                	jbe    c001198d <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c0011952:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011955:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001195b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011962:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011968:	31 c0                	xor    eax,eax
c001196a:	5b                   	pop    ebx
c001196b:	31 d2                	xor    edx,edx
c001196d:	5e                   	pop    esi
c001196e:	5f                   	pop    edi
c001196f:	5d                   	pop    ebp
c0011970:	c3                   	ret    
c0011971:	89 f8                	mov    eax,edi
c0011973:	83 f8 02             	cmp    eax,0x2
c0011976:	77 d3                	ja     c001194b <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c0011978:	81 c4 4c 02 00 00    	add    esp,0x24c
c001197e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011983:	5b                   	pop    ebx
c0011984:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011989:	5e                   	pop    esi
c001198a:	5f                   	pop    edi
c001198b:	5d                   	pop    ebp
c001198c:	c3                   	ret    
c001198d:	83 ec 0c             	sub    esp,0xc
c0011990:	68 14 01 00 00       	push   0x114
c0011995:	e8 4d e3 ff ff       	call   c000fce7 <malloc>
c001199a:	6a 00                	push   0x0
c001199c:	89 c5                	mov    ebp,eax
c001199e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119a3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119a6:	50                   	push   eax
c00119a7:	57                   	push   edi
c00119a8:	55                   	push   ebp
c00119a9:	e8 ba 66 ff ff       	call   c0008068 <File::File(char const*, Process*, bool)>
c00119ae:	83 c4 20             	add    esp,0x20
c00119b1:	85 ed                	test   ebp,ebp
c00119b3:	74 c3                	je     c0011978 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00119b5:	83 ec 04             	sub    esp,0x4
c00119b8:	8d 44 24 13          	lea    eax,[esp+0x13]
c00119bc:	50                   	push   eax
c00119bd:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00119c0:	51                   	push   ecx
c00119c1:	55                   	push   ebp
c00119c2:	e8 bf 6a ff ff       	call   c0008486 <File::stat(unsigned long long*, bool*)>
c00119c7:	89 c3                	mov    ebx,eax
c00119c9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00119cc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00119cf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00119d2:	83 c4 10             	add    esp,0x10
c00119d5:	85 db                	test   ebx,ebx
c00119d7:	75 9f                	jne    c0011978 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00119d9:	6a 00                	push   0x0
c00119db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119e0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119e3:	05 0c 01 00 00       	add    eax,0x10c
c00119e8:	50                   	push   eax
c00119e9:	57                   	push   edi
c00119ea:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00119f1:	53                   	push   ebx
c00119f2:	e8 57 64 ff ff       	call   c0007e4e <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00119f7:	58                   	pop    eax
c00119f8:	5a                   	pop    edx
c00119f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00119fd:	50                   	push   eax
c00119fe:	53                   	push   ebx
c00119ff:	e8 d1 5e ff ff       	call   c00078d5 <KeDereferenceSymlink(char const*, char*)>
c0011a04:	83 c4 10             	add    esp,0x10
c0011a07:	83 f8 01             	cmp    eax,0x1
c0011a0a:	74 1a                	je     c0011a26 <SysSizeFromFilenameNoSymlink(regs*)+0x104>
c0011a0c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011a11:	74 26                	je     c0011a39 <SysSizeFromFilenameNoSymlink(regs*)+0x117>
c0011a13:	85 f6                	test   esi,esi
c0011a15:	0f 84 47 ff ff ff    	je     c0011962 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011a1b:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011a21:	e9 3c ff ff ff       	jmp    c0011962 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011a26:	85 f6                	test   esi,esi
c0011a28:	0f 84 34 ff ff ff    	je     c0011962 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011a2e:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011a34:	e9 29 ff ff ff       	jmp    c0011962 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011a39:	85 f6                	test   esi,esi
c0011a3b:	0f 84 21 ff ff ff    	je     c0011962 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011a41:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011a47:	e9 16 ff ff ff       	jmp    c0011962 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c0011a4c <SysClose(regs*)>:
c0011a4c:	53                   	push   ebx
c0011a4d:	83 ec 08             	sub    esp,0x8
c0011a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a54:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011a57:	83 f8 02             	cmp    eax,0x2
c0011a5a:	76 41                	jbe    c0011a9d <SysClose(regs*)+0x51>
c0011a5c:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011a62:	83 fa 01             	cmp    edx,0x1
c0011a65:	76 2d                	jbe    c0011a94 <SysClose(regs*)+0x48>
c0011a67:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011a6c:	77 2f                	ja     c0011a9d <SysClose(regs*)+0x51>
c0011a6e:	83 ec 0c             	sub    esp,0xc
c0011a71:	50                   	push   eax
c0011a72:	e8 ea 18 00 00       	call   c0013361 <KeGetFileFromDescriptor(int)>
c0011a77:	83 c4 10             	add    esp,0x10
c0011a7a:	89 c3                	mov    ebx,eax
c0011a7c:	85 c0                	test   eax,eax
c0011a7e:	74 1d                	je     c0011a9d <SysClose(regs*)+0x51>
c0011a80:	83 ec 0c             	sub    esp,0xc
c0011a83:	50                   	push   eax
c0011a84:	e8 59 67 ff ff       	call   c00081e2 <File::close()>
c0011a89:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011a8b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011a8e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011a91:	83 c4 10             	add    esp,0x10
c0011a94:	31 c0                	xor    eax,eax
c0011a96:	31 d2                	xor    edx,edx
c0011a98:	83 c4 08             	add    esp,0x8
c0011a9b:	5b                   	pop    ebx
c0011a9c:	c3                   	ret    
c0011a9d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011aa2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011aa7:	83 c4 08             	add    esp,0x8
c0011aaa:	5b                   	pop    ebx
c0011aab:	c3                   	ret    

c0011aac <SysOpenDir(regs*)>:
c0011aac:	56                   	push   esi
c0011aad:	53                   	push   ebx
c0011aae:	83 ec 04             	sub    esp,0x4
c0011ab1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ab5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011ab8:	85 c9                	test   ecx,ecx
c0011aba:	74 5d                	je     c0011b19 <SysOpenDir(regs*)+0x6d>
c0011abc:	83 ec 0c             	sub    esp,0xc
c0011abf:	68 14 01 00 00       	push   0x114
c0011ac4:	e8 1e e2 ff ff       	call   c000fce7 <malloc>
c0011ac9:	83 c4 0c             	add    esp,0xc
c0011acc:	89 c6                	mov    esi,eax
c0011ace:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ad3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ad6:	50                   	push   eax
c0011ad7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011ada:	52                   	push   edx
c0011adb:	56                   	push   esi
c0011adc:	e8 65 6b ff ff       	call   c0008646 <Directory::Directory(char const*, Process*)>
c0011ae1:	83 c4 10             	add    esp,0x10
c0011ae4:	85 f6                	test   esi,esi
c0011ae6:	74 31                	je     c0011b19 <SysOpenDir(regs*)+0x6d>
c0011ae8:	83 ec 0c             	sub    esp,0xc
c0011aeb:	56                   	push   esi
c0011aec:	e8 1d 6c ff ff       	call   c000870e <Directory::open()>
c0011af1:	83 c4 10             	add    esp,0x10
c0011af4:	85 c0                	test   eax,eax
c0011af6:	75 21                	jne    c0011b19 <SysOpenDir(regs*)+0x6d>
c0011af8:	83 ec 0c             	sub    esp,0xc
c0011afb:	56                   	push   esi
c0011afc:	e8 63 15 00 00       	call   c0013064 <UnixFile::getFileDescriptor()>
c0011b01:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011b04:	83 c4 10             	add    esp,0x10
c0011b07:	89 02                	mov    DWORD PTR [edx],eax
c0011b09:	c1 f8 1f             	sar    eax,0x1f
c0011b0c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011b0f:	83 c4 04             	add    esp,0x4
c0011b12:	31 c0                	xor    eax,eax
c0011b14:	31 d2                	xor    edx,edx
c0011b16:	5b                   	pop    ebx
c0011b17:	5e                   	pop    esi
c0011b18:	c3                   	ret    
c0011b19:	83 c4 04             	add    esp,0x4
c0011b1c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b21:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b26:	5b                   	pop    ebx
c0011b27:	5e                   	pop    esi
c0011b28:	c3                   	ret    

c0011b29 <SysMakeDir(regs*)>:
c0011b29:	56                   	push   esi
c0011b2a:	53                   	push   ebx
c0011b2b:	83 ec 10             	sub    esp,0x10
c0011b2e:	68 14 01 00 00       	push   0x114
c0011b33:	e8 af e1 ff ff       	call   c000fce7 <malloc>
c0011b38:	83 c4 0c             	add    esp,0xc
c0011b3b:	89 c3                	mov    ebx,eax
c0011b3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b42:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011b45:	50                   	push   eax
c0011b46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011b4a:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011b4d:	52                   	push   edx
c0011b4e:	53                   	push   ebx
c0011b4f:	e8 f2 6a ff ff       	call   c0008646 <Directory::Directory(char const*, Process*)>
c0011b54:	83 c4 10             	add    esp,0x10
c0011b57:	85 db                	test   ebx,ebx
c0011b59:	74 2c                	je     c0011b87 <SysMakeDir(regs*)+0x5e>
c0011b5b:	83 ec 0c             	sub    esp,0xc
c0011b5e:	53                   	push   ebx
c0011b5f:	e8 8a 6d ff ff       	call   c00088ee <Directory::create()>
c0011b64:	89 c6                	mov    esi,eax
c0011b66:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011b68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011b6b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b6e:	83 c4 10             	add    esp,0x10
c0011b71:	31 c0                	xor    eax,eax
c0011b73:	85 f6                	test   esi,esi
c0011b75:	0f 95 c0             	setne  al
c0011b78:	31 d2                	xor    edx,edx
c0011b7a:	f7 d8                	neg    eax
c0011b7c:	83 d2 00             	adc    edx,0x0
c0011b7f:	83 c4 04             	add    esp,0x4
c0011b82:	f7 da                	neg    edx
c0011b84:	5b                   	pop    ebx
c0011b85:	5e                   	pop    esi
c0011b86:	c3                   	ret    
c0011b87:	83 c4 04             	add    esp,0x4
c0011b8a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b8f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b94:	5b                   	pop    ebx
c0011b95:	5e                   	pop    esi
c0011b96:	c3                   	ret    

c0011b97 <SysCloseDir(regs*)>:
c0011b97:	53                   	push   ebx
c0011b98:	83 ec 08             	sub    esp,0x8
c0011b9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b9f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ba2:	8d 50 fd             	lea    edx,[eax-0x3]
c0011ba5:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011bab:	77 2f                	ja     c0011bdc <SysCloseDir(regs*)+0x45>
c0011bad:	83 ec 0c             	sub    esp,0xc
c0011bb0:	50                   	push   eax
c0011bb1:	e8 ab 17 00 00       	call   c0013361 <KeGetFileFromDescriptor(int)>
c0011bb6:	83 c4 10             	add    esp,0x10
c0011bb9:	89 c3                	mov    ebx,eax
c0011bbb:	85 c0                	test   eax,eax
c0011bbd:	74 1d                	je     c0011bdc <SysCloseDir(regs*)+0x45>
c0011bbf:	83 ec 0c             	sub    esp,0xc
c0011bc2:	50                   	push   eax
c0011bc3:	e8 a2 6b ff ff       	call   c000876a <Directory::close()>
c0011bc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011bca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011bcd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011bd0:	83 c4 10             	add    esp,0x10
c0011bd3:	31 c0                	xor    eax,eax
c0011bd5:	31 d2                	xor    edx,edx
c0011bd7:	83 c4 08             	add    esp,0x8
c0011bda:	5b                   	pop    ebx
c0011bdb:	c3                   	ret    
c0011bdc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011be1:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011be6:	83 c4 08             	add    esp,0x8
c0011be9:	5b                   	pop    ebx
c0011bea:	c3                   	ret    

c0011beb <SysWait(regs*)>:
c0011beb:	83 ec 10             	sub    esp,0x10
c0011bee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011bf2:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011bf5:	52                   	push   edx
c0011bf6:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011bf9:	51                   	push   ecx
c0011bfa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011bfd:	50                   	push   eax
c0011bfe:	e8 39 57 00 00       	call   c001733c <waitTask(int, int*, int)>
c0011c03:	83 c4 1c             	add    esp,0x1c
c0011c06:	89 c2                	mov    edx,eax
c0011c08:	c1 fa 1f             	sar    edx,0x1f
c0011c0b:	c3                   	ret    

c0011c0c <SysNotImpl(regs*)>:
c0011c0c:	83 ec 18             	sub    esp,0x18
c0011c0f:	68 6f 47 02 c0       	push   0xc002476f
c0011c14:	e8 15 e4 ff ff       	call   c001002e <KePanic(char const*)>
c0011c19:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c1e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c23:	83 c4 1c             	add    esp,0x1c
c0011c26:	c3                   	ret    

c0011c27 <SysPanic(regs*)>:
c0011c27:	83 ec 18             	sub    esp,0x18
c0011c2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c2e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011c31:	50                   	push   eax
c0011c32:	e8 f7 e3 ff ff       	call   c001002e <KePanic(char const*)>
c0011c37:	b8 01 00 00 00       	mov    eax,0x1
c0011c3c:	31 d2                	xor    edx,edx
c0011c3e:	83 c4 1c             	add    esp,0x1c
c0011c41:	c3                   	ret    

c0011c42 <SysRmdir(regs*)>:
c0011c42:	56                   	push   esi
c0011c43:	53                   	push   ebx
c0011c44:	83 ec 20             	sub    esp,0x20
c0011c47:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c4b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011c4e:	68 14 01 00 00       	push   0x114
c0011c53:	e8 8f e0 ff ff       	call   c000fce7 <malloc>
c0011c58:	6a 00                	push   0x0
c0011c5a:	89 c3                	mov    ebx,eax
c0011c5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c61:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c64:	50                   	push   eax
c0011c65:	56                   	push   esi
c0011c66:	53                   	push   ebx
c0011c67:	e8 fc 63 ff ff       	call   c0008068 <File::File(char const*, Process*, bool)>
c0011c6c:	83 c4 14             	add    esp,0x14
c0011c6f:	53                   	push   ebx
c0011c70:	e8 dd 66 ff ff       	call   c0008352 <File::unlink()>
c0011c75:	83 c4 10             	add    esp,0x10
c0011c78:	85 db                	test   ebx,ebx
c0011c7a:	74 14                	je     c0011c90 <SysRmdir(regs*)+0x4e>
c0011c7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c80:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011c82:	83 ec 0c             	sub    esp,0xc
c0011c85:	53                   	push   ebx
c0011c86:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011c89:	83 c4 10             	add    esp,0x10
c0011c8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c90:	85 c0                	test   eax,eax
c0011c92:	0f 95 c0             	setne  al
c0011c95:	31 d2                	xor    edx,edx
c0011c97:	0f b6 c0             	movzx  eax,al
c0011c9a:	f7 d8                	neg    eax
c0011c9c:	83 d2 00             	adc    edx,0x0
c0011c9f:	83 c4 14             	add    esp,0x14
c0011ca2:	f7 da                	neg    edx
c0011ca4:	5b                   	pop    ebx
c0011ca5:	5e                   	pop    esi
c0011ca6:	c3                   	ret    

c0011ca7 <SysUnlink(regs*)>:
c0011ca7:	56                   	push   esi
c0011ca8:	53                   	push   ebx
c0011ca9:	83 ec 20             	sub    esp,0x20
c0011cac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cb0:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011cb3:	68 14 01 00 00       	push   0x114
c0011cb8:	e8 2a e0 ff ff       	call   c000fce7 <malloc>
c0011cbd:	6a 00                	push   0x0
c0011cbf:	89 c3                	mov    ebx,eax
c0011cc1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cc6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011cc9:	50                   	push   eax
c0011cca:	56                   	push   esi
c0011ccb:	53                   	push   ebx
c0011ccc:	e8 97 63 ff ff       	call   c0008068 <File::File(char const*, Process*, bool)>
c0011cd1:	83 c4 14             	add    esp,0x14
c0011cd4:	53                   	push   ebx
c0011cd5:	e8 78 66 ff ff       	call   c0008352 <File::unlink()>
c0011cda:	83 c4 10             	add    esp,0x10
c0011cdd:	85 db                	test   ebx,ebx
c0011cdf:	74 14                	je     c0011cf5 <SysUnlink(regs*)+0x4e>
c0011ce1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ce5:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011ce7:	83 ec 0c             	sub    esp,0xc
c0011cea:	53                   	push   ebx
c0011ceb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011cee:	83 c4 10             	add    esp,0x10
c0011cf1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cf5:	85 c0                	test   eax,eax
c0011cf7:	0f 95 c0             	setne  al
c0011cfa:	31 d2                	xor    edx,edx
c0011cfc:	0f b6 c0             	movzx  eax,al
c0011cff:	f7 d8                	neg    eax
c0011d01:	83 d2 00             	adc    edx,0x0
c0011d04:	83 c4 14             	add    esp,0x14
c0011d07:	f7 da                	neg    edx
c0011d09:	5b                   	pop    ebx
c0011d0a:	5e                   	pop    esi
c0011d0b:	c3                   	ret    

c0011d0c <SysGetArgv(regs*)>:
c0011d0c:	83 ec 0c             	sub    esp,0xc
c0011d0f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011d13:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011d16:	85 c0                	test   eax,eax
c0011d18:	78 2c                	js     c0011d46 <SysGetArgv(regs*)+0x3a>
c0011d1a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011d20:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0011d23:	3b 81 b6 05 00 00    	cmp    eax,DWORD PTR [ecx+0x5b6]
c0011d29:	7d 1b                	jge    c0011d46 <SysGetArgv(regs*)+0x3a>
c0011d2b:	8b 84 81 ba 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x5ba]
c0011d32:	85 c0                	test   eax,eax
c0011d34:	74 18                	je     c0011d4e <SysGetArgv(regs*)+0x42>
c0011d36:	83 ec 08             	sub    esp,0x8
c0011d39:	50                   	push   eax
c0011d3a:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011d3d:	50                   	push   eax
c0011d3e:	e8 fd e8 fe ff       	call   c0000640 <strcpy>
c0011d43:	83 c4 10             	add    esp,0x10
c0011d46:	31 c0                	xor    eax,eax
c0011d48:	31 d2                	xor    edx,edx
c0011d4a:	83 c4 0c             	add    esp,0xc
c0011d4d:	c3                   	ret    
c0011d4e:	b8 01 00 00 00       	mov    eax,0x1
c0011d53:	31 d2                	xor    edx,edx
c0011d55:	83 c4 0c             	add    esp,0xc
c0011d58:	c3                   	ret    

c0011d59 <SysUSleep(regs*)>:
c0011d59:	83 ec 1c             	sub    esp,0x1c
c0011d5c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011d60:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011d63:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011d66:	6a 00                	push   0x0
c0011d68:	6a 64                	push   0x64
c0011d6a:	52                   	push   edx
c0011d6b:	50                   	push   eax
c0011d6c:	e8 33 ff 00 00       	call   c0021ca4 <__udivdi3>
c0011d71:	83 c4 18             	add    esp,0x18
c0011d74:	52                   	push   edx
c0011d75:	50                   	push   eax
c0011d76:	e8 b9 56 00 00       	call   c0017434 <milliTenthSleep(unsigned long long)>
c0011d7b:	31 c0                	xor    eax,eax
c0011d7d:	31 d2                	xor    edx,edx
c0011d7f:	83 c4 1c             	add    esp,0x1c
c0011d82:	c3                   	ret    

c0011d83 <SysSpawn(regs*)>:
c0011d83:	56                   	push   esi
c0011d84:	53                   	push   ebx
c0011d85:	83 ec 04             	sub    esp,0x4
c0011d88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d8c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011d8f:	85 f6                	test   esi,esi
c0011d91:	75 0a                	jne    c0011d9d <SysSpawn(regs*)+0x1a>
c0011d93:	83 c4 04             	add    esp,0x4
c0011d96:	31 c0                	xor    eax,eax
c0011d98:	31 d2                	xor    edx,edx
c0011d9a:	5b                   	pop    ebx
c0011d9b:	5e                   	pop    esi
c0011d9c:	c3                   	ret    
c0011d9d:	83 ec 0c             	sub    esp,0xc
c0011da0:	68 c4 07 00 00       	push   0x7c4
c0011da5:	e8 3d df ff ff       	call   c000fce7 <malloc>
c0011daa:	83 c4 10             	add    esp,0x10
c0011dad:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011db0:	89 c6                	mov    esi,eax
c0011db2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011db5:	85 c9                	test   ecx,ecx
c0011db7:	74 39                	je     c0011df2 <SysSpawn(regs*)+0x6f>
c0011db9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011dbe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011dc1:	52                   	push   edx
c0011dc2:	50                   	push   eax
c0011dc3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011dc6:	50                   	push   eax
c0011dc7:	56                   	push   esi
c0011dc8:	e8 3b 4d 00 00       	call   c0016b08 <Process::Process(char const*, Process*, char**)>
c0011dcd:	83 c4 10             	add    esp,0x10
c0011dd0:	80 be be 07 00 00 00 	cmp    BYTE PTR [esi+0x7be],0x0
c0011dd7:	75 ba                	jne    c0011d93 <SysSpawn(regs*)+0x10>
c0011dd9:	83 ec 0c             	sub    esp,0xc
c0011ddc:	56                   	push   esi
c0011ddd:	e8 f6 52 00 00       	call   c00170d8 <Process::createUserThread()>
c0011de2:	8b 06                	mov    eax,DWORD PTR [esi]
c0011de4:	83 c4 10             	add    esp,0x10
c0011de7:	89 c2                	mov    edx,eax
c0011de9:	83 c4 04             	add    esp,0x4
c0011dec:	c1 fa 1f             	sar    edx,0x1f
c0011def:	5b                   	pop    ebx
c0011df0:	5e                   	pop    esi
c0011df1:	c3                   	ret    
c0011df2:	31 c0                	xor    eax,eax
c0011df4:	eb cb                	jmp    c0011dc1 <SysSpawn(regs*)+0x3e>

c0011df6 <SysGetEnv(regs*)>:
c0011df6:	57                   	push   edi
c0011df7:	56                   	push   esi
c0011df8:	53                   	push   ebx
c0011df9:	83 ec 1c             	sub    esp,0x1c
c0011dfc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011e00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e05:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011e08:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011e0b:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0011e0e:	51                   	push   ecx
c0011e0f:	e8 0f cb ff ff       	call   c000e923 <KeGetProcessTotalEnvCount(Process*)>
c0011e14:	83 c4 10             	add    esp,0x10
c0011e17:	39 c7                	cmp    edi,eax
c0011e19:	7c 14                	jl     c0011e2f <SysGetEnv(regs*)+0x39>
c0011e1b:	85 f6                	test   esi,esi
c0011e1d:	75 0b                	jne    c0011e2a <SysGetEnv(regs*)+0x34>
c0011e1f:	83 c4 10             	add    esp,0x10
c0011e22:	31 c0                	xor    eax,eax
c0011e24:	5b                   	pop    ebx
c0011e25:	31 d2                	xor    edx,edx
c0011e27:	5e                   	pop    esi
c0011e28:	5f                   	pop    edi
c0011e29:	c3                   	ret    
c0011e2a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011e2d:	eb f0                	jmp    c0011e1f <SysGetEnv(regs*)+0x29>
c0011e2f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011e33:	83 ec 04             	sub    esp,0x4
c0011e36:	57                   	push   edi
c0011e37:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011e3d:	8b 7a 40             	mov    edi,DWORD PTR [edx+0x40]
c0011e40:	57                   	push   edi
c0011e41:	50                   	push   eax
c0011e42:	e8 fc ca ff ff       	call   c000e943 <KeGetProcessEnvPair(Process*, int)>
c0011e47:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011e4a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011e4e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011e52:	83 c4 0c             	add    esp,0xc
c0011e55:	85 d2                	test   edx,edx
c0011e57:	75 23                	jne    c0011e7c <SysGetEnv(regs*)+0x86>
c0011e59:	83 ec 0c             	sub    esp,0xc
c0011e5c:	50                   	push   eax
c0011e5d:	e8 0e e7 fe ff       	call   c0000570 <strlen>
c0011e62:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011e65:	89 c3                	mov    ebx,eax
c0011e67:	e8 04 e7 fe ff       	call   c0000570 <strlen>
c0011e6c:	83 c4 10             	add    esp,0x10
c0011e6f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011e73:	83 c4 10             	add    esp,0x10
c0011e76:	31 d2                	xor    edx,edx
c0011e78:	5b                   	pop    ebx
c0011e79:	5e                   	pop    esi
c0011e7a:	5f                   	pop    edi
c0011e7b:	c3                   	ret    
c0011e7c:	83 ec 08             	sub    esp,0x8
c0011e7f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011e82:	50                   	push   eax
c0011e83:	56                   	push   esi
c0011e84:	e8 b7 e7 fe ff       	call   c0000640 <strcpy>
c0011e89:	58                   	pop    eax
c0011e8a:	5a                   	pop    edx
c0011e8b:	68 89 47 02 c0       	push   0xc0024789
c0011e90:	56                   	push   esi
c0011e91:	e8 aa e9 fe ff       	call   c0000840 <strcat>
c0011e96:	59                   	pop    ecx
c0011e97:	5b                   	pop    ebx
c0011e98:	57                   	push   edi
c0011e99:	56                   	push   esi
c0011e9a:	e8 a1 e9 fe ff       	call   c0000840 <strcat>
c0011e9f:	83 c4 10             	add    esp,0x10
c0011ea2:	e9 78 ff ff ff       	jmp    c0011e1f <SysGetEnv(regs*)+0x29>

c0011ea7 <SysSetFatAttrib(regs*)>:
c0011ea7:	57                   	push   edi
c0011ea8:	56                   	push   esi
c0011ea9:	53                   	push   ebx
c0011eaa:	83 ec 1c             	sub    esp,0x1c
c0011ead:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011eb1:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011eb4:	68 14 01 00 00       	push   0x114
c0011eb9:	e8 29 de ff ff       	call   c000fce7 <malloc>
c0011ebe:	83 c4 0c             	add    esp,0xc
c0011ec1:	89 c3                	mov    ebx,eax
c0011ec3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ec8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ecb:	50                   	push   eax
c0011ecc:	57                   	push   edi
c0011ecd:	53                   	push   ebx
c0011ece:	e8 93 62 ff ff       	call   c0008166 <File::File(char const*, Process*)>
c0011ed3:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011ed6:	83 c4 0c             	add    esp,0xc
c0011ed9:	0f b6 d4             	movzx  edx,ah
c0011edc:	0f b6 c0             	movzx  eax,al
c0011edf:	52                   	push   edx
c0011ee0:	50                   	push   eax
c0011ee1:	53                   	push   ebx
c0011ee2:	e8 05 65 ff ff       	call   c00083ec <File::chfatattr(unsigned char, unsigned char)>
c0011ee7:	83 c4 10             	add    esp,0x10
c0011eea:	85 db                	test   ebx,ebx
c0011eec:	74 14                	je     c0011f02 <SysSetFatAttrib(regs*)+0x5b>
c0011eee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ef2:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011ef4:	83 ec 0c             	sub    esp,0xc
c0011ef7:	53                   	push   ebx
c0011ef8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011efb:	83 c4 10             	add    esp,0x10
c0011efe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f02:	85 c0                	test   eax,eax
c0011f04:	0f 95 c0             	setne  al
c0011f07:	31 d2                	xor    edx,edx
c0011f09:	0f b6 c0             	movzx  eax,al
c0011f0c:	f7 d8                	neg    eax
c0011f0e:	83 d2 00             	adc    edx,0x0
c0011f11:	83 c4 10             	add    esp,0x10
c0011f14:	f7 da                	neg    edx
c0011f16:	5b                   	pop    ebx
c0011f17:	5e                   	pop    esi
c0011f18:	5f                   	pop    edi
c0011f19:	c3                   	ret    

c0011f1a <SysShutdown(regs*)>:
c0011f1a:	83 ec 1c             	sub    esp,0x1c
c0011f1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f21:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011f24:	85 c9                	test   ecx,ecx
c0011f26:	74 18                	je     c0011f40 <SysShutdown(regs*)+0x26>
c0011f28:	83 f9 01             	cmp    ecx,0x1
c0011f2b:	74 26                	je     c0011f53 <SysShutdown(regs*)+0x39>
c0011f2d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f32:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f37:	83 f9 02             	cmp    ecx,0x2
c0011f3a:	74 24                	je     c0011f60 <SysShutdown(regs*)+0x46>
c0011f3c:	83 c4 1c             	add    esp,0x1c
c0011f3f:	c3                   	ret    
c0011f40:	e8 6d c3 ff ff       	call   c000e2b2 <KeShutdown()>
c0011f45:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f4a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f4f:	83 c4 1c             	add    esp,0x1c
c0011f52:	c3                   	ret    
c0011f53:	e8 7e c3 ff ff       	call   c000e2d6 <KeSleep()>
c0011f58:	31 c0                	xor    eax,eax
c0011f5a:	31 d2                	xor    edx,edx
c0011f5c:	83 c4 1c             	add    esp,0x1c
c0011f5f:	c3                   	ret    
c0011f60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011f64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011f68:	e8 75 c3 ff ff       	call   c000e2e2 <KeRestart()>
c0011f6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011f71:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f75:	eb c5                	jmp    c0011f3c <SysShutdown(regs*)+0x22>

c0011f77 <SysPipe(regs*)>:
c0011f77:	57                   	push   edi
c0011f78:	56                   	push   esi
c0011f79:	53                   	push   ebx
c0011f7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f7e:	83 ec 0c             	sub    esp,0xc
c0011f81:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011f84:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011f87:	6a 20                	push   0x20
c0011f89:	e8 59 dd ff ff       	call   c000fce7 <malloc>
c0011f8e:	89 c3                	mov    ebx,eax
c0011f90:	58                   	pop    eax
c0011f91:	5a                   	pop    edx
c0011f92:	68 00 50 00 00       	push   0x5000
c0011f97:	53                   	push   ebx
c0011f98:	e8 13 e9 ff ff       	call   c00108b0 <Pipe::Pipe(int)>
c0011f9d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011fa0:	e8 bf 10 00 00       	call   c0013064 <UnixFile::getFileDescriptor()>
c0011fa5:	89 07                	mov    DWORD PTR [edi],eax
c0011fa7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011faa:	e8 b5 10 00 00       	call   c0013064 <UnixFile::getFileDescriptor()>
c0011faf:	83 c4 10             	add    esp,0x10
c0011fb2:	89 06                	mov    DWORD PTR [esi],eax
c0011fb4:	31 d2                	xor    edx,edx
c0011fb6:	5b                   	pop    ebx
c0011fb7:	31 c0                	xor    eax,eax
c0011fb9:	5e                   	pop    esi
c0011fba:	5f                   	pop    edi
c0011fbb:	c3                   	ret    

c0011fbc <SysGetUnixTime(regs*)>:
c0011fbc:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c0011fc1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011fc7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011fcb:	e9 46 71 ff ff       	jmp    c0009116 <Clock::timeInSecondsLocal()>

c0011fd0 <string_ends_with(char const*, char const*)>:
c0011fd0:	57                   	push   edi
c0011fd1:	56                   	push   esi
c0011fd2:	53                   	push   ebx
c0011fd3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011fd7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011fdb:	83 ec 0c             	sub    esp,0xc
c0011fde:	53                   	push   ebx
c0011fdf:	e8 8c e5 fe ff       	call   c0000570 <strlen>
c0011fe4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011fe7:	89 c6                	mov    esi,eax
c0011fe9:	e8 82 e5 fe ff       	call   c0000570 <strlen>
c0011fee:	83 c4 10             	add    esp,0x10
c0011ff1:	39 c6                	cmp    esi,eax
c0011ff3:	7d 06                	jge    c0011ffb <string_ends_with(char const*, char const*)+0x2b>
c0011ff5:	5b                   	pop    ebx
c0011ff6:	31 c0                	xor    eax,eax
c0011ff8:	5e                   	pop    esi
c0011ff9:	5f                   	pop    edi
c0011ffa:	c3                   	ret    
c0011ffb:	83 ec 08             	sub    esp,0x8
c0011ffe:	29 c6                	sub    esi,eax
c0012000:	57                   	push   edi
c0012001:	01 f3                	add    ebx,esi
c0012003:	53                   	push   ebx
c0012004:	e8 47 e7 fe ff       	call   c0000750 <strcmp>
c0012009:	83 c4 10             	add    esp,0x10
c001200c:	85 c0                	test   eax,eax
c001200e:	5b                   	pop    ebx
c001200f:	0f 94 c0             	sete   al
c0012012:	5e                   	pop    esi
c0012013:	0f b6 c0             	movzx  eax,al
c0012016:	5f                   	pop    edi
c0012017:	c3                   	ret    

c0012018 <SysOpen(regs*)>:
c0012018:	56                   	push   esi
c0012019:	53                   	push   ebx
c001201a:	81 ec 04 01 00 00    	sub    esp,0x104
c0012020:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012027:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001202a:	85 c0                	test   eax,eax
c001202c:	0f 84 bc 01 00 00    	je     c00121ee <SysOpen(regs*)+0x1d6>
c0012032:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012035:	85 c0                	test   eax,eax
c0012037:	0f 84 b1 01 00 00    	je     c00121ee <SysOpen(regs*)+0x1d6>
c001203d:	6a 00                	push   0x0
c001203f:	68 8b 47 02 c0       	push   0xc002478b
c0012044:	50                   	push   eax
c0012045:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012049:	56                   	push   esi
c001204a:	e8 ff 5d ff ff       	call   c0007e4e <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001204f:	89 34 24             	mov    DWORD PTR [esp],esi
c0012052:	e8 19 e5 fe ff       	call   c0000570 <strlen>
c0012057:	83 c4 10             	add    esp,0x10
c001205a:	83 e8 01             	sub    eax,0x1
c001205d:	74 21                	je     c0012080 <SysOpen(regs*)+0x68>
c001205f:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0012063:	eb 12                	jmp    c0012077 <SysOpen(regs*)+0x5f>
c0012065:	83 fa 3a             	cmp    edx,0x3a
c0012068:	74 12                	je     c001207c <SysOpen(regs*)+0x64>
c001206a:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001206e:	83 e8 01             	sub    eax,0x1
c0012071:	74 0d                	je     c0012080 <SysOpen(regs*)+0x68>
c0012073:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0012077:	83 fa 2e             	cmp    edx,0x2e
c001207a:	75 e9                	jne    c0012065 <SysOpen(regs*)+0x4d>
c001207c:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0012080:	83 ec 08             	sub    esp,0x8
c0012083:	68 8f 47 02 c0       	push   0xc002478f
c0012088:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001208b:	50                   	push   eax
c001208c:	e8 3f ff ff ff       	call   c0011fd0 <string_ends_with(char const*, char const*)>
c0012091:	83 c4 10             	add    esp,0x10
c0012094:	85 c0                	test   eax,eax
c0012096:	74 1d                	je     c00120b5 <SysOpen(regs*)+0x9d>
c0012098:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001209b:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00120a1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00120a8:	81 c4 04 01 00 00    	add    esp,0x104
c00120ae:	31 c0                	xor    eax,eax
c00120b0:	31 d2                	xor    edx,edx
c00120b2:	5b                   	pop    ebx
c00120b3:	5e                   	pop    esi
c00120b4:	c3                   	ret    
c00120b5:	83 ec 08             	sub    esp,0x8
c00120b8:	68 94 47 02 c0       	push   0xc0024794
c00120bd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00120c0:	50                   	push   eax
c00120c1:	e8 0a ff ff ff       	call   c0011fd0 <string_ends_with(char const*, char const*)>
c00120c6:	83 c4 10             	add    esp,0x10
c00120c9:	85 c0                	test   eax,eax
c00120cb:	75 cb                	jne    c0012098 <SysOpen(regs*)+0x80>
c00120cd:	83 ec 08             	sub    esp,0x8
c00120d0:	68 90 47 02 c0       	push   0xc0024790
c00120d5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00120d8:	50                   	push   eax
c00120d9:	e8 72 e6 fe ff       	call   c0000750 <strcmp>
c00120de:	83 c4 10             	add    esp,0x10
c00120e1:	85 c0                	test   eax,eax
c00120e3:	74 b3                	je     c0012098 <SysOpen(regs*)+0x80>
c00120e5:	83 ec 08             	sub    esp,0x8
c00120e8:	68 8f 47 02 c0       	push   0xc002478f
c00120ed:	56                   	push   esi
c00120ee:	e8 dd fe ff ff       	call   c0011fd0 <string_ends_with(char const*, char const*)>
c00120f3:	83 c4 10             	add    esp,0x10
c00120f6:	85 c0                	test   eax,eax
c00120f8:	75 9e                	jne    c0012098 <SysOpen(regs*)+0x80>
c00120fa:	83 ec 08             	sub    esp,0x8
c00120fd:	68 99 47 02 c0       	push   0xc0024799
c0012102:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012105:	50                   	push   eax
c0012106:	e8 c5 fe ff ff       	call   c0011fd0 <string_ends_with(char const*, char const*)>
c001210b:	83 c4 10             	add    esp,0x10
c001210e:	85 c0                	test   eax,eax
c0012110:	0f 85 eb 00 00 00    	jne    c0012201 <SysOpen(regs*)+0x1e9>
c0012116:	83 ec 08             	sub    esp,0x8
c0012119:	68 9e 47 02 c0       	push   0xc002479e
c001211e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012121:	50                   	push   eax
c0012122:	e8 a9 fe ff ff       	call   c0011fd0 <string_ends_with(char const*, char const*)>
c0012127:	83 c4 10             	add    esp,0x10
c001212a:	85 c0                	test   eax,eax
c001212c:	0f 85 cf 00 00 00    	jne    c0012201 <SysOpen(regs*)+0x1e9>
c0012132:	83 ec 08             	sub    esp,0x8
c0012135:	68 9a 47 02 c0       	push   0xc002479a
c001213a:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001213d:	51                   	push   ecx
c001213e:	e8 0d e6 fe ff       	call   c0000750 <strcmp>
c0012143:	83 c4 10             	add    esp,0x10
c0012146:	85 c0                	test   eax,eax
c0012148:	0f 84 b3 00 00 00    	je     c0012201 <SysOpen(regs*)+0x1e9>
c001214e:	83 ec 08             	sub    esp,0x8
c0012151:	68 99 47 02 c0       	push   0xc0024799
c0012156:	56                   	push   esi
c0012157:	e8 74 fe ff ff       	call   c0011fd0 <string_ends_with(char const*, char const*)>
c001215c:	83 c4 10             	add    esp,0x10
c001215f:	85 c0                	test   eax,eax
c0012161:	0f 85 9a 00 00 00    	jne    c0012201 <SysOpen(regs*)+0x1e9>
c0012167:	83 ec 0c             	sub    esp,0xc
c001216a:	68 14 01 00 00       	push   0x114
c001216f:	e8 73 db ff ff       	call   c000fce7 <malloc>
c0012174:	83 c4 0c             	add    esp,0xc
c0012177:	89 c6                	mov    esi,eax
c0012179:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001217e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012181:	50                   	push   eax
c0012182:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012185:	52                   	push   edx
c0012186:	56                   	push   esi
c0012187:	e8 da 5f ff ff       	call   c0008166 <File::File(char const*, Process*)>
c001218c:	83 c4 10             	add    esp,0x10
c001218f:	85 f6                	test   esi,esi
c0012191:	74 5b                	je     c00121ee <SysOpen(regs*)+0x1d6>
c0012193:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012196:	0f b6 c2             	movzx  eax,dl
c0012199:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001219c:	89 d0                	mov    eax,edx
c001219e:	83 e0 01             	and    eax,0x1
c00121a1:	f6 c2 02             	test   dl,0x2
c00121a4:	74 03                	je     c00121a9 <SysOpen(regs*)+0x191>
c00121a6:	83 c8 02             	or     eax,0x2
c00121a9:	f6 c2 04             	test   dl,0x4
c00121ac:	74 03                	je     c00121b1 <SysOpen(regs*)+0x199>
c00121ae:	83 c8 04             	or     eax,0x4
c00121b1:	f6 c2 08             	test   dl,0x8
c00121b4:	74 03                	je     c00121b9 <SysOpen(regs*)+0x1a1>
c00121b6:	83 c8 0a             	or     eax,0xa
c00121b9:	80 e2 10             	and    dl,0x10
c00121bc:	74 03                	je     c00121c1 <SysOpen(regs*)+0x1a9>
c00121be:	83 c8 12             	or     eax,0x12
c00121c1:	83 ec 08             	sub    esp,0x8
c00121c4:	50                   	push   eax
c00121c5:	56                   	push   esi
c00121c6:	e8 b9 5f ff ff       	call   c0008184 <File::open(FileOpenMode)>
c00121cb:	83 c4 10             	add    esp,0x10
c00121ce:	85 c0                	test   eax,eax
c00121d0:	75 1c                	jne    c00121ee <SysOpen(regs*)+0x1d6>
c00121d2:	83 ec 0c             	sub    esp,0xc
c00121d5:	56                   	push   esi
c00121d6:	e8 89 0e 00 00       	call   c0013064 <UnixFile::getFileDescriptor()>
c00121db:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00121de:	83 c4 10             	add    esp,0x10
c00121e1:	89 02                	mov    DWORD PTR [edx],eax
c00121e3:	c1 f8 1f             	sar    eax,0x1f
c00121e6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00121e9:	e9 ba fe ff ff       	jmp    c00120a8 <SysOpen(regs*)+0x90>
c00121ee:	81 c4 04 01 00 00    	add    esp,0x104
c00121f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00121f9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00121fe:	5b                   	pop    ebx
c00121ff:	5e                   	pop    esi
c0012200:	c3                   	ret    
c0012201:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012204:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001220a:	e9 92 fe ff ff       	jmp    c00120a1 <SysOpen(regs*)+0x89>

c001220f <KeSystemCall(regs*, void*)>:
c001220f:	53                   	push   ebx
c0012210:	83 ec 08             	sub    esp,0x8
c0012213:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012217:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001221a:	83 f8 48             	cmp    eax,0x48
c001221d:	77 29                	ja     c0012248 <KeSystemCall(regs*, void*)+0x39>
c001221f:	83 3c 85 a0 6e 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd9160],0x0
c0012227:	74 1f                	je     c0012248 <KeSystemCall(regs*, void*)+0x39>
c0012229:	51                   	push   ecx
c001222a:	51                   	push   ecx
c001222b:	50                   	push   eax
c001222c:	68 a3 47 02 c0       	push   0xc00247a3
c0012231:	e8 2e 4d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012236:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012239:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001223c:	ff 14 85 a0 6e 02 c0 	call   DWORD PTR [eax*4-0x3ffd9160]
c0012243:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012246:	eb 0d                	jmp    c0012255 <KeSystemCall(regs*, void*)+0x46>
c0012248:	52                   	push   edx
c0012249:	52                   	push   edx
c001224a:	50                   	push   eax
c001224b:	68 ab 47 02 c0       	push   0xc00247ab
c0012250:	e8 0f 4d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012255:	83 c4 10             	add    esp,0x10
c0012258:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001225d:	31 d2                	xor    edx,edx
c001225f:	83 c4 08             	add    esp,0x8
c0012262:	5b                   	pop    ebx
c0012263:	c3                   	ret    

c0012264 <VgaText::isAtty()>:
c0012264:	b0 01                	mov    al,0x1
c0012266:	c3                   	ret    
c0012267:	90                   	nop

c0012268 <VgaText::~VgaText()>:
c0012268:	83 ec 0c             	sub    esp,0xc
c001226b:	ba 14 48 02 c0       	mov    edx,0xc0024814
c0012270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012274:	89 10                	mov    DWORD PTR [eax],edx
c0012276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001227a:	83 ec 0c             	sub    esp,0xc
c001227d:	50                   	push   eax
c001227e:	e8 cf 0f 00 00       	call   c0013252 <UnixFile::~UnixFile()>
c0012283:	83 c4 10             	add    esp,0x10
c0012286:	90                   	nop
c0012287:	83 c4 0c             	add    esp,0xc
c001228a:	c3                   	ret    
c001228b:	90                   	nop

c001228c <VgaText::~VgaText()>:
c001228c:	83 ec 0c             	sub    esp,0xc
c001228f:	83 ec 0c             	sub    esp,0xc
c0012292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012296:	e8 cd ff ff ff       	call   c0012268 <VgaText::~VgaText()>
c001229b:	83 c4 10             	add    esp,0x10
c001229e:	83 ec 08             	sub    esp,0x8
c00122a1:	68 84 01 00 00       	push   0x184
c00122a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122aa:	e8 ac b0 ff ff       	call   c000d35b <operator delete(void*, unsigned long)>
c00122af:	83 c4 10             	add    esp,0x10
c00122b2:	83 c4 0c             	add    esp,0xc
c00122b5:	c3                   	ret    

c00122b6 <VgaText::read(unsigned long long, void*, int*)>:
c00122b6:	83 ec 10             	sub    esp,0x10
c00122b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00122bd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00122c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122c5:	e8 b7 82 ff ff       	call   c000a581 <readKeyboard(VgaText*, char*, unsigned long)>
c00122ca:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00122ce:	89 02                	mov    DWORD PTR [edx],eax
c00122d0:	31 c0                	xor    eax,eax
c00122d2:	83 c4 1c             	add    esp,0x1c
c00122d5:	c3                   	ret    

c00122d6 <setTerminalScrollLock(bool)>:
c00122d6:	c3                   	ret    

c00122d7 <doTerminalCycle()>:
c00122d7:	c3                   	ret    

c00122d8 <addToTerminalCycle(VgaText*)>:
c00122d8:	c3                   	ret    

c00122d9 <scrollTerminalScrollLock(int)>:
c00122d9:	c3                   	ret    

c00122da <VgaText::updateTitle()>:
c00122da:	c3                   	ret    
c00122db:	90                   	nop

c00122dc <VgaText::load()>:
c00122dc:	c3                   	ret    
c00122dd:	90                   	nop

c00122de <VgaText::updateCursor()>:
c00122de:	83 ec 14             	sub    esp,0x14
c00122e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122e5:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00122e8:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00122eb:	e8 d4 92 00 00       	call   c001b5c4 <HalConsoleCursorUpdate(int, int)>
c00122f0:	83 c4 1c             	add    esp,0x1c
c00122f3:	c3                   	ret    

c00122f4 <VgaText::doANSI_SGR(int)>:
c00122f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00122f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122fc:	85 d2                	test   edx,edx
c00122fe:	75 0b                	jne    c001230b <VgaText::doANSI_SGR(int)+0x17>
c0012300:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0012303:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012306:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0012309:	eb 59                	jmp    c0012364 <VgaText::doANSI_SGR(int)+0x70>
c001230b:	83 fa 07             	cmp    edx,0x7
c001230e:	75 0b                	jne    c001231b <VgaText::doANSI_SGR(int)+0x27>
c0012310:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0012313:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0012316:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0012319:	eb 49                	jmp    c0012364 <VgaText::doANSI_SGR(int)+0x70>
c001231b:	83 fa 1b             	cmp    edx,0x1b
c001231e:	74 e0                	je     c0012300 <VgaText::doANSI_SGR(int)+0xc>
c0012320:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0012323:	83 f9 07             	cmp    ecx,0x7
c0012326:	77 09                	ja     c0012331 <VgaText::doANSI_SGR(int)+0x3d>
c0012328:	8b 14 8d 00 70 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd9000]
c001232f:	eb 20                	jmp    c0012351 <VgaText::doANSI_SGR(int)+0x5d>
c0012331:	8d 4a d8             	lea    ecx,[edx-0x28]
c0012334:	83 f9 07             	cmp    ecx,0x7
c0012337:	77 09                	ja     c0012342 <VgaText::doANSI_SGR(int)+0x4e>
c0012339:	8b 14 8d 00 70 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd9000]
c0012340:	eb 22                	jmp    c0012364 <VgaText::doANSI_SGR(int)+0x70>
c0012342:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0012345:	83 f9 07             	cmp    ecx,0x7
c0012348:	77 0b                	ja     c0012355 <VgaText::doANSI_SGR(int)+0x61>
c001234a:	8b 14 95 b8 6e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9148]
c0012351:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012354:	c3                   	ret    
c0012355:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0012358:	83 f9 07             	cmp    ecx,0x7
c001235b:	77 0a                	ja     c0012367 <VgaText::doANSI_SGR(int)+0x73>
c001235d:	8b 14 95 90 6e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9170]
c0012364:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0012367:	c3                   	ret    

c0012368 <VgaText::setDefaultBgColour(VgaColour)>:
c0012368:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001236c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012370:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0012373:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0012376:	c3                   	ret    
c0012377:	90                   	nop

c0012378 <VgaText::setDefaultFgColour(VgaColour)>:
c0012378:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001237c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012380:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0012383:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012386:	c3                   	ret    
c0012387:	90                   	nop

c0012388 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0012388:	53                   	push   ebx
c0012389:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001238d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012391:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012395:	51                   	push   ecx
c0012396:	e8 cd ff ff ff       	call   c0012368 <VgaText::setDefaultBgColour(VgaColour)>
c001239b:	58                   	pop    eax
c001239c:	5a                   	pop    edx
c001239d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00123a1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00123a5:	5b                   	pop    ebx
c00123a6:	eb d0                	jmp    c0012378 <VgaText::setDefaultFgColour(VgaColour)>

c00123a8 <VgaText::setTitleTextColour(VgaColour)>:
c00123a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00123ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123b0:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00123b3:	c3                   	ret    

c00123b4 <VgaText::setTitleColour(VgaColour)>:
c00123b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00123b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123bc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00123bf:	c3                   	ret    

c00123c0 <VgaText::setTitle(char*)>:
c00123c0:	c3                   	ret    
c00123c1:	90                   	nop

c00123c2 <VgaText::combineColours(unsigned char, unsigned char)>:
c00123c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00123c6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00123cb:	83 e0 0f             	and    eax,0xf
c00123ce:	c1 e2 04             	shl    edx,0x4
c00123d1:	09 d0                	or     eax,edx
c00123d3:	c3                   	ret    

c00123d4 <VgaText::scrollScreen()>:
c00123d4:	55                   	push   ebp
c00123d5:	57                   	push   edi
c00123d6:	56                   	push   esi
c00123d7:	be 01 00 00 00       	mov    esi,0x1
c00123dc:	53                   	push   ebx
c00123dd:	83 ec 0c             	sub    esp,0xc
c00123e0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00123e4:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00123e7:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00123ed:	31 ff                	xor    edi,edi
c00123ef:	01 e9                	add    ecx,ebp
c00123f1:	8a 01                	mov    al,BYTE PTR [ecx]
c00123f3:	83 fe 18             	cmp    esi,0x18
c00123f6:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c00123fc:	75 20                	jne    c001241e <VgaText::scrollScreen()+0x4a>
c00123fe:	f7 c7 01 00 00 00    	test   edi,0x1
c0012404:	74 15                	je     c001241b <VgaText::scrollScreen()+0x47>
c0012406:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c001240a:	50                   	push   eax
c001240b:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001240f:	50                   	push   eax
c0012410:	e8 ad ff ff ff       	call   c00123c2 <VgaText::combineColours(unsigned char, unsigned char)>
c0012415:	5a                   	pop    edx
c0012416:	5a                   	pop    edx
c0012417:	88 01                	mov    BYTE PTR [ecx],al
c0012419:	eb 03                	jmp    c001241e <VgaText::scrollScreen()+0x4a>
c001241b:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c001241e:	47                   	inc    edi
c001241f:	41                   	inc    ecx
c0012420:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0012426:	75 c9                	jne    c00123f1 <VgaText::scrollScreen()+0x1d>
c0012428:	46                   	inc    esi
c0012429:	83 fe 19             	cmp    esi,0x19
c001242c:	75 b9                	jne    c00123e7 <VgaText::scrollScreen()+0x13>
c001242e:	39 1d b4 f1 02 c0    	cmp    DWORD PTR ds:0xc002f1b4,ebx
c0012434:	75 1f                	jne    c0012455 <VgaText::scrollScreen()+0x81>
c0012436:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001243a:	74 05                	je     c0012441 <VgaText::scrollScreen()+0x6d>
c001243c:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001243f:	eb 14                	jmp    c0012455 <VgaText::scrollScreen()+0x81>
c0012441:	50                   	push   eax
c0012442:	50                   	push   eax
c0012443:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0012447:	50                   	push   eax
c0012448:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001244c:	50                   	push   eax
c001244d:	e8 06 90 00 00       	call   c001b458 <HalConsoleScroll(int, int)>
c0012452:	83 c4 10             	add    esp,0x10
c0012455:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0012459:	83 c4 0c             	add    esp,0xc
c001245c:	5b                   	pop    ebx
c001245d:	5e                   	pop    esi
c001245e:	5f                   	pop    edi
c001245f:	5d                   	pop    ebp
c0012460:	e9 79 fe ff ff       	jmp    c00122de <VgaText::updateCursor()>
c0012465:	90                   	nop

c0012466 <VgaText::combineCharAndColour(char, unsigned char)>:
c0012466:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001246b:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0012470:	c1 e0 08             	shl    eax,0x8
c0012473:	09 d0                	or     eax,edx
c0012475:	c3                   	ret    

c0012476 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0012476:	55                   	push   ebp
c0012477:	57                   	push   edi
c0012478:	56                   	push   esi
c0012479:	53                   	push   ebx
c001247a:	83 ec 1c             	sub    esp,0x1c
c001247d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012481:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012485:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012489:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c001248c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012490:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012494:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012498:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001249c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00124a0:	85 ed                	test   ebp,ebp
c00124a2:	75 14                	jne    c00124b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c00124a4:	c7 44 24 30 bf 47 02 c0 	mov    DWORD PTR [esp+0x30],0xc00247bf
c00124ac:	83 c4 1c             	add    esp,0x1c
c00124af:	5b                   	pop    ebx
c00124b0:	5e                   	pop    esi
c00124b1:	5f                   	pop    edi
c00124b2:	5d                   	pop    ebp
c00124b3:	e9 76 db ff ff       	jmp    c001002e <KePanic(char const*)>
c00124b8:	50                   	push   eax
c00124b9:	50                   	push   eax
c00124ba:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00124bf:	50                   	push   eax
c00124c0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00124c5:	50                   	push   eax
c00124c6:	e8 f7 fe ff ff       	call   c00123c2 <VgaText::combineColours(unsigned char, unsigned char)>
c00124cb:	5a                   	pop    edx
c00124cc:	0f be c9             	movsx  ecx,cl
c00124cf:	5a                   	pop    edx
c00124d0:	0f b6 c0             	movzx  eax,al
c00124d3:	50                   	push   eax
c00124d4:	51                   	push   ecx
c00124d5:	e8 8c ff ff ff       	call   c0012466 <VgaText::combineCharAndColour(char, unsigned char)>
c00124da:	6b d6 50             	imul   edx,esi,0x50
c00124dd:	83 c4 10             	add    esp,0x10
c00124e0:	01 da                	add    edx,ebx
c00124e2:	0f b7 d2             	movzx  edx,dx
c00124e5:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c00124ea:	39 3d b4 f1 02 c0    	cmp    DWORD PTR ds:0xc002f1b4,edi
c00124f0:	75 28                	jne    c001251a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c00124f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124f6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00124fa:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c00124fe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012502:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0012506:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001250a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001250e:	83 c4 1c             	add    esp,0x1c
c0012511:	5b                   	pop    ebx
c0012512:	5e                   	pop    esi
c0012513:	5f                   	pop    edi
c0012514:	5d                   	pop    ebp
c0012515:	e9 46 90 00 00       	jmp    c001b560 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001251a:	83 c4 1c             	add    esp,0x1c
c001251d:	5b                   	pop    ebx
c001251e:	5e                   	pop    esi
c001251f:	5f                   	pop    edi
c0012520:	5d                   	pop    ebp
c0012521:	c3                   	ret    

c0012522 <VgaText::getCursorX()>:
c0012522:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012526:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0012529:	c3                   	ret    

c001252a <VgaText::getCursorY()>:
c001252a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001252e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0012531:	c3                   	ret    

c0012532 <VgaText::setCursor(int, int)>:
c0012532:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001253a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001253d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012541:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0012544:	e9 95 fd ff ff       	jmp    c00122de <VgaText::updateCursor()>

c0012549 <setActiveTerminal(VgaText*)>:
c0012549:	53                   	push   ebx
c001254a:	83 ec 08             	sub    esp,0x8
c001254d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012551:	85 db                	test   ebx,ebx
c0012553:	75 11                	jne    c0012566 <setActiveTerminal(VgaText*)+0x1d>
c0012555:	c7 44 24 10 cf 47 02 c0 	mov    DWORD PTR [esp+0x10],0xc00247cf
c001255d:	83 c4 08             	add    esp,0x8
c0012560:	5b                   	pop    ebx
c0012561:	e9 c8 da ff ff       	jmp    c001002e <KePanic(char const*)>
c0012566:	a1 b4 f1 02 c0       	mov    eax,ds:0xc002f1b4
c001256b:	85 c0                	test   eax,eax
c001256d:	74 0c                	je     c001257b <setActiveTerminal(VgaText*)+0x32>
c001256f:	83 ec 0c             	sub    esp,0xc
c0012572:	50                   	push   eax
c0012573:	e8 66 fd ff ff       	call   c00122de <VgaText::updateCursor()>
c0012578:	83 c4 10             	add    esp,0x10
c001257b:	89 1d b4 f1 02 c0    	mov    DWORD PTR ds:0xc002f1b4,ebx
c0012581:	50                   	push   eax
c0012582:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012585:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012588:	53                   	push   ebx
c0012589:	e8 a4 ff ff ff       	call   c0012532 <VgaText::setCursor(int, int)>
c001258e:	83 c4 18             	add    esp,0x18
c0012591:	5b                   	pop    ebx
c0012592:	c3                   	ret    
c0012593:	90                   	nop

c0012594 <VgaText::clearScreen()>:
c0012594:	57                   	push   edi
c0012595:	56                   	push   esi
c0012596:	31 f6                	xor    esi,esi
c0012598:	53                   	push   ebx
c0012599:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001259d:	52                   	push   edx
c001259e:	6a 00                	push   0x0
c00125a0:	6a 00                	push   0x0
c00125a2:	53                   	push   ebx
c00125a3:	e8 8a ff ff ff       	call   c0012532 <VgaText::setCursor(int, int)>
c00125a8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00125af:	83 c4 10             	add    esp,0x10
c00125b2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00125b5:	7e 20                	jle    c00125d7 <VgaText::clearScreen()+0x43>
c00125b7:	31 ff                	xor    edi,edi
c00125b9:	50                   	push   eax
c00125ba:	50                   	push   eax
c00125bb:	56                   	push   esi
c00125bc:	57                   	push   edi
c00125bd:	47                   	inc    edi
c00125be:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00125c1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00125c4:	6a 20                	push   0x20
c00125c6:	53                   	push   ebx
c00125c7:	e8 aa fe ff ff       	call   c0012476 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00125cc:	83 c4 20             	add    esp,0x20
c00125cf:	83 ff 50             	cmp    edi,0x50
c00125d2:	75 e5                	jne    c00125b9 <VgaText::clearScreen()+0x25>
c00125d4:	46                   	inc    esi
c00125d5:	eb db                	jmp    c00125b2 <VgaText::clearScreen()+0x1e>
c00125d7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00125de:	5b                   	pop    ebx
c00125df:	5e                   	pop    esi
c00125e0:	5f                   	pop    edi
c00125e1:	c3                   	ret    

c00125e2 <VgaText::setCursorX(int)>:
c00125e2:	83 ec 10             	sub    esp,0x10
c00125e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00125e9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00125ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125f0:	50                   	push   eax
c00125f1:	e8 3c ff ff ff       	call   c0012532 <VgaText::setCursor(int, int)>
c00125f6:	83 c4 1c             	add    esp,0x1c
c00125f9:	c3                   	ret    

c00125fa <VgaText::setCursorY(int)>:
c00125fa:	83 ec 10             	sub    esp,0x10
c00125fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012601:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012605:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0012608:	50                   	push   eax
c0012609:	e8 24 ff ff ff       	call   c0012532 <VgaText::setCursor(int, int)>
c001260e:	83 c4 1c             	add    esp,0x1c
c0012611:	c3                   	ret    

c0012612 <VgaText::incrementCursor(bool)>:
c0012612:	56                   	push   esi
c0012613:	53                   	push   ebx
c0012614:	51                   	push   ecx
c0012615:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012619:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001261d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012620:	40                   	inc    eax
c0012621:	83 f8 50             	cmp    eax,0x50
c0012624:	74 05                	je     c001262b <VgaText::incrementCursor(bool)+0x19>
c0012626:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0012629:	eb 24                	jmp    c001264f <VgaText::incrementCursor(bool)+0x3d>
c001262b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001262e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012635:	8d 50 01             	lea    edx,[eax+0x1]
c0012638:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001263b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001263e:	75 0f                	jne    c001264f <VgaText::incrementCursor(bool)+0x3d>
c0012640:	83 ec 0c             	sub    esp,0xc
c0012643:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0012646:	53                   	push   ebx
c0012647:	e8 88 fd ff ff       	call   c00123d4 <VgaText::scrollScreen()>
c001264c:	83 c4 10             	add    esp,0x10
c001264f:	89 f0                	mov    eax,esi
c0012651:	84 c0                	test   al,al
c0012653:	74 0c                	je     c0012661 <VgaText::incrementCursor(bool)+0x4f>
c0012655:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012659:	5a                   	pop    edx
c001265a:	5b                   	pop    ebx
c001265b:	5e                   	pop    esi
c001265c:	e9 7d fc ff ff       	jmp    c00122de <VgaText::updateCursor()>
c0012661:	58                   	pop    eax
c0012662:	5b                   	pop    ebx
c0012663:	5e                   	pop    esi
c0012664:	c3                   	ret    
c0012665:	90                   	nop

c0012666 <VgaText::decrementCursor(bool)>:
c0012666:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001266a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001266e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0012671:	85 c0                	test   eax,eax
c0012673:	74 04                	je     c0012679 <VgaText::decrementCursor(bool)+0x13>
c0012675:	48                   	dec    eax
c0012676:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0012679:	84 c9                	test   cl,cl
c001267b:	74 09                	je     c0012686 <VgaText::decrementCursor(bool)+0x20>
c001267d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012681:	e9 58 fc ff ff       	jmp    c00122de <VgaText::updateCursor()>
c0012686:	c3                   	ret    
c0012687:	90                   	nop

c0012688 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0012688:	53                   	push   ebx
c0012689:	83 ec 08             	sub    esp,0x8
c001268c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0012691:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012695:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012699:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001269d:	83 f8 07             	cmp    eax,0x7
c00126a0:	75 21                	jne    c00126c3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00126a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00126aa:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00126b2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00126ba:	83 c4 08             	add    esp,0x8
c00126bd:	5b                   	pop    ebx
c00126be:	e9 44 63 ff ff       	jmp    c0008a07 <KeBeep(int, int, bool)>
c00126c3:	83 f8 0d             	cmp    eax,0xd
c00126c6:	75 09                	jne    c00126d1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00126c8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00126cf:	eb 2d                	jmp    c00126fe <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00126d1:	83 f8 0a             	cmp    eax,0xa
c00126d4:	75 31                	jne    c0012707 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00126d6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00126d9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00126e0:	8d 50 01             	lea    edx,[eax+0x1]
c00126e3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00126e6:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00126e9:	75 0f                	jne    c00126fa <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00126eb:	83 ec 0c             	sub    esp,0xc
c00126ee:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00126f1:	53                   	push   ebx
c00126f2:	e8 dd fc ff ff       	call   c00123d4 <VgaText::scrollScreen()>
c00126f7:	83 c4 10             	add    esp,0x10
c00126fa:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00126fe:	83 c4 08             	add    esp,0x8
c0012701:	5b                   	pop    ebx
c0012702:	e9 d7 fb ff ff       	jmp    c00122de <VgaText::updateCursor()>
c0012707:	83 f8 08             	cmp    eax,0x8
c001270a:	75 25                	jne    c0012731 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c001270c:	50                   	push   eax
c001270d:	50                   	push   eax
c001270e:	6a 01                	push   0x1
c0012710:	53                   	push   ebx
c0012711:	e8 50 ff ff ff       	call   c0012666 <VgaText::decrementCursor(bool)>
c0012716:	5a                   	pop    edx
c0012717:	59                   	pop    ecx
c0012718:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001271b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001271e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012721:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012724:	6a 20                	push   0x20
c0012726:	53                   	push   ebx
c0012727:	e8 4a fd ff ff       	call   c0012476 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001272c:	83 c4 28             	add    esp,0x28
c001272f:	5b                   	pop    ebx
c0012730:	c3                   	ret    
c0012731:	83 ec 08             	sub    esp,0x8
c0012734:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012737:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001273a:	51                   	push   ecx
c001273b:	52                   	push   edx
c001273c:	50                   	push   eax
c001273d:	53                   	push   ebx
c001273e:	e8 33 fd ff ff       	call   c0012476 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012743:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0012747:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001274f:	83 c4 28             	add    esp,0x28
c0012752:	5b                   	pop    ebx
c0012753:	e9 ba fe ff ff       	jmp    c0012612 <VgaText::incrementCursor(bool)>

c0012758 <VgaText::putchar(char)>:
c0012758:	57                   	push   edi
c0012759:	56                   	push   esi
c001275a:	53                   	push   ebx
c001275b:	83 ec 10             	sub    esp,0x10
c001275e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012762:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012766:	89 f8                	mov    eax,edi
c0012768:	0f be c0             	movsx  eax,al
c001276b:	83 f8 5b             	cmp    eax,0x5b
c001276e:	75 18                	jne    c0012788 <VgaText::putchar(char)+0x30>
c0012770:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0012774:	74 20                	je     c0012796 <VgaText::putchar(char)+0x3e>
c0012776:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c001277c:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0012783:	e9 c1 00 00 00       	jmp    c0012849 <VgaText::putchar(char)+0xf1>
c0012788:	83 f8 1b             	cmp    eax,0x1b
c001278b:	75 09                	jne    c0012796 <VgaText::putchar(char)+0x3e>
c001278d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0012791:	e9 b3 00 00 00       	jmp    c0012849 <VgaText::putchar(char)+0xf1>
c0012796:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0012799:	84 c9                	test   cl,cl
c001279b:	0f 84 98 00 00 00    	je     c0012839 <VgaText::putchar(char)+0xe1>
c00127a1:	8d 77 c0             	lea    esi,[edi-0x40]
c00127a4:	89 f2                	mov    edx,esi
c00127a6:	80 fa 3e             	cmp    dl,0x3e
c00127a9:	77 78                	ja     c0012823 <VgaText::putchar(char)+0xcb>
c00127ab:	83 f8 6d             	cmp    eax,0x6d
c00127ae:	75 47                	jne    c00127f7 <VgaText::putchar(char)+0x9f>
c00127b0:	31 f6                	xor    esi,esi
c00127b2:	31 d2                	xor    edx,edx
c00127b4:	31 c0                	xor    eax,eax
c00127b6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00127b9:	7e 2d                	jle    c00127e8 <VgaText::putchar(char)+0x90>
c00127bb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00127c0:	83 fa 3b             	cmp    edx,0x3b
c00127c3:	75 17                	jne    c00127dc <VgaText::putchar(char)+0x84>
c00127c5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00127c9:	50                   	push   eax
c00127ca:	53                   	push   ebx
c00127cb:	e8 24 fb ff ff       	call   c00122f4 <VgaText::doANSI_SGR(int)>
c00127d0:	59                   	pop    ecx
c00127d1:	31 d2                	xor    edx,edx
c00127d3:	5f                   	pop    edi
c00127d4:	31 c0                	xor    eax,eax
c00127d6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00127da:	eb 09                	jmp    c00127e5 <VgaText::putchar(char)+0x8d>
c00127dc:	6b c0 0a             	imul   eax,eax,0xa
c00127df:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00127e3:	88 ca                	mov    dl,cl
c00127e5:	46                   	inc    esi
c00127e6:	eb ce                	jmp    c00127b6 <VgaText::putchar(char)+0x5e>
c00127e8:	84 d2                	test   dl,dl
c00127ea:	74 2f                	je     c001281b <VgaText::putchar(char)+0xc3>
c00127ec:	50                   	push   eax
c00127ed:	53                   	push   ebx
c00127ee:	e8 01 fb ff ff       	call   c00122f4 <VgaText::doANSI_SGR(int)>
c00127f3:	58                   	pop    eax
c00127f4:	5a                   	pop    edx
c00127f5:	eb 24                	jmp    c001281b <VgaText::putchar(char)+0xc3>
c00127f7:	83 f8 4a             	cmp    eax,0x4a
c00127fa:	75 1f                	jne    c001281b <VgaText::putchar(char)+0xc3>
c00127fc:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0012800:	75 19                	jne    c001281b <VgaText::putchar(char)+0xc3>
c0012802:	83 ec 0c             	sub    esp,0xc
c0012805:	53                   	push   ebx
c0012806:	e8 89 fd ff ff       	call   c0012594 <VgaText::clearScreen()>
c001280b:	83 c4 0c             	add    esp,0xc
c001280e:	6a 00                	push   0x0
c0012810:	6a 00                	push   0x0
c0012812:	53                   	push   ebx
c0012813:	e8 1a fd ff ff       	call   c0012532 <VgaText::setCursor(int, int)>
c0012818:	83 c4 10             	add    esp,0x10
c001281b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0012821:	eb 26                	jmp    c0012849 <VgaText::putchar(char)+0xf1>
c0012823:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0012826:	83 f8 0e             	cmp    eax,0xe
c0012829:	7f 1e                	jg     c0012849 <VgaText::putchar(char)+0xf1>
c001282b:	8d 48 01             	lea    ecx,[eax+0x1]
c001282e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0012831:	89 f9                	mov    ecx,edi
c0012833:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0012837:	eb 10                	jmp    c0012849 <VgaText::putchar(char)+0xf1>
c0012839:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001283c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001283f:	50                   	push   eax
c0012840:	53                   	push   ebx
c0012841:	e8 42 fe ff ff       	call   c0012688 <VgaText::putchar(char, VgaColour, VgaColour)>
c0012846:	83 c4 10             	add    esp,0x10
c0012849:	83 c4 10             	add    esp,0x10
c001284c:	5b                   	pop    ebx
c001284d:	5e                   	pop    esi
c001284e:	5f                   	pop    edi
c001284f:	c3                   	ret    

c0012850 <VgaText::putx(unsigned int)>:
c0012850:	57                   	push   edi
c0012851:	b9 11 00 00 00       	mov    ecx,0x11
c0012856:	56                   	push   esi
c0012857:	be 6f 30 02 c0       	mov    esi,0xc002306f
c001285c:	53                   	push   ebx
c001285d:	83 ec 20             	sub    esp,0x20
c0012860:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0012864:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0012868:	fc                   	cld    
c0012869:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001286b:	be 08 00 00 00       	mov    esi,0x8
c0012870:	50                   	push   eax
c0012871:	50                   	push   eax
c0012872:	89 d8                	mov    eax,ebx
c0012874:	c1 e3 04             	shl    ebx,0x4
c0012877:	c1 e8 1c             	shr    eax,0x1c
c001287a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001287f:	50                   	push   eax
c0012880:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012884:	e8 cf fe ff ff       	call   c0012758 <VgaText::putchar(char)>
c0012889:	83 c4 10             	add    esp,0x10
c001288c:	4e                   	dec    esi
c001288d:	75 e1                	jne    c0012870 <VgaText::putx(unsigned int)+0x20>
c001288f:	83 c4 20             	add    esp,0x20
c0012892:	5b                   	pop    ebx
c0012893:	5e                   	pop    esi
c0012894:	5f                   	pop    edi
c0012895:	c3                   	ret    

c0012896 <VgaText::puts(char const*)>:
c0012896:	53                   	push   ebx
c0012897:	83 ec 08             	sub    esp,0x8
c001289a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001289e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00128a1:	85 c0                	test   eax,eax
c00128a3:	74 12                	je     c00128b7 <VgaText::puts(char const*)+0x21>
c00128a5:	43                   	inc    ebx
c00128a6:	51                   	push   ecx
c00128a7:	51                   	push   ecx
c00128a8:	50                   	push   eax
c00128a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128ad:	e8 a6 fe ff ff       	call   c0012758 <VgaText::putchar(char)>
c00128b2:	83 c4 10             	add    esp,0x10
c00128b5:	eb e7                	jmp    c001289e <VgaText::puts(char const*)+0x8>
c00128b7:	83 c4 08             	add    esp,0x8
c00128ba:	5b                   	pop    ebx
c00128bb:	c3                   	ret    

c00128bc <VgaText::write(unsigned long long, void*, int*)>:
c00128bc:	55                   	push   ebp
c00128bd:	57                   	push   edi
c00128be:	56                   	push   esi
c00128bf:	53                   	push   ebx
c00128c0:	83 ec 0c             	sub    esp,0xc
c00128c3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00128c7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00128cb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00128cf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00128d6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00128d9:	39 eb                	cmp    ebx,ebp
c00128db:	74 13                	je     c00128f0 <VgaText::write(unsigned long long, void*, int*)+0x34>
c00128dd:	43                   	inc    ebx
c00128de:	50                   	push   eax
c00128df:	50                   	push   eax
c00128e0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00128e4:	50                   	push   eax
c00128e5:	56                   	push   esi
c00128e6:	e8 6d fe ff ff       	call   c0012758 <VgaText::putchar(char)>
c00128eb:	83 c4 10             	add    esp,0x10
c00128ee:	eb e9                	jmp    c00128d9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00128f0:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00128f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128fb:	89 38                	mov    DWORD PTR [eax],edi
c00128fd:	83 c4 0c             	add    esp,0xc
c0012900:	31 c0                	xor    eax,eax
c0012902:	5b                   	pop    ebx
c0012903:	5e                   	pop    esi
c0012904:	5f                   	pop    edi
c0012905:	5d                   	pop    ebp
c0012906:	c3                   	ret    
c0012907:	90                   	nop

c0012908 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0012908:	55                   	push   ebp
c0012909:	57                   	push   edi
c001290a:	56                   	push   esi
c001290b:	53                   	push   ebx
c001290c:	83 ec 1c             	sub    esp,0x1c
c001290f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012913:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012917:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001291b:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c001291e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012922:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012926:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001292a:	85 db                	test   ebx,ebx
c001292c:	75 14                	jne    c0012942 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3a>
c001292e:	c7 44 24 30 dd 47 02 c0 	mov    DWORD PTR [esp+0x30],0xc00247dd
c0012936:	83 c4 1c             	add    esp,0x1c
c0012939:	5b                   	pop    ebx
c001293a:	5e                   	pop    esi
c001293b:	5f                   	pop    edi
c001293c:	5d                   	pop    ebp
c001293d:	e9 ec d6 ff ff       	jmp    c001002e <KePanic(char const*)>
c0012942:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c0012949:	50                   	push   eax
c001294a:	50                   	push   eax
c001294b:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012950:	50                   	push   eax
c0012951:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012956:	50                   	push   eax
c0012957:	e8 66 fa ff ff       	call   c00123c2 <VgaText::combineColours(unsigned char, unsigned char)>
c001295c:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c0012960:	83 c4 10             	add    esp,0x10
c0012963:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c0012966:	0f b6 e8             	movzx  ebp,al
c0012969:	0f b7 c9             	movzx  ecx,cx
c001296c:	01 c9                	add    ecx,ecx
c001296e:	01 cb                	add    ebx,ecx
c0012970:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012973:	85 c0                	test   eax,eax
c0012975:	0f 84 ef 00 00 00    	je     c0012a6a <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c001297b:	83 f8 0d             	cmp    eax,0xd
c001297e:	75 0c                	jne    c001298c <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c0012980:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012987:	e9 d8 00 00 00       	jmp    c0012a64 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c001298c:	83 f8 0a             	cmp    eax,0xa
c001298f:	75 44                	jne    c00129d5 <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c0012991:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012994:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c001299b:	8d 48 01             	lea    ecx,[eax+0x1]
c001299e:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c00129a1:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c00129a4:	75 0f                	jne    c00129b5 <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c00129a6:	83 ec 0c             	sub    esp,0xc
c00129a9:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c00129ac:	57                   	push   edi
c00129ad:	e8 22 fa ff ff       	call   c00123d4 <VgaText::scrollScreen()>
c00129b2:	83 c4 10             	add    esp,0x10
c00129b5:	83 ec 0c             	sub    esp,0xc
c00129b8:	57                   	push   edi
c00129b9:	e8 20 f9 ff ff       	call   c00122de <VgaText::updateCursor()>
c00129be:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c00129c2:	83 c4 10             	add    esp,0x10
c00129c5:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c00129c8:	0f b7 db             	movzx  ebx,bx
c00129cb:	01 db                	add    ebx,ebx
c00129cd:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c00129d0:	e9 8f 00 00 00       	jmp    c0012a64 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00129d5:	83 f8 08             	cmp    eax,0x8
c00129d8:	75 34                	jne    c0012a0e <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c00129da:	51                   	push   ecx
c00129db:	51                   	push   ecx
c00129dc:	6a 01                	push   0x1
c00129de:	57                   	push   edi
c00129df:	e8 82 fc ff ff       	call   c0012666 <VgaText::decrementCursor(bool)>
c00129e4:	5b                   	pop    ebx
c00129e5:	58                   	pop    eax
c00129e6:	ff 77 18             	push   DWORD PTR [edi+0x18]
c00129e9:	ff 77 14             	push   DWORD PTR [edi+0x14]
c00129ec:	ff 77 30             	push   DWORD PTR [edi+0x30]
c00129ef:	ff 77 34             	push   DWORD PTR [edi+0x34]
c00129f2:	6a 20                	push   0x20
c00129f4:	57                   	push   edi
c00129f5:	e8 7c fa ff ff       	call   c0012476 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00129fa:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c00129fe:	83 c4 20             	add    esp,0x20
c0012a01:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0012a04:	0f b7 db             	movzx  ebx,bx
c0012a07:	01 db                	add    ebx,ebx
c0012a09:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012a0c:	eb 56                	jmp    c0012a64 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012a0e:	52                   	push   edx
c0012a0f:	52                   	push   edx
c0012a10:	55                   	push   ebp
c0012a11:	50                   	push   eax
c0012a12:	e8 4f fa ff ff       	call   c0012466 <VgaText::combineCharAndColour(char, unsigned char)>
c0012a17:	83 c4 10             	add    esp,0x10
c0012a1a:	66 89 03             	mov    WORD PTR [ebx],ax
c0012a1d:	39 3d b4 f1 02 c0    	cmp    DWORD PTR ds:0xc002f1b4,edi
c0012a23:	75 1d                	jne    c0012a42 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0012a25:	83 ec 0c             	sub    esp,0xc
c0012a28:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0012a2b:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012a2e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012a32:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012a36:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012a39:	50                   	push   eax
c0012a3a:	e8 21 8b 00 00       	call   c001b560 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0012a3f:	83 c4 20             	add    esp,0x20
c0012a42:	83 c3 02             	add    ebx,0x2
c0012a45:	50                   	push   eax
c0012a46:	50                   	push   eax
c0012a47:	6a 00                	push   0x0
c0012a49:	57                   	push   edi
c0012a4a:	e8 c3 fb ff ff       	call   c0012612 <VgaText::incrementCursor(bool)>
c0012a4f:	83 c4 10             	add    esp,0x10
c0012a52:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c0012a56:	75 0c                	jne    c0012a64 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012a58:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012a5c:	0f b7 db             	movzx  ebx,bx
c0012a5f:	01 db                	add    ebx,ebx
c0012a61:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012a64:	46                   	inc    esi
c0012a65:	e9 06 ff ff ff       	jmp    c0012970 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0012a6a:	83 ec 0c             	sub    esp,0xc
c0012a6d:	57                   	push   edi
c0012a6e:	e8 6b f8 ff ff       	call   c00122de <VgaText::updateCursor()>
c0012a73:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c0012a7a:	83 c4 2c             	add    esp,0x2c
c0012a7d:	5b                   	pop    ebx
c0012a7e:	5e                   	pop    esi
c0012a7f:	5f                   	pop    edi
c0012a80:	5d                   	pop    ebp
c0012a81:	c3                   	ret    

c0012a82 <VgaText::VgaText(char const*)>:
c0012a82:	56                   	push   esi
c0012a83:	53                   	push   ebx
c0012a84:	83 ec 04             	sub    esp,0x4
c0012a87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a8b:	83 ec 08             	sub    esp,0x8
c0012a8e:	6a 00                	push   0x0
c0012a90:	50                   	push   eax
c0012a91:	e8 d6 05 00 00       	call   c001306c <UnixFile::UnixFile(int)>
c0012a96:	83 c4 10             	add    esp,0x10
c0012a99:	ba 14 48 02 c0       	mov    edx,0xc0024814
c0012a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aa2:	89 10                	mov    DWORD PTR [eax],edx
c0012aa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aa8:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0012aaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ab3:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0012aba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012abe:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0012ac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ac6:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0012aca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ace:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0012ad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ad9:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0012ae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ae4:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0012aeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aef:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0012af6:	83 ec 0c             	sub    esp,0xc
c0012af9:	68 ed 47 02 c0       	push   0xc00247ed
c0012afe:	e8 61 44 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012b03:	83 c4 10             	add    esp,0x10
c0012b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b0a:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0012b11:	83 ec 0c             	sub    esp,0xc
c0012b14:	6a 01                	push   0x1
c0012b16:	e8 b2 09 00 00       	call   c00134cd <Virt::allocateKernelVirtualPages(int)>
c0012b1b:	83 c4 10             	add    esp,0x10
c0012b1e:	89 c2                	mov    edx,eax
c0012b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b24:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012b27:	8b 1d 50 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f250
c0012b2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b31:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b34:	89 c6                	mov    esi,eax
c0012b36:	e8 e7 d6 ff ff       	call   c0010222 <Phys::allocatePage()>
c0012b3b:	68 05 0c 00 00       	push   0xc05
c0012b40:	56                   	push   esi
c0012b41:	50                   	push   eax
c0012b42:	53                   	push   ebx
c0012b43:	e8 68 10 00 00       	call   c0013bb0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012b48:	83 c4 10             	add    esp,0x10
c0012b4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b4f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b52:	83 ec 04             	sub    esp,0x4
c0012b55:	68 a0 0f 00 00       	push   0xfa0
c0012b5a:	6a 00                	push   0x0
c0012b5c:	50                   	push   eax
c0012b5d:	e8 8e d9 fe ff       	call   c00004f0 <memset>
c0012b62:	83 c4 10             	add    esp,0x10
c0012b65:	83 ec 04             	sub    esp,0x4
c0012b68:	6a 00                	push   0x0
c0012b6a:	6a 07                	push   0x7
c0012b6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b70:	e8 13 f8 ff ff       	call   c0012388 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0012b75:	83 c4 10             	add    esp,0x10
c0012b78:	83 ec 04             	sub    esp,0x4
c0012b7b:	6a 00                	push   0x0
c0012b7d:	6a 00                	push   0x0
c0012b7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b83:	e8 aa f9 ff ff       	call   c0012532 <VgaText::setCursor(int, int)>
c0012b88:	83 c4 10             	add    esp,0x10
c0012b8b:	83 ec 0c             	sub    esp,0xc
c0012b8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b92:	e8 fd f9 ff ff       	call   c0012594 <VgaText::clearScreen()>
c0012b97:	83 c4 10             	add    esp,0x10
c0012b9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b9e:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0012ba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ba6:	05 82 00 00 00       	add    eax,0x82
c0012bab:	83 ec 04             	sub    esp,0x4
c0012bae:	68 80 00 00 00       	push   0x80
c0012bb3:	6a 00                	push   0x0
c0012bb5:	50                   	push   eax
c0012bb6:	e8 35 d9 fe ff       	call   c00004f0 <memset>
c0012bbb:	83 c4 10             	add    esp,0x10
c0012bbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bc2:	05 02 01 00 00       	add    eax,0x102
c0012bc7:	83 ec 04             	sub    esp,0x4
c0012bca:	68 80 00 00 00       	push   0x80
c0012bcf:	6a 00                	push   0x0
c0012bd1:	50                   	push   eax
c0012bd2:	e8 19 d9 fe ff       	call   c00004f0 <memset>
c0012bd7:	83 c4 10             	add    esp,0x10
c0012bda:	90                   	nop
c0012bdb:	83 c4 04             	add    esp,0x4
c0012bde:	5b                   	pop    ebx
c0012bdf:	5e                   	pop    esi
c0012be0:	c3                   	ret    
c0012be1:	90                   	nop

c0012be2 <VgaText::receiveKey(unsigned char)>:
c0012be2:	55                   	push   ebp
c0012be3:	57                   	push   edi
c0012be4:	56                   	push   esi
c0012be5:	53                   	push   ebx
c0012be6:	83 ec 2c             	sub    esp,0x2c
c0012be9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0012bed:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012bf1:	89 ef                	mov    edi,ebp
c0012bf3:	81 e7 ff 00 00 00    	and    edi,0xff
c0012bf9:	0f 84 66 01 00 00    	je     c0012d65 <VgaText::receiveKey(unsigned char)+0x183>
c0012bff:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0012c05:	83 ff 08             	cmp    edi,0x8
c0012c08:	75 73                	jne    c0012c7d <VgaText::receiveKey(unsigned char)+0x9b>
c0012c0a:	83 ec 0c             	sub    esp,0xc
c0012c0d:	56                   	push   esi
c0012c0e:	e8 5d d9 fe ff       	call   c0000570 <strlen>
c0012c13:	83 c4 10             	add    esp,0x10
c0012c16:	85 c0                	test   eax,eax
c0012c18:	0f 84 02 01 00 00    	je     c0012d20 <VgaText::receiveKey(unsigned char)+0x13e>
c0012c1e:	50                   	push   eax
c0012c1f:	50                   	push   eax
c0012c20:	6a 08                	push   0x8
c0012c22:	53                   	push   ebx
c0012c23:	e8 30 fb ff ff       	call   c0012758 <VgaText::putchar(char)>
c0012c28:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c2b:	e8 40 d9 fe ff       	call   c0000570 <strlen>
c0012c30:	83 c4 10             	add    esp,0x10
c0012c33:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0012c3b:	83 fa 0d             	cmp    edx,0xd
c0012c3e:	89 d0                	mov    eax,edx
c0012c40:	0f 95 c1             	setne  cl
c0012c43:	83 fa 1f             	cmp    edx,0x1f
c0012c46:	0f 9e c2             	setle  dl
c0012c49:	0f b6 d2             	movzx  edx,dl
c0012c4c:	85 ca                	test   edx,ecx
c0012c4e:	74 17                	je     c0012c67 <VgaText::receiveKey(unsigned char)+0x85>
c0012c50:	83 e8 08             	sub    eax,0x8
c0012c53:	3c 02                	cmp    al,0x2
c0012c55:	76 10                	jbe    c0012c67 <VgaText::receiveKey(unsigned char)+0x85>
c0012c57:	55                   	push   ebp
c0012c58:	55                   	push   ebp
c0012c59:	68 00 48 02 c0       	push   0xc0024800
c0012c5e:	53                   	push   ebx
c0012c5f:	e8 32 fc ff ff       	call   c0012896 <VgaText::puts(char const*)>
c0012c64:	83 c4 10             	add    esp,0x10
c0012c67:	83 ec 0c             	sub    esp,0xc
c0012c6a:	56                   	push   esi
c0012c6b:	e8 00 d9 fe ff       	call   c0000570 <strlen>
c0012c70:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0012c78:	e9 a0 00 00 00       	jmp    c0012d1d <VgaText::receiveKey(unsigned char)+0x13b>
c0012c7d:	83 ec 0c             	sub    esp,0xc
c0012c80:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0012c86:	50                   	push   eax
c0012c87:	e8 e4 d8 fe ff       	call   c0000570 <strlen>
c0012c8c:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c8f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c93:	e8 d8 d8 fe ff       	call   c0000570 <strlen>
c0012c98:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012c9c:	83 c4 10             	add    esp,0x10
c0012c9f:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0012ca3:	3d 80 00 00 00       	cmp    eax,0x80
c0012ca8:	0f 87 b7 00 00 00    	ja     c0012d65 <VgaText::receiveKey(unsigned char)+0x183>
c0012cae:	8d 45 ff             	lea    eax,[ebp-0x1]
c0012cb1:	8d 55 f7             	lea    edx,[ebp-0x9]
c0012cb4:	3c 1e                	cmp    al,0x1e
c0012cb6:	0f 96 c0             	setbe  al
c0012cb9:	80 fa 01             	cmp    dl,0x1
c0012cbc:	0f 97 c2             	seta   dl
c0012cbf:	0f b6 d2             	movzx  edx,dl
c0012cc2:	85 c2                	test   edx,eax
c0012cc4:	74 2e                	je     c0012cf4 <VgaText::receiveKey(unsigned char)+0x112>
c0012cc6:	83 ff 0d             	cmp    edi,0xd
c0012cc9:	74 29                	je     c0012cf4 <VgaText::receiveKey(unsigned char)+0x112>
c0012ccb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012cce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012cd1:	68 06 48 02 c0       	push   0xc0024806
c0012cd6:	53                   	push   ebx
c0012cd7:	e8 2c fc ff ff       	call   c0012908 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0012cdc:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012cdf:	8d 45 40             	lea    eax,[ebp+0x40]
c0012ce2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012ce5:	0f b6 c0             	movzx  eax,al
c0012ce8:	50                   	push   eax
c0012ce9:	53                   	push   ebx
c0012cea:	e8 99 f9 ff ff       	call   c0012688 <VgaText::putchar(char, VgaColour, VgaColour)>
c0012cef:	83 c4 20             	add    esp,0x20
c0012cf2:	eb 11                	jmp    c0012d05 <VgaText::receiveKey(unsigned char)+0x123>
c0012cf4:	89 e8                	mov    eax,ebp
c0012cf6:	51                   	push   ecx
c0012cf7:	0f be c0             	movsx  eax,al
c0012cfa:	51                   	push   ecx
c0012cfb:	50                   	push   eax
c0012cfc:	53                   	push   ebx
c0012cfd:	e8 56 fa ff ff       	call   c0012758 <VgaText::putchar(char)>
c0012d02:	83 c4 10             	add    esp,0x10
c0012d05:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012d0a:	89 e8                	mov    eax,ebp
c0012d0c:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0012d10:	52                   	push   edx
c0012d11:	52                   	push   edx
c0012d12:	8d 44 24 26          	lea    eax,[esp+0x26]
c0012d16:	50                   	push   eax
c0012d17:	56                   	push   esi
c0012d18:	e8 23 db fe ff       	call   c0000840 <strcat>
c0012d1d:	83 c4 10             	add    esp,0x10
c0012d20:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0012d26:	b0 01                	mov    al,0x1
c0012d28:	83 ff 1c             	cmp    edi,0x1c
c0012d2b:	77 0e                	ja     c0012d3b <VgaText::receiveKey(unsigned char)+0x159>
c0012d2d:	b8 08 04 00 10       	mov    eax,0x10000408
c0012d32:	89 f9                	mov    ecx,edi
c0012d34:	d3 e8                	shr    eax,cl
c0012d36:	f7 d0                	not    eax
c0012d38:	83 e0 01             	and    eax,0x1
c0012d3b:	84 c0                	test   al,al
c0012d3d:	74 04                	je     c0012d43 <VgaText::receiveKey(unsigned char)+0x161>
c0012d3f:	84 d2                	test   dl,dl
c0012d41:	74 22                	je     c0012d65 <VgaText::receiveKey(unsigned char)+0x183>
c0012d43:	81 c3 02 01 00 00    	add    ebx,0x102
c0012d49:	50                   	push   eax
c0012d4a:	50                   	push   eax
c0012d4b:	56                   	push   esi
c0012d4c:	53                   	push   ebx
c0012d4d:	e8 ee da fe ff       	call   c0000840 <strcat>
c0012d52:	83 c4 0c             	add    esp,0xc
c0012d55:	68 80 00 00 00       	push   0x80
c0012d5a:	6a 00                	push   0x0
c0012d5c:	56                   	push   esi
c0012d5d:	e8 8e d7 fe ff       	call   c00004f0 <memset>
c0012d62:	83 c4 10             	add    esp,0x10
c0012d65:	83 c4 2c             	add    esp,0x2c
c0012d68:	5b                   	pop    ebx
c0012d69:	5e                   	pop    esi
c0012d6a:	5f                   	pop    edi
c0012d6b:	5d                   	pop    ebp
c0012d6c:	c3                   	ret    
c0012d6d:	90                   	nop

c0012d6e <VgaText::doUpdate()>:
c0012d6e:	c3                   	ret    
c0012d6f:	90                   	nop

c0012d70 <TSS::TSS()>:
c0012d70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d74:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012d7b:	90                   	nop
c0012d7c:	c3                   	ret    
c0012d7d:	90                   	nop
c0012d7e:	66 90                	xchg   ax,ax

c0012d80 <TSS::setESP(unsigned long)>:
c0012d80:	55                   	push   ebp
c0012d81:	89 e5                	mov    ebp,esp
c0012d83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d89:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012d8c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012d8f:	90                   	nop
c0012d90:	5d                   	pop    ebp
c0012d91:	c3                   	ret    
c0012d92:	66 90                	xchg   ax,ax

c0012d94 <TSS::flush()>:
c0012d94:	55                   	push   ebp
c0012d95:	89 e5                	mov    ebp,esp
c0012d97:	83 ec 10             	sub    esp,0x10
c0012d9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d9f:	83 c8 03             	or     eax,0x3
c0012da2:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0012da6:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0012daa:	66 89 d0             	mov    ax,dx
c0012dad:	0f 00 d8             	ltr    ax
c0012db0:	90                   	nop
c0012db1:	c9                   	leave  
c0012db2:	c3                   	ret    
c0012db3:	90                   	nop

c0012db4 <TSS::setup(unsigned long, unsigned long)>:
c0012db4:	55                   	push   ebp
c0012db5:	89 e5                	mov    ebp,esp
c0012db7:	83 ec 18             	sub    esp,0x18
c0012dba:	83 ec 0c             	sub    esp,0xc
c0012dbd:	6a 68                	push   0x68
c0012dbf:	e8 23 cf ff ff       	call   c000fce7 <malloc>
c0012dc4:	83 c4 10             	add    esp,0x10
c0012dc7:	89 c2                	mov    edx,eax
c0012dc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012dcc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012dcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012dd2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012dd5:	83 ec 08             	sub    esp,0x8
c0012dd8:	50                   	push   eax
c0012dd9:	68 28 48 02 c0       	push   0xc0024828
c0012dde:	e8 81 41 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012de3:	83 c4 10             	add    esp,0x10
c0012de6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012de9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012dec:	83 ec 04             	sub    esp,0x4
c0012def:	6a 68                	push   0x68
c0012df1:	6a 00                	push   0x0
c0012df3:	50                   	push   eax
c0012df4:	e8 f7 d6 fe ff       	call   c00004f0 <memset>
c0012df9:	83 c4 10             	add    esp,0x10
c0012dfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012dff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e02:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0012e08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e0b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e0e:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0012e14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e1a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012e1d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012e20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e26:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0012e2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e2f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e32:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0012e38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e3b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e3e:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0012e44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e47:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e4a:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0012e50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e53:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e56:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0012e5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e62:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0012e68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e6e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0012e71:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0012e74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e7a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012e7d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012e80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e83:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e86:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0012e8d:	83 ec 0c             	sub    esp,0xc
c0012e90:	68 3f 48 02 c0       	push   0xc002483f
c0012e95:	e8 ca 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012e9a:	83 c4 10             	add    esp,0x10
c0012e9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ea0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ea3:	0f 20 da             	mov    edx,cr3
c0012ea6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0012ea9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0012eac:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0012eaf:	83 ec 0c             	sub    esp,0xc
c0012eb2:	68 42 48 02 c0       	push   0xc0024842
c0012eb7:	e8 a8 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012ebc:	83 c4 10             	add    esp,0x10
c0012ebf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ec2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ec5:	83 ec 08             	sub    esp,0x8
c0012ec8:	50                   	push   eax
c0012ec9:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012ecc:	50                   	push   eax
c0012ecd:	e8 78 be ff ff       	call   c000ed4a <GDTEntry::setBase(unsigned int)>
c0012ed2:	83 c4 10             	add    esp,0x10
c0012ed5:	83 ec 08             	sub    esp,0x8
c0012ed8:	6a 68                	push   0x68
c0012eda:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012edd:	50                   	push   eax
c0012ede:	e8 83 be ff ff       	call   c000ed66 <GDTEntry::setLimit(unsigned int)>
c0012ee3:	83 c4 10             	add    esp,0x10
c0012ee6:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0012eea:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012eed:	83 e0 0f             	and    eax,0xf
c0012ef0:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012ef3:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012ef6:	83 c8 40             	or     eax,0x40
c0012ef9:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012efc:	83 ec 0c             	sub    esp,0xc
c0012eff:	68 45 48 02 c0       	push   0xc0024845
c0012f04:	e8 5b 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f09:	83 c4 10             	add    esp,0x10
c0012f0c:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c0012f11:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012f17:	83 ec 08             	sub    esp,0x8
c0012f1a:	50                   	push   eax
c0012f1b:	68 48 48 02 c0       	push   0xc0024848
c0012f20:	e8 3f 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f25:	83 c4 10             	add    esp,0x10
c0012f28:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c0012f2d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012f33:	05 64 01 00 00       	add    eax,0x164
c0012f38:	83 ec 04             	sub    esp,0x4
c0012f3b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0012f3e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0012f41:	50                   	push   eax
c0012f42:	e8 53 be ff ff       	call   c000ed9a <GDT::addEntry(GDTEntry)>
c0012f47:	83 c4 10             	add    esp,0x10
c0012f4a:	89 c2                	mov    edx,eax
c0012f4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012f4f:	89 10                	mov    DWORD PTR [eax],edx
c0012f51:	83 ec 0c             	sub    esp,0xc
c0012f54:	68 5d 48 02 c0       	push   0xc002485d
c0012f59:	e8 06 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f5e:	83 c4 10             	add    esp,0x10
c0012f61:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c0012f66:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012f6c:	05 64 01 00 00       	add    eax,0x164
c0012f71:	83 ec 0c             	sub    esp,0xc
c0012f74:	50                   	push   eax
c0012f75:	e8 4a be ff ff       	call   c000edc4 <GDT::flush()>
c0012f7a:	83 c4 10             	add    esp,0x10
c0012f7d:	83 ec 0c             	sub    esp,0xc
c0012f80:	68 60 48 02 c0       	push   0xc0024860
c0012f85:	e8 da 3f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f8a:	83 c4 10             	add    esp,0x10
c0012f8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012f90:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f92:	c9                   	leave  
c0012f93:	c3                   	ret    

c0012f94 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0012f94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012f98:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012f9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f9f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012fa4:	75 08                	jne    c0012fae <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0012fa6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012fac:	eb 38                	jmp    c0012fe6 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0012fae:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012fb3:	75 17                	jne    c0012fcc <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0012fb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012fba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012fbd:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0012fc3:	8b 10                	mov    edx,DWORD PTR [eax]
c0012fc5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012fc9:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0012fcc:	89 c1                	mov    ecx,eax
c0012fce:	83 e1 fd             	and    ecx,0xfffffffd
c0012fd1:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0012fd7:	74 cd                	je     c0012fa6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012fd9:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012fde:	83 e0 ef             	and    eax,0xffffffef
c0012fe1:	83 f8 08             	cmp    eax,0x8
c0012fe4:	76 c0                	jbe    c0012fa6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012fe6:	31 c0                	xor    eax,eax
c0012fe8:	c3                   	ret    
c0012fe9:	90                   	nop

c0012fea <ReservedFilename::isAtty()>:
c0012fea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012fee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012ff1:	31 c0                	xor    eax,eax
c0012ff3:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0012ff9:	74 09                	je     c0013004 <ReservedFilename::isAtty()+0x1a>
c0012ffb:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0013001:	0f 94 c0             	sete   al
c0013004:	c3                   	ret    
c0013005:	90                   	nop

c0013006 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0013006:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001300a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001300e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013011:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013015:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001301a:	75 08                	jne    c0013024 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001301c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0013022:	eb 3d                	jmp    c0013061 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0013024:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0013029:	75 17                	jne    c0013042 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001302b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013030:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013033:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0013039:	8b 10                	mov    edx,DWORD PTR [eax]
c001303b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001303f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0013042:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0013047:	75 04                	jne    c001304d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0013049:	89 0a                	mov    DWORD PTR [edx],ecx
c001304b:	eb 14                	jmp    c0013061 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001304d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0013052:	74 c8                	je     c001301c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0013054:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0013059:	83 e0 ef             	and    eax,0xffffffef
c001305c:	83 f8 08             	cmp    eax,0x8
c001305f:	76 bb                	jbe    c001301c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0013061:	31 c0                	xor    eax,eax
c0013063:	c3                   	ret    

c0013064 <UnixFile::getFileDescriptor()>:
c0013064:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013068:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001306b:	c3                   	ret    

c001306c <UnixFile::UnixFile(int)>:
c001306c:	53                   	push   ebx
c001306d:	83 ec 28             	sub    esp,0x28
c0013070:	ba b0 48 02 c0       	mov    edx,0xc00248b0
c0013075:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013079:	89 10                	mov    DWORD PTR [eax],edx
c001307b:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0013083:	0f 8f 90 01 00 00    	jg     c0013219 <UnixFile::UnixFile(int)+0x1ad>
c0013089:	a1 40 70 02 c0       	mov    eax,ds:0xc0027040
c001308e:	8d 50 01             	lea    edx,[eax+0x1]
c0013091:	89 15 40 70 02 c0    	mov    DWORD PTR ds:0xc0027040,edx
c0013097:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001309b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001309e:	83 ec 08             	sub    esp,0x8
c00130a1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00130a5:	68 38 f2 02 c0       	push   0xc002f238
c00130aa:	e8 2f f3 00 00       	call   c00223de <LinkedList<UnixFile>::addElement(UnixFile*)>
c00130af:	83 c4 10             	add    esp,0x10
c00130b2:	a0 34 f2 02 c0       	mov    al,ds:0xc002f234
c00130b7:	83 f0 01             	xor    eax,0x1
c00130ba:	0f b6 c0             	movzx  eax,al
c00130bd:	85 c0                	test   eax,eax
c00130bf:	0f 84 55 01 00 00    	je     c001321a <UnixFile::UnixFile(int)+0x1ae>
c00130c5:	c6 05 34 f2 02 c0 01 	mov    BYTE PTR ds:0xc002f234,0x1
c00130cc:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00130d4:	83 ec 0c             	sub    esp,0xc
c00130d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00130db:	e8 07 cc ff ff       	call   c000fce7 <malloc>
c00130e0:	83 c4 10             	add    esp,0x10
c00130e3:	89 c3                	mov    ebx,eax
c00130e5:	83 ec 08             	sub    esp,0x8
c00130e8:	68 03 ff ff 0f       	push   0xfffff03
c00130ed:	53                   	push   ebx
c00130ee:	e8 2d 01 00 00       	call   c0013220 <ReservedFilename::ReservedFilename(int)>
c00130f3:	83 c4 10             	add    esp,0x10
c00130f6:	89 1d 2c f2 02 c0    	mov    DWORD PTR ds:0xc002f22c,ebx
c00130fc:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0013104:	83 ec 0c             	sub    esp,0xc
c0013107:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001310b:	e8 d7 cb ff ff       	call   c000fce7 <malloc>
c0013110:	83 c4 10             	add    esp,0x10
c0013113:	89 c3                	mov    ebx,eax
c0013115:	83 ec 08             	sub    esp,0x8
c0013118:	68 01 ff ff 0f       	push   0xfffff01
c001311d:	53                   	push   ebx
c001311e:	e8 fd 00 00 00       	call   c0013220 <ReservedFilename::ReservedFilename(int)>
c0013123:	83 c4 10             	add    esp,0x10
c0013126:	89 1d 30 f2 02 c0    	mov    DWORD PTR ds:0xc002f230,ebx
c001312c:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0013134:	83 ec 0c             	sub    esp,0xc
c0013137:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001313b:	e8 a7 cb ff ff       	call   c000fce7 <malloc>
c0013140:	83 c4 10             	add    esp,0x10
c0013143:	89 c3                	mov    ebx,eax
c0013145:	83 ec 08             	sub    esp,0x8
c0013148:	68 00 ff ff 0f       	push   0xfffff00
c001314d:	53                   	push   ebx
c001314e:	e8 cd 00 00 00       	call   c0013220 <ReservedFilename::ReservedFilename(int)>
c0013153:	83 c4 10             	add    esp,0x10
c0013156:	89 1d 24 f2 02 c0    	mov    DWORD PTR ds:0xc002f224,ebx
c001315c:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0013164:	83 ec 0c             	sub    esp,0xc
c0013167:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001316b:	e8 77 cb ff ff       	call   c000fce7 <malloc>
c0013170:	83 c4 10             	add    esp,0x10
c0013173:	89 c3                	mov    ebx,eax
c0013175:	83 ec 08             	sub    esp,0x8
c0013178:	68 02 ff ff 0f       	push   0xfffff02
c001317d:	53                   	push   ebx
c001317e:	e8 9d 00 00 00       	call   c0013220 <ReservedFilename::ReservedFilename(int)>
c0013183:	83 c4 10             	add    esp,0x10
c0013186:	89 1d 28 f2 02 c0    	mov    DWORD PTR ds:0xc002f228,ebx
c001318c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013194:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0013199:	7f 7f                	jg     c001321a <UnixFile::UnixFile(int)+0x1ae>
c001319b:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00131a3:	83 ec 0c             	sub    esp,0xc
c00131a6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00131aa:	e8 38 cb ff ff       	call   c000fce7 <malloc>
c00131af:	83 c4 10             	add    esp,0x10
c00131b2:	89 c3                	mov    ebx,eax
c00131b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131b8:	05 10 ff ff 0f       	add    eax,0xfffff10
c00131bd:	83 ec 08             	sub    esp,0x8
c00131c0:	50                   	push   eax
c00131c1:	53                   	push   ebx
c00131c2:	e8 59 00 00 00       	call   c0013220 <ReservedFilename::ReservedFilename(int)>
c00131c7:	83 c4 10             	add    esp,0x10
c00131ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131ce:	89 1c 85 00 f2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0e00],ebx
c00131d5:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00131dd:	83 ec 0c             	sub    esp,0xc
c00131e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00131e4:	e8 fe ca ff ff       	call   c000fce7 <malloc>
c00131e9:	83 c4 10             	add    esp,0x10
c00131ec:	89 c3                	mov    ebx,eax
c00131ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131f2:	05 20 ff ff 0f       	add    eax,0xfffff20
c00131f7:	83 ec 08             	sub    esp,0x8
c00131fa:	50                   	push   eax
c00131fb:	53                   	push   ebx
c00131fc:	e8 1f 00 00 00       	call   c0013220 <ReservedFilename::ReservedFilename(int)>
c0013201:	83 c4 10             	add    esp,0x10
c0013204:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013208:	89 1c 85 c0 f1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0e40],ebx
c001320f:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013214:	e9 7b ff ff ff       	jmp    c0013194 <UnixFile::UnixFile(int)+0x128>
c0013219:	90                   	nop
c001321a:	83 c4 28             	add    esp,0x28
c001321d:	5b                   	pop    ebx
c001321e:	c3                   	ret    
c001321f:	90                   	nop

c0013220 <ReservedFilename::ReservedFilename(int)>:
c0013220:	83 ec 0c             	sub    esp,0xc
c0013223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013227:	83 ec 08             	sub    esp,0x8
c001322a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001322e:	50                   	push   eax
c001322f:	e8 38 fe ff ff       	call   c001306c <UnixFile::UnixFile(int)>
c0013234:	83 c4 10             	add    esp,0x10
c0013237:	ba cc 48 02 c0       	mov    edx,0xc00248cc
c001323c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013240:	89 10                	mov    DWORD PTR [eax],edx
c0013242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013246:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001324a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001324d:	90                   	nop
c001324e:	83 c4 0c             	add    esp,0xc
c0013251:	c3                   	ret    

c0013252 <UnixFile::~UnixFile()>:
c0013252:	83 ec 1c             	sub    esp,0x1c
c0013255:	ba b0 48 02 c0       	mov    edx,0xc00248b0
c001325a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001325e:	89 10                	mov    DWORD PTR [eax],edx
c0013260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013264:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013267:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001326c:	7f 76                	jg     c00132e4 <UnixFile::~UnixFile()+0x92>
c001326e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013276:	83 ec 0c             	sub    esp,0xc
c0013279:	68 38 f2 02 c0       	push   0xc002f238
c001327e:	e8 2f f2 00 00       	call   c00224b2 <LinkedList<UnixFile>::getFirstElement()>
c0013283:	83 c4 10             	add    esp,0x10
c0013286:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001328a:	83 ec 0c             	sub    esp,0xc
c001328d:	68 38 f2 02 c0       	push   0xc002f238
c0013292:	e8 23 f2 00 00       	call   c00224ba <LinkedList<UnixFile>::removeFirst()>
c0013297:	83 c4 10             	add    esp,0x10
c001329a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001329e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00132a2:	74 43                	je     c00132e7 <UnixFile::~UnixFile()+0x95>
c00132a4:	83 ec 08             	sub    esp,0x8
c00132a7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00132ab:	68 38 f2 02 c0       	push   0xc002f238
c00132b0:	e8 29 f1 00 00       	call   c00223de <LinkedList<UnixFile>::addElement(UnixFile*)>
c00132b5:	83 c4 10             	add    esp,0x10
c00132b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00132bc:	8d 50 01             	lea    edx,[eax+0x1]
c00132bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00132c3:	3d 20 a1 07 00       	cmp    eax,0x7a120
c00132c8:	0f 94 c0             	sete   al
c00132cb:	0f b6 c0             	movzx  eax,al
c00132ce:	85 c0                	test   eax,eax
c00132d0:	74 a4                	je     c0013276 <UnixFile::~UnixFile()+0x24>
c00132d2:	83 ec 0c             	sub    esp,0xc
c00132d5:	68 64 48 02 c0       	push   0xc0024864
c00132da:	e8 4f cd ff ff       	call   c001002e <KePanic(char const*)>
c00132df:	83 c4 10             	add    esp,0x10
c00132e2:	eb 92                	jmp    c0013276 <UnixFile::~UnixFile()+0x24>
c00132e4:	90                   	nop
c00132e5:	eb 01                	jmp    c00132e8 <UnixFile::~UnixFile()+0x96>
c00132e7:	90                   	nop
c00132e8:	90                   	nop
c00132e9:	83 c4 1c             	add    esp,0x1c
c00132ec:	c3                   	ret    
c00132ed:	90                   	nop

c00132ee <UnixFile::~UnixFile()>:
c00132ee:	83 ec 0c             	sub    esp,0xc
c00132f1:	83 ec 0c             	sub    esp,0xc
c00132f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132f8:	e8 55 ff ff ff       	call   c0013252 <UnixFile::~UnixFile()>
c00132fd:	83 c4 10             	add    esp,0x10
c0013300:	83 ec 08             	sub    esp,0x8
c0013303:	6a 0c                	push   0xc
c0013305:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013309:	e8 4d a0 ff ff       	call   c000d35b <operator delete(void*, unsigned long)>
c001330e:	83 c4 10             	add    esp,0x10
c0013311:	83 c4 0c             	add    esp,0xc
c0013314:	c3                   	ret    
c0013315:	90                   	nop

c0013316 <ReservedFilename::~ReservedFilename()>:
c0013316:	83 ec 0c             	sub    esp,0xc
c0013319:	ba cc 48 02 c0       	mov    edx,0xc00248cc
c001331e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013322:	89 10                	mov    DWORD PTR [eax],edx
c0013324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013328:	83 ec 0c             	sub    esp,0xc
c001332b:	50                   	push   eax
c001332c:	e8 21 ff ff ff       	call   c0013252 <UnixFile::~UnixFile()>
c0013331:	83 c4 10             	add    esp,0x10
c0013334:	90                   	nop
c0013335:	83 c4 0c             	add    esp,0xc
c0013338:	c3                   	ret    
c0013339:	90                   	nop

c001333a <ReservedFilename::~ReservedFilename()>:
c001333a:	83 ec 0c             	sub    esp,0xc
c001333d:	83 ec 0c             	sub    esp,0xc
c0013340:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013344:	e8 cd ff ff ff       	call   c0013316 <ReservedFilename::~ReservedFilename()>
c0013349:	83 c4 10             	add    esp,0x10
c001334c:	83 ec 08             	sub    esp,0x8
c001334f:	6a 0c                	push   0xc
c0013351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013355:	e8 01 a0 ff ff       	call   c000d35b <operator delete(void*, unsigned long)>
c001335a:	83 c4 10             	add    esp,0x10
c001335d:	83 c4 0c             	add    esp,0xc
c0013360:	c3                   	ret    

c0013361 <KeGetFileFromDescriptor(int)>:
c0013361:	53                   	push   ebx
c0013362:	83 ec 10             	sub    esp,0x10
c0013365:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013369:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001336f:	53                   	push   ebx
c0013370:	68 84 48 02 c0       	push   0xc0024884
c0013375:	e8 ea 3b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001337a:	83 c4 10             	add    esp,0x10
c001337d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0013383:	7f 30                	jg     c00133b5 <KeGetFileFromDescriptor(int)+0x54>
c0013385:	83 ec 0c             	sub    esp,0xc
c0013388:	68 38 f2 02 c0       	push   0xc002f238
c001338d:	e8 20 f1 00 00       	call   c00224b2 <LinkedList<UnixFile>::getFirstElement()>
c0013392:	83 c4 10             	add    esp,0x10
c0013395:	8d 50 ff             	lea    edx,[eax-0x1]
c0013398:	83 fa fd             	cmp    edx,0xfffffffd
c001339b:	76 04                	jbe    c00133a1 <KeGetFileFromDescriptor(int)+0x40>
c001339d:	31 c0                	xor    eax,eax
c001339f:	eb 6e                	jmp    c001340f <KeGetFileFromDescriptor(int)+0xae>
c00133a1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00133a4:	74 69                	je     c001340f <KeGetFileFromDescriptor(int)+0xae>
c00133a6:	52                   	push   edx
c00133a7:	52                   	push   edx
c00133a8:	50                   	push   eax
c00133a9:	68 38 f2 02 c0       	push   0xc002f238
c00133ae:	e8 a9 f1 00 00       	call   c002255c <LinkedList<UnixFile>::getNext(UnixFile*)>
c00133b3:	eb dd                	jmp    c0013392 <KeGetFileFromDescriptor(int)+0x31>
c00133b5:	a1 2c f2 02 c0       	mov    eax,ds:0xc002f22c
c00133ba:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00133c0:	74 4d                	je     c001340f <KeGetFileFromDescriptor(int)+0xae>
c00133c2:	a1 30 f2 02 c0       	mov    eax,ds:0xc002f230
c00133c7:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00133cd:	74 40                	je     c001340f <KeGetFileFromDescriptor(int)+0xae>
c00133cf:	a1 28 f2 02 c0       	mov    eax,ds:0xc002f228
c00133d4:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00133da:	74 33                	je     c001340f <KeGetFileFromDescriptor(int)+0xae>
c00133dc:	a1 24 f2 02 c0       	mov    eax,ds:0xc002f224
c00133e1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00133e7:	74 26                	je     c001340f <KeGetFileFromDescriptor(int)+0xae>
c00133e9:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00133ef:	83 f8 08             	cmp    eax,0x8
c00133f2:	77 09                	ja     c00133fd <KeGetFileFromDescriptor(int)+0x9c>
c00133f4:	8b 04 85 00 f2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0e00]
c00133fb:	eb 12                	jmp    c001340f <KeGetFileFromDescriptor(int)+0xae>
c00133fd:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0013403:	83 fb 08             	cmp    ebx,0x8
c0013406:	77 95                	ja     c001339d <KeGetFileFromDescriptor(int)+0x3c>
c0013408:	8b 04 9d c0 f1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0e40]
c001340f:	83 c4 08             	add    esp,0x8
c0013412:	5b                   	pop    ebx
c0013413:	c3                   	ret    

c0013414 <__static_initialization_and_destruction_0(int, int)>:
c0013414:	83 ec 0c             	sub    esp,0xc
c0013417:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001341c:	75 34                	jne    c0013452 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001341e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0013426:	75 2a                	jne    c0013452 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0013428:	83 ec 0c             	sub    esp,0xc
c001342b:	68 38 f2 02 c0       	push   0xc002f238
c0013430:	e8 67 ef 00 00       	call   c002239c <LinkedList<UnixFile>::LinkedList()>
c0013435:	83 c4 10             	add    esp,0x10
c0013438:	83 ec 04             	sub    esp,0x4
c001343b:	68 8c 68 02 c0       	push   0xc002688c
c0013440:	68 38 f2 02 c0       	push   0xc002f238
c0013445:	68 9a 23 02 c0       	push   0xc002239a
c001344a:	e8 bc 9e ff ff       	call   c000d30b <__cxa_atexit>
c001344f:	83 c4 10             	add    esp,0x10
c0013452:	90                   	nop
c0013453:	83 c4 0c             	add    esp,0xc
c0013456:	c3                   	ret    

c0013457 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0013457:	83 ec 0c             	sub    esp,0xc
c001345a:	83 ec 08             	sub    esp,0x8
c001345d:	68 ff ff 00 00       	push   0xffff
c0013462:	6a 01                	push   0x1
c0013464:	e8 ab ff ff ff       	call   c0013414 <__static_initialization_and_destruction_0(int, int)>
c0013469:	83 c4 10             	add    esp,0x10
c001346c:	83 c4 0c             	add    esp,0xc
c001346f:	c3                   	ret    

c0013470 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0013470:	53                   	push   ebx
c0013471:	8b 15 48 70 02 c0    	mov    edx,DWORD PTR ds:0xc0027048
c0013477:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001347b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001347f:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0013485:	89 d8                	mov    eax,ebx
c0013487:	d1 e8                	shr    eax,1
c0013489:	01 d0                	add    eax,edx
c001348b:	80 e3 01             	and    bl,0x1
c001348e:	8a 10                	mov    dl,BYTE PTR [eax]
c0013490:	75 09                	jne    c001349b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0013492:	83 e2 f0             	and    edx,0xfffffff0
c0013495:	09 ca                	or     edx,ecx
c0013497:	88 10                	mov    BYTE PTR [eax],dl
c0013499:	5b                   	pop    ebx
c001349a:	c3                   	ret    
c001349b:	83 e2 0f             	and    edx,0xf
c001349e:	0f b6 c9             	movzx  ecx,cl
c00134a1:	c1 e1 04             	shl    ecx,0x4
c00134a4:	09 ca                	or     edx,ecx
c00134a6:	88 10                	mov    BYTE PTR [eax],dl
c00134a8:	5b                   	pop    ebx
c00134a9:	c3                   	ret    

c00134aa <Virt::getPageState(unsigned long)>:
c00134aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00134ae:	8b 0d 48 70 02 c0    	mov    ecx,DWORD PTR ds:0xc0027048
c00134b4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00134ba:	89 d0                	mov    eax,edx
c00134bc:	d1 e8                	shr    eax,1
c00134be:	80 e2 01             	and    dl,0x1
c00134c1:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00134c4:	74 03                	je     c00134c9 <Virt::getPageState(unsigned long)+0x1f>
c00134c6:	c1 e8 04             	shr    eax,0x4
c00134c9:	83 e0 0f             	and    eax,0xf
c00134cc:	c3                   	ret    

c00134cd <Virt::allocateKernelVirtualPages(int)>:
c00134cd:	55                   	push   ebp
c00134ce:	31 ed                	xor    ebp,ebp
c00134d0:	57                   	push   edi
c00134d1:	31 ff                	xor    edi,edi
c00134d3:	56                   	push   esi
c00134d4:	53                   	push   ebx
c00134d5:	31 db                	xor    ebx,ebx
c00134d7:	83 ec 0c             	sub    esp,0xc
c00134da:	8b 35 44 70 02 c0    	mov    esi,DWORD PTR ds:0xc0027044
c00134e0:	56                   	push   esi
c00134e1:	e8 c4 ff ff ff       	call   c00134aa <Virt::getPageState(unsigned long)>
c00134e6:	5a                   	pop    edx
c00134e7:	84 c0                	test   al,al
c00134e9:	75 41                	jne    c001352c <Virt::allocateKernelVirtualPages(int)+0x5f>
c00134eb:	85 db                	test   ebx,ebx
c00134ed:	75 02                	jne    c00134f1 <Virt::allocateKernelVirtualPages(int)+0x24>
c00134ef:	89 f5                	mov    ebp,esi
c00134f1:	83 c3 01             	add    ebx,0x1
c00134f4:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00134f8:	74 5f                	je     c0013559 <Virt::allocateKernelVirtualPages(int)+0x8c>
c00134fa:	83 c6 01             	add    esi,0x1
c00134fd:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0013503:	76 34                	jbe    c0013539 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0013505:	c7 05 44 70 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0027044,0xc8000
c001350f:	f7 c7 01 00 00 00    	test   edi,0x1
c0013515:	75 2a                	jne    c0013541 <Virt::allocateKernelVirtualPages(int)+0x74>
c0013517:	be 00 80 0c 00       	mov    esi,0xc8000
c001351c:	bf 01 00 00 00       	mov    edi,0x1
c0013521:	56                   	push   esi
c0013522:	e8 83 ff ff ff       	call   c00134aa <Virt::getPageState(unsigned long)>
c0013527:	5a                   	pop    edx
c0013528:	84 c0                	test   al,al
c001352a:	74 bf                	je     c00134eb <Virt::allocateKernelVirtualPages(int)+0x1e>
c001352c:	31 db                	xor    ebx,ebx
c001352e:	83 c6 01             	add    esi,0x1
c0013531:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0013537:	77 cc                	ja     c0013505 <Virt::allocateKernelVirtualPages(int)+0x38>
c0013539:	89 35 44 70 02 c0    	mov    DWORD PTR ds:0xc0027044,esi
c001353f:	eb 9f                	jmp    c00134e0 <Virt::allocateKernelVirtualPages(int)+0x13>
c0013541:	83 ec 0c             	sub    esp,0xc
c0013544:	68 e0 48 02 c0       	push   0xc00248e0
c0013549:	e8 e0 ca ff ff       	call   c001002e <KePanic(char const*)>
c001354e:	8b 35 44 70 02 c0    	mov    esi,DWORD PTR ds:0xc0027044
c0013554:	83 c4 10             	add    esp,0x10
c0013557:	eb 87                	jmp    c00134e0 <Virt::allocateKernelVirtualPages(int)+0x13>
c0013559:	89 2d 44 70 02 c0    	mov    DWORD PTR ds:0xc0027044,ebp
c001355f:	83 fb 01             	cmp    ebx,0x1
c0013562:	74 6f                	je     c00135d3 <Virt::allocateKernelVirtualPages(int)+0x106>
c0013564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013568:	85 c9                	test   ecx,ecx
c001356a:	74 49                	je     c00135b5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c001356c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013570:	89 e8                	mov    eax,ebp
c0013572:	31 db                	xor    ebx,ebx
c0013574:	8d 79 ff             	lea    edi,[ecx-0x1]
c0013577:	eb 18                	jmp    c0013591 <Virt::allocateKernelVirtualPages(int)+0xc4>
c0013579:	6a 01                	push   0x1
c001357b:	83 c3 01             	add    ebx,0x1
c001357e:	50                   	push   eax
c001357f:	e8 ec fe ff ff       	call   c0013470 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013584:	58                   	pop    eax
c0013585:	5a                   	pop    edx
c0013586:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c001358a:	74 29                	je     c00135b5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c001358c:	a1 44 70 02 c0       	mov    eax,ds:0xc0027044
c0013591:	8d 50 01             	lea    edx,[eax+0x1]
c0013594:	85 db                	test   ebx,ebx
c0013596:	89 15 44 70 02 c0    	mov    DWORD PTR ds:0xc0027044,edx
c001359c:	74 24                	je     c00135c2 <Virt::allocateKernelVirtualPages(int)+0xf5>
c001359e:	39 df                	cmp    edi,ebx
c00135a0:	75 d7                	jne    c0013579 <Virt::allocateKernelVirtualPages(int)+0xac>
c00135a2:	6a 03                	push   0x3
c00135a4:	83 c3 01             	add    ebx,0x1
c00135a7:	50                   	push   eax
c00135a8:	e8 c3 fe ff ff       	call   c0013470 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00135ad:	59                   	pop    ecx
c00135ae:	5e                   	pop    esi
c00135af:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00135b3:	75 d7                	jne    c001358c <Virt::allocateKernelVirtualPages(int)+0xbf>
c00135b5:	83 c4 0c             	add    esp,0xc
c00135b8:	89 e8                	mov    eax,ebp
c00135ba:	5b                   	pop    ebx
c00135bb:	c1 e0 0c             	shl    eax,0xc
c00135be:	5e                   	pop    esi
c00135bf:	5f                   	pop    edi
c00135c0:	5d                   	pop    ebp
c00135c1:	c3                   	ret    
c00135c2:	6a 02                	push   0x2
c00135c4:	bb 01 00 00 00       	mov    ebx,0x1
c00135c9:	50                   	push   eax
c00135ca:	e8 a1 fe ff ff       	call   c0013470 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00135cf:	58                   	pop    eax
c00135d0:	5a                   	pop    edx
c00135d1:	eb b9                	jmp    c001358c <Virt::allocateKernelVirtualPages(int)+0xbf>
c00135d3:	6a 04                	push   0x4
c00135d5:	8d 45 01             	lea    eax,[ebp+0x1]
c00135d8:	55                   	push   ebp
c00135d9:	a3 44 70 02 c0       	mov    ds:0xc0027044,eax
c00135de:	e8 8d fe ff ff       	call   c0013470 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00135e3:	5b                   	pop    ebx
c00135e4:	89 e8                	mov    eax,ebp
c00135e6:	5e                   	pop    esi
c00135e7:	c1 e0 0c             	shl    eax,0xc
c00135ea:	83 c4 0c             	add    esp,0xc
c00135ed:	5b                   	pop    ebx
c00135ee:	5e                   	pop    esi
c00135ef:	5f                   	pop    edi
c00135f0:	5d                   	pop    ebp
c00135f1:	c3                   	ret    

c00135f2 <Virt::freeSwapfilePage(unsigned long)>:
c00135f2:	53                   	push   ebx
c00135f3:	8b 15 4c f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f24c
c00135f9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00135fd:	b8 01 00 00 00       	mov    eax,0x1
c0013602:	89 cb                	mov    ebx,ecx
c0013604:	d3 e0                	shl    eax,cl
c0013606:	c1 eb 05             	shr    ebx,0x5
c0013609:	f7 d0                	not    eax
c001360b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c001360e:	21 c1                	and    ecx,eax
c0013610:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0013613:	5b                   	pop    ebx
c0013614:	c3                   	ret    

c0013615 <Virt::swapIDToSector(unsigned long)>:
c0013615:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013619:	8b 15 4c 70 02 c0    	mov    edx,DWORD PTR ds:0xc002704c
c001361f:	8b 0d 54 70 02 c0    	mov    ecx,DWORD PTR ds:0xc0027054
c0013625:	0f af c2             	imul   eax,edx
c0013628:	01 c8                	add    eax,ecx
c001362a:	c3                   	ret    

c001362b <Virt::allocateSwapfilePage()>:
c001362b:	55                   	push   ebp
c001362c:	31 d2                	xor    edx,edx
c001362e:	57                   	push   edi
c001362f:	56                   	push   esi
c0013630:	53                   	push   ebx
c0013631:	83 ec 0c             	sub    esp,0xc
c0013634:	8b 0d 4c 70 02 c0    	mov    ecx,DWORD PTR ds:0xc002704c
c001363a:	a1 50 70 02 c0       	mov    eax,ds:0xc0027050
c001363f:	f7 f1                	div    ecx
c0013641:	39 0d 50 70 02 c0    	cmp    DWORD PTR ds:0xc0027050,ecx
c0013647:	72 2f                	jb     c0013678 <Virt::allocateSwapfilePage()+0x4d>
c0013649:	8b 35 4c f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f24c
c001364f:	8b 16                	mov    edx,DWORD PTR [esi]
c0013651:	f6 c2 01             	test   dl,0x1
c0013654:	74 3e                	je     c0013694 <Virt::allocateSwapfilePage()+0x69>
c0013656:	31 c9                	xor    ecx,ecx
c0013658:	bf 01 00 00 00       	mov    edi,0x1
c001365d:	eb 12                	jmp    c0013671 <Virt::allocateSwapfilePage()+0x46>
c001365f:	89 fd                	mov    ebp,edi
c0013661:	89 ca                	mov    edx,ecx
c0013663:	d3 e5                	shl    ebp,cl
c0013665:	c1 ea 05             	shr    edx,0x5
c0013668:	8d 1c 96             	lea    ebx,[esi+edx*4]
c001366b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001366d:	85 ea                	test   edx,ebp
c001366f:	74 2c                	je     c001369d <Virt::allocateSwapfilePage()+0x72>
c0013671:	83 c1 01             	add    ecx,0x1
c0013674:	39 c8                	cmp    eax,ecx
c0013676:	77 e7                	ja     c001365f <Virt::allocateSwapfilePage()+0x34>
c0013678:	83 ec 0c             	sub    esp,0xc
c001367b:	68 63 4e 02 c0       	push   0xc0024e63
c0013680:	e8 a9 c9 ff ff       	call   c001002e <KePanic(char const*)>
c0013685:	83 c4 10             	add    esp,0x10
c0013688:	31 c9                	xor    ecx,ecx
c001368a:	83 c4 0c             	add    esp,0xc
c001368d:	89 c8                	mov    eax,ecx
c001368f:	5b                   	pop    ebx
c0013690:	5e                   	pop    esi
c0013691:	5f                   	pop    edi
c0013692:	5d                   	pop    ebp
c0013693:	c3                   	ret    
c0013694:	89 f3                	mov    ebx,esi
c0013696:	bd 01 00 00 00       	mov    ebp,0x1
c001369b:	31 c9                	xor    ecx,ecx
c001369d:	09 ea                	or     edx,ebp
c001369f:	89 c8                	mov    eax,ecx
c00136a1:	89 13                	mov    DWORD PTR [ebx],edx
c00136a3:	83 c4 0c             	add    esp,0xc
c00136a6:	5b                   	pop    ebx
c00136a7:	5e                   	pop    esi
c00136a8:	5f                   	pop    edi
c00136a9:	5d                   	pop    ebp
c00136aa:	c3                   	ret    

c00136ab <Virt::virtualMemorySetup()>:
c00136ab:	53                   	push   ebx
c00136ac:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00136b1:	6a 0f                	push   0xf
c00136b3:	53                   	push   ebx
c00136b4:	83 c3 01             	add    ebx,0x1
c00136b7:	e8 b4 fd ff ff       	call   c0013470 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00136bc:	58                   	pop    eax
c00136bd:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00136c3:	5a                   	pop    edx
c00136c4:	75 eb                	jne    c00136b1 <Virt::virtualMemorySetup()+0x6>
c00136c6:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00136cb:	6a 00                	push   0x0
c00136cd:	53                   	push   ebx
c00136ce:	83 c3 01             	add    ebx,0x1
c00136d1:	e8 9a fd ff ff       	call   c0013470 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00136d6:	59                   	pop    ecx
c00136d7:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00136dd:	58                   	pop    eax
c00136de:	75 eb                	jne    c00136cb <Virt::virtualMemorySetup()+0x20>
c00136e0:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00136e5:	6a 0f                	push   0xf
c00136e7:	53                   	push   ebx
c00136e8:	83 c3 01             	add    ebx,0x1
c00136eb:	e8 80 fd ff ff       	call   c0013470 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00136f0:	58                   	pop    eax
c00136f1:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00136f7:	5a                   	pop    edx
c00136f8:	75 eb                	jne    c00136e5 <Virt::virtualMemorySetup()+0x3a>
c00136fa:	5b                   	pop    ebx
c00136fb:	c3                   	ret    

c00136fc <Virt::setupPageSwapping(int)>:
c00136fc:	53                   	push   ebx
c00136fd:	83 ec 0c             	sub    esp,0xc
c0013700:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013704:	a1 e8 ca 02 c0       	mov    eax,ds:0xc002cae8
c0013709:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001370f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013711:	53                   	push   ebx
c0013712:	c1 e3 0b             	shl    ebx,0xb
c0013715:	68 7a 4e 02 c0       	push   0xc0024e7a
c001371a:	50                   	push   eax
c001371b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c001371e:	89 1d 50 70 02 c0    	mov    DWORD PTR ds:0xc0027050,ebx
c0013724:	c6 05 58 70 02 c0 43 	mov    BYTE PTR ds:0xc0027058,0x43
c001372b:	c1 eb 08             	shr    ebx,0x8
c001372e:	a3 54 70 02 c0       	mov    ds:0xc0027054,eax
c0013733:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013736:	c7 05 4c 70 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002704c,0x8
c0013740:	e8 a2 c5 ff ff       	call   c000fce7 <malloc>
c0013745:	83 c4 0c             	add    esp,0xc
c0013748:	89 c1                	mov    ecx,eax
c001374a:	a3 4c f2 02 c0       	mov    ds:0xc002f24c,eax
c001374f:	31 d2                	xor    edx,edx
c0013751:	a1 50 70 02 c0       	mov    eax,ds:0xc0027050
c0013756:	f7 35 4c 70 02 c0    	div    DWORD PTR ds:0xc002704c
c001375c:	c1 e8 05             	shr    eax,0x5
c001375f:	50                   	push   eax
c0013760:	6a 00                	push   0x0
c0013762:	51                   	push   ecx
c0013763:	e8 88 cd fe ff       	call   c00004f0 <memset>
c0013768:	83 c4 18             	add    esp,0x18
c001376b:	5b                   	pop    ebx
c001376c:	c3                   	ret    
c001376d:	90                   	nop

c001376e <VAS::setCPUSpecific(unsigned long)>:
c001376e:	c3                   	ret    
c001376f:	90                   	nop

c0013770 <VAS::VAS(VAS*)>:
c0013770:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013774:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001377b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001377f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013786:	90                   	nop
c0013787:	c3                   	ret    

c0013788 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0013788:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001378c:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0013791:	89 c2                	mov    edx,eax
c0013793:	c1 e8 0a             	shr    eax,0xa
c0013796:	c1 ea 16             	shr    edx,0x16
c0013799:	83 f9 01             	cmp    ecx,0x1
c001379c:	19 c9                	sbb    ecx,ecx
c001379e:	c1 e2 0c             	shl    edx,0xc
c00137a1:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00137a7:	25 fc 0f 00 00       	and    eax,0xffc
c00137ac:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00137b3:	01 d0                	add    eax,edx
c00137b5:	c3                   	ret    

c00137b6 <VAS::getPageTableEntry(unsigned long)>:
c00137b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00137ba:	89 ca                	mov    edx,ecx
c00137bc:	c1 e9 0a             	shr    ecx,0xa
c00137bf:	c1 ea 16             	shr    edx,0x16
c00137c2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00137c8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00137ce:	c1 e0 0c             	shl    eax,0xc
c00137d1:	8d 04 08             	lea    eax,[eax+ecx*1]
c00137d4:	c3                   	ret    

c00137d5 <Virt::freeKernelVirtualPages(unsigned long)>:
c00137d5:	55                   	push   ebp
c00137d6:	57                   	push   edi
c00137d7:	bf 01 00 00 00       	mov    edi,0x1
c00137dc:	56                   	push   esi
c00137dd:	53                   	push   ebx
c00137de:	83 ec 1c             	sub    esp,0x1c
c00137e1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00137e5:	c1 ee 0c             	shr    esi,0xc
c00137e8:	eb 48                	jmp    c0013832 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c00137ea:	83 ec 08             	sub    esp,0x8
c00137ed:	a1 50 f2 02 c0       	mov    eax,ds:0xc002f250
c00137f2:	55                   	push   ebp
c00137f3:	50                   	push   eax
c00137f4:	e8 bd ff ff ff       	call   c00137b6 <VAS::getPageTableEntry(unsigned long)>
c00137f9:	83 c4 10             	add    esp,0x10
c00137fc:	8b 10                	mov    edx,DWORD PTR [eax]
c00137fe:	f6 c6 04             	test   dh,0x4
c0013801:	75 70                	jne    c0013873 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0013803:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013809:	83 fb 04             	cmp    ebx,0x4
c001380c:	0f 84 8a 00 00 00    	je     c001389c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0013812:	83 fb 02             	cmp    ebx,0x2
c0013815:	0f 84 9a 00 00 00    	je     c00138b5 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c001381b:	83 fb 03             	cmp    ebx,0x3
c001381e:	0f 84 be 00 00 00    	je     c00138e2 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0013824:	83 fb 01             	cmp    ebx,0x1
c0013827:	0f 84 a2 00 00 00    	je     c00138cf <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c001382d:	83 c6 01             	add    esi,0x1
c0013830:	31 ff                	xor    edi,edi
c0013832:	56                   	push   esi
c0013833:	89 f5                	mov    ebp,esi
c0013835:	e8 70 fc ff ff       	call   c00134aa <Virt::getPageState(unsigned long)>
c001383a:	c1 e5 0c             	shl    ebp,0xc
c001383d:	0f b6 d8             	movzx  ebx,al
c0013840:	5a                   	pop    edx
c0013841:	85 db                	test   ebx,ebx
c0013843:	75 a5                	jne    c00137ea <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0013845:	83 ec 0c             	sub    esp,0xc
c0013848:	68 91 4e 02 c0       	push   0xc0024e91
c001384d:	e8 dc c7 ff ff       	call   c001002e <KePanic(char const*)>
c0013852:	5a                   	pop    edx
c0013853:	59                   	pop    ecx
c0013854:	55                   	push   ebp
c0013855:	8b 2d 50 f2 02 c0    	mov    ebp,DWORD PTR ds:0xc002f250
c001385b:	55                   	push   ebp
c001385c:	e8 55 ff ff ff       	call   c00137b6 <VAS::getPageTableEntry(unsigned long)>
c0013861:	83 c4 10             	add    esp,0x10
c0013864:	8b 10                	mov    edx,DWORD PTR [eax]
c0013866:	f6 c6 04             	test   dh,0x4
c0013869:	75 08                	jne    c0013873 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c001386b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013871:	eb ba                	jmp    c001382d <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013873:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013877:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001387d:	83 ec 0c             	sub    esp,0xc
c0013880:	52                   	push   edx
c0013881:	e8 33 c9 ff ff       	call   c00101b9 <Phys::freePage(unsigned long)>
c0013886:	83 c4 10             	add    esp,0x10
c0013889:	83 fb 04             	cmp    ebx,0x4
c001388c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013890:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013896:	0f 85 76 ff ff ff    	jne    c0013812 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c001389c:	83 e7 01             	and    edi,0x1
c001389f:	75 46                	jne    c00138e7 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00138a1:	c7 44 24 30 00 49 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024900
c00138a9:	83 c4 1c             	add    esp,0x1c
c00138ac:	5b                   	pop    ebx
c00138ad:	5e                   	pop    esi
c00138ae:	5f                   	pop    edi
c00138af:	5d                   	pop    ebp
c00138b0:	e9 79 c7 ff ff       	jmp    c001002e <KePanic(char const*)>
c00138b5:	83 e7 01             	and    edi,0x1
c00138b8:	75 15                	jne    c00138cf <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00138ba:	83 ec 0c             	sub    esp,0xc
c00138bd:	68 ad 4e 02 c0       	push   0xc0024ead
c00138c2:	e8 67 c7 ff ff       	call   c001002e <KePanic(char const*)>
c00138c7:	83 c4 10             	add    esp,0x10
c00138ca:	e9 5e ff ff ff       	jmp    c001382d <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00138cf:	83 ec 08             	sub    esp,0x8
c00138d2:	6a 00                	push   0x0
c00138d4:	56                   	push   esi
c00138d5:	e8 96 fb ff ff       	call   c0013470 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00138da:	83 c4 10             	add    esp,0x10
c00138dd:	e9 4b ff ff ff       	jmp    c001382d <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00138e2:	83 e7 01             	and    edi,0x1
c00138e5:	75 16                	jne    c00138fd <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c00138e7:	83 ec 08             	sub    esp,0x8
c00138ea:	6a 00                	push   0x0
c00138ec:	56                   	push   esi
c00138ed:	e8 7e fb ff ff       	call   c0013470 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00138f2:	83 c4 10             	add    esp,0x10
c00138f5:	83 c4 1c             	add    esp,0x1c
c00138f8:	5b                   	pop    ebx
c00138f9:	5e                   	pop    esi
c00138fa:	5f                   	pop    edi
c00138fb:	5d                   	pop    ebp
c00138fc:	c3                   	ret    
c00138fd:	c7 44 24 30 c9 4e 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024ec9
c0013905:	83 c4 1c             	add    esp,0x1c
c0013908:	5b                   	pop    ebx
c0013909:	5e                   	pop    esi
c001390a:	5f                   	pop    edi
c001390b:	5d                   	pop    ebp
c001390c:	e9 1d c7 ff ff       	jmp    c001002e <KePanic(char const*)>
c0013911:	90                   	nop

c0013912 <VAS::freeAllocatedPages(unsigned long)>:
c0013912:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013916:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001391a:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001391e:	74 09                	je     c0013929 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0013920:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013924:	e9 ac fe ff ff       	jmp    c00137d5 <Virt::freeKernelVirtualPages(unsigned long)>
c0013929:	c7 44 24 04 24 49 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024924
c0013931:	e9 2e 36 ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>

c0013936 <VAS::virtualToPhysical(unsigned long)>:
c0013936:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001393a:	50                   	push   eax
c001393b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001393f:	52                   	push   edx
c0013940:	e8 71 fe ff ff       	call   c00137b6 <VAS::getPageTableEntry(unsigned long)>
c0013945:	59                   	pop    ecx
c0013946:	8b 00                	mov    eax,DWORD PTR [eax]
c0013948:	5a                   	pop    edx
c0013949:	25 00 f0 ff ff       	and    eax,0xfffff000
c001394e:	c3                   	ret    
c001394f:	90                   	nop

c0013950 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0013950:	55                   	push   ebp
c0013951:	57                   	push   edi
c0013952:	56                   	push   esi
c0013953:	53                   	push   ebx
c0013954:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013958:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001395c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013960:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013964:	85 db                	test   ebx,ebx
c0013966:	7e 24                	jle    c001398c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0013968:	c1 e3 0c             	shl    ebx,0xc
c001396b:	01 f3                	add    ebx,esi
c001396d:	56                   	push   esi
c001396e:	81 c6 00 10 00 00    	add    esi,0x1000
c0013974:	55                   	push   ebp
c0013975:	e8 3c fe ff ff       	call   c00137b6 <VAS::getPageTableEntry(unsigned long)>
c001397a:	5a                   	pop    edx
c001397b:	59                   	pop    ecx
c001397c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001397e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013982:	21 f9                	and    ecx,edi
c0013984:	09 d1                	or     ecx,edx
c0013986:	39 f3                	cmp    ebx,esi
c0013988:	89 08                	mov    DWORD PTR [eax],ecx
c001398a:	75 e1                	jne    c001396d <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c001398c:	5b                   	pop    ebx
c001398d:	5e                   	pop    esi
c001398e:	5f                   	pop    edi
c001398f:	5d                   	pop    ebp
c0013990:	c3                   	ret    
c0013991:	90                   	nop

c0013992 <VAS::VAS()>:
c0013992:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013996:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001399d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139a1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00139a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139ac:	a3 50 f2 02 c0       	mov    ds:0xc002f250,eax
c00139b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139b5:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00139b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139bd:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00139c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139c4:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00139cb:	ba 7d 80 02 c0       	mov    edx,0xc002807d
c00139d0:	b8 00 80 02 c0       	mov    eax,0xc0028000
c00139d5:	29 c2                	sub    edx,eax
c00139d7:	89 d0                	mov    eax,edx
c00139d9:	05 ff 0f 00 00       	add    eax,0xfff
c00139de:	c1 e8 0c             	shr    eax,0xc
c00139e1:	89 c2                	mov    edx,eax
c00139e3:	b8 00 80 02 c0       	mov    eax,0xc0028000
c00139e8:	6a 04                	push   0x4
c00139ea:	6a ff                	push   0xffffffff
c00139ec:	52                   	push   edx
c00139ed:	50                   	push   eax
c00139ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00139f2:	e8 59 ff ff ff       	call   c0013950 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00139f7:	83 c4 14             	add    esp,0x14
c00139fa:	90                   	nop
c00139fb:	c3                   	ret    

c00139fc <VAS::setToWriteCombining(unsigned long, int)>:
c00139fc:	a1 e4 fa 02 c0       	mov    eax,ds:0xc002fae4
c0013a01:	50                   	push   eax
c0013a02:	6a ff                	push   0xffffffff
c0013a04:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013a08:	52                   	push   edx
c0013a09:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013a0d:	51                   	push   ecx
c0013a0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a12:	50                   	push   eax
c0013a13:	e8 38 ff ff ff       	call   c0013950 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013a18:	83 c4 14             	add    esp,0x14
c0013a1b:	c3                   	ret    

c0013a1c <VAS::mapOtherVASIn(bool, VAS*)>:
c0013a1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a20:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013a23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a27:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0013a2a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013a2f:	83 f8 01             	cmp    eax,0x1
c0013a32:	19 c0                	sbb    eax,eax
c0013a34:	83 ca 03             	or     edx,0x3
c0013a37:	83 e0 fc             	and    eax,0xfffffffc
c0013a3a:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0013a41:	0f 20 d8             	mov    eax,cr3
c0013a44:	0f 22 d8             	mov    cr3,eax
c0013a47:	c3                   	ret    

c0013a48 <VAS::~VAS()>:
c0013a48:	83 ec 2c             	sub    esp,0x2c
c0013a4b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013a53:	fa                   	cli    
c0013a54:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0013a59:	83 c0 01             	add    eax,0x1
c0013a5c:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0013a61:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013a66:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a68:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013a6b:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0013a71:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013a75:	6a 01                	push   0x1
c0013a77:	50                   	push   eax
c0013a78:	e8 9f ff ff ff       	call   c0013a1c <VAS::mapOtherVASIn(bool, VAS*)>
c0013a7d:	83 c4 0c             	add    esp,0xc
c0013a80:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013a88:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0013a90:	0f 8f d8 00 00 00    	jg     c0013b6e <VAS::~VAS()+0x126>
c0013a96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013a9a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013a9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013aa1:	c1 e2 02             	shl    edx,0x2
c0013aa4:	01 d0                	add    eax,edx
c0013aa6:	8b 00                	mov    eax,DWORD PTR [eax]
c0013aa8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013aac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ab0:	83 e0 01             	and    eax,0x1
c0013ab3:	0f 84 ab 00 00 00    	je     c0013b64 <VAS::~VAS()+0x11c>
c0013ab9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013ac1:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0013ac9:	7f 74                	jg     c0013b3f <VAS::~VAS()+0xf7>
c0013acb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013acf:	c1 e0 0a             	shl    eax,0xa
c0013ad2:	89 c2                	mov    edx,eax
c0013ad4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ad8:	01 d0                	add    eax,edx
c0013ada:	c1 e0 0c             	shl    eax,0xc
c0013add:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ae1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013ae6:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ae8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013aeb:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0013af1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013af5:	6a 01                	push   0x1
c0013af7:	50                   	push   eax
c0013af8:	e8 8b fc ff ff       	call   c0013788 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0013afd:	83 c4 0c             	add    esp,0xc
c0013b00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013b04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013b08:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b12:	25 01 04 00 00       	and    eax,0x401
c0013b17:	3d 01 04 00 00       	cmp    eax,0x401
c0013b1c:	75 1a                	jne    c0013b38 <VAS::~VAS()+0xf0>
c0013b1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b22:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013b27:	83 ec 0c             	sub    esp,0xc
c0013b2a:	50                   	push   eax
c0013b2b:	e8 89 c6 ff ff       	call   c00101b9 <Phys::freePage(unsigned long)>
c0013b30:	83 c4 10             	add    esp,0x10
c0013b33:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013b38:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0013b3d:	eb 82                	jmp    c0013ac1 <VAS::~VAS()+0x79>
c0013b3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b43:	25 00 04 00 00       	and    eax,0x400
c0013b48:	74 1a                	je     c0013b64 <VAS::~VAS()+0x11c>
c0013b4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b4e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013b53:	83 ec 0c             	sub    esp,0xc
c0013b56:	50                   	push   eax
c0013b57:	e8 5d c6 ff ff       	call   c00101b9 <Phys::freePage(unsigned long)>
c0013b5c:	83 c4 10             	add    esp,0x10
c0013b5f:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013b64:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013b69:	e9 1a ff ff ff       	jmp    c0013a88 <VAS::~VAS()+0x40>
c0013b6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b72:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013b75:	83 ec 0c             	sub    esp,0xc
c0013b78:	50                   	push   eax
c0013b79:	e8 57 fc ff ff       	call   c00137d5 <Virt::freeKernelVirtualPages(unsigned long)>
c0013b7e:	83 c4 10             	add    esp,0x10
c0013b81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b85:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013b88:	83 ec 0c             	sub    esp,0xc
c0013b8b:	50                   	push   eax
c0013b8c:	e8 28 c6 ff ff       	call   c00101b9 <Phys::freePage(unsigned long)>
c0013b91:	83 c4 10             	add    esp,0x10
c0013b94:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013b99:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0013ba1:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0013ba6:	85 c0                	test   eax,eax
c0013ba8:	75 01                	jne    c0013bab <VAS::~VAS()+0x163>
c0013baa:	fb                   	sti    
c0013bab:	90                   	nop
c0013bac:	83 c4 2c             	add    esp,0x2c
c0013baf:	c3                   	ret    

c0013bb0 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0013bb0:	55                   	push   ebp
c0013bb1:	57                   	push   edi
c0013bb2:	56                   	push   esi
c0013bb3:	53                   	push   ebx
c0013bb4:	83 ec 1c             	sub    esp,0x1c
c0013bb7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0013bbb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013bbf:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0013bc5:	77 08                	ja     c0013bcf <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0013bc7:	0f 20 d8             	mov    eax,cr3
c0013bca:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0013bcd:	75 49                	jne    c0013c18 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0013bcf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013bd3:	09 d8                	or     eax,ebx
c0013bd5:	a9 ff 0f 00 00       	test   eax,0xfff
c0013bda:	75 59                	jne    c0013c35 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0013bdc:	89 de                	mov    esi,ebx
c0013bde:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013be1:	c1 ee 16             	shr    esi,0x16
c0013be4:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0013beb:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0013bef:	74 56                	je     c0013c47 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0013bf1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013bf5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013bf9:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0013bff:	c1 eb 0a             	shr    ebx,0xa
c0013c02:	c1 e6 0c             	shl    esi,0xc
c0013c05:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013c0b:	09 d0                	or     eax,edx
c0013c0d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0013c10:	83 c4 1c             	add    esp,0x1c
c0013c13:	5b                   	pop    ebx
c0013c14:	5e                   	pop    esi
c0013c15:	5f                   	pop    edi
c0013c16:	5d                   	pop    ebp
c0013c17:	c3                   	ret    
c0013c18:	83 ec 0c             	sub    esp,0xc
c0013c1b:	68 48 49 02 c0       	push   0xc0024948
c0013c20:	e8 3f 33 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013c25:	83 c4 10             	add    esp,0x10
c0013c28:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013c2c:	09 d8                	or     eax,ebx
c0013c2e:	a9 ff 0f 00 00       	test   eax,0xfff
c0013c33:	74 a7                	je     c0013bdc <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0013c35:	83 ec 0c             	sub    esp,0xc
c0013c38:	68 b0 49 02 c0       	push   0xc00249b0
c0013c3d:	e8 ec c3 ff ff       	call   c001002e <KePanic(char const*)>
c0013c42:	83 c4 10             	add    esp,0x10
c0013c45:	eb 95                	jmp    c0013bdc <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0013c47:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013c4b:	e8 d2 c5 ff ff       	call   c0010222 <Phys::allocatePage()>
c0013c50:	83 ec 0c             	sub    esp,0xc
c0013c53:	89 c5                	mov    ebp,eax
c0013c55:	8b 0d 50 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f250
c0013c5b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013c5f:	6a 01                	push   0x1
c0013c61:	e8 67 f8 ff ff       	call   c00134cd <Virt::allocateKernelVirtualPages(int)>
c0013c66:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013c6d:	6a 01                	push   0x1
c0013c6f:	50                   	push   eax
c0013c70:	55                   	push   ebp
c0013c71:	81 cd 07 04 00 00    	or     ebp,0x407
c0013c77:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013c7b:	51                   	push   ecx
c0013c7c:	e8 19 01 00 00       	call   c0013d9a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013c81:	83 c4 1c             	add    esp,0x1c
c0013c84:	68 00 10 00 00       	push   0x1000
c0013c89:	6a 00                	push   0x0
c0013c8b:	50                   	push   eax
c0013c8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c90:	e8 5b c8 fe ff       	call   c00004f0 <memset>
c0013c95:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013c99:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013c9c:	e8 34 fb ff ff       	call   c00137d5 <Virt::freeKernelVirtualPages(unsigned long)>
c0013ca1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013ca5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013ca8:	83 c4 10             	add    esp,0x10
c0013cab:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0013cae:	e9 3e ff ff ff       	jmp    c0013bf1 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0013cb3:	90                   	nop

c0013cb4 <VAS::allocatePages(int, int)>:
c0013cb4:	55                   	push   ebp
c0013cb5:	57                   	push   edi
c0013cb6:	56                   	push   esi
c0013cb7:	53                   	push   ebx
c0013cb8:	83 ec 1c             	sub    esp,0x1c
c0013cbb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013cbf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0013cc3:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0013cc7:	75 71                	jne    c0013d3a <VAS::allocatePages(int, int)+0x86>
c0013cc9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013ccc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013cd0:	85 c0                	test   eax,eax
c0013cd2:	74 4d                	je     c0013d21 <VAS::allocatePages(int, int)+0x6d>
c0013cd4:	89 dd                	mov    ebp,ebx
c0013cd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013cda:	c1 e5 0c             	shl    ebp,0xc
c0013cdd:	01 c5                	add    ebp,eax
c0013cdf:	85 db                	test   ebx,ebx
c0013ce1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0013ce4:	7e 29                	jle    c0013d0f <VAS::allocatePages(int, int)+0x5b>
c0013ce6:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013cea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013cee:	81 cf 00 04 00 00    	or     edi,0x400
c0013cf4:	e8 29 c5 ff ff       	call   c0010222 <Phys::allocatePage()>
c0013cf9:	57                   	push   edi
c0013cfa:	53                   	push   ebx
c0013cfb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013d01:	50                   	push   eax
c0013d02:	56                   	push   esi
c0013d03:	e8 a8 fe ff ff       	call   c0013bb0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013d08:	83 c4 10             	add    esp,0x10
c0013d0b:	39 dd                	cmp    ebp,ebx
c0013d0d:	75 e5                	jne    c0013cf4 <VAS::allocatePages(int, int)+0x40>
c0013d0f:	0f 20 d8             	mov    eax,cr3
c0013d12:	0f 22 d8             	mov    cr3,eax
c0013d15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013d19:	83 c4 1c             	add    esp,0x1c
c0013d1c:	5b                   	pop    ebx
c0013d1d:	5e                   	pop    esi
c0013d1e:	5f                   	pop    edi
c0013d1f:	5d                   	pop    ebp
c0013d20:	c3                   	ret    
c0013d21:	83 ec 0c             	sub    esp,0xc
c0013d24:	68 d4 49 02 c0       	push   0xc00249d4
c0013d29:	e8 00 c3 ff ff       	call   c001002e <KePanic(char const*)>
c0013d2e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013d31:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d35:	83 c4 10             	add    esp,0x10
c0013d38:	eb 9a                	jmp    c0013cd4 <VAS::allocatePages(int, int)+0x20>
c0013d3a:	83 ec 0c             	sub    esp,0xc
c0013d3d:	53                   	push   ebx
c0013d3e:	e8 8a f7 ff ff       	call   c00134cd <Virt::allocateKernelVirtualPages(int)>
c0013d43:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d47:	83 c4 10             	add    esp,0x10
c0013d4a:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0013d4f:	77 37                	ja     c0013d88 <VAS::allocatePages(int, int)+0xd4>
c0013d51:	85 db                	test   ebx,ebx
c0013d53:	7e ba                	jle    c0013d0f <VAS::allocatePages(int, int)+0x5b>
c0013d55:	c1 e3 0c             	shl    ebx,0xc
c0013d58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013d5c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013d60:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0013d63:	81 cf 00 04 00 00    	or     edi,0x400
c0013d69:	89 c3                	mov    ebx,eax
c0013d6b:	e8 b2 c4 ff ff       	call   c0010222 <Phys::allocatePage()>
c0013d70:	57                   	push   edi
c0013d71:	53                   	push   ebx
c0013d72:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013d78:	50                   	push   eax
c0013d79:	56                   	push   esi
c0013d7a:	e8 31 fe ff ff       	call   c0013bb0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013d7f:	83 c4 10             	add    esp,0x10
c0013d82:	39 dd                	cmp    ebp,ebx
c0013d84:	75 e5                	jne    c0013d6b <VAS::allocatePages(int, int)+0xb7>
c0013d86:	eb 87                	jmp    c0013d0f <VAS::allocatePages(int, int)+0x5b>
c0013d88:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013d8c:	a1 e8 fa 02 c0       	mov    eax,ds:0xc002fae8
c0013d91:	09 c2                	or     edx,eax
c0013d93:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0013d97:	eb b8                	jmp    c0013d51 <VAS::allocatePages(int, int)+0x9d>
c0013d99:	90                   	nop

c0013d9a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0013d9a:	55                   	push   ebp
c0013d9b:	57                   	push   edi
c0013d9c:	56                   	push   esi
c0013d9d:	53                   	push   ebx
c0013d9e:	83 ec 0c             	sub    esp,0xc
c0013da1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013da5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013da9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013dad:	85 db                	test   ebx,ebx
c0013daf:	7e 2f                	jle    c0013de0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0013db1:	c1 e3 0c             	shl    ebx,0xc
c0013db4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013db8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0013dbc:	01 d3                	add    ebx,edx
c0013dbe:	55                   	push   ebp
c0013dbf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013dc3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013dc7:	29 c2                	sub    edx,eax
c0013dc9:	01 f2                	add    edx,esi
c0013dcb:	52                   	push   edx
c0013dcc:	56                   	push   esi
c0013dcd:	81 c6 00 10 00 00    	add    esi,0x1000
c0013dd3:	57                   	push   edi
c0013dd4:	e8 d7 fd ff ff       	call   c0013bb0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013dd9:	83 c4 10             	add    esp,0x10
c0013ddc:	39 de                	cmp    esi,ebx
c0013dde:	75 de                	jne    c0013dbe <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0013de0:	0f 20 d8             	mov    eax,cr3
c0013de3:	0f 22 d8             	mov    cr3,eax
c0013de6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013dea:	83 c4 0c             	add    esp,0xc
c0013ded:	5b                   	pop    ebx
c0013dee:	5e                   	pop    esi
c0013def:	5f                   	pop    edi
c0013df0:	5d                   	pop    ebp
c0013df1:	c3                   	ret    

c0013df2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0013df2:	55                   	push   ebp
c0013df3:	57                   	push   edi
c0013df4:	56                   	push   esi
c0013df5:	53                   	push   ebx
c0013df6:	83 ec 1c             	sub    esp,0x1c
c0013df9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013dfd:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0013e01:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013e05:	09 f8                	or     eax,edi
c0013e07:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0013e0b:	a9 ff 0f 00 00       	test   eax,0xfff
c0013e10:	75 4f                	jne    c0013e61 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0013e12:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0013e16:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0013e19:	c1 eb 16             	shr    ebx,0x16
c0013e1c:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0013e23:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0013e27:	74 52                	je     c0013e7b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0013e29:	0f b6 f2             	movzx  esi,dl
c0013e2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013e30:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0013e34:	c1 e8 0a             	shr    eax,0xa
c0013e37:	83 fe 01             	cmp    esi,0x1
c0013e3a:	19 d2                	sbb    edx,edx
c0013e3c:	c1 e3 0c             	shl    ebx,0xc
c0013e3f:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0013e45:	25 fc 0f 00 00       	and    eax,0xffc
c0013e4a:	01 d8                	add    eax,ebx
c0013e4c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013e50:	09 d9                	or     ecx,ebx
c0013e52:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0013e59:	83 c4 1c             	add    esp,0x1c
c0013e5c:	5b                   	pop    ebx
c0013e5d:	5e                   	pop    esi
c0013e5e:	5f                   	pop    edi
c0013e5f:	5d                   	pop    ebp
c0013e60:	c3                   	ret    
c0013e61:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0013e65:	83 ec 0c             	sub    esp,0xc
c0013e68:	68 00 4a 02 c0       	push   0xc0024a00
c0013e6d:	e8 bc c1 ff ff       	call   c001002e <KePanic(char const*)>
c0013e72:	83 c4 10             	add    esp,0x10
c0013e75:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013e79:	eb 97                	jmp    c0013e12 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0013e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013e7f:	e8 9e c3 ff ff       	call   c0010222 <Phys::allocatePage()>
c0013e84:	83 ec 0c             	sub    esp,0xc
c0013e87:	89 c5                	mov    ebp,eax
c0013e89:	8b 0d 50 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f250
c0013e8f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013e93:	6a 01                	push   0x1
c0013e95:	e8 33 f6 ff ff       	call   c00134cd <Virt::allocateKernelVirtualPages(int)>
c0013e9a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013ea1:	6a 01                	push   0x1
c0013ea3:	50                   	push   eax
c0013ea4:	55                   	push   ebp
c0013ea5:	81 cd 07 04 00 00    	or     ebp,0x407
c0013eab:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013eaf:	51                   	push   ecx
c0013eb0:	e8 e5 fe ff ff       	call   c0013d9a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013eb5:	83 c4 1c             	add    esp,0x1c
c0013eb8:	68 00 10 00 00       	push   0x1000
c0013ebd:	6a 00                	push   0x0
c0013ebf:	50                   	push   eax
c0013ec0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013ec4:	e8 27 c6 fe ff       	call   c00004f0 <memset>
c0013ec9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013ecd:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013ed0:	e8 00 f9 ff ff       	call   c00137d5 <Virt::freeKernelVirtualPages(unsigned long)>
c0013ed5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0013ed8:	83 c4 10             	add    esp,0x10
c0013edb:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c0013ede:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013ee2:	e9 42 ff ff ff       	jmp    c0013e29 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c0013ee7:	90                   	nop

c0013ee8 <VAS::VAS(bool)>:
c0013ee8:	53                   	push   ebx
c0013ee9:	83 ec 28             	sub    esp,0x28
c0013eec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013ef0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013ef4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ef8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013eff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f03:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013f0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f0e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013f12:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0013f15:	e8 08 c3 ff ff       	call   c0010222 <Phys::allocatePage()>
c0013f1a:	89 c2                	mov    edx,eax
c0013f1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f20:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013f23:	8b 1d 50 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f250
c0013f29:	83 ec 0c             	sub    esp,0xc
c0013f2c:	6a 01                	push   0x1
c0013f2e:	e8 9a f5 ff ff       	call   c00134cd <Virt::allocateKernelVirtualPages(int)>
c0013f33:	83 c4 10             	add    esp,0x10
c0013f36:	89 c2                	mov    edx,eax
c0013f38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f3c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013f3f:	83 ec 0c             	sub    esp,0xc
c0013f42:	6a 03                	push   0x3
c0013f44:	6a 01                	push   0x1
c0013f46:	52                   	push   edx
c0013f47:	50                   	push   eax
c0013f48:	53                   	push   ebx
c0013f49:	e8 4c fe ff ff       	call   c0013d9a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013f4e:	83 c4 20             	add    esp,0x20
c0013f51:	89 c2                	mov    edx,eax
c0013f53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f57:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013f5a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013f62:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0013f6a:	7f 1d                	jg     c0013f89 <VAS::VAS(bool)+0xa1>
c0013f6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f70:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013f73:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013f77:	c1 e2 02             	shl    edx,0x2
c0013f7a:	01 d0                	add    eax,edx
c0013f7c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013f82:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013f87:	eb d9                	jmp    c0013f62 <VAS::VAS(bool)+0x7a>
c0013f89:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0013f91:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0013f99:	7f 59                	jg     c0013ff4 <VAS::VAS(bool)+0x10c>
c0013f9b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f9f:	2d 00 02 00 00       	sub    eax,0x200
c0013fa4:	c1 e0 0c             	shl    eax,0xc
c0013fa7:	89 c2                	mov    edx,eax
c0013fa9:	a1 e8 fa 02 c0       	mov    eax,ds:0xc002fae8
c0013fae:	89 d1                	mov    ecx,edx
c0013fb0:	09 c1                	or     ecx,eax
c0013fb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013fb6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013fb9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013fbd:	c1 e2 02             	shl    edx,0x2
c0013fc0:	01 d0                	add    eax,edx
c0013fc2:	83 c9 05             	or     ecx,0x5
c0013fc5:	89 ca                	mov    edx,ecx
c0013fc7:	89 10                	mov    DWORD PTR [eax],edx
c0013fc9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013fcd:	2d 40 03 00 00       	sub    eax,0x340
c0013fd2:	83 f8 7f             	cmp    eax,0x7f
c0013fd5:	77 16                	ja     c0013fed <VAS::VAS(bool)+0x105>
c0013fd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013fdb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013fde:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013fe2:	c1 e2 02             	shl    edx,0x2
c0013fe5:	01 d0                	add    eax,edx
c0013fe7:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013fed:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013ff2:	eb 9d                	jmp    c0013f91 <VAS::VAS(bool)+0xa9>
c0013ff4:	8b 15 e8 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fae8
c0013ffa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ffe:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014001:	05 20 0c 00 00       	add    eax,0xc20
c0014006:	81 ca 03 40 00 00    	or     edx,0x4003
c001400c:	89 10                	mov    DWORD PTR [eax],edx
c001400e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014012:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014015:	a1 e8 fa 02 c0       	mov    eax,ds:0xc002fae8
c001401a:	09 c2                	or     edx,eax
c001401c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014020:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014023:	05 fc 0f 00 00       	add    eax,0xffc
c0014028:	83 ca 03             	or     edx,0x3
c001402b:	89 10                	mov    DWORD PTR [eax],edx
c001402d:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c0014032:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014038:	83 ec 0c             	sub    esp,0xc
c001403b:	50                   	push   eax
c001403c:	e8 4d 5c ff ff       	call   c0009c8e <Device::getName()>
c0014041:	83 c4 10             	add    esp,0x10
c0014044:	83 ec 08             	sub    esp,0x8
c0014047:	68 e3 4e 02 c0       	push   0xc0024ee3
c001404c:	50                   	push   eax
c001404d:	e8 fe c6 fe ff       	call   c0000750 <strcmp>
c0014052:	83 c4 10             	add    esp,0x10
c0014055:	85 c0                	test   eax,eax
c0014057:	0f 94 c0             	sete   al
c001405a:	0f b6 c0             	movzx  eax,al
c001405d:	85 c0                	test   eax,eax
c001405f:	74 68                	je     c00140c9 <VAS::VAS(bool)+0x1e1>
c0014061:	fa                   	cli    
c0014062:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c0014067:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001406d:	05 68 09 00 00       	add    eax,0x968
c0014072:	83 ec 0c             	sub    esp,0xc
c0014075:	50                   	push   eax
c0014076:	e8 5f af ff ff       	call   c000efda <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001407b:	83 c4 10             	add    esp,0x10
c001407e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014083:	89 c3                	mov    ebx,eax
c0014085:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c001408a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014090:	05 68 09 00 00       	add    eax,0x968
c0014095:	83 ec 0c             	sub    esp,0xc
c0014098:	50                   	push   eax
c0014099:	e8 3c af ff ff       	call   c000efda <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001409e:	83 c4 10             	add    esp,0x10
c00140a1:	83 ec 08             	sub    esp,0x8
c00140a4:	50                   	push   eax
c00140a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00140a9:	e8 08 f7 ff ff       	call   c00137b6 <VAS::getPageTableEntry(unsigned long)>
c00140ae:	83 c4 10             	add    esp,0x10
c00140b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00140b3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00140b8:	6a 11                	push   0x11
c00140ba:	53                   	push   ebx
c00140bb:	50                   	push   eax
c00140bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00140c0:	e8 eb fa ff ff       	call   c0013bb0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00140c5:	83 c4 10             	add    esp,0x10
c00140c8:	fb                   	sti    
c00140c9:	90                   	nop
c00140ca:	83 c4 28             	add    esp,0x28
c00140cd:	5b                   	pop    ebx
c00140ce:	c3                   	ret    
c00140cf:	90                   	nop

c00140d0 <VAS::evict(unsigned long)>:
c00140d0:	55                   	push   ebp
c00140d1:	57                   	push   edi
c00140d2:	56                   	push   esi
c00140d3:	53                   	push   ebx
c00140d4:	83 ec 24             	sub    esp,0x24
c00140d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00140db:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00140df:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00140e3:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00140e8:	50                   	push   eax
c00140e9:	68 f1 4e 02 c0       	push   0xc0024ef1
c00140ee:	e8 71 2e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00140f3:	e8 33 f5 ff ff       	call   c001362b <Virt::allocateSwapfilePage()>
c00140f8:	83 c4 10             	add    esp,0x10
c00140fb:	89 c7                	mov    edi,eax
c00140fd:	a1 4c 70 02 c0       	mov    eax,ds:0xc002704c
c0014102:	85 c0                	test   eax,eax
c0014104:	7e 40                	jle    c0014146 <VAS::evict(unsigned long)+0x76>
c0014106:	89 ee                	mov    esi,ebp
c0014108:	31 db                	xor    ebx,ebx
c001410a:	83 ec 0c             	sub    esp,0xc
c001410d:	57                   	push   edi
c001410e:	e8 02 f5 ff ff       	call   c0013615 <Virt::swapIDToSector(unsigned long)>
c0014113:	89 34 24             	mov    DWORD PTR [esp],esi
c0014116:	01 d8                	add    eax,ebx
c0014118:	6a 01                	push   0x1
c001411a:	31 d2                	xor    edx,edx
c001411c:	83 c3 01             	add    ebx,0x1
c001411f:	52                   	push   edx
c0014120:	81 c6 00 02 00 00    	add    esi,0x200
c0014126:	50                   	push   eax
c0014127:	0f be 05 58 70 02 c0 	movsx  eax,BYTE PTR ds:0xc0027058
c001412e:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c0014135:	50                   	push   eax
c0014136:	e8 b5 69 ff ff       	call   c000aaf0 <LogicalDisk::write(unsigned long long, int, void*)>
c001413b:	83 c4 20             	add    esp,0x20
c001413e:	39 1d 4c 70 02 c0    	cmp    DWORD PTR ds:0xc002704c,ebx
c0014144:	7f c4                	jg     c001410a <VAS::evict(unsigned long)+0x3a>
c0014146:	83 ec 08             	sub    esp,0x8
c0014149:	c1 e7 0c             	shl    edi,0xc
c001414c:	55                   	push   ebp
c001414d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014151:	50                   	push   eax
c0014152:	e8 5f f6 ff ff       	call   c00137b6 <VAS::getPageTableEntry(unsigned long)>
c0014157:	8b 10                	mov    edx,DWORD PTR [eax]
c0014159:	89 d3                	mov    ebx,edx
c001415b:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0014161:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0014167:	09 d7                	or     edi,edx
c0014169:	89 38                	mov    DWORD PTR [eax],edi
c001416b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001416e:	8b 15 48 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f248
c0014174:	83 c2 01             	add    edx,0x1
c0014177:	89 15 48 f2 02 c0    	mov    DWORD PTR ds:0xc002f248,edx
c001417d:	e8 37 c0 ff ff       	call   c00101b9 <Phys::freePage(unsigned long)>
c0014182:	0f 20 d8             	mov    eax,cr3
c0014185:	0f 22 d8             	mov    cr3,eax
c0014188:	8b 0d 48 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f248
c001418e:	51                   	push   ecx
c001418f:	55                   	push   ebp
c0014190:	53                   	push   ebx
c0014191:	68 24 4a 02 c0       	push   0xc0024a24
c0014196:	e8 c9 2d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001419b:	83 c4 18             	add    esp,0x18
c001419e:	a1 44 f2 02 c0       	mov    eax,ds:0xc002f244
c00141a3:	50                   	push   eax
c00141a4:	8d 50 01             	lea    edx,[eax+0x1]
c00141a7:	68 06 4f 02 c0       	push   0xc0024f06
c00141ac:	89 15 44 f2 02 c0    	mov    DWORD PTR ds:0xc002f244,edx
c00141b2:	e8 ad 2d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00141b7:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00141bc:	c7 44 24 40 18 4f 02 c0 	mov    DWORD PTR [esp+0x40],0xc0024f18
c00141c4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00141c8:	83 c4 2c             	add    esp,0x2c
c00141cb:	5b                   	pop    ebx
c00141cc:	5e                   	pop    esi
c00141cd:	5f                   	pop    edi
c00141ce:	5d                   	pop    ebp
c00141cf:	e9 90 2d ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>

c00141d4 <VAS::canLockPage(unsigned long)>:
c00141d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00141d8:	50                   	push   eax
c00141d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00141dd:	52                   	push   edx
c00141de:	e8 d3 f5 ff ff       	call   c00137b6 <VAS::getPageTableEntry(unsigned long)>
c00141e3:	59                   	pop    ecx
c00141e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00141e6:	5a                   	pop    edx
c00141e7:	c1 e8 0b             	shr    eax,0xb
c00141ea:	83 e0 01             	and    eax,0x1
c00141ed:	c3                   	ret    

c00141ee <VAS::unlockPage(unsigned long)>:
c00141ee:	83 ec 0c             	sub    esp,0xc
c00141f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00141f5:	50                   	push   eax
c00141f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00141fa:	52                   	push   edx
c00141fb:	e8 b6 f5 ff ff       	call   c00137b6 <VAS::getPageTableEntry(unsigned long)>
c0014200:	59                   	pop    ecx
c0014201:	5a                   	pop    edx
c0014202:	8b 10                	mov    edx,DWORD PTR [eax]
c0014204:	f6 c6 08             	test   dh,0x8
c0014207:	75 09                	jne    c0014212 <VAS::unlockPage(unsigned long)+0x24>
c0014209:	80 ce 08             	or     dh,0x8
c001420c:	89 10                	mov    DWORD PTR [eax],edx
c001420e:	83 c4 0c             	add    esp,0xc
c0014211:	c3                   	ret    
c0014212:	c7 44 24 10 58 4a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024a58
c001421a:	83 c4 0c             	add    esp,0xc
c001421d:	e9 0c be ff ff       	jmp    c001002e <KePanic(char const*)>

c0014222 <VAS::canLockPages(unsigned long, int)>:
c0014222:	55                   	push   ebp
c0014223:	57                   	push   edi
c0014224:	56                   	push   esi
c0014225:	53                   	push   ebx
c0014226:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001422a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001422e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014232:	85 ff                	test   edi,edi
c0014234:	7e 23                	jle    c0014259 <VAS::canLockPages(unsigned long, int)+0x37>
c0014236:	31 f6                	xor    esi,esi
c0014238:	eb 0d                	jmp    c0014247 <VAS::canLockPages(unsigned long, int)+0x25>
c001423a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014240:	83 c6 01             	add    esi,0x1
c0014243:	39 f7                	cmp    edi,esi
c0014245:	74 0d                	je     c0014254 <VAS::canLockPages(unsigned long, int)+0x32>
c0014247:	53                   	push   ebx
c0014248:	55                   	push   ebp
c0014249:	e8 86 ff ff ff       	call   c00141d4 <VAS::canLockPage(unsigned long)>
c001424e:	5a                   	pop    edx
c001424f:	84 c0                	test   al,al
c0014251:	59                   	pop    ecx
c0014252:	75 e6                	jne    c001423a <VAS::canLockPages(unsigned long, int)+0x18>
c0014254:	5b                   	pop    ebx
c0014255:	5e                   	pop    esi
c0014256:	5f                   	pop    edi
c0014257:	5d                   	pop    ebp
c0014258:	c3                   	ret    
c0014259:	b0 01                	mov    al,0x1
c001425b:	eb f7                	jmp    c0014254 <VAS::canLockPages(unsigned long, int)+0x32>
c001425d:	90                   	nop

c001425e <VAS::unlockPages(unsigned long, int)>:
c001425e:	55                   	push   ebp
c001425f:	57                   	push   edi
c0014260:	56                   	push   esi
c0014261:	53                   	push   ebx
c0014262:	83 ec 0c             	sub    esp,0xc
c0014265:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014269:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001426d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014271:	85 ff                	test   edi,edi
c0014273:	7e 1c                	jle    c0014291 <VAS::unlockPages(unsigned long, int)+0x33>
c0014275:	31 f6                	xor    esi,esi
c0014277:	83 ec 08             	sub    esp,0x8
c001427a:	83 c6 01             	add    esi,0x1
c001427d:	53                   	push   ebx
c001427e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014284:	55                   	push   ebp
c0014285:	e8 64 ff ff ff       	call   c00141ee <VAS::unlockPage(unsigned long)>
c001428a:	83 c4 10             	add    esp,0x10
c001428d:	39 f7                	cmp    edi,esi
c001428f:	75 e6                	jne    c0014277 <VAS::unlockPages(unsigned long, int)+0x19>
c0014291:	83 c4 0c             	add    esp,0xc
c0014294:	5b                   	pop    ebx
c0014295:	5e                   	pop    esi
c0014296:	5f                   	pop    edi
c0014297:	5d                   	pop    ebp
c0014298:	c3                   	ret    
c0014299:	90                   	nop

c001429a <VAS::tryLoadBackOffDisk(unsigned long)>:
c001429a:	55                   	push   ebp
c001429b:	57                   	push   edi
c001429c:	56                   	push   esi
c001429d:	53                   	push   ebx
c001429e:	81 ec 0c 10 00 00    	sub    esp,0x100c
c00142a4:	8b b4 24 24 10 00 00 	mov    esi,DWORD PTR [esp+0x1024]
c00142ab:	89 f3                	mov    ebx,esi
c00142ad:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00142b3:	53                   	push   ebx
c00142b4:	8b 84 24 24 10 00 00 	mov    eax,DWORD PTR [esp+0x1024]
c00142bb:	50                   	push   eax
c00142bc:	e8 f5 f4 ff ff       	call   c00137b6 <VAS::getPageTableEntry(unsigned long)>
c00142c1:	5a                   	pop    edx
c00142c2:	89 c5                	mov    ebp,eax
c00142c4:	59                   	pop    ecx
c00142c5:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c00142cb:	0f 87 cb 00 00 00    	ja     c001439c <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c00142d1:	83 ec 08             	sub    esp,0x8
c00142d4:	56                   	push   esi
c00142d5:	68 88 4a 02 c0       	push   0xc0024a88
c00142da:	e8 85 2c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00142df:	5e                   	pop    esi
c00142e0:	a1 0c fa 02 c0       	mov    eax,ds:0xc002fa0c
c00142e5:	5f                   	pop    edi
c00142e6:	50                   	push   eax
c00142e7:	68 b8 4a 02 c0       	push   0xc0024ab8
c00142ec:	e8 73 2c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00142f1:	58                   	pop    eax
c00142f2:	8b 0d 30 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa30
c00142f8:	5a                   	pop    edx
c00142f9:	51                   	push   ecx
c00142fa:	68 dc 4a 02 c0       	push   0xc0024adc
c00142ff:	e8 60 2c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014304:	83 c4 10             	add    esp,0x10
c0014307:	85 db                	test   ebx,ebx
c0014309:	74 5b                	je     c0014366 <VAS::tryLoadBackOffDisk(unsigned long)+0xcc>
c001430b:	85 ed                	test   ebp,ebp
c001430d:	74 21                	je     c0014330 <VAS::tryLoadBackOffDisk(unsigned long)+0x96>
c001430f:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c0014312:	f7 c6 00 02 00 00    	test   esi,0x200
c0014318:	0f 85 c5 00 00 00    	jne    c00143e3 <VAS::tryLoadBackOffDisk(unsigned long)+0x149>
c001431e:	89 f0                	mov    eax,esi
c0014320:	25 01 04 00 00       	and    eax,0x401
c0014325:	3d 00 04 00 00       	cmp    eax,0x400
c001432a:	0f 84 39 01 00 00    	je     c0014469 <VAS::tryLoadBackOffDisk(unsigned long)+0x1cf>
c0014330:	83 ec 08             	sub    esp,0x8
c0014333:	a1 0c fa 02 c0       	mov    eax,ds:0xc002fa0c
c0014338:	50                   	push   eax
c0014339:	68 d0 4c 02 c0       	push   0xc0024cd0
c001433e:	e8 21 2c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014343:	5a                   	pop    edx
c0014344:	8b 1d 30 fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa30
c001434a:	59                   	pop    ecx
c001434b:	53                   	push   ebx
c001434c:	68 f4 4c 02 c0       	push   0xc0024cf4
c0014351:	e8 0e 2c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014356:	83 c4 10             	add    esp,0x10
c0014359:	31 c0                	xor    eax,eax
c001435b:	81 c4 0c 10 00 00    	add    esp,0x100c
c0014361:	5b                   	pop    ebx
c0014362:	5e                   	pop    esi
c0014363:	5f                   	pop    edi
c0014364:	5d                   	pop    ebp
c0014365:	c3                   	ret    
c0014366:	83 ec 08             	sub    esp,0x8
c0014369:	a1 0c fa 02 c0       	mov    eax,ds:0xc002fa0c
c001436e:	50                   	push   eax
c001436f:	68 00 4b 02 c0       	push   0xc0024b00
c0014374:	e8 eb 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014379:	58                   	pop    eax
c001437a:	8b 0d 30 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa30
c0014380:	5a                   	pop    edx
c0014381:	51                   	push   ecx
c0014382:	68 24 4b 02 c0       	push   0xc0024b24
c0014387:	e8 d8 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001438c:	83 c4 10             	add    esp,0x10
c001438f:	31 c0                	xor    eax,eax
c0014391:	81 c4 0c 10 00 00    	add    esp,0x100c
c0014397:	5b                   	pop    ebx
c0014398:	5e                   	pop    esi
c0014399:	5f                   	pop    edi
c001439a:	5d                   	pop    ebp
c001439b:	c3                   	ret    
c001439c:	83 ec 0c             	sub    esp,0xc
c001439f:	68 2d 4f 02 c0       	push   0xc0024f2d
c00143a4:	e8 85 bc ff ff       	call   c001002e <KePanic(char const*)>
c00143a9:	5f                   	pop    edi
c00143aa:	58                   	pop    eax
c00143ab:	56                   	push   esi
c00143ac:	68 88 4a 02 c0       	push   0xc0024a88
c00143b1:	e8 ae 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00143b6:	58                   	pop    eax
c00143b7:	8b 0d 0c fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa0c
c00143bd:	5a                   	pop    edx
c00143be:	51                   	push   ecx
c00143bf:	68 b8 4a 02 c0       	push   0xc0024ab8
c00143c4:	e8 9b 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00143c9:	5e                   	pop    esi
c00143ca:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00143cf:	5f                   	pop    edi
c00143d0:	50                   	push   eax
c00143d1:	68 dc 4a 02 c0       	push   0xc0024adc
c00143d6:	e8 89 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00143db:	83 c4 10             	add    esp,0x10
c00143de:	e9 28 ff ff ff       	jmp    c001430b <VAS::tryLoadBackOffDisk(unsigned long)+0x71>
c00143e3:	83 ec 0c             	sub    esp,0xc
c00143e6:	68 48 4b 02 c0       	push   0xc0024b48
c00143eb:	e8 74 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00143f0:	e8 2d be ff ff       	call   c0010222 <Phys::allocatePage()>
c00143f5:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00143f8:	83 ca 01             	or     edx,0x1
c00143fb:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c00143fe:	0f 20 da             	mov    edx,cr3
c0014401:	0f 22 da             	mov    cr3,edx
c0014404:	ba 00 10 00 00       	mov    edx,0x1000
c0014409:	89 de                	mov    esi,ebx
c001440b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001440f:	89 d1                	mov    ecx,edx
c0014411:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014413:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014416:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c001441c:	09 c8                	or     eax,ecx
c001441e:	83 c8 02             	or     eax,0x2
c0014421:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014424:	0f 20 d8             	mov    eax,cr3
c0014427:	0f 22 d8             	mov    cr3,eax
c001442a:	8d 74 24 10          	lea    esi,[esp+0x10]
c001442e:	89 df                	mov    edi,ebx
c0014430:	89 d1                	mov    ecx,edx
c0014432:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014434:	8b 35 0c fa 02 c0    	mov    esi,DWORD PTR ds:0xc002fa0c
c001443a:	59                   	pop    ecx
c001443b:	5b                   	pop    ebx
c001443c:	56                   	push   esi
c001443d:	68 68 4b 02 c0       	push   0xc0024b68
c0014442:	e8 1d 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014447:	5f                   	pop    edi
c0014448:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c001444d:	5d                   	pop    ebp
c001444e:	50                   	push   eax
c001444f:	68 8c 4b 02 c0       	push   0xc0024b8c
c0014454:	e8 0b 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014459:	83 c4 10             	add    esp,0x10
c001445c:	b0 01                	mov    al,0x1
c001445e:	81 c4 0c 10 00 00    	add    esp,0x100c
c0014464:	5b                   	pop    ebx
c0014465:	5e                   	pop    esi
c0014466:	5f                   	pop    edi
c0014467:	5d                   	pop    ebp
c0014468:	c3                   	ret    
c0014469:	83 ec 08             	sub    esp,0x8
c001446c:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0014471:	c1 ee 0c             	shr    esi,0xc
c0014474:	50                   	push   eax
c0014475:	68 b0 4b 02 c0       	push   0xc0024bb0
c001447a:	e8 e5 2a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001447f:	e8 9e bd ff ff       	call   c0010222 <Phys::allocatePage()>
c0014484:	8b 0d 30 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa30
c001448a:	89 c7                	mov    edi,eax
c001448c:	58                   	pop    eax
c001448d:	5a                   	pop    edx
c001448e:	51                   	push   ecx
c001448f:	68 d4 4b 02 c0       	push   0xc0024bd4
c0014494:	e8 cb 2a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014499:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001449c:	83 c4 10             	add    esp,0x10
c001449f:	81 e2 ff 0f 00 00    	and    edx,0xfff
c00144a5:	09 fa                	or     edx,edi
c00144a7:	81 ca 01 08 00 00    	or     edx,0x801
c00144ad:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c00144b0:	8b 3d 4c 70 02 c0    	mov    edi,DWORD PTR ds:0xc002704c
c00144b6:	85 ff                	test   edi,edi
c00144b8:	7e 65                	jle    c001451f <VAS::tryLoadBackOffDisk(unsigned long)+0x285>
c00144ba:	89 dd                	mov    ebp,ebx
c00144bc:	31 ff                	xor    edi,edi
c00144be:	83 ec 08             	sub    esp,0x8
c00144c1:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00144c6:	50                   	push   eax
c00144c7:	68 88 4c 02 c0       	push   0xc0024c88
c00144cc:	e8 93 2a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00144d1:	89 34 24             	mov    DWORD PTR [esp],esi
c00144d4:	e8 3c f1 ff ff       	call   c0013615 <Virt::swapIDToSector(unsigned long)>
c00144d9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00144dc:	01 f8                	add    eax,edi
c00144de:	6a 01                	push   0x1
c00144e0:	31 d2                	xor    edx,edx
c00144e2:	83 c7 01             	add    edi,0x1
c00144e5:	52                   	push   edx
c00144e6:	81 c5 00 02 00 00    	add    ebp,0x200
c00144ec:	50                   	push   eax
c00144ed:	0f be 05 58 70 02 c0 	movsx  eax,BYTE PTR ds:0xc0027058
c00144f4:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c00144fb:	50                   	push   eax
c00144fc:	e8 83 65 ff ff       	call   c000aa84 <LogicalDisk::read(unsigned long long, int, void*)>
c0014501:	83 c4 18             	add    esp,0x18
c0014504:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0014509:	50                   	push   eax
c001450a:	68 ac 4c 02 c0       	push   0xc0024cac
c001450f:	e8 50 2a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014514:	83 c4 10             	add    esp,0x10
c0014517:	39 3d 4c 70 02 c0    	cmp    DWORD PTR ds:0xc002704c,edi
c001451d:	7f 9f                	jg     c00144be <VAS::tryLoadBackOffDisk(unsigned long)+0x224>
c001451f:	83 ec 08             	sub    esp,0x8
c0014522:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0014527:	50                   	push   eax
c0014528:	68 f8 4b 02 c0       	push   0xc0024bf8
c001452d:	e8 32 2a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014532:	83 c4 0c             	add    esp,0xc
c0014535:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c001453a:	83 e8 01             	sub    eax,0x1
c001453d:	50                   	push   eax
c001453e:	a3 48 f2 02 c0       	mov    ds:0xc002f248,eax
c0014543:	53                   	push   ebx
c0014544:	68 3f 4f 02 c0       	push   0xc0024f3f
c0014549:	e8 16 2a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001454e:	89 34 24             	mov    DWORD PTR [esp],esi
c0014551:	e8 9c f0 ff ff       	call   c00135f2 <Virt::freeSwapfilePage(unsigned long)>
c0014556:	58                   	pop    eax
c0014557:	8b 0d 30 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa30
c001455d:	5a                   	pop    edx
c001455e:	51                   	push   ecx
c001455f:	68 1c 4c 02 c0       	push   0xc0024c1c
c0014564:	e8 fb 29 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014569:	0f 20 d8             	mov    eax,cr3
c001456c:	0f 22 d8             	mov    cr3,eax
c001456f:	c7 04 24 54 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f54
c0014576:	e8 e9 29 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001457b:	5b                   	pop    ebx
c001457c:	8b 3d 0c fa 02 c0    	mov    edi,DWORD PTR ds:0xc002fa0c
c0014582:	5e                   	pop    esi
c0014583:	57                   	push   edi
c0014584:	68 40 4c 02 c0       	push   0xc0024c40
c0014589:	e8 d6 29 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001458e:	5d                   	pop    ebp
c001458f:	58                   	pop    eax
c0014590:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0014595:	50                   	push   eax
c0014596:	68 64 4c 02 c0       	push   0xc0024c64
c001459b:	e8 c4 29 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00145a0:	83 c4 10             	add    esp,0x10
c00145a3:	b0 01                	mov    al,0x1
c00145a5:	e9 b1 fd ff ff       	jmp    c001435b <VAS::tryLoadBackOffDisk(unsigned long)+0xc1>

c00145aa <VAS::lockPage(unsigned long)>:
c00145aa:	56                   	push   esi
c00145ab:	53                   	push   ebx
c00145ac:	83 ec 04             	sub    esp,0x4
c00145af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00145b7:	50                   	push   eax
c00145b8:	56                   	push   esi
c00145b9:	e8 f8 f1 ff ff       	call   c00137b6 <VAS::getPageTableEntry(unsigned long)>
c00145be:	5a                   	pop    edx
c00145bf:	89 c3                	mov    ebx,eax
c00145c1:	59                   	pop    ecx
c00145c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00145c4:	a8 01                	test   al,0x1
c00145c6:	74 10                	je     c00145d8 <VAS::lockPage(unsigned long)+0x2e>
c00145c8:	f6 c4 08             	test   ah,0x8
c00145cb:	74 28                	je     c00145f5 <VAS::lockPage(unsigned long)+0x4b>
c00145cd:	80 e4 f7             	and    ah,0xf7
c00145d0:	89 03                	mov    DWORD PTR [ebx],eax
c00145d2:	83 c4 04             	add    esp,0x4
c00145d5:	5b                   	pop    ebx
c00145d6:	5e                   	pop    esi
c00145d7:	c3                   	ret    
c00145d8:	83 ec 08             	sub    esp,0x8
c00145db:	25 00 f0 ff ff       	and    eax,0xfffff000
c00145e0:	50                   	push   eax
c00145e1:	56                   	push   esi
c00145e2:	e8 b3 fc ff ff       	call   c001429a <VAS::tryLoadBackOffDisk(unsigned long)>
c00145e7:	83 c4 10             	add    esp,0x10
c00145ea:	84 c0                	test   al,al
c00145ec:	74 19                	je     c0014607 <VAS::lockPage(unsigned long)+0x5d>
c00145ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145f0:	f6 c4 08             	test   ah,0x8
c00145f3:	75 d8                	jne    c00145cd <VAS::lockPage(unsigned long)+0x23>
c00145f5:	c7 44 24 10 58 4a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024a58
c00145fd:	83 c4 04             	add    esp,0x4
c0014600:	5b                   	pop    ebx
c0014601:	5e                   	pop    esi
c0014602:	e9 27 ba ff ff       	jmp    c001002e <KePanic(char const*)>
c0014607:	83 ec 0c             	sub    esp,0xc
c001460a:	68 18 4d 02 c0       	push   0xc0024d18
c001460f:	e8 1a ba ff ff       	call   c001002e <KePanic(char const*)>
c0014614:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014616:	83 c4 10             	add    esp,0x10
c0014619:	eb ad                	jmp    c00145c8 <VAS::lockPage(unsigned long)+0x1e>
c001461b:	90                   	nop

c001461c <VAS::lockPages(unsigned long, int)>:
c001461c:	55                   	push   ebp
c001461d:	57                   	push   edi
c001461e:	56                   	push   esi
c001461f:	53                   	push   ebx
c0014620:	83 ec 0c             	sub    esp,0xc
c0014623:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014627:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001462b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001462f:	85 ff                	test   edi,edi
c0014631:	7e 1c                	jle    c001464f <VAS::lockPages(unsigned long, int)+0x33>
c0014633:	31 f6                	xor    esi,esi
c0014635:	83 ec 08             	sub    esp,0x8
c0014638:	83 c6 01             	add    esi,0x1
c001463b:	53                   	push   ebx
c001463c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014642:	55                   	push   ebp
c0014643:	e8 62 ff ff ff       	call   c00145aa <VAS::lockPage(unsigned long)>
c0014648:	83 c4 10             	add    esp,0x10
c001464b:	39 f7                	cmp    edi,esi
c001464d:	75 e6                	jne    c0014635 <VAS::lockPages(unsigned long, int)+0x19>
c001464f:	83 c4 0c             	add    esp,0xc
c0014652:	5b                   	pop    ebx
c0014653:	5e                   	pop    esi
c0014654:	5f                   	pop    edi
c0014655:	5d                   	pop    ebp
c0014656:	c3                   	ret    
c0014657:	90                   	nop

c0014658 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0014658:	55                   	push   ebp
c0014659:	57                   	push   edi
c001465a:	56                   	push   esi
c001465b:	53                   	push   ebx
c001465c:	83 ec 28             	sub    esp,0x28
c001465f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0014663:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014667:	50                   	push   eax
c0014668:	e8 60 ee ff ff       	call   c00134cd <Virt::allocateKernelVirtualPages(int)>
c001466d:	83 c4 0c             	add    esp,0xc
c0014670:	89 c5                	mov    ebp,eax
c0014672:	6a 07                	push   0x7
c0014674:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014678:	52                   	push   edx
c0014679:	56                   	push   esi
c001467a:	e8 35 f6 ff ff       	call   c0013cb4 <VAS::allocatePages(int, int)>
c001467f:	83 c4 10             	add    esp,0x10
c0014682:	89 c7                	mov    edi,eax
c0014684:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014688:	85 c9                	test   ecx,ecx
c001468a:	74 2f                	je     c00146bb <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c001468c:	31 db                	xor    ebx,ebx
c001468e:	e8 8f bb ff ff       	call   c0010222 <Phys::allocatePage()>
c0014693:	83 c3 01             	add    ebx,0x1
c0014696:	6a 03                	push   0x3
c0014698:	55                   	push   ebp
c0014699:	50                   	push   eax
c001469a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001469e:	56                   	push   esi
c001469f:	e8 0c f5 ff ff       	call   c0013bb0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00146a4:	6a 07                	push   0x7
c00146a6:	57                   	push   edi
c00146a7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00146ab:	50                   	push   eax
c00146ac:	56                   	push   esi
c00146ad:	e8 fe f4 ff ff       	call   c0013bb0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00146b2:	83 c4 20             	add    esp,0x20
c00146b5:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c00146b9:	75 d3                	jne    c001468e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c00146bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00146bf:	89 28                	mov    DWORD PTR [eax],ebp
c00146c1:	83 c4 1c             	add    esp,0x1c
c00146c4:	89 f8                	mov    eax,edi
c00146c6:	5b                   	pop    ebx
c00146c7:	5e                   	pop    esi
c00146c8:	5f                   	pop    edi
c00146c9:	5d                   	pop    ebp
c00146ca:	c3                   	ret    
c00146cb:	90                   	nop

c00146cc <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c00146cc:	53                   	push   ebx
c00146cd:	83 ec 14             	sub    esp,0x14
c00146d0:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00146d4:	68 48 4d 02 c0       	push   0xc0024d48
c00146d9:	e8 86 28 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00146de:	c7 04 24 a8 4d 02 c0 	mov    DWORD PTR [esp],0xc0024da8
c00146e5:	e8 7a 28 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00146ea:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00146ee:	83 c4 18             	add    esp,0x18
c00146f1:	5b                   	pop    ebx
c00146f2:	e9 de f0 ff ff       	jmp    c00137d5 <Virt::freeKernelVirtualPages(unsigned long)>
c00146f7:	90                   	nop

c00146f8 <VAS::scanForEviction()>:
c00146f8:	57                   	push   edi
c00146f9:	56                   	push   esi
c00146fa:	31 f6                	xor    esi,esi
c00146fc:	53                   	push   ebx
c00146fd:	83 ec 18             	sub    esp,0x18
c0014700:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014704:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0014709:	50                   	push   eax
c001470a:	68 24 4e 02 c0       	push   0xc0024e24
c001470f:	e8 50 28 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014714:	c7 04 24 5b 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f5b
c001471b:	e8 44 28 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014720:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0014723:	83 c4 10             	add    esp,0x10
c0014726:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001472c:	75 0e                	jne    c001473c <VAS::scanForEviction()+0x44>
c001472e:	89 da                	mov    edx,ebx
c0014730:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0014733:	c1 ea 16             	shr    edx,0x16
c0014736:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001473a:	74 5b                	je     c0014797 <VAS::scanForEviction()+0x9f>
c001473c:	83 ec 08             	sub    esp,0x8
c001473f:	53                   	push   ebx
c0014740:	57                   	push   edi
c0014741:	e8 70 f0 ff ff       	call   c00137b6 <VAS::getPageTableEntry(unsigned long)>
c0014746:	83 c4 10             	add    esp,0x10
c0014749:	8b 10                	mov    edx,DWORD PTR [eax]
c001474b:	89 d1                	mov    ecx,edx
c001474d:	c1 e9 0c             	shr    ecx,0xc
c0014750:	74 10                	je     c0014762 <VAS::scanForEviction()+0x6a>
c0014752:	89 d1                	mov    ecx,edx
c0014754:	81 e1 01 08 00 00    	and    ecx,0x801
c001475a:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0014760:	74 40                	je     c00147a2 <VAS::scanForEviction()+0xaa>
c0014762:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014768:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c001476e:	76 2d                	jbe    c001479d <VAS::scanForEviction()+0xa5>
c0014770:	83 c6 01             	add    esi,0x1
c0014773:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c001477a:	83 fe 03             	cmp    esi,0x3
c001477d:	74 32                	je     c00147b1 <VAS::scanForEviction()+0xb9>
c001477f:	31 db                	xor    ebx,ebx
c0014781:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014787:	75 b3                	jne    c001473c <VAS::scanForEviction()+0x44>
c0014789:	89 da                	mov    edx,ebx
c001478b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001478e:	c1 ea 16             	shr    edx,0x16
c0014791:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014795:	75 a5                	jne    c001473c <VAS::scanForEviction()+0x44>
c0014797:	81 c3 00 00 40 00    	add    ebx,0x400000
c001479d:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c00147a0:	eb 84                	jmp    c0014726 <VAS::scanForEviction()+0x2e>
c00147a2:	f6 c2 20             	test   dl,0x20
c00147a5:	74 13                	je     c00147ba <VAS::scanForEviction()+0xc2>
c00147a7:	83 e2 df             	and    edx,0xffffffdf
c00147aa:	89 10                	mov    DWORD PTR [eax],edx
c00147ac:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00147af:	eb b1                	jmp    c0014762 <VAS::scanForEviction()+0x6a>
c00147b1:	83 c4 10             	add    esp,0x10
c00147b4:	31 c0                	xor    eax,eax
c00147b6:	5b                   	pop    ebx
c00147b7:	5e                   	pop    esi
c00147b8:	5f                   	pop    edi
c00147b9:	c3                   	ret    
c00147ba:	83 ec 08             	sub    esp,0x8
c00147bd:	89 d0                	mov    eax,edx
c00147bf:	25 00 f0 ff ff       	and    eax,0xfffff000
c00147c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00147c8:	53                   	push   ebx
c00147c9:	68 77 4f 02 c0       	push   0xc0024f77
c00147ce:	e8 91 27 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00147d3:	58                   	pop    eax
c00147d4:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00147d7:	5a                   	pop    edx
c00147d8:	51                   	push   ecx
c00147d9:	57                   	push   edi
c00147da:	e8 f1 f8 ff ff       	call   c00140d0 <VAS::evict(unsigned long)>
c00147df:	5b                   	pop    ebx
c00147e0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00147e3:	5e                   	pop    esi
c00147e4:	50                   	push   eax
c00147e5:	68 8b 4f 02 c0       	push   0xc0024f8b
c00147ea:	e8 75 27 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00147ef:	58                   	pop    eax
c00147f0:	5a                   	pop    edx
c00147f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147f5:	50                   	push   eax
c00147f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00147fa:	68 9e 4f 02 c0       	push   0xc0024f9e
c00147ff:	e8 60 27 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014804:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0014807:	81 c1 00 10 00 00    	add    ecx,0x1000
c001480d:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0014810:	8b 3d 30 fa 02 c0    	mov    edi,DWORD PTR ds:0xc002fa30
c0014816:	5b                   	pop    ebx
c0014817:	5e                   	pop    esi
c0014818:	57                   	push   edi
c0014819:	68 44 4e 02 c0       	push   0xc0024e44
c001481e:	e8 41 27 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014823:	83 c4 10             	add    esp,0x10
c0014826:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001482a:	83 c4 10             	add    esp,0x10
c001482d:	5b                   	pop    ebx
c001482e:	5e                   	pop    esi
c001482f:	5f                   	pop    edi
c0014830:	c3                   	ret    

c0014831 <mapVASFirstTime>:
c0014831:	55                   	push   ebp
c0014832:	57                   	push   edi
c0014833:	56                   	push   esi
c0014834:	53                   	push   ebx
c0014835:	83 ec 0c             	sub    esp,0xc
c0014838:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001483d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014840:	83 fa 01             	cmp    edx,0x1
c0014843:	0f 84 cb 00 00 00    	je     c0014914 <mapVASFirstTime+0xe3>
c0014849:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001484c:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001484f:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0014854:	c1 e5 15             	shl    ebp,0x15
c0014857:	bf 00 90 e7 01       	mov    edi,0x1e79000
c001485c:	8b b2 b2 05 00 00    	mov    esi,DWORD PTR [edx+0x5b2]
c0014862:	29 eb                	sub    ebx,ebp
c0014864:	29 ef                	sub    edi,ebp
c0014866:	e8 b7 b9 ff ff       	call   c0010222 <Phys::allocatePage()>
c001486b:	83 ec 0c             	sub    esp,0xc
c001486e:	68 03 04 00 00       	push   0x403
c0014873:	6a 01                	push   0x1
c0014875:	53                   	push   ebx
c0014876:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001487c:	50                   	push   eax
c001487d:	56                   	push   esi
c001487e:	e8 17 f5 ff ff       	call   c0013d9a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014883:	83 c4 20             	add    esp,0x20
c0014886:	39 fb                	cmp    ebx,edi
c0014888:	75 dc                	jne    c0014866 <mapVASFirstTime+0x35>
c001488a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c001488f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0014894:	29 eb                	sub    ebx,ebp
c0014896:	29 ef                	sub    edi,ebp
c0014898:	e8 85 b9 ff ff       	call   c0010222 <Phys::allocatePage()>
c001489d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c00148a1:	83 fa 01             	cmp    edx,0x1
c00148a4:	19 d2                	sbb    edx,edx
c00148a6:	83 ec 0c             	sub    esp,0xc
c00148a9:	83 e2 04             	and    edx,0x4
c00148ac:	81 c2 03 04 00 00    	add    edx,0x403
c00148b2:	52                   	push   edx
c00148b3:	6a 01                	push   0x1
c00148b5:	53                   	push   ebx
c00148b6:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00148bc:	50                   	push   eax
c00148bd:	56                   	push   esi
c00148be:	e8 d7 f4 ff ff       	call   c0013d9a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00148c3:	83 c4 20             	add    esp,0x20
c00148c6:	39 df                	cmp    edi,ebx
c00148c8:	75 ce                	jne    c0014898 <mapVASFirstTime+0x67>
c00148ca:	83 ec 0c             	sub    esp,0xc
c00148cd:	bb 7c 90 02 c0       	mov    ebx,0xc002907c
c00148d2:	6a 04                	push   0x4
c00148d4:	81 eb 00 80 02 c0    	sub    ebx,0xc0028000
c00148da:	6a ff                	push   0xffffffff
c00148dc:	c1 eb 0c             	shr    ebx,0xc
c00148df:	53                   	push   ebx
c00148e0:	68 00 80 02 c0       	push   0xc0028000
c00148e5:	56                   	push   esi
c00148e6:	e8 65 f0 ff ff       	call   c0013950 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00148eb:	83 c4 14             	add    esp,0x14
c00148ee:	a1 50 f2 02 c0       	mov    eax,ds:0xc002f250
c00148f3:	6a 04                	push   0x4
c00148f5:	6a ff                	push   0xffffffff
c00148f7:	53                   	push   ebx
c00148f8:	68 00 80 02 c0       	push   0xc0028000
c00148fd:	50                   	push   eax
c00148fe:	e8 4d f0 ff ff       	call   c0013950 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0014903:	0f 20 d8             	mov    eax,cr3
c0014906:	0f 22 d8             	mov    cr3,eax
c0014909:	83 c4 20             	add    esp,0x20
c001490c:	83 c4 0c             	add    esp,0xc
c001490f:	5b                   	pop    ebx
c0014910:	5e                   	pop    esi
c0014911:	5f                   	pop    edi
c0014912:	5d                   	pop    ebp
c0014913:	c3                   	ret    
c0014914:	83 ec 0c             	sub    esp,0xc
c0014917:	68 ab 4f 02 c0       	push   0xc0024fab
c001491c:	e8 43 26 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014921:	83 c4 10             	add    esp,0x10
c0014924:	83 c4 0c             	add    esp,0xc
c0014927:	5b                   	pop    ebx
c0014928:	5e                   	pop    esi
c0014929:	5f                   	pop    edi
c001492a:	5d                   	pop    ebp
c001492b:	c3                   	ret    

c001492c <SysAlarm(regs*)>:
c001492c:	53                   	push   ebx
c001492d:	83 ec 10             	sub    esp,0x10
c0014930:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014934:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014937:	68 c4 4f 02 c0       	push   0xc0024fc4
c001493c:	e8 23 26 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014941:	83 c4 0c             	add    esp,0xc
c0014944:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014947:	31 d2                	xor    edx,edx
c0014949:	52                   	push   edx
c001494a:	50                   	push   eax
c001494b:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0014951:	e8 ca 09 00 00       	call   c0015320 <KeAlarm(ThreadControlBlock*, unsigned long long)>
c0014956:	83 c4 18             	add    esp,0x18
c0014959:	5b                   	pop    ebx
c001495a:	c3                   	ret    

c001495b <SysEject(regs*)>:
c001495b:	83 ec 0c             	sub    esp,0xc
c001495e:	83 ca ff             	or     edx,0xffffffff
c0014961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014965:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014968:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001496d:	83 e9 41             	sub    ecx,0x41
c0014970:	83 f9 19             	cmp    ecx,0x19
c0014973:	77 18                	ja     c001498d <SysEject(regs*)+0x32>
c0014975:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c001497c:	85 c9                	test   ecx,ecx
c001497e:	74 0d                	je     c001498d <SysEject(regs*)+0x32>
c0014980:	83 ec 0c             	sub    esp,0xc
c0014983:	51                   	push   ecx
c0014984:	e8 91 60 ff ff       	call   c000aa1a <LogicalDisk::eject()>
c0014989:	83 c4 10             	add    esp,0x10
c001498c:	99                   	cdq    
c001498d:	83 c4 0c             	add    esp,0xc
c0014990:	c3                   	ret    

c0014991 <SysExit(regs*)>:
c0014991:	83 ec 18             	sub    esp,0x18
c0014994:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014998:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001499b:	e8 a0 30 00 00       	call   c0017a40 <terminateTask(int)>
c00149a0:	83 c8 ff             	or     eax,0xffffffff
c00149a3:	83 c4 1c             	add    esp,0x1c
c00149a6:	89 c2                	mov    edx,eax
c00149a8:	c3                   	ret    

c00149a9 <SysGetCwd(regs*)>:
c00149a9:	83 ec 10             	sub    esp,0x10
c00149ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00149b0:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00149b3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00149b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149bb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00149be:	e8 37 34 ff ff       	call   c0007dfa <Fs::getcwd(Process*, char*, int)>
c00149c3:	83 c4 1c             	add    esp,0x1c
c00149c6:	99                   	cdq    
c00149c7:	c3                   	ret    

c00149c8 <SysGetPID(regs*)>:
c00149c8:	83 ec 14             	sub    esp,0x14
c00149cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149d0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00149d3:	ff 30                	push   DWORD PTR [eax]
c00149d5:	68 d9 4f 02 c0       	push   0xc0024fd9
c00149da:	e8 85 25 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00149df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149e4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00149e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00149e9:	83 c4 1c             	add    esp,0x1c
c00149ec:	99                   	cdq    
c00149ed:	c3                   	ret    

c00149ee <SysGetRAMData(regs*)>:
c00149ee:	8b 0d 40 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f140
c00149f4:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c00149f9:	03 05 3c f1 02 c0    	add    eax,DWORD PTR ds:0xc002f13c
c00149ff:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c0014a05:	99                   	cdq    
c0014a06:	f7 f9                	idiv   ecx
c0014a08:	c1 e0 18             	shl    eax,0x18
c0014a0b:	09 c8                	or     eax,ecx
c0014a0d:	99                   	cdq    
c0014a0e:	c3                   	ret    

c0014a0f <SysGetVGAPtr(regs*)>:
c0014a0f:	55                   	push   ebp
c0014a10:	57                   	push   edi
c0014a11:	56                   	push   esi
c0014a12:	53                   	push   ebx
c0014a13:	83 ec 1c             	sub    esp,0x1c
c0014a16:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014a1a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0014a1d:	83 f8 ff             	cmp    eax,0xffffffff
c0014a20:	74 23                	je     c0014a45 <SysGetVGAPtr(regs*)+0x36>
c0014a22:	83 ec 0c             	sub    esp,0xc
c0014a25:	50                   	push   eax
c0014a26:	e8 c1 2a 00 00       	call   c00174ec <Thr::processFromPID(int)>
c0014a2b:	31 d2                	xor    edx,edx
c0014a2d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014a31:	83 c4 10             	add    esp,0x10
c0014a34:	b8 01 00 00 00       	mov    eax,0x1
c0014a39:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014a3e:	75 11                	jne    c0014a51 <SysGetVGAPtr(regs*)+0x42>
c0014a40:	e9 95 00 00 00       	jmp    c0014ada <SysGetVGAPtr(regs*)+0xcb>
c0014a45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a4a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014a51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a55:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0014a59:	8b a8 a6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5a6]
c0014a5f:	74 0c                	je     c0014a6d <SysGetVGAPtr(regs*)+0x5e>
c0014a61:	83 ec 0c             	sub    esp,0xc
c0014a64:	55                   	push   ebp
c0014a65:	e8 df da ff ff       	call   c0012549 <setActiveTerminal(VgaText*)>
c0014a6a:	83 c4 10             	add    esp,0x10
c0014a6d:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0014a70:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0014a73:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0014a78:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014a7a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0014a7d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014a80:	89 88 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],ecx
c0014a86:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0014a89:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014a8c:	89 88 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],ecx
c0014a92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a96:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0014a99:	0f b6 80 76 02 00 00 	movzx  eax,BYTE PTR [eax+0x276]
c0014aa0:	c1 e8 07             	shr    eax,0x7
c0014aa3:	89 81 a8 0f 00 00    	mov    DWORD PTR [ecx+0xfa8],eax
c0014aa9:	50                   	push   eax
c0014aaa:	50                   	push   eax
c0014aab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014aae:	ff b0 a8 0f 00 00    	push   DWORD PTR [eax+0xfa8]
c0014ab4:	68 e8 4f 02 c0       	push   0xc0024fe8
c0014ab9:	e8 a6 24 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014abe:	5a                   	pop    edx
c0014abf:	59                   	pop    ecx
c0014ac0:	68 f1 4f 02 c0       	push   0xc0024ff1
c0014ac5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014ac8:	05 ac 0f 00 00       	add    eax,0xfac
c0014acd:	50                   	push   eax
c0014ace:	e8 6d bb fe ff       	call   c0000640 <strcpy>
c0014ad3:	83 c4 10             	add    esp,0x10
c0014ad6:	31 c0                	xor    eax,eax
c0014ad8:	31 d2                	xor    edx,edx
c0014ada:	83 c4 1c             	add    esp,0x1c
c0014add:	5b                   	pop    ebx
c0014ade:	5e                   	pop    esi
c0014adf:	5f                   	pop    edi
c0014ae0:	5d                   	pop    ebp
c0014ae1:	c3                   	ret    
c0014ae2:	66 90                	xchg   ax,ax

c0014ae4 <SysKill(regs*)>:
c0014ae4:	53                   	push   ebx
c0014ae5:	83 ec 08             	sub    esp,0x8
c0014ae8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014aec:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0014af0:	75 16                	jne    c0014b08 <SysKill(regs*)+0x24>
c0014af2:	83 ec 0c             	sub    esp,0xc
c0014af5:	68 fb 4f 02 c0       	push   0xc0024ffb
c0014afa:	e8 2f b5 ff ff       	call   c001002e <KePanic(char const*)>
c0014aff:	83 c4 10             	add    esp,0x10
c0014b02:	e9 89 00 00 00       	jmp    c0014b90 <SysKill(regs*)+0xac>
c0014b07:	90                   	nop
c0014b08:	83 ec 0c             	sub    esp,0xc
c0014b0b:	68 4c fa 02 c0       	push   0xc002fa4c
c0014b10:	e8 43 d5 00 00       	call   c0022058 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014b15:	8d 76 00             	lea    esi,[esi+0x0]
c0014b18:	83 c4 10             	add    esp,0x10
c0014b1b:	85 c0                	test   eax,eax
c0014b1d:	74 19                	je     c0014b38 <SysKill(regs*)+0x54>
c0014b1f:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014b22:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014b25:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014b27:	74 33                	je     c0014b5c <SysKill(regs*)+0x78>
c0014b29:	52                   	push   edx
c0014b2a:	52                   	push   edx
c0014b2b:	50                   	push   eax
c0014b2c:	68 4c fa 02 c0       	push   0xc002fa4c
c0014b31:	e8 2e da 00 00       	call   c0022564 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014b36:	eb e0                	jmp    c0014b18 <SysKill(regs*)+0x34>
c0014b38:	83 ec 0c             	sub    esp,0xc
c0014b3b:	68 40 fa 02 c0       	push   0xc002fa40
c0014b40:	e8 13 d5 00 00       	call   c0022058 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014b45:	8d 76 00             	lea    esi,[esi+0x0]
c0014b48:	83 c4 10             	add    esp,0x10
c0014b4b:	85 c0                	test   eax,eax
c0014b4d:	74 41                	je     c0014b90 <SysKill(regs*)+0xac>
c0014b4f:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014b52:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014b55:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014b57:	75 27                	jne    c0014b80 <SysKill(regs*)+0x9c>
c0014b59:	8d 76 00             	lea    esi,[esi+0x0]
c0014b5c:	51                   	push   ecx
c0014b5d:	51                   	push   ecx
c0014b5e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014b61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b66:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014b69:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0014b6f:	e8 37 c6 ff ff       	call   c00111ab <KeRaiseSignal(SigHandlerBlock*, int)>
c0014b74:	83 c4 10             	add    esp,0x10
c0014b77:	31 c0                	xor    eax,eax
c0014b79:	31 d2                	xor    edx,edx
c0014b7b:	eb 1b                	jmp    c0014b98 <SysKill(regs*)+0xb4>
c0014b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0014b80:	52                   	push   edx
c0014b81:	52                   	push   edx
c0014b82:	50                   	push   eax
c0014b83:	68 40 fa 02 c0       	push   0xc002fa40
c0014b88:	e8 d7 d9 00 00       	call   c0022564 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014b8d:	eb b9                	jmp    c0014b48 <SysKill(regs*)+0x64>
c0014b8f:	90                   	nop
c0014b90:	83 c8 ff             	or     eax,0xffffffff
c0014b93:	89 c2                	mov    edx,eax
c0014b95:	8d 76 00             	lea    esi,[esi+0x0]
c0014b98:	83 c4 08             	add    esp,0x8
c0014b9b:	5b                   	pop    ebx
c0014b9c:	c3                   	ret    

c0014b9d <SysLoadDLL(regs*)>:
c0014b9d:	56                   	push   esi
c0014b9e:	53                   	push   ebx
c0014b9f:	31 d2                	xor    edx,edx
c0014ba1:	51                   	push   ecx
c0014ba2:	b8 01 00 00 00       	mov    eax,0x1
c0014ba7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014bab:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0014baf:	0f 84 8c 00 00 00    	je     c0014c41 <SysLoadDLL(regs*)+0xa4>
c0014bb5:	83 ec 0c             	sub    esp,0xc
c0014bb8:	68 14 01 00 00       	push   0x114
c0014bbd:	e8 25 b1 ff ff       	call   c000fce7 <malloc>
c0014bc2:	83 c4 0c             	add    esp,0xc
c0014bc5:	89 c3                	mov    ebx,eax
c0014bc7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014bcc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014bcf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014bd2:	53                   	push   ebx
c0014bd3:	e8 8e 35 ff ff       	call   c0008166 <File::File(char const*, Process*)>
c0014bd8:	83 c4 10             	add    esp,0x10
c0014bdb:	31 d2                	xor    edx,edx
c0014bdd:	b8 02 00 00 00       	mov    eax,0x2
c0014be2:	85 db                	test   ebx,ebx
c0014be4:	74 5b                	je     c0014c41 <SysLoadDLL(regs*)+0xa4>
c0014be6:	83 ec 0c             	sub    esp,0xc
c0014be9:	53                   	push   ebx
c0014bea:	e8 59 38 ff ff       	call   c0008448 <File::exists()>
c0014bef:	83 c4 10             	add    esp,0x10
c0014bf2:	84 c0                	test   al,al
c0014bf4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014bf6:	75 11                	jne    c0014c09 <SysLoadDLL(regs*)+0x6c>
c0014bf8:	83 ec 0c             	sub    esp,0xc
c0014bfb:	53                   	push   ebx
c0014bfc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014bff:	83 c4 10             	add    esp,0x10
c0014c02:	b8 03 00 00 00       	mov    eax,0x3
c0014c07:	eb 36                	jmp    c0014c3f <SysLoadDLL(regs*)+0xa2>
c0014c09:	83 ec 0c             	sub    esp,0xc
c0014c0c:	53                   	push   ebx
c0014c0d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014c10:	58                   	pop    eax
c0014c11:	5a                   	pop    edx
c0014c12:	6a 00                	push   0x0
c0014c14:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014c17:	e8 7c 1a 00 00       	call   c0016698 <Thr::loadDLL(char const*, bool)>
c0014c1c:	83 c4 10             	add    esp,0x10
c0014c1f:	89 c1                	mov    ecx,eax
c0014c21:	31 d2                	xor    edx,edx
c0014c23:	b8 04 00 00 00       	mov    eax,0x4
c0014c28:	85 c9                	test   ecx,ecx
c0014c2a:	74 15                	je     c0014c41 <SysLoadDLL(regs*)+0xa4>
c0014c2c:	53                   	push   ebx
c0014c2d:	53                   	push   ebx
c0014c2e:	ff 35 d0 d0 02 c0    	push   DWORD PTR ds:0xc002d0d0
c0014c34:	51                   	push   ecx
c0014c35:	e8 b0 1c 00 00       	call   c00168ea <Thr::executeDLL(unsigned long, void*)>
c0014c3a:	83 c4 10             	add    esp,0x10
c0014c3d:	31 c0                	xor    eax,eax
c0014c3f:	31 d2                	xor    edx,edx
c0014c41:	59                   	pop    ecx
c0014c42:	5b                   	pop    ebx
c0014c43:	5e                   	pop    esi
c0014c44:	c3                   	ret    

c0014c45 <SysPause(regs*)>:
c0014c45:	83 ec 18             	sub    esp,0x18
c0014c48:	6a 08                	push   0x8
c0014c4a:	e8 b1 26 00 00       	call   c0017300 <blockTask(TaskState)>
c0014c4f:	31 c0                	xor    eax,eax
c0014c51:	31 d2                	xor    edx,edx
c0014c53:	83 c4 1c             	add    esp,0x1c
c0014c56:	c3                   	ret    

c0014c57 <SysPthreadCreate(regs*)>:
c0014c57:	83 ec 18             	sub    esp,0x18
c0014c5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c5f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014c62:	e8 71 24 00 00       	call   c00170d8 <Process::createUserThread()>
c0014c67:	31 c0                	xor    eax,eax
c0014c69:	31 d2                	xor    edx,edx
c0014c6b:	83 c4 1c             	add    esp,0x1c
c0014c6e:	c3                   	ret    

c0014c6f <SysPthreadGetTID(regs*)>:
c0014c6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c74:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014c77:	99                   	cdq    
c0014c78:	c3                   	ret    

c0014c79 <SysInternalPthreadGetContext(regs*)>:
c0014c79:	31 c0                	xor    eax,eax
c0014c7b:	31 d2                	xor    edx,edx
c0014c7d:	c3                   	ret    

c0014c7e <SysInternalPthreadGetStartLocation(regs*)>:
c0014c7e:	31 c0                	xor    eax,eax
c0014c80:	31 d2                	xor    edx,edx
c0014c82:	c3                   	ret    

c0014c83 <SysPthreadJoin(regs*)>:
c0014c83:	31 c0                	xor    eax,eax
c0014c85:	31 d2                	xor    edx,edx
c0014c87:	c3                   	ret    

c0014c88 <SysPthreadExit(regs*)>:
c0014c88:	83 ec 18             	sub    esp,0x18
c0014c8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c8f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014c92:	e8 a9 2d 00 00       	call   c0017a40 <terminateTask(int)>
c0014c97:	83 c8 ff             	or     eax,0xffffffff
c0014c9a:	83 c4 1c             	add    esp,0x1c
c0014c9d:	89 c2                	mov    edx,eax
c0014c9f:	c3                   	ret    

c0014ca0 <SysRead(regs*)>:
c0014ca0:	57                   	push   edi
c0014ca1:	56                   	push   esi
c0014ca2:	53                   	push   ebx
c0014ca3:	83 ec 10             	sub    esp,0x10
c0014ca6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014caa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014cad:	83 f8 02             	cmp    eax,0x2
c0014cb0:	77 10                	ja     c0014cc2 <SysRead(regs*)+0x22>
c0014cb2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014cb7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014cba:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0014cc0:	eb 0e                	jmp    c0014cd0 <SysRead(regs*)+0x30>
c0014cc2:	83 ec 0c             	sub    esp,0xc
c0014cc5:	50                   	push   eax
c0014cc6:	e8 96 e6 ff ff       	call   c0013361 <KeGetFileFromDescriptor(int)>
c0014ccb:	83 c4 10             	add    esp,0x10
c0014cce:	89 c1                	mov    ecx,eax
c0014cd0:	83 c8 ff             	or     eax,0xffffffff
c0014cd3:	85 c9                	test   ecx,ecx
c0014cd5:	89 c2                	mov    edx,eax
c0014cd7:	74 28                	je     c0014d01 <SysRead(regs*)+0x61>
c0014cd9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014ce1:	31 ff                	xor    edi,edi
c0014ce3:	83 ec 0c             	sub    esp,0xc
c0014ce6:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014ce8:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014cec:	52                   	push   edx
c0014ced:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014cf0:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014cf3:	57                   	push   edi
c0014cf4:	56                   	push   esi
c0014cf5:	51                   	push   ecx
c0014cf6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014cf9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014cfd:	83 c4 20             	add    esp,0x20
c0014d00:	99                   	cdq    
c0014d01:	83 c4 10             	add    esp,0x10
c0014d04:	5b                   	pop    ebx
c0014d05:	5e                   	pop    esi
c0014d06:	5f                   	pop    edi
c0014d07:	c3                   	ret    

c0014d08 <SysRegisterSignal(regs*)>:
c0014d08:	83 ec 18             	sub    esp,0x18
c0014d0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d0f:	6a 00                	push   0x0
c0014d11:	6a 00                	push   0x0
c0014d13:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014d16:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014d19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d1e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014d21:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0014d27:	e8 49 c4 ff ff       	call   c0011175 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014d2c:	83 c4 2c             	add    esp,0x2c
c0014d2f:	99                   	cdq    
c0014d30:	c3                   	ret    

c0014d31 <SysRegistryGetTypeFromPath(regs*)>:
c0014d31:	53                   	push   ebx
c0014d32:	81 ec 40 01 00 00    	sub    esp,0x140
c0014d38:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014d3f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014d42:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014d45:	e8 66 92 ff ff       	call   c000dfb0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014d4a:	83 c4 10             	add    esp,0x10
c0014d4d:	89 c1                	mov    ecx,eax
c0014d4f:	85 c0                	test   eax,eax
c0014d51:	74 15                	je     c0014d68 <SysRegistryGetTypeFromPath(regs*)+0x37>
c0014d53:	50                   	push   eax
c0014d54:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014d58:	50                   	push   eax
c0014d59:	51                   	push   ecx
c0014d5a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014d5d:	e8 32 8e ff ff       	call   c000db94 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014d62:	83 c4 10             	add    esp,0x10
c0014d65:	99                   	cdq    
c0014d66:	eb 05                	jmp    c0014d6d <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0014d68:	83 c8 ff             	or     eax,0xffffffff
c0014d6b:	89 c2                	mov    edx,eax
c0014d6d:	81 c4 38 01 00 00    	add    esp,0x138
c0014d73:	5b                   	pop    ebx
c0014d74:	c3                   	ret    

c0014d75 <SysRegistryReadExtent(regs*)>:
c0014d75:	83 ec 1c             	sub    esp,0x1c
c0014d78:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014d7c:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014d7f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014d82:	85 c0                	test   eax,eax
c0014d84:	79 1f                	jns    c0014da5 <SysRegistryReadExtent(regs*)+0x30>
c0014d86:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014d8b:	52                   	push   edx
c0014d8c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014d90:	52                   	push   edx
c0014d91:	50                   	push   eax
c0014d92:	51                   	push   ecx
c0014d93:	e8 ee 8c ff ff       	call   c000da86 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014d98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d9c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014da0:	83 c4 10             	add    esp,0x10
c0014da3:	eb 14                	jmp    c0014db9 <SysRegistryReadExtent(regs*)+0x44>
c0014da5:	83 ec 04             	sub    esp,0x4
c0014da8:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014dab:	50                   	push   eax
c0014dac:	51                   	push   ecx
c0014dad:	e8 6e 87 ff ff       	call   c000d520 <CmGetString(Reghive_Tag*, int, char*)>
c0014db2:	83 c4 10             	add    esp,0x10
c0014db5:	31 c0                	xor    eax,eax
c0014db7:	31 d2                	xor    edx,edx
c0014db9:	83 c4 1c             	add    esp,0x1c
c0014dbc:	c3                   	ret    

c0014dbd <SysRegistryPathToExtentLookup(regs*)>:
c0014dbd:	83 ec 14             	sub    esp,0x14
c0014dc0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014dc4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014dc7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014dca:	e8 e1 91 ff ff       	call   c000dfb0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014dcf:	83 c4 1c             	add    esp,0x1c
c0014dd2:	99                   	cdq    
c0014dd3:	c3                   	ret    

c0014dd4 <SysRegistryEnterDirectory(regs*)>:
c0014dd4:	83 ec 14             	sub    esp,0x14
c0014dd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ddb:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014dde:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014de1:	e8 b1 87 ff ff       	call   c000d597 <CmEnterDirectory(Reghive_Tag*, int)>
c0014de6:	83 c4 1c             	add    esp,0x1c
c0014de9:	99                   	cdq    
c0014dea:	c3                   	ret    

c0014deb <SysRegistryGetNext(regs*)>:
c0014deb:	83 ec 14             	sub    esp,0x14
c0014dee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014df2:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014df5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014df8:	e8 d9 87 ff ff       	call   c000d5d6 <CmGetNext(Reghive_Tag*, int)>
c0014dfd:	83 c4 1c             	add    esp,0x1c
c0014e00:	99                   	cdq    
c0014e01:	c3                   	ret    

c0014e02 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0014e02:	57                   	push   edi
c0014e03:	56                   	push   esi
c0014e04:	53                   	push   ebx
c0014e05:	81 ec 34 01 00 00    	sub    esp,0x134
c0014e0b:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014e12:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014e16:	57                   	push   edi
c0014e17:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014e1a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014e1d:	e8 72 8d ff ff       	call   c000db94 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014e22:	89 c3                	mov    ebx,eax
c0014e24:	58                   	pop    eax
c0014e25:	5a                   	pop    edx
c0014e26:	57                   	push   edi
c0014e27:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014e2a:	e8 11 b8 fe ff       	call   c0000640 <strcpy>
c0014e2f:	89 d8                	mov    eax,ebx
c0014e31:	81 c4 40 01 00 00    	add    esp,0x140
c0014e37:	99                   	cdq    
c0014e38:	5b                   	pop    ebx
c0014e39:	5e                   	pop    esi
c0014e3a:	5f                   	pop    edi
c0014e3b:	c3                   	ret    

c0014e3c <SysRegistryOpen(regs*)>:
c0014e3c:	83 ec 18             	sub    esp,0x18
c0014e3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014e43:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014e46:	e8 65 85 ff ff       	call   c000d3b0 <CmOpen(char const*)>
c0014e4b:	83 c4 1c             	add    esp,0x1c
c0014e4e:	99                   	cdq    
c0014e4f:	c3                   	ret    

c0014e50 <SysRegistryClose(regs*)>:
c0014e50:	83 ec 18             	sub    esp,0x18
c0014e53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014e57:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014e5a:	e8 6f 86 ff ff       	call   c000d4ce <CmClose(Reghive_Tag*)>
c0014e5f:	31 c0                	xor    eax,eax
c0014e61:	31 d2                	xor    edx,edx
c0014e63:	83 c4 1c             	add    esp,0x1c
c0014e66:	c3                   	ret    

c0014e67 <SysRegistryEasyReadString(regs*)>:
c0014e67:	57                   	push   edi
c0014e68:	56                   	push   esi
c0014e69:	53                   	push   ebx
c0014e6a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014e6e:	83 ec 0c             	sub    esp,0xc
c0014e71:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014e74:	e8 37 85 ff ff       	call   c000d3b0 <CmOpen(char const*)>
c0014e79:	5a                   	pop    edx
c0014e7a:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014e7d:	59                   	pop    ecx
c0014e7e:	89 c3                	mov    ebx,eax
c0014e80:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014e83:	50                   	push   eax
c0014e84:	e8 27 91 ff ff       	call   c000dfb0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014e89:	83 c4 10             	add    esp,0x10
c0014e8c:	89 c1                	mov    ecx,eax
c0014e8e:	b8 01 00 00 00       	mov    eax,0x1
c0014e93:	85 c9                	test   ecx,ecx
c0014e95:	7e 16                	jle    c0014ead <SysRegistryEasyReadString(regs*)+0x46>
c0014e97:	50                   	push   eax
c0014e98:	57                   	push   edi
c0014e99:	51                   	push   ecx
c0014e9a:	53                   	push   ebx
c0014e9b:	e8 80 86 ff ff       	call   c000d520 <CmGetString(Reghive_Tag*, int, char*)>
c0014ea0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ea3:	e8 26 86 ff ff       	call   c000d4ce <CmClose(Reghive_Tag*)>
c0014ea8:	83 c4 10             	add    esp,0x10
c0014eab:	31 c0                	xor    eax,eax
c0014ead:	5b                   	pop    ebx
c0014eae:	31 d2                	xor    edx,edx
c0014eb0:	5e                   	pop    esi
c0014eb1:	5f                   	pop    edi
c0014eb2:	c3                   	ret    

c0014eb3 <SysRegistryEasyReadInteger(regs*)>:
c0014eb3:	56                   	push   esi
c0014eb4:	53                   	push   ebx
c0014eb5:	83 ec 10             	sub    esp,0x10
c0014eb8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014ebc:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014ebf:	e8 ec 84 ff ff       	call   c000d3b0 <CmOpen(char const*)>
c0014ec4:	5a                   	pop    edx
c0014ec5:	89 c3                	mov    ebx,eax
c0014ec7:	59                   	pop    ecx
c0014ec8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014ecb:	50                   	push   eax
c0014ecc:	e8 df 90 ff ff       	call   c000dfb0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014ed1:	83 c4 10             	add    esp,0x10
c0014ed4:	89 c1                	mov    ecx,eax
c0014ed6:	b8 01 00 00 00       	mov    eax,0x1
c0014edb:	85 c9                	test   ecx,ecx
c0014edd:	7e 18                	jle    c0014ef7 <SysRegistryEasyReadInteger(regs*)+0x44>
c0014edf:	50                   	push   eax
c0014ee0:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014ee3:	51                   	push   ecx
c0014ee4:	53                   	push   ebx
c0014ee5:	e8 9c 8b ff ff       	call   c000da86 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014eea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014eed:	e8 dc 85 ff ff       	call   c000d4ce <CmClose(Reghive_Tag*)>
c0014ef2:	83 c4 10             	add    esp,0x10
c0014ef5:	31 c0                	xor    eax,eax
c0014ef7:	59                   	pop    ecx
c0014ef8:	31 d2                	xor    edx,edx
c0014efa:	5b                   	pop    ebx
c0014efb:	5e                   	pop    esi
c0014efc:	c3                   	ret    

c0014efd <SysSbrk(regs*)>:
c0014efd:	56                   	push   esi
c0014efe:	53                   	push   ebx
c0014eff:	50                   	push   eax
c0014f00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f05:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014f09:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f0c:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014f0f:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c0014f15:	85 db                	test   ebx,ebx
c0014f17:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014f1a:	74 02                	je     c0014f1e <SysSbrk(regs*)+0x21>
c0014f1c:	79 06                	jns    c0014f24 <SysSbrk(regs*)+0x27>
c0014f1e:	89 f0                	mov    eax,esi
c0014f20:	31 d2                	xor    edx,edx
c0014f22:	eb 2a                	jmp    c0014f4e <SysSbrk(regs*)+0x51>
c0014f24:	83 c8 ff             	or     eax,0xffffffff
c0014f27:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014f2d:	89 c2                	mov    edx,eax
c0014f2f:	77 1d                	ja     c0014f4e <SysSbrk(regs*)+0x51>
c0014f31:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014f37:	50                   	push   eax
c0014f38:	c1 ea 0c             	shr    edx,0xc
c0014f3b:	68 07 0c 00 00       	push   0xc07
c0014f40:	52                   	push   edx
c0014f41:	51                   	push   ecx
c0014f42:	e8 6d ed ff ff       	call   c0013cb4 <VAS::allocatePages(int, int)>
c0014f47:	89 f0                	mov    eax,esi
c0014f49:	31 d2                	xor    edx,edx
c0014f4b:	83 c4 10             	add    esp,0x10
c0014f4e:	59                   	pop    ecx
c0014f4f:	5b                   	pop    ebx
c0014f50:	5e                   	pop    esi
c0014f51:	c3                   	ret    

c0014f52 <SysSetCwd(regs*)>:
c0014f52:	83 ec 14             	sub    esp,0x14
c0014f55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f59:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014f5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f61:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014f64:	e8 7e 35 ff ff       	call   c00084e7 <Fs::setcwd(Process*, char*)>
c0014f69:	83 c4 1c             	add    esp,0x1c
c0014f6c:	99                   	cdq    
c0014f6d:	c3                   	ret    

c0014f6e <SysSetTime(regs*)>:
c0014f6e:	55                   	push   ebp
c0014f6f:	31 d2                	xor    edx,edx
c0014f71:	57                   	push   edi
c0014f72:	56                   	push   esi
c0014f73:	be 18 00 00 00       	mov    esi,0x18
c0014f78:	53                   	push   ebx
c0014f79:	bb 3c 00 00 00       	mov    ebx,0x3c
c0014f7e:	83 ec 20             	sub    esp,0x20
c0014f81:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014f85:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014f88:	f7 f3                	div    ebx
c0014f8a:	89 d7                	mov    edi,edx
c0014f8c:	31 d2                	xor    edx,edx
c0014f8e:	f7 f3                	div    ebx
c0014f90:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014f93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014f97:	bb 10 0e 00 00       	mov    ebx,0xe10
c0014f9c:	31 d2                	xor    edx,edx
c0014f9e:	f7 f3                	div    ebx
c0014fa0:	31 d2                	xor    edx,edx
c0014fa2:	f7 f6                	div    esi
c0014fa4:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014fa7:	89 d5                	mov    ebp,edx
c0014fa9:	89 c3                	mov    ebx,eax
c0014fab:	be 0c 00 00 00       	mov    esi,0xc
c0014fb0:	83 e3 1f             	and    ebx,0x1f
c0014fb3:	c1 e8 05             	shr    eax,0x5
c0014fb6:	43                   	inc    ebx
c0014fb7:	31 d2                	xor    edx,edx
c0014fb9:	f7 f6                	div    esi
c0014fbb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014fbf:	57                   	push   edi
c0014fc0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014fc4:	55                   	push   ebp
c0014fc5:	0f b7 71 24          	movzx  esi,WORD PTR [ecx+0x24]
c0014fc9:	56                   	push   esi
c0014fca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014fce:	53                   	push   ebx
c0014fcf:	68 1c 50 02 c0       	push   0xc002501c
c0014fd4:	e8 8b 1f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014fd9:	83 c4 1c             	add    esp,0x1c
c0014fdc:	57                   	push   edi
c0014fdd:	c1 e7 10             	shl    edi,0x10
c0014fe0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014fe4:	55                   	push   ebp
c0014fe5:	56                   	push   esi
c0014fe6:	c1 e6 10             	shl    esi,0x10
c0014fe9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014fed:	53                   	push   ebx
c0014fee:	68 3e 50 02 c0       	push   0xc002503e
c0014ff3:	e8 6c 1f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014ff8:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c0014ffd:	31 d2                	xor    edx,edx
c0014fff:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0015005:	31 c0                	xor    eax,eax
c0015007:	88 d8                	mov    al,bl
c0015009:	8a 64 24 2c          	mov    ah,BYTE PTR [esp+0x2c]
c001500d:	0f b7 d8             	movzx  ebx,ax
c0015010:	09 f3                	or     ebx,esi
c0015012:	89 d8                	mov    eax,ebx
c0015014:	89 eb                	mov    ebx,ebp
c0015016:	88 5c 24 2c          	mov    BYTE PTR [esp+0x2c],bl
c001501a:	88 da                	mov    dl,bl
c001501c:	8a 74 24 28          	mov    dh,BYTE PTR [esp+0x28]
c0015020:	83 c4 1c             	add    esp,0x1c
c0015023:	89 d6                	mov    esi,edx
c0015025:	81 e6 ff ff 00 ff    	and    esi,0xff00ffff
c001502b:	09 fe                	or     esi,edi
c001502d:	56                   	push   esi
c001502e:	50                   	push   eax
c001502f:	51                   	push   ecx
c0015030:	e8 23 45 ff ff       	call   c0009558 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0015035:	83 c4 2c             	add    esp,0x2c
c0015038:	83 f0 01             	xor    eax,0x1
c001503b:	5b                   	pop    ebx
c001503c:	0f b6 c0             	movzx  eax,al
c001503f:	5e                   	pop    esi
c0015040:	31 d2                	xor    edx,edx
c0015042:	5f                   	pop    edi
c0015043:	5d                   	pop    ebp
c0015044:	c3                   	ret    

c0015045 <SysSymlink(regs*)>:
c0015045:	56                   	push   esi
c0015046:	83 c8 ff             	or     eax,0xffffffff
c0015049:	53                   	push   ebx
c001504a:	89 c2                	mov    edx,eax
c001504c:	81 ec 34 02 00 00    	sub    esp,0x234
c0015052:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0015059:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001505d:	74 50                	je     c00150af <SysSymlink(regs*)+0x6a>
c001505f:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0015062:	85 c9                	test   ecx,ecx
c0015064:	74 49                	je     c00150af <SysSymlink(regs*)+0x6a>
c0015066:	6a 01                	push   0x1
c0015068:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001506d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015070:	05 0c 01 00 00       	add    eax,0x10c
c0015075:	50                   	push   eax
c0015076:	51                   	push   ecx
c0015077:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001507b:	56                   	push   esi
c001507c:	e8 cd 2d ff ff       	call   c0007e4e <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0015081:	6a 01                	push   0x1
c0015083:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015088:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001508b:	05 0c 01 00 00       	add    eax,0x10c
c0015090:	50                   	push   eax
c0015091:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015094:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c001509b:	53                   	push   ebx
c001509c:	e8 ad 2d ff ff       	call   c0007e4e <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00150a1:	83 c4 18             	add    esp,0x18
c00150a4:	56                   	push   esi
c00150a5:	53                   	push   ebx
c00150a6:	e8 d1 29 ff ff       	call   c0007a7c <KeCreateSymlink(char const*, char const*)>
c00150ab:	83 c4 10             	add    esp,0x10
c00150ae:	99                   	cdq    
c00150af:	81 c4 34 02 00 00    	add    esp,0x234
c00150b5:	5b                   	pop    ebx
c00150b6:	5e                   	pop    esi
c00150b7:	c3                   	ret    

c00150b8 <SysTimezone(regs*)>:
c00150b8:	83 ec 0c             	sub    esp,0xc
c00150bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150bf:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00150c3:	75 17                	jne    c00150dc <SysTimezone(regs*)+0x24>
c00150c5:	83 ec 0c             	sub    esp,0xc
c00150c8:	68 60 50 02 c0       	push   0xc0025060
c00150cd:	e8 92 1e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00150d2:	83 c8 ff             	or     eax,0xffffffff
c00150d5:	83 c4 10             	add    esp,0x10
c00150d8:	89 c2                	mov    edx,eax
c00150da:	eb 16                	jmp    c00150f2 <SysTimezone(regs*)+0x3a>
c00150dc:	83 ec 0c             	sub    esp,0xc
c00150df:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00150e2:	e8 fe 3e ff ff       	call   c0008fe5 <KeSetTimezone(int)>
c00150e7:	31 d2                	xor    edx,edx
c00150e9:	83 f0 01             	xor    eax,0x1
c00150ec:	83 c4 10             	add    esp,0x10
c00150ef:	0f b6 c0             	movzx  eax,al
c00150f2:	83 c4 0c             	add    esp,0xc
c00150f5:	c3                   	ret    

c00150f6 <SysTruncate(regs*)>:
c00150f6:	55                   	push   ebp
c00150f7:	57                   	push   edi
c00150f8:	31 ff                	xor    edi,edi
c00150fa:	56                   	push   esi
c00150fb:	53                   	push   ebx
c00150fc:	83 ec 0c             	sub    esp,0xc
c00150ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015103:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0015106:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0015109:	89 ce                	mov    esi,ecx
c001510b:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c001510f:	0f 84 9a 00 00 00    	je     c00151af <SysTruncate(regs*)+0xb9>
c0015115:	83 ec 0c             	sub    esp,0xc
c0015118:	68 14 01 00 00       	push   0x114
c001511d:	e8 c5 ab ff ff       	call   c000fce7 <malloc>
c0015122:	83 c4 0c             	add    esp,0xc
c0015125:	89 c3                	mov    ebx,eax
c0015127:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001512c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001512f:	55                   	push   ebp
c0015130:	53                   	push   ebx
c0015131:	e8 30 30 ff ff       	call   c0008166 <File::File(char const*, Process*)>
c0015136:	83 c4 10             	add    esp,0x10
c0015139:	31 d2                	xor    edx,edx
c001513b:	b8 03 00 00 00       	mov    eax,0x3
c0015140:	85 db                	test   ebx,ebx
c0015142:	0f 84 a2 00 00 00    	je     c00151ea <SysTruncate(regs*)+0xf4>
c0015148:	51                   	push   ecx
c0015149:	51                   	push   ecx
c001514a:	6a 02                	push   0x2
c001514c:	53                   	push   ebx
c001514d:	e8 32 30 ff ff       	call   c0008184 <File::open(FileOpenMode)>
c0015152:	83 c4 10             	add    esp,0x10
c0015155:	85 c0                	test   eax,eax
c0015157:	74 13                	je     c001516c <SysTruncate(regs*)+0x76>
c0015159:	83 ec 0c             	sub    esp,0xc
c001515c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001515e:	53                   	push   ebx
c001515f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015162:	83 c4 10             	add    esp,0x10
c0015165:	b8 04 00 00 00       	mov    eax,0x4
c001516a:	eb 7c                	jmp    c00151e8 <SysTruncate(regs*)+0xf2>
c001516c:	52                   	push   edx
c001516d:	57                   	push   edi
c001516e:	56                   	push   esi
c001516f:	53                   	push   ebx
c0015170:	e8 23 31 ff ff       	call   c0008298 <File::truncate(unsigned long long)>
c0015175:	83 c4 10             	add    esp,0x10
c0015178:	85 c0                	test   eax,eax
c001517a:	74 1b                	je     c0015197 <SysTruncate(regs*)+0xa1>
c001517c:	83 ec 0c             	sub    esp,0xc
c001517f:	53                   	push   ebx
c0015180:	e8 5d 30 ff ff       	call   c00081e2 <File::close()>
c0015185:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015187:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001518a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001518d:	83 c4 10             	add    esp,0x10
c0015190:	b8 05 00 00 00       	mov    eax,0x5
c0015195:	eb 51                	jmp    c00151e8 <SysTruncate(regs*)+0xf2>
c0015197:	83 ec 0c             	sub    esp,0xc
c001519a:	53                   	push   ebx
c001519b:	e8 42 30 ff ff       	call   c00081e2 <File::close()>
c00151a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00151a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151a5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00151a8:	83 c4 10             	add    esp,0x10
c00151ab:	31 c0                	xor    eax,eax
c00151ad:	eb 39                	jmp    c00151e8 <SysTruncate(regs*)+0xf2>
c00151af:	31 d2                	xor    edx,edx
c00151b1:	b8 01 00 00 00       	mov    eax,0x1
c00151b6:	83 fd 02             	cmp    ebp,0x2
c00151b9:	7e 2f                	jle    c00151ea <SysTruncate(regs*)+0xf4>
c00151bb:	83 ec 0c             	sub    esp,0xc
c00151be:	51                   	push   ecx
c00151bf:	e8 9d e1 ff ff       	call   c0013361 <KeGetFileFromDescriptor(int)>
c00151c4:	83 c4 10             	add    esp,0x10
c00151c7:	89 c1                	mov    ecx,eax
c00151c9:	31 d2                	xor    edx,edx
c00151cb:	b8 02 00 00 00       	mov    eax,0x2
c00151d0:	85 c9                	test   ecx,ecx
c00151d2:	74 16                	je     c00151ea <SysTruncate(regs*)+0xf4>
c00151d4:	50                   	push   eax
c00151d5:	57                   	push   edi
c00151d6:	56                   	push   esi
c00151d7:	51                   	push   ecx
c00151d8:	e8 bb 30 ff ff       	call   c0008298 <File::truncate(unsigned long long)>
c00151dd:	83 c4 10             	add    esp,0x10
c00151e0:	85 c0                	test   eax,eax
c00151e2:	0f 95 c0             	setne  al
c00151e5:	0f b6 c0             	movzx  eax,al
c00151e8:	31 d2                	xor    edx,edx
c00151ea:	83 c4 0c             	add    esp,0xc
c00151ed:	5b                   	pop    ebx
c00151ee:	5e                   	pop    esi
c00151ef:	5f                   	pop    edi
c00151f0:	5d                   	pop    ebp
c00151f1:	c3                   	ret    

c00151f2 <SysWrite(regs*)>:
c00151f2:	57                   	push   edi
c00151f3:	56                   	push   esi
c00151f4:	53                   	push   ebx
c00151f5:	83 ec 10             	sub    esp,0x10
c00151f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00151fc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00151ff:	83 f8 02             	cmp    eax,0x2
c0015202:	77 10                	ja     c0015214 <SysWrite(regs*)+0x22>
c0015204:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015209:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001520c:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0015212:	eb 0e                	jmp    c0015222 <SysWrite(regs*)+0x30>
c0015214:	83 ec 0c             	sub    esp,0xc
c0015217:	50                   	push   eax
c0015218:	e8 44 e1 ff ff       	call   c0013361 <KeGetFileFromDescriptor(int)>
c001521d:	83 c4 10             	add    esp,0x10
c0015220:	89 c1                	mov    ecx,eax
c0015222:	83 c8 ff             	or     eax,0xffffffff
c0015225:	85 c9                	test   ecx,ecx
c0015227:	89 c2                	mov    edx,eax
c0015229:	74 28                	je     c0015253 <SysWrite(regs*)+0x61>
c001522b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015233:	31 ff                	xor    edi,edi
c0015235:	83 ec 0c             	sub    esp,0xc
c0015238:	8b 01                	mov    eax,DWORD PTR [ecx]
c001523a:	8d 54 24 18          	lea    edx,[esp+0x18]
c001523e:	52                   	push   edx
c001523f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015242:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015245:	57                   	push   edi
c0015246:	56                   	push   esi
c0015247:	51                   	push   ecx
c0015248:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001524b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001524f:	83 c4 20             	add    esp,0x20
c0015252:	99                   	cdq    
c0015253:	83 c4 10             	add    esp,0x10
c0015256:	5b                   	pop    ebx
c0015257:	5e                   	pop    esi
c0015258:	5f                   	pop    edi
c0015259:	c3                   	ret    

c001525a <SysWsbe(regs*)>:
c001525a:	55                   	push   ebp
c001525b:	57                   	push   edi
c001525c:	56                   	push   esi
c001525d:	53                   	push   ebx
c001525e:	83 ec 3c             	sub    esp,0x3c
c0015261:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0015265:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c001526c:	75 2d                	jne    c001529b <SysWsbe(regs*)+0x41>
c001526e:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c0015275:	75 24                	jne    c001529b <SysWsbe(regs*)+0x41>
c0015277:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c001527e:	75 1b                	jne    c001529b <SysWsbe(regs*)+0x41>
c0015280:	6a 01                	push   0x1
c0015282:	6a 00                	push   0x0
c0015284:	68 55 9f 00 c0       	push   0xc0009f55
c0015289:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c001528f:	e8 ec 1c 00 00       	call   c0016f80 <Process::createThread(void (*)(void*), void*, int)>
c0015294:	83 c4 10             	add    esp,0x10
c0015297:	31 c0                	xor    eax,eax
c0015299:	eb 52                	jmp    c00152ed <SysWsbe(regs*)+0x93>
c001529b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001529f:	be 75 50 02 c0       	mov    esi,0xc0025075
c00152a4:	b9 0b 00 00 00       	mov    ecx,0xb
c00152a9:	fc                   	cld    
c00152aa:	83 ec 0c             	sub    esp,0xc
c00152ad:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00152af:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00152b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152b8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152bb:	8b b0 a6 05 00 00    	mov    esi,DWORD PTR [eax+0x5a6]
c00152c1:	8b 06                	mov    eax,DWORD PTR [esi]
c00152c3:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00152c6:	57                   	push   edi
c00152c7:	e8 a4 b2 fe ff       	call   c0000570 <strlen>
c00152cc:	5a                   	pop    edx
c00152cd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00152d1:	52                   	push   edx
c00152d2:	31 d2                	xor    edx,edx
c00152d4:	57                   	push   edi
c00152d5:	52                   	push   edx
c00152d6:	50                   	push   eax
c00152d7:	56                   	push   esi
c00152d8:	ff d5                	call   ebp
c00152da:	83 c4 14             	add    esp,0x14
c00152dd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00152e0:	e8 5b 27 00 00       	call   c0017a40 <terminateTask(int)>
c00152e5:	83 c4 10             	add    esp,0x10
c00152e8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00152ed:	83 c4 3c             	add    esp,0x3c
c00152f0:	31 d2                	xor    edx,edx
c00152f2:	5b                   	pop    ebx
c00152f3:	5e                   	pop    esi
c00152f4:	5f                   	pop    edi
c00152f5:	5d                   	pop    ebp
c00152f6:	c3                   	ret    

c00152f7 <SysYield(regs*)>:
c00152f7:	83 ec 0c             	sub    esp,0xc
c00152fa:	fa                   	cli    
c00152fb:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c0015301:	e8 3a 1f 00 00       	call   c0017240 <schedule()>
c0015306:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c001530d:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c0015314:	75 01                	jne    c0015317 <SysYield(regs*)+0x20>
c0015316:	fb                   	sti    
c0015317:	31 c0                	xor    eax,eax
c0015319:	31 d2                	xor    edx,edx
c001531b:	83 c4 0c             	add    esp,0xc
c001531e:	c3                   	ret    
c001531f:	90                   	nop

c0015320 <KeAlarm(ThreadControlBlock*, unsigned long long)>:
c0015320:	55                   	push   ebp
c0015321:	57                   	push   edi
c0015322:	56                   	push   esi
c0015323:	53                   	push   ebx
c0015324:	83 ec 2c             	sub    esp,0x2c
c0015327:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001532b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001532f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015333:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015337:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001533b:	8b 7a 63             	mov    edi,DWORD PTR [edx+0x63]
c001533e:	0f b6 4a 67          	movzx  ecx,BYTE PTR [edx+0x67]
c0015342:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0015346:	c1 e0 08             	shl    eax,0x8
c0015349:	09 c1                	or     ecx,eax
c001534b:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c001534f:	c1 e0 10             	shl    eax,0x10
c0015352:	09 c1                	or     ecx,eax
c0015354:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c0015358:	83 e0 7f             	and    eax,0x7f
c001535b:	c1 e0 18             	shl    eax,0x18
c001535e:	09 c8                	or     eax,ecx
c0015360:	89 c5                	mov    ebp,eax
c0015362:	89 f8                	mov    eax,edi
c0015364:	80 f4 00             	xor    ah,0x0
c0015367:	89 c3                	mov    ebx,eax
c0015369:	89 e8                	mov    eax,ebp
c001536b:	80 f4 00             	xor    ah,0x0
c001536e:	89 c6                	mov    esi,eax
c0015370:	89 f0                	mov    eax,esi
c0015372:	09 d8                	or     eax,ebx
c0015374:	74 42                	je     c00153b8 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x98>
c0015376:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001537a:	8b 4a 63             	mov    ecx,DWORD PTR [edx+0x63]
c001537d:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c0015381:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0015385:	c1 e0 08             	shl    eax,0x8
c0015388:	09 c6                	or     esi,eax
c001538a:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c001538e:	c1 e0 10             	shl    eax,0x10
c0015391:	09 c6                	or     esi,eax
c0015393:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c0015397:	83 e0 7f             	and    eax,0x7f
c001539a:	c1 e0 18             	shl    eax,0x18
c001539d:	09 f0                	or     eax,esi
c001539f:	89 c3                	mov    ebx,eax
c00153a1:	a1 50 cb 02 c0       	mov    eax,ds:0xc002cb50
c00153a6:	8b 15 54 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb54
c00153ac:	29 c1                	sub    ecx,eax
c00153ae:	19 d3                	sbb    ebx,edx
c00153b0:	89 c8                	mov    eax,ecx
c00153b2:	89 da                	mov    edx,ebx
c00153b4:	eb 0e                	jmp    c00153c4 <KeAlarm(ThreadControlBlock*, unsigned long long)+0xa4>
c00153b6:	66 90                	xchg   ax,ax
c00153b8:	b8 00 00 00 00       	mov    eax,0x0
c00153bd:	ba 00 00 00 00       	mov    edx,0x0
c00153c2:	66 90                	xchg   ax,ax
c00153c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00153c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00153cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00153d0:	80 f4 00             	xor    ah,0x0
c00153d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00153d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00153db:	80 f4 00             	xor    ah,0x0
c00153de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00153e2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00153e6:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00153ea:	89 e8                	mov    eax,ebp
c00153ec:	09 f8                	or     eax,edi
c00153ee:	74 30                	je     c0015420 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x100>
c00153f0:	8b 0d 50 cb 02 c0    	mov    ecx,DWORD PTR ds:0xc002cb50
c00153f6:	8b 1d 54 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb54
c00153fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015400:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015404:	01 c8                	add    eax,ecx
c0015406:	11 da                	adc    edx,ebx
c0015408:	89 c6                	mov    esi,eax
c001540a:	83 e6 ff             	and    esi,0xffffffff
c001540d:	89 34 24             	mov    DWORD PTR [esp],esi
c0015410:	89 d0                	mov    eax,edx
c0015412:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0015417:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001541b:	eb 13                	jmp    c0015430 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x110>
c001541d:	8d 76 00             	lea    esi,[esi+0x0]
c0015420:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015427:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001542f:	90                   	nop
c0015430:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015434:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0015437:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001543b:	89 cf                	mov    edi,ecx
c001543d:	89 78 63             	mov    DWORD PTR [eax+0x63],edi
c0015440:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0015443:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0015447:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001544c:	8a 48 67             	mov    cl,BYTE PTR [eax+0x67]
c001544f:	83 e1 00             	and    ecx,0x0
c0015452:	09 ca                	or     edx,ecx
c0015454:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c0015457:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001545b:	c1 ea 08             	shr    edx,0x8
c001545e:	0f b6 d2             	movzx  edx,dl
c0015461:	8a 48 68             	mov    cl,BYTE PTR [eax+0x68]
c0015464:	83 e1 00             	and    ecx,0x0
c0015467:	09 ca                	or     edx,ecx
c0015469:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c001546c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015470:	c1 ea 10             	shr    edx,0x10
c0015473:	0f b6 d2             	movzx  edx,dl
c0015476:	8a 48 69             	mov    cl,BYTE PTR [eax+0x69]
c0015479:	83 e1 00             	and    ecx,0x0
c001547c:	09 ca                	or     edx,ecx
c001547e:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0015481:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015485:	c1 ea 18             	shr    edx,0x18
c0015488:	83 e2 7f             	and    edx,0x7f
c001548b:	89 d3                	mov    ebx,edx
c001548d:	83 e3 7f             	and    ebx,0x7f
c0015490:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0015493:	83 e2 80             	and    edx,0xffffff80
c0015496:	88 d1                	mov    cl,dl
c0015498:	88 da                	mov    dl,bl
c001549a:	09 ca                	or     edx,ecx
c001549c:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c001549f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154a3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00154a7:	83 c4 2c             	add    esp,0x2c
c00154aa:	5b                   	pop    ebx
c00154ab:	5e                   	pop    esi
c00154ac:	5f                   	pop    edi
c00154ad:	5d                   	pop    ebp
c00154ae:	c3                   	ret    
c00154af:	90                   	nop

c00154b0 <KeCheckAlarm(ThreadControlBlock*)>:
c00154b0:	55                   	push   ebp
c00154b1:	57                   	push   edi
c00154b2:	56                   	push   esi
c00154b3:	53                   	push   ebx
c00154b4:	83 ec 0c             	sub    esp,0xc
c00154b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154bb:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c00154be:	0f b6 78 67          	movzx  edi,BYTE PTR [eax+0x67]
c00154c2:	0f b6 68 68          	movzx  ebp,BYTE PTR [eax+0x68]
c00154c6:	c1 e5 08             	shl    ebp,0x8
c00154c9:	09 fd                	or     ebp,edi
c00154cb:	0f b6 78 69          	movzx  edi,BYTE PTR [eax+0x69]
c00154cf:	c1 e7 10             	shl    edi,0x10
c00154d2:	09 ef                	or     edi,ebp
c00154d4:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c00154d8:	83 e0 7f             	and    eax,0x7f
c00154db:	c1 e0 18             	shl    eax,0x18
c00154de:	09 f8                	or     eax,edi
c00154e0:	89 c1                	mov    ecx,eax
c00154e2:	89 d0                	mov    eax,edx
c00154e4:	80 f4 00             	xor    ah,0x0
c00154e7:	89 c3                	mov    ebx,eax
c00154e9:	89 c8                	mov    eax,ecx
c00154eb:	80 f4 00             	xor    ah,0x0
c00154ee:	89 c6                	mov    esi,eax
c00154f0:	89 f0                	mov    eax,esi
c00154f2:	09 d8                	or     eax,ebx
c00154f4:	0f 84 9e 00 00 00    	je     c0015598 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c00154fa:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00154fe:	8b 41 63             	mov    eax,DWORD PTR [ecx+0x63]
c0015501:	0f b6 59 67          	movzx  ebx,BYTE PTR [ecx+0x67]
c0015505:	0f b6 71 68          	movzx  esi,BYTE PTR [ecx+0x68]
c0015509:	c1 e6 08             	shl    esi,0x8
c001550c:	09 de                	or     esi,ebx
c001550e:	0f b6 59 69          	movzx  ebx,BYTE PTR [ecx+0x69]
c0015512:	c1 e3 10             	shl    ebx,0x10
c0015515:	09 f3                	or     ebx,esi
c0015517:	0f b6 49 6a          	movzx  ecx,BYTE PTR [ecx+0x6a]
c001551b:	83 e1 7f             	and    ecx,0x7f
c001551e:	c1 e1 18             	shl    ecx,0x18
c0015521:	09 d9                	or     ecx,ebx
c0015523:	89 ca                	mov    edx,ecx
c0015525:	89 c1                	mov    ecx,eax
c0015527:	89 d3                	mov    ebx,edx
c0015529:	a1 50 cb 02 c0       	mov    eax,ds:0xc002cb50
c001552e:	8b 15 54 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb54
c0015534:	39 c8                	cmp    eax,ecx
c0015536:	89 d0                	mov    eax,edx
c0015538:	19 d8                	sbb    eax,ebx
c001553a:	72 5c                	jb     c0015598 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c001553c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015540:	c7 40 63 00 00 00 00 	mov    DWORD PTR [eax+0x63],0x0
c0015547:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c001554a:	83 e2 00             	and    edx,0x0
c001554d:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c0015550:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c0015553:	83 e2 00             	and    edx,0x0
c0015556:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0015559:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c001555c:	83 e2 00             	and    edx,0x0
c001555f:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0015562:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0015565:	83 e2 80             	and    edx,0xffffff80
c0015568:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c001556b:	83 ec 0c             	sub    esp,0xc
c001556e:	68 a1 50 02 c0       	push   0xc00250a1
c0015573:	e8 ec 19 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015578:	83 c4 10             	add    esp,0x10
c001557b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001557f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015582:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c0015588:	83 ec 08             	sub    esp,0x8
c001558b:	6a 0e                	push   0xe
c001558d:	50                   	push   eax
c001558e:	e8 18 bc ff ff       	call   c00111ab <KeRaiseSignal(SigHandlerBlock*, int)>
c0015593:	83 c4 10             	add    esp,0x10
c0015596:	66 90                	xchg   ax,ax
c0015598:	90                   	nop
c0015599:	83 c4 0c             	add    esp,0xc
c001559c:	5b                   	pop    ebx
c001559d:	5e                   	pop    esi
c001559e:	5f                   	pop    edi
c001559f:	5d                   	pop    ebp
c00155a0:	c3                   	ret    

c00155a1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00155a1:	55                   	push   ebp
c00155a2:	57                   	push   edi
c00155a3:	56                   	push   esi
c00155a4:	53                   	push   ebx
c00155a5:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00155ab:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00155b3:	0f 95 c0             	setne  al
c00155b6:	31 d2                	xor    edx,edx
c00155b8:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00155c0:	0f 94 c2             	sete   dl
c00155c3:	85 c2                	test   edx,eax
c00155c5:	74 34                	je     c00155fb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00155c7:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00155d2:	74 27                	je     c00155fb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00155d4:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00155db:	05 00 10 00 00       	add    eax,0x1000
c00155e0:	89 c1                	mov    ecx,eax
c00155e2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00155e7:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00155ed:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00155f4:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00155fb:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0015602:	83 ec 0c             	sub    esp,0xc
c0015605:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001560b:	6a 01                	push   0x1
c001560d:	e8 bb de ff ff       	call   c00134cd <Virt::allocateKernelVirtualPages(int)>
c0015612:	83 c4 10             	add    esp,0x10
c0015615:	89 c3                	mov    ebx,eax
c0015617:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001561d:	0f 86 26 01 00 00    	jbe    c0015749 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c0015623:	c1 ee 0c             	shr    esi,0xc
c0015626:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001562d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0015631:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015639:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0015640:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015644:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c001564b:	29 ef                	sub    edi,ebp
c001564d:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0015651:	0f 83 f9 00 00 00    	jae    c0015750 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1af>
c0015657:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001565d:	76 05                	jbe    c0015664 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c001565f:	bf 00 10 00 00       	mov    edi,0x1000
c0015664:	83 ec 0c             	sub    esp,0xc
c0015667:	31 d2                	xor    edx,edx
c0015669:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015670:	8b 08                	mov    ecx,DWORD PTR [eax]
c0015672:	8d 44 24 28          	lea    eax,[esp+0x28]
c0015676:	50                   	push   eax
c0015677:	8d 74 24 30          	lea    esi,[esp+0x30]
c001567b:	56                   	push   esi
c001567c:	52                   	push   edx
c001567d:	57                   	push   edi
c001567e:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0015685:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015688:	83 c4 20             	add    esp,0x20
c001568b:	85 c0                	test   eax,eax
c001568d:	75 06                	jne    c0015695 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c001568f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015693:	74 13                	je     c00156a8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0015695:	83 ec 0c             	sub    esp,0xc
c0015698:	53                   	push   ebx
c0015699:	e8 37 e1 ff ff       	call   c00137d5 <Virt::freeKernelVirtualPages(unsigned long)>
c001569e:	83 c4 10             	add    esp,0x10
c00156a1:	31 c0                	xor    eax,eax
c00156a3:	e9 80 01 00 00       	jmp    c0015828 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c00156a8:	fa                   	cli    
c00156a9:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c00156af:	e8 6e ab ff ff       	call   c0010222 <Phys::allocatePage()>
c00156b4:	6a 07                	push   0x7
c00156b6:	89 c7                	mov    edi,eax
c00156b8:	53                   	push   ebx
c00156b9:	50                   	push   eax
c00156ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156bf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00156c2:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00156c8:	e8 e3 e4 ff ff       	call   c0013bb0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00156cd:	83 c4 0c             	add    esp,0xc
c00156d0:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00156d7:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00156dd:	6a 00                	push   0x0
c00156df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156e4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00156e7:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00156ed:	e8 2a e3 ff ff       	call   c0013a1c <VAS::mapOtherVASIn(bool, VAS*)>
c00156f2:	58                   	pop    eax
c00156f3:	5a                   	pop    edx
c00156f4:	68 07 0c 00 00       	push   0xc07
c00156f9:	55                   	push   ebp
c00156fa:	57                   	push   edi
c00156fb:	89 df                	mov    edi,ebx
c00156fd:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0015704:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001570a:	6a 00                	push   0x0
c001570c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015711:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015714:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001571a:	e8 d3 e6 ff ff       	call   c0013df2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001571f:	b9 00 10 00 00       	mov    ecx,0x1000
c0015724:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015726:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c001572d:	83 c4 20             	add    esp,0x20
c0015730:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c0015737:	75 01                	jne    c001573a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x199>
c0015739:	fb                   	sti    
c001573a:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015740:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015744:	e9 f0 fe ff ff       	jmp    c0015639 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0015749:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0015750:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015757:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001575d:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0015763:	0f 86 b1 00 00 00    	jbe    c001581a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c0015769:	fa                   	cli    
c001576a:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c0015770:	c1 ee 0c             	shr    esi,0xc
c0015773:	51                   	push   ecx
c0015774:	31 ff                	xor    edi,edi
c0015776:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001577d:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015783:	6a 00                	push   0x0
c0015785:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001578a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001578d:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015793:	e8 84 e2 ff ff       	call   c0013a1c <VAS::mapOtherVASIn(bool, VAS*)>
c0015798:	83 c4 10             	add    esp,0x10
c001579b:	e8 82 aa ff ff       	call   c0010222 <Phys::allocatePage()>
c00157a0:	47                   	inc    edi
c00157a1:	6a 07                	push   0x7
c00157a3:	53                   	push   ebx
c00157a4:	50                   	push   eax
c00157a5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00157a9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00157af:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00157b2:	ff b2 b2 05 00 00    	push   DWORD PTR [edx+0x5b2]
c00157b8:	e8 f3 e3 ff ff       	call   c0013bb0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00157bd:	58                   	pop    eax
c00157be:	5a                   	pop    edx
c00157bf:	68 07 0c 00 00       	push   0xc07
c00157c4:	55                   	push   ebp
c00157c5:	81 c5 00 10 00 00    	add    ebp,0x1000
c00157cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00157cf:	50                   	push   eax
c00157d0:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00157d7:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00157dd:	6a 00                	push   0x0
c00157df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157e4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157e7:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00157ed:	e8 00 e6 ff ff       	call   c0013df2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00157f2:	83 c4 1c             	add    esp,0x1c
c00157f5:	68 00 10 00 00       	push   0x1000
c00157fa:	6a 00                	push   0x0
c00157fc:	53                   	push   ebx
c00157fd:	e8 ee ac fe ff       	call   c00004f0 <memset>
c0015802:	83 c4 10             	add    esp,0x10
c0015805:	39 fe                	cmp    esi,edi
c0015807:	77 92                	ja     c001579b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1fa>
c0015809:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c0015810:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c0015817:	75 01                	jne    c001581a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c0015819:	fb                   	sti    
c001581a:	83 ec 0c             	sub    esp,0xc
c001581d:	53                   	push   ebx
c001581e:	e8 b2 df ff ff       	call   c00137d5 <Virt::freeKernelVirtualPages(unsigned long)>
c0015823:	83 c4 10             	add    esp,0x10
c0015826:	b0 01                	mov    al,0x1
c0015828:	81 c4 2c 10 00 00    	add    esp,0x102c
c001582e:	5b                   	pop    ebx
c001582f:	5e                   	pop    esi
c0015830:	5f                   	pop    edi
c0015831:	5d                   	pop    ebp
c0015832:	c3                   	ret    

c0015833 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0015833:	55                   	push   ebp
c0015834:	57                   	push   edi
c0015835:	56                   	push   esi
c0015836:	53                   	push   ebx
c0015837:	83 ec 68             	sub    esp,0x68
c001583a:	68 14 01 00 00       	push   0x114
c001583f:	e8 a3 a4 ff ff       	call   c000fce7 <malloc>
c0015844:	83 c4 0c             	add    esp,0xc
c0015847:	89 c6                	mov    esi,eax
c0015849:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001584d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0015851:	50                   	push   eax
c0015852:	e8 0f 29 ff ff       	call   c0008166 <File::File(char const*, Process*)>
c0015857:	58                   	pop    eax
c0015858:	5a                   	pop    edx
c0015859:	6a 01                	push   0x1
c001585b:	56                   	push   esi
c001585c:	e8 23 29 ff ff       	call   c0008184 <File::open(FileOpenMode)>
c0015861:	83 c4 10             	add    esp,0x10
c0015864:	85 c0                	test   eax,eax
c0015866:	0f 85 f1 01 00 00    	jne    c0015a5d <Thr::loadProgramIntoMemory(Process*, char const*)+0x22a>
c001586c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015874:	83 ec 0c             	sub    esp,0xc
c0015877:	6a 34                	push   0x34
c0015879:	e8 69 a4 ff ff       	call   c000fce7 <malloc>
c001587e:	89 c3                	mov    ebx,eax
c0015880:	58                   	pop    eax
c0015881:	8b 06                	mov    eax,DWORD PTR [esi]
c0015883:	8d 7c 24 34          	lea    edi,[esp+0x34]
c0015887:	57                   	push   edi
c0015888:	53                   	push   ebx
c0015889:	6a 00                	push   0x0
c001588b:	6a 34                	push   0x34
c001588d:	56                   	push   esi
c001588e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015891:	83 c4 20             	add    esp,0x20
c0015894:	85 c0                	test   eax,eax
c0015896:	0f 85 c1 01 00 00    	jne    c0015a5d <Thr::loadProgramIntoMemory(Process*, char const*)+0x22a>
c001589c:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00158a2:	0f 85 b5 01 00 00    	jne    c0015a5d <Thr::loadProgramIntoMemory(Process*, char const*)+0x22a>
c00158a8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00158ab:	85 c0                	test   eax,eax
c00158ad:	0f 84 aa 01 00 00    	je     c0015a5d <Thr::loadProgramIntoMemory(Process*, char const*)+0x22a>
c00158b3:	31 d2                	xor    edx,edx
c00158b5:	55                   	push   ebp
c00158b6:	52                   	push   edx
c00158b7:	50                   	push   eax
c00158b8:	56                   	push   esi
c00158b9:	e8 84 29 ff ff       	call   c0008242 <File::seek(unsigned long long)>
c00158be:	83 c4 10             	add    esp,0x10
c00158c1:	85 c0                	test   eax,eax
c00158c3:	0f 85 94 01 00 00    	jne    c0015a5d <Thr::loadProgramIntoMemory(Process*, char const*)+0x22a>
c00158c9:	83 ec 0c             	sub    esp,0xc
c00158cc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00158cf:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00158d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00158d7:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00158db:	0f af c2             	imul   eax,edx
c00158de:	50                   	push   eax
c00158df:	e8 03 a4 ff ff       	call   c000fce7 <malloc>
c00158e4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00158e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00158ea:	89 3c 24             	mov    DWORD PTR [esp],edi
c00158ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00158f1:	31 ff                	xor    edi,edi
c00158f3:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00158f7:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00158fb:	0f af c2             	imul   eax,edx
c00158fe:	99                   	cdq    
c00158ff:	52                   	push   edx
c0015900:	50                   	push   eax
c0015901:	56                   	push   esi
c0015902:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015905:	83 c4 20             	add    esp,0x20
c0015908:	0f b7 c7             	movzx  eax,di
c001590b:	66 3b 7b 30          	cmp    di,WORD PTR [ebx+0x30]
c001590f:	0f 83 98 00 00 00    	jae    c00159ad <Thr::loadProgramIntoMemory(Process*, char const*)+0x17a>
c0015915:	6b c0 28             	imul   eax,eax,0x28
c0015918:	52                   	push   edx
c0015919:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001591d:	0f b7 53 32          	movzx  edx,WORD PTR [ebx+0x32]
c0015921:	8b 04 01             	mov    eax,DWORD PTR [ecx+eax*1]
c0015924:	6b d2 28             	imul   edx,edx,0x28
c0015927:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001592b:	31 d2                	xor    edx,edx
c001592d:	52                   	push   edx
c001592e:	50                   	push   eax
c001592f:	56                   	push   esi
c0015930:	e8 0d 29 ff ff       	call   c0008242 <File::seek(unsigned long long)>
c0015935:	83 c4 0c             	add    esp,0xc
c0015938:	6a 20                	push   0x20
c001593a:	6a 00                	push   0x0
c001593c:	8d 6c 24 3c          	lea    ebp,[esp+0x3c]
c0015940:	55                   	push   ebp
c0015941:	e8 aa ab fe ff       	call   c00004f0 <memset>
c0015946:	59                   	pop    ecx
c0015947:	8b 06                	mov    eax,DWORD PTR [esi]
c0015949:	8d 54 24 38          	lea    edx,[esp+0x38]
c001594d:	52                   	push   edx
c001594e:	55                   	push   ebp
c001594f:	6a 00                	push   0x0
c0015951:	6a 1f                	push   0x1f
c0015953:	56                   	push   esi
c0015954:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015957:	83 c4 18             	add    esp,0x18
c001595a:	55                   	push   ebp
c001595b:	68 b2 50 02 c0       	push   0xc00250b2
c0015960:	e8 eb ad fe ff       	call   c0000750 <strcmp>
c0015965:	83 c4 10             	add    esp,0x10
c0015968:	85 c0                	test   eax,eax
c001596a:	75 27                	jne    c0015993 <Thr::loadProgramIntoMemory(Process*, char const*)+0x160>
c001596c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0015970:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c0015974:	8a 80 76 02 00 00    	mov    al,BYTE PTR [eax+0x276]
c001597a:	83 ec 0c             	sub    esp,0xc
c001597d:	83 c8 80             	or     eax,0xffffff80
c0015980:	88 81 76 02 00 00    	mov    BYTE PTR [ecx+0x276],al
c0015986:	68 c1 50 02 c0       	push   0xc00250c1
c001598b:	e8 d4 15 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015990:	83 c4 10             	add    esp,0x10
c0015993:	47                   	inc    edi
c0015994:	55                   	push   ebp
c0015995:	55                   	push   ebp
c0015996:	8d 44 24 38          	lea    eax,[esp+0x38]
c001599a:	50                   	push   eax
c001599b:	68 d3 50 02 c0       	push   0xc00250d3
c00159a0:	e8 bf 15 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00159a5:	83 c4 10             	add    esp,0x10
c00159a8:	e9 5b ff ff ff       	jmp    c0015908 <Thr::loadProgramIntoMemory(Process*, char const*)+0xd5>
c00159ad:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00159b0:	85 c0                	test   eax,eax
c00159b2:	0f 84 a5 00 00 00    	je     c0015a5d <Thr::loadProgramIntoMemory(Process*, char const*)+0x22a>
c00159b8:	31 d2                	xor    edx,edx
c00159ba:	57                   	push   edi
c00159bb:	52                   	push   edx
c00159bc:	50                   	push   eax
c00159bd:	56                   	push   esi
c00159be:	e8 7f 28 ff ff       	call   c0008242 <File::seek(unsigned long long)>
c00159c3:	83 c4 10             	add    esp,0x10
c00159c6:	85 c0                	test   eax,eax
c00159c8:	0f 85 8f 00 00 00    	jne    c0015a5d <Thr::loadProgramIntoMemory(Process*, char const*)+0x22a>
c00159ce:	83 ec 0c             	sub    esp,0xc
c00159d1:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00159d5:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00159d9:	31 ed                	xor    ebp,ebp
c00159db:	0f af c2             	imul   eax,edx
c00159de:	50                   	push   eax
c00159df:	e8 03 a3 ff ff       	call   c000fce7 <malloc>
c00159e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00159e8:	59                   	pop    ecx
c00159e9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00159eb:	8d 44 24 34          	lea    eax,[esp+0x34]
c00159ef:	50                   	push   eax
c00159f0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00159f4:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00159f8:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00159fc:	0f af c2             	imul   eax,edx
c00159ff:	99                   	cdq    
c0015a00:	52                   	push   edx
c0015a01:	50                   	push   eax
c0015a02:	56                   	push   esi
c0015a03:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015a06:	83 c4 20             	add    esp,0x20
c0015a09:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015a11:	0f b7 fd             	movzx  edi,bp
c0015a14:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0015a18:	0f 83 80 00 00 00    	jae    c0015a9e <Thr::loadProgramIntoMemory(Process*, char const*)+0x26b>
c0015a1e:	c1 e7 05             	shl    edi,0x5
c0015a21:	03 7c 24 10          	add    edi,DWORD PTR [esp+0x10]
c0015a25:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0015a28:	75 6e                	jne    c0015a98 <Thr::loadProgramIntoMemory(Process*, char const*)+0x265>
c0015a2a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0015a2d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015a31:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0015a34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015a38:	52                   	push   edx
c0015a39:	31 d2                	xor    edx,edx
c0015a3b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0015a3e:	52                   	push   edx
c0015a3f:	50                   	push   eax
c0015a40:	56                   	push   esi
c0015a41:	e8 fc 27 ff ff       	call   c0008242 <File::seek(unsigned long long)>
c0015a46:	83 c4 10             	add    esp,0x10
c0015a49:	85 c0                	test   eax,eax
c0015a4b:	74 17                	je     c0015a64 <Thr::loadProgramIntoMemory(Process*, char const*)+0x231>
c0015a4d:	83 ec 0c             	sub    esp,0xc
c0015a50:	68 ea 50 02 c0       	push   0xc00250ea
c0015a55:	e8 0a 15 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015a5a:	83 c4 10             	add    esp,0x10
c0015a5d:	31 c0                	xor    eax,eax
c0015a5f:	e9 8a 00 00 00       	jmp    c0015aee <Thr::loadProgramIntoMemory(Process*, char const*)+0x2bb>
c0015a64:	83 ec 0c             	sub    esp,0xc
c0015a67:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015a6a:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0015a6d:	50                   	push   eax
c0015a6e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015a72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015a76:	56                   	push   esi
c0015a77:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0015a7e:	e8 1e fb ff ff       	call   c00155a1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0015a83:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015a87:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0015a8b:	83 c4 20             	add    esp,0x20
c0015a8e:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0015a92:	73 04                	jae    c0015a98 <Thr::loadProgramIntoMemory(Process*, char const*)+0x265>
c0015a94:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a98:	45                   	inc    ebp
c0015a99:	e9 73 ff ff ff       	jmp    c0015a11 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1de>
c0015a9e:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c0015aa2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015aa6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015aaa:	89 91 ae 05 00 00    	mov    DWORD PTR [ecx+0x5ae],edx
c0015ab0:	83 ec 0c             	sub    esp,0xc
c0015ab3:	8b 91 b2 05 00 00    	mov    edx,DWORD PTR [ecx+0x5b2]
c0015ab9:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015abe:	05 00 10 00 00       	add    eax,0x1000
c0015ac3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015ac6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015aca:	e8 28 a2 ff ff       	call   c000fcf7 <free>
c0015acf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ad2:	e8 20 a2 ff ff       	call   c000fcf7 <free>
c0015ad7:	58                   	pop    eax
c0015ad8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015adc:	e8 16 a2 ff ff       	call   c000fcf7 <free>
c0015ae1:	89 34 24             	mov    DWORD PTR [esp],esi
c0015ae4:	e8 f9 26 ff ff       	call   c00081e2 <File::close()>
c0015ae9:	83 c4 10             	add    esp,0x10
c0015aec:	b0 01                	mov    al,0x1
c0015aee:	83 c4 5c             	add    esp,0x5c
c0015af1:	5b                   	pop    ebx
c0015af2:	5e                   	pop    esi
c0015af3:	5f                   	pop    edi
c0015af4:	5d                   	pop    ebp
c0015af5:	c3                   	ret    

c0015af6 <Thr::runtimeReferenceHelper()>:
c0015af6:	83 ec 18             	sub    esp,0x18
c0015af9:	68 f2 50 02 c0       	push   0xc00250f2
c0015afe:	e8 61 14 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015b03:	fa                   	cli    
c0015b04:	83 c4 10             	add    esp,0x10
c0015b07:	eb fe                	jmp    c0015b07 <Thr::runtimeReferenceHelper()+0x11>

c0015b09 <Thr::getAddressOfKernelSymbol(char const*)>:
c0015b09:	57                   	push   edi
c0015b0a:	56                   	push   esi
c0015b0b:	53                   	push   ebx
c0015b0c:	31 db                	xor    ebx,ebx
c0015b0e:	39 1d 00 fa 02 c0    	cmp    DWORD PTR ds:0xc002fa00,ebx
c0015b14:	7e 3c                	jle    c0015b52 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0015b16:	8b 34 9d 80 f9 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd0680]
c0015b1d:	31 ff                	xor    edi,edi
c0015b1f:	39 3c 9d 80 f8 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd0780],edi
c0015b26:	7e 27                	jle    c0015b4f <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0015b28:	50                   	push   eax
c0015b29:	50                   	push   eax
c0015b2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015b2e:	8b 06                	mov    eax,DWORD PTR [esi]
c0015b30:	03 04 9d 00 f9 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd0700]
c0015b37:	50                   	push   eax
c0015b38:	e8 13 ac fe ff       	call   c0000750 <strcmp>
c0015b3d:	83 c4 10             	add    esp,0x10
c0015b40:	85 c0                	test   eax,eax
c0015b42:	75 05                	jne    c0015b49 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0015b44:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0015b47:	eb 0b                	jmp    c0015b54 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0015b49:	83 c6 10             	add    esi,0x10
c0015b4c:	47                   	inc    edi
c0015b4d:	eb d0                	jmp    c0015b1f <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0015b4f:	43                   	inc    ebx
c0015b50:	eb bc                	jmp    c0015b0e <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0015b52:	31 c0                	xor    eax,eax
c0015b54:	5b                   	pop    ebx
c0015b55:	5e                   	pop    esi
c0015b56:	5f                   	pop    edi
c0015b57:	c3                   	ret    

c0015b58 <Thr::loadKernelSymbolTable(char const*)>:
c0015b58:	55                   	push   ebp
c0015b59:	57                   	push   edi
c0015b5a:	56                   	push   esi
c0015b5b:	53                   	push   ebx
c0015b5c:	83 ec 68             	sub    esp,0x68
c0015b5f:	8b 35 58 fa 02 c0    	mov    esi,DWORD PTR ds:0xc002fa58
c0015b65:	68 14 01 00 00       	push   0x114
c0015b6a:	e8 78 a1 ff ff       	call   c000fce7 <malloc>
c0015b6f:	83 c4 0c             	add    esp,0xc
c0015b72:	89 c3                	mov    ebx,eax
c0015b74:	56                   	push   esi
c0015b75:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015b79:	50                   	push   eax
c0015b7a:	e8 e7 25 ff ff       	call   c0008166 <File::File(char const*, Process*)>
c0015b7f:	5e                   	pop    esi
c0015b80:	5f                   	pop    edi
c0015b81:	6a 01                	push   0x1
c0015b83:	53                   	push   ebx
c0015b84:	e8 fb 25 ff ff       	call   c0008184 <File::open(FileOpenMode)>
c0015b89:	83 c4 10             	add    esp,0x10
c0015b8c:	85 c0                	test   eax,eax
c0015b8e:	74 0a                	je     c0015b9a <Thr::loadKernelSymbolTable(char const*)+0x42>
c0015b90:	83 ec 0c             	sub    esp,0xc
c0015b93:	68 14 51 02 c0       	push   0xc0025114
c0015b98:	eb 34                	jmp    c0015bce <Thr::loadKernelSymbolTable(char const*)+0x76>
c0015b9a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015ba2:	83 ec 0c             	sub    esp,0xc
c0015ba5:	6a 34                	push   0x34
c0015ba7:	e8 3b a1 ff ff       	call   c000fce7 <malloc>
c0015bac:	59                   	pop    ecx
c0015bad:	89 c7                	mov    edi,eax
c0015baf:	8d 74 24 34          	lea    esi,[esp+0x34]
c0015bb3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015bb5:	56                   	push   esi
c0015bb6:	57                   	push   edi
c0015bb7:	6a 00                	push   0x0
c0015bb9:	6a 34                	push   0x34
c0015bbb:	53                   	push   ebx
c0015bbc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015bbf:	83 c4 20             	add    esp,0x20
c0015bc2:	85 c0                	test   eax,eax
c0015bc4:	74 17                	je     c0015bdd <Thr::loadKernelSymbolTable(char const*)+0x85>
c0015bc6:	83 ec 0c             	sub    esp,0xc
c0015bc9:	68 2b 51 02 c0       	push   0xc002512b
c0015bce:	e8 5b a4 ff ff       	call   c001002e <KePanic(char const*)>
c0015bd3:	83 c4 10             	add    esp,0x10
c0015bd6:	31 c0                	xor    eax,eax
c0015bd8:	e9 31 02 00 00       	jmp    c0015e0e <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0015bdd:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015be3:	75 e1                	jne    c0015bc6 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015be5:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015be8:	85 c0                	test   eax,eax
c0015bea:	74 da                	je     c0015bc6 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015bec:	52                   	push   edx
c0015bed:	31 d2                	xor    edx,edx
c0015bef:	52                   	push   edx
c0015bf0:	50                   	push   eax
c0015bf1:	53                   	push   ebx
c0015bf2:	e8 4b 26 ff ff       	call   c0008242 <File::seek(unsigned long long)>
c0015bf7:	83 c4 10             	add    esp,0x10
c0015bfa:	85 c0                	test   eax,eax
c0015bfc:	75 c8                	jne    c0015bc6 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015bfe:	83 ec 0c             	sub    esp,0xc
c0015c01:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015c05:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015c09:	31 ed                	xor    ebp,ebp
c0015c0b:	0f af c2             	imul   eax,edx
c0015c0e:	50                   	push   eax
c0015c0f:	e8 d3 a0 ff ff       	call   c000fce7 <malloc>
c0015c14:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015c16:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015c1a:	89 34 24             	mov    DWORD PTR [esp],esi
c0015c1d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015c21:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015c25:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015c29:	0f af c2             	imul   eax,edx
c0015c2c:	99                   	cdq    
c0015c2d:	52                   	push   edx
c0015c2e:	50                   	push   eax
c0015c2f:	53                   	push   ebx
c0015c30:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015c33:	83 c4 20             	add    esp,0x20
c0015c36:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015c3e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015c46:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015c4e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015c56:	0f b7 f5             	movzx  esi,bp
c0015c59:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0015c5d:	0f 83 a7 00 00 00    	jae    c0015d0a <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0015c63:	6b f6 28             	imul   esi,esi,0x28
c0015c66:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015c6a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015c6d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015c71:	50                   	push   eax
c0015c72:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015c76:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0015c7a:	8b 16                	mov    edx,DWORD PTR [esi]
c0015c7c:	6b c0 28             	imul   eax,eax,0x28
c0015c7f:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0015c83:	89 d0                	mov    eax,edx
c0015c85:	31 d2                	xor    edx,edx
c0015c87:	52                   	push   edx
c0015c88:	50                   	push   eax
c0015c89:	53                   	push   ebx
c0015c8a:	e8 b3 25 ff ff       	call   c0008242 <File::seek(unsigned long long)>
c0015c8f:	83 c4 0c             	add    esp,0xc
c0015c92:	6a 20                	push   0x20
c0015c94:	6a 00                	push   0x0
c0015c96:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015c9a:	52                   	push   edx
c0015c9b:	e8 50 a8 fe ff       	call   c00004f0 <memset>
c0015ca0:	58                   	pop    eax
c0015ca1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ca3:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0015ca7:	51                   	push   ecx
c0015ca8:	8d 54 24 40          	lea    edx,[esp+0x40]
c0015cac:	52                   	push   edx
c0015cad:	6a 00                	push   0x0
c0015caf:	6a 1f                	push   0x1f
c0015cb1:	53                   	push   ebx
c0015cb2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015cb5:	83 c4 18             	add    esp,0x18
c0015cb8:	68 42 51 02 c0       	push   0xc0025142
c0015cbd:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015cc1:	52                   	push   edx
c0015cc2:	e8 89 aa fe ff       	call   c0000750 <strcmp>
c0015cc7:	83 c4 10             	add    esp,0x10
c0015cca:	85 c0                	test   eax,eax
c0015ccc:	75 0f                	jne    c0015cdd <Thr::loadKernelSymbolTable(char const*)+0x185>
c0015cce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015cd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015cd5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015cd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015cdd:	50                   	push   eax
c0015cde:	50                   	push   eax
c0015cdf:	68 4a 51 02 c0       	push   0xc002514a
c0015ce4:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0015ce8:	50                   	push   eax
c0015ce9:	e8 62 aa fe ff       	call   c0000750 <strcmp>
c0015cee:	83 c4 10             	add    esp,0x10
c0015cf1:	85 c0                	test   eax,eax
c0015cf3:	75 0f                	jne    c0015d04 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0015cf5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015cf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015cfc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015d00:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015d04:	45                   	inc    ebp
c0015d05:	e9 4c ff ff ff       	jmp    c0015c56 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0015d0a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015d0f:	75 10                	jne    c0015d21 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0015d11:	83 ec 0c             	sub    esp,0xc
c0015d14:	68 52 51 02 c0       	push   0xc0025152
c0015d19:	e8 10 a3 ff ff       	call   c001002e <KePanic(char const*)>
c0015d1e:	83 c4 10             	add    esp,0x10
c0015d21:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0015d26:	75 10                	jne    c0015d38 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0015d28:	83 ec 0c             	sub    esp,0xc
c0015d2b:	68 52 51 02 c0       	push   0xc0025152
c0015d30:	e8 f9 a2 ff ff       	call   c001002e <KePanic(char const*)>
c0015d35:	83 c4 10             	add    esp,0x10
c0015d38:	31 d2                	xor    edx,edx
c0015d3a:	50                   	push   eax
c0015d3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d3f:	52                   	push   edx
c0015d40:	50                   	push   eax
c0015d41:	53                   	push   ebx
c0015d42:	e8 fb 24 ff ff       	call   c0008242 <File::seek(unsigned long long)>
c0015d47:	5a                   	pop    edx
c0015d48:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015d4c:	e8 96 9f ff ff       	call   c000fce7 <malloc>
c0015d51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015d55:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015d59:	31 c9                	xor    ecx,ecx
c0015d5b:	5e                   	pop    esi
c0015d5c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d5e:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0015d62:	55                   	push   ebp
c0015d63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d67:	51                   	push   ecx
c0015d68:	52                   	push   edx
c0015d69:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015d6d:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0015d71:	53                   	push   ebx
c0015d72:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015d75:	83 c4 14             	add    esp,0x14
c0015d78:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015d7c:	e8 66 9f ff ff       	call   c000fce7 <malloc>
c0015d81:	89 c6                	mov    esi,eax
c0015d83:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d85:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015d88:	56                   	push   esi
c0015d89:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0015d8d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015d91:	51                   	push   ecx
c0015d92:	52                   	push   edx
c0015d93:	53                   	push   ebx
c0015d94:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015d97:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015d9b:	8b 15 00 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa00
c0015da1:	83 c4 1c             	add    esp,0x1c
c0015da4:	c1 e8 04             	shr    eax,0x4
c0015da7:	89 04 95 80 f8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0780],eax
c0015dae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015db2:	31 d2                	xor    edx,edx
c0015db4:	52                   	push   edx
c0015db5:	50                   	push   eax
c0015db6:	53                   	push   ebx
c0015db7:	e8 86 24 ff ff       	call   c0008242 <File::seek(unsigned long long)>
c0015dbc:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015dbe:	31 d2                	xor    edx,edx
c0015dc0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015dc3:	56                   	push   esi
c0015dc4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015dc8:	52                   	push   edx
c0015dc9:	50                   	push   eax
c0015dca:	53                   	push   ebx
c0015dcb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015dce:	83 c4 14             	add    esp,0x14
c0015dd1:	53                   	push   ebx
c0015dd2:	e8 0b 24 ff ff       	call   c00081e2 <File::close()>
c0015dd7:	5d                   	pop    ebp
c0015dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015ddc:	e8 16 9f ff ff       	call   c000fcf7 <free>
c0015de1:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015de4:	e8 0e 9f ff ff       	call   c000fcf7 <free>
c0015de9:	a1 00 fa 02 c0       	mov    eax,ds:0xc002fa00
c0015dee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015df2:	8d 50 01             	lea    edx,[eax+0x1]
c0015df5:	89 0c 85 80 f9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0680],ecx
c0015dfc:	89 34 85 00 f9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0700],esi
c0015e03:	89 15 00 fa 02 c0    	mov    DWORD PTR ds:0xc002fa00,edx
c0015e09:	83 c4 10             	add    esp,0x10
c0015e0c:	b0 01                	mov    al,0x1
c0015e0e:	83 c4 5c             	add    esp,0x5c
c0015e11:	5b                   	pop    ebx
c0015e12:	5e                   	pop    esi
c0015e13:	5f                   	pop    edi
c0015e14:	5d                   	pop    ebp
c0015e15:	c3                   	ret    

c0015e16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0015e16:	55                   	push   ebp
c0015e17:	57                   	push   edi
c0015e18:	56                   	push   esi
c0015e19:	53                   	push   ebx
c0015e1a:	81 ec 78 03 00 00    	sub    esp,0x378
c0015e20:	8a 84 24 94 03 00 00 	mov    al,BYTE PTR [esp+0x394]
c0015e27:	8b 1d 58 fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa58
c0015e2d:	88 44 24 57          	mov    BYTE PTR [esp+0x57],al
c0015e31:	68 14 01 00 00       	push   0x114
c0015e36:	e8 ac 9e ff ff       	call   c000fce7 <malloc>
c0015e3b:	83 c4 0c             	add    esp,0xc
c0015e3e:	89 c5                	mov    ebp,eax
c0015e40:	53                   	push   ebx
c0015e41:	ff b4 24 88 03 00 00 	push   DWORD PTR [esp+0x388]
c0015e48:	50                   	push   eax
c0015e49:	e8 18 23 ff ff       	call   c0008166 <File::File(char const*, Process*)>
c0015e4e:	5e                   	pop    esi
c0015e4f:	5f                   	pop    edi
c0015e50:	6a 01                	push   0x1
c0015e52:	55                   	push   ebp
c0015e53:	e8 2c 23 ff ff       	call   c0008184 <File::open(FileOpenMode)>
c0015e58:	83 c4 10             	add    esp,0x10
c0015e5b:	85 c0                	test   eax,eax
c0015e5d:	0f 85 70 07 00 00    	jne    c00165d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7bd>
c0015e63:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0015e6b:	83 ec 0c             	sub    esp,0xc
c0015e6e:	6a 34                	push   0x34
c0015e70:	e8 72 9e ff ff       	call   c000fce7 <malloc>
c0015e75:	5b                   	pop    ebx
c0015e76:	89 c7                	mov    edi,eax
c0015e78:	8d 5c 24 64          	lea    ebx,[esp+0x64]
c0015e7c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015e7f:	53                   	push   ebx
c0015e80:	57                   	push   edi
c0015e81:	6a 00                	push   0x0
c0015e83:	6a 34                	push   0x34
c0015e85:	55                   	push   ebp
c0015e86:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015e89:	83 c4 20             	add    esp,0x20
c0015e8c:	85 c0                	test   eax,eax
c0015e8e:	0f 85 3f 07 00 00    	jne    c00165d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7bd>
c0015e94:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015e9a:	0f 85 33 07 00 00    	jne    c00165d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7bd>
c0015ea0:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015ea3:	85 c0                	test   eax,eax
c0015ea5:	0f 84 28 07 00 00    	je     c00165d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7bd>
c0015eab:	31 d2                	xor    edx,edx
c0015ead:	51                   	push   ecx
c0015eae:	52                   	push   edx
c0015eaf:	50                   	push   eax
c0015eb0:	55                   	push   ebp
c0015eb1:	e8 8c 23 ff ff       	call   c0008242 <File::seek(unsigned long long)>
c0015eb6:	83 c4 10             	add    esp,0x10
c0015eb9:	85 c0                	test   eax,eax
c0015ebb:	0f 85 12 07 00 00    	jne    c00165d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7bd>
c0015ec1:	83 ec 0c             	sub    esp,0xc
c0015ec4:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0015ec7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015ecb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015ecf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015ed3:	0f af c2             	imul   eax,edx
c0015ed6:	50                   	push   eax
c0015ed7:	e8 0b 9e ff ff       	call   c000fce7 <malloc>
c0015edc:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015edf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015ee3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ee6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015eea:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015eee:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015ef2:	0f af c2             	imul   eax,edx
c0015ef5:	99                   	cdq    
c0015ef6:	52                   	push   edx
c0015ef7:	50                   	push   eax
c0015ef8:	55                   	push   ebp
c0015ef9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015efc:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0015eff:	83 c4 20             	add    esp,0x20
c0015f02:	85 c0                	test   eax,eax
c0015f04:	0f 84 c9 06 00 00    	je     c00165d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7bd>
c0015f0a:	52                   	push   edx
c0015f0b:	31 d2                	xor    edx,edx
c0015f0d:	52                   	push   edx
c0015f0e:	50                   	push   eax
c0015f0f:	55                   	push   ebp
c0015f10:	e8 2d 23 ff ff       	call   c0008242 <File::seek(unsigned long long)>
c0015f15:	83 c4 10             	add    esp,0x10
c0015f18:	85 c0                	test   eax,eax
c0015f1a:	0f 85 b3 06 00 00    	jne    c00165d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7bd>
c0015f20:	83 ec 0c             	sub    esp,0xc
c0015f23:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015f27:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015f2b:	31 f6                	xor    esi,esi
c0015f2d:	0f af c2             	imul   eax,edx
c0015f30:	50                   	push   eax
c0015f31:	e8 b1 9d ff ff       	call   c000fce7 <malloc>
c0015f36:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015f39:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015f3d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f40:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f44:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015f48:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015f4c:	0f af c2             	imul   eax,edx
c0015f4f:	99                   	cdq    
c0015f50:	52                   	push   edx
c0015f51:	50                   	push   eax
c0015f52:	55                   	push   ebp
c0015f53:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015f56:	83 c4 20             	add    esp,0x20
c0015f59:	0f b7 de             	movzx  ebx,si
c0015f5c:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0015f60:	0f 83 87 00 00 00    	jae    c0015fed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0015f66:	c1 e3 05             	shl    ebx,0x5
c0015f69:	03 5c 24 20          	add    ebx,DWORD PTR [esp+0x20]
c0015f6d:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0015f70:	75 75                	jne    c0015fe7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0015f72:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015f75:	31 d2                	xor    edx,edx
c0015f77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015f7b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015f7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015f82:	50                   	push   eax
c0015f83:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0015f86:	52                   	push   edx
c0015f87:	50                   	push   eax
c0015f88:	55                   	push   ebp
c0015f89:	e8 b4 22 ff ff       	call   c0008242 <File::seek(unsigned long long)>
c0015f8e:	83 c4 10             	add    esp,0x10
c0015f91:	85 c0                	test   eax,eax
c0015f93:	0f 85 3a 06 00 00    	jne    c00165d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7bd>
c0015f99:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c0015fa0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015fa3:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0015fa7:	31 d2                	xor    edx,edx
c0015fa9:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0015fad:	83 ec 0c             	sub    esp,0xc
c0015fb0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015fb4:	8d 84 24 6c 02 00 00 	lea    eax,[esp+0x26c]
c0015fbb:	50                   	push   eax
c0015fbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015fc0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015fc4:	52                   	push   edx
c0015fc5:	50                   	push   eax
c0015fc6:	55                   	push   ebp
c0015fc7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015fca:	83 c4 1c             	add    esp,0x1c
c0015fcd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015fd0:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0015fd3:	50                   	push   eax
c0015fd4:	6a 00                	push   0x0
c0015fd6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015fda:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c0015fde:	50                   	push   eax
c0015fdf:	e8 0c a5 fe ff       	call   c00004f0 <memset>
c0015fe4:	83 c4 10             	add    esp,0x10
c0015fe7:	46                   	inc    esi
c0015fe8:	e9 6c ff ff ff       	jmp    c0015f59 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0015fed:	53                   	push   ebx
c0015fee:	31 db                	xor    ebx,ebx
c0015ff0:	68 00 01 00 00       	push   0x100
c0015ff5:	6a 00                	push   0x0
c0015ff7:	8d 44 24 6c          	lea    eax,[esp+0x6c]
c0015ffb:	50                   	push   eax
c0015ffc:	e8 ef a4 fe ff       	call   c00004f0 <memset>
c0016001:	83 c4 0c             	add    esp,0xc
c0016004:	68 00 01 00 00       	push   0x100
c0016009:	6a 00                	push   0x0
c001600b:	8d 84 24 6c 01 00 00 	lea    eax,[esp+0x16c]
c0016012:	50                   	push   eax
c0016013:	e8 d8 a4 fe ff       	call   c00004f0 <memset>
c0016018:	83 c4 10             	add    esp,0x10
c001601b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016023:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001602b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016033:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001603b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016043:	0f b7 f3             	movzx  esi,bx
c0016046:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c001604a:	0f 83 2d 01 00 00    	jae    c001617d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0016050:	6b f6 28             	imul   esi,esi,0x28
c0016053:	03 74 24 14          	add    esi,DWORD PTR [esp+0x14]
c0016057:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001605a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001605e:	52                   	push   edx
c001605f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016063:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0016067:	8b 06                	mov    eax,DWORD PTR [esi]
c0016069:	6b d2 28             	imul   edx,edx,0x28
c001606c:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0016070:	31 d2                	xor    edx,edx
c0016072:	52                   	push   edx
c0016073:	50                   	push   eax
c0016074:	55                   	push   ebp
c0016075:	e8 c8 21 ff ff       	call   c0008242 <File::seek(unsigned long long)>
c001607a:	83 c4 0c             	add    esp,0xc
c001607d:	6a 20                	push   0x20
c001607f:	6a 00                	push   0x0
c0016081:	8d 8c 24 6c 02 00 00 	lea    ecx,[esp+0x26c]
c0016088:	51                   	push   ecx
c0016089:	e8 62 a4 fe ff       	call   c00004f0 <memset>
c001608e:	59                   	pop    ecx
c001608f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016092:	8d 54 24 68          	lea    edx,[esp+0x68]
c0016096:	52                   	push   edx
c0016097:	8d 8c 24 70 02 00 00 	lea    ecx,[esp+0x270]
c001609e:	51                   	push   ecx
c001609f:	6a 00                	push   0x0
c00160a1:	6a 1f                	push   0x1f
c00160a3:	55                   	push   ebp
c00160a4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00160a7:	83 c4 1c             	add    esp,0x1c
c00160aa:	6a 09                	push   0x9
c00160ac:	68 6c 51 02 c0       	push   0xc002516c
c00160b1:	8d 8c 24 6c 02 00 00 	lea    ecx,[esp+0x26c]
c00160b8:	51                   	push   ecx
c00160b9:	e8 c2 a2 fe ff       	call   c0000380 <memcmp>
c00160be:	83 c4 10             	add    esp,0x10
c00160c1:	85 c0                	test   eax,eax
c00160c3:	75 21                	jne    c00160e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00160c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00160cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00160d1:	89 54 84 60          	mov    DWORD PTR [esp+eax*4+0x60],edx
c00160d5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00160d8:	89 84 8c 60 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x160],eax
c00160df:	89 c8                	mov    eax,ecx
c00160e1:	40                   	inc    eax
c00160e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00160e6:	50                   	push   eax
c00160e7:	6a 09                	push   0x9
c00160e9:	68 76 51 02 c0       	push   0xc0025176
c00160ee:	8d 84 24 6c 02 00 00 	lea    eax,[esp+0x26c]
c00160f5:	50                   	push   eax
c00160f6:	e8 85 a2 fe ff       	call   c0000380 <memcmp>
c00160fb:	83 c4 10             	add    esp,0x10
c00160fe:	85 c0                	test   eax,eax
c0016100:	75 21                	jne    c0016123 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0016102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016106:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001610a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001610e:	89 54 84 60          	mov    DWORD PTR [esp+eax*4+0x60],edx
c0016112:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016115:	89 84 8c 60 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x160],eax
c001611c:	89 c8                	mov    eax,ecx
c001611e:	40                   	inc    eax
c001611f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016123:	50                   	push   eax
c0016124:	50                   	push   eax
c0016125:	68 42 51 02 c0       	push   0xc0025142
c001612a:	8d 84 24 6c 02 00 00 	lea    eax,[esp+0x26c]
c0016131:	50                   	push   eax
c0016132:	e8 19 a6 fe ff       	call   c0000750 <strcmp>
c0016137:	83 c4 10             	add    esp,0x10
c001613a:	85 c0                	test   eax,eax
c001613c:	75 0f                	jne    c001614d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001613e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016141:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016145:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016149:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001614d:	50                   	push   eax
c001614e:	50                   	push   eax
c001614f:	68 4a 51 02 c0       	push   0xc002514a
c0016154:	8d 84 24 6c 02 00 00 	lea    eax,[esp+0x26c]
c001615b:	50                   	push   eax
c001615c:	e8 ef a5 fe ff       	call   c0000750 <strcmp>
c0016161:	83 c4 10             	add    esp,0x10
c0016164:	85 c0                	test   eax,eax
c0016166:	75 0f                	jne    c0016177 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0016168:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001616b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001616f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016173:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016177:	43                   	inc    ebx
c0016178:	e9 c6 fe ff ff       	jmp    c0016043 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001617d:	31 d2                	xor    edx,edx
c001617f:	50                   	push   eax
c0016180:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016184:	52                   	push   edx
c0016185:	50                   	push   eax
c0016186:	55                   	push   ebp
c0016187:	e8 b6 20 ff ff       	call   c0008242 <File::seek(unsigned long long)>
c001618c:	58                   	pop    eax
c001618d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016191:	e8 51 9b ff ff       	call   c000fce7 <malloc>
c0016196:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016199:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001619d:	31 d2                	xor    edx,edx
c001619f:	58                   	pop    eax
c00161a0:	8d 5c 24 64          	lea    ebx,[esp+0x64]
c00161a4:	53                   	push   ebx
c00161a5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00161a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00161ad:	52                   	push   edx
c00161ae:	50                   	push   eax
c00161af:	55                   	push   ebp
c00161b0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00161b3:	83 c4 14             	add    esp,0x14
c00161b6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00161ba:	e8 28 9b ff ff       	call   c000fce7 <malloc>
c00161bf:	31 d2                	xor    edx,edx
c00161c1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00161c5:	83 c4 0c             	add    esp,0xc
c00161c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00161cc:	52                   	push   edx
c00161cd:	50                   	push   eax
c00161ce:	55                   	push   ebp
c00161cf:	e8 6e 20 ff ff       	call   c0008242 <File::seek(unsigned long long)>
c00161d4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00161d7:	31 d2                	xor    edx,edx
c00161d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00161dc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00161e0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00161e4:	52                   	push   edx
c00161e5:	50                   	push   eax
c00161e6:	55                   	push   ebp
c00161e7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00161ea:	83 c4 20             	add    esp,0x20
c00161ed:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c00161f2:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00161fa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00161fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016202:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c0016206:	0f 84 cb 03 00 00    	je     c00165d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7c1>
c001620c:	8b 84 94 60 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x160]
c0016213:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016217:	31 d2                	xor    edx,edx
c0016219:	c1 e8 03             	shr    eax,0x3
c001621c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0016220:	51                   	push   ecx
c0016221:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016225:	8b 44 84 64          	mov    eax,DWORD PTR [esp+eax*4+0x64]
c0016229:	52                   	push   edx
c001622a:	50                   	push   eax
c001622b:	55                   	push   ebp
c001622c:	e8 11 20 ff ff       	call   c0008242 <File::seek(unsigned long long)>
c0016231:	5b                   	pop    ebx
c0016232:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016236:	ff b4 84 6c 01 00 00 	push   DWORD PTR [esp+eax*4+0x16c]
c001623d:	e8 a5 9a ff ff       	call   c000fce7 <malloc>
c0016242:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016245:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016249:	31 d2                	xor    edx,edx
c001624b:	5e                   	pop    esi
c001624c:	8d 44 24 68          	lea    eax,[esp+0x68]
c0016250:	50                   	push   eax
c0016251:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016255:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016259:	8b 84 84 74 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x174]
c0016260:	52                   	push   edx
c0016261:	50                   	push   eax
c0016262:	55                   	push   ebp
c0016263:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016266:	83 c4 20             	add    esp,0x20
c0016269:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0016271:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0016275:	39 4c 24 30          	cmp    DWORD PTR [esp+0x30],ecx
c0016279:	0f 8d 3c 03 00 00    	jge    c00165bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7a5>
c001627f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016283:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016287:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001628b:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001628e:	83 ec 0c             	sub    esp,0xc
c0016291:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0016295:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016299:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001629d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00162a1:	c1 e8 08             	shr    eax,0x8
c00162a4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00162a8:	89 c3                	mov    ebx,eax
c00162aa:	c1 e3 04             	shl    ebx,0x4
c00162ad:	03 5c 24 50          	add    ebx,DWORD PTR [esp+0x50]
c00162b1:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00162b4:	03 33                	add    esi,DWORD PTR [ebx]
c00162b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00162ba:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00162be:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00162c2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00162c6:	56                   	push   esi
c00162c7:	68 80 51 02 c0       	push   0xc0025180
c00162cc:	e8 93 0c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00162d1:	83 c4 20             	add    esp,0x20
c00162d4:	c6 44 24 4a 00       	mov    BYTE PTR [esp+0x4a],0x0
c00162d9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00162de:	0f 85 92 00 00 00    	jne    c0016376 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x560>
c00162e4:	83 ec 0c             	sub    esp,0xc
c00162e7:	56                   	push   esi
c00162e8:	e8 1c f8 ff ff       	call   c0015b09 <Thr::getAddressOfKernelSymbol(char const*)>
c00162ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00162f1:	83 c4 10             	add    esp,0x10
c00162f4:	c6 44 24 4a 01       	mov    BYTE PTR [esp+0x4a],0x1
c00162f9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00162fe:	75 76                	jne    c0016376 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x560>
c0016300:	83 ec 0c             	sub    esp,0xc
c0016303:	56                   	push   esi
c0016304:	e8 b7 a7 ff ff       	call   c0010ac0 <KeResolveCompatibilitySymbol(char*)>
c0016309:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001630d:	83 c4 10             	add    esp,0x10
c0016310:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016315:	75 5f                	jne    c0016376 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x560>
c0016317:	50                   	push   eax
c0016318:	50                   	push   eax
c0016319:	56                   	push   esi
c001631a:	68 b3 51 02 c0       	push   0xc00251b3
c001631f:	e8 40 0c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016324:	58                   	pop    eax
c0016325:	5a                   	pop    edx
c0016326:	68 cd 51 02 c0       	push   0xc00251cd
c001632b:	8d b4 24 6c 02 00 00 	lea    esi,[esp+0x26c]
c0016332:	56                   	push   esi
c0016333:	e8 08 a3 fe ff       	call   c0000640 <strcpy>
c0016338:	59                   	pop    ecx
c0016339:	58                   	pop    eax
c001633a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001633e:	03 03                	add    eax,DWORD PTR [ebx]
c0016340:	50                   	push   eax
c0016341:	56                   	push   esi
c0016342:	e8 f9 a4 fe ff       	call   c0000840 <strcat>
c0016347:	58                   	pop    eax
c0016348:	5a                   	pop    edx
c0016349:	68 6f 53 02 c0       	push   0xc002536f
c001634e:	56                   	push   esi
c001634f:	e8 ec a4 fe ff       	call   c0000840 <strcat>
c0016354:	83 c4 10             	add    esp,0x10
c0016357:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c001635c:	0f 84 13 02 00 00    	je     c0016575 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75f>
c0016362:	83 ec 0c             	sub    esp,0xc
c0016365:	56                   	push   esi
c0016366:	e8 c3 9c ff ff       	call   c001002e <KePanic(char const*)>
c001636b:	83 c4 10             	add    esp,0x10
c001636e:	8a 44 24 4b          	mov    al,BYTE PTR [esp+0x4b]
c0016372:	88 44 24 4a          	mov    BYTE PTR [esp+0x4a],al
c0016376:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c001637b:	83 f8 01             	cmp    eax,0x1
c001637e:	0f 85 de 00 00 00    	jne    c0016462 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64c>
c0016384:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c001638b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001638f:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0016393:	01 c3                	add    ebx,eax
c0016395:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0016399:	81 7c 24 24 01 04 00 00 	cmp    DWORD PTR [esp+0x24],0x401
c00163a1:	0f 94 c0             	sete   al
c00163a4:	81 7c 24 24 01 01 00 00 	cmp    DWORD PTR [esp+0x24],0x101
c00163ac:	0f 94 c2             	sete   dl
c00163af:	09 d0                	or     eax,edx
c00163b1:	80 7c 24 4a 00       	cmp    BYTE PTR [esp+0x4a],0x0
c00163b6:	0f b6 c0             	movzx  eax,al
c00163b9:	74 54                	je     c001640f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f9>
c00163bb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00163bf:	83 ec 0c             	sub    esp,0xc
c00163c2:	68 e4 51 02 c0       	push   0xc00251e4
c00163c7:	e8 98 0b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00163cc:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00163d0:	83 c4 10             	add    esp,0x10
c00163d3:	03 33                	add    esi,DWORD PTR [ebx]
c00163d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00163d9:	85 c0                	test   eax,eax
c00163db:	75 15                	jne    c00163f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5dc>
c00163dd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00163e1:	66 83 f8 0c          	cmp    ax,0xc
c00163e5:	76 05                	jbe    c00163ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d6>
c00163e7:	b8 0c 00 00 00       	mov    eax,0xc
c00163ec:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00163f0:	76 62                	jbe    c0016454 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c00163f2:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00163f7:	0f 84 78 01 00 00    	je     c0016575 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75f>
c00163fd:	83 ec 0c             	sub    esp,0xc
c0016400:	68 ee 51 02 c0       	push   0xc00251ee
c0016405:	e8 24 9c ff ff       	call   c001002e <KePanic(char const*)>
c001640a:	83 c4 10             	add    esp,0x10
c001640d:	eb 45                	jmp    c0016454 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c001640f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016413:	03 33                	add    esi,DWORD PTR [ebx]
c0016415:	85 c0                	test   eax,eax
c0016417:	75 0a                	jne    c0016423 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60d>
c0016419:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001641d:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0016421:	76 0a                	jbe    c001642d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x617>
c0016423:	83 ec 0c             	sub    esp,0xc
c0016426:	68 0a 52 02 c0       	push   0xc002520a
c001642b:	eb 0c                	jmp    c0016439 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x623>
c001642d:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0016431:	83 ec 0c             	sub    esp,0xc
c0016434:	68 13 52 02 c0       	push   0xc0025213
c0016439:	e8 26 0b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001643e:	83 c4 10             	add    esp,0x10
c0016441:	8d 86 00 00 00 28    	lea    eax,[esi+0x28000000]
c0016447:	3d ff ff ff 00       	cmp    eax,0xffffff
c001644c:	77 06                	ja     c0016454 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c001644e:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016452:	03 33                	add    esi,DWORD PTR [ebx]
c0016454:	56                   	push   esi
c0016455:	53                   	push   ebx
c0016456:	ff 33                	push   DWORD PTR [ebx]
c0016458:	68 1c 52 02 c0       	push   0xc002521c
c001645d:	e9 c2 00 00 00       	jmp    c0016524 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x70e>
c0016462:	83 f8 02             	cmp    eax,0x2
c0016465:	0f 85 e1 00 00 00    	jne    c001654c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c001646b:	8b 9c 24 84 03 00 00 	mov    ebx,DWORD PTR [esp+0x384]
c0016472:	2b 5c 24 1c          	sub    ebx,DWORD PTR [esp+0x1c]
c0016476:	03 5c 24 2c          	add    ebx,DWORD PTR [esp+0x2c]
c001647a:	81 7c 24 24 01 04 00 00 	cmp    DWORD PTR [esp+0x24],0x401
c0016482:	74 21                	je     c00164a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68f>
c0016484:	81 7c 24 24 01 01 00 00 	cmp    DWORD PTR [esp+0x24],0x101
c001648c:	74 17                	je     c00164a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68f>
c001648e:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0016492:	b8 0a 00 00 00       	mov    eax,0xa
c0016497:	83 fa 0e             	cmp    edx,0xe
c001649a:	77 03                	ja     c001649f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x689>
c001649c:	8d 42 fc             	lea    eax,[edx-0x4]
c001649f:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00164a3:	76 48                	jbe    c00164ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d7>
c00164a5:	56                   	push   esi
c00164a6:	53                   	push   ebx
c00164a7:	ff 33                	push   DWORD PTR [ebx]
c00164a9:	68 8d 52 02 c0       	push   0xc002528d
c00164ae:	e8 b1 0a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00164b3:	58                   	pop    eax
c00164b4:	ff 33                	push   DWORD PTR [ebx]
c00164b6:	ff b4 24 94 03 00 00 	push   DWORD PTR [esp+0x394]
c00164bd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00164c1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00164c5:	68 57 52 02 c0       	push   0xc0025257
c00164ca:	e8 95 0a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00164cf:	83 c4 20             	add    esp,0x20
c00164d2:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00164d7:	0f 84 98 00 00 00    	je     c0016575 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75f>
c00164dd:	83 ec 0c             	sub    esp,0xc
c00164e0:	68 cb 52 02 c0       	push   0xc00252cb
c00164e5:	e8 44 9b ff ff       	call   c001002e <KePanic(char const*)>
c00164ea:	83 c4 10             	add    esp,0x10
c00164ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00164ef:	80 7c 24 4a 00       	cmp    BYTE PTR [esp+0x4a],0x0
c00164f4:	74 13                	je     c0016509 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f3>
c00164f6:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00164fa:	2b b4 24 84 03 00 00 	sub    esi,DWORD PTR [esp+0x384]
c0016501:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c0016505:	01 c6                	add    esi,eax
c0016507:	eb 06                	jmp    c001650f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f9>
c0016509:	89 c6                	mov    esi,eax
c001650b:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001650f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0016513:	3d fe ff 0f 00       	cmp    eax,0xffffe
c0016518:	77 02                	ja     c001651c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c001651a:	89 c6                	mov    esi,eax
c001651c:	56                   	push   esi
c001651d:	53                   	push   ebx
c001651e:	50                   	push   eax
c001651f:	68 e7 52 02 c0       	push   0xc00252e7
c0016524:	e8 3b 0a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016529:	59                   	pop    ecx
c001652a:	ff 33                	push   DWORD PTR [ebx]
c001652c:	ff b4 24 94 03 00 00 	push   DWORD PTR [esp+0x394]
c0016533:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016537:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001653b:	68 57 52 02 c0       	push   0xc0025257
c0016540:	e8 1f 0a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016545:	89 33                	mov    DWORD PTR [ebx],esi
c0016547:	83 c4 20             	add    esp,0x20
c001654a:	eb 66                	jmp    c00165b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x79c>
c001654c:	52                   	push   edx
c001654d:	52                   	push   edx
c001654e:	50                   	push   eax
c001654f:	68 24 53 02 c0       	push   0xc0025324
c0016554:	e8 0b 0a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016559:	83 c4 10             	add    esp,0x10
c001655c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0016561:	74 12                	je     c0016575 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75f>
c0016563:	83 ec 0c             	sub    esp,0xc
c0016566:	68 2f 53 02 c0       	push   0xc002532f
c001656b:	e8 be 9a ff ff       	call   c001002e <KePanic(char const*)>
c0016570:	83 c4 10             	add    esp,0x10
c0016573:	eb 3d                	jmp    c00165b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x79c>
c0016575:	83 ec 0c             	sub    esp,0xc
c0016578:	55                   	push   ebp
c0016579:	e8 64 1c ff ff       	call   c00081e2 <File::close()>
c001657e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016581:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016584:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016587:	59                   	pop    ecx
c0016588:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001658c:	e8 66 97 ff ff       	call   c000fcf7 <free>
c0016591:	5b                   	pop    ebx
c0016592:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016596:	e8 5c 97 ff ff       	call   c000fcf7 <free>
c001659b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001659e:	e8 54 97 ff ff       	call   c000fcf7 <free>
c00165a3:	5e                   	pop    esi
c00165a4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00165a8:	e8 4a 97 ff ff       	call   c000fcf7 <free>
c00165ad:	83 c4 10             	add    esp,0x10
c00165b0:	eb 21                	jmp    c00165d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7bd>
c00165b2:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c00165b6:	e9 b6 fc ff ff       	jmp    c0016271 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c00165bb:	83 ec 0c             	sub    esp,0xc
c00165be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00165c2:	e8 30 97 ff ff       	call   c000fcf7 <free>
c00165c7:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00165cb:	83 c4 10             	add    esp,0x10
c00165ce:	e9 2b fc ff ff       	jmp    c00161fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c00165d3:	31 c0                	xor    eax,eax
c00165d5:	eb 33                	jmp    c001660a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x7f4>
c00165d7:	83 ec 0c             	sub    esp,0xc
c00165da:	55                   	push   ebp
c00165db:	e8 02 1c ff ff       	call   c00081e2 <File::close()>
c00165e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00165e3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00165e6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00165e9:	58                   	pop    eax
c00165ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00165ee:	e8 04 97 ff ff       	call   c000fcf7 <free>
c00165f3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00165f6:	e8 fc 96 ff ff       	call   c000fcf7 <free>
c00165fb:	5a                   	pop    edx
c00165fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016600:	e8 f2 96 ff ff       	call   c000fcf7 <free>
c0016605:	83 c4 10             	add    esp,0x10
c0016608:	b0 01                	mov    al,0x1
c001660a:	81 c4 6c 03 00 00    	add    esp,0x36c
c0016610:	5b                   	pop    ebx
c0016611:	5e                   	pop    esi
c0016612:	5f                   	pop    edi
c0016613:	5d                   	pop    ebp
c0016614:	c3                   	ret    

c0016615 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0016615:	56                   	push   esi
c0016616:	31 d2                	xor    edx,edx
c0016618:	53                   	push   ebx
c0016619:	8b 1d 60 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f260
c001661f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016623:	39 d3                	cmp    ebx,edx
c0016625:	7e 1b                	jle    c0016642 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0016627:	8b 04 95 80 f4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0b80]
c001662e:	39 c8                	cmp    eax,ecx
c0016630:	77 0d                	ja     c001663f <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0016632:	8b 34 95 80 f2 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd0d80]
c0016639:	01 c6                	add    esi,eax
c001663b:	39 ce                	cmp    esi,ecx
c001663d:	77 05                	ja     c0016644 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001663f:	42                   	inc    edx
c0016640:	eb e1                	jmp    c0016623 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0016642:	31 c0                	xor    eax,eax
c0016644:	5b                   	pop    ebx
c0016645:	5e                   	pop    esi
c0016646:	c3                   	ret    

c0016647 <Thr::getDriverNameFromAddress(unsigned long)>:
c0016647:	53                   	push   ebx
c0016648:	31 c0                	xor    eax,eax
c001664a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001664e:	8b 1d 60 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f260
c0016654:	39 c3                	cmp    ebx,eax
c0016656:	7e 22                	jle    c001667a <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0016658:	8b 14 85 80 f4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0b80]
c001665f:	39 ca                	cmp    edx,ecx
c0016661:	77 14                	ja     c0016677 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0016663:	03 14 85 80 f2 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd0d80]
c001666a:	39 ca                	cmp    edx,ecx
c001666c:	76 09                	jbe    c0016677 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001666e:	8b 04 85 80 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0980]
c0016675:	eb 05                	jmp    c001667c <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0016677:	40                   	inc    eax
c0016678:	eb da                	jmp    c0016654 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001667a:	31 c0                	xor    eax,eax
c001667c:	5b                   	pop    ebx
c001667d:	c3                   	ret    

c001667e <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001667e:	53                   	push   ebx
c001667f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0016683:	53                   	push   ebx
c0016684:	e8 8c ff ff ff       	call   c0016615 <Thr::getDriverBaseFromAddress(unsigned long)>
c0016689:	5a                   	pop    edx
c001668a:	31 d2                	xor    edx,edx
c001668c:	85 c0                	test   eax,eax
c001668e:	74 04                	je     c0016694 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0016690:	89 da                	mov    edx,ebx
c0016692:	29 c2                	sub    edx,eax
c0016694:	89 d0                	mov    eax,edx
c0016696:	5b                   	pop    ebx
c0016697:	c3                   	ret    

c0016698 <Thr::loadDLL(char const*, bool)>:
c0016698:	55                   	push   ebp
c0016699:	57                   	push   edi
c001669a:	56                   	push   esi
c001669b:	53                   	push   ebx
c001669c:	81 ec 34 01 00 00    	sub    esp,0x134
c00166a2:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00166a9:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00166b0:	56                   	push   esi
c00166b1:	68 47 53 02 c0       	push   0xc0025347
c00166b6:	e8 a9 08 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00166bb:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00166c2:	e8 20 96 ff ff       	call   c000fce7 <malloc>
c00166c7:	83 c4 0c             	add    esp,0xc
c00166ca:	89 c3                	mov    ebx,eax
c00166cc:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c00166d2:	56                   	push   esi
c00166d3:	50                   	push   eax
c00166d4:	e8 8d 1a ff ff       	call   c0008166 <File::File(char const*, Process*)>
c00166d9:	83 c4 10             	add    esp,0x10
c00166dc:	85 db                	test   ebx,ebx
c00166de:	75 3c                	jne    c001671c <Thr::loadDLL(char const*, bool)+0x84>
c00166e0:	89 f8                	mov    eax,edi
c00166e2:	84 c0                	test   al,al
c00166e4:	0f 84 f3 01 00 00    	je     c00168dd <Thr::loadDLL(char const*, bool)+0x245>
c00166ea:	55                   	push   ebp
c00166eb:	55                   	push   ebp
c00166ec:	68 58 53 02 c0       	push   0xc0025358
c00166f1:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00166f5:	55                   	push   ebp
c00166f6:	e8 45 9f fe ff       	call   c0000640 <strcpy>
c00166fb:	58                   	pop    eax
c00166fc:	5a                   	pop    edx
c00166fd:	56                   	push   esi
c00166fe:	55                   	push   ebp
c00166ff:	e8 3c a1 fe ff       	call   c0000840 <strcat>
c0016704:	59                   	pop    ecx
c0016705:	58                   	pop    eax
c0016706:	68 6f 53 02 c0       	push   0xc002536f
c001670b:	55                   	push   ebp
c001670c:	e8 2f a1 fe ff       	call   c0000840 <strcat>
c0016711:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016714:	e8 15 99 ff ff       	call   c001002e <KePanic(char const*)>
c0016719:	83 c4 10             	add    esp,0x10
c001671c:	51                   	push   ecx
c001671d:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0016721:	50                   	push   eax
c0016722:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016726:	50                   	push   eax
c0016727:	53                   	push   ebx
c0016728:	e8 59 1d ff ff       	call   c0008486 <File::stat(unsigned long long*, bool*)>
c001672d:	83 c4 10             	add    esp,0x10
c0016730:	89 c5                	mov    ebp,eax
c0016732:	85 db                	test   ebx,ebx
c0016734:	74 0c                	je     c0016742 <Thr::loadDLL(char const*, bool)+0xaa>
c0016736:	83 ec 0c             	sub    esp,0xc
c0016739:	8b 03                	mov    eax,DWORD PTR [ebx]
c001673b:	53                   	push   ebx
c001673c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001673f:	83 c4 10             	add    esp,0x10
c0016742:	83 ec 0c             	sub    esp,0xc
c0016745:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001674a:	50                   	push   eax
c001674b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001674f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016753:	55                   	push   ebp
c0016754:	68 71 53 02 c0       	push   0xc0025371
c0016759:	e8 06 08 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001675e:	83 c4 20             	add    esp,0x20
c0016761:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0016766:	75 0a                	jne    c0016772 <Thr::loadDLL(char const*, bool)+0xda>
c0016768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001676c:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0016770:	75 3c                	jne    c00167ae <Thr::loadDLL(char const*, bool)+0x116>
c0016772:	89 f8                	mov    eax,edi
c0016774:	84 c0                	test   al,al
c0016776:	0f 84 49 01 00 00    	je     c00168c5 <Thr::loadDLL(char const*, bool)+0x22d>
c001677c:	51                   	push   ecx
c001677d:	51                   	push   ecx
c001677e:	68 92 53 02 c0       	push   0xc0025392
c0016783:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0016787:	53                   	push   ebx
c0016788:	e8 b3 9e fe ff       	call   c0000640 <strcpy>
c001678d:	5d                   	pop    ebp
c001678e:	58                   	pop    eax
c001678f:	56                   	push   esi
c0016790:	53                   	push   ebx
c0016791:	e8 aa a0 fe ff       	call   c0000840 <strcat>
c0016796:	58                   	pop    eax
c0016797:	5a                   	pop    edx
c0016798:	68 6f 53 02 c0       	push   0xc002536f
c001679d:	53                   	push   ebx
c001679e:	e8 9d a0 fe ff       	call   c0000840 <strcat>
c00167a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00167a6:	e8 83 98 ff ff       	call   c001002e <KePanic(char const*)>
c00167ab:	83 c4 10             	add    esp,0x10
c00167ae:	52                   	push   edx
c00167af:	6a 03                	push   0x3
c00167b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167b5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00167b9:	05 ff 0f 00 00       	add    eax,0xfff
c00167be:	83 d2 00             	adc    edx,0x0
c00167c1:	0f ac d0 0c          	shrd   eax,edx,0xc
c00167c5:	50                   	push   eax
c00167c6:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c00167cc:	e8 e3 d4 ff ff       	call   c0013cb4 <VAS::allocatePages(int, int)>
c00167d1:	59                   	pop    ecx
c00167d2:	89 c3                	mov    ebx,eax
c00167d4:	5d                   	pop    ebp
c00167d5:	50                   	push   eax
c00167d6:	68 26 45 02 c0       	push   0xc0024526
c00167db:	e8 84 07 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00167e0:	89 34 24             	mov    DWORD PTR [esp],esi
c00167e3:	e8 88 9d fe ff       	call   c0000570 <strlen>
c00167e8:	8b 2d 60 f2 02 c0    	mov    ebp,DWORD PTR ds:0xc002f260
c00167ee:	40                   	inc    eax
c00167ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00167f2:	e8 f0 94 ff ff       	call   c000fce7 <malloc>
c00167f7:	89 04 ad 80 f6 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd0980],eax
c00167fe:	58                   	pop    eax
c00167ff:	a1 60 f2 02 c0       	mov    eax,ds:0xc002f260
c0016804:	5a                   	pop    edx
c0016805:	56                   	push   esi
c0016806:	ff 34 85 80 f6 02 c0 	push   DWORD PTR [eax*4-0x3ffd0980]
c001680d:	e8 2e 9e fe ff       	call   c0000640 <strcpy>
c0016812:	a1 60 f2 02 c0       	mov    eax,ds:0xc002f260
c0016817:	8d 50 01             	lea    edx,[eax+0x1]
c001681a:	89 1c 85 80 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0b80],ebx
c0016821:	89 15 60 f2 02 c0    	mov    DWORD PTR ds:0xc002f260,edx
c0016827:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001682b:	83 c4 0c             	add    esp,0xc
c001682e:	89 14 85 80 f2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0d80],edx
c0016835:	6a 01                	push   0x1
c0016837:	53                   	push   ebx
c0016838:	56                   	push   esi
c0016839:	e8 d8 f5 ff ff       	call   c0015e16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001683e:	83 c4 10             	add    esp,0x10
c0016841:	0f b6 c0             	movzx  eax,al
c0016844:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016848:	85 c0                	test   eax,eax
c001684a:	0f 85 89 00 00 00    	jne    c00168d9 <Thr::loadDLL(char const*, bool)+0x241>
c0016850:	89 f8                	mov    eax,edi
c0016852:	84 c0                	test   al,al
c0016854:	74 73                	je     c00168c9 <Thr::loadDLL(char const*, bool)+0x231>
c0016856:	83 ec 0c             	sub    esp,0xc
c0016859:	68 ab 53 02 c0       	push   0xc00253ab
c001685e:	e8 cb 97 ff ff       	call   c001002e <KePanic(char const*)>
c0016863:	83 c4 10             	add    esp,0x10
c0016866:	eb 61                	jmp    c00168c9 <Thr::loadDLL(char const*, bool)+0x231>
c0016868:	50                   	push   eax
c0016869:	50                   	push   eax
c001686a:	89 e8                	mov    eax,ebp
c001686c:	c1 e0 0c             	shl    eax,0xc
c001686f:	01 d8                	add    eax,ebx
c0016871:	50                   	push   eax
c0016872:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c0016878:	e8 39 cf ff ff       	call   c00137b6 <VAS::getPageTableEntry(unsigned long)>
c001687d:	83 c4 10             	add    esp,0x10
c0016880:	8b 00                	mov    eax,DWORD PTR [eax]
c0016882:	a8 60                	test   al,0x60
c0016884:	75 11                	jne    c0016897 <Thr::loadDLL(char const*, bool)+0x1ff>
c0016886:	83 ec 0c             	sub    esp,0xc
c0016889:	25 00 f0 ff ff       	and    eax,0xfffff000
c001688e:	50                   	push   eax
c001688f:	e8 25 99 ff ff       	call   c00101b9 <Phys::freePage(unsigned long)>
c0016894:	83 c4 10             	add    esp,0x10
c0016897:	45                   	inc    ebp
c0016898:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001689c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00168a0:	05 ff 0f 00 00       	add    eax,0xfff
c00168a5:	bf 00 00 00 00       	mov    edi,0x0
c00168aa:	83 d2 00             	adc    edx,0x0
c00168ad:	0f ac d0 0c          	shrd   eax,edx,0xc
c00168b1:	c1 ea 0c             	shr    edx,0xc
c00168b4:	39 c5                	cmp    ebp,eax
c00168b6:	89 d1                	mov    ecx,edx
c00168b8:	89 f8                	mov    eax,edi
c00168ba:	19 c8                	sbb    eax,ecx
c00168bc:	72 aa                	jb     c0016868 <Thr::loadDLL(char const*, bool)+0x1d0>
c00168be:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00168c3:	75 18                	jne    c00168dd <Thr::loadDLL(char const*, bool)+0x245>
c00168c5:	31 db                	xor    ebx,ebx
c00168c7:	eb 14                	jmp    c00168dd <Thr::loadDLL(char const*, bool)+0x245>
c00168c9:	83 ec 0c             	sub    esp,0xc
c00168cc:	68 ca 53 02 c0       	push   0xc00253ca
c00168d1:	e8 58 97 ff ff       	call   c001002e <KePanic(char const*)>
c00168d6:	83 c4 10             	add    esp,0x10
c00168d9:	31 ed                	xor    ebp,ebp
c00168db:	eb bb                	jmp    c0016898 <Thr::loadDLL(char const*, bool)+0x200>
c00168dd:	81 c4 2c 01 00 00    	add    esp,0x12c
c00168e3:	89 d8                	mov    eax,ebx
c00168e5:	5b                   	pop    ebx
c00168e6:	5e                   	pop    esi
c00168e7:	5f                   	pop    edi
c00168e8:	5d                   	pop    ebp
c00168e9:	c3                   	ret    

c00168ea <Thr::executeDLL(unsigned long, void*)>:
c00168ea:	56                   	push   esi
c00168eb:	53                   	push   ebx
c00168ec:	52                   	push   edx
c00168ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00168f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00168f5:	85 db                	test   ebx,ebx
c00168f7:	75 10                	jne    c0016909 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00168f9:	83 ec 0c             	sub    esp,0xc
c00168fc:	68 e6 53 02 c0       	push   0xc00253e6
c0016901:	e8 28 97 ff ff       	call   c001002e <KePanic(char const*)>
c0016906:	83 c4 10             	add    esp,0x10
c0016909:	50                   	push   eax
c001690a:	50                   	push   eax
c001690b:	53                   	push   ebx
c001690c:	68 10 54 02 c0       	push   0xc0025410
c0016911:	e8 4e 06 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016916:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001691a:	89 d8                	mov    eax,ebx
c001691c:	83 c4 14             	add    esp,0x14
c001691f:	5b                   	pop    ebx
c0016920:	5e                   	pop    esi
c0016921:	ff e0                	jmp    eax

c0016923 <KeProcessExec(Process*, char const*)>:
c0016923:	56                   	push   esi
c0016924:	53                   	push   ebx
c0016925:	83 ec 04             	sub    esp,0x4
c0016928:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001692c:	8b b3 b2 05 00 00    	mov    esi,DWORD PTR [ebx+0x5b2]
c0016932:	85 f6                	test   esi,esi
c0016934:	74 16                	je     c001694c <KeProcessExec(Process*, char const*)+0x29>
c0016936:	83 ec 0c             	sub    esp,0xc
c0016939:	56                   	push   esi
c001693a:	e8 09 d1 ff ff       	call   c0013a48 <VAS::~VAS()>
c001693f:	58                   	pop    eax
c0016940:	5a                   	pop    edx
c0016941:	6a 14                	push   0x14
c0016943:	56                   	push   esi
c0016944:	e8 12 6a ff ff       	call   c000d35b <operator delete(void*, unsigned long)>
c0016949:	83 c4 10             	add    esp,0x10
c001694c:	83 ec 0c             	sub    esp,0xc
c001694f:	6a 14                	push   0x14
c0016951:	e8 91 93 ff ff       	call   c000fce7 <malloc>
c0016956:	89 c6                	mov    esi,eax
c0016958:	58                   	pop    eax
c0016959:	5a                   	pop    edx
c001695a:	6a 00                	push   0x0
c001695c:	56                   	push   esi
c001695d:	e8 86 d5 ff ff       	call   c0013ee8 <VAS::VAS(bool)>
c0016962:	89 b3 b2 05 00 00    	mov    DWORD PTR [ebx+0x5b2],esi
c0016968:	59                   	pop    ecx
c0016969:	5e                   	pop    esi
c001696a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001696e:	50                   	push   eax
c001696f:	53                   	push   ebx
c0016970:	e8 be ee ff ff       	call   c0015833 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016975:	83 c4 14             	add    esp,0x14
c0016978:	31 c0                	xor    eax,eax
c001697a:	5b                   	pop    ebx
c001697b:	5e                   	pop    esi
c001697c:	c3                   	ret    
c001697d:	66 90                	xchg   ax,ax
c001697f:	90                   	nop

c0016980 <userModeEntryPoint(void*)>:
c0016980:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0016988:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c001698d:	85 c0                	test   eax,eax
c001698f:	75 03                	jne    c0016994 <userModeEntryPoint(void*)+0x14>
c0016991:	fb                   	sti    
c0016992:	66 90                	xchg   ax,ax
c0016994:	fb                   	sti    
c0016995:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001699a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001699d:	8b 80 ae 05 00 00    	mov    eax,DWORD PTR [eax+0x5ae]
c00169a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00169a7:	e9 93 98 fe ff       	jmp    c000023f <goToUsermode>

c00169ac <changeTSS>:
c00169ac:	83 ec 14             	sub    esp,0x14
c00169af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169b4:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00169b7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00169bc:	c1 e2 15             	shl    edx,0x15
c00169bf:	29 d0                	sub    eax,edx
c00169c1:	50                   	push   eax
c00169c2:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c00169c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00169cd:	05 68 11 00 00       	add    eax,0x1168
c00169d2:	50                   	push   eax
c00169d3:	e8 a8 c3 ff ff       	call   c0012d80 <TSS::setESP(unsigned long)>
c00169d8:	83 c4 1c             	add    esp,0x1c
c00169db:	c3                   	ret    

c00169dc <switchToThread(ThreadControlBlock*)>:
c00169dc:	57                   	push   edi
c00169dd:	8b 0d 2c fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa2c
c00169e3:	56                   	push   esi
c00169e4:	85 c9                	test   ecx,ecx
c00169e6:	53                   	push   ebx
c00169e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00169eb:	0f 85 9b 00 00 00    	jne    c0016a8c <switchToThread(ThreadControlBlock*)+0xb0>
c00169f1:	0f b6 53 44          	movzx  edx,BYTE PTR [ebx+0x44]
c00169f5:	81 fa ff 00 00 00    	cmp    edx,0xff
c00169fb:	0f 84 87 00 00 00    	je     c0016a88 <switchToThread(ThreadControlBlock*)+0xac>
c0016a01:	b8 00 04 00 00       	mov    eax,0x400
c0016a06:	29 d0                	sub    eax,edx
c0016a08:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0016a0b:	d1 f8                	sar    eax,1
c0016a0d:	01 d0                	add    eax,edx
c0016a0f:	90                   	nop
c0016a10:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016a13:	e8 29 3a 00 00       	call   c001a441 <HalQueryPerformanceCounter()>
c0016a18:	a3 70 fa 02 c0       	mov    ds:0xc002fa70,eax
c0016a1d:	89 15 74 fa 02 c0    	mov    DWORD PTR ds:0xc002fa74,edx
c0016a23:	89 c6                	mov    esi,eax
c0016a25:	89 d7                	mov    edi,edx
c0016a27:	2b 35 60 fa 02 c0    	sub    esi,DWORD PTR ds:0xc002fa60
c0016a2d:	a3 60 fa 02 c0       	mov    ds:0xc002fa60,eax
c0016a32:	1b 3d 64 fa 02 c0    	sbb    edi,DWORD PTR ds:0xc002fa64
c0016a38:	89 35 68 fa 02 c0    	mov    DWORD PTR ds:0xc002fa68,esi
c0016a3e:	89 3d 6c fa 02 c0    	mov    DWORD PTR ds:0xc002fa6c,edi
c0016a44:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016a4a:	89 15 64 fa 02 c0    	mov    DWORD PTR ds:0xc002fa64,edx
c0016a50:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0016a53:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0016a56:	01 c6                	add    esi,eax
c0016a58:	11 d7                	adc    edi,edx
c0016a5a:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0016a5d:	83 ec 0c             	sub    esp,0xc
c0016a60:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0016a63:	53                   	push   ebx
c0016a64:	e8 0e 98 fe ff       	call   c0000277 <switchToThreadASM>
c0016a69:	0f 20 c0             	mov    eax,cr0
c0016a6c:	83 c8 08             	or     eax,0x8
c0016a6f:	0f 22 c0             	mov    cr0,eax
c0016a72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a77:	83 c4 10             	add    esp,0x10
c0016a7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016a7e:	5b                   	pop    ebx
c0016a7f:	5e                   	pop    esi
c0016a80:	5f                   	pop    edi
c0016a81:	e9 2a ea ff ff       	jmp    c00154b0 <KeCheckAlarm(ThreadControlBlock*)>
c0016a86:	66 90                	xchg   ax,ax
c0016a88:	31 c0                	xor    eax,eax
c0016a8a:	eb 84                	jmp    c0016a10 <switchToThread(ThreadControlBlock*)+0x34>
c0016a8c:	5b                   	pop    ebx
c0016a8d:	c7 05 28 fa 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x1
c0016a97:	5e                   	pop    esi
c0016a98:	5f                   	pop    edi
c0016a99:	c3                   	ret    
c0016a9a:	66 90                	xchg   ax,ax

c0016a9c <Process::addArgs(char**)>:
c0016a9c:	57                   	push   edi
c0016a9d:	56                   	push   esi
c0016a9e:	53                   	push   ebx
c0016a9f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016aa3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016aa7:	c7 86 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x5b6],0x0
c0016ab1:	85 ff                	test   edi,edi
c0016ab3:	74 4f                	je     c0016b04 <Process::addArgs(char**)+0x68>
c0016ab5:	8b 07                	mov    eax,DWORD PTR [edi]
c0016ab7:	85 c0                	test   eax,eax
c0016ab9:	74 49                	je     c0016b04 <Process::addArgs(char**)+0x68>
c0016abb:	31 db                	xor    ebx,ebx
c0016abd:	8d 76 00             	lea    esi,[esi+0x0]
c0016ac0:	83 ec 0c             	sub    esp,0xc
c0016ac3:	50                   	push   eax
c0016ac4:	e8 a7 9a fe ff       	call   c0000570 <strlen>
c0016ac9:	83 c0 01             	add    eax,0x1
c0016acc:	89 04 24             	mov    DWORD PTR [esp],eax
c0016acf:	e8 13 92 ff ff       	call   c000fce7 <malloc>
c0016ad4:	89 84 9e ba 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x5ba],eax
c0016adb:	5a                   	pop    edx
c0016adc:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0016adf:	59                   	pop    ecx
c0016ae0:	83 c3 01             	add    ebx,0x1
c0016ae3:	52                   	push   edx
c0016ae4:	50                   	push   eax
c0016ae5:	e8 56 9b fe ff       	call   c0000640 <strcpy>
c0016aea:	8b 8e b6 05 00 00    	mov    ecx,DWORD PTR [esi+0x5b6]
c0016af0:	83 c4 10             	add    esp,0x10
c0016af3:	83 c1 01             	add    ecx,0x1
c0016af6:	89 8e b6 05 00 00    	mov    DWORD PTR [esi+0x5b6],ecx
c0016afc:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0016aff:	85 c0                	test   eax,eax
c0016b01:	75 bd                	jne    c0016ac0 <Process::addArgs(char**)+0x24>
c0016b03:	90                   	nop
c0016b04:	5b                   	pop    ebx
c0016b05:	5e                   	pop    esi
c0016b06:	5f                   	pop    edi
c0016b07:	c3                   	ret    

c0016b08 <Process::Process(char const*, Process*, char**)>:
c0016b08:	56                   	push   esi
c0016b09:	53                   	push   ebx
c0016b0a:	83 ec 14             	sub    esp,0x14
c0016b0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b11:	05 0c 02 00 00       	add    eax,0x20c
c0016b16:	bb 07 00 00 00       	mov    ebx,0x7
c0016b1b:	89 c6                	mov    esi,eax
c0016b1d:	8d 76 00             	lea    esi,[esi+0x0]
c0016b20:	85 db                	test   ebx,ebx
c0016b22:	78 14                	js     c0016b38 <Process::Process(char const*, Process*, char**)+0x30>
c0016b24:	83 ec 0c             	sub    esp,0xc
c0016b27:	56                   	push   esi
c0016b28:	e8 43 ba 00 00       	call   c0022570 <ThreadControlBlock::ThreadControlBlock()>
c0016b2d:	83 c4 10             	add    esp,0x10
c0016b30:	83 c6 73             	add    esi,0x73
c0016b33:	83 eb 01             	sub    ebx,0x1
c0016b36:	eb e8                	jmp    c0016b20 <Process::Process(char const*, Process*, char**)+0x18>
c0016b38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b3c:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b47:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c0016b4e:	83 ec 0c             	sub    esp,0xc
c0016b51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016b55:	e8 06 7d ff ff       	call   c000e860 <KeNewProcessEnv(Process*)>
c0016b5a:	83 c4 10             	add    esp,0x10
c0016b5d:	89 c2                	mov    edx,eax
c0016b5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b63:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016b69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b6d:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016b76:	a1 5c 70 02 c0       	mov    eax,ds:0xc002705c
c0016b7b:	8d 50 01             	lea    edx,[eax+0x1]
c0016b7e:	89 15 5c 70 02 c0    	mov    DWORD PTR ds:0xc002705c,edx
c0016b84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016b88:	89 02                	mov    DWORD PTR [edx],eax
c0016b8a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0016b92:	83 ec 0c             	sub    esp,0xc
c0016b95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016b99:	e8 49 91 ff ff       	call   c000fce7 <malloc>
c0016b9e:	83 c4 10             	add    esp,0x10
c0016ba1:	89 c3                	mov    ebx,eax
c0016ba3:	83 ec 08             	sub    esp,0x8
c0016ba6:	6a 00                	push   0x0
c0016ba8:	53                   	push   ebx
c0016ba9:	e8 3a d3 ff ff       	call   c0013ee8 <VAS::VAS(bool)>
c0016bae:	83 c4 10             	add    esp,0x10
c0016bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bb5:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c0016bbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bbf:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016bc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bcd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016bd1:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c0016bd7:	e8 27 a5 ff ff       	call   c0011103 <KeInitSignals()>
c0016bdc:	89 c2                	mov    edx,eax
c0016bde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016be2:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016be8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bec:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016bf2:	85 c0                	test   eax,eax
c0016bf4:	74 42                	je     c0016c38 <Process::Process(char const*, Process*, char**)+0x130>
c0016bf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bfa:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016c00:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016c06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c0a:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016c10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c14:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016c1a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016c20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c24:	05 0c 01 00 00       	add    eax,0x10c
c0016c29:	83 ec 08             	sub    esp,0x8
c0016c2c:	52                   	push   edx
c0016c2d:	50                   	push   eax
c0016c2e:	e8 0d 9a fe ff       	call   c0000640 <strcpy>
c0016c33:	83 c4 10             	add    esp,0x10
c0016c36:	eb 7c                	jmp    c0016cb4 <Process::Process(char const*, Process*, char**)+0x1ac>
c0016c38:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0016c40:	83 ec 0c             	sub    esp,0xc
c0016c43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016c47:	e8 9b 90 ff ff       	call   c000fce7 <malloc>
c0016c4c:	83 c4 10             	add    esp,0x10
c0016c4f:	89 c3                	mov    ebx,eax
c0016c51:	83 ec 08             	sub    esp,0x8
c0016c54:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016c58:	53                   	push   ebx
c0016c59:	e8 24 be ff ff       	call   c0012a82 <VgaText::VgaText(char const*)>
c0016c5e:	83 c4 10             	add    esp,0x10
c0016c61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c65:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0016c6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c6f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016c75:	83 ec 0c             	sub    esp,0xc
c0016c78:	50                   	push   eax
c0016c79:	e8 5a b6 ff ff       	call   c00122d8 <addToTerminalCycle(VgaText*)>
c0016c7e:	83 c4 10             	add    esp,0x10
c0016c81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c85:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016c8b:	83 ec 0c             	sub    esp,0xc
c0016c8e:	50                   	push   eax
c0016c8f:	e8 b5 b8 ff ff       	call   c0012549 <setActiveTerminal(VgaText*)>
c0016c94:	83 c4 10             	add    esp,0x10
c0016c97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c9b:	05 0c 01 00 00       	add    eax,0x10c
c0016ca0:	83 ec 08             	sub    esp,0x8
c0016ca3:	68 2f 54 02 c0       	push   0xc002542f
c0016ca8:	50                   	push   eax
c0016ca9:	e8 92 99 fe ff       	call   c0000640 <strcpy>
c0016cae:	83 c4 10             	add    esp,0x10
c0016cb1:	8d 76 00             	lea    esi,[esi+0x0]
c0016cb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cb8:	83 c0 0c             	add    eax,0xc
c0016cbb:	83 ec 08             	sub    esp,0x8
c0016cbe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016cc2:	50                   	push   eax
c0016cc3:	e8 78 99 fe ff       	call   c0000640 <strcpy>
c0016cc8:	83 c4 10             	add    esp,0x10
c0016ccb:	83 ec 08             	sub    esp,0x8
c0016cce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016cd2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016cd6:	e8 c1 fd ff ff       	call   c0016a9c <Process::addArgs(char**)>
c0016cdb:	83 c4 10             	add    esp,0x10
c0016cde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ce2:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0016ce8:	83 e2 7f             	and    edx,0x7f
c0016ceb:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c0016cf1:	83 ec 08             	sub    esp,0x8
c0016cf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016cf8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016cfc:	e8 32 eb ff ff       	call   c0015833 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016d01:	83 c4 10             	add    esp,0x10
c0016d04:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016d08:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016d0c:	83 f0 01             	xor    eax,0x1
c0016d0f:	88 c2                	mov    dl,al
c0016d11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d15:	88 90 be 07 00 00    	mov    BYTE PTR [eax+0x7be],dl
c0016d1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0016d21:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016d26:	52                   	push   edx
c0016d27:	50                   	push   eax
c0016d28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d2c:	68 88 54 02 c0       	push   0xc0025488
c0016d31:	e8 2e 02 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016d36:	83 c4 10             	add    esp,0x10
c0016d39:	90                   	nop
c0016d3a:	83 c4 14             	add    esp,0x14
c0016d3d:	5b                   	pop    ebx
c0016d3e:	5e                   	pop    esi
c0016d3f:	c3                   	ret    

c0016d40 <Process::Process(bool, char const*, Process*, char**)>:
c0016d40:	56                   	push   esi
c0016d41:	53                   	push   ebx
c0016d42:	83 ec 24             	sub    esp,0x24
c0016d45:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016d49:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016d4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d51:	05 0c 02 00 00       	add    eax,0x20c
c0016d56:	bb 07 00 00 00       	mov    ebx,0x7
c0016d5b:	89 c6                	mov    esi,eax
c0016d5d:	8d 76 00             	lea    esi,[esi+0x0]
c0016d60:	85 db                	test   ebx,ebx
c0016d62:	78 14                	js     c0016d78 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0016d64:	83 ec 0c             	sub    esp,0xc
c0016d67:	56                   	push   esi
c0016d68:	e8 03 b8 00 00       	call   c0022570 <ThreadControlBlock::ThreadControlBlock()>
c0016d6d:	83 c4 10             	add    esp,0x10
c0016d70:	83 c6 73             	add    esi,0x73
c0016d73:	83 eb 01             	sub    ebx,0x1
c0016d76:	eb e8                	jmp    c0016d60 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0016d78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d7c:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016d83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d87:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c0016d8e:	83 ec 0c             	sub    esp,0xc
c0016d91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016d95:	e8 c6 7a ff ff       	call   c000e860 <KeNewProcessEnv(Process*)>
c0016d9a:	83 c4 10             	add    esp,0x10
c0016d9d:	89 c2                	mov    edx,eax
c0016d9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016da3:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016da9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016dad:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016db6:	a1 5c 70 02 c0       	mov    eax,ds:0xc002705c
c0016dbb:	8d 50 01             	lea    edx,[eax+0x1]
c0016dbe:	89 15 5c 70 02 c0    	mov    DWORD PTR ds:0xc002705c,edx
c0016dc4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016dc8:	89 02                	mov    DWORD PTR [edx],eax
c0016dca:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0016dd2:	83 ec 0c             	sub    esp,0xc
c0016dd5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016dd9:	e8 09 8f ff ff       	call   c000fce7 <malloc>
c0016dde:	83 c4 10             	add    esp,0x10
c0016de1:	89 c3                	mov    ebx,eax
c0016de3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016de8:	83 ec 08             	sub    esp,0x8
c0016deb:	50                   	push   eax
c0016dec:	53                   	push   ebx
c0016ded:	e8 f6 d0 ff ff       	call   c0013ee8 <VAS::VAS(bool)>
c0016df2:	83 c4 10             	add    esp,0x10
c0016df5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016df9:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c0016dff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e03:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016e0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016e15:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c0016e1b:	e8 e3 a2 ff ff       	call   c0011103 <KeInitSignals()>
c0016e20:	89 c2                	mov    edx,eax
c0016e22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e26:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016e2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e30:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016e36:	85 c0                	test   eax,eax
c0016e38:	74 42                	je     c0016e7c <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0016e3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e3e:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016e44:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016e4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e4e:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016e54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e58:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016e5e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016e64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e68:	05 0c 01 00 00       	add    eax,0x10c
c0016e6d:	83 ec 08             	sub    esp,0x8
c0016e70:	52                   	push   edx
c0016e71:	50                   	push   eax
c0016e72:	e8 c9 97 fe ff       	call   c0000640 <strcpy>
c0016e77:	83 c4 10             	add    esp,0x10
c0016e7a:	eb 7c                	jmp    c0016ef8 <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c0016e7c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0016e84:	83 ec 0c             	sub    esp,0xc
c0016e87:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016e8b:	e8 57 8e ff ff       	call   c000fce7 <malloc>
c0016e90:	83 c4 10             	add    esp,0x10
c0016e93:	89 c3                	mov    ebx,eax
c0016e95:	83 ec 08             	sub    esp,0x8
c0016e98:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016e9c:	53                   	push   ebx
c0016e9d:	e8 e0 bb ff ff       	call   c0012a82 <VgaText::VgaText(char const*)>
c0016ea2:	83 c4 10             	add    esp,0x10
c0016ea5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ea9:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0016eaf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016eb3:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016eb9:	83 ec 0c             	sub    esp,0xc
c0016ebc:	50                   	push   eax
c0016ebd:	e8 16 b4 ff ff       	call   c00122d8 <addToTerminalCycle(VgaText*)>
c0016ec2:	83 c4 10             	add    esp,0x10
c0016ec5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ec9:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016ecf:	83 ec 0c             	sub    esp,0xc
c0016ed2:	50                   	push   eax
c0016ed3:	e8 71 b6 ff ff       	call   c0012549 <setActiveTerminal(VgaText*)>
c0016ed8:	83 c4 10             	add    esp,0x10
c0016edb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016edf:	05 0c 01 00 00       	add    eax,0x10c
c0016ee4:	83 ec 08             	sub    esp,0x8
c0016ee7:	68 2f 54 02 c0       	push   0xc002542f
c0016eec:	50                   	push   eax
c0016eed:	e8 4e 97 fe ff       	call   c0000640 <strcpy>
c0016ef2:	83 c4 10             	add    esp,0x10
c0016ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ef8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016efc:	83 c0 0c             	add    eax,0xc
c0016eff:	83 ec 08             	sub    esp,0x8
c0016f02:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016f06:	50                   	push   eax
c0016f07:	e8 34 97 fe ff       	call   c0000640 <strcpy>
c0016f0c:	83 c4 10             	add    esp,0x10
c0016f0f:	83 ec 08             	sub    esp,0x8
c0016f12:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016f16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016f1a:	e8 7d fb ff ff       	call   c0016a9c <Process::addArgs(char**)>
c0016f1f:	83 c4 10             	add    esp,0x10
c0016f22:	90                   	nop
c0016f23:	83 c4 24             	add    esp,0x24
c0016f26:	5b                   	pop    ebx
c0016f27:	5e                   	pop    esi
c0016f28:	c3                   	ret    
c0016f29:	8d 76 00             	lea    esi,[esi+0x0]

c0016f2c <taskStartupFunction>:
c0016f2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f31:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016f34:	c3                   	ret    
c0016f35:	8d 76 00             	lea    esi,[esi+0x0]

c0016f38 <KeDisablePreemption()>:
c0016f38:	a1 0c fa 02 c0       	mov    eax,ds:0xc002fa0c
c0016f3d:	85 c0                	test   eax,eax
c0016f3f:	75 13                	jne    c0016f54 <KeDisablePreemption()+0x1c>
c0016f41:	8a 15 d4 d0 02 c0    	mov    dl,BYTE PTR ds:0xc002d0d4
c0016f47:	c6 05 d4 d0 02 c0 00 	mov    BYTE PTR ds:0xc002d0d4,0x0
c0016f4e:	88 15 08 fa 02 c0    	mov    BYTE PTR ds:0xc002fa08,dl
c0016f54:	83 c0 01             	add    eax,0x1
c0016f57:	a3 0c fa 02 c0       	mov    ds:0xc002fa0c,eax
c0016f5c:	c3                   	ret    
c0016f5d:	8d 76 00             	lea    esi,[esi+0x0]

c0016f60 <KeRestorePreemption()>:
c0016f60:	a1 0c fa 02 c0       	mov    eax,ds:0xc002fa0c
c0016f65:	83 e8 01             	sub    eax,0x1
c0016f68:	a3 0c fa 02 c0       	mov    ds:0xc002fa0c,eax
c0016f6d:	75 0d                	jne    c0016f7c <KeRestorePreemption()+0x1c>
c0016f6f:	a0 08 fa 02 c0       	mov    al,ds:0xc002fa08
c0016f74:	a2 d4 d0 02 c0       	mov    ds:0xc002d0d4,al
c0016f79:	8d 76 00             	lea    esi,[esi+0x0]
c0016f7c:	c3                   	ret    
c0016f7d:	90                   	nop
c0016f7e:	66 90                	xchg   ax,ax

c0016f80 <Process::createThread(void (*)(void*), void*, int)>:
c0016f80:	55                   	push   ebp
c0016f81:	31 c9                	xor    ecx,ecx
c0016f83:	57                   	push   edi
c0016f84:	56                   	push   esi
c0016f85:	53                   	push   ebx
c0016f86:	83 ec 0c             	sub    esp,0xc
c0016f89:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016f8d:	66 8b b3 a4 05 00 00 	mov    si,WORD PTR [ebx+0x5a4]
c0016f94:	89 f2                	mov    edx,esi
c0016f96:	66 90                	xchg   ax,ax
c0016f98:	0f b7 c2             	movzx  eax,dx
c0016f9b:	80 e2 01             	and    dl,0x1
c0016f9e:	74 18                	je     c0016fb8 <Process::createThread(void (*)(void*), void*, int)+0x38>
c0016fa0:	d1 f8                	sar    eax,1
c0016fa2:	83 c1 01             	add    ecx,0x1
c0016fa5:	89 c2                	mov    edx,eax
c0016fa7:	83 f9 10             	cmp    ecx,0x10
c0016faa:	75 ec                	jne    c0016f98 <Process::createThread(void (*)(void*), void*, int)+0x18>
c0016fac:	83 c4 0c             	add    esp,0xc
c0016faf:	31 db                	xor    ebx,ebx
c0016fb1:	89 d8                	mov    eax,ebx
c0016fb3:	5b                   	pop    ebx
c0016fb4:	5e                   	pop    esi
c0016fb5:	5f                   	pop    edi
c0016fb6:	5d                   	pop    ebp
c0016fb7:	c3                   	ret    
c0016fb8:	b8 01 00 00 00       	mov    eax,0x1
c0016fbd:	d3 e0                	shl    eax,cl
c0016fbf:	09 c6                	or     esi,eax
c0016fc1:	8d 04 89             	lea    eax,[ecx+ecx*4]
c0016fc4:	66 89 b3 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],si
c0016fcb:	01 c0                	add    eax,eax
c0016fcd:	01 c8                	add    eax,ecx
c0016fcf:	01 c0                	add    eax,eax
c0016fd1:	01 c8                	add    eax,ecx
c0016fd3:	8d 04 80             	lea    eax,[eax+eax*4]
c0016fd6:	01 d8                	add    eax,ebx
c0016fd8:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c0016fdf:	75 0b                	jne    c0016fec <Process::createThread(void (*)(void*), void*, int)+0x6c>
c0016fe1:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c0016feb:	90                   	nop
c0016fec:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0016ff2:	83 ec 0c             	sub    esp,0xc
c0016ff5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0016ff8:	8d 04 89             	lea    eax,[ecx+ecx*4]
c0016ffb:	01 c0                	add    eax,eax
c0016ffd:	01 c8                	add    eax,ecx
c0016fff:	01 c0                	add    eax,eax
c0017001:	01 c8                	add    eax,ecx
c0017003:	8d 3c 80             	lea    edi,[eax+eax*4]
c0017006:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0017009:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001700f:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0017015:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017019:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001701f:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0017025:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001702b:	89 ca                	mov    edx,ecx
c001702d:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0017034:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017038:	c7 80 44 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x244],0x0
c0017042:	c7 80 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x26f],0x0
c001704c:	c6 80 73 02 00 00 00 	mov    BYTE PTR [eax+0x273],0x0
c0017053:	c6 80 74 02 00 00 00 	mov    BYTE PTR [eax+0x274],0x0
c001705a:	c6 80 75 02 00 00 00 	mov    BYTE PTR [eax+0x275],0x0
c0017061:	f7 da                	neg    edx
c0017063:	c1 e2 15             	shl    edx,0x15
c0017066:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001706c:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0017072:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017076:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0017080:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0017086:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001708c:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0017092:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001709c:	83 e2 80             	and    edx,0xffffff80
c001709f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00170a9:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c00170af:	68 00 01 00 00       	push   0x100
c00170b4:	e8 2e 8c ff ff       	call   c000fce7 <malloc>
c00170b9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00170bc:	58                   	pop    eax
c00170bd:	5a                   	pop    edx
c00170be:	53                   	push   ebx
c00170bf:	68 4c fa 02 c0       	push   0xc002fa4c
c00170c4:	e8 53 b0 00 00       	call   c002211c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00170c9:	89 d8                	mov    eax,ebx
c00170cb:	83 c4 10             	add    esp,0x10
c00170ce:	83 c4 0c             	add    esp,0xc
c00170d1:	5b                   	pop    ebx
c00170d2:	5e                   	pop    esi
c00170d3:	5f                   	pop    edi
c00170d4:	5d                   	pop    ebp
c00170d5:	c3                   	ret    
c00170d6:	66 90                	xchg   ax,ax

c00170d8 <Process::createUserThread()>:
c00170d8:	83 ec 0c             	sub    esp,0xc
c00170db:	68 80 00 00 00       	push   0x80
c00170e0:	6a 00                	push   0x0
c00170e2:	68 80 69 01 c0       	push   0xc0016980
c00170e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00170eb:	50                   	push   eax
c00170ec:	e8 8f fe ff ff       	call   c0016f80 <Process::createThread(void (*)(void*), void*, int)>
c00170f1:	83 c4 1c             	add    esp,0x1c
c00170f4:	c3                   	ret    
c00170f5:	8d 76 00             	lea    esi,[esi+0x0]

c00170f8 <setupMultitasking(void (*)())>:
c00170f8:	56                   	push   esi
c00170f9:	53                   	push   ebx
c00170fa:	83 ec 04             	sub    esp,0x4
c00170fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017101:	eb 11                	jmp    c0017114 <setupMultitasking(void (*)())+0x1c>
c0017103:	90                   	nop
c0017104:	83 ec 0c             	sub    esp,0xc
c0017107:	68 4c fa 02 c0       	push   0xc002fa4c
c001710c:	e8 4f af 00 00       	call   c0022060 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017111:	83 c4 10             	add    esp,0x10
c0017114:	83 ec 0c             	sub    esp,0xc
c0017117:	68 4c fa 02 c0       	push   0xc002fa4c
c001711c:	e8 1b af 00 00       	call   c002203c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017121:	83 c4 10             	add    esp,0x10
c0017124:	84 c0                	test   al,al
c0017126:	74 dc                	je     c0017104 <setupMultitasking(void (*)())+0xc>
c0017128:	83 ec 0c             	sub    esp,0xc
c001712b:	68 c4 07 00 00       	push   0x7c4
c0017130:	e8 b2 8b ff ff       	call   c000fce7 <malloc>
c0017135:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001713c:	89 c3                	mov    ebx,eax
c001713e:	6a 00                	push   0x0
c0017140:	68 33 54 02 c0       	push   0xc0025433
c0017145:	6a 01                	push   0x1
c0017147:	50                   	push   eax
c0017148:	e8 f3 fb ff ff       	call   c0016d40 <Process::Process(bool, char const*, Process*, char**)>
c001714d:	83 c4 14             	add    esp,0x14
c0017150:	8b 83 a6 05 00 00    	mov    eax,DWORD PTR [ebx+0x5a6]
c0017156:	89 1d 58 fa 02 c0    	mov    DWORD PTR ds:0xc002fa58,ebx
c001715c:	50                   	push   eax
c001715d:	e8 e7 b3 ff ff       	call   c0012549 <setActiveTerminal(VgaText*)>
c0017162:	66 8b 83 a4 05 00 00 	mov    ax,WORD PTR [ebx+0x5a4]
c0017169:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c0017173:	83 c8 01             	or     eax,0x1
c0017176:	66 89 83 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],ax
c001717d:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0017183:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017186:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0017190:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017196:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001719c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00171a6:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c00171b0:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00171ba:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00171c0:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00171ca:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00171d0:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00171da:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00171e1:	e8 01 8b ff ff       	call   c000fce7 <malloc>
c00171e6:	c7 83 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x26f],0x0
c00171f0:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00171f6:	c6 83 73 02 00 00 00 	mov    BYTE PTR [ebx+0x273],0x0
c00171fd:	c6 83 74 02 00 00 00 	mov    BYTE PTR [ebx+0x274],0x0
c0017204:	c6 83 75 02 00 00 00 	mov    BYTE PTR [ebx+0x275],0x0
c001720b:	c6 83 76 02 00 00 00 	mov    BYTE PTR [ebx+0x276],0x0
c0017212:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0017218:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001721e:	5a                   	pop    edx
c001721f:	59                   	pop    ecx
c0017220:	68 2f 54 02 c0       	push   0xc002542f
c0017225:	50                   	push   eax
c0017226:	e8 15 94 fe ff       	call   c0000640 <strcpy>
c001722b:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0017232:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017236:	83 c4 14             	add    esp,0x14
c0017239:	5b                   	pop    ebx
c001723a:	5e                   	pop    esi
c001723b:	e9 29 90 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>

c0017240 <schedule()>:
c0017240:	8b 15 2c fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa2c
c0017246:	85 d2                	test   edx,edx
c0017248:	74 0e                	je     c0017258 <schedule()+0x18>
c001724a:	c7 05 28 fa 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x1
c0017254:	c3                   	ret    
c0017255:	8d 76 00             	lea    esi,[esi+0x0]
c0017258:	53                   	push   ebx
c0017259:	83 ec 14             	sub    esp,0x14
c001725c:	68 4c fa 02 c0       	push   0xc002fa4c
c0017261:	e8 d6 ad 00 00       	call   c002203c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017266:	83 c4 10             	add    esp,0x10
c0017269:	84 c0                	test   al,al
c001726b:	75 3f                	jne    c00172ac <schedule()+0x6c>
c001726d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017272:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017275:	83 fa 01             	cmp    edx,0x1
c0017278:	74 3a                	je     c00172b4 <schedule()+0x74>
c001727a:	66 90                	xchg   ax,ax
c001727c:	83 ec 0c             	sub    esp,0xc
c001727f:	68 4c fa 02 c0       	push   0xc002fa4c
c0017284:	e8 cf ad 00 00       	call   c0022058 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017289:	c7 04 24 4c fa 02 c0 	mov    DWORD PTR [esp],0xc002fa4c
c0017290:	89 c3                	mov    ebx,eax
c0017292:	e8 c9 ad 00 00       	call   c0022060 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017297:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001729e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00172a1:	e8 36 f7 ff ff       	call   c00169dc <switchToThread(ThreadControlBlock*)>
c00172a6:	83 c4 10             	add    esp,0x10
c00172a9:	8d 76 00             	lea    esi,[esi+0x0]
c00172ac:	83 c4 08             	add    esp,0x8
c00172af:	5b                   	pop    ebx
c00172b0:	c3                   	ret    
c00172b1:	8d 76 00             	lea    esi,[esi+0x0]
c00172b4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00172bb:	83 ec 08             	sub    esp,0x8
c00172be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00172c3:	50                   	push   eax
c00172c4:	68 4c fa 02 c0       	push   0xc002fa4c
c00172c9:	e8 4e ae 00 00       	call   c002211c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00172ce:	83 c4 10             	add    esp,0x10
c00172d1:	eb a9                	jmp    c001727c <schedule()+0x3c>
c00172d3:	90                   	nop

c00172d4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00172d4:	83 ec 0c             	sub    esp,0xc
c00172d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00172dc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00172e0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00172e3:	e8 58 ff ff ff       	call   c0017240 <schedule()>
c00172e8:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c00172f0:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00172f5:	85 c0                	test   eax,eax
c00172f7:	75 03                	jne    c00172fc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c00172f9:	fb                   	sti    
c00172fa:	66 90                	xchg   ax,ax
c00172fc:	83 c4 0c             	add    esp,0xc
c00172ff:	c3                   	ret    

c0017300 <blockTask(TaskState)>:
c0017300:	83 ec 0c             	sub    esp,0xc
c0017303:	fa                   	cli    
c0017304:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017309:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001730d:	83 c0 01             	add    eax,0x1
c0017310:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0017315:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001731a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001731d:	e8 1e ff ff ff       	call   c0017240 <schedule()>
c0017322:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c001732a:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c0017330:	85 d2                	test   edx,edx
c0017332:	75 04                	jne    c0017338 <blockTask(TaskState)+0x38>
c0017334:	fb                   	sti    
c0017335:	8d 76 00             	lea    esi,[esi+0x0]
c0017338:	83 c4 0c             	add    esp,0xc
c001733b:	c3                   	ret    

c001733c <waitTask(int, int*, int)>:
c001733c:	83 ec 18             	sub    esp,0x18
c001733f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017344:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017348:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001734b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001734f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017354:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0017357:	6a 07                	push   0x7
c0017359:	e8 a2 ff ff ff       	call   c0017300 <blockTask(TaskState)>
c001735e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017363:	83 c4 10             	add    esp,0x10
c0017366:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0017369:	85 d2                	test   edx,edx
c001736b:	74 0b                	je     c0017378 <waitTask(int, int*, int)+0x3c>
c001736d:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0017370:	89 02                	mov    DWORD PTR [edx],eax
c0017372:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017377:	90                   	nop
c0017378:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001737b:	83 c4 0c             	add    esp,0xc
c001737e:	c3                   	ret    
c001737f:	90                   	nop

c0017380 <milliTenthSleepUntil(unsigned long long)>:
c0017380:	83 ec 0c             	sub    esp,0xc
c0017383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017387:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001738b:	3b 05 50 cb 02 c0    	cmp    eax,DWORD PTR ds:0xc002cb50
c0017391:	89 d1                	mov    ecx,edx
c0017393:	1b 0d 54 cb 02 c0    	sbb    ecx,DWORD PTR ds:0xc002cb54
c0017399:	73 05                	jae    c00173a0 <milliTenthSleepUntil(unsigned long long)+0x20>
c001739b:	90                   	nop
c001739c:	83 c4 0c             	add    esp,0xc
c001739f:	c3                   	ret    
c00173a0:	fa                   	cli    
c00173a1:	8b 0d 30 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa30
c00173a7:	83 ec 08             	sub    esp,0x8
c00173aa:	83 c1 01             	add    ecx,0x1
c00173ad:	89 0d 30 fa 02 c0    	mov    DWORD PTR ds:0xc002fa30,ecx
c00173b3:	8b 0d 2c fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa2c
c00173b9:	83 c1 01             	add    ecx,0x1
c00173bc:	89 0d 2c fa 02 c0    	mov    DWORD PTR ds:0xc002fa2c,ecx
c00173c2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00173c8:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c00173cb:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c00173ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00173d3:	50                   	push   eax
c00173d4:	68 40 fa 02 c0       	push   0xc002fa40
c00173d9:	e8 3e ad 00 00       	call   c002211c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00173de:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00173e5:	e8 16 ff ff ff       	call   c0017300 <blockTask(TaskState)>
c00173ea:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c00173ef:	83 c4 10             	add    esp,0x10
c00173f2:	83 e8 01             	sub    eax,0x1
c00173f5:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c00173fa:	85 c0                	test   eax,eax
c00173fc:	75 0a                	jne    c0017408 <milliTenthSleepUntil(unsigned long long)+0x88>
c00173fe:	8b 15 28 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa28
c0017404:	85 d2                	test   edx,edx
c0017406:	75 18                	jne    c0017420 <milliTenthSleepUntil(unsigned long long)+0xa0>
c0017408:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017410:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017415:	85 c0                	test   eax,eax
c0017417:	75 83                	jne    c001739c <milliTenthSleepUntil(unsigned long long)+0x1c>
c0017419:	fb                   	sti    
c001741a:	83 c4 0c             	add    esp,0xc
c001741d:	c3                   	ret    
c001741e:	66 90                	xchg   ax,ax
c0017420:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c001742a:	e8 11 fe ff ff       	call   c0017240 <schedule()>
c001742f:	eb d7                	jmp    c0017408 <milliTenthSleepUntil(unsigned long long)+0x88>
c0017431:	8d 76 00             	lea    esi,[esi+0x0]

c0017434 <milliTenthSleep(unsigned long long)>:
c0017434:	a1 50 cb 02 c0       	mov    eax,ds:0xc002cb50
c0017439:	8b 15 54 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb54
c001743f:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0017443:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0017447:	e9 34 ff ff ff       	jmp    c0017380 <milliTenthSleepUntil(unsigned long long)>

c001744c <sleep(unsigned long long)>:
c001744c:	69 4c 24 08 10 27 00 00 	imul   ecx,DWORD PTR [esp+0x8],0x2710
c0017454:	b8 10 27 00 00       	mov    eax,0x2710
c0017459:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001745d:	01 ca                	add    edx,ecx
c001745f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017463:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017467:	eb cb                	jmp    c0017434 <milliTenthSleep(unsigned long long)>
c0017469:	8d 76 00             	lea    esi,[esi+0x0]

c001746c <sleep(unsigned int)>:
c001746c:	83 ec 14             	sub    esp,0x14
c001746f:	b8 10 27 00 00       	mov    eax,0x2710
c0017474:	f7 64 24 18          	mul    DWORD PTR [esp+0x18]
c0017478:	52                   	push   edx
c0017479:	50                   	push   eax
c001747a:	e8 b5 ff ff ff       	call   c0017434 <milliTenthSleep(unsigned long long)>
c001747f:	83 c4 1c             	add    esp,0x1c
c0017482:	c3                   	ret    
c0017483:	90                   	nop

c0017484 <milliTenthSleep(unsigned int)>:
c0017484:	83 ec 14             	sub    esp,0x14
c0017487:	31 d2                	xor    edx,edx
c0017489:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001748d:	03 05 50 cb 02 c0    	add    eax,DWORD PTR ds:0xc002cb50
c0017493:	13 15 54 cb 02 c0    	adc    edx,DWORD PTR ds:0xc002cb54
c0017499:	52                   	push   edx
c001749a:	50                   	push   eax
c001749b:	e8 e0 fe ff ff       	call   c0017380 <milliTenthSleepUntil(unsigned long long)>
c00174a0:	83 c4 1c             	add    esp,0x1c
c00174a3:	c3                   	ret    

c00174a4 <taskReturned>:
c00174a4:	83 ec 18             	sub    esp,0x18
c00174a7:	68 bc 54 02 c0       	push   0xc00254bc
c00174ac:	e8 7d 8b ff ff       	call   c001002e <KePanic(char const*)>
c00174b1:	83 c4 10             	add    esp,0x10
c00174b4:	83 ec 0c             	sub    esp,0xc
c00174b7:	6a 02                	push   0x2
c00174b9:	e8 42 fe ff ff       	call   c0017300 <blockTask(TaskState)>
c00174be:	fa                   	cli    
c00174bf:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00174c4:	83 c0 01             	add    eax,0x1
c00174c7:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c00174cc:	e8 6f fd ff ff       	call   c0017240 <schedule()>
c00174d1:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c00174d9:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c00174df:	83 c4 10             	add    esp,0x10
c00174e2:	85 d2                	test   edx,edx
c00174e4:	75 ce                	jne    c00174b4 <taskReturned+0x10>
c00174e6:	fb                   	sti    
c00174e7:	eb cb                	jmp    c00174b4 <taskReturned+0x10>
c00174e9:	8d 76 00             	lea    esi,[esi+0x0]

c00174ec <Thr::processFromPID(int)>:
c00174ec:	57                   	push   edi
c00174ed:	56                   	push   esi
c00174ee:	53                   	push   ebx
c00174ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00174f3:	fa                   	cli    
c00174f4:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00174f9:	83 ec 0c             	sub    esp,0xc
c00174fc:	83 c0 01             	add    eax,0x1
c00174ff:	68 4c fa 02 c0       	push   0xc002fa4c
c0017504:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0017509:	e8 4a ab 00 00       	call   c0022058 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001750e:	83 c4 10             	add    esp,0x10
c0017511:	89 c7                	mov    edi,eax
c0017513:	eb 17                	jmp    c001752c <Thr::processFromPID(int)+0x40>
c0017515:	8d 76 00             	lea    esi,[esi+0x0]
c0017518:	83 ec 0c             	sub    esp,0xc
c001751b:	68 4c fa 02 c0       	push   0xc002fa4c
c0017520:	e8 33 ab 00 00       	call   c0022058 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017525:	83 c4 10             	add    esp,0x10
c0017528:	39 f8                	cmp    eax,edi
c001752a:	74 50                	je     c001757c <Thr::processFromPID(int)+0x90>
c001752c:	83 ec 0c             	sub    esp,0xc
c001752f:	68 4c fa 02 c0       	push   0xc002fa4c
c0017534:	e8 1f ab 00 00       	call   c0022058 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017539:	c7 04 24 4c fa 02 c0 	mov    DWORD PTR [esp],0xc002fa4c
c0017540:	89 c3                	mov    ebx,eax
c0017542:	e8 19 ab 00 00       	call   c0022060 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017547:	59                   	pop    ecx
c0017548:	58                   	pop    eax
c0017549:	53                   	push   ebx
c001754a:	68 4c fa 02 c0       	push   0xc002fa4c
c001754f:	e8 c8 ab 00 00       	call   c002211c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017554:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017557:	83 c4 10             	add    esp,0x10
c001755a:	39 30                	cmp    DWORD PTR [eax],esi
c001755c:	75 ba                	jne    c0017518 <Thr::processFromPID(int)+0x2c>
c001755e:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017566:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c001756c:	85 d2                	test   edx,edx
c001756e:	74 08                	je     c0017578 <Thr::processFromPID(int)+0x8c>
c0017570:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017573:	5b                   	pop    ebx
c0017574:	5e                   	pop    esi
c0017575:	5f                   	pop    edi
c0017576:	c3                   	ret    
c0017577:	90                   	nop
c0017578:	fb                   	sti    
c0017579:	eb f5                	jmp    c0017570 <Thr::processFromPID(int)+0x84>
c001757b:	90                   	nop
c001757c:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017584:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017589:	85 c0                	test   eax,eax
c001758b:	75 07                	jne    c0017594 <Thr::processFromPID(int)+0xa8>
c001758d:	fb                   	sti    
c001758e:	31 c0                	xor    eax,eax
c0017590:	5b                   	pop    ebx
c0017591:	5e                   	pop    esi
c0017592:	5f                   	pop    edi
c0017593:	c3                   	ret    
c0017594:	5b                   	pop    ebx
c0017595:	31 c0                	xor    eax,eax
c0017597:	5e                   	pop    esi
c0017598:	5f                   	pop    edi
c0017599:	c3                   	ret    
c001759a:	66 90                	xchg   ax,ax

c001759c <unblockTask(ThreadControlBlock*)>:
c001759c:	53                   	push   ebx
c001759d:	83 ec 08             	sub    esp,0x8
c00175a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00175a4:	fa                   	cli    
c00175a5:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c00175ab:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00175ae:	83 c2 01             	add    edx,0x1
c00175b1:	85 c0                	test   eax,eax
c00175b3:	89 15 30 fa 02 c0    	mov    DWORD PTR ds:0xc002fa30,edx
c00175b9:	74 6d                	je     c0017628 <unblockTask(ThreadControlBlock*)+0x8c>
c00175bb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00175be:	83 f8 01             	cmp    eax,0x1
c00175c1:	74 39                	je     c00175fc <unblockTask(ThreadControlBlock*)+0x60>
c00175c3:	83 ec 0c             	sub    esp,0xc
c00175c6:	68 4c fa 02 c0       	push   0xc002fa4c
c00175cb:	e8 88 aa 00 00       	call   c0022058 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00175d0:	83 c4 10             	add    esp,0x10
c00175d3:	85 c0                	test   eax,eax
c00175d5:	75 1d                	jne    c00175f4 <unblockTask(ThreadControlBlock*)+0x58>
c00175d7:	eb 63                	jmp    c001763c <unblockTask(ThreadControlBlock*)+0xa0>
c00175d9:	8d 76 00             	lea    esi,[esi+0x0]
c00175dc:	83 ec 08             	sub    esp,0x8
c00175df:	50                   	push   eax
c00175e0:	68 4c fa 02 c0       	push   0xc002fa4c
c00175e5:	e8 7a af 00 00       	call   c0022564 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00175ea:	83 c4 10             	add    esp,0x10
c00175ed:	85 c0                	test   eax,eax
c00175ef:	74 4b                	je     c001763c <unblockTask(ThreadControlBlock*)+0xa0>
c00175f1:	8d 76 00             	lea    esi,[esi+0x0]
c00175f4:	39 c3                	cmp    ebx,eax
c00175f6:	75 e4                	jne    c00175dc <unblockTask(ThreadControlBlock*)+0x40>
c00175f8:	eb 12                	jmp    c001760c <unblockTask(ThreadControlBlock*)+0x70>
c00175fa:	66 90                	xchg   ax,ax
c00175fc:	83 ec 0c             	sub    esp,0xc
c00175ff:	68 51 54 02 c0       	push   0xc0025451
c0017604:	e8 5b f9 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017609:	83 c4 10             	add    esp,0x10
c001760c:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017614:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017619:	85 c0                	test   eax,eax
c001761b:	75 03                	jne    c0017620 <unblockTask(ThreadControlBlock*)+0x84>
c001761d:	fb                   	sti    
c001761e:	66 90                	xchg   ax,ax
c0017620:	83 c4 08             	add    esp,0x8
c0017623:	5b                   	pop    ebx
c0017624:	c3                   	ret    
c0017625:	8d 76 00             	lea    esi,[esi+0x0]
c0017628:	83 ec 0c             	sub    esp,0xc
c001762b:	68 3a 54 02 c0       	push   0xc002543a
c0017630:	e8 2f f9 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017635:	83 c4 10             	add    esp,0x10
c0017638:	eb d2                	jmp    c001760c <unblockTask(ThreadControlBlock*)+0x70>
c001763a:	66 90                	xchg   ax,ax
c001763c:	83 ec 08             	sub    esp,0x8
c001763f:	53                   	push   ebx
c0017640:	68 4c fa 02 c0       	push   0xc002fa4c
c0017645:	e8 d2 aa 00 00       	call   c002211c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001764a:	83 c4 10             	add    esp,0x10
c001764d:	eb bd                	jmp    c001760c <unblockTask(ThreadControlBlock*)+0x70>
c001764f:	90                   	nop

c0017650 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0017650:	55                   	push   ebp
c0017651:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0017656:	57                   	push   edi
c0017657:	56                   	push   esi
c0017658:	53                   	push   ebx
c0017659:	83 ec 1c             	sub    esp,0x1c
c001765c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017660:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0017663:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017666:	d3 c0                	rol    eax,cl
c0017668:	66 8b 8a a4 05 00 00 	mov    cx,WORD PTR [edx+0x5a4]
c001766f:	21 c8                	and    eax,ecx
c0017671:	66 89 82 a4 05 00 00 	mov    WORD PTR [edx+0x5a4],ax
c0017678:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001767b:	66 83 b8 a4 05 00 00 00 	cmp    WORD PTR [eax+0x5a4],0x0
c0017683:	0f 85 b7 01 00 00    	jne    c0017840 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c0017689:	8b a8 b6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5b6]
c001768f:	85 ed                	test   ebp,ebp
c0017691:	7e 29                	jle    c00176bc <cleanupTerminatedTask(ThreadControlBlock*)+0x6c>
c0017693:	31 f6                	xor    esi,esi
c0017695:	8d 76 00             	lea    esi,[esi+0x0]
c0017698:	83 ec 0c             	sub    esp,0xc
c001769b:	8b bc b0 ba 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x5ba]
c00176a2:	83 c6 01             	add    esi,0x1
c00176a5:	57                   	push   edi
c00176a6:	e8 4c 86 ff ff       	call   c000fcf7 <free>
c00176ab:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00176ae:	83 c4 10             	add    esp,0x10
c00176b1:	39 b0 b6 05 00 00    	cmp    DWORD PTR [eax+0x5b6],esi
c00176b7:	7f df                	jg     c0017698 <cleanupTerminatedTask(ThreadControlBlock*)+0x48>
c00176b9:	8d 76 00             	lea    esi,[esi+0x0]
c00176bc:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c00176c6:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00176c9:	8b ae ba 07 00 00    	mov    ebp,DWORD PTR [esi+0x7ba]
c00176cf:	89 f7                	mov    edi,esi
c00176d1:	85 ed                	test   ebp,ebp
c00176d3:	74 1b                	je     c00176f0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00176d5:	83 ec 0c             	sub    esp,0xc
c00176d8:	55                   	push   ebp
c00176d9:	e8 9e 70 ff ff       	call   c000e77c <EnvVarContainer::~EnvVarContainer()>
c00176de:	59                   	pop    ecx
c00176df:	5e                   	pop    esi
c00176e0:	6a 0c                	push   0xc
c00176e2:	55                   	push   ebp
c00176e3:	e8 73 5c ff ff       	call   c000d35b <operator delete(void*, unsigned long)>
c00176e8:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00176eb:	83 c4 10             	add    esp,0x10
c00176ee:	89 f7                	mov    edi,esi
c00176f0:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c00176f6:	85 c0                	test   eax,eax
c00176f8:	0f 84 b6 00 00 00    	je     c00177b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x164>
c00176fe:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c0017701:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017705:	31 c9                	xor    ecx,ecx
c0017707:	eb 17                	jmp    c0017720 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0017709:	8d 76 00             	lea    esi,[esi+0x0]
c001770c:	83 c1 01             	add    ecx,0x1
c001770f:	83 f9 10             	cmp    ecx,0x10
c0017712:	0f 84 9c 00 00 00    	je     c00177b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x164>
c0017718:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c001771e:	66 90                	xchg   ax,ax
c0017720:	0f b7 90 a4 05 00 00 	movzx  edx,WORD PTR [eax+0x5a4]
c0017727:	d3 fa                	sar    edx,cl
c0017729:	80 e2 01             	and    dl,0x1
c001772c:	74 de                	je     c001770c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001772e:	8d 14 89             	lea    edx,[ecx+ecx*4]
c0017731:	01 d2                	add    edx,edx
c0017733:	01 ca                	add    edx,ecx
c0017735:	01 d2                	add    edx,edx
c0017737:	01 ca                	add    edx,ecx
c0017739:	8d 14 92             	lea    edx,[edx+edx*4]
c001773c:	01 d0                	add    eax,edx
c001773e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0017744:	83 fd 07             	cmp    ebp,0x7
c0017747:	75 c3                	jne    c001770c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017749:	05 40 02 00 00       	add    eax,0x240
c001774e:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0017751:	83 fd ff             	cmp    ebp,0xffffffff
c0017754:	0f 8c ee 00 00 00    	jl     c0017848 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c001775a:	0f 84 ac 01 00 00    	je     c001790c <cleanupTerminatedTask(ThreadControlBlock*)+0x2bc>
c0017760:	85 ed                	test   ebp,ebp
c0017762:	0f 84 90 01 00 00    	je     c00178f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a8>
c0017768:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001776a:	75 a0                	jne    c001770c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001776c:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0017772:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017776:	01 d0                	add    eax,edx
c0017778:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001777c:	83 ec 0c             	sub    esp,0xc
c001777f:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0017785:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017788:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001778e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0017795:	50                   	push   eax
c0017796:	e8 01 fe ff ff       	call   c001759c <unblockTask(ThreadControlBlock*)>
c001779b:	83 c4 10             	add    esp,0x10
c001779e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00177a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00177a5:	89 f7                	mov    edi,esi
c00177a7:	83 c1 01             	add    ecx,0x1
c00177aa:	83 f9 10             	cmp    ecx,0x10
c00177ad:	0f 85 65 ff ff ff    	jne    c0017718 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00177b3:	90                   	nop
c00177b4:	8b 86 a6 05 00 00    	mov    eax,DWORD PTR [esi+0x5a6]
c00177ba:	85 c0                	test   eax,eax
c00177bc:	74 62                	je     c0017820 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d0>
c00177be:	8b 96 aa 05 00 00    	mov    edx,DWORD PTR [esi+0x5aa]
c00177c4:	3b 82 a6 05 00 00    	cmp    eax,DWORD PTR [edx+0x5a6]
c00177ca:	74 54                	je     c0017820 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d0>
c00177cc:	83 ec 0c             	sub    esp,0xc
c00177cf:	68 4c fa 02 c0       	push   0xc002fa4c
c00177d4:	e8 7f a8 00 00       	call   c0022058 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00177d9:	c7 04 24 4c fa 02 c0 	mov    DWORD PTR [esp],0xc002fa4c
c00177e0:	89 c7                	mov    edi,eax
c00177e2:	e8 55 a8 00 00       	call   c002203c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00177e7:	83 c4 10             	add    esp,0x10
c00177ea:	84 c0                	test   al,al
c00177ec:	0f 84 ce 00 00 00    	je     c00178c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x270>
c00177f2:	66 90                	xchg   ax,ax
c00177f4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00177f7:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c00177fd:	85 d2                	test   edx,edx
c00177ff:	74 0f                	je     c0017810 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0017801:	83 ec 0c             	sub    esp,0xc
c0017804:	8b 02                	mov    eax,DWORD PTR [edx]
c0017806:	52                   	push   edx
c0017807:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001780a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001780d:	83 c4 10             	add    esp,0x10
c0017810:	c7 80 a6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5a6],0x0
c001781a:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001781d:	8d 76 00             	lea    esi,[esi+0x0]
c0017820:	8b 9f b2 05 00 00    	mov    ebx,DWORD PTR [edi+0x5b2]
c0017826:	85 db                	test   ebx,ebx
c0017828:	74 16                	je     c0017840 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c001782a:	83 ec 0c             	sub    esp,0xc
c001782d:	53                   	push   ebx
c001782e:	e8 15 c2 ff ff       	call   c0013a48 <VAS::~VAS()>
c0017833:	58                   	pop    eax
c0017834:	5a                   	pop    edx
c0017835:	6a 14                	push   0x14
c0017837:	53                   	push   ebx
c0017838:	e8 1e 5b ff ff       	call   c000d35b <operator delete(void*, unsigned long)>
c001783d:	83 c4 10             	add    esp,0x10
c0017840:	83 c4 1c             	add    esp,0x1c
c0017843:	5b                   	pop    ebx
c0017844:	5e                   	pop    esi
c0017845:	5f                   	pop    edi
c0017846:	5d                   	pop    ebp
c0017847:	c3                   	ret    
c0017848:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001784c:	83 ec 0c             	sub    esp,0xc
c001784f:	68 f0 54 02 c0       	push   0xc00254f0
c0017854:	e8 d5 87 ff ff       	call   c001002e <KePanic(char const*)>
c0017859:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001785c:	83 c4 10             	add    esp,0x10
c001785f:	89 f7                	mov    edi,esi
c0017861:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017865:	e9 a2 fe ff ff       	jmp    c001770c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001786a:	66 90                	xchg   ax,ax
c001786c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0017872:	39 82 a6 05 00 00    	cmp    DWORD PTR [edx+0x5a6],eax
c0017878:	75 1e                	jne    c0017898 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c001787a:	83 ec 0c             	sub    esp,0xc
c001787d:	68 58 55 02 c0       	push   0xc0025558
c0017882:	e8 dd f6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017887:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001788e:	e8 6d fa ff ff       	call   c0017300 <blockTask(TaskState)>
c0017893:	83 c4 10             	add    esp,0x10
c0017896:	66 90                	xchg   ax,ax
c0017898:	83 ec 08             	sub    esp,0x8
c001789b:	56                   	push   esi
c001789c:	68 4c fa 02 c0       	push   0xc002fa4c
c00178a1:	e8 76 a8 00 00       	call   c002211c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00178a6:	c7 04 24 4c fa 02 c0 	mov    DWORD PTR [esp],0xc002fa4c
c00178ad:	e8 a6 a7 00 00       	call   c0022058 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00178b2:	83 c4 10             	add    esp,0x10
c00178b5:	39 f8                	cmp    eax,edi
c00178b7:	0f 84 37 ff ff ff    	je     c00177f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a4>
c00178bd:	8d 76 00             	lea    esi,[esi+0x0]
c00178c0:	83 ec 0c             	sub    esp,0xc
c00178c3:	68 4c fa 02 c0       	push   0xc002fa4c
c00178c8:	e8 8b a7 00 00       	call   c0022058 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00178cd:	c7 04 24 4c fa 02 c0 	mov    DWORD PTR [esp],0xc002fa4c
c00178d4:	89 c6                	mov    esi,eax
c00178d6:	e8 85 a7 00 00       	call   c0022060 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00178db:	83 c4 10             	add    esp,0x10
c00178de:	39 f3                	cmp    ebx,esi
c00178e0:	74 b6                	je     c0017898 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c00178e2:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c00178e5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00178e8:	39 82 aa 05 00 00    	cmp    DWORD PTR [edx+0x5aa],eax
c00178ee:	75 a8                	jne    c0017898 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c00178f0:	e9 77 ff ff ff       	jmp    c001786c <cleanupTerminatedTask(ThreadControlBlock*)+0x21c>
c00178f5:	8d 76 00             	lea    esi,[esi+0x0]
c00178f8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00178fc:	83 ec 0c             	sub    esp,0xc
c00178ff:	68 24 55 02 c0       	push   0xc0025524
c0017904:	e9 4b ff ff ff       	jmp    c0017854 <cleanupTerminatedTask(ThreadControlBlock*)+0x204>
c0017909:	8d 76 00             	lea    esi,[esi+0x0]
c001790c:	8b 36                	mov    esi,DWORD PTR [esi]
c001790e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017912:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0017915:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017918:	8b b8 aa 05 00 00    	mov    edi,DWORD PTR [eax+0x5aa]
c001791e:	01 d7                	add    edi,edx
c0017920:	89 f8                	mov    eax,edi
c0017922:	e9 51 fe ff ff       	jmp    c0017778 <cleanupTerminatedTask(ThreadControlBlock*)+0x128>
c0017927:	90                   	nop

c0017928 <cleanerTaskFunction(void*)>:
c0017928:	53                   	push   ebx
c0017929:	83 ec 08             	sub    esp,0x8
c001792c:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017934:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017939:	85 c0                	test   eax,eax
c001793b:	75 03                	jne    c0017940 <cleanerTaskFunction(void*)+0x18>
c001793d:	fb                   	sti    
c001793e:	66 90                	xchg   ax,ax
c0017940:	fa                   	cli    
c0017941:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017946:	83 c0 01             	add    eax,0x1
c0017949:	80 3d 14 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002fa14,0x0
c0017950:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0017955:	0f 85 c9 00 00 00    	jne    c0017a24 <cleanerTaskFunction(void*)+0xfc>
c001795b:	83 ec 0c             	sub    esp,0xc
c001795e:	6a 02                	push   0x2
c0017960:	e8 6f f9 ff ff       	call   c00172d4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017965:	83 c4 10             	add    esp,0x10
c0017968:	c6 05 14 fa 02 c0 00 	mov    BYTE PTR ds:0xc002fa14,0x0
c001796f:	fa                   	cli    
c0017970:	8b 0d 30 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa30
c0017976:	8b 1d 2c fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa2c
c001797c:	83 c1 01             	add    ecx,0x1
c001797f:	83 c3 01             	add    ebx,0x1
c0017982:	89 0d 30 fa 02 c0    	mov    DWORD PTR ds:0xc002fa30,ecx
c0017988:	89 1d 2c fa 02 c0    	mov    DWORD PTR ds:0xc002fa2c,ebx
c001798e:	fa                   	cli    
c001798f:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017994:	83 c0 01             	add    eax,0x1
c0017997:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c001799c:	eb 2a                	jmp    c00179c8 <cleanerTaskFunction(void*)+0xa0>
c001799e:	66 90                	xchg   ax,ax
c00179a0:	83 ec 0c             	sub    esp,0xc
c00179a3:	68 34 fa 02 c0       	push   0xc002fa34
c00179a8:	e8 ab a6 00 00       	call   c0022058 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00179ad:	c7 04 24 34 fa 02 c0 	mov    DWORD PTR [esp],0xc002fa34
c00179b4:	89 c3                	mov    ebx,eax
c00179b6:	e8 a5 a6 00 00       	call   c0022060 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00179bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00179be:	e8 8d fc ff ff       	call   c0017650 <cleanupTerminatedTask(ThreadControlBlock*)>
c00179c3:	83 c4 10             	add    esp,0x10
c00179c6:	66 90                	xchg   ax,ax
c00179c8:	83 ec 0c             	sub    esp,0xc
c00179cb:	68 34 fa 02 c0       	push   0xc002fa34
c00179d0:	e8 67 a6 00 00       	call   c002203c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00179d5:	83 c4 10             	add    esp,0x10
c00179d8:	84 c0                	test   al,al
c00179da:	74 c4                	je     c00179a0 <cleanerTaskFunction(void*)+0x78>
c00179dc:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c00179e4:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c00179ea:	85 d2                	test   edx,edx
c00179ec:	75 02                	jne    c00179f0 <cleanerTaskFunction(void*)+0xc8>
c00179ee:	fb                   	sti    
c00179ef:	90                   	nop
c00179f0:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c00179f5:	83 e8 01             	sub    eax,0x1
c00179f8:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c00179fd:	0f 85 29 ff ff ff    	jne    c001792c <cleanerTaskFunction(void*)+0x4>
c0017a03:	a1 28 fa 02 c0       	mov    eax,ds:0xc002fa28
c0017a08:	85 c0                	test   eax,eax
c0017a0a:	0f 84 1c ff ff ff    	je     c001792c <cleanerTaskFunction(void*)+0x4>
c0017a10:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c0017a1a:	e8 21 f8 ff ff       	call   c0017240 <schedule()>
c0017a1f:	e9 08 ff ff ff       	jmp    c001792c <cleanerTaskFunction(void*)+0x4>
c0017a24:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017a2c:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017a31:	85 c0                	test   eax,eax
c0017a33:	0f 85 2f ff ff ff    	jne    c0017968 <cleanerTaskFunction(void*)+0x40>
c0017a39:	fb                   	sti    
c0017a3a:	e9 29 ff ff ff       	jmp    c0017968 <cleanerTaskFunction(void*)+0x40>
c0017a3f:	90                   	nop

c0017a40 <terminateTask(int)>:
c0017a40:	83 ec 14             	sub    esp,0x14
c0017a43:	fa                   	cli    
c0017a44:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017a49:	83 c0 01             	add    eax,0x1
c0017a4c:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0017a51:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0017a56:	83 c0 01             	add    eax,0x1
c0017a59:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0017a5e:	fa                   	cli    
c0017a5f:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017a64:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017a68:	83 c0 01             	add    eax,0x1
c0017a6b:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0017a70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a75:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0017a78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a7d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0017a80:	50                   	push   eax
c0017a81:	68 34 fa 02 c0       	push   0xc002fa34
c0017a86:	e8 91 a6 00 00       	call   c002211c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017a8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a90:	83 c4 10             	add    esp,0x10
c0017a93:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0017a9a:	a1 10 fa 02 c0       	mov    eax,ds:0xc002fa10
c0017a9f:	85 c0                	test   eax,eax
c0017aa1:	0f 84 81 00 00 00    	je     c0017b28 <terminateTask(int)+0xe8>
c0017aa7:	83 ec 0c             	sub    esp,0xc
c0017aaa:	c6 05 14 fa 02 c0 01 	mov    BYTE PTR ds:0xc002fa14,0x1
c0017ab1:	50                   	push   eax
c0017ab2:	e8 e5 fa ff ff       	call   c001759c <unblockTask(ThreadControlBlock*)>
c0017ab7:	83 c4 10             	add    esp,0x10
c0017aba:	66 90                	xchg   ax,ax
c0017abc:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017ac4:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017ac9:	85 c0                	test   eax,eax
c0017acb:	75 03                	jne    c0017ad0 <terminateTask(int)+0x90>
c0017acd:	fb                   	sti    
c0017ace:	66 90                	xchg   ax,ax
c0017ad0:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0017ad5:	83 e8 01             	sub    eax,0x1
c0017ad8:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0017add:	75 09                	jne    c0017ae8 <terminateTask(int)+0xa8>
c0017adf:	83 3d 28 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa28,0x0
c0017ae6:	75 54                	jne    c0017b3c <terminateTask(int)+0xfc>
c0017ae8:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017af0:	8b 0d 30 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa30
c0017af6:	85 c9                	test   ecx,ecx
c0017af8:	75 06                	jne    c0017b00 <terminateTask(int)+0xc0>
c0017afa:	66 90                	xchg   ax,ax
c0017afc:	fb                   	sti    
c0017afd:	8d 76 00             	lea    esi,[esi+0x0]
c0017b00:	fa                   	cli    
c0017b01:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017b06:	83 c0 01             	add    eax,0x1
c0017b09:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0017b0e:	e8 2d f7 ff ff       	call   c0017240 <schedule()>
c0017b13:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017b1b:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c0017b21:	85 d2                	test   edx,edx
c0017b23:	75 db                	jne    c0017b00 <terminateTask(int)+0xc0>
c0017b25:	eb d5                	jmp    c0017afc <terminateTask(int)+0xbc>
c0017b27:	90                   	nop
c0017b28:	83 ec 0c             	sub    esp,0xc
c0017b2b:	68 68 54 02 c0       	push   0xc0025468
c0017b30:	e8 2f f4 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017b35:	83 c4 10             	add    esp,0x10
c0017b38:	eb 82                	jmp    c0017abc <terminateTask(int)+0x7c>
c0017b3a:	66 90                	xchg   ax,ax
c0017b3c:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c0017b46:	e8 f5 f6 ff ff       	call   c0017240 <schedule()>
c0017b4b:	eb 9b                	jmp    c0017ae8 <terminateTask(int)+0xa8>
c0017b4d:	8d 76 00             	lea    esi,[esi+0x0]

c0017b50 <Thr::terminateFromIRQ(int)>:
c0017b50:	83 ec 18             	sub    esp,0x18
c0017b53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b57:	50                   	push   eax
c0017b58:	e8 e3 fe ff ff       	call   c0017a40 <terminateTask(int)>
c0017b5d:	8d 76 00             	lea    esi,[esi+0x0]

c0017b60 <__static_initialization_and_destruction_0(int, int)>:
c0017b60:	83 ec 0c             	sub    esp,0xc
c0017b63:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017b68:	0f 85 8e 00 00 00    	jne    c0017bfc <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017b6e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0017b76:	0f 85 80 00 00 00    	jne    c0017bfc <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017b7c:	83 ec 0c             	sub    esp,0xc
c0017b7f:	68 4c fa 02 c0       	push   0xc002fa4c
c0017b84:	e8 33 aa 00 00       	call   c00225bc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017b89:	83 c4 10             	add    esp,0x10
c0017b8c:	83 ec 04             	sub    esp,0x4
c0017b8f:	68 8c 68 02 c0       	push   0xc002688c
c0017b94:	68 4c fa 02 c0       	push   0xc002fa4c
c0017b99:	68 6c 25 02 c0       	push   0xc002256c
c0017b9e:	e8 68 57 ff ff       	call   c000d30b <__cxa_atexit>
c0017ba3:	83 c4 10             	add    esp,0x10
c0017ba6:	83 ec 0c             	sub    esp,0xc
c0017ba9:	68 40 fa 02 c0       	push   0xc002fa40
c0017bae:	e8 09 aa 00 00       	call   c00225bc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017bb3:	83 c4 10             	add    esp,0x10
c0017bb6:	83 ec 04             	sub    esp,0x4
c0017bb9:	68 8c 68 02 c0       	push   0xc002688c
c0017bbe:	68 40 fa 02 c0       	push   0xc002fa40
c0017bc3:	68 6c 25 02 c0       	push   0xc002256c
c0017bc8:	e8 3e 57 ff ff       	call   c000d30b <__cxa_atexit>
c0017bcd:	83 c4 10             	add    esp,0x10
c0017bd0:	83 ec 0c             	sub    esp,0xc
c0017bd3:	68 34 fa 02 c0       	push   0xc002fa34
c0017bd8:	e8 df a9 00 00       	call   c00225bc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017bdd:	83 c4 10             	add    esp,0x10
c0017be0:	83 ec 04             	sub    esp,0x4
c0017be3:	68 8c 68 02 c0       	push   0xc002688c
c0017be8:	68 34 fa 02 c0       	push   0xc002fa34
c0017bed:	68 6c 25 02 c0       	push   0xc002256c
c0017bf2:	e8 14 57 ff ff       	call   c000d30b <__cxa_atexit>
c0017bf7:	83 c4 10             	add    esp,0x10
c0017bfa:	66 90                	xchg   ax,ax
c0017bfc:	90                   	nop
c0017bfd:	83 c4 0c             	add    esp,0xc
c0017c00:	c3                   	ret    
c0017c01:	8d 76 00             	lea    esi,[esi+0x0]

c0017c04 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0017c04:	83 ec 0c             	sub    esp,0xc
c0017c07:	83 ec 08             	sub    esp,0x8
c0017c0a:	68 ff ff 00 00       	push   0xffff
c0017c0f:	6a 01                	push   0x1
c0017c11:	e8 4a ff ff ff       	call   c0017b60 <__static_initialization_and_destruction_0(int, int)>
c0017c16:	83 c4 10             	add    esp,0x10
c0017c19:	83 c4 0c             	add    esp,0xc
c0017c1c:	c3                   	ret    

c0017c1d <Vm::inbv(unsigned short)>:
c0017c1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017c21:	66 81 fa fe fe       	cmp    dx,0xfefe
c0017c26:	74 02                	je     c0017c2a <Vm::inbv(unsigned short)+0xd>
c0017c28:	ec                   	in     al,dx
c0017c29:	c3                   	ret    
c0017c2a:	a0 90 fa 02 c0       	mov    al,ds:0xc002fa90
c0017c2f:	c3                   	ret    

c0017c30 <Vm::outbv(unsigned short, unsigned char)>:
c0017c30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017c34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c38:	66 81 fa fe fe       	cmp    dx,0xfefe
c0017c3d:	74 02                	je     c0017c41 <Vm::outbv(unsigned short, unsigned char)+0x11>
c0017c3f:	ee                   	out    dx,al
c0017c40:	c3                   	ret    
c0017c41:	8b 0d 90 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa90
c0017c47:	8d 51 01             	lea    edx,[ecx+0x1]
c0017c4a:	88 81 a0 fa 02 c0    	mov    BYTE PTR [ecx-0x3ffd0560],al
c0017c50:	89 15 90 fa 02 c0    	mov    DWORD PTR ds:0xc002fa90,edx
c0017c56:	83 fa 20             	cmp    edx,0x20
c0017c59:	75 e5                	jne    c0017c40 <Vm::outbv(unsigned short, unsigned char)+0x10>
c0017c5b:	c7 05 90 fa 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002fa90,0x1f
c0017c65:	c3                   	ret    

c0017c66 <Vm::realToLinear(unsigned short, unsigned short)>:
c0017c66:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017c6b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017c70:	c1 e0 04             	shl    eax,0x4
c0017c73:	01 d0                	add    eax,edx
c0017c75:	c3                   	ret    

c0017c76 <Vm::getSegment(unsigned int)>:
c0017c76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c7a:	c1 e8 10             	shr    eax,0x10
c0017c7d:	c3                   	ret    

c0017c7e <Vm::getOffset(unsigned int)>:
c0017c7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c82:	c3                   	ret    

c0017c83 <Vm::mainloop2()>:
c0017c83:	83 ec 18             	sub    esp,0x18
c0017c86:	fa                   	cli    
c0017c87:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017c8c:	6a 02                	push   0x2
c0017c8e:	83 c0 01             	add    eax,0x1
c0017c91:	c6 05 89 fa 02 c0 01 	mov    BYTE PTR ds:0xc002fa89,0x1
c0017c98:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0017c9d:	e8 32 f6 ff ff       	call   c00172d4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017ca2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ca7:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0017cab:	52                   	push   edx
c0017cac:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0017cb0:	52                   	push   edx
c0017cb1:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0017cb5:	52                   	push   edx
c0017cb6:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0017cba:	50                   	push   eax
c0017cbb:	e8 4f 85 fe ff       	call   c000020f <goToVM86>
c0017cc0:	83 c4 2c             	add    esp,0x2c
c0017cc3:	c3                   	ret    

c0017cc4 <Vm::mainVm8086Loop(void*)>:
c0017cc4:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017ccc:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017cd1:	85 c0                	test   eax,eax
c0017cd3:	75 01                	jne    c0017cd6 <Vm::mainVm8086Loop(void*)+0x12>
c0017cd5:	fb                   	sti    
c0017cd6:	eb ab                	jmp    c0017c83 <Vm::mainloop2()>

c0017cd8 <Vm::mainloop3(unsigned long)>:
c0017cd8:	83 ec 18             	sub    esp,0x18
c0017cdb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017cdf:	fa                   	cli    
c0017ce0:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c0017ce6:	6a 02                	push   0x2
c0017ce8:	83 c2 01             	add    edx,0x1
c0017ceb:	c6 05 88 fa 02 c0 01 	mov    BYTE PTR ds:0xc002fa88,0x1
c0017cf2:	89 15 30 fa 02 c0    	mov    DWORD PTR ds:0xc002fa30,edx
c0017cf8:	a3 84 fa 02 c0       	mov    ds:0xc002fa84,eax
c0017cfd:	e8 d2 f5 ff ff       	call   c00172d4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017d02:	83 c4 1c             	add    esp,0x1c
c0017d05:	e9 79 ff ff ff       	jmp    c0017c83 <Vm::mainloop2()>

c0017d0a <Vm::initialise8086()>:
c0017d0a:	83 ec 0c             	sub    esp,0xc
c0017d0d:	68 80 00 00 00       	push   0x80
c0017d12:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0017d17:	6a 00                	push   0x0
c0017d19:	68 c4 7c 01 c0       	push   0xc0017cc4
c0017d1e:	50                   	push   eax
c0017d1f:	e8 5c f2 ff ff       	call   c0016f80 <Process::createThread(void (*)(void*), void*, int)>
c0017d24:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0017d2b:	a3 8c fa 02 c0       	mov    ds:0xc002fa8c,eax
c0017d30:	68 10 01 00 00       	push   0x110
c0017d35:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0017d3a:	6a 00                	push   0x0
c0017d3c:	6a 00                	push   0x0
c0017d3e:	8b 90 b2 05 00 00    	mov    edx,DWORD PTR [eax+0x5b2]
c0017d44:	52                   	push   edx
c0017d45:	e8 50 c0 ff ff       	call   c0013d9a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d4a:	83 c4 2c             	add    esp,0x2c
c0017d4d:	c3                   	ret    

c0017d4e <Vm::resetConventionalMemory8086()>:
c0017d4e:	c3                   	ret    

c0017d4f <Vm::finish8086()>:
c0017d4f:	53                   	push   ebx
c0017d50:	83 ec 08             	sub    esp,0x8
c0017d53:	eb 17                	jmp    c0017d6c <Vm::finish8086()+0x1d>
c0017d55:	e8 e6 f4 ff ff       	call   c0017240 <schedule()>
c0017d5a:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017d62:	8b 0d 30 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa30
c0017d68:	85 c9                	test   ecx,ecx
c0017d6a:	74 51                	je     c0017dbd <Vm::finish8086()+0x6e>
c0017d6c:	fa                   	cli    
c0017d6d:	8b 1d 30 fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa30
c0017d73:	83 c3 01             	add    ebx,0x1
c0017d76:	80 3d 88 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002fa88,0x0
c0017d7d:	89 1d 30 fa 02 c0    	mov    DWORD PTR ds:0xc002fa30,ebx
c0017d83:	74 d0                	je     c0017d55 <Vm::finish8086()+0x6>
c0017d85:	83 ec 0c             	sub    esp,0xc
c0017d88:	a1 8c fa 02 c0       	mov    eax,ds:0xc002fa8c
c0017d8d:	8b 1d 84 fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa84
c0017d93:	50                   	push   eax
c0017d94:	c6 05 88 fa 02 c0 00 	mov    BYTE PTR ds:0xc002fa88,0x0
c0017d9b:	e8 fc f7 ff ff       	call   c001759c <unblockTask(ThreadControlBlock*)>
c0017da0:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017da8:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c0017dae:	83 c4 10             	add    esp,0x10
c0017db1:	85 d2                	test   edx,edx
c0017db3:	75 01                	jne    c0017db6 <Vm::finish8086()+0x67>
c0017db5:	fb                   	sti    
c0017db6:	89 d8                	mov    eax,ebx
c0017db8:	83 c4 08             	add    esp,0x8
c0017dbb:	5b                   	pop    ebx
c0017dbc:	c3                   	ret    
c0017dbd:	fb                   	sti    
c0017dbe:	eb ac                	jmp    c0017d6c <Vm::finish8086()+0x1d>

c0017dc0 <Vm::getOutput8086(unsigned char*)>:
c0017dc0:	57                   	push   edi
c0017dc1:	8b 0d 90 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa90
c0017dc7:	56                   	push   esi
c0017dc8:	be a0 fa 02 c0       	mov    esi,0xc002faa0
c0017dcd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0017dd1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017dd3:	a1 90 fa 02 c0       	mov    eax,ds:0xc002fa90
c0017dd8:	5e                   	pop    esi
c0017dd9:	c7 05 90 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa90,0x0
c0017de3:	5f                   	pop    edi
c0017de4:	c3                   	ret    

c0017de5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017de5:	55                   	push   ebp
c0017de6:	57                   	push   edi
c0017de7:	56                   	push   esi
c0017de8:	53                   	push   ebx
c0017de9:	83 ec 2c             	sub    esp,0x2c
c0017dec:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017df0:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017df4:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0017df8:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0017dfc:	80 3d 80 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002fa80,0x0
c0017e03:	75 1f                	jne    c0017e24 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>
c0017e05:	e9 bb 00 00 00       	jmp    c0017ec5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xe0>
c0017e0a:	e8 31 f4 ff ff       	call   c0017240 <schedule()>
c0017e0f:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017e17:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017e1c:	85 c0                	test   eax,eax
c0017e1e:	0f 84 9b 00 00 00    	je     c0017ebf <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xda>
c0017e24:	fa                   	cli    
c0017e25:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017e2a:	83 c0 01             	add    eax,0x1
c0017e2d:	80 3d 89 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002fa89,0x0
c0017e34:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0017e39:	74 cf                	je     c0017e0a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x25>
c0017e3b:	83 ec 04             	sub    esp,0x4
c0017e3e:	a1 8c fa 02 c0       	mov    eax,ds:0xc002fa8c
c0017e43:	c7 05 90 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa90,0x0
c0017e4d:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c0017e51:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0017e55:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c0017e59:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c0017e5d:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017e61:	0f b7 f6             	movzx  esi,si
c0017e64:	6a 20                	push   0x20
c0017e66:	0f b7 db             	movzx  ebx,bx
c0017e69:	6a 00                	push   0x0
c0017e6b:	68 a0 fa 02 c0       	push   0xc002faa0
c0017e70:	e8 7b 86 fe ff       	call   c00004f0 <memset>
c0017e75:	5a                   	pop    edx
c0017e76:	59                   	pop    ecx
c0017e77:	56                   	push   esi
c0017e78:	53                   	push   ebx
c0017e79:	e8 e8 fd ff ff       	call   c0017c66 <Vm::realToLinear(unsigned short, unsigned short)>
c0017e7e:	83 c4 10             	add    esp,0x10
c0017e81:	89 c7                	mov    edi,eax
c0017e83:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017e87:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0017e8b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017e8d:	c6 05 89 fa 02 c0 00 	mov    BYTE PTR ds:0xc002fa89,0x0
c0017e94:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017e9c:	8b 1d 30 fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa30
c0017ea2:	85 db                	test   ebx,ebx
c0017ea4:	75 01                	jne    c0017ea7 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xc2>
c0017ea6:	fb                   	sti    
c0017ea7:	83 ec 0c             	sub    esp,0xc
c0017eaa:	a1 8c fa 02 c0       	mov    eax,ds:0xc002fa8c
c0017eaf:	50                   	push   eax
c0017eb0:	e8 e7 f6 ff ff       	call   c001759c <unblockTask(ThreadControlBlock*)>
c0017eb5:	83 c4 3c             	add    esp,0x3c
c0017eb8:	b0 01                	mov    al,0x1
c0017eba:	5b                   	pop    ebx
c0017ebb:	5e                   	pop    esi
c0017ebc:	5f                   	pop    edi
c0017ebd:	5d                   	pop    ebp
c0017ebe:	c3                   	ret    
c0017ebf:	fb                   	sti    
c0017ec0:	e9 5f ff ff ff       	jmp    c0017e24 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>
c0017ec5:	83 ec 0c             	sub    esp,0xc
c0017ec8:	68 14 01 00 00       	push   0x114
c0017ecd:	e8 15 7e ff ff       	call   c000fce7 <malloc>
c0017ed2:	83 c4 0c             	add    esp,0xc
c0017ed5:	89 c2                	mov    edx,eax
c0017ed7:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0017edc:	50                   	push   eax
c0017edd:	68 80 55 02 c0       	push   0xc0025580
c0017ee2:	52                   	push   edx
c0017ee3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0017ee7:	e8 7a 02 ff ff       	call   c0008166 <File::File(char const*, Process*)>
c0017eec:	58                   	pop    eax
c0017eed:	5a                   	pop    edx
c0017eee:	6a 12                	push   0x12
c0017ef0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ef4:	52                   	push   edx
c0017ef5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0017ef9:	e8 86 02 ff ff       	call   c0008184 <File::open(FileOpenMode)>
c0017efe:	59                   	pop    ecx
c0017eff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017f03:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0017f07:	8b 02                	mov    eax,DWORD PTR [edx]
c0017f09:	51                   	push   ecx
c0017f0a:	6a 00                	push   0x0
c0017f0c:	6a 00                	push   0x0
c0017f0e:	68 00 00 11 00       	push   0x110000
c0017f13:	52                   	push   edx
c0017f14:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f18:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0017f1b:	83 c4 14             	add    esp,0x14
c0017f1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017f22:	52                   	push   edx
c0017f23:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0017f27:	e8 b6 02 ff ff       	call   c00081e2 <File::close()>
c0017f2c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f30:	8b 02                	mov    eax,DWORD PTR [edx]
c0017f32:	89 14 24             	mov    DWORD PTR [esp],edx
c0017f35:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017f38:	c6 05 80 fa 02 c0 01 	mov    BYTE PTR ds:0xc002fa80,0x1
c0017f3f:	83 c4 10             	add    esp,0x10
c0017f42:	e9 dd fe ff ff       	jmp    c0017e24 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>

c0017f47 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017f47:	55                   	push   ebp
c0017f48:	57                   	push   edi
c0017f49:	56                   	push   esi
c0017f4a:	53                   	push   ebx
c0017f4b:	83 ec 2c             	sub    esp,0x2c
c0017f4e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017f52:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0017f56:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017f5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017f5e:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0017f62:	80 3d 80 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002fa80,0x0
c0017f69:	0f 84 59 01 00 00    	je     c00180c8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x181>
c0017f6f:	83 ec 08             	sub    esp,0x8
c0017f72:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0017f76:	51                   	push   ecx
c0017f77:	68 e4 55 02 c0       	push   0xc00255e4
c0017f7c:	e8 e3 ef fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017f81:	83 c4 10             	add    esp,0x10
c0017f84:	eb 1a                	jmp    c0017fa0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x59>
c0017f86:	e8 b5 f2 ff ff       	call   c0017240 <schedule()>
c0017f8b:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017f93:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017f98:	85 c0                	test   eax,eax
c0017f9a:	0f 84 22 01 00 00    	je     c00180c2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17b>
c0017fa0:	fa                   	cli    
c0017fa1:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c0017fa7:	8a 1d 89 fa 02 c0    	mov    bl,BYTE PTR ds:0xc002fa89
c0017fad:	83 c2 01             	add    edx,0x1
c0017fb0:	84 db                	test   bl,bl
c0017fb2:	89 15 30 fa 02 c0    	mov    DWORD PTR ds:0xc002fa30,edx
c0017fb8:	74 cc                	je     c0017f86 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>
c0017fba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017fbe:	a1 8c fa 02 c0       	mov    eax,ds:0xc002fa8c
c0017fc3:	83 ec 04             	sub    esp,0x4
c0017fc6:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c0017fca:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c0017fce:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c0017fd2:	66 89 68 5b          	mov    WORD PTR [eax+0x5b],bp
c0017fd6:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017fda:	c7 05 90 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa90,0x0
c0017fe4:	6a 20                	push   0x20
c0017fe6:	6a 00                	push   0x0
c0017fe8:	68 a0 fa 02 c0       	push   0xc002faa0
c0017fed:	e8 fe 84 fe ff       	call   c00004f0 <memset>
c0017ff2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017ff9:	e8 e9 7c ff ff       	call   c000fce7 <malloc>
c0017ffe:	83 c4 0c             	add    esp,0xc
c0018001:	89 c7                	mov    edi,eax
c0018003:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0018008:	50                   	push   eax
c0018009:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001800d:	50                   	push   eax
c001800e:	57                   	push   edi
c001800f:	e8 52 01 ff ff       	call   c0008166 <File::File(char const*, Process*)>
c0018014:	83 c4 10             	add    esp,0x10
c0018017:	85 ff                	test   edi,edi
c0018019:	0f 84 66 01 00 00    	je     c0018185 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x23e>
c001801f:	83 ec 04             	sub    esp,0x4
c0018022:	8d 44 24 17          	lea    eax,[esp+0x17]
c0018026:	50                   	push   eax
c0018027:	8d 44 24 20          	lea    eax,[esp+0x20]
c001802b:	50                   	push   eax
c001802c:	57                   	push   edi
c001802d:	e8 54 04 ff ff       	call   c0008486 <File::stat(unsigned long long*, bool*)>
c0018032:	8a 4c 24 23          	mov    cl,BYTE PTR [esp+0x23]
c0018036:	83 c4 10             	add    esp,0x10
c0018039:	84 c9                	test   cl,cl
c001803b:	0f 85 e9 00 00 00    	jne    c001812a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1e3>
c0018041:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018045:	83 ec 08             	sub    esp,0x8
c0018048:	6a 01                	push   0x1
c001804a:	57                   	push   edi
c001804b:	e8 34 01 ff ff       	call   c0008184 <File::open(FileOpenMode)>
c0018050:	83 c4 10             	add    esp,0x10
c0018053:	85 c0                	test   eax,eax
c0018055:	0f 85 fd 00 00 00    	jne    c0018158 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x211>
c001805b:	83 ec 08             	sub    esp,0x8
c001805e:	0f b7 c5             	movzx  eax,bp
c0018061:	0f b7 f6             	movzx  esi,si
c0018064:	56                   	push   esi
c0018065:	50                   	push   eax
c0018066:	e8 fb fb ff ff       	call   c0017c66 <Vm::realToLinear(unsigned short, unsigned short)>
c001806b:	5a                   	pop    edx
c001806c:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001806e:	8d 54 24 20          	lea    edx,[esp+0x20]
c0018072:	52                   	push   edx
c0018073:	50                   	push   eax
c0018074:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018078:	56                   	push   esi
c0018079:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001807d:	55                   	push   ebp
c001807e:	57                   	push   edi
c001807f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0018082:	83 c4 14             	add    esp,0x14
c0018085:	57                   	push   edi
c0018086:	e8 57 01 ff ff       	call   c00081e2 <File::close()>
c001808b:	c6 05 89 fa 02 c0 00 	mov    BYTE PTR ds:0xc002fa89,0x0
c0018092:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c001809a:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c001809f:	83 c4 10             	add    esp,0x10
c00180a2:	85 c0                	test   eax,eax
c00180a4:	75 01                	jne    c00180a7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x160>
c00180a6:	fb                   	sti    
c00180a7:	83 ec 0c             	sub    esp,0xc
c00180aa:	a1 8c fa 02 c0       	mov    eax,ds:0xc002fa8c
c00180af:	50                   	push   eax
c00180b0:	e8 e7 f4 ff ff       	call   c001759c <unblockTask(ThreadControlBlock*)>
c00180b5:	83 c4 10             	add    esp,0x10
c00180b8:	83 c4 2c             	add    esp,0x2c
c00180bb:	88 d8                	mov    al,bl
c00180bd:	5b                   	pop    ebx
c00180be:	5e                   	pop    esi
c00180bf:	5f                   	pop    edi
c00180c0:	5d                   	pop    ebp
c00180c1:	c3                   	ret    
c00180c2:	fb                   	sti    
c00180c3:	e9 d8 fe ff ff       	jmp    c0017fa0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x59>
c00180c8:	83 ec 0c             	sub    esp,0xc
c00180cb:	68 14 01 00 00       	push   0x114
c00180d0:	e8 12 7c ff ff       	call   c000fce7 <malloc>
c00180d5:	83 c4 0c             	add    esp,0xc
c00180d8:	89 c3                	mov    ebx,eax
c00180da:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c00180df:	50                   	push   eax
c00180e0:	68 80 55 02 c0       	push   0xc0025580
c00180e5:	53                   	push   ebx
c00180e6:	e8 7b 00 ff ff       	call   c0008166 <File::File(char const*, Process*)>
c00180eb:	58                   	pop    eax
c00180ec:	5a                   	pop    edx
c00180ed:	6a 12                	push   0x12
c00180ef:	53                   	push   ebx
c00180f0:	e8 8f 00 ff ff       	call   c0008184 <File::open(FileOpenMode)>
c00180f5:	59                   	pop    ecx
c00180f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00180f8:	8d 4c 24 24          	lea    ecx,[esp+0x24]
c00180fc:	51                   	push   ecx
c00180fd:	6a 00                	push   0x0
c00180ff:	6a 00                	push   0x0
c0018101:	68 00 00 11 00       	push   0x110000
c0018106:	53                   	push   ebx
c0018107:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001810a:	83 c4 14             	add    esp,0x14
c001810d:	53                   	push   ebx
c001810e:	e8 cf 00 ff ff       	call   c00081e2 <File::close()>
c0018113:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018115:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018118:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001811b:	c6 05 80 fa 02 c0 01 	mov    BYTE PTR ds:0xc002fa80,0x1
c0018122:	83 c4 10             	add    esp,0x10
c0018125:	e9 45 fe ff ff       	jmp    c0017f6f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x28>
c001812a:	83 ec 0c             	sub    esp,0xc
c001812d:	68 af 55 02 c0       	push   0xc00255af
c0018132:	e8 f7 7e ff ff       	call   c001002e <KePanic(char const*)>
c0018137:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c001813f:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0018144:	83 c4 10             	add    esp,0x10
c0018147:	85 c0                	test   eax,eax
c0018149:	75 01                	jne    c001814c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x205>
c001814b:	fb                   	sti    
c001814c:	83 c4 2c             	add    esp,0x2c
c001814f:	31 db                	xor    ebx,ebx
c0018151:	88 d8                	mov    al,bl
c0018153:	5b                   	pop    ebx
c0018154:	5e                   	pop    esi
c0018155:	5f                   	pop    edi
c0018156:	5d                   	pop    ebp
c0018157:	c3                   	ret    
c0018158:	83 ec 0c             	sub    esp,0xc
c001815b:	68 c8 55 02 c0       	push   0xc00255c8
c0018160:	e8 c9 7e ff ff       	call   c001002e <KePanic(char const*)>
c0018165:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c001816d:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0018172:	83 c4 10             	add    esp,0x10
c0018175:	85 c0                	test   eax,eax
c0018177:	75 d3                	jne    c001814c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x205>
c0018179:	fb                   	sti    
c001817a:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001817e:	88 cb                	mov    bl,cl
c0018180:	e9 33 ff ff ff       	jmp    c00180b8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x171>
c0018185:	83 ec 0c             	sub    esp,0xc
c0018188:	68 9b 55 02 c0       	push   0xc002559b
c001818d:	eb a3                	jmp    c0018132 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1eb>

c001818f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001818f:	57                   	push   edi
c0018190:	56                   	push   esi
c0018191:	53                   	push   ebx
c0018192:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018196:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001819a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001819e:	83 e8 06             	sub    eax,0x6
c00181a1:	0f b7 c0             	movzx  eax,ax
c00181a4:	50                   	push   eax
c00181a5:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00181aa:	50                   	push   eax
c00181ab:	e8 b6 fa ff ff       	call   c0017c66 <Vm::realToLinear(unsigned short, unsigned short)>
c00181b0:	5a                   	pop    edx
c00181b1:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00181b4:	5b                   	pop    ebx
c00181b5:	8d 56 fa             	lea    edx,[esi-0x6]
c00181b8:	8b 59 38             	mov    ebx,DWORD PTR [ecx+0x38]
c00181bb:	81 e2 ff ff 00 00    	and    edx,0xffff
c00181c1:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00181c4:	8d 53 02             	lea    edx,[ebx+0x2]
c00181c7:	66 89 10             	mov    WORD PTR [eax],dx
c00181ca:	66 8b 51 3c          	mov    dx,WORD PTR [ecx+0x3c]
c00181ce:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00181d2:	8b 59 40             	mov    ebx,DWORD PTR [ecx+0x40]
c00181d5:	66 8b 71 40          	mov    si,WORD PTR [ecx+0x40]
c00181d9:	0f b6 d7             	movzx  edx,bh
c00181dc:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00181e0:	c1 e2 08             	shl    edx,0x8
c00181e3:	8b 35 00 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002000
c00181e9:	80 7e 61 00          	cmp    BYTE PTR [esi+0x61],0x0
c00181ed:	0f b6 f3             	movzx  esi,bl
c00181f0:	74 2c                	je     c001821e <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x8f>
c00181f2:	09 f2                	or     edx,esi
c00181f4:	80 ce 02             	or     dh,0x2
c00181f7:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00181fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018200:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018204:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c001820c:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001820f:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0018217:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001821a:	5b                   	pop    ebx
c001821b:	5e                   	pop    esi
c001821c:	5f                   	pop    edi
c001821d:	c3                   	ret    
c001821e:	09 f2                	or     edx,esi
c0018220:	80 e6 fd             	and    dh,0xfd
c0018223:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0018227:	eb d2                	jmp    c00181fb <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6c>

c0018229 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0018229:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001822e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018233:	c1 e0 04             	shl    eax,0x4
c0018236:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018239:	c3                   	ret    

c001823a <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001823a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001823f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018244:	c1 e0 04             	shl    eax,0x4
c0018247:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001824b:	c3                   	ret    

c001824c <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001824c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018251:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018256:	c1 e0 04             	shl    eax,0x4
c0018259:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001825c:	c3                   	ret    

c001825d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001825d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018262:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018267:	c1 e0 04             	shl    eax,0x4
c001826a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001826e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018271:	c3                   	ret    

c0018272 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018272:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018277:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001827c:	c1 e0 04             	shl    eax,0x4
c001827f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018283:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018287:	c3                   	ret    

c0018288 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018288:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001828d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018292:	c1 e0 04             	shl    eax,0x4
c0018295:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018299:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001829c:	c3                   	ret    

c001829d <Vm::faultHandler(regs*)>:
c001829d:	55                   	push   ebp
c001829e:	57                   	push   edi
c001829f:	56                   	push   esi
c00182a0:	53                   	push   ebx
c00182a1:	83 ec 1c             	sub    esp,0x1c
c00182a4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00182a8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00182ab:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00182af:	89 c6                	mov    esi,eax
c00182b1:	52                   	push   edx
c00182b2:	0f b7 c0             	movzx  eax,ax
c00182b5:	50                   	push   eax
c00182b6:	e8 ab f9 ff ff       	call   c0017c66 <Vm::realToLinear(unsigned short, unsigned short)>
c00182bb:	59                   	pop    ecx
c00182bc:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00182bf:	5f                   	pop    edi
c00182c0:	0f b7 d5             	movzx  edx,bp
c00182c3:	8b 7b 44             	mov    edi,DWORD PTR [ebx+0x44]
c00182c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00182ca:	89 c1                	mov    ecx,eax
c00182cc:	0f b7 c7             	movzx  eax,di
c00182cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00182d3:	50                   	push   eax
c00182d4:	52                   	push   edx
c00182d5:	e8 8c f9 ff ff       	call   c0017c66 <Vm::realToLinear(unsigned short, unsigned short)>
c00182da:	83 c4 08             	add    esp,0x8
c00182dd:	c6 44 24 06 06       	mov    BYTE PTR [esp+0x6],0x6
c00182e2:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c00182e7:	c6 44 24 05 00       	mov    BYTE PTR [esp+0x5],0x0
c00182ec:	8a 11                	mov    dl,BYTE PTR [ecx]
c00182ee:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c00182f2:	83 ea 26             	sub    edx,0x26
c00182f5:	0f b6 d2             	movzx  edx,dl
c00182f8:	81 fa d5 00 00 00    	cmp    edx,0xd5
c00182fe:	0f 87 04 04 00 00    	ja     c0018708 <Vm::faultHandler(regs*)+0x46b>
c0018304:	ff 24 95 68 56 02 c0 	jmp    DWORD PTR [edx*4-0x3ffda998]
c001830b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018310:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0018314:	b0 01                	mov    al,0x1
c0018316:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0018319:	83 c5 01             	add    ebp,0x1
c001831c:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c001831f:	83 c4 1c             	add    esp,0x1c
c0018322:	5b                   	pop    ebx
c0018323:	5e                   	pop    esi
c0018324:	5f                   	pop    edi
c0018325:	5d                   	pop    ebp
c0018326:	c3                   	ret    
c0018327:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001832a:	c6 44 24 06 02       	mov    BYTE PTR [esp+0x6],0x2
c001832f:	83 c2 01             	add    edx,0x1
c0018332:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018335:	83 c1 01             	add    ecx,0x1
c0018338:	eb b2                	jmp    c00182ec <Vm::faultHandler(regs*)+0x4f>
c001833a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001833d:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c0018342:	83 c2 01             	add    edx,0x1
c0018345:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018348:	eb eb                	jmp    c0018335 <Vm::faultHandler(regs*)+0x98>
c001834a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001834d:	c6 44 24 06 05       	mov    BYTE PTR [esp+0x6],0x5
c0018352:	83 c2 01             	add    edx,0x1
c0018355:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018358:	eb db                	jmp    c0018335 <Vm::faultHandler(regs*)+0x98>
c001835a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001835d:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c0018362:	83 c2 01             	add    edx,0x1
c0018365:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018368:	eb cb                	jmp    c0018335 <Vm::faultHandler(regs*)+0x98>
c001836a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001836d:	c6 44 24 06 03       	mov    BYTE PTR [esp+0x6],0x3
c0018372:	83 c2 01             	add    edx,0x1
c0018375:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018378:	eb bb                	jmp    c0018335 <Vm::faultHandler(regs*)+0x98>
c001837a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001837d:	c6 44 24 06 04       	mov    BYTE PTR [esp+0x6],0x4
c0018382:	83 c2 01             	add    edx,0x1
c0018385:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018388:	eb ab                	jmp    c0018335 <Vm::faultHandler(regs*)+0x98>
c001838a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001838d:	c6 44 24 05 01       	mov    BYTE PTR [esp+0x5],0x1
c0018392:	83 c2 01             	add    edx,0x1
c0018395:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018398:	eb 9b                	jmp    c0018335 <Vm::faultHandler(regs*)+0x98>
c001839a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001839d:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c00183a2:	83 c2 01             	add    edx,0x1
c00183a5:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00183a8:	eb 8b                	jmp    c0018335 <Vm::faultHandler(regs*)+0x98>
c00183aa:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00183ad:	f6 44 24 07 01       	test   BYTE PTR [esp+0x7],0x1
c00183b2:	74 0d                	je     c00183c1 <Vm::faultHandler(regs*)+0x124>
c00183b4:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00183bb:	0f 87 8a 06 00 00    	ja     c0018a4b <Vm::faultHandler(regs*)+0x7ae>
c00183c1:	83 ec 0c             	sub    esp,0xc
c00183c4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00183c8:	0f b7 f6             	movzx  esi,si
c00183cb:	50                   	push   eax
c00183cc:	e8 4c f8 ff ff       	call   c0017c1d <Vm::inbv(unsigned short)>
c00183d1:	83 c4 0c             	add    esp,0xc
c00183d4:	0f b6 c0             	movzx  eax,al
c00183d7:	50                   	push   eax
c00183d8:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00183dc:	50                   	push   eax
c00183dd:	56                   	push   esi
c00183de:	e8 7a fe ff ff       	call   c001825d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00183e3:	83 c4 10             	add    esp,0x10
c00183e6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00183e9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00183ed:	0f 84 d6 05 00 00    	je     c00189c9 <Vm::faultHandler(regs*)+0x72c>
c00183f3:	83 e8 01             	sub    eax,0x1
c00183f6:	0f b7 c0             	movzx  eax,ax
c00183f9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00183fc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00183ff:	83 c0 01             	add    eax,0x1
c0018402:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018405:	83 c4 1c             	add    esp,0x1c
c0018408:	b0 01                	mov    al,0x1
c001840a:	5b                   	pop    ebx
c001840b:	5e                   	pop    esi
c001840c:	5f                   	pop    edi
c001840d:	5d                   	pop    ebp
c001840e:	c3                   	ret    
c001840f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018412:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018415:	f6 44 24 07 01       	test   BYTE PTR [esp+0x7],0x1
c001841a:	0f 85 98 04 00 00    	jne    c00188b8 <Vm::faultHandler(regs*)+0x61b>
c0018420:	0f b7 c8             	movzx  ecx,ax
c0018423:	0f b7 f6             	movzx  esi,si
c0018426:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018429:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c001842e:	0f 84 35 05 00 00    	je     c0018969 <Vm::faultHandler(regs*)+0x6cc>
c0018434:	ed                   	in     eax,dx
c0018435:	83 ec 04             	sub    esp,0x4
c0018438:	50                   	push   eax
c0018439:	51                   	push   ecx
c001843a:	56                   	push   esi
c001843b:	e8 48 fe ff ff       	call   c0018288 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018440:	83 c4 10             	add    esp,0x10
c0018443:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018446:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001844a:	0f 84 9d 05 00 00    	je     c00189ed <Vm::faultHandler(regs*)+0x750>
c0018450:	83 e8 04             	sub    eax,0x4
c0018453:	25 ff ff 00 00       	and    eax,0xffff
c0018458:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001845b:	eb 9f                	jmp    c00183fc <Vm::faultHandler(regs*)+0x15f>
c001845d:	0f b6 44 24 06       	movzx  eax,BYTE PTR [esp+0x6]
c0018462:	83 f8 06             	cmp    eax,0x6
c0018465:	0f 87 60 03 00 00    	ja     c00187cb <Vm::faultHandler(regs*)+0x52e>
c001846b:	ff 24 85 c0 59 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda640]
c0018472:	0f b6 44 24 06       	movzx  eax,BYTE PTR [esp+0x6]
c0018477:	83 f8 06             	cmp    eax,0x6
c001847a:	0f 87 f6 02 00 00    	ja     c0018776 <Vm::faultHandler(regs*)+0x4d9>
c0018480:	ff 24 85 dc 59 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda624]
c0018487:	83 ec 08             	sub    esp,0x8
c001848a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001848e:	50                   	push   eax
c001848f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018493:	50                   	push   eax
c0018494:	e8 97 f7 ff ff       	call   c0017c30 <Vm::outbv(unsigned short, unsigned char)>
c0018499:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c001849c:	83 c4 10             	add    esp,0x10
c001849f:	83 c0 02             	add    eax,0x2
c00184a2:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00184a5:	b0 01                	mov    al,0x1
c00184a7:	e9 73 fe ff ff       	jmp    c001831f <Vm::faultHandler(regs*)+0x82>
c00184ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00184b0:	3d ee 00 00 00       	cmp    eax,0xee
c00184b5:	0f 84 5a 04 00 00    	je     c0018915 <Vm::faultHandler(regs*)+0x678>
c00184bb:	83 ec 0c             	sub    esp,0xc
c00184be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00184c2:	52                   	push   edx
c00184c3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00184c7:	56                   	push   esi
c00184c8:	51                   	push   ecx
c00184c9:	50                   	push   eax
c00184ca:	53                   	push   ebx
c00184cb:	e8 bf fc ff ff       	call   c001818f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00184d0:	83 c4 20             	add    esp,0x20
c00184d3:	b0 01                	mov    al,0x1
c00184d5:	e9 45 fe ff ff       	jmp    c001831f <Vm::faultHandler(regs*)+0x82>
c00184da:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00184de:	89 d1                	mov    ecx,edx
c00184e0:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00184e3:	c1 e1 08             	shl    ecx,0x8
c00184e6:	09 ca                	or     edx,ecx
c00184e8:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00184eb:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00184ef:	89 d1                	mov    ecx,edx
c00184f1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00184f5:	c1 e1 08             	shl    ecx,0x8
c00184f8:	09 ca                	or     edx,ecx
c00184fa:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00184fd:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0018501:	89 d1                	mov    ecx,edx
c0018503:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0018507:	c1 e1 08             	shl    ecx,0x8
c001850a:	09 ca                	or     edx,ecx
c001850c:	81 ca 00 02 02 00    	or     edx,0x20200
c0018512:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018515:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0018519:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001851f:	d1 e8                	shr    eax,1
c0018521:	83 e0 01             	and    eax,0x1
c0018524:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018527:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001852a:	83 c0 06             	add    eax,0x6
c001852d:	25 ff ff 00 00       	and    eax,0xffff
c0018532:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018535:	b0 01                	mov    al,0x1
c0018537:	e9 e3 fd ff ff       	jmp    c001831f <Vm::faultHandler(regs*)+0x82>
c001853c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001853f:	83 ec 0c             	sub    esp,0xc
c0018542:	b0 00                	mov    al,0x0
c0018544:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018547:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001854b:	50                   	push   eax
c001854c:	e8 cc f6 ff ff       	call   c0017c1d <Vm::inbv(unsigned short)>
c0018551:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018554:	0f b6 c0             	movzx  eax,al
c0018557:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001855a:	09 c2                	or     edx,eax
c001855c:	83 c1 02             	add    ecx,0x2
c001855f:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0018562:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0018565:	83 c4 10             	add    esp,0x10
c0018568:	b0 01                	mov    al,0x1
c001856a:	e9 b0 fd ff ff       	jmp    c001831f <Vm::faultHandler(regs*)+0x82>
c001856f:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018574:	0f 85 7a 03 00 00    	jne    c00188f4 <Vm::faultHandler(regs*)+0x657>
c001857a:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001857d:	81 e6 00 00 ff ff    	and    esi,0xffff0000
c0018583:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0018586:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001858a:	66 ed                	in     ax,dx
c001858c:	0f b7 c0             	movzx  eax,ax
c001858f:	09 f0                	or     eax,esi
c0018591:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018594:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0018597:	83 c0 02             	add    eax,0x2
c001859a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001859d:	83 c4 1c             	add    esp,0x1c
c00185a0:	b0 01                	mov    al,0x1
c00185a2:	5b                   	pop    ebx
c00185a3:	5e                   	pop    esi
c00185a4:	5f                   	pop    edi
c00185a5:	5d                   	pop    ebp
c00185a6:	c3                   	ret    
c00185a7:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00185aa:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c00185af:	0f 84 d7 02 00 00    	je     c001888c <Vm::faultHandler(regs*)+0x5ef>
c00185b5:	83 ef 04             	sub    edi,0x4
c00185b8:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00185be:	81 e7 ff ff 00 00    	and    edi,0xffff
c00185c4:	89 7b 44             	mov    DWORD PTR [ebx+0x44],edi
c00185c7:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00185ca:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00185d0:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c00185d4:	0f 84 22 fe ff ff    	je     c00183fc <Vm::faultHandler(regs*)+0x15f>
c00185da:	80 ce 02             	or     dh,0x2
c00185dd:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00185e0:	e9 17 fe ff ff       	jmp    c00183fc <Vm::faultHandler(regs*)+0x15f>
c00185e5:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c00185ea:	0f 84 6b 02 00 00    	je     c001885b <Vm::faultHandler(regs*)+0x5be>
c00185f0:	8b 10                	mov    edx,DWORD PTR [eax]
c00185f2:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00185f8:	81 ca 00 02 02 00    	or     edx,0x20200
c00185fe:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018601:	8b 00                	mov    eax,DWORD PTR [eax]
c0018603:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018609:	c1 e8 09             	shr    eax,0x9
c001860c:	83 e0 01             	and    eax,0x1
c001860f:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018612:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018615:	83 c0 04             	add    eax,0x4
c0018618:	25 ff ff 00 00       	and    eax,0xffff
c001861d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018620:	e9 d7 fd ff ff       	jmp    c00183fc <Vm::faultHandler(regs*)+0x15f>
c0018625:	83 ec 08             	sub    esp,0x8
c0018628:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001862c:	50                   	push   eax
c001862d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018631:	50                   	push   eax
c0018632:	e8 f9 f5 ff ff       	call   c0017c30 <Vm::outbv(unsigned short, unsigned char)>
c0018637:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001863a:	83 c4 10             	add    esp,0x10
c001863d:	83 c2 01             	add    edx,0x1
c0018640:	b0 01                	mov    al,0x1
c0018642:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018645:	e9 d5 fc ff ff       	jmp    c001831f <Vm::faultHandler(regs*)+0x82>
c001864a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001864d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018650:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018655:	0f 84 ac 02 00 00    	je     c0018907 <Vm::faultHandler(regs*)+0x66a>
c001865b:	ef                   	out    dx,eax
c001865c:	e9 9b fd ff ff       	jmp    c00183fc <Vm::faultHandler(regs*)+0x15f>
c0018661:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018664:	83 c2 01             	add    edx,0x1
c0018667:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001866a:	e9 c6 fc ff ff       	jmp    c0018335 <Vm::faultHandler(regs*)+0x98>
c001866f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018674:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018678:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c001867b:	83 c0 01             	add    eax,0x1
c001867e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018681:	b0 01                	mov    al,0x1
c0018683:	e9 97 fc ff ff       	jmp    c001831f <Vm::faultHandler(regs*)+0x82>
c0018688:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001868b:	83 ec 0c             	sub    esp,0xc
c001868e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018692:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0018698:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001869b:	50                   	push   eax
c001869c:	e8 7c f5 ff ff       	call   c0017c1d <Vm::inbv(unsigned short)>
c00186a1:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c00186a4:	0f b6 c0             	movzx  eax,al
c00186a7:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00186aa:	09 c7                	or     edi,eax
c00186ac:	83 c5 01             	add    ebp,0x1
c00186af:	89 7b 2c             	mov    DWORD PTR [ebx+0x2c],edi
c00186b2:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c00186b5:	83 c4 10             	add    esp,0x10
c00186b8:	b0 01                	mov    al,0x1
c00186ba:	e9 60 fc ff ff       	jmp    c001831f <Vm::faultHandler(regs*)+0x82>
c00186bf:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00186c2:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c00186c7:	0f 85 34 02 00 00    	jne    c0018901 <Vm::faultHandler(regs*)+0x664>
c00186cd:	66 ed                	in     ax,dx
c00186cf:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00186d2:	0f b7 c0             	movzx  eax,ax
c00186d5:	81 e2 00 00 ff ff    	and    edx,0xffff0000
c00186db:	09 d0                	or     eax,edx
c00186dd:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00186e0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00186e3:	83 c1 01             	add    ecx,0x1
c00186e6:	b0 01                	mov    al,0x1
c00186e8:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c00186eb:	e9 2f fc ff ff       	jmp    c001831f <Vm::faultHandler(regs*)+0x82>
c00186f0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00186f3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00186f7:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c00186fc:	0f 84 0c 02 00 00    	je     c001890e <Vm::faultHandler(regs*)+0x671>
c0018702:	ef                   	out    dx,eax
c0018703:	e9 8c fe ff ff       	jmp    c0018594 <Vm::faultHandler(regs*)+0x2f7>
c0018708:	0f b6 74 24 04       	movzx  esi,BYTE PTR [esp+0x4]
c001870d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018711:	50                   	push   eax
c0018712:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018716:	50                   	push   eax
c0018717:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001871b:	50                   	push   eax
c001871c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018720:	50                   	push   eax
c0018721:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018725:	50                   	push   eax
c0018726:	56                   	push   esi
c0018727:	56                   	push   esi
c0018728:	68 38 56 02 c0       	push   0xc0025638
c001872d:	e8 32 e8 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018732:	83 c4 20             	add    esp,0x20
c0018735:	eb 05                	jmp    c001873c <Vm::faultHandler(regs*)+0x49f>
c0018737:	83 f8 5a             	cmp    eax,0x5a
c001873a:	74 27                	je     c0018763 <Vm::faultHandler(regs*)+0x4c6>
c001873c:	83 ec 0c             	sub    esp,0xc
c001873f:	6a 60                	push   0x60
c0018741:	e8 d7 f4 ff ff       	call   c0017c1d <Vm::inbv(unsigned short)>
c0018746:	83 c4 10             	add    esp,0x10
c0018749:	0f b6 c0             	movzx  eax,al
c001874c:	83 f8 1c             	cmp    eax,0x1c
c001874f:	75 e6                	jne    c0018737 <Vm::faultHandler(regs*)+0x49a>
c0018751:	eb 10                	jmp    c0018763 <Vm::faultHandler(regs*)+0x4c6>
c0018753:	83 ec 0c             	sub    esp,0xc
c0018756:	6a 60                	push   0x60
c0018758:	e8 c0 f4 ff ff       	call   c0017c1d <Vm::inbv(unsigned short)>
c001875d:	83 c4 10             	add    esp,0x10
c0018760:	0f b6 c0             	movzx  eax,al
c0018763:	83 f8 1c             	cmp    eax,0x1c
c0018766:	74 eb                	je     c0018753 <Vm::faultHandler(regs*)+0x4b6>
c0018768:	83 f8 5a             	cmp    eax,0x5a
c001876b:	74 e6                	je     c0018753 <Vm::faultHandler(regs*)+0x4b6>
c001876d:	31 c0                	xor    eax,eax
c001876f:	e9 ab fb ff ff       	jmp    c001831f <Vm::faultHandler(regs*)+0x82>
c0018774:	8b 33                	mov    esi,DWORD PTR [ebx]
c0018776:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0018779:	f6 44 24 07 01       	test   BYTE PTR [esp+0x7],0x1
c001877e:	0f 85 9a 00 00 00    	jne    c001881e <Vm::faultHandler(regs*)+0x581>
c0018784:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0018787:	0f b7 c5             	movzx  eax,bp
c001878a:	81 e1 00 04 00 00    	and    ecx,0x400
c0018790:	0f b7 d6             	movzx  edx,si
c0018793:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0018796:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c001879b:	0f 84 f8 01 00 00    	je     c0018999 <Vm::faultHandler(regs*)+0x6fc>
c00187a1:	83 ec 08             	sub    esp,0x8
c00187a4:	50                   	push   eax
c00187a5:	52                   	push   edx
c00187a6:	e8 a1 fa ff ff       	call   c001824c <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00187ab:	83 c4 10             	add    esp,0x10
c00187ae:	89 fa                	mov    edx,edi
c00187b0:	ef                   	out    dx,eax
c00187b1:	85 c9                	test   ecx,ecx
c00187b3:	0f 84 44 02 00 00    	je     c00189fd <Vm::faultHandler(regs*)+0x760>
c00187b9:	8d 45 fc             	lea    eax,[ebp-0x4]
c00187bc:	25 ff ff 00 00       	and    eax,0xffff
c00187c1:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00187c4:	e9 33 fc ff ff       	jmp    c00183fc <Vm::faultHandler(regs*)+0x15f>
c00187c9:	8b 33                	mov    esi,DWORD PTR [ebx]
c00187cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00187ce:	f6 44 24 07 01       	test   BYTE PTR [esp+0x7],0x1
c00187d3:	74 0b                	je     c00187e0 <Vm::faultHandler(regs*)+0x543>
c00187d5:	3d ff ff 00 00       	cmp    eax,0xffff
c00187da:	0f 87 3a 02 00 00    	ja     c0018a1a <Vm::faultHandler(regs*)+0x77d>
c00187e0:	83 ec 08             	sub    esp,0x8
c00187e3:	0f b7 c0             	movzx  eax,ax
c00187e6:	50                   	push   eax
c00187e7:	0f b7 c6             	movzx  eax,si
c00187ea:	50                   	push   eax
c00187eb:	e8 39 fa ff ff       	call   c0018229 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00187f0:	5e                   	pop    esi
c00187f1:	0f b6 c0             	movzx  eax,al
c00187f4:	5f                   	pop    edi
c00187f5:	50                   	push   eax
c00187f6:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00187fa:	50                   	push   eax
c00187fb:	e8 30 f4 ff ff       	call   c0017c30 <Vm::outbv(unsigned short, unsigned char)>
c0018800:	83 c4 10             	add    esp,0x10
c0018803:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018806:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001880a:	0f 84 ae 01 00 00    	je     c00189be <Vm::faultHandler(regs*)+0x721>
c0018810:	83 e8 01             	sub    eax,0x1
c0018813:	0f b7 c0             	movzx  eax,ax
c0018816:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018819:	e9 de fb ff ff       	jmp    c00183fc <Vm::faultHandler(regs*)+0x15f>
c001881e:	81 fd ff ff 00 00    	cmp    ebp,0xffff
c0018824:	0f 86 5a ff ff ff    	jbe    c0018784 <Vm::faultHandler(regs*)+0x4e7>
c001882a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001882e:	50                   	push   eax
c001882f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018833:	50                   	push   eax
c0018834:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018838:	50                   	push   eax
c0018839:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001883d:	50                   	push   eax
c001883e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018842:	50                   	push   eax
c0018843:	6a 6f                	push   0x6f
c0018845:	6a 6f                	push   0x6f
c0018847:	68 08 56 02 c0       	push   0xc0025608
c001884c:	e8 13 e7 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018851:	83 c4 20             	add    esp,0x20
c0018854:	31 c0                	xor    eax,eax
c0018856:	e9 c4 fa ff ff       	jmp    c001831f <Vm::faultHandler(regs*)+0x82>
c001885b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001885e:	81 ca 00 02 02 00    	or     edx,0x20200
c0018864:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018867:	0f b7 00             	movzx  eax,WORD PTR [eax]
c001886a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018870:	c1 e8 09             	shr    eax,0x9
c0018873:	83 e0 01             	and    eax,0x1
c0018876:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018879:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001887c:	83 c0 02             	add    eax,0x2
c001887f:	25 ff ff 00 00       	and    eax,0xffff
c0018884:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018887:	e9 70 fb ff ff       	jmp    c00183fc <Vm::faultHandler(regs*)+0x15f>
c001888c:	83 ef 02             	sub    edi,0x2
c001888f:	81 e7 ff ff 00 00    	and    edi,0xffff
c0018895:	89 7b 44             	mov    DWORD PTR [ebx+0x44],edi
c0018898:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001889c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00188a2:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c00188a6:	0f 84 28 01 00 00    	je     c00189d4 <Vm::faultHandler(regs*)+0x737>
c00188ac:	80 ce 02             	or     dh,0x2
c00188af:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00188b3:	e9 44 fb ff ff       	jmp    c00183fc <Vm::faultHandler(regs*)+0x15f>
c00188b8:	3d ff ff 00 00       	cmp    eax,0xffff
c00188bd:	0f 86 5d fb ff ff    	jbe    c0018420 <Vm::faultHandler(regs*)+0x183>
c00188c3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00188c7:	50                   	push   eax
c00188c8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00188cc:	50                   	push   eax
c00188cd:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00188d1:	50                   	push   eax
c00188d2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00188d6:	50                   	push   eax
c00188d7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00188db:	50                   	push   eax
c00188dc:	6a 6d                	push   0x6d
c00188de:	6a 6d                	push   0x6d
c00188e0:	68 08 56 02 c0       	push   0xc0025608
c00188e5:	e8 7a e6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00188ea:	83 c4 20             	add    esp,0x20
c00188ed:	31 c0                	xor    eax,eax
c00188ef:	e9 2b fa ff ff       	jmp    c001831f <Vm::faultHandler(regs*)+0x82>
c00188f4:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00188f8:	ed                   	in     eax,dx
c00188f9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00188fc:	e9 93 fc ff ff       	jmp    c0018594 <Vm::faultHandler(regs*)+0x2f7>
c0018901:	ed                   	in     eax,dx
c0018902:	e9 d6 fd ff ff       	jmp    c00186dd <Vm::faultHandler(regs*)+0x440>
c0018907:	66 ef                	out    dx,ax
c0018909:	e9 ee fa ff ff       	jmp    c00183fc <Vm::faultHandler(regs*)+0x15f>
c001890e:	66 ef                	out    dx,ax
c0018910:	e9 7f fc ff ff       	jmp    c0018594 <Vm::faultHandler(regs*)+0x2f7>
c0018915:	83 ec 0c             	sub    esp,0xc
c0018918:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c001891b:	57                   	push   edi
c001891c:	e8 b7 f3 ff ff       	call   c0017cd8 <Vm::mainloop3(unsigned long)>
c0018921:	83 c4 10             	add    esp,0x10
c0018924:	b0 01                	mov    al,0x1
c0018926:	e9 f4 f9 ff ff       	jmp    c001831f <Vm::faultHandler(regs*)+0x82>
c001892b:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c001892e:	e9 43 fe ff ff       	jmp    c0018776 <Vm::faultHandler(regs*)+0x4d9>
c0018933:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018936:	e9 3b fe ff ff       	jmp    c0018776 <Vm::faultHandler(regs*)+0x4d9>
c001893b:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001893e:	e9 33 fe ff ff       	jmp    c0018776 <Vm::faultHandler(regs*)+0x4d9>
c0018943:	89 ee                	mov    esi,ebp
c0018945:	e9 2c fe ff ff       	jmp    c0018776 <Vm::faultHandler(regs*)+0x4d9>
c001894a:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c001894d:	e9 79 fe ff ff       	jmp    c00187cb <Vm::faultHandler(regs*)+0x52e>
c0018952:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018955:	e9 71 fe ff ff       	jmp    c00187cb <Vm::faultHandler(regs*)+0x52e>
c001895a:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001895d:	e9 69 fe ff ff       	jmp    c00187cb <Vm::faultHandler(regs*)+0x52e>
c0018962:	89 ee                	mov    esi,ebp
c0018964:	e9 62 fe ff ff       	jmp    c00187cb <Vm::faultHandler(regs*)+0x52e>
c0018969:	66 ed                	in     ax,dx
c001896b:	83 ec 04             	sub    esp,0x4
c001896e:	0f b7 c0             	movzx  eax,ax
c0018971:	50                   	push   eax
c0018972:	51                   	push   ecx
c0018973:	56                   	push   esi
c0018974:	e8 f9 f8 ff ff       	call   c0018272 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018979:	83 c4 10             	add    esp,0x10
c001897c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001897f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018983:	0f 84 84 00 00 00    	je     c0018a0d <Vm::faultHandler(regs*)+0x770>
c0018989:	83 e8 02             	sub    eax,0x2
c001898c:	25 ff ff 00 00       	and    eax,0xffff
c0018991:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0018994:	e9 63 fa ff ff       	jmp    c00183fc <Vm::faultHandler(regs*)+0x15f>
c0018999:	83 ec 08             	sub    esp,0x8
c001899c:	50                   	push   eax
c001899d:	52                   	push   edx
c001899e:	e8 97 f8 ff ff       	call   c001823a <Vm::readWordFromReal(unsigned short, unsigned short)>
c00189a3:	83 c4 10             	add    esp,0x10
c00189a6:	89 fa                	mov    edx,edi
c00189a8:	66 ef                	out    dx,ax
c00189aa:	85 c9                	test   ecx,ecx
c00189ac:	74 32                	je     c00189e0 <Vm::faultHandler(regs*)+0x743>
c00189ae:	8d 45 fe             	lea    eax,[ebp-0x2]
c00189b1:	25 ff ff 00 00       	and    eax,0xffff
c00189b6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00189b9:	e9 3e fa ff ff       	jmp    c00183fc <Vm::faultHandler(regs*)+0x15f>
c00189be:	83 c0 01             	add    eax,0x1
c00189c1:	0f b7 c0             	movzx  eax,ax
c00189c4:	e9 4d fe ff ff       	jmp    c0018816 <Vm::faultHandler(regs*)+0x579>
c00189c9:	83 c0 01             	add    eax,0x1
c00189cc:	0f b7 c0             	movzx  eax,ax
c00189cf:	e9 25 fa ff ff       	jmp    c00183f9 <Vm::faultHandler(regs*)+0x15c>
c00189d4:	80 e6 fd             	and    dh,0xfd
c00189d7:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00189db:	e9 1c fa ff ff       	jmp    c00183fc <Vm::faultHandler(regs*)+0x15f>
c00189e0:	8d 45 02             	lea    eax,[ebp+0x2]
c00189e3:	25 ff ff 00 00       	and    eax,0xffff
c00189e8:	e9 29 fe ff ff       	jmp    c0018816 <Vm::faultHandler(regs*)+0x579>
c00189ed:	83 c0 04             	add    eax,0x4
c00189f0:	25 ff ff 00 00       	and    eax,0xffff
c00189f5:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00189f8:	e9 ff f9 ff ff       	jmp    c00183fc <Vm::faultHandler(regs*)+0x15f>
c00189fd:	8d 45 04             	lea    eax,[ebp+0x4]
c0018a00:	25 ff ff 00 00       	and    eax,0xffff
c0018a05:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018a08:	e9 ef f9 ff ff       	jmp    c00183fc <Vm::faultHandler(regs*)+0x15f>
c0018a0d:	83 c0 02             	add    eax,0x2
c0018a10:	25 ff ff 00 00       	and    eax,0xffff
c0018a15:	e9 df f9 ff ff       	jmp    c00183f9 <Vm::faultHandler(regs*)+0x15c>
c0018a1a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018a1e:	50                   	push   eax
c0018a1f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018a23:	50                   	push   eax
c0018a24:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018a28:	50                   	push   eax
c0018a29:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018a2d:	50                   	push   eax
c0018a2e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018a32:	50                   	push   eax
c0018a33:	6a 6e                	push   0x6e
c0018a35:	6a 6e                	push   0x6e
c0018a37:	68 08 56 02 c0       	push   0xc0025608
c0018a3c:	e8 23 e5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018a41:	83 c4 20             	add    esp,0x20
c0018a44:	31 c0                	xor    eax,eax
c0018a46:	e9 d4 f8 ff ff       	jmp    c001831f <Vm::faultHandler(regs*)+0x82>
c0018a4b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018a4f:	50                   	push   eax
c0018a50:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018a54:	50                   	push   eax
c0018a55:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018a59:	50                   	push   eax
c0018a5a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018a5e:	50                   	push   eax
c0018a5f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018a63:	50                   	push   eax
c0018a64:	6a 6c                	push   0x6c
c0018a66:	6a 6c                	push   0x6c
c0018a68:	68 08 56 02 c0       	push   0xc0025608
c0018a6d:	e8 f2 e4 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018a72:	83 c4 20             	add    esp,0x20
c0018a75:	31 c0                	xor    eax,eax
c0018a77:	e9 a3 f8 ff ff       	jmp    c001831f <Vm::faultHandler(regs*)+0x82>

c0018a7c <noCopro(unsigned long)>:
c0018a7c:	c3                   	ret    
c0018a7d:	90                   	nop

c0018a7e <CPU::close(int, int, void*)>:
c0018a7e:	31 c0                	xor    eax,eax
c0018a80:	c3                   	ret    

c0018a81 <x86ReadCMOS(unsigned char)>:
c0018a81:	83 ec 14             	sub    esp,0x14
c0018a84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a88:	88 04 24             	mov    BYTE PTR [esp],al
c0018a8b:	a0 ec fa 02 c0       	mov    al,ds:0xc002faec
c0018a90:	0f b6 c0             	movzx  eax,al
c0018a93:	85 c0                	test   eax,eax
c0018a95:	74 04                	je     c0018a9b <x86ReadCMOS(unsigned char)+0x1a>
c0018a97:	b2 00                	mov    dl,0x0
c0018a99:	eb 02                	jmp    c0018a9d <x86ReadCMOS(unsigned char)+0x1c>
c0018a9b:	b2 80                	mov    dl,0x80
c0018a9d:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018aa0:	09 d0                	or     eax,edx
c0018aa2:	0f b6 c0             	movzx  eax,al
c0018aa5:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c0018aac:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018ab0:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018ab4:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018ab9:	ee                   	out    dx,al
c0018aba:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0018ac1:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018ac6:	89 c2                	mov    edx,eax
c0018ac8:	ec                   	in     al,dx
c0018ac9:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018acd:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018ad1:	83 c4 14             	add    esp,0x14
c0018ad4:	c3                   	ret    

c0018ad5 <x86WriteCMOS(unsigned char, unsigned char)>:
c0018ad5:	83 ec 18             	sub    esp,0x18
c0018ad8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018adc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ae0:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c0018ae4:	88 04 24             	mov    BYTE PTR [esp],al
c0018ae7:	a0 ec fa 02 c0       	mov    al,ds:0xc002faec
c0018aec:	0f b6 c0             	movzx  eax,al
c0018aef:	85 c0                	test   eax,eax
c0018af1:	74 04                	je     c0018af7 <x86WriteCMOS(unsigned char, unsigned char)+0x22>
c0018af3:	b2 00                	mov    dl,0x0
c0018af5:	eb 02                	jmp    c0018af9 <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0018af7:	b2 80                	mov    dl,0x80
c0018af9:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0018afd:	09 d0                	or     eax,edx
c0018aff:	0f b6 c0             	movzx  eax,al
c0018b02:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0018b09:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018b0d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018b11:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018b16:	ee                   	out    dx,al
c0018b17:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0018b1b:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0018b22:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0018b26:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0018b2a:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0018b2f:	ee                   	out    dx,al
c0018b30:	90                   	nop
c0018b31:	83 c4 18             	add    esp,0x18
c0018b34:	c3                   	ret    

c0018b35 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0018b35:	60                   	pusha  
c0018b36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018b3e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018b42:	9c                   	pushf  
c0018b43:	fa                   	cli    
c0018b44:	0f 09                	wbinvd 
c0018b46:	0f 30                	wrmsr  
c0018b48:	9d                   	popf   
c0018b49:	89 c2                	mov    edx,eax
c0018b4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b4f:	89 10                	mov    DWORD PTR [eax],edx
c0018b51:	61                   	popa   
c0018b52:	90                   	nop
c0018b53:	c3                   	ret    

c0018b54 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0018b54:	60                   	pusha  
c0018b55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b59:	89 c1                	mov    ecx,eax
c0018b5b:	9c                   	pushf  
c0018b5c:	fa                   	cli    
c0018b5d:	0f 09                	wbinvd 
c0018b5f:	31 c0                	xor    eax,eax
c0018b61:	31 d2                	xor    edx,edx
c0018b63:	0f 32                	rdmsr  
c0018b65:	9d                   	popf   
c0018b66:	89 c2                	mov    edx,eax
c0018b68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b6c:	89 10                	mov    DWORD PTR [eax],edx
c0018b6e:	61                   	popa   
c0018b6f:	90                   	nop
c0018b70:	c3                   	ret    

c0018b71 <AMD_K6_writeback(int, int, int)>:
c0018b71:	83 ec 20             	sub    esp,0x20
c0018b74:	a1 34 f1 02 c0       	mov    eax,ds:0xc002f134
c0018b79:	c1 e8 14             	shr    eax,0x14
c0018b7c:	c1 e8 02             	shr    eax,0x2
c0018b7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018b83:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0018b88:	0f 85 9e 00 00 00    	jne    c0018c2c <AMD_K6_writeback(int, int, int)+0xbb>
c0018b8e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b92:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018b96:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0018b9b:	75 19                	jne    c0018bb6 <AMD_K6_writeback(int, int, int)+0x45>
c0018b9d:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0018ba2:	7f 0a                	jg     c0018bae <AMD_K6_writeback(int, int, int)+0x3d>
c0018ba4:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0018bac:	eb 08                	jmp    c0018bb6 <AMD_K6_writeback(int, int, int)+0x45>
c0018bae:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0018bb6:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0018bbb:	7c 6e                	jl     c0018c2b <AMD_K6_writeback(int, int, int)+0xba>
c0018bbd:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0018bc2:	7e 09                	jle    c0018bcd <AMD_K6_writeback(int, int, int)+0x5c>
c0018bc4:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0018bc9:	74 36                	je     c0018c01 <AMD_K6_writeback(int, int, int)+0x90>
c0018bcb:	eb 5e                	jmp    c0018c2b <AMD_K6_writeback(int, int, int)+0xba>
c0018bcd:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018bd1:	50                   	push   eax
c0018bd2:	68 82 00 00 c0       	push   0xc0000082
c0018bd7:	e8 78 ff ff ff       	call   c0018b54 <AMD_K6_read_msr(unsigned int, REGS*)>
c0018bdc:	83 c4 08             	add    esp,0x8
c0018bdf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018be3:	01 c0                	add    eax,eax
c0018be5:	83 e0 7f             	and    eax,0x7f
c0018be8:	89 c2                	mov    edx,eax
c0018bea:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018bee:	50                   	push   eax
c0018bef:	6a 00                	push   0x0
c0018bf1:	52                   	push   edx
c0018bf2:	68 82 00 00 c0       	push   0xc0000082
c0018bf7:	e8 39 ff ff ff       	call   c0018b35 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0018bfc:	83 c4 10             	add    esp,0x10
c0018bff:	eb 2b                	jmp    c0018c2c <AMD_K6_writeback(int, int, int)+0xbb>
c0018c01:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018c05:	50                   	push   eax
c0018c06:	68 82 00 00 c0       	push   0xc0000082
c0018c0b:	e8 44 ff ff ff       	call   c0018b54 <AMD_K6_read_msr(unsigned int, REGS*)>
c0018c10:	83 c4 08             	add    esp,0x8
c0018c13:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018c17:	50                   	push   eax
c0018c18:	6a 00                	push   0x0
c0018c1a:	6a 00                	push   0x0
c0018c1c:	68 82 00 00 c0       	push   0xc0000082
c0018c21:	e8 0f ff ff ff       	call   c0018b35 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0018c26:	83 c4 10             	add    esp,0x10
c0018c29:	eb 01                	jmp    c0018c2c <AMD_K6_writeback(int, int, int)+0xbb>
c0018c2b:	90                   	nop
c0018c2c:	90                   	nop
c0018c2d:	83 c4 20             	add    esp,0x20
c0018c30:	c3                   	ret    

c0018c31 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018c31:	56                   	push   esi
c0018c32:	53                   	push   ebx
c0018c33:	a1 00 73 02 c0       	mov    eax,ds:0xc0027300
c0018c38:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0018c3c:	75 32                	jne    c0018c70 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018c3e:	8b 15 e0 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fae0
c0018c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c48:	89 10                	mov    DWORD PTR [eax],edx
c0018c4a:	8b 15 dc fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fadc
c0018c50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c54:	89 10                	mov    DWORD PTR [eax],edx
c0018c56:	8b 15 d8 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fad8
c0018c5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c60:	89 10                	mov    DWORD PTR [eax],edx
c0018c62:	8b 15 d4 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fad4
c0018c68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c6c:	89 10                	mov    DWORD PTR [eax],edx
c0018c6e:	eb 5c                	jmp    c0018ccc <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0018c70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018c74:	ba 00 00 00 00       	mov    edx,0x0
c0018c79:	89 d1                	mov    ecx,edx
c0018c7b:	0f a2                	cpuid  
c0018c7d:	89 c6                	mov    esi,eax
c0018c7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c83:	89 30                	mov    DWORD PTR [eax],esi
c0018c85:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c89:	89 18                	mov    DWORD PTR [eax],ebx
c0018c8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c8f:	89 08                	mov    DWORD PTR [eax],ecx
c0018c91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c95:	89 10                	mov    DWORD PTR [eax],edx
c0018c97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018c9b:	a3 00 73 02 c0       	mov    ds:0xc0027300,eax
c0018ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ca4:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ca6:	a3 e0 fa 02 c0       	mov    ds:0xc002fae0,eax
c0018cab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018caf:	8b 00                	mov    eax,DWORD PTR [eax]
c0018cb1:	a3 dc fa 02 c0       	mov    ds:0xc002fadc,eax
c0018cb6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018cba:	8b 00                	mov    eax,DWORD PTR [eax]
c0018cbc:	a3 d8 fa 02 c0       	mov    ds:0xc002fad8,eax
c0018cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018cc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0018cc7:	a3 d4 fa 02 c0       	mov    ds:0xc002fad4,eax
c0018ccc:	5b                   	pop    ebx
c0018ccd:	5e                   	pop    esi
c0018cce:	c3                   	ret    

c0018ccf <cpuidCheckEDX(unsigned int)>:
c0018ccf:	83 ec 10             	sub    esp,0x10
c0018cd2:	89 e0                	mov    eax,esp
c0018cd4:	50                   	push   eax
c0018cd5:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018cd9:	50                   	push   eax
c0018cda:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018cde:	50                   	push   eax
c0018cdf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018ce3:	50                   	push   eax
c0018ce4:	6a 01                	push   0x1
c0018ce6:	e8 46 ff ff ff       	call   c0018c31 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ceb:	83 c4 14             	add    esp,0x14
c0018cee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018cf1:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018cf5:	0f 95 c0             	setne  al
c0018cf8:	83 c4 10             	add    esp,0x10
c0018cfb:	c3                   	ret    

c0018cfc <cpuidCheckECX(unsigned int)>:
c0018cfc:	83 ec 10             	sub    esp,0x10
c0018cff:	89 e0                	mov    eax,esp
c0018d01:	50                   	push   eax
c0018d02:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018d06:	50                   	push   eax
c0018d07:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018d0b:	50                   	push   eax
c0018d0c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018d10:	50                   	push   eax
c0018d11:	6a 01                	push   0x1
c0018d13:	e8 19 ff ff ff       	call   c0018c31 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d18:	83 c4 14             	add    esp,0x14
c0018d1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d1f:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018d23:	0f 95 c0             	setne  al
c0018d26:	83 c4 10             	add    esp,0x10
c0018d29:	c3                   	ret    

c0018d2a <cpuidCheckExtendedEBX(unsigned int)>:
c0018d2a:	83 ec 10             	sub    esp,0x10
c0018d2d:	89 e0                	mov    eax,esp
c0018d2f:	50                   	push   eax
c0018d30:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018d34:	50                   	push   eax
c0018d35:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018d39:	50                   	push   eax
c0018d3a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018d3e:	50                   	push   eax
c0018d3f:	6a 07                	push   0x7
c0018d41:	e8 eb fe ff ff       	call   c0018c31 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d46:	83 c4 14             	add    esp,0x14
c0018d49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d4d:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018d51:	0f 95 c0             	setne  al
c0018d54:	83 c4 10             	add    esp,0x10
c0018d57:	c3                   	ret    

c0018d58 <cpuidCheckExtendedECX(unsigned int)>:
c0018d58:	83 ec 10             	sub    esp,0x10
c0018d5b:	89 e0                	mov    eax,esp
c0018d5d:	50                   	push   eax
c0018d5e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018d62:	50                   	push   eax
c0018d63:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018d67:	50                   	push   eax
c0018d68:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018d6c:	50                   	push   eax
c0018d6d:	6a 07                	push   0x7
c0018d6f:	e8 bd fe ff ff       	call   c0018c31 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d74:	83 c4 14             	add    esp,0x14
c0018d77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d7b:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018d7f:	0f 95 c0             	setne  al
c0018d82:	83 c4 10             	add    esp,0x10
c0018d85:	c3                   	ret    

c0018d86 <HalDetectFeatures()>:
c0018d86:	57                   	push   edi
c0018d87:	56                   	push   esi
c0018d88:	53                   	push   ebx
c0018d89:	81 ec 90 00 00 00    	sub    esp,0x90
c0018d8f:	83 ec 04             	sub    esp,0x4
c0018d92:	6a 08                	push   0x8
c0018d94:	6a 00                	push   0x0
c0018d96:	68 0c fb 02 c0       	push   0xc002fb0c
c0018d9b:	e8 50 77 fe ff       	call   c00004f0 <memset>
c0018da0:	83 c4 10             	add    esp,0x10
c0018da3:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0018da8:	83 c8 04             	or     eax,0x4
c0018dab:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c0018db0:	e8 44 74 fe ff       	call   c00001f9 <detectCPUID>
c0018db5:	85 c0                	test   eax,eax
c0018db7:	0f 95 c0             	setne  al
c0018dba:	83 e0 01             	and    eax,0x1
c0018dbd:	83 e0 01             	and    eax,0x1
c0018dc0:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0018dc3:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0018dc8:	83 e0 fd             	and    eax,0xfffffffd
c0018dcb:	88 c2                	mov    dl,al
c0018dcd:	88 c8                	mov    al,cl
c0018dcf:	09 d0                	or     eax,edx
c0018dd1:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c0018dd6:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0018ddb:	83 e0 02             	and    eax,0x2
c0018dde:	0f b6 c0             	movzx  eax,al
c0018de1:	85 c0                	test   eax,eax
c0018de3:	0f 84 7f 02 00 00    	je     c0019068 <HalDetectFeatures()+0x2e2>
c0018de9:	83 ec 0c             	sub    esp,0xc
c0018dec:	6a 20                	push   0x20
c0018dee:	e8 dc fe ff ff       	call   c0018ccf <cpuidCheckEDX(unsigned int)>
c0018df3:	83 c4 10             	add    esp,0x10
c0018df6:	83 e0 01             	and    eax,0x1
c0018df9:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018e00:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0018e05:	83 e0 f7             	and    eax,0xfffffff7
c0018e08:	88 c2                	mov    dl,al
c0018e0a:	88 c8                	mov    al,cl
c0018e0c:	09 d0                	or     eax,edx
c0018e0e:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c0018e13:	83 ec 0c             	sub    esp,0xc
c0018e16:	68 00 00 00 04       	push   0x4000000
c0018e1b:	e8 af fe ff ff       	call   c0018ccf <cpuidCheckEDX(unsigned int)>
c0018e20:	83 c4 10             	add    esp,0x10
c0018e23:	89 c1                	mov    ecx,eax
c0018e25:	83 e1 01             	and    ecx,0x1
c0018e28:	a0 0d fb 02 c0       	mov    al,ds:0xc002fb0d
c0018e2d:	83 e0 fe             	and    eax,0xfffffffe
c0018e30:	88 c2                	mov    dl,al
c0018e32:	88 c8                	mov    al,cl
c0018e34:	09 d0                	or     eax,edx
c0018e36:	a2 0d fb 02 c0       	mov    ds:0xc002fb0d,al
c0018e3b:	83 ec 0c             	sub    esp,0xc
c0018e3e:	68 80 00 00 00       	push   0x80
c0018e43:	e8 87 fe ff ff       	call   c0018ccf <cpuidCheckEDX(unsigned int)>
c0018e48:	83 c4 10             	add    esp,0x10
c0018e4b:	89 c1                	mov    ecx,eax
c0018e4d:	c1 e1 07             	shl    ecx,0x7
c0018e50:	a0 0d fb 02 c0       	mov    al,ds:0xc002fb0d
c0018e55:	83 e0 7f             	and    eax,0x7f
c0018e58:	88 c2                	mov    dl,al
c0018e5a:	88 c8                	mov    al,cl
c0018e5c:	09 d0                	or     eax,edx
c0018e5e:	a2 0d fb 02 c0       	mov    ds:0xc002fb0d,al
c0018e63:	83 ec 0c             	sub    esp,0xc
c0018e66:	68 00 00 80 00       	push   0x800000
c0018e6b:	e8 5f fe ff ff       	call   c0018ccf <cpuidCheckEDX(unsigned int)>
c0018e70:	83 c4 10             	add    esp,0x10
c0018e73:	83 e0 01             	and    eax,0x1
c0018e76:	89 c1                	mov    ecx,eax
c0018e78:	c1 e1 05             	shl    ecx,0x5
c0018e7b:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0018e80:	83 e0 df             	and    eax,0xffffffdf
c0018e83:	88 c2                	mov    dl,al
c0018e85:	88 c8                	mov    al,cl
c0018e87:	09 d0                	or     eax,edx
c0018e89:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c0018e8e:	a1 24 f1 02 c0       	mov    eax,ds:0xc002f124
c0018e93:	83 e0 01             	and    eax,0x1
c0018e96:	75 0c                	jne    c0018ea4 <HalDetectFeatures()+0x11e>
c0018e98:	a1 24 f1 02 c0       	mov    eax,ds:0xc002f124
c0018e9d:	25 00 04 00 00       	and    eax,0x400
c0018ea2:	74 0f                	je     c0018eb3 <HalDetectFeatures()+0x12d>
c0018ea4:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0018ea9:	83 e0 fe             	and    eax,0xfffffffe
c0018eac:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c0018eb1:	eb 28                	jmp    c0018edb <HalDetectFeatures()+0x155>
c0018eb3:	83 ec 0c             	sub    esp,0xc
c0018eb6:	68 00 02 00 00       	push   0x200
c0018ebb:	e8 0f fe ff ff       	call   c0018ccf <cpuidCheckEDX(unsigned int)>
c0018ec0:	83 c4 10             	add    esp,0x10
c0018ec3:	89 c1                	mov    ecx,eax
c0018ec5:	83 e1 01             	and    ecx,0x1
c0018ec8:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0018ecd:	83 e0 fe             	and    eax,0xfffffffe
c0018ed0:	88 c2                	mov    dl,al
c0018ed2:	88 c8                	mov    al,cl
c0018ed4:	09 d0                	or     eax,edx
c0018ed6:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c0018edb:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0018ee0:	83 e0 01             	and    eax,0x1
c0018ee3:	0f b6 c0             	movzx  eax,al
c0018ee6:	85 c0                	test   eax,eax
c0018ee8:	74 1c                	je     c0018f06 <HalDetectFeatures()+0x180>
c0018eea:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0018eef:	83 e0 08             	and    eax,0x8
c0018ef2:	0f b6 c0             	movzx  eax,al
c0018ef5:	85 c0                	test   eax,eax
c0018ef7:	75 0d                	jne    c0018f06 <HalDetectFeatures()+0x180>
c0018ef9:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0018efe:	83 e0 fe             	and    eax,0xfffffffe
c0018f01:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c0018f06:	83 ec 0c             	sub    esp,0xc
c0018f09:	68 f8 59 02 c0       	push   0xc00259f8
c0018f0e:	e8 51 e0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018f13:	83 c4 10             	add    esp,0x10
c0018f16:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0018f1b:	83 e0 fe             	and    eax,0xfffffffe
c0018f1e:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c0018f23:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0018f2b:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0018f33:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c0018f3b:	85 c0                	test   eax,eax
c0018f3d:	0f 84 ab 00 00 00    	je     c0018fee <HalDetectFeatures()+0x268>
c0018f43:	83 ec 0c             	sub    esp,0xc
c0018f46:	6a 01                	push   0x1
c0018f48:	e8 af fd ff ff       	call   c0018cfc <cpuidCheckECX(unsigned int)>
c0018f4d:	83 c4 10             	add    esp,0x10
c0018f50:	83 e0 01             	and    eax,0x1
c0018f53:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0018f56:	a0 0d fb 02 c0       	mov    al,ds:0xc002fb0d
c0018f5b:	83 e0 fd             	and    eax,0xfffffffd
c0018f5e:	88 c2                	mov    dl,al
c0018f60:	88 c8                	mov    al,cl
c0018f62:	09 d0                	or     eax,edx
c0018f64:	a2 0d fb 02 c0       	mov    ds:0xc002fb0d,al
c0018f69:	83 ec 0c             	sub    esp,0xc
c0018f6c:	68 00 02 00 00       	push   0x200
c0018f71:	e8 86 fd ff ff       	call   c0018cfc <cpuidCheckECX(unsigned int)>
c0018f76:	83 c4 10             	add    esp,0x10
c0018f79:	83 e0 01             	and    eax,0x1
c0018f7c:	89 c1                	mov    ecx,eax
c0018f7e:	c1 e1 04             	shl    ecx,0x4
c0018f81:	a0 0d fb 02 c0       	mov    al,ds:0xc002fb0d
c0018f86:	83 e0 ef             	and    eax,0xffffffef
c0018f89:	88 c2                	mov    dl,al
c0018f8b:	88 c8                	mov    al,cl
c0018f8d:	09 d0                	or     eax,edx
c0018f8f:	a2 0d fb 02 c0       	mov    ds:0xc002fb0d,al
c0018f94:	83 ec 0c             	sub    esp,0xc
c0018f97:	68 00 00 08 00       	push   0x80000
c0018f9c:	e8 5b fd ff ff       	call   c0018cfc <cpuidCheckECX(unsigned int)>
c0018fa1:	83 c4 10             	add    esp,0x10
c0018fa4:	83 e0 01             	and    eax,0x1
c0018fa7:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0018fae:	a0 0d fb 02 c0       	mov    al,ds:0xc002fb0d
c0018fb3:	83 e0 fb             	and    eax,0xfffffffb
c0018fb6:	88 c2                	mov    dl,al
c0018fb8:	88 c8                	mov    al,cl
c0018fba:	09 d0                	or     eax,edx
c0018fbc:	a2 0d fb 02 c0       	mov    ds:0xc002fb0d,al
c0018fc1:	83 ec 0c             	sub    esp,0xc
c0018fc4:	68 00 00 10 00       	push   0x100000
c0018fc9:	e8 2e fd ff ff       	call   c0018cfc <cpuidCheckECX(unsigned int)>
c0018fce:	83 c4 10             	add    esp,0x10
c0018fd1:	83 e0 01             	and    eax,0x1
c0018fd4:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018fdb:	a0 0d fb 02 c0       	mov    al,ds:0xc002fb0d
c0018fe0:	83 e0 f7             	and    eax,0xfffffff7
c0018fe3:	88 c2                	mov    dl,al
c0018fe5:	88 c8                	mov    al,cl
c0018fe7:	09 d0                	or     eax,edx
c0018fe9:	a2 0d fb 02 c0       	mov    ds:0xc002fb0d,al
c0018fee:	83 ec 0c             	sub    esp,0xc
c0018ff1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018ff5:	50                   	push   eax
c0018ff6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0018ffa:	50                   	push   eax
c0018ffb:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018fff:	50                   	push   eax
c0019000:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0019004:	50                   	push   eax
c0019005:	68 00 00 00 80       	push   0x80000000
c001900a:	e8 22 fc ff ff       	call   c0018c31 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001900f:	83 c4 20             	add    esp,0x20
c0019012:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019016:	3d 00 00 00 80       	cmp    eax,0x80000000
c001901b:	76 4b                	jbe    c0019068 <HalDetectFeatures()+0x2e2>
c001901d:	83 ec 0c             	sub    esp,0xc
c0019020:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019024:	50                   	push   eax
c0019025:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019029:	50                   	push   eax
c001902a:	8d 44 24 34          	lea    eax,[esp+0x34]
c001902e:	50                   	push   eax
c001902f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0019033:	50                   	push   eax
c0019034:	68 01 00 00 80       	push   0x80000001
c0019039:	e8 f3 fb ff ff       	call   c0018c31 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001903e:	83 c4 20             	add    esp,0x20
c0019041:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0019046:	83 e0 bf             	and    eax,0xffffffbf
c0019049:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c001904e:	a0 0e fb 02 c0       	mov    al,ds:0xc002fb0e
c0019053:	83 e0 fd             	and    eax,0xfffffffd
c0019056:	a2 0e fb 02 c0       	mov    ds:0xc002fb0e,al
c001905b:	a0 0e fb 02 c0       	mov    al,ds:0xc002fb0e
c0019060:	83 e0 fe             	and    eax,0xfffffffe
c0019063:	a2 0e fb 02 c0       	mov    ds:0xc002fb0e,al
c0019068:	a1 24 f1 02 c0       	mov    eax,ds:0xc002f124
c001906d:	25 00 04 00 00       	and    eax,0x400
c0019072:	74 1d                	je     c0019091 <HalDetectFeatures()+0x30b>
c0019074:	83 ec 0c             	sub    esp,0xc
c0019077:	68 0a 5a 02 c0       	push   0xc0025a0a
c001907c:	e8 e3 de fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019081:	83 c4 10             	add    esp,0x10
c0019084:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0019089:	83 e0 fb             	and    eax,0xfffffffb
c001908c:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c0019091:	c6 05 08 fb 02 c0 01 	mov    BYTE PTR ds:0xc002fb08,0x1
c0019098:	83 ec 04             	sub    esp,0x4
c001909b:	6a 0d                	push   0xd
c001909d:	6a 00                	push   0x0
c001909f:	68 f0 fa 02 c0       	push   0xc002faf0
c00190a4:	e8 47 74 fe ff       	call   c00004f0 <memset>
c00190a9:	83 c4 10             	add    esp,0x10
c00190ac:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c00190b1:	83 e0 02             	and    eax,0x2
c00190b4:	0f b6 c0             	movzx  eax,al
c00190b7:	85 c0                	test   eax,eax
c00190b9:	0f 84 16 08 00 00    	je     c00198d5 <HalDetectFeatures()+0xb4f>
c00190bf:	83 ec 0c             	sub    esp,0xc
c00190c2:	6a 10                	push   0x10
c00190c4:	e8 06 fc ff ff       	call   c0018ccf <cpuidCheckEDX(unsigned int)>
c00190c9:	83 c4 10             	add    esp,0x10
c00190cc:	83 e0 01             	and    eax,0x1
c00190cf:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00190d6:	a0 0e fb 02 c0       	mov    al,ds:0xc002fb0e
c00190db:	83 e0 f7             	and    eax,0xfffffff7
c00190de:	88 c2                	mov    dl,al
c00190e0:	88 c8                	mov    al,cl
c00190e2:	09 d0                	or     eax,edx
c00190e4:	a2 0e fb 02 c0       	mov    ds:0xc002fb0e,al
c00190e9:	83 ec 0c             	sub    esp,0xc
c00190ec:	6a 40                	push   0x40
c00190ee:	e8 dc fb ff ff       	call   c0018ccf <cpuidCheckEDX(unsigned int)>
c00190f3:	83 c4 10             	add    esp,0x10
c00190f6:	83 e0 01             	and    eax,0x1
c00190f9:	89 c1                	mov    ecx,eax
c00190fb:	c1 e1 04             	shl    ecx,0x4
c00190fe:	a0 0e fb 02 c0       	mov    al,ds:0xc002fb0e
c0019103:	83 e0 ef             	and    eax,0xffffffef
c0019106:	88 c2                	mov    dl,al
c0019108:	88 c8                	mov    al,cl
c001910a:	09 d0                	or     eax,edx
c001910c:	a2 0e fb 02 c0       	mov    ds:0xc002fb0e,al
c0019111:	83 ec 0c             	sub    esp,0xc
c0019114:	6a 08                	push   0x8
c0019116:	e8 b4 fb ff ff       	call   c0018ccf <cpuidCheckEDX(unsigned int)>
c001911b:	83 c4 10             	add    esp,0x10
c001911e:	83 e0 01             	and    eax,0x1
c0019121:	89 c1                	mov    ecx,eax
c0019123:	c1 e1 05             	shl    ecx,0x5
c0019126:	a0 0e fb 02 c0       	mov    al,ds:0xc002fb0e
c001912b:	83 e0 df             	and    eax,0xffffffdf
c001912e:	88 c2                	mov    dl,al
c0019130:	88 c8                	mov    al,cl
c0019132:	09 d0                	or     eax,edx
c0019134:	a2 0e fb 02 c0       	mov    ds:0xc002fb0e,al
c0019139:	83 ec 0c             	sub    esp,0xc
c001913c:	68 00 20 00 00       	push   0x2000
c0019141:	e8 89 fb ff ff       	call   c0018ccf <cpuidCheckEDX(unsigned int)>
c0019146:	83 c4 10             	add    esp,0x10
c0019149:	83 e0 01             	and    eax,0x1
c001914c:	89 c1                	mov    ecx,eax
c001914e:	c1 e1 06             	shl    ecx,0x6
c0019151:	a0 0e fb 02 c0       	mov    al,ds:0xc002fb0e
c0019156:	83 e0 bf             	and    eax,0xffffffbf
c0019159:	88 c2                	mov    dl,al
c001915b:	88 c8                	mov    al,cl
c001915d:	09 d0                	or     eax,edx
c001915f:	a2 0e fb 02 c0       	mov    ds:0xc002fb0e,al
c0019164:	83 ec 0c             	sub    esp,0xc
c0019167:	68 00 00 01 00       	push   0x10000
c001916c:	e8 5e fb ff ff       	call   c0018ccf <cpuidCheckEDX(unsigned int)>
c0019171:	83 c4 10             	add    esp,0x10
c0019174:	89 c1                	mov    ecx,eax
c0019176:	c1 e1 07             	shl    ecx,0x7
c0019179:	a0 0e fb 02 c0       	mov    al,ds:0xc002fb0e
c001917e:	83 e0 7f             	and    eax,0x7f
c0019181:	88 c2                	mov    dl,al
c0019183:	88 c8                	mov    al,cl
c0019185:	09 d0                	or     eax,edx
c0019187:	a2 0e fb 02 c0       	mov    ds:0xc002fb0e,al
c001918c:	83 ec 0c             	sub    esp,0xc
c001918f:	6a 01                	push   0x1
c0019191:	e8 39 fb ff ff       	call   c0018ccf <cpuidCheckEDX(unsigned int)>
c0019196:	83 c4 10             	add    esp,0x10
c0019199:	83 e0 01             	and    eax,0x1
c001919c:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00191a3:	a0 10 fb 02 c0       	mov    al,ds:0xc002fb10
c00191a8:	83 e0 f7             	and    eax,0xfffffff7
c00191ab:	88 c2                	mov    dl,al
c00191ad:	88 c8                	mov    al,cl
c00191af:	09 d0                	or     eax,edx
c00191b1:	a2 10 fb 02 c0       	mov    ds:0xc002fb10,al
c00191b6:	83 ec 0c             	sub    esp,0xc
c00191b9:	68 00 08 00 00       	push   0x800
c00191be:	e8 0c fb ff ff       	call   c0018ccf <cpuidCheckEDX(unsigned int)>
c00191c3:	83 c4 10             	add    esp,0x10
c00191c6:	89 c1                	mov    ecx,eax
c00191c8:	83 e1 01             	and    ecx,0x1
c00191cb:	a0 10 fb 02 c0       	mov    al,ds:0xc002fb10
c00191d0:	83 e0 fe             	and    eax,0xfffffffe
c00191d3:	88 c2                	mov    dl,al
c00191d5:	88 c8                	mov    al,cl
c00191d7:	09 d0                	or     eax,edx
c00191d9:	a2 10 fb 02 c0       	mov    ds:0xc002fb10,al
c00191de:	a0 0e fb 02 c0       	mov    al,ds:0xc002fb0e
c00191e3:	83 e0 40             	and    eax,0x40
c00191e6:	0f b6 c0             	movzx  eax,al
c00191e9:	85 c0                	test   eax,eax
c00191eb:	74 0a                	je     c00191f7 <HalDetectFeatures()+0x471>
c00191ed:	c7 05 e8 fa 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002fae8,0x100
c00191f7:	a0 0e fb 02 c0       	mov    al,ds:0xc002fb0e
c00191fc:	83 e0 80             	and    eax,0xffffff80
c00191ff:	0f b6 c0             	movzx  eax,al
c0019202:	85 c0                	test   eax,eax
c0019204:	74 0a                	je     c0019210 <HalDetectFeatures()+0x48a>
c0019206:	c7 05 e4 fa 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002fae4,0x80
c0019210:	83 ec 0c             	sub    esp,0xc
c0019213:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019217:	50                   	push   eax
c0019218:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001921c:	50                   	push   eax
c001921d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019221:	50                   	push   eax
c0019222:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019226:	50                   	push   eax
c0019227:	6a 00                	push   0x0
c0019229:	e8 03 fa ff ff       	call   c0018c31 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001922e:	83 c4 20             	add    esp,0x20
c0019231:	c7 44 24 48 f0 fa 02 c0 	mov    DWORD PTR [esp+0x48],0xc002faf0
c0019239:	8d 44 24 10          	lea    eax,[esp+0x10]
c001923d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0019241:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c0019249:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001924d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0019251:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0019255:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0019259:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001925d:	89 c6                	mov    esi,eax
c001925f:	89 d7                	mov    edi,edx
c0019261:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019263:	89 c8                	mov    eax,ecx
c0019265:	89 fa                	mov    edx,edi
c0019267:	89 f3                	mov    ebx,esi
c0019269:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c001926d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019271:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0019275:	b8 f4 fa 02 c0       	mov    eax,0xc002faf4
c001927a:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001927e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019282:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0019286:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c001928e:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0019292:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0019296:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001929a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c001929e:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c00192a2:	89 c6                	mov    esi,eax
c00192a4:	89 d7                	mov    edi,edx
c00192a6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00192a8:	89 c8                	mov    eax,ecx
c00192aa:	89 fa                	mov    edx,edi
c00192ac:	89 f3                	mov    ebx,esi
c00192ae:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c00192b2:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c00192b6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00192ba:	b8 f8 fa 02 c0       	mov    eax,0xc002faf8
c00192bf:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00192c6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00192ca:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c00192ce:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c00192d6:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00192dd:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00192e1:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c00192e5:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00192ec:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c00192f0:	89 c6                	mov    esi,eax
c00192f2:	89 d7                	mov    edi,edx
c00192f4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00192f6:	89 c8                	mov    eax,ecx
c00192f8:	89 fa                	mov    edx,edi
c00192fa:	89 f3                	mov    ebx,esi
c00192fc:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c0019300:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c0019304:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0019308:	83 ec 08             	sub    esp,0x8
c001930b:	68 19 5a 02 c0       	push   0xc0025a19
c0019310:	68 f0 fa 02 c0       	push   0xc002faf0
c0019315:	e8 36 74 fe ff       	call   c0000750 <strcmp>
c001931a:	83 c4 10             	add    esp,0x10
c001931d:	85 c0                	test   eax,eax
c001931f:	74 19                	je     c001933a <HalDetectFeatures()+0x5b4>
c0019321:	83 ec 08             	sub    esp,0x8
c0019324:	68 26 5a 02 c0       	push   0xc0025a26
c0019329:	68 f0 fa 02 c0       	push   0xc002faf0
c001932e:	e8 1d 74 fe ff       	call   c0000750 <strcmp>
c0019333:	83 c4 10             	add    esp,0x10
c0019336:	85 c0                	test   eax,eax
c0019338:	75 04                	jne    c001933e <HalDetectFeatures()+0x5b8>
c001933a:	b0 01                	mov    al,0x1
c001933c:	eb 02                	jmp    c0019340 <HalDetectFeatures()+0x5ba>
c001933e:	b0 00                	mov    al,0x0
c0019340:	0f b6 c0             	movzx  eax,al
c0019343:	85 c0                	test   eax,eax
c0019345:	74 0f                	je     c0019356 <HalDetectFeatures()+0x5d0>
c0019347:	c7 05 04 fb 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0x2
c0019351:	e9 0d 03 00 00       	jmp    c0019663 <HalDetectFeatures()+0x8dd>
c0019356:	83 ec 08             	sub    esp,0x8
c0019359:	68 33 5a 02 c0       	push   0xc0025a33
c001935e:	68 f0 fa 02 c0       	push   0xc002faf0
c0019363:	e8 e8 73 fe ff       	call   c0000750 <strcmp>
c0019368:	83 c4 10             	add    esp,0x10
c001936b:	85 c0                	test   eax,eax
c001936d:	74 19                	je     c0019388 <HalDetectFeatures()+0x602>
c001936f:	83 ec 08             	sub    esp,0x8
c0019372:	68 40 5a 02 c0       	push   0xc0025a40
c0019377:	68 f0 fa 02 c0       	push   0xc002faf0
c001937c:	e8 cf 73 fe ff       	call   c0000750 <strcmp>
c0019381:	83 c4 10             	add    esp,0x10
c0019384:	85 c0                	test   eax,eax
c0019386:	75 04                	jne    c001938c <HalDetectFeatures()+0x606>
c0019388:	b0 01                	mov    al,0x1
c001938a:	eb 02                	jmp    c001938e <HalDetectFeatures()+0x608>
c001938c:	b0 00                	mov    al,0x0
c001938e:	0f b6 c0             	movzx  eax,al
c0019391:	85 c0                	test   eax,eax
c0019393:	74 0f                	je     c00193a4 <HalDetectFeatures()+0x61e>
c0019395:	c7 05 04 fb 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0x4
c001939f:	e9 bf 02 00 00       	jmp    c0019663 <HalDetectFeatures()+0x8dd>
c00193a4:	83 ec 08             	sub    esp,0x8
c00193a7:	68 4d 5a 02 c0       	push   0xc0025a4d
c00193ac:	68 f0 fa 02 c0       	push   0xc002faf0
c00193b1:	e8 9a 73 fe ff       	call   c0000750 <strcmp>
c00193b6:	83 c4 10             	add    esp,0x10
c00193b9:	85 c0                	test   eax,eax
c00193bb:	74 19                	je     c00193d6 <HalDetectFeatures()+0x650>
c00193bd:	83 ec 08             	sub    esp,0x8
c00193c0:	68 5a 5a 02 c0       	push   0xc0025a5a
c00193c5:	68 f0 fa 02 c0       	push   0xc002faf0
c00193ca:	e8 81 73 fe ff       	call   c0000750 <strcmp>
c00193cf:	83 c4 10             	add    esp,0x10
c00193d2:	85 c0                	test   eax,eax
c00193d4:	75 04                	jne    c00193da <HalDetectFeatures()+0x654>
c00193d6:	b0 01                	mov    al,0x1
c00193d8:	eb 02                	jmp    c00193dc <HalDetectFeatures()+0x656>
c00193da:	b0 00                	mov    al,0x0
c00193dc:	0f b6 c0             	movzx  eax,al
c00193df:	85 c0                	test   eax,eax
c00193e1:	74 0f                	je     c00193f2 <HalDetectFeatures()+0x66c>
c00193e3:	c7 05 04 fb 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0x5
c00193ed:	e9 71 02 00 00       	jmp    c0019663 <HalDetectFeatures()+0x8dd>
c00193f2:	83 ec 08             	sub    esp,0x8
c00193f5:	68 67 5a 02 c0       	push   0xc0025a67
c00193fa:	68 f0 fa 02 c0       	push   0xc002faf0
c00193ff:	e8 4c 73 fe ff       	call   c0000750 <strcmp>
c0019404:	83 c4 10             	add    esp,0x10
c0019407:	85 c0                	test   eax,eax
c0019409:	0f 94 c0             	sete   al
c001940c:	0f b6 c0             	movzx  eax,al
c001940f:	85 c0                	test   eax,eax
c0019411:	74 0f                	je     c0019422 <HalDetectFeatures()+0x69c>
c0019413:	c7 05 04 fb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0x1
c001941d:	e9 41 02 00 00       	jmp    c0019663 <HalDetectFeatures()+0x8dd>
c0019422:	83 ec 08             	sub    esp,0x8
c0019425:	68 74 5a 02 c0       	push   0xc0025a74
c001942a:	68 f0 fa 02 c0       	push   0xc002faf0
c001942f:	e8 1c 73 fe ff       	call   c0000750 <strcmp>
c0019434:	83 c4 10             	add    esp,0x10
c0019437:	85 c0                	test   eax,eax
c0019439:	0f 94 c0             	sete   al
c001943c:	0f b6 c0             	movzx  eax,al
c001943f:	85 c0                	test   eax,eax
c0019441:	74 0f                	je     c0019452 <HalDetectFeatures()+0x6cc>
c0019443:	c7 05 04 fb 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0x3
c001944d:	e9 11 02 00 00       	jmp    c0019663 <HalDetectFeatures()+0x8dd>
c0019452:	83 ec 08             	sub    esp,0x8
c0019455:	68 33 5a 02 c0       	push   0xc0025a33
c001945a:	68 f0 fa 02 c0       	push   0xc002faf0
c001945f:	e8 ec 72 fe ff       	call   c0000750 <strcmp>
c0019464:	83 c4 10             	add    esp,0x10
c0019467:	85 c0                	test   eax,eax
c0019469:	0f 94 c0             	sete   al
c001946c:	0f b6 c0             	movzx  eax,al
c001946f:	85 c0                	test   eax,eax
c0019471:	74 0f                	je     c0019482 <HalDetectFeatures()+0x6fc>
c0019473:	c7 05 04 fb 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0x6
c001947d:	e9 e1 01 00 00       	jmp    c0019663 <HalDetectFeatures()+0x8dd>
c0019482:	83 ec 08             	sub    esp,0x8
c0019485:	68 81 5a 02 c0       	push   0xc0025a81
c001948a:	68 f0 fa 02 c0       	push   0xc002faf0
c001948f:	e8 bc 72 fe ff       	call   c0000750 <strcmp>
c0019494:	83 c4 10             	add    esp,0x10
c0019497:	85 c0                	test   eax,eax
c0019499:	0f 94 c0             	sete   al
c001949c:	0f b6 c0             	movzx  eax,al
c001949f:	85 c0                	test   eax,eax
c00194a1:	74 0f                	je     c00194b2 <HalDetectFeatures()+0x72c>
c00194a3:	c7 05 04 fb 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0x7
c00194ad:	e9 b1 01 00 00       	jmp    c0019663 <HalDetectFeatures()+0x8dd>
c00194b2:	83 ec 08             	sub    esp,0x8
c00194b5:	68 8e 5a 02 c0       	push   0xc0025a8e
c00194ba:	68 f0 fa 02 c0       	push   0xc002faf0
c00194bf:	e8 8c 72 fe ff       	call   c0000750 <strcmp>
c00194c4:	83 c4 10             	add    esp,0x10
c00194c7:	85 c0                	test   eax,eax
c00194c9:	0f 94 c0             	sete   al
c00194cc:	0f b6 c0             	movzx  eax,al
c00194cf:	85 c0                	test   eax,eax
c00194d1:	74 0f                	je     c00194e2 <HalDetectFeatures()+0x75c>
c00194d3:	c7 05 04 fb 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0x8
c00194dd:	e9 81 01 00 00       	jmp    c0019663 <HalDetectFeatures()+0x8dd>
c00194e2:	83 ec 08             	sub    esp,0x8
c00194e5:	68 9b 5a 02 c0       	push   0xc0025a9b
c00194ea:	68 f0 fa 02 c0       	push   0xc002faf0
c00194ef:	e8 5c 72 fe ff       	call   c0000750 <strcmp>
c00194f4:	83 c4 10             	add    esp,0x10
c00194f7:	85 c0                	test   eax,eax
c00194f9:	0f 94 c0             	sete   al
c00194fc:	0f b6 c0             	movzx  eax,al
c00194ff:	85 c0                	test   eax,eax
c0019501:	74 0f                	je     c0019512 <HalDetectFeatures()+0x78c>
c0019503:	c7 05 04 fb 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0x9
c001950d:	e9 51 01 00 00       	jmp    c0019663 <HalDetectFeatures()+0x8dd>
c0019512:	83 ec 08             	sub    esp,0x8
c0019515:	68 a8 5a 02 c0       	push   0xc0025aa8
c001951a:	68 f0 fa 02 c0       	push   0xc002faf0
c001951f:	e8 2c 72 fe ff       	call   c0000750 <strcmp>
c0019524:	83 c4 10             	add    esp,0x10
c0019527:	85 c0                	test   eax,eax
c0019529:	0f 94 c0             	sete   al
c001952c:	0f b6 c0             	movzx  eax,al
c001952f:	85 c0                	test   eax,eax
c0019531:	74 0f                	je     c0019542 <HalDetectFeatures()+0x7bc>
c0019533:	c7 05 04 fb 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0xa
c001953d:	e9 21 01 00 00       	jmp    c0019663 <HalDetectFeatures()+0x8dd>
c0019542:	83 ec 08             	sub    esp,0x8
c0019545:	68 b5 5a 02 c0       	push   0xc0025ab5
c001954a:	68 f0 fa 02 c0       	push   0xc002faf0
c001954f:	e8 fc 71 fe ff       	call   c0000750 <strcmp>
c0019554:	83 c4 10             	add    esp,0x10
c0019557:	85 c0                	test   eax,eax
c0019559:	0f 94 c0             	sete   al
c001955c:	0f b6 c0             	movzx  eax,al
c001955f:	85 c0                	test   eax,eax
c0019561:	74 0f                	je     c0019572 <HalDetectFeatures()+0x7ec>
c0019563:	c7 05 04 fb 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0xb
c001956d:	e9 f1 00 00 00       	jmp    c0019663 <HalDetectFeatures()+0x8dd>
c0019572:	83 ec 08             	sub    esp,0x8
c0019575:	68 c2 5a 02 c0       	push   0xc0025ac2
c001957a:	68 f0 fa 02 c0       	push   0xc002faf0
c001957f:	e8 cc 71 fe ff       	call   c0000750 <strcmp>
c0019584:	83 c4 10             	add    esp,0x10
c0019587:	85 c0                	test   eax,eax
c0019589:	0f 94 c0             	sete   al
c001958c:	0f b6 c0             	movzx  eax,al
c001958f:	85 c0                	test   eax,eax
c0019591:	74 0f                	je     c00195a2 <HalDetectFeatures()+0x81c>
c0019593:	c7 05 04 fb 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0xc
c001959d:	e9 c1 00 00 00       	jmp    c0019663 <HalDetectFeatures()+0x8dd>
c00195a2:	83 ec 08             	sub    esp,0x8
c00195a5:	68 cf 5a 02 c0       	push   0xc0025acf
c00195aa:	68 f0 fa 02 c0       	push   0xc002faf0
c00195af:	e8 9c 71 fe ff       	call   c0000750 <strcmp>
c00195b4:	83 c4 10             	add    esp,0x10
c00195b7:	85 c0                	test   eax,eax
c00195b9:	0f 94 c0             	sete   al
c00195bc:	0f b6 c0             	movzx  eax,al
c00195bf:	85 c0                	test   eax,eax
c00195c1:	74 0f                	je     c00195d2 <HalDetectFeatures()+0x84c>
c00195c3:	c7 05 04 fb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0xd
c00195cd:	e9 91 00 00 00       	jmp    c0019663 <HalDetectFeatures()+0x8dd>
c00195d2:	83 ec 08             	sub    esp,0x8
c00195d5:	68 dc 5a 02 c0       	push   0xc0025adc
c00195da:	68 f0 fa 02 c0       	push   0xc002faf0
c00195df:	e8 6c 71 fe ff       	call   c0000750 <strcmp>
c00195e4:	83 c4 10             	add    esp,0x10
c00195e7:	85 c0                	test   eax,eax
c00195e9:	0f 94 c0             	sete   al
c00195ec:	0f b6 c0             	movzx  eax,al
c00195ef:	85 c0                	test   eax,eax
c00195f1:	74 0c                	je     c00195ff <HalDetectFeatures()+0x879>
c00195f3:	c7 05 04 fb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0xd
c00195fd:	eb 64                	jmp    c0019663 <HalDetectFeatures()+0x8dd>
c00195ff:	83 ec 08             	sub    esp,0x8
c0019602:	68 e9 5a 02 c0       	push   0xc0025ae9
c0019607:	68 f0 fa 02 c0       	push   0xc002faf0
c001960c:	e8 3f 71 fe ff       	call   c0000750 <strcmp>
c0019611:	83 c4 10             	add    esp,0x10
c0019614:	85 c0                	test   eax,eax
c0019616:	0f 94 c0             	sete   al
c0019619:	0f b6 c0             	movzx  eax,al
c001961c:	85 c0                	test   eax,eax
c001961e:	74 0c                	je     c001962c <HalDetectFeatures()+0x8a6>
c0019620:	c7 05 04 fb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0xd
c001962a:	eb 37                	jmp    c0019663 <HalDetectFeatures()+0x8dd>
c001962c:	83 ec 08             	sub    esp,0x8
c001962f:	68 f6 5a 02 c0       	push   0xc0025af6
c0019634:	68 f0 fa 02 c0       	push   0xc002faf0
c0019639:	e8 12 71 fe ff       	call   c0000750 <strcmp>
c001963e:	83 c4 10             	add    esp,0x10
c0019641:	85 c0                	test   eax,eax
c0019643:	0f 94 c0             	sete   al
c0019646:	0f b6 c0             	movzx  eax,al
c0019649:	85 c0                	test   eax,eax
c001964b:	74 0c                	je     c0019659 <HalDetectFeatures()+0x8d3>
c001964d:	c7 05 04 fb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0xd
c0019657:	eb 0a                	jmp    c0019663 <HalDetectFeatures()+0x8dd>
c0019659:	c7 05 04 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0x0
c0019663:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019667:	83 f8 06             	cmp    eax,0x6
c001966a:	0f 86 cc 00 00 00    	jbe    c001973c <HalDetectFeatures()+0x9b6>
c0019670:	83 ec 0c             	sub    esp,0xc
c0019673:	68 80 00 00 00       	push   0x80
c0019678:	e8 ad f6 ff ff       	call   c0018d2a <cpuidCheckExtendedEBX(unsigned int)>
c001967d:	83 c4 10             	add    esp,0x10
c0019680:	89 c1                	mov    ecx,eax
c0019682:	83 e1 01             	and    ecx,0x1
c0019685:	a0 0f fb 02 c0       	mov    al,ds:0xc002fb0f
c001968a:	83 e0 fe             	and    eax,0xfffffffe
c001968d:	88 c2                	mov    dl,al
c001968f:	88 c8                	mov    al,cl
c0019691:	09 d0                	or     eax,edx
c0019693:	a2 0f fb 02 c0       	mov    ds:0xc002fb0f,al
c0019698:	83 ec 0c             	sub    esp,0xc
c001969b:	68 00 00 10 00       	push   0x100000
c00196a0:	e8 85 f6 ff ff       	call   c0018d2a <cpuidCheckExtendedEBX(unsigned int)>
c00196a5:	83 c4 10             	add    esp,0x10
c00196a8:	83 e0 01             	and    eax,0x1
c00196ab:	89 c1                	mov    ecx,eax
c00196ad:	c1 e1 06             	shl    ecx,0x6
c00196b0:	a0 0f fb 02 c0       	mov    al,ds:0xc002fb0f
c00196b5:	83 e0 bf             	and    eax,0xffffffbf
c00196b8:	88 c2                	mov    dl,al
c00196ba:	88 c8                	mov    al,cl
c00196bc:	09 d0                	or     eax,edx
c00196be:	a2 0f fb 02 c0       	mov    ds:0xc002fb0f,al
c00196c3:	83 ec 0c             	sub    esp,0xc
c00196c6:	68 00 00 04 00       	push   0x40000
c00196cb:	e8 5a f6 ff ff       	call   c0018d2a <cpuidCheckExtendedEBX(unsigned int)>
c00196d0:	83 c4 10             	add    esp,0x10
c00196d3:	83 e0 01             	and    eax,0x1
c00196d6:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00196d9:	a0 0f fb 02 c0       	mov    al,ds:0xc002fb0f
c00196de:	83 e0 fd             	and    eax,0xfffffffd
c00196e1:	88 c2                	mov    dl,al
c00196e3:	88 c8                	mov    al,cl
c00196e5:	09 d0                	or     eax,edx
c00196e7:	a2 0f fb 02 c0       	mov    ds:0xc002fb0f,al
c00196ec:	83 ec 0c             	sub    esp,0xc
c00196ef:	6a 04                	push   0x4
c00196f1:	e8 62 f6 ff ff       	call   c0018d58 <cpuidCheckExtendedECX(unsigned int)>
c00196f6:	83 c4 10             	add    esp,0x10
c00196f9:	83 e0 01             	and    eax,0x1
c00196fc:	89 c1                	mov    ecx,eax
c00196fe:	c1 e1 05             	shl    ecx,0x5
c0019701:	a0 0f fb 02 c0       	mov    al,ds:0xc002fb0f
c0019706:	83 e0 df             	and    eax,0xffffffdf
c0019709:	88 c2                	mov    dl,al
c001970b:	88 c8                	mov    al,cl
c001970d:	09 d0                	or     eax,edx
c001970f:	a2 0f fb 02 c0       	mov    ds:0xc002fb0f,al
c0019714:	83 ec 0c             	sub    esp,0xc
c0019717:	6a 20                	push   0x20
c0019719:	e8 3a f6 ff ff       	call   c0018d58 <cpuidCheckExtendedECX(unsigned int)>
c001971e:	83 c4 10             	add    esp,0x10
c0019721:	83 e0 01             	and    eax,0x1
c0019724:	89 c1                	mov    ecx,eax
c0019726:	c1 e1 04             	shl    ecx,0x4
c0019729:	a0 10 fb 02 c0       	mov    al,ds:0xc002fb10
c001972e:	83 e0 ef             	and    eax,0xffffffef
c0019731:	88 c2                	mov    dl,al
c0019733:	88 c8                	mov    al,cl
c0019735:	09 d0                	or     eax,edx
c0019737:	a2 10 fb 02 c0       	mov    ds:0xc002fb10,al
c001973c:	83 ec 0c             	sub    esp,0xc
c001973f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019743:	50                   	push   eax
c0019744:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019748:	50                   	push   eax
c0019749:	8d 44 24 24          	lea    eax,[esp+0x24]
c001974d:	50                   	push   eax
c001974e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019752:	50                   	push   eax
c0019753:	6a 01                	push   0x1
c0019755:	e8 d7 f4 ff ff       	call   c0018c31 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001975a:	83 c4 20             	add    esp,0x20
c001975d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019761:	83 e0 0f             	and    eax,0xf
c0019764:	a2 00 fb 02 c0       	mov    ds:0xc002fb00,al
c0019769:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001976d:	c1 e8 04             	shr    eax,0x4
c0019770:	83 e0 0f             	and    eax,0xf
c0019773:	a2 fe fa 02 c0       	mov    ds:0xc002fafe,al
c0019778:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001977c:	c1 e8 08             	shr    eax,0x8
c001977f:	83 e0 0f             	and    eax,0xf
c0019782:	a2 fd fa 02 c0       	mov    ds:0xc002fafd,al
c0019787:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001978b:	c1 e8 0c             	shr    eax,0xc
c001978e:	83 e0 03             	and    eax,0x3
c0019791:	a2 ff fa 02 c0       	mov    ds:0xc002faff,al
c0019796:	a0 fd fa 02 c0       	mov    al,ds:0xc002fafd
c001979b:	0f b6 c0             	movzx  eax,al
c001979e:	83 f8 06             	cmp    eax,0x6
c00197a1:	74 0d                	je     c00197b0 <HalDetectFeatures()+0xa2a>
c00197a3:	a0 fd fa 02 c0       	mov    al,ds:0xc002fafd
c00197a8:	0f b6 c0             	movzx  eax,al
c00197ab:	83 f8 0f             	cmp    eax,0xf
c00197ae:	75 18                	jne    c00197c8 <HalDetectFeatures()+0xa42>
c00197b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00197b4:	c1 e8 10             	shr    eax,0x10
c00197b7:	c1 e0 04             	shl    eax,0x4
c00197ba:	88 c2                	mov    dl,al
c00197bc:	a0 fe fa 02 c0       	mov    al,ds:0xc002fafe
c00197c1:	09 d0                	or     eax,edx
c00197c3:	a2 fe fa 02 c0       	mov    ds:0xc002fafe,al
c00197c8:	a0 fd fa 02 c0       	mov    al,ds:0xc002fafd
c00197cd:	0f b6 c0             	movzx  eax,al
c00197d0:	83 f8 0f             	cmp    eax,0xf
c00197d3:	75 15                	jne    c00197ea <HalDetectFeatures()+0xa64>
c00197d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00197d9:	c1 e8 14             	shr    eax,0x14
c00197dc:	88 c2                	mov    dl,al
c00197de:	a0 fd fa 02 c0       	mov    al,ds:0xc002fafd
c00197e3:	01 d0                	add    eax,edx
c00197e5:	a2 fd fa 02 c0       	mov    ds:0xc002fafd,al
c00197ea:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c00197f2:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c00197fa:	85 c0                	test   eax,eax
c00197fc:	74 2d                	je     c001982b <HalDetectFeatures()+0xaa5>
c00197fe:	83 ec 0c             	sub    esp,0xc
c0019801:	68 00 00 00 40       	push   0x40000000
c0019806:	e8 f1 f4 ff ff       	call   c0018cfc <cpuidCheckECX(unsigned int)>
c001980b:	83 c4 10             	add    esp,0x10
c001980e:	83 e0 01             	and    eax,0x1
c0019811:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0019818:	a0 0e fb 02 c0       	mov    al,ds:0xc002fb0e
c001981d:	83 e0 fb             	and    eax,0xfffffffb
c0019820:	88 c2                	mov    dl,al
c0019822:	88 c8                	mov    al,cl
c0019824:	09 d0                	or     eax,edx
c0019826:	a2 0e fb 02 c0       	mov    ds:0xc002fb0e,al
c001982b:	a0 0f fb 02 c0       	mov    al,ds:0xc002fb0f
c0019830:	83 c8 04             	or     eax,0x4
c0019833:	a2 0f fb 02 c0       	mov    ds:0xc002fb0f,al
c0019838:	a0 0f fb 02 c0       	mov    al,ds:0xc002fb0f
c001983d:	83 c8 08             	or     eax,0x8
c0019840:	a2 0f fb 02 c0       	mov    ds:0xc002fb0f,al
c0019845:	a0 0f fb 02 c0       	mov    al,ds:0xc002fb0f
c001984a:	83 c8 10             	or     eax,0x10
c001984d:	a2 0f fb 02 c0       	mov    ds:0xc002fb0f,al
c0019852:	83 ec 0c             	sub    esp,0xc
c0019855:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019859:	50                   	push   eax
c001985a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001985e:	50                   	push   eax
c001985f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019863:	50                   	push   eax
c0019864:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019868:	50                   	push   eax
c0019869:	68 00 00 00 80       	push   0x80000000
c001986e:	e8 be f3 ff ff       	call   c0018c31 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019873:	83 c4 20             	add    esp,0x20
c0019876:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001987a:	3d 00 00 00 80       	cmp    eax,0x80000000
c001987f:	0f 86 96 01 00 00    	jbe    c0019a1b <HalDetectFeatures()+0xc95>
c0019885:	83 ec 0c             	sub    esp,0xc
c0019888:	8d 44 24 14          	lea    eax,[esp+0x14]
c001988c:	50                   	push   eax
c001988d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019891:	50                   	push   eax
c0019892:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019896:	50                   	push   eax
c0019897:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001989b:	50                   	push   eax
c001989c:	68 01 00 00 80       	push   0x80000001
c00198a1:	e8 8b f3 ff ff       	call   c0018c31 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00198a6:	83 c4 20             	add    esp,0x20
c00198a9:	a0 0f fb 02 c0       	mov    al,ds:0xc002fb0f
c00198ae:	83 e0 7f             	and    eax,0x7f
c00198b1:	a2 0f fb 02 c0       	mov    ds:0xc002fb0f,al
c00198b6:	a0 10 fb 02 c0       	mov    al,ds:0xc002fb10
c00198bb:	83 e0 fb             	and    eax,0xfffffffb
c00198be:	a2 10 fb 02 c0       	mov    ds:0xc002fb10,al
c00198c3:	a0 10 fb 02 c0       	mov    al,ds:0xc002fb10
c00198c8:	83 e0 fd             	and    eax,0xfffffffd
c00198cb:	a2 10 fb 02 c0       	mov    ds:0xc002fb10,al
c00198d0:	e9 46 01 00 00       	jmp    c0019a1b <HalDetectFeatures()+0xc95>
c00198d5:	83 ec 08             	sub    esp,0x8
c00198d8:	68 67 5a 02 c0       	push   0xc0025a67
c00198dd:	68 f0 fa 02 c0       	push   0xc002faf0
c00198e2:	e8 59 6d fe ff       	call   c0000640 <strcpy>
c00198e7:	83 c4 10             	add    esp,0x10
c00198ea:	c7 05 04 fb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fb04,0x1
c00198f4:	e8 ca 68 fe ff       	call   c00001c3 <is486>
c00198f9:	85 c0                	test   eax,eax
c00198fb:	0f 95 c0             	setne  al
c00198fe:	0f b6 c0             	movzx  eax,al
c0019901:	85 c0                	test   eax,eax
c0019903:	0f 84 8d 00 00 00    	je     c0019996 <HalDetectFeatures()+0xc10>
c0019909:	a0 0f fb 02 c0       	mov    al,ds:0xc002fb0f
c001990e:	83 c8 04             	or     eax,0x4
c0019911:	a2 0f fb 02 c0       	mov    ds:0xc002fb0f,al
c0019916:	a0 0f fb 02 c0       	mov    al,ds:0xc002fb0f
c001991b:	83 c8 08             	or     eax,0x8
c001991e:	a2 0f fb 02 c0       	mov    ds:0xc002fb0f,al
c0019923:	a0 0f fb 02 c0       	mov    al,ds:0xc002fb0f
c0019928:	83 c8 10             	or     eax,0x10
c001992b:	a2 0f fb 02 c0       	mov    ds:0xc002fb0f,al
c0019930:	0f 20 c0             	mov    eax,cr0
c0019933:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019937:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001993b:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0019942:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019949:	83 e0 04             	and    eax,0x4
c001994c:	74 1e                	je     c001996c <HalDetectFeatures()+0xbe6>
c001994e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019955:	83 e0 10             	and    eax,0x10
c0019958:	75 12                	jne    c001996c <HalDetectFeatures()+0xbe6>
c001995a:	a0 10 fb 02 c0       	mov    al,ds:0xc002fb10
c001995f:	83 e0 f7             	and    eax,0xfffffff7
c0019962:	a2 10 fb 02 c0       	mov    ds:0xc002fb10,al
c0019967:	e9 af 00 00 00       	jmp    c0019a1b <HalDetectFeatures()+0xc95>
c001996c:	e8 2d 68 fe ff       	call   c000019e <hasLegacyFPU>
c0019971:	83 e0 01             	and    eax,0x1
c0019974:	83 e0 01             	and    eax,0x1
c0019977:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001997e:	a0 10 fb 02 c0       	mov    al,ds:0xc002fb10
c0019983:	83 e0 f7             	and    eax,0xfffffff7
c0019986:	88 c2                	mov    dl,al
c0019988:	88 c8                	mov    al,cl
c001998a:	09 d0                	or     eax,edx
c001998c:	a2 10 fb 02 c0       	mov    ds:0xc002fb10,al
c0019991:	e9 85 00 00 00       	jmp    c0019a1b <HalDetectFeatures()+0xc95>
c0019996:	a0 0f fb 02 c0       	mov    al,ds:0xc002fb0f
c001999b:	83 e0 fb             	and    eax,0xfffffffb
c001999e:	a2 0f fb 02 c0       	mov    ds:0xc002fb0f,al
c00199a3:	a0 0f fb 02 c0       	mov    al,ds:0xc002fb0f
c00199a8:	83 e0 f7             	and    eax,0xfffffff7
c00199ab:	a2 0f fb 02 c0       	mov    ds:0xc002fb0f,al
c00199b0:	a0 0f fb 02 c0       	mov    al,ds:0xc002fb0f
c00199b5:	83 e0 ef             	and    eax,0xffffffef
c00199b8:	a2 0f fb 02 c0       	mov    ds:0xc002fb0f,al
c00199bd:	0f 20 c0             	mov    eax,cr0
c00199c0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00199c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00199c8:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00199cf:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00199d6:	83 e0 04             	and    eax,0x4
c00199d9:	74 1b                	je     c00199f6 <HalDetectFeatures()+0xc70>
c00199db:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00199e2:	83 e0 10             	and    eax,0x10
c00199e5:	75 0f                	jne    c00199f6 <HalDetectFeatures()+0xc70>
c00199e7:	a0 10 fb 02 c0       	mov    al,ds:0xc002fb10
c00199ec:	83 e0 f7             	and    eax,0xfffffff7
c00199ef:	a2 10 fb 02 c0       	mov    ds:0xc002fb10,al
c00199f4:	eb 25                	jmp    c0019a1b <HalDetectFeatures()+0xc95>
c00199f6:	e8 a3 67 fe ff       	call   c000019e <hasLegacyFPU>
c00199fb:	83 e0 01             	and    eax,0x1
c00199fe:	83 e0 01             	and    eax,0x1
c0019a01:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019a08:	a0 10 fb 02 c0       	mov    al,ds:0xc002fb10
c0019a0d:	83 e0 f7             	and    eax,0xfffffff7
c0019a10:	88 c2                	mov    dl,al
c0019a12:	88 c8                	mov    al,cl
c0019a14:	09 d0                	or     eax,edx
c0019a16:	a2 10 fb 02 c0       	mov    ds:0xc002fb10,al
c0019a1b:	a0 10 fb 02 c0       	mov    al,ds:0xc002fb10
c0019a20:	83 e0 08             	and    eax,0x8
c0019a23:	0f b6 c0             	movzx  eax,al
c0019a26:	85 c0                	test   eax,eax
c0019a28:	75 25                	jne    c0019a4f <HalDetectFeatures()+0xcc9>
c0019a2a:	e8 6f 67 fe ff       	call   c000019e <hasLegacyFPU>
c0019a2f:	83 e0 01             	and    eax,0x1
c0019a32:	83 e0 01             	and    eax,0x1
c0019a35:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019a3c:	a0 10 fb 02 c0       	mov    al,ds:0xc002fb10
c0019a41:	83 e0 f7             	and    eax,0xfffffff7
c0019a44:	88 c2                	mov    dl,al
c0019a46:	88 c8                	mov    al,cl
c0019a48:	09 d0                	or     eax,edx
c0019a4a:	a2 10 fb 02 c0       	mov    ds:0xc002fb10,al
c0019a4f:	a0 10 fb 02 c0       	mov    al,ds:0xc002fb10
c0019a54:	83 e0 08             	and    eax,0x8
c0019a57:	0f b6 c0             	movzx  eax,al
c0019a5a:	85 c0                	test   eax,eax
c0019a5c:	74 0d                	je     c0019a6b <HalDetectFeatures()+0xce5>
c0019a5e:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0019a63:	83 c8 10             	or     eax,0x10
c0019a66:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c0019a6b:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0019a70:	83 e0 10             	and    eax,0x10
c0019a73:	0f b6 c0             	movzx  eax,al
c0019a76:	85 c0                	test   eax,eax
c0019a78:	75 23                	jne    c0019a9d <HalDetectFeatures()+0xd17>
c0019a7a:	e8 e7 7e 00 00       	call   c0021966 <x87Detect>
c0019a7f:	83 e0 01             	and    eax,0x1
c0019a82:	83 e0 01             	and    eax,0x1
c0019a85:	89 c1                	mov    ecx,eax
c0019a87:	c1 e1 04             	shl    ecx,0x4
c0019a8a:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0019a8f:	83 e0 ef             	and    eax,0xffffffef
c0019a92:	88 c2                	mov    dl,al
c0019a94:	88 c8                	mov    al,cl
c0019a96:	09 d0                	or     eax,edx
c0019a98:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c0019a9d:	a0 0d fb 02 c0       	mov    al,ds:0xc002fb0d
c0019aa2:	83 e0 01             	and    eax,0x1
c0019aa5:	0f b6 c0             	movzx  eax,al
c0019aa8:	85 c0                	test   eax,eax
c0019aaa:	75 2d                	jne    c0019ad9 <HalDetectFeatures()+0xd53>
c0019aac:	a0 0d fb 02 c0       	mov    al,ds:0xc002fb0d
c0019ab1:	83 e0 02             	and    eax,0x2
c0019ab4:	0f b6 c0             	movzx  eax,al
c0019ab7:	85 c0                	test   eax,eax
c0019ab9:	75 1e                	jne    c0019ad9 <HalDetectFeatures()+0xd53>
c0019abb:	a0 0d fb 02 c0       	mov    al,ds:0xc002fb0d
c0019ac0:	83 e0 04             	and    eax,0x4
c0019ac3:	0f b6 c0             	movzx  eax,al
c0019ac6:	85 c0                	test   eax,eax
c0019ac8:	75 0f                	jne    c0019ad9 <HalDetectFeatures()+0xd53>
c0019aca:	a0 0d fb 02 c0       	mov    al,ds:0xc002fb0d
c0019acf:	83 e0 08             	and    eax,0x8
c0019ad2:	0f b6 c0             	movzx  eax,al
c0019ad5:	85 c0                	test   eax,eax
c0019ad7:	74 0d                	je     c0019ae6 <HalDetectFeatures()+0xd60>
c0019ad9:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0019ade:	83 c8 80             	or     eax,0xffffff80
c0019ae1:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c0019ae6:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0019aeb:	83 e0 10             	and    eax,0x10
c0019aee:	0f b6 c0             	movzx  eax,al
c0019af1:	85 c0                	test   eax,eax
c0019af3:	74 2f                	je     c0019b24 <HalDetectFeatures()+0xd9e>
c0019af5:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0019afa:	83 e0 80             	and    eax,0xffffff80
c0019afd:	0f b6 c0             	movzx  eax,al
c0019b00:	85 c0                	test   eax,eax
c0019b02:	75 20                	jne    c0019b24 <HalDetectFeatures()+0xd9e>
c0019b04:	e8 17 7e 00 00       	call   c0021920 <sseDetect>
c0019b09:	83 e0 01             	and    eax,0x1
c0019b0c:	89 c1                	mov    ecx,eax
c0019b0e:	c1 e1 07             	shl    ecx,0x7
c0019b11:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0019b16:	83 e0 7f             	and    eax,0x7f
c0019b19:	88 c2                	mov    dl,al
c0019b1b:	88 c8                	mov    al,cl
c0019b1d:	09 d0                	or     eax,edx
c0019b1f:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c0019b24:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0019b29:	83 e0 80             	and    eax,0xffffff80
c0019b2c:	0f b6 c0             	movzx  eax,al
c0019b2f:	85 c0                	test   eax,eax
c0019b31:	74 1c                	je     c0019b4f <HalDetectFeatures()+0xdc9>
c0019b33:	a0 0d fb 02 c0       	mov    al,ds:0xc002fb0d
c0019b38:	83 e0 20             	and    eax,0x20
c0019b3b:	0f b6 c0             	movzx  eax,al
c0019b3e:	85 c0                	test   eax,eax
c0019b40:	75 0d                	jne    c0019b4f <HalDetectFeatures()+0xdc9>
c0019b42:	a0 0d fb 02 c0       	mov    al,ds:0xc002fb0d
c0019b47:	83 e0 df             	and    eax,0xffffffdf
c0019b4a:	a2 0d fb 02 c0       	mov    ds:0xc002fb0d,al
c0019b4f:	c6 05 08 fb 02 c0 00 	mov    BYTE PTR ds:0xc002fb08,0x0
c0019b56:	90                   	nop
c0019b57:	81 c4 90 00 00 00    	add    esp,0x90
c0019b5d:	5b                   	pop    ebx
c0019b5e:	5e                   	pop    esi
c0019b5f:	5f                   	pop    edi
c0019b60:	c3                   	ret    

c0019b61 <HalEnableNMI()>:
c0019b61:	c6 05 ec fa 02 c0 01 	mov    BYTE PTR ds:0xc002faec,0x1
c0019b68:	6a 10                	push   0x10
c0019b6a:	e8 12 ef ff ff       	call   c0018a81 <x86ReadCMOS(unsigned char)>
c0019b6f:	83 c4 04             	add    esp,0x4
c0019b72:	90                   	nop
c0019b73:	c3                   	ret    

c0019b74 <HalDisableNMI()>:
c0019b74:	c6 05 ec fa 02 c0 00 	mov    BYTE PTR ds:0xc002faec,0x0
c0019b7b:	6a 10                	push   0x10
c0019b7d:	e8 ff ee ff ff       	call   c0018a81 <x86ReadCMOS(unsigned char)>
c0019b82:	83 c4 04             	add    esp,0x4
c0019b85:	90                   	nop
c0019b86:	c3                   	ret    

c0019b87 <HalGetNMIState()>:
c0019b87:	a0 ec fa 02 c0       	mov    al,ds:0xc002faec
c0019b8c:	c3                   	ret    

c0019b8d <x86rdmsr(unsigned int)>:
c0019b8d:	83 ec 1c             	sub    esp,0x1c
c0019b90:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0019b95:	83 e0 08             	and    eax,0x8
c0019b98:	0f b6 c0             	movzx  eax,al
c0019b9b:	85 c0                	test   eax,eax
c0019b9d:	75 10                	jne    c0019baf <x86rdmsr(unsigned int)+0x22>
c0019b9f:	83 ec 0c             	sub    esp,0xc
c0019ba2:	68 02 5b 02 c0       	push   0xc0025b02
c0019ba7:	e8 82 64 ff ff       	call   c001002e <KePanic(char const*)>
c0019bac:	83 c4 10             	add    esp,0x10
c0019baf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bb3:	89 c1                	mov    ecx,eax
c0019bb5:	0f 32                	rdmsr  
c0019bb7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019bbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019bbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bc3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019bc7:	83 c4 1c             	add    esp,0x1c
c0019bca:	c3                   	ret    

c0019bcb <x86wrmsr(unsigned int, unsigned long long)>:
c0019bcb:	83 ec 1c             	sub    esp,0x1c
c0019bce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019bd2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019bd6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019bda:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019bde:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0019be3:	83 e0 08             	and    eax,0x8
c0019be6:	0f b6 c0             	movzx  eax,al
c0019be9:	85 c0                	test   eax,eax
c0019beb:	75 10                	jne    c0019bfd <x86wrmsr(unsigned int, unsigned long long)+0x32>
c0019bed:	83 ec 0c             	sub    esp,0xc
c0019bf0:	68 08 5b 02 c0       	push   0xc0025b08
c0019bf5:	e8 34 64 ff ff       	call   c001002e <KePanic(char const*)>
c0019bfa:	83 c4 10             	add    esp,0x10
c0019bfd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0019c01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c05:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019c09:	0f 30                	wrmsr  
c0019c0b:	90                   	nop
c0019c0c:	83 c4 1c             	add    esp,0x1c
c0019c0f:	c3                   	ret    

c0019c10 <HalHandleGeneralProtectionFault(void*, void*)>:
c0019c10:	83 ec 0c             	sub    esp,0xc
c0019c13:	83 ec 0c             	sub    esp,0xc
c0019c16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019c1a:	e8 7e e6 ff ff       	call   c001829d <Vm::faultHandler(regs*)>
c0019c1f:	83 c4 10             	add    esp,0x10
c0019c22:	83 c4 0c             	add    esp,0xc
c0019c25:	c3                   	ret    

c0019c26 <HalFindRSDP()>:
c0019c26:	83 ec 1c             	sub    esp,0x1c
c0019c29:	a1 40 f1 02 c0       	mov    eax,ds:0xc002f140
c0019c2e:	3d ff 07 00 00       	cmp    eax,0x7ff
c0019c33:	7e 0c                	jle    c0019c41 <HalFindRSDP()+0x1b>
c0019c35:	a1 24 f1 02 c0       	mov    eax,ds:0xc002f124
c0019c3a:	25 00 04 00 00       	and    eax,0x400
c0019c3f:	74 1d                	je     c0019c5e <HalFindRSDP()+0x38>
c0019c41:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0019c46:	83 e0 fb             	and    eax,0xfffffffb
c0019c49:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c0019c4e:	83 ec 0c             	sub    esp,0xc
c0019c51:	68 0e 5b 02 c0       	push   0xc0025b0e
c0019c56:	e8 09 d3 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019c5b:	83 c4 10             	add    esp,0x10
c0019c5e:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0019c63:	83 e0 04             	and    eax,0x4
c0019c66:	0f b6 c0             	movzx  eax,al
c0019c69:	85 c0                	test   eax,eax
c0019c6b:	75 17                	jne    c0019c84 <HalFindRSDP()+0x5e>
c0019c6d:	83 ec 0c             	sub    esp,0xc
c0019c70:	68 1d 5b 02 c0       	push   0xc0025b1d
c0019c75:	e8 ea d2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019c7a:	83 c4 10             	add    esp,0x10
c0019c7d:	b8 00 00 00 00       	mov    eax,0x0
c0019c82:	eb 63                	jmp    c0019ce7 <HalFindRSDP()+0xc1>
c0019c84:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0019c8c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0019c94:	77 2f                	ja     c0019cc5 <HalFindRSDP()+0x9f>
c0019c96:	83 ec 04             	sub    esp,0x4
c0019c99:	6a 08                	push   0x8
c0019c9b:	68 27 5b 02 c0       	push   0xc0025b27
c0019ca0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019ca4:	e8 d7 66 fe ff       	call   c0000380 <memcmp>
c0019ca9:	83 c4 10             	add    esp,0x10
c0019cac:	85 c0                	test   eax,eax
c0019cae:	0f 94 c0             	sete   al
c0019cb1:	0f b6 c0             	movzx  eax,al
c0019cb4:	85 c0                	test   eax,eax
c0019cb6:	74 06                	je     c0019cbe <HalFindRSDP()+0x98>
c0019cb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019cbc:	eb 29                	jmp    c0019ce7 <HalFindRSDP()+0xc1>
c0019cbe:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0019cc3:	eb c7                	jmp    c0019c8c <HalFindRSDP()+0x66>
c0019cc5:	83 ec 0c             	sub    esp,0xc
c0019cc8:	68 30 5b 02 c0       	push   0xc0025b30
c0019ccd:	e8 92 d2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019cd2:	83 c4 10             	add    esp,0x10
c0019cd5:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c0019cda:	83 e0 fb             	and    eax,0xfffffffb
c0019cdd:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c0019ce2:	b8 00 00 00 00       	mov    eax,0x0
c0019ce7:	83 c4 1c             	add    esp,0x1c
c0019cea:	c3                   	ret    

c0019ceb <HalHandlePageFault(void*, void*)>:
c0019ceb:	83 ec 1c             	sub    esp,0x1c
c0019cee:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0019cf3:	8b 00                	mov    eax,DWORD PTR [eax]
c0019cf5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019cf8:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0019cfe:	0f 20 d2             	mov    edx,cr2
c0019d01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019d05:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019d09:	83 ec 08             	sub    esp,0x8
c0019d0c:	52                   	push   edx
c0019d0d:	50                   	push   eax
c0019d0e:	e8 87 a5 ff ff       	call   c001429a <VAS::tryLoadBackOffDisk(unsigned long)>
c0019d13:	83 c4 10             	add    esp,0x10
c0019d16:	83 c4 1c             	add    esp,0x1c
c0019d19:	c3                   	ret    

c0019d1a <HalHandleOpcodeFault(void*, void*)>:
c0019d1a:	83 ec 1c             	sub    esp,0x1c
c0019d1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019d25:	a0 08 fb 02 c0       	mov    al,ds:0xc002fb08
c0019d2a:	0f b6 c0             	movzx  eax,al
c0019d2d:	85 c0                	test   eax,eax
c0019d2f:	74 25                	je     c0019d56 <HalHandleOpcodeFault(void*, void*)+0x3c>
c0019d31:	83 ec 0c             	sub    esp,0xc
c0019d34:	68 28 5d 02 c0       	push   0xc0025d28
c0019d39:	e8 26 d2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019d3e:	83 c4 10             	add    esp,0x10
c0019d41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d45:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019d48:	8d 50 19             	lea    edx,[eax+0x19]
c0019d4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d4f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019d52:	b0 01                	mov    al,0x1
c0019d54:	eb 02                	jmp    c0019d58 <HalHandleOpcodeFault(void*, void*)+0x3e>
c0019d56:	b0 00                	mov    al,0x0
c0019d58:	83 c4 1c             	add    esp,0x1c
c0019d5b:	c3                   	ret    

c0019d5c <HalDisplayDebugInfo(void*)>:
c0019d5c:	83 ec 2c             	sub    esp,0x2c
c0019d5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019d63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019d67:	0f 20 c0             	mov    eax,cr0
c0019d6a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019d6e:	0f 20 d0             	mov    eax,cr2
c0019d71:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019d75:	0f 20 d8             	mov    eax,cr3
c0019d78:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019d7c:	0f 20 e0             	mov    eax,cr4
c0019d7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019d83:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019d87:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019d8a:	83 ec 08             	sub    esp,0x8
c0019d8d:	50                   	push   eax
c0019d8e:	68 4a 5b 02 c0       	push   0xc0025b4a
c0019d93:	e8 cc d1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019d98:	83 c4 10             	add    esp,0x10
c0019d9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019d9f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0019da2:	83 ec 08             	sub    esp,0x8
c0019da5:	50                   	push   eax
c0019da6:	68 3b 5b 02 c0       	push   0xc0025b3b
c0019dab:	e8 b4 d1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019db0:	83 c4 10             	add    esp,0x10
c0019db3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019db7:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0019dba:	83 ec 08             	sub    esp,0x8
c0019dbd:	50                   	push   eax
c0019dbe:	68 46 5b 02 c0       	push   0xc0025b46
c0019dc3:	e8 9c d1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019dc8:	83 c4 10             	add    esp,0x10
c0019dcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019dcf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019dd2:	83 ec 08             	sub    esp,0x8
c0019dd5:	50                   	push   eax
c0019dd6:	68 55 5b 02 c0       	push   0xc0025b55
c0019ddb:	e8 84 d1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019de0:	83 c4 10             	add    esp,0x10
c0019de3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019de7:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0019dea:	83 ec 08             	sub    esp,0x8
c0019ded:	50                   	push   eax
c0019dee:	68 60 5b 02 c0       	push   0xc0025b60
c0019df3:	e8 6c d1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019df8:	83 c4 10             	add    esp,0x10
c0019dfb:	83 ec 08             	sub    esp,0x8
c0019dfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019e02:	68 6b 5b 02 c0       	push   0xc0025b6b
c0019e07:	e8 58 d1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019e0c:	83 c4 10             	add    esp,0x10
c0019e0f:	83 ec 08             	sub    esp,0x8
c0019e12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e16:	68 76 5b 02 c0       	push   0xc0025b76
c0019e1b:	e8 44 d1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019e20:	83 c4 10             	add    esp,0x10
c0019e23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e27:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0019e2a:	c1 e0 05             	shl    eax,0x5
c0019e2d:	8d 90 60 70 02 c0    	lea    edx,[eax-0x3ffd8fa0]
c0019e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e37:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0019e3a:	83 ec 04             	sub    esp,0x4
c0019e3d:	52                   	push   edx
c0019e3e:	50                   	push   eax
c0019e3f:	68 81 5b 02 c0       	push   0xc0025b81
c0019e44:	e8 1b d1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019e49:	83 c4 10             	add    esp,0x10
c0019e4c:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019e51:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019e57:	83 ec 0c             	sub    esp,0xc
c0019e5a:	50                   	push   eax
c0019e5b:	e8 e9 86 ff ff       	call   c0012549 <setActiveTerminal(VgaText*)>
c0019e60:	83 c4 10             	add    esp,0x10
c0019e63:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019e68:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019e6e:	83 ec 08             	sub    esp,0x8
c0019e71:	68 90 5b 02 c0       	push   0xc0025b90
c0019e76:	50                   	push   eax
c0019e77:	e8 1a 8a ff ff       	call   c0012896 <VgaText::puts(char const*)>
c0019e7c:	83 c4 10             	add    esp,0x10
c0019e7f:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019e84:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019e8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019e8e:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0019e91:	83 ec 08             	sub    esp,0x8
c0019e94:	52                   	push   edx
c0019e95:	50                   	push   eax
c0019e96:	e8 b5 89 ff ff       	call   c0012850 <VgaText::putx(unsigned int)>
c0019e9b:	83 c4 10             	add    esp,0x10
c0019e9e:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019ea3:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019ea9:	83 ec 08             	sub    esp,0x8
c0019eac:	68 9e 5b 02 c0       	push   0xc0025b9e
c0019eb1:	50                   	push   eax
c0019eb2:	e8 df 89 ff ff       	call   c0012896 <VgaText::puts(char const*)>
c0019eb7:	83 c4 10             	add    esp,0x10
c0019eba:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019ebf:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019ec5:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0019eca:	8b 12                	mov    edx,DWORD PTR [edx]
c0019ecc:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0019ecf:	83 c2 0c             	add    edx,0xc
c0019ed2:	83 ec 08             	sub    esp,0x8
c0019ed5:	52                   	push   edx
c0019ed6:	50                   	push   eax
c0019ed7:	e8 ba 89 ff ff       	call   c0012896 <VgaText::puts(char const*)>
c0019edc:	83 c4 10             	add    esp,0x10
c0019edf:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019ee4:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019eea:	83 ec 08             	sub    esp,0x8
c0019eed:	68 a7 5b 02 c0       	push   0xc0025ba7
c0019ef2:	50                   	push   eax
c0019ef3:	e8 9e 89 ff ff       	call   c0012896 <VgaText::puts(char const*)>
c0019ef8:	83 c4 10             	add    esp,0x10
c0019efb:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019f00:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019f06:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019f0a:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0019f0d:	83 ec 08             	sub    esp,0x8
c0019f10:	52                   	push   edx
c0019f11:	50                   	push   eax
c0019f12:	e8 39 89 ff ff       	call   c0012850 <VgaText::putx(unsigned int)>
c0019f17:	83 c4 10             	add    esp,0x10
c0019f1a:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019f1f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019f25:	83 ec 08             	sub    esp,0x8
c0019f28:	68 af 5b 02 c0       	push   0xc0025baf
c0019f2d:	50                   	push   eax
c0019f2e:	e8 63 89 ff ff       	call   c0012896 <VgaText::puts(char const*)>
c0019f33:	83 c4 10             	add    esp,0x10
c0019f36:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019f3b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019f41:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019f45:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0019f48:	83 ec 08             	sub    esp,0x8
c0019f4b:	52                   	push   edx
c0019f4c:	50                   	push   eax
c0019f4d:	e8 fe 88 ff ff       	call   c0012850 <VgaText::putx(unsigned int)>
c0019f52:	83 c4 10             	add    esp,0x10
c0019f55:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019f5a:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019f60:	83 ec 08             	sub    esp,0x8
c0019f63:	68 b7 5b 02 c0       	push   0xc0025bb7
c0019f68:	50                   	push   eax
c0019f69:	e8 28 89 ff ff       	call   c0012896 <VgaText::puts(char const*)>
c0019f6e:	83 c4 10             	add    esp,0x10
c0019f71:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019f76:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019f7c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019f80:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0019f83:	83 ec 08             	sub    esp,0x8
c0019f86:	52                   	push   edx
c0019f87:	50                   	push   eax
c0019f88:	e8 c3 88 ff ff       	call   c0012850 <VgaText::putx(unsigned int)>
c0019f8d:	83 c4 10             	add    esp,0x10
c0019f90:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019f95:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019f9b:	83 ec 08             	sub    esp,0x8
c0019f9e:	68 bf 5b 02 c0       	push   0xc0025bbf
c0019fa3:	50                   	push   eax
c0019fa4:	e8 ed 88 ff ff       	call   c0012896 <VgaText::puts(char const*)>
c0019fa9:	83 c4 10             	add    esp,0x10
c0019fac:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019fb1:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019fb7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019fbb:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0019fbe:	83 ec 08             	sub    esp,0x8
c0019fc1:	52                   	push   edx
c0019fc2:	50                   	push   eax
c0019fc3:	e8 88 88 ff ff       	call   c0012850 <VgaText::putx(unsigned int)>
c0019fc8:	83 c4 10             	add    esp,0x10
c0019fcb:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019fd0:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019fd6:	83 ec 08             	sub    esp,0x8
c0019fd9:	68 c7 5b 02 c0       	push   0xc0025bc7
c0019fde:	50                   	push   eax
c0019fdf:	e8 b2 88 ff ff       	call   c0012896 <VgaText::puts(char const*)>
c0019fe4:	83 c4 10             	add    esp,0x10
c0019fe7:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0019fec:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019ff2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019ff6:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0019ff9:	83 ec 08             	sub    esp,0x8
c0019ffc:	52                   	push   edx
c0019ffd:	50                   	push   eax
c0019ffe:	e8 4d 88 ff ff       	call   c0012850 <VgaText::putx(unsigned int)>
c001a003:	83 c4 10             	add    esp,0x10
c001a006:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a00b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a011:	83 ec 08             	sub    esp,0x8
c001a014:	68 cf 5b 02 c0       	push   0xc0025bcf
c001a019:	50                   	push   eax
c001a01a:	e8 77 88 ff ff       	call   c0012896 <VgaText::puts(char const*)>
c001a01f:	83 c4 10             	add    esp,0x10
c001a022:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a027:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a02d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a031:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a034:	83 ec 08             	sub    esp,0x8
c001a037:	52                   	push   edx
c001a038:	50                   	push   eax
c001a039:	e8 12 88 ff ff       	call   c0012850 <VgaText::putx(unsigned int)>
c001a03e:	83 c4 10             	add    esp,0x10
c001a041:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a046:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a04c:	83 ec 08             	sub    esp,0x8
c001a04f:	68 d7 5b 02 c0       	push   0xc0025bd7
c001a054:	50                   	push   eax
c001a055:	e8 3c 88 ff ff       	call   c0012896 <VgaText::puts(char const*)>
c001a05a:	83 c4 10             	add    esp,0x10
c001a05d:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a062:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a068:	83 ec 08             	sub    esp,0x8
c001a06b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a06f:	50                   	push   eax
c001a070:	e8 db 87 ff ff       	call   c0012850 <VgaText::putx(unsigned int)>
c001a075:	83 c4 10             	add    esp,0x10
c001a078:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a07d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a083:	83 ec 08             	sub    esp,0x8
c001a086:	68 e0 5b 02 c0       	push   0xc0025be0
c001a08b:	50                   	push   eax
c001a08c:	e8 05 88 ff ff       	call   c0012896 <VgaText::puts(char const*)>
c001a091:	83 c4 10             	add    esp,0x10
c001a094:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a099:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a09f:	83 ec 08             	sub    esp,0x8
c001a0a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0a6:	50                   	push   eax
c001a0a7:	e8 a4 87 ff ff       	call   c0012850 <VgaText::putx(unsigned int)>
c001a0ac:	83 c4 10             	add    esp,0x10
c001a0af:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a0b4:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a0ba:	83 ec 08             	sub    esp,0x8
c001a0bd:	68 e8 5b 02 c0       	push   0xc0025be8
c001a0c2:	50                   	push   eax
c001a0c3:	e8 ce 87 ff ff       	call   c0012896 <VgaText::puts(char const*)>
c001a0c8:	83 c4 10             	add    esp,0x10
c001a0cb:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a0d0:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a0d6:	83 ec 08             	sub    esp,0x8
c001a0d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0dd:	50                   	push   eax
c001a0de:	e8 6d 87 ff ff       	call   c0012850 <VgaText::putx(unsigned int)>
c001a0e3:	83 c4 10             	add    esp,0x10
c001a0e6:	fa                   	cli    
c001a0e7:	f4                   	hlt    
c001a0e8:	eb fe                	jmp    c001a0e8 <HalDisplayDebugInfo(void*)+0x38c>

c001a0ea <HalReceivedNMI()>:
c001a0ea:	83 ec 1c             	sub    esp,0x1c
c001a0ed:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c001a0f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a0f8:	89 c2                	mov    edx,eax
c001a0fa:	ec                   	in     al,dx
c001a0fb:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001a0ff:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001a103:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a107:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c001a10e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a112:	89 c2                	mov    edx,eax
c001a114:	ec                   	in     al,dx
c001a115:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001a119:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001a11d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001a121:	83 ec 0c             	sub    esp,0xc
c001a124:	68 f0 5b 02 c0       	push   0xc0025bf0
c001a129:	e8 36 ce fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001a12e:	83 c4 10             	add    esp,0x10
c001a131:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001a136:	83 e0 10             	and    eax,0x10
c001a139:	74 10                	je     c001a14b <HalReceivedNMI()+0x61>
c001a13b:	83 ec 0c             	sub    esp,0xc
c001a13e:	68 01 5c 02 c0       	push   0xc0025c01
c001a143:	e8 e6 5e ff ff       	call   c001002e <KePanic(char const*)>
c001a148:	83 c4 10             	add    esp,0x10
c001a14b:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001a150:	83 e0 40             	and    eax,0x40
c001a153:	74 10                	je     c001a165 <HalReceivedNMI()+0x7b>
c001a155:	83 ec 0c             	sub    esp,0xc
c001a158:	68 0e 5c 02 c0       	push   0xc0025c0e
c001a15d:	e8 cc 5e ff ff       	call   c001002e <KePanic(char const*)>
c001a162:	83 c4 10             	add    esp,0x10
c001a165:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001a169:	0f be c0             	movsx  eax,al
c001a16c:	85 c0                	test   eax,eax
c001a16e:	79 10                	jns    c001a180 <HalReceivedNMI()+0x96>
c001a170:	83 ec 0c             	sub    esp,0xc
c001a173:	68 18 5c 02 c0       	push   0xc0025c18
c001a178:	e8 b1 5e ff ff       	call   c001002e <KePanic(char const*)>
c001a17d:	83 c4 10             	add    esp,0x10
c001a180:	90                   	nop
c001a181:	83 c4 1c             	add    esp,0x1c
c001a184:	c3                   	ret    

c001a185 <HalSystemIdle()>:
c001a185:	56                   	push   esi
c001a186:	53                   	push   ebx
c001a187:	83 ec 14             	sub    esp,0x14
c001a18a:	a0 10 fb 02 c0       	mov    al,ds:0xc002fb10
c001a18f:	83 e0 10             	and    eax,0x10
c001a192:	0f b6 c0             	movzx  eax,al
c001a195:	85 c0                	test   eax,eax
c001a197:	74 43                	je     c001a1dc <HalSystemIdle()+0x57>
c001a199:	83 ec 0c             	sub    esp,0xc
c001a19c:	68 e1 00 00 00       	push   0xe1
c001a1a1:	e8 e7 f9 ff ff       	call   c0019b8d <x86rdmsr(unsigned int)>
c001a1a6:	83 c4 10             	add    esp,0x10
c001a1a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a1ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a1b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a1b5:	83 e0 02             	and    eax,0x2
c001a1b8:	89 c3                	mov    ebx,eax
c001a1ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a1be:	83 e0 00             	and    eax,0x0
c001a1c1:	89 c6                	mov    esi,eax
c001a1c3:	83 ec 04             	sub    esp,0x4
c001a1c6:	56                   	push   esi
c001a1c7:	53                   	push   ebx
c001a1c8:	68 e1 00 00 00       	push   0xe1
c001a1cd:	e8 f9 f9 ff ff       	call   c0019bcb <x86wrmsr(unsigned int, unsigned long long)>
c001a1d2:	83 c4 10             	add    esp,0x10
c001a1d5:	e8 ba 5f fe ff       	call   c0000194 <doTPAUSE>
c001a1da:	eb 01                	jmp    c001a1dd <HalSystemIdle()+0x58>
c001a1dc:	f4                   	hlt    
c001a1dd:	90                   	nop
c001a1de:	83 c4 14             	add    esp,0x14
c001a1e1:	5b                   	pop    ebx
c001a1e2:	5e                   	pop    esi
c001a1e3:	c3                   	ret    

c001a1e4 <i386SaveCoprocessor(void*)>:
c001a1e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1e8:	83 c0 3f             	add    eax,0x3f
c001a1eb:	83 e0 c0             	and    eax,0xffffffc0
c001a1ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a1f2:	ff 25 d0 fa 02 c0    	jmp    DWORD PTR ds:0xc002fad0

c001a1f8 <i386LoadCoprocessor(void*)>:
c001a1f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1fc:	83 c0 3f             	add    eax,0x3f
c001a1ff:	83 e0 c0             	and    eax,0xffffffc0
c001a202:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a206:	ff 25 cc fa 02 c0    	jmp    DWORD PTR ds:0xc002facc

c001a20c <x87EmulHandler(regs*, void*)>:
c001a20c:	53                   	push   ebx
c001a20d:	83 ec 08             	sub    esp,0x8
c001a210:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a215:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c001a219:	74 10                	je     c001a22b <x87EmulHandler(regs*, void*)+0x1f>
c001a21b:	83 ec 0c             	sub    esp,0xc
c001a21e:	68 25 5c 02 c0       	push   0xc0025c25
c001a223:	e8 06 5e ff ff       	call   c001002e <KePanic(char const*)>
c001a228:	83 c4 10             	add    esp,0x10
c001a22b:	0f 20 c0             	mov    eax,cr0
c001a22e:	a8 08                	test   al,0x8
c001a230:	74 59                	je     c001a28b <x87EmulHandler(regs*, void*)+0x7f>
c001a232:	0f 06                	clts   
c001a234:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001a239:	85 c0                	test   eax,eax
c001a23b:	74 0e                	je     c001a24b <x87EmulHandler(regs*, void*)+0x3f>
c001a23d:	83 ec 0c             	sub    esp,0xc
c001a240:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a243:	e8 9c ff ff ff       	call   c001a1e4 <i386SaveCoprocessor(void*)>
c001a248:	83 c4 10             	add    esp,0x10
c001a24b:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001a251:	83 7b 59 00          	cmp    DWORD PTR [ebx+0x59],0x0
c001a255:	75 12                	jne    c001a269 <x87EmulHandler(regs*, void*)+0x5d>
c001a257:	83 ec 0c             	sub    esp,0xc
c001a25a:	68 40 02 00 00       	push   0x240
c001a25f:	e8 83 5a ff ff       	call   c000fce7 <malloc>
c001a264:	89 43 59             	mov    DWORD PTR [ebx+0x59],eax
c001a267:	eb 10                	jmp    c001a279 <x87EmulHandler(regs*, void*)+0x6d>
c001a269:	83 ec 0c             	sub    esp,0xc
c001a26c:	a1 c8 fa 02 c0       	mov    eax,ds:0xc002fac8
c001a271:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a274:	e8 7f ff ff ff       	call   c001a1f8 <i386LoadCoprocessor(void*)>
c001a279:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a27e:	83 c4 10             	add    esp,0x10
c001a281:	a3 c8 fa 02 c0       	mov    ds:0xc002fac8,eax
c001a286:	83 c4 08             	add    esp,0x8
c001a289:	5b                   	pop    ebx
c001a28a:	c3                   	ret    
c001a28b:	83 ec 0c             	sub    esp,0xc
c001a28e:	68 39 5c 02 c0       	push   0xc0025c39
c001a293:	e8 cc cc fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001a298:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001a2a0:	83 c4 18             	add    esp,0x18
c001a2a3:	5b                   	pop    ebx
c001a2a4:	e9 a7 d8 ff ff       	jmp    c0017b50 <Thr::terminateFromIRQ(int)>

c001a2a9 <HalInitialiseCoprocessor()>:
c001a2a9:	83 ec 10             	sub    esp,0x10
c001a2ac:	c7 05 c8 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fac8,0x0
c001a2b6:	6a 00                	push   0x0
c001a2b8:	68 0c a2 01 c0       	push   0xc001a20c
c001a2bd:	6a 07                	push   0x7
c001a2bf:	e8 9d 06 00 00       	call   c001a961 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a2c4:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c001a2c9:	83 c4 10             	add    esp,0x10
c001a2cc:	a8 80                	test   al,0x80
c001a2ce:	74 1c                	je     c001a2ec <HalInitialiseCoprocessor()+0x43>
c001a2d0:	c7 05 d0 fa 02 c0 38 19 02 c0 	mov    DWORD PTR ds:0xc002fad0,0xc0021938
c001a2da:	c7 05 cc fa 02 c0 40 19 02 c0 	mov    DWORD PTR ds:0xc002facc,0xc0021940
c001a2e4:	83 c4 0c             	add    esp,0xc
c001a2e7:	e9 5c 76 00 00       	jmp    c0021948 <sseInit>
c001a2ec:	a8 10                	test   al,0x10
c001a2ee:	74 1c                	je     c001a30c <HalInitialiseCoprocessor()+0x63>
c001a2f0:	c7 05 d0 fa 02 c0 87 19 02 c0 	mov    DWORD PTR ds:0xc002fad0,0xc0021987
c001a2fa:	c7 05 cc fa 02 c0 8e 19 02 c0 	mov    DWORD PTR ds:0xc002facc,0xc002198e
c001a304:	83 c4 0c             	add    esp,0xc
c001a307:	e9 89 76 00 00       	jmp    c0021995 <x87Init>
c001a30c:	c7 05 d0 fa 02 c0 7c 8a 01 c0 	mov    DWORD PTR ds:0xc002fad0,0xc0018a7c
c001a316:	c7 05 cc fa 02 c0 7c 8a 01 c0 	mov    DWORD PTR ds:0xc002facc,0xc0018a7c
c001a320:	0f 20 c0             	mov    eax,cr0
c001a323:	83 c8 04             	or     eax,0x4
c001a326:	0f 22 c0             	mov    cr0,eax
c001a329:	83 c4 0c             	add    esp,0xc
c001a32c:	c3                   	ret    

c001a32d <HalPanic(char const*)>:
c001a32d:	53                   	push   ebx
c001a32e:	83 ec 10             	sub    esp,0x10
c001a331:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a335:	fa                   	cli    
c001a336:	53                   	push   ebx
c001a337:	68 4f 5c 02 c0       	push   0xc0025c4f
c001a33c:	e8 23 cc fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001a341:	a1 c4 fa 02 c0       	mov    eax,ds:0xc002fac4
c001a346:	83 c4 10             	add    esp,0x10
c001a349:	85 c0                	test   eax,eax
c001a34b:	74 09                	je     c001a356 <HalPanic(char const*)+0x29>
c001a34d:	83 ec 0c             	sub    esp,0xc
c001a350:	53                   	push   ebx
c001a351:	ff d0                	call   eax
c001a353:	83 c4 10             	add    esp,0x10
c001a356:	a1 b4 f1 02 c0       	mov    eax,ds:0xc002f1b4
c001a35b:	85 c0                	test   eax,eax
c001a35d:	0f 84 dc 00 00 00    	je     c001a43f <HalPanic(char const*)+0x112>
c001a363:	52                   	push   edx
c001a364:	6a 01                	push   0x1
c001a366:	6a 0f                	push   0xf
c001a368:	50                   	push   eax
c001a369:	e8 1a 80 ff ff       	call   c0012388 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a36e:	59                   	pop    ecx
c001a36f:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a375:	e8 1a 82 ff ff       	call   c0012594 <VgaText::clearScreen()>
c001a37a:	58                   	pop    eax
c001a37b:	5a                   	pop    edx
c001a37c:	68 05 48 02 c0       	push   0xc0024805
c001a381:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a387:	e8 34 80 ff ff       	call   c00123c0 <VgaText::setTitle(char*)>
c001a38c:	83 c4 0c             	add    esp,0xc
c001a38f:	6a 01                	push   0x1
c001a391:	6a 0f                	push   0xf
c001a393:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a399:	e8 ea 7f ff ff       	call   c0012388 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a39e:	59                   	pop    ecx
c001a39f:	58                   	pop    eax
c001a3a0:	68 68 5c 02 c0       	push   0xc0025c68
c001a3a5:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a3ab:	e8 e6 84 ff ff       	call   c0012896 <VgaText::puts(char const*)>
c001a3b0:	83 c4 0c             	add    esp,0xc
c001a3b3:	6a 0f                	push   0xf
c001a3b5:	6a 01                	push   0x1
c001a3b7:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a3bd:	e8 c6 7f ff ff       	call   c0012388 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a3c2:	58                   	pop    eax
c001a3c3:	5a                   	pop    edx
c001a3c4:	68 71 5c 02 c0       	push   0xc0025c71
c001a3c9:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a3cf:	e8 c2 84 ff ff       	call   c0012896 <VgaText::puts(char const*)>
c001a3d4:	83 c4 0c             	add    esp,0xc
c001a3d7:	6a 01                	push   0x1
c001a3d9:	6a 0f                	push   0xf
c001a3db:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a3e1:	e8 a2 7f ff ff       	call   c0012388 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a3e6:	59                   	pop    ecx
c001a3e7:	58                   	pop    eax
c001a3e8:	68 b5 5c 02 c0       	push   0xc0025cb5
c001a3ed:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a3f3:	e8 9e 84 ff ff       	call   c0012896 <VgaText::puts(char const*)>
c001a3f8:	58                   	pop    eax
c001a3f9:	5a                   	pop    edx
c001a3fa:	68 7e 5c 02 c0       	push   0xc0025c7e
c001a3ff:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a405:	e8 8c 84 ff ff       	call   c0012896 <VgaText::puts(char const*)>
c001a40a:	59                   	pop    ecx
c001a40b:	58                   	pop    eax
c001a40c:	68 b8 5c 02 c0       	push   0xc0025cb8
c001a411:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a417:	e8 7a 84 ff ff       	call   c0012896 <VgaText::puts(char const*)>
c001a41c:	58                   	pop    eax
c001a41d:	5a                   	pop    edx
c001a41e:	53                   	push   ebx
c001a41f:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a425:	e8 6c 84 ff ff       	call   c0012896 <VgaText::puts(char const*)>
c001a42a:	59                   	pop    ecx
c001a42b:	5b                   	pop    ebx
c001a42c:	68 b5 5c 02 c0       	push   0xc0025cb5
c001a431:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a437:	e8 5a 84 ff ff       	call   c0012896 <VgaText::puts(char const*)>
c001a43c:	83 c4 10             	add    esp,0x10
c001a43f:	eb fe                	jmp    c001a43f <HalPanic(char const*)+0x112>

c001a441 <HalQueryPerformanceCounter()>:
c001a441:	31 c0                	xor    eax,eax
c001a443:	31 d2                	xor    edx,edx
c001a445:	f6 05 0e fb 02 c0 08 	test   BYTE PTR ds:0xc002fb0e,0x8
c001a44c:	75 02                	jne    c001a450 <HalQueryPerformanceCounter()+0xf>
c001a44e:	0f 31                	rdtsc  
c001a450:	c3                   	ret    

c001a451 <HalInitialise()>:
c001a451:	53                   	push   ebx
c001a452:	83 ec 08             	sub    esp,0x8
c001a455:	c6 05 c0 fa 02 c0 00 	mov    BYTE PTR ds:0xc002fac0,0x0
c001a45c:	a0 0c fb 02 c0       	mov    al,ds:0xc002fb0c
c001a461:	83 e0 fe             	and    eax,0xfffffffe
c001a464:	a2 0c fb 02 c0       	mov    ds:0xc002fb0c,al
c001a469:	e8 d2 07 00 00       	call   c001ac40 <picOpen()>
c001a46e:	80 3d c0 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002fac0,0x0
c001a475:	74 0a                	je     c001a481 <HalInitialise()+0x30>
c001a477:	e8 14 07 00 00       	call   c001ab90 <picDisable()>
c001a47c:	e8 c5 6a 00 00       	call   c0020f46 <apicOpen()>
c001a481:	bb 0f 00 00 00       	mov    ebx,0xf
c001a486:	50                   	push   eax
c001a487:	6a 00                	push   0x0
c001a489:	68 a8 ec 00 c0       	push   0xc000eca8
c001a48e:	6a 00                	push   0x0
c001a490:	e8 cc 04 00 00       	call   c001a961 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a495:	83 c4 0c             	add    esp,0xc
c001a498:	6a 00                	push   0x0
c001a49a:	68 a8 ec 00 c0       	push   0xc000eca8
c001a49f:	6a 01                	push   0x1
c001a4a1:	e8 bb 04 00 00       	call   c001a961 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a4a6:	83 c4 0c             	add    esp,0xc
c001a4a9:	6a 00                	push   0x0
c001a4ab:	68 98 ec 00 c0       	push   0xc000ec98
c001a4b0:	6a 02                	push   0x2
c001a4b2:	e8 aa 04 00 00       	call   c001a961 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a4b7:	83 c4 0c             	add    esp,0xc
c001a4ba:	6a 00                	push   0x0
c001a4bc:	68 a8 ec 00 c0       	push   0xc000eca8
c001a4c1:	6a 03                	push   0x3
c001a4c3:	e8 99 04 00 00       	call   c001a961 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a4c8:	83 c4 0c             	add    esp,0xc
c001a4cb:	6a 00                	push   0x0
c001a4cd:	68 a8 ec 00 c0       	push   0xc000eca8
c001a4d2:	6a 04                	push   0x4
c001a4d4:	e8 88 04 00 00       	call   c001a961 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a4d9:	83 c4 0c             	add    esp,0xc
c001a4dc:	6a 00                	push   0x0
c001a4de:	68 a8 ec 00 c0       	push   0xc000eca8
c001a4e3:	6a 05                	push   0x5
c001a4e5:	e8 77 04 00 00       	call   c001a961 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a4ea:	83 c4 0c             	add    esp,0xc
c001a4ed:	6a 00                	push   0x0
c001a4ef:	68 dc ec 00 c0       	push   0xc000ecdc
c001a4f4:	6a 06                	push   0x6
c001a4f6:	e8 66 04 00 00       	call   c001a961 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a4fb:	83 c4 0c             	add    esp,0xc
c001a4fe:	6a 00                	push   0x0
c001a500:	68 30 ed 00 c0       	push   0xc000ed30
c001a505:	6a 08                	push   0x8
c001a507:	e8 55 04 00 00       	call   c001a961 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a50c:	83 c4 0c             	add    esp,0xc
c001a50f:	6a 00                	push   0x0
c001a511:	68 a8 ec 00 c0       	push   0xc000eca8
c001a516:	6a 09                	push   0x9
c001a518:	e8 44 04 00 00       	call   c001a961 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a51d:	83 c4 0c             	add    esp,0xc
c001a520:	6a 00                	push   0x0
c001a522:	68 a8 ec 00 c0       	push   0xc000eca8
c001a527:	6a 0a                	push   0xa
c001a529:	e8 33 04 00 00       	call   c001a961 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a52e:	83 c4 0c             	add    esp,0xc
c001a531:	6a 00                	push   0x0
c001a533:	68 a8 ec 00 c0       	push   0xc000eca8
c001a538:	6a 0b                	push   0xb
c001a53a:	e8 22 04 00 00       	call   c001a961 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a53f:	83 c4 0c             	add    esp,0xc
c001a542:	6a 00                	push   0x0
c001a544:	68 d0 eb 00 c0       	push   0xc000ebd0
c001a549:	6a 0d                	push   0xd
c001a54b:	e8 11 04 00 00       	call   c001a961 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a550:	83 c4 0c             	add    esp,0xc
c001a553:	6a 00                	push   0x0
c001a555:	68 34 ec 00 c0       	push   0xc000ec34
c001a55a:	6a 0e                	push   0xe
c001a55c:	e8 00 04 00 00       	call   c001a961 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a561:	83 c4 10             	add    esp,0x10
c001a564:	50                   	push   eax
c001a565:	6a 00                	push   0x0
c001a567:	68 a8 ec 00 c0       	push   0xc000eca8
c001a56c:	53                   	push   ebx
c001a56d:	43                   	inc    ebx
c001a56e:	e8 ee 03 00 00       	call   c001a961 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a573:	83 c4 10             	add    esp,0x10
c001a576:	83 fb 1e             	cmp    ebx,0x1e
c001a579:	75 e9                	jne    c001a564 <HalInitialise()+0x113>
c001a57b:	50                   	push   eax
c001a57c:	6a 00                	push   0x0
c001a57e:	68 0f 22 01 c0       	push   0xc001220f
c001a583:	6a 60                	push   0x60
c001a585:	e8 d7 03 00 00       	call   c001a961 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a58a:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c001a58f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001a599:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001a5a0:	e8 42 57 ff ff       	call   c000fce7 <malloc>
c001a5a5:	89 04 24             	mov    DWORD PTR [esp],eax
c001a5a8:	89 c3                	mov    ebx,eax
c001a5aa:	e8 ff 0d 00 00       	call   c001b3ae <RTC::RTC()>
c001a5af:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001a5b9:	5a                   	pop    edx
c001a5ba:	59                   	pop    ecx
c001a5bb:	53                   	push   ebx
c001a5bc:	ff 35 d0 d0 02 c0    	push   DWORD PTR ds:0xc002d0d0
c001a5c2:	e8 69 f4 fe ff       	call   c0009a30 <Device::addChild(Device*)>
c001a5c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a5c9:	6a 00                	push   0x0
c001a5cb:	6a 00                	push   0x0
c001a5cd:	6a 00                	push   0x0
c001a5cf:	53                   	push   ebx
c001a5d0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a5d3:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c001a5d8:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001a5de:	83 c4 28             	add    esp,0x28
c001a5e1:	5b                   	pop    ebx
c001a5e2:	c3                   	ret    

c001a5e3 <HalMakeBeep(int)>:
c001a5e3:	53                   	push   ebx
c001a5e4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001a5e8:	85 db                	test   ebx,ebx
c001a5ea:	75 07                	jne    c001a5f3 <HalMakeBeep(int)+0x10>
c001a5ec:	e4 61                	in     al,0x61
c001a5ee:	83 e0 fc             	and    eax,0xfffffffc
c001a5f1:	eb 26                	jmp    c001a619 <HalMakeBeep(int)+0x36>
c001a5f3:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001a5f8:	99                   	cdq    
c001a5f9:	f7 fb                	idiv   ebx
c001a5fb:	89 c1                	mov    ecx,eax
c001a5fd:	b0 b6                	mov    al,0xb6
c001a5ff:	e6 43                	out    0x43,al
c001a601:	88 c8                	mov    al,cl
c001a603:	e6 42                	out    0x42,al
c001a605:	89 c8                	mov    eax,ecx
c001a607:	c1 e8 08             	shr    eax,0x8
c001a60a:	e6 42                	out    0x42,al
c001a60c:	e4 61                	in     al,0x61
c001a60e:	89 c2                	mov    edx,eax
c001a610:	83 ca 03             	or     edx,0x3
c001a613:	38 d0                	cmp    al,dl
c001a615:	74 04                	je     c001a61b <HalMakeBeep(int)+0x38>
c001a617:	88 d0                	mov    al,dl
c001a619:	e6 61                	out    0x61,al
c001a61b:	5b                   	pop    ebx
c001a61c:	c3                   	ret    

c001a61d <HalGetRand()>:
c001a61d:	31 c0                	xor    eax,eax
c001a61f:	c3                   	ret    

c001a620 <HalEndOfInterrupt(int)>:
c001a620:	80 3d c0 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002fac0,0x0
c001a627:	74 1d                	je     c001a646 <HalEndOfInterrupt(int)+0x26>
c001a629:	83 ec 18             	sub    esp,0x18
c001a62c:	6a 1b                	push   0x1b
c001a62e:	e8 5a f5 ff ff       	call   c0019b8d <x86rdmsr(unsigned int)>
c001a633:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a638:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001a642:	83 c4 1c             	add    esp,0x1c
c001a645:	c3                   	ret    
c001a646:	e9 79 07 00 00       	jmp    c001adc4 <picEOI(int)>

c001a64b <HalRestart()>:
c001a64b:	c3                   	ret    

c001a64c <HalShutdown()>:
c001a64c:	c3                   	ret    

c001a64d <HalSleep()>:
c001a64d:	c3                   	ret    

c001a64e <CPU::CPU()>:
c001a64e:	83 ec 0c             	sub    esp,0xc
c001a651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a655:	83 ec 08             	sub    esp,0x8
c001a658:	68 56 5a 02 c0       	push   0xc0025a56
c001a65d:	50                   	push   eax
c001a65e:	e8 2f f5 fe ff       	call   c0009b92 <Device::Device(char const*)>
c001a663:	83 c4 10             	add    esp,0x10
c001a666:	ba 54 5d 02 c0       	mov    edx,0xc0025d54
c001a66b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a66f:	89 10                	mov    DWORD PTR [eax],edx
c001a671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a675:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001a67f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a683:	05 64 01 00 00       	add    eax,0x164
c001a688:	83 ec 0c             	sub    esp,0xc
c001a68b:	50                   	push   eax
c001a68c:	e8 f3 46 ff ff       	call   c000ed84 <GDT::GDT()>
c001a691:	83 c4 10             	add    esp,0x10
c001a694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a698:	05 68 09 00 00       	add    eax,0x968
c001a69d:	83 ec 0c             	sub    esp,0xc
c001a6a0:	50                   	push   eax
c001a6a1:	e8 32 49 ff ff       	call   c000efd8 <IDT::IDT()>
c001a6a6:	83 c4 10             	add    esp,0x10
c001a6a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6ad:	05 68 11 00 00       	add    eax,0x1168
c001a6b2:	83 ec 0c             	sub    esp,0xc
c001a6b5:	50                   	push   eax
c001a6b6:	e8 b5 86 ff ff       	call   c0012d70 <TSS::TSS()>
c001a6bb:	83 c4 10             	add    esp,0x10
c001a6be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6c2:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001a6cc:	90                   	nop
c001a6cd:	83 c4 0c             	add    esp,0xc
c001a6d0:	c3                   	ret    
c001a6d1:	90                   	nop

c001a6d2 <CPU::setupSMEP()>:
c001a6d2:	0f 20 e0             	mov    eax,cr4
c001a6d5:	0d 00 00 10 00       	or     eax,0x100000
c001a6da:	0f 22 e0             	mov    cr4,eax
c001a6dd:	c3                   	ret    

c001a6de <CPU::setupUMIP()>:
c001a6de:	0f 20 e0             	mov    eax,cr4
c001a6e1:	80 cc 08             	or     ah,0x8
c001a6e4:	0f 22 e0             	mov    cr4,eax
c001a6e7:	c3                   	ret    

c001a6e8 <CPU::setupTSC()>:
c001a6e8:	0f 20 e0             	mov    eax,cr4
c001a6eb:	83 c8 04             	or     eax,0x4
c001a6ee:	0f 22 e0             	mov    cr4,eax
c001a6f1:	c3                   	ret    

c001a6f2 <CPU::setupLargePages()>:
c001a6f2:	0f 20 e0             	mov    eax,cr4
c001a6f5:	83 c8 10             	or     eax,0x10
c001a6f8:	0f 22 e0             	mov    cr4,eax
c001a6fb:	c3                   	ret    

c001a6fc <CPU::setupPAT()>:
c001a6fc:	f6 05 0c fb 02 c0 08 	test   BYTE PTR ds:0xc002fb0c,0x8
c001a703:	74 28                	je     c001a72d <CPU::setupPAT()+0x31>
c001a705:	53                   	push   ebx
c001a706:	83 ec 14             	sub    esp,0x14
c001a709:	68 77 02 00 00       	push   0x277
c001a70e:	e8 7a f4 ff ff       	call   c0019b8d <x86rdmsr(unsigned int)>
c001a713:	83 c4 0c             	add    esp,0xc
c001a716:	83 e2 f8             	and    edx,0xfffffff8
c001a719:	83 ca 01             	or     edx,0x1
c001a71c:	52                   	push   edx
c001a71d:	50                   	push   eax
c001a71e:	68 77 02 00 00       	push   0x277
c001a723:	e8 a3 f4 ff ff       	call   c0019bcb <x86wrmsr(unsigned int, unsigned long long)>
c001a728:	83 c4 18             	add    esp,0x18
c001a72b:	5b                   	pop    ebx
c001a72c:	c3                   	ret    
c001a72d:	c3                   	ret    

c001a72e <CPU::setupMTRR()>:
c001a72e:	c3                   	ret    
c001a72f:	90                   	nop

c001a730 <CPU::setupGlobalPages()>:
c001a730:	0f 20 e0             	mov    eax,cr4
c001a733:	0c 80                	or     al,0x80
c001a735:	0f 22 e0             	mov    cr4,eax
c001a738:	c3                   	ret    
c001a739:	90                   	nop

c001a73a <CPU::allowUsermodeDataAccess()>:
c001a73a:	f6 05 0f fb 02 c0 40 	test   BYTE PTR ds:0xc002fb0f,0x40
c001a741:	74 03                	je     c001a746 <CPU::allowUsermodeDataAccess()+0xc>
c001a743:	0f 01 cb             	stac   
c001a746:	c3                   	ret    
c001a747:	90                   	nop

c001a748 <CPU::prohibitUsermodeDataAccess()>:
c001a748:	f6 05 0f fb 02 c0 40 	test   BYTE PTR ds:0xc002fb0f,0x40
c001a74f:	74 03                	je     c001a754 <CPU::prohibitUsermodeDataAccess()+0xc>
c001a751:	0f 01 ca             	clac   
c001a754:	c3                   	ret    
c001a755:	90                   	nop

c001a756 <CPU::setupSMAP()>:
c001a756:	0f 20 e0             	mov    eax,cr4
c001a759:	0d 00 00 20 00       	or     eax,0x200000
c001a75e:	0f 22 e0             	mov    cr4,eax
c001a761:	eb e5                	jmp    c001a748 <CPU::prohibitUsermodeDataAccess()>
c001a763:	90                   	nop

c001a764 <CPU::setupFeatures()>:
c001a764:	53                   	push   ebx
c001a765:	83 ec 08             	sub    esp,0x8
c001a768:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a76c:	f6 05 0f fb 02 c0 20 	test   BYTE PTR ds:0xc002fb0f,0x20
c001a773:	74 18                	je     c001a78d <CPU::setupFeatures()+0x29>
c001a775:	83 ec 0c             	sub    esp,0xc
c001a778:	68 c3 5c 02 c0       	push   0xc0025cc3
c001a77d:	e8 e2 c7 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001a782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a785:	e8 54 ff ff ff       	call   c001a6de <CPU::setupUMIP()>
c001a78a:	83 c4 10             	add    esp,0x10
c001a78d:	f6 05 0e fb 02 c0 08 	test   BYTE PTR ds:0xc002fb0e,0x8
c001a794:	74 18                	je     c001a7ae <CPU::setupFeatures()+0x4a>
c001a796:	83 ec 0c             	sub    esp,0xc
c001a799:	68 cd 5c 02 c0       	push   0xc0025ccd
c001a79e:	e8 c1 c7 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001a7a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a7a6:	e8 3d ff ff ff       	call   c001a6e8 <CPU::setupTSC()>
c001a7ab:	83 c4 10             	add    esp,0x10
c001a7ae:	f6 05 0e fb 02 c0 20 	test   BYTE PTR ds:0xc002fb0e,0x20
c001a7b5:	74 18                	je     c001a7cf <CPU::setupFeatures()+0x6b>
c001a7b7:	83 ec 0c             	sub    esp,0xc
c001a7ba:	68 d6 5c 02 c0       	push   0xc0025cd6
c001a7bf:	e8 a0 c7 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001a7c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a7c7:	e8 26 ff ff ff       	call   c001a6f2 <CPU::setupLargePages()>
c001a7cc:	83 c4 10             	add    esp,0x10
c001a7cf:	f6 05 0e fb 02 c0 40 	test   BYTE PTR ds:0xc002fb0e,0x40
c001a7d6:	74 18                	je     c001a7f0 <CPU::setupFeatures()+0x8c>
c001a7d8:	83 ec 0c             	sub    esp,0xc
c001a7db:	68 df 5c 02 c0       	push   0xc0025cdf
c001a7e0:	e8 7f c7 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001a7e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a7e8:	e8 43 ff ff ff       	call   c001a730 <CPU::setupGlobalPages()>
c001a7ed:	83 c4 10             	add    esp,0x10
c001a7f0:	f6 05 0e fb 02 c0 80 	test   BYTE PTR ds:0xc002fb0e,0x80
c001a7f7:	74 18                	je     c001a811 <CPU::setupFeatures()+0xad>
c001a7f9:	83 ec 0c             	sub    esp,0xc
c001a7fc:	68 f1 5c 02 c0       	push   0xc0025cf1
c001a801:	e8 5e c7 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001a806:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a809:	e8 ee fe ff ff       	call   c001a6fc <CPU::setupPAT()>
c001a80e:	83 c4 10             	add    esp,0x10
c001a811:	f6 05 10 fb 02 c0 04 	test   BYTE PTR ds:0xc002fb10,0x4
c001a818:	74 11                	je     c001a82b <CPU::setupFeatures()+0xc7>
c001a81a:	c7 44 24 10 fa 5c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025cfa
c001a822:	83 c4 08             	add    esp,0x8
c001a825:	5b                   	pop    ebx
c001a826:	e9 39 c7 fe ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c001a82b:	83 c4 08             	add    esp,0x8
c001a82e:	5b                   	pop    ebx
c001a82f:	c3                   	ret    

c001a830 <CPU::open(int, int, void*)>:
c001a830:	55                   	push   ebp
c001a831:	57                   	push   edi
c001a832:	56                   	push   esi
c001a833:	53                   	push   ebx
c001a834:	83 ec 18             	sub    esp,0x18
c001a837:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a83b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a83f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a843:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001a849:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c001a84f:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001a855:	50                   	push   eax
c001a856:	e8 8b 45 ff ff       	call   c000ede6 <GDT::setup()>
c001a85b:	83 c4 0c             	add    esp,0xc
c001a85e:	6a 00                	push   0x0
c001a860:	68 ef be ad de       	push   0xdeadbeef
c001a865:	55                   	push   ebp
c001a866:	e8 49 85 ff ff       	call   c0012db4 <TSS::setup(unsigned long, unsigned long)>
c001a86b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a86e:	e8 21 85 ff ff       	call   c0012d94 <TSS::flush()>
c001a873:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001a879:	89 04 24             	mov    DWORD PTR [esp],eax
c001a87c:	e8 cd 47 ff ff       	call   c000f04e <IDT::setup()>
c001a881:	b8 00 04 00 00       	mov    eax,0x400
c001a886:	0f 23 f8             	mov    dr7,eax
c001a889:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001a893:	e8 8a 59 ff ff       	call   c0010222 <Phys::allocatePage()>
c001a898:	83 c4 10             	add    esp,0x10
c001a89b:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001a8a1:	85 f6                	test   esi,esi
c001a8a3:	89 38                	mov    DWORD PTR [eax],edi
c001a8a5:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a8ab:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001a8ae:	74 10                	je     c001a8c0 <CPU::open(int, int, void*)+0x90>
c001a8b0:	50                   	push   eax
c001a8b1:	50                   	push   eax
c001a8b2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a8b8:	56                   	push   esi
c001a8b9:	e8 b0 8e ff ff       	call   c001376e <VAS::setCPUSpecific(unsigned long)>
c001a8be:	eb 0d                	jmp    c001a8cd <CPU::open(int, int, void*)+0x9d>
c001a8c0:	83 ec 0c             	sub    esp,0xc
c001a8c3:	68 04 5d 02 c0       	push   0xc0025d04
c001a8c8:	e8 61 57 ff ff       	call   c001002e <KePanic(char const*)>
c001a8cd:	83 c4 10             	add    esp,0x10
c001a8d0:	83 ec 0c             	sub    esp,0xc
c001a8d3:	68 12 5d 02 c0       	push   0xc0025d12
c001a8d8:	e8 be 29 ff ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001a8dd:	e8 6f fb ff ff       	call   c001a451 <HalInitialise()>
c001a8e2:	a1 24 f1 02 c0       	mov    eax,ds:0xc002f124
c001a8e7:	83 e0 10             	and    eax,0x10
c001a8ea:	83 f8 01             	cmp    eax,0x1
c001a8ed:	19 c0                	sbb    eax,eax
c001a8ef:	83 e0 46             	and    eax,0x46
c001a8f2:	83 c0 1e             	add    eax,0x1e
c001a8f5:	89 04 24             	mov    DWORD PTR [esp],eax
c001a8f8:	e8 cc 07 ff ff       	call   c000b0c9 <setupTimer(int)>
c001a8fd:	83 c4 10             	add    esp,0x10
c001a900:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001a906:	f6 05 24 f1 02 c0 20 	test   BYTE PTR ds:0xc002f124,0x20
c001a90d:	74 0c                	je     c001a91b <CPU::open(int, int, void*)+0xeb>
c001a90f:	83 ec 0c             	sub    esp,0xc
c001a912:	53                   	push   ebx
c001a913:	e8 4c fe ff ff       	call   c001a764 <CPU::setupFeatures()>
c001a918:	83 c4 10             	add    esp,0x10
c001a91b:	83 c4 0c             	add    esp,0xc
c001a91e:	31 c0                	xor    eax,eax
c001a920:	5b                   	pop    ebx
c001a921:	5e                   	pop    esi
c001a922:	5f                   	pop    edi
c001a923:	5d                   	pop    ebp
c001a924:	c3                   	ret    

c001a925 <convertLegacyIRQNumber(int)>:
c001a925:	83 ec 0c             	sub    esp,0xc
c001a928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a92c:	f6 05 0c fb 02 c0 01 	test   BYTE PTR ds:0xc002fb0c,0x1
c001a933:	74 0c                	je     c001a941 <convertLegacyIRQNumber(int)+0x1c>
c001a935:	83 f8 0f             	cmp    eax,0xf
c001a938:	7f 0b                	jg     c001a945 <convertLegacyIRQNumber(int)+0x20>
c001a93a:	0f b6 80 c8 68 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd9738]
c001a941:	83 c4 0c             	add    esp,0xc
c001a944:	c3                   	ret    
c001a945:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a949:	83 ec 0c             	sub    esp,0xc
c001a94c:	68 78 5d 02 c0       	push   0xc0025d78
c001a951:	e8 d8 56 ff ff       	call   c001002e <KePanic(char const*)>
c001a956:	83 c4 10             	add    esp,0x10
c001a959:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a95d:	83 c4 0c             	add    esp,0xc
c001a960:	c3                   	ret    

c001a961 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c001a961:	56                   	push   esi
c001a962:	31 c0                	xor    eax,eax
c001a964:	53                   	push   ebx
c001a965:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a969:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a96d:	89 ca                	mov    edx,ecx
c001a96f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a973:	c1 e2 04             	shl    edx,0x4
c001a976:	83 bc 82 e0 e0 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd1f20],0x0
c001a97e:	74 17                	je     c001a997 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001a980:	83 c0 01             	add    eax,0x1
c001a983:	83 f8 04             	cmp    eax,0x4
c001a986:	75 ee                	jne    c001a976 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001a988:	c7 44 24 0c d9 5d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0025dd9
c001a990:	5b                   	pop    ebx
c001a991:	5e                   	pop    esi
c001a992:	e9 97 56 ff ff       	jmp    c001002e <KePanic(char const*)>
c001a997:	8d 04 88             	lea    eax,[eax+ecx*4]
c001a99a:	89 1c 85 e0 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f20],ebx
c001a9a1:	89 34 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],esi
c001a9a8:	5b                   	pop    ebx
c001a9a9:	5e                   	pop    esi
c001a9aa:	c3                   	ret    

c001a9ab <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001a9ab:	57                   	push   edi
c001a9ac:	f6 05 0c fb 02 c0 01 	test   BYTE PTR ds:0xc002fb0c,0x1
c001a9b3:	56                   	push   esi
c001a9b4:	53                   	push   ebx
c001a9b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a9b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a9bd:	74 54                	je     c001aa13 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x68>
c001a9bf:	89 c7                	mov    edi,eax
c001a9c1:	84 c0                	test   al,al
c001a9c3:	74 1d                	je     c001a9e2 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001a9c5:	83 fe 0f             	cmp    esi,0xf
c001a9c8:	0f 8f d5 00 00 00    	jg     c001aaa3 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf8>
c001a9ce:	0f b6 b6 c8 68 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd9738]
c001a9d5:	0f b7 bc 36 20 ce 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd31e0]
c001a9dd:	d1 ef                	shr    edi,1
c001a9df:	83 e7 01             	and    edi,0x1
c001a9e2:	83 ec 08             	sub    esp,0x8
c001a9e5:	a1 60 04 03 c0       	mov    eax,ds:0xc0030460
c001a9ea:	31 db                	xor    ebx,ebx
c001a9ec:	50                   	push   eax
c001a9ed:	68 e6 5d 02 c0       	push   0xc0025de6
c001a9f2:	e8 6d c5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001a9f7:	83 c4 10             	add    esp,0x10
c001a9fa:	a1 60 04 03 c0       	mov    eax,ds:0xc0030460
c001a9ff:	85 c0                	test   eax,eax
c001aa01:	7f 55                	jg     c001aa58 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c001aa03:	83 ec 0c             	sub    esp,0xc
c001aa06:	68 fd 5d 02 c0       	push   0xc0025dfd
c001aa0b:	e8 1e 56 ff ff       	call   c001002e <KePanic(char const*)>
c001aa10:	83 c4 10             	add    esp,0x10
c001aa13:	8d 7e 20             	lea    edi,[esi+0x20]
c001aa16:	89 f8                	mov    eax,edi
c001aa18:	31 d2                	xor    edx,edx
c001aa1a:	c1 e0 04             	shl    eax,0x4
c001aa1d:	8b 8c 90 e0 e0 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd1f20]
c001aa24:	85 c9                	test   ecx,ecx
c001aa26:	0f 84 8e 00 00 00    	je     c001aaba <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10f>
c001aa2c:	83 c2 01             	add    edx,0x1
c001aa2f:	83 fa 04             	cmp    edx,0x4
c001aa32:	75 e9                	jne    c001aa1d <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001aa34:	83 ec 0c             	sub    esp,0xc
c001aa37:	68 b4 5d 02 c0       	push   0xc0025db4
c001aa3c:	e8 ed 55 ff ff       	call   c001002e <KePanic(char const*)>
c001aa41:	83 c4 10             	add    esp,0x10
c001aa44:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001aa49:	5b                   	pop    ebx
c001aa4a:	5e                   	pop    esi
c001aa4b:	5f                   	pop    edi
c001aa4c:	c3                   	ret    
c001aa4d:	83 c3 01             	add    ebx,0x1
c001aa50:	39 1d 60 04 03 c0    	cmp    DWORD PTR ds:0xc0030460,ebx
c001aa56:	7e ab                	jle    c001aa03 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x58>
c001aa58:	83 ec 08             	sub    esp,0x8
c001aa5b:	8b 04 9d 80 04 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffcfb80]
c001aa62:	56                   	push   esi
c001aa63:	50                   	push   eax
c001aa64:	e8 69 66 00 00       	call   c00210d2 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001aa69:	83 c4 10             	add    esp,0x10
c001aa6c:	84 c0                	test   al,al
c001aa6e:	74 dd                	je     c001aa4d <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa2>
c001aa70:	83 ec 04             	sub    esp,0x4
c001aa73:	89 f8                	mov    eax,edi
c001aa75:	8b 1c 9d 80 04 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcfb80]
c001aa7c:	0f b6 f8             	movzx  edi,al
c001aa7f:	57                   	push   edi
c001aa80:	8d 7e 20             	lea    edi,[esi+0x20]
c001aa83:	6a 00                	push   0x0
c001aa85:	89 f8                	mov    eax,edi
c001aa87:	0f b6 c0             	movzx  eax,al
c001aa8a:	50                   	push   eax
c001aa8b:	89 f0                	mov    eax,esi
c001aa8d:	6a 00                	push   0x0
c001aa8f:	0f b6 c0             	movzx  eax,al
c001aa92:	6a 00                	push   0x0
c001aa94:	50                   	push   eax
c001aa95:	53                   	push   ebx
c001aa96:	e8 a3 67 00 00       	call   c002123e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001aa9b:	83 c4 20             	add    esp,0x20
c001aa9e:	e9 73 ff ff ff       	jmp    c001aa16 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6b>
c001aaa3:	83 ec 0c             	sub    esp,0xc
c001aaa6:	31 ff                	xor    edi,edi
c001aaa8:	68 78 5d 02 c0       	push   0xc0025d78
c001aaad:	e8 7c 55 ff ff       	call   c001002e <KePanic(char const*)>
c001aab2:	83 c4 10             	add    esp,0x10
c001aab5:	e9 28 ff ff ff       	jmp    c001a9e2 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001aaba:	8d 04 ba             	lea    eax,[edx+edi*4]
c001aabd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aac1:	89 14 85 e0 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f20],edx
c001aac8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001aacc:	5b                   	pop    ebx
c001aacd:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001aad4:	89 f0                	mov    eax,esi
c001aad6:	5e                   	pop    esi
c001aad7:	5f                   	pop    edi
c001aad8:	c3                   	ret    

c001aad9 <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001aad9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aadd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001aae1:	c1 e0 04             	shl    eax,0x4
c001aae4:	8d 50 10             	lea    edx,[eax+0x10]
c001aae7:	39 88 e0 e0 02 c0    	cmp    DWORD PTR [eax-0x3ffd1f20],ecx
c001aaed:	74 08                	je     c001aaf7 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001aaef:	83 c0 04             	add    eax,0x4
c001aaf2:	39 d0                	cmp    eax,edx
c001aaf4:	75 f1                	jne    c001aae7 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001aaf6:	c3                   	ret    
c001aaf7:	c7 80 e0 e0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd1f20],0x0
c001ab01:	c7 80 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2f20],0x0
c001ab0b:	eb e2                	jmp    c001aaef <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001ab0d <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001ab0d:	53                   	push   ebx
c001ab0e:	83 ec 08             	sub    esp,0x8
c001ab11:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ab15:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ab1a:	74 09                	je     c001ab25 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001ab1c:	f6 05 0c fb 02 c0 01 	test   BYTE PTR ds:0xc002fb0c,0x1
c001ab23:	75 37                	jne    c001ab5c <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4f>
c001ab25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab29:	83 c0 20             	add    eax,0x20
c001ab2c:	c1 e0 04             	shl    eax,0x4
c001ab2f:	8d 50 10             	lea    edx,[eax+0x10]
c001ab32:	39 98 e0 e0 02 c0    	cmp    DWORD PTR [eax-0x3ffd1f20],ebx
c001ab38:	74 0c                	je     c001ab46 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x39>
c001ab3a:	83 c0 04             	add    eax,0x4
c001ab3d:	39 d0                	cmp    eax,edx
c001ab3f:	75 f1                	jne    c001ab32 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x25>
c001ab41:	83 c4 08             	add    esp,0x8
c001ab44:	5b                   	pop    ebx
c001ab45:	c3                   	ret    
c001ab46:	c7 80 e0 e0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd1f20],0x0
c001ab50:	c7 80 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2f20],0x0
c001ab5a:	eb de                	jmp    c001ab3a <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2d>
c001ab5c:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c001ab61:	7f 11                	jg     c001ab74 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x67>
c001ab63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab67:	0f b6 80 c8 68 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd9738]
c001ab6e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ab72:	eb b1                	jmp    c001ab25 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001ab74:	83 ec 0c             	sub    esp,0xc
c001ab77:	68 0a 5e 02 c0       	push   0xc0025e0a
c001ab7c:	e8 ad 54 ff ff       	call   c001002e <KePanic(char const*)>
c001ab81:	83 c4 10             	add    esp,0x10
c001ab84:	eb 9f                	jmp    c001ab25 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001ab86:	66 90                	xchg   ax,ax

c001ab88 <picIoWait()>:
c001ab88:	eb 00                	jmp    c001ab8a <picIoWait()+0x2>
c001ab8a:	eb 00                	jmp    c001ab8c <picIoWait()+0x4>
c001ab8c:	90                   	nop
c001ab8d:	c3                   	ret    
c001ab8e:	66 90                	xchg   ax,ax

c001ab90 <picDisable()>:
c001ab90:	83 ec 10             	sub    esp,0x10
c001ab93:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001ab9a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001ab9f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001aba3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001aba8:	ee                   	out    dx,al
c001aba9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001abb0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001abb5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001abb9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001abbe:	ee                   	out    dx,al
c001abbf:	90                   	nop
c001abc0:	83 c4 10             	add    esp,0x10
c001abc3:	c3                   	ret    

c001abc4 <picGetIRQReg(int)>:
c001abc4:	83 ec 10             	sub    esp,0x10
c001abc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001abcb:	0f b6 c0             	movzx  eax,al
c001abce:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001abd5:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001abd9:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001abdd:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001abe2:	ee                   	out    dx,al
c001abe3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001abe7:	0f b6 c0             	movzx  eax,al
c001abea:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001abf1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001abf5:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001abf9:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001abfe:	ee                   	out    dx,al
c001abff:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001ac06:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001ac0b:	89 c2                	mov    edx,eax
c001ac0d:	ec                   	in     al,dx
c001ac0e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ac12:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ac16:	0f b6 c0             	movzx  eax,al
c001ac19:	c1 e0 08             	shl    eax,0x8
c001ac1c:	89 c1                	mov    ecx,eax
c001ac1e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001ac25:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001ac2a:	89 c2                	mov    edx,eax
c001ac2c:	ec                   	in     al,dx
c001ac2d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001ac31:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001ac35:	0f b6 c0             	movzx  eax,al
c001ac38:	09 c8                	or     eax,ecx
c001ac3a:	83 c4 10             	add    esp,0x10
c001ac3d:	c3                   	ret    
c001ac3e:	66 90                	xchg   ax,ax

c001ac40 <picOpen()>:
c001ac40:	83 ec 50             	sub    esp,0x50
c001ac43:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001ac4a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ac4f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ac53:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac57:	ee                   	out    dx,al
c001ac58:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001ac5f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001ac64:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001ac68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ac6c:	ee                   	out    dx,al
c001ac6d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001ac75:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001ac7d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001ac84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac88:	89 c2                	mov    edx,eax
c001ac8a:	ec                   	in     al,dx
c001ac8b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001ac8f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001ac93:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001ac97:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001ac9e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aca2:	89 c2                	mov    edx,eax
c001aca4:	ec                   	in     al,dx
c001aca5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001aca9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001acad:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001acb1:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001acb8:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001acbd:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001acc1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001acc5:	ee                   	out    dx,al
c001acc6:	e8 bd fe ff ff       	call   c001ab88 <picIoWait()>
c001accb:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001acd2:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001acd7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001acdb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001acdf:	ee                   	out    dx,al
c001ace0:	e8 a3 fe ff ff       	call   c001ab88 <picIoWait()>
c001ace5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ace9:	0f b6 c0             	movzx  eax,al
c001acec:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001acf3:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001acf7:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001acfb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001acff:	ee                   	out    dx,al
c001ad00:	e8 83 fe ff ff       	call   c001ab88 <picIoWait()>
c001ad05:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ad09:	0f b6 c0             	movzx  eax,al
c001ad0c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001ad13:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001ad17:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001ad1b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ad1f:	ee                   	out    dx,al
c001ad20:	e8 63 fe ff ff       	call   c001ab88 <picIoWait()>
c001ad25:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001ad2c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001ad31:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001ad35:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ad39:	ee                   	out    dx,al
c001ad3a:	e8 49 fe ff ff       	call   c001ab88 <picIoWait()>
c001ad3f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001ad46:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001ad4b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001ad4f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ad53:	ee                   	out    dx,al
c001ad54:	e8 2f fe ff ff       	call   c001ab88 <picIoWait()>
c001ad59:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001ad60:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001ad65:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001ad69:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ad6d:	ee                   	out    dx,al
c001ad6e:	e8 15 fe ff ff       	call   c001ab88 <picIoWait()>
c001ad73:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001ad7a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001ad7f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001ad83:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ad87:	ee                   	out    dx,al
c001ad88:	e8 fb fd ff ff       	call   c001ab88 <picIoWait()>
c001ad8d:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001ad92:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001ad99:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001ad9d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001ada1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001ada5:	ee                   	out    dx,al
c001ada6:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001adab:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001adb2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001adb6:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001adba:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001adbe:	ee                   	out    dx,al
c001adbf:	90                   	nop
c001adc0:	83 c4 50             	add    esp,0x50
c001adc3:	c3                   	ret    

c001adc4 <picEOI(int)>:
c001adc4:	83 ec 10             	sub    esp,0x10
c001adc7:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001adcc:	75 1e                	jne    c001adec <picEOI(int)+0x28>
c001adce:	6a 0b                	push   0xb
c001add0:	e8 ef fd ff ff       	call   c001abc4 <picGetIRQReg(int)>
c001add5:	83 c4 04             	add    esp,0x4
c001add8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001addd:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001ade2:	25 80 00 00 00       	and    eax,0x80
c001ade7:	74 73                	je     c001ae5c <picEOI(int)+0x98>
c001ade9:	8d 76 00             	lea    esi,[esi+0x0]
c001adec:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001adf1:	75 31                	jne    c001ae24 <picEOI(int)+0x60>
c001adf3:	6a 0b                	push   0xb
c001adf5:	e8 ca fd ff ff       	call   c001abc4 <picGetIRQReg(int)>
c001adfa:	83 c4 04             	add    esp,0x4
c001adfd:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001ae02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae06:	98                   	cwde   
c001ae07:	85 c0                	test   eax,eax
c001ae09:	78 19                	js     c001ae24 <picEOI(int)+0x60>
c001ae0b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001ae12:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001ae17:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ae1b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ae20:	ee                   	out    dx,al
c001ae21:	eb 3d                	jmp    c001ae60 <picEOI(int)+0x9c>
c001ae23:	90                   	nop
c001ae24:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001ae29:	7e 19                	jle    c001ae44 <picEOI(int)+0x80>
c001ae2b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001ae32:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001ae37:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ae3b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ae40:	ee                   	out    dx,al
c001ae41:	8d 76 00             	lea    esi,[esi+0x0]
c001ae44:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001ae4b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001ae50:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ae54:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ae59:	ee                   	out    dx,al
c001ae5a:	eb 04                	jmp    c001ae60 <picEOI(int)+0x9c>
c001ae5c:	90                   	nop
c001ae5d:	8d 76 00             	lea    esi,[esi+0x0]
c001ae60:	83 c4 10             	add    esp,0x10
c001ae63:	c3                   	ret    

c001ae64 <RTC::open(int, int, void*)>:
c001ae64:	31 c0                	xor    eax,eax
c001ae66:	c3                   	ret    
c001ae67:	90                   	nop

c001ae68 <RTC::close(int, int, void*)>:
c001ae68:	31 c0                	xor    eax,eax
c001ae6a:	c3                   	ret    
c001ae6b:	90                   	nop

c001ae6c <RTC::timeInSecondsUTC()>:
c001ae6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae70:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ae76:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ae7c:	c3                   	ret    
c001ae7d:	90                   	nop

c001ae7e <RTC::timeInDatetimeUTC()>:
c001ae7e:	53                   	push   ebx
c001ae7f:	83 ec 14             	sub    esp,0x14
c001ae82:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ae86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae8a:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae8c:	50                   	push   eax
c001ae8d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001ae90:	83 c4 0c             	add    esp,0xc
c001ae93:	52                   	push   edx
c001ae94:	50                   	push   eax
c001ae95:	53                   	push   ebx
c001ae96:	e8 8b e7 fe ff       	call   c0009626 <KeSecondsToDatetime(unsigned long long)>
c001ae9b:	89 d8                	mov    eax,ebx
c001ae9d:	83 c4 14             	add    esp,0x14
c001aea0:	5b                   	pop    ebx
c001aea1:	c2 04 00             	ret    0x4

c001aea4 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001aea4:	56                   	push   esi
c001aea5:	53                   	push   ebx
c001aea6:	83 ec 14             	sub    esp,0x14
c001aea9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aead:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aeaf:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001aeb2:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aeb6:	52                   	push   edx
c001aeb7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aebb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aebf:	50                   	push   eax
c001aec0:	e8 61 e7 fe ff       	call   c0009626 <KeSecondsToDatetime(unsigned long long)>
c001aec5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aec9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aecd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001aed1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001aed5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aed9:	89 f0                	mov    eax,esi
c001aedb:	83 c4 20             	add    esp,0x20
c001aede:	5b                   	pop    ebx
c001aedf:	5e                   	pop    esi
c001aee0:	ff e0                	jmp    eax

c001aee2 <RTC::~RTC()>:
c001aee2:	83 ec 0c             	sub    esp,0xc
c001aee5:	ba 34 5e 02 c0       	mov    edx,0xc0025e34
c001aeea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeee:	89 10                	mov    DWORD PTR [eax],edx
c001aef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aef4:	83 ec 0c             	sub    esp,0xc
c001aef7:	50                   	push   eax
c001aef8:	e8 cb e1 fe ff       	call   c00090c8 <Clock::~Clock()>
c001aefd:	83 c4 10             	add    esp,0x10
c001af00:	90                   	nop
c001af01:	83 c4 0c             	add    esp,0xc
c001af04:	c3                   	ret    
c001af05:	90                   	nop

c001af06 <RTC::~RTC()>:
c001af06:	83 ec 0c             	sub    esp,0xc
c001af09:	83 ec 0c             	sub    esp,0xc
c001af0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af10:	e8 cd ff ff ff       	call   c001aee2 <RTC::~RTC()>
c001af15:	83 c4 10             	add    esp,0x10
c001af18:	83 ec 08             	sub    esp,0x8
c001af1b:	68 60 01 00 00       	push   0x160
c001af20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af24:	e8 32 24 ff ff       	call   c000d35b <operator delete(void*, unsigned long)>
c001af29:	83 c4 10             	add    esp,0x10
c001af2c:	83 c4 0c             	add    esp,0xc
c001af2f:	c3                   	ret    

c001af30 <RTC::get_update_in_progress_flag()>:
c001af30:	83 ec 18             	sub    esp,0x18
c001af33:	6a 0a                	push   0xa
c001af35:	e8 47 db ff ff       	call   c0018a81 <x86ReadCMOS(unsigned char)>
c001af3a:	83 c4 1c             	add    esp,0x1c
c001af3d:	0f b6 c0             	movzx  eax,al
c001af40:	c1 e8 07             	shr    eax,0x7
c001af43:	c3                   	ret    

c001af44 <RTC::completeRTCRefresh()>:
c001af44:	55                   	push   ebp
c001af45:	57                   	push   edi
c001af46:	56                   	push   esi
c001af47:	53                   	push   ebx
c001af48:	83 ec 3c             	sub    esp,0x3c
c001af4b:	8b 1d 50 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb50
c001af51:	83 ec 0c             	sub    esp,0xc
c001af54:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001af58:	e8 d3 ff ff ff       	call   c001af30 <RTC::get_update_in_progress_flag()>
c001af5d:	83 c4 10             	add    esp,0x10
c001af60:	84 c0                	test   al,al
c001af62:	74 0e                	je     c001af72 <RTC::completeRTCRefresh()+0x2e>
c001af64:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001af6a:	3b 05 50 cb 02 c0    	cmp    eax,DWORD PTR ds:0xc002cb50
c001af70:	73 df                	jae    c001af51 <RTC::completeRTCRefresh()+0xd>
c001af72:	83 ec 0c             	sub    esp,0xc
c001af75:	6a 00                	push   0x0
c001af77:	e8 05 db ff ff       	call   c0018a81 <x86ReadCMOS(unsigned char)>
c001af7c:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001af83:	89 c5                	mov    ebp,eax
c001af85:	e8 f7 da ff ff       	call   c0018a81 <x86ReadCMOS(unsigned char)>
c001af8a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001af91:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001af95:	e8 e7 da ff ff       	call   c0018a81 <x86ReadCMOS(unsigned char)>
c001af9a:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001afa1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001afa5:	e8 d7 da ff ff       	call   c0018a81 <x86ReadCMOS(unsigned char)>
c001afaa:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001afb1:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001afb5:	e8 c7 da ff ff       	call   c0018a81 <x86ReadCMOS(unsigned char)>
c001afba:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001afc1:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001afc5:	e8 b7 da ff ff       	call   c0018a81 <x86ReadCMOS(unsigned char)>
c001afca:	0f b6 c0             	movzx  eax,al
c001afcd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001afd1:	83 c4 10             	add    esp,0x10
c001afd4:	8b 1d 50 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb50
c001afda:	83 ec 0c             	sub    esp,0xc
c001afdd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001afe1:	e8 4a ff ff ff       	call   c001af30 <RTC::get_update_in_progress_flag()>
c001afe6:	83 c4 10             	add    esp,0x10
c001afe9:	84 c0                	test   al,al
c001afeb:	74 0e                	je     c001affb <RTC::completeRTCRefresh()+0xb7>
c001afed:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001aff3:	3b 05 50 cb 02 c0    	cmp    eax,DWORD PTR ds:0xc002cb50
c001aff9:	73 df                	jae    c001afda <RTC::completeRTCRefresh()+0x96>
c001affb:	83 ec 0c             	sub    esp,0xc
c001affe:	6a 00                	push   0x0
c001b000:	e8 7c da ff ff       	call   c0018a81 <x86ReadCMOS(unsigned char)>
c001b005:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001b00c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b010:	e8 6c da ff ff       	call   c0018a81 <x86ReadCMOS(unsigned char)>
c001b015:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001b01c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b020:	e8 5c da ff ff       	call   c0018a81 <x86ReadCMOS(unsigned char)>
c001b025:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001b02c:	88 c3                	mov    bl,al
c001b02e:	e8 4e da ff ff       	call   c0018a81 <x86ReadCMOS(unsigned char)>
c001b033:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001b03a:	89 c6                	mov    esi,eax
c001b03c:	e8 40 da ff ff       	call   c0018a81 <x86ReadCMOS(unsigned char)>
c001b041:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001b048:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b04c:	e8 30 da ff ff       	call   c0018a81 <x86ReadCMOS(unsigned char)>
c001b051:	89 e9                	mov    ecx,ebp
c001b053:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b057:	0f b6 f8             	movzx  edi,al
c001b05a:	83 c4 10             	add    esp,0x10
c001b05d:	0f b6 eb             	movzx  ebp,bl
c001b060:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001b064:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b069:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b06e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b072:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b076:	0f 94 c0             	sete   al
c001b079:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001b07d:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c001b081:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001b086:	0f 94 c2             	sete   dl
c001b089:	21 d0                	and    eax,edx
c001b08b:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001b08f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001b093:	0f 94 c2             	sete   dl
c001b096:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b09a:	21 c2                	and    edx,eax
c001b09c:	89 f0                	mov    eax,esi
c001b09e:	0f b6 c0             	movzx  eax,al
c001b0a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b0a5:	89 f0                	mov    eax,esi
c001b0a7:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001b0ab:	0f 94 c0             	sete   al
c001b0ae:	21 d0                	and    eax,edx
c001b0b0:	31 d2                	xor    edx,edx
c001b0b2:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001b0b6:	0f 94 c2             	sete   dl
c001b0b9:	85 c2                	test   edx,eax
c001b0bb:	75 27                	jne    c001b0e4 <RTC::completeRTCRefresh()+0x1a0>
c001b0bd:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b0c1:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001b0c5:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001b0c9:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001b0cd:	89 f0                	mov    eax,esi
c001b0cf:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c001b0d3:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001b0d7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b0db:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b0df:	e9 f0 fe ff ff       	jmp    c001afd4 <RTC::completeRTCRefresh()+0x90>
c001b0e4:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c001b0e8:	75 d3                	jne    c001b0bd <RTC::completeRTCRefresh()+0x179>
c001b0ea:	83 ec 0c             	sub    esp,0xc
c001b0ed:	6a 0b                	push   0xb
c001b0ef:	e8 8d d9 ff ff       	call   c0018a81 <x86ReadCMOS(unsigned char)>
c001b0f4:	83 c4 10             	add    esp,0x10
c001b0f7:	a8 04                	test   al,0x4
c001b0f9:	75 7a                	jne    c001b175 <RTC::completeRTCRefresh()+0x231>
c001b0fb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b0ff:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b103:	83 e1 0f             	and    ecx,0xf
c001b106:	c1 ea 04             	shr    edx,0x4
c001b109:	83 e6 0f             	and    esi,0xf
c001b10c:	6b d2 0a             	imul   edx,edx,0xa
c001b10f:	c1 ef 04             	shr    edi,0x4
c001b112:	01 d1                	add    ecx,edx
c001b114:	6b ff 0a             	imul   edi,edi,0xa
c001b117:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001b11b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b11f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b123:	c1 ea 04             	shr    edx,0x4
c001b126:	83 e1 0f             	and    ecx,0xf
c001b129:	6b d2 0a             	imul   edx,edx,0xa
c001b12c:	01 d1                	add    ecx,edx
c001b12e:	89 ea                	mov    edx,ebp
c001b130:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001b134:	c1 ea 04             	shr    edx,0x4
c001b137:	89 d9                	mov    ecx,ebx
c001b139:	83 e2 07             	and    edx,0x7
c001b13c:	83 e1 0f             	and    ecx,0xf
c001b13f:	6b d2 0a             	imul   edx,edx,0xa
c001b142:	83 e3 80             	and    ebx,0xffffff80
c001b145:	01 d1                	add    ecx,edx
c001b147:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b14b:	09 cb                	or     ebx,ecx
c001b14d:	c1 ea 04             	shr    edx,0x4
c001b150:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b154:	6b d2 0a             	imul   edx,edx,0xa
c001b157:	83 e1 0f             	and    ecx,0xf
c001b15a:	01 d6                	add    esi,edx
c001b15c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b160:	c1 ea 04             	shr    edx,0x4
c001b163:	6b d2 0a             	imul   edx,edx,0xa
c001b166:	01 d1                	add    ecx,edx
c001b168:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b16c:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001b170:	83 e2 0f             	and    edx,0xf
c001b173:	01 d7                	add    edi,edx
c001b175:	a8 02                	test   al,0x2
c001b177:	75 15                	jne    c001b18e <RTC::completeRTCRefresh()+0x24a>
c001b179:	f6 c3 80             	test   bl,0x80
c001b17c:	74 10                	je     c001b18e <RTC::completeRTCRefresh()+0x24a>
c001b17e:	83 e3 7f             	and    ebx,0x7f
c001b181:	b9 18 00 00 00       	mov    ecx,0x18
c001b186:	8d 43 0c             	lea    eax,[ebx+0xc]
c001b189:	99                   	cdq    
c001b18a:	f7 f9                	idiv   ecx
c001b18c:	88 d3                	mov    bl,dl
c001b18e:	8d af 6c 07 00 00    	lea    ebp,[edi+0x76c]
c001b194:	81 fd b1 07 00 00    	cmp    ebp,0x7b1
c001b19a:	77 06                	ja     c001b1a2 <RTC::completeRTCRefresh()+0x25e>
c001b19c:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001b1a2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b1a7:	31 c9                	xor    ecx,ecx
c001b1a9:	c1 e0 10             	shl    eax,0x10
c001b1ac:	89 cf                	mov    edi,ecx
c001b1ae:	c1 e5 10             	shl    ebp,0x10
c001b1b1:	31 d2                	xor    edx,edx
c001b1b3:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001b1b9:	09 c7                	or     edi,eax
c001b1bb:	89 f0                	mov    eax,esi
c001b1bd:	89 f9                	mov    ecx,edi
c001b1bf:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b1c3:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001b1c7:	88 c2                	mov    dl,al
c001b1c9:	88 d9                	mov    cl,bl
c001b1cb:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c001b1cf:	0f b7 c2             	movzx  eax,dx
c001b1d2:	09 e8                	or     eax,ebp
c001b1d4:	89 c2                	mov    edx,eax
c001b1d6:	50                   	push   eax
c001b1d7:	50                   	push   eax
c001b1d8:	51                   	push   ecx
c001b1d9:	52                   	push   edx
c001b1da:	e8 39 e0 fe ff       	call   c0009218 <KeDatetimeToSeconds(datetime_t)>
c001b1df:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001b1e3:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001b1e9:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001b1ef:	83 c4 4c             	add    esp,0x4c
c001b1f2:	5b                   	pop    ebx
c001b1f3:	5e                   	pop    esi
c001b1f4:	5f                   	pop    edi
c001b1f5:	5d                   	pop    ebp
c001b1f6:	c3                   	ret    
c001b1f7:	90                   	nop

c001b1f8 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001b1f8:	55                   	push   ebp
c001b1f9:	57                   	push   edi
c001b1fa:	56                   	push   esi
c001b1fb:	53                   	push   ebx
c001b1fc:	83 ec 34             	sub    esp,0x34
c001b1ff:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001b203:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001b207:	6a 00                	push   0x0
c001b209:	89 fb                	mov    ebx,edi
c001b20b:	6a 00                	push   0x0
c001b20d:	e8 c3 d8 ff ff       	call   c0018ad5 <x86WriteCMOS(unsigned char, unsigned char)>
c001b212:	5d                   	pop    ebp
c001b213:	58                   	pop    eax
c001b214:	6a 00                	push   0x0
c001b216:	6a 02                	push   0x2
c001b218:	e8 b8 d8 ff ff       	call   c0018ad5 <x86WriteCMOS(unsigned char, unsigned char)>
c001b21d:	31 d2                	xor    edx,edx
c001b21f:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001b226:	89 f9                	mov    ecx,edi
c001b228:	89 f8                	mov    eax,edi
c001b22a:	c1 e9 10             	shr    ecx,0x10
c001b22d:	0f b6 c4             	movzx  eax,ah
c001b230:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001b234:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b238:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b23c:	b9 64 00 00 00       	mov    ecx,0x64
c001b241:	89 f0                	mov    eax,esi
c001b243:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b247:	89 f0                	mov    eax,esi
c001b249:	0f b6 c4             	movzx  eax,ah
c001b24c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b250:	89 f0                	mov    eax,esi
c001b252:	c1 e8 10             	shr    eax,0x10
c001b255:	f7 f1                	div    ecx
c001b257:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b25b:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b25f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b263:	e8 19 d8 ff ff       	call   c0018a81 <x86ReadCMOS(unsigned char)>
c001b268:	83 c4 10             	add    esp,0x10
c001b26b:	89 c5                	mov    ebp,eax
c001b26d:	a8 04                	test   al,0x4
c001b26f:	75 6e                	jne    c001b2df <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001b271:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b275:	31 d2                	xor    edx,edx
c001b277:	0f b6 c1             	movzx  eax,cl
c001b27a:	b9 0a 00 00 00       	mov    ecx,0xa
c001b27f:	f7 f1                	div    ecx
c001b281:	c1 e0 04             	shl    eax,0x4
c001b284:	09 d0                	or     eax,edx
c001b286:	31 d2                	xor    edx,edx
c001b288:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b28c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001b291:	f7 f1                	div    ecx
c001b293:	c1 e0 04             	shl    eax,0x4
c001b296:	09 d0                	or     eax,edx
c001b298:	31 d2                	xor    edx,edx
c001b29a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b29e:	0f b6 c3             	movzx  eax,bl
c001b2a1:	f7 f1                	div    ecx
c001b2a3:	c1 e0 04             	shl    eax,0x4
c001b2a6:	09 d0                	or     eax,edx
c001b2a8:	31 d2                	xor    edx,edx
c001b2aa:	89 c3                	mov    ebx,eax
c001b2ac:	89 f0                	mov    eax,esi
c001b2ae:	0f b6 c0             	movzx  eax,al
c001b2b1:	f7 f1                	div    ecx
c001b2b3:	c1 e0 04             	shl    eax,0x4
c001b2b6:	09 d0                	or     eax,edx
c001b2b8:	31 d2                	xor    edx,edx
c001b2ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b2be:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b2c3:	f7 f1                	div    ecx
c001b2c5:	c1 e0 04             	shl    eax,0x4
c001b2c8:	09 d0                	or     eax,edx
c001b2ca:	31 d2                	xor    edx,edx
c001b2cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b2d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b2d4:	f7 f1                	div    ecx
c001b2d6:	c1 e0 04             	shl    eax,0x4
c001b2d9:	09 d0                	or     eax,edx
c001b2db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b2df:	83 e5 02             	and    ebp,0x2
c001b2e2:	75 1e                	jne    c001b302 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b2e4:	0f b6 c3             	movzx  eax,bl
c001b2e7:	83 f8 0b             	cmp    eax,0xb
c001b2ea:	76 10                	jbe    c001b2fc <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001b2ec:	8d 53 f4             	lea    edx,[ebx-0xc]
c001b2ef:	88 d3                	mov    bl,dl
c001b2f1:	84 d2                	test   dl,dl
c001b2f3:	75 02                	jne    c001b2f7 <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001b2f5:	b3 0c                	mov    bl,0xc
c001b2f7:	83 cb 80             	or     ebx,0xffffff80
c001b2fa:	eb 06                	jmp    c001b302 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b2fc:	85 c0                	test   eax,eax
c001b2fe:	75 02                	jne    c001b302 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b300:	b3 0c                	mov    bl,0xc
c001b302:	0f b6 db             	movzx  ebx,bl
c001b305:	50                   	push   eax
c001b306:	50                   	push   eax
c001b307:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001b30c:	52                   	push   edx
c001b30d:	6a 00                	push   0x0
c001b30f:	e8 c1 d7 ff ff       	call   c0018ad5 <x86WriteCMOS(unsigned char, unsigned char)>
c001b314:	5a                   	pop    edx
c001b315:	59                   	pop    ecx
c001b316:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b31b:	50                   	push   eax
c001b31c:	6a 02                	push   0x2
c001b31e:	e8 b2 d7 ff ff       	call   c0018ad5 <x86WriteCMOS(unsigned char, unsigned char)>
c001b323:	5e                   	pop    esi
c001b324:	5f                   	pop    edi
c001b325:	53                   	push   ebx
c001b326:	6a 04                	push   0x4
c001b328:	e8 a8 d7 ff ff       	call   c0018ad5 <x86WriteCMOS(unsigned char, unsigned char)>
c001b32d:	5d                   	pop    ebp
c001b32e:	58                   	pop    eax
c001b32f:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001b334:	52                   	push   edx
c001b335:	6a 07                	push   0x7
c001b337:	e8 99 d7 ff ff       	call   c0018ad5 <x86WriteCMOS(unsigned char, unsigned char)>
c001b33c:	58                   	pop    eax
c001b33d:	5a                   	pop    edx
c001b33e:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b343:	50                   	push   eax
c001b344:	6a 08                	push   0x8
c001b346:	e8 8a d7 ff ff       	call   c0018ad5 <x86WriteCMOS(unsigned char, unsigned char)>
c001b34b:	59                   	pop    ecx
c001b34c:	5b                   	pop    ebx
c001b34d:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b352:	55                   	push   ebp
c001b353:	6a 09                	push   0x9
c001b355:	e8 7b d7 ff ff       	call   c0018ad5 <x86WriteCMOS(unsigned char, unsigned char)>
c001b35a:	5e                   	pop    esi
c001b35b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b35f:	e8 e0 fb ff ff       	call   c001af44 <RTC::completeRTCRefresh()>
c001b364:	83 c4 3c             	add    esp,0x3c
c001b367:	b0 01                	mov    al,0x1
c001b369:	5b                   	pop    ebx
c001b36a:	5e                   	pop    esi
c001b36b:	5f                   	pop    edi
c001b36c:	5d                   	pop    ebp
c001b36d:	c3                   	ret    

c001b36e <rtcIRQHandler(regs*, void*)>:
c001b36e:	53                   	push   ebx
c001b36f:	83 ec 14             	sub    esp,0x14
c001b372:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b376:	6a 0c                	push   0xc
c001b378:	e8 04 d7 ff ff       	call   c0018a81 <x86ReadCMOS(unsigned char)>
c001b37d:	83 c4 10             	add    esp,0x10
c001b380:	a8 80                	test   al,0x80
c001b382:	74 24                	je     c001b3a8 <rtcIRQHandler(regs*, void*)+0x3a>
c001b384:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001b38b:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001b392:	66 ff 05 14 fb 02 c0 	inc    WORD PTR ds:0xc002fb14
c001b399:	75 0d                	jne    c001b3a8 <rtcIRQHandler(regs*, void*)+0x3a>
c001b39b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001b39f:	83 c4 08             	add    esp,0x8
c001b3a2:	5b                   	pop    ebx
c001b3a3:	e9 9c fb ff ff       	jmp    c001af44 <RTC::completeRTCRefresh()>
c001b3a8:	83 c4 08             	add    esp,0x8
c001b3ab:	5b                   	pop    ebx
c001b3ac:	c3                   	ret    
c001b3ad:	90                   	nop

c001b3ae <RTC::RTC()>:
c001b3ae:	83 ec 1c             	sub    esp,0x1c
c001b3b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3b5:	83 ec 08             	sub    esp,0x8
c001b3b8:	68 17 5e 02 c0       	push   0xc0025e17
c001b3bd:	50                   	push   eax
c001b3be:	e8 cf dc fe ff       	call   c0009092 <Clock::Clock(char const*)>
c001b3c3:	83 c4 10             	add    esp,0x10
c001b3c6:	ba 34 5e 02 c0       	mov    edx,0xc0025e34
c001b3cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3cf:	89 10                	mov    DWORD PTR [eax],edx
c001b3d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3d5:	83 ec 0c             	sub    esp,0xc
c001b3d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3dc:	6a 01                	push   0x1
c001b3de:	68 6e b3 01 c0       	push   0xc001b36e
c001b3e3:	6a 08                	push   0x8
c001b3e5:	50                   	push   eax
c001b3e6:	e8 f1 e5 fe ff       	call   c00099dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b3eb:	83 c4 20             	add    esp,0x20
c001b3ee:	89 c2                	mov    edx,eax
c001b3f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3f4:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b3fa:	fa                   	cli    
c001b3fb:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c001b400:	83 c0 01             	add    eax,0x1
c001b403:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c001b408:	83 ec 0c             	sub    esp,0xc
c001b40b:	6a 0b                	push   0xb
c001b40d:	e8 6f d6 ff ff       	call   c0018a81 <x86ReadCMOS(unsigned char)>
c001b412:	83 c4 10             	add    esp,0x10
c001b415:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b419:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b41d:	83 c8 10             	or     eax,0x10
c001b420:	0f b6 c0             	movzx  eax,al
c001b423:	83 ec 08             	sub    esp,0x8
c001b426:	50                   	push   eax
c001b427:	6a 0b                	push   0xb
c001b429:	e8 a7 d6 ff ff       	call   c0018ad5 <x86WriteCMOS(unsigned char, unsigned char)>
c001b42e:	83 c4 10             	add    esp,0x10
c001b431:	83 ec 0c             	sub    esp,0xc
c001b434:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b438:	e8 07 fb ff ff       	call   c001af44 <RTC::completeRTCRefresh()>
c001b43d:	83 c4 10             	add    esp,0x10
c001b440:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c001b448:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c001b44d:	85 c0                	test   eax,eax
c001b44f:	75 01                	jne    c001b452 <RTC::RTC()+0xa4>
c001b451:	fb                   	sti    
c001b452:	90                   	nop
c001b453:	83 c4 1c             	add    esp,0x1c
c001b456:	c3                   	ret    
c001b457:	90                   	nop

c001b458 <HalConsoleScroll(int, int)>:
c001b458:	83 ec 10             	sub    esp,0x10
c001b45b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001b463:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001b46b:	90                   	nop
c001b46c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001b471:	0f 8f e1 00 00 00    	jg     c001b558 <HalConsoleScroll(int, int)+0x100>
c001b477:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b47f:	90                   	nop
c001b480:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001b488:	0f 8f be 00 00 00    	jg     c001b54c <HalConsoleScroll(int, int)+0xf4>
c001b48e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b492:	89 d0                	mov    eax,edx
c001b494:	c1 e0 02             	shl    eax,0x2
c001b497:	01 d0                	add    eax,edx
c001b499:	c1 e0 05             	shl    eax,0x5
c001b49c:	89 c2                	mov    edx,eax
c001b49e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4a2:	01 d0                	add    eax,edx
c001b4a4:	89 c2                	mov    edx,eax
c001b4a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b4aa:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001b4ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b4b1:	89 d0                	mov    eax,edx
c001b4b3:	c1 e0 02             	shl    eax,0x2
c001b4b6:	01 d0                	add    eax,edx
c001b4b8:	c1 e0 05             	shl    eax,0x5
c001b4bb:	89 c2                	mov    edx,eax
c001b4bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4c1:	01 d0                	add    eax,edx
c001b4c3:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001b4c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b4cd:	01 c2                	add    edx,eax
c001b4cf:	8a 01                	mov    al,BYTE PTR [ecx]
c001b4d1:	88 02                	mov    BYTE PTR [edx],al
c001b4d3:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001b4d8:	75 66                	jne    c001b540 <HalConsoleScroll(int, int)+0xe8>
c001b4da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4de:	83 e0 01             	and    eax,0x1
c001b4e1:	74 39                	je     c001b51c <HalConsoleScroll(int, int)+0xc4>
c001b4e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b4e7:	83 e0 0f             	and    eax,0xf
c001b4ea:	88 c2                	mov    dl,al
c001b4ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4f0:	c1 e0 04             	shl    eax,0x4
c001b4f3:	09 d0                	or     eax,edx
c001b4f5:	88 c1                	mov    cl,al
c001b4f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b4fb:	89 d0                	mov    eax,edx
c001b4fd:	c1 e0 02             	shl    eax,0x2
c001b500:	01 d0                	add    eax,edx
c001b502:	c1 e0 05             	shl    eax,0x5
c001b505:	89 c2                	mov    edx,eax
c001b507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b50b:	01 d0                	add    eax,edx
c001b50d:	89 c2                	mov    edx,eax
c001b50f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b513:	01 d0                	add    eax,edx
c001b515:	88 ca                	mov    dl,cl
c001b517:	88 10                	mov    BYTE PTR [eax],dl
c001b519:	eb 25                	jmp    c001b540 <HalConsoleScroll(int, int)+0xe8>
c001b51b:	90                   	nop
c001b51c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b520:	89 d0                	mov    eax,edx
c001b522:	c1 e0 02             	shl    eax,0x2
c001b525:	01 d0                	add    eax,edx
c001b527:	c1 e0 05             	shl    eax,0x5
c001b52a:	89 c2                	mov    edx,eax
c001b52c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b530:	01 d0                	add    eax,edx
c001b532:	89 c2                	mov    edx,eax
c001b534:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b538:	01 d0                	add    eax,edx
c001b53a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001b53d:	8d 76 00             	lea    esi,[esi+0x0]
c001b540:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001b545:	e9 36 ff ff ff       	jmp    c001b480 <HalConsoleScroll(int, int)+0x28>
c001b54a:	66 90                	xchg   ax,ax
c001b54c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001b551:	e9 16 ff ff ff       	jmp    c001b46c <HalConsoleScroll(int, int)+0x14>
c001b556:	66 90                	xchg   ax,ax
c001b558:	90                   	nop
c001b559:	83 c4 10             	add    esp,0x10
c001b55c:	c3                   	ret    
c001b55d:	8d 76 00             	lea    esi,[esi+0x0]

c001b560 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001b560:	83 ec 14             	sub    esp,0x14
c001b563:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b567:	88 04 24             	mov    BYTE PTR [esp],al
c001b56a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b56d:	0f b6 c0             	movzx  eax,al
c001b570:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b574:	89 d1                	mov    ecx,edx
c001b576:	83 e1 0f             	and    ecx,0xf
c001b579:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b57d:	c1 e2 04             	shl    edx,0x4
c001b580:	0f b6 d2             	movzx  edx,dl
c001b583:	09 ca                	or     edx,ecx
c001b585:	c1 e2 08             	shl    edx,0x8
c001b588:	09 d0                	or     eax,edx
c001b58a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001b58f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001b597:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b59b:	89 d0                	mov    eax,edx
c001b59d:	c1 e0 02             	shl    eax,0x2
c001b5a0:	01 d0                	add    eax,edx
c001b5a2:	c1 e0 04             	shl    eax,0x4
c001b5a5:	89 c2                	mov    edx,eax
c001b5a7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b5ab:	01 d0                	add    eax,edx
c001b5ad:	01 c0                	add    eax,eax
c001b5af:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001b5b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b5b7:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001b5bc:	66 89 02             	mov    WORD PTR [edx],ax
c001b5bf:	90                   	nop
c001b5c0:	83 c4 14             	add    esp,0x14
c001b5c3:	c3                   	ret    

c001b5c4 <HalConsoleCursorUpdate(int, int)>:
c001b5c4:	83 ec 20             	sub    esp,0x20
c001b5c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b5cb:	89 c2                	mov    edx,eax
c001b5cd:	c1 e2 02             	shl    edx,0x2
c001b5d0:	01 d0                	add    eax,edx
c001b5d2:	c1 e0 04             	shl    eax,0x4
c001b5d5:	89 c2                	mov    edx,eax
c001b5d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b5db:	01 d0                	add    eax,edx
c001b5dd:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001b5e2:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001b5e9:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001b5ee:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b5f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b5f6:	ee                   	out    dx,al
c001b5f7:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b5fc:	0f b6 c0             	movzx  eax,al
c001b5ff:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001b606:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001b60a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001b60e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b612:	ee                   	out    dx,al
c001b613:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001b61a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001b61f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001b623:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b627:	ee                   	out    dx,al
c001b628:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001b62d:	c1 e8 08             	shr    eax,0x8
c001b630:	0f b6 c0             	movzx  eax,al
c001b633:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001b63a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b63e:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001b642:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b646:	ee                   	out    dx,al
c001b647:	90                   	nop
c001b648:	83 c4 20             	add    esp,0x20
c001b64b:	c3                   	ret    

c001b64c <FAT::getName()>:
c001b64c:	b8 68 5e 02 c0       	mov    eax,0xc0025e68
c001b651:	c3                   	ret    
c001b652:	66 90                	xchg   ax,ax

c001b654 <FAT::tell(void*, unsigned long long*)>:
c001b654:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b659:	75 09                	jne    c001b664 <FAT::tell(void*, unsigned long long*)+0x10>
c001b65b:	b8 04 00 00 00       	mov    eax,0x4
c001b660:	c3                   	ret    
c001b661:	8d 76 00             	lea    esi,[esi+0x0]
c001b664:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b669:	75 09                	jne    c001b674 <FAT::tell(void*, unsigned long long*)+0x20>
c001b66b:	b8 04 00 00 00       	mov    eax,0x4
c001b670:	c3                   	ret    
c001b671:	8d 76 00             	lea    esi,[esi+0x0]
c001b674:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b678:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b67b:	ba 00 00 00 00       	mov    edx,0x0
c001b680:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b684:	89 01                	mov    DWORD PTR [ecx],eax
c001b686:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b689:	b8 00 00 00 00       	mov    eax,0x0
c001b68e:	c3                   	ret    
c001b68f:	90                   	nop

c001b690 <FAT::stat(void*, unsigned long long*)>:
c001b690:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b695:	75 09                	jne    c001b6a0 <FAT::stat(void*, unsigned long long*)+0x10>
c001b697:	b8 04 00 00 00       	mov    eax,0x4
c001b69c:	c3                   	ret    
c001b69d:	8d 76 00             	lea    esi,[esi+0x0]
c001b6a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b6a5:	75 09                	jne    c001b6b0 <FAT::stat(void*, unsigned long long*)+0x20>
c001b6a7:	b8 04 00 00 00       	mov    eax,0x4
c001b6ac:	c3                   	ret    
c001b6ad:	8d 76 00             	lea    esi,[esi+0x0]
c001b6b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b6b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b6b7:	ba 00 00 00 00       	mov    edx,0x0
c001b6bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b6c0:	89 01                	mov    DWORD PTR [ecx],eax
c001b6c2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b6c5:	b8 00 00 00 00       	mov    eax,0x0
c001b6ca:	c3                   	ret    
c001b6cb:	90                   	nop

c001b6cc <FAT::~FAT()>:
c001b6cc:	83 ec 0c             	sub    esp,0xc
c001b6cf:	ba b4 5e 02 c0       	mov    edx,0xc0025eb4
c001b6d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6d8:	89 10                	mov    DWORD PTR [eax],edx
c001b6da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6de:	83 ec 0c             	sub    esp,0xc
c001b6e1:	50                   	push   eax
c001b6e2:	e8 e1 c6 fe ff       	call   c0007dc8 <Filesystem::~Filesystem()>
c001b6e7:	83 c4 10             	add    esp,0x10
c001b6ea:	90                   	nop
c001b6eb:	83 c4 0c             	add    esp,0xc
c001b6ee:	c3                   	ret    
c001b6ef:	90                   	nop

c001b6f0 <FAT::~FAT()>:
c001b6f0:	83 ec 0c             	sub    esp,0xc
c001b6f3:	83 ec 0c             	sub    esp,0xc
c001b6f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6fa:	e8 cd ff ff ff       	call   c001b6cc <FAT::~FAT()>
c001b6ff:	83 c4 10             	add    esp,0x10
c001b702:	83 ec 08             	sub    esp,0x8
c001b705:	6a 08                	push   0x8
c001b707:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b70b:	e8 4b 1c ff ff       	call   c000d35b <operator delete(void*, unsigned long)>
c001b710:	83 c4 10             	add    esp,0x10
c001b713:	83 c4 0c             	add    esp,0xc
c001b716:	c3                   	ret    
c001b717:	90                   	nop

c001b718 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001b718:	83 ec 1c             	sub    esp,0x1c
c001b71b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001b722:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b727:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b72b:	8b 04 85 40 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd04c0]
c001b732:	83 f8 ff             	cmp    eax,0xffffffff
c001b735:	75 35                	jne    c001b76c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001b737:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b73b:	88 c2                	mov    dl,al
c001b73d:	a1 20 fb 02 c0       	mov    eax,ds:0xc002fb20
c001b742:	01 d0                	add    eax,edx
c001b744:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b748:	8b 15 20 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb20
c001b74e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b752:	89 14 85 40 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd04c0],edx
c001b759:	a1 20 fb 02 c0       	mov    eax,ds:0xc002fb20
c001b75e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b762:	89 14 85 c0 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0440],edx
c001b769:	eb 19                	jmp    c001b784 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001b76b:	90                   	nop
c001b76c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b770:	88 c2                	mov    dl,al
c001b772:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b776:	8b 04 85 40 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd04c0]
c001b77d:	01 d0                	add    eax,edx
c001b77f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b783:	90                   	nop
c001b784:	83 ec 04             	sub    esp,0x4
c001b787:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b78b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b78f:	8d 44 24 15          	lea    eax,[esp+0x15]
c001b793:	50                   	push   eax
c001b794:	e8 1f 9a fe ff       	call   c00051b8 <f_getlabel>
c001b799:	83 c4 10             	add    esp,0x10
c001b79c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b7a5:	75 09                	jne    c001b7b0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001b7a7:	b8 00 00 00 00       	mov    eax,0x0
c001b7ac:	eb 0a                	jmp    c001b7b8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001b7ae:	66 90                	xchg   ax,ax
c001b7b0:	b8 01 00 00 00       	mov    eax,0x1
c001b7b5:	8d 76 00             	lea    esi,[esi+0x0]
c001b7b8:	83 c4 1c             	add    esp,0x1c
c001b7bb:	c3                   	ret    

c001b7bc <FAT::setlabel(LogicalDisk*, int, char*)>:
c001b7bc:	57                   	push   edi
c001b7bd:	83 ec 58             	sub    esp,0x58
c001b7c0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001b7c8:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b7cc:	b8 00 00 00 00       	mov    eax,0x0
c001b7d1:	b9 0f 00 00 00       	mov    ecx,0xf
c001b7d6:	fc                   	cld    
c001b7d7:	89 d7                	mov    edi,edx
c001b7d9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b7db:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b7df:	8b 04 85 40 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd04c0]
c001b7e6:	83 f8 ff             	cmp    eax,0xffffffff
c001b7e9:	75 35                	jne    c001b820 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001b7eb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b7ef:	88 c2                	mov    dl,al
c001b7f1:	a1 20 fb 02 c0       	mov    eax,ds:0xc002fb20
c001b7f6:	01 d0                	add    eax,edx
c001b7f8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b7fc:	8b 15 20 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb20
c001b802:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b806:	89 14 85 40 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd04c0],edx
c001b80d:	a1 20 fb 02 c0       	mov    eax,ds:0xc002fb20
c001b812:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001b816:	89 14 85 c0 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0440],edx
c001b81d:	eb 19                	jmp    c001b838 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001b81f:	90                   	nop
c001b820:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b824:	88 c2                	mov    dl,al
c001b826:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b82a:	8b 04 85 40 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd04c0]
c001b831:	01 d0                	add    eax,edx
c001b833:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b837:	90                   	nop
c001b838:	83 ec 08             	sub    esp,0x8
c001b83b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001b83f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b843:	50                   	push   eax
c001b844:	e8 f7 4f fe ff       	call   c0000840 <strcat>
c001b849:	83 c4 10             	add    esp,0x10
c001b84c:	83 ec 0c             	sub    esp,0xc
c001b84f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b853:	50                   	push   eax
c001b854:	e8 b0 9a fe ff       	call   c0005309 <f_setlabel>
c001b859:	83 c4 10             	add    esp,0x10
c001b85c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b860:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001b865:	75 09                	jne    c001b870 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001b867:	b8 00 00 00 00       	mov    eax,0x0
c001b86c:	eb 0a                	jmp    c001b878 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001b86e:	66 90                	xchg   ax,ax
c001b870:	b8 01 00 00 00       	mov    eax,0x1
c001b875:	8d 76 00             	lea    esi,[esi+0x0]
c001b878:	83 c4 58             	add    esp,0x58
c001b87b:	5f                   	pop    edi
c001b87c:	c3                   	ret    
c001b87d:	90                   	nop
c001b87e:	66 90                	xchg   ax,ax

c001b880 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001b880:	83 ec 2c             	sub    esp,0x2c
c001b883:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b88b:	83 ec 08             	sub    esp,0x8
c001b88e:	68 8c 5e 02 c0       	push   0xc0025e8c
c001b893:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b897:	e8 b4 4e fe ff       	call   c0000750 <strcmp>
c001b89c:	83 c4 10             	add    esp,0x10
c001b89f:	85 c0                	test   eax,eax
c001b8a1:	0f 94 c0             	sete   al
c001b8a4:	0f b6 c0             	movzx  eax,al
c001b8a7:	85 c0                	test   eax,eax
c001b8a9:	74 0d                	je     c001b8b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001b8ab:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b8b3:	e9 c0 00 00 00       	jmp    c001b978 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b8b8:	83 ec 08             	sub    esp,0x8
c001b8bb:	68 7e 5e 02 c0       	push   0xc0025e7e
c001b8c0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b8c4:	e8 87 4e fe ff       	call   c0000750 <strcmp>
c001b8c9:	83 c4 10             	add    esp,0x10
c001b8cc:	85 c0                	test   eax,eax
c001b8ce:	0f 94 c0             	sete   al
c001b8d1:	0f b6 c0             	movzx  eax,al
c001b8d4:	85 c0                	test   eax,eax
c001b8d6:	74 10                	je     c001b8e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001b8d8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b8e0:	e9 93 00 00 00       	jmp    c001b978 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b8e5:	8d 76 00             	lea    esi,[esi+0x0]
c001b8e8:	83 ec 08             	sub    esp,0x8
c001b8eb:	68 84 5e 02 c0       	push   0xc0025e84
c001b8f0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b8f4:	e8 57 4e fe ff       	call   c0000750 <strcmp>
c001b8f9:	83 c4 10             	add    esp,0x10
c001b8fc:	85 c0                	test   eax,eax
c001b8fe:	0f 94 c0             	sete   al
c001b901:	0f b6 c0             	movzx  eax,al
c001b904:	85 c0                	test   eax,eax
c001b906:	74 0c                	je     c001b914 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001b908:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b910:	eb 66                	jmp    c001b978 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b912:	66 90                	xchg   ax,ax
c001b914:	83 ec 08             	sub    esp,0x8
c001b917:	68 9c 2a 02 c0       	push   0xc0022a9c
c001b91c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b920:	e8 2b 4e fe ff       	call   c0000750 <strcmp>
c001b925:	83 c4 10             	add    esp,0x10
c001b928:	85 c0                	test   eax,eax
c001b92a:	0f 94 c0             	sete   al
c001b92d:	0f b6 c0             	movzx  eax,al
c001b930:	85 c0                	test   eax,eax
c001b932:	74 0c                	je     c001b940 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001b934:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001b93c:	eb 3a                	jmp    c001b978 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b93e:	66 90                	xchg   ax,ax
c001b940:	83 ec 08             	sub    esp,0x8
c001b943:	68 8a 5e 02 c0       	push   0xc0025e8a
c001b948:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b94c:	e8 ff 4d fe ff       	call   c0000750 <strcmp>
c001b951:	83 c4 10             	add    esp,0x10
c001b954:	85 c0                	test   eax,eax
c001b956:	0f 94 c0             	sete   al
c001b959:	0f b6 c0             	movzx  eax,al
c001b95c:	85 c0                	test   eax,eax
c001b95e:	74 0c                	je     c001b96c <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001b960:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001b968:	eb 0e                	jmp    c001b978 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b96a:	66 90                	xchg   ax,ax
c001b96c:	b8 08 00 00 00       	mov    eax,0x8
c001b971:	e9 ea 00 00 00       	jmp    c001ba60 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001b976:	66 90                	xchg   ax,ax
c001b978:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001b97f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b984:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b988:	8b 04 85 40 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd04c0]
c001b98f:	83 f8 ff             	cmp    eax,0xffffffff
c001b992:	75 34                	jne    c001b9c8 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001b994:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b998:	88 c2                	mov    dl,al
c001b99a:	a1 20 fb 02 c0       	mov    eax,ds:0xc002fb20
c001b99f:	01 d0                	add    eax,edx
c001b9a1:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b9a5:	8b 15 20 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb20
c001b9ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b9af:	89 14 85 40 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd04c0],edx
c001b9b6:	a1 20 fb 02 c0       	mov    eax,ds:0xc002fb20
c001b9bb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b9bf:	89 14 85 c0 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0440],edx
c001b9c6:	eb 18                	jmp    c001b9e0 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001b9c8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b9cc:	88 c2                	mov    dl,al
c001b9ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b9d2:	8b 04 85 40 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd04c0]
c001b9d9:	01 d0                	add    eax,edx
c001b9db:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b9df:	90                   	nop
c001b9e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b9e4:	88 04 24             	mov    BYTE PTR [esp],al
c001b9e7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b9eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b9ef:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b9f7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001b9fc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ba04:	83 ec 0c             	sub    esp,0xc
c001ba07:	68 00 20 00 00       	push   0x2000
c001ba0c:	e8 d6 42 ff ff       	call   c000fce7 <malloc>
c001ba11:	83 c4 10             	add    esp,0x10
c001ba14:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ba18:	68 00 20 00 00       	push   0x2000
c001ba1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba21:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ba25:	50                   	push   eax
c001ba26:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001ba2a:	50                   	push   eax
c001ba2b:	e8 d6 9b fe ff       	call   c0005606 <f_mkfs>
c001ba30:	83 c4 10             	add    esp,0x10
c001ba33:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ba37:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ba3c:	75 0a                	jne    c001ba48 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001ba3e:	b8 00 00 00 00       	mov    eax,0x0
c001ba43:	eb 1b                	jmp    c001ba60 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001ba45:	8d 76 00             	lea    esi,[esi+0x0]
c001ba48:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001ba4d:	75 09                	jne    c001ba58 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001ba4f:	b8 09 00 00 00       	mov    eax,0x9
c001ba54:	eb 0a                	jmp    c001ba60 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001ba56:	66 90                	xchg   ax,ax
c001ba58:	b8 01 00 00 00       	mov    eax,0x1
c001ba5d:	8d 76 00             	lea    esi,[esi+0x0]
c001ba60:	83 c4 2c             	add    esp,0x2c
c001ba63:	c3                   	ret    

c001ba64 <FAT::tryMount(LogicalDisk*, int)>:
c001ba64:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001ba6a:	a1 20 fb 02 c0       	mov    eax,ds:0xc002fb20
c001ba6f:	83 f8 14             	cmp    eax,0x14
c001ba72:	75 18                	jne    c001ba8c <FAT::tryMount(LogicalDisk*, int)+0x28>
c001ba74:	83 ec 0c             	sub    esp,0xc
c001ba77:	68 90 5e 02 c0       	push   0xc0025e90
c001ba7c:	e8 ad 45 ff ff       	call   c001002e <KePanic(char const*)>
c001ba81:	83 c4 10             	add    esp,0x10
c001ba84:	b0 00                	mov    al,0x0
c001ba86:	e9 ed 01 00 00       	jmp    c001bc78 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001ba8b:	90                   	nop
c001ba8c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001ba93:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ba99:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ba9f:	3d 00 02 00 00       	cmp    eax,0x200
c001baa4:	74 0a                	je     c001bab0 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001baa6:	b0 00                	mov    al,0x0
c001baa8:	e9 cb 01 00 00       	jmp    c001bc78 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001baad:	8d 76 00             	lea    esi,[esi+0x0]
c001bab0:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001bab8:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001babf:	8b 04 85 40 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd04c0]
c001bac6:	83 f8 ff             	cmp    eax,0xffffffff
c001bac9:	74 09                	je     c001bad4 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001bacb:	b0 01                	mov    al,0x1
c001bacd:	e9 a6 01 00 00       	jmp    c001bc78 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bad2:	66 90                	xchg   ax,ax
c001bad4:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001bade:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001bae6:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001baed:	88 c2                	mov    dl,al
c001baef:	a1 20 fb 02 c0       	mov    eax,ds:0xc002fb20
c001baf4:	01 d0                	add    eax,edx
c001baf6:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001bafd:	8b 15 20 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb20
c001bb03:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001bb0a:	89 14 85 40 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd04c0],edx
c001bb11:	a1 20 fb 02 c0       	mov    eax,ds:0xc002fb20
c001bb16:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001bb1d:	89 14 85 c0 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0440],edx
c001bb24:	83 ec 0c             	sub    esp,0xc
c001bb27:	68 34 02 00 00       	push   0x234
c001bb2c:	e8 b6 41 ff ff       	call   c000fce7 <malloc>
c001bb31:	83 c4 10             	add    esp,0x10
c001bb34:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001bb3b:	83 ec 04             	sub    esp,0x4
c001bb3e:	6a 00                	push   0x0
c001bb40:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001bb47:	50                   	push   eax
c001bb48:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001bb4f:	e8 8d 82 fe ff       	call   c0003de1 <f_mount>
c001bb54:	83 c4 10             	add    esp,0x10
c001bb57:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001bb5e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001bb66:	74 1c                	je     c001bb84 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001bb68:	83 ec 0c             	sub    esp,0xc
c001bb6b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001bb72:	e8 90 41 ff ff       	call   c000fd07 <rfree>
c001bb77:	83 c4 10             	add    esp,0x10
c001bb7a:	b0 00                	mov    al,0x0
c001bb7c:	e9 f7 00 00 00       	jmp    c001bc78 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bb81:	8d 76 00             	lea    esi,[esi+0x0]
c001bb84:	83 ec 04             	sub    esp,0x4
c001bb87:	68 00 01 00 00       	push   0x100
c001bb8c:	6a 00                	push   0x0
c001bb8e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001bb95:	50                   	push   eax
c001bb96:	e8 55 49 fe ff       	call   c00004f0 <memset>
c001bb9b:	83 c4 10             	add    esp,0x10
c001bb9e:	83 ec 08             	sub    esp,0x8
c001bba1:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001bba8:	50                   	push   eax
c001bba9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001bbb0:	50                   	push   eax
c001bbb1:	e8 8a 4c fe ff       	call   c0000840 <strcat>
c001bbb6:	83 c4 10             	add    esp,0x10
c001bbb9:	83 ec 08             	sub    esp,0x8
c001bbbc:	68 9e 5e 02 c0       	push   0xc0025e9e
c001bbc1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001bbc8:	50                   	push   eax
c001bbc9:	e8 72 4c fe ff       	call   c0000840 <strcat>
c001bbce:	83 c4 10             	add    esp,0x10
c001bbd1:	83 ec 04             	sub    esp,0x4
c001bbd4:	6a 01                	push   0x1
c001bbd6:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001bbdd:	50                   	push   eax
c001bbde:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bbe2:	50                   	push   eax
c001bbe3:	e8 5b 82 fe ff       	call   c0003e43 <f_open>
c001bbe8:	83 c4 10             	add    esp,0x10
c001bbeb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001bbf2:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001bbf9:	85 c0                	test   eax,eax
c001bbfb:	74 0b                	je     c001bc08 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001bbfd:	78 31                	js     c001bc30 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001bbff:	83 e8 04             	sub    eax,0x4
c001bc02:	83 f8 01             	cmp    eax,0x1
c001bc05:	77 29                	ja     c001bc30 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001bc07:	90                   	nop
c001bc08:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001bc10:	83 ec 0c             	sub    esp,0xc
c001bc13:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bc17:	50                   	push   eax
c001bc18:	e8 f5 89 fe ff       	call   c0004612 <f_close>
c001bc1d:	83 c4 10             	add    esp,0x10
c001bc20:	90                   	nop
c001bc21:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001bc29:	85 c0                	test   eax,eax
c001bc2b:	74 43                	je     c001bc70 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001bc2d:	eb 31                	jmp    c001bc60 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001bc2f:	90                   	nop
c001bc30:	83 ec 0c             	sub    esp,0xc
c001bc33:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001bc3a:	e8 c8 40 ff ff       	call   c000fd07 <rfree>
c001bc3f:	83 c4 10             	add    esp,0x10
c001bc42:	83 ec 04             	sub    esp,0x4
c001bc45:	6a 00                	push   0x0
c001bc47:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001bc4e:	50                   	push   eax
c001bc4f:	6a 00                	push   0x0
c001bc51:	e8 8b 81 fe ff       	call   c0003de1 <f_mount>
c001bc56:	83 c4 10             	add    esp,0x10
c001bc59:	b0 00                	mov    al,0x0
c001bc5b:	eb 1b                	jmp    c001bc78 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bc5d:	8d 76 00             	lea    esi,[esi+0x0]
c001bc60:	a1 20 fb 02 c0       	mov    eax,ds:0xc002fb20
c001bc65:	83 c0 01             	add    eax,0x1
c001bc68:	a3 20 fb 02 c0       	mov    ds:0xc002fb20,eax
c001bc6d:	8d 76 00             	lea    esi,[esi+0x0]
c001bc70:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001bc77:	90                   	nop
c001bc78:	81 c4 4c 03 00 00    	add    esp,0x34c
c001bc7e:	c3                   	ret    
c001bc7f:	90                   	nop

c001bc80 <FAT::allocateSwapfile(char const*, int)>:
c001bc80:	55                   	push   ebp
c001bc81:	57                   	push   edi
c001bc82:	56                   	push   esi
c001bc83:	53                   	push   ebx
c001bc84:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001bc8a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001bc95:	83 ec 0c             	sub    esp,0xc
c001bc98:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001bc9f:	e8 43 40 ff ff       	call   c000fce7 <malloc>
c001bca4:	83 c4 10             	add    esp,0x10
c001bca7:	89 c7                	mov    edi,eax
c001bca9:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001bcae:	83 ec 04             	sub    esp,0x4
c001bcb1:	50                   	push   eax
c001bcb2:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001bcb9:	57                   	push   edi
c001bcba:	e8 a7 c4 fe ff       	call   c0008166 <File::File(char const*, Process*)>
c001bcbf:	83 c4 10             	add    esp,0x10
c001bcc2:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001bcc9:	83 ec 04             	sub    esp,0x4
c001bccc:	8d 44 24 13          	lea    eax,[esp+0x13]
c001bcd0:	50                   	push   eax
c001bcd1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bcd5:	50                   	push   eax
c001bcd6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bcdd:	e8 a4 c7 fe ff       	call   c0008486 <File::stat(unsigned long long*, bool*)>
c001bce2:	83 c4 10             	add    esp,0x10
c001bce5:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001bcec:	c1 e0 14             	shl    eax,0x14
c001bcef:	89 c7                	mov    edi,eax
c001bcf1:	89 c5                	mov    ebp,eax
c001bcf3:	c1 fd 1f             	sar    ebp,0x1f
c001bcf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcfa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bcfe:	89 f9                	mov    ecx,edi
c001bd00:	31 c1                	xor    ecx,eax
c001bd02:	89 cb                	mov    ebx,ecx
c001bd04:	89 e9                	mov    ecx,ebp
c001bd06:	31 d1                	xor    ecx,edx
c001bd08:	89 ce                	mov    esi,ecx
c001bd0a:	89 f0                	mov    eax,esi
c001bd0c:	09 d8                	or     eax,ebx
c001bd0e:	0f 84 9c 00 00 00    	je     c001bdb0 <FAT::allocateSwapfile(char const*, int)+0x130>
c001bd14:	83 ec 0c             	sub    esp,0xc
c001bd17:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bd1e:	e8 2f c6 fe ff       	call   c0008352 <File::unlink()>
c001bd23:	83 c4 10             	add    esp,0x10
c001bd26:	83 ec 08             	sub    esp,0x8
c001bd29:	6a 12                	push   0x12
c001bd2b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bd32:	e8 4d c4 fe ff       	call   c0008184 <File::open(FileOpenMode)>
c001bd37:	83 c4 10             	add    esp,0x10
c001bd3a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bd41:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001bd47:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001bd4e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001bd55:	c1 e0 14             	shl    eax,0x14
c001bd58:	83 ec 04             	sub    esp,0x4
c001bd5b:	6a 01                	push   0x1
c001bd5d:	50                   	push   eax
c001bd5e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001bd65:	e8 2f 97 fe ff       	call   c0005499 <f_expand>
c001bd6a:	83 c4 10             	add    esp,0x10
c001bd6d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bd74:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd76:	83 c0 10             	add    eax,0x10
c001bd79:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd7b:	83 ec 0c             	sub    esp,0xc
c001bd7e:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bd82:	52                   	push   edx
c001bd83:	8d 54 24 30          	lea    edx,[esp+0x30]
c001bd87:	52                   	push   edx
c001bd88:	6a 00                	push   0x0
c001bd8a:	68 00 04 00 00       	push   0x400
c001bd8f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001bd96:	ff d0                	call   eax
c001bd98:	83 c4 20             	add    esp,0x20
c001bd9b:	83 ec 0c             	sub    esp,0xc
c001bd9e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bda5:	e8 38 c4 fe ff       	call   c00081e2 <File::close()>
c001bdaa:	83 c4 10             	add    esp,0x10
c001bdad:	8d 76 00             	lea    esi,[esi+0x0]
c001bdb0:	83 ec 08             	sub    esp,0x8
c001bdb3:	6a 01                	push   0x1
c001bdb5:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bdbc:	e8 c3 c3 fe ff       	call   c0008184 <File::open(FileOpenMode)>
c001bdc1:	83 c4 10             	add    esp,0x10
c001bdc4:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bdcb:	8b 00                	mov    eax,DWORD PTR [eax]
c001bdcd:	83 c0 0c             	add    eax,0xc
c001bdd0:	8b 00                	mov    eax,DWORD PTR [eax]
c001bdd2:	83 ec 0c             	sub    esp,0xc
c001bdd5:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bdd9:	52                   	push   edx
c001bdda:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001bdde:	52                   	push   edx
c001bddf:	6a 00                	push   0x0
c001bde1:	6a 04                	push   0x4
c001bde3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001bdea:	ff d0                	call   eax
c001bdec:	83 c4 20             	add    esp,0x20
c001bdef:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bdf6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001bdfc:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001be03:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001be0a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001be0d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001be14:	83 ec 0c             	sub    esp,0xc
c001be17:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001be1e:	e8 bf c3 fe ff       	call   c00081e2 <File::close()>
c001be23:	83 c4 10             	add    esp,0x10
c001be26:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001be2d:	ba 00 00 00 00       	mov    edx,0x0
c001be32:	81 c4 3c 04 00 00    	add    esp,0x43c
c001be38:	5b                   	pop    ebx
c001be39:	5e                   	pop    esi
c001be3a:	5f                   	pop    edi
c001be3b:	5d                   	pop    ebp
c001be3c:	c3                   	ret    
c001be3d:	90                   	nop
c001be3e:	66 90                	xchg   ax,ax

c001be40 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001be40:	57                   	push   edi
c001be41:	56                   	push   esi
c001be42:	53                   	push   ebx
c001be43:	81 ec 50 02 00 00    	sub    esp,0x250
c001be49:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001be51:	74 0d                	je     c001be60 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001be53:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001be5b:	75 0f                	jne    c001be6c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001be5d:	8d 76 00             	lea    esi,[esi+0x0]
c001be60:	b8 04 00 00 00       	mov    eax,0x4
c001be65:	e9 3a 01 00 00       	jmp    c001bfa4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001be6a:	66 90                	xchg   ax,ax
c001be6c:	83 ec 08             	sub    esp,0x8
c001be6f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001be76:	50                   	push   eax
c001be77:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001be7e:	e8 5c 8a fe ff       	call   c00048df <f_readdir>
c001be83:	83 c4 10             	add    esp,0x10
c001be86:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001be8d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001be94:	83 ec 0c             	sub    esp,0xc
c001be97:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001be9e:	83 c0 16             	add    eax,0x16
c001bea1:	50                   	push   eax
c001bea2:	e8 c9 46 fe ff       	call   c0000570 <strlen>
c001bea7:	83 c4 10             	add    esp,0x10
c001beaa:	ba 00 00 00 00       	mov    edx,0x0
c001beaf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001beb3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001beb7:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001bebe:	0f b6 c0             	movzx  eax,al
c001bec1:	83 e0 10             	and    eax,0x10
c001bec4:	74 0a                	je     c001bed0 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001bec6:	b8 02 00 00 00       	mov    eax,0x2
c001becb:	eb 0b                	jmp    c001bed8 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001becd:	8d 76 00             	lea    esi,[esi+0x0]
c001bed0:	b8 01 00 00 00       	mov    eax,0x1
c001bed5:	8d 76 00             	lea    esi,[esi+0x0]
c001bed8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bedc:	83 ec 08             	sub    esp,0x8
c001bedf:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001bee6:	83 c0 16             	add    eax,0x16
c001bee9:	50                   	push   eax
c001beea:	8d 44 24 14          	lea    eax,[esp+0x14]
c001beee:	83 c0 10             	add    eax,0x10
c001bef1:	50                   	push   eax
c001bef2:	e8 49 47 fe ff       	call   c0000640 <strcpy>
c001bef7:	83 c4 10             	add    esp,0x10
c001befa:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001bf01:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001bf08:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bf0c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001bf13:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001bf1a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001bf21:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001bf28:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001bf2f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001bf36:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001bf3d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001bf44:	89 c6                	mov    esi,eax
c001bf46:	89 d7                	mov    edi,edx
c001bf48:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bf4a:	89 c8                	mov    eax,ecx
c001bf4c:	89 fa                	mov    edx,edi
c001bf4e:	89 f3                	mov    ebx,esi
c001bf50:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001bf57:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001bf5e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001bf65:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001bf6c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001bf72:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001bf79:	0f be c0             	movsx  eax,al
c001bf7c:	85 c0                	test   eax,eax
c001bf7e:	75 08                	jne    c001bf88 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001bf80:	b8 07 00 00 00       	mov    eax,0x7
c001bf85:	eb 1d                	jmp    c001bfa4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001bf87:	90                   	nop
c001bf88:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001bf8f:	85 c0                	test   eax,eax
c001bf91:	75 09                	jne    c001bf9c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001bf93:	b8 00 00 00 00       	mov    eax,0x0
c001bf98:	eb 0a                	jmp    c001bfa4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001bf9a:	66 90                	xchg   ax,ax
c001bf9c:	b8 01 00 00 00       	mov    eax,0x1
c001bfa1:	8d 76 00             	lea    esi,[esi+0x0]
c001bfa4:	81 c4 50 02 00 00    	add    esp,0x250
c001bfaa:	5b                   	pop    ebx
c001bfab:	5e                   	pop    esi
c001bfac:	5f                   	pop    edi
c001bfad:	c3                   	ret    
c001bfae:	66 90                	xchg   ax,ax

c001bfb0 <FAT::read(void*, unsigned long, void*, int*)>:
c001bfb0:	83 ec 1c             	sub    esp,0x1c
c001bfb3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bfb8:	74 0a                	je     c001bfc4 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001bfba:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001bfbf:	75 0b                	jne    c001bfcc <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001bfc1:	8d 76 00             	lea    esi,[esi+0x0]
c001bfc4:	b8 04 00 00 00       	mov    eax,0x4
c001bfc9:	eb 41                	jmp    c001c00c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001bfcb:	90                   	nop
c001bfcc:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bfd0:	50                   	push   eax
c001bfd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bfd5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bfd9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bfdd:	e8 24 81 fe ff       	call   c0004106 <f_read>
c001bfe2:	83 c4 10             	add    esp,0x10
c001bfe5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bfe9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bfed:	89 c2                	mov    edx,eax
c001bfef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bff3:	89 10                	mov    DWORD PTR [eax],edx
c001bff5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bff9:	85 c0                	test   eax,eax
c001bffb:	75 07                	jne    c001c004 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001bffd:	b8 00 00 00 00       	mov    eax,0x0
c001c002:	eb 08                	jmp    c001c00c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001c004:	b8 01 00 00 00       	mov    eax,0x1
c001c009:	8d 76 00             	lea    esi,[esi+0x0]
c001c00c:	83 c4 1c             	add    esp,0x1c
c001c00f:	c3                   	ret    

c001c010 <FAT::write(void*, unsigned long, void*, int*)>:
c001c010:	83 ec 1c             	sub    esp,0x1c
c001c013:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c018:	74 0a                	je     c001c024 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001c01a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001c01f:	75 0b                	jne    c001c02c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001c021:	8d 76 00             	lea    esi,[esi+0x0]
c001c024:	b8 04 00 00 00       	mov    eax,0x4
c001c029:	eb 41                	jmp    c001c06c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c02b:	90                   	nop
c001c02c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c030:	50                   	push   eax
c001c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c035:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c039:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c03d:	e8 c3 82 fe ff       	call   c0004305 <f_write>
c001c042:	83 c4 10             	add    esp,0x10
c001c045:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c04d:	89 c2                	mov    edx,eax
c001c04f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c053:	89 10                	mov    DWORD PTR [eax],edx
c001c055:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c059:	85 c0                	test   eax,eax
c001c05b:	75 07                	jne    c001c064 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001c05d:	b8 00 00 00 00       	mov    eax,0x0
c001c062:	eb 08                	jmp    c001c06c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c064:	b8 01 00 00 00       	mov    eax,0x1
c001c069:	8d 76 00             	lea    esi,[esi+0x0]
c001c06c:	83 c4 1c             	add    esp,0x1c
c001c06f:	c3                   	ret    

c001c070 <FAT::close(void*)>:
c001c070:	83 ec 1c             	sub    esp,0x1c
c001c073:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c078:	75 0a                	jne    c001c084 <FAT::close(void*)+0x14>
c001c07a:	b8 04 00 00 00       	mov    eax,0x4
c001c07f:	eb 3f                	jmp    c001c0c0 <FAT::close(void*)+0x50>
c001c081:	8d 76 00             	lea    esi,[esi+0x0]
c001c084:	83 ec 0c             	sub    esp,0xc
c001c087:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c08b:	e8 82 85 fe ff       	call   c0004612 <f_close>
c001c090:	83 c4 10             	add    esp,0x10
c001c093:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c097:	83 ec 0c             	sub    esp,0xc
c001c09a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c09e:	e8 54 3c ff ff       	call   c000fcf7 <free>
c001c0a3:	83 c4 10             	add    esp,0x10
c001c0a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0aa:	85 c0                	test   eax,eax
c001c0ac:	75 0a                	jne    c001c0b8 <FAT::close(void*)+0x48>
c001c0ae:	b8 00 00 00 00       	mov    eax,0x0
c001c0b3:	eb 0b                	jmp    c001c0c0 <FAT::close(void*)+0x50>
c001c0b5:	8d 76 00             	lea    esi,[esi+0x0]
c001c0b8:	b8 01 00 00 00       	mov    eax,0x1
c001c0bd:	8d 76 00             	lea    esi,[esi+0x0]
c001c0c0:	83 c4 1c             	add    esp,0x1c
c001c0c3:	c3                   	ret    

c001c0c4 <FAT::closeDir(void*)>:
c001c0c4:	83 ec 1c             	sub    esp,0x1c
c001c0c7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c0cc:	75 0a                	jne    c001c0d8 <FAT::closeDir(void*)+0x14>
c001c0ce:	b8 04 00 00 00       	mov    eax,0x4
c001c0d3:	eb 3f                	jmp    c001c114 <FAT::closeDir(void*)+0x50>
c001c0d5:	8d 76 00             	lea    esi,[esi+0x0]
c001c0d8:	83 ec 0c             	sub    esp,0xc
c001c0db:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c0df:	e8 d9 87 fe ff       	call   c00048bd <f_closedir>
c001c0e4:	83 c4 10             	add    esp,0x10
c001c0e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0eb:	83 ec 0c             	sub    esp,0xc
c001c0ee:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c0f2:	e8 00 3c ff ff       	call   c000fcf7 <free>
c001c0f7:	83 c4 10             	add    esp,0x10
c001c0fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0fe:	85 c0                	test   eax,eax
c001c100:	75 0a                	jne    c001c10c <FAT::closeDir(void*)+0x48>
c001c102:	b8 00 00 00 00       	mov    eax,0x0
c001c107:	eb 0b                	jmp    c001c114 <FAT::closeDir(void*)+0x50>
c001c109:	8d 76 00             	lea    esi,[esi+0x0]
c001c10c:	b8 01 00 00 00       	mov    eax,0x1
c001c111:	8d 76 00             	lea    esi,[esi+0x0]
c001c114:	83 c4 1c             	add    esp,0x1c
c001c117:	c3                   	ret    

c001c118 <FAT::truncate(void*, unsigned long long)>:
c001c118:	83 ec 2c             	sub    esp,0x2c
c001c11b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c11f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c123:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c12b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c130:	75 0a                	jne    c001c13c <FAT::truncate(void*, unsigned long long)+0x24>
c001c132:	b8 04 00 00 00       	mov    eax,0x4
c001c137:	eb 47                	jmp    c001c180 <FAT::truncate(void*, unsigned long long)+0x68>
c001c139:	8d 76 00             	lea    esi,[esi+0x0]
c001c13c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c140:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c143:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c147:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001c14f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c153:	83 ec 08             	sub    esp,0x8
c001c156:	50                   	push   eax
c001c157:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c15b:	e8 e1 84 fe ff       	call   c0004641 <f_lseek>
c001c160:	83 c4 10             	add    esp,0x10
c001c163:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c167:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c16b:	85 c0                	test   eax,eax
c001c16d:	75 09                	jne    c001c178 <FAT::truncate(void*, unsigned long long)+0x60>
c001c16f:	b8 00 00 00 00       	mov    eax,0x0
c001c174:	eb 0a                	jmp    c001c180 <FAT::truncate(void*, unsigned long long)+0x68>
c001c176:	66 90                	xchg   ax,ax
c001c178:	b8 01 00 00 00       	mov    eax,0x1
c001c17d:	8d 76 00             	lea    esi,[esi+0x0]
c001c180:	83 c4 2c             	add    esp,0x2c
c001c183:	c3                   	ret    

c001c184 <FAT::seek(void*, unsigned long long)>:
c001c184:	83 ec 2c             	sub    esp,0x2c
c001c187:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c18b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c18f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c193:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c197:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c19c:	75 0a                	jne    c001c1a8 <FAT::seek(void*, unsigned long long)+0x24>
c001c19e:	b8 04 00 00 00       	mov    eax,0x4
c001c1a3:	eb 33                	jmp    c001c1d8 <FAT::seek(void*, unsigned long long)+0x54>
c001c1a5:	8d 76 00             	lea    esi,[esi+0x0]
c001c1a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c1ac:	83 ec 08             	sub    esp,0x8
c001c1af:	50                   	push   eax
c001c1b0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c1b4:	e8 88 84 fe ff       	call   c0004641 <f_lseek>
c001c1b9:	83 c4 10             	add    esp,0x10
c001c1bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c1c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c1c4:	85 c0                	test   eax,eax
c001c1c6:	75 08                	jne    c001c1d0 <FAT::seek(void*, unsigned long long)+0x4c>
c001c1c8:	b8 00 00 00 00       	mov    eax,0x0
c001c1cd:	eb 09                	jmp    c001c1d8 <FAT::seek(void*, unsigned long long)+0x54>
c001c1cf:	90                   	nop
c001c1d0:	b8 01 00 00 00       	mov    eax,0x1
c001c1d5:	8d 76 00             	lea    esi,[esi+0x0]
c001c1d8:	83 c4 2c             	add    esp,0x2c
c001c1db:	c3                   	ret    

c001c1dc <fatWrapperReadDisk>:
c001c1dc:	53                   	push   ebx
c001c1dd:	83 ec 18             	sub    esp,0x18
c001c1e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c1e4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c1e8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c1ed:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c001c1f4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c1f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c1fc:	ba 00 00 00 00       	mov    edx,0x0
c001c201:	83 ec 0c             	sub    esp,0xc
c001c204:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c208:	53                   	push   ebx
c001c209:	52                   	push   edx
c001c20a:	50                   	push   eax
c001c20b:	51                   	push   ecx
c001c20c:	e8 73 e8 fe ff       	call   c000aa84 <LogicalDisk::read(unsigned long long, int, void*)>
c001c211:	83 c4 20             	add    esp,0x20
c001c214:	83 c4 18             	add    esp,0x18
c001c217:	5b                   	pop    ebx
c001c218:	c3                   	ret    
c001c219:	8d 76 00             	lea    esi,[esi+0x0]

c001c21c <fatWrapperWriteDisk>:
c001c21c:	53                   	push   ebx
c001c21d:	83 ec 18             	sub    esp,0x18
c001c220:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c224:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c228:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c22d:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c001c234:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c238:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c23c:	ba 00 00 00 00       	mov    edx,0x0
c001c241:	83 ec 0c             	sub    esp,0xc
c001c244:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c248:	53                   	push   ebx
c001c249:	52                   	push   edx
c001c24a:	50                   	push   eax
c001c24b:	51                   	push   ecx
c001c24c:	e8 9f e8 fe ff       	call   c000aaf0 <LogicalDisk::write(unsigned long long, int, void*)>
c001c251:	83 c4 20             	add    esp,0x20
c001c254:	83 c4 18             	add    esp,0x18
c001c257:	5b                   	pop    ebx
c001c258:	c3                   	ret    
c001c259:	8d 76 00             	lea    esi,[esi+0x0]

c001c25c <fatWrapperIoctl>:
c001c25c:	53                   	push   ebx
c001c25d:	83 ec 28             	sub    esp,0x28
c001c260:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c264:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c268:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c26c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c270:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c275:	83 f8 02             	cmp    eax,0x2
c001c278:	75 32                	jne    c001c2ac <fatWrapperIoctl+0x50>
c001c27a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c27e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c282:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c287:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c001c28e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c294:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c29a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c29e:	66 89 02             	mov    WORD PTR [edx],ax
c001c2a1:	b8 00 00 00 00       	mov    eax,0x0
c001c2a6:	e9 c5 00 00 00       	jmp    c001c370 <fatWrapperIoctl+0x114>
c001c2ab:	90                   	nop
c001c2ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c2b1:	83 f8 01             	cmp    eax,0x1
c001c2b4:	75 6a                	jne    c001c320 <fatWrapperIoctl+0xc4>
c001c2b6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c2ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c2be:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c2c3:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c001c2ca:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c2d0:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001c2d6:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001c2dc:	89 c8                	mov    eax,ecx
c001c2de:	89 da                	mov    edx,ebx
c001c2e0:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c2e4:	c1 e0 0a             	shl    eax,0xa
c001c2e7:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c2ec:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c001c2f3:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001c2f9:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001c2ff:	89 cb                	mov    ebx,ecx
c001c301:	c1 fb 1f             	sar    ebx,0x1f
c001c304:	53                   	push   ebx
c001c305:	51                   	push   ecx
c001c306:	52                   	push   edx
c001c307:	50                   	push   eax
c001c308:	e8 97 59 00 00       	call   c0021ca4 <__udivdi3>
c001c30d:	83 c4 10             	add    esp,0x10
c001c310:	89 c2                	mov    edx,eax
c001c312:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c316:	89 10                	mov    DWORD PTR [eax],edx
c001c318:	b8 00 00 00 00       	mov    eax,0x0
c001c31d:	eb 51                	jmp    c001c370 <fatWrapperIoctl+0x114>
c001c31f:	90                   	nop
c001c320:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c325:	85 c0                	test   eax,eax
c001c327:	75 07                	jne    c001c330 <fatWrapperIoctl+0xd4>
c001c329:	b8 00 00 00 00       	mov    eax,0x0
c001c32e:	eb 40                	jmp    c001c370 <fatWrapperIoctl+0x114>
c001c330:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c335:	83 f8 03             	cmp    eax,0x3
c001c338:	75 1a                	jne    c001c354 <fatWrapperIoctl+0xf8>
c001c33a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c33e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c342:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c346:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001c34c:	b8 00 00 00 00       	mov    eax,0x0
c001c351:	eb 1d                	jmp    c001c370 <fatWrapperIoctl+0x114>
c001c353:	90                   	nop
c001c354:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c359:	83 f8 04             	cmp    eax,0x4
c001c35c:	75 0a                	jne    c001c368 <fatWrapperIoctl+0x10c>
c001c35e:	b8 00 00 00 00       	mov    eax,0x0
c001c363:	eb 0b                	jmp    c001c370 <fatWrapperIoctl+0x114>
c001c365:	8d 76 00             	lea    esi,[esi+0x0]
c001c368:	b8 04 00 00 00       	mov    eax,0x4
c001c36d:	8d 76 00             	lea    esi,[esi+0x0]
c001c370:	83 c4 28             	add    esp,0x28
c001c373:	5b                   	pop    ebx
c001c374:	c3                   	ret    
c001c375:	90                   	nop
c001c376:	66 90                	xchg   ax,ax

c001c378 <FAT::FAT()>:
c001c378:	83 ec 1c             	sub    esp,0x1c
c001c37b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c37f:	83 ec 0c             	sub    esp,0xc
c001c382:	50                   	push   eax
c001c383:	e8 1c ba fe ff       	call   c0007da4 <Filesystem::Filesystem()>
c001c388:	83 c4 10             	add    esp,0x10
c001c38b:	ba b4 5e 02 c0       	mov    edx,0xc0025eb4
c001c390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c394:	89 10                	mov    DWORD PTR [eax],edx
c001c396:	c7 05 20 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb20,0x0
c001c3a0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c3a8:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001c3ad:	7f 19                	jg     c001c3c8 <FAT::FAT()+0x50>
c001c3af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c3b3:	c7 04 85 40 fb 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd04c0],0xffffffff
c001c3be:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001c3c3:	eb e3                	jmp    c001c3a8 <FAT::FAT()+0x30>
c001c3c5:	8d 76 00             	lea    esi,[esi+0x0]
c001c3c8:	90                   	nop
c001c3c9:	83 c4 1c             	add    esp,0x1c
c001c3cc:	c3                   	ret    
c001c3cd:	90                   	nop
c001c3ce:	66 90                	xchg   ax,ax

c001c3d0 <FAT::fixFilepath(char*)>:
c001c3d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3d4:	8a 00                	mov    al,BYTE PTR [eax]
c001c3d6:	0f be c0             	movsx  eax,al
c001c3d9:	83 f8 40             	cmp    eax,0x40
c001c3dc:	7e 2e                	jle    c001c40c <FAT::fixFilepath(char*)+0x3c>
c001c3de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3e2:	8a 00                	mov    al,BYTE PTR [eax]
c001c3e4:	83 e8 41             	sub    eax,0x41
c001c3e7:	88 c2                	mov    dl,al
c001c3e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3ed:	88 10                	mov    BYTE PTR [eax],dl
c001c3ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3f3:	8a 00                	mov    al,BYTE PTR [eax]
c001c3f5:	0f be c0             	movsx  eax,al
c001c3f8:	8b 04 85 40 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd04c0]
c001c3ff:	83 c0 30             	add    eax,0x30
c001c402:	88 c2                	mov    dl,al
c001c404:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c408:	88 10                	mov    BYTE PTR [eax],dl
c001c40a:	66 90                	xchg   ax,ax
c001c40c:	90                   	nop
c001c40d:	c3                   	ret    
c001c40e:	66 90                	xchg   ax,ax

c001c410 <FAT::open(char const*, void**, FileOpenMode)>:
c001c410:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c416:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c41e:	74 0c                	je     c001c42c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001c420:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c428:	75 0e                	jne    c001c438 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001c42a:	66 90                	xchg   ax,ax
c001c42c:	b8 04 00 00 00       	mov    eax,0x4
c001c431:	e9 46 01 00 00       	jmp    c001c57c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001c436:	66 90                	xchg   ax,ax
c001c438:	83 ec 08             	sub    esp,0x8
c001c43b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c442:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c446:	50                   	push   eax
c001c447:	e8 f4 41 fe ff       	call   c0000640 <strcpy>
c001c44c:	83 c4 10             	add    esp,0x10
c001c44f:	83 ec 08             	sub    esp,0x8
c001c452:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c456:	50                   	push   eax
c001c457:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c45e:	e8 6d ff ff ff       	call   c001c3d0 <FAT::fixFilepath(char*)>
c001c463:	83 c4 10             	add    esp,0x10
c001c466:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001c46e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c475:	83 e0 01             	and    eax,0x1
c001c478:	74 12                	je     c001c48c <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001c47a:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c481:	83 c8 01             	or     eax,0x1
c001c484:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c48b:	90                   	nop
c001c48c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c493:	83 e0 04             	and    eax,0x4
c001c496:	74 24                	je     c001c4bc <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001c498:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c49f:	83 c8 30             	or     eax,0x30
c001c4a2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c4a9:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c4b0:	83 c8 02             	or     eax,0x2
c001c4b3:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c4ba:	66 90                	xchg   ax,ax
c001c4bc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c4c3:	83 e0 02             	and    eax,0x2
c001c4c6:	74 14                	je     c001c4dc <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001c4c8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c4cf:	83 c8 02             	or     eax,0x2
c001c4d2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c4d9:	8d 76 00             	lea    esi,[esi+0x0]
c001c4dc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c4e3:	83 e0 08             	and    eax,0x8
c001c4e6:	74 14                	je     c001c4fc <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001c4e8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c4ef:	83 c8 04             	or     eax,0x4
c001c4f2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c4f9:	8d 76 00             	lea    esi,[esi+0x0]
c001c4fc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c503:	83 e0 10             	and    eax,0x10
c001c506:	74 14                	je     c001c51c <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001c508:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c50f:	83 c8 08             	or     eax,0x8
c001c512:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c519:	8d 76 00             	lea    esi,[esi+0x0]
c001c51c:	83 ec 0c             	sub    esp,0xc
c001c51f:	68 28 02 00 00       	push   0x228
c001c524:	e8 be 37 ff ff       	call   c000fce7 <malloc>
c001c529:	83 c4 10             	add    esp,0x10
c001c52c:	89 c2                	mov    edx,eax
c001c52e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c535:	89 10                	mov    DWORD PTR [eax],edx
c001c537:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001c53f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c546:	8b 00                	mov    eax,DWORD PTR [eax]
c001c548:	83 ec 04             	sub    esp,0x4
c001c54b:	52                   	push   edx
c001c54c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001c550:	52                   	push   edx
c001c551:	50                   	push   eax
c001c552:	e8 ec 78 fe ff       	call   c0003e43 <f_open>
c001c557:	83 c4 10             	add    esp,0x10
c001c55a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001c561:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001c569:	74 09                	je     c001c574 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001c56b:	b8 01 00 00 00       	mov    eax,0x1
c001c570:	eb 0a                	jmp    c001c57c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001c572:	66 90                	xchg   ax,ax
c001c574:	b8 00 00 00 00       	mov    eax,0x0
c001c579:	8d 76 00             	lea    esi,[esi+0x0]
c001c57c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c582:	c3                   	ret    
c001c583:	90                   	nop

c001c584 <FAT::openDir(char const*, void**)>:
c001c584:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c58a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c592:	74 0c                	je     c001c5a0 <FAT::openDir(char const*, void**)+0x1c>
c001c594:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c59c:	75 0e                	jne    c001c5ac <FAT::openDir(char const*, void**)+0x28>
c001c59e:	66 90                	xchg   ax,ax
c001c5a0:	b8 04 00 00 00       	mov    eax,0x4
c001c5a5:	e9 82 00 00 00       	jmp    c001c62c <FAT::openDir(char const*, void**)+0xa8>
c001c5aa:	66 90                	xchg   ax,ax
c001c5ac:	83 ec 08             	sub    esp,0x8
c001c5af:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c5b6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c5ba:	50                   	push   eax
c001c5bb:	e8 80 40 fe ff       	call   c0000640 <strcpy>
c001c5c0:	83 c4 10             	add    esp,0x10
c001c5c3:	83 ec 08             	sub    esp,0x8
c001c5c6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c5ca:	50                   	push   eax
c001c5cb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c5d2:	e8 f9 fd ff ff       	call   c001c3d0 <FAT::fixFilepath(char*)>
c001c5d7:	83 c4 10             	add    esp,0x10
c001c5da:	83 ec 0c             	sub    esp,0xc
c001c5dd:	6a 30                	push   0x30
c001c5df:	e8 03 37 ff ff       	call   c000fce7 <malloc>
c001c5e4:	83 c4 10             	add    esp,0x10
c001c5e7:	89 c2                	mov    edx,eax
c001c5e9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c5f0:	89 10                	mov    DWORD PTR [eax],edx
c001c5f2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c5f9:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5fb:	83 ec 08             	sub    esp,0x8
c001c5fe:	8d 54 24 14          	lea    edx,[esp+0x14]
c001c602:	52                   	push   edx
c001c603:	50                   	push   eax
c001c604:	e8 e9 81 fe ff       	call   c00047f2 <f_opendir>
c001c609:	83 c4 10             	add    esp,0x10
c001c60c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c613:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001c61b:	74 07                	je     c001c624 <FAT::openDir(char const*, void**)+0xa0>
c001c61d:	b8 01 00 00 00       	mov    eax,0x1
c001c622:	eb 08                	jmp    c001c62c <FAT::openDir(char const*, void**)+0xa8>
c001c624:	b8 00 00 00 00       	mov    eax,0x0
c001c629:	8d 76 00             	lea    esi,[esi+0x0]
c001c62c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c632:	c3                   	ret    
c001c633:	90                   	nop

c001c634 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001c634:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c63a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001c642:	75 0c                	jne    c001c650 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001c644:	b8 04 00 00 00       	mov    eax,0x4
c001c649:	e9 d6 00 00 00       	jmp    c001c724 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c64e:	66 90                	xchg   ax,ax
c001c650:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001c658:	75 0a                	jne    c001c664 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001c65a:	b8 04 00 00 00       	mov    eax,0x4
c001c65f:	e9 c0 00 00 00       	jmp    c001c724 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c664:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001c66c:	75 0a                	jne    c001c678 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001c66e:	b8 04 00 00 00       	mov    eax,0x4
c001c673:	e9 ac 00 00 00       	jmp    c001c724 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c678:	83 ec 08             	sub    esp,0x8
c001c67b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c682:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c689:	50                   	push   eax
c001c68a:	e8 b1 3f fe ff       	call   c0000640 <strcpy>
c001c68f:	83 c4 10             	add    esp,0x10
c001c692:	83 ec 08             	sub    esp,0x8
c001c695:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c69c:	50                   	push   eax
c001c69d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c6a4:	e8 27 fd ff ff       	call   c001c3d0 <FAT::fixFilepath(char*)>
c001c6a9:	83 c4 10             	add    esp,0x10
c001c6ac:	83 ec 08             	sub    esp,0x8
c001c6af:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c6b3:	50                   	push   eax
c001c6b4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c6bb:	50                   	push   eax
c001c6bc:	e8 b0 82 fe ff       	call   c0004971 <f_stat>
c001c6c1:	83 c4 10             	add    esp,0x10
c001c6c4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c6cb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c6d2:	85 c0                	test   eax,eax
c001c6d4:	74 0a                	je     c001c6e0 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001c6d6:	83 f8 04             	cmp    eax,0x4
c001c6d9:	74 39                	je     c001c714 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001c6db:	eb 3f                	jmp    c001c71c <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001c6dd:	8d 76 00             	lea    esi,[esi+0x0]
c001c6e0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c6e4:	0f b6 c0             	movzx  eax,al
c001c6e7:	83 e0 10             	and    eax,0x10
c001c6ea:	0f 95 c2             	setne  dl
c001c6ed:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001c6f4:	88 10                	mov    BYTE PTR [eax],dl
c001c6f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6fa:	ba 00 00 00 00       	mov    edx,0x0
c001c6ff:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001c706:	89 01                	mov    DWORD PTR [ecx],eax
c001c708:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c70b:	b8 00 00 00 00       	mov    eax,0x0
c001c710:	eb 12                	jmp    c001c724 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c712:	66 90                	xchg   ax,ax
c001c714:	b8 02 00 00 00       	mov    eax,0x2
c001c719:	eb 09                	jmp    c001c724 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c71b:	90                   	nop
c001c71c:	b8 01 00 00 00       	mov    eax,0x1
c001c721:	8d 76 00             	lea    esi,[esi+0x0]
c001c724:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c72a:	c3                   	ret    
c001c72b:	90                   	nop

c001c72c <FAT::unlink(char const*)>:
c001c72c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c732:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c73a:	75 08                	jne    c001c744 <FAT::unlink(char const*)+0x18>
c001c73c:	b8 04 00 00 00       	mov    eax,0x4
c001c741:	eb 61                	jmp    c001c7a4 <FAT::unlink(char const*)+0x78>
c001c743:	90                   	nop
c001c744:	83 ec 08             	sub    esp,0x8
c001c747:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c74e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c752:	50                   	push   eax
c001c753:	e8 e8 3e fe ff       	call   c0000640 <strcpy>
c001c758:	83 c4 10             	add    esp,0x10
c001c75b:	83 ec 08             	sub    esp,0x8
c001c75e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c762:	50                   	push   eax
c001c763:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c76a:	e8 61 fc ff ff       	call   c001c3d0 <FAT::fixFilepath(char*)>
c001c76f:	83 c4 10             	add    esp,0x10
c001c772:	83 ec 0c             	sub    esp,0xc
c001c775:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c779:	50                   	push   eax
c001c77a:	e8 64 84 fe ff       	call   c0004be3 <f_unlink>
c001c77f:	83 c4 10             	add    esp,0x10
c001c782:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c789:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c790:	85 c0                	test   eax,eax
c001c792:	75 08                	jne    c001c79c <FAT::unlink(char const*)+0x70>
c001c794:	b8 00 00 00 00       	mov    eax,0x0
c001c799:	eb 09                	jmp    c001c7a4 <FAT::unlink(char const*)+0x78>
c001c79b:	90                   	nop
c001c79c:	b8 01 00 00 00       	mov    eax,0x1
c001c7a1:	8d 76 00             	lea    esi,[esi+0x0]
c001c7a4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c7aa:	c3                   	ret    
c001c7ab:	90                   	nop

c001c7ac <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001c7ac:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001c7b2:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001c7b9:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001c7c0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c7c4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c7c8:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001c7d0:	75 0a                	jne    c001c7dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001c7d2:	b8 04 00 00 00       	mov    eax,0x4
c001c7d7:	e9 7c 01 00 00       	jmp    c001c958 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001c7dc:	83 ec 08             	sub    esp,0x8
c001c7df:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c7e6:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c7ea:	50                   	push   eax
c001c7eb:	e8 50 3e fe ff       	call   c0000640 <strcpy>
c001c7f0:	83 c4 10             	add    esp,0x10
c001c7f3:	83 ec 08             	sub    esp,0x8
c001c7f6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c7fa:	50                   	push   eax
c001c7fb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c802:	e8 c9 fb ff ff       	call   c001c3d0 <FAT::fixFilepath(char*)>
c001c807:	83 c4 10             	add    esp,0x10
c001c80a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001c812:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001c81a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c81f:	83 e0 01             	and    eax,0x1
c001c822:	74 14                	je     c001c838 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001c824:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c82b:	83 c8 01             	or     eax,0x1
c001c82e:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c835:	8d 76 00             	lea    esi,[esi+0x0]
c001c838:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c83d:	83 e0 02             	and    eax,0x2
c001c840:	74 12                	je     c001c854 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001c842:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c849:	83 c8 20             	or     eax,0x20
c001c84c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c853:	90                   	nop
c001c854:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c859:	83 e0 04             	and    eax,0x4
c001c85c:	74 12                	je     c001c870 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001c85e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c865:	83 c8 04             	or     eax,0x4
c001c868:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c86f:	90                   	nop
c001c870:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c875:	83 e0 08             	and    eax,0x8
c001c878:	74 12                	je     c001c88c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001c87a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c881:	83 c8 02             	or     eax,0x2
c001c884:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c88b:	90                   	nop
c001c88c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c891:	83 e0 01             	and    eax,0x1
c001c894:	74 12                	je     c001c8a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001c896:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c89d:	83 c8 01             	or     eax,0x1
c001c8a0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c8a7:	90                   	nop
c001c8a8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c8ad:	83 e0 02             	and    eax,0x2
c001c8b0:	74 12                	je     c001c8c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001c8b2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c8b9:	83 c8 20             	or     eax,0x20
c001c8bc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c8c3:	90                   	nop
c001c8c4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c8c9:	83 e0 04             	and    eax,0x4
c001c8cc:	74 12                	je     c001c8e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001c8ce:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c8d5:	83 c8 04             	or     eax,0x4
c001c8d8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c8df:	90                   	nop
c001c8e0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c8e5:	83 e0 08             	and    eax,0x8
c001c8e8:	74 12                	je     c001c8fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001c8ea:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c8f1:	83 c8 02             	or     eax,0x2
c001c8f4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c8fb:	90                   	nop
c001c8fc:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001c903:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c90a:	09 d0                	or     eax,edx
c001c90c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c913:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001c91b:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001c923:	83 ec 04             	sub    esp,0x4
c001c926:	52                   	push   edx
c001c927:	50                   	push   eax
c001c928:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c92c:	50                   	push   eax
c001c92d:	e8 26 87 fe ff       	call   c0005058 <f_chmod>
c001c932:	83 c4 10             	add    esp,0x10
c001c935:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001c93c:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001c943:	85 c0                	test   eax,eax
c001c945:	75 09                	jne    c001c950 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001c947:	b8 00 00 00 00       	mov    eax,0x0
c001c94c:	eb 0a                	jmp    c001c958 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001c94e:	66 90                	xchg   ax,ax
c001c950:	b8 01 00 00 00       	mov    eax,0x1
c001c955:	8d 76 00             	lea    esi,[esi+0x0]
c001c958:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c95e:	c3                   	ret    
c001c95f:	90                   	nop

c001c960 <FAT::rename(char const*, char const*)>:
c001c960:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c966:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001c96e:	74 0c                	je     c001c97c <FAT::rename(char const*, char const*)+0x1c>
c001c970:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001c978:	75 0e                	jne    c001c988 <FAT::rename(char const*, char const*)+0x28>
c001c97a:	66 90                	xchg   ax,ax
c001c97c:	b8 04 00 00 00       	mov    eax,0x4
c001c981:	e9 9e 00 00 00       	jmp    c001ca24 <FAT::rename(char const*, char const*)+0xc4>
c001c986:	66 90                	xchg   ax,ax
c001c988:	83 ec 08             	sub    esp,0x8
c001c98b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c992:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c999:	50                   	push   eax
c001c99a:	e8 a1 3c fe ff       	call   c0000640 <strcpy>
c001c99f:	83 c4 10             	add    esp,0x10
c001c9a2:	83 ec 08             	sub    esp,0x8
c001c9a5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001c9ac:	50                   	push   eax
c001c9ad:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c9b4:	e8 17 fa ff ff       	call   c001c3d0 <FAT::fixFilepath(char*)>
c001c9b9:	83 c4 10             	add    esp,0x10
c001c9bc:	83 ec 08             	sub    esp,0x8
c001c9bf:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001c9c6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c9ca:	50                   	push   eax
c001c9cb:	e8 70 3c fe ff       	call   c0000640 <strcpy>
c001c9d0:	83 c4 10             	add    esp,0x10
c001c9d3:	83 ec 08             	sub    esp,0x8
c001c9d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c9da:	50                   	push   eax
c001c9db:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c9e2:	e8 e9 f9 ff ff       	call   c001c3d0 <FAT::fixFilepath(char*)>
c001c9e7:	83 c4 10             	add    esp,0x10
c001c9ea:	83 ec 08             	sub    esp,0x8
c001c9ed:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c9f1:	50                   	push   eax
c001c9f2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c9f9:	50                   	push   eax
c001c9fa:	e8 a1 84 fe ff       	call   c0004ea0 <f_rename>
c001c9ff:	83 c4 10             	add    esp,0x10
c001ca02:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001ca09:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001ca10:	85 c0                	test   eax,eax
c001ca12:	75 08                	jne    c001ca1c <FAT::rename(char const*, char const*)+0xbc>
c001ca14:	b8 00 00 00 00       	mov    eax,0x0
c001ca19:	eb 09                	jmp    c001ca24 <FAT::rename(char const*, char const*)+0xc4>
c001ca1b:	90                   	nop
c001ca1c:	b8 01 00 00 00       	mov    eax,0x1
c001ca21:	8d 76 00             	lea    esi,[esi+0x0]
c001ca24:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ca2a:	c3                   	ret    
c001ca2b:	90                   	nop

c001ca2c <FAT::mkdir(char const*)>:
c001ca2c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ca32:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ca3a:	75 08                	jne    c001ca44 <FAT::mkdir(char const*)+0x18>
c001ca3c:	b8 04 00 00 00       	mov    eax,0x4
c001ca41:	eb 61                	jmp    c001caa4 <FAT::mkdir(char const*)+0x78>
c001ca43:	90                   	nop
c001ca44:	83 ec 08             	sub    esp,0x8
c001ca47:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ca4e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ca52:	50                   	push   eax
c001ca53:	e8 e8 3b fe ff       	call   c0000640 <strcpy>
c001ca58:	83 c4 10             	add    esp,0x10
c001ca5b:	83 ec 08             	sub    esp,0x8
c001ca5e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ca62:	50                   	push   eax
c001ca63:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ca6a:	e8 61 f9 ff ff       	call   c001c3d0 <FAT::fixFilepath(char*)>
c001ca6f:	83 c4 10             	add    esp,0x10
c001ca72:	83 ec 0c             	sub    esp,0xc
c001ca75:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ca79:	50                   	push   eax
c001ca7a:	e8 86 82 fe ff       	call   c0004d05 <f_mkdir>
c001ca7f:	83 c4 10             	add    esp,0x10
c001ca82:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ca89:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ca90:	85 c0                	test   eax,eax
c001ca92:	75 08                	jne    c001ca9c <FAT::mkdir(char const*)+0x70>
c001ca94:	b8 00 00 00 00       	mov    eax,0x0
c001ca99:	eb 09                	jmp    c001caa4 <FAT::mkdir(char const*)+0x78>
c001ca9b:	90                   	nop
c001ca9c:	b8 01 00 00 00       	mov    eax,0x1
c001caa1:	8d 76 00             	lea    esi,[esi+0x0]
c001caa4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001caaa:	c3                   	ret    
c001caab:	90                   	nop

c001caac <FAT::exists(char const*)>:
c001caac:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001cab2:	83 ec 08             	sub    esp,0x8
c001cab5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001cabc:	8d 44 24 10          	lea    eax,[esp+0x10]
c001cac0:	50                   	push   eax
c001cac1:	e8 7a 3b fe ff       	call   c0000640 <strcpy>
c001cac6:	83 c4 10             	add    esp,0x10
c001cac9:	83 ec 08             	sub    esp,0x8
c001cacc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001cad0:	50                   	push   eax
c001cad1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001cad8:	e8 f3 f8 ff ff       	call   c001c3d0 <FAT::fixFilepath(char*)>
c001cadd:	83 c4 10             	add    esp,0x10
c001cae0:	83 ec 08             	sub    esp,0x8
c001cae3:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001caea:	50                   	push   eax
c001caeb:	8d 44 24 10          	lea    eax,[esp+0x10]
c001caef:	50                   	push   eax
c001caf0:	e8 7c 7e fe ff       	call   c0004971 <f_stat>
c001caf5:	83 c4 10             	add    esp,0x10
c001caf8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001caff:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001cb06:	85 c0                	test   eax,eax
c001cb08:	75 06                	jne    c001cb10 <FAT::exists(char const*)+0x64>
c001cb0a:	b0 01                	mov    al,0x1
c001cb0c:	eb 06                	jmp    c001cb14 <FAT::exists(char const*)+0x68>
c001cb0e:	66 90                	xchg   ax,ax
c001cb10:	b0 00                	mov    al,0x0
c001cb12:	66 90                	xchg   ax,ax
c001cb14:	81 c4 2c 02 00 00    	add    esp,0x22c
c001cb1a:	c3                   	ret    
c001cb1b:	90                   	nop

c001cb1c <isoReadDiscSectorHelper>:
c001cb1c:	83 ec 2c             	sub    esp,0x2c
c001cb1f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001cb23:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cb27:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001cb2c:	83 e8 41             	sub    eax,0x41
c001cb2f:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c001cb36:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cb3a:	ba 00 00 00 00       	mov    edx,0x0
c001cb3f:	83 ec 0c             	sub    esp,0xc
c001cb42:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cb46:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001cb4a:	52                   	push   edx
c001cb4b:	50                   	push   eax
c001cb4c:	51                   	push   ecx
c001cb4d:	e8 32 df fe ff       	call   c000aa84 <LogicalDisk::read(unsigned long long, int, void*)>
c001cb52:	83 c4 20             	add    esp,0x20
c001cb55:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb59:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001cb5e:	74 0c                	je     c001cb6c <isoReadDiscSectorHelper+0x50>
c001cb60:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cb64:	c1 e0 0b             	shl    eax,0xb
c001cb67:	eb 0b                	jmp    c001cb74 <isoReadDiscSectorHelper+0x58>
c001cb69:	8d 76 00             	lea    esi,[esi+0x0]
c001cb6c:	b8 00 00 00 00       	mov    eax,0x0
c001cb71:	8d 76 00             	lea    esi,[esi+0x0]
c001cb74:	83 c4 2c             	add    esp,0x2c
c001cb77:	c3                   	ret    

c001cb78 <iso_kprintf>:
c001cb78:	83 ec 0c             	sub    esp,0xc
c001cb7b:	83 ec 08             	sub    esp,0x8
c001cb7e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cb82:	68 8c 5b 02 c0       	push   0xc0025b8c
c001cb87:	e8 d8 a3 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001cb8c:	83 c4 10             	add    esp,0x10
c001cb8f:	90                   	nop
c001cb90:	83 c4 0c             	add    esp,0xc
c001cb93:	c3                   	ret    

c001cb94 <iso_kprintfd>:
c001cb94:	83 ec 0c             	sub    esp,0xc
c001cb97:	83 ec 08             	sub    esp,0x8
c001cb9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cb9e:	68 fa 43 02 c0       	push   0xc00243fa
c001cba3:	e8 bc a3 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001cba8:	83 c4 10             	add    esp,0x10
c001cbab:	90                   	nop
c001cbac:	83 c4 0c             	add    esp,0xc
c001cbaf:	c3                   	ret    

c001cbb0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001cbb0:	b8 08 00 00 00       	mov    eax,0x8
c001cbb5:	c3                   	ret    

c001cbb6 <ISO9660::truncate(void*, unsigned long long)>:
c001cbb6:	b8 01 00 00 00       	mov    eax,0x1
c001cbbb:	c3                   	ret    

c001cbbc <ISO9660::getName()>:
c001cbbc:	b8 18 5f 02 c0       	mov    eax,0xc0025f18
c001cbc1:	c3                   	ret    

c001cbc2 <ISO9660::closeDir(void*)>:
c001cbc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbc6:	8b 00                	mov    eax,DWORD PTR [eax]
c001cbc8:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001cbcb:	90                   	nop

c001cbcc <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001cbcc:	b8 01 00 00 00       	mov    eax,0x1
c001cbd1:	c3                   	ret    

c001cbd2 <ISO9660::unlink(char const*)>:
c001cbd2:	b8 01 00 00 00       	mov    eax,0x1
c001cbd7:	c3                   	ret    

c001cbd8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001cbd8:	b8 03 00 00 00       	mov    eax,0x3
c001cbdd:	c3                   	ret    

c001cbde <ISO9660::rename(char const*, char const*)>:
c001cbde:	b8 01 00 00 00       	mov    eax,0x1
c001cbe3:	c3                   	ret    

c001cbe4 <ISO9660::mkdir(char const*)>:
c001cbe4:	b8 01 00 00 00       	mov    eax,0x1
c001cbe9:	c3                   	ret    

c001cbea <ISO9660::~ISO9660()>:
c001cbea:	83 ec 0c             	sub    esp,0xc
c001cbed:	ba 58 60 02 c0       	mov    edx,0xc0026058
c001cbf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbf6:	89 10                	mov    DWORD PTR [eax],edx
c001cbf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbfc:	83 ec 0c             	sub    esp,0xc
c001cbff:	50                   	push   eax
c001cc00:	e8 c3 b1 fe ff       	call   c0007dc8 <Filesystem::~Filesystem()>
c001cc05:	83 c4 10             	add    esp,0x10
c001cc08:	90                   	nop
c001cc09:	83 c4 0c             	add    esp,0xc
c001cc0c:	c3                   	ret    
c001cc0d:	90                   	nop

c001cc0e <ISO9660::~ISO9660()>:
c001cc0e:	83 ec 0c             	sub    esp,0xc
c001cc11:	83 ec 0c             	sub    esp,0xc
c001cc14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc18:	e8 cd ff ff ff       	call   c001cbea <ISO9660::~ISO9660()>
c001cc1d:	83 c4 10             	add    esp,0x10
c001cc20:	83 ec 08             	sub    esp,0x8
c001cc23:	6a 08                	push   0x8
c001cc25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc29:	e8 2d 07 ff ff       	call   c000d35b <operator delete(void*, unsigned long)>
c001cc2e:	83 c4 10             	add    esp,0x10
c001cc31:	83 c4 0c             	add    esp,0xc
c001cc34:	c3                   	ret    
c001cc35:	90                   	nop

c001cc36 <ISO9660::exists(char const*)>:
c001cc36:	83 ec 18             	sub    esp,0x18
c001cc39:	68 33 5f 02 c0       	push   0xc0025f33
c001cc3e:	e8 eb 33 ff ff       	call   c001002e <KePanic(char const*)>
c001cc43:	31 c0                	xor    eax,eax
c001cc45:	83 c4 1c             	add    esp,0x1c
c001cc48:	c3                   	ret    
c001cc49:	90                   	nop

c001cc4a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001cc4a:	56                   	push   esi
c001cc4b:	53                   	push   ebx
c001cc4c:	53                   	push   ebx
c001cc4d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cc51:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cc55:	85 db                	test   ebx,ebx
c001cc57:	0f 84 ca 00 00 00    	je     c001cd27 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001cc5d:	85 f6                	test   esi,esi
c001cc5f:	0f 84 c2 00 00 00    	je     c001cd27 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001cc65:	b8 03 00 00 00       	mov    eax,0x3
c001cc6a:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001cc6f:	0f 85 b7 00 00 00    	jne    c001cd2c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001cc75:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001cc77:	0f be 05 20 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc20
c001cc7e:	38 0d 20 fc 02 c0    	cmp    BYTE PTR ds:0xc002fc20,cl
c001cc84:	74 1b                	je     c001cca1 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001cc86:	85 c0                	test   eax,eax
c001cc88:	74 10                	je     c001cc9a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001cc8a:	83 ec 0c             	sub    esp,0xc
c001cc8d:	68 51 5f 02 c0       	push   0xc0025f51
c001cc92:	e8 97 33 ff ff       	call   c001002e <KePanic(char const*)>
c001cc97:	83 c4 10             	add    esp,0x10
c001cc9a:	8a 03                	mov    al,BYTE PTR [ebx]
c001cc9c:	a2 20 fc 02 c0       	mov    ds:0xc002fc20,al
c001cca1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001cca4:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001ccab:	85 c0                	test   eax,eax
c001ccad:	74 09                	je     c001ccb8 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001ccaf:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001ccb6:	74 48                	je     c001cd00 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001ccb8:	83 ec 0c             	sub    esp,0xc
c001ccbb:	68 61 5f 02 c0       	push   0xc0025f61
c001ccc0:	e8 9f a2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ccc5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001ccc8:	83 c4 10             	add    esp,0x10
c001cccb:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001ccd2:	85 c0                	test   eax,eax
c001ccd4:	74 17                	je     c001cced <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001ccd6:	83 ec 0c             	sub    esp,0xc
c001ccd9:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001cce0:	68 81 5f 02 c0       	push   0xc0025f81
c001cce5:	e8 7a a2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ccea:	83 c4 10             	add    esp,0x10
c001cced:	83 ec 0c             	sub    esp,0xc
c001ccf0:	0f be 05 20 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc20
c001ccf7:	50                   	push   eax
c001ccf8:	e8 31 9f fe ff       	call   c0006c2e <init_percd>
c001ccfd:	83 c4 10             	add    esp,0x10
c001cd00:	83 c3 03             	add    ebx,0x3
c001cd03:	51                   	push   ecx
c001cd04:	51                   	push   ecx
c001cd05:	6a 00                	push   0x0
c001cd07:	53                   	push   ebx
c001cd08:	e8 e8 99 fe ff       	call   c00066f5 <iso_open>
c001cd0d:	83 c4 10             	add    esp,0x10
c001cd10:	89 c2                	mov    edx,eax
c001cd12:	b8 01 00 00 00       	mov    eax,0x1
c001cd17:	83 fa ff             	cmp    edx,0xffffffff
c001cd1a:	74 10                	je     c001cd2c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001cd1c:	83 c2 32             	add    edx,0x32
c001cd1f:	31 c0                	xor    eax,eax
c001cd21:	01 d2                	add    edx,edx
c001cd23:	89 16                	mov    DWORD PTR [esi],edx
c001cd25:	eb 05                	jmp    c001cd2c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001cd27:	b8 04 00 00 00       	mov    eax,0x4
c001cd2c:	5a                   	pop    edx
c001cd2d:	5b                   	pop    ebx
c001cd2e:	5e                   	pop    esi
c001cd2f:	c3                   	ret    

c001cd30 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001cd30:	53                   	push   ebx
c001cd31:	83 ec 08             	sub    esp,0x8
c001cd34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cd38:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cd3c:	85 c0                	test   eax,eax
c001cd3e:	74 2d                	je     c001cd6d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001cd40:	85 db                	test   ebx,ebx
c001cd42:	74 29                	je     c001cd6d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001cd44:	b9 02 00 00 00       	mov    ecx,0x2
c001cd49:	52                   	push   edx
c001cd4a:	99                   	cdq    
c001cd4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd4f:	f7 f9                	idiv   ecx
c001cd51:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cd55:	83 e8 32             	sub    eax,0x32
c001cd58:	50                   	push   eax
c001cd59:	e8 3f 9a fe ff       	call   c000679d <iso_read>
c001cd5e:	83 c4 10             	add    esp,0x10
c001cd61:	89 03                	mov    DWORD PTR [ebx],eax
c001cd63:	09 d0                	or     eax,edx
c001cd65:	0f 94 c0             	sete   al
c001cd68:	0f b6 c0             	movzx  eax,al
c001cd6b:	eb 05                	jmp    c001cd72 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001cd6d:	b8 04 00 00 00       	mov    eax,0x4
c001cd72:	83 c4 08             	add    esp,0x8
c001cd75:	5b                   	pop    ebx
c001cd76:	c3                   	ret    
c001cd77:	90                   	nop

c001cd78 <ISO9660::seek(void*, unsigned long long)>:
c001cd78:	57                   	push   edi
c001cd79:	56                   	push   esi
c001cd7a:	b8 04 00 00 00       	mov    eax,0x4
c001cd7f:	51                   	push   ecx
c001cd80:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cd84:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cd88:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001cd8c:	85 d2                	test   edx,edx
c001cd8e:	74 26                	je     c001cdb6 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001cd90:	6a 00                	push   0x0
c001cd92:	b9 02 00 00 00       	mov    ecx,0x2
c001cd97:	57                   	push   edi
c001cd98:	89 d0                	mov    eax,edx
c001cd9a:	56                   	push   esi
c001cd9b:	99                   	cdq    
c001cd9c:	f7 f9                	idiv   ecx
c001cd9e:	83 e8 32             	sub    eax,0x32
c001cda1:	50                   	push   eax
c001cda2:	e8 0c 9b fe ff       	call   c00068b3 <iso_seek>
c001cda7:	83 c4 10             	add    esp,0x10
c001cdaa:	31 f0                	xor    eax,esi
c001cdac:	31 fa                	xor    edx,edi
c001cdae:	09 d0                	or     eax,edx
c001cdb0:	0f 95 c0             	setne  al
c001cdb3:	0f b6 c0             	movzx  eax,al
c001cdb6:	5a                   	pop    edx
c001cdb7:	5e                   	pop    esi
c001cdb8:	5f                   	pop    edi
c001cdb9:	c3                   	ret    

c001cdba <ISO9660::tell(void*, unsigned long long*)>:
c001cdba:	53                   	push   ebx
c001cdbb:	83 ec 08             	sub    esp,0x8
c001cdbe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cdc2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001cdc6:	85 c0                	test   eax,eax
c001cdc8:	74 24                	je     c001cdee <ISO9660::tell(void*, unsigned long long*)+0x34>
c001cdca:	85 db                	test   ebx,ebx
c001cdcc:	74 20                	je     c001cdee <ISO9660::tell(void*, unsigned long long*)+0x34>
c001cdce:	83 ec 0c             	sub    esp,0xc
c001cdd1:	b9 02 00 00 00       	mov    ecx,0x2
c001cdd6:	99                   	cdq    
c001cdd7:	f7 f9                	idiv   ecx
c001cdd9:	83 e8 32             	sub    eax,0x32
c001cddc:	50                   	push   eax
c001cddd:	e8 55 9b fe ff       	call   c0006937 <iso_tell>
c001cde2:	83 c4 10             	add    esp,0x10
c001cde5:	89 03                	mov    DWORD PTR [ebx],eax
c001cde7:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001cdea:	31 c0                	xor    eax,eax
c001cdec:	eb 05                	jmp    c001cdf3 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001cdee:	b8 04 00 00 00       	mov    eax,0x4
c001cdf3:	83 c4 08             	add    esp,0x8
c001cdf6:	5b                   	pop    ebx
c001cdf7:	c3                   	ret    

c001cdf8 <ISO9660::stat(void*, unsigned long long*)>:
c001cdf8:	53                   	push   ebx
c001cdf9:	83 ec 14             	sub    esp,0x14
c001cdfc:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ce00:	68 a5 5f 02 c0       	push   0xc0025fa5
c001ce05:	e8 5a a1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ce0a:	83 c4 10             	add    esp,0x10
c001ce0d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ce12:	74 2c                	je     c001ce40 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001ce14:	85 db                	test   ebx,ebx
c001ce16:	74 28                	je     c001ce40 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001ce18:	83 ec 0c             	sub    esp,0xc
c001ce1b:	b9 02 00 00 00       	mov    ecx,0x2
c001ce20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce24:	99                   	cdq    
c001ce25:	f7 f9                	idiv   ecx
c001ce27:	83 e8 32             	sub    eax,0x32
c001ce2a:	50                   	push   eax
c001ce2b:	e8 38 9b fe ff       	call   c0006968 <iso_total>
c001ce30:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ce37:	89 03                	mov    DWORD PTR [ebx],eax
c001ce39:	83 c4 10             	add    esp,0x10
c001ce3c:	31 c0                	xor    eax,eax
c001ce3e:	eb 05                	jmp    c001ce45 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001ce40:	b8 04 00 00 00       	mov    eax,0x4
c001ce45:	83 c4 08             	add    esp,0x8
c001ce48:	5b                   	pop    ebx
c001ce49:	c3                   	ret    

c001ce4a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001ce4a:	55                   	push   ebp
c001ce4b:	57                   	push   edi
c001ce4c:	56                   	push   esi
c001ce4d:	53                   	push   ebx
c001ce4e:	83 ec 18             	sub    esp,0x18
c001ce51:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ce55:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ce59:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ce5d:	68 ad 5f 02 c0       	push   0xc0025fad
c001ce62:	e8 fd a0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ce67:	83 c4 10             	add    esp,0x10
c001ce6a:	85 ff                	test   edi,edi
c001ce6c:	0f 94 c0             	sete   al
c001ce6f:	85 f6                	test   esi,esi
c001ce71:	0f 94 c2             	sete   dl
c001ce74:	09 d0                	or     eax,edx
c001ce76:	a8 01                	test   al,0x1
c001ce78:	0f 85 dd 00 00 00    	jne    c001cf5b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001ce7e:	85 db                	test   ebx,ebx
c001ce80:	0f 84 d5 00 00 00    	je     c001cf5b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001ce86:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ce89:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001ce8f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001ce96:	0f be 05 20 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc20
c001ce9d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001ce9f:	38 0d 20 fc 02 c0    	cmp    BYTE PTR ds:0xc002fc20,cl
c001cea5:	74 1b                	je     c001cec2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001cea7:	85 c0                	test   eax,eax
c001cea9:	74 10                	je     c001cebb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001ceab:	83 ec 0c             	sub    esp,0xc
c001ceae:	68 51 5f 02 c0       	push   0xc0025f51
c001ceb3:	e8 76 31 ff ff       	call   c001002e <KePanic(char const*)>
c001ceb8:	83 c4 10             	add    esp,0x10
c001cebb:	8a 03                	mov    al,BYTE PTR [ebx]
c001cebd:	a2 20 fc 02 c0       	mov    ds:0xc002fc20,al
c001cec2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001cec5:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001cecc:	85 c0                	test   eax,eax
c001cece:	74 09                	je     c001ced9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001ced0:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001ced7:	74 51                	je     c001cf2a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001ced9:	83 ec 0c             	sub    esp,0xc
c001cedc:	68 b5 5f 02 c0       	push   0xc0025fb5
c001cee1:	e8 7e a0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001cee6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001cee9:	83 c4 10             	add    esp,0x10
c001ceec:	83 3c 85 dc c9 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd3624],0x0
c001cef4:	74 21                	je     c001cf17 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001cef6:	83 ec 0c             	sub    esp,0xc
c001cef9:	68 d5 5f 02 c0       	push   0xc0025fd5
c001cefe:	e8 61 a0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001cf03:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001cf06:	83 c4 10             	add    esp,0x10
c001cf09:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001cf10:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001cf17:	83 ec 0c             	sub    esp,0xc
c001cf1a:	0f be 05 20 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc20
c001cf21:	50                   	push   eax
c001cf22:	e8 07 9d fe ff       	call   c0006c2e <init_percd>
c001cf27:	83 c4 10             	add    esp,0x10
c001cf2a:	83 c3 03             	add    ebx,0x3
c001cf2d:	52                   	push   edx
c001cf2e:	52                   	push   edx
c001cf2f:	6a 00                	push   0x0
c001cf31:	53                   	push   ebx
c001cf32:	e8 be 97 fe ff       	call   c00066f5 <iso_open>
c001cf37:	83 c4 10             	add    esp,0x10
c001cf3a:	89 c5                	mov    ebp,eax
c001cf3c:	83 f8 ff             	cmp    eax,0xffffffff
c001cf3f:	75 21                	jne    c001cf62 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001cf41:	50                   	push   eax
c001cf42:	50                   	push   eax
c001cf43:	6a 01                	push   0x1
c001cf45:	53                   	push   ebx
c001cf46:	e8 aa 97 fe ff       	call   c00066f5 <iso_open>
c001cf4b:	83 c4 10             	add    esp,0x10
c001cf4e:	ba 02 00 00 00       	mov    edx,0x2
c001cf53:	40                   	inc    eax
c001cf54:	74 2b                	je     c001cf81 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001cf56:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001cf59:	eb 24                	jmp    c001cf7f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001cf5b:	ba 04 00 00 00       	mov    edx,0x4
c001cf60:	eb 1f                	jmp    c001cf81 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001cf62:	83 ec 0c             	sub    esp,0xc
c001cf65:	50                   	push   eax
c001cf66:	e8 fd 99 fe ff       	call   c0006968 <iso_total>
c001cf6b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001cf72:	89 07                	mov    DWORD PTR [edi],eax
c001cf74:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf77:	e8 03 98 fe ff       	call   c000677f <iso_close>
c001cf7c:	83 c4 10             	add    esp,0x10
c001cf7f:	31 d2                	xor    edx,edx
c001cf81:	83 c4 0c             	add    esp,0xc
c001cf84:	89 d0                	mov    eax,edx
c001cf86:	5b                   	pop    ebx
c001cf87:	5e                   	pop    esi
c001cf88:	5f                   	pop    edi
c001cf89:	5d                   	pop    ebp
c001cf8a:	c3                   	ret    
c001cf8b:	90                   	nop

c001cf8c <ISO9660::close(void*)>:
c001cf8c:	83 ec 0c             	sub    esp,0xc
c001cf8f:	b8 04 00 00 00       	mov    eax,0x4
c001cf94:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cf98:	85 d2                	test   edx,edx
c001cf9a:	74 1b                	je     c001cfb7 <ISO9660::close(void*)+0x2b>
c001cf9c:	83 ec 0c             	sub    esp,0xc
c001cf9f:	b9 02 00 00 00       	mov    ecx,0x2
c001cfa4:	89 d0                	mov    eax,edx
c001cfa6:	99                   	cdq    
c001cfa7:	f7 f9                	idiv   ecx
c001cfa9:	83 e8 32             	sub    eax,0x32
c001cfac:	50                   	push   eax
c001cfad:	e8 cd 97 fe ff       	call   c000677f <iso_close>
c001cfb2:	83 c4 10             	add    esp,0x10
c001cfb5:	31 c0                	xor    eax,eax
c001cfb7:	83 c4 0c             	add    esp,0xc
c001cfba:	c3                   	ret    
c001cfbb:	90                   	nop

c001cfbc <ISO9660::openDir(char const*, void**)>:
c001cfbc:	56                   	push   esi
c001cfbd:	53                   	push   ebx
c001cfbe:	50                   	push   eax
c001cfbf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cfc3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cfc7:	85 db                	test   ebx,ebx
c001cfc9:	0f 84 bd 00 00 00    	je     c001d08c <ISO9660::openDir(char const*, void**)+0xd0>
c001cfcf:	85 f6                	test   esi,esi
c001cfd1:	0f 84 b5 00 00 00    	je     c001d08c <ISO9660::openDir(char const*, void**)+0xd0>
c001cfd7:	8a 13                	mov    dl,BYTE PTR [ebx]
c001cfd9:	0f be 05 20 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc20
c001cfe0:	38 15 20 fc 02 c0    	cmp    BYTE PTR ds:0xc002fc20,dl
c001cfe6:	74 1b                	je     c001d003 <ISO9660::openDir(char const*, void**)+0x47>
c001cfe8:	85 c0                	test   eax,eax
c001cfea:	74 10                	je     c001cffc <ISO9660::openDir(char const*, void**)+0x40>
c001cfec:	83 ec 0c             	sub    esp,0xc
c001cfef:	68 51 5f 02 c0       	push   0xc0025f51
c001cff4:	e8 35 30 ff ff       	call   c001002e <KePanic(char const*)>
c001cff9:	83 c4 10             	add    esp,0x10
c001cffc:	8a 03                	mov    al,BYTE PTR [ebx]
c001cffe:	a2 20 fc 02 c0       	mov    ds:0xc002fc20,al
c001d003:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d006:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d00d:	85 c0                	test   eax,eax
c001d00f:	74 10                	je     c001d021 <ISO9660::openDir(char const*, void**)+0x65>
c001d011:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d018:	74 1a                	je     c001d034 <ISO9660::openDir(char const*, void**)+0x78>
c001d01a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d021:	83 ec 0c             	sub    esp,0xc
c001d024:	0f be 05 20 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc20
c001d02b:	50                   	push   eax
c001d02c:	e8 fd 9b fe ff       	call   c0006c2e <init_percd>
c001d031:	83 c4 10             	add    esp,0x10
c001d034:	83 c3 03             	add    ebx,0x3
c001d037:	50                   	push   eax
c001d038:	50                   	push   eax
c001d039:	6a 01                	push   0x1
c001d03b:	53                   	push   ebx
c001d03c:	e8 b4 96 fe ff       	call   c00066f5 <iso_open>
c001d041:	83 c4 10             	add    esp,0x10
c001d044:	89 c3                	mov    ebx,eax
c001d046:	83 f8 ff             	cmp    eax,0xffffffff
c001d049:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001d04e:	75 1c                	jne    c001d06c <ISO9660::openDir(char const*, void**)+0xb0>
c001d050:	53                   	push   ebx
c001d051:	53                   	push   ebx
c001d052:	68 f9 5f 02 c0       	push   0xc0025ff9
c001d057:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d05d:	e8 34 58 ff ff       	call   c0012896 <VgaText::puts(char const*)>
c001d062:	83 c4 10             	add    esp,0x10
c001d065:	b8 01 00 00 00       	mov    eax,0x1
c001d06a:	eb 25                	jmp    c001d091 <ISO9660::openDir(char const*, void**)+0xd5>
c001d06c:	01 db                	add    ebx,ebx
c001d06e:	51                   	push   ecx
c001d06f:	83 c3 65             	add    ebx,0x65
c001d072:	51                   	push   ecx
c001d073:	68 0c 60 02 c0       	push   0xc002600c
c001d078:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d07e:	e8 13 58 ff ff       	call   c0012896 <VgaText::puts(char const*)>
c001d083:	89 1e                	mov    DWORD PTR [esi],ebx
c001d085:	83 c4 10             	add    esp,0x10
c001d088:	31 c0                	xor    eax,eax
c001d08a:	eb 05                	jmp    c001d091 <ISO9660::openDir(char const*, void**)+0xd5>
c001d08c:	b8 04 00 00 00       	mov    eax,0x4
c001d091:	5a                   	pop    edx
c001d092:	5b                   	pop    ebx
c001d093:	5e                   	pop    esi
c001d094:	c3                   	ret    
c001d095:	90                   	nop

c001d096 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001d096:	55                   	push   ebp
c001d097:	57                   	push   edi
c001d098:	56                   	push   esi
c001d099:	53                   	push   ebx
c001d09a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d0a0:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001d0a7:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001d0ae:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001d0b6:	0f 84 e7 00 00 00    	je     c001d1a3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001d0bc:	85 db                	test   ebx,ebx
c001d0be:	0f 84 df 00 00 00    	je     c001d1a3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001d0c4:	83 ec 0c             	sub    esp,0xc
c001d0c7:	68 1f 60 02 c0       	push   0xc002601f
c001d0cc:	e8 93 9e fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001d0d1:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001d0d8:	b9 02 00 00 00       	mov    ecx,0x2
c001d0dd:	99                   	cdq    
c001d0de:	f7 f9                	idiv   ecx
c001d0e0:	83 e8 32             	sub    eax,0x32
c001d0e3:	89 04 24             	mov    DWORD PTR [esp],eax
c001d0e6:	e8 cf 98 fe ff       	call   c00069ba <iso_readdir>
c001d0eb:	83 c4 10             	add    esp,0x10
c001d0ee:	89 c6                	mov    esi,eax
c001d0f0:	85 c0                	test   eax,eax
c001d0f2:	75 37                	jne    c001d12b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001d0f4:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001d0f9:	56                   	push   esi
c001d0fa:	56                   	push   esi
c001d0fb:	68 2a 60 02 c0       	push   0xc002602a
c001d100:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d106:	e8 8b 57 ff ff       	call   c0012896 <VgaText::puts(char const*)>
c001d10b:	83 c4 0c             	add    esp,0xc
c001d10e:	68 10 01 00 00       	push   0x110
c001d113:	6a 00                	push   0x0
c001d115:	57                   	push   edi
c001d116:	e8 d5 33 fe ff       	call   c00004f0 <memset>
c001d11b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001d121:	83 c4 10             	add    esp,0x10
c001d124:	b8 01 00 00 00       	mov    eax,0x1
c001d129:	eb 7d                	jmp    c001d1a8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001d12b:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001d131:	8d 68 08             	lea    ebp,[eax+0x8]
c001d134:	83 ec 0c             	sub    esp,0xc
c001d137:	55                   	push   ebp
c001d138:	e8 33 34 fe ff       	call   c0000570 <strlen>
c001d13d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d145:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d149:	83 c4 10             	add    esp,0x10
c001d14c:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001d150:	75 0a                	jne    c001d15c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001d152:	b8 02 00 00 00       	mov    eax,0x2
c001d157:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001d15a:	74 05                	je     c001d161 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001d15c:	b8 01 00 00 00       	mov    eax,0x1
c001d161:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d165:	50                   	push   eax
c001d166:	50                   	push   eax
c001d167:	55                   	push   ebp
c001d168:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d16c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001d170:	50                   	push   eax
c001d171:	e8 ca 34 fe ff       	call   c0000640 <strcpy>
c001d176:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001d17d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d17f:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001d185:	5a                   	pop    edx
c001d186:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001d18b:	59                   	pop    ecx
c001d18c:	68 3d 60 02 c0       	push   0xc002603d
c001d191:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d197:	e8 fa 56 ff ff       	call   c0012896 <VgaText::puts(char const*)>
c001d19c:	83 c4 10             	add    esp,0x10
c001d19f:	31 c0                	xor    eax,eax
c001d1a1:	eb 05                	jmp    c001d1a8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001d1a3:	b8 04 00 00 00       	mov    eax,0x4
c001d1a8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d1ae:	5b                   	pop    ebx
c001d1af:	5e                   	pop    esi
c001d1b0:	5f                   	pop    edi
c001d1b1:	5d                   	pop    ebp
c001d1b2:	c3                   	ret    

c001d1b3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001d1b3:	57                   	push   edi
c001d1b4:	56                   	push   esi
c001d1b5:	53                   	push   ebx
c001d1b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d1ba:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d1be:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d1c2:	39 35 24 fc 02 c0    	cmp    DWORD PTR ds:0xc002fc24,esi
c001d1c8:	0f be cb             	movsx  ecx,bl
c001d1cb:	75 0b                	jne    c001d1d8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001d1cd:	0f be 05 04 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027304
c001d1d4:	39 c8                	cmp    eax,ecx
c001d1d6:	74 47                	je     c001d21f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001d1d8:	83 ec 0c             	sub    esp,0xc
c001d1db:	31 d2                	xor    edx,edx
c001d1dd:	68 40 fc 02 c0       	push   0xc002fc40
c001d1e2:	6a 01                	push   0x1
c001d1e4:	52                   	push   edx
c001d1e5:	56                   	push   esi
c001d1e6:	ff 34 8d dc c9 02 c0 	push   DWORD PTR [ecx*4-0x3ffd3624]
c001d1ed:	e8 92 d8 fe ff       	call   c000aa84 <LogicalDisk::read(unsigned long long, int, void*)>
c001d1f2:	83 c4 20             	add    esp,0x20
c001d1f5:	85 c0                	test   eax,eax
c001d1f7:	75 0e                	jne    c001d207 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001d1f9:	89 35 24 fc 02 c0    	mov    DWORD PTR ds:0xc002fc24,esi
c001d1ff:	88 1d 04 73 02 c0    	mov    BYTE PTR ds:0xc0027304,bl
c001d205:	eb 18                	jmp    c001d21f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001d207:	50                   	push   eax
c001d208:	68 00 08 00 00       	push   0x800
c001d20d:	6a 00                	push   0x0
c001d20f:	57                   	push   edi
c001d210:	e8 db 32 fe ff       	call   c00004f0 <memset>
c001d215:	83 c4 10             	add    esp,0x10
c001d218:	b8 01 00 00 00       	mov    eax,0x1
c001d21d:	eb 0e                	jmp    c001d22d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001d21f:	be 40 fc 02 c0       	mov    esi,0xc002fc40
c001d224:	b9 00 08 00 00       	mov    ecx,0x800
c001d229:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d22b:	31 c0                	xor    eax,eax
c001d22d:	5b                   	pop    ebx
c001d22e:	5e                   	pop    esi
c001d22f:	5f                   	pop    edi
c001d230:	c3                   	ret    
c001d231:	90                   	nop

c001d232 <ISO9660::tryMount(LogicalDisk*, int)>:
c001d232:	53                   	push   ebx
c001d233:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001d239:	c7 05 24 fc 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002fc24,0xdeadbeef
c001d243:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001d24a:	8d 58 41             	lea    ebx,[eax+0x41]
c001d24d:	0f be db             	movsx  ebx,bl
c001d250:	53                   	push   ebx
c001d251:	8d 44 24 08          	lea    eax,[esp+0x8]
c001d255:	50                   	push   eax
c001d256:	6a 10                	push   0x10
c001d258:	e8 56 ff ff ff       	call   c001d1b3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001d25d:	83 c4 10             	add    esp,0x10
c001d260:	31 d2                	xor    edx,edx
c001d262:	85 c0                	test   eax,eax
c001d264:	75 33                	jne    c001d299 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d266:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001d26b:	75 2c                	jne    c001d299 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d26d:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001d272:	75 25                	jne    c001d299 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d274:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001d279:	75 1e                	jne    c001d299 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d27b:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001d280:	75 17                	jne    c001d299 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d282:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001d287:	75 10                	jne    c001d299 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d289:	83 ec 0c             	sub    esp,0xc
c001d28c:	53                   	push   ebx
c001d28d:	e8 9c 99 fe ff       	call   c0006c2e <init_percd>
c001d292:	83 c4 10             	add    esp,0x10
c001d295:	40                   	inc    eax
c001d296:	0f 95 c2             	setne  dl
c001d299:	88 d0                	mov    al,dl
c001d29b:	81 c4 08 08 00 00    	add    esp,0x808
c001d2a1:	5b                   	pop    ebx
c001d2a2:	c3                   	ret    
c001d2a3:	90                   	nop

c001d2a4 <ISO9660::ISO9660()>:
c001d2a4:	83 ec 0c             	sub    esp,0xc
c001d2a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2ab:	83 ec 0c             	sub    esp,0xc
c001d2ae:	50                   	push   eax
c001d2af:	e8 f0 aa fe ff       	call   c0007da4 <Filesystem::Filesystem()>
c001d2b4:	83 c4 10             	add    esp,0x10
c001d2b7:	ba 58 60 02 c0       	mov    edx,0xc0026058
c001d2bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2c0:	89 10                	mov    DWORD PTR [eax],edx
c001d2c2:	e8 79 9a fe ff       	call   c0006d40 <fs_iso9660_init>
c001d2c7:	90                   	nop
c001d2c8:	83 c4 0c             	add    esp,0xc
c001d2cb:	c3                   	ret    

c001d2cc <SoundCard::beginPlayback()>:
c001d2cc:	c7 44 24 04 bc 60 02 c0 	mov    DWORD PTR [esp+0x4],0xc00260bc
c001d2d4:	e9 55 2d ff ff       	jmp    c001002e <KePanic(char const*)>
c001d2d9:	90                   	nop

c001d2da <SoundCard::stopPlayback()>:
c001d2da:	c7 44 24 04 bc 60 02 c0 	mov    DWORD PTR [esp+0x4],0xc00260bc
c001d2e2:	e9 47 2d ff ff       	jmp    c001002e <KePanic(char const*)>
c001d2e7:	90                   	nop

c001d2e8 <SoundCard::SoundCard(char const*)>:
c001d2e8:	83 ec 1c             	sub    esp,0x1c
c001d2eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2ef:	83 ec 08             	sub    esp,0x8
c001d2f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2f6:	50                   	push   eax
c001d2f7:	e8 96 c8 fe ff       	call   c0009b92 <Device::Device(char const*)>
c001d2fc:	83 c4 10             	add    esp,0x10
c001d2ff:	ba 08 61 02 c0       	mov    edx,0xc0026108
c001d304:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d308:	89 10                	mov    DWORD PTR [eax],edx
c001d30a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d30e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d315:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d319:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001d323:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d327:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001d331:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d335:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001d33f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d343:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001d34d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d355:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001d35a:	7f 1a                	jg     c001d376 <SoundCard::SoundCard(char const*)+0x8e>
c001d35c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d360:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d364:	83 c2 54             	add    edx,0x54
c001d367:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001d36f:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001d374:	eb df                	jmp    c001d355 <SoundCard::SoundCard(char const*)+0x6d>
c001d376:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d37a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d381:	90                   	nop
c001d382:	83 c4 1c             	add    esp,0x1c
c001d385:	c3                   	ret    

c001d386 <SoundCard::~SoundCard()>:
c001d386:	83 ec 0c             	sub    esp,0xc
c001d389:	ba 08 61 02 c0       	mov    edx,0xc0026108
c001d38e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d392:	89 10                	mov    DWORD PTR [eax],edx
c001d394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d398:	83 ec 0c             	sub    esp,0xc
c001d39b:	50                   	push   eax
c001d39c:	e8 91 c5 fe ff       	call   c0009932 <Device::~Device()>
c001d3a1:	83 c4 10             	add    esp,0x10
c001d3a4:	90                   	nop
c001d3a5:	83 c4 0c             	add    esp,0xc
c001d3a8:	c3                   	ret    
c001d3a9:	90                   	nop

c001d3aa <SoundCard::~SoundCard()>:
c001d3aa:	83 ec 0c             	sub    esp,0xc
c001d3ad:	83 ec 0c             	sub    esp,0xc
c001d3b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3b4:	e8 cd ff ff ff       	call   c001d386 <SoundCard::~SoundCard()>
c001d3b9:	83 c4 10             	add    esp,0x10
c001d3bc:	83 ec 08             	sub    esp,0x8
c001d3bf:	68 e8 01 00 00       	push   0x1e8
c001d3c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3c8:	e8 8e ff fe ff       	call   c000d35b <operator delete(void*, unsigned long)>
c001d3cd:	83 c4 10             	add    esp,0x10
c001d3d0:	83 c4 0c             	add    esp,0xc
c001d3d3:	c3                   	ret    

c001d3d4 <SoundCard::configureRates(int, int, int)>:
c001d3d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d3d8:	31 c0                	xor    eax,eax
c001d3da:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001d3e1:	75 20                	jne    c001d403 <SoundCard::configureRates(int, int, int)+0x2f>
c001d3e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d3e7:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001d3ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3f1:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001d3f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3fb:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001d401:	b0 01                	mov    al,0x1
c001d403:	c3                   	ret    

c001d404 <SoundCard::getSamples16(int, short*)>:
c001d404:	55                   	push   ebp
c001d405:	57                   	push   edi
c001d406:	31 ff                	xor    edi,edi
c001d408:	56                   	push   esi
c001d409:	53                   	push   ebx
c001d40a:	31 db                	xor    ebx,ebx
c001d40c:	83 ec 10             	sub    esp,0x10
c001d40f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001d413:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d417:	8d 04 36             	lea    eax,[esi+esi*1]
c001d41a:	50                   	push   eax
c001d41b:	6a 00                	push   0x0
c001d41d:	55                   	push   ebp
c001d41e:	e8 cd 30 fe ff       	call   c00004f0 <memset>
c001d423:	83 c4 10             	add    esp,0x10
c001d426:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d42a:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001d431:	85 c0                	test   eax,eax
c001d433:	74 1b                	je     c001d450 <SoundCard::getSamples16(int, short*)+0x4c>
c001d435:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d439:	75 15                	jne    c001d450 <SoundCard::getSamples16(int, short*)+0x4c>
c001d43b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d43f:	55                   	push   ebp
c001d440:	56                   	push   esi
c001d441:	50                   	push   eax
c001d442:	e8 8d 03 00 00       	call   c001d7d4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001d447:	83 c4 10             	add    esp,0x10
c001d44a:	39 c7                	cmp    edi,eax
c001d44c:	7d 02                	jge    c001d450 <SoundCard::getSamples16(int, short*)+0x4c>
c001d44e:	89 c7                	mov    edi,eax
c001d450:	43                   	inc    ebx
c001d451:	83 fb 20             	cmp    ebx,0x20
c001d454:	75 d0                	jne    c001d426 <SoundCard::getSamples16(int, short*)+0x22>
c001d456:	83 c4 0c             	add    esp,0xc
c001d459:	89 f8                	mov    eax,edi
c001d45b:	5b                   	pop    ebx
c001d45c:	5e                   	pop    esi
c001d45d:	5f                   	pop    edi
c001d45e:	5d                   	pop    ebp
c001d45f:	c3                   	ret    

c001d460 <SoundCard::getSamples32(int, int*)>:
c001d460:	55                   	push   ebp
c001d461:	57                   	push   edi
c001d462:	31 ff                	xor    edi,edi
c001d464:	56                   	push   esi
c001d465:	31 f6                	xor    esi,esi
c001d467:	53                   	push   ebx
c001d468:	83 ec 10             	sub    esp,0x10
c001d46b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d46f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d473:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d477:	c1 e0 02             	shl    eax,0x2
c001d47a:	50                   	push   eax
c001d47b:	6a 00                	push   0x0
c001d47d:	55                   	push   ebp
c001d47e:	e8 6d 30 fe ff       	call   c00004f0 <memset>
c001d483:	83 c4 10             	add    esp,0x10
c001d486:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001d48d:	85 c0                	test   eax,eax
c001d48f:	74 1b                	je     c001d4ac <SoundCard::getSamples32(int, int*)+0x4c>
c001d491:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d495:	75 15                	jne    c001d4ac <SoundCard::getSamples32(int, int*)+0x4c>
c001d497:	53                   	push   ebx
c001d498:	55                   	push   ebp
c001d499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d49d:	50                   	push   eax
c001d49e:	e8 fd 03 00 00       	call   c001d8a0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001d4a3:	83 c4 10             	add    esp,0x10
c001d4a6:	39 c6                	cmp    esi,eax
c001d4a8:	7d 02                	jge    c001d4ac <SoundCard::getSamples32(int, int*)+0x4c>
c001d4aa:	89 c6                	mov    esi,eax
c001d4ac:	47                   	inc    edi
c001d4ad:	83 ff 20             	cmp    edi,0x20
c001d4b0:	75 d4                	jne    c001d486 <SoundCard::getSamples32(int, int*)+0x26>
c001d4b2:	85 f6                	test   esi,esi
c001d4b4:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001d4bb:	75 0f                	jne    c001d4cc <SoundCard::getSamples32(int, int*)+0x6c>
c001d4bd:	85 c0                	test   eax,eax
c001d4bf:	74 1b                	je     c001d4dc <SoundCard::getSamples32(int, int*)+0x7c>
c001d4c1:	83 ec 0c             	sub    esp,0xc
c001d4c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d4c6:	53                   	push   ebx
c001d4c7:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001d4ca:	eb 0d                	jmp    c001d4d9 <SoundCard::getSamples32(int, int*)+0x79>
c001d4cc:	85 c0                	test   eax,eax
c001d4ce:	75 0c                	jne    c001d4dc <SoundCard::getSamples32(int, int*)+0x7c>
c001d4d0:	83 ec 0c             	sub    esp,0xc
c001d4d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d4d5:	53                   	push   ebx
c001d4d6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d4d9:	83 c4 10             	add    esp,0x10
c001d4dc:	83 c4 0c             	add    esp,0xc
c001d4df:	89 f0                	mov    eax,esi
c001d4e1:	5b                   	pop    ebx
c001d4e2:	5e                   	pop    esi
c001d4e3:	5f                   	pop    edi
c001d4e4:	5d                   	pop    ebp
c001d4e5:	c3                   	ret    

c001d4e6 <SoundCard::addChannel(SoundPort*)>:
c001d4e6:	83 ec 0c             	sub    esp,0xc
c001d4e9:	31 c0                	xor    eax,eax
c001d4eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d4ef:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001d4f7:	74 1b                	je     c001d514 <SoundCard::addChannel(SoundPort*)+0x2e>
c001d4f9:	40                   	inc    eax
c001d4fa:	83 f8 20             	cmp    eax,0x20
c001d4fd:	75 f0                	jne    c001d4ef <SoundCard::addChannel(SoundPort*)+0x9>
c001d4ff:	83 ec 0c             	sub    esp,0xc
c001d502:	68 e1 60 02 c0       	push   0xc00260e1
c001d507:	e8 22 2b ff ff       	call   c001002e <KePanic(char const*)>
c001d50c:	83 c4 10             	add    esp,0x10
c001d50f:	83 c8 ff             	or     eax,0xffffffff
c001d512:	eb 0b                	jmp    c001d51f <SoundCard::addChannel(SoundPort*)+0x39>
c001d514:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d518:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001d51f:	83 c4 0c             	add    esp,0xc
c001d522:	c3                   	ret    
c001d523:	90                   	nop

c001d524 <SoundCard::removeChannel(int)>:
c001d524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d528:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d52c:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001d537:	c3                   	ret    

c001d538 <SoundPort::SoundPort(int, int, int, int)>:
c001d538:	83 ec 0c             	sub    esp,0xc
c001d53b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d53f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d54a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d54e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d552:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d556:	89 10                	mov    DWORD PTR [eax],edx
c001d558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d55c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d560:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d567:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d56b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d56e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001d573:	75 13                	jne    c001d588 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001d575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d579:	8b 00                	mov    eax,DWORD PTR [eax]
c001d57b:	05 a0 0f 00 00       	add    eax,0xfa0
c001d580:	01 c0                	add    eax,eax
c001d582:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d586:	66 90                	xchg   ax,ax
c001d588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d58c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d590:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001d593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d597:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001d59e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5a2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d5a5:	c1 e0 02             	shl    eax,0x2
c001d5a8:	83 ec 0c             	sub    esp,0xc
c001d5ab:	50                   	push   eax
c001d5ac:	e8 36 27 ff ff       	call   c000fce7 <malloc>
c001d5b1:	83 c4 10             	add    esp,0x10
c001d5b4:	89 c2                	mov    edx,eax
c001d5b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5ba:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d5bd:	90                   	nop
c001d5be:	83 c4 0c             	add    esp,0xc
c001d5c1:	c3                   	ret    
c001d5c2:	66 90                	xchg   ax,ax

c001d5c4 <SoundPort::~SoundPort()>:
c001d5c4:	83 ec 0c             	sub    esp,0xc
c001d5c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5cb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d5ce:	85 c0                	test   eax,eax
c001d5d0:	74 1e                	je     c001d5f0 <SoundPort::~SoundPort()+0x2c>
c001d5d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5d6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d5d9:	83 ec 0c             	sub    esp,0xc
c001d5dc:	50                   	push   eax
c001d5dd:	e8 15 27 ff ff       	call   c000fcf7 <free>
c001d5e2:	83 c4 10             	add    esp,0x10
c001d5e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5e9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d5f0:	90                   	nop
c001d5f1:	83 c4 0c             	add    esp,0xc
c001d5f4:	c3                   	ret    
c001d5f5:	90                   	nop
c001d5f6:	66 90                	xchg   ax,ax

c001d5f8 <SoundPort::unpause()>:
c001d5f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5fc:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001d600:	c3                   	ret    
c001d601:	90                   	nop
c001d602:	66 90                	xchg   ax,ax

c001d604 <SoundPort::pause()>:
c001d604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d608:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d60c:	c3                   	ret    
c001d60d:	90                   	nop
c001d60e:	66 90                	xchg   ax,ax

c001d610 <SoundPort::getBufferUsed()>:
c001d610:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d614:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d617:	c3                   	ret    

c001d618 <SoundPort::getBufferSize()>:
c001d618:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d61c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d61f:	c3                   	ret    

c001d620 <SoundPort::buffer8(signed char*, int)>:
c001d620:	55                   	push   ebp
c001d621:	57                   	push   edi
c001d622:	56                   	push   esi
c001d623:	53                   	push   ebx
c001d624:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d628:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001d62c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d62f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d632:	74 70                	je     c001d6a4 <SoundPort::buffer8(signed char*, int)+0x84>
c001d634:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d638:	85 c9                	test   ecx,ecx
c001d63a:	7e 68                	jle    c001d6a4 <SoundPort::buffer8(signed char*, int)+0x84>
c001d63c:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001d640:	8d 48 01             	lea    ecx,[eax+0x1]
c001d643:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d646:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001d649:	89 f1                	mov    ecx,esi
c001d64b:	c1 e1 18             	shl    ecx,0x18
c001d64e:	29 f1                	sub    ecx,esi
c001d650:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d653:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d656:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d659:	74 51                	je     c001d6ac <SoundPort::buffer8(signed char*, int)+0x8c>
c001d65b:	31 ff                	xor    edi,edi
c001d65d:	eb 25                	jmp    c001d684 <SoundPort::buffer8(signed char*, int)+0x64>
c001d65f:	90                   	nop
c001d660:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001d665:	8d 59 01             	lea    ebx,[ecx+0x1]
c001d668:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001d66b:	89 f3                	mov    ebx,esi
c001d66d:	c1 e3 18             	shl    ebx,0x18
c001d670:	29 f3                	sub    ebx,esi
c001d672:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001d675:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001d678:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d67b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d67e:	74 1c                	je     c001d69c <SoundPort::buffer8(signed char*, int)+0x7c>
c001d680:	89 c7                	mov    edi,eax
c001d682:	66 90                	xchg   ax,ax
c001d684:	8d 47 01             	lea    eax,[edi+0x1]
c001d687:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001d68b:	75 d3                	jne    c001d660 <SoundPort::buffer8(signed char*, int)+0x40>
c001d68d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d691:	8d 76 00             	lea    esi,[esi+0x0]
c001d694:	5b                   	pop    ebx
c001d695:	5e                   	pop    esi
c001d696:	5f                   	pop    edi
c001d697:	5d                   	pop    ebp
c001d698:	c3                   	ret    
c001d699:	8d 76 00             	lea    esi,[esi+0x0]
c001d69c:	5b                   	pop    ebx
c001d69d:	8d 47 02             	lea    eax,[edi+0x2]
c001d6a0:	5e                   	pop    esi
c001d6a1:	5f                   	pop    edi
c001d6a2:	5d                   	pop    ebp
c001d6a3:	c3                   	ret    
c001d6a4:	5b                   	pop    ebx
c001d6a5:	31 c0                	xor    eax,eax
c001d6a7:	5e                   	pop    esi
c001d6a8:	5f                   	pop    edi
c001d6a9:	5d                   	pop    ebp
c001d6aa:	c3                   	ret    
c001d6ab:	90                   	nop
c001d6ac:	b8 01 00 00 00       	mov    eax,0x1
c001d6b1:	eb e1                	jmp    c001d694 <SoundPort::buffer8(signed char*, int)+0x74>
c001d6b3:	90                   	nop

c001d6b4 <SoundPort::buffer16(short*, int)>:
c001d6b4:	55                   	push   ebp
c001d6b5:	57                   	push   edi
c001d6b6:	56                   	push   esi
c001d6b7:	53                   	push   ebx
c001d6b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d6bc:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001d6c0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d6c3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d6c6:	74 70                	je     c001d738 <SoundPort::buffer16(short*, int)+0x84>
c001d6c8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d6cc:	85 c9                	test   ecx,ecx
c001d6ce:	7e 68                	jle    c001d738 <SoundPort::buffer16(short*, int)+0x84>
c001d6d0:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001d6d4:	8d 48 01             	lea    ecx,[eax+0x1]
c001d6d7:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d6da:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001d6dd:	89 f1                	mov    ecx,esi
c001d6df:	c1 e1 10             	shl    ecx,0x10
c001d6e2:	29 f1                	sub    ecx,esi
c001d6e4:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d6e7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d6ea:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d6ed:	74 51                	je     c001d740 <SoundPort::buffer16(short*, int)+0x8c>
c001d6ef:	31 ff                	xor    edi,edi
c001d6f1:	eb 25                	jmp    c001d718 <SoundPort::buffer16(short*, int)+0x64>
c001d6f3:	90                   	nop
c001d6f4:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001d6f9:	8d 59 01             	lea    ebx,[ecx+0x1]
c001d6fc:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001d6ff:	89 f3                	mov    ebx,esi
c001d701:	c1 e3 10             	shl    ebx,0x10
c001d704:	29 f3                	sub    ebx,esi
c001d706:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001d709:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001d70c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d70f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d712:	74 1c                	je     c001d730 <SoundPort::buffer16(short*, int)+0x7c>
c001d714:	89 c7                	mov    edi,eax
c001d716:	66 90                	xchg   ax,ax
c001d718:	8d 47 01             	lea    eax,[edi+0x1]
c001d71b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001d71f:	75 d3                	jne    c001d6f4 <SoundPort::buffer16(short*, int)+0x40>
c001d721:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d725:	8d 76 00             	lea    esi,[esi+0x0]
c001d728:	5b                   	pop    ebx
c001d729:	5e                   	pop    esi
c001d72a:	5f                   	pop    edi
c001d72b:	5d                   	pop    ebp
c001d72c:	c3                   	ret    
c001d72d:	8d 76 00             	lea    esi,[esi+0x0]
c001d730:	5b                   	pop    ebx
c001d731:	8d 47 02             	lea    eax,[edi+0x2]
c001d734:	5e                   	pop    esi
c001d735:	5f                   	pop    edi
c001d736:	5d                   	pop    ebp
c001d737:	c3                   	ret    
c001d738:	5b                   	pop    ebx
c001d739:	31 c0                	xor    eax,eax
c001d73b:	5e                   	pop    esi
c001d73c:	5f                   	pop    edi
c001d73d:	5d                   	pop    ebp
c001d73e:	c3                   	ret    
c001d73f:	90                   	nop
c001d740:	b8 01 00 00 00       	mov    eax,0x1
c001d745:	eb e1                	jmp    c001d728 <SoundPort::buffer16(short*, int)+0x74>
c001d747:	90                   	nop

c001d748 <SoundPort::buffer32(int*, int)>:
c001d748:	55                   	push   ebp
c001d749:	57                   	push   edi
c001d74a:	56                   	push   esi
c001d74b:	53                   	push   ebx
c001d74c:	83 ec 04             	sub    esp,0x4
c001d74f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d753:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d757:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d75a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d75e:	89 04 24             	mov    DWORD PTR [esp],eax
c001d761:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d764:	74 5a                	je     c001d7c0 <SoundPort::buffer32(int*, int)+0x78>
c001d766:	85 c0                	test   eax,eax
c001d768:	7e 56                	jle    c001d7c0 <SoundPort::buffer32(int*, int)+0x78>
c001d76a:	8d 71 01             	lea    esi,[ecx+0x1]
c001d76d:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d770:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d773:	8b 37                	mov    esi,DWORD PTR [edi]
c001d775:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d778:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d77b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d77e:	74 4c                	je     c001d7cc <SoundPort::buffer32(int*, int)+0x84>
c001d780:	31 f6                	xor    esi,esi
c001d782:	eb 1c                	jmp    c001d7a0 <SoundPort::buffer32(int*, int)+0x58>
c001d784:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d787:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d78a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d78d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d790:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d794:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d797:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d79a:	74 18                	je     c001d7b4 <SoundPort::buffer32(int*, int)+0x6c>
c001d79c:	89 de                	mov    esi,ebx
c001d79e:	66 90                	xchg   ax,ax
c001d7a0:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d7a3:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001d7a6:	75 dc                	jne    c001d784 <SoundPort::buffer32(int*, int)+0x3c>
c001d7a8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d7ab:	90                   	nop
c001d7ac:	83 c4 04             	add    esp,0x4
c001d7af:	5b                   	pop    ebx
c001d7b0:	5e                   	pop    esi
c001d7b1:	5f                   	pop    edi
c001d7b2:	5d                   	pop    ebp
c001d7b3:	c3                   	ret    
c001d7b4:	83 c4 04             	add    esp,0x4
c001d7b7:	8d 46 02             	lea    eax,[esi+0x2]
c001d7ba:	5b                   	pop    ebx
c001d7bb:	5e                   	pop    esi
c001d7bc:	5f                   	pop    edi
c001d7bd:	5d                   	pop    ebp
c001d7be:	c3                   	ret    
c001d7bf:	90                   	nop
c001d7c0:	83 c4 04             	add    esp,0x4
c001d7c3:	31 c0                	xor    eax,eax
c001d7c5:	5b                   	pop    ebx
c001d7c6:	5e                   	pop    esi
c001d7c7:	5f                   	pop    edi
c001d7c8:	5d                   	pop    ebp
c001d7c9:	c3                   	ret    
c001d7ca:	66 90                	xchg   ax,ax
c001d7cc:	b8 01 00 00 00       	mov    eax,0x1
c001d7d1:	eb d9                	jmp    c001d7ac <SoundPort::buffer32(int*, int)+0x64>
c001d7d3:	90                   	nop

c001d7d4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001d7d4:	57                   	push   edi
c001d7d5:	56                   	push   esi
c001d7d6:	53                   	push   ebx
c001d7d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d7db:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001d7df:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001d7e5:	39 03                	cmp    DWORD PTR [ebx],eax
c001d7e7:	74 13                	je     c001d7fc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001d7e9:	83 ec 0c             	sub    esp,0xc
c001d7ec:	68 34 61 02 c0       	push   0xc0026134
c001d7f1:	e8 38 28 ff ff       	call   c001002e <KePanic(char const*)>
c001d7f6:	83 c4 10             	add    esp,0x10
c001d7f9:	8d 76 00             	lea    esi,[esi+0x0]
c001d7fc:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001d802:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d805:	74 11                	je     c001d818 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001d807:	83 ec 0c             	sub    esp,0xc
c001d80a:	68 73 61 02 c0       	push   0xc0026173
c001d80f:	e8 1a 28 ff ff       	call   c001002e <KePanic(char const*)>
c001d814:	83 c4 10             	add    esp,0x10
c001d817:	90                   	nop
c001d818:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001d81e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d821:	74 11                	je     c001d834 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001d823:	83 ec 0c             	sub    esp,0xc
c001d826:	68 73 61 02 c0       	push   0xc0026173
c001d82b:	e8 fe 27 ff ff       	call   c001002e <KePanic(char const*)>
c001d830:	83 c4 10             	add    esp,0x10
c001d833:	90                   	nop
c001d834:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001d837:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001d83b:	7e 07                	jle    c001d844 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001d83d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d841:	8d 76 00             	lea    esi,[esi+0x0]
c001d844:	85 f6                	test   esi,esi
c001d846:	7e 2c                	jle    c001d874 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001d848:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d84c:	8d 3c 36             	lea    edi,[esi+esi*1]
c001d84f:	31 c9                	xor    ecx,ecx
c001d851:	01 d7                	add    edi,edx
c001d853:	90                   	nop
c001d854:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d857:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001d85a:	85 c0                	test   eax,eax
c001d85c:	79 06                	jns    c001d864 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001d85e:	05 ff 7f 00 00       	add    eax,0x7fff
c001d863:	90                   	nop
c001d864:	c1 f8 0f             	sar    eax,0xf
c001d867:	83 c1 04             	add    ecx,0x4
c001d86a:	66 01 02             	add    WORD PTR [edx],ax
c001d86d:	83 c2 02             	add    edx,0x2
c001d870:	39 d7                	cmp    edi,edx
c001d872:	75 e0                	jne    c001d854 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001d874:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d877:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d87a:	83 ec 04             	sub    esp,0x4
c001d87d:	29 f0                	sub    eax,esi
c001d87f:	c1 e0 02             	shl    eax,0x2
c001d882:	50                   	push   eax
c001d883:	8d 04 b2             	lea    eax,[edx+esi*4]
c001d886:	50                   	push   eax
c001d887:	52                   	push   edx
c001d888:	e8 43 2b fe ff       	call   c00003d0 <memmove>
c001d88d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d890:	83 c4 10             	add    esp,0x10
c001d893:	29 f0                	sub    eax,esi
c001d895:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001d898:	89 f0                	mov    eax,esi
c001d89a:	5b                   	pop    ebx
c001d89b:	5e                   	pop    esi
c001d89c:	5f                   	pop    edi
c001d89d:	c3                   	ret    
c001d89e:	66 90                	xchg   ax,ax

c001d8a0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001d8a0:	57                   	push   edi
c001d8a1:	56                   	push   esi
c001d8a2:	53                   	push   ebx
c001d8a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d8a7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d8ab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d8af:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001d8b5:	39 06                	cmp    DWORD PTR [esi],eax
c001d8b7:	74 13                	je     c001d8cc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001d8b9:	83 ec 0c             	sub    esp,0xc
c001d8bc:	68 54 61 02 c0       	push   0xc0026154
c001d8c1:	e8 68 27 ff ff       	call   c001002e <KePanic(char const*)>
c001d8c6:	83 c4 10             	add    esp,0x10
c001d8c9:	8d 76 00             	lea    esi,[esi+0x0]
c001d8cc:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001d8d2:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001d8d5:	74 11                	je     c001d8e8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001d8d7:	83 ec 0c             	sub    esp,0xc
c001d8da:	68 8f 61 02 c0       	push   0xc002618f
c001d8df:	e8 4a 27 ff ff       	call   c001002e <KePanic(char const*)>
c001d8e4:	83 c4 10             	add    esp,0x10
c001d8e7:	90                   	nop
c001d8e8:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001d8ee:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001d8f1:	74 11                	je     c001d904 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001d8f3:	83 ec 0c             	sub    esp,0xc
c001d8f6:	68 8f 61 02 c0       	push   0xc002618f
c001d8fb:	e8 2e 27 ff ff       	call   c001002e <KePanic(char const*)>
c001d900:	83 c4 10             	add    esp,0x10
c001d903:	90                   	nop
c001d904:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001d907:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001d90b:	7e 07                	jle    c001d914 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001d90d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d911:	8d 76 00             	lea    esi,[esi+0x0]
c001d914:	85 ff                	test   edi,edi
c001d916:	7e 1c                	jle    c001d934 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001d918:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001d91f:	31 c0                	xor    eax,eax
c001d921:	8d 76 00             	lea    esi,[esi+0x0]
c001d924:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d927:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001d92a:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001d92d:	83 c0 04             	add    eax,0x4
c001d930:	39 c1                	cmp    ecx,eax
c001d932:	75 f0                	jne    c001d924 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001d934:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d937:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d93a:	83 ec 04             	sub    esp,0x4
c001d93d:	29 f8                	sub    eax,edi
c001d93f:	c1 e0 02             	shl    eax,0x2
c001d942:	50                   	push   eax
c001d943:	8d 04 ba             	lea    eax,[edx+edi*4]
c001d946:	50                   	push   eax
c001d947:	52                   	push   edx
c001d948:	e8 83 2a fe ff       	call   c00003d0 <memmove>
c001d94d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d950:	83 c4 10             	add    esp,0x10
c001d953:	29 f8                	sub    eax,edi
c001d955:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001d958:	89 f8                	mov    eax,edi
c001d95a:	5b                   	pop    ebx
c001d95b:	5e                   	pop    esi
c001d95c:	5f                   	pop    edi
c001d95d:	c3                   	ret    

c001d95e <PCI::open(int, int, void*)>:
c001d95e:	83 ec 18             	sub    esp,0x18
c001d961:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d969:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d96f:	8b 10                	mov    edx,DWORD PTR [eax]
c001d971:	50                   	push   eax
c001d972:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001d975:	31 c0                	xor    eax,eax
c001d977:	83 c4 1c             	add    esp,0x1c
c001d97a:	c3                   	ret    
c001d97b:	90                   	nop

c001d97c <PCI::close(int, int, void*)>:
c001d97c:	31 c0                	xor    eax,eax
c001d97e:	c3                   	ret    
c001d97f:	90                   	nop

c001d980 <PCI::PCI()>:
c001d980:	83 ec 0c             	sub    esp,0xc
c001d983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d987:	83 ec 08             	sub    esp,0x8
c001d98a:	68 ab 61 02 c0       	push   0xc00261ab
c001d98f:	50                   	push   eax
c001d990:	e8 ab af fe ff       	call   c0008940 <Bus::Bus(char const*)>
c001d995:	83 c4 10             	add    esp,0x10
c001d998:	ba b8 62 02 c0       	mov    edx,0xc00262b8
c001d99d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9a1:	89 10                	mov    DWORD PTR [eax],edx
c001d9a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9a7:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001d9b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9b5:	a3 40 04 03 c0       	mov    ds:0xc0030440,eax
c001d9ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d9c4:	0f b6 d0             	movzx  edx,al
c001d9c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9cb:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001d9d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9d6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d9dc:	0f b6 d0             	movzx  edx,al
c001d9df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9e3:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001d9e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9ec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d9f2:	8d 50 01             	lea    edx,[eax+0x1]
c001d9f5:	88 d1                	mov    cl,dl
c001d9f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d9fb:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001da01:	0f b6 d0             	movzx  edx,al
c001da04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da08:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001da0c:	83 c9 c0             	or     ecx,0xffffffc0
c001da0f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001da13:	90                   	nop
c001da14:	83 c4 0c             	add    esp,0xc
c001da17:	c3                   	ret    

c001da18 <PCI::readBAR8(unsigned int, int)>:
c001da18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001da1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da20:	f6 c2 01             	test   dl,0x1
c001da23:	74 07                	je     c001da2c <PCI::readBAR8(unsigned int, int)+0x14>
c001da25:	83 e2 fc             	and    edx,0xfffffffc
c001da28:	01 c2                	add    edx,eax
c001da2a:	ec                   	in     al,dx
c001da2b:	c3                   	ret    
c001da2c:	83 e2 f0             	and    edx,0xfffffff0
c001da2f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001da32:	c3                   	ret    
c001da33:	90                   	nop

c001da34 <PCI::readBAR16(unsigned int, int)>:
c001da34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001da38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da3c:	f6 c2 01             	test   dl,0x1
c001da3f:	74 08                	je     c001da49 <PCI::readBAR16(unsigned int, int)+0x15>
c001da41:	83 e2 fc             	and    edx,0xfffffffc
c001da44:	01 c2                	add    edx,eax
c001da46:	66 ed                	in     ax,dx
c001da48:	c3                   	ret    
c001da49:	83 e2 f0             	and    edx,0xfffffff0
c001da4c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001da50:	c3                   	ret    
c001da51:	90                   	nop

c001da52 <PCI::readBAR32(unsigned int, int)>:
c001da52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001da56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da5a:	f6 c2 01             	test   dl,0x1
c001da5d:	74 07                	je     c001da66 <PCI::readBAR32(unsigned int, int)+0x14>
c001da5f:	83 e2 fc             	and    edx,0xfffffffc
c001da62:	01 c2                	add    edx,eax
c001da64:	ed                   	in     eax,dx
c001da65:	c3                   	ret    
c001da66:	83 e2 f0             	and    edx,0xfffffff0
c001da69:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001da6c:	c3                   	ret    
c001da6d:	90                   	nop

c001da6e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001da6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001da72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da76:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001da7a:	f6 c2 01             	test   dl,0x1
c001da7d:	74 07                	je     c001da86 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001da7f:	83 e2 fc             	and    edx,0xfffffffc
c001da82:	01 ca                	add    edx,ecx
c001da84:	ee                   	out    dx,al
c001da85:	c3                   	ret    
c001da86:	83 e2 f0             	and    edx,0xfffffff0
c001da89:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001da8c:	c3                   	ret    
c001da8d:	90                   	nop

c001da8e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001da8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001da92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da96:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001da9a:	f6 c2 01             	test   dl,0x1
c001da9d:	74 08                	je     c001daa7 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001da9f:	83 e2 fc             	and    edx,0xfffffffc
c001daa2:	01 ca                	add    edx,ecx
c001daa4:	66 ef                	out    dx,ax
c001daa6:	c3                   	ret    
c001daa7:	83 e2 f0             	and    edx,0xfffffff0
c001daaa:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001daae:	c3                   	ret    
c001daaf:	90                   	nop

c001dab0 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001dab0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dab4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dab8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dabc:	f6 c2 01             	test   dl,0x1
c001dabf:	74 07                	je     c001dac8 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001dac1:	83 e2 fc             	and    edx,0xfffffffc
c001dac4:	01 ca                	add    edx,ecx
c001dac6:	ef                   	out    dx,eax
c001dac7:	c3                   	ret    
c001dac8:	83 e2 f0             	and    edx,0xfffffff0
c001dacb:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001dace:	c3                   	ret    
c001dacf:	90                   	nop

c001dad0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001dad0:	55                   	push   ebp
c001dad1:	57                   	push   edi
c001dad2:	56                   	push   esi
c001dad3:	53                   	push   ebx
c001dad4:	83 ec 0c             	sub    esp,0xc
c001dad7:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001dadc:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001dae0:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001dae4:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001dae8:	83 fe 07             	cmp    esi,0x7
c001daeb:	76 10                	jbe    c001dafd <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001daed:	83 ec 0c             	sub    esp,0xc
c001daf0:	68 b3 61 02 c0       	push   0xc00261b3
c001daf5:	e8 34 25 ff ff       	call   c001002e <KePanic(char const*)>
c001dafa:	83 c4 10             	add    esp,0x10
c001dafd:	0f b6 db             	movzx  ebx,bl
c001db00:	83 fb 0f             	cmp    ebx,0xf
c001db03:	76 10                	jbe    c001db15 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001db05:	83 ec 0c             	sub    esp,0xc
c001db08:	68 e3 61 02 c0       	push   0xc00261e3
c001db0d:	e8 1c 25 ff ff       	call   c001002e <KePanic(char const*)>
c001db12:	83 c4 10             	add    esp,0x10
c001db15:	8d 04 36             	lea    eax,[esi+esi*1]
c001db18:	ba f8 0c 00 00       	mov    edx,0xcf8
c001db1d:	83 c8 f0             	or     eax,0xfffffff0
c001db20:	ee                   	out    dx,al
c001db21:	ba fa 0c 00 00       	mov    edx,0xcfa
c001db26:	89 e8                	mov    eax,ebp
c001db28:	ee                   	out    dx,al
c001db29:	83 c4 0c             	add    esp,0xc
c001db2c:	89 d8                	mov    eax,ebx
c001db2e:	89 f9                	mov    ecx,edi
c001db30:	c1 e0 08             	shl    eax,0x8
c001db33:	0f b6 d9             	movzx  ebx,cl
c001db36:	83 e3 fc             	and    ebx,0xfffffffc
c001db39:	09 d8                	or     eax,ebx
c001db3b:	5b                   	pop    ebx
c001db3c:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001db41:	5e                   	pop    esi
c001db42:	5f                   	pop    edi
c001db43:	5d                   	pop    ebp
c001db44:	c3                   	ret    
c001db45:	90                   	nop

c001db46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001db46:	57                   	push   edi
c001db47:	56                   	push   esi
c001db48:	53                   	push   ebx
c001db49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001db4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001db51:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001db57:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001db5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001db5f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001db63:	83 ff 01             	cmp    edi,0x1
c001db66:	75 3f                	jne    c001dba7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001db68:	89 de                	mov    esi,ebx
c001db6a:	0f b6 c0             	movzx  eax,al
c001db6d:	81 e6 fc 00 00 00    	and    esi,0xfc
c001db73:	c1 e0 10             	shl    eax,0x10
c001db76:	0f b6 c9             	movzx  ecx,cl
c001db79:	09 f0                	or     eax,esi
c001db7b:	c1 e1 08             	shl    ecx,0x8
c001db7e:	0f b6 d2             	movzx  edx,dl
c001db81:	09 c8                	or     eax,ecx
c001db83:	c1 e2 0b             	shl    edx,0xb
c001db86:	09 d0                	or     eax,edx
c001db88:	ba f8 0c 00 00       	mov    edx,0xcf8
c001db8d:	0d 00 00 00 80       	or     eax,0x80000000
c001db92:	ef                   	out    dx,eax
c001db93:	ba fc 0c 00 00       	mov    edx,0xcfc
c001db98:	ed                   	in     eax,dx
c001db99:	83 e3 02             	and    ebx,0x2
c001db9c:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001dba3:	d3 e8                	shr    eax,cl
c001dba5:	eb 44                	jmp    c001dbeb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001dba7:	83 ff 02             	cmp    edi,0x2
c001dbaa:	75 2d                	jne    c001dbd9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001dbac:	83 ec 0c             	sub    esp,0xc
c001dbaf:	0f b6 c9             	movzx  ecx,cl
c001dbb2:	0f b6 d2             	movzx  edx,dl
c001dbb5:	0f b6 fb             	movzx  edi,bl
c001dbb8:	0f b6 c0             	movzx  eax,al
c001dbbb:	57                   	push   edi
c001dbbc:	51                   	push   ecx
c001dbbd:	52                   	push   edx
c001dbbe:	50                   	push   eax
c001dbbf:	56                   	push   esi
c001dbc0:	e8 0b ff ff ff       	call   c001dad0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dbc5:	89 c2                	mov    edx,eax
c001dbc7:	ed                   	in     eax,dx
c001dbc8:	83 e3 02             	and    ebx,0x2
c001dbcb:	83 c4 20             	add    esp,0x20
c001dbce:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001dbd5:	d3 e8                	shr    eax,cl
c001dbd7:	eb 12                	jmp    c001dbeb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001dbd9:	83 ec 0c             	sub    esp,0xc
c001dbdc:	68 13 62 02 c0       	push   0xc0026213
c001dbe1:	e8 48 24 ff ff       	call   c001002e <KePanic(char const*)>
c001dbe6:	83 c4 10             	add    esp,0x10
c001dbe9:	31 c0                	xor    eax,eax
c001dbeb:	5b                   	pop    ebx
c001dbec:	5e                   	pop    esi
c001dbed:	5f                   	pop    edi
c001dbee:	c3                   	ret    
c001dbef:	90                   	nop

c001dbf0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001dbf0:	83 ec 18             	sub    esp,0x18
c001dbf3:	6a 00                	push   0x0
c001dbf5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dbfa:	50                   	push   eax
c001dbfb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc00:	50                   	push   eax
c001dc01:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc06:	50                   	push   eax
c001dc07:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc0b:	e8 36 ff ff ff       	call   c001db46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dc10:	83 c4 2c             	add    esp,0x2c
c001dc13:	c3                   	ret    

c001dc14 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001dc14:	83 ec 18             	sub    esp,0x18
c001dc17:	6a 0e                	push   0xe
c001dc19:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc1e:	50                   	push   eax
c001dc1f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc24:	50                   	push   eax
c001dc25:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc2a:	50                   	push   eax
c001dc2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc2f:	e8 12 ff ff ff       	call   c001db46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dc34:	83 c4 2c             	add    esp,0x2c
c001dc37:	0f b6 c0             	movzx  eax,al
c001dc3a:	c3                   	ret    
c001dc3b:	90                   	nop

c001dc3c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001dc3c:	55                   	push   ebp
c001dc3d:	57                   	push   edi
c001dc3e:	56                   	push   esi
c001dc3f:	53                   	push   ebx
c001dc40:	83 ec 18             	sub    esp,0x18
c001dc43:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001dc48:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001dc4d:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001dc52:	6a 0a                	push   0xa
c001dc54:	56                   	push   esi
c001dc55:	55                   	push   ebp
c001dc56:	57                   	push   edi
c001dc57:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc5b:	e8 e6 fe ff ff       	call   c001db46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dc60:	83 c4 14             	add    esp,0x14
c001dc63:	89 c3                	mov    ebx,eax
c001dc65:	6a 0a                	push   0xa
c001dc67:	0f b6 db             	movzx  ebx,bl
c001dc6a:	56                   	push   esi
c001dc6b:	55                   	push   ebp
c001dc6c:	57                   	push   edi
c001dc6d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc71:	e8 d0 fe ff ff       	call   c001db46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dc76:	83 c4 2c             	add    esp,0x2c
c001dc79:	25 00 ff 00 00       	and    eax,0xff00
c001dc7e:	09 d8                	or     eax,ebx
c001dc80:	5b                   	pop    ebx
c001dc81:	5e                   	pop    esi
c001dc82:	5f                   	pop    edi
c001dc83:	5d                   	pop    ebp
c001dc84:	c3                   	ret    
c001dc85:	90                   	nop

c001dc86 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001dc86:	83 ec 18             	sub    esp,0x18
c001dc89:	6a 08                	push   0x8
c001dc8b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc90:	50                   	push   eax
c001dc91:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc96:	50                   	push   eax
c001dc97:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc9c:	50                   	push   eax
c001dc9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dca1:	e8 a0 fe ff ff       	call   c001db46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dca6:	83 c4 2c             	add    esp,0x2c
c001dca9:	0f b6 c4             	movzx  eax,ah
c001dcac:	c3                   	ret    
c001dcad:	90                   	nop

c001dcae <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001dcae:	83 ec 18             	sub    esp,0x18
c001dcb1:	6a 08                	push   0x8
c001dcb3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dcb8:	50                   	push   eax
c001dcb9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dcbe:	50                   	push   eax
c001dcbf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dcc4:	50                   	push   eax
c001dcc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcc9:	e8 78 fe ff ff       	call   c001db46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dcce:	83 c4 2c             	add    esp,0x2c
c001dcd1:	c3                   	ret    

c001dcd2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001dcd2:	83 ec 18             	sub    esp,0x18
c001dcd5:	6a 3c                	push   0x3c
c001dcd7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dcdc:	50                   	push   eax
c001dcdd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dce2:	50                   	push   eax
c001dce3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dce8:	50                   	push   eax
c001dce9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dced:	e8 54 fe ff ff       	call   c001db46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dcf2:	83 c4 2c             	add    esp,0x2c
c001dcf5:	c3                   	ret    

c001dcf6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001dcf6:	83 ec 18             	sub    esp,0x18
c001dcf9:	6a 18                	push   0x18
c001dcfb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd00:	50                   	push   eax
c001dd01:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd06:	50                   	push   eax
c001dd07:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd0c:	50                   	push   eax
c001dd0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dd11:	e8 30 fe ff ff       	call   c001db46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dd16:	83 c4 2c             	add    esp,0x2c
c001dd19:	0f b6 c4             	movzx  eax,ah
c001dd1c:	c3                   	ret    
c001dd1d:	90                   	nop

c001dd1e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001dd1e:	55                   	push   ebp
c001dd1f:	57                   	push   edi
c001dd20:	56                   	push   esi
c001dd21:	53                   	push   ebx
c001dd22:	83 ec 28             	sub    esp,0x28
c001dd25:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001dd29:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001dd2e:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001dd33:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001dd38:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001dd3f:	8d 43 12             	lea    eax,[ebx+0x12]
c001dd42:	83 c3 10             	add    ebx,0x10
c001dd45:	0f b6 c0             	movzx  eax,al
c001dd48:	0f b6 db             	movzx  ebx,bl
c001dd4b:	50                   	push   eax
c001dd4c:	51                   	push   ecx
c001dd4d:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001dd51:	57                   	push   edi
c001dd52:	55                   	push   ebp
c001dd53:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dd57:	e8 ea fd ff ff       	call   c001db46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dd5c:	83 c4 14             	add    esp,0x14
c001dd5f:	89 c6                	mov    esi,eax
c001dd61:	53                   	push   ebx
c001dd62:	c1 e6 10             	shl    esi,0x10
c001dd65:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dd69:	51                   	push   ecx
c001dd6a:	57                   	push   edi
c001dd6b:	55                   	push   ebp
c001dd6c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dd70:	e8 d1 fd ff ff       	call   c001db46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dd75:	83 c4 3c             	add    esp,0x3c
c001dd78:	0f b7 c0             	movzx  eax,ax
c001dd7b:	5b                   	pop    ebx
c001dd7c:	09 f0                	or     eax,esi
c001dd7e:	5e                   	pop    esi
c001dd7f:	5f                   	pop    edi
c001dd80:	5d                   	pop    ebp
c001dd81:	c3                   	ret    

c001dd82 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001dd82:	55                   	push   ebp
c001dd83:	57                   	push   edi
c001dd84:	56                   	push   esi
c001dd85:	53                   	push   ebx
c001dd86:	83 ec 0c             	sub    esp,0xc
c001dd89:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001dd8d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001dd91:	89 f5                	mov    ebp,esi
c001dd93:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001dd99:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001dd9d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dda1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001dda5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dda9:	83 f9 01             	cmp    ecx,0x1
c001ddac:	75 5d                	jne    c001de0b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001ddae:	0f b6 c8             	movzx  ecx,al
c001ddb1:	0f b6 d2             	movzx  edx,dl
c001ddb4:	c1 e1 10             	shl    ecx,0x10
c001ddb7:	c1 e2 0b             	shl    edx,0xb
c001ddba:	89 f0                	mov    eax,esi
c001ddbc:	25 fc 00 00 00       	and    eax,0xfc
c001ddc1:	09 c1                	or     ecx,eax
c001ddc3:	89 e8                	mov    eax,ebp
c001ddc5:	0f b6 c0             	movzx  eax,al
c001ddc8:	c1 e0 08             	shl    eax,0x8
c001ddcb:	09 c1                	or     ecx,eax
c001ddcd:	09 d1                	or     ecx,edx
c001ddcf:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ddd4:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001ddda:	89 c8                	mov    eax,ecx
c001dddc:	ef                   	out    dx,eax
c001dddd:	ba fc 0c 00 00       	mov    edx,0xcfc
c001dde2:	ed                   	in     eax,dx
c001dde3:	0f b7 db             	movzx  ebx,bx
c001dde6:	83 e6 02             	and    esi,0x2
c001dde9:	74 0a                	je     c001ddf5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001ddeb:	0f b7 d0             	movzx  edx,ax
c001ddee:	c1 e3 10             	shl    ebx,0x10
c001ddf1:	09 d3                	or     ebx,edx
c001ddf3:	eb 05                	jmp    c001ddfa <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001ddf5:	66 31 c0             	xor    ax,ax
c001ddf8:	09 c3                	or     ebx,eax
c001ddfa:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ddff:	89 c8                	mov    eax,ecx
c001de01:	ef                   	out    dx,eax
c001de02:	ba fc 0c 00 00       	mov    edx,0xcfc
c001de07:	89 d8                	mov    eax,ebx
c001de09:	eb 41                	jmp    c001de4c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001de0b:	83 f9 02             	cmp    ecx,0x2
c001de0e:	75 45                	jne    c001de55 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001de10:	83 ec 0c             	sub    esp,0xc
c001de13:	0f b6 d2             	movzx  edx,dl
c001de16:	89 f1                	mov    ecx,esi
c001de18:	0f b6 c0             	movzx  eax,al
c001de1b:	0f b6 f1             	movzx  esi,cl
c001de1e:	89 e9                	mov    ecx,ebp
c001de20:	56                   	push   esi
c001de21:	0f b6 c9             	movzx  ecx,cl
c001de24:	51                   	push   ecx
c001de25:	52                   	push   edx
c001de26:	50                   	push   eax
c001de27:	57                   	push   edi
c001de28:	e8 a3 fc ff ff       	call   c001dad0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de2d:	89 c2                	mov    edx,eax
c001de2f:	ed                   	in     eax,dx
c001de30:	83 c4 20             	add    esp,0x20
c001de33:	0f b7 db             	movzx  ebx,bx
c001de36:	f6 c2 02             	test   dl,0x2
c001de39:	74 0c                	je     c001de47 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001de3b:	0f b7 c8             	movzx  ecx,ax
c001de3e:	89 d8                	mov    eax,ebx
c001de40:	c1 e0 10             	shl    eax,0x10
c001de43:	09 c8                	or     eax,ecx
c001de45:	eb 05                	jmp    c001de4c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001de47:	66 31 c0             	xor    ax,ax
c001de4a:	09 d8                	or     eax,ebx
c001de4c:	ef                   	out    dx,eax
c001de4d:	83 c4 0c             	add    esp,0xc
c001de50:	5b                   	pop    ebx
c001de51:	5e                   	pop    esi
c001de52:	5f                   	pop    edi
c001de53:	5d                   	pop    ebp
c001de54:	c3                   	ret    
c001de55:	c7 44 24 20 13 62 02 c0 	mov    DWORD PTR [esp+0x20],0xc0026213
c001de5d:	83 c4 0c             	add    esp,0xc
c001de60:	5b                   	pop    ebx
c001de61:	5e                   	pop    esi
c001de62:	5f                   	pop    edi
c001de63:	5d                   	pop    ebp
c001de64:	e9 c5 21 ff ff       	jmp    c001002e <KePanic(char const*)>
c001de69:	90                   	nop

c001de6a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001de6a:	55                   	push   ebp
c001de6b:	57                   	push   edi
c001de6c:	56                   	push   esi
c001de6d:	53                   	push   ebx
c001de6e:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001de74:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001de7b:	80 3d 4c 04 03 c0 00 	cmp    BYTE PTR ds:0xc003044c,0x0
c001de82:	0f 85 bd 00 00 00    	jne    c001df45 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001de88:	83 ec 0c             	sub    esp,0xc
c001de8b:	68 14 01 00 00       	push   0x114
c001de90:	e8 52 1e ff ff       	call   c000fce7 <malloc>
c001de95:	83 c4 0c             	add    esp,0xc
c001de98:	89 c3                	mov    ebx,eax
c001de9a:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c001dea0:	68 19 62 02 c0       	push   0xc0026219
c001dea5:	50                   	push   eax
c001dea6:	e8 bb a2 fe ff       	call   c0008166 <File::File(char const*, Process*)>
c001deab:	83 c4 10             	add    esp,0x10
c001deae:	85 db                	test   ebx,ebx
c001deb0:	0f 84 67 02 00 00    	je     c001e11d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001deb6:	56                   	push   esi
c001deb7:	56                   	push   esi
c001deb8:	6a 01                	push   0x1
c001deba:	53                   	push   ebx
c001debb:	e8 c4 a2 fe ff       	call   c0008184 <File::open(FileOpenMode)>
c001dec0:	83 c4 10             	add    esp,0x10
c001dec3:	85 c0                	test   eax,eax
c001dec5:	0f 85 52 02 00 00    	jne    c001e11d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001decb:	52                   	push   edx
c001decc:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001ded0:	50                   	push   eax
c001ded1:	8d 44 24 48          	lea    eax,[esp+0x48]
c001ded5:	50                   	push   eax
c001ded6:	53                   	push   ebx
c001ded7:	e8 aa a5 fe ff       	call   c0008486 <File::stat(unsigned long long*, bool*)>
c001dedc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001dee0:	40                   	inc    eax
c001dee1:	89 04 24             	mov    DWORD PTR [esp],eax
c001dee4:	e8 fe 1d ff ff       	call   c000fce7 <malloc>
c001dee9:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001deed:	a3 48 04 03 c0       	mov    ds:0xc0030448,eax
c001def2:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001def6:	59                   	pop    ecx
c001def7:	8b 13                	mov    edx,DWORD PTR [ebx]
c001def9:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001defd:	51                   	push   ecx
c001defe:	50                   	push   eax
c001deff:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001df03:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001df07:	53                   	push   ebx
c001df08:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001df0b:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001df0f:	83 c4 20             	add    esp,0x20
c001df12:	89 c8                	mov    eax,ecx
c001df14:	99                   	cdq    
c001df15:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001df19:	0f 85 fe 01 00 00    	jne    c001e11d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001df1f:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001df23:	0f 85 f4 01 00 00    	jne    c001e11d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001df29:	83 ec 0c             	sub    esp,0xc
c001df2c:	53                   	push   ebx
c001df2d:	e8 b0 a2 fe ff       	call   c00081e2 <File::close()>
c001df32:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001df36:	c6 05 4c 04 03 c0 01 	mov    BYTE PTR ds:0xc003044c,0x1
c001df3d:	a3 44 04 03 c0       	mov    ds:0xc0030444,eax
c001df42:	83 c4 10             	add    esp,0x10
c001df45:	a1 44 04 03 c0       	mov    eax,ds:0xc0030444
c001df4a:	8b 1d 48 04 03 c0    	mov    ebx,DWORD PTR ds:0xc0030448
c001df50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001df54:	31 f6                	xor    esi,esi
c001df56:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001df5e:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001df65:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001df6a:	31 c9                	xor    ecx,ecx
c001df6c:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001df74:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001df79:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001df81:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001df85:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001df8d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001df91:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001df95:	0f 8e 82 01 00 00    	jle    c001e11d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001df9b:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001df9e:	d4 40                	aam    0x40
c001dfa0:	d5 39                	aad    0x39
c001dfa2:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001dfa6:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001dfaa:	d4 40                	aam    0x40
c001dfac:	d5 39                	aad    0x39
c001dfae:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001dfb2:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001dfb6:	d4 40                	aam    0x40
c001dfb8:	d5 39                	aad    0x39
c001dfba:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001dfbe:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001dfc2:	d4 40                	aam    0x40
c001dfc4:	d5 39                	aad    0x39
c001dfc6:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001dfca:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001dfce:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001dfd2:	3c 56                	cmp    al,0x56
c001dfd4:	74 43                	je     c001e019 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001dfd6:	d4 40                	aam    0x40
c001dfd8:	d5 39                	aad    0x39
c001dfda:	8d 48 d0             	lea    ecx,[eax-0x30]
c001dfdd:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001dfe1:	0f b6 c9             	movzx  ecx,cl
c001dfe4:	c1 e1 04             	shl    ecx,0x4
c001dfe7:	d4 40                	aam    0x40
c001dfe9:	d5 39                	aad    0x39
c001dfeb:	83 e8 30             	sub    eax,0x30
c001dfee:	0f b6 c0             	movzx  eax,al
c001dff1:	09 c1                	or     ecx,eax
c001dff3:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001dff7:	c1 e1 04             	shl    ecx,0x4
c001dffa:	d4 40                	aam    0x40
c001dffc:	d5 39                	aad    0x39
c001dffe:	83 e8 30             	sub    eax,0x30
c001e001:	0f b6 c0             	movzx  eax,al
c001e004:	09 c1                	or     ecx,eax
c001e006:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001e00a:	c1 e1 04             	shl    ecx,0x4
c001e00d:	d4 40                	aam    0x40
c001e00f:	d5 39                	aad    0x39
c001e011:	83 e8 30             	sub    eax,0x30
c001e014:	0f b6 c0             	movzx  eax,al
c001e017:	09 c1                	or     ecx,eax
c001e019:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001e01d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001e021:	3c 58                	cmp    al,0x58
c001e023:	74 47                	je     c001e06c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001e025:	d4 40                	aam    0x40
c001e027:	d5 39                	aad    0x39
c001e029:	8d 50 d0             	lea    edx,[eax-0x30]
c001e02c:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001e030:	0f b6 d2             	movzx  edx,dl
c001e033:	c1 e2 04             	shl    edx,0x4
c001e036:	d4 40                	aam    0x40
c001e038:	d5 39                	aad    0x39
c001e03a:	83 e8 30             	sub    eax,0x30
c001e03d:	0f b6 c0             	movzx  eax,al
c001e040:	09 c2                	or     edx,eax
c001e042:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001e046:	c1 e2 04             	shl    edx,0x4
c001e049:	d4 40                	aam    0x40
c001e04b:	d5 39                	aad    0x39
c001e04d:	83 e8 30             	sub    eax,0x30
c001e050:	0f b6 c0             	movzx  eax,al
c001e053:	09 c2                	or     edx,eax
c001e055:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001e059:	c1 e2 04             	shl    edx,0x4
c001e05c:	d4 40                	aam    0x40
c001e05e:	d5 39                	aad    0x39
c001e060:	83 e8 30             	sub    eax,0x30
c001e063:	0f b6 c0             	movzx  eax,al
c001e066:	09 c2                	or     edx,eax
c001e068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e06c:	83 c6 10             	add    esi,0x10
c001e06f:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001e073:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001e077:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001e07b:	83 fa 0a             	cmp    edx,0xa
c001e07e:	74 0b                	je     c001e08b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001e080:	47                   	inc    edi
c001e081:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001e085:	75 19                	jne    c001e0a0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001e087:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001e08b:	31 c0                	xor    eax,eax
c001e08d:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001e092:	0f 94 c0             	sete   al
c001e095:	01 c6                	add    esi,eax
c001e097:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001e09c:	75 0b                	jne    c001e0a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001e09e:	eb 14                	jmp    c001e0b4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001e0a0:	46                   	inc    esi
c001e0a1:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001e0a4:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001e0a7:	eb ca                	jmp    c001e073 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001e0a9:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001e0ae:	0f 85 dd fe ff ff    	jne    c001df91 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e0b4:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001e0b9:	74 10                	je     c001e0cb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001e0bb:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001e0c0:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001e0c5:	0f 85 c6 fe ff ff    	jne    c001df91 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e0cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e0cf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e0d3:	83 e8 30             	sub    eax,0x30
c001e0d6:	83 ef 30             	sub    edi,0x30
c001e0d9:	c1 e0 04             	shl    eax,0x4
c001e0dc:	09 f8                	or     eax,edi
c001e0de:	0f b6 c0             	movzx  eax,al
c001e0e1:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001e0e5:	0f 85 a6 fe ff ff    	jne    c001df91 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e0eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0ef:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001e0f3:	83 e8 30             	sub    eax,0x30
c001e0f6:	83 ef 30             	sub    edi,0x30
c001e0f9:	c1 e0 04             	shl    eax,0x4
c001e0fc:	09 f8                	or     eax,edi
c001e0fe:	0f b6 c0             	movzx  eax,al
c001e101:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e105:	0f 85 86 fe ff ff    	jne    c001df91 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e10b:	50                   	push   eax
c001e10c:	50                   	push   eax
c001e10d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001e111:	50                   	push   eax
c001e112:	55                   	push   ebp
c001e113:	e8 28 25 fe ff       	call   c0000640 <strcpy>
c001e118:	83 c4 10             	add    esp,0x10
c001e11b:	eb 06                	jmp    c001e123 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001e11d:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001e121:	31 ed                	xor    ebp,ebp
c001e123:	81 c4 4c 01 00 00    	add    esp,0x14c
c001e129:	89 e8                	mov    eax,ebp
c001e12b:	5b                   	pop    ebx
c001e12c:	5e                   	pop    esi
c001e12d:	5f                   	pop    edi
c001e12e:	5d                   	pop    ebp
c001e12f:	c3                   	ret    

c001e130 <PCI::checkBus(unsigned char)>:
c001e130:	56                   	push   esi
c001e131:	53                   	push   ebx
c001e132:	31 db                	xor    ebx,ebx
c001e134:	51                   	push   ecx
c001e135:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e13a:	52                   	push   edx
c001e13b:	53                   	push   ebx
c001e13c:	43                   	inc    ebx
c001e13d:	56                   	push   esi
c001e13e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e142:	e8 6f 03 00 00       	call   c001e4b6 <PCI::checkDevice(unsigned char, unsigned char)>
c001e147:	83 c4 10             	add    esp,0x10
c001e14a:	83 fb 20             	cmp    ebx,0x20
c001e14d:	75 eb                	jne    c001e13a <PCI::checkBus(unsigned char)+0xa>
c001e14f:	58                   	pop    eax
c001e150:	5b                   	pop    ebx
c001e151:	5e                   	pop    esi
c001e152:	c3                   	ret    
c001e153:	90                   	nop

c001e154 <PCI::foundDevice(PCIDeviceInfo)>:
c001e154:	55                   	push   ebp
c001e155:	57                   	push   edi
c001e156:	56                   	push   esi
c001e157:	53                   	push   ebx
c001e158:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001e15e:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001e166:	8b ac 24 a0 00 00 00 	mov    ebp,DWORD PTR [esp+0xa0]
c001e16d:	3d ff ff 00 00       	cmp    eax,0xffff
c001e172:	0f 84 b7 01 00 00    	je     c001e32f <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001e178:	0f b7 9c 24 a4 00 00 00 	movzx  ebx,WORD PTR [esp+0xa4]
c001e180:	66 81 fb 06 04       	cmp    bx,0x406
c001e185:	75 32                	jne    c001e1b9 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001e187:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001e18f:	50                   	push   eax
c001e190:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001e198:	50                   	push   eax
c001e199:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001e1a1:	50                   	push   eax
c001e1a2:	55                   	push   ebp
c001e1a3:	e8 4e fb ff ff       	call   c001dcf6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001e1a8:	59                   	pop    ecx
c001e1a9:	0f b6 c0             	movzx  eax,al
c001e1ac:	5b                   	pop    ebx
c001e1ad:	50                   	push   eax
c001e1ae:	55                   	push   ebp
c001e1af:	e8 7c ff ff ff       	call   c001e130 <PCI::checkBus(unsigned char)>
c001e1b4:	e9 16 01 00 00       	jmp    c001e2cf <PCI::foundDevice(PCIDeviceInfo)+0x17b>
c001e1b9:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001e1c0:	8b 85 cc 00 00 00    	mov    eax,DWORD PTR [ebp+0xcc]
c001e1c6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001e1ca:	8b bc 24 a4 00 00 00 	mov    edi,DWORD PTR [esp+0xa4]
c001e1d1:	0f b6 b4 24 c4 00 00 00 	movzx  esi,BYTE PTR [esp+0xc4]
c001e1d9:	85 c0                	test   eax,eax
c001e1db:	74 36                	je     c001e213 <PCI::foundDevice(PCIDeviceInfo)+0xbf>
c001e1dd:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e1e0:	85 d2                	test   edx,edx
c001e1e2:	74 2b                	je     c001e20f <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001e1e4:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c001e1ea:	31 f9                	xor    ecx,edi
c001e1ec:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c001e1f2:	75 1b                	jne    c001e20f <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001e1f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e1f8:	39 8a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ecx
c001e1fe:	75 0f                	jne    c001e20f <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001e200:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001e207:	39 f2                	cmp    edx,esi
c001e209:	0f 84 20 01 00 00    	je     c001e32f <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001e20f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e211:	eb c6                	jmp    c001e1d9 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001e213:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001e217:	be 4c 62 02 c0       	mov    esi,0xc002624c
c001e21c:	b9 07 00 00 00       	mov    ecx,0x7
c001e221:	fc                   	cld    
c001e222:	31 d2                	xor    edx,edx
c001e224:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e226:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001e22d:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001e231:	b9 12 00 00 00       	mov    ecx,0x12
c001e236:	83 ec 0c             	sub    esp,0xc
c001e239:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e23b:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001e243:	b9 0a 00 00 00       	mov    ecx,0xa
c001e248:	f7 f1                	div    ecx
c001e24a:	83 c0 30             	add    eax,0x30
c001e24d:	83 c2 30             	add    edx,0x30
c001e250:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001e254:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001e258:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001e260:	31 d2                	xor    edx,edx
c001e262:	f7 f1                	div    ecx
c001e264:	83 c0 30             	add    eax,0x30
c001e267:	83 c2 30             	add    edx,0x30
c001e26a:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e26e:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001e272:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e276:	50                   	push   eax
c001e277:	e8 1f f0 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001e27c:	83 c4 10             	add    esp,0x10
c001e27f:	81 fb 01 06 00 00    	cmp    ebx,0x601
c001e285:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001e28c:	75 46                	jne    c001e2d4 <PCI::foundDevice(PCIDeviceInfo)+0x180>
c001e28e:	83 ec 0c             	sub    esp,0xc
c001e291:	68 64 01 00 00       	push   0x164
c001e296:	e8 4c 1a ff ff       	call   c000fce7 <malloc>
c001e29b:	89 c3                	mov    ebx,eax
c001e29d:	89 04 24             	mov    DWORD PTR [esp],eax
c001e2a0:	e8 3b 11 00 00       	call   c001f3e0 <SATABus::SATABus()>
c001e2a5:	58                   	pop    eax
c001e2a6:	5a                   	pop    edx
c001e2a7:	53                   	push   ebx
c001e2a8:	55                   	push   ebp
c001e2a9:	e8 82 b7 fe ff       	call   c0009a30 <Device::addChild(Device*)>
c001e2ae:	83 ec 1c             	sub    esp,0x1c
c001e2b1:	b9 09 00 00 00       	mov    ecx,0x9
c001e2b6:	89 e7                	mov    edi,esp
c001e2b8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e2ba:	53                   	push   ebx
c001e2bb:	e8 b6 b6 fe ff       	call   c0009976 <Device::preOpenPCI(PCIDeviceInfo)>
c001e2c0:	83 c4 30             	add    esp,0x30
c001e2c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e2c5:	6a 00                	push   0x0
c001e2c7:	6a 00                	push   0x0
c001e2c9:	6a 00                	push   0x0
c001e2cb:	53                   	push   ebx
c001e2cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e2cf:	83 c4 10             	add    esp,0x10
c001e2d2:	eb 5b                	jmp    c001e32f <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001e2d4:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001e2da:	75 19                	jne    c001e2f5 <PCI::foundDevice(PCIDeviceInfo)+0x1a1>
c001e2dc:	83 ec 0c             	sub    esp,0xc
c001e2df:	68 70 02 00 00       	push   0x270
c001e2e4:	e8 fe 19 ff ff       	call   c000fce7 <malloc>
c001e2e9:	89 c3                	mov    ebx,eax
c001e2eb:	89 04 24             	mov    DWORD PTR [esp],eax
c001e2ee:	e8 93 02 00 00       	call   c001e586 <IDE::IDE()>
c001e2f3:	eb b0                	jmp    c001e2a5 <PCI::foundDevice(PCIDeviceInfo)+0x151>
c001e2f5:	83 ec 0c             	sub    esp,0xc
c001e2f8:	68 58 01 00 00       	push   0x158
c001e2fd:	e8 e5 19 ff ff       	call   c000fce7 <malloc>
c001e302:	89 c3                	mov    ebx,eax
c001e304:	58                   	pop    eax
c001e305:	5a                   	pop    edx
c001e306:	68 32 62 02 c0       	push   0xc0026232
c001e30b:	53                   	push   ebx
c001e30c:	e8 d3 b9 fe ff       	call   c0009ce4 <DriverlessDevice::DriverlessDevice(char const*)>
c001e311:	59                   	pop    ecx
c001e312:	5f                   	pop    edi
c001e313:	53                   	push   ebx
c001e314:	55                   	push   ebp
c001e315:	e8 16 b7 fe ff       	call   c0009a30 <Device::addChild(Device*)>
c001e31a:	83 ec 1c             	sub    esp,0x1c
c001e31d:	b9 09 00 00 00       	mov    ecx,0x9
c001e322:	89 e7                	mov    edi,esp
c001e324:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e326:	53                   	push   ebx
c001e327:	e8 4a b6 fe ff       	call   c0009976 <Device::preOpenPCI(PCIDeviceInfo)>
c001e32c:	83 c4 30             	add    esp,0x30
c001e32f:	81 c4 8c 00 00 00    	add    esp,0x8c
c001e335:	5b                   	pop    ebx
c001e336:	5e                   	pop    esi
c001e337:	5f                   	pop    edi
c001e338:	5d                   	pop    ebp
c001e339:	c3                   	ret    

c001e33a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e33a:	55                   	push   ebp
c001e33b:	57                   	push   edi
c001e33c:	56                   	push   esi
c001e33d:	53                   	push   ebx
c001e33e:	83 ec 68             	sub    esp,0x68
c001e341:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001e345:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001e34c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e350:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001e357:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001e35c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e360:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001e367:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001e36c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e370:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001e375:	6a 0c                	push   0xc
c001e377:	57                   	push   edi
c001e378:	53                   	push   ebx
c001e379:	56                   	push   esi
c001e37a:	55                   	push   ebp
c001e37b:	e8 c6 f7 ff ff       	call   c001db46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e380:	83 c4 20             	add    esp,0x20
c001e383:	57                   	push   edi
c001e384:	53                   	push   ebx
c001e385:	56                   	push   esi
c001e386:	55                   	push   ebp
c001e387:	e8 b0 f8 ff ff       	call   c001dc3c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e38c:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001e391:	57                   	push   edi
c001e392:	53                   	push   ebx
c001e393:	56                   	push   esi
c001e394:	55                   	push   ebp
c001e395:	e8 38 f9 ff ff       	call   c001dcd2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e39a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001e39e:	83 c4 14             	add    esp,0x14
c001e3a1:	6a 3c                	push   0x3c
c001e3a3:	57                   	push   edi
c001e3a4:	53                   	push   ebx
c001e3a5:	56                   	push   esi
c001e3a6:	55                   	push   ebp
c001e3a7:	e8 9a f7 ff ff       	call   c001db46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e3ac:	0f b6 c4             	movzx  eax,ah
c001e3af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e3b3:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e3b7:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e3bb:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c001e3c0:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001e3c6:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001e3cc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e3d0:	83 c4 20             	add    esp,0x20
c001e3d3:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001e3d8:	74 30                	je     c001e40a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001e3da:	31 c0                	xor    eax,eax
c001e3dc:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001e3e0:	7e 28                	jle    c001e40a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001e3e2:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001e3ea:	39 cb                	cmp    ebx,ecx
c001e3ec:	75 19                	jne    c001e407 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001e3ee:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001e3f6:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001e3fa:	75 0b                	jne    c001e407 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001e3fc:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001e403:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001e407:	40                   	inc    eax
c001e408:	eb d2                	jmp    c001e3dc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001e40a:	31 d2                	xor    edx,edx
c001e40c:	83 ec 0c             	sub    esp,0xc
c001e40f:	57                   	push   edi
c001e410:	53                   	push   ebx
c001e411:	56                   	push   esi
c001e412:	52                   	push   edx
c001e413:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001e417:	55                   	push   ebp
c001e418:	e8 01 f9 ff ff       	call   c001dd1e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e41d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e421:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001e425:	42                   	inc    edx
c001e426:	83 c4 20             	add    esp,0x20
c001e429:	83 fa 06             	cmp    edx,0x6
c001e42c:	75 de                	jne    c001e40c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001e42e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e432:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e436:	c1 e2 08             	shl    edx,0x8
c001e439:	83 ec 0c             	sub    esp,0xc
c001e43c:	0f b6 c4             	movzx  eax,ah
c001e43f:	09 d0                	or     eax,edx
c001e441:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001e446:	6a 02                	push   0x2
c001e448:	57                   	push   edi
c001e449:	53                   	push   ebx
c001e44a:	56                   	push   esi
c001e44b:	55                   	push   ebp
c001e44c:	e8 f5 f6 ff ff       	call   c001db46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e451:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001e456:	83 c4 20             	add    esp,0x20
c001e459:	57                   	push   edi
c001e45a:	53                   	push   ebx
c001e45b:	56                   	push   esi
c001e45c:	55                   	push   ebp
c001e45d:	e8 24 f8 ff ff       	call   c001dc86 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e462:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e466:	57                   	push   edi
c001e467:	53                   	push   ebx
c001e468:	56                   	push   esi
c001e469:	55                   	push   ebp
c001e46a:	e8 81 f7 ff ff       	call   c001dbf0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e46f:	b9 09 00 00 00       	mov    ecx,0x9
c001e474:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001e479:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001e47d:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e481:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e485:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001e489:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e48d:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001e491:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e495:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001e499:	83 ec 0c             	sub    esp,0xc
c001e49c:	fc                   	cld    
c001e49d:	89 e7                	mov    edi,esp
c001e49f:	8d 74 24 58          	lea    esi,[esp+0x58]
c001e4a3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e4a5:	55                   	push   ebp
c001e4a6:	e8 a9 fc ff ff       	call   c001e154 <PCI::foundDevice(PCIDeviceInfo)>
c001e4ab:	81 c4 8c 00 00 00    	add    esp,0x8c
c001e4b1:	5b                   	pop    ebx
c001e4b2:	5e                   	pop    esi
c001e4b3:	5f                   	pop    edi
c001e4b4:	5d                   	pop    ebp
c001e4b5:	c3                   	ret    

c001e4b6 <PCI::checkDevice(unsigned char, unsigned char)>:
c001e4b6:	55                   	push   ebp
c001e4b7:	57                   	push   edi
c001e4b8:	56                   	push   esi
c001e4b9:	53                   	push   ebx
c001e4ba:	83 ec 0c             	sub    esp,0xc
c001e4bd:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e4c1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001e4c6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001e4cb:	6a 00                	push   0x0
c001e4cd:	56                   	push   esi
c001e4ce:	57                   	push   edi
c001e4cf:	55                   	push   ebp
c001e4d0:	e8 1b f7 ff ff       	call   c001dbf0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e4d5:	6a 00                	push   0x0
c001e4d7:	56                   	push   esi
c001e4d8:	57                   	push   edi
c001e4d9:	55                   	push   ebp
c001e4da:	e8 5b fe ff ff       	call   c001e33a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e4df:	83 c4 20             	add    esp,0x20
c001e4e2:	6a 00                	push   0x0
c001e4e4:	56                   	push   esi
c001e4e5:	57                   	push   edi
c001e4e6:	55                   	push   ebp
c001e4e7:	e8 28 f7 ff ff       	call   c001dc14 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e4ec:	83 c4 10             	add    esp,0x10
c001e4ef:	a8 80                	test   al,0x80
c001e4f1:	74 2d                	je     c001e520 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001e4f3:	bb 01 00 00 00       	mov    ebx,0x1
c001e4f8:	53                   	push   ebx
c001e4f9:	56                   	push   esi
c001e4fa:	57                   	push   edi
c001e4fb:	55                   	push   ebp
c001e4fc:	e8 ef f6 ff ff       	call   c001dbf0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e501:	83 c4 10             	add    esp,0x10
c001e504:	0f b7 c0             	movzx  eax,ax
c001e507:	3d ff ff 00 00       	cmp    eax,0xffff
c001e50c:	74 0c                	je     c001e51a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001e50e:	53                   	push   ebx
c001e50f:	56                   	push   esi
c001e510:	57                   	push   edi
c001e511:	55                   	push   ebp
c001e512:	e8 23 fe ff ff       	call   c001e33a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e517:	83 c4 10             	add    esp,0x10
c001e51a:	43                   	inc    ebx
c001e51b:	83 fb 08             	cmp    ebx,0x8
c001e51e:	75 d8                	jne    c001e4f8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001e520:	83 c4 0c             	add    esp,0xc
c001e523:	5b                   	pop    ebx
c001e524:	5e                   	pop    esi
c001e525:	5f                   	pop    edi
c001e526:	5d                   	pop    ebp
c001e527:	c3                   	ret    

c001e528 <PCI::detect()>:
c001e528:	56                   	push   esi
c001e529:	53                   	push   ebx
c001e52a:	53                   	push   ebx
c001e52b:	31 db                	xor    ebx,ebx
c001e52d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e531:	6a 00                	push   0x0
c001e533:	6a 00                	push   0x0
c001e535:	6a 00                	push   0x0
c001e537:	56                   	push   esi
c001e538:	e8 d7 f6 ff ff       	call   c001dc14 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e53d:	83 c4 10             	add    esp,0x10
c001e540:	a8 80                	test   al,0x80
c001e542:	75 21                	jne    c001e565 <PCI::detect()+0x3d>
c001e544:	51                   	push   ecx
c001e545:	51                   	push   ecx
c001e546:	6a 00                	push   0x0
c001e548:	56                   	push   esi
c001e549:	e8 e2 fb ff ff       	call   c001e130 <PCI::checkBus(unsigned char)>
c001e54e:	83 c4 10             	add    esp,0x10
c001e551:	eb 2a                	jmp    c001e57d <PCI::detect()+0x55>
c001e553:	52                   	push   edx
c001e554:	52                   	push   edx
c001e555:	53                   	push   ebx
c001e556:	43                   	inc    ebx
c001e557:	56                   	push   esi
c001e558:	e8 d3 fb ff ff       	call   c001e130 <PCI::checkBus(unsigned char)>
c001e55d:	83 c4 10             	add    esp,0x10
c001e560:	83 fb 08             	cmp    ebx,0x8
c001e563:	74 18                	je     c001e57d <PCI::detect()+0x55>
c001e565:	53                   	push   ebx
c001e566:	6a 00                	push   0x0
c001e568:	6a 00                	push   0x0
c001e56a:	56                   	push   esi
c001e56b:	e8 80 f6 ff ff       	call   c001dbf0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e570:	83 c4 10             	add    esp,0x10
c001e573:	0f b7 c0             	movzx  eax,ax
c001e576:	3d ff ff 00 00       	cmp    eax,0xffff
c001e57b:	74 d6                	je     c001e553 <PCI::detect()+0x2b>
c001e57d:	58                   	pop    eax
c001e57e:	5b                   	pop    ebx
c001e57f:	5e                   	pop    esi
c001e580:	c3                   	ret    
c001e581:	90                   	nop

c001e582 <IDE::close(int, int, void*)>:
c001e582:	83 c8 ff             	or     eax,0xffffffff
c001e585:	c3                   	ret    

c001e586 <IDE::IDE()>:
c001e586:	83 ec 0c             	sub    esp,0xc
c001e589:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e58d:	83 ec 08             	sub    esp,0x8
c001e590:	68 dc 62 02 c0       	push   0xc00262dc
c001e595:	50                   	push   eax
c001e596:	e8 ed b7 fe ff       	call   c0009d88 <HardDiskController::HardDiskController(char const*)>
c001e59b:	83 c4 10             	add    esp,0x10
c001e59e:	ba 08 64 02 c0       	mov    edx,0xc0026408
c001e5a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5a7:	89 10                	mov    DWORD PTR [eax],edx
c001e5a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5ad:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e5b4:	90                   	nop
c001e5b5:	83 c4 0c             	add    esp,0xc
c001e5b8:	c3                   	ret    
c001e5b9:	90                   	nop

c001e5ba <IDE::prepareInterrupt(unsigned char)>:
c001e5ba:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e5bf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e5c3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001e5cb:	c3                   	ret    

c001e5cc <selectDrive(unsigned char, unsigned char)>:
c001e5cc:	c3                   	ret    
c001e5cd:	90                   	nop

c001e5ce <IDE::getBase(unsigned char)>:
c001e5ce:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e5d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5d7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001e5df:	c3                   	ret    

c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001e5e0:	55                   	push   ebp
c001e5e1:	57                   	push   edi
c001e5e2:	56                   	push   esi
c001e5e3:	53                   	push   ebx
c001e5e4:	83 ec 1c             	sub    esp,0x1c
c001e5e7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e5eb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e5ef:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001e5f2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e5f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e5fa:	80 f9 03             	cmp    cl,0x3
c001e5fd:	77 4f                	ja     c001e64e <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001e5ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e603:	0f b6 fa             	movzx  edi,dl
c001e606:	0f b6 db             	movzx  ebx,bl
c001e609:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001e60c:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001e611:	80 ca 80             	or     dl,0x80
c001e614:	52                   	push   edx
c001e615:	6a 0c                	push   0xc
c001e617:	57                   	push   edi
c001e618:	56                   	push   esi
c001e619:	e8 c2 ff ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e61e:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001e623:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e627:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001e62b:	ee                   	out    dx,al
c001e62c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e631:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001e635:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001e639:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e63d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e645:	83 c4 2c             	add    esp,0x2c
c001e648:	5b                   	pop    ebx
c001e649:	5e                   	pop    esi
c001e64a:	5f                   	pop    edi
c001e64b:	5d                   	pop    ebp
c001e64c:	eb 92                	jmp    c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e64e:	0f b6 cb             	movzx  ecx,bl
c001e651:	83 f9 07             	cmp    ecx,0x7
c001e654:	77 12                	ja     c001e668 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001e656:	0f b6 d2             	movzx  edx,dl
c001e659:	0f b6 db             	movzx  ebx,bl
c001e65c:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001e664:	01 da                	add    edx,ebx
c001e666:	eb 2f                	jmp    c001e697 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e668:	83 f9 0d             	cmp    ecx,0xd
c001e66b:	77 13                	ja     c001e680 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001e66d:	0f b6 d2             	movzx  edx,dl
c001e670:	0f b6 db             	movzx  ebx,bl
c001e673:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001e67a:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001e67e:	eb 17                	jmp    c001e697 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e680:	83 f9 15             	cmp    ecx,0x15
c001e683:	77 13                	ja     c001e698 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001e685:	0f b6 d2             	movzx  edx,dl
c001e688:	0f b6 db             	movzx  ebx,bl
c001e68b:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001e693:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001e697:	ee                   	out    dx,al
c001e698:	83 c4 1c             	add    esp,0x1c
c001e69b:	5b                   	pop    ebx
c001e69c:	5e                   	pop    esi
c001e69d:	5f                   	pop    edi
c001e69e:	5d                   	pop    ebp
c001e69f:	c3                   	ret    

c001e6a0 <IDE::read(unsigned char, unsigned char)>:
c001e6a0:	55                   	push   ebp
c001e6a1:	57                   	push   edi
c001e6a2:	56                   	push   esi
c001e6a3:	53                   	push   ebx
c001e6a4:	83 ec 1c             	sub    esp,0x1c
c001e6a7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e6ab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e6af:	8d 43 f8             	lea    eax,[ebx-0x8]
c001e6b2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e6b6:	3c 03                	cmp    al,0x3
c001e6b8:	77 40                	ja     c001e6fa <IDE::read(unsigned char, unsigned char)+0x5a>
c001e6ba:	0f b6 f9             	movzx  edi,cl
c001e6bd:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001e6c0:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e6c5:	0c 80                	or     al,0x80
c001e6c7:	50                   	push   eax
c001e6c8:	6a 0c                	push   0xc
c001e6ca:	57                   	push   edi
c001e6cb:	56                   	push   esi
c001e6cc:	e8 0f ff ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e6d1:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001e6d6:	0f b6 d3             	movzx  edx,bl
c001e6d9:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001e6dd:	ec                   	in     al,dx
c001e6de:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e6e2:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001e6e7:	52                   	push   edx
c001e6e8:	6a 0c                	push   0xc
c001e6ea:	57                   	push   edi
c001e6eb:	56                   	push   esi
c001e6ec:	e8 ef fe ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e6f1:	83 c4 20             	add    esp,0x20
c001e6f4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e6f8:	eb 4c                	jmp    c001e746 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e6fa:	0f b6 d3             	movzx  edx,bl
c001e6fd:	83 fa 07             	cmp    edx,0x7
c001e700:	77 12                	ja     c001e714 <IDE::read(unsigned char, unsigned char)+0x74>
c001e702:	0f b6 c9             	movzx  ecx,cl
c001e705:	0f b6 d3             	movzx  edx,bl
c001e708:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001e710:	01 c2                	add    edx,eax
c001e712:	eb 31                	jmp    c001e745 <IDE::read(unsigned char, unsigned char)+0xa5>
c001e714:	83 fa 0d             	cmp    edx,0xd
c001e717:	77 13                	ja     c001e72c <IDE::read(unsigned char, unsigned char)+0x8c>
c001e719:	0f b6 c9             	movzx  ecx,cl
c001e71c:	0f b6 d3             	movzx  edx,bl
c001e71f:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001e726:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e72a:	eb 19                	jmp    c001e745 <IDE::read(unsigned char, unsigned char)+0xa5>
c001e72c:	31 c0                	xor    eax,eax
c001e72e:	83 fa 15             	cmp    edx,0x15
c001e731:	77 13                	ja     c001e746 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e733:	0f b6 c9             	movzx  ecx,cl
c001e736:	0f b6 d3             	movzx  edx,bl
c001e739:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001e741:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e745:	ec                   	in     al,dx
c001e746:	83 c4 1c             	add    esp,0x1c
c001e749:	5b                   	pop    ebx
c001e74a:	5e                   	pop    esi
c001e74b:	5f                   	pop    edi
c001e74c:	5d                   	pop    ebp
c001e74d:	c3                   	ret    

c001e74e <IDE::waitInterrupt(unsigned char)>:
c001e74e:	55                   	push   ebp
c001e74f:	57                   	push   edi
c001e750:	56                   	push   esi
c001e751:	53                   	push   ebx
c001e752:	31 db                	xor    ebx,ebx
c001e754:	83 ec 0c             	sub    esp,0xc
c001e757:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e75b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001e760:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001e768:	89 e8                	mov    eax,ebp
c001e76a:	84 c0                	test   al,al
c001e76c:	75 31                	jne    c001e79f <IDE::waitInterrupt(unsigned char)+0x51>
c001e76e:	52                   	push   edx
c001e76f:	6a 0c                	push   0xc
c001e771:	56                   	push   esi
c001e772:	57                   	push   edi
c001e773:	e8 28 ff ff ff       	call   c001e6a0 <IDE::read(unsigned char, unsigned char)>
c001e778:	83 c4 10             	add    esp,0x10
c001e77b:	a8 01                	test   al,0x1
c001e77d:	75 28                	jne    c001e7a7 <IDE::waitInterrupt(unsigned char)+0x59>
c001e77f:	f6 c3 04             	test   bl,0x4
c001e782:	75 13                	jne    c001e797 <IDE::waitInterrupt(unsigned char)+0x49>
c001e784:	83 fb 32             	cmp    ebx,0x32
c001e787:	7e 0e                	jle    c001e797 <IDE::waitInterrupt(unsigned char)+0x49>
c001e789:	50                   	push   eax
c001e78a:	50                   	push   eax
c001e78b:	6a 00                	push   0x0
c001e78d:	6a 64                	push   0x64
c001e78f:	e8 a0 8c ff ff       	call   c0017434 <milliTenthSleep(unsigned long long)>
c001e794:	83 c4 10             	add    esp,0x10
c001e797:	83 fb 3c             	cmp    ebx,0x3c
c001e79a:	74 0b                	je     c001e7a7 <IDE::waitInterrupt(unsigned char)+0x59>
c001e79c:	43                   	inc    ebx
c001e79d:	eb c1                	jmp    c001e760 <IDE::waitInterrupt(unsigned char)+0x12>
c001e79f:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001e7a7:	83 c4 0c             	add    esp,0xc
c001e7aa:	89 e8                	mov    eax,ebp
c001e7ac:	5b                   	pop    ebx
c001e7ad:	5e                   	pop    esi
c001e7ae:	5f                   	pop    edi
c001e7af:	5d                   	pop    ebp
c001e7b0:	c3                   	ret    

c001e7b1 <ideChannel0IRQHandler(regs*, void*)>:
c001e7b1:	83 ec 10             	sub    esp,0x10
c001e7b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e7b8:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001e7bf:	6a 07                	push   0x7
c001e7c1:	6a 00                	push   0x0
c001e7c3:	50                   	push   eax
c001e7c4:	e8 d7 fe ff ff       	call   c001e6a0 <IDE::read(unsigned char, unsigned char)>
c001e7c9:	83 c4 1c             	add    esp,0x1c
c001e7cc:	c3                   	ret    

c001e7cd <ideChannel1IRQHandler(regs*, void*)>:
c001e7cd:	83 ec 10             	sub    esp,0x10
c001e7d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e7d4:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001e7db:	6a 07                	push   0x7
c001e7dd:	6a 01                	push   0x1
c001e7df:	50                   	push   eax
c001e7e0:	e8 bb fe ff ff       	call   c001e6a0 <IDE::read(unsigned char, unsigned char)>
c001e7e5:	83 c4 1c             	add    esp,0x1c
c001e7e8:	c3                   	ret    
c001e7e9:	90                   	nop

c001e7ea <IDE::enableIRQs(unsigned char, bool)>:
c001e7ea:	57                   	push   edi
c001e7eb:	b8 02 00 00 00       	mov    eax,0x2
c001e7f0:	56                   	push   esi
c001e7f1:	53                   	push   ebx
c001e7f2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e7f6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e7fa:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001e7ff:	74 02                	je     c001e803 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001e801:	31 c0                	xor    eax,eax
c001e803:	0f b6 db             	movzx  ebx,bl
c001e806:	bf 04 00 00 00       	mov    edi,0x4
c001e80b:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001e812:	50                   	push   eax
c001e813:	6a 0c                	push   0xc
c001e815:	53                   	push   ebx
c001e816:	56                   	push   esi
c001e817:	e8 c4 fd ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e81c:	83 c4 10             	add    esp,0x10
c001e81f:	50                   	push   eax
c001e820:	6a 0c                	push   0xc
c001e822:	53                   	push   ebx
c001e823:	56                   	push   esi
c001e824:	e8 77 fe ff ff       	call   c001e6a0 <IDE::read(unsigned char, unsigned char)>
c001e829:	83 c4 10             	add    esp,0x10
c001e82c:	4f                   	dec    edi
c001e82d:	75 f0                	jne    c001e81f <IDE::enableIRQs(unsigned char, bool)+0x35>
c001e82f:	5b                   	pop    ebx
c001e830:	5e                   	pop    esi
c001e831:	5f                   	pop    edi
c001e832:	c3                   	ret    
c001e833:	90                   	nop

c001e834 <IDE::open(int, int, void*)>:
c001e834:	57                   	push   edi
c001e835:	56                   	push   esi
c001e836:	53                   	push   ebx
c001e837:	83 ec 10             	sub    esp,0x10
c001e83a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e83e:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001e847:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001e850:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001e857:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001e85e:	0f 85 84 02 00 00    	jne    c001eae8 <IDE::open(int, int, void*)+0x2b4>
c001e864:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001e86a:	a8 70                	test   al,0x70
c001e86c:	75 44                	jne    c001e8b2 <IDE::open(int, int, void*)+0x7e>
c001e86e:	ba 20 84 00 00       	mov    edx,0x8420
c001e873:	0f a3 c2             	bt     edx,eax
c001e876:	73 3a                	jae    c001e8b2 <IDE::open(int, int, void*)+0x7e>
c001e878:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001e87e:	83 ec 0c             	sub    esp,0xc
c001e881:	83 e0 fc             	and    eax,0xfffffffc
c001e884:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e88b:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001e891:	83 e0 fc             	and    eax,0xfffffffc
c001e894:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e89b:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001e8a1:	83 e0 fc             	and    eax,0xfffffffc
c001e8a4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e8ab:	68 69 35 02 c0       	push   0xc0023569
c001e8b0:	eb 60                	jmp    c001e912 <IDE::open(int, int, void*)+0xde>
c001e8b2:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001e8bc:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001e8c6:	be 64 00 00 00       	mov    esi,0x64
c001e8cb:	57                   	push   edi
c001e8cc:	57                   	push   edi
c001e8cd:	68 f4 62 02 c0       	push   0xc00262f4
c001e8d2:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001e8d6:	57                   	push   edi
c001e8d7:	e8 64 1d fe ff       	call   c0000640 <strcpy>
c001e8dc:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001e8e3:	31 d2                	xor    edx,edx
c001e8e5:	89 c8                	mov    eax,ecx
c001e8e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001e8ea:	f7 f6                	div    esi
c001e8ec:	be 0a 00 00 00       	mov    esi,0xa
c001e8f1:	83 c0 30             	add    eax,0x30
c001e8f4:	31 d2                	xor    edx,edx
c001e8f6:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e8fa:	89 c8                	mov    eax,ecx
c001e8fc:	f7 f6                	div    esi
c001e8fe:	89 d1                	mov    ecx,edx
c001e900:	31 d2                	xor    edx,edx
c001e902:	83 c1 30             	add    ecx,0x30
c001e905:	f7 f6                	div    esi
c001e907:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001e90b:	83 c2 30             	add    edx,0x30
c001e90e:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001e912:	e8 84 e9 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001e917:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e91c:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e923:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e92a:	c1 e1 10             	shl    ecx,0x10
c001e92d:	c1 e0 0b             	shl    eax,0xb
c001e930:	83 c4 10             	add    esp,0x10
c001e933:	09 c1                	or     ecx,eax
c001e935:	89 fa                	mov    edx,edi
c001e937:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e93e:	c1 e0 08             	shl    eax,0x8
c001e941:	09 c1                	or     ecx,eax
c001e943:	89 c8                	mov    eax,ecx
c001e945:	0d 08 00 00 80       	or     eax,0x80000008
c001e94a:	ef                   	out    dx,eax
c001e94b:	be fc 0c 00 00       	mov    esi,0xcfc
c001e950:	89 f2                	mov    edx,esi
c001e952:	ed                   	in     eax,dx
c001e953:	c1 e8 10             	shr    eax,0x10
c001e956:	3d ff ff 00 00       	cmp    eax,0xffff
c001e95b:	0f 84 e5 00 00 00    	je     c001ea46 <IDE::open(int, int, void*)+0x212>
c001e961:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e967:	89 fa                	mov    edx,edi
c001e969:	89 c8                	mov    eax,ecx
c001e96b:	ef                   	out    dx,eax
c001e96c:	b0 fe                	mov    al,0xfe
c001e96e:	89 f2                	mov    edx,esi
c001e970:	ee                   	out    dx,al
c001e971:	89 c8                	mov    eax,ecx
c001e973:	89 fa                	mov    edx,edi
c001e975:	ef                   	out    dx,eax
c001e976:	89 f2                	mov    edx,esi
c001e978:	ed                   	in     eax,dx
c001e979:	3c fe                	cmp    al,0xfe
c001e97b:	0f 85 85 00 00 00    	jne    c001ea06 <IDE::open(int, int, void*)+0x1d2>
c001e981:	83 ec 0c             	sub    esp,0xc
c001e984:	68 9f 35 02 c0       	push   0xc002359f
c001e989:	e8 0d e9 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001e98e:	c7 04 24 fa 62 02 c0 	mov    DWORD PTR [esp],0xc00262fa
c001e995:	e8 ca 85 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e99a:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001e9a4:	c7 04 24 88 38 02 c0 	mov    DWORD PTR [esp],0xc0023888
c001e9ab:	e8 eb e8 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001e9b0:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e9b7:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e9be:	c1 e1 10             	shl    ecx,0x10
c001e9c1:	c1 e0 08             	shl    eax,0x8
c001e9c4:	89 fa                	mov    edx,edi
c001e9c6:	09 c1                	or     ecx,eax
c001e9c8:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e9cf:	c1 e0 0b             	shl    eax,0xb
c001e9d2:	09 c1                	or     ecx,eax
c001e9d4:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e9da:	89 c8                	mov    eax,ecx
c001e9dc:	ef                   	out    dx,eax
c001e9dd:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001e9e3:	89 f2                	mov    edx,esi
c001e9e5:	ee                   	out    dx,al
c001e9e6:	89 c8                	mov    eax,ecx
c001e9e8:	89 fa                	mov    edx,edi
c001e9ea:	ef                   	out    dx,eax
c001e9eb:	89 f2                	mov    edx,esi
c001e9ed:	ed                   	in     eax,dx
c001e9ee:	0f b6 c0             	movzx  eax,al
c001e9f1:	83 c4 10             	add    esp,0x10
c001e9f4:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001e9fa:	74 5a                	je     c001ea56 <IDE::open(int, int, void*)+0x222>
c001e9fc:	83 ec 0c             	sub    esp,0xc
c001e9ff:	68 0f 63 02 c0       	push   0xc002630f
c001ea04:	eb 48                	jmp    c001ea4e <IDE::open(int, int, void*)+0x21a>
c001ea06:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ea0f:	75 2b                	jne    c001ea3c <IDE::open(int, int, void*)+0x208>
c001ea11:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001ea18:	3d 80 00 00 00       	cmp    eax,0x80
c001ea1d:	74 07                	je     c001ea26 <IDE::open(int, int, void*)+0x1f2>
c001ea1f:	3d 8a 00 00 00       	cmp    eax,0x8a
c001ea24:	75 16                	jne    c001ea3c <IDE::open(int, int, void*)+0x208>
c001ea26:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ea2d:	83 ec 0c             	sub    esp,0xc
c001ea30:	68 7e 30 02 c0       	push   0xc002307e
c001ea35:	e8 61 e8 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001ea3a:	eb 17                	jmp    c001ea53 <IDE::open(int, int, void*)+0x21f>
c001ea3c:	83 ec 0c             	sub    esp,0xc
c001ea3f:	68 17 63 02 c0       	push   0xc0026317
c001ea44:	eb 08                	jmp    c001ea4e <IDE::open(int, int, void*)+0x21a>
c001ea46:	83 ec 0c             	sub    esp,0xc
c001ea49:	68 48 63 02 c0       	push   0xc0026348
c001ea4e:	e8 db 15 ff ff       	call   c001002e <KePanic(char const*)>
c001ea53:	83 c4 10             	add    esp,0x10
c001ea56:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001ea5d:	0f 84 bf 00 00 00    	je     c001eb22 <IDE::open(int, int, void*)+0x2ee>
c001ea63:	83 ec 0c             	sub    esp,0xc
c001ea66:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001ea6c:	83 e0 fc             	and    eax,0xfffffffc
c001ea6f:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001ea76:	83 c0 08             	add    eax,0x8
c001ea79:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001ea80:	68 72 63 02 c0       	push   0xc0026372
c001ea85:	e8 da 84 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ea8a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ea91:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ea98:	50                   	push   eax
c001ea99:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001eaa0:	50                   	push   eax
c001eaa1:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001eaa8:	50                   	push   eax
c001eaa9:	ff 35 40 04 03 c0    	push   DWORD PTR ds:0xc0030440
c001eaaf:	e8 92 f0 ff ff       	call   c001db46 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001eab4:	83 c4 18             	add    esp,0x18
c001eab7:	83 c8 07             	or     eax,0x7
c001eaba:	0f b7 c0             	movzx  eax,ax
c001eabd:	50                   	push   eax
c001eabe:	6a 04                	push   0x4
c001eac0:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001eac7:	50                   	push   eax
c001eac8:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001eacf:	50                   	push   eax
c001ead0:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ead7:	50                   	push   eax
c001ead8:	ff 35 40 04 03 c0    	push   DWORD PTR ds:0xc0030440
c001eade:	e8 9f f2 ff ff       	call   c001dd82 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001eae3:	83 c4 20             	add    esp,0x20
c001eae6:	eb 3a                	jmp    c001eb22 <IDE::open(int, int, void*)+0x2ee>
c001eae8:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001eaee:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001eaf5:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001eafc:	05 06 02 00 00       	add    eax,0x206
c001eb01:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001eb08:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001eb0f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001eb16:	05 06 02 00 00       	add    eax,0x206
c001eb1b:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001eb22:	83 ec 0c             	sub    esp,0xc
c001eb25:	68 20 3e 02 c0       	push   0xc0023e20
c001eb2a:	e8 6c e7 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001eb2f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001eb35:	83 c4 10             	add    esp,0x10
c001eb38:	89 c2                	mov    edx,eax
c001eb3a:	83 e2 0f             	and    edx,0xf
c001eb3d:	83 fa 08             	cmp    edx,0x8
c001eb40:	75 0a                	jne    c001eb4c <IDE::open(int, int, void*)+0x318>
c001eb42:	83 e8 02             	sub    eax,0x2
c001eb45:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001eb4c:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001eb52:	89 c2                	mov    edx,eax
c001eb54:	83 e2 0f             	and    edx,0xf
c001eb57:	83 fa 08             	cmp    edx,0x8
c001eb5a:	75 0a                	jne    c001eb66 <IDE::open(int, int, void*)+0x332>
c001eb5c:	83 e8 02             	sub    eax,0x2
c001eb5f:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001eb66:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001eb6d:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001eb74:	89 d0                	mov    eax,edx
c001eb76:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001eb79:	8d 7a 01             	lea    edi,[edx+0x1]
c001eb7c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001eb80:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001eb84:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001eb88:	83 e1 3f             	and    ecx,0x3f
c001eb8b:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001eb8f:	89 f9                	mov    ecx,edi
c001eb91:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001eb98:	0f b6 c9             	movzx  ecx,cl
c001eb9b:	8d 78 02             	lea    edi,[eax+0x2]
c001eb9e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001eba1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001eba5:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001eba9:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001ebad:	83 e2 3f             	and    edx,0x3f
c001ebb0:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001ebb4:	89 f9                	mov    ecx,edi
c001ebb6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ebbc:	0f b6 d1             	movzx  edx,cl
c001ebbf:	8d 78 03             	lea    edi,[eax+0x3]
c001ebc2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ebc5:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ebc9:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001ebcd:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001ebd1:	83 e1 3f             	and    ecx,0x3f
c001ebd4:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001ebd8:	89 fa                	mov    edx,edi
c001ebda:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001ebe0:	0f b6 ca             	movzx  ecx,dl
c001ebe3:	8d 78 04             	lea    edi,[eax+0x4]
c001ebe6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ebe9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ebed:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001ebf1:	89 fa                	mov    edx,edi
c001ebf3:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001ebf9:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001ebfd:	83 e2 3f             	and    edx,0x3f
c001ec00:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001ec04:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001ec0b:	66 85 f6             	test   si,si
c001ec0e:	74 24                	je     c001ec34 <IDE::open(int, int, void*)+0x400>
c001ec10:	89 f9                	mov    ecx,edi
c001ec12:	83 c0 05             	add    eax,0x5
c001ec15:	0f b6 d1             	movzx  edx,cl
c001ec18:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ec1b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ec1f:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001ec23:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001ec29:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001ec2d:	83 e0 3f             	and    eax,0x3f
c001ec30:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001ec34:	83 ec 0c             	sub    esp,0xc
c001ec37:	68 8a 63 02 c0       	push   0xc002638a
c001ec3c:	e8 5a e6 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001ec41:	58                   	pop    eax
c001ec42:	5a                   	pop    edx
c001ec43:	6a 00                	push   0x0
c001ec45:	53                   	push   ebx
c001ec46:	e8 6f f9 ff ff       	call   c001e5ba <IDE::prepareInterrupt(unsigned char)>
c001ec4b:	59                   	pop    ecx
c001ec4c:	5e                   	pop    esi
c001ec4d:	6a 01                	push   0x1
c001ec4f:	53                   	push   ebx
c001ec50:	e8 65 f9 ff ff       	call   c001e5ba <IDE::prepareInterrupt(unsigned char)>
c001ec55:	c7 04 24 0c 5c 02 c0 	mov    DWORD PTR [esp],0xc0025c0c
c001ec5c:	e8 3a e6 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001ec61:	83 c4 0c             	add    esp,0xc
c001ec64:	6a 00                	push   0x0
c001ec66:	6a 00                	push   0x0
c001ec68:	53                   	push   ebx
c001ec69:	e8 7c fb ff ff       	call   c001e7ea <IDE::enableIRQs(unsigned char, bool)>
c001ec6e:	83 c4 0c             	add    esp,0xc
c001ec71:	6a 00                	push   0x0
c001ec73:	6a 01                	push   0x1
c001ec75:	53                   	push   ebx
c001ec76:	e8 6f fb ff ff       	call   c001e7ea <IDE::enableIRQs(unsigned char, bool)>
c001ec7b:	c7 04 24 8c 63 02 c0 	mov    DWORD PTR [esp],0xc002638c
c001ec82:	e8 14 e6 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001ec87:	83 c4 10             	add    esp,0x10
c001ec8a:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001ec91:	74 3c                	je     c001eccf <IDE::open(int, int, void*)+0x49b>
c001ec93:	83 ec 0c             	sub    esp,0xc
c001ec96:	53                   	push   ebx
c001ec97:	6a 01                	push   0x1
c001ec99:	68 b1 e7 01 c0       	push   0xc001e7b1
c001ec9e:	6a 0e                	push   0xe
c001eca0:	53                   	push   ebx
c001eca1:	e8 36 ad fe ff       	call   c00099dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eca6:	83 c4 14             	add    esp,0x14
c001eca9:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ecaf:	53                   	push   ebx
c001ecb0:	6a 01                	push   0x1
c001ecb2:	68 cd e7 01 c0       	push   0xc001e7cd
c001ecb7:	6a 0f                	push   0xf
c001ecb9:	53                   	push   ebx
c001ecba:	e8 1d ad fe ff       	call   c00099dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ecbf:	83 c4 14             	add    esp,0x14
c001ecc2:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001ecc8:	68 8e 3a 02 c0       	push   0xc0023a8e
c001eccd:	eb 40                	jmp    c001ed0f <IDE::open(int, int, void*)+0x4db>
c001eccf:	83 ec 0c             	sub    esp,0xc
c001ecd2:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001ecdc:	53                   	push   ebx
c001ecdd:	6a 00                	push   0x0
c001ecdf:	68 b1 e7 01 c0       	push   0xc001e7b1
c001ece4:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001ecea:	53                   	push   ebx
c001eceb:	e8 ec ac fe ff       	call   c00099dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ecf0:	83 c4 14             	add    esp,0x14
c001ecf3:	53                   	push   ebx
c001ecf4:	6a 00                	push   0x0
c001ecf6:	68 cd e7 01 c0       	push   0xc001e7cd
c001ecfb:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001ed01:	53                   	push   ebx
c001ed02:	e8 d5 ac fe ff       	call   c00099dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ed07:	83 c4 14             	add    esp,0x14
c001ed0a:	68 db 47 02 c0       	push   0xc00247db
c001ed0f:	e8 87 e5 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001ed14:	83 c4 10             	add    esp,0x10
c001ed17:	83 ec 0c             	sub    esp,0xc
c001ed1a:	68 8e 63 02 c0       	push   0xc002638e
c001ed1f:	e8 77 e5 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001ed24:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ed26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ed29:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001ed2c:	c7 04 24 e1 4e 02 c0 	mov    DWORD PTR [esp],0xc0024ee1
c001ed33:	e8 63 e5 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001ed38:	83 c4 0c             	add    esp,0xc
c001ed3b:	6a 07                	push   0x7
c001ed3d:	6a 00                	push   0x0
c001ed3f:	53                   	push   ebx
c001ed40:	e8 5b f9 ff ff       	call   c001e6a0 <IDE::read(unsigned char, unsigned char)>
c001ed45:	83 c4 0c             	add    esp,0xc
c001ed48:	6a 07                	push   0x7
c001ed4a:	6a 01                	push   0x1
c001ed4c:	53                   	push   ebx
c001ed4d:	e8 4e f9 ff ff       	call   c001e6a0 <IDE::read(unsigned char, unsigned char)>
c001ed52:	c7 04 24 94 45 02 c0 	mov    DWORD PTR [esp],0xc0024594
c001ed59:	e8 3d e5 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001ed5e:	83 c4 0c             	add    esp,0xc
c001ed61:	6a 01                	push   0x1
c001ed63:	6a 00                	push   0x0
c001ed65:	53                   	push   ebx
c001ed66:	e8 7f fa ff ff       	call   c001e7ea <IDE::enableIRQs(unsigned char, bool)>
c001ed6b:	83 c4 0c             	add    esp,0xc
c001ed6e:	6a 01                	push   0x1
c001ed70:	6a 01                	push   0x1
c001ed72:	53                   	push   ebx
c001ed73:	e8 72 fa ff ff       	call   c001e7ea <IDE::enableIRQs(unsigned char, bool)>
c001ed78:	c7 04 24 91 63 02 c0 	mov    DWORD PTR [esp],0xc0026391
c001ed7f:	e8 17 e5 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001ed84:	83 c4 20             	add    esp,0x20
c001ed87:	31 c0                	xor    eax,eax
c001ed89:	5b                   	pop    ebx
c001ed8a:	5e                   	pop    esi
c001ed8b:	5f                   	pop    edi
c001ed8c:	c3                   	ret    
c001ed8d:	90                   	nop

c001ed8e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001ed8e:	55                   	push   ebp
c001ed8f:	57                   	push   edi
c001ed90:	56                   	push   esi
c001ed91:	53                   	push   ebx
c001ed92:	83 ec 1c             	sub    esp,0x1c
c001ed95:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ed99:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ed9d:	8d 42 f8             	lea    eax,[edx-0x8]
c001eda0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001eda4:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001eda8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001edac:	3c 03                	cmp    al,0x3
c001edae:	77 5a                	ja     c001ee0a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001edb0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001edb4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001edb8:	0f b6 db             	movzx  ebx,bl
c001edbb:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001edbe:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001edc3:	0c 80                	or     al,0x80
c001edc5:	50                   	push   eax
c001edc6:	6a 0c                	push   0xc
c001edc8:	53                   	push   ebx
c001edc9:	56                   	push   esi
c001edca:	e8 11 f8 ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001edcf:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001edd4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001edd8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001eddc:	0f b6 d2             	movzx  edx,dl
c001eddf:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001ede3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ede5:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001edea:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001edee:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001edf2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001edf6:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001edfe:	83 c4 2c             	add    esp,0x2c
c001ee01:	5b                   	pop    ebx
c001ee02:	5e                   	pop    esi
c001ee03:	5f                   	pop    edi
c001ee04:	5d                   	pop    ebp
c001ee05:	e9 d6 f7 ff ff       	jmp    c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee0a:	0f b6 c2             	movzx  eax,dl
c001ee0d:	83 f8 07             	cmp    eax,0x7
c001ee10:	77 12                	ja     c001ee24 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001ee12:	0f b6 c2             	movzx  eax,dl
c001ee15:	0f b6 db             	movzx  ebx,bl
c001ee18:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001ee20:	01 c2                	add    edx,eax
c001ee22:	eb 2f                	jmp    c001ee53 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001ee24:	83 f8 0d             	cmp    eax,0xd
c001ee27:	77 13                	ja     c001ee3c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001ee29:	0f b6 db             	movzx  ebx,bl
c001ee2c:	0f b6 d2             	movzx  edx,dl
c001ee2f:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001ee36:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ee3a:	eb 17                	jmp    c001ee53 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001ee3c:	83 f8 15             	cmp    eax,0x15
c001ee3f:	77 14                	ja     c001ee55 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001ee41:	0f b6 db             	movzx  ebx,bl
c001ee44:	0f b6 d2             	movzx  edx,dl
c001ee47:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001ee4f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ee53:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ee55:	83 c4 1c             	add    esp,0x1c
c001ee58:	5b                   	pop    ebx
c001ee59:	5e                   	pop    esi
c001ee5a:	5f                   	pop    edi
c001ee5b:	5d                   	pop    ebp
c001ee5c:	c3                   	ret    
c001ee5d:	90                   	nop

c001ee5e <IDE::detect()>:
c001ee5e:	55                   	push   ebp
c001ee5f:	57                   	push   edi
c001ee60:	56                   	push   esi
c001ee61:	53                   	push   ebx
c001ee62:	81 ec 28 02 00 00    	sub    esp,0x228
c001ee68:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001ee6f:	68 93 63 02 c0       	push   0xc0026393
c001ee74:	e8 22 e4 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001ee79:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001ee7f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001ee83:	83 c4 10             	add    esp,0x10
c001ee86:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001ee8b:	0f 85 2f 04 00 00    	jne    c001f2c0 <IDE::detect()+0x462>
c001ee91:	83 ec 0c             	sub    esp,0xc
c001ee94:	31 f6                	xor    esi,esi
c001ee96:	68 96 63 02 c0       	push   0xc0026396
c001ee9b:	31 ff                	xor    edi,edi
c001ee9d:	e8 f9 e3 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001eea2:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001eea9:	83 c4 10             	add    esp,0x10
c001eeac:	83 ec 0c             	sub    esp,0xc
c001eeaf:	68 99 63 02 c0       	push   0xc0026399
c001eeb4:	e8 e2 e3 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001eeb9:	83 c4 10             	add    esp,0x10
c001eebc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eec3:	83 ec 0c             	sub    esp,0xc
c001eec6:	31 ed                	xor    ebp,ebp
c001eec8:	68 9c 63 02 c0       	push   0xc002639c
c001eecd:	e8 c9 e3 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001eed2:	89 f8                	mov    eax,edi
c001eed4:	c1 e0 06             	shl    eax,0x6
c001eed7:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001eedf:	c7 04 24 9f 63 02 c0 	mov    DWORD PTR [esp],0xc002639f
c001eee6:	e8 b0 e3 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001eeeb:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001eeef:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001eef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eef7:	c1 e0 04             	shl    eax,0x4
c001eefa:	83 c8 a0             	or     eax,0xffffffa0
c001eefd:	0f b6 c0             	movzx  eax,al
c001ef00:	50                   	push   eax
c001ef01:	6a 06                	push   0x6
c001ef03:	56                   	push   esi
c001ef04:	53                   	push   ebx
c001ef05:	e8 d6 f6 ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ef0a:	83 c4 1c             	add    esp,0x1c
c001ef0d:	6a 0c                	push   0xc
c001ef0f:	56                   	push   esi
c001ef10:	53                   	push   ebx
c001ef11:	e8 8a f7 ff ff       	call   c001e6a0 <IDE::read(unsigned char, unsigned char)>
c001ef16:	83 c4 0c             	add    esp,0xc
c001ef19:	6a 0c                	push   0xc
c001ef1b:	56                   	push   esi
c001ef1c:	53                   	push   ebx
c001ef1d:	e8 7e f7 ff ff       	call   c001e6a0 <IDE::read(unsigned char, unsigned char)>
c001ef22:	83 c4 0c             	add    esp,0xc
c001ef25:	6a 0c                	push   0xc
c001ef27:	56                   	push   esi
c001ef28:	53                   	push   ebx
c001ef29:	e8 72 f7 ff ff       	call   c001e6a0 <IDE::read(unsigned char, unsigned char)>
c001ef2e:	83 c4 0c             	add    esp,0xc
c001ef31:	6a 0c                	push   0xc
c001ef33:	56                   	push   esi
c001ef34:	53                   	push   ebx
c001ef35:	e8 66 f7 ff ff       	call   c001e6a0 <IDE::read(unsigned char, unsigned char)>
c001ef3a:	c7 04 24 a2 63 02 c0 	mov    DWORD PTR [esp],0xc00263a2
c001ef41:	e8 55 e3 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001ef46:	68 ec 00 00 00       	push   0xec
c001ef4b:	6a 07                	push   0x7
c001ef4d:	56                   	push   esi
c001ef4e:	53                   	push   ebx
c001ef4f:	e8 8c f6 ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ef54:	83 c4 1c             	add    esp,0x1c
c001ef57:	6a 0c                	push   0xc
c001ef59:	56                   	push   esi
c001ef5a:	53                   	push   ebx
c001ef5b:	e8 40 f7 ff ff       	call   c001e6a0 <IDE::read(unsigned char, unsigned char)>
c001ef60:	83 c4 0c             	add    esp,0xc
c001ef63:	6a 0c                	push   0xc
c001ef65:	56                   	push   esi
c001ef66:	53                   	push   ebx
c001ef67:	e8 34 f7 ff ff       	call   c001e6a0 <IDE::read(unsigned char, unsigned char)>
c001ef6c:	83 c4 0c             	add    esp,0xc
c001ef6f:	6a 0c                	push   0xc
c001ef71:	56                   	push   esi
c001ef72:	53                   	push   ebx
c001ef73:	e8 28 f7 ff ff       	call   c001e6a0 <IDE::read(unsigned char, unsigned char)>
c001ef78:	83 c4 0c             	add    esp,0xc
c001ef7b:	6a 0c                	push   0xc
c001ef7d:	56                   	push   esi
c001ef7e:	53                   	push   ebx
c001ef7f:	e8 1c f7 ff ff       	call   c001e6a0 <IDE::read(unsigned char, unsigned char)>
c001ef84:	c7 04 24 a5 63 02 c0 	mov    DWORD PTR [esp],0xc00263a5
c001ef8b:	e8 0b e3 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001ef90:	83 c4 0c             	add    esp,0xc
c001ef93:	6a 0c                	push   0xc
c001ef95:	56                   	push   esi
c001ef96:	53                   	push   ebx
c001ef97:	e8 04 f7 ff ff       	call   c001e6a0 <IDE::read(unsigned char, unsigned char)>
c001ef9c:	83 c4 10             	add    esp,0x10
c001ef9f:	84 c0                	test   al,al
c001efa1:	75 1f                	jne    c001efc2 <IDE::detect()+0x164>
c001efa3:	83 ec 0c             	sub    esp,0xc
c001efa6:	68 a8 63 02 c0       	push   0xc00263a8
c001efab:	e8 eb e2 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001efb0:	e9 e9 02 00 00       	jmp    c001f29e <IDE::detect()+0x440>
c001efb5:	a8 80                	test   al,0x80
c001efb7:	74 21                	je     c001efda <IDE::detect()+0x17c>
c001efb9:	45                   	inc    ebp
c001efba:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001efc0:	7f 1e                	jg     c001efe0 <IDE::detect()+0x182>
c001efc2:	50                   	push   eax
c001efc3:	6a 0c                	push   0xc
c001efc5:	56                   	push   esi
c001efc6:	53                   	push   ebx
c001efc7:	e8 d4 f6 ff ff       	call   c001e6a0 <IDE::read(unsigned char, unsigned char)>
c001efcc:	83 c4 10             	add    esp,0x10
c001efcf:	a8 01                	test   al,0x1
c001efd1:	74 e2                	je     c001efb5 <IDE::detect()+0x157>
c001efd3:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001efd8:	eb 23                	jmp    c001effd <IDE::detect()+0x19f>
c001efda:	a8 08                	test   al,0x8
c001efdc:	74 db                	je     c001efb9 <IDE::detect()+0x15b>
c001efde:	eb 18                	jmp    c001eff8 <IDE::detect()+0x19a>
c001efe0:	50                   	push   eax
c001efe1:	50                   	push   eax
c001efe2:	6a 00                	push   0x0
c001efe4:	6a 32                	push   0x32
c001efe6:	e8 49 84 ff ff       	call   c0017434 <milliTenthSleep(unsigned long long)>
c001efeb:	83 c4 10             	add    esp,0x10
c001efee:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001eff4:	75 cc                	jne    c001efc2 <IDE::detect()+0x164>
c001eff6:	eb db                	jmp    c001efd3 <IDE::detect()+0x175>
c001eff8:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001effd:	83 ec 0c             	sub    esp,0xc
c001f000:	68 ab 63 02 c0       	push   0xc00263ab
c001f005:	e8 91 e2 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001f00a:	83 c4 10             	add    esp,0x10
c001f00d:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001f012:	74 5f                	je     c001f073 <IDE::detect()+0x215>
c001f014:	51                   	push   ecx
c001f015:	6a 04                	push   0x4
c001f017:	56                   	push   esi
c001f018:	53                   	push   ebx
c001f019:	e8 82 f6 ff ff       	call   c001e6a0 <IDE::read(unsigned char, unsigned char)>
c001f01e:	83 c4 0c             	add    esp,0xc
c001f021:	89 c5                	mov    ebp,eax
c001f023:	6a 05                	push   0x5
c001f025:	56                   	push   esi
c001f026:	53                   	push   ebx
c001f027:	e8 74 f6 ff ff       	call   c001e6a0 <IDE::read(unsigned char, unsigned char)>
c001f02c:	83 c4 10             	add    esp,0x10
c001f02f:	89 e9                	mov    ecx,ebp
c001f031:	0f b6 c0             	movzx  eax,al
c001f034:	0f b6 e9             	movzx  ebp,cl
c001f037:	83 fd 14             	cmp    ebp,0x14
c001f03a:	75 07                	jne    c001f043 <IDE::detect()+0x1e5>
c001f03c:	3d eb 00 00 00       	cmp    eax,0xeb
c001f041:	eb 0e                	jmp    c001f051 <IDE::detect()+0x1f3>
c001f043:	3d 96 00 00 00       	cmp    eax,0x96
c001f048:	0f 85 53 02 00 00    	jne    c001f2a1 <IDE::detect()+0x443>
c001f04e:	83 fd 69             	cmp    ebp,0x69
c001f051:	0f 85 4a 02 00 00    	jne    c001f2a1 <IDE::detect()+0x443>
c001f057:	68 a1 00 00 00       	push   0xa1
c001f05c:	6a 07                	push   0x7
c001f05e:	56                   	push   esi
c001f05f:	53                   	push   ebx
c001f060:	e8 7b f5 ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f065:	58                   	pop    eax
c001f066:	5a                   	pop    edx
c001f067:	6a 00                	push   0x0
c001f069:	6a 0a                	push   0xa
c001f06b:	e8 c4 83 ff ff       	call   c0017434 <milliTenthSleep(unsigned long long)>
c001f070:	83 c4 10             	add    esp,0x10
c001f073:	83 ec 0c             	sub    esp,0xc
c001f076:	89 fd                	mov    ebp,edi
c001f078:	68 ae 63 02 c0       	push   0xc00263ae
c001f07d:	c1 e5 06             	shl    ebp,0x6
c001f080:	e8 16 e2 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001f085:	01 dd                	add    ebp,ebx
c001f087:	8d 54 24 20          	lea    edx,[esp+0x20]
c001f08b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001f092:	52                   	push   edx
c001f093:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001f097:	6a 00                	push   0x0
c001f099:	56                   	push   esi
c001f09a:	53                   	push   ebx
c001f09b:	e8 ee fc ff ff       	call   c001ed8e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001f0a0:	83 c4 14             	add    esp,0x14
c001f0a3:	68 b2 63 02 c0       	push   0xc00263b2
c001f0a8:	e8 ee e1 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001f0ad:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001f0b2:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001f0b9:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001f0c0:	89 f0                	mov    eax,esi
c001f0c2:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001f0c8:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f0cc:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001f0d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f0d6:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001f0dd:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001f0e5:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001f0ec:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001f0f4:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001f0fa:	c7 04 24 b6 63 02 c0 	mov    DWORD PTR [esp],0xc00263b6
c001f101:	e8 95 e1 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001f106:	83 c4 10             	add    esp,0x10
c001f109:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001f110:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f114:	74 09                	je     c001f11f <IDE::detect()+0x2c1>
c001f116:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001f11d:	eb 07                	jmp    c001f126 <IDE::detect()+0x2c8>
c001f11f:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001f126:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f12a:	89 f8                	mov    eax,edi
c001f12c:	83 ec 0c             	sub    esp,0xc
c001f12f:	c1 e0 06             	shl    eax,0x6
c001f132:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001f135:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001f13b:	68 ba 63 02 c0       	push   0xc00263ba
c001f140:	e8 56 e1 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001f145:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f149:	89 e8                	mov    eax,ebp
c001f14b:	83 c4 10             	add    esp,0x10
c001f14e:	8d 6a 28             	lea    ebp,[edx+0x28]
c001f151:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001f154:	83 c0 02             	add    eax,0x2
c001f157:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001f15d:	83 c2 02             	add    edx,0x2
c001f160:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001f163:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001f169:	39 d5                	cmp    ebp,edx
c001f16b:	75 e4                	jne    c001f151 <IDE::detect()+0x2f3>
c001f16d:	89 f8                	mov    eax,edi
c001f16f:	c1 e0 06             	shl    eax,0x6
c001f172:	01 d8                	add    eax,ebx
c001f174:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001f17b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001f182:	c1 ea 09             	shr    edx,0x9
c001f185:	83 e2 01             	and    edx,0x1
c001f188:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001f18f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001f195:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001f199:	74 0c                	je     c001f1a7 <IDE::detect()+0x349>
c001f19b:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001f1a4:	0f 95 c2             	setne  dl
c001f1a7:	83 ec 0c             	sub    esp,0xc
c001f1aa:	89 fd                	mov    ebp,edi
c001f1ac:	c1 e5 06             	shl    ebp,0x6
c001f1af:	01 dd                	add    ebp,ebx
c001f1b1:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001f1b7:	68 be 63 02 c0       	push   0xc00263be
c001f1bc:	e8 da e0 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001f1c1:	83 c4 10             	add    esp,0x10
c001f1c4:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001f1c9:	75 66                	jne    c001f231 <IDE::detect()+0x3d3>
c001f1cb:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001f1d2:	0f 84 b8 00 00 00    	je     c001f290 <IDE::detect()+0x432>
c001f1d8:	83 ec 0c             	sub    esp,0xc
c001f1db:	68 c2 63 02 c0       	push   0xc00263c2
c001f1e0:	e8 b6 e0 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001f1e5:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001f1ec:	e8 f6 0a ff ff       	call   c000fce7 <malloc>
c001f1f1:	89 04 24             	mov    DWORD PTR [esp],eax
c001f1f4:	89 c5                	mov    ebp,eax
c001f1f6:	e8 43 05 00 00       	call   c001f73e <ATA::ATA()>
c001f1fb:	c7 04 24 c6 63 02 c0 	mov    DWORD PTR [esp],0xc00263c6
c001f202:	e8 94 e0 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001f207:	59                   	pop    ecx
c001f208:	58                   	pop    eax
c001f209:	55                   	push   ebp
c001f20a:	53                   	push   ebx
c001f20b:	e8 20 a8 fe ff       	call   c0009a30 <Device::addChild(Device*)>
c001f210:	c7 04 24 cb 63 02 c0 	mov    DWORD PTR [esp],0xc00263cb
c001f217:	e8 7f e0 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001f21c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f21f:	53                   	push   ebx
c001f220:	57                   	push   edi
c001f221:	6a 00                	push   0x0
c001f223:	55                   	push   ebp
c001f224:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f227:	83 c4 14             	add    esp,0x14
c001f22a:	68 d0 63 02 c0       	push   0xc00263d0
c001f22f:	eb 57                	jmp    c001f288 <IDE::detect()+0x42a>
c001f231:	83 ec 0c             	sub    esp,0xc
c001f234:	68 d5 63 02 c0       	push   0xc00263d5
c001f239:	e8 5d e0 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001f23e:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f245:	e8 9d 0a ff ff       	call   c000fce7 <malloc>
c001f24a:	89 04 24             	mov    DWORD PTR [esp],eax
c001f24d:	89 c5                	mov    ebp,eax
c001f24f:	e8 98 0c 00 00       	call   c001feec <ATAPI::ATAPI()>
c001f254:	c7 04 24 db 63 02 c0 	mov    DWORD PTR [esp],0xc00263db
c001f25b:	e8 3b e0 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001f260:	58                   	pop    eax
c001f261:	5a                   	pop    edx
c001f262:	55                   	push   ebp
c001f263:	53                   	push   ebx
c001f264:	e8 c7 a7 fe ff       	call   c0009a30 <Device::addChild(Device*)>
c001f269:	c7 04 24 e2 63 02 c0 	mov    DWORD PTR [esp],0xc00263e2
c001f270:	e8 26 e0 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001f275:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f278:	53                   	push   ebx
c001f279:	57                   	push   edi
c001f27a:	6a 00                	push   0x0
c001f27c:	55                   	push   ebp
c001f27d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f280:	83 c4 14             	add    esp,0x14
c001f283:	68 e9 63 02 c0       	push   0xc00263e9
c001f288:	e8 0e e0 fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001f28d:	83 c4 10             	add    esp,0x10
c001f290:	83 ec 0c             	sub    esp,0xc
c001f293:	47                   	inc    edi
c001f294:	68 f0 63 02 c0       	push   0xc00263f0
c001f299:	e8 fd df fe ff       	call   c000d29b <KeSetBootMessage(char const*)>
c001f29e:	83 c4 10             	add    esp,0x10
c001f2a1:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001f2a5:	74 0c                	je     c001f2b3 <IDE::detect()+0x455>
c001f2a7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001f2ae:	e9 10 fc ff ff       	jmp    c001eec3 <IDE::detect()+0x65>
c001f2b3:	4e                   	dec    esi
c001f2b4:	74 0a                	je     c001f2c0 <IDE::detect()+0x462>
c001f2b6:	be 01 00 00 00       	mov    esi,0x1
c001f2bb:	e9 ec fb ff ff       	jmp    c001eeac <IDE::detect()+0x4e>
c001f2c0:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f2c6:	5b                   	pop    ebx
c001f2c7:	5e                   	pop    esi
c001f2c8:	5f                   	pop    edi
c001f2c9:	5d                   	pop    ebp
c001f2ca:	c3                   	ret    
c001f2cb:	90                   	nop

c001f2cc <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001f2cc:	55                   	push   ebp
c001f2cd:	57                   	push   edi
c001f2ce:	56                   	push   esi
c001f2cf:	53                   	push   ebx
c001f2d0:	83 ec 1c             	sub    esp,0x1c
c001f2d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001f2d7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f2db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f2df:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f2e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f2e7:	88 c3                	mov    bl,al
c001f2e9:	25 ff 00 00 00       	and    eax,0xff
c001f2ee:	0f 84 88 00 00 00    	je     c001f37c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f2f4:	83 ec 0c             	sub    esp,0xc
c001f2f7:	89 c7                	mov    edi,eax
c001f2f9:	68 f4 63 02 c0       	push   0xc00263f4
c001f2fe:	e8 61 7c fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001f303:	83 c4 10             	add    esp,0x10
c001f306:	83 ff 01             	cmp    edi,0x1
c001f309:	74 6b                	je     c001f376 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001f30b:	83 ff 02             	cmp    edi,0x2
c001f30e:	75 58                	jne    c001f368 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001f310:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001f315:	01 ff                	add    edi,edi
c001f317:	50                   	push   eax
c001f318:	09 fe                	or     esi,edi
c001f31a:	6a 01                	push   0x1
c001f31c:	89 f0                	mov    eax,esi
c001f31e:	0f b6 f0             	movzx  esi,al
c001f321:	c1 e6 06             	shl    esi,0x6
c001f324:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001f32c:	50                   	push   eax
c001f32d:	55                   	push   ebp
c001f32e:	e8 6d f3 ff ff       	call   c001e6a0 <IDE::read(unsigned char, unsigned char)>
c001f333:	83 c4 10             	add    esp,0x10
c001f336:	a8 01                	test   al,0x1
c001f338:	74 02                	je     c001f33c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001f33a:	b3 07                	mov    bl,0x7
c001f33c:	a8 02                	test   al,0x2
c001f33e:	74 02                	je     c001f342 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001f340:	b3 03                	mov    bl,0x3
c001f342:	a8 04                	test   al,0x4
c001f344:	74 02                	je     c001f348 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001f346:	b3 14                	mov    bl,0x14
c001f348:	a8 08                	test   al,0x8
c001f34a:	74 02                	je     c001f34e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001f34c:	b3 03                	mov    bl,0x3
c001f34e:	a8 10                	test   al,0x10
c001f350:	74 02                	je     c001f354 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001f352:	b3 15                	mov    bl,0x15
c001f354:	a8 20                	test   al,0x20
c001f356:	74 02                	je     c001f35a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001f358:	b3 03                	mov    bl,0x3
c001f35a:	a8 40                	test   al,0x40
c001f35c:	74 02                	je     c001f360 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001f35e:	b3 16                	mov    bl,0x16
c001f360:	a8 80                	test   al,0x80
c001f362:	74 18                	je     c001f37c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f364:	b3 0d                	mov    bl,0xd
c001f366:	eb 14                	jmp    c001f37c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f368:	83 ff 03             	cmp    edi,0x3
c001f36b:	74 0d                	je     c001f37a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001f36d:	83 ff 04             	cmp    edi,0x4
c001f370:	75 0a                	jne    c001f37c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f372:	b3 08                	mov    bl,0x8
c001f374:	eb 06                	jmp    c001f37c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f376:	b3 13                	mov    bl,0x13
c001f378:	eb 02                	jmp    c001f37c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f37a:	b3 17                	mov    bl,0x17
c001f37c:	83 c4 1c             	add    esp,0x1c
c001f37f:	88 d8                	mov    al,bl
c001f381:	5b                   	pop    ebx
c001f382:	5e                   	pop    esi
c001f383:	5f                   	pop    edi
c001f384:	5d                   	pop    ebp
c001f385:	c3                   	ret    

c001f386 <IDE::polling(unsigned char, unsigned int)>:
c001f386:	57                   	push   edi
c001f387:	56                   	push   esi
c001f388:	53                   	push   ebx
c001f389:	bb 04 00 00 00       	mov    ebx,0x4
c001f38e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f392:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f397:	52                   	push   edx
c001f398:	6a 0c                	push   0xc
c001f39a:	56                   	push   esi
c001f39b:	57                   	push   edi
c001f39c:	e8 ff f2 ff ff       	call   c001e6a0 <IDE::read(unsigned char, unsigned char)>
c001f3a1:	83 c4 10             	add    esp,0x10
c001f3a4:	4b                   	dec    ebx
c001f3a5:	75 f0                	jne    c001f397 <IDE::polling(unsigned char, unsigned int)+0x11>
c001f3a7:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f3ac:	50                   	push   eax
c001f3ad:	6a 0c                	push   0xc
c001f3af:	56                   	push   esi
c001f3b0:	57                   	push   edi
c001f3b1:	e8 ea f2 ff ff       	call   c001e6a0 <IDE::read(unsigned char, unsigned char)>
c001f3b6:	83 c4 10             	add    esp,0x10
c001f3b9:	a8 01                	test   al,0x1
c001f3bb:	75 17                	jne    c001f3d4 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f3bd:	a8 20                	test   al,0x20
c001f3bf:	75 0f                	jne    c001f3d0 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f3c1:	4b                   	dec    ebx
c001f3c2:	74 10                	je     c001f3d4 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f3c4:	a8 80                	test   al,0x80
c001f3c6:	75 e4                	jne    c001f3ac <IDE::polling(unsigned char, unsigned int)+0x26>
c001f3c8:	a8 08                	test   al,0x8
c001f3ca:	74 e0                	je     c001f3ac <IDE::polling(unsigned char, unsigned int)+0x26>
c001f3cc:	31 c0                	xor    eax,eax
c001f3ce:	eb 06                	jmp    c001f3d6 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f3d0:	b0 01                	mov    al,0x1
c001f3d2:	eb 02                	jmp    c001f3d6 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f3d4:	b0 02                	mov    al,0x2
c001f3d6:	5b                   	pop    ebx
c001f3d7:	5e                   	pop    esi
c001f3d8:	5f                   	pop    edi
c001f3d9:	c3                   	ret    

c001f3da <SATABus::close(int, int, void*)>:
c001f3da:	31 c0                	xor    eax,eax
c001f3dc:	c3                   	ret    
c001f3dd:	90                   	nop

c001f3de <SATABus::detect()>:
c001f3de:	c3                   	ret    
c001f3df:	90                   	nop

c001f3e0 <SATABus::SATABus()>:
c001f3e0:	83 ec 0c             	sub    esp,0xc
c001f3e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3e7:	83 ec 08             	sub    esp,0x8
c001f3ea:	68 2c 64 02 c0       	push   0xc002642c
c001f3ef:	50                   	push   eax
c001f3f0:	e8 93 a9 fe ff       	call   c0009d88 <HardDiskController::HardDiskController(char const*)>
c001f3f5:	83 c4 10             	add    esp,0x10
c001f3f8:	ba 58 64 02 c0       	mov    edx,0xc0026458
c001f3fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f401:	89 10                	mov    DWORD PTR [eax],edx
c001f403:	83 ec 0c             	sub    esp,0xc
c001f406:	6a 50                	push   0x50
c001f408:	e8 f3 0e ff ff       	call   c0010300 <Phys::allocateContiguousPages(int)>
c001f40d:	83 c4 10             	add    esp,0x10
c001f410:	89 c2                	mov    edx,eax
c001f412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f416:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f41c:	83 ec 0c             	sub    esp,0xc
c001f41f:	6a 50                	push   0x50
c001f421:	e8 a7 40 ff ff       	call   c00134cd <Virt::allocateKernelVirtualPages(int)>
c001f426:	83 c4 10             	add    esp,0x10
c001f429:	89 c2                	mov    edx,eax
c001f42b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f42f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f435:	a1 50 f2 02 c0       	mov    eax,ds:0xc002f250
c001f43a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f43e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f444:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f448:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f44e:	83 ec 0c             	sub    esp,0xc
c001f451:	6a 03                	push   0x3
c001f453:	6a 50                	push   0x50
c001f455:	51                   	push   ecx
c001f456:	52                   	push   edx
c001f457:	50                   	push   eax
c001f458:	e8 3d 49 ff ff       	call   c0013d9a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f45d:	83 c4 20             	add    esp,0x20
c001f460:	90                   	nop
c001f461:	83 c4 0c             	add    esp,0xc
c001f464:	c3                   	ret    
c001f465:	90                   	nop

c001f466 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f466:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f46a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f46d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f470:	09 c2                	or     edx,eax
c001f472:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f476:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f47c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f47e:	31 c0                	xor    eax,eax
c001f480:	c1 e9 08             	shr    ecx,0x8
c001f483:	83 e1 0f             	and    ecx,0xf
c001f486:	39 c8                	cmp    eax,ecx
c001f488:	74 0a                	je     c001f494 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f48a:	f6 c2 01             	test   dl,0x1
c001f48d:	74 08                	je     c001f497 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f48f:	d1 ea                	shr    edx,1
c001f491:	40                   	inc    eax
c001f492:	eb f2                	jmp    c001f486 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f494:	83 c8 ff             	or     eax,0xffffffff
c001f497:	c3                   	ret    

c001f498 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f498:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f49c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f49f:	89 c2                	mov    edx,eax
c001f4a1:	c1 ea 08             	shr    edx,0x8
c001f4a4:	83 e2 0f             	and    edx,0xf
c001f4a7:	4a                   	dec    edx
c001f4a8:	75 32                	jne    c001f4dc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f4aa:	83 e0 0f             	and    eax,0xf
c001f4ad:	83 f8 03             	cmp    eax,0x3
c001f4b0:	75 2a                	jne    c001f4dc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f4b2:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f4b5:	b8 02 00 00 00       	mov    eax,0x2
c001f4ba:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f4c0:	74 1c                	je     c001f4de <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f4c2:	b8 04 00 00 00       	mov    eax,0x4
c001f4c7:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f4cd:	74 0f                	je     c001f4de <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f4cf:	31 c0                	xor    eax,eax
c001f4d1:	83 fa 03             	cmp    edx,0x3
c001f4d4:	0f 94 c0             	sete   al
c001f4d7:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f4db:	c3                   	ret    
c001f4dc:	31 c0                	xor    eax,eax
c001f4de:	c3                   	ret    
c001f4df:	90                   	nop

c001f4e0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f4e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f4e4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f4e7:	0f ba e2 0f          	bt     edx,0xf
c001f4eb:	72 f7                	jb     c001f4e4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f4ed:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f4f0:	83 ca 10             	or     edx,0x10
c001f4f3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f4f6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f4f9:	83 ca 01             	or     edx,0x1
c001f4fc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f4ff:	c3                   	ret    

c001f500 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f500:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f504:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f507:	83 e2 fe             	and    edx,0xfffffffe
c001f50a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f50d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f510:	83 e2 ef             	and    edx,0xffffffef
c001f513:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f516:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f519:	0f ba e2 0e          	bt     edx,0xe
c001f51d:	72 f7                	jb     c001f516 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f51f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f522:	0f ba e2 0f          	bt     edx,0xf
c001f526:	72 ee                	jb     c001f516 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f528:	c3                   	ret    
c001f529:	90                   	nop

c001f52a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f52a:	55                   	push   ebp
c001f52b:	57                   	push   edi
c001f52c:	56                   	push   esi
c001f52d:	53                   	push   ebx
c001f52e:	83 ec 1c             	sub    esp,0x1c
c001f531:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f535:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f539:	53                   	push   ebx
c001f53a:	56                   	push   esi
c001f53b:	e8 c0 ff ff ff       	call   c001f500 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f540:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001f544:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f54a:	83 ec 0c             	sub    esp,0xc
c001f54d:	c1 e5 0a             	shl    ebp,0xa
c001f550:	01 e8                	add    eax,ebp
c001f552:	89 03                	mov    DWORD PTR [ebx],eax
c001f554:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f556:	68 00 04 00 00       	push   0x400
c001f55b:	6a 00                	push   0x0
c001f55d:	50                   	push   eax
c001f55e:	e8 8d 0f fe ff       	call   c00004f0 <memset>
c001f563:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001f569:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001f56d:	01 e8                	add    eax,ebp
c001f56f:	83 c4 1c             	add    esp,0x1c
c001f572:	89 03                	mov    DWORD PTR [ebx],eax
c001f574:	c1 e2 08             	shl    edx,0x8
c001f577:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f57e:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001f584:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f58a:	01 f8                	add    eax,edi
c001f58c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f58f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f592:	68 00 01 00 00       	push   0x100
c001f597:	6a 00                	push   0x0
c001f599:	50                   	push   eax
c001f59a:	e8 51 0f fe ff       	call   c00004f0 <memset>
c001f59f:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001f5a5:	01 fa                	add    edx,edi
c001f5a7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f5ab:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001f5ae:	c1 e7 0d             	shl    edi,0xd
c001f5b1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f5b8:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001f5be:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001f5c4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f5c8:	31 ff                	xor    edi,edi
c001f5ca:	83 c4 10             	add    esp,0x10
c001f5cd:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001f5d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f5d7:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f5dd:	83 c5 20             	add    ebp,0x20
c001f5e0:	01 f8                	add    eax,edi
c001f5e2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f5e5:	52                   	push   edx
c001f5e6:	68 00 01 00 00       	push   0x100
c001f5eb:	6a 00                	push   0x0
c001f5ed:	50                   	push   eax
c001f5ee:	e8 fd 0e fe ff       	call   c00004f0 <memset>
c001f5f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f5f7:	83 c4 10             	add    esp,0x10
c001f5fa:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001f600:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001f607:	01 f8                	add    eax,edi
c001f609:	81 c7 00 01 00 00    	add    edi,0x100
c001f60f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f612:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001f618:	75 b3                	jne    c001f5cd <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001f61a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001f621:	50                   	push   eax
c001f622:	50                   	push   eax
c001f623:	53                   	push   ebx
c001f624:	56                   	push   esi
c001f625:	e8 b6 fe ff ff       	call   c001f4e0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001f62a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001f631:	83 c4 2c             	add    esp,0x2c
c001f634:	5b                   	pop    ebx
c001f635:	5e                   	pop    esi
c001f636:	5f                   	pop    edi
c001f637:	5d                   	pop    ebp
c001f638:	c3                   	ret    
c001f639:	90                   	nop

c001f63a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f63a:	55                   	push   ebp
c001f63b:	57                   	push   edi
c001f63c:	56                   	push   esi
c001f63d:	53                   	push   ebx
c001f63e:	31 db                	xor    ebx,ebx
c001f640:	83 ec 0c             	sub    esp,0xc
c001f643:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f647:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f64b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001f64e:	f7 c7 01 00 00 00    	test   edi,0x1
c001f654:	74 7a                	je     c001f6d0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001f656:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001f65a:	89 d8                	mov    eax,ebx
c001f65c:	c1 e0 07             	shl    eax,0x7
c001f65f:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001f666:	55                   	push   ebp
c001f667:	56                   	push   esi
c001f668:	e8 2b fe ff ff       	call   c001f498 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f66d:	5a                   	pop    edx
c001f66e:	83 f8 01             	cmp    eax,0x1
c001f671:	59                   	pop    ecx
c001f672:	75 21                	jne    c001f695 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001f674:	50                   	push   eax
c001f675:	53                   	push   ebx
c001f676:	55                   	push   ebp
c001f677:	56                   	push   esi
c001f678:	e8 ad fe ff ff       	call   c001f52a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f67d:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001f684:	e8 5e 06 ff ff       	call   c000fce7 <malloc>
c001f689:	89 c5                	mov    ebp,eax
c001f68b:	89 04 24             	mov    DWORD PTR [esp],eax
c001f68e:	e8 25 0f 00 00       	call   c00205b8 <SATA::SATA()>
c001f693:	eb 24                	jmp    c001f6b9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001f695:	83 f8 04             	cmp    eax,0x4
c001f698:	75 36                	jne    c001f6d0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001f69a:	51                   	push   ecx
c001f69b:	53                   	push   ebx
c001f69c:	55                   	push   ebp
c001f69d:	56                   	push   esi
c001f69e:	e8 87 fe ff ff       	call   c001f52a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f6a3:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f6aa:	e8 38 06 ff ff       	call   c000fce7 <malloc>
c001f6af:	89 c5                	mov    ebp,eax
c001f6b1:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6b4:	e8 97 12 00 00       	call   c0020950 <SATAPI::SATAPI()>
c001f6b9:	58                   	pop    eax
c001f6ba:	5a                   	pop    edx
c001f6bb:	55                   	push   ebp
c001f6bc:	56                   	push   esi
c001f6bd:	e8 6e a3 fe ff       	call   c0009a30 <Device::addChild(Device*)>
c001f6c2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001f6c5:	56                   	push   esi
c001f6c6:	6a 00                	push   0x0
c001f6c8:	53                   	push   ebx
c001f6c9:	55                   	push   ebp
c001f6ca:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001f6cd:	83 c4 20             	add    esp,0x20
c001f6d0:	d1 ef                	shr    edi,1
c001f6d2:	43                   	inc    ebx
c001f6d3:	83 fb 20             	cmp    ebx,0x20
c001f6d6:	0f 85 72 ff ff ff    	jne    c001f64e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001f6dc:	83 c4 0c             	add    esp,0xc
c001f6df:	5b                   	pop    ebx
c001f6e0:	5e                   	pop    esi
c001f6e1:	5f                   	pop    edi
c001f6e2:	5d                   	pop    ebp
c001f6e3:	c3                   	ret    

c001f6e4 <SATABus::open(int, int, void*)>:
c001f6e4:	53                   	push   ebx
c001f6e5:	83 ec 08             	sub    esp,0x8
c001f6e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f6ec:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001f6f2:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f6f8:	e8 3b 78 ff ff       	call   c0016f38 <KeDisablePreemption()>
c001f6fd:	52                   	push   edx
c001f6fe:	52                   	push   edx
c001f6ff:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001f705:	53                   	push   ebx
c001f706:	e8 2f ff ff ff       	call   c001f63a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001f70b:	e8 50 78 ff ff       	call   c0016f60 <KeRestorePreemption()>
c001f710:	31 c0                	xor    eax,eax
c001f712:	83 c4 18             	add    esp,0x18
c001f715:	5b                   	pop    ebx
c001f716:	c3                   	ret    
c001f717:	90                   	nop

c001f718 <ATA::close(int, int, void*)>:
c001f718:	83 ec 0c             	sub    esp,0xc
c001f71b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f71f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f725:	85 c0                	test   eax,eax
c001f727:	74 0c                	je     c001f735 <ATA::close(int, int, void*)+0x1d>
c001f729:	83 ec 0c             	sub    esp,0xc
c001f72c:	8b 10                	mov    edx,DWORD PTR [eax]
c001f72e:	50                   	push   eax
c001f72f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f732:	83 c4 10             	add    esp,0x10
c001f735:	31 c0                	xor    eax,eax
c001f737:	83 c4 0c             	add    esp,0xc
c001f73a:	c3                   	ret    
c001f73b:	90                   	nop

c001f73c <ATA::powerSaving(PowerSavingLevel)>:
c001f73c:	c3                   	ret    
c001f73d:	90                   	nop

c001f73e <ATA::ATA()>:
c001f73e:	83 ec 0c             	sub    esp,0xc
c001f741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f745:	83 ec 04             	sub    esp,0x4
c001f748:	68 00 02 00 00       	push   0x200
c001f74d:	68 d9 65 02 c0       	push   0xc00265d9
c001f752:	50                   	push   eax
c001f753:	e8 ba a6 fe ff       	call   c0009e12 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f758:	83 c4 10             	add    esp,0x10
c001f75b:	ba 40 65 02 c0       	mov    edx,0xc0026540
c001f760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f764:	89 10                	mov    DWORD PTR [eax],edx
c001f766:	90                   	nop
c001f767:	83 c4 0c             	add    esp,0xc
c001f76a:	c3                   	ret    
c001f76b:	90                   	nop

c001f76c <ATA::flush(bool)>:
c001f76c:	53                   	push   ebx
c001f76d:	83 ec 08             	sub    esp,0x8
c001f770:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f774:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001f779:	83 f8 01             	cmp    eax,0x1
c001f77c:	19 c0                	sbb    eax,eax
c001f77e:	83 e0 fd             	and    eax,0xfffffffd
c001f781:	05 ea 00 00 00       	add    eax,0xea
c001f786:	50                   	push   eax
c001f787:	6a 07                	push   0x7
c001f789:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f790:	50                   	push   eax
c001f791:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f797:	e8 44 ee ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f79c:	83 c4 0c             	add    esp,0xc
c001f79f:	6a 00                	push   0x0
c001f7a1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7a8:	50                   	push   eax
c001f7a9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7af:	e8 d2 fb ff ff       	call   c001f386 <IDE::polling(unsigned char, unsigned int)>
c001f7b4:	83 c4 18             	add    esp,0x18
c001f7b7:	5b                   	pop    ebx
c001f7b8:	c3                   	ret    
c001f7b9:	90                   	nop

c001f7ba <ATA::readyForCommand()>:
c001f7ba:	56                   	push   esi
c001f7bb:	53                   	push   ebx
c001f7bc:	31 db                	xor    ebx,ebx
c001f7be:	50                   	push   eax
c001f7bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f7c3:	50                   	push   eax
c001f7c4:	6a 0c                	push   0xc
c001f7c6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f7cd:	50                   	push   eax
c001f7ce:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f7d4:	e8 c7 ee ff ff       	call   c001e6a0 <IDE::read(unsigned char, unsigned char)>
c001f7d9:	83 c4 10             	add    esp,0x10
c001f7dc:	a8 88                	test   al,0x88
c001f7de:	74 20                	je     c001f800 <ATA::readyForCommand()+0x46>
c001f7e0:	43                   	inc    ebx
c001f7e1:	83 fb 63             	cmp    ebx,0x63
c001f7e4:	7e dd                	jle    c001f7c3 <ATA::readyForCommand()+0x9>
c001f7e6:	51                   	push   ecx
c001f7e7:	51                   	push   ecx
c001f7e8:	6a 00                	push   0x0
c001f7ea:	6a 0a                	push   0xa
c001f7ec:	e8 43 7c ff ff       	call   c0017434 <milliTenthSleep(unsigned long long)>
c001f7f1:	83 c4 10             	add    esp,0x10
c001f7f4:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001f7fa:	75 c7                	jne    c001f7c3 <ATA::readyForCommand()+0x9>
c001f7fc:	31 c0                	xor    eax,eax
c001f7fe:	eb 02                	jmp    c001f802 <ATA::readyForCommand()+0x48>
c001f800:	b0 01                	mov    al,0x1
c001f802:	5a                   	pop    edx
c001f803:	5b                   	pop    ebx
c001f804:	5e                   	pop    esi
c001f805:	c3                   	ret    

c001f806 <ATA::access(unsigned long long, int, void*, bool)>:
c001f806:	55                   	push   ebp
c001f807:	57                   	push   edi
c001f808:	56                   	push   esi
c001f809:	53                   	push   ebx
c001f80a:	83 ec 2c             	sub    esp,0x2c
c001f80d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f811:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f815:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001f819:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f81d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f821:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f825:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001f829:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f82f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f833:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f839:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f83d:	c1 e0 06             	shl    eax,0x6
c001f840:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001f848:	74 5d                	je     c001f8a7 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001f84a:	89 fa                	mov    edx,edi
c001f84c:	89 f0                	mov    eax,esi
c001f84e:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001f852:	c1 ea 1c             	shr    edx,0x1c
c001f855:	89 d1                	mov    ecx,edx
c001f857:	09 c1                	or     ecx,eax
c001f859:	74 25                	je     c001f880 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001f85b:	31 ed                	xor    ebp,ebp
c001f85d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001f864:	89 fa                	mov    edx,edi
c001f866:	89 f0                	mov    eax,esi
c001f868:	0f ad d0             	shrd   eax,edx,cl
c001f86b:	d3 ea                	shr    edx,cl
c001f86d:	f6 c1 20             	test   cl,0x20
c001f870:	74 02                	je     c001f874 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001f872:	89 d0                	mov    eax,edx
c001f874:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001f878:	45                   	inc    ebp
c001f879:	83 fd 06             	cmp    ebp,0x6
c001f87c:	75 df                	jne    c001f85d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001f87e:	eb 76                	jmp    c001f8f6 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001f880:	89 f0                	mov    eax,esi
c001f882:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001f887:	89 fa                	mov    edx,edi
c001f889:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f890:	0f ac d0 10          	shrd   eax,edx,0x10
c001f894:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f899:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001f89d:	c1 ee 18             	shr    esi,0x18
c001f8a0:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f8a5:	eb 56                	jmp    c001f8fd <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001f8a7:	6a 00                	push   0x0
c001f8a9:	6a 3f                	push   0x3f
c001f8ab:	57                   	push   edi
c001f8ac:	56                   	push   esi
c001f8ad:	e8 f2 24 00 00       	call   c0021da4 <__umoddi3>
c001f8b2:	83 c4 10             	add    esp,0x10
c001f8b5:	40                   	inc    eax
c001f8b6:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001f8ba:	6a 00                	push   0x0
c001f8bc:	68 f0 03 00 00       	push   0x3f0
c001f8c1:	57                   	push   edi
c001f8c2:	56                   	push   esi
c001f8c3:	e8 dc 23 00 00       	call   c0021ca4 <__udivdi3>
c001f8c8:	83 c4 10             	add    esp,0x10
c001f8cb:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001f8d0:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f8d7:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f8dc:	6a 00                	push   0x0
c001f8de:	6a 3f                	push   0x3f
c001f8e0:	57                   	push   edi
c001f8e1:	56                   	push   esi
c001f8e2:	e8 bd 23 00 00       	call   c0021ca4 <__udivdi3>
c001f8e7:	83 c4 10             	add    esp,0x10
c001f8ea:	83 e0 0f             	and    eax,0xf
c001f8ed:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f8f2:	89 c6                	mov    esi,eax
c001f8f4:	eb 07                	jmp    c001f8fd <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001f8f6:	31 f6                	xor    esi,esi
c001f8f8:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001f8fd:	55                   	push   ebp
c001f8fe:	6a 00                	push   0x0
c001f900:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f907:	50                   	push   eax
c001f908:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f90c:	e8 d9 ee ff ff       	call   c001e7ea <IDE::enableIRQs(unsigned char, bool)>
c001f911:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f914:	e8 a1 fe ff ff       	call   c001f7ba <ATA::readyForCommand()>
c001f919:	83 c4 10             	add    esp,0x10
c001f91c:	84 c0                	test   al,al
c001f91e:	75 0a                	jne    c001f92a <ATA::access(unsigned long long, int, void*, bool)+0x124>
c001f920:	be 01 00 00 00       	mov    esi,0x1
c001f925:	e9 c2 02 00 00       	jmp    c001fbec <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001f92a:	fa                   	cli    
c001f92b:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c001f931:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001f937:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001f93c:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f942:	75 0a                	jne    c001f94e <ATA::access(unsigned long long, int, void*, bool)+0x148>
c001f944:	c1 e0 04             	shl    eax,0x4
c001f947:	09 c6                	or     esi,eax
c001f949:	83 ce a0             	or     esi,0xffffffa0
c001f94c:	eb 08                	jmp    c001f956 <ATA::access(unsigned long long, int, void*, bool)+0x150>
c001f94e:	c1 e0 04             	shl    eax,0x4
c001f951:	09 c6                	or     esi,eax
c001f953:	83 ce e0             	or     esi,0xffffffe0
c001f956:	89 f0                	mov    eax,esi
c001f958:	0f b6 d2             	movzx  edx,dl
c001f95b:	0f b6 f0             	movzx  esi,al
c001f95e:	56                   	push   esi
c001f95f:	6a 06                	push   0x6
c001f961:	52                   	push   edx
c001f962:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f968:	e8 73 ec ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f96d:	83 c4 10             	add    esp,0x10
c001f970:	6a 00                	push   0x0
c001f972:	6a 01                	push   0x1
c001f974:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f97b:	50                   	push   eax
c001f97c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f982:	e8 59 ec ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f987:	83 c4 10             	add    esp,0x10
c001f98a:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001f98f:	83 f8 02             	cmp    eax,0x2
c001f992:	75 6e                	jne    c001fa02 <ATA::access(unsigned long long, int, void*, bool)+0x1fc>
c001f994:	6a 00                	push   0x0
c001f996:	6a 08                	push   0x8
c001f998:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f99f:	50                   	push   eax
c001f9a0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f9a6:	e8 35 ec ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f9ab:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001f9b0:	50                   	push   eax
c001f9b1:	6a 09                	push   0x9
c001f9b3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f9ba:	50                   	push   eax
c001f9bb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f9c1:	e8 1a ec ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f9c6:	83 c4 20             	add    esp,0x20
c001f9c9:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001f9ce:	50                   	push   eax
c001f9cf:	6a 0a                	push   0xa
c001f9d1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f9d8:	50                   	push   eax
c001f9d9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f9df:	e8 fc eb ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f9e4:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001f9e9:	50                   	push   eax
c001f9ea:	6a 0b                	push   0xb
c001f9ec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f9f3:	50                   	push   eax
c001f9f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f9fa:	e8 e1 eb ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f9ff:	83 c4 20             	add    esp,0x20
c001fa02:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001fa07:	50                   	push   eax
c001fa08:	6a 02                	push   0x2
c001fa0a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa11:	50                   	push   eax
c001fa12:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa18:	e8 c3 eb ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa1d:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001fa22:	50                   	push   eax
c001fa23:	6a 03                	push   0x3
c001fa25:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa2c:	50                   	push   eax
c001fa2d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa33:	e8 a8 eb ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa38:	83 c4 20             	add    esp,0x20
c001fa3b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001fa40:	50                   	push   eax
c001fa41:	6a 04                	push   0x4
c001fa43:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa4a:	50                   	push   eax
c001fa4b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa51:	e8 8a eb ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa56:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001fa5b:	50                   	push   eax
c001fa5c:	6a 05                	push   0x5
c001fa5e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa65:	50                   	push   eax
c001fa66:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa6c:	e8 6f eb ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa71:	83 c4 20             	add    esp,0x20
c001fa74:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fa79:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001fa7e:	74 13                	je     c001fa93 <ATA::access(unsigned long long, int, void*, bool)+0x28d>
c001fa80:	83 f8 02             	cmp    eax,0x2
c001fa83:	74 20                	je     c001faa5 <ATA::access(unsigned long long, int, void*, bool)+0x29f>
c001fa85:	48                   	dec    eax
c001fa86:	0f 85 94 fe ff ff    	jne    c001f920 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001fa8c:	b8 30 00 00 00       	mov    eax,0x30
c001fa91:	eb 1e                	jmp    c001fab1 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001fa93:	83 f8 02             	cmp    eax,0x2
c001fa96:	74 14                	je     c001faac <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001fa98:	48                   	dec    eax
c001fa99:	b8 20 00 00 00       	mov    eax,0x20
c001fa9e:	74 11                	je     c001fab1 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001faa0:	e9 7b fe ff ff       	jmp    c001f920 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001faa5:	b8 34 00 00 00       	mov    eax,0x34
c001faaa:	eb 05                	jmp    c001fab1 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001faac:	b8 24 00 00 00       	mov    eax,0x24
c001fab1:	50                   	push   eax
c001fab2:	6a 07                	push   0x7
c001fab4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fabb:	50                   	push   eax
c001fabc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fac2:	e8 19 eb ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fac7:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c001face:	83 c4 10             	add    esp,0x10
c001fad1:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c001fad8:	75 01                	jne    c001fadb <ATA::access(unsigned long long, int, void*, bool)+0x2d5>
c001fada:	fb                   	sti    
c001fadb:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001fadf:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001fae4:	85 f6                	test   esi,esi
c001fae6:	0f 84 dd 00 00 00    	je     c001fbc9 <ATA::access(unsigned long long, int, void*, bool)+0x3c3>
c001faec:	57                   	push   edi
c001faed:	6a 01                	push   0x1
c001faef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001faf6:	50                   	push   eax
c001faf7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fafd:	e8 84 f8 ff ff       	call   c001f386 <IDE::polling(unsigned char, unsigned int)>
c001fb02:	83 c4 10             	add    esp,0x10
c001fb05:	0f b6 c0             	movzx  eax,al
c001fb08:	85 c0                	test   eax,eax
c001fb0a:	74 23                	je     c001fb2f <ATA::access(unsigned long long, int, void*, bool)+0x329>
c001fb0c:	50                   	push   eax
c001fb0d:	89 c6                	mov    esi,eax
c001fb0f:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001fb16:	50                   	push   eax
c001fb17:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb1e:	50                   	push   eax
c001fb1f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb25:	e8 a2 f7 ff ff       	call   c001f2cc <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fb2a:	e9 ba 00 00 00       	jmp    c001fbe9 <ATA::access(unsigned long long, int, void*, bool)+0x3e3>
c001fb2f:	85 ed                	test   ebp,ebp
c001fb31:	74 49                	je     c001fb7c <ATA::access(unsigned long long, int, void*, bool)+0x376>
c001fb33:	fa                   	cli    
c001fb34:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c001fb3a:	31 c9                	xor    ecx,ecx
c001fb3c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001fb40:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001fb44:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001fb48:	51                   	push   ecx
c001fb49:	51                   	push   ecx
c001fb4a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb51:	50                   	push   eax
c001fb52:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb58:	e8 71 ea ff ff       	call   c001e5ce <IDE::getBase(unsigned char)>
c001fb5d:	89 c2                	mov    edx,eax
c001fb5f:	89 f8                	mov    eax,edi
c001fb61:	66 ef                	out    dx,ax
c001fb63:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001fb67:	83 c4 10             	add    esp,0x10
c001fb6a:	41                   	inc    ecx
c001fb6b:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001fb71:	75 c9                	jne    c001fb3c <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001fb73:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c001fb7a:	eb 35                	jmp    c001fbb1 <ATA::access(unsigned long long, int, void*, bool)+0x3ab>
c001fb7c:	fa                   	cli    
c001fb7d:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c001fb83:	52                   	push   edx
c001fb84:	52                   	push   edx
c001fb85:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb8c:	50                   	push   eax
c001fb8d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb93:	e8 36 ea ff ff       	call   c001e5ce <IDE::getBase(unsigned char)>
c001fb98:	b9 00 01 00 00       	mov    ecx,0x100
c001fb9d:	89 c2                	mov    edx,eax
c001fb9f:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001fba3:	fc                   	cld    
c001fba4:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001fba7:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c001fbae:	83 c4 10             	add    esp,0x10
c001fbb1:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c001fbb8:	75 01                	jne    c001fbbb <ATA::access(unsigned long long, int, void*, bool)+0x3b5>
c001fbba:	fb                   	sti    
c001fbbb:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001fbc3:	4e                   	dec    esi
c001fbc4:	e9 1b ff ff ff       	jmp    c001fae4 <ATA::access(unsigned long long, int, void*, bool)+0x2de>
c001fbc9:	31 f6                	xor    esi,esi
c001fbcb:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fbd0:	74 1a                	je     c001fbec <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001fbd2:	50                   	push   eax
c001fbd3:	50                   	push   eax
c001fbd4:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001fbd9:	83 f8 02             	cmp    eax,0x2
c001fbdc:	0f 94 c0             	sete   al
c001fbdf:	0f b6 c0             	movzx  eax,al
c001fbe2:	50                   	push   eax
c001fbe3:	53                   	push   ebx
c001fbe4:	e8 83 fb ff ff       	call   c001f76c <ATA::flush(bool)>
c001fbe9:	83 c4 10             	add    esp,0x10
c001fbec:	83 c4 2c             	add    esp,0x2c
c001fbef:	89 f0                	mov    eax,esi
c001fbf1:	5b                   	pop    ebx
c001fbf2:	5e                   	pop    esi
c001fbf3:	5f                   	pop    edi
c001fbf4:	5d                   	pop    ebp
c001fbf5:	c3                   	ret    

c001fbf6 <ATA::read(unsigned long long, int, void*)>:
c001fbf6:	57                   	push   edi
c001fbf7:	b8 04 00 00 00       	mov    eax,0x4
c001fbfc:	56                   	push   esi
c001fbfd:	53                   	push   ebx
c001fbfe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fc02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001fc06:	8d 7a ff             	lea    edi,[edx-0x1]
c001fc09:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fc0d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fc11:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001fc17:	77 25                	ja     c001fc3e <ATA::read(unsigned long long, int, void*)+0x48>
c001fc19:	b8 06 00 00 00       	mov    eax,0x6
c001fc1e:	85 f6                	test   esi,esi
c001fc20:	74 1c                	je     c001fc3e <ATA::read(unsigned long long, int, void*)+0x48>
c001fc22:	50                   	push   eax
c001fc23:	50                   	push   eax
c001fc24:	6a 00                	push   0x0
c001fc26:	56                   	push   esi
c001fc27:	52                   	push   edx
c001fc28:	53                   	push   ebx
c001fc29:	51                   	push   ecx
c001fc2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fc2e:	e8 d3 fb ff ff       	call   c001f806 <ATA::access(unsigned long long, int, void*, bool)>
c001fc33:	83 c4 20             	add    esp,0x20
c001fc36:	85 c0                	test   eax,eax
c001fc38:	0f 95 c0             	setne  al
c001fc3b:	0f b6 c0             	movzx  eax,al
c001fc3e:	5b                   	pop    ebx
c001fc3f:	5e                   	pop    esi
c001fc40:	5f                   	pop    edi
c001fc41:	c3                   	ret    

c001fc42 <ATA::write(unsigned long long, int, void*)>:
c001fc42:	57                   	push   edi
c001fc43:	b8 04 00 00 00       	mov    eax,0x4
c001fc48:	56                   	push   esi
c001fc49:	53                   	push   ebx
c001fc4a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fc4e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001fc52:	8d 7a ff             	lea    edi,[edx-0x1]
c001fc55:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fc59:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fc5d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001fc63:	77 25                	ja     c001fc8a <ATA::write(unsigned long long, int, void*)+0x48>
c001fc65:	b8 06 00 00 00       	mov    eax,0x6
c001fc6a:	85 f6                	test   esi,esi
c001fc6c:	74 1c                	je     c001fc8a <ATA::write(unsigned long long, int, void*)+0x48>
c001fc6e:	50                   	push   eax
c001fc6f:	50                   	push   eax
c001fc70:	6a 01                	push   0x1
c001fc72:	56                   	push   esi
c001fc73:	52                   	push   edx
c001fc74:	53                   	push   ebx
c001fc75:	51                   	push   ecx
c001fc76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fc7a:	e8 87 fb ff ff       	call   c001f806 <ATA::access(unsigned long long, int, void*, bool)>
c001fc7f:	83 c4 20             	add    esp,0x20
c001fc82:	85 c0                	test   eax,eax
c001fc84:	0f 95 c0             	setne  al
c001fc87:	0f b6 c0             	movzx  eax,al
c001fc8a:	5b                   	pop    ebx
c001fc8b:	5e                   	pop    esi
c001fc8c:	5f                   	pop    edi
c001fc8d:	c3                   	ret    

c001fc8e <ATA::detectCHS()>:
c001fc8e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fc92:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001fc98:	c1 e0 06             	shl    eax,0x6
c001fc9b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001fca1:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001fcab:	c7 44 24 04 7c 64 02 c0 	mov    DWORD PTR [esp+0x4],0xc002647c
c001fcb3:	e9 76 03 ff ff       	jmp    c001002e <KePanic(char const*)>

c001fcb8 <ATA::open(int, int, void*)>:
c001fcb8:	53                   	push   ebx
c001fcb9:	83 ec 08             	sub    esp,0x8
c001fcbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fcc0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fcc4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fcc8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001fcce:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001fcd4:	c1 e0 06             	shl    eax,0x6
c001fcd7:	01 d0                	add    eax,edx
c001fcd9:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001fce0:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001fce6:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001fced:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001fcf7:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001fcfd:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001fd04:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001fd0b:	75 0c                	jne    c001fd19 <ATA::open(int, int, void*)+0x61>
c001fd0d:	83 ec 0c             	sub    esp,0xc
c001fd10:	53                   	push   ebx
c001fd11:	e8 78 ff ff ff       	call   c001fc8e <ATA::detectCHS()>
c001fd16:	83 c4 10             	add    esp,0x10
c001fd19:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001fd1f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fd25:	c1 e0 06             	shl    eax,0x6
c001fd28:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001fd2f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001fd39:	d1 e8                	shr    eax,1
c001fd3b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001fd41:	6a 04                	push   0x4
c001fd43:	6a 0c                	push   0xc
c001fd45:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd4c:	50                   	push   eax
c001fd4d:	52                   	push   edx
c001fd4e:	e8 8d e8 ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd53:	90                   	nop
c001fd54:	90                   	nop
c001fd55:	6a 00                	push   0x0
c001fd57:	6a 0c                	push   0xc
c001fd59:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd60:	50                   	push   eax
c001fd61:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd67:	e8 74 e8 ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd6c:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fd72:	83 c4 20             	add    esp,0x20
c001fd75:	c1 e0 06             	shl    eax,0x6
c001fd78:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c001fd7e:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c001fd85:	0f 84 00 01 00 00    	je     c001fe8b <ATA::open(int, int, void*)+0x1d3>
c001fd8b:	83 ec 0c             	sub    esp,0xc
c001fd8e:	6a 08                	push   0x8
c001fd90:	e8 6b 05 ff ff       	call   c0010300 <Phys::allocateContiguousPages(int)>
c001fd95:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001fd9b:	c7 04 24 8e 64 02 c0 	mov    DWORD PTR [esp],0xc002648e
c001fda2:	e8 bd 71 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001fda7:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001fdae:	e8 1a 37 ff ff       	call   c00134cd <Virt::allocateKernelVirtualPages(int)>
c001fdb3:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001fdb9:	6a 03                	push   0x3
c001fdbb:	50                   	push   eax
c001fdbc:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001fdc2:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c001fdc8:	e8 e3 3d ff ff       	call   c0013bb0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001fdcd:	83 c4 20             	add    esp,0x20
c001fdd0:	e8 4d 04 ff ff       	call   c0010222 <Phys::allocatePage()>
c001fdd5:	83 ec 0c             	sub    esp,0xc
c001fdd8:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c001fdde:	6a 01                	push   0x1
c001fde0:	e8 e8 36 ff ff       	call   c00134cd <Virt::allocateKernelVirtualPages(int)>
c001fde5:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c001fdeb:	6a 03                	push   0x3
c001fded:	50                   	push   eax
c001fdee:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c001fdf4:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c001fdfa:	e8 b1 3d ff ff       	call   c0013bb0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001fdff:	83 c4 14             	add    esp,0x14
c001fe02:	68 c7 64 02 c0       	push   0xc00264c7
c001fe07:	e8 58 71 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001fe0c:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c001fe13:	50                   	push   eax
c001fe14:	6a 12                	push   0x12
c001fe16:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe1d:	50                   	push   eax
c001fe1e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe24:	e8 b7 e7 ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe29:	83 c4 20             	add    esp,0x20
c001fe2c:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c001fe32:	0f b6 c4             	movzx  eax,ah
c001fe35:	50                   	push   eax
c001fe36:	6a 13                	push   0x13
c001fe38:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe3f:	50                   	push   eax
c001fe40:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe46:	e8 95 e7 ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe4b:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c001fe52:	50                   	push   eax
c001fe53:	6a 14                	push   0x14
c001fe55:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe5c:	50                   	push   eax
c001fe5d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe63:	e8 78 e7 ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe68:	83 c4 20             	add    esp,0x20
c001fe6b:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c001fe72:	50                   	push   eax
c001fe73:	6a 15                	push   0x15
c001fe75:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe7c:	50                   	push   eax
c001fe7d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe83:	e8 58 e7 ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe88:	83 c4 10             	add    esp,0x10
c001fe8b:	83 ec 0c             	sub    esp,0xc
c001fe8e:	53                   	push   ebx
c001fe8f:	e8 e6 9f fe ff       	call   c0009e7a <PhysicalDisk::startCache()>
c001fe94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fe97:	e8 7e ae fe ff       	call   c000ad1a <createPartitionsForDisk(PhysicalDisk*)>
c001fe9c:	31 c0                	xor    eax,eax
c001fe9e:	83 c4 18             	add    esp,0x18
c001fea1:	5b                   	pop    ebx
c001fea2:	c3                   	ret    

c001fea3 <combineCharAndColour(char, unsigned char)>:
c001fea3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001fea8:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001feae:	c1 e0 08             	shl    eax,0x8
c001feb1:	09 d0                	or     eax,edx
c001feb3:	c3                   	ret    

c001feb4 <combineColours(unsigned char, unsigned char)>:
c001feb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001feb9:	c1 e0 04             	shl    eax,0x4
c001febc:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001fec0:	c3                   	ret    
c001fec1:	90                   	nop

c001fec2 <ATAPI::write(unsigned long long, int, void*)>:
c001fec2:	b8 03 00 00 00       	mov    eax,0x3
c001fec7:	c3                   	ret    

c001fec8 <ATAPI::close(int, int, void*)>:
c001fec8:	83 ec 0c             	sub    esp,0xc
c001fecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fecf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fed5:	85 c0                	test   eax,eax
c001fed7:	74 0c                	je     c001fee5 <ATAPI::close(int, int, void*)+0x1d>
c001fed9:	83 ec 0c             	sub    esp,0xc
c001fedc:	8b 10                	mov    edx,DWORD PTR [eax]
c001fede:	50                   	push   eax
c001fedf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fee2:	83 c4 10             	add    esp,0x10
c001fee5:	31 c0                	xor    eax,eax
c001fee7:	83 c4 0c             	add    esp,0xc
c001feea:	c3                   	ret    
c001feeb:	90                   	nop

c001feec <ATAPI::ATAPI()>:
c001feec:	83 ec 0c             	sub    esp,0xc
c001feef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef3:	83 ec 04             	sub    esp,0x4
c001fef6:	68 00 08 00 00       	push   0x800
c001fefb:	68 79 66 02 c0       	push   0xc0026679
c001ff00:	50                   	push   eax
c001ff01:	e8 0c 9f fe ff       	call   c0009e12 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ff06:	83 c4 10             	add    esp,0x10
c001ff09:	ba 88 65 02 c0       	mov    edx,0xc0026588
c001ff0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff12:	89 10                	mov    DWORD PTR [eax],edx
c001ff14:	90                   	nop
c001ff15:	83 c4 0c             	add    esp,0xc
c001ff18:	c3                   	ret    
c001ff19:	90                   	nop

c001ff1a <ATAPI::readyForCommand()>:
c001ff1a:	56                   	push   esi
c001ff1b:	53                   	push   ebx
c001ff1c:	31 db                	xor    ebx,ebx
c001ff1e:	50                   	push   eax
c001ff1f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ff23:	50                   	push   eax
c001ff24:	6a 0c                	push   0xc
c001ff26:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ff2d:	50                   	push   eax
c001ff2e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ff34:	e8 67 e7 ff ff       	call   c001e6a0 <IDE::read(unsigned char, unsigned char)>
c001ff39:	83 c4 10             	add    esp,0x10
c001ff3c:	a8 88                	test   al,0x88
c001ff3e:	74 26                	je     c001ff66 <ATAPI::readyForCommand()+0x4c>
c001ff40:	43                   	inc    ebx
c001ff41:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001ff47:	7e da                	jle    c001ff23 <ATAPI::readyForCommand()+0x9>
c001ff49:	51                   	push   ecx
c001ff4a:	51                   	push   ecx
c001ff4b:	6a 00                	push   0x0
c001ff4d:	68 5e 01 00 00       	push   0x15e
c001ff52:	e8 dd 74 ff ff       	call   c0017434 <milliTenthSleep(unsigned long long)>
c001ff57:	83 c4 10             	add    esp,0x10
c001ff5a:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001ff60:	75 c1                	jne    c001ff23 <ATAPI::readyForCommand()+0x9>
c001ff62:	31 c0                	xor    eax,eax
c001ff64:	eb 02                	jmp    c001ff68 <ATAPI::readyForCommand()+0x4e>
c001ff66:	b0 01                	mov    al,0x1
c001ff68:	5a                   	pop    edx
c001ff69:	5b                   	pop    ebx
c001ff6a:	5e                   	pop    esi
c001ff6b:	c3                   	ret    

c001ff6c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001ff6c:	55                   	push   ebp
c001ff6d:	57                   	push   edi
c001ff6e:	56                   	push   esi
c001ff6f:	53                   	push   ebx
c001ff70:	83 ec 20             	sub    esp,0x20
c001ff73:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ff77:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001ff7b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001ff7f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ff83:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ff87:	6a 01                	push   0x1
c001ff89:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ff90:	50                   	push   eax
c001ff91:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ff97:	e8 4e e8 ff ff       	call   c001e7ea <IDE::enableIRQs(unsigned char, bool)>
c001ff9c:	5e                   	pop    esi
c001ff9d:	58                   	pop    eax
c001ff9e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ffa5:	50                   	push   eax
c001ffa6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ffac:	e8 09 e6 ff ff       	call   c001e5ba <IDE::prepareInterrupt(unsigned char)>
c001ffb1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ffb4:	e8 61 ff ff ff       	call   c001ff1a <ATAPI::readyForCommand()>
c001ffb9:	83 c4 10             	add    esp,0x10
c001ffbc:	84 c0                	test   al,al
c001ffbe:	75 0a                	jne    c001ffca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001ffc0:	bb 01 00 00 00       	mov    ebx,0x1
c001ffc5:	e9 60 02 00 00       	jmp    c002022a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001ffca:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001ffd0:	c1 e0 04             	shl    eax,0x4
c001ffd3:	0f b6 c0             	movzx  eax,al
c001ffd6:	50                   	push   eax
c001ffd7:	6a 06                	push   0x6
c001ffd9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ffe0:	50                   	push   eax
c001ffe1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ffe7:	e8 f4 e5 ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffec:	6a 00                	push   0x0
c001ffee:	6a 01                	push   0x1
c001fff0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fff7:	50                   	push   eax
c001fff8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fffe:	e8 dd e5 ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020003:	83 c4 20             	add    esp,0x20
c0020006:	0f b6 c3             	movzx  eax,bl
c0020009:	0f b6 df             	movzx  ebx,bh
c002000c:	50                   	push   eax
c002000d:	6a 04                	push   0x4
c002000f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020016:	50                   	push   eax
c0020017:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002001d:	e8 be e5 ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020022:	53                   	push   ebx
c0020023:	6a 05                	push   0x5
c0020025:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002002c:	50                   	push   eax
c002002d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020033:	e8 a8 e5 ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020038:	83 c4 20             	add    esp,0x20
c002003b:	68 a0 00 00 00       	push   0xa0
c0020040:	6a 07                	push   0x7
c0020042:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020049:	50                   	push   eax
c002004a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020050:	e8 8b e5 ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020055:	83 c4 0c             	add    esp,0xc
c0020058:	6a 01                	push   0x1
c002005a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020061:	50                   	push   eax
c0020062:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020068:	e8 19 f3 ff ff       	call   c001f386 <IDE::polling(unsigned char, unsigned int)>
c002006d:	83 c4 10             	add    esp,0x10
c0020070:	0f b6 d8             	movzx  ebx,al
c0020073:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c0020079:	85 db                	test   ebx,ebx
c002007b:	74 20                	je     c002009d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002007d:	53                   	push   ebx
c002007e:	0f b6 c0             	movzx  eax,al
c0020081:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c0020088:	52                   	push   edx
c0020089:	50                   	push   eax
c002008a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020090:	e8 37 f2 ff ff       	call   c001f2cc <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0020095:	83 c4 10             	add    esp,0x10
c0020098:	e9 8d 01 00 00       	jmp    c002022a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002009d:	0f b6 c0             	movzx  eax,al
c00200a0:	53                   	push   ebx
c00200a1:	53                   	push   ebx
c00200a2:	50                   	push   eax
c00200a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00200a9:	e8 20 e5 ff ff       	call   c001e5ce <IDE::getBase(unsigned char)>
c00200ae:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00200b2:	b9 06 00 00 00       	mov    ecx,0x6
c00200b7:	89 c2                	mov    edx,eax
c00200b9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00200bc:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00200c0:	83 c4 10             	add    esp,0x10
c00200c3:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00200c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00200cc:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00200d2:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00200d9:	85 db                	test   ebx,ebx
c00200db:	0f 84 ec 00 00 00    	je     c00201cd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c00200e1:	51                   	push   ecx
c00200e2:	51                   	push   ecx
c00200e3:	52                   	push   edx
c00200e4:	50                   	push   eax
c00200e5:	e8 64 e6 ff ff       	call   c001e74e <IDE::waitInterrupt(unsigned char)>
c00200ea:	83 c4 10             	add    esp,0x10
c00200ed:	84 c0                	test   al,al
c00200ef:	0f 84 cb fe ff ff    	je     c001ffc0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00200f5:	56                   	push   esi
c00200f6:	56                   	push   esi
c00200f7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00200fe:	50                   	push   eax
c00200ff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020105:	e8 b0 e4 ff ff       	call   c001e5ba <IDE::prepareInterrupt(unsigned char)>
c002010a:	83 c4 0c             	add    esp,0xc
c002010d:	6a 04                	push   0x4
c002010f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020116:	50                   	push   eax
c0020117:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002011d:	e8 7e e5 ff ff       	call   c001e6a0 <IDE::read(unsigned char, unsigned char)>
c0020122:	83 c4 0c             	add    esp,0xc
c0020125:	89 c6                	mov    esi,eax
c0020127:	6a 05                	push   0x5
c0020129:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020130:	50                   	push   eax
c0020131:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020137:	e8 64 e5 ff ff       	call   c001e6a0 <IDE::read(unsigned char, unsigned char)>
c002013c:	89 f1                	mov    ecx,esi
c002013e:	0f b6 c0             	movzx  eax,al
c0020141:	0f b6 f1             	movzx  esi,cl
c0020144:	c1 e0 08             	shl    eax,0x8
c0020147:	09 c6                	or     esi,eax
c0020149:	d1 fe                	sar    esi,1
c002014b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002014f:	83 c4 10             	add    esp,0x10
c0020152:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020157:	74 41                	je     c002019a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c0020159:	31 c9                	xor    ecx,ecx
c002015b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020161:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020168:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002016c:	75 0a                	jne    c0020178 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c002016e:	01 c9                	add    ecx,ecx
c0020170:	01 cd                	add    ebp,ecx
c0020172:	4b                   	dec    ebx
c0020173:	e9 54 ff ff ff       	jmp    c00200cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c0020178:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002017d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020181:	51                   	push   ecx
c0020182:	51                   	push   ecx
c0020183:	52                   	push   edx
c0020184:	50                   	push   eax
c0020185:	e8 44 e4 ff ff       	call   c001e5ce <IDE::getBase(unsigned char)>
c002018a:	89 c2                	mov    edx,eax
c002018c:	89 f0                	mov    eax,esi
c002018e:	66 ef                	out    dx,ax
c0020190:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0020194:	83 c4 10             	add    esp,0x10
c0020197:	41                   	inc    ecx
c0020198:	eb c1                	jmp    c002015b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c002019a:	31 f6                	xor    esi,esi
c002019c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00201a2:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00201a9:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00201ad:	75 06                	jne    c00201b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c00201af:	01 f6                	add    esi,esi
c00201b1:	01 f5                	add    ebp,esi
c00201b3:	eb bd                	jmp    c0020172 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c00201b5:	51                   	push   ecx
c00201b6:	51                   	push   ecx
c00201b7:	52                   	push   edx
c00201b8:	50                   	push   eax
c00201b9:	e8 10 e4 ff ff       	call   c001e5ce <IDE::getBase(unsigned char)>
c00201be:	89 c2                	mov    edx,eax
c00201c0:	66 ed                	in     ax,dx
c00201c2:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00201c7:	83 c4 10             	add    esp,0x10
c00201ca:	46                   	inc    esi
c00201cb:	eb cf                	jmp    c002019c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c00201cd:	51                   	push   ecx
c00201ce:	51                   	push   ecx
c00201cf:	52                   	push   edx
c00201d0:	50                   	push   eax
c00201d1:	e8 78 e5 ff ff       	call   c001e74e <IDE::waitInterrupt(unsigned char)>
c00201d6:	83 c4 10             	add    esp,0x10
c00201d9:	84 c0                	test   al,al
c00201db:	0f 84 df fd ff ff    	je     c001ffc0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00201e1:	bb a0 86 01 00       	mov    ebx,0x186a0
c00201e6:	52                   	push   edx
c00201e7:	52                   	push   edx
c00201e8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00201ef:	50                   	push   eax
c00201f0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00201f6:	e8 bf e3 ff ff       	call   c001e5ba <IDE::prepareInterrupt(unsigned char)>
c00201fb:	83 c4 10             	add    esp,0x10
c00201fe:	50                   	push   eax
c00201ff:	50                   	push   eax
c0020200:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020207:	50                   	push   eax
c0020208:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002020e:	e8 bb e3 ff ff       	call   c001e5ce <IDE::getBase(unsigned char)>
c0020213:	8d 50 07             	lea    edx,[eax+0x7]
c0020216:	ec                   	in     al,dx
c0020217:	83 c4 10             	add    esp,0x10
c002021a:	a8 88                	test   al,0x88
c002021c:	74 0a                	je     c0020228 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c002021e:	4b                   	dec    ebx
c002021f:	75 dd                	jne    c00201fe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c0020221:	bb 02 00 00 00       	mov    ebx,0x2
c0020226:	eb 02                	jmp    c002022a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c0020228:	31 db                	xor    ebx,ebx
c002022a:	83 c4 1c             	add    esp,0x1c
c002022d:	89 d8                	mov    eax,ebx
c002022f:	5b                   	pop    ebx
c0020230:	5e                   	pop    esi
c0020231:	5f                   	pop    edi
c0020232:	5d                   	pop    ebp
c0020233:	c3                   	ret    

c0020234 <ATAPI::diskRemoved()>:
c0020234:	53                   	push   ebx
c0020235:	83 ec 14             	sub    esp,0x14
c0020238:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002023c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020243:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c0020249:	e8 bc a7 fe ff       	call   c000aa0a <LogicalDisk::unmount()>
c002024e:	58                   	pop    eax
c002024f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020255:	e8 8e b1 fe ff       	call   c000b3e8 <VCache::writeWriteBuffer()>
c002025a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0020260:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020264:	83 c4 18             	add    esp,0x18
c0020267:	5b                   	pop    ebx
c0020268:	e9 6b b1 fe ff       	jmp    c000b3d8 <VCache::invalidateReadBuffer()>
c002026d:	90                   	nop

c002026e <ATAPI::eject()>:
c002026e:	57                   	push   edi
c002026f:	b9 03 00 00 00       	mov    ecx,0x3
c0020274:	53                   	push   ebx
c0020275:	83 ec 14             	sub    esp,0x14
c0020278:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002027c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020280:	fc                   	cld    
c0020281:	31 c0                	xor    eax,eax
c0020283:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020285:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002028a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002028f:	50                   	push   eax
c0020290:	50                   	push   eax
c0020291:	6a 00                	push   0x0
c0020293:	6a 00                	push   0x0
c0020295:	6a 00                	push   0x0
c0020297:	6a 02                	push   0x2
c0020299:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002029d:	50                   	push   eax
c002029e:	53                   	push   ebx
c002029f:	e8 c8 fc ff ff       	call   c001ff6c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00202a4:	83 c4 14             	add    esp,0x14
c00202a7:	53                   	push   ebx
c00202a8:	e8 87 ff ff ff       	call   c0020234 <ATAPI::diskRemoved()>
c00202ad:	83 c4 24             	add    esp,0x24
c00202b0:	31 c0                	xor    eax,eax
c00202b2:	5b                   	pop    ebx
c00202b3:	5f                   	pop    edi
c00202b4:	c3                   	ret    
c00202b5:	90                   	nop

c00202b6 <ATAPI::diskInserted()>:
c00202b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00202ba:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c00202c1:	c3                   	ret    

c00202c2 <ATAPI::detectMedia()>:
c00202c2:	56                   	push   esi
c00202c3:	53                   	push   ebx
c00202c4:	83 ec 28             	sub    esp,0x28
c00202c7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00202cb:	6a 0c                	push   0xc
c00202cd:	6a 00                	push   0x0
c00202cf:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00202d3:	56                   	push   esi
c00202d4:	e8 17 02 fe ff       	call   c00004f0 <memset>
c00202d9:	58                   	pop    eax
c00202da:	5a                   	pop    edx
c00202db:	6a 00                	push   0x0
c00202dd:	6a 00                	push   0x0
c00202df:	6a 00                	push   0x0
c00202e1:	6a 00                	push   0x0
c00202e3:	56                   	push   esi
c00202e4:	53                   	push   ebx
c00202e5:	e8 82 fc ff ff       	call   c001ff6c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00202ea:	83 c4 1c             	add    esp,0x1c
c00202ed:	6a 0c                	push   0xc
c00202ef:	6a 00                	push   0x0
c00202f1:	56                   	push   esi
c00202f2:	e8 f9 01 fe ff       	call   c00004f0 <memset>
c00202f7:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00202fc:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0020301:	59                   	pop    ecx
c0020302:	58                   	pop    eax
c0020303:	6a 01                	push   0x1
c0020305:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020309:	50                   	push   eax
c002030a:	6a 00                	push   0x0
c002030c:	6a 12                	push   0x12
c002030e:	56                   	push   esi
c002030f:	53                   	push   ebx
c0020310:	e8 57 fc ff ff       	call   c001ff6c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020315:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0020319:	83 c4 20             	add    esp,0x20
c002031c:	83 e0 7f             	and    eax,0x7f
c002031f:	83 f8 70             	cmp    eax,0x70
c0020322:	74 15                	je     c0020339 <ATAPI::detectMedia()+0x77>
c0020324:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002032b:	75 0c                	jne    c0020339 <ATAPI::detectMedia()+0x77>
c002032d:	83 ec 0c             	sub    esp,0xc
c0020330:	53                   	push   ebx
c0020331:	e8 80 ff ff ff       	call   c00202b6 <ATAPI::diskInserted()>
c0020336:	83 c4 10             	add    esp,0x10
c0020339:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002033d:	83 e0 0f             	and    eax,0xf
c0020340:	83 f8 02             	cmp    eax,0x2
c0020343:	75 1b                	jne    c0020360 <ATAPI::detectMedia()+0x9e>
c0020345:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002034a:	75 2d                	jne    c0020379 <ATAPI::detectMedia()+0xb7>
c002034c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020353:	74 24                	je     c0020379 <ATAPI::detectMedia()+0xb7>
c0020355:	83 ec 0c             	sub    esp,0xc
c0020358:	53                   	push   ebx
c0020359:	e8 d6 fe ff ff       	call   c0020234 <ATAPI::diskRemoved()>
c002035e:	eb 16                	jmp    c0020376 <ATAPI::detectMedia()+0xb4>
c0020360:	85 c0                	test   eax,eax
c0020362:	75 15                	jne    c0020379 <ATAPI::detectMedia()+0xb7>
c0020364:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002036b:	75 0c                	jne    c0020379 <ATAPI::detectMedia()+0xb7>
c002036d:	83 ec 0c             	sub    esp,0xc
c0020370:	53                   	push   ebx
c0020371:	e8 40 ff ff ff       	call   c00202b6 <ATAPI::diskInserted()>
c0020376:	83 c4 10             	add    esp,0x10
c0020379:	83 c4 24             	add    esp,0x24
c002037c:	5b                   	pop    ebx
c002037d:	5e                   	pop    esi
c002037e:	c3                   	ret    
c002037f:	90                   	nop

c0020380 <ATAPI::open(int, int, void*)>:
c0020380:	56                   	push   esi
c0020381:	53                   	push   ebx
c0020382:	50                   	push   eax
c0020383:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020387:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002038b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002038f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020395:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002039b:	c1 e0 06             	shl    eax,0x6
c002039e:	01 d0                	add    eax,edx
c00203a0:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00203a7:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00203ad:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00203b4:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00203be:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00203c4:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00203cb:	6a 04                	push   0x4
c00203cd:	6a 0c                	push   0xc
c00203cf:	51                   	push   ecx
c00203d0:	52                   	push   edx
c00203d1:	e8 0a e2 ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00203d6:	90                   	nop
c00203d7:	90                   	nop
c00203d8:	6a 00                	push   0x0
c00203da:	6a 0c                	push   0xc
c00203dc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00203e3:	50                   	push   eax
c00203e4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00203ea:	e8 f1 e1 ff ff       	call   c001e5e0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00203ef:	83 c4 14             	add    esp,0x14
c00203f2:	68 78 01 00 00       	push   0x178
c00203f7:	e8 eb f8 fe ff       	call   c000fce7 <malloc>
c00203fc:	83 c4 0c             	add    esp,0xc
c00203ff:	89 c6                	mov    esi,eax
c0020401:	6a 00                	push   0x0
c0020403:	68 ff ff ff 7f       	push   0x7fffffff
c0020408:	6a 00                	push   0x0
c002040a:	6a 00                	push   0x0
c002040c:	53                   	push   ebx
c002040d:	68 2b 67 02 c0       	push   0xc002672b
c0020412:	50                   	push   eax
c0020413:	e8 30 a4 fe ff       	call   c000a848 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020418:	83 c4 14             	add    esp,0x14
c002041b:	56                   	push   esi
c002041c:	e8 e7 a4 fe ff       	call   c000a908 <LogicalDisk::assignDriveLetter()>
c0020421:	5a                   	pop    edx
c0020422:	0f be c0             	movsx  eax,al
c0020425:	59                   	pop    ecx
c0020426:	50                   	push   eax
c0020427:	68 70 65 02 c0       	push   0xc0026570
c002042c:	e8 33 6b fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0020431:	58                   	pop    eax
c0020432:	5a                   	pop    edx
c0020433:	56                   	push   esi
c0020434:	53                   	push   ebx
c0020435:	e8 f6 95 fe ff       	call   c0009a30 <Device::addChild(Device*)>
c002043a:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0020440:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020443:	e8 32 9a fe ff       	call   c0009e7a <PhysicalDisk::startCache()>
c0020448:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002044f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020452:	e8 6b fe ff ff       	call   c00202c2 <ATAPI::detectMedia()>
c0020457:	83 c4 14             	add    esp,0x14
c002045a:	31 c0                	xor    eax,eax
c002045c:	5b                   	pop    ebx
c002045d:	5e                   	pop    esi
c002045e:	c3                   	ret    
c002045f:	90                   	nop

c0020460 <ATAPI::read(unsigned long long, int, void*)>:
c0020460:	55                   	push   ebp
c0020461:	57                   	push   edi
c0020462:	56                   	push   esi
c0020463:	53                   	push   ebx
c0020464:	83 ec 1c             	sub    esp,0x1c
c0020467:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002046b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002046f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0020473:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002047a:	74 3c                	je     c00204b8 <ATAPI::read(unsigned long long, int, void*)+0x58>
c002047c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020480:	b9 03 00 00 00       	mov    ecx,0x3
c0020485:	fc                   	cld    
c0020486:	31 c0                	xor    eax,eax
c0020488:	0f ce                	bswap  esi
c002048a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002048c:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0020491:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c0020495:	89 e8                	mov    eax,ebp
c0020497:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002049b:	50                   	push   eax
c002049c:	50                   	push   eax
c002049d:	55                   	push   ebp
c002049e:	c1 e5 0b             	shl    ebp,0xb
c00204a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00204a5:	6a 00                	push   0x0
c00204a7:	55                   	push   ebp
c00204a8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00204ac:	50                   	push   eax
c00204ad:	53                   	push   ebx
c00204ae:	e8 b9 fa ff ff       	call   c001ff6c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00204b3:	83 c4 20             	add    esp,0x20
c00204b6:	eb 1a                	jmp    c00204d2 <ATAPI::read(unsigned long long, int, void*)+0x72>
c00204b8:	83 ec 0c             	sub    esp,0xc
c00204bb:	53                   	push   ebx
c00204bc:	e8 01 fe ff ff       	call   c00202c2 <ATAPI::detectMedia()>
c00204c1:	83 c4 10             	add    esp,0x10
c00204c4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00204cb:	75 af                	jne    c002047c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00204cd:	b8 02 00 00 00       	mov    eax,0x2
c00204d2:	83 c4 1c             	add    esp,0x1c
c00204d5:	5b                   	pop    ebx
c00204d6:	5e                   	pop    esi
c00204d7:	5f                   	pop    edi
c00204d8:	5d                   	pop    ebp
c00204d9:	c3                   	ret    

c00204da <SATA::close(int, int, void*)>:
c00204da:	83 ec 0c             	sub    esp,0xc
c00204dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204e1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00204e7:	85 c0                	test   eax,eax
c00204e9:	74 0c                	je     c00204f7 <SATA::close(int, int, void*)+0x1d>
c00204eb:	83 ec 0c             	sub    esp,0xc
c00204ee:	8b 10                	mov    edx,DWORD PTR [eax]
c00204f0:	50                   	push   eax
c00204f1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00204f4:	83 c4 10             	add    esp,0x10
c00204f7:	31 c0                	xor    eax,eax
c00204f9:	83 c4 0c             	add    esp,0xc
c00204fc:	c3                   	ret    
c00204fd:	90                   	nop

c00204fe <SATA::powerSaving(PowerSavingLevel)>:
c00204fe:	c3                   	ret    
c00204ff:	90                   	nop

c0020500 <SATA::open(int, int, void*)>:
c0020500:	56                   	push   esi
c0020501:	53                   	push   ebx
c0020502:	83 ec 10             	sub    esp,0x10
c0020505:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020509:	68 b8 65 02 c0       	push   0xc00265b8
c002050e:	e8 51 6a fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0020513:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020517:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020521:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020527:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020531:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020535:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002053f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020545:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002054c:	e8 d1 fc fe ff       	call   c0010222 <Phys::allocatePage()>
c0020551:	89 c6                	mov    esi,eax
c0020553:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020559:	81 c6 00 10 00 00    	add    esi,0x1000
c002055f:	e8 be fc fe ff       	call   c0010222 <Phys::allocatePage()>
c0020564:	83 c4 10             	add    esp,0x10
c0020567:	39 c6                	cmp    esi,eax
c0020569:	74 10                	je     c002057b <SATA::open(int, int, void*)+0x7b>
c002056b:	83 ec 0c             	sub    esp,0xc
c002056e:	68 c4 65 02 c0       	push   0xc00265c4
c0020573:	e8 b6 fa fe ff       	call   c001002e <KePanic(char const*)>
c0020578:	83 c4 10             	add    esp,0x10
c002057b:	83 ec 0c             	sub    esp,0xc
c002057e:	6a 02                	push   0x2
c0020580:	e8 48 2f ff ff       	call   c00134cd <Virt::allocateKernelVirtualPages(int)>
c0020585:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002058b:	6a 03                	push   0x3
c002058d:	50                   	push   eax
c002058e:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0020594:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c002059a:	e8 11 36 ff ff       	call   c0013bb0 <VAS::mapPage(unsigned long, unsigned long, int)>
c002059f:	83 c4 14             	add    esp,0x14
c00205a2:	53                   	push   ebx
c00205a3:	e8 d2 98 fe ff       	call   c0009e7a <PhysicalDisk::startCache()>
c00205a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00205ab:	e8 6a a7 fe ff       	call   c000ad1a <createPartitionsForDisk(PhysicalDisk*)>
c00205b0:	83 c4 14             	add    esp,0x14
c00205b3:	31 c0                	xor    eax,eax
c00205b5:	5b                   	pop    ebx
c00205b6:	5e                   	pop    esi
c00205b7:	c3                   	ret    

c00205b8 <SATA::SATA()>:
c00205b8:	83 ec 0c             	sub    esp,0xc
c00205bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205bf:	83 ec 04             	sub    esp,0x4
c00205c2:	68 00 02 00 00       	push   0x200
c00205c7:	68 d8 65 02 c0       	push   0xc00265d8
c00205cc:	50                   	push   eax
c00205cd:	e8 40 98 fe ff       	call   c0009e12 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00205d2:	83 c4 10             	add    esp,0x10
c00205d5:	ba 48 66 02 c0       	mov    edx,0xc0026648
c00205da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205de:	89 10                	mov    DWORD PTR [eax],edx
c00205e0:	90                   	nop
c00205e1:	83 c4 0c             	add    esp,0xc
c00205e4:	c3                   	ret    
c00205e5:	90                   	nop

c00205e6 <SATA::access(unsigned long long, int, void*, bool)>:
c00205e6:	55                   	push   ebp
c00205e7:	57                   	push   edi
c00205e8:	56                   	push   esi
c00205e9:	53                   	push   ebx
c00205ea:	83 ec 2c             	sub    esp,0x2c
c00205ed:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00205f1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00205f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00205f9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00205fd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020601:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020605:	fa                   	cli    
c0020606:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c002060c:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0020611:	7e 10                	jle    c0020623 <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c0020613:	83 ec 0c             	sub    esp,0xc
c0020616:	68 e8 65 02 c0       	push   0xc00265e8
c002061b:	e8 0e fa fe ff       	call   c001002e <KePanic(char const*)>
c0020620:	83 c4 10             	add    esp,0x10
c0020623:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0020629:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002062f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020635:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020639:	89 d0                	mov    eax,edx
c002063b:	c1 e0 07             	shl    eax,0x7
c002063e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020642:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002064c:	51                   	push   ecx
c002064d:	8d 42 02             	lea    eax,[edx+0x2]
c0020650:	51                   	push   ecx
c0020651:	c1 e0 07             	shl    eax,0x7
c0020654:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020658:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002065c:	50                   	push   eax
c002065d:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020663:	e8 fe ed ff ff       	call   c001f466 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020668:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002066c:	83 c4 10             	add    esp,0x10
c002066f:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020674:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020678:	0f 84 a4 01 00 00    	je     c0020822 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c002067e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020682:	c1 e0 09             	shl    eax,0x9
c0020685:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002068a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002068e:	74 0e                	je     c002069e <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c0020690:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020696:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002069a:	89 c1                	mov    ecx,eax
c002069c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002069e:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00206a4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00206a8:	8d 42 02             	lea    eax,[edx+0x2]
c00206ab:	c1 e0 07             	shl    eax,0x7
c00206ae:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00206b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00206b4:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00206ba:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00206c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00206c4:	c1 e1 05             	shl    ecx,0x5
c00206c7:	01 c8                	add    eax,ecx
c00206c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00206cd:	83 e1 01             	and    ecx,0x1
c00206d0:	89 ce                	mov    esi,ecx
c00206d2:	8a 08                	mov    cl,BYTE PTR [eax]
c00206d4:	c1 e6 06             	shl    esi,0x6
c00206d7:	83 e1 bf             	and    ecx,0xffffffbf
c00206da:	09 f1                	or     ecx,esi
c00206dc:	88 08                	mov    BYTE PTR [eax],cl
c00206de:	8b 08                	mov    ecx,DWORD PTR [eax]
c00206e0:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00206e6:	81 c9 05 00 01 00    	or     ecx,0x10005
c00206ec:	89 08                	mov    DWORD PTR [eax],ecx
c00206ee:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00206f4:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c00206fa:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0020700:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0020703:	50                   	push   eax
c0020704:	68 90 00 00 00       	push   0x90
c0020709:	6a 00                	push   0x0
c002070b:	56                   	push   esi
c002070c:	e8 df fd fd ff       	call   c00004f0 <memset>
c0020711:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020717:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002071d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020721:	83 c4 10             	add    esp,0x10
c0020724:	48                   	dec    eax
c0020725:	25 ff ff 3f 00       	and    eax,0x3fffff
c002072a:	89 c1                	mov    ecx,eax
c002072c:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020732:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020737:	09 c8                	or     eax,ecx
c0020739:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002073f:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c0020745:	83 c8 80             	or     eax,0xffffff80
c0020748:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c002074e:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020751:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020755:	25 00 7f 00 00       	and    eax,0x7f00
c002075a:	0d 27 80 ff ff       	or     eax,0xffff8027
c002075f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020764:	66 89 06             	mov    WORD PTR [esi],ax
c0020767:	b0 35                	mov    al,0x35
c0020769:	75 02                	jne    c002076d <SATA::access(unsigned long long, int, void*, bool)+0x187>
c002076b:	b0 25                	mov    al,0x25
c002076d:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0020770:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0020774:	89 e8                	mov    eax,ebp
c0020776:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002077a:	c1 e8 10             	shr    eax,0x10
c002077d:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020780:	89 e8                	mov    eax,ebp
c0020782:	c1 e8 18             	shr    eax,0x18
c0020785:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0020788:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002078c:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c002078f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020793:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0020796:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002079a:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c002079e:	89 d6                	mov    esi,edx
c00207a0:	31 c0                	xor    eax,eax
c00207a2:	c1 e6 07             	shl    esi,0x7
c00207a5:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00207a9:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c00207af:	80 e1 88             	and    cl,0x88
c00207b2:	74 0a                	je     c00207be <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c00207b4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00207b9:	74 0a                	je     c00207c5 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c00207bb:	40                   	inc    eax
c00207bc:	eb eb                	jmp    c00207a9 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c00207be:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00207c3:	75 0a                	jne    c00207cf <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c00207c5:	83 ec 0c             	sub    esp,0xc
c00207c8:	68 21 66 02 c0       	push   0xc0026621
c00207cd:	eb 36                	jmp    c0020805 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c00207cf:	b8 01 00 00 00       	mov    eax,0x1
c00207d4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00207d8:	c1 e2 07             	shl    edx,0x7
c00207db:	d3 e0                	shl    eax,cl
c00207dd:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00207e1:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c00207e7:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c00207ed:	85 c8                	test   eax,ecx
c00207ef:	74 25                	je     c0020816 <SATA::access(unsigned long long, int, void*, bool)+0x230>
c00207f1:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c00207f7:	0f ba e1 1e          	bt     ecx,0x1e
c00207fb:	73 ea                	jae    c00207e7 <SATA::access(unsigned long long, int, void*, bool)+0x201>
c00207fd:	83 ec 0c             	sub    esp,0xc
c0020800:	68 2f 66 02 c0       	push   0xc002662f
c0020805:	e8 5a 67 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c002080a:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c0020811:	83 c4 10             	add    esp,0x10
c0020814:	eb 13                	jmp    c0020829 <SATA::access(unsigned long long, int, void*, bool)+0x243>
c0020816:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c002081c:	0f ba e0 1e          	bt     eax,0x1e
c0020820:	73 18                	jae    c002083a <SATA::access(unsigned long long, int, void*, bool)+0x254>
c0020822:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c0020829:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c0020830:	75 01                	jne    c0020833 <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c0020832:	fb                   	sti    
c0020833:	b8 01 00 00 00       	mov    eax,0x1
c0020838:	eb 2c                	jmp    c0020866 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c002083a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002083f:	75 10                	jne    c0020851 <SATA::access(unsigned long long, int, void*, bool)+0x26b>
c0020841:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0020847:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002084b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002084f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020851:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c0020858:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c002085d:	85 c0                	test   eax,eax
c002085f:	75 03                	jne    c0020864 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c0020861:	fb                   	sti    
c0020862:	eb 02                	jmp    c0020866 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020864:	31 c0                	xor    eax,eax
c0020866:	83 c4 2c             	add    esp,0x2c
c0020869:	5b                   	pop    ebx
c002086a:	5e                   	pop    esi
c002086b:	5f                   	pop    edi
c002086c:	5d                   	pop    ebp
c002086d:	c3                   	ret    

c002086e <SATA::read(unsigned long long, int, void*)>:
c002086e:	57                   	push   edi
c002086f:	b8 04 00 00 00       	mov    eax,0x4
c0020874:	56                   	push   esi
c0020875:	53                   	push   ebx
c0020876:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002087a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002087e:	8d 7a ff             	lea    edi,[edx-0x1]
c0020881:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020885:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0020889:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002088f:	77 25                	ja     c00208b6 <SATA::read(unsigned long long, int, void*)+0x48>
c0020891:	b8 06 00 00 00       	mov    eax,0x6
c0020896:	85 f6                	test   esi,esi
c0020898:	74 1c                	je     c00208b6 <SATA::read(unsigned long long, int, void*)+0x48>
c002089a:	50                   	push   eax
c002089b:	50                   	push   eax
c002089c:	6a 00                	push   0x0
c002089e:	56                   	push   esi
c002089f:	52                   	push   edx
c00208a0:	53                   	push   ebx
c00208a1:	51                   	push   ecx
c00208a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00208a6:	e8 3b fd ff ff       	call   c00205e6 <SATA::access(unsigned long long, int, void*, bool)>
c00208ab:	83 c4 20             	add    esp,0x20
c00208ae:	85 c0                	test   eax,eax
c00208b0:	0f 95 c0             	setne  al
c00208b3:	0f b6 c0             	movzx  eax,al
c00208b6:	5b                   	pop    ebx
c00208b7:	5e                   	pop    esi
c00208b8:	5f                   	pop    edi
c00208b9:	c3                   	ret    

c00208ba <SATA::write(unsigned long long, int, void*)>:
c00208ba:	55                   	push   ebp
c00208bb:	b8 04 00 00 00       	mov    eax,0x4
c00208c0:	57                   	push   edi
c00208c1:	56                   	push   esi
c00208c2:	53                   	push   ebx
c00208c3:	83 ec 0c             	sub    esp,0xc
c00208c6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00208ca:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00208ce:	8d 73 ff             	lea    esi,[ebx-0x1]
c00208d1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00208d5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00208d9:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00208df:	77 3d                	ja     c002091e <SATA::write(unsigned long long, int, void*)+0x64>
c00208e1:	b8 06 00 00 00       	mov    eax,0x6
c00208e6:	85 ed                	test   ebp,ebp
c00208e8:	74 34                	je     c002091e <SATA::write(unsigned long long, int, void*)+0x64>
c00208ea:	c1 e3 09             	shl    ebx,0x9
c00208ed:	01 eb                	add    ebx,ebp
c00208ef:	89 d6                	mov    esi,edx
c00208f1:	89 cf                	mov    edi,ecx
c00208f3:	83 c6 01             	add    esi,0x1
c00208f6:	83 d7 00             	adc    edi,0x0
c00208f9:	50                   	push   eax
c00208fa:	50                   	push   eax
c00208fb:	6a 01                	push   0x1
c00208fd:	55                   	push   ebp
c00208fe:	81 c5 00 02 00 00    	add    ebp,0x200
c0020904:	6a 01                	push   0x1
c0020906:	51                   	push   ecx
c0020907:	52                   	push   edx
c0020908:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002090c:	e8 d5 fc ff ff       	call   c00205e6 <SATA::access(unsigned long long, int, void*, bool)>
c0020911:	83 c4 20             	add    esp,0x20
c0020914:	89 f2                	mov    edx,esi
c0020916:	89 f9                	mov    ecx,edi
c0020918:	39 dd                	cmp    ebp,ebx
c002091a:	75 d3                	jne    c00208ef <SATA::write(unsigned long long, int, void*)+0x35>
c002091c:	31 c0                	xor    eax,eax
c002091e:	83 c4 0c             	add    esp,0xc
c0020921:	5b                   	pop    ebx
c0020922:	5e                   	pop    esi
c0020923:	5f                   	pop    edi
c0020924:	5d                   	pop    ebp
c0020925:	c3                   	ret    

c0020926 <SATAPI::write(unsigned long long, int, void*)>:
c0020926:	b8 03 00 00 00       	mov    eax,0x3
c002092b:	c3                   	ret    

c002092c <SATAPI::close(int, int, void*)>:
c002092c:	83 ec 0c             	sub    esp,0xc
c002092f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020933:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020939:	85 c0                	test   eax,eax
c002093b:	74 0c                	je     c0020949 <SATAPI::close(int, int, void*)+0x1d>
c002093d:	83 ec 0c             	sub    esp,0xc
c0020940:	8b 10                	mov    edx,DWORD PTR [eax]
c0020942:	50                   	push   eax
c0020943:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020946:	83 c4 10             	add    esp,0x10
c0020949:	31 c0                	xor    eax,eax
c002094b:	83 c4 0c             	add    esp,0xc
c002094e:	c3                   	ret    
c002094f:	90                   	nop

c0020950 <SATAPI::SATAPI()>:
c0020950:	83 ec 0c             	sub    esp,0xc
c0020953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020957:	83 ec 04             	sub    esp,0x4
c002095a:	68 00 08 00 00       	push   0x800
c002095f:	68 78 66 02 c0       	push   0xc0026678
c0020964:	50                   	push   eax
c0020965:	e8 a8 94 fe ff       	call   c0009e12 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002096a:	83 c4 10             	add    esp,0x10
c002096d:	ba 6c 67 02 c0       	mov    edx,0xc002676c
c0020972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020976:	89 10                	mov    DWORD PTR [eax],edx
c0020978:	90                   	nop
c0020979:	83 c4 0c             	add    esp,0xc
c002097c:	c3                   	ret    
c002097d:	90                   	nop

c002097e <SATAPI::diskRemoved()>:
c002097e:	c3                   	ret    
c002097f:	90                   	nop

c0020980 <SATAPI::diskInserted()>:
c0020980:	83 ec 18             	sub    esp,0x18
c0020983:	68 84 66 02 c0       	push   0xc0026684
c0020988:	e8 d7 65 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c002098d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020991:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020998:	83 c4 1c             	add    esp,0x1c
c002099b:	c3                   	ret    

c002099c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002099c:	55                   	push   ebp
c002099d:	57                   	push   edi
c002099e:	56                   	push   esi
c002099f:	53                   	push   ebx
c00209a0:	83 ec 34             	sub    esp,0x34
c00209a3:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00209a7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00209ab:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00209af:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00209b3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00209b7:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00209bd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00209c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00209c7:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c00209cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00209d1:	83 c0 02             	add    eax,0x2
c00209d4:	c1 e0 07             	shl    eax,0x7
c00209d7:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00209db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00209df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00209e3:	c1 e0 07             	shl    eax,0x7
c00209e6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00209ea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00209ee:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00209f8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00209fc:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020a02:	e8 5f ea ff ff       	call   c001f466 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020a07:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020a0b:	83 c4 10             	add    esp,0x10
c0020a0e:	b8 01 00 00 00       	mov    eax,0x1
c0020a13:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020a18:	0f 84 57 02 00 00    	je     c0020c75 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c0020a1e:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020a24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a28:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a2a:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020a30:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020a36:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020a3a:	c1 e1 05             	shl    ecx,0x5
c0020a3d:	01 c8                	add    eax,ecx
c0020a3f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020a41:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020a47:	81 c9 25 00 01 00    	or     ecx,0x10025
c0020a4d:	89 08                	mov    DWORD PTR [eax],ecx
c0020a4f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020a55:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020a5b:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0020a61:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0020a64:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020a67:	50                   	push   eax
c0020a68:	68 90 00 00 00       	push   0x90
c0020a6d:	6a 00                	push   0x0
c0020a6f:	53                   	push   ebx
c0020a70:	e8 7b fa fd ff       	call   c00004f0 <memset>
c0020a75:	b9 0c 00 00 00       	mov    ecx,0xc
c0020a7a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0020a7e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020a80:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0020a86:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0020a8a:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0020a90:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0020a94:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020a98:	48                   	dec    eax
c0020a99:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020a9e:	89 c1                	mov    ecx,eax
c0020aa0:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020aa6:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020aab:	09 c8                	or     eax,ecx
c0020aad:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0020ab3:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c0020ab9:	83 c8 80             	or     eax,0xffffff80
c0020abc:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c0020ac2:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0020ac5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020ac9:	25 00 7f 00 00       	and    eax,0x7f00
c0020ace:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0020ad2:	0d 27 80 ff ff       	or     eax,0xffff8027
c0020ad7:	66 89 03             	mov    WORD PTR [ebx],ax
c0020ada:	89 d0                	mov    eax,edx
c0020adc:	c1 ea 18             	shr    edx,0x18
c0020adf:	c1 e8 10             	shr    eax,0x10
c0020ae2:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0020ae5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0020ae8:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0020aec:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0020aef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020af3:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0020af6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020afa:	83 c4 10             	add    esp,0x10
c0020afd:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0020b01:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020b05:	31 c0                	xor    eax,eax
c0020b07:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0020b0d:	80 e1 88             	and    cl,0x88
c0020b10:	74 0a                	je     c0020b1c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c0020b12:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020b17:	74 0a                	je     c0020b23 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c0020b19:	40                   	inc    eax
c0020b1a:	eb eb                	jmp    c0020b07 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0020b1c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020b21:	75 43                	jne    c0020b66 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0020b23:	83 ec 0c             	sub    esp,0xc
c0020b26:	68 9c 66 02 c0       	push   0xc002669c
c0020b2b:	e8 34 64 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0020b30:	58                   	pop    eax
c0020b31:	5a                   	pop    edx
c0020b32:	68 b1 66 02 c0       	push   0xc00266b1
c0020b37:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c0020b3d:	e8 54 1d ff ff       	call   c0012896 <VgaText::puts(char const*)>
c0020b42:	59                   	pop    ecx
c0020b43:	5b                   	pop    ebx
c0020b44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020b48:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020b4e:	e8 ad e9 ff ff       	call   c001f500 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0020b53:	5e                   	pop    esi
c0020b54:	5f                   	pop    edi
c0020b55:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020b59:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020b5f:	e8 7c e9 ff ff       	call   c001f4e0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0020b64:	eb 48                	jmp    c0020bae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c0020b66:	be 01 00 00 00       	mov    esi,0x1
c0020b6b:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020b6f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020b73:	d3 e6                	shl    esi,cl
c0020b75:	c1 e7 07             	shl    edi,0x7
c0020b78:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0020b7e:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c0020b83:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0020b87:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0020b8d:	85 c6                	test   esi,eax
c0020b8f:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0020b95:	0f 84 a7 00 00 00    	je     c0020c42 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a6>
c0020b9b:	0f ba e0 1e          	bt     eax,0x1e
c0020b9f:	73 1a                	jae    c0020bbb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c0020ba1:	83 ec 0c             	sub    esp,0xc
c0020ba4:	68 c3 66 02 c0       	push   0xc00266c3
c0020ba9:	e8 b6 63 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0020bae:	83 c4 10             	add    esp,0x10
c0020bb1:	b8 01 00 00 00       	mov    eax,0x1
c0020bb6:	e9 ba 00 00 00       	jmp    c0020c75 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c0020bbb:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c0020bc1:	83 f8 0d             	cmp    eax,0xd
c0020bc4:	77 0b                	ja     c0020bd1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x235>
c0020bc6:	50                   	push   eax
c0020bc7:	50                   	push   eax
c0020bc8:	6a 00                	push   0x0
c0020bca:	68 c8 00 00 00       	push   0xc8
c0020bcf:	eb 2a                	jmp    c0020bfb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c0020bd1:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c0020bd7:	83 f8 0d             	cmp    eax,0xd
c0020bda:	77 0b                	ja     c0020be7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c0020bdc:	51                   	push   ecx
c0020bdd:	51                   	push   ecx
c0020bde:	6a 00                	push   0x0
c0020be0:	68 58 02 00 00       	push   0x258
c0020be5:	eb 14                	jmp    c0020bfb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c0020be7:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c0020bed:	83 f8 06             	cmp    eax,0x6
c0020bf0:	77 11                	ja     c0020c03 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c0020bf2:	52                   	push   edx
c0020bf3:	52                   	push   edx
c0020bf4:	6a 00                	push   0x0
c0020bf6:	68 dc 05 00 00       	push   0x5dc
c0020bfb:	e8 34 68 ff ff       	call   c0017434 <milliTenthSleep(unsigned long long)>
c0020c00:	83 c4 10             	add    esp,0x10
c0020c03:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020c07:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c0020c0a:	75 06                	jne    c0020c12 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x276>
c0020c0c:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c0020c10:	74 16                	je     c0020c28 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c0020c12:	83 fb 06             	cmp    ebx,0x6
c0020c15:	77 11                	ja     c0020c28 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c0020c17:	50                   	push   eax
c0020c18:	50                   	push   eax
c0020c19:	6a 00                	push   0x0
c0020c1b:	68 c4 09 00 00       	push   0x9c4
c0020c20:	e8 0f 68 ff ff       	call   c0017434 <milliTenthSleep(unsigned long long)>
c0020c25:	83 c4 10             	add    esp,0x10
c0020c28:	43                   	inc    ebx
c0020c29:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c0020c2f:	0f 85 52 ff ff ff    	jne    c0020b87 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c0020c35:	83 ec 0c             	sub    esp,0xc
c0020c38:	68 d6 66 02 c0       	push   0xc00266d6
c0020c3d:	e9 67 ff ff ff       	jmp    c0020ba9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c0020c42:	0f ba e0 1e          	bt     eax,0x1e
c0020c46:	73 0d                	jae    c0020c55 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b9>
c0020c48:	83 ec 0c             	sub    esp,0xc
c0020c4b:	68 ea 66 02 c0       	push   0xc00266ea
c0020c50:	e9 54 ff ff ff       	jmp    c0020ba9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c0020c55:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0020c5a:	74 17                	je     c0020c73 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c0020c5c:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0020c61:	74 10                	je     c0020c73 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c0020c63:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0020c69:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0020c6d:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0020c71:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020c73:	31 c0                	xor    eax,eax
c0020c75:	83 c4 2c             	add    esp,0x2c
c0020c78:	5b                   	pop    ebx
c0020c79:	5e                   	pop    esi
c0020c7a:	5f                   	pop    edi
c0020c7b:	5d                   	pop    ebp
c0020c7c:	c3                   	ret    
c0020c7d:	90                   	nop

c0020c7e <SATAPI::eject()>:
c0020c7e:	57                   	push   edi
c0020c7f:	b9 03 00 00 00       	mov    ecx,0x3
c0020c84:	83 ec 18             	sub    esp,0x18
c0020c87:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020c8b:	fc                   	cld    
c0020c8c:	31 c0                	xor    eax,eax
c0020c8e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020c90:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020c95:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020c9a:	50                   	push   eax
c0020c9b:	6a 00                	push   0x0
c0020c9d:	6a 00                	push   0x0
c0020c9f:	6a 00                	push   0x0
c0020ca1:	6a 00                	push   0x0
c0020ca3:	6a 02                	push   0x2
c0020ca5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020ca9:	50                   	push   eax
c0020caa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020cae:	e8 e9 fc ff ff       	call   c002099c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020cb3:	31 c0                	xor    eax,eax
c0020cb5:	83 c4 38             	add    esp,0x38
c0020cb8:	5f                   	pop    edi
c0020cb9:	c3                   	ret    

c0020cba <SATAPI::detectMedia()>:
c0020cba:	53                   	push   ebx
c0020cbb:	83 ec 14             	sub    esp,0x14
c0020cbe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020cc2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020cc8:	e8 1b a7 fe ff       	call   c000b3e8 <VCache::writeWriteBuffer()>
c0020ccd:	59                   	pop    ecx
c0020cce:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020cd4:	e8 ff a6 fe ff       	call   c000b3d8 <VCache::invalidateReadBuffer()>
c0020cd9:	c7 04 24 ff 66 02 c0 	mov    DWORD PTR [esp],0xc00266ff
c0020ce0:	e8 7f 62 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0020ce5:	83 c4 10             	add    esp,0x10
c0020ce8:	31 c0                	xor    eax,eax
c0020cea:	8b 14 85 e0 ca 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3520]
c0020cf1:	85 d2                	test   edx,edx
c0020cf3:	74 0f                	je     c0020d04 <SATAPI::detectMedia()+0x4a>
c0020cf5:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c0020cfb:	75 07                	jne    c0020d04 <SATAPI::detectMedia()+0x4a>
c0020cfd:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c0020d04:	40                   	inc    eax
c0020d05:	83 f8 1a             	cmp    eax,0x1a
c0020d08:	75 e0                	jne    c0020cea <SATAPI::detectMedia()+0x30>
c0020d0a:	83 c4 08             	add    esp,0x8
c0020d0d:	5b                   	pop    ebx
c0020d0e:	c3                   	ret    
c0020d0f:	90                   	nop

c0020d10 <SATAPI::open(int, int, void*)>:
c0020d10:	56                   	push   esi
c0020d11:	53                   	push   ebx
c0020d12:	51                   	push   ecx
c0020d13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020d17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d1b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020d25:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020d2b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020d35:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d39:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020d43:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020d49:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020d50:	e8 cd f4 fe ff       	call   c0010222 <Phys::allocatePage()>
c0020d55:	89 c6                	mov    esi,eax
c0020d57:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0020d5d:	81 c6 00 10 00 00    	add    esi,0x1000
c0020d63:	e8 ba f4 fe ff       	call   c0010222 <Phys::allocatePage()>
c0020d68:	39 c6                	cmp    esi,eax
c0020d6a:	74 10                	je     c0020d7c <SATAPI::open(int, int, void*)+0x6c>
c0020d6c:	83 ec 0c             	sub    esp,0xc
c0020d6f:	68 14 67 02 c0       	push   0xc0026714
c0020d74:	e8 b5 f2 fe ff       	call   c001002e <KePanic(char const*)>
c0020d79:	83 c4 10             	add    esp,0x10
c0020d7c:	83 ec 0c             	sub    esp,0xc
c0020d7f:	6a 02                	push   0x2
c0020d81:	e8 47 27 ff ff       	call   c00134cd <Virt::allocateKernelVirtualPages(int)>
c0020d86:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0020d8c:	6a 03                	push   0x3
c0020d8e:	50                   	push   eax
c0020d8f:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0020d95:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c0020d9b:	e8 10 2e ff ff       	call   c0013bb0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0020da0:	83 c4 14             	add    esp,0x14
c0020da3:	68 78 01 00 00       	push   0x178
c0020da8:	e8 3a ef fe ff       	call   c000fce7 <malloc>
c0020dad:	83 c4 0c             	add    esp,0xc
c0020db0:	89 c6                	mov    esi,eax
c0020db2:	6a 00                	push   0x0
c0020db4:	68 ff ff ff 7f       	push   0x7fffffff
c0020db9:	6a 00                	push   0x0
c0020dbb:	6a 00                	push   0x0
c0020dbd:	53                   	push   ebx
c0020dbe:	68 2a 67 02 c0       	push   0xc002672a
c0020dc3:	50                   	push   eax
c0020dc4:	e8 7f 9a fe ff       	call   c000a848 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020dc9:	83 c4 14             	add    esp,0x14
c0020dcc:	56                   	push   esi
c0020dcd:	e8 36 9b fe ff       	call   c000a908 <LogicalDisk::assignDriveLetter()>
c0020dd2:	5a                   	pop    edx
c0020dd3:	0f be c0             	movsx  eax,al
c0020dd6:	59                   	pop    ecx
c0020dd7:	50                   	push   eax
c0020dd8:	68 70 65 02 c0       	push   0xc0026570
c0020ddd:	e8 82 61 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0020de2:	58                   	pop    eax
c0020de3:	5a                   	pop    edx
c0020de4:	56                   	push   esi
c0020de5:	53                   	push   ebx
c0020de6:	e8 45 8c fe ff       	call   c0009a30 <Device::addChild(Device*)>
c0020deb:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c0020df1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020df4:	e8 81 90 fe ff       	call   c0009e7a <PhysicalDisk::startCache()>
c0020df9:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0020e00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020e03:	e8 b2 fe ff ff       	call   c0020cba <SATAPI::detectMedia()>
c0020e08:	83 c4 14             	add    esp,0x14
c0020e0b:	31 c0                	xor    eax,eax
c0020e0d:	5b                   	pop    ebx
c0020e0e:	5e                   	pop    esi
c0020e0f:	c3                   	ret    

c0020e10 <SATAPI::read(unsigned long long, int, void*)>:
c0020e10:	57                   	push   edi
c0020e11:	56                   	push   esi
c0020e12:	53                   	push   ebx
c0020e13:	83 ec 30             	sub    esp,0x30
c0020e16:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020e1a:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0020e1e:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0020e22:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020e26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020e2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020e2e:	83 fe 04             	cmp    esi,0x4
c0020e31:	7e 10                	jle    c0020e43 <SATAPI::read(unsigned long long, int, void*)+0x33>
c0020e33:	83 ec 0c             	sub    esp,0xc
c0020e36:	68 38 67 02 c0       	push   0xc0026738
c0020e3b:	e8 ee f1 fe ff       	call   c001002e <KePanic(char const*)>
c0020e40:	83 c4 10             	add    esp,0x10
c0020e43:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0020e49:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0020e4f:	51                   	push   ecx
c0020e50:	50                   	push   eax
c0020e51:	83 c0 02             	add    eax,0x2
c0020e54:	c1 e0 07             	shl    eax,0x7
c0020e57:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c0020e5d:	50                   	push   eax
c0020e5e:	52                   	push   edx
c0020e5f:	e8 c6 e6 ff ff       	call   c001f52a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0020e64:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0020e68:	b9 03 00 00 00       	mov    ecx,0x3
c0020e6d:	fc                   	cld    
c0020e6e:	31 c0                	xor    eax,eax
c0020e70:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020e72:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c0020e77:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0020e7c:	83 c4 0c             	add    esp,0xc
c0020e7f:	6a 00                	push   0x0
c0020e81:	6a 00                	push   0x0
c0020e83:	6a 00                	push   0x0
c0020e85:	6a 00                	push   0x0
c0020e87:	6a 02                	push   0x2
c0020e89:	8d 44 24 30          	lea    eax,[esp+0x30]
c0020e8d:	50                   	push   eax
c0020e8e:	53                   	push   ebx
c0020e8f:	e8 08 fb ff ff       	call   c002099c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020e94:	83 c4 20             	add    esp,0x20
c0020e97:	85 c0                	test   eax,eax
c0020e99:	75 44                	jne    c0020edf <SATAPI::read(unsigned long long, int, void*)+0xcf>
c0020e9b:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0020e9f:	b9 03 00 00 00       	mov    ecx,0x3
c0020ea4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020ea6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020eaa:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c0020eaf:	0f c8                	bswap  eax
c0020eb1:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c0020eb5:	89 f0                	mov    eax,esi
c0020eb7:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0020ebb:	50                   	push   eax
c0020ebc:	56                   	push   esi
c0020ebd:	c1 e6 0b             	shl    esi,0xb
c0020ec0:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0020ec4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ec8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ecc:	56                   	push   esi
c0020ecd:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0020ed1:	50                   	push   eax
c0020ed2:	53                   	push   ebx
c0020ed3:	e8 c4 fa ff ff       	call   c002099c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020ed8:	83 c4 20             	add    esp,0x20
c0020edb:	85 c0                	test   eax,eax
c0020edd:	74 14                	je     c0020ef3 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c0020edf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020ee3:	83 ec 0c             	sub    esp,0xc
c0020ee6:	53                   	push   ebx
c0020ee7:	e8 ce fd ff ff       	call   c0020cba <SATAPI::detectMedia()>
c0020eec:	83 c4 10             	add    esp,0x10
c0020eef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ef3:	83 c4 30             	add    esp,0x30
c0020ef6:	5b                   	pop    ebx
c0020ef7:	5e                   	pop    esi
c0020ef8:	5f                   	pop    edi
c0020ef9:	c3                   	ret    

c0020efa <IOAPIC::close(int, int, void*)>:
c0020efa:	b8 00 00 00 00       	mov    eax,0x0
c0020eff:	c3                   	ret    

c0020f00 <apicGetBase()>:
c0020f00:	55                   	push   ebp
c0020f01:	89 e5                	mov    ebp,esp
c0020f03:	83 ec 08             	sub    esp,0x8
c0020f06:	83 ec 0c             	sub    esp,0xc
c0020f09:	68 9c 67 02 c0       	push   0xc002679c
c0020f0e:	e8 1b f1 fe ff       	call   c001002e <KePanic(char const*)>
c0020f13:	83 c4 10             	add    esp,0x10
c0020f16:	b8 00 00 00 00       	mov    eax,0x0
c0020f1b:	c9                   	leave  
c0020f1c:	c3                   	ret    
c0020f1d:	90                   	nop

c0020f1e <IOAPIC::IOAPIC()>:
c0020f1e:	83 ec 0c             	sub    esp,0xc
c0020f21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f25:	83 ec 08             	sub    esp,0x8
c0020f28:	68 ab 67 02 c0       	push   0xc00267ab
c0020f2d:	50                   	push   eax
c0020f2e:	e8 5f 8c fe ff       	call   c0009b92 <Device::Device(char const*)>
c0020f33:	83 c4 10             	add    esp,0x10
c0020f36:	ba cc 67 02 c0       	mov    edx,0xc00267cc
c0020f3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f3f:	89 10                	mov    DWORD PTR [eax],edx
c0020f41:	90                   	nop
c0020f42:	83 c4 0c             	add    esp,0xc
c0020f45:	c3                   	ret    

c0020f46 <apicOpen()>:
c0020f46:	55                   	push   ebp
c0020f47:	89 e5                	mov    ebp,esp
c0020f49:	53                   	push   ebx
c0020f4a:	83 ec 34             	sub    esp,0x34
c0020f4d:	83 ec 0c             	sub    esp,0xc
c0020f50:	68 b3 67 02 c0       	push   0xc00267b3
c0020f55:	e8 0a 60 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0020f5a:	83 c4 10             	add    esp,0x10
c0020f5d:	a0 a0 04 03 c0       	mov    al,ds:0xc00304a0
c0020f62:	83 f0 01             	xor    eax,0x1
c0020f65:	0f b6 c0             	movzx  eax,al
c0020f68:	85 c0                	test   eax,eax
c0020f6a:	0f 84 a3 00 00 00    	je     c0021013 <apicOpen()+0xcd>
c0020f70:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0020f74:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c0020f79:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0020f7d:	0f b6 c0             	movzx  eax,al
c0020f80:	39 c2                	cmp    edx,eax
c0020f82:	0f 83 84 00 00 00    	jae    c002100c <apicOpen()+0xc6>
c0020f88:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c0020f8f:	83 ec 0c             	sub    esp,0xc
c0020f92:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0020f95:	e8 4d ed fe ff       	call   c000fce7 <malloc>
c0020f9a:	83 c4 10             	add    esp,0x10
c0020f9d:	89 c3                	mov    ebx,eax
c0020f9f:	83 ec 0c             	sub    esp,0xc
c0020fa2:	53                   	push   ebx
c0020fa3:	e8 76 ff ff ff       	call   c0020f1e <IOAPIC::IOAPIC()>
c0020fa8:	83 c4 10             	add    esp,0x10
c0020fab:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0020fae:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0020fb2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0020fb5:	89 14 85 80 04 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfb80],edx
c0020fbc:	a1 60 04 03 c0       	mov    eax,ds:0xc0030460
c0020fc1:	83 c0 01             	add    eax,0x1
c0020fc4:	a3 60 04 03 c0       	mov    ds:0xc0030460,eax
c0020fc9:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c0020fce:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0020fd4:	83 ec 08             	sub    esp,0x8
c0020fd7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0020fda:	50                   	push   eax
c0020fdb:	e8 50 8a fe ff       	call   c0009a30 <Device::addChild(Device*)>
c0020fe0:	83 c4 10             	add    esp,0x10
c0020fe3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020fe6:	8b 00                	mov    eax,DWORD PTR [eax]
c0020fe8:	83 c0 08             	add    eax,0x8
c0020feb:	8b 00                	mov    eax,DWORD PTR [eax]
c0020fed:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0020ff1:	6a 00                	push   0x0
c0020ff3:	6a 00                	push   0x0
c0020ff5:	52                   	push   edx
c0020ff6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0020ff9:	ff d0                	call   eax
c0020ffb:	83 c4 10             	add    esp,0x10
c0020ffe:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c0021001:	83 c0 01             	add    eax,0x1
c0021004:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c0021007:	e9 68 ff ff ff       	jmp    c0020f74 <apicOpen()+0x2e>
c002100c:	c6 05 a0 04 03 c0 01 	mov    BYTE PTR ds:0xc00304a0,0x1
c0021013:	e8 e8 fe ff ff       	call   c0020f00 <apicGetBase()>
c0021018:	05 f0 00 00 00       	add    eax,0xf0
c002101d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0021020:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0021023:	8b 00                	mov    eax,DWORD PTR [eax]
c0021025:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0021028:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c002102f:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c0021036:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0021039:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002103c:	89 10                	mov    DWORD PTR [eax],edx
c002103e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0021045:	a1 8c cd 02 c0       	mov    eax,ds:0xc002cd8c
c002104a:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c002104d:	7d 7c                	jge    c00210cb <apicOpen()+0x185>
c002104f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021052:	8b 04 85 a0 cd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3260]
c0021059:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c002105c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002105f:	8b 04 85 a0 cd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3260]
c0021066:	c1 e8 08             	shr    eax,0x8
c0021069:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c002106d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021070:	8b 04 85 a0 cd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3260]
c0021077:	c1 e8 18             	shr    eax,0x18
c002107a:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c002107d:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0021081:	3d ff 00 00 00       	cmp    eax,0xff
c0021086:	75 3a                	jne    c00210c2 <apicOpen()+0x17c>
c0021088:	e8 73 fe ff ff       	call   c0020f00 <apicGetBase()>
c002108d:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c0021091:	83 fa 01             	cmp    edx,0x1
c0021094:	75 07                	jne    c002109d <apicOpen()+0x157>
c0021096:	ba 60 03 00 00       	mov    edx,0x360
c002109b:	eb 05                	jmp    c00210a2 <apicOpen()+0x15c>
c002109d:	ba 50 03 00 00       	mov    edx,0x350
c00210a2:	01 d0                	add    eax,edx
c00210a4:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00210a7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00210aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00210ac:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00210af:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c00210b6:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c00210ba:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00210bd:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00210c0:	89 10                	mov    DWORD PTR [eax],edx
c00210c2:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c00210c6:	e9 7a ff ff ff       	jmp    c0021045 <apicOpen()+0xff>
c00210cb:	90                   	nop
c00210cc:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00210cf:	c9                   	leave  
c00210d0:	c3                   	ret    
c00210d1:	90                   	nop

c00210d2 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00210d2:	55                   	push   ebp
c00210d3:	89 e5                	mov    ebp,esp
c00210d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00210d8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00210de:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00210e1:	72 1d                	jb     c0021100 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00210e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00210e6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00210ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00210ef:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00210f5:	01 d0                	add    eax,edx
c00210f7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00210fa:	73 04                	jae    c0021100 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00210fc:	b0 01                	mov    al,0x1
c00210fe:	eb 02                	jmp    c0021102 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0021100:	b0 00                	mov    al,0x0
c0021102:	5d                   	pop    ebp
c0021103:	c3                   	ret    

c0021104 <IOAPIC::read(int)>:
c0021104:	55                   	push   ebp
c0021105:	89 e5                	mov    ebp,esp
c0021107:	83 ec 10             	sub    esp,0x10
c002110a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002110d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021113:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0021116:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021119:	0f b6 d0             	movzx  edx,al
c002111c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002111f:	89 10                	mov    DWORD PTR [eax],edx
c0021121:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021124:	83 c0 10             	add    eax,0x10
c0021127:	8b 00                	mov    eax,DWORD PTR [eax]
c0021129:	c9                   	leave  
c002112a:	c3                   	ret    
c002112b:	90                   	nop

c002112c <IOAPIC::open(int, int, void*)>:
c002112c:	55                   	push   ebp
c002112d:	89 e5                	mov    ebp,esp
c002112f:	57                   	push   edi
c0021130:	56                   	push   esi
c0021131:	53                   	push   ebx
c0021132:	83 ec 04             	sub    esp,0x4
c0021135:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021138:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002113b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021144:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002114a:	8b 14 85 80 ce 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3180]
c0021151:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021154:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002115a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002115d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021163:	8b 14 85 00 cf 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3100]
c002116a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002116d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0021173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021176:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002117c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002117f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021185:	0f b6 f0             	movzx  esi,al
c0021188:	89 d0                	mov    eax,edx
c002118a:	ba 00 00 00 00       	mov    edx,0x0
c002118f:	89 c7                	mov    edi,eax
c0021191:	83 e7 ff             	and    edi,0xffffffff
c0021194:	89 f9                	mov    ecx,edi
c0021196:	0f b6 da             	movzx  ebx,dl
c0021199:	89 c8                	mov    eax,ecx
c002119b:	89 da                	mov    edx,ebx
c002119d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00211a0:	8d 5e 08             	lea    ebx,[esi+0x8]
c00211a3:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00211a7:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00211ab:	83 e0 00             	and    eax,0x0
c00211ae:	09 d0                	or     eax,edx
c00211b0:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00211b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00211b7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00211bd:	8d 50 01             	lea    edx,[eax+0x1]
c00211c0:	88 d1                	mov    cl,dl
c00211c2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00211c5:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c00211cb:	0f b6 d0             	movzx  edx,al
c00211ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00211d1:	83 c2 08             	add    edx,0x8
c00211d4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00211d8:	0f b6 c9             	movzx  ecx,cl
c00211db:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00211e1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00211e5:	6a 01                	push   0x1
c00211e7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00211ea:	e8 15 ff ff ff       	call   c0021104 <IOAPIC::read(int)>
c00211ef:	83 c4 08             	add    esp,0x8
c00211f2:	c1 f8 10             	sar    eax,0x10
c00211f5:	0f b6 c0             	movzx  eax,al
c00211f8:	8d 50 01             	lea    edx,[eax+0x1]
c00211fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00211fe:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0021204:	b8 00 00 00 00       	mov    eax,0x0
c0021209:	8d 65 f4             	lea    esp,[ebp-0xc]
c002120c:	5b                   	pop    ebx
c002120d:	5e                   	pop    esi
c002120e:	5f                   	pop    edi
c002120f:	5d                   	pop    ebp
c0021210:	c3                   	ret    
c0021211:	90                   	nop

c0021212 <IOAPIC::write(int, int)>:
c0021212:	55                   	push   ebp
c0021213:	89 e5                	mov    ebp,esp
c0021215:	83 ec 10             	sub    esp,0x10
c0021218:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002121b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021221:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0021224:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021227:	0f b6 d0             	movzx  edx,al
c002122a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002122d:	89 10                	mov    DWORD PTR [eax],edx
c002122f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021232:	8d 50 10             	lea    edx,[eax+0x10]
c0021235:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021238:	89 02                	mov    DWORD PTR [edx],eax
c002123a:	90                   	nop
c002123b:	c9                   	leave  
c002123c:	c3                   	ret    
c002123d:	90                   	nop

c002123e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002123e:	55                   	push   ebp
c002123f:	89 e5                	mov    ebp,esp
c0021241:	53                   	push   ebx
c0021242:	83 ec 2c             	sub    esp,0x2c
c0021245:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021248:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002124b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002124e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0021251:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0021254:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021257:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002125a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002125d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0021260:	88 d8                	mov    al,bl
c0021262:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0021265:	88 c8                	mov    al,cl
c0021267:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002126a:	88 d0                	mov    al,dl
c002126c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002126f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0021273:	83 c0 08             	add    eax,0x8
c0021276:	01 c0                	add    eax,eax
c0021278:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002127b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002127f:	83 c0 08             	add    eax,0x8
c0021282:	01 c0                	add    eax,eax
c0021284:	83 c0 01             	add    eax,0x1
c0021287:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002128a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002128d:	50                   	push   eax
c002128e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021291:	e8 6e fe ff ff       	call   c0021104 <IOAPIC::read(int)>
c0021296:	83 c4 08             	add    esp,0x8
c0021299:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002129c:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00212a3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00212a6:	c1 e0 18             	shl    eax,0x18
c00212a9:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00212ac:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00212af:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00212b2:	52                   	push   edx
c00212b3:	50                   	push   eax
c00212b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00212b7:	e8 56 ff ff ff       	call   c0021212 <IOAPIC::write(int, int)>
c00212bc:	83 c4 0c             	add    esp,0xc
c00212bf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00212c2:	50                   	push   eax
c00212c3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00212c6:	e8 39 fe ff ff       	call   c0021104 <IOAPIC::read(int)>
c00212cb:	83 c4 08             	add    esp,0x8
c00212ce:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00212d1:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00212d8:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00212df:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00212e6:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c00212ea:	85 c0                	test   eax,eax
c00212ec:	74 09                	je     c00212f7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c00212ee:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00212f5:	eb 07                	jmp    c00212fe <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c00212f7:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00212fe:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c0021302:	85 c0                	test   eax,eax
c0021304:	74 09                	je     c002130f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c0021306:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002130d:	eb 07                	jmp    c0021316 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c002130f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0021316:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002131d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0021321:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0021324:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0021327:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002132a:	52                   	push   edx
c002132b:	50                   	push   eax
c002132c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002132f:	e8 de fe ff ff       	call   c0021212 <IOAPIC::write(int, int)>
c0021334:	83 c4 0c             	add    esp,0xc
c0021337:	90                   	nop
c0021338:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002133b:	c9                   	leave  
c002133c:	c3                   	ret    
c002133d:	66 90                	xchg   ax,ax
c002133f:	90                   	nop

c0021340 <APICTimer::close(int, int, void*)>:
c0021340:	b8 00 00 00 00       	mov    eax,0x0
c0021345:	c3                   	ret    
c0021346:	66 90                	xchg   ax,ax

c0021348 <apicTimerHandler(regs*, void*)>:
c0021348:	83 ec 0c             	sub    esp,0xc
c002134b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002134f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021351:	b8 10 27 00 00       	mov    eax,0x2710
c0021356:	ba 00 00 00 00       	mov    edx,0x0
c002135b:	f7 f1                	div    ecx
c002135d:	83 ec 0c             	sub    esp,0xc
c0021360:	50                   	push   eax
c0021361:	e8 9e 9d fe ff       	call   c000b104 <timerHandler(unsigned int)>
c0021366:	83 c4 10             	add    esp,0x10
c0021369:	90                   	nop
c002136a:	83 c4 0c             	add    esp,0xc
c002136d:	c3                   	ret    
c002136e:	66 90                	xchg   ax,ax

c0021370 <APICTimer::open(int, int, void*)>:
c0021370:	83 ec 0c             	sub    esp,0xc
c0021373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021377:	8b 00                	mov    eax,DWORD PTR [eax]
c0021379:	83 c0 24             	add    eax,0x24
c002137c:	8b 00                	mov    eax,DWORD PTR [eax]
c002137e:	83 ec 08             	sub    esp,0x8
c0021381:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021385:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021389:	ff d0                	call   eax
c002138b:	83 c4 10             	add    esp,0x10
c002138e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021392:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0021396:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002139c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00213a4:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00213aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00213ae:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00213b4:	83 ec 0c             	sub    esp,0xc
c00213b7:	51                   	push   ecx
c00213b8:	6a 01                	push   0x1
c00213ba:	68 48 13 02 c0       	push   0xc0021348
c00213bf:	52                   	push   edx
c00213c0:	50                   	push   eax
c00213c1:	e8 16 86 fe ff       	call   c00099dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00213c6:	83 c4 20             	add    esp,0x20
c00213c9:	89 c2                	mov    edx,eax
c00213cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213cf:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00213d5:	b8 00 00 00 00       	mov    eax,0x0
c00213da:	83 c4 0c             	add    esp,0xc
c00213dd:	c3                   	ret    
c00213de:	66 90                	xchg   ax,ax

c00213e0 <APICTimer::write(int)>:
c00213e0:	83 ec 0c             	sub    esp,0xc
c00213e3:	83 ec 0c             	sub    esp,0xc
c00213e6:	68 f0 67 02 c0       	push   0xc00267f0
c00213eb:	e8 3e ec fe ff       	call   c001002e <KePanic(char const*)>
c00213f0:	83 c4 10             	add    esp,0x10
c00213f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00213fb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021401:	90                   	nop
c0021402:	83 c4 0c             	add    esp,0xc
c0021405:	c3                   	ret    
c0021406:	66 90                	xchg   ax,ax

c0021408 <APICTimer::APICTimer()>:
c0021408:	83 ec 0c             	sub    esp,0xc
c002140b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002140f:	83 ec 08             	sub    esp,0x8
c0021412:	68 00 68 02 c0       	push   0xc0026800
c0021417:	50                   	push   eax
c0021418:	e8 1b 9c fe ff       	call   c000b038 <Timer::Timer(char const*)>
c002141d:	83 c4 10             	add    esp,0x10
c0021420:	ba 14 68 02 c0       	mov    edx,0xc0026814
c0021425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021429:	89 10                	mov    DWORD PTR [eax],edx
c002142b:	90                   	nop
c002142c:	83 c4 0c             	add    esp,0xc
c002142f:	c3                   	ret    

c0021430 <PIT::write(int)>:
c0021430:	83 ec 10             	sub    esp,0x10
c0021433:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021437:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002143b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021441:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021445:	a3 a4 04 03 c0       	mov    ds:0xc00304a4,eax
c002144a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002144f:	89 c2                	mov    edx,eax
c0021451:	c1 fa 1f             	sar    edx,0x1f
c0021454:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0021458:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002145c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0021463:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0021468:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002146c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0021471:	ee                   	out    dx,al
c0021472:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021476:	0f b6 c0             	movzx  eax,al
c0021479:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0021480:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0021484:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0021488:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002148d:	ee                   	out    dx,al
c002148e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021492:	c1 f8 08             	sar    eax,0x8
c0021495:	0f b6 c0             	movzx  eax,al
c0021498:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002149f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00214a3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00214a7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00214ac:	ee                   	out    dx,al
c00214ad:	90                   	nop
c00214ae:	83 c4 10             	add    esp,0x10
c00214b1:	c3                   	ret    
c00214b2:	66 90                	xchg   ax,ax

c00214b4 <pitHandler(regs*, void*)>:
c00214b4:	83 ec 0c             	sub    esp,0xc
c00214b7:	8b 0d a4 04 03 c0    	mov    ecx,DWORD PTR ds:0xc00304a4
c00214bd:	b8 10 27 00 00       	mov    eax,0x2710
c00214c2:	89 c2                	mov    edx,eax
c00214c4:	c1 fa 1f             	sar    edx,0x1f
c00214c7:	f7 f9                	idiv   ecx
c00214c9:	83 ec 0c             	sub    esp,0xc
c00214cc:	50                   	push   eax
c00214cd:	e8 32 9c fe ff       	call   c000b104 <timerHandler(unsigned int)>
c00214d2:	83 c4 10             	add    esp,0x10
c00214d5:	90                   	nop
c00214d6:	83 c4 0c             	add    esp,0xc
c00214d9:	c3                   	ret    
c00214da:	66 90                	xchg   ax,ax

c00214dc <PIT::open(int, int, void*)>:
c00214dc:	83 ec 0c             	sub    esp,0xc
c00214df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00214e5:	83 c0 24             	add    eax,0x24
c00214e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00214ea:	83 ec 08             	sub    esp,0x8
c00214ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00214f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00214f5:	ff d0                	call   eax
c00214f7:	83 c4 10             	add    esp,0x10
c00214fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214fe:	83 ec 0c             	sub    esp,0xc
c0021501:	6a 00                	push   0x0
c0021503:	6a 01                	push   0x1
c0021505:	68 b4 14 02 c0       	push   0xc00214b4
c002150a:	6a 00                	push   0x0
c002150c:	50                   	push   eax
c002150d:	e8 ca 84 fe ff       	call   c00099dc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021512:	83 c4 20             	add    esp,0x20
c0021515:	89 c2                	mov    edx,eax
c0021517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002151b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0021521:	b8 00 00 00 00       	mov    eax,0x0
c0021526:	83 c4 0c             	add    esp,0xc
c0021529:	c3                   	ret    
c002152a:	66 90                	xchg   ax,ax

c002152c <PIT::close(int, int, void*)>:
c002152c:	83 ec 0c             	sub    esp,0xc
c002152f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021533:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002153d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021541:	6a 01                	push   0x1
c0021543:	68 b4 14 02 c0       	push   0xc00214b4
c0021548:	6a 00                	push   0x0
c002154a:	50                   	push   eax
c002154b:	e8 c2 84 fe ff       	call   c0009a12 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0021550:	83 c4 10             	add    esp,0x10
c0021553:	b8 00 00 00 00       	mov    eax,0x0
c0021558:	83 c4 0c             	add    esp,0xc
c002155b:	c3                   	ret    

c002155c <PIT::PIT()>:
c002155c:	83 ec 0c             	sub    esp,0xc
c002155f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021563:	83 ec 08             	sub    esp,0x8
c0021566:	68 3c 68 02 c0       	push   0xc002683c
c002156b:	50                   	push   eax
c002156c:	e8 c7 9a fe ff       	call   c000b038 <Timer::Timer(char const*)>
c0021571:	83 c4 10             	add    esp,0x10
c0021574:	ba 64 68 02 c0       	mov    edx,0xc0026864
c0021579:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002157d:	89 10                	mov    DWORD PTR [eax],edx
c002157f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021583:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021589:	0f b6 d0             	movzx  edx,al
c002158c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021590:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0021597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002159b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00215a1:	0f b6 d0             	movzx  edx,al
c00215a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215a8:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00215ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00215b7:	8d 50 01             	lea    edx,[eax+0x1]
c00215ba:	88 d1                	mov    cl,dl
c00215bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00215c0:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c00215c6:	0f b6 d0             	movzx  edx,al
c00215c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215cd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00215d1:	83 e1 3f             	and    ecx,0x3f
c00215d4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00215d8:	90                   	nop
c00215d9:	83 c4 0c             	add    esp,0xc
c00215dc:	c3                   	ret    
c00215dd:	66 90                	xchg   ax,ax
c00215df:	90                   	nop

c00215e0 <avxDetect>:
c00215e0:	b8 01 00 00 00       	mov    eax,0x1
c00215e5:	0f a2                	cpuid  
c00215e7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c00215ed:	74 15                	je     c0021604 <avxDetect.noAVX>
c00215ef:	b8 01 00 00 00       	mov    eax,0x1
c00215f4:	0f a2                	cpuid  
c00215f6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c00215fc:	74 06                	je     c0021604 <avxDetect.noAVX>
c00215fe:	b8 01 00 00 00       	mov    eax,0x1
c0021603:	c3                   	ret    

c0021604 <avxDetect.noAVX>:
c0021604:	b8 00 00 00 00       	mov    eax,0x0
c0021609:	c3                   	ret    

c002160a <avxSave>:
c002160a:	53                   	push   ebx
c002160b:	52                   	push   edx
c002160c:	31 c0                	xor    eax,eax
c002160e:	48                   	dec    eax
c002160f:	89 c2                	mov    edx,eax
c0021611:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021615:	0f ae 23             	xsave  [ebx]
c0021618:	5a                   	pop    edx
c0021619:	5b                   	pop    ebx
c002161a:	c3                   	ret    

c002161b <avxLoad>:
c002161b:	53                   	push   ebx
c002161c:	52                   	push   edx
c002161d:	31 c0                	xor    eax,eax
c002161f:	48                   	dec    eax
c0021620:	89 c2                	mov    edx,eax
c0021622:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021626:	0f ae 2b             	xrstor [ebx]
c0021629:	5a                   	pop    edx
c002162a:	5b                   	pop    ebx
c002162b:	c3                   	ret    

c002162c <avxInit>:
c002162c:	e8 17 03 00 00       	call   c0021948 <sseInit>
c0021631:	50                   	push   eax
c0021632:	51                   	push   ecx
c0021633:	0f 20 e0             	mov    eax,cr4
c0021636:	0d 00 00 04 00       	or     eax,0x40000
c002163b:	0f 22 e0             	mov    cr4,eax
c002163e:	31 c9                	xor    ecx,ecx
c0021640:	0f 01 d0             	xgetbv 
c0021643:	0d 07 00 00 00       	or     eax,0x7
c0021648:	0f 01 d1             	xsetbv 
c002164b:	59                   	pop    ecx
c002164c:	58                   	pop    eax
c002164d:	c3                   	ret    

c002164e <avxClose>:
c002164e:	c3                   	ret    
c002164f:	90                   	nop

c0021650 <isr0>:
c0021650:	fa                   	cli    
c0021651:	68 00 00 00 00       	push   0x0
c0021656:	68 00 00 00 00       	push   0x0
c002165b:	e9 56 01 00 00       	jmp    c00217b6 <int_common_stub>

c0021660 <isr1>:
c0021660:	fa                   	cli    
c0021661:	6a 00                	push   0x0
c0021663:	6a 01                	push   0x1
c0021665:	e9 4c 01 00 00       	jmp    c00217b6 <int_common_stub>

c002166a <isr2>:
c002166a:	fa                   	cli    
c002166b:	6a 00                	push   0x0
c002166d:	6a 02                	push   0x2
c002166f:	e9 42 01 00 00       	jmp    c00217b6 <int_common_stub>

c0021674 <isr3>:
c0021674:	fa                   	cli    
c0021675:	6a 00                	push   0x0
c0021677:	6a 03                	push   0x3
c0021679:	e9 38 01 00 00       	jmp    c00217b6 <int_common_stub>

c002167e <isr4>:
c002167e:	fa                   	cli    
c002167f:	6a 00                	push   0x0
c0021681:	6a 04                	push   0x4
c0021683:	e9 2e 01 00 00       	jmp    c00217b6 <int_common_stub>

c0021688 <isr5>:
c0021688:	fa                   	cli    
c0021689:	6a 00                	push   0x0
c002168b:	6a 05                	push   0x5
c002168d:	e9 24 01 00 00       	jmp    c00217b6 <int_common_stub>

c0021692 <isr6>:
c0021692:	fa                   	cli    
c0021693:	6a 00                	push   0x0
c0021695:	6a 06                	push   0x6
c0021697:	e9 1a 01 00 00       	jmp    c00217b6 <int_common_stub>

c002169c <isr7>:
c002169c:	fa                   	cli    
c002169d:	6a 00                	push   0x0
c002169f:	6a 07                	push   0x7
c00216a1:	e9 10 01 00 00       	jmp    c00217b6 <int_common_stub>

c00216a6 <isr8>:
c00216a6:	fa                   	cli    
c00216a7:	6a 08                	push   0x8
c00216a9:	e9 08 01 00 00       	jmp    c00217b6 <int_common_stub>

c00216ae <isr9>:
c00216ae:	fa                   	cli    
c00216af:	6a 00                	push   0x0
c00216b1:	6a 09                	push   0x9
c00216b3:	e9 fe 00 00 00       	jmp    c00217b6 <int_common_stub>

c00216b8 <isr10>:
c00216b8:	fa                   	cli    
c00216b9:	6a 0a                	push   0xa
c00216bb:	e9 f6 00 00 00       	jmp    c00217b6 <int_common_stub>

c00216c0 <isr11>:
c00216c0:	fa                   	cli    
c00216c1:	6a 0b                	push   0xb
c00216c3:	e9 ee 00 00 00       	jmp    c00217b6 <int_common_stub>

c00216c8 <isr12>:
c00216c8:	fa                   	cli    
c00216c9:	6a 0c                	push   0xc
c00216cb:	e9 e6 00 00 00       	jmp    c00217b6 <int_common_stub>

c00216d0 <isr13>:
c00216d0:	fa                   	cli    
c00216d1:	6a 0d                	push   0xd
c00216d3:	53                   	push   ebx
c00216d4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00216d8:	81 fb 75 18 02 c0    	cmp    ebx,0xc0021875
c00216de:	5b                   	pop    ebx
c00216df:	0f 84 92 01 00 00    	je     c0021877 <finishSignal2>
c00216e5:	e9 cc 00 00 00       	jmp    c00217b6 <int_common_stub>

c00216ea <isr14>:
c00216ea:	fa                   	cli    
c00216eb:	6a 0e                	push   0xe
c00216ed:	e9 c4 00 00 00       	jmp    c00217b6 <int_common_stub>

c00216f2 <isr15>:
c00216f2:	fa                   	cli    
c00216f3:	6a 00                	push   0x0
c00216f5:	6a 0f                	push   0xf
c00216f7:	e9 ba 00 00 00       	jmp    c00217b6 <int_common_stub>

c00216fc <isr16>:
c00216fc:	fa                   	cli    
c00216fd:	6a 00                	push   0x0
c00216ff:	6a 10                	push   0x10
c0021701:	e9 b0 00 00 00       	jmp    c00217b6 <int_common_stub>

c0021706 <isr17>:
c0021706:	fa                   	cli    
c0021707:	6a 00                	push   0x0
c0021709:	6a 11                	push   0x11
c002170b:	e9 a6 00 00 00       	jmp    c00217b6 <int_common_stub>

c0021710 <isr18>:
c0021710:	fa                   	cli    
c0021711:	6a 00                	push   0x0
c0021713:	6a 12                	push   0x12
c0021715:	e9 9c 00 00 00       	jmp    c00217b6 <int_common_stub>

c002171a <irq3>:
c002171a:	fa                   	cli    
c002171b:	6a 00                	push   0x0
c002171d:	6a 23                	push   0x23
c002171f:	e9 92 00 00 00       	jmp    c00217b6 <int_common_stub>

c0021724 <irq4>:
c0021724:	fa                   	cli    
c0021725:	6a 00                	push   0x0
c0021727:	6a 24                	push   0x24
c0021729:	e9 88 00 00 00       	jmp    c00217b6 <int_common_stub>

c002172e <irq5>:
c002172e:	fa                   	cli    
c002172f:	6a 00                	push   0x0
c0021731:	6a 25                	push   0x25
c0021733:	e9 7e 00 00 00       	jmp    c00217b6 <int_common_stub>

c0021738 <irq6>:
c0021738:	fa                   	cli    
c0021739:	6a 00                	push   0x0
c002173b:	6a 26                	push   0x26
c002173d:	e9 74 00 00 00       	jmp    c00217b6 <int_common_stub>

c0021742 <irq7>:
c0021742:	fa                   	cli    
c0021743:	6a 00                	push   0x0
c0021745:	6a 27                	push   0x27
c0021747:	e9 6a 00 00 00       	jmp    c00217b6 <int_common_stub>

c002174c <irq8>:
c002174c:	fa                   	cli    
c002174d:	6a 00                	push   0x0
c002174f:	6a 28                	push   0x28
c0021751:	e9 60 00 00 00       	jmp    c00217b6 <int_common_stub>

c0021756 <irq9>:
c0021756:	fa                   	cli    
c0021757:	6a 00                	push   0x0
c0021759:	6a 29                	push   0x29
c002175b:	e9 56 00 00 00       	jmp    c00217b6 <int_common_stub>

c0021760 <irq10>:
c0021760:	fa                   	cli    
c0021761:	6a 00                	push   0x0
c0021763:	6a 2a                	push   0x2a
c0021765:	e9 4c 00 00 00       	jmp    c00217b6 <int_common_stub>

c002176a <irq11>:
c002176a:	fa                   	cli    
c002176b:	6a 00                	push   0x0
c002176d:	6a 2b                	push   0x2b
c002176f:	e9 42 00 00 00       	jmp    c00217b6 <int_common_stub>

c0021774 <irq12>:
c0021774:	fa                   	cli    
c0021775:	6a 00                	push   0x0
c0021777:	6a 2c                	push   0x2c
c0021779:	e9 38 00 00 00       	jmp    c00217b6 <int_common_stub>

c002177e <irq13>:
c002177e:	fa                   	cli    
c002177f:	6a 00                	push   0x0
c0021781:	6a 2d                	push   0x2d
c0021783:	e9 2e 00 00 00       	jmp    c00217b6 <int_common_stub>

c0021788 <irq14>:
c0021788:	fa                   	cli    
c0021789:	6a 00                	push   0x0
c002178b:	6a 2e                	push   0x2e
c002178d:	e9 24 00 00 00       	jmp    c00217b6 <int_common_stub>

c0021792 <irq15>:
c0021792:	fa                   	cli    
c0021793:	6a 00                	push   0x0
c0021795:	6a 2f                	push   0x2f
c0021797:	e9 1a 00 00 00       	jmp    c00217b6 <int_common_stub>

c002179c <irq1>:
c002179c:	fa                   	cli    
c002179d:	6a 00                	push   0x0
c002179f:	6a 21                	push   0x21
c00217a1:	eb 13                	jmp    c00217b6 <int_common_stub>

c00217a3 <irq2>:
c00217a3:	fa                   	cli    
c00217a4:	6a 00                	push   0x0
c00217a6:	6a 22                	push   0x22
c00217a8:	eb 0c                	jmp    c00217b6 <int_common_stub>

c00217aa <isr96>:
c00217aa:	6a 00                	push   0x0
c00217ac:	6a 60                	push   0x60
c00217ae:	fb                   	sti    
c00217af:	eb 05                	jmp    c00217b6 <int_common_stub>

c00217b1 <irq0>:
c00217b1:	fa                   	cli    
c00217b2:	6a 00                	push   0x0
c00217b4:	6a 20                	push   0x20

c00217b6 <int_common_stub>:
c00217b6:	60                   	pusha  
c00217b7:	1e                   	push   ds
c00217b8:	06                   	push   es
c00217b9:	0f a0                	push   fs
c00217bb:	0f a8                	push   gs
c00217bd:	66 b8 10 00          	mov    ax,0x10
c00217c1:	66 8e d8             	mov    ds,ax
c00217c4:	66 8e c0             	mov    es,ax
c00217c7:	66 8e e0             	mov    fs,ax
c00217ca:	66 8e e8             	mov    gs,ax
c00217cd:	54                   	push   esp
c00217ce:	fc                   	cld    
c00217cf:	e8 7c d2 fe ff       	call   c000ea50 <int_handler>
c00217d4:	81 c4 04 00 00 00    	add    esp,0x4
c00217da:	0f a9                	pop    gs
c00217dc:	0f a1                	pop    fs
c00217de:	07                   	pop    es
c00217df:	1f                   	pop    ds
c00217e0:	e8 76 fb fe ff       	call   c001135b <KiCheckSignalZ>
c00217e5:	85 c0                	test   eax,eax
c00217e7:	75 08                	jne    c00217f1 <doSignals>
c00217e9:	61                   	popa   
c00217ea:	81 c4 08 00 00 00    	add    esp,0x8
c00217f0:	cf                   	iret   

c00217f1 <doSignals>:
c00217f1:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c00217f6:	61                   	popa   
c00217f7:	53                   	push   ebx
c00217f8:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c00217fe:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0021801:	5b                   	pop    ebx
c0021802:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c0021807:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002180a:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002180d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0021810:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c0021813:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c0021816:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c0021819:	81 c4 08 00 00 00    	add    esp,0x8
c002181f:	5e                   	pop    esi
c0021820:	5b                   	pop    ebx
c0021821:	59                   	pop    ecx
c0021822:	5a                   	pop    edx
c0021823:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c0021826:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c0021829:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002182c:	52                   	push   edx
c002182d:	51                   	push   ecx
c002182e:	53                   	push   ebx
c002182f:	56                   	push   esi
c0021830:	81 ec 08 00 00 00    	sub    esp,0x8
c0021836:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c0021839:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002183c:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c002183f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021842:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021845:	60                   	pusha  
c0021846:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002184c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c002184f:	89 e3                	mov    ebx,esp
c0021851:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c0021854:	52                   	push   edx
c0021855:	68 75 18 02 c0       	push   0xc0021875
c002185a:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002185d:	89 dc                	mov    esp,ebx
c002185f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0021862:	68 23 00 00 00       	push   0x23
c0021867:	51                   	push   ecx
c0021868:	68 02 02 00 00       	push   0x202
c002186d:	68 1b 00 00 00       	push   0x1b
c0021872:	ff 36                	push   DWORD PTR [esi]
c0021874:	cf                   	iret   

c0021875 <finishSignal>:
c0021875:	cd 0f                	int    0xf

c0021877 <finishSignal2>:
c0021877:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002187d:	e8 65 fb fe ff       	call   c00113e7 <KiFinishSignalZ>
c0021882:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c0021888:	68 23 00 00 00       	push   0x23
c002188d:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0021890:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0021893:	68 1b 00 00 00       	push   0x1b
c0021898:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c002189b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002189e:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00218a1:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00218a4:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00218a7:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c00218aa:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c00218ad:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c00218b0:	cf                   	iret   
c00218b1:	90                   	nop
c00218b2:	90                   	nop
c00218b3:	90                   	nop

c00218b4 <irq16>:
c00218b4:	fa                   	cli    
c00218b5:	6a 00                	push   0x0
c00218b7:	6a 30                	push   0x30
c00218b9:	e9 f8 fe ff ff       	jmp    c00217b6 <int_common_stub>

c00218be <irq17>:
c00218be:	fa                   	cli    
c00218bf:	6a 00                	push   0x0
c00218c1:	6a 31                	push   0x31
c00218c3:	e9 ee fe ff ff       	jmp    c00217b6 <int_common_stub>

c00218c8 <irq18>:
c00218c8:	fa                   	cli    
c00218c9:	6a 00                	push   0x0
c00218cb:	6a 32                	push   0x32
c00218cd:	e9 e4 fe ff ff       	jmp    c00217b6 <int_common_stub>

c00218d2 <irq19>:
c00218d2:	fa                   	cli    
c00218d3:	6a 00                	push   0x0
c00218d5:	6a 33                	push   0x33
c00218d7:	e9 da fe ff ff       	jmp    c00217b6 <int_common_stub>

c00218dc <irq20>:
c00218dc:	fa                   	cli    
c00218dd:	6a 00                	push   0x0
c00218df:	6a 34                	push   0x34
c00218e1:	e9 d0 fe ff ff       	jmp    c00217b6 <int_common_stub>

c00218e6 <irq21>:
c00218e6:	fa                   	cli    
c00218e7:	6a 00                	push   0x0
c00218e9:	6a 35                	push   0x35
c00218eb:	e9 c6 fe ff ff       	jmp    c00217b6 <int_common_stub>

c00218f0 <irq22>:
c00218f0:	fa                   	cli    
c00218f1:	6a 00                	push   0x0
c00218f3:	6a 36                	push   0x36
c00218f5:	e9 bc fe ff ff       	jmp    c00217b6 <int_common_stub>

c00218fa <irq23>:
c00218fa:	fa                   	cli    
c00218fb:	6a 00                	push   0x0
c00218fd:	6a 37                	push   0x37
c00218ff:	e9 b2 fe ff ff       	jmp    c00217b6 <int_common_stub>
c0021904:	66 90                	xchg   ax,ax
c0021906:	66 90                	xchg   ax,ax
c0021908:	66 90                	xchg   ax,ax
c002190a:	66 90                	xchg   ax,ax
c002190c:	66 90                	xchg   ax,ax
c002190e:	66 90                	xchg   ax,ax

c0021910 <i386GetRDRAND>:
c0021910:	b9 64 00 00 00       	mov    ecx,0x64

c0021915 <retry>:
c0021915:	0f c7 f0             	rdrand eax
c0021918:	72 05                	jb     c002191f <retry.done>
c002191a:	e2 f9                	loop   c0021915 <retry>

c002191c <retry.fail>:
c002191c:	31 c0                	xor    eax,eax
c002191e:	c3                   	ret    

c002191f <retry.done>:
c002191f:	c3                   	ret    

c0021920 <sseDetect>:
c0021920:	b8 01 00 00 00       	mov    eax,0x1
c0021925:	0f a2                	cpuid  
c0021927:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002192d:	74 06                	je     c0021935 <sseDetect.noSSE>
c002192f:	b8 01 00 00 00       	mov    eax,0x1
c0021934:	c3                   	ret    

c0021935 <sseDetect.noSSE>:
c0021935:	31 c0                	xor    eax,eax
c0021937:	c3                   	ret    

c0021938 <sseSave>:
c0021938:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002193c:	0f ae 00             	fxsave [eax]
c002193f:	c3                   	ret    

c0021940 <sseLoad>:
c0021940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021944:	0f ae 08             	fxrstor [eax]
c0021947:	c3                   	ret    

c0021948 <sseInit>:
c0021948:	e8 48 00 00 00       	call   c0021995 <x87Init>
c002194d:	0f 20 e0             	mov    eax,cr4
c0021950:	66 0d 00 06          	or     ax,0x600
c0021954:	0f 22 e0             	mov    cr4,eax
c0021957:	c3                   	ret    

c0021958 <sseClose>:
c0021958:	c3                   	ret    
c0021959:	66 90                	xchg   ax,ax
c002195b:	66 90                	xchg   ax,ax
c002195d:	66 90                	xchg   ax,ax
c002195f:	90                   	nop

c0021960 <value_37F>:
c0021960:	7f 03                	jg     c0021965 <value_37A+0x1>

c0021962 <value_37E>:
c0021962:	7e 03                	jle    c0021967 <x87Detect+0x1>

c0021964 <value_37A>:
c0021964:	7a 03                	jp     c0021969 <x87Detect+0x3>

c0021966 <x87Detect>:
c0021966:	53                   	push   ebx
c0021967:	51                   	push   ecx
c0021968:	52                   	push   edx
c0021969:	b8 01 00 00 00       	mov    eax,0x1
c002196e:	0f a2                	cpuid  
c0021970:	f7 c2 01 00 00 00    	test   edx,0x1
c0021976:	74 06                	je     c002197e <x87Detect.nox87>
c0021978:	b8 01 00 00 00       	mov    eax,0x1
c002197d:	c3                   	ret    

c002197e <x87Detect.nox87>:
c002197e:	b8 00 00 00 00       	mov    eax,0x0
c0021983:	5a                   	pop    edx
c0021984:	59                   	pop    ecx
c0021985:	5b                   	pop    ebx
c0021986:	c3                   	ret    

c0021987 <x87Save>:
c0021987:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002198b:	dd 30                	fnsave [eax]
c002198d:	c3                   	ret    

c002198e <x87Load>:
c002198e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021992:	dd 20                	frstor [eax]
c0021994:	c3                   	ret    

c0021995 <x87Init>:
c0021995:	0f 20 c0             	mov    eax,cr0
c0021998:	66 25 fb ff          	and    ax,0xfffb
c002199c:	66 0d 22 00          	or     ax,0x22
c00219a0:	0f 22 c0             	mov    cr0,eax
c00219a3:	db e3                	fninit 
c00219a5:	0f 06                	clts   
c00219a7:	d9 2d 64 19 02 c0    	fldcw  WORD PTR ds:0xc0021964
c00219ad:	c3                   	ret    

c00219ae <x87Close>:
c00219ae:	c3                   	ret    
c00219af:	90                   	nop

c00219b0 <__do_global_ctors_aux>:
c00219b0:	a1 64 29 02 c0       	mov    eax,ds:0xc0022964
c00219b5:	83 f8 ff             	cmp    eax,0xffffffff
c00219b8:	74 1a                	je     c00219d4 <__do_global_ctors_aux+0x24>
c00219ba:	55                   	push   ebp
c00219bb:	89 e5                	mov    ebp,esp
c00219bd:	53                   	push   ebx
c00219be:	52                   	push   edx
c00219bf:	bb 64 29 02 c0       	mov    ebx,0xc0022964
c00219c4:	ff d0                	call   eax
c00219c6:	83 eb 04             	sub    ebx,0x4
c00219c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00219cb:	83 f8 ff             	cmp    eax,0xffffffff
c00219ce:	75 f4                	jne    c00219c4 <__do_global_ctors_aux+0x14>
c00219d0:	58                   	pop    eax
c00219d1:	5b                   	pop    ebx
c00219d2:	5d                   	pop    ebp
c00219d3:	c3                   	ret    
c00219d4:	c3                   	ret    
c00219d5:	66 90                	xchg   ax,ax
c00219d7:	90                   	nop

c00219d8 <__divdi3>:
c00219d8:	55                   	push   ebp
c00219d9:	57                   	push   edi
c00219da:	56                   	push   esi
c00219db:	53                   	push   ebx
c00219dc:	83 ec 1c             	sub    esp,0x1c
c00219df:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00219e3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00219e7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00219ea:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00219ee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00219f2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00219f6:	85 db                	test   ebx,ebx
c00219f8:	0f 88 8e 00 00 00    	js     c0021a8c <__divdi3+0xb4>
c00219fe:	89 dd                	mov    ebp,ebx
c0021a00:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021a08:	89 d3                	mov    ebx,edx
c0021a0a:	85 d2                	test   edx,edx
c0021a0c:	79 0d                	jns    c0021a1b <__divdi3+0x43>
c0021a0e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0021a12:	f7 d8                	neg    eax
c0021a14:	83 d2 00             	adc    edx,0x0
c0021a17:	f7 da                	neg    edx
c0021a19:	89 d3                	mov    ebx,edx
c0021a1b:	89 c7                	mov    edi,eax
c0021a1d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021a20:	85 db                	test   ebx,ebx
c0021a22:	75 48                	jne    c0021a6c <__divdi3+0x94>
c0021a24:	39 ef                	cmp    edi,ebp
c0021a26:	76 24                	jbe    c0021a4c <__divdi3+0x74>
c0021a28:	89 ea                	mov    edx,ebp
c0021a2a:	f7 f7                	div    edi
c0021a2c:	89 c1                	mov    ecx,eax
c0021a2e:	31 f6                	xor    esi,esi
c0021a30:	89 c8                	mov    eax,ecx
c0021a32:	89 f2                	mov    edx,esi
c0021a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021a38:	85 c9                	test   ecx,ecx
c0021a3a:	74 07                	je     c0021a43 <__divdi3+0x6b>
c0021a3c:	f7 d8                	neg    eax
c0021a3e:	83 d2 00             	adc    edx,0x0
c0021a41:	f7 da                	neg    edx
c0021a43:	83 c4 1c             	add    esp,0x1c
c0021a46:	5b                   	pop    ebx
c0021a47:	5e                   	pop    esi
c0021a48:	5f                   	pop    edi
c0021a49:	5d                   	pop    ebp
c0021a4a:	c3                   	ret    
c0021a4b:	90                   	nop
c0021a4c:	85 ff                	test   edi,edi
c0021a4e:	75 0b                	jne    c0021a5b <__divdi3+0x83>
c0021a50:	b8 01 00 00 00       	mov    eax,0x1
c0021a55:	31 d2                	xor    edx,edx
c0021a57:	f7 f3                	div    ebx
c0021a59:	89 c7                	mov    edi,eax
c0021a5b:	31 d2                	xor    edx,edx
c0021a5d:	89 e8                	mov    eax,ebp
c0021a5f:	f7 f7                	div    edi
c0021a61:	89 c6                	mov    esi,eax
c0021a63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021a66:	f7 f7                	div    edi
c0021a68:	89 c1                	mov    ecx,eax
c0021a6a:	eb c4                	jmp    c0021a30 <__divdi3+0x58>
c0021a6c:	39 eb                	cmp    ebx,ebp
c0021a6e:	77 3c                	ja     c0021aac <__divdi3+0xd4>
c0021a70:	0f bd f3             	bsr    esi,ebx
c0021a73:	83 f6 1f             	xor    esi,0x1f
c0021a76:	75 40                	jne    c0021ab8 <__divdi3+0xe0>
c0021a78:	39 eb                	cmp    ebx,ebp
c0021a7a:	72 09                	jb     c0021a85 <__divdi3+0xad>
c0021a7c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021a7f:	0f 87 97 00 00 00    	ja     c0021b1c <__divdi3+0x144>
c0021a85:	b9 01 00 00 00       	mov    ecx,0x1
c0021a8a:	eb a4                	jmp    c0021a30 <__divdi3+0x58>
c0021a8c:	f7 d9                	neg    ecx
c0021a8e:	83 d3 00             	adc    ebx,0x0
c0021a91:	f7 db                	neg    ebx
c0021a93:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021a96:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0021a9a:	89 dd                	mov    ebp,ebx
c0021a9c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0021aa4:	e9 5f ff ff ff       	jmp    c0021a08 <__divdi3+0x30>
c0021aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0021aac:	31 f6                	xor    esi,esi
c0021aae:	31 c9                	xor    ecx,ecx
c0021ab0:	e9 7b ff ff ff       	jmp    c0021a30 <__divdi3+0x58>
c0021ab5:	8d 76 00             	lea    esi,[esi+0x0]
c0021ab8:	b8 20 00 00 00       	mov    eax,0x20
c0021abd:	29 f0                	sub    eax,esi
c0021abf:	89 f1                	mov    ecx,esi
c0021ac1:	d3 e3                	shl    ebx,cl
c0021ac3:	89 fa                	mov    edx,edi
c0021ac5:	88 c1                	mov    cl,al
c0021ac7:	d3 ea                	shr    edx,cl
c0021ac9:	09 da                	or     edx,ebx
c0021acb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021acf:	89 f1                	mov    ecx,esi
c0021ad1:	d3 e7                	shl    edi,cl
c0021ad3:	89 eb                	mov    ebx,ebp
c0021ad5:	88 c1                	mov    cl,al
c0021ad7:	d3 eb                	shr    ebx,cl
c0021ad9:	89 f1                	mov    ecx,esi
c0021adb:	d3 e5                	shl    ebp,cl
c0021add:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0021ae0:	88 c1                	mov    cl,al
c0021ae2:	d3 ea                	shr    edx,cl
c0021ae4:	09 d5                	or     ebp,edx
c0021ae6:	89 e8                	mov    eax,ebp
c0021ae8:	89 da                	mov    edx,ebx
c0021aea:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0021aee:	89 d3                	mov    ebx,edx
c0021af0:	89 c5                	mov    ebp,eax
c0021af2:	f7 e7                	mul    edi
c0021af4:	39 d3                	cmp    ebx,edx
c0021af6:	72 18                	jb     c0021b10 <__divdi3+0x138>
c0021af8:	74 0a                	je     c0021b04 <__divdi3+0x12c>
c0021afa:	89 e9                	mov    ecx,ebp
c0021afc:	31 f6                	xor    esi,esi
c0021afe:	e9 2d ff ff ff       	jmp    c0021a30 <__divdi3+0x58>
c0021b03:	90                   	nop
c0021b04:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0021b07:	89 f1                	mov    ecx,esi
c0021b09:	d3 e7                	shl    edi,cl
c0021b0b:	39 c7                	cmp    edi,eax
c0021b0d:	73 eb                	jae    c0021afa <__divdi3+0x122>
c0021b0f:	90                   	nop
c0021b10:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0021b13:	31 f6                	xor    esi,esi
c0021b15:	e9 16 ff ff ff       	jmp    c0021a30 <__divdi3+0x58>
c0021b1a:	66 90                	xchg   ax,ax
c0021b1c:	31 c9                	xor    ecx,ecx
c0021b1e:	e9 0d ff ff ff       	jmp    c0021a30 <__divdi3+0x58>
c0021b23:	90                   	nop

c0021b24 <__moddi3>:
c0021b24:	55                   	push   ebp
c0021b25:	57                   	push   edi
c0021b26:	56                   	push   esi
c0021b27:	53                   	push   ebx
c0021b28:	83 ec 2c             	sub    esp,0x2c
c0021b2b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0021b2f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0021b33:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021b37:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0021b3b:	85 db                	test   ebx,ebx
c0021b3d:	0f 88 85 00 00 00    	js     c0021bc8 <__moddi3+0xa4>
c0021b43:	89 de                	mov    esi,ebx
c0021b45:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021b4d:	89 d7                	mov    edi,edx
c0021b4f:	85 d2                	test   edx,edx
c0021b51:	79 09                	jns    c0021b5c <__moddi3+0x38>
c0021b53:	f7 d8                	neg    eax
c0021b55:	83 d2 00             	adc    edx,0x0
c0021b58:	f7 da                	neg    edx
c0021b5a:	89 d7                	mov    edi,edx
c0021b5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021b60:	89 cd                	mov    ebp,ecx
c0021b62:	85 ff                	test   edi,edi
c0021b64:	75 52                	jne    c0021bb8 <__moddi3+0x94>
c0021b66:	89 c3                	mov    ebx,eax
c0021b68:	39 f0                	cmp    eax,esi
c0021b6a:	76 24                	jbe    c0021b90 <__moddi3+0x6c>
c0021b6c:	89 c8                	mov    eax,ecx
c0021b6e:	89 f2                	mov    edx,esi
c0021b70:	f7 f3                	div    ebx
c0021b72:	89 d6                	mov    esi,edx
c0021b74:	89 f0                	mov    eax,esi
c0021b76:	31 d2                	xor    edx,edx
c0021b78:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021b7c:	85 c9                	test   ecx,ecx
c0021b7e:	74 07                	je     c0021b87 <__moddi3+0x63>
c0021b80:	f7 d8                	neg    eax
c0021b82:	83 d2 00             	adc    edx,0x0
c0021b85:	f7 da                	neg    edx
c0021b87:	83 c4 2c             	add    esp,0x2c
c0021b8a:	5b                   	pop    ebx
c0021b8b:	5e                   	pop    esi
c0021b8c:	5f                   	pop    edi
c0021b8d:	5d                   	pop    ebp
c0021b8e:	c3                   	ret    
c0021b8f:	90                   	nop
c0021b90:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021b94:	85 db                	test   ebx,ebx
c0021b96:	75 0d                	jne    c0021ba5 <__moddi3+0x81>
c0021b98:	b8 01 00 00 00       	mov    eax,0x1
c0021b9d:	31 d2                	xor    edx,edx
c0021b9f:	f7 f7                	div    edi
c0021ba1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021ba5:	89 f0                	mov    eax,esi
c0021ba7:	31 d2                	xor    edx,edx
c0021ba9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021bad:	f7 f7                	div    edi
c0021baf:	89 e8                	mov    eax,ebp
c0021bb1:	f7 f7                	div    edi
c0021bb3:	89 d6                	mov    esi,edx
c0021bb5:	eb bd                	jmp    c0021b74 <__moddi3+0x50>
c0021bb7:	90                   	nop
c0021bb8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021bbc:	39 f7                	cmp    edi,esi
c0021bbe:	76 20                	jbe    c0021be0 <__moddi3+0xbc>
c0021bc0:	89 c8                	mov    eax,ecx
c0021bc2:	89 f2                	mov    edx,esi
c0021bc4:	eb b2                	jmp    c0021b78 <__moddi3+0x54>
c0021bc6:	66 90                	xchg   ax,ax
c0021bc8:	f7 d9                	neg    ecx
c0021bca:	83 d3 00             	adc    ebx,0x0
c0021bcd:	f7 db                	neg    ebx
c0021bcf:	89 de                	mov    esi,ebx
c0021bd1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0021bd9:	e9 6f ff ff ff       	jmp    c0021b4d <__moddi3+0x29>
c0021bde:	66 90                	xchg   ax,ax
c0021be0:	0f bd c7             	bsr    eax,edi
c0021be3:	83 f0 1f             	xor    eax,0x1f
c0021be6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021bea:	75 24                	jne    c0021c10 <__moddi3+0xec>
c0021bec:	39 f7                	cmp    edi,esi
c0021bee:	72 06                	jb     c0021bf6 <__moddi3+0xd2>
c0021bf0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0021bf4:	77 0c                	ja     c0021c02 <__moddi3+0xde>
c0021bf6:	89 e9                	mov    ecx,ebp
c0021bf8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0021bfc:	19 fe                	sbb    esi,edi
c0021bfe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021c02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021c06:	89 f2                	mov    edx,esi
c0021c08:	e9 6b ff ff ff       	jmp    c0021b78 <__moddi3+0x54>
c0021c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0021c10:	b8 20 00 00 00       	mov    eax,0x20
c0021c15:	89 c2                	mov    edx,eax
c0021c17:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0021c1b:	29 da                	sub    edx,ebx
c0021c1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0021c21:	88 d9                	mov    cl,bl
c0021c23:	d3 e7                	shl    edi,cl
c0021c25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021c29:	88 d1                	mov    cl,dl
c0021c2b:	d3 e8                	shr    eax,cl
c0021c2d:	09 c7                	or     edi,eax
c0021c2f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021c33:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021c37:	89 d8                	mov    eax,ebx
c0021c39:	88 d9                	mov    cl,bl
c0021c3b:	d3 e7                	shl    edi,cl
c0021c3d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021c41:	89 f3                	mov    ebx,esi
c0021c43:	88 d1                	mov    cl,dl
c0021c45:	d3 eb                	shr    ebx,cl
c0021c47:	89 c7                	mov    edi,eax
c0021c49:	88 c1                	mov    cl,al
c0021c4b:	d3 e6                	shl    esi,cl
c0021c4d:	89 e8                	mov    eax,ebp
c0021c4f:	88 d1                	mov    cl,dl
c0021c51:	d3 e8                	shr    eax,cl
c0021c53:	09 f0                	or     eax,esi
c0021c55:	89 f9                	mov    ecx,edi
c0021c57:	d3 e5                	shl    ebp,cl
c0021c59:	89 da                	mov    edx,ebx
c0021c5b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0021c5f:	89 d3                	mov    ebx,edx
c0021c61:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021c65:	89 c6                	mov    esi,eax
c0021c67:	89 d1                	mov    ecx,edx
c0021c69:	39 d3                	cmp    ebx,edx
c0021c6b:	72 27                	jb     c0021c94 <__moddi3+0x170>
c0021c6d:	74 21                	je     c0021c90 <__moddi3+0x16c>
c0021c6f:	29 f5                	sub    ebp,esi
c0021c71:	19 cb                	sbb    ebx,ecx
c0021c73:	89 de                	mov    esi,ebx
c0021c75:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0021c79:	d3 e6                	shl    esi,cl
c0021c7b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0021c7f:	89 f9                	mov    ecx,edi
c0021c81:	d3 ed                	shr    ebp,cl
c0021c83:	09 ee                	or     esi,ebp
c0021c85:	89 f0                	mov    eax,esi
c0021c87:	d3 eb                	shr    ebx,cl
c0021c89:	89 da                	mov    edx,ebx
c0021c8b:	e9 e8 fe ff ff       	jmp    c0021b78 <__moddi3+0x54>
c0021c90:	39 c5                	cmp    ebp,eax
c0021c92:	73 db                	jae    c0021c6f <__moddi3+0x14b>
c0021c94:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021c98:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0021c9c:	89 d1                	mov    ecx,edx
c0021c9e:	89 c6                	mov    esi,eax
c0021ca0:	eb cd                	jmp    c0021c6f <__moddi3+0x14b>
c0021ca2:	66 90                	xchg   ax,ax

c0021ca4 <__udivdi3>:
c0021ca4:	55                   	push   ebp
c0021ca5:	57                   	push   edi
c0021ca6:	56                   	push   esi
c0021ca7:	53                   	push   ebx
c0021ca8:	83 ec 1c             	sub    esp,0x1c
c0021cab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021caf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021cb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021cb7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021cbb:	85 d2                	test   edx,edx
c0021cbd:	75 41                	jne    c0021d00 <__udivdi3+0x5c>
c0021cbf:	39 f7                	cmp    edi,esi
c0021cc1:	76 15                	jbe    c0021cd8 <__udivdi3+0x34>
c0021cc3:	89 e8                	mov    eax,ebp
c0021cc5:	89 f2                	mov    edx,esi
c0021cc7:	f7 f7                	div    edi
c0021cc9:	31 db                	xor    ebx,ebx
c0021ccb:	89 da                	mov    edx,ebx
c0021ccd:	83 c4 1c             	add    esp,0x1c
c0021cd0:	5b                   	pop    ebx
c0021cd1:	5e                   	pop    esi
c0021cd2:	5f                   	pop    edi
c0021cd3:	5d                   	pop    ebp
c0021cd4:	c3                   	ret    
c0021cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0021cd8:	89 f9                	mov    ecx,edi
c0021cda:	85 ff                	test   edi,edi
c0021cdc:	75 0b                	jne    c0021ce9 <__udivdi3+0x45>
c0021cde:	b8 01 00 00 00       	mov    eax,0x1
c0021ce3:	31 d2                	xor    edx,edx
c0021ce5:	f7 f7                	div    edi
c0021ce7:	89 c1                	mov    ecx,eax
c0021ce9:	31 d2                	xor    edx,edx
c0021ceb:	89 f0                	mov    eax,esi
c0021ced:	f7 f1                	div    ecx
c0021cef:	89 c3                	mov    ebx,eax
c0021cf1:	89 e8                	mov    eax,ebp
c0021cf3:	f7 f1                	div    ecx
c0021cf5:	89 da                	mov    edx,ebx
c0021cf7:	83 c4 1c             	add    esp,0x1c
c0021cfa:	5b                   	pop    ebx
c0021cfb:	5e                   	pop    esi
c0021cfc:	5f                   	pop    edi
c0021cfd:	5d                   	pop    ebp
c0021cfe:	c3                   	ret    
c0021cff:	90                   	nop
c0021d00:	39 f2                	cmp    edx,esi
c0021d02:	77 1c                	ja     c0021d20 <__udivdi3+0x7c>
c0021d04:	0f bd da             	bsr    ebx,edx
c0021d07:	83 f3 1f             	xor    ebx,0x1f
c0021d0a:	75 24                	jne    c0021d30 <__udivdi3+0x8c>
c0021d0c:	39 f2                	cmp    edx,esi
c0021d0e:	72 08                	jb     c0021d18 <__udivdi3+0x74>
c0021d10:	39 ef                	cmp    edi,ebp
c0021d12:	0f 87 84 00 00 00    	ja     c0021d9c <__udivdi3+0xf8>
c0021d18:	b8 01 00 00 00       	mov    eax,0x1
c0021d1d:	eb ac                	jmp    c0021ccb <__udivdi3+0x27>
c0021d1f:	90                   	nop
c0021d20:	31 db                	xor    ebx,ebx
c0021d22:	31 c0                	xor    eax,eax
c0021d24:	89 da                	mov    edx,ebx
c0021d26:	83 c4 1c             	add    esp,0x1c
c0021d29:	5b                   	pop    ebx
c0021d2a:	5e                   	pop    esi
c0021d2b:	5f                   	pop    edi
c0021d2c:	5d                   	pop    ebp
c0021d2d:	c3                   	ret    
c0021d2e:	66 90                	xchg   ax,ax
c0021d30:	b8 20 00 00 00       	mov    eax,0x20
c0021d35:	29 d8                	sub    eax,ebx
c0021d37:	88 d9                	mov    cl,bl
c0021d39:	d3 e2                	shl    edx,cl
c0021d3b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021d3f:	89 fa                	mov    edx,edi
c0021d41:	88 c1                	mov    cl,al
c0021d43:	d3 ea                	shr    edx,cl
c0021d45:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021d49:	09 d1                	or     ecx,edx
c0021d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021d4f:	88 d9                	mov    cl,bl
c0021d51:	d3 e7                	shl    edi,cl
c0021d53:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021d57:	89 f7                	mov    edi,esi
c0021d59:	88 c1                	mov    cl,al
c0021d5b:	d3 ef                	shr    edi,cl
c0021d5d:	88 d9                	mov    cl,bl
c0021d5f:	d3 e6                	shl    esi,cl
c0021d61:	89 ea                	mov    edx,ebp
c0021d63:	88 c1                	mov    cl,al
c0021d65:	d3 ea                	shr    edx,cl
c0021d67:	09 d6                	or     esi,edx
c0021d69:	89 f0                	mov    eax,esi
c0021d6b:	89 fa                	mov    edx,edi
c0021d6d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021d71:	89 d7                	mov    edi,edx
c0021d73:	89 c6                	mov    esi,eax
c0021d75:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021d79:	39 d7                	cmp    edi,edx
c0021d7b:	72 13                	jb     c0021d90 <__udivdi3+0xec>
c0021d7d:	74 09                	je     c0021d88 <__udivdi3+0xe4>
c0021d7f:	89 f0                	mov    eax,esi
c0021d81:	31 db                	xor    ebx,ebx
c0021d83:	e9 43 ff ff ff       	jmp    c0021ccb <__udivdi3+0x27>
c0021d88:	88 d9                	mov    cl,bl
c0021d8a:	d3 e5                	shl    ebp,cl
c0021d8c:	39 c5                	cmp    ebp,eax
c0021d8e:	73 ef                	jae    c0021d7f <__udivdi3+0xdb>
c0021d90:	8d 46 ff             	lea    eax,[esi-0x1]
c0021d93:	31 db                	xor    ebx,ebx
c0021d95:	e9 31 ff ff ff       	jmp    c0021ccb <__udivdi3+0x27>
c0021d9a:	66 90                	xchg   ax,ax
c0021d9c:	31 c0                	xor    eax,eax
c0021d9e:	e9 28 ff ff ff       	jmp    c0021ccb <__udivdi3+0x27>
c0021da3:	90                   	nop

c0021da4 <__umoddi3>:
c0021da4:	55                   	push   ebp
c0021da5:	57                   	push   edi
c0021da6:	56                   	push   esi
c0021da7:	53                   	push   ebx
c0021da8:	83 ec 1c             	sub    esp,0x1c
c0021dab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021daf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021db3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021db7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021dbb:	89 da                	mov    edx,ebx
c0021dbd:	85 c0                	test   eax,eax
c0021dbf:	75 37                	jne    c0021df8 <__umoddi3+0x54>
c0021dc1:	39 df                	cmp    edi,ebx
c0021dc3:	76 13                	jbe    c0021dd8 <__umoddi3+0x34>
c0021dc5:	89 f0                	mov    eax,esi
c0021dc7:	f7 f7                	div    edi
c0021dc9:	89 d0                	mov    eax,edx
c0021dcb:	31 d2                	xor    edx,edx
c0021dcd:	83 c4 1c             	add    esp,0x1c
c0021dd0:	5b                   	pop    ebx
c0021dd1:	5e                   	pop    esi
c0021dd2:	5f                   	pop    edi
c0021dd3:	5d                   	pop    ebp
c0021dd4:	c3                   	ret    
c0021dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0021dd8:	89 fd                	mov    ebp,edi
c0021dda:	85 ff                	test   edi,edi
c0021ddc:	75 0b                	jne    c0021de9 <__umoddi3+0x45>
c0021dde:	b8 01 00 00 00       	mov    eax,0x1
c0021de3:	31 d2                	xor    edx,edx
c0021de5:	f7 f7                	div    edi
c0021de7:	89 c5                	mov    ebp,eax
c0021de9:	89 d8                	mov    eax,ebx
c0021deb:	31 d2                	xor    edx,edx
c0021ded:	f7 f5                	div    ebp
c0021def:	89 f0                	mov    eax,esi
c0021df1:	f7 f5                	div    ebp
c0021df3:	89 d0                	mov    eax,edx
c0021df5:	eb d4                	jmp    c0021dcb <__umoddi3+0x27>
c0021df7:	90                   	nop
c0021df8:	89 f1                	mov    ecx,esi
c0021dfa:	39 d8                	cmp    eax,ebx
c0021dfc:	76 0a                	jbe    c0021e08 <__umoddi3+0x64>
c0021dfe:	89 f0                	mov    eax,esi
c0021e00:	83 c4 1c             	add    esp,0x1c
c0021e03:	5b                   	pop    ebx
c0021e04:	5e                   	pop    esi
c0021e05:	5f                   	pop    edi
c0021e06:	5d                   	pop    ebp
c0021e07:	c3                   	ret    
c0021e08:	0f bd e8             	bsr    ebp,eax
c0021e0b:	83 f5 1f             	xor    ebp,0x1f
c0021e0e:	75 1c                	jne    c0021e2c <__umoddi3+0x88>
c0021e10:	39 d8                	cmp    eax,ebx
c0021e12:	72 04                	jb     c0021e18 <__umoddi3+0x74>
c0021e14:	39 f7                	cmp    edi,esi
c0021e16:	77 08                	ja     c0021e20 <__umoddi3+0x7c>
c0021e18:	89 da                	mov    edx,ebx
c0021e1a:	29 fe                	sub    esi,edi
c0021e1c:	19 c2                	sbb    edx,eax
c0021e1e:	89 f1                	mov    ecx,esi
c0021e20:	89 c8                	mov    eax,ecx
c0021e22:	83 c4 1c             	add    esp,0x1c
c0021e25:	5b                   	pop    ebx
c0021e26:	5e                   	pop    esi
c0021e27:	5f                   	pop    edi
c0021e28:	5d                   	pop    ebp
c0021e29:	c3                   	ret    
c0021e2a:	66 90                	xchg   ax,ax
c0021e2c:	ba 20 00 00 00       	mov    edx,0x20
c0021e31:	29 ea                	sub    edx,ebp
c0021e33:	89 e9                	mov    ecx,ebp
c0021e35:	d3 e0                	shl    eax,cl
c0021e37:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021e3b:	89 f8                	mov    eax,edi
c0021e3d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021e41:	88 d1                	mov    cl,dl
c0021e43:	d3 e8                	shr    eax,cl
c0021e45:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021e49:	09 c1                	or     ecx,eax
c0021e4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021e4f:	89 e9                	mov    ecx,ebp
c0021e51:	d3 e7                	shl    edi,cl
c0021e53:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021e57:	89 d8                	mov    eax,ebx
c0021e59:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021e5d:	88 d1                	mov    cl,dl
c0021e5f:	d3 e8                	shr    eax,cl
c0021e61:	89 c7                	mov    edi,eax
c0021e63:	89 e9                	mov    ecx,ebp
c0021e65:	d3 e3                	shl    ebx,cl
c0021e67:	89 f0                	mov    eax,esi
c0021e69:	88 d1                	mov    cl,dl
c0021e6b:	d3 e8                	shr    eax,cl
c0021e6d:	09 d8                	or     eax,ebx
c0021e6f:	89 e9                	mov    ecx,ebp
c0021e71:	d3 e6                	shl    esi,cl
c0021e73:	89 f3                	mov    ebx,esi
c0021e75:	89 fa                	mov    edx,edi
c0021e77:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021e7b:	89 d1                	mov    ecx,edx
c0021e7d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021e81:	89 c6                	mov    esi,eax
c0021e83:	89 d7                	mov    edi,edx
c0021e85:	39 d1                	cmp    ecx,edx
c0021e87:	72 27                	jb     c0021eb0 <__umoddi3+0x10c>
c0021e89:	74 21                	je     c0021eac <__umoddi3+0x108>
c0021e8b:	89 ca                	mov    edx,ecx
c0021e8d:	29 f3                	sub    ebx,esi
c0021e8f:	19 fa                	sbb    edx,edi
c0021e91:	89 d0                	mov    eax,edx
c0021e93:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0021e97:	d3 e0                	shl    eax,cl
c0021e99:	89 e9                	mov    ecx,ebp
c0021e9b:	d3 eb                	shr    ebx,cl
c0021e9d:	09 d8                	or     eax,ebx
c0021e9f:	d3 ea                	shr    edx,cl
c0021ea1:	83 c4 1c             	add    esp,0x1c
c0021ea4:	5b                   	pop    ebx
c0021ea5:	5e                   	pop    esi
c0021ea6:	5f                   	pop    edi
c0021ea7:	5d                   	pop    ebp
c0021ea8:	c3                   	ret    
c0021ea9:	8d 76 00             	lea    esi,[esi+0x0]
c0021eac:	39 c3                	cmp    ebx,eax
c0021eae:	73 db                	jae    c0021e8b <__umoddi3+0xe7>
c0021eb0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021eb4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0021eb8:	89 d7                	mov    edi,edx
c0021eba:	89 c6                	mov    esi,eax
c0021ebc:	eb cd                	jmp    c0021e8b <__umoddi3+0xe7>

Disassembly of section .init:

c0021ebe <_init>:
c0021ebe:	55                   	push   ebp
c0021ebf:	89 e5                	mov    ebp,esp
c0021ec1:	e8 2e e2 fd ff       	call   c00000f4 <frame_dummy>
c0021ec6:	e8 e5 fa ff ff       	call   c00219b0 <__do_global_ctors_aux>
c0021ecb:	5d                   	pop    ebp
c0021ecc:	c3                   	ret    

Disassembly of section .fini:

c0021ecd <_fini>:
c0021ecd:	55                   	push   ebp
c0021ece:	89 e5                	mov    ebp,esp
c0021ed0:	e8 af e1 fd ff       	call   c0000084 <__do_global_dtors_aux>
c0021ed5:	5d                   	pop    ebp
c0021ed6:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0021ed8 <DriverlessDevice::~DriverlessDevice()>:
c0021ed8:	ba 3c 39 02 c0       	mov    edx,0xc002393c
c0021edd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ee1:	89 10                	mov    DWORD PTR [eax],edx
c0021ee3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ee7:	50                   	push   eax
c0021ee8:	e8 45 7a fe ff       	call   c0009932 <Device::~Device()>
c0021eed:	83 c4 04             	add    esp,0x4
c0021ef0:	90                   	nop
c0021ef1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0021ef2 <DriverlessDevice::~DriverlessDevice()>:
c0021ef2:	83 ec 0c             	sub    esp,0xc
c0021ef5:	83 ec 0c             	sub    esp,0xc
c0021ef8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021efc:	e8 d7 ff ff ff       	call   c0021ed8 <DriverlessDevice::~DriverlessDevice()>
c0021f01:	83 c4 10             	add    esp,0x10
c0021f04:	83 ec 08             	sub    esp,0x8
c0021f07:	68 58 01 00 00       	push   0x158
c0021f0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f10:	e8 46 b4 fe ff       	call   c000d35b <operator delete(void*, unsigned long)>
c0021f15:	83 c4 10             	add    esp,0x10
c0021f18:	83 c4 0c             	add    esp,0xc
c0021f1b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0021f1c <LinkedList<Device>::addElement(Device*)>:
c0021f1c:	83 ec 0c             	sub    esp,0xc
c0021f1f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021f24:	75 10                	jne    c0021f36 <LinkedList<Device>::addElement(Device*)+0x1a>
c0021f26:	83 ec 0c             	sub    esp,0xc
c0021f29:	68 d0 38 02 c0       	push   0xc00238d0
c0021f2e:	e8 fb e0 fe ff       	call   c001002e <KePanic(char const*)>
c0021f33:	83 c4 10             	add    esp,0x10
c0021f36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f3c:	85 c0                	test   eax,eax
c0021f3e:	74 3a                	je     c0021f7a <LinkedList<Device>::addElement(Device*)+0x5e>
c0021f40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021f47:	85 c0                	test   eax,eax
c0021f49:	74 2f                	je     c0021f7a <LinkedList<Device>::addElement(Device*)+0x5e>
c0021f4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f4f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021f52:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021f56:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0021f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f60:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021f64:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021f67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021f6e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021f78:	eb 68                	jmp    c0021fe2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021f7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f80:	85 c0                	test   eax,eax
c0021f82:	75 4e                	jne    c0021fd2 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021f84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021f8b:	85 c0                	test   eax,eax
c0021f8d:	75 43                	jne    c0021fd2 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021f8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f93:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021f97:	89 10                	mov    DWORD PTR [eax],edx
c0021f99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f9d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021fa1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fa8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021fab:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021fb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fb9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021fbc:	85 c0                	test   eax,eax
c0021fbe:	74 22                	je     c0021fe2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021fc0:	83 ec 0c             	sub    esp,0xc
c0021fc3:	68 f2 38 02 c0       	push   0xc00238f2
c0021fc8:	e8 61 e0 fe ff       	call   c001002e <KePanic(char const*)>
c0021fcd:	83 c4 10             	add    esp,0x10
c0021fd0:	eb 10                	jmp    c0021fe2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021fd2:	83 ec 0c             	sub    esp,0xc
c0021fd5:	68 fc 38 02 c0       	push   0xc00238fc
c0021fda:	e8 4f e0 fe ff       	call   c001002e <KePanic(char const*)>
c0021fdf:	83 c4 10             	add    esp,0x10
c0021fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fe6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021fe9:	8d 50 01             	lea    edx,[eax+0x1]
c0021fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ff0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021ff3:	90                   	nop
c0021ff4:	83 c4 0c             	add    esp,0xc
c0021ff7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0021ff8 <LinkedList<Device>::LinkedList()>:
c0021ff8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ffc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022002:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022006:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002200d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022011:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022018:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002201c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022022:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022026:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002202d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022031:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022038:	90                   	nop
c0022039:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002203c <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002203c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022040:	8b 00                	mov    eax,DWORD PTR [eax]
c0022042:	85 c0                	test   eax,eax
c0022044:	75 0e                	jne    c0022054 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022046:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002204a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002204d:	85 c0                	test   eax,eax
c002204f:	75 03                	jne    c0022054 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022051:	b0 01                	mov    al,0x1
c0022053:	c3                   	ret    
c0022054:	b0 00                	mov    al,0x0
c0022056:	90                   	nop
c0022057:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0022058 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0022058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002205c:	8b 00                	mov    eax,DWORD PTR [eax]
c002205e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0022060 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0022060:	83 ec 0c             	sub    esp,0xc
c0022063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022067:	8b 00                	mov    eax,DWORD PTR [eax]
c0022069:	85 c0                	test   eax,eax
c002206b:	75 17                	jne    c0022084 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002206d:	83 ec 0c             	sub    esp,0xc
c0022070:	68 6c 3b 02 c0       	push   0xc0023b6c
c0022075:	e8 b4 df fe ff       	call   c001002e <KePanic(char const*)>
c002207a:	83 c4 10             	add    esp,0x10
c002207d:	e9 96 00 00 00       	jmp    c0022118 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0022082:	66 90                	xchg   ax,ax
c0022084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022088:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002208b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002208e:	85 c0                	test   eax,eax
c0022090:	0f 95 c0             	setne  al
c0022093:	0f b6 c0             	movzx  eax,al
c0022096:	85 c0                	test   eax,eax
c0022098:	74 12                	je     c00220ac <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002209a:	83 ec 0c             	sub    esp,0xc
c002209d:	68 b7 3b 02 c0       	push   0xc0023bb7
c00220a2:	e8 87 df fe ff       	call   c001002e <KePanic(char const*)>
c00220a7:	83 c4 10             	add    esp,0x10
c00220aa:	66 90                	xchg   ax,ax
c00220ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00220b2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00220b5:	85 c0                	test   eax,eax
c00220b7:	0f 94 c0             	sete   al
c00220ba:	0f b6 c0             	movzx  eax,al
c00220bd:	85 c0                	test   eax,eax
c00220bf:	74 33                	je     c00220f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c00220c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220c5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00220cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220cf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00220d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00220dd:	83 f8 01             	cmp    eax,0x1
c00220e0:	74 22                	je     c0022104 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c00220e2:	83 ec 0c             	sub    esp,0xc
c00220e5:	68 90 3b 02 c0       	push   0xc0023b90
c00220ea:	e8 3f df fe ff       	call   c001002e <KePanic(char const*)>
c00220ef:	83 c4 10             	add    esp,0x10
c00220f2:	eb 10                	jmp    c0022104 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c00220f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00220fa:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00220fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022101:	89 10                	mov    DWORD PTR [eax],edx
c0022103:	90                   	nop
c0022104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022108:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002210b:	8d 50 ff             	lea    edx,[eax-0x1]
c002210e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022112:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022115:	8d 76 00             	lea    esi,[esi+0x0]
c0022118:	83 c4 0c             	add    esp,0xc
c002211b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002211c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002211c:	83 ec 0c             	sub    esp,0xc
c002211f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022124:	75 12                	jne    c0022138 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0022126:	83 ec 0c             	sub    esp,0xc
c0022129:	68 d0 38 02 c0       	push   0xc00238d0
c002212e:	e8 fb de fe ff       	call   c001002e <KePanic(char const*)>
c0022133:	83 c4 10             	add    esp,0x10
c0022136:	66 90                	xchg   ax,ax
c0022138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002213c:	8b 00                	mov    eax,DWORD PTR [eax]
c002213e:	85 c0                	test   eax,eax
c0022140:	74 36                	je     c0022178 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022146:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022149:	85 c0                	test   eax,eax
c002214b:	74 2b                	je     c0022178 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002214d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022151:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022154:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022158:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002215b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002215f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022163:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002216a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002216d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022174:	eb 6a                	jmp    c00221e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022176:	66 90                	xchg   ax,ax
c0022178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002217c:	8b 00                	mov    eax,DWORD PTR [eax]
c002217e:	85 c0                	test   eax,eax
c0022180:	75 4e                	jne    c00221d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022186:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022189:	85 c0                	test   eax,eax
c002218b:	75 43                	jne    c00221d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002218d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022191:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022195:	89 10                	mov    DWORD PTR [eax],edx
c0022197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002219b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002219f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00221a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00221a9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00221b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00221b7:	85 c0                	test   eax,eax
c00221b9:	74 25                	je     c00221e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00221bb:	83 ec 0c             	sub    esp,0xc
c00221be:	68 f2 38 02 c0       	push   0xc00238f2
c00221c3:	e8 66 de fe ff       	call   c001002e <KePanic(char const*)>
c00221c8:	83 c4 10             	add    esp,0x10
c00221cb:	eb 13                	jmp    c00221e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00221cd:	8d 76 00             	lea    esi,[esi+0x0]
c00221d0:	83 ec 0c             	sub    esp,0xc
c00221d3:	68 fc 38 02 c0       	push   0xc00238fc
c00221d8:	e8 51 de fe ff       	call   c001002e <KePanic(char const*)>
c00221dd:	83 c4 10             	add    esp,0x10
c00221e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00221e7:	8d 50 01             	lea    edx,[eax+0x1]
c00221ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221ee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00221f1:	90                   	nop
c00221f2:	83 c4 0c             	add    esp,0xc
c00221f5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00221f8 <ACPI::~ACPI()>:
c00221f8:	83 ec 0c             	sub    esp,0xc
c00221fb:	ba cc 3f 02 c0       	mov    edx,0xc0023fcc
c0022200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022204:	89 10                	mov    DWORD PTR [eax],edx
c0022206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002220a:	83 ec 0c             	sub    esp,0xc
c002220d:	50                   	push   eax
c002220e:	e8 1f 77 fe ff       	call   c0009932 <Device::~Device()>
c0022213:	83 c4 10             	add    esp,0x10
c0022216:	90                   	nop
c0022217:	83 c4 0c             	add    esp,0xc
c002221a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002221c <ACPI::~ACPI()>:
c002221c:	83 ec 0c             	sub    esp,0xc
c002221f:	83 ec 0c             	sub    esp,0xc
c0022222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022226:	e8 cd ff ff ff       	call   c00221f8 <ACPI::~ACPI()>
c002222b:	83 c4 10             	add    esp,0x10
c002222e:	83 ec 08             	sub    esp,0x8
c0022231:	68 64 12 00 00       	push   0x1264
c0022236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002223a:	e8 1c b1 fe ff       	call   c000d35b <operator delete(void*, unsigned long)>
c002223f:	83 c4 10             	add    esp,0x10
c0022242:	83 c4 0c             	add    esp,0xc
c0022245:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0022248 <LinkedList<Device>::~LinkedList()>:
c0022248:	90                   	nop
c0022249:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002224c <LinkedList<Device>::isEmpty()>:
c002224c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022250:	8b 00                	mov    eax,DWORD PTR [eax]
c0022252:	85 c0                	test   eax,eax
c0022254:	75 0e                	jne    c0022264 <LinkedList<Device>::isEmpty()+0x18>
c0022256:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002225a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002225d:	85 c0                	test   eax,eax
c002225f:	75 03                	jne    c0022264 <LinkedList<Device>::isEmpty()+0x18>
c0022261:	b0 01                	mov    al,0x1
c0022263:	c3                   	ret    
c0022264:	b0 00                	mov    al,0x0
c0022266:	90                   	nop
c0022267:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0022268 <LinkedList<Device>::getFirstElement()>:
c0022268:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002226c:	8b 00                	mov    eax,DWORD PTR [eax]
c002226e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0022270 <LinkedList<Device>::removeFirst()>:
c0022270:	83 ec 0c             	sub    esp,0xc
c0022273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022277:	8b 00                	mov    eax,DWORD PTR [eax]
c0022279:	85 c0                	test   eax,eax
c002227b:	75 17                	jne    c0022294 <LinkedList<Device>::removeFirst()+0x24>
c002227d:	83 ec 0c             	sub    esp,0xc
c0022280:	68 6c 3b 02 c0       	push   0xc0023b6c
c0022285:	e8 a4 dd fe ff       	call   c001002e <KePanic(char const*)>
c002228a:	83 c4 10             	add    esp,0x10
c002228d:	e9 92 00 00 00       	jmp    c0022324 <LinkedList<Device>::removeFirst()+0xb4>
c0022292:	66 90                	xchg   ax,ax
c0022294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022298:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002229b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00222a1:	85 c0                	test   eax,eax
c00222a3:	74 13                	je     c00222b8 <LinkedList<Device>::removeFirst()+0x48>
c00222a5:	83 ec 0c             	sub    esp,0xc
c00222a8:	68 b7 3b 02 c0       	push   0xc0023bb7
c00222ad:	e8 7c dd fe ff       	call   c001002e <KePanic(char const*)>
c00222b2:	83 c4 10             	add    esp,0x10
c00222b5:	8d 76 00             	lea    esi,[esi+0x0]
c00222b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00222be:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00222c4:	85 c0                	test   eax,eax
c00222c6:	75 34                	jne    c00222fc <LinkedList<Device>::removeFirst()+0x8c>
c00222c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00222d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222d6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00222dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222e1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00222e4:	83 f8 01             	cmp    eax,0x1
c00222e7:	74 27                	je     c0022310 <LinkedList<Device>::removeFirst()+0xa0>
c00222e9:	83 ec 0c             	sub    esp,0xc
c00222ec:	68 90 3b 02 c0       	push   0xc0023b90
c00222f1:	e8 38 dd fe ff       	call   c001002e <KePanic(char const*)>
c00222f6:	83 c4 10             	add    esp,0x10
c00222f9:	eb 15                	jmp    c0022310 <LinkedList<Device>::removeFirst()+0xa0>
c00222fb:	90                   	nop
c00222fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022300:	8b 00                	mov    eax,DWORD PTR [eax]
c0022302:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0022308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002230c:	89 10                	mov    DWORD PTR [eax],edx
c002230e:	66 90                	xchg   ax,ax
c0022310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022314:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022317:	8d 50 ff             	lea    edx,[eax-0x1]
c002231a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002231e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022321:	8d 76 00             	lea    esi,[esi+0x0]
c0022324:	83 c4 0c             	add    esp,0xc
c0022327:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0022328 <Computer::~Computer()>:
c0022328:	83 ec 0c             	sub    esp,0xc
c002232b:	ba 7c 42 02 c0       	mov    edx,0xc002427c
c0022330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022334:	89 10                	mov    DWORD PTR [eax],edx
c0022336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002233a:	83 ec 0c             	sub    esp,0xc
c002233d:	50                   	push   eax
c002233e:	e8 ef 75 fe ff       	call   c0009932 <Device::~Device()>
c0022343:	83 c4 10             	add    esp,0x10
c0022346:	90                   	nop
c0022347:	83 c4 0c             	add    esp,0xc
c002234a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002234c <Computer::~Computer()>:
c002234c:	83 ec 0c             	sub    esp,0xc
c002234f:	83 ec 0c             	sub    esp,0xc
c0022352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022356:	e8 cd ff ff ff       	call   c0022328 <Computer::~Computer()>
c002235b:	83 c4 10             	add    esp,0x10
c002235e:	83 ec 08             	sub    esp,0x8
c0022361:	68 6c 01 00 00       	push   0x16c
c0022366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002236a:	e8 ec af fe ff       	call   c000d35b <operator delete(void*, unsigned long)>
c002236f:	83 c4 10             	add    esp,0x10
c0022372:	83 c4 0c             	add    esp,0xc
c0022375:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0022376 <idleCommon()>:
c0022376:	83 ec 0c             	sub    esp,0xc
c0022379:	fa                   	cli    
c002237a:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c0022380:	e8 bb 4e ff ff       	call   c0017240 <schedule()>
c0022385:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c002238c:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c0022393:	75 01                	jne    c0022396 <idleCommon()+0x20>
c0022395:	fb                   	sti    
c0022396:	83 c4 0c             	add    esp,0xc
c0022399:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002239a <LinkedList<UnixFile>::~LinkedList()>:
c002239a:	90                   	nop
c002239b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002239c <LinkedList<UnixFile>::LinkedList()>:
c002239c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00223a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223aa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00223b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223b5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00223bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223c0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00223c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223ca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00223d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223d5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00223dc:	90                   	nop
c00223dd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00223de <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00223de:	83 ec 0c             	sub    esp,0xc
c00223e1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00223e6:	75 10                	jne    c00223f8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00223e8:	83 ec 0c             	sub    esp,0xc
c00223eb:	68 d0 38 02 c0       	push   0xc00238d0
c00223f0:	e8 39 dc fe ff       	call   c001002e <KePanic(char const*)>
c00223f5:	83 c4 10             	add    esp,0x10
c00223f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00223fe:	85 c0                	test   eax,eax
c0022400:	74 34                	je     c0022436 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022406:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022409:	85 c0                	test   eax,eax
c002240b:	74 29                	je     c0022436 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002240d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022411:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022414:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022418:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002241b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002241f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022423:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002242a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002242d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022434:	eb 65                	jmp    c002249b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002243a:	8b 00                	mov    eax,DWORD PTR [eax]
c002243c:	85 c0                	test   eax,eax
c002243e:	75 4b                	jne    c002248b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0022440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022444:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022447:	85 c0                	test   eax,eax
c0022449:	75 40                	jne    c002248b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002244b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002244f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022453:	89 10                	mov    DWORD PTR [eax],edx
c0022455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022459:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002245d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022464:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022467:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002246e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022472:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022475:	85 c0                	test   eax,eax
c0022477:	74 22                	je     c002249b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022479:	83 ec 0c             	sub    esp,0xc
c002247c:	68 f2 38 02 c0       	push   0xc00238f2
c0022481:	e8 a8 db fe ff       	call   c001002e <KePanic(char const*)>
c0022486:	83 c4 10             	add    esp,0x10
c0022489:	eb 10                	jmp    c002249b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002248b:	83 ec 0c             	sub    esp,0xc
c002248e:	68 fc 38 02 c0       	push   0xc00238fc
c0022493:	e8 96 db fe ff       	call   c001002e <KePanic(char const*)>
c0022498:	83 c4 10             	add    esp,0x10
c002249b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002249f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00224a2:	8d 50 01             	lea    edx,[eax+0x1]
c00224a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224a9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00224ac:	90                   	nop
c00224ad:	83 c4 0c             	add    esp,0xc
c00224b0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00224b2 <LinkedList<UnixFile>::getFirstElement()>:
c00224b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00224b8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00224ba <LinkedList<UnixFile>::removeFirst()>:
c00224ba:	83 ec 0c             	sub    esp,0xc
c00224bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00224c3:	85 c0                	test   eax,eax
c00224c5:	75 12                	jne    c00224d9 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00224c7:	83 ec 0c             	sub    esp,0xc
c00224ca:	68 6c 3b 02 c0       	push   0xc0023b6c
c00224cf:	e8 5a db fe ff       	call   c001002e <KePanic(char const*)>
c00224d4:	83 c4 10             	add    esp,0x10
c00224d7:	eb 7e                	jmp    c0022557 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00224d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224dd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00224e0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00224e3:	85 c0                	test   eax,eax
c00224e5:	74 10                	je     c00224f7 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00224e7:	83 ec 0c             	sub    esp,0xc
c00224ea:	68 b7 3b 02 c0       	push   0xc0023bb7
c00224ef:	e8 3a db fe ff       	call   c001002e <KePanic(char const*)>
c00224f4:	83 c4 10             	add    esp,0x10
c00224f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00224fd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022500:	85 c0                	test   eax,eax
c0022502:	75 33                	jne    c0022537 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0022504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022508:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002250e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022512:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022519:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002251d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022520:	83 f8 01             	cmp    eax,0x1
c0022523:	74 21                	je     c0022546 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022525:	83 ec 0c             	sub    esp,0xc
c0022528:	68 90 3b 02 c0       	push   0xc0023b90
c002252d:	e8 fc da fe ff       	call   c001002e <KePanic(char const*)>
c0022532:	83 c4 10             	add    esp,0x10
c0022535:	eb 0f                	jmp    c0022546 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002253b:	8b 00                	mov    eax,DWORD PTR [eax]
c002253d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0022540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022544:	89 10                	mov    DWORD PTR [eax],edx
c0022546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002254a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002254d:	8d 50 ff             	lea    edx,[eax-0x1]
c0022550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022554:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022557:	83 c4 0c             	add    esp,0xc
c002255a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002255c <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002255c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022560:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022563:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0022564 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0022564:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022568:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002256b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002256c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002256c:	90                   	nop
c002256d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0022570 <ThreadControlBlock::ThreadControlBlock()>:
c0022570:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022574:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002257b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002257f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0022586:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002258a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0022591:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022595:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002259c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00225a0:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c00225a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00225ab:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00225af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00225b3:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00225b7:	90                   	nop
c00225b8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00225bc <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00225bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00225c0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00225c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00225ca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00225d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00225d5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00225dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00225e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00225e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00225ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00225f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00225f5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00225fc:	90                   	nop
c00225fd:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00225fe <CPU::~CPU()>:
c00225fe:	83 ec 0c             	sub    esp,0xc
c0022601:	ba 54 5d 02 c0       	mov    edx,0xc0025d54
c0022606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002260a:	89 10                	mov    DWORD PTR [eax],edx
c002260c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022610:	83 ec 0c             	sub    esp,0xc
c0022613:	50                   	push   eax
c0022614:	e8 19 73 fe ff       	call   c0009932 <Device::~Device()>
c0022619:	83 c4 10             	add    esp,0x10
c002261c:	90                   	nop
c002261d:	83 c4 0c             	add    esp,0xc
c0022620:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0022622 <CPU::~CPU()>:
c0022622:	83 ec 0c             	sub    esp,0xc
c0022625:	83 ec 0c             	sub    esp,0xc
c0022628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002262c:	e8 cd ff ff ff       	call   c00225fe <CPU::~CPU()>
c0022631:	83 c4 10             	add    esp,0x10
c0022634:	83 ec 08             	sub    esp,0x8
c0022637:	68 78 11 00 00       	push   0x1178
c002263c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022640:	e8 16 ad fe ff       	call   c000d35b <operator delete(void*, unsigned long)>
c0022645:	83 c4 10             	add    esp,0x10
c0022648:	83 c4 0c             	add    esp,0xc
c002264b:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002264c <PCI::~PCI()>:
c002264c:	83 ec 0c             	sub    esp,0xc
c002264f:	ba b8 62 02 c0       	mov    edx,0xc00262b8
c0022654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022658:	89 10                	mov    DWORD PTR [eax],edx
c002265a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002265e:	83 ec 0c             	sub    esp,0xc
c0022661:	50                   	push   eax
c0022662:	e8 11 63 fe ff       	call   c0008978 <Bus::~Bus()>
c0022667:	83 c4 10             	add    esp,0x10
c002266a:	90                   	nop
c002266b:	83 c4 0c             	add    esp,0xc
c002266e:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0022670 <PCI::~PCI()>:
c0022670:	83 ec 0c             	sub    esp,0xc
c0022673:	83 ec 0c             	sub    esp,0xc
c0022676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002267a:	e8 cd ff ff ff       	call   c002264c <PCI::~PCI()>
c002267f:	83 c4 10             	add    esp,0x10
c0022682:	83 ec 08             	sub    esp,0x8
c0022685:	68 5c 01 00 00       	push   0x15c
c002268a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002268e:	e8 c8 ac fe ff       	call   c000d35b <operator delete(void*, unsigned long)>
c0022693:	83 c4 10             	add    esp,0x10
c0022696:	83 c4 0c             	add    esp,0xc
c0022699:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002269a <IDE::~IDE()>:
c002269a:	83 ec 0c             	sub    esp,0xc
c002269d:	ba 08 64 02 c0       	mov    edx,0xc0026408
c00226a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226a6:	89 10                	mov    DWORD PTR [eax],edx
c00226a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226ac:	83 ec 0c             	sub    esp,0xc
c00226af:	50                   	push   eax
c00226b0:	e8 0b 77 fe ff       	call   c0009dc0 <HardDiskController::~HardDiskController()>
c00226b5:	83 c4 10             	add    esp,0x10
c00226b8:	90                   	nop
c00226b9:	83 c4 0c             	add    esp,0xc
c00226bc:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00226be <IDE::~IDE()>:
c00226be:	83 ec 0c             	sub    esp,0xc
c00226c1:	83 ec 0c             	sub    esp,0xc
c00226c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226c8:	e8 cd ff ff ff       	call   c002269a <IDE::~IDE()>
c00226cd:	83 c4 10             	add    esp,0x10
c00226d0:	83 ec 08             	sub    esp,0x8
c00226d3:	68 70 02 00 00       	push   0x270
c00226d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226dc:	e8 7a ac fe ff       	call   c000d35b <operator delete(void*, unsigned long)>
c00226e1:	83 c4 10             	add    esp,0x10
c00226e4:	83 c4 0c             	add    esp,0xc
c00226e7:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00226e8 <SATABus::~SATABus()>:
c00226e8:	83 ec 0c             	sub    esp,0xc
c00226eb:	ba 58 64 02 c0       	mov    edx,0xc0026458
c00226f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226f4:	89 10                	mov    DWORD PTR [eax],edx
c00226f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226fa:	83 ec 0c             	sub    esp,0xc
c00226fd:	50                   	push   eax
c00226fe:	e8 bd 76 fe ff       	call   c0009dc0 <HardDiskController::~HardDiskController()>
c0022703:	83 c4 10             	add    esp,0x10
c0022706:	90                   	nop
c0022707:	83 c4 0c             	add    esp,0xc
c002270a:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002270c <SATABus::~SATABus()>:
c002270c:	83 ec 0c             	sub    esp,0xc
c002270f:	83 ec 0c             	sub    esp,0xc
c0022712:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022716:	e8 cd ff ff ff       	call   c00226e8 <SATABus::~SATABus()>
c002271b:	83 c4 10             	add    esp,0x10
c002271e:	83 ec 08             	sub    esp,0x8
c0022721:	68 64 01 00 00       	push   0x164
c0022726:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002272a:	e8 2c ac fe ff       	call   c000d35b <operator delete(void*, unsigned long)>
c002272f:	83 c4 10             	add    esp,0x10
c0022732:	83 c4 0c             	add    esp,0xc
c0022735:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0022736 <ATA::~ATA()>:
c0022736:	83 ec 0c             	sub    esp,0xc
c0022739:	ba 40 65 02 c0       	mov    edx,0xc0026540
c002273e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022742:	89 10                	mov    DWORD PTR [eax],edx
c0022744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022748:	83 ec 0c             	sub    esp,0xc
c002274b:	50                   	push   eax
c002274c:	e8 51 77 fe ff       	call   c0009ea2 <PhysicalDisk::~PhysicalDisk()>
c0022751:	83 c4 10             	add    esp,0x10
c0022754:	90                   	nop
c0022755:	83 c4 0c             	add    esp,0xc
c0022758:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002275a <ATA::~ATA()>:
c002275a:	83 ec 0c             	sub    esp,0xc
c002275d:	83 ec 0c             	sub    esp,0xc
c0022760:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022764:	e8 cd ff ff ff       	call   c0022736 <ATA::~ATA()>
c0022769:	83 c4 10             	add    esp,0x10
c002276c:	83 ec 08             	sub    esp,0x8
c002276f:	68 8c 01 00 00       	push   0x18c
c0022774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022778:	e8 de ab fe ff       	call   c000d35b <operator delete(void*, unsigned long)>
c002277d:	83 c4 10             	add    esp,0x10
c0022780:	83 c4 0c             	add    esp,0xc
c0022783:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0022784 <ATAPI::~ATAPI()>:
c0022784:	83 ec 0c             	sub    esp,0xc
c0022787:	ba 88 65 02 c0       	mov    edx,0xc0026588
c002278c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022790:	89 10                	mov    DWORD PTR [eax],edx
c0022792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022796:	83 ec 0c             	sub    esp,0xc
c0022799:	50                   	push   eax
c002279a:	e8 03 77 fe ff       	call   c0009ea2 <PhysicalDisk::~PhysicalDisk()>
c002279f:	83 c4 10             	add    esp,0x10
c00227a2:	90                   	nop
c00227a3:	83 c4 0c             	add    esp,0xc
c00227a6:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00227a8 <ATAPI::~ATAPI()>:
c00227a8:	83 ec 0c             	sub    esp,0xc
c00227ab:	83 ec 0c             	sub    esp,0xc
c00227ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00227b2:	e8 cd ff ff ff       	call   c0022784 <ATAPI::~ATAPI()>
c00227b7:	83 c4 10             	add    esp,0x10
c00227ba:	83 ec 08             	sub    esp,0x8
c00227bd:	68 84 01 00 00       	push   0x184
c00227c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00227c6:	e8 90 ab fe ff       	call   c000d35b <operator delete(void*, unsigned long)>
c00227cb:	83 c4 10             	add    esp,0x10
c00227ce:	83 c4 0c             	add    esp,0xc
c00227d1:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00227d2 <SATA::~SATA()>:
c00227d2:	83 ec 0c             	sub    esp,0xc
c00227d5:	ba 48 66 02 c0       	mov    edx,0xc0026648
c00227da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227de:	89 10                	mov    DWORD PTR [eax],edx
c00227e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227e4:	83 ec 0c             	sub    esp,0xc
c00227e7:	50                   	push   eax
c00227e8:	e8 b5 76 fe ff       	call   c0009ea2 <PhysicalDisk::~PhysicalDisk()>
c00227ed:	83 c4 10             	add    esp,0x10
c00227f0:	90                   	nop
c00227f1:	83 c4 0c             	add    esp,0xc
c00227f4:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00227f6 <SATA::~SATA()>:
c00227f6:	83 ec 0c             	sub    esp,0xc
c00227f9:	83 ec 0c             	sub    esp,0xc
c00227fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022800:	e8 cd ff ff ff       	call   c00227d2 <SATA::~SATA()>
c0022805:	83 c4 10             	add    esp,0x10
c0022808:	83 ec 08             	sub    esp,0x8
c002280b:	68 7c 01 00 00       	push   0x17c
c0022810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022814:	e8 42 ab fe ff       	call   c000d35b <operator delete(void*, unsigned long)>
c0022819:	83 c4 10             	add    esp,0x10
c002281c:	83 c4 0c             	add    esp,0xc
c002281f:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0022820 <SATAPI::~SATAPI()>:
c0022820:	83 ec 0c             	sub    esp,0xc
c0022823:	ba 6c 67 02 c0       	mov    edx,0xc002676c
c0022828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002282c:	89 10                	mov    DWORD PTR [eax],edx
c002282e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022832:	83 ec 0c             	sub    esp,0xc
c0022835:	50                   	push   eax
c0022836:	e8 67 76 fe ff       	call   c0009ea2 <PhysicalDisk::~PhysicalDisk()>
c002283b:	83 c4 10             	add    esp,0x10
c002283e:	90                   	nop
c002283f:	83 c4 0c             	add    esp,0xc
c0022842:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0022844 <SATAPI::~SATAPI()>:
c0022844:	83 ec 0c             	sub    esp,0xc
c0022847:	83 ec 0c             	sub    esp,0xc
c002284a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002284e:	e8 cd ff ff ff       	call   c0022820 <SATAPI::~SATAPI()>
c0022853:	83 c4 10             	add    esp,0x10
c0022856:	83 ec 08             	sub    esp,0x8
c0022859:	68 84 01 00 00       	push   0x184
c002285e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022862:	e8 f4 aa fe ff       	call   c000d35b <operator delete(void*, unsigned long)>
c0022867:	83 c4 10             	add    esp,0x10
c002286a:	83 c4 0c             	add    esp,0xc
c002286d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002286e <IOAPIC::~IOAPIC()>:
c002286e:	83 ec 0c             	sub    esp,0xc
c0022871:	ba cc 67 02 c0       	mov    edx,0xc00267cc
c0022876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002287a:	89 10                	mov    DWORD PTR [eax],edx
c002287c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022880:	83 ec 0c             	sub    esp,0xc
c0022883:	50                   	push   eax
c0022884:	e8 a9 70 fe ff       	call   c0009932 <Device::~Device()>
c0022889:	83 c4 10             	add    esp,0x10
c002288c:	90                   	nop
c002288d:	83 c4 0c             	add    esp,0xc
c0022890:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0022892 <IOAPIC::~IOAPIC()>:
c0022892:	83 ec 0c             	sub    esp,0xc
c0022895:	83 ec 0c             	sub    esp,0xc
c0022898:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002289c:	e8 cd ff ff ff       	call   c002286e <IOAPIC::~IOAPIC()>
c00228a1:	83 c4 10             	add    esp,0x10
c00228a4:	83 ec 08             	sub    esp,0x8
c00228a7:	68 68 01 00 00       	push   0x168
c00228ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228b0:	e8 a6 aa fe ff       	call   c000d35b <operator delete(void*, unsigned long)>
c00228b5:	83 c4 10             	add    esp,0x10
c00228b8:	83 c4 0c             	add    esp,0xc
c00228bb:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00228bc <APICTimer::~APICTimer()>:
c00228bc:	83 ec 0c             	sub    esp,0xc
c00228bf:	ba 14 68 02 c0       	mov    edx,0xc0026814
c00228c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228c8:	89 10                	mov    DWORD PTR [eax],edx
c00228ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228ce:	83 ec 0c             	sub    esp,0xc
c00228d1:	50                   	push   eax
c00228d2:	e8 99 87 fe ff       	call   c000b070 <Timer::~Timer()>
c00228d7:	83 c4 10             	add    esp,0x10
c00228da:	90                   	nop
c00228db:	83 c4 0c             	add    esp,0xc
c00228de:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00228e0 <APICTimer::~APICTimer()>:
c00228e0:	83 ec 0c             	sub    esp,0xc
c00228e3:	83 ec 0c             	sub    esp,0xc
c00228e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228ea:	e8 cd ff ff ff       	call   c00228bc <APICTimer::~APICTimer()>
c00228ef:	83 c4 10             	add    esp,0x10
c00228f2:	83 ec 08             	sub    esp,0x8
c00228f5:	68 60 01 00 00       	push   0x160
c00228fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228fe:	e8 58 aa fe ff       	call   c000d35b <operator delete(void*, unsigned long)>
c0022903:	83 c4 10             	add    esp,0x10
c0022906:	83 c4 0c             	add    esp,0xc
c0022909:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002290c <PIT::~PIT()>:
c002290c:	83 ec 0c             	sub    esp,0xc
c002290f:	ba 64 68 02 c0       	mov    edx,0xc0026864
c0022914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022918:	89 10                	mov    DWORD PTR [eax],edx
c002291a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002291e:	83 ec 0c             	sub    esp,0xc
c0022921:	50                   	push   eax
c0022922:	e8 49 87 fe ff       	call   c000b070 <Timer::~Timer()>
c0022927:	83 c4 10             	add    esp,0x10
c002292a:	90                   	nop
c002292b:	83 c4 0c             	add    esp,0xc
c002292e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0022930 <PIT::~PIT()>:
c0022930:	83 ec 0c             	sub    esp,0xc
c0022933:	83 ec 0c             	sub    esp,0xc
c0022936:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002293a:	e8 cd ff ff ff       	call   c002290c <PIT::~PIT()>
c002293f:	83 c4 10             	add    esp,0x10
c0022942:	83 ec 08             	sub    esp,0x8
c0022945:	68 5c 01 00 00       	push   0x15c
c002294a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002294e:	e8 08 aa fe ff       	call   c000d35b <operator delete(void*, unsigned long)>
c0022953:	83 c4 10             	add    esp,0x10
c0022956:	83 c4 0c             	add    esp,0xc
c0022959:	c3                   	ret    

Disassembly of section userkernel:

c0028000 <KiDefaultSignalHandlerAbort(int)>:
c0028000:	57                   	push   edi
c0028001:	b9 07 00 00 00       	mov    ecx,0x7
c0028006:	56                   	push   esi
c0028007:	be 67 46 02 c0       	mov    esi,0xc0024667
c002800c:	83 ec 24             	sub    esp,0x24
c002800f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0028013:	fc                   	cld    
c0028014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0028016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002801a:	50                   	push   eax
c002801b:	6a 00                	push   0x0
c002801d:	6a 38                	push   0x38
c002801f:	6a 01                	push   0x1
c0028021:	e8 2c 00 00 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0028026:	83 c4 34             	add    esp,0x34
c0028029:	5e                   	pop    esi
c002802a:	5f                   	pop    edi
c002802b:	c3                   	ret    

c002802c <KiDefaultSignalHandlerTerminate(int)>:
c002802c:	57                   	push   edi
c002802d:	b9 08 00 00 00       	mov    ecx,0x8
c0028032:	56                   	push   esi
c0028033:	be 83 46 02 c0       	mov    esi,0xc0024683
c0028038:	83 ec 24             	sub    esp,0x24
c002803b:	89 e7                	mov    edi,esp
c002803d:	fc                   	cld    
c002803e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0028040:	54                   	push   esp
c0028041:	6a 00                	push   0x0
c0028043:	6a 37                	push   0x37
c0028045:	6a 01                	push   0x1
c0028047:	e8 06 00 00 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002804c:	83 c4 34             	add    esp,0x34
c002804f:	5e                   	pop    esi
c0028050:	5f                   	pop    edi
c0028051:	c3                   	ret    

c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0028052:	53                   	push   ebx
c0028053:	83 ec 10             	sub    esp,0x10
c0028056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002805a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002805e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0028062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0028066:	cd 60                	int    0x60
c0028068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002806c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028078:	83 c4 10             	add    esp,0x10
c002807b:	5b                   	pop    ebx
c002807c:	c3                   	ret    

Disassembly of section align_previous:

c0029000 <DO_NOT_DELETE()>:
c0029000:	c3                   	ret    
