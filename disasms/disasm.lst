
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 aa fe 00 00       	call   c000feca <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 08 72 02 c0       	mov    eax,0xc0027208
c0000025:	3d 08 72 02 c0       	cmp    eax,0xc0027208
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 08 72 02 c0       	push   0xc0027208
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 08 72 02 c0       	mov    eax,0xc0027208
c0000051:	2d 08 72 02 c0       	sub    eax,0xc0027208
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 08 72 02 c0       	push   0xc0027208
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 90 02 c0 00 	cmp    BYTE PTR ds:0xc00290c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 00 2a 02 c0       	mov    ebx,0xc0022a00
c0000097:	81 eb fc 29 02 c0    	sub    ebx,0xc00229fc
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be fc 29 02 c0       	mov    esi,0xc00229fc
c00000a6:	a1 c4 90 02 c0       	mov    eax,ds:0xc00290c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 90 02 c0       	mov    ds:0xc00290c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 90 02 c0       	mov    eax,ds:0xc00290c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 08 72 02 c0       	push   0xc0027208
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 90 02 c0 01 	mov    BYTE PTR ds:0xc00290c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 90 02 c0       	push   0xc00290c8
c0000108:	68 08 72 02 c0       	push   0xc0027208
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 d3 66 01 00       	call   c0016980 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 3a 46 01 00       	call   c00148ff <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 b1 66 01 00       	call   c0016980 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 12 6c 01 00       	call   c0016f00 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 81 71 01 00       	call   c0017478 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 e0 f0 02 c0 	lgdtd  ds:0xc002f0e0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 62 ef 00 00       	jmp    c000f2e1 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 90 02 c0       	mov    ds:0xc00290e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 90 02 c0    	mov    DWORD PTR ds:0xc00290e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 90 02 c0    	mov    ebx,DWORD PTR ds:0xc00290e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 20 2a 02 c0 02 	test   BYTE PTR [edx-0x3ffdd5e0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 20 2a 02 c0 01 	test   BYTE PTR [edx-0x3ffdd5e0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 20 2a 02 c0 08 	test   BYTE PTR [edx-0x3ffdd5e0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 20 2a 02 c0 04 	test   BYTE PTR [ecx-0x3ffdd5e0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 20 2a 02 c0 01 	test   BYTE PTR [edx-0x3ffdd5e0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d5a:	85 c9                	test   ecx,ecx
c0000d5c:	0f 84 01 01 00 00    	je     c0000e63 <dlfree+0x110>
c0000d62:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d65:	8b 1d 00 91 02 c0    	mov    ebx,DWORD PTR ds:0xc0029100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c3                	cmp    ebx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 cb 03             	or     ebx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 1d 00 91 02 c0    	mov    DWORD PTR ds:0xc0029100,ebx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 1c 85 04 91 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd6efc]
c0000d8d:	89 19                	mov    DWORD PTR [ecx],ebx
c0000d8f:	89 14 85 04 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6efc],edx
c0000d96:	e9 c8 00 00 00       	jmp    c0000e63 <dlfree+0x110>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 cb 01             	or     ebx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 1d 00 91 02 c0    	mov    DWORD PTR ds:0xc0029100,ebx
c0000db0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000db3:	83 e3 fc             	and    ebx,0xfffffffc
c0000db6:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000dbf:	29 ca                	sub    edx,ecx
c0000dc1:	01 c8                	add    eax,ecx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dc9:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dcc:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000dcf:	39 35 2c 91 02 c0    	cmp    DWORD PTR ds:0xc002912c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000ddb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000dde:	80 e1 01             	and    cl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000de9:	01 d8                	add    eax,ebx
c0000deb:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dee:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000df1:	8b 0d 3c 91 02 c0    	mov    ecx,DWORD PTR ds:0xc002913c
c0000df7:	c7 42 0c 34 91 02 c0 	mov    DWORD PTR [edx+0xc],0xc0029134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 91 02 c0    	mov    DWORD PTR ds:0xc002913c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 d8                	add    eax,ebx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 91 02 c0    	mov    DWORD PTR ds:0xc002912c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 35                	jbe    c0000e63 <dlfree+0x110>
c0000e2e:	f6 05 00 91 02 c0 02 	test   BYTE PTR ds:0xc0029100,0x2
c0000e35:	74 2c                	je     c0000e63 <dlfree+0x110>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e47:	01 c8                	add    eax,ecx
c0000e49:	53                   	push   ebx
c0000e4a:	29 ca                	sub    edx,ecx
c0000e4c:	53                   	push   ebx
c0000e4d:	ff 0d 50 94 02 c0    	dec    DWORD PTR ds:0xc0029450
c0000e53:	50                   	push   eax
c0000e54:	29 05 64 94 02 c0    	sub    DWORD PTR ds:0xc0029464,eax
c0000e5a:	52                   	push   edx
c0000e5b:	e8 ad ec 00 00       	call   c000fb0d <munmap>
c0000e60:	83 c4 10             	add    esp,0x10
c0000e63:	5b                   	pop    ebx
c0000e64:	5e                   	pop    esi
c0000e65:	5f                   	pop    edi
c0000e66:	c3                   	ret    

c0000e67 <sYSMALLOc>:
c0000e67:	55                   	push   ebp
c0000e68:	57                   	push   edi
c0000e69:	56                   	push   esi
c0000e6a:	53                   	push   ebx
c0000e6b:	89 d3                	mov    ebx,edx
c0000e6d:	83 ec 2c             	sub    esp,0x2c
c0000e70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e74:	8b aa 5c 03 00 00    	mov    ebp,DWORD PTR [edx+0x35c]
c0000e7a:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e7d:	8d 45 ff             	lea    eax,[ebp-0x1]
c0000e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e84:	74 1f                	je     c0000ea5 <sYSMALLOc+0x3e>
c0000e86:	89 d0                	mov    eax,edx
c0000e88:	e8 df fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e8d:	83 ec 0c             	sub    esp,0xc
c0000e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000e94:	83 e8 07             	sub    eax,0x7
c0000e97:	50                   	push   eax
c0000e98:	e8 7d 03 00 00       	call   c000121a <dlmalloc>
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	e9 6d 03 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0000ea5:	f7 dd                	neg    ebp
c0000ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000eab:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0000eaf:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000eb5:	0f 87 be 00 00 00    	ja     c0000f79 <sYSMALLOc+0x112>
c0000ebb:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ec1:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000ec7:	0f 8d ac 00 00 00    	jge    c0000f79 <sYSMALLOc+0x112>
c0000ecd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0000ed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ed5:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000ed9:	21 ee                	and    esi,ebp
c0000edb:	39 fe                	cmp    esi,edi
c0000edd:	0f 86 96 00 00 00    	jbe    c0000f79 <sYSMALLOc+0x112>
c0000ee3:	52                   	push   edx
c0000ee4:	52                   	push   edx
c0000ee5:	6a 00                	push   0x0
c0000ee7:	6a ff                	push   0xffffffff
c0000ee9:	6a 0c                	push   0xc
c0000eeb:	6a 03                	push   0x3
c0000eed:	56                   	push   esi
c0000eee:	6a 00                	push   0x0
c0000ef0:	e8 ba eb 00 00       	call   c000faaf <mmap>
c0000ef5:	83 c4 20             	add    esp,0x20
c0000ef8:	83 f8 ff             	cmp    eax,0xffffffff
c0000efb:	74 7c                	je     c0000f79 <sYSMALLOc+0x112>
c0000efd:	89 c1                	mov    ecx,eax
c0000eff:	83 e1 07             	and    ecx,0x7
c0000f02:	74 13                	je     c0000f17 <sYSMALLOc+0xb0>
c0000f04:	ba 08 00 00 00       	mov    edx,0x8
c0000f09:	29 ca                	sub    edx,ecx
c0000f0b:	89 f1                	mov    ecx,esi
c0000f0d:	01 d0                	add    eax,edx
c0000f0f:	29 d1                	sub    ecx,edx
c0000f11:	89 10                	mov    DWORD PTR [eax],edx
c0000f13:	89 ca                	mov    edx,ecx
c0000f15:	eb 08                	jmp    c0000f1f <sYSMALLOc+0xb8>
c0000f17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f1d:	89 f2                	mov    edx,esi
c0000f1f:	83 ca 02             	or     edx,0x2
c0000f22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f25:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f2b:	8d 57 01             	lea    edx,[edi+0x1]
c0000f2e:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f34:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f3a:	7e 06                	jle    c0000f42 <sYSMALLOc+0xdb>
c0000f3c:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f42:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f48:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f4e:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f54:	76 06                	jbe    c0000f5c <sYSMALLOc+0xf5>
c0000f56:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f5c:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f62:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f68:	0f 83 3f 01 00 00    	jae    c00010ad <sYSMALLOc+0x246>
c0000f6e:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000f74:	e9 34 01 00 00       	jmp    c00010ad <sYSMALLOc+0x246>
c0000f79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000f7c:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000f86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000f89:	83 e0 fc             	and    eax,0xfffffffc
c0000f8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0000f8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f93:	03 04 24             	add    eax,DWORD PTR [esp]
c0000f96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f9e:	83 c0 10             	add    eax,0x10
c0000fa1:	01 c5                	add    ebp,eax
c0000fa3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fa7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fae:	74 03                	je     c0000fb3 <sYSMALLOc+0x14c>
c0000fb0:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c0000fb3:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0000fb7:	23 6c 24 10          	and    ebp,DWORD PTR [esp+0x10]
c0000fbb:	89 ee                	mov    esi,ebp
c0000fbd:	7f 18                	jg     c0000fd7 <sYSMALLOc+0x170>
c0000fbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fc6:	74 27                	je     c0000fef <sYSMALLOc+0x188>
c0000fc8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000fcc:	03 34 24             	add    esi,DWORD PTR [esp]
c0000fcf:	01 ee                	add    esi,ebp
c0000fd1:	23 74 24 10          	and    esi,DWORD PTR [esp+0x10]
c0000fd5:	eb 18                	jmp    c0000fef <sYSMALLOc+0x188>
c0000fd7:	83 ec 0c             	sub    esp,0xc
c0000fda:	55                   	push   ebp
c0000fdb:	e8 99 ea 00 00       	call   c000fa79 <sbrk_thunk>
c0000fe0:	83 c4 10             	add    esp,0x10
c0000fe3:	89 c7                	mov    edi,eax
c0000fe5:	83 c8 ff             	or     eax,0xffffffff
c0000fe8:	83 ff ff             	cmp    edi,0xffffffff
c0000feb:	75 42                	jne    c000102f <sYSMALLOc+0x1c8>
c0000fed:	eb d0                	jmp    c0000fbf <sYSMALLOc+0x158>
c0000fef:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c0000ff5:	77 05                	ja     c0000ffc <sYSMALLOc+0x195>
c0000ff7:	be 00 c0 00 00       	mov    esi,0xc000
c0000ffc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0001000:	77 07                	ja     c0001009 <sYSMALLOc+0x1a2>
c0001002:	31 c0                	xor    eax,eax
c0001004:	e9 09 02 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0001009:	50                   	push   eax
c000100a:	50                   	push   eax
c000100b:	6a 00                	push   0x0
c000100d:	6a ff                	push   0xffffffff
c000100f:	6a 0c                	push   0xc
c0001011:	6a 03                	push   0x3
c0001013:	56                   	push   esi
c0001014:	6a 00                	push   0x0
c0001016:	e8 94 ea 00 00       	call   c000faaf <mmap>
c000101b:	83 c4 20             	add    esp,0x20
c000101e:	89 c7                	mov    edi,eax
c0001020:	83 f8 ff             	cmp    eax,0xffffffff
c0001023:	74 dd                	je     c0001002 <sYSMALLOc+0x19b>
c0001025:	8d 04 30             	lea    eax,[eax+esi*1]
c0001028:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000102f:	8b ab 68 03 00 00    	mov    ebp,DWORD PTR [ebx+0x368]
c0001035:	01 f5                	add    ebp,esi
c0001037:	83 f8 ff             	cmp    eax,0xffffffff
c000103a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0001040:	75 73                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001042:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0001046:	75 6d                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001048:	03 34 24             	add    esi,DWORD PTR [esp]
c000104b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000104f:	83 ce 01             	or     esi,0x1
c0001052:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0001055:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c000105b:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001061:	73 06                	jae    c0001069 <sYSMALLOc+0x202>
c0001063:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001069:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000106f:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001075:	73 06                	jae    c000107d <sYSMALLOc+0x216>
c0001077:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000107d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001080:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001083:	83 e2 fc             	and    edx,0xfffffffc
c0001086:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000108a:	0f 82 72 ff ff ff    	jb     c0001002 <sYSMALLOc+0x19b>
c0001090:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001094:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0001098:	01 c1                	add    ecx,eax
c000109a:	83 ca 01             	or     edx,0x1
c000109d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010a0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00010a4:	83 cb 01             	or     ebx,0x1
c00010a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010ad:	83 c0 08             	add    eax,0x8
c00010b0:	e9 5d 01 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c00010b5:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010bb:	89 d1                	mov    ecx,edx
c00010bd:	83 e1 01             	and    ecx,0x1
c00010c0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010c4:	0f 95 44 24 1c       	setne  BYTE PTR [esp+0x1c]
c00010c9:	85 4c 24 1c          	test   DWORD PTR [esp+0x1c],ecx
c00010cd:	74 14                	je     c00010e3 <sYSMALLOc+0x27c>
c00010cf:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c00010d3:	76 0e                	jbe    c00010e3 <sYSMALLOc+0x27c>
c00010d5:	83 e2 fe             	and    edx,0xfffffffe
c00010d8:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00010de:	e9 89 00 00 00       	jmp    c000116c <sYSMALLOc+0x305>
c00010e3:	85 c9                	test   ecx,ecx
c00010e5:	0f 84 81 00 00 00    	je     c000116c <sYSMALLOc+0x305>
c00010eb:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010ef:	74 0e                	je     c00010ff <sYSMALLOc+0x298>
c00010f1:	89 f8                	mov    eax,edi
c00010f3:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00010f7:	01 c5                	add    ebp,eax
c00010f9:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00010ff:	89 fa                	mov    edx,edi
c0001101:	83 e2 07             	and    edx,0x7
c0001104:	74 0c                	je     c0001112 <sYSMALLOc+0x2ab>
c0001106:	b8 08 00 00 00       	mov    eax,0x8
c000110b:	29 d0                	sub    eax,edx
c000110d:	8d 14 07             	lea    edx,[edi+eax*1]
c0001110:	eb 04                	jmp    c0001116 <sYSMALLOc+0x2af>
c0001112:	89 fa                	mov    edx,edi
c0001114:	31 c0                	xor    eax,eax
c0001116:	03 04 24             	add    eax,DWORD PTR [esp]
c0001119:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000111d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0001121:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001124:	83 ec 0c             	sub    esp,0xc
c0001127:	01 f9                	add    ecx,edi
c0001129:	01 cd                	add    ebp,ecx
c000112b:	29 c8                	sub    eax,ecx
c000112d:	23 6c 24 1c          	and    ebp,DWORD PTR [esp+0x1c]
c0001131:	01 c5                	add    ebp,eax
c0001133:	55                   	push   ebp
c0001134:	e8 40 e9 00 00       	call   c000fa79 <sbrk_thunk>
c0001139:	83 c4 10             	add    esp,0x10
c000113c:	83 f8 ff             	cmp    eax,0xffffffff
c000113f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0001143:	75 17                	jne    c000115c <sYSMALLOc+0x2f5>
c0001145:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001149:	83 ec 0c             	sub    esp,0xc
c000114c:	6a 00                	push   0x0
c000114e:	e8 26 e9 00 00       	call   c000fa79 <sbrk_thunk>
c0001153:	83 c4 10             	add    esp,0x10
c0001156:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000115a:	eb 32                	jmp    c000118e <sYSMALLOc+0x327>
c000115c:	39 f8                	cmp    eax,edi
c000115e:	73 39                	jae    c0001199 <sYSMALLOc+0x332>
c0001160:	8d 04 37             	lea    eax,[edi+esi*1]
c0001163:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000116a:	eb 22                	jmp    c000118e <sYSMALLOc+0x327>
c000116c:	89 fa                	mov    edx,edi
c000116e:	83 f8 ff             	cmp    eax,0xffffffff
c0001171:	75 24                	jne    c0001197 <sYSMALLOc+0x330>
c0001173:	83 ec 0c             	sub    esp,0xc
c0001176:	6a 00                	push   0x0
c0001178:	e8 fc e8 00 00       	call   c000fa79 <sbrk_thunk>
c000117d:	83 c4 10             	add    esp,0x10
c0001180:	89 c2                	mov    edx,eax
c0001182:	29 fa                	sub    edx,edi
c0001184:	29 f2                	sub    edx,esi
c0001186:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000118c:	89 fa                	mov    edx,edi
c000118e:	83 f8 ff             	cmp    eax,0xffffffff
c0001191:	0f 84 be fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c0001197:	31 ed                	xor    ebp,ebp
c0001199:	29 d0                	sub    eax,edx
c000119b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000119e:	01 e8                	add    eax,ebp
c00011a0:	83 c8 01             	or     eax,0x1
c00011a3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00011a6:	01 ab 68 03 00 00    	add    DWORD PTR [ebx+0x368],ebp
c00011ac:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00011b0:	0f 84 9f fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c00011b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00011bd:	83 ee 0c             	sub    esi,0xc
c00011c0:	83 e6 f8             	and    esi,0xfffffff8
c00011c3:	89 f0                	mov    eax,esi
c00011c5:	83 c8 01             	or     eax,0x1
c00011c8:	83 fe 0f             	cmp    esi,0xf
c00011cb:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00011ce:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c00011d6:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c00011de:	0f 86 71 fe ff ff    	jbe    c0001055 <sYSMALLOc+0x1ee>
c00011e4:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00011ea:	83 ec 0c             	sub    esp,0xc
c00011ed:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00011fb:	83 c0 08             	add    eax,0x8
c00011fe:	50                   	push   eax
c00011ff:	e8 4f fb ff ff       	call   c0000d53 <dlfree>
c0001204:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000120a:	83 c4 10             	add    esp,0x10
c000120d:	e9 43 fe ff ff       	jmp    c0001055 <sYSMALLOc+0x1ee>
c0001212:	83 c4 2c             	add    esp,0x2c
c0001215:	5b                   	pop    ebx
c0001216:	5e                   	pop    esi
c0001217:	5f                   	pop    edi
c0001218:	5d                   	pop    ebp
c0001219:	c3                   	ret    

c000121a <dlmalloc>:
c000121a:	55                   	push   ebp
c000121b:	57                   	push   edi
c000121c:	56                   	push   esi
c000121d:	53                   	push   ebx
c000121e:	83 ec 1c             	sub    esp,0x1c
c0001221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001225:	83 f8 df             	cmp    eax,0xffffffdf
c0001228:	0f 87 70 03 00 00    	ja     c000159e <dlmalloc+0x384>
c000122e:	83 c0 0b             	add    eax,0xb
c0001231:	be 10 00 00 00       	mov    esi,0x10
c0001236:	83 f8 0f             	cmp    eax,0xf
c0001239:	76 05                	jbe    c0001240 <dlmalloc+0x26>
c000123b:	83 e0 f8             	and    eax,0xfffffff8
c000123e:	89 c6                	mov    esi,eax
c0001240:	8b 3d 00 91 02 c0    	mov    edi,DWORD PTR ds:0xc0029100
c0001246:	f7 c7 01 00 00 00    	test   edi,0x1
c000124c:	75 17                	jne    c0001265 <dlmalloc+0x4b>
c000124e:	85 ff                	test   edi,edi
c0001250:	0f 85 05 03 00 00    	jne    c000155b <dlmalloc+0x341>
c0001256:	b8 00 91 02 c0       	mov    eax,0xc0029100
c000125b:	e8 0c fa ff ff       	call   c0000c6c <malloc_consolidate>
c0001260:	e9 f6 02 00 00       	jmp    c000155b <dlmalloc+0x341>
c0001265:	39 f7                	cmp    edi,esi
c0001267:	72 1f                	jb     c0001288 <dlmalloc+0x6e>
c0001269:	89 f2                	mov    edx,esi
c000126b:	c1 ea 03             	shr    edx,0x3
c000126e:	83 ea 02             	sub    edx,0x2
c0001271:	8b 04 95 04 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6efc]
c0001278:	85 c0                	test   eax,eax
c000127a:	74 0c                	je     c0001288 <dlmalloc+0x6e>
c000127c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000127f:	89 0c 95 04 91 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6efc],ecx
c0001286:	eb 30                	jmp    c00012b8 <dlmalloc+0x9e>
c0001288:	89 f0                	mov    eax,esi
c000128a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001290:	77 2e                	ja     c00012c0 <dlmalloc+0xa6>
c0001292:	c1 e8 03             	shr    eax,0x3
c0001295:	8d 14 c5 34 91 02 c0 	lea    edx,[eax*8-0x3ffd6ecc]
c000129c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012a0:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012a6:	39 c3                	cmp    ebx,eax
c00012a8:	74 2e                	je     c00012d8 <dlmalloc+0xbe>
c00012aa:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012ad:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012b2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012b5:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012b8:	83 c0 08             	add    eax,0x8
c00012bb:	e9 e0 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c00012c0:	e8 23 f9 ff ff       	call   c0000be8 <largebin_index>
c00012c5:	83 e7 02             	and    edi,0x2
c00012c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012cc:	74 0a                	je     c00012d8 <dlmalloc+0xbe>
c00012ce:	b8 00 91 02 c0       	mov    eax,0xc0029100
c00012d3:	e8 94 f9 ff ff       	call   c0000c6c <malloc_consolidate>
c00012d8:	8d 46 10             	lea    eax,[esi+0x10]
c00012db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012df:	8b 1d 40 91 02 c0    	mov    ebx,DWORD PTR ds:0xc0029140
c00012e5:	81 fb 34 91 02 c0    	cmp    ebx,0xc0029134
c00012eb:	0f 84 13 01 00 00    	je     c0001404 <dlmalloc+0x1ea>
c00012f1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00012f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00012f7:	83 e7 fc             	and    edi,0xfffffffc
c00012fa:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001300:	77 4c                	ja     c000134e <dlmalloc+0x134>
c0001302:	3d 34 91 02 c0       	cmp    eax,0xc0029134
c0001307:	75 45                	jne    c000134e <dlmalloc+0x134>
c0001309:	39 1d 30 91 02 c0    	cmp    DWORD PTR ds:0xc0029130,ebx
c000130f:	75 3d                	jne    c000134e <dlmalloc+0x134>
c0001311:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001315:	73 37                	jae    c000134e <dlmalloc+0x134>
c0001317:	8d 04 33             	lea    eax,[ebx+esi*1]
c000131a:	89 fa                	mov    edx,edi
c000131c:	a3 3c 91 02 c0       	mov    ds:0xc002913c,eax
c0001321:	a3 40 91 02 c0       	mov    ds:0xc0029140,eax
c0001326:	a3 30 91 02 c0       	mov    ds:0xc0029130,eax
c000132b:	29 f2                	sub    edx,esi
c000132d:	c7 40 08 34 91 02 c0 	mov    DWORD PTR [eax+0x8],0xc0029134
c0001334:	c7 40 0c 34 91 02 c0 	mov    DWORD PTR [eax+0xc],0xc0029134
c000133b:	83 ce 01             	or     esi,0x1
c000133e:	89 d1                	mov    ecx,edx
c0001340:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001343:	83 c9 01             	or     ecx,0x1
c0001346:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001349:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000134c:	eb 15                	jmp    c0001363 <dlmalloc+0x149>
c000134e:	a3 40 91 02 c0       	mov    ds:0xc0029140,eax
c0001353:	39 fe                	cmp    esi,edi
c0001355:	c7 40 08 34 91 02 c0 	mov    DWORD PTR [eax+0x8],0xc0029134
c000135c:	75 0d                	jne    c000136b <dlmalloc+0x151>
c000135e:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001363:	8d 43 08             	lea    eax,[ebx+0x8]
c0001366:	e9 35 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000136b:	89 f8                	mov    eax,edi
c000136d:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001373:	77 19                	ja     c000138e <dlmalloc+0x174>
c0001375:	c1 e8 03             	shr    eax,0x3
c0001378:	8d 14 00             	lea    edx,[eax+eax*1]
c000137b:	83 c2 0d             	add    edx,0xd
c000137e:	8d 2c 95 f8 90 02 c0 	lea    ebp,[edx*4-0x3ffd6f08]
c0001385:	8b 14 95 00 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6f00]
c000138c:	eb 46                	jmp    c00013d4 <dlmalloc+0x1ba>
c000138e:	e8 55 f8 ff ff       	call   c0000be8 <largebin_index>
c0001393:	8d 14 00             	lea    edx,[eax+eax*1]
c0001396:	83 c2 0d             	add    edx,0xd
c0001399:	8d 0c 95 00 91 02 c0 	lea    ecx,[edx*4-0x3ffd6f00]
c00013a0:	8b 14 95 00 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6f00]
c00013a7:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013aa:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013ae:	89 d5                	mov    ebp,edx
c00013b0:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013b4:	74 1e                	je     c00013d4 <dlmalloc+0x1ba>
c00013b6:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013b9:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013bc:	77 12                	ja     c00013d0 <dlmalloc+0x1b6>
c00013be:	83 cf 01             	or     edi,0x1
c00013c1:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013c4:	76 05                	jbe    c00013cb <dlmalloc+0x1b1>
c00013c6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013c9:	eb f6                	jmp    c00013c1 <dlmalloc+0x1a7>
c00013cb:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013ce:	eb 04                	jmp    c00013d4 <dlmalloc+0x1ba>
c00013d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00013d4:	89 c7                	mov    edi,eax
c00013d6:	88 c1                	mov    cl,al
c00013d8:	c1 ff 05             	sar    edi,0x5
c00013db:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00013df:	bf 01 00 00 00       	mov    edi,0x1
c00013e4:	d3 e7                	shl    edi,cl
c00013e6:	89 f8                	mov    eax,edi
c00013e8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00013ec:	09 04 bd 34 94 02 c0 	or     DWORD PTR [edi*4-0x3ffd6bcc],eax
c00013f3:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00013f6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00013f9:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00013fc:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00013ff:	e9 db fe ff ff       	jmp    c00012df <dlmalloc+0xc5>
c0001404:	81 fe ff 00 00 00    	cmp    esi,0xff
c000140a:	76 78                	jbe    c0001484 <dlmalloc+0x26a>
c000140c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001410:	8d 04 c5 34 91 02 c0 	lea    eax,[eax*8-0x3ffd6ecc]
c0001417:	8d 48 f8             	lea    ecx,[eax-0x8]
c000141a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000141d:	39 ca                	cmp    edx,ecx
c000141f:	74 63                	je     c0001484 <dlmalloc+0x26a>
c0001421:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001424:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001427:	83 e3 fc             	and    ebx,0xfffffffc
c000142a:	39 de                	cmp    esi,ebx
c000142c:	77 52                	ja     c0001480 <dlmalloc+0x266>
c000142e:	89 df                	mov    edi,ebx
c0001430:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001433:	29 f7                	sub    edi,esi
c0001435:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001438:	01 d3                	add    ebx,edx
c000143a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000143d:	83 ff 0f             	cmp    edi,0xf
c0001440:	8d 42 08             	lea    eax,[edx+0x8]
c0001443:	77 09                	ja     c000144e <dlmalloc+0x234>
c0001445:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001449:	e9 52 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000144e:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001451:	83 ce 01             	or     esi,0x1
c0001454:	89 0d 3c 91 02 c0    	mov    DWORD PTR ds:0xc002913c,ecx
c000145a:	89 0d 40 91 02 c0    	mov    DWORD PTR ds:0xc0029140,ecx
c0001460:	c7 41 08 34 91 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0029134
c0001467:	c7 41 0c 34 91 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0029134
c000146e:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001471:	89 fa                	mov    edx,edi
c0001473:	83 ca 01             	or     edx,0x1
c0001476:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001479:	89 3b                	mov    DWORD PTR [ebx],edi
c000147b:	e9 20 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c0001480:	89 c2                	mov    edx,eax
c0001482:	eb 99                	jmp    c000141d <dlmalloc+0x203>
c0001484:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001488:	b8 01 00 00 00       	mov    eax,0x1
c000148d:	41                   	inc    ecx
c000148e:	89 cb                	mov    ebx,ecx
c0001490:	8d 14 cd 2c 91 02 c0 	lea    edx,[ecx*8-0x3ffd6ed4]
c0001497:	c1 eb 05             	shr    ebx,0x5
c000149a:	d3 e0                	shl    eax,cl
c000149c:	8b 3c 9d 34 94 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd6bcc]
c00014a3:	39 f8                	cmp    eax,edi
c00014a5:	77 04                	ja     c00014ab <dlmalloc+0x291>
c00014a7:	85 c0                	test   eax,eax
c00014a9:	75 26                	jne    c00014d1 <dlmalloc+0x2b7>
c00014ab:	43                   	inc    ebx
c00014ac:	83 fb 02             	cmp    ebx,0x2
c00014af:	0f 87 a6 00 00 00    	ja     c000155b <dlmalloc+0x341>
c00014b5:	8b 3c 9d 34 94 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd6bcc]
c00014bc:	85 ff                	test   edi,edi
c00014be:	74 eb                	je     c00014ab <dlmalloc+0x291>
c00014c0:	89 d8                	mov    eax,ebx
c00014c2:	c1 e0 06             	shl    eax,0x6
c00014c5:	8d 14 85 2c 91 02 c0 	lea    edx,[eax*4-0x3ffd6ed4]
c00014cc:	b8 01 00 00 00       	mov    eax,0x1
c00014d1:	85 f8                	test   eax,edi
c00014d3:	75 07                	jne    c00014dc <dlmalloc+0x2c2>
c00014d5:	83 c2 08             	add    edx,0x8
c00014d8:	01 c0                	add    eax,eax
c00014da:	eb f5                	jmp    c00014d1 <dlmalloc+0x2b7>
c00014dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00014df:	39 ca                	cmp    edx,ecx
c00014e1:	75 14                	jne    c00014f7 <dlmalloc+0x2dd>
c00014e3:	89 c1                	mov    ecx,eax
c00014e5:	83 c2 08             	add    edx,0x8
c00014e8:	f7 d1                	not    ecx
c00014ea:	01 c0                	add    eax,eax
c00014ec:	21 cf                	and    edi,ecx
c00014ee:	89 3c 9d 34 94 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd6bcc],edi
c00014f5:	eb ac                	jmp    c00014a3 <dlmalloc+0x289>
c00014f7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00014fa:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00014fd:	83 e0 fc             	and    eax,0xfffffffc
c0001500:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001503:	89 c3                	mov    ebx,eax
c0001505:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001508:	29 f3                	sub    ebx,esi
c000150a:	8d 14 01             	lea    edx,[ecx+eax*1]
c000150d:	83 fb 0f             	cmp    ebx,0xf
c0001510:	8d 41 08             	lea    eax,[ecx+0x8]
c0001513:	77 09                	ja     c000151e <dlmalloc+0x304>
c0001515:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001519:	e9 82 00 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000151e:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001521:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001527:	89 3d 3c 91 02 c0    	mov    DWORD PTR ds:0xc002913c,edi
c000152d:	89 3d 40 91 02 c0    	mov    DWORD PTR ds:0xc0029140,edi
c0001533:	c7 47 08 34 91 02 c0 	mov    DWORD PTR [edi+0x8],0xc0029134
c000153a:	c7 47 0c 34 91 02 c0 	mov    DWORD PTR [edi+0xc],0xc0029134
c0001541:	77 06                	ja     c0001549 <dlmalloc+0x32f>
c0001543:	89 3d 30 91 02 c0    	mov    DWORD PTR ds:0xc0029130,edi
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000154f:	89 d9                	mov    ecx,ebx
c0001551:	83 c9 01             	or     ecx,0x1
c0001554:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001557:	89 1a                	mov    DWORD PTR [edx],ebx
c0001559:	eb 45                	jmp    c00015a0 <dlmalloc+0x386>
c000155b:	a1 2c 91 02 c0       	mov    eax,ds:0xc002912c
c0001560:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001563:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001566:	83 e2 fc             	and    edx,0xfffffffc
c0001569:	39 d1                	cmp    ecx,edx
c000156b:	77 1e                	ja     c000158b <dlmalloc+0x371>
c000156d:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001570:	89 f3                	mov    ebx,esi
c0001572:	89 0d 2c 91 02 c0    	mov    DWORD PTR ds:0xc002912c,ecx
c0001578:	83 cb 01             	or     ebx,0x1
c000157b:	29 f2                	sub    edx,esi
c000157d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001580:	83 ca 01             	or     edx,0x1
c0001583:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001586:	e9 2d fd ff ff       	jmp    c00012b8 <dlmalloc+0x9e>
c000158b:	83 c4 1c             	add    esp,0x1c
c000158e:	89 f0                	mov    eax,esi
c0001590:	5b                   	pop    ebx
c0001591:	ba 00 91 02 c0       	mov    edx,0xc0029100
c0001596:	5e                   	pop    esi
c0001597:	5f                   	pop    edi
c0001598:	5d                   	pop    ebp
c0001599:	e9 c9 f8 ff ff       	jmp    c0000e67 <sYSMALLOc>
c000159e:	31 c0                	xor    eax,eax
c00015a0:	83 c4 1c             	add    esp,0x1c
c00015a3:	5b                   	pop    ebx
c00015a4:	5e                   	pop    esi
c00015a5:	5f                   	pop    edi
c00015a6:	5d                   	pop    ebp
c00015a7:	c3                   	ret    

c00015a8 <iALLOc>:
c00015a8:	55                   	push   ebp
c00015a9:	89 c5                	mov    ebp,eax
c00015ab:	57                   	push   edi
c00015ac:	56                   	push   esi
c00015ad:	53                   	push   ebx
c00015ae:	83 ec 2c             	sub    esp,0x2c
c00015b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015bd:	83 3d 00 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029100,0x0
c00015c4:	75 12                	jne    c00015d8 <iALLOc+0x30>
c00015c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015ca:	b8 00 91 02 c0       	mov    eax,0xc0029100
c00015cf:	e8 98 f6 ff ff       	call   c0000c6c <malloc_consolidate>
c00015d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00015d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015dd:	74 12                	je     c00015f1 <iALLOc+0x49>
c00015df:	85 ed                	test   ebp,ebp
c00015e1:	0f 84 64 01 00 00    	je     c000174b <iALLOc+0x1a3>
c00015e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00015ef:	eb 33                	jmp    c0001624 <iALLOc+0x7c>
c00015f1:	85 ed                	test   ebp,ebp
c00015f3:	75 14                	jne    c0001609 <iALLOc+0x61>
c00015f5:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00015fd:	83 c4 2c             	add    esp,0x2c
c0001600:	5b                   	pop    ebx
c0001601:	5e                   	pop    esi
c0001602:	5f                   	pop    edi
c0001603:	5d                   	pop    ebp
c0001604:	e9 11 fc ff ff       	jmp    c000121a <dlmalloc>
c0001609:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001610:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001618:	83 f8 0f             	cmp    eax,0xf
c000161b:	76 07                	jbe    c0001624 <iALLOc+0x7c>
c000161d:	83 e0 f8             	and    eax,0xfffffff8
c0001620:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001624:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001629:	75 09                	jne    c0001634 <iALLOc+0x8c>
c000162b:	89 d0                	mov    eax,edx
c000162d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001630:	31 f6                	xor    esi,esi
c0001632:	eb 3b                	jmp    c000166f <iALLOc+0xc7>
c0001634:	8b 02                	mov    eax,DWORD PTR [edx]
c0001636:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000163e:	83 c0 0b             	add    eax,0xb
c0001641:	83 f8 0f             	cmp    eax,0xf
c0001644:	76 07                	jbe    c000164d <iALLOc+0xa5>
c0001646:	83 e0 f8             	and    eax,0xfffffff8
c0001649:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000164d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001651:	0f af f5             	imul   esi,ebp
c0001654:	eb 25                	jmp    c000167b <iALLOc+0xd3>
c0001656:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001658:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000165b:	bb 10 00 00 00       	mov    ebx,0x10
c0001660:	83 f9 0f             	cmp    ecx,0xf
c0001663:	76 05                	jbe    c000166a <iALLOc+0xc2>
c0001665:	83 e1 f8             	and    ecx,0xfffffff8
c0001668:	89 cb                	mov    ebx,ecx
c000166a:	01 de                	add    esi,ebx
c000166c:	83 c0 04             	add    eax,0x4
c000166f:	39 c7                	cmp    edi,eax
c0001671:	75 e3                	jne    c0001656 <iALLOc+0xae>
c0001673:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000167b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000167f:	8b 1d 54 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029454
c0001685:	83 ec 0c             	sub    esp,0xc
c0001688:	c7 05 54 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029454,0x0
c0001692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001696:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000169a:	50                   	push   eax
c000169b:	e8 7a fb ff ff       	call   c000121a <dlmalloc>
c00016a0:	83 c4 10             	add    esp,0x10
c00016a3:	89 1d 54 94 02 c0    	mov    DWORD PTR ds:0xc0029454,ebx
c00016a9:	85 c0                	test   eax,eax
c00016ab:	0f 84 92 00 00 00    	je     c0001743 <iALLOc+0x19b>
c00016b1:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016b4:	8d 78 f8             	lea    edi,[eax-0x8]
c00016b7:	83 e3 fc             	and    ebx,0xfffffffc
c00016ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016be:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016c3:	74 1e                	je     c00016e3 <iALLOc+0x13b>
c00016c5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016c9:	89 d9                	mov    ecx,ebx
c00016cb:	52                   	push   edx
c00016cc:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016d0:	83 e9 04             	sub    ecx,0x4
c00016d3:	51                   	push   ecx
c00016d4:	6a 00                	push   0x0
c00016d6:	50                   	push   eax
c00016d7:	e8 14 ee ff ff       	call   c00004f0 <memset>
c00016dc:	83 c4 10             	add    esp,0x10
c00016df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00016e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00016e8:	75 14                	jne    c00016fe <iALLOc+0x156>
c00016ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ed:	29 f3                	sub    ebx,esi
c00016ef:	8d 48 08             	lea    ecx,[eax+0x8]
c00016f2:	83 cb 01             	or     ebx,0x1
c00016f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016f9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00016fc:	89 f3                	mov    ebx,esi
c00016fe:	31 c0                	xor    eax,eax
c0001700:	4d                   	dec    ebp
c0001701:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001704:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001708:	39 c5                	cmp    ebp,eax
c000170a:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000170d:	74 2c                	je     c000173b <iALLOc+0x193>
c000170f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001713:	85 c9                	test   ecx,ecx
c0001715:	75 15                	jne    c000172c <iALLOc+0x184>
c0001717:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000171a:	8d 71 0b             	lea    esi,[ecx+0xb]
c000171d:	b9 10 00 00 00       	mov    ecx,0x10
c0001722:	83 fe 0f             	cmp    esi,0xf
c0001725:	76 05                	jbe    c000172c <iALLOc+0x184>
c0001727:	83 e6 f8             	and    esi,0xfffffff8
c000172a:	89 f1                	mov    ecx,esi
c000172c:	89 ce                	mov    esi,ecx
c000172e:	29 cb                	sub    ebx,ecx
c0001730:	83 ce 01             	or     esi,0x1
c0001733:	40                   	inc    eax
c0001734:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001737:	01 cf                	add    edi,ecx
c0001739:	eb c6                	jmp    c0001701 <iALLOc+0x159>
c000173b:	83 cb 01             	or     ebx,0x1
c000173e:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001741:	eb 08                	jmp    c000174b <iALLOc+0x1a3>
c0001743:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000174b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000174f:	83 c4 2c             	add    esp,0x2c
c0001752:	5b                   	pop    ebx
c0001753:	5e                   	pop    esi
c0001754:	5f                   	pop    edi
c0001755:	5d                   	pop    ebp
c0001756:	c3                   	ret    

c0001757 <dlrealloc>:
c0001757:	55                   	push   ebp
c0001758:	57                   	push   edi
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	83 ec 1c             	sub    esp,0x1c
c000175e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001762:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001766:	85 db                	test   ebx,ebx
c0001768:	75 10                	jne    c000177a <dlrealloc+0x23>
c000176a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000176e:	83 c4 1c             	add    esp,0x1c
c0001771:	5b                   	pop    ebx
c0001772:	5e                   	pop    esi
c0001773:	5f                   	pop    edi
c0001774:	5d                   	pop    ebp
c0001775:	e9 a0 fa ff ff       	jmp    c000121a <dlmalloc>
c000177a:	83 f8 df             	cmp    eax,0xffffffdf
c000177d:	0f 87 a5 01 00 00    	ja     c0001928 <dlrealloc+0x1d1>
c0001783:	83 c0 0b             	add    eax,0xb
c0001786:	bd 10 00 00 00       	mov    ebp,0x10
c000178b:	83 f8 0f             	cmp    eax,0xf
c000178e:	76 05                	jbe    c0001795 <dlrealloc+0x3e>
c0001790:	83 e0 f8             	and    eax,0xfffffff8
c0001793:	89 c5                	mov    ebp,eax
c0001795:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001798:	89 c6                	mov    esi,eax
c000179a:	83 e6 fc             	and    esi,0xfffffffc
c000179d:	a8 02                	test   al,0x2
c000179f:	0f 85 4e 01 00 00    	jne    c00018f3 <dlrealloc+0x19c>
c00017a5:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017a8:	39 f5                	cmp    ebp,esi
c00017aa:	0f 86 04 01 00 00    	jbe    c00018b4 <dlrealloc+0x15d>
c00017b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00017b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00017b6:	39 15 2c 91 02 c0    	cmp    DWORD PTR ds:0xc002912c,edx
c00017bc:	75 33                	jne    c00017f1 <dlrealloc+0x9a>
c00017be:	83 e1 fc             	and    ecx,0xfffffffc
c00017c1:	01 f1                	add    ecx,esi
c00017c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00017ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00017ce:	77 49                	ja     c0001819 <dlrealloc+0xc2>
c00017d0:	01 ef                	add    edi,ebp
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 e8                	or     eax,ebp
c00017d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00017da:	89 3d 2c 91 02 c0    	mov    DWORD PTR ds:0xc002912c,edi
c00017e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017e4:	29 e8                	sub    eax,ebp
c00017e6:	83 c8 01             	or     eax,0x1
c00017e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00017ec:	e9 39 01 00 00       	jmp    c000192a <dlrealloc+0x1d3>
c00017f1:	89 c8                	mov    eax,ecx
c00017f3:	83 e0 fe             	and    eax,0xfffffffe
c00017f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00017fb:	75 1c                	jne    c0001819 <dlrealloc+0xc2>
c00017fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001800:	01 f1                	add    ecx,esi
c0001802:	39 cd                	cmp    ebp,ecx
c0001804:	77 13                	ja     c0001819 <dlrealloc+0xc2>
c0001806:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001809:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000180c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000180f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001812:	89 ce                	mov    esi,ecx
c0001814:	e9 9b 00 00 00       	jmp    c00018b4 <dlrealloc+0x15d>
c0001819:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000181d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001820:	83 ec 0c             	sub    esp,0xc
c0001823:	50                   	push   eax
c0001824:	e8 f1 f9 ff ff       	call   c000121a <dlmalloc>
c0001829:	83 c4 10             	add    esp,0x10
c000182c:	85 c0                	test   eax,eax
c000182e:	0f 84 f4 00 00 00    	je     c0001928 <dlrealloc+0x1d1>
c0001834:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001837:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000183b:	39 ca                	cmp    edx,ecx
c000183d:	75 0a                	jne    c0001849 <dlrealloc+0xf2>
c000183f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001842:	83 e0 fc             	and    eax,0xfffffffc
c0001845:	01 c6                	add    esi,eax
c0001847:	eb 6b                	jmp    c00018b4 <dlrealloc+0x15d>
c0001849:	8d 4e fc             	lea    ecx,[esi-0x4]
c000184c:	83 f9 27             	cmp    ecx,0x27
c000184f:	76 08                	jbe    c0001859 <dlrealloc+0x102>
c0001851:	89 de                	mov    esi,ebx
c0001853:	89 c7                	mov    edi,eax
c0001855:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001857:	eb 43                	jmp    c000189c <dlrealloc+0x145>
c0001859:	8b 13                	mov    edx,DWORD PTR [ebx]
c000185b:	83 f9 13             	cmp    ecx,0x13
c000185e:	89 10                	mov    DWORD PTR [eax],edx
c0001860:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001863:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001866:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001869:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000186c:	76 2e                	jbe    c000189c <dlrealloc+0x145>
c000186e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001871:	83 f9 1b             	cmp    ecx,0x1b
c0001874:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001877:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000187a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000187d:	76 1d                	jbe    c000189c <dlrealloc+0x145>
c000187f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001882:	83 f9 23             	cmp    ecx,0x23
c0001885:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001888:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000188b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000188e:	76 0c                	jbe    c000189c <dlrealloc+0x145>
c0001890:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001893:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001896:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001899:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000189c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018a0:	83 ec 0c             	sub    esp,0xc
c00018a3:	53                   	push   ebx
c00018a4:	e8 aa f4 ff ff       	call   c0000d53 <dlfree>
c00018a9:	83 c4 10             	add    esp,0x10
c00018ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018b0:	89 c3                	mov    ebx,eax
c00018b2:	eb 76                	jmp    c000192a <dlrealloc+0x1d3>
c00018b4:	89 f2                	mov    edx,esi
c00018b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018b9:	29 ea                	sub    edx,ebp
c00018bb:	83 e1 01             	and    ecx,0x1
c00018be:	8d 04 37             	lea    eax,[edi+esi*1]
c00018c1:	83 fa 0f             	cmp    edx,0xf
c00018c4:	77 0b                	ja     c00018d1 <dlrealloc+0x17a>
c00018c6:	09 f1                	or     ecx,esi
c00018c8:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018cf:	eb 59                	jmp    c000192a <dlrealloc+0x1d3>
c00018d1:	01 ef                	add    edi,ebp
c00018d3:	83 ec 0c             	sub    esp,0xc
c00018d6:	09 cd                	or     ebp,ecx
c00018d8:	83 ca 01             	or     edx,0x1
c00018db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00018de:	83 c7 08             	add    edi,0x8
c00018e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00018e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018e8:	57                   	push   edi
c00018e9:	e8 65 f4 ff ff       	call   c0000d53 <dlfree>
c00018ee:	83 c4 10             	add    esp,0x10
c00018f1:	eb 37                	jmp    c000192a <dlrealloc+0x1d3>
c00018f3:	8d 45 04             	lea    eax,[ebp+0x4]
c00018f6:	39 f0                	cmp    eax,esi
c00018f8:	76 30                	jbe    c000192a <dlrealloc+0x1d3>
c00018fa:	83 ec 0c             	sub    esp,0xc
c00018fd:	83 ed 07             	sub    ebp,0x7
c0001900:	55                   	push   ebp
c0001901:	e8 14 f9 ff ff       	call   c000121a <dlmalloc>
c0001906:	83 c4 10             	add    esp,0x10
c0001909:	89 c5                	mov    ebp,eax
c000190b:	85 c0                	test   eax,eax
c000190d:	74 19                	je     c0001928 <dlrealloc+0x1d1>
c000190f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001912:	89 c7                	mov    edi,eax
c0001914:	89 de                	mov    esi,ebx
c0001916:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001918:	83 ec 0c             	sub    esp,0xc
c000191b:	53                   	push   ebx
c000191c:	89 eb                	mov    ebx,ebp
c000191e:	e8 30 f4 ff ff       	call   c0000d53 <dlfree>
c0001923:	83 c4 10             	add    esp,0x10
c0001926:	eb 02                	jmp    c000192a <dlrealloc+0x1d3>
c0001928:	31 db                	xor    ebx,ebx
c000192a:	83 c4 1c             	add    esp,0x1c
c000192d:	89 d8                	mov    eax,ebx
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlmemalign>:
c0001934:	55                   	push   ebp
c0001935:	57                   	push   edi
c0001936:	56                   	push   esi
c0001937:	53                   	push   ebx
c0001938:	83 ec 0c             	sub    esp,0xc
c000193b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000193f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001943:	83 fa 08             	cmp    edx,0x8
c0001946:	77 10                	ja     c0001958 <dlmemalign+0x24>
c0001948:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000194c:	83 c4 0c             	add    esp,0xc
c000194f:	5b                   	pop    ebx
c0001950:	5e                   	pop    esi
c0001951:	5f                   	pop    edi
c0001952:	5d                   	pop    ebp
c0001953:	e9 c2 f8 ff ff       	jmp    c000121a <dlmalloc>
c0001958:	bf 10 00 00 00       	mov    edi,0x10
c000195d:	83 fa 0f             	cmp    edx,0xf
c0001960:	76 13                	jbe    c0001975 <dlmemalign+0x41>
c0001962:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001965:	85 d1                	test   ecx,edx
c0001967:	75 04                	jne    c000196d <dlmemalign+0x39>
c0001969:	89 d7                	mov    edi,edx
c000196b:	eb 08                	jmp    c0001975 <dlmemalign+0x41>
c000196d:	39 d7                	cmp    edi,edx
c000196f:	73 04                	jae    c0001975 <dlmemalign+0x41>
c0001971:	01 ff                	add    edi,edi
c0001973:	eb f8                	jmp    c000196d <dlmemalign+0x39>
c0001975:	83 f8 df             	cmp    eax,0xffffffdf
c0001978:	76 07                	jbe    c0001981 <dlmemalign+0x4d>
c000197a:	31 c0                	xor    eax,eax
c000197c:	e9 ce 00 00 00       	jmp    c0001a4f <dlmemalign+0x11b>
c0001981:	83 c0 0b             	add    eax,0xb
c0001984:	bd 10 00 00 00       	mov    ebp,0x10
c0001989:	83 f8 0f             	cmp    eax,0xf
c000198c:	76 05                	jbe    c0001993 <dlmemalign+0x5f>
c000198e:	83 e0 f8             	and    eax,0xfffffff8
c0001991:	89 c5                	mov    ebp,eax
c0001993:	83 ec 0c             	sub    esp,0xc
c0001996:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000199a:	50                   	push   eax
c000199b:	e8 7a f8 ff ff       	call   c000121a <dlmalloc>
c00019a0:	83 c4 10             	add    esp,0x10
c00019a3:	89 c1                	mov    ecx,eax
c00019a5:	85 c0                	test   eax,eax
c00019a7:	74 d1                	je     c000197a <dlmemalign+0x46>
c00019a9:	31 d2                	xor    edx,edx
c00019ab:	8d 70 f8             	lea    esi,[eax-0x8]
c00019ae:	f7 f7                	div    edi
c00019b0:	85 d2                	test   edx,edx
c00019b2:	74 62                	je     c0001a16 <dlmemalign+0xe2>
c00019b4:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019b8:	89 f8                	mov    eax,edi
c00019ba:	f7 d8                	neg    eax
c00019bc:	21 c3                	and    ebx,eax
c00019be:	83 eb 08             	sub    ebx,0x8
c00019c1:	89 d8                	mov    eax,ebx
c00019c3:	29 f0                	sub    eax,esi
c00019c5:	83 f8 0f             	cmp    eax,0xf
c00019c8:	77 02                	ja     c00019cc <dlmemalign+0x98>
c00019ca:	01 fb                	add    ebx,edi
c00019cc:	89 d8                	mov    eax,ebx
c00019ce:	29 f0                	sub    eax,esi
c00019d0:	89 c6                	mov    esi,eax
c00019d2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00019d5:	89 c2                	mov    edx,eax
c00019d7:	83 e2 fc             	and    edx,0xfffffffc
c00019da:	29 f2                	sub    edx,esi
c00019dc:	a8 02                	test   al,0x2
c00019de:	74 10                	je     c00019f0 <dlmemalign+0xbc>
c00019e0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00019e3:	83 ca 02             	or     edx,0x2
c00019e6:	8d 43 08             	lea    eax,[ebx+0x8]
c00019e9:	89 33                	mov    DWORD PTR [ebx],esi
c00019eb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00019ee:	eb 5f                	jmp    c0001a4f <dlmemalign+0x11b>
c00019f0:	83 ec 0c             	sub    esp,0xc
c00019f3:	89 d0                	mov    eax,edx
c00019f5:	83 c8 01             	or     eax,0x1
c00019f8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00019fb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a00:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a03:	83 e0 01             	and    eax,0x1
c0001a06:	09 f0                	or     eax,esi
c0001a08:	89 de                	mov    esi,ebx
c0001a0a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a0d:	51                   	push   ecx
c0001a0e:	e8 40 f3 ff ff       	call   c0000d53 <dlfree>
c0001a13:	83 c4 10             	add    esp,0x10
c0001a16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a19:	a8 02                	test   al,0x2
c0001a1b:	75 2f                	jne    c0001a4c <dlmemalign+0x118>
c0001a1d:	83 e0 fc             	and    eax,0xfffffffc
c0001a20:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a23:	39 c2                	cmp    edx,eax
c0001a25:	73 25                	jae    c0001a4c <dlmemalign+0x118>
c0001a27:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a2a:	83 ec 0c             	sub    esp,0xc
c0001a2d:	29 e8                	sub    eax,ebp
c0001a2f:	83 c2 08             	add    edx,0x8
c0001a32:	83 c8 01             	or     eax,0x1
c0001a35:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001a38:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a3b:	83 e0 01             	and    eax,0x1
c0001a3e:	09 c5                	or     ebp,eax
c0001a40:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a43:	52                   	push   edx
c0001a44:	e8 0a f3 ff ff       	call   c0000d53 <dlfree>
c0001a49:	83 c4 10             	add    esp,0x10
c0001a4c:	8d 46 08             	lea    eax,[esi+0x8]
c0001a4f:	83 c4 0c             	add    esp,0xc
c0001a52:	5b                   	pop    ebx
c0001a53:	5e                   	pop    esi
c0001a54:	5f                   	pop    edi
c0001a55:	5d                   	pop    ebp
c0001a56:	c3                   	ret    

c0001a57 <dlcalloc>:
c0001a57:	53                   	push   ebx
c0001a58:	83 ec 14             	sub    esp,0x14
c0001a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a5f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a64:	50                   	push   eax
c0001a65:	e8 b0 f7 ff ff       	call   c000121a <dlmalloc>
c0001a6a:	83 c4 10             	add    esp,0x10
c0001a6d:	89 c3                	mov    ebx,eax
c0001a6f:	85 c0                	test   eax,eax
c0001a71:	74 6e                	je     c0001ae1 <dlcalloc+0x8a>
c0001a73:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001a76:	a8 02                	test   al,0x2
c0001a78:	75 67                	jne    c0001ae1 <dlcalloc+0x8a>
c0001a7a:	83 e0 fc             	and    eax,0xfffffffc
c0001a7d:	83 e8 04             	sub    eax,0x4
c0001a80:	83 f8 27             	cmp    eax,0x27
c0001a83:	76 0f                	jbe    c0001a94 <dlcalloc+0x3d>
c0001a85:	52                   	push   edx
c0001a86:	50                   	push   eax
c0001a87:	6a 00                	push   0x0
c0001a89:	53                   	push   ebx
c0001a8a:	e8 61 ea ff ff       	call   c00004f0 <memset>
c0001a8f:	83 c4 10             	add    esp,0x10
c0001a92:	eb 4d                	jmp    c0001ae1 <dlcalloc+0x8a>
c0001a94:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001a9a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001aa1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001aa8:	83 f8 13             	cmp    eax,0x13
c0001aab:	76 34                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001aad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ab4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001abb:	83 f8 1b             	cmp    eax,0x1b
c0001abe:	76 21                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ac0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001ac7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001ace:	83 f8 23             	cmp    eax,0x23
c0001ad1:	76 0e                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ad3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001ada:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001ae1:	89 d8                	mov    eax,ebx
c0001ae3:	83 c4 08             	add    esp,0x8
c0001ae6:	5b                   	pop    ebx
c0001ae7:	c3                   	ret    

c0001ae8 <dlcfree>:
c0001ae8:	e9 66 f2 ff ff       	jmp    c0000d53 <dlfree>

c0001aed <dlindependent_calloc>:
c0001aed:	83 ec 28             	sub    esp,0x28
c0001af0:	b9 03 00 00 00       	mov    ecx,0x3
c0001af5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001af9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001afd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b09:	e8 9a fa ff ff       	call   c00015a8 <iALLOc>
c0001b0e:	83 c4 2c             	add    esp,0x2c
c0001b11:	c3                   	ret    

c0001b12 <dlindependent_comalloc>:
c0001b12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b1a:	31 c9                	xor    ecx,ecx
c0001b1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b24:	e9 7f fa ff ff       	jmp    c00015a8 <iALLOc>

c0001b29 <dlvalloc>:
c0001b29:	83 ec 0c             	sub    esp,0xc
c0001b2c:	83 3d 00 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029100,0x0
c0001b33:	75 0a                	jne    c0001b3f <dlvalloc+0x16>
c0001b35:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001b3a:	e8 2d f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b3f:	50                   	push   eax
c0001b40:	50                   	push   eax
c0001b41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b45:	ff 35 5c 94 02 c0    	push   DWORD PTR ds:0xc002945c
c0001b4b:	e8 e4 fd ff ff       	call   c0001934 <dlmemalign>
c0001b50:	83 c4 1c             	add    esp,0x1c
c0001b53:	c3                   	ret    

c0001b54 <dlpvalloc>:
c0001b54:	83 ec 0c             	sub    esp,0xc
c0001b57:	83 3d 00 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029100,0x0
c0001b5e:	75 0a                	jne    c0001b6a <dlpvalloc+0x16>
c0001b60:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001b65:	e8 02 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b6a:	a1 5c 94 02 c0       	mov    eax,ds:0xc002945c
c0001b6f:	89 c1                	mov    ecx,eax
c0001b71:	52                   	push   edx
c0001b72:	f7 d9                	neg    ecx
c0001b74:	52                   	push   edx
c0001b75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001b79:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001b7d:	21 ca                	and    edx,ecx
c0001b7f:	52                   	push   edx
c0001b80:	50                   	push   eax
c0001b81:	e8 ae fd ff ff       	call   c0001934 <dlmemalign>
c0001b86:	83 c4 1c             	add    esp,0x1c
c0001b89:	c3                   	ret    

c0001b8a <dlmalloc_trim>:
c0001b8a:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001b8f:	e8 d8 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b94:	31 c0                	xor    eax,eax
c0001b96:	c3                   	ret    

c0001b97 <dlmalloc_usable_size>:
c0001b97:	53                   	push   ebx
c0001b98:	31 c0                	xor    eax,eax
c0001b9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001b9e:	85 c9                	test   ecx,ecx
c0001ba0:	74 24                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001ba2:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001ba5:	f6 c2 02             	test   dl,0x2
c0001ba8:	74 08                	je     c0001bb2 <dlmalloc_usable_size+0x1b>
c0001baa:	83 e2 fc             	and    edx,0xfffffffc
c0001bad:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bb0:	eb 14                	jmp    c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bb2:	89 d3                	mov    ebx,edx
c0001bb4:	31 c0                	xor    eax,eax
c0001bb6:	83 e3 fe             	and    ebx,0xfffffffe
c0001bb9:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bbe:	74 06                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bc0:	83 e2 fc             	and    edx,0xfffffffc
c0001bc3:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bc6:	5b                   	pop    ebx
c0001bc7:	c3                   	ret    

c0001bc8 <dlmallinfo>:
c0001bc8:	55                   	push   ebp
c0001bc9:	57                   	push   edi
c0001bca:	56                   	push   esi
c0001bcb:	53                   	push   ebx
c0001bcc:	83 ec 08             	sub    esp,0x8
c0001bcf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001bd3:	83 3d 2c 91 02 c0 00 	cmp    DWORD PTR ds:0xc002912c,0x0
c0001bda:	75 0a                	jne    c0001be6 <dlmallinfo+0x1e>
c0001bdc:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001be1:	e8 86 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001be6:	a1 2c 91 02 c0       	mov    eax,ds:0xc002912c
c0001beb:	31 ed                	xor    ebp,ebp
c0001bed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001bf0:	31 c9                	xor    ecx,ecx
c0001bf2:	83 e0 fc             	and    eax,0xfffffffc
c0001bf5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bf9:	31 c0                	xor    eax,eax
c0001bfb:	8b 14 85 04 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6efc]
c0001c02:	85 d2                	test   edx,edx
c0001c04:	74 0e                	je     c0001c14 <dlmallinfo+0x4c>
c0001c06:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c09:	45                   	inc    ebp
c0001c0a:	83 e6 fc             	and    esi,0xfffffffc
c0001c0d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c10:	01 f1                	add    ecx,esi
c0001c12:	eb ee                	jmp    c0001c02 <dlmallinfo+0x3a>
c0001c14:	40                   	inc    eax
c0001c15:	83 f8 0a             	cmp    eax,0xa
c0001c18:	75 e1                	jne    c0001bfb <dlmallinfo+0x33>
c0001c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c1e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c25:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c28:	b8 34 91 02 c0       	mov    eax,0xc0029134
c0001c2d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c30:	39 f0                	cmp    eax,esi
c0001c32:	74 10                	je     c0001c44 <dlmallinfo+0x7c>
c0001c34:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c37:	ff 04 24             	inc    DWORD PTR [esp]
c0001c3a:	83 e7 fc             	and    edi,0xfffffffc
c0001c3d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c40:	01 fa                	add    edx,edi
c0001c42:	eb ec                	jmp    c0001c30 <dlmallinfo+0x68>
c0001c44:	83 c0 08             	add    eax,0x8
c0001c47:	3d 2c 94 02 c0       	cmp    eax,0xc002942c
c0001c4c:	75 df                	jne    c0001c2d <dlmallinfo+0x65>
c0001c4e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c51:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c54:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c57:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0001c5c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c5f:	89 03                	mov    DWORD PTR [ebx],eax
c0001c61:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001c64:	8b 35 50 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029450
c0001c6a:	29 d0                	sub    eax,edx
c0001c6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c6f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001c72:	8b 35 64 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029464
c0001c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c7c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001c7f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001c82:	8b 35 74 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029474
c0001c88:	89 d8                	mov    eax,ebx
c0001c8a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001c8d:	83 c4 08             	add    esp,0x8
c0001c90:	5b                   	pop    ebx
c0001c91:	5e                   	pop    esi
c0001c92:	5f                   	pop    edi
c0001c93:	5d                   	pop    ebp
c0001c94:	c2 04 00             	ret    0x4

c0001c97 <dlmalloc_stats>:
c0001c97:	83 ec 30             	sub    esp,0x30
c0001c9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001c9e:	50                   	push   eax
c0001c9f:	e8 24 ff ff ff       	call   c0001bc8 <dlmallinfo>
c0001ca4:	83 c4 30             	add    esp,0x30
c0001ca7:	c3                   	ret    

c0001ca8 <dlmallopt>:
c0001ca8:	56                   	push   esi
c0001ca9:	b8 00 91 02 c0       	mov    eax,0xc0029100
c0001cae:	53                   	push   ebx
c0001caf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001cb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001cb7:	e8 b0 ef ff ff       	call   c0000c6c <malloc_consolidate>
c0001cbc:	8d 46 04             	lea    eax,[esi+0x4]
c0001cbf:	83 f8 05             	cmp    eax,0x5
c0001cc2:	77 5d                	ja     c0001d21 <dlmallopt+0x79>
c0001cc4:	ff 24 85 24 2b 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd4dc]
c0001ccb:	83 fb 50             	cmp    ebx,0x50
c0001cce:	77 51                	ja     c0001d21 <dlmallopt+0x79>
c0001cd0:	ba 08 00 00 00       	mov    edx,0x8
c0001cd5:	85 db                	test   ebx,ebx
c0001cd7:	74 12                	je     c0001ceb <dlmallopt+0x43>
c0001cd9:	83 c3 0b             	add    ebx,0xb
c0001cdc:	ba 10 00 00 00       	mov    edx,0x10
c0001ce1:	83 fb 0f             	cmp    ebx,0xf
c0001ce4:	76 05                	jbe    c0001ceb <dlmallopt+0x43>
c0001ce6:	89 da                	mov    edx,ebx
c0001ce8:	83 e2 f8             	and    edx,0xfffffff8
c0001ceb:	a1 00 91 02 c0       	mov    eax,ds:0xc0029100
c0001cf0:	83 e0 03             	and    eax,0x3
c0001cf3:	09 d0                	or     eax,edx
c0001cf5:	a3 00 91 02 c0       	mov    ds:0xc0029100,eax
c0001cfa:	eb 27                	jmp    c0001d23 <dlmallopt+0x7b>
c0001cfc:	89 1d 44 94 02 c0    	mov    DWORD PTR ds:0xc0029444,ebx
c0001d02:	eb 16                	jmp    c0001d1a <dlmallopt+0x72>
c0001d04:	89 1d 48 94 02 c0    	mov    DWORD PTR ds:0xc0029448,ebx
c0001d0a:	eb 0e                	jmp    c0001d1a <dlmallopt+0x72>
c0001d0c:	89 1d 4c 94 02 c0    	mov    DWORD PTR ds:0xc002944c,ebx
c0001d12:	eb 06                	jmp    c0001d1a <dlmallopt+0x72>
c0001d14:	89 1d 54 94 02 c0    	mov    DWORD PTR ds:0xc0029454,ebx
c0001d1a:	be 01 00 00 00       	mov    esi,0x1
c0001d1f:	eb 02                	jmp    c0001d23 <dlmallopt+0x7b>
c0001d21:	31 f6                	xor    esi,esi
c0001d23:	89 f0                	mov    eax,esi
c0001d25:	5b                   	pop    ebx
c0001d26:	5e                   	pop    esi
c0001d27:	c3                   	ret    

c0001d28 <isblank>:
c0001d28:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d2d:	74 09                	je     c0001d38 <isblank+0x10>
c0001d2f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d34:	75 0a                	jne    c0001d40 <isblank+0x18>
c0001d36:	66 90                	xchg   ax,ax
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <iscntrl>:
c0001d48:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d4d:	7e 09                	jle    c0001d58 <iscntrl+0x10>
c0001d4f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d54:	75 0a                	jne    c0001d60 <iscntrl+0x18>
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 01 00 00 00       	mov    eax,0x1
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax
c0001d60:	b8 00 00 00 00       	mov    eax,0x0
c0001d65:	c3                   	ret    
c0001d66:	66 90                	xchg   ax,ax

c0001d68 <isdigit>:
c0001d68:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d6d:	7e 0d                	jle    c0001d7c <isdigit+0x14>
c0001d6f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001d74:	7f 06                	jg     c0001d7c <isdigit+0x14>
c0001d76:	b8 01 00 00 00       	mov    eax,0x1
c0001d7b:	c3                   	ret    
c0001d7c:	b8 00 00 00 00       	mov    eax,0x0
c0001d81:	c3                   	ret    
c0001d82:	66 90                	xchg   ax,ax

c0001d84 <islower>:
c0001d84:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d89:	7e 0d                	jle    c0001d98 <islower+0x14>
c0001d8b:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001d90:	7f 06                	jg     c0001d98 <islower+0x14>
c0001d92:	b8 01 00 00 00       	mov    eax,0x1
c0001d97:	c3                   	ret    
c0001d98:	b8 00 00 00 00       	mov    eax,0x0
c0001d9d:	c3                   	ret    
c0001d9e:	66 90                	xchg   ax,ax

c0001da0 <isspace>:
c0001da0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001da5:	7c 19                	jl     c0001dc0 <isspace+0x20>
c0001da7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001dac:	7e 0a                	jle    c0001db8 <isspace+0x18>
c0001dae:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001db3:	75 0b                	jne    c0001dc0 <isspace+0x20>
c0001db5:	8d 76 00             	lea    esi,[esi+0x0]
c0001db8:	b8 01 00 00 00       	mov    eax,0x1
c0001dbd:	c3                   	ret    
c0001dbe:	66 90                	xchg   ax,ax
c0001dc0:	b8 00 00 00 00       	mov    eax,0x0
c0001dc5:	c3                   	ret    
c0001dc6:	66 90                	xchg   ax,ax

c0001dc8 <isupper>:
c0001dc8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dcd:	7e 0d                	jle    c0001ddc <isupper+0x14>
c0001dcf:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001dd4:	7f 06                	jg     c0001ddc <isupper+0x14>
c0001dd6:	b8 01 00 00 00       	mov    eax,0x1
c0001ddb:	c3                   	ret    
c0001ddc:	b8 00 00 00 00       	mov    eax,0x0
c0001de1:	c3                   	ret    
c0001de2:	66 90                	xchg   ax,ax

c0001de4 <isalpha>:
c0001de4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001de8:	e8 db ff ff ff       	call   c0001dc8 <isupper>
c0001ded:	83 c4 04             	add    esp,0x4
c0001df0:	85 c0                	test   eax,eax
c0001df2:	75 10                	jne    c0001e04 <isalpha+0x20>
c0001df4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001df8:	e8 87 ff ff ff       	call   c0001d84 <islower>
c0001dfd:	83 c4 04             	add    esp,0x4
c0001e00:	85 c0                	test   eax,eax
c0001e02:	74 08                	je     c0001e0c <isalpha+0x28>
c0001e04:	b8 01 00 00 00       	mov    eax,0x1
c0001e09:	c3                   	ret    
c0001e0a:	66 90                	xchg   ax,ax
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalnum>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 c7 ff ff ff       	call   c0001de4 <isalpha>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalnum+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 3b ff ff ff       	call   c0001d68 <isdigit>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalnum+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <ispunct>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalnum>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 28                	jne    c0001e7c <ispunct+0x38>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 43 ff ff ff       	call   c0001da0 <isspace>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	75 18                	jne    c0001e7c <ispunct+0x38>
c0001e64:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e68:	e8 db fe ff ff       	call   c0001d48 <iscntrl>
c0001e6d:	83 c4 04             	add    esp,0x4
c0001e70:	85 c0                	test   eax,eax
c0001e72:	75 08                	jne    c0001e7c <ispunct+0x38>
c0001e74:	b8 01 00 00 00       	mov    eax,0x1
c0001e79:	c3                   	ret    
c0001e7a:	66 90                	xchg   ax,ax
c0001e7c:	b8 00 00 00 00       	mov    eax,0x0
c0001e81:	c3                   	ret    
c0001e82:	66 90                	xchg   ax,ax

c0001e84 <isgraph>:
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 87 ff ff ff       	call   c0001e14 <isalnum>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 10                	jne    c0001ea4 <isgraph+0x20>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 a7 ff ff ff       	call   c0001e44 <ispunct>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	74 08                	je     c0001eac <isgraph+0x28>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isprint>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 c7 ff ff ff       	call   c0001e84 <isgraph>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 08                	jne    c0001ecc <isprint+0x18>
c0001ec4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ec9:	75 09                	jne    c0001ed4 <isprint+0x20>
c0001ecb:	90                   	nop
c0001ecc:	b8 01 00 00 00       	mov    eax,0x1
c0001ed1:	c3                   	ret    
c0001ed2:	66 90                	xchg   ax,ax
c0001ed4:	b8 00 00 00 00       	mov    eax,0x0
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax

c0001edc <isxdigit>:
c0001edc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee0:	e8 83 fe ff ff       	call   c0001d68 <isdigit>
c0001ee5:	83 c4 04             	add    esp,0x4
c0001ee8:	85 c0                	test   eax,eax
c0001eea:	75 20                	jne    c0001f0c <isxdigit+0x30>
c0001eec:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ef1:	7e 09                	jle    c0001efc <isxdigit+0x20>
c0001ef3:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ef8:	7e 12                	jle    c0001f0c <isxdigit+0x30>
c0001efa:	66 90                	xchg   ax,ax
c0001efc:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f01:	7e 11                	jle    c0001f14 <isxdigit+0x38>
c0001f03:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f08:	7f 0a                	jg     c0001f14 <isxdigit+0x38>
c0001f0a:	66 90                	xchg   ax,ax
c0001f0c:	b8 01 00 00 00       	mov    eax,0x1
c0001f11:	c3                   	ret    
c0001f12:	66 90                	xchg   ax,ax
c0001f14:	b8 00 00 00 00       	mov    eax,0x0
c0001f19:	c3                   	ret    
c0001f1a:	66 90                	xchg   ax,ax

c0001f1c <LWIP_PLATFORM_HTONS>:
c0001f1c:	83 ec 04             	sub    esp,0x4
c0001f1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f2b:	c1 e8 08             	shr    eax,0x8
c0001f2e:	89 c2                	mov    edx,eax
c0001f30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f34:	c1 e0 08             	shl    eax,0x8
c0001f37:	09 d0                	or     eax,edx
c0001f39:	83 c4 04             	add    esp,0x4
c0001f3c:	c3                   	ret    
c0001f3d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f40 <LWIP_PLATFORM_HTONL>:
c0001f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f44:	c1 e8 18             	shr    eax,0x18
c0001f47:	89 c2                	mov    edx,eax
c0001f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f4d:	c1 e8 08             	shr    eax,0x8
c0001f50:	25 00 ff 00 00       	and    eax,0xff00
c0001f55:	09 c2                	or     edx,eax
c0001f57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f5b:	c1 e0 08             	shl    eax,0x8
c0001f5e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f63:	09 c2                	or     edx,eax
c0001f65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f69:	c1 e0 18             	shl    eax,0x18
c0001f6c:	09 d0                	or     eax,edx
c0001f6e:	c3                   	ret    

c0001f6f <disk_status>:
c0001f6f:	31 c0                	xor    eax,eax
c0001f71:	c3                   	ret    

c0001f72 <disk_initialize>:
c0001f72:	31 c0                	xor    eax,eax
c0001f74:	c3                   	ret    

c0001f75 <disk_read>:
c0001f75:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f7a:	0f b6 04 85 00 fc 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0400]
c0001f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f86:	e9 19 a7 01 00       	jmp    c001c6a4 <fatWrapperReadDisk>

c0001f8b <disk_write>:
c0001f8b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f90:	0f b6 04 85 00 fc 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0400]
c0001f98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f9c:	e9 43 a7 01 00       	jmp    c001c6e4 <fatWrapperWriteDisk>

c0001fa1 <disk_ioctl>:
c0001fa1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001faa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faf:	0f b6 04 85 00 fc 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0400]
c0001fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fbb:	e9 64 a7 01 00       	jmp    c001c724 <fatWrapperIoctl>

c0001fc0 <ld_word>:
c0001fc0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fc4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fc7:	c1 e2 08             	shl    edx,0x8
c0001fca:	09 d0                	or     eax,edx
c0001fcc:	c3                   	ret    

c0001fcd <ld_dword>:
c0001fcd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001fd1:	89 d1                	mov    ecx,edx
c0001fd3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fd7:	c1 e1 08             	shl    ecx,0x8
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	09 ca                	or     edx,ecx
c0001fdf:	c1 e2 08             	shl    edx,0x8
c0001fe2:	09 d0                	or     eax,edx
c0001fe4:	c3                   	ret    

c0001fe5 <st_word>:
c0001fe5:	66 89 10             	mov    WORD PTR [eax],dx
c0001fe8:	c3                   	ret    

c0001fe9 <st_dword>:
c0001fe9:	89 10                	mov    DWORD PTR [eax],edx
c0001feb:	c3                   	ret    

c0001fec <mem_cpy>:
c0001fec:	85 c9                	test   ecx,ecx
c0001fee:	74 10                	je     c0002000 <mem_cpy+0x14>
c0001ff0:	57                   	push   edi
c0001ff1:	01 c1                	add    ecx,eax
c0001ff3:	56                   	push   esi
c0001ff4:	89 c7                	mov    edi,eax
c0001ff6:	89 d6                	mov    esi,edx
c0001ff8:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ff9:	39 f9                	cmp    ecx,edi
c0001ffb:	75 fb                	jne    c0001ff8 <mem_cpy+0xc>
c0001ffd:	5e                   	pop    esi
c0001ffe:	5f                   	pop    edi
c0001fff:	c3                   	ret    
c0002000:	c3                   	ret    

c0002001 <mem_set>:
c0002001:	01 c1                	add    ecx,eax
c0002003:	40                   	inc    eax
c0002004:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0002007:	39 c8                	cmp    eax,ecx
c0002009:	75 f8                	jne    c0002003 <mem_set+0x2>
c000200b:	c3                   	ret    

c000200c <mem_cmp>:
c000200c:	57                   	push   edi
c000200d:	56                   	push   esi
c000200e:	89 c6                	mov    esi,eax
c0002010:	53                   	push   ebx
c0002011:	46                   	inc    esi
c0002012:	42                   	inc    edx
c0002013:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0002017:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000201b:	29 fb                	sub    ebx,edi
c000201d:	89 cf                	mov    edi,ecx
c000201f:	29 f7                	sub    edi,esi
c0002021:	01 c7                	add    edi,eax
c0002023:	74 04                	je     c0002029 <mem_cmp+0x1d>
c0002025:	85 db                	test   ebx,ebx
c0002027:	74 e8                	je     c0002011 <mem_cmp+0x5>
c0002029:	89 d8                	mov    eax,ebx
c000202b:	5b                   	pop    ebx
c000202c:	5e                   	pop    esi
c000202d:	5f                   	pop    edi
c000202e:	c3                   	ret    

c000202f <chk_chr>:
c000202f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002032:	85 c9                	test   ecx,ecx
c0002034:	74 07                	je     c000203d <chk_chr+0xe>
c0002036:	39 d1                	cmp    ecx,edx
c0002038:	74 03                	je     c000203d <chk_chr+0xe>
c000203a:	40                   	inc    eax
c000203b:	eb f2                	jmp    c000202f <chk_chr>
c000203d:	89 c8                	mov    eax,ecx
c000203f:	c3                   	ret    

c0002040 <dbc_1st>:
c0002040:	31 c0                	xor    eax,eax
c0002042:	c3                   	ret    

c0002043 <dbc_2nd>:
c0002043:	31 c0                	xor    eax,eax
c0002045:	c3                   	ret    

c0002046 <tchar2uni>:
c0002046:	57                   	push   edi
c0002047:	56                   	push   esi
c0002048:	53                   	push   ebx
c0002049:	8b 18                	mov    ebx,DWORD PTR [eax]
c000204b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000204d:	8d 73 01             	lea    esi,[ebx+0x1]
c0002050:	f6 c1 80             	test   cl,0x80
c0002053:	75 0a                	jne    c000205f <tchar2uni+0x19>
c0002055:	0f b6 d1             	movzx  edx,cl
c0002058:	89 f3                	mov    ebx,esi
c000205a:	e9 b2 00 00 00       	jmp    c0002111 <tchar2uni+0xcb>
c000205f:	89 ca                	mov    edx,ecx
c0002061:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002067:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000206d:	89 ca                	mov    edx,ecx
c000206f:	75 0a                	jne    c000207b <tchar2uni+0x35>
c0002071:	83 e2 1f             	and    edx,0x1f
c0002074:	b9 01 00 00 00       	mov    ecx,0x1
c0002079:	eb 37                	jmp    c00020b2 <tchar2uni+0x6c>
c000207b:	81 e2 f0 00 00 00    	and    edx,0xf0
c0002081:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002087:	75 0c                	jne    c0002095 <tchar2uni+0x4f>
c0002089:	89 ca                	mov    edx,ecx
c000208b:	b9 02 00 00 00       	mov    ecx,0x2
c0002090:	83 e2 0f             	and    edx,0xf
c0002093:	eb 1d                	jmp    c00020b2 <tchar2uni+0x6c>
c0002095:	89 cf                	mov    edi,ecx
c0002097:	83 ca ff             	or     edx,0xffffffff
c000209a:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020a0:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020a6:	75 70                	jne    c0002118 <tchar2uni+0xd2>
c00020a8:	89 ca                	mov    edx,ecx
c00020aa:	b9 03 00 00 00       	mov    ecx,0x3
c00020af:	83 e2 07             	and    edx,0x7
c00020b2:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020b6:	46                   	inc    esi
c00020b7:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020ba:	89 cf                	mov    edi,ecx
c00020bc:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020c2:	83 c7 80             	add    edi,0xffffff80
c00020c5:	75 4e                	jne    c0002115 <tchar2uni+0xcf>
c00020c7:	c1 e2 06             	shl    edx,0x6
c00020ca:	83 e1 3f             	and    ecx,0x3f
c00020cd:	09 ca                	or     edx,ecx
c00020cf:	39 de                	cmp    esi,ebx
c00020d1:	75 e3                	jne    c00020b6 <tchar2uni+0x70>
c00020d3:	8d 4a 80             	lea    ecx,[edx-0x80]
c00020d6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c00020dc:	77 37                	ja     c0002115 <tchar2uni+0xcf>
c00020de:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c00020e4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020ea:	76 29                	jbe    c0002115 <tchar2uni+0xcf>
c00020ec:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020f2:	76 1d                	jbe    c0002111 <tchar2uni+0xcb>
c00020f4:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c00020fa:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002100:	c1 e1 06             	shl    ecx,0x6
c0002103:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002109:	09 ca                	or     edx,ecx
c000210b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002111:	89 18                	mov    DWORD PTR [eax],ebx
c0002113:	eb 03                	jmp    c0002118 <tchar2uni+0xd2>
c0002115:	83 ca ff             	or     edx,0xffffffff
c0002118:	5b                   	pop    ebx
c0002119:	89 d0                	mov    eax,edx
c000211b:	5e                   	pop    esi
c000211c:	5f                   	pop    edi
c000211d:	c3                   	ret    

c000211e <put_utf>:
c000211e:	53                   	push   ebx
c000211f:	83 f8 7f             	cmp    eax,0x7f
c0002122:	89 c3                	mov    ebx,eax
c0002124:	b0 00                	mov    al,0x0
c0002126:	77 11                	ja     c0002139 <put_utf+0x1b>
c0002128:	85 c9                	test   ecx,ecx
c000212a:	0f 84 e5 00 00 00    	je     c0002215 <put_utf+0xf7>
c0002130:	88 1a                	mov    BYTE PTR [edx],bl
c0002132:	b0 01                	mov    al,0x1
c0002134:	e9 dc 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002139:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000213f:	77 23                	ja     c0002164 <put_utf+0x46>
c0002141:	83 f9 01             	cmp    ecx,0x1
c0002144:	0f 86 cb 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c000214a:	89 d8                	mov    eax,ebx
c000214c:	83 e3 3f             	and    ebx,0x3f
c000214f:	c1 e8 06             	shr    eax,0x6
c0002152:	83 cb 80             	or     ebx,0xffffff80
c0002155:	83 c8 c0             	or     eax,0xffffffc0
c0002158:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c000215b:	88 02                	mov    BYTE PTR [edx],al
c000215d:	b0 02                	mov    al,0x2
c000215f:	e9 b1 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002164:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c000216a:	77 40                	ja     c00021ac <put_utf+0x8e>
c000216c:	83 f9 02             	cmp    ecx,0x2
c000216f:	0f 86 a0 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002175:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c000217b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002181:	0f 86 8e 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002187:	89 d8                	mov    eax,ebx
c0002189:	c1 e8 0c             	shr    eax,0xc
c000218c:	83 c8 e0             	or     eax,0xffffffe0
c000218f:	88 02                	mov    BYTE PTR [edx],al
c0002191:	89 d8                	mov    eax,ebx
c0002193:	83 e3 3f             	and    ebx,0x3f
c0002196:	c1 e8 06             	shr    eax,0x6
c0002199:	83 cb 80             	or     ebx,0xffffff80
c000219c:	83 e0 3f             	and    eax,0x3f
c000219f:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021a2:	83 c8 80             	or     eax,0xffffff80
c00021a5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021a8:	b0 03                	mov    al,0x3
c00021aa:	eb 69                	jmp    c0002215 <put_utf+0xf7>
c00021ac:	83 f9 03             	cmp    ecx,0x3
c00021af:	76 64                	jbe    c0002215 <put_utf+0xf7>
c00021b1:	89 d9                	mov    ecx,ebx
c00021b3:	0f b7 c3             	movzx  eax,bx
c00021b6:	66 31 c9             	xor    cx,cx
c00021b9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021bf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021c5:	c1 e9 06             	shr    ecx,0x6
c00021c8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c00021ce:	77 43                	ja     c0002213 <put_utf+0xf5>
c00021d0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021d6:	77 3b                	ja     c0002213 <put_utf+0xf5>
c00021d8:	09 cb                	or     ebx,ecx
c00021da:	81 c3 00 00 01 00    	add    ebx,0x10000
c00021e0:	89 d8                	mov    eax,ebx
c00021e2:	c1 e8 12             	shr    eax,0x12
c00021e5:	83 c8 f0             	or     eax,0xfffffff0
c00021e8:	88 02                	mov    BYTE PTR [edx],al
c00021ea:	89 d8                	mov    eax,ebx
c00021ec:	c1 e8 0c             	shr    eax,0xc
c00021ef:	83 e0 3f             	and    eax,0x3f
c00021f2:	83 c8 80             	or     eax,0xffffff80
c00021f5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021f8:	89 d8                	mov    eax,ebx
c00021fa:	83 e3 3f             	and    ebx,0x3f
c00021fd:	c1 e8 06             	shr    eax,0x6
c0002200:	83 cb 80             	or     ebx,0xffffff80
c0002203:	83 e0 3f             	and    eax,0x3f
c0002206:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002209:	83 c8 80             	or     eax,0xffffff80
c000220c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000220f:	b0 04                	mov    al,0x4
c0002211:	eb 02                	jmp    c0002215 <put_utf+0xf7>
c0002213:	31 c0                	xor    eax,eax
c0002215:	5b                   	pop    ebx
c0002216:	c3                   	ret    

c0002217 <clst2sect>:
c0002217:	8d 4a fe             	lea    ecx,[edx-0x2]
c000221a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000221d:	83 ea 02             	sub    edx,0x2
c0002220:	39 ca                	cmp    edx,ecx
c0002222:	76 0d                	jbe    c0002231 <clst2sect+0x1a>
c0002224:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002228:	0f af d1             	imul   edx,ecx
c000222b:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000222e:	89 d0                	mov    eax,edx
c0002230:	c3                   	ret    
c0002231:	31 c0                	xor    eax,eax
c0002233:	c3                   	ret    

c0002234 <pick_lfn>:
c0002234:	55                   	push   ebp
c0002235:	57                   	push   edi
c0002236:	89 c7                	mov    edi,eax
c0002238:	56                   	push   esi
c0002239:	8d 42 1a             	lea    eax,[edx+0x1a]
c000223c:	53                   	push   ebx
c000223d:	89 d3                	mov    ebx,edx
c000223f:	e8 7c fd ff ff       	call   c0001fc0 <ld_word>
c0002244:	66 85 c0             	test   ax,ax
c0002247:	74 04                	je     c000224d <pick_lfn+0x19>
c0002249:	31 c0                	xor    eax,eax
c000224b:	eb 62                	jmp    c00022af <pick_lfn+0x7b>
c000224d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002250:	bd 01 00 00 00       	mov    ebp,0x1
c0002255:	83 e1 bf             	and    ecx,0xffffffbf
c0002258:	31 f6                	xor    esi,esi
c000225a:	49                   	dec    ecx
c000225b:	6b c9 0d             	imul   ecx,ecx,0xd
c000225e:	0f b6 86 80 2c 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdd380]
c0002265:	01 d8                	add    eax,ebx
c0002267:	e8 54 fd ff ff       	call   c0001fc0 <ld_word>
c000226c:	66 85 ed             	test   bp,bp
c000226f:	74 11                	je     c0002282 <pick_lfn+0x4e>
c0002271:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002277:	77 d0                	ja     c0002249 <pick_lfn+0x15>
c0002279:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c000227d:	89 c5                	mov    ebp,eax
c000227f:	41                   	inc    ecx
c0002280:	eb 0a                	jmp    c000228c <pick_lfn+0x58>
c0002282:	0f b7 c0             	movzx  eax,ax
c0002285:	3d ff ff 00 00       	cmp    eax,0xffff
c000228a:	75 bd                	jne    c0002249 <pick_lfn+0x15>
c000228c:	46                   	inc    esi
c000228d:	83 fe 0d             	cmp    esi,0xd
c0002290:	75 cc                	jne    c000225e <pick_lfn+0x2a>
c0002292:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002295:	74 13                	je     c00022aa <pick_lfn+0x76>
c0002297:	66 85 ed             	test   bp,bp
c000229a:	74 0e                	je     c00022aa <pick_lfn+0x76>
c000229c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a2:	77 a5                	ja     c0002249 <pick_lfn+0x15>
c00022a4:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022aa:	b8 01 00 00 00       	mov    eax,0x1
c00022af:	5b                   	pop    ebx
c00022b0:	5e                   	pop    esi
c00022b1:	5f                   	pop    edi
c00022b2:	5d                   	pop    ebp
c00022b3:	c3                   	ret    

c00022b4 <put_lfn>:
c00022b4:	55                   	push   ebp
c00022b5:	57                   	push   edi
c00022b6:	89 d7                	mov    edi,edx
c00022b8:	56                   	push   esi
c00022b9:	31 f6                	xor    esi,esi
c00022bb:	53                   	push   ebx
c00022bc:	83 ec 0c             	sub    esp,0xc
c00022bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022c3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00022c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00022cb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022d1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00022d4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00022d7:	31 d2                	xor    edx,edx
c00022d9:	e8 07 fd ff ff       	call   c0001fe5 <st_word>
c00022de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00022e5:	0f b6 d9             	movzx  ebx,cl
c00022e8:	4b                   	dec    ebx
c00022e9:	6b db 0d             	imul   ebx,ebx,0xd
c00022ec:	0f b7 c6             	movzx  eax,si
c00022ef:	3d ff ff 00 00       	cmp    eax,0xffff
c00022f4:	74 09                	je     c00022ff <put_lfn+0x4b>
c00022f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022fa:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00022fe:	43                   	inc    ebx
c00022ff:	0f b7 ee             	movzx  ebp,si
c0002302:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002305:	89 ea                	mov    edx,ebp
c0002307:	0f b6 80 80 2c 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd380]
c000230e:	01 f8                	add    eax,edi
c0002310:	e8 d0 fc ff ff       	call   c0001fe5 <st_word>
c0002315:	85 ed                	test   ebp,ebp
c0002317:	75 05                	jne    c000231e <put_lfn+0x6a>
c0002319:	be ff ff 00 00       	mov    esi,0xffff
c000231e:	ff 04 24             	inc    DWORD PTR [esp]
c0002321:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002325:	75 c5                	jne    c00022ec <put_lfn+0x38>
c0002327:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000232d:	74 0b                	je     c000233a <put_lfn+0x86>
c000232f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002333:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002338:	75 07                	jne    c0002341 <put_lfn+0x8d>
c000233a:	83 c9 40             	or     ecx,0x40
c000233d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002341:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002345:	88 07                	mov    BYTE PTR [edi],al
c0002347:	83 c4 0c             	add    esp,0xc
c000234a:	5b                   	pop    ebx
c000234b:	5e                   	pop    esi
c000234c:	5f                   	pop    edi
c000234d:	5d                   	pop    ebp
c000234e:	c3                   	ret    

c000234f <gen_numname>:
c000234f:	57                   	push   edi
c0002350:	89 cf                	mov    edi,ecx
c0002352:	56                   	push   esi
c0002353:	b9 0b 00 00 00       	mov    ecx,0xb
c0002358:	53                   	push   ebx
c0002359:	89 c6                	mov    esi,eax
c000235b:	83 ec 10             	sub    esp,0x10
c000235e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002362:	e8 85 fc ff ff       	call   c0001fec <mem_cpy>
c0002367:	83 fb 05             	cmp    ebx,0x5
c000236a:	76 30                	jbe    c000239c <gen_numname+0x4d>
c000236c:	66 8b 07             	mov    ax,WORD PTR [edi]
c000236f:	66 85 c0             	test   ax,ax
c0002372:	74 28                	je     c000239c <gen_numname+0x4d>
c0002374:	83 c7 02             	add    edi,0x2
c0002377:	ba 10 00 00 00       	mov    edx,0x10
c000237c:	01 db                	add    ebx,ebx
c000237e:	89 c1                	mov    ecx,eax
c0002380:	c1 e0 10             	shl    eax,0x10
c0002383:	83 e1 01             	and    ecx,0x1
c0002386:	c1 e8 11             	shr    eax,0x11
c0002389:	01 cb                	add    ebx,ecx
c000238b:	0f ba e3 10          	bt     ebx,0x10
c000238f:	73 06                	jae    c0002397 <gen_numname+0x48>
c0002391:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002397:	4a                   	dec    edx
c0002398:	75 e2                	jne    c000237c <gen_numname+0x2d>
c000239a:	eb d0                	jmp    c000236c <gen_numname+0x1d>
c000239c:	b8 07 00 00 00       	mov    eax,0x7
c00023a1:	89 d9                	mov    ecx,ebx
c00023a3:	83 e1 0f             	and    ecx,0xf
c00023a6:	8d 79 30             	lea    edi,[ecx+0x30]
c00023a9:	89 fa                	mov    edx,edi
c00023ab:	83 ff 39             	cmp    edi,0x39
c00023ae:	76 03                	jbe    c00023b3 <gen_numname+0x64>
c00023b0:	8d 51 37             	lea    edx,[ecx+0x37]
c00023b3:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023b6:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023ba:	89 da                	mov    edx,ebx
c00023bc:	c1 ea 04             	shr    edx,0x4
c00023bf:	83 fb 0f             	cmp    ebx,0xf
c00023c2:	76 06                	jbe    c00023ca <gen_numname+0x7b>
c00023c4:	89 c8                	mov    eax,ecx
c00023c6:	89 d3                	mov    ebx,edx
c00023c8:	eb d7                	jmp    c00023a1 <gen_numname+0x52>
c00023ca:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023cf:	31 d2                	xor    edx,edx
c00023d1:	8d 58 fe             	lea    ebx,[eax-0x2]
c00023d4:	8d 04 16             	lea    eax,[esi+edx*1]
c00023d7:	39 ca                	cmp    edx,ecx
c00023d9:	73 19                	jae    c00023f4 <gen_numname+0xa5>
c00023db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00023de:	83 f8 20             	cmp    eax,0x20
c00023e1:	74 11                	je     c00023f4 <gen_numname+0xa5>
c00023e3:	e8 58 fc ff ff       	call   c0002040 <dbc_1st>
c00023e8:	85 c0                	test   eax,eax
c00023ea:	74 05                	je     c00023f1 <gen_numname+0xa2>
c00023ec:	39 d3                	cmp    ebx,edx
c00023ee:	74 04                	je     c00023f4 <gen_numname+0xa5>
c00023f0:	42                   	inc    edx
c00023f1:	42                   	inc    edx
c00023f2:	eb e0                	jmp    c00023d4 <gen_numname+0x85>
c00023f4:	b0 20                	mov    al,0x20
c00023f6:	83 f9 07             	cmp    ecx,0x7
c00023f9:	77 05                	ja     c0002400 <gen_numname+0xb1>
c00023fb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00023ff:	41                   	inc    ecx
c0002400:	42                   	inc    edx
c0002401:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002405:	83 fa 07             	cmp    edx,0x7
c0002408:	76 ea                	jbe    c00023f4 <gen_numname+0xa5>
c000240a:	83 c4 10             	add    esp,0x10
c000240d:	5b                   	pop    ebx
c000240e:	5e                   	pop    esi
c000240f:	5f                   	pop    edi
c0002410:	c3                   	ret    

c0002411 <sum_sfn>:
c0002411:	53                   	push   ebx
c0002412:	31 c9                	xor    ecx,ecx
c0002414:	31 db                	xor    ebx,ebx
c0002416:	0f b6 d1             	movzx  edx,cl
c0002419:	c1 e1 07             	shl    ecx,0x7
c000241c:	d1 ea                	shr    edx,1
c000241e:	09 ca                	or     edx,ecx
c0002420:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002423:	43                   	inc    ebx
c0002424:	01 ca                	add    edx,ecx
c0002426:	83 fb 0b             	cmp    ebx,0xb
c0002429:	88 d1                	mov    cl,dl
c000242b:	75 e9                	jne    c0002416 <sum_sfn+0x5>
c000242d:	88 d0                	mov    al,dl
c000242f:	5b                   	pop    ebx
c0002430:	c3                   	ret    

c0002431 <get_ldnumber>:
c0002431:	8b 10                	mov    edx,DWORD PTR [eax]
c0002433:	85 d2                	test   edx,edx
c0002435:	74 14                	je     c000244b <get_ldnumber+0x1a>
c0002437:	56                   	push   esi
c0002438:	53                   	push   ebx
c0002439:	89 d3                	mov    ebx,edx
c000243b:	43                   	inc    ebx
c000243c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000243f:	80 f9 1f             	cmp    cl,0x1f
c0002442:	76 0d                	jbe    c0002451 <get_ldnumber+0x20>
c0002444:	80 f9 3a             	cmp    cl,0x3a
c0002447:	75 f2                	jne    c000243b <get_ldnumber+0xa>
c0002449:	eb 0a                	jmp    c0002455 <get_ldnumber+0x24>
c000244b:	83 c9 ff             	or     ecx,0xffffffff
c000244e:	89 c8                	mov    eax,ecx
c0002450:	c3                   	ret    
c0002451:	31 c9                	xor    ecx,ecx
c0002453:	eb 24                	jmp    c0002479 <get_ldnumber+0x48>
c0002455:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002458:	8d 4e d0             	lea    ecx,[esi-0x30]
c000245b:	80 f9 09             	cmp    cl,0x9
c000245e:	77 16                	ja     c0002476 <get_ldnumber+0x45>
c0002460:	83 c2 02             	add    edx,0x2
c0002463:	83 c9 ff             	or     ecx,0xffffffff
c0002466:	39 d3                	cmp    ebx,edx
c0002468:	75 0f                	jne    c0002479 <get_ldnumber+0x48>
c000246a:	89 f2                	mov    edx,esi
c000246c:	89 18                	mov    DWORD PTR [eax],ebx
c000246e:	0f be ca             	movsx  ecx,dl
c0002471:	83 e9 30             	sub    ecx,0x30
c0002474:	eb 03                	jmp    c0002479 <get_ldnumber+0x48>
c0002476:	83 c9 ff             	or     ecx,0xffffffff
c0002479:	89 c8                	mov    eax,ecx
c000247b:	5b                   	pop    ebx
c000247c:	5e                   	pop    esi
c000247d:	c3                   	ret    

c000247e <validate>:
c000247e:	56                   	push   esi
c000247f:	53                   	push   ebx
c0002480:	89 d6                	mov    esi,edx
c0002482:	51                   	push   ecx
c0002483:	85 c0                	test   eax,eax
c0002485:	75 09                	jne    c0002490 <validate+0x12>
c0002487:	b8 09 00 00 00       	mov    eax,0x9
c000248c:	31 c9                	xor    ecx,ecx
c000248e:	eb 2e                	jmp    c00024be <validate+0x40>
c0002490:	89 c3                	mov    ebx,eax
c0002492:	8b 00                	mov    eax,DWORD PTR [eax]
c0002494:	85 c0                	test   eax,eax
c0002496:	74 ef                	je     c0002487 <validate+0x9>
c0002498:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000249b:	74 ea                	je     c0002487 <validate+0x9>
c000249d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024a0:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024a4:	75 e1                	jne    c0002487 <validate+0x9>
c00024a6:	83 ec 0c             	sub    esp,0xc
c00024a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024ad:	50                   	push   eax
c00024ae:	e8 bc fa ff ff       	call   c0001f6f <disk_status>
c00024b3:	83 c4 10             	add    esp,0x10
c00024b6:	a8 01                	test   al,0x1
c00024b8:	75 cd                	jne    c0002487 <validate+0x9>
c00024ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024bc:	31 c0                	xor    eax,eax
c00024be:	89 0e                	mov    DWORD PTR [esi],ecx
c00024c0:	5a                   	pop    edx
c00024c1:	5b                   	pop    ebx
c00024c2:	5e                   	pop    esi
c00024c3:	c3                   	ret    

c00024c4 <sync_window>:
c00024c4:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024c8:	74 58                	je     c0002522 <sync_window+0x5e>
c00024ca:	56                   	push   esi
c00024cb:	53                   	push   ebx
c00024cc:	8d 70 34             	lea    esi,[eax+0x34]
c00024cf:	51                   	push   ecx
c00024d0:	89 c3                	mov    ebx,eax
c00024d2:	6a 01                	push   0x1
c00024d4:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00024d7:	56                   	push   esi
c00024d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024dc:	50                   	push   eax
c00024dd:	e8 a9 fa ff ff       	call   c0001f8b <disk_write>
c00024e2:	83 c4 10             	add    esp,0x10
c00024e5:	ba 01 00 00 00       	mov    edx,0x1
c00024ea:	85 c0                	test   eax,eax
c00024ec:	75 2e                	jne    c000251c <sync_window+0x58>
c00024ee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024f1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00024f4:	89 c1                	mov    ecx,eax
c00024f6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00024fa:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00024fd:	39 d1                	cmp    ecx,edx
c00024ff:	73 19                	jae    c000251a <sync_window+0x56>
c0002501:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002505:	75 13                	jne    c000251a <sync_window+0x56>
c0002507:	6a 01                	push   0x1
c0002509:	01 d0                	add    eax,edx
c000250b:	50                   	push   eax
c000250c:	56                   	push   esi
c000250d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002511:	50                   	push   eax
c0002512:	e8 74 fa ff ff       	call   c0001f8b <disk_write>
c0002517:	83 c4 10             	add    esp,0x10
c000251a:	31 d2                	xor    edx,edx
c000251c:	89 d0                	mov    eax,edx
c000251e:	5a                   	pop    edx
c000251f:	5b                   	pop    ebx
c0002520:	5e                   	pop    esi
c0002521:	c3                   	ret    
c0002522:	31 d2                	xor    edx,edx
c0002524:	89 d0                	mov    eax,edx
c0002526:	c3                   	ret    

c0002527 <move_window>:
c0002527:	57                   	push   edi
c0002528:	56                   	push   esi
c0002529:	31 f6                	xor    esi,esi
c000252b:	53                   	push   ebx
c000252c:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000252f:	74 32                	je     c0002563 <move_window+0x3c>
c0002531:	89 c3                	mov    ebx,eax
c0002533:	89 d7                	mov    edi,edx
c0002535:	e8 8a ff ff ff       	call   c00024c4 <sync_window>
c000253a:	89 c6                	mov    esi,eax
c000253c:	85 c0                	test   eax,eax
c000253e:	75 23                	jne    c0002563 <move_window+0x3c>
c0002540:	6a 01                	push   0x1
c0002542:	8d 43 34             	lea    eax,[ebx+0x34]
c0002545:	57                   	push   edi
c0002546:	50                   	push   eax
c0002547:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000254b:	50                   	push   eax
c000254c:	e8 24 fa ff ff       	call   c0001f75 <disk_read>
c0002551:	83 c4 10             	add    esp,0x10
c0002554:	85 c0                	test   eax,eax
c0002556:	74 08                	je     c0002560 <move_window+0x39>
c0002558:	be 01 00 00 00       	mov    esi,0x1
c000255d:	83 cf ff             	or     edi,0xffffffff
c0002560:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002563:	89 f0                	mov    eax,esi
c0002565:	5b                   	pop    ebx
c0002566:	5e                   	pop    esi
c0002567:	5f                   	pop    edi
c0002568:	c3                   	ret    

c0002569 <check_fs>:
c0002569:	53                   	push   ebx
c000256a:	89 c3                	mov    ebx,eax
c000256c:	83 ec 08             	sub    esp,0x8
c000256f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002573:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000257a:	e8 a8 ff ff ff       	call   c0002527 <move_window>
c000257f:	ba 04 00 00 00       	mov    edx,0x4
c0002584:	85 c0                	test   eax,eax
c0002586:	75 68                	jne    c00025f0 <check_fs+0x87>
c0002588:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000258e:	e8 2d fa ff ff       	call   c0001fc0 <ld_word>
c0002593:	ba 03 00 00 00       	mov    edx,0x3
c0002598:	66 3d 55 aa          	cmp    ax,0xaa55
c000259c:	75 52                	jne    c00025f0 <check_fs+0x87>
c000259e:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025a1:	8d 50 18             	lea    edx,[eax+0x18]
c00025a4:	80 fa 01             	cmp    dl,0x1
c00025a7:	76 09                	jbe    c00025b2 <check_fs+0x49>
c00025a9:	ba 02 00 00 00       	mov    edx,0x2
c00025ae:	3c eb                	cmp    al,0xeb
c00025b0:	75 3e                	jne    c00025f0 <check_fs+0x87>
c00025b2:	ba e0 5d 02 c0       	mov    edx,0xc0025de0
c00025b7:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025ba:	b9 03 00 00 00       	mov    ecx,0x3
c00025bf:	e8 48 fa ff ff       	call   c000200c <mem_cmp>
c00025c4:	31 d2                	xor    edx,edx
c00025c6:	85 c0                	test   eax,eax
c00025c8:	74 26                	je     c00025f0 <check_fs+0x87>
c00025ca:	ba 3c 2b 02 c0       	mov    edx,0xc0022b3c
c00025cf:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00025d5:	b9 05 00 00 00       	mov    ecx,0x5
c00025da:	e8 2d fa ff ff       	call   c000200c <mem_cmp>
c00025df:	31 d2                	xor    edx,edx
c00025e1:	85 c0                	test   eax,eax
c00025e3:	74 0b                	je     c00025f0 <check_fs+0x87>
c00025e5:	31 d2                	xor    edx,edx
c00025e7:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00025eb:	0f 95 c2             	setne  dl
c00025ee:	01 d2                	add    edx,edx
c00025f0:	89 d0                	mov    eax,edx
c00025f2:	83 c4 08             	add    esp,0x8
c00025f5:	5b                   	pop    ebx
c00025f6:	c3                   	ret    

c00025f7 <find_volume>:
c00025f7:	55                   	push   ebp
c00025f8:	57                   	push   edi
c00025f9:	56                   	push   esi
c00025fa:	89 c6                	mov    esi,eax
c00025fc:	53                   	push   ebx
c00025fd:	89 d3                	mov    ebx,edx
c00025ff:	83 ec 2c             	sub    esp,0x2c
c0002602:	31 d2                	xor    edx,edx
c0002604:	e8 60 ff ff ff       	call   c0002569 <check_fs>
c0002609:	83 f8 02             	cmp    eax,0x2
c000260c:	74 06                	je     c0002614 <find_volume+0x1d>
c000260e:	77 62                	ja     c0002672 <find_volume+0x7b>
c0002610:	85 db                	test   ebx,ebx
c0002612:	74 5e                	je     c0002672 <find_volume+0x7b>
c0002614:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002618:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000261e:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002624:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002628:	89 cf                	mov    edi,ecx
c000262a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000262e:	89 e8                	mov    eax,ebp
c0002630:	83 c5 10             	add    ebp,0x10
c0002633:	e8 95 f9 ff ff       	call   c0001fcd <ld_dword>
c0002638:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000263c:	89 01                	mov    DWORD PTR [ecx],eax
c000263e:	83 c1 04             	add    ecx,0x4
c0002641:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002645:	75 e3                	jne    c000262a <find_volume+0x33>
c0002647:	31 ed                	xor    ebp,ebp
c0002649:	85 db                	test   ebx,ebx
c000264b:	74 03                	je     c0002650 <find_volume+0x59>
c000264d:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002650:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002653:	b8 03 00 00 00       	mov    eax,0x3
c0002658:	85 d2                	test   edx,edx
c000265a:	74 0c                	je     c0002668 <find_volume+0x71>
c000265c:	89 f0                	mov    eax,esi
c000265e:	e8 06 ff ff ff       	call   c0002569 <check_fs>
c0002663:	83 f8 01             	cmp    eax,0x1
c0002666:	76 0a                	jbe    c0002672 <find_volume+0x7b>
c0002668:	85 db                	test   ebx,ebx
c000266a:	75 06                	jne    c0002672 <find_volume+0x7b>
c000266c:	45                   	inc    ebp
c000266d:	83 fd 03             	cmp    ebp,0x3
c0002670:	76 de                	jbe    c0002650 <find_volume+0x59>
c0002672:	83 c4 2c             	add    esp,0x2c
c0002675:	5b                   	pop    ebx
c0002676:	5e                   	pop    esi
c0002677:	5f                   	pop    edi
c0002678:	5d                   	pop    ebp
c0002679:	c3                   	ret    

c000267a <mount_volume>:
c000267a:	55                   	push   ebp
c000267b:	89 d5                	mov    ebp,edx
c000267d:	57                   	push   edi
c000267e:	89 cf                	mov    edi,ecx
c0002680:	56                   	push   esi
c0002681:	53                   	push   ebx
c0002682:	bb 0b 00 00 00       	mov    ebx,0xb
c0002687:	83 ec 1c             	sub    esp,0x1c
c000268a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002690:	e8 9c fd ff ff       	call   c0002431 <get_ldnumber>
c0002695:	85 c0                	test   eax,eax
c0002697:	0f 88 c4 02 00 00    	js     c0002961 <mount_volume+0x2e7>
c000269d:	8b 34 85 a0 94 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd6b60]
c00026a4:	89 c2                	mov    edx,eax
c00026a6:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ab:	85 f6                	test   esi,esi
c00026ad:	0f 84 ae 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026b3:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026b6:	83 e7 fe             	and    edi,0xfffffffe
c00026b9:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026bc:	74 3a                	je     c00026f8 <mount_volume+0x7e>
c00026be:	89 04 24             	mov    DWORD PTR [esp],eax
c00026c1:	83 ec 0c             	sub    esp,0xc
c00026c4:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026c8:	50                   	push   eax
c00026c9:	e8 a1 f8 ff ff       	call   c0001f6f <disk_status>
c00026ce:	83 c4 10             	add    esp,0x10
c00026d1:	a8 01                	test   al,0x1
c00026d3:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00026d6:	75 20                	jne    c00026f8 <mount_volume+0x7e>
c00026d8:	31 db                	xor    ebx,ebx
c00026da:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026e0:	0f 84 7b 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026e6:	a8 04                	test   al,0x4
c00026e8:	0f 84 73 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026ee:	bb 0a 00 00 00       	mov    ebx,0xa
c00026f3:	e9 69 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c00026f8:	83 ec 0c             	sub    esp,0xc
c00026fb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00026fe:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002701:	0f b6 c2             	movzx  eax,dl
c0002704:	bb 03 00 00 00       	mov    ebx,0x3
c0002709:	50                   	push   eax
c000270a:	e8 63 f8 ff ff       	call   c0001f72 <disk_initialize>
c000270f:	83 c4 10             	add    esp,0x10
c0002712:	a8 01                	test   al,0x1
c0002714:	0f 85 47 02 00 00    	jne    c0002961 <mount_volume+0x2e7>
c000271a:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002720:	74 04                	je     c0002726 <mount_volume+0xac>
c0002722:	a8 04                	test   al,0x4
c0002724:	75 c8                	jne    c00026ee <mount_volume+0x74>
c0002726:	31 d2                	xor    edx,edx
c0002728:	89 f0                	mov    eax,esi
c000272a:	bb 01 00 00 00       	mov    ebx,0x1
c000272f:	e8 c3 fe ff ff       	call   c00025f7 <find_volume>
c0002734:	83 f8 04             	cmp    eax,0x4
c0002737:	0f 84 24 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c000273d:	83 f8 01             	cmp    eax,0x1
c0002740:	76 0a                	jbe    c000274c <mount_volume+0xd2>
c0002742:	bb 0d 00 00 00       	mov    ebx,0xd
c0002747:	e9 15 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c000274c:	8d 46 3f             	lea    eax,[esi+0x3f]
c000274f:	e8 6c f8 ff ff       	call   c0001fc0 <ld_word>
c0002754:	66 3d 00 02          	cmp    ax,0x200
c0002758:	75 e8                	jne    c0002742 <mount_volume+0xc8>
c000275a:	8d 46 4a             	lea    eax,[esi+0x4a]
c000275d:	e8 5e f8 ff ff       	call   c0001fc0 <ld_word>
c0002762:	0f b7 c0             	movzx  eax,ax
c0002765:	89 04 24             	mov    DWORD PTR [esp],eax
c0002768:	85 c0                	test   eax,eax
c000276a:	75 0b                	jne    c0002777 <mount_volume+0xfd>
c000276c:	8d 46 58             	lea    eax,[esi+0x58]
c000276f:	e8 59 f8 ff ff       	call   c0001fcd <ld_dword>
c0002774:	89 04 24             	mov    DWORD PTR [esp],eax
c0002777:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000277a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000277e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002781:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002784:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c0002787:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000278b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000278e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002792:	48                   	dec    eax
c0002793:	3c 01                	cmp    al,0x1
c0002795:	77 ab                	ja     c0002742 <mount_volume+0xc8>
c0002797:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c000279b:	89 c3                	mov    ebx,eax
c000279d:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027a1:	66 85 c0             	test   ax,ax
c00027a4:	74 9c                	je     c0002742 <mount_volume+0xc8>
c00027a6:	8d 40 ff             	lea    eax,[eax-0x1]
c00027a9:	85 d8                	test   eax,ebx
c00027ab:	75 95                	jne    c0002742 <mount_volume+0xc8>
c00027ad:	8d 46 45             	lea    eax,[esi+0x45]
c00027b0:	e8 0b f8 ff ff       	call   c0001fc0 <ld_word>
c00027b5:	89 c7                	mov    edi,eax
c00027b7:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027bb:	a8 0f                	test   al,0xf
c00027bd:	75 83                	jne    c0002742 <mount_volume+0xc8>
c00027bf:	8d 46 47             	lea    eax,[esi+0x47]
c00027c2:	e8 f9 f7 ff ff       	call   c0001fc0 <ld_word>
c00027c7:	0f b7 e8             	movzx  ebp,ax
c00027ca:	85 ed                	test   ebp,ebp
c00027cc:	75 0a                	jne    c00027d8 <mount_volume+0x15e>
c00027ce:	8d 46 54             	lea    eax,[esi+0x54]
c00027d1:	e8 f7 f7 ff ff       	call   c0001fcd <ld_dword>
c00027d6:	89 c5                	mov    ebp,eax
c00027d8:	8d 46 42             	lea    eax,[esi+0x42]
c00027db:	e8 e0 f7 ff ff       	call   c0001fc0 <ld_word>
c00027e0:	0f b7 c8             	movzx  ecx,ax
c00027e3:	85 c9                	test   ecx,ecx
c00027e5:	0f 84 57 ff ff ff    	je     c0002742 <mount_volume+0xc8>
c00027eb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00027f0:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c00027f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027f8:	0f b7 c7             	movzx  eax,di
c00027fb:	c1 e8 04             	shr    eax,0x4
c00027fe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002802:	01 c8                	add    eax,ecx
c0002804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002808:	39 c5                	cmp    ebp,eax
c000280a:	0f 82 32 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002810:	29 c5                	sub    ebp,eax
c0002812:	31 d2                	xor    edx,edx
c0002814:	89 e8                	mov    eax,ebp
c0002816:	f7 f3                	div    ebx
c0002818:	39 dd                	cmp    ebp,ebx
c000281a:	0f 82 22 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002820:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002825:	0f 87 17 ff ff ff    	ja     c0002742 <mount_volume+0xc8>
c000282b:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002830:	0f 86 1c 01 00 00    	jbe    c0002952 <mount_volume+0x2d8>
c0002836:	bb 03 00 00 00       	mov    ebx,0x3
c000283b:	8d 68 02             	lea    ebp,[eax+0x2]
c000283e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002846:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c000284a:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000284d:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002850:	01 c8                	add    eax,ecx
c0002852:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002855:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002858:	83 fb 03             	cmp    ebx,0x3
c000285b:	75 23                	jne    c0002880 <mount_volume+0x206>
c000285d:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002860:	e8 5b f7 ff ff       	call   c0001fc0 <ld_word>
c0002865:	09 c7                	or     edi,eax
c0002867:	66 85 ff             	test   di,di
c000286a:	0f 85 d2 fe ff ff    	jne    c0002742 <mount_volume+0xc8>
c0002870:	8d 46 60             	lea    eax,[esi+0x60]
c0002873:	c1 e5 02             	shl    ebp,0x2
c0002876:	e8 52 f7 ff ff       	call   c0001fcd <ld_dword>
c000287b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000287e:	eb 24                	jmp    c00028a4 <mount_volume+0x22a>
c0002880:	66 85 ff             	test   di,di
c0002883:	0f 84 b9 fe ff ff    	je     c0002742 <mount_volume+0xc8>
c0002889:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000288d:	83 fb 02             	cmp    ebx,0x2
c0002890:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002893:	75 04                	jne    c0002899 <mount_volume+0x21f>
c0002895:	01 ed                	add    ebp,ebp
c0002897:	eb 0b                	jmp    c00028a4 <mount_volume+0x22a>
c0002899:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c000289d:	83 e5 01             	and    ebp,0x1
c00028a0:	d1 e8                	shr    eax,1
c00028a2:	01 c5                	add    ebp,eax
c00028a4:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028aa:	c1 ed 09             	shr    ebp,0x9
c00028ad:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00028b0:	0f 87 8c fe ff ff    	ja     c0002742 <mount_volume+0xc8>
c00028b6:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00028bd:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00028c4:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00028c8:	83 fb 03             	cmp    ebx,0x3
c00028cb:	75 6e                	jne    c000293b <mount_volume+0x2c1>
c00028cd:	8d 46 64             	lea    eax,[esi+0x64]
c00028d0:	e8 eb f6 ff ff       	call   c0001fc0 <ld_word>
c00028d5:	66 48                	dec    ax
c00028d7:	75 62                	jne    c000293b <mount_volume+0x2c1>
c00028d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	42                   	inc    edx
c00028e0:	e8 42 fc ff ff       	call   c0002527 <move_window>
c00028e5:	85 c0                	test   eax,eax
c00028e7:	75 52                	jne    c000293b <mount_volume+0x2c1>
c00028e9:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00028ed:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00028f3:	e8 c8 f6 ff ff       	call   c0001fc0 <ld_word>
c00028f8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028fc:	75 3d                	jne    c000293b <mount_volume+0x2c1>
c00028fe:	8d 46 34             	lea    eax,[esi+0x34]
c0002901:	e8 c7 f6 ff ff       	call   c0001fcd <ld_dword>
c0002906:	3d 52 52 61 41       	cmp    eax,0x41615252
c000290b:	75 2e                	jne    c000293b <mount_volume+0x2c1>
c000290d:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002913:	e8 b5 f6 ff ff       	call   c0001fcd <ld_dword>
c0002918:	3d 72 72 41 61       	cmp    eax,0x61417272
c000291d:	75 1c                	jne    c000293b <mount_volume+0x2c1>
c000291f:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002925:	e8 a3 f6 ff ff       	call   c0001fcd <ld_dword>
c000292a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000292d:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002933:	e8 95 f6 ff ff       	call   c0001fcd <ld_dword>
c0002938:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000293b:	66 a1 80 94 02 c0    	mov    ax,ds:0xc0029480
c0002941:	88 1e                	mov    BYTE PTR [esi],bl
c0002943:	40                   	inc    eax
c0002944:	31 db                	xor    ebx,ebx
c0002946:	66 a3 80 94 02 c0    	mov    ds:0xc0029480,ax
c000294c:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002950:	eb 0f                	jmp    c0002961 <mount_volume+0x2e7>
c0002952:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002957:	19 db                	sbb    ebx,ebx
c0002959:	83 c3 02             	add    ebx,0x2
c000295c:	e9 da fe ff ff       	jmp    c000283b <mount_volume+0x1c1>
c0002961:	83 c4 1c             	add    esp,0x1c
c0002964:	89 d8                	mov    eax,ebx
c0002966:	5b                   	pop    ebx
c0002967:	5e                   	pop    esi
c0002968:	5f                   	pop    edi
c0002969:	5d                   	pop    ebp
c000296a:	c3                   	ret    

c000296b <put_fat>:
c000296b:	55                   	push   ebp
c000296c:	bd 02 00 00 00       	mov    ebp,0x2
c0002971:	57                   	push   edi
c0002972:	56                   	push   esi
c0002973:	53                   	push   ebx
c0002974:	83 ec 1c             	sub    esp,0x1c
c0002977:	83 fa 01             	cmp    edx,0x1
c000297a:	0f 86 38 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002980:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002983:	0f 86 2f 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002989:	89 c6                	mov    esi,eax
c000298b:	89 cf                	mov    edi,ecx
c000298d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002990:	89 d3                	mov    ebx,edx
c0002992:	83 f8 02             	cmp    eax,0x2
c0002995:	0f 84 b1 00 00 00    	je     c0002a4c <put_fat+0xe1>
c000299b:	83 f8 03             	cmp    eax,0x3
c000299e:	0f 84 d5 00 00 00    	je     c0002a79 <put_fat+0x10e>
c00029a4:	48                   	dec    eax
c00029a5:	0f 85 0d 01 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ab:	89 d1                	mov    ecx,edx
c00029ad:	89 f0                	mov    eax,esi
c00029af:	d1 e9                	shr    ecx,1
c00029b1:	01 d1                	add    ecx,edx
c00029b3:	89 ca                	mov    edx,ecx
c00029b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029b9:	c1 ea 09             	shr    edx,0x9
c00029bc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029bf:	e8 63 fb ff ff       	call   c0002527 <move_window>
c00029c4:	89 c5                	mov    ebp,eax
c00029c6:	85 c0                	test   eax,eax
c00029c8:	0f 85 ea 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029d2:	8d 46 34             	lea    eax,[esi+0x34]
c00029d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029d9:	8d 41 01             	lea    eax,[ecx+0x1]
c00029dc:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00029e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029e6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00029ea:	89 f8                	mov    eax,edi
c00029ec:	83 e3 01             	and    ebx,0x1
c00029ef:	74 11                	je     c0002a02 <put_fat+0x97>
c00029f1:	8a 11                	mov    dl,BYTE PTR [ecx]
c00029f3:	89 f8                	mov    eax,edi
c00029f5:	83 e2 0f             	and    edx,0xf
c00029f8:	c1 e0 04             	shl    eax,0x4
c00029fb:	25 f0 0f 00 00       	and    eax,0xff0
c0002a00:	09 d0                	or     eax,edx
c0002a02:	88 01                	mov    BYTE PTR [ecx],al
c0002a04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a0c:	c1 ea 09             	shr    edx,0x9
c0002a0f:	89 f0                	mov    eax,esi
c0002a11:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a14:	e8 0e fb ff ff       	call   c0002527 <move_window>
c0002a19:	89 c5                	mov    ebp,eax
c0002a1b:	85 c0                	test   eax,eax
c0002a1d:	0f 85 95 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c0002a23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a27:	25 ff 01 00 00       	and    eax,0x1ff
c0002a2c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a30:	85 db                	test   ebx,ebx
c0002a32:	74 07                	je     c0002a3b <put_fat+0xd0>
c0002a34:	c1 ef 04             	shr    edi,0x4
c0002a37:	89 f9                	mov    ecx,edi
c0002a39:	eb 0d                	jmp    c0002a48 <put_fat+0xdd>
c0002a3b:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a3d:	c1 ef 08             	shr    edi,0x8
c0002a40:	83 e1 f0             	and    ecx,0xfffffff0
c0002a43:	83 e7 0f             	and    edi,0xf
c0002a46:	09 f9                	or     ecx,edi
c0002a48:	88 08                	mov    BYTE PTR [eax],cl
c0002a4a:	eb 27                	jmp    c0002a73 <put_fat+0x108>
c0002a4c:	c1 ea 08             	shr    edx,0x8
c0002a4f:	89 f0                	mov    eax,esi
c0002a51:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a54:	e8 ce fa ff ff       	call   c0002527 <move_window>
c0002a59:	89 c5                	mov    ebp,eax
c0002a5b:	85 c0                	test   eax,eax
c0002a5d:	75 59                	jne    c0002ab8 <put_fat+0x14d>
c0002a5f:	01 db                	add    ebx,ebx
c0002a61:	0f b7 d7             	movzx  edx,di
c0002a64:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002a6a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002a6e:	e8 72 f5 ff ff       	call   c0001fe5 <st_word>
c0002a73:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a77:	eb 3f                	jmp    c0002ab8 <put_fat+0x14d>
c0002a79:	c1 ea 07             	shr    edx,0x7
c0002a7c:	89 f0                	mov    eax,esi
c0002a7e:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a81:	e8 a1 fa ff ff       	call   c0002527 <move_window>
c0002a86:	89 c5                	mov    ebp,eax
c0002a88:	85 c0                	test   eax,eax
c0002a8a:	75 2c                	jne    c0002ab8 <put_fat+0x14d>
c0002a8c:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002a92:	c1 e3 02             	shl    ebx,0x2
c0002a95:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002a9b:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002a9f:	89 d8                	mov    eax,ebx
c0002aa1:	e8 27 f5 ff ff       	call   c0001fcd <ld_dword>
c0002aa6:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aab:	09 f8                	or     eax,edi
c0002aad:	89 c2                	mov    edx,eax
c0002aaf:	89 d8                	mov    eax,ebx
c0002ab1:	e8 33 f5 ff ff       	call   c0001fe9 <st_dword>
c0002ab6:	eb bb                	jmp    c0002a73 <put_fat+0x108>
c0002ab8:	83 c4 1c             	add    esp,0x1c
c0002abb:	89 e8                	mov    eax,ebp
c0002abd:	5b                   	pop    ebx
c0002abe:	5e                   	pop    esi
c0002abf:	5f                   	pop    edi
c0002ac0:	5d                   	pop    ebp
c0002ac1:	c3                   	ret    

c0002ac2 <dir_clear>:
c0002ac2:	55                   	push   ebp
c0002ac3:	57                   	push   edi
c0002ac4:	56                   	push   esi
c0002ac5:	89 c6                	mov    esi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	83 ec 1c             	sub    esp,0x1c
c0002acb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002acf:	e8 f0 f9 ff ff       	call   c00024c4 <sync_window>
c0002ad4:	85 c0                	test   eax,eax
c0002ad6:	0f 85 c0 00 00 00    	jne    c0002b9c <dir_clear+0xda>
c0002adc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ae0:	89 f0                	mov    eax,esi
c0002ae2:	e8 30 f7 ff ff       	call   c0002217 <clst2sect>
c0002ae7:	31 d2                	xor    edx,edx
c0002ae9:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002aec:	89 c5                	mov    ebp,eax
c0002aee:	b9 00 02 00 00       	mov    ecx,0x200
c0002af3:	8d 46 34             	lea    eax,[esi+0x34]
c0002af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002afa:	e8 02 f5 ff ff       	call   c0002001 <mem_set>
c0002aff:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b03:	c1 e3 09             	shl    ebx,0x9
c0002b06:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b0c:	76 1b                	jbe    c0002b29 <dir_clear+0x67>
c0002b0e:	bb 00 80 00 00       	mov    ebx,0x8000
c0002b13:	eb 14                	jmp    c0002b29 <dir_clear+0x67>
c0002b15:	83 ec 0c             	sub    esp,0xc
c0002b18:	53                   	push   ebx
c0002b19:	e8 ea 32 00 00       	call   c0005e08 <ff_memalloc>
c0002b1e:	83 c4 10             	add    esp,0x10
c0002b21:	89 c7                	mov    edi,eax
c0002b23:	85 c0                	test   eax,eax
c0002b25:	75 7c                	jne    c0002ba3 <dir_clear+0xe1>
c0002b27:	d1 eb                	shr    ebx,1
c0002b29:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b2f:	77 e4                	ja     c0002b15 <dir_clear+0x53>
c0002b31:	31 db                	xor    ebx,ebx
c0002b33:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b37:	39 d8                	cmp    eax,ebx
c0002b39:	76 53                	jbe    c0002b8e <dir_clear+0xcc>
c0002b3b:	6a 01                	push   0x1
c0002b3d:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b40:	50                   	push   eax
c0002b41:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b49:	50                   	push   eax
c0002b4a:	e8 3c f4 ff ff       	call   c0001f8b <disk_write>
c0002b4f:	83 c4 10             	add    esp,0x10
c0002b52:	85 c0                	test   eax,eax
c0002b54:	75 38                	jne    c0002b8e <dir_clear+0xcc>
c0002b56:	43                   	inc    ebx
c0002b57:	eb da                	jmp    c0002b33 <dir_clear+0x71>
c0002b59:	52                   	push   edx
c0002b5a:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b61:	50                   	push   eax
c0002b62:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b66:	57                   	push   edi
c0002b67:	50                   	push   eax
c0002b68:	e8 1e f4 ff ff       	call   c0001f8b <disk_write>
c0002b6d:	83 c4 10             	add    esp,0x10
c0002b70:	85 c0                	test   eax,eax
c0002b72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b76:	75 0a                	jne    c0002b82 <dir_clear+0xc0>
c0002b78:	01 d3                	add    ebx,edx
c0002b7a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7e:	39 d8                	cmp    eax,ebx
c0002b80:	77 d7                	ja     c0002b59 <dir_clear+0x97>
c0002b82:	83 ec 0c             	sub    esp,0xc
c0002b85:	57                   	push   edi
c0002b86:	e8 95 32 00 00       	call   c0005e20 <ff_memfree>
c0002b8b:	83 c4 10             	add    esp,0x10
c0002b8e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b92:	39 d8                	cmp    eax,ebx
c0002b94:	0f 95 c0             	setne  al
c0002b97:	0f b6 c0             	movzx  eax,al
c0002b9a:	eb 19                	jmp    c0002bb5 <dir_clear+0xf3>
c0002b9c:	b8 01 00 00 00       	mov    eax,0x1
c0002ba1:	eb 12                	jmp    c0002bb5 <dir_clear+0xf3>
c0002ba3:	89 d9                	mov    ecx,ebx
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	e8 55 f4 ff ff       	call   c0002001 <mem_set>
c0002bac:	89 da                	mov    edx,ebx
c0002bae:	31 db                	xor    ebx,ebx
c0002bb0:	c1 ea 09             	shr    edx,0x9
c0002bb3:	eb c5                	jmp    c0002b7a <dir_clear+0xb8>
c0002bb5:	83 c4 1c             	add    esp,0x1c
c0002bb8:	5b                   	pop    ebx
c0002bb9:	5e                   	pop    esi
c0002bba:	5f                   	pop    edi
c0002bbb:	5d                   	pop    ebp
c0002bbc:	c3                   	ret    

c0002bbd <create_name>:
c0002bbd:	55                   	push   ebp
c0002bbe:	57                   	push   edi
c0002bbf:	89 d7                	mov    edi,edx
c0002bc1:	56                   	push   esi
c0002bc2:	31 f6                	xor    esi,esi
c0002bc4:	53                   	push   ebx
c0002bc5:	83 ec 3c             	sub    esp,0x3c
c0002bc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002bcc:	8b 02                	mov    eax,DWORD PTR [edx]
c0002bce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0002bd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002bdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bdf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002be3:	e8 5e f4 ff ff       	call   c0002046 <tchar2uni>
c0002be8:	89 c3                	mov    ebx,eax
c0002bea:	83 f8 ff             	cmp    eax,0xffffffff
c0002bed:	75 0a                	jne    c0002bf9 <create_name+0x3c>
c0002bef:	b8 06 00 00 00       	mov    eax,0x6
c0002bf4:	e9 93 02 00 00       	jmp    c0002e8c <create_name+0x2cf>
c0002bf9:	3d ff ff 00 00       	cmp    eax,0xffff
c0002bfe:	76 0c                	jbe    c0002c0c <create_name+0x4f>
c0002c00:	c1 e8 10             	shr    eax,0x10
c0002c03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c07:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002c0b:	46                   	inc    esi
c0002c0c:	0f b7 d3             	movzx  edx,bx
c0002c0f:	83 fa 1f             	cmp    edx,0x1f
c0002c12:	76 4a                	jbe    c0002c5e <create_name+0xa1>
c0002c14:	83 fa 5c             	cmp    edx,0x5c
c0002c17:	74 30                	je     c0002c49 <create_name+0x8c>
c0002c19:	83 fa 2f             	cmp    edx,0x2f
c0002c1c:	74 2b                	je     c0002c49 <create_name+0x8c>
c0002c1e:	83 fa 7f             	cmp    edx,0x7f
c0002c21:	77 0e                	ja     c0002c31 <create_name+0x74>
c0002c23:	b8 42 2b 02 c0       	mov    eax,0xc0022b42
c0002c28:	e8 02 f4 ff ff       	call   c000202f <chk_chr>
c0002c2d:	85 c0                	test   eax,eax
c0002c2f:	75 be                	jne    c0002bef <create_name+0x32>
c0002c31:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c37:	77 b6                	ja     c0002bef <create_name+0x32>
c0002c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c3d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c41:	46                   	inc    esi
c0002c42:	eb 9b                	jmp    c0002bdf <create_name+0x22>
c0002c44:	40                   	inc    eax
c0002c45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c4d:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c50:	83 fa 2f             	cmp    edx,0x2f
c0002c53:	74 ef                	je     c0002c44 <create_name+0x87>
c0002c55:	83 fa 5c             	cmp    edx,0x5c
c0002c58:	74 ea                	je     c0002c44 <create_name+0x87>
c0002c5a:	31 db                	xor    ebx,ebx
c0002c5c:	eb 02                	jmp    c0002c60 <create_name+0xa3>
c0002c5e:	b3 04                	mov    bl,0x4
c0002c60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c64:	89 07                	mov    DWORD PTR [edi],eax
c0002c66:	85 f6                	test   esi,esi
c0002c68:	74 16                	je     c0002c80 <create_name+0xc3>
c0002c6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c6e:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002c73:	83 f8 20             	cmp    eax,0x20
c0002c76:	74 05                	je     c0002c7d <create_name+0xc0>
c0002c78:	83 f8 2e             	cmp    eax,0x2e
c0002c7b:	75 03                	jne    c0002c80 <create_name+0xc3>
c0002c7d:	4e                   	dec    esi
c0002c7e:	eb e6                	jmp    c0002c66 <create_name+0xa9>
c0002c80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c84:	31 ff                	xor    edi,edi
c0002c86:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002c8c:	85 f6                	test   esi,esi
c0002c8e:	0f 84 5b ff ff ff    	je     c0002bef <create_name+0x32>
c0002c94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c98:	8d 57 01             	lea    edx,[edi+0x1]
c0002c9b:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c9f:	83 f8 20             	cmp    eax,0x20
c0002ca2:	75 04                	jne    c0002ca8 <create_name+0xeb>
c0002ca4:	89 d7                	mov    edi,edx
c0002ca6:	eb ec                	jmp    c0002c94 <create_name+0xd7>
c0002ca8:	85 ff                	test   edi,edi
c0002caa:	75 05                	jne    c0002cb1 <create_name+0xf4>
c0002cac:	83 f8 2e             	cmp    eax,0x2e
c0002caf:	75 08                	jne    c0002cb9 <create_name+0xfc>
c0002cb1:	83 cb 03             	or     ebx,0x3
c0002cb4:	eb 03                	jmp    c0002cb9 <create_name+0xfc>
c0002cb6:	4e                   	dec    esi
c0002cb7:	74 0c                	je     c0002cc5 <create_name+0x108>
c0002cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cbd:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002cc3:	75 f1                	jne    c0002cb6 <create_name+0xf9>
c0002cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002cc9:	b9 0b 00 00 00       	mov    ecx,0xb
c0002cce:	83 c0 20             	add    eax,0x20
c0002cd1:	ba 20 00 00 00       	mov    edx,0x20
c0002cd6:	31 ed                	xor    ebp,ebp
c0002cd8:	e8 24 f3 ff ff       	call   c0002001 <mem_set>
c0002cdd:	b9 08 00 00 00       	mov    ecx,0x8
c0002ce2:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002ce7:	8d 47 01             	lea    eax,[edi+0x1]
c0002cea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002cee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cf2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002cf6:	89 c7                	mov    edi,eax
c0002cf8:	85 c0                	test   eax,eax
c0002cfa:	0f 84 25 01 00 00    	je     c0002e25 <create_name+0x268>
c0002d00:	83 f8 20             	cmp    eax,0x20
c0002d03:	74 0f                	je     c0002d14 <create_name+0x157>
c0002d05:	83 f8 2e             	cmp    eax,0x2e
c0002d08:	75 13                	jne    c0002d1d <create_name+0x160>
c0002d0a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d0e:	0f 84 6a 01 00 00    	je     c0002e7e <create_name+0x2c1>
c0002d14:	83 cb 03             	or     ebx,0x3
c0002d17:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002d1b:	eb ca                	jmp    c0002ce7 <create_name+0x12a>
c0002d1d:	39 cd                	cmp    ebp,ecx
c0002d1f:	73 0b                	jae    c0002d2c <create_name+0x16f>
c0002d21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d25:	75 3f                	jne    c0002d66 <create_name+0x1a9>
c0002d27:	e9 52 01 00 00       	jmp    c0002e7e <create_name+0x2c1>
c0002d2c:	83 f9 0b             	cmp    ecx,0xb
c0002d2f:	75 0d                	jne    c0002d3e <create_name+0x181>
c0002d31:	83 cb 03             	or     ebx,0x3
c0002d34:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d39:	e9 e7 00 00 00       	jmp    c0002e25 <create_name+0x268>
c0002d3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d42:	74 0d                	je     c0002d51 <create_name+0x194>
c0002d44:	83 cb 03             	or     ebx,0x3
c0002d47:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d4b:	0f 87 d4 00 00 00    	ja     c0002e25 <create_name+0x268>
c0002d51:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d56:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002d5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d5f:	bd 08 00 00 00       	mov    ebp,0x8
c0002d64:	eb b1                	jmp    c0002d17 <create_name+0x15a>
c0002d66:	83 f8 7f             	cmp    eax,0x7f
c0002d69:	76 66                	jbe    c0002dd1 <create_name+0x214>
c0002d6b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6f:	89 d9                	mov    ecx,ebx
c0002d71:	83 c9 02             	or     ecx,0x2
c0002d74:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d78:	52                   	push   edx
c0002d79:	52                   	push   edx
c0002d7a:	68 b5 01 00 00       	push   0x1b5
c0002d7f:	50                   	push   eax
c0002d80:	e8 b3 30 00 00       	call   c0005e38 <ff_uni2oem>
c0002d85:	83 c4 10             	add    esp,0x10
c0002d88:	89 c7                	mov    edi,eax
c0002d8a:	a8 80                	test   al,0x80
c0002d8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002d90:	74 0c                	je     c0002d9e <create_name+0x1e1>
c0002d92:	83 e7 7f             	and    edi,0x7f
c0002d95:	0f b6 bf 00 2c 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdd400]
c0002d9c:	eb 2a                	jmp    c0002dc8 <create_name+0x20b>
c0002d9e:	0f b7 c0             	movzx  eax,ax
c0002da1:	3d ff 00 00 00       	cmp    eax,0xff
c0002da6:	76 20                	jbe    c0002dc8 <create_name+0x20b>
c0002da8:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002dab:	39 ea                	cmp    edx,ebp
c0002dad:	77 0a                	ja     c0002db9 <create_name+0x1fc>
c0002daf:	83 cb 03             	or     ebx,0x3
c0002db2:	89 cd                	mov    ebp,ecx
c0002db4:	e9 5e ff ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002db9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002dbd:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002dc1:	45                   	inc    ebp
c0002dc2:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dc6:	eb 4d                	jmp    c0002e15 <create_name+0x258>
c0002dc8:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dcc:	66 85 ff             	test   di,di
c0002dcf:	74 19                	je     c0002dea <create_name+0x22d>
c0002dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dd5:	0f b7 d7             	movzx  edx,di
c0002dd8:	b8 4b 2b 02 c0       	mov    eax,0xc0022b4b
c0002ddd:	e8 4d f2 ff ff       	call   c000202f <chk_chr>
c0002de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002de6:	85 c0                	test   eax,eax
c0002de8:	74 0a                	je     c0002df4 <create_name+0x237>
c0002dea:	83 cb 03             	or     ebx,0x3
c0002ded:	bf 5f 00 00 00       	mov    edi,0x5f
c0002df2:	eb 21                	jmp    c0002e15 <create_name+0x258>
c0002df4:	8d 47 bf             	lea    eax,[edi-0x41]
c0002df7:	66 83 f8 19          	cmp    ax,0x19
c0002dfb:	77 07                	ja     c0002e04 <create_name+0x247>
c0002dfd:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e02:	eb 11                	jmp    c0002e15 <create_name+0x258>
c0002e04:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e07:	66 83 f8 19          	cmp    ax,0x19
c0002e0b:	77 08                	ja     c0002e15 <create_name+0x258>
c0002e0d:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e12:	83 ef 20             	sub    edi,0x20
c0002e15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002e19:	89 f8                	mov    eax,edi
c0002e1b:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002e1f:	45                   	inc    ebp
c0002e20:	e9 f2 fe ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e29:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002e2d:	75 04                	jne    c0002e33 <create_name+0x276>
c0002e2f:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002e33:	83 f9 08             	cmp    ecx,0x8
c0002e36:	75 05                	jne    c0002e3d <create_name+0x280>
c0002e38:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e41:	83 e0 0c             	and    eax,0xc
c0002e44:	83 f8 0c             	cmp    eax,0xc
c0002e47:	74 0c                	je     c0002e55 <create_name+0x298>
c0002e49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e4d:	83 e0 03             	and    eax,0x3
c0002e50:	83 f8 03             	cmp    eax,0x3
c0002e53:	75 05                	jne    c0002e5a <create_name+0x29d>
c0002e55:	83 cb 02             	or     ebx,0x2
c0002e58:	eb 19                	jmp    c0002e73 <create_name+0x2b6>
c0002e5a:	f6 c3 02             	test   bl,0x2
c0002e5d:	75 14                	jne    c0002e73 <create_name+0x2b6>
c0002e5f:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002e64:	74 03                	je     c0002e69 <create_name+0x2ac>
c0002e66:	83 cb 10             	or     ebx,0x10
c0002e69:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002e6e:	74 03                	je     c0002e73 <create_name+0x2b6>
c0002e70:	83 cb 08             	or     ebx,0x8
c0002e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e77:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002e7a:	31 c0                	xor    eax,eax
c0002e7c:	eb 0e                	jmp    c0002e8c <create_name+0x2cf>
c0002e7e:	83 f9 0b             	cmp    ecx,0xb
c0002e81:	0f 85 ca fe ff ff    	jne    c0002d51 <create_name+0x194>
c0002e87:	e9 a5 fe ff ff       	jmp    c0002d31 <create_name+0x174>
c0002e8c:	83 c4 3c             	add    esp,0x3c
c0002e8f:	5b                   	pop    ebx
c0002e90:	5e                   	pop    esi
c0002e91:	5f                   	pop    edi
c0002e92:	5d                   	pop    ebp
c0002e93:	c3                   	ret    

c0002e94 <cmp_lfn>:
c0002e94:	55                   	push   ebp
c0002e95:	57                   	push   edi
c0002e96:	89 d7                	mov    edi,edx
c0002e98:	56                   	push   esi
c0002e99:	53                   	push   ebx
c0002e9a:	83 ec 1c             	sub    esp,0x1c
c0002e9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ea1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ea4:	e8 17 f1 ff ff       	call   c0001fc0 <ld_word>
c0002ea9:	66 85 c0             	test   ax,ax
c0002eac:	74 07                	je     c0002eb5 <cmp_lfn+0x21>
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	e9 a1 00 00 00       	jmp    c0002f56 <cmp_lfn+0xc2>
c0002eb5:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002eb7:	bd 01 00 00 00       	mov    ebp,0x1
c0002ebc:	83 e3 3f             	and    ebx,0x3f
c0002ebf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ec7:	4b                   	dec    ebx
c0002ec8:	6b db 0d             	imul   ebx,ebx,0xd
c0002ecb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ecf:	0f b6 80 80 2c 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd380]
c0002ed6:	01 f8                	add    eax,edi
c0002ed8:	e8 e3 f0 ff ff       	call   c0001fc0 <ld_word>
c0002edd:	66 85 ed             	test   bp,bp
c0002ee0:	89 c6                	mov    esi,eax
c0002ee2:	74 3c                	je     c0002f20 <cmp_lfn+0x8c>
c0002ee4:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eea:	77 c2                	ja     c0002eae <cmp_lfn+0x1a>
c0002eec:	83 ec 0c             	sub    esp,0xc
c0002eef:	0f b7 c0             	movzx  eax,ax
c0002ef2:	50                   	push   eax
c0002ef3:	e8 58 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002ef8:	89 c5                	mov    ebp,eax
c0002efa:	8d 43 01             	lea    eax,[ebx+0x1]
c0002efd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002f01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002f05:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f09:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f0c:	e8 3f 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002f11:	83 c4 10             	add    esp,0x10
c0002f14:	39 c5                	cmp    ebp,eax
c0002f16:	75 96                	jne    c0002eae <cmp_lfn+0x1a>
c0002f18:	89 f5                	mov    ebp,esi
c0002f1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002f1e:	eb 0b                	jmp    c0002f2b <cmp_lfn+0x97>
c0002f20:	0f b7 c8             	movzx  ecx,ax
c0002f23:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002f29:	75 83                	jne    c0002eae <cmp_lfn+0x1a>
c0002f2b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002f2f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002f34:	75 95                	jne    c0002ecb <cmp_lfn+0x37>
c0002f36:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f39:	74 16                	je     c0002f51 <cmp_lfn+0xbd>
c0002f3b:	66 85 ed             	test   bp,bp
c0002f3e:	74 11                	je     c0002f51 <cmp_lfn+0xbd>
c0002f40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002f44:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f49:	0f 94 c0             	sete   al
c0002f4c:	0f b6 c0             	movzx  eax,al
c0002f4f:	eb 05                	jmp    c0002f56 <cmp_lfn+0xc2>
c0002f51:	b8 01 00 00 00       	mov    eax,0x1
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	5b                   	pop    ebx
c0002f5a:	5e                   	pop    esi
c0002f5b:	5f                   	pop    edi
c0002f5c:	5d                   	pop    ebp
c0002f5d:	c3                   	ret    

c0002f5e <sync_fs>:
c0002f5e:	56                   	push   esi
c0002f5f:	53                   	push   ebx
c0002f60:	53                   	push   ebx
c0002f61:	89 c3                	mov    ebx,eax
c0002f63:	e8 5c f5 ff ff       	call   c00024c4 <sync_window>
c0002f68:	85 c0                	test   eax,eax
c0002f6a:	0f 85 9a 00 00 00    	jne    c000300a <sync_fs+0xac>
c0002f70:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f73:	75 7b                	jne    c0002ff0 <sync_fs+0x92>
c0002f75:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002f79:	75 75                	jne    c0002ff0 <sync_fs+0x92>
c0002f7b:	b9 00 02 00 00       	mov    ecx,0x200
c0002f80:	8d 73 34             	lea    esi,[ebx+0x34]
c0002f83:	31 d2                	xor    edx,edx
c0002f85:	89 f0                	mov    eax,esi
c0002f87:	e8 75 f0 ff ff       	call   c0002001 <mem_set>
c0002f8c:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002f92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f97:	e8 49 f0 ff ff       	call   c0001fe5 <st_word>
c0002f9c:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fa1:	89 f0                	mov    eax,esi
c0002fa3:	e8 41 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fa8:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fae:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fb3:	e8 31 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fb8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fbb:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fc1:	e8 23 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fc6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002fc9:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002fcf:	e8 15 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002fd9:	40                   	inc    eax
c0002fda:	50                   	push   eax
c0002fdb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fde:	56                   	push   esi
c0002fdf:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fe3:	50                   	push   eax
c0002fe4:	e8 a2 ef ff ff       	call   c0001f8b <disk_write>
c0002fe9:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002fed:	83 c4 10             	add    esp,0x10
c0002ff0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ff4:	51                   	push   ecx
c0002ff5:	6a 00                	push   0x0
c0002ff7:	6a 00                	push   0x0
c0002ff9:	50                   	push   eax
c0002ffa:	e8 a2 ef ff ff       	call   c0001fa1 <disk_ioctl>
c0002fff:	83 c4 10             	add    esp,0x10
c0003002:	85 c0                	test   eax,eax
c0003004:	0f 95 c0             	setne  al
c0003007:	0f b6 c0             	movzx  eax,al
c000300a:	5a                   	pop    edx
c000300b:	5b                   	pop    ebx
c000300c:	5e                   	pop    esi
c000300d:	c3                   	ret    

c000300e <create_partition>:
c000300e:	55                   	push   ebp
c000300f:	0f b6 c0             	movzx  eax,al
c0003012:	57                   	push   edi
c0003013:	56                   	push   esi
c0003014:	53                   	push   ebx
c0003015:	83 ec 40             	sub    esp,0x40
c0003018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000301c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003020:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003024:	8d 44 24 30          	lea    eax,[esp+0x30]
c0003028:	50                   	push   eax
c0003029:	6a 01                	push   0x1
c000302b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000302f:	e8 6d ef ff ff       	call   c0001fa1 <disk_ioctl>
c0003034:	83 c4 10             	add    esp,0x10
c0003037:	85 c0                	test   eax,eax
c0003039:	0f 85 6a 01 00 00    	jne    c00031a9 <create_partition+0x19b>
c000303f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003043:	b9 05 00 00 00       	mov    ecx,0x5
c0003048:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000304c:	be 08 00 00 00       	mov    esi,0x8
c0003051:	89 f0                	mov    eax,esi
c0003053:	31 d2                	xor    edx,edx
c0003055:	0f b6 d8             	movzx  ebx,al
c0003058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000305c:	f7 f3                	div    ebx
c000305e:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003063:	76 0a                	jbe    c000306f <create_partition+0x61>
c0003065:	d1 e6                	shl    esi,1
c0003067:	49                   	dec    ecx
c0003068:	75 e7                	jne    c0003051 <create_partition+0x43>
c000306a:	be ff ff ff ff       	mov    esi,0xffffffff
c000306f:	b9 00 02 00 00       	mov    ecx,0x200
c0003074:	31 d2                	xor    edx,edx
c0003076:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000307a:	e8 82 ef ff ff       	call   c0002001 <mem_set>
c000307f:	b9 64 00 00 00       	mov    ecx,0x64
c0003084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003088:	31 d2                	xor    edx,edx
c000308a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003092:	f7 f1                	div    ecx
c0003094:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003099:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000309d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030a1:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030a7:	89 f0                	mov    eax,esi
c00030a9:	0f b6 c0             	movzx  eax,al
c00030ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030b0:	85 c9                	test   ecx,ecx
c00030b2:	75 34                	jne    c00030e8 <create_partition+0xda>
c00030b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030b8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030bd:	05 fe 01 00 00       	add    eax,0x1fe
c00030c2:	e8 1e ef ff ff       	call   c0001fe5 <st_word>
c00030c7:	6a 01                	push   0x1
c00030c9:	6a 00                	push   0x0
c00030cb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00030cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00030d3:	e8 b3 ee ff ff       	call   c0001f8b <disk_write>
c00030d8:	83 c4 10             	add    esp,0x10
c00030db:	85 c0                	test   eax,eax
c00030dd:	0f 95 c0             	setne  al
c00030e0:	0f b6 c0             	movzx  eax,al
c00030e3:	e9 c6 00 00 00       	jmp    c00031ae <create_partition+0x1a0>
c00030e8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00030ec:	76 c6                	jbe    c00030b4 <create_partition+0xa6>
c00030ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030f6:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030f9:	83 fe 64             	cmp    esi,0x64
c00030fc:	77 0d                	ja     c000310b <create_partition+0xfd>
c00030fe:	74 07                	je     c0003107 <create_partition+0xf9>
c0003100:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003105:	eb 04                	jmp    c000310b <create_partition+0xfd>
c0003107:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000310b:	31 c0                	xor    eax,eax
c000310d:	89 f2                	mov    edx,esi
c000310f:	01 ca                	add    edx,ecx
c0003111:	0f 92 c0             	setb   al
c0003114:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0003118:	77 04                	ja     c000311e <create_partition+0x110>
c000311a:	85 c0                	test   eax,eax
c000311c:	74 08                	je     c0003126 <create_partition+0x118>
c000311e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003122:	29 ce                	sub    esi,ecx
c0003124:	eb 04                	jmp    c000312a <create_partition+0x11c>
c0003126:	85 f6                	test   esi,esi
c0003128:	74 8a                	je     c00030b4 <create_partition+0xa6>
c000312a:	89 ca                	mov    edx,ecx
c000312c:	89 d8                	mov    eax,ebx
c000312e:	bf 3f 00 00 00       	mov    edi,0x3f
c0003133:	e8 b1 ee ff ff       	call   c0001fe9 <st_dword>
c0003138:	8d 43 04             	lea    eax,[ebx+0x4]
c000313b:	89 f2                	mov    edx,esi
c000313d:	83 c3 10             	add    ebx,0x10
c0003140:	e8 a4 ee ff ff       	call   c0001fe9 <st_dword>
c0003145:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003149:	31 d2                	xor    edx,edx
c000314b:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c000314e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003152:	89 c8                	mov    eax,ecx
c0003154:	01 f1                	add    ecx,esi
c0003156:	f7 f7                	div    edi
c0003158:	89 d5                	mov    ebp,edx
c000315a:	31 d2                	xor    edx,edx
c000315c:	45                   	inc    ebp
c000315d:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003161:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003164:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003167:	89 c2                	mov    edx,eax
c0003169:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316c:	c1 ea 02             	shr    edx,0x2
c000316f:	83 e2 c0             	and    edx,0xffffffc0
c0003172:	09 ea                	or     edx,ebp
c0003174:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003177:	31 d2                	xor    edx,edx
c0003179:	f7 f7                	div    edi
c000317b:	89 d6                	mov    esi,edx
c000317d:	31 d2                	xor    edx,edx
c000317f:	46                   	inc    esi
c0003180:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003184:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003187:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c000318a:	89 c7                	mov    edi,eax
c000318c:	c1 ef 02             	shr    edi,0x2
c000318f:	83 e7 c0             	and    edi,0xffffffc0
c0003192:	09 fe                	or     esi,edi
c0003194:	89 f2                	mov    edx,esi
c0003196:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003199:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c000319e:	0f 85 0c ff ff ff    	jne    c00030b0 <create_partition+0xa2>
c00031a4:	e9 0b ff ff ff       	jmp    c00030b4 <create_partition+0xa6>
c00031a9:	b8 01 00 00 00       	mov    eax,0x1
c00031ae:	83 c4 3c             	add    esp,0x3c
c00031b1:	5b                   	pop    ebx
c00031b2:	5e                   	pop    esi
c00031b3:	5f                   	pop    edi
c00031b4:	5d                   	pop    ebp
c00031b5:	c3                   	ret    

c00031b6 <get_fileinfo>:
c00031b6:	55                   	push   ebp
c00031b7:	57                   	push   edi
c00031b8:	56                   	push   esi
c00031b9:	53                   	push   ebx
c00031ba:	83 ec 1c             	sub    esp,0x1c
c00031bd:	8b 30                	mov    esi,DWORD PTR [eax]
c00031bf:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031c3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031c7:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031cb:	0f 84 d3 01 00 00    	je     c00033a4 <get_fileinfo+0x1ee>
c00031d1:	89 d3                	mov    ebx,edx
c00031d3:	89 c6                	mov    esi,eax
c00031d5:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031d9:	74 72                	je     c000324d <get_fileinfo+0x97>
c00031db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00031e3:	31 ed                	xor    ebp,ebp
c00031e5:	31 ff                	xor    edi,edi
c00031e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00031eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00031ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00031f2:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00031f6:	89 c2                	mov    edx,eax
c00031f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031fc:	85 c0                	test   eax,eax
c00031fe:	74 41                	je     c0003241 <get_fileinfo+0x8b>
c0003200:	0f b7 c5             	movzx  eax,bp
c0003203:	85 c0                	test   eax,eax
c0003205:	75 0d                	jne    c0003214 <get_fileinfo+0x5e>
c0003207:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000320d:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003212:	76 22                	jbe    c0003236 <get_fileinfo+0x80>
c0003214:	c1 e0 10             	shl    eax,0x10
c0003217:	b9 ff 00 00 00       	mov    ecx,0xff
c000321c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003220:	29 f9                	sub    ecx,edi
c0003222:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003226:	e8 f3 ee ff ff       	call   c000211e <put_utf>
c000322b:	0f b6 c0             	movzx  eax,al
c000322e:	85 c0                	test   eax,eax
c0003230:	74 0d                	je     c000323f <get_fileinfo+0x89>
c0003232:	01 c7                	add    edi,eax
c0003234:	31 d2                	xor    edx,edx
c0003236:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000323b:	89 d5                	mov    ebp,edx
c000323d:	eb a8                	jmp    c00031e7 <get_fileinfo+0x31>
c000323f:	31 ff                	xor    edi,edi
c0003241:	66 85 ed             	test   bp,bp
c0003244:	74 02                	je     c0003248 <get_fileinfo+0x92>
c0003246:	31 ff                	xor    edi,edi
c0003248:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c000324d:	31 ff                	xor    edi,edi
c000324f:	31 c9                	xor    ecx,ecx
c0003251:	83 f9 0a             	cmp    ecx,0xa
c0003254:	0f 87 ac 00 00 00    	ja     c0003306 <get_fileinfo+0x150>
c000325a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000325d:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003260:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003264:	89 c2                	mov    edx,eax
c0003266:	83 f8 20             	cmp    eax,0x20
c0003269:	0f 84 90 00 00 00    	je     c00032ff <get_fileinfo+0x149>
c000326f:	83 f8 05             	cmp    eax,0x5
c0003272:	75 05                	jne    c0003279 <get_fileinfo+0xc3>
c0003274:	ba e5 00 00 00       	mov    edx,0xe5
c0003279:	83 ff 0b             	cmp    edi,0xb
c000327c:	77 0b                	ja     c0003289 <get_fileinfo+0xd3>
c000327e:	83 fd 09             	cmp    ebp,0x9
c0003281:	75 06                	jne    c0003289 <get_fileinfo+0xd3>
c0003283:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003288:	47                   	inc    edi
c0003289:	0f b7 c2             	movzx  eax,dx
c000328c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003290:	e8 ab ed ff ff       	call   c0002040 <dbc_1st>
c0003295:	85 c0                	test   eax,eax
c0003297:	74 2f                	je     c00032c8 <get_fileinfo+0x112>
c0003299:	83 fd 08             	cmp    ebp,0x8
c000329c:	74 2a                	je     c00032c8 <get_fileinfo+0x112>
c000329e:	83 fd 0b             	cmp    ebp,0xb
c00032a1:	74 25                	je     c00032c8 <get_fileinfo+0x112>
c00032a3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032a6:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00032ae:	e8 90 ed ff ff       	call   c0002043 <dbc_2nd>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <get_fileinfo+0x112>
c00032b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032bb:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00032c0:	c1 e0 08             	shl    eax,0x8
c00032c3:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032c6:	09 c2                	or     edx,eax
c00032c8:	0f b7 d2             	movzx  edx,dx
c00032cb:	50                   	push   eax
c00032cc:	50                   	push   eax
c00032cd:	68 b5 01 00 00       	push   0x1b5
c00032d2:	52                   	push   edx
c00032d3:	e8 00 2c 00 00       	call   c0005ed8 <ff_oem2uni>
c00032d8:	83 c4 10             	add    esp,0x10
c00032db:	0f b7 c0             	movzx  eax,ax
c00032de:	85 c0                	test   eax,eax
c00032e0:	75 04                	jne    c00032e6 <get_fileinfo+0x130>
c00032e2:	31 ff                	xor    edi,edi
c00032e4:	eb 20                	jmp    c0003306 <get_fileinfo+0x150>
c00032e6:	b9 0c 00 00 00       	mov    ecx,0xc
c00032eb:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00032ef:	29 f9                	sub    ecx,edi
c00032f1:	e8 28 ee ff ff       	call   c000211e <put_utf>
c00032f6:	0f b6 c0             	movzx  eax,al
c00032f9:	85 c0                	test   eax,eax
c00032fb:	74 e5                	je     c00032e2 <get_fileinfo+0x12c>
c00032fd:	01 c7                	add    edi,eax
c00032ff:	89 e9                	mov    ecx,ebp
c0003301:	e9 4b ff ff ff       	jmp    c0003251 <get_fileinfo+0x9b>
c0003306:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000330b:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000330f:	75 5f                	jne    c0003370 <get_fileinfo+0x1ba>
c0003311:	85 ff                	test   edi,edi
c0003313:	75 0b                	jne    c0003320 <get_fileinfo+0x16a>
c0003315:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003319:	ba 01 00 00 00       	mov    edx,0x1
c000331e:	eb 3e                	jmp    c000335e <get_fileinfo+0x1a8>
c0003320:	bf 08 00 00 00       	mov    edi,0x8
c0003325:	31 d2                	xor    edx,edx
c0003327:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c000332d:	84 c0                	test   al,al
c000332f:	74 2d                	je     c000335e <get_fileinfo+0x1a8>
c0003331:	66 83 f8 2e          	cmp    ax,0x2e
c0003335:	74 1b                	je     c0003352 <get_fileinfo+0x19c>
c0003337:	8d 48 bf             	lea    ecx,[eax-0x41]
c000333a:	66 83 f9 19          	cmp    cx,0x19
c000333e:	77 17                	ja     c0003357 <get_fileinfo+0x1a1>
c0003340:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003343:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003346:	21 f9                	and    ecx,edi
c0003348:	80 e1 18             	and    cl,0x18
c000334b:	74 0a                	je     c0003357 <get_fileinfo+0x1a1>
c000334d:	83 c0 20             	add    eax,0x20
c0003350:	eb 05                	jmp    c0003357 <get_fileinfo+0x1a1>
c0003352:	bf 10 00 00 00       	mov    edi,0x10
c0003357:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000335b:	42                   	inc    edx
c000335c:	eb c9                	jmp    c0003327 <get_fileinfo+0x171>
c000335e:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003363:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003366:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000336a:	75 04                	jne    c0003370 <get_fileinfo+0x1ba>
c000336c:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003370:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003373:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003376:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003379:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000337c:	83 c0 1c             	add    eax,0x1c
c000337f:	e8 49 ec ff ff       	call   c0001fcd <ld_dword>
c0003384:	89 03                	mov    DWORD PTR [ebx],eax
c0003386:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003389:	83 c0 16             	add    eax,0x16
c000338c:	e8 2f ec ff ff       	call   c0001fc0 <ld_word>
c0003391:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003395:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003398:	83 c0 18             	add    eax,0x18
c000339b:	e8 20 ec ff ff       	call   c0001fc0 <ld_word>
c00033a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <ld_clust.isra.0>:
c00033ac:	56                   	push   esi
c00033ad:	89 c6                	mov    esi,eax
c00033af:	53                   	push   ebx
c00033b0:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033b3:	89 d3                	mov    ebx,edx
c00033b5:	e8 06 ec ff ff       	call   c0001fc0 <ld_word>
c00033ba:	0f b7 c8             	movzx  ecx,ax
c00033bd:	89 f0                	mov    eax,esi
c00033bf:	3c 03                	cmp    al,0x3
c00033c1:	75 0d                	jne    c00033d0 <ld_clust.isra.0+0x24>
c00033c3:	8d 43 14             	lea    eax,[ebx+0x14]
c00033c6:	e8 f5 eb ff ff       	call   c0001fc0 <ld_word>
c00033cb:	c1 e0 10             	shl    eax,0x10
c00033ce:	09 c1                	or     ecx,eax
c00033d0:	89 c8                	mov    eax,ecx
c00033d2:	5b                   	pop    ebx
c00033d3:	5e                   	pop    esi
c00033d4:	c3                   	ret    

c00033d5 <st_clust.isra.1>:
c00033d5:	56                   	push   esi
c00033d6:	89 c6                	mov    esi,eax
c00033d8:	53                   	push   ebx
c00033d9:	89 d3                	mov    ebx,edx
c00033db:	0f b7 d1             	movzx  edx,cx
c00033de:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00033e1:	e8 ff eb ff ff       	call   c0001fe5 <st_word>
c00033e6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00033e9:	75 0f                	jne    c00033fa <st_clust.isra.1+0x25>
c00033eb:	c1 e9 10             	shr    ecx,0x10
c00033ee:	8d 43 14             	lea    eax,[ebx+0x14]
c00033f1:	89 ca                	mov    edx,ecx
c00033f3:	5b                   	pop    ebx
c00033f4:	5e                   	pop    esi
c00033f5:	e9 eb eb ff ff       	jmp    c0001fe5 <st_word>
c00033fa:	5b                   	pop    ebx
c00033fb:	5e                   	pop    esi
c00033fc:	c3                   	ret    

c00033fd <get_fat.isra.2>:
c00033fd:	b9 01 00 00 00       	mov    ecx,0x1
c0003402:	83 fa 01             	cmp    edx,0x1
c0003405:	0f 86 f3 00 00 00    	jbe    c00034fe <get_fat.isra.2+0x101>
c000340b:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000340e:	0f 83 ea 00 00 00    	jae    c00034fe <get_fat.isra.2+0x101>
c0003414:	55                   	push   ebp
c0003415:	57                   	push   edi
c0003416:	89 c7                	mov    edi,eax
c0003418:	56                   	push   esi
c0003419:	89 d6                	mov    esi,edx
c000341b:	53                   	push   ebx
c000341c:	83 ec 0c             	sub    esp,0xc
c000341f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003422:	83 f8 02             	cmp    eax,0x2
c0003425:	74 78                	je     c000349f <get_fat.isra.2+0xa2>
c0003427:	83 f8 03             	cmp    eax,0x3
c000342a:	0f 84 96 00 00 00    	je     c00034c6 <get_fat.isra.2+0xc9>
c0003430:	48                   	dec    eax
c0003431:	0f 85 bd 00 00 00    	jne    c00034f4 <get_fat.isra.2+0xf7>
c0003437:	89 d3                	mov    ebx,edx
c0003439:	89 f8                	mov    eax,edi
c000343b:	d1 eb                	shr    ebx,1
c000343d:	01 d3                	add    ebx,edx
c000343f:	89 da                	mov    edx,ebx
c0003441:	c1 ea 09             	shr    edx,0x9
c0003444:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003447:	e8 db f0 ff ff       	call   c0002527 <move_window>
c000344c:	85 c0                	test   eax,eax
c000344e:	74 08                	je     c0003458 <get_fat.isra.2+0x5b>
c0003450:	83 c9 ff             	or     ecx,0xffffffff
c0003453:	e9 9c 00 00 00       	jmp    c00034f4 <get_fat.isra.2+0xf7>
c0003458:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000345b:	89 f8                	mov    eax,edi
c000345d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003463:	89 ea                	mov    edx,ebp
c0003465:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003469:	c1 ea 09             	shr    edx,0x9
c000346c:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000346f:	e8 b3 f0 ff ff       	call   c0002527 <move_window>
c0003474:	85 c0                	test   eax,eax
c0003476:	75 d8                	jne    c0003450 <get_fat.isra.2+0x53>
c0003478:	0f b6 c3             	movzx  eax,bl
c000347b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003481:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003486:	c1 e3 08             	shl    ebx,0x8
c0003489:	09 c3                	or     ebx,eax
c000348b:	89 d9                	mov    ecx,ebx
c000348d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003493:	83 e6 01             	and    esi,0x1
c0003496:	74 5c                	je     c00034f4 <get_fat.isra.2+0xf7>
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	c1 e9 04             	shr    ecx,0x4
c000349d:	eb 55                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c000349f:	c1 ea 08             	shr    edx,0x8
c00034a2:	89 f8                	mov    eax,edi
c00034a4:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034a7:	e8 7b f0 ff ff       	call   c0002527 <move_window>
c00034ac:	85 c0                	test   eax,eax
c00034ae:	75 a0                	jne    c0003450 <get_fat.isra.2+0x53>
c00034b0:	01 f6                	add    esi,esi
c00034b2:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00034b8:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034bc:	e8 ff ea ff ff       	call   c0001fc0 <ld_word>
c00034c1:	0f b7 c8             	movzx  ecx,ax
c00034c4:	eb 2e                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c00034c6:	c1 ea 07             	shr    edx,0x7
c00034c9:	89 f8                	mov    eax,edi
c00034cb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034ce:	e8 54 f0 ff ff       	call   c0002527 <move_window>
c00034d3:	85 c0                	test   eax,eax
c00034d5:	0f 85 75 ff ff ff    	jne    c0003450 <get_fat.isra.2+0x53>
c00034db:	c1 e6 02             	shl    esi,0x2
c00034de:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00034e4:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034e8:	e8 e0 ea ff ff       	call   c0001fcd <ld_dword>
c00034ed:	25 ff ff ff 0f       	and    eax,0xfffffff
c00034f2:	89 c1                	mov    ecx,eax
c00034f4:	83 c4 0c             	add    esp,0xc
c00034f7:	89 c8                	mov    eax,ecx
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    
c00034fe:	89 c8                	mov    eax,ecx
c0003500:	c3                   	ret    

c0003501 <dir_sdi>:
c0003501:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003507:	0f 87 b6 00 00 00    	ja     c00035c3 <dir_sdi+0xc2>
c000350d:	55                   	push   ebp
c000350e:	57                   	push   edi
c000350f:	56                   	push   esi
c0003510:	53                   	push   ebx
c0003511:	89 d3                	mov    ebx,edx
c0003513:	83 ec 1c             	sub    esp,0x1c
c0003516:	f6 c2 1f             	test   dl,0x1f
c0003519:	74 0a                	je     c0003525 <dir_sdi+0x24>
c000351b:	b8 02 00 00 00       	mov    eax,0x2
c0003520:	e9 96 00 00 00       	jmp    c00035bb <dir_sdi+0xba>
c0003525:	89 c6                	mov    esi,eax
c0003527:	8b 38                	mov    edi,DWORD PTR [eax]
c0003529:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000352c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000352f:	85 c9                	test   ecx,ecx
c0003531:	75 23                	jne    c0003556 <dir_sdi+0x55>
c0003533:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003536:	76 07                	jbe    c000353f <dir_sdi+0x3e>
c0003538:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000353b:	85 c0                	test   eax,eax
c000353d:	75 15                	jne    c0003554 <dir_sdi+0x53>
c000353f:	89 da                	mov    edx,ebx
c0003541:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003545:	c1 ea 05             	shr    edx,0x5
c0003548:	39 c2                	cmp    edx,eax
c000354a:	73 cf                	jae    c000351b <dir_sdi+0x1a>
c000354c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000354f:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003552:	eb 3d                	jmp    c0003591 <dir_sdi+0x90>
c0003554:	89 c1                	mov    ecx,eax
c0003556:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000355a:	c1 e5 09             	shl    ebp,0x9
c000355d:	89 ca                	mov    edx,ecx
c000355f:	39 eb                	cmp    ebx,ebp
c0003561:	72 1c                	jb     c000357f <dir_sdi+0x7e>
c0003563:	8b 06                	mov    eax,DWORD PTR [esi]
c0003565:	e8 93 fe ff ff       	call   c00033fd <get_fat.isra.2>
c000356a:	89 c1                	mov    ecx,eax
c000356c:	83 f8 ff             	cmp    eax,0xffffffff
c000356f:	74 45                	je     c00035b6 <dir_sdi+0xb5>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	76 a5                	jbe    c000351b <dir_sdi+0x1a>
c0003576:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003579:	76 a0                	jbe    c000351b <dir_sdi+0x1a>
c000357b:	29 eb                	sub    ebx,ebp
c000357d:	eb de                	jmp    c000355d <dir_sdi+0x5c>
c000357f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003583:	89 f8                	mov    eax,edi
c0003585:	e8 8d ec ff ff       	call   c0002217 <clst2sect>
c000358a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000358e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003591:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003594:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003597:	85 d2                	test   edx,edx
c0003599:	74 80                	je     c000351b <dir_sdi+0x1a>
c000359b:	89 d8                	mov    eax,ebx
c000359d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035a3:	c1 e8 09             	shr    eax,0x9
c00035a6:	01 d0                	add    eax,edx
c00035a8:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035ab:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00035af:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035b2:	31 c0                	xor    eax,eax
c00035b4:	eb 05                	jmp    c00035bb <dir_sdi+0xba>
c00035b6:	b8 01 00 00 00       	mov    eax,0x1
c00035bb:	83 c4 1c             	add    esp,0x1c
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    
c00035c3:	b8 02 00 00 00       	mov    eax,0x2
c00035c8:	c3                   	ret    

c00035c9 <create_chain>:
c00035c9:	55                   	push   ebp
c00035ca:	89 c5                	mov    ebp,eax
c00035cc:	57                   	push   edi
c00035cd:	89 d7                	mov    edi,edx
c00035cf:	56                   	push   esi
c00035d0:	53                   	push   ebx
c00035d1:	83 ec 1c             	sub    esp,0x1c
c00035d4:	85 d2                	test   edx,edx
c00035d6:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d8:	75 0e                	jne    c00035e8 <create_chain+0x1f>
c00035da:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00035dd:	85 c9                	test   ecx,ecx
c00035df:	74 34                	je     c0003615 <create_chain+0x4c>
c00035e1:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00035e4:	77 34                	ja     c000361a <create_chain+0x51>
c00035e6:	eb 2d                	jmp    c0003615 <create_chain+0x4c>
c00035e8:	89 f0                	mov    eax,esi
c00035ea:	e8 0e fe ff ff       	call   c00033fd <get_fat.isra.2>
c00035ef:	89 c3                	mov    ebx,eax
c00035f1:	83 f8 01             	cmp    eax,0x1
c00035f4:	77 0a                	ja     c0003600 <create_chain+0x37>
c00035f6:	bb 01 00 00 00       	mov    ebx,0x1
c00035fb:	e9 fe 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003600:	83 f8 ff             	cmp    eax,0xffffffff
c0003603:	0f 84 f2 00 00 00    	je     c00036fb <create_chain+0x132>
c0003609:	89 f9                	mov    ecx,edi
c000360b:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000360e:	76 0a                	jbe    c000361a <create_chain+0x51>
c0003610:	e9 e9 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003615:	b9 01 00 00 00       	mov    ecx,0x1
c000361a:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000361e:	75 07                	jne    c0003627 <create_chain+0x5e>
c0003620:	31 db                	xor    ebx,ebx
c0003622:	e9 d7 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003627:	39 f9                	cmp    ecx,edi
c0003629:	75 46                	jne    c0003671 <create_chain+0xa8>
c000362b:	8d 59 01             	lea    ebx,[ecx+0x1]
c000362e:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003631:	77 05                	ja     c0003638 <create_chain+0x6f>
c0003633:	bb 02 00 00 00       	mov    ebx,0x2
c0003638:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000363c:	89 da                	mov    edx,ebx
c000363e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003641:	e8 b7 fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003646:	83 f8 01             	cmp    eax,0x1
c0003649:	74 ab                	je     c00035f6 <create_chain+0x2d>
c000364b:	83 f8 ff             	cmp    eax,0xffffffff
c000364e:	0f 84 a7 00 00 00    	je     c00036fb <create_chain+0x132>
c0003654:	85 c0                	test   eax,eax
c0003656:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000365a:	74 11                	je     c000366d <create_chain+0xa4>
c000365c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000365f:	83 f8 01             	cmp    eax,0x1
c0003662:	76 0d                	jbe    c0003671 <create_chain+0xa8>
c0003664:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003667:	73 08                	jae    c0003671 <create_chain+0xa8>
c0003669:	89 c1                	mov    ecx,eax
c000366b:	eb 04                	jmp    c0003671 <create_chain+0xa8>
c000366d:	85 db                	test   ebx,ebx
c000366f:	75 3d                	jne    c00036ae <create_chain+0xe5>
c0003671:	89 cb                	mov    ebx,ecx
c0003673:	43                   	inc    ebx
c0003674:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003677:	77 0a                	ja     c0003683 <create_chain+0xba>
c0003679:	83 f9 01             	cmp    ecx,0x1
c000367c:	76 a2                	jbe    c0003620 <create_chain+0x57>
c000367e:	bb 02 00 00 00       	mov    ebx,0x2
c0003683:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003687:	89 da                	mov    edx,ebx
c0003689:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000368c:	e8 6c fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003691:	85 c0                	test   eax,eax
c0003693:	74 19                	je     c00036ae <create_chain+0xe5>
c0003695:	83 f8 01             	cmp    eax,0x1
c0003698:	0f 84 58 ff ff ff    	je     c00035f6 <create_chain+0x2d>
c000369e:	40                   	inc    eax
c000369f:	74 5a                	je     c00036fb <create_chain+0x132>
c00036a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036a5:	39 cb                	cmp    ebx,ecx
c00036a7:	75 ca                	jne    c0003673 <create_chain+0xaa>
c00036a9:	e9 72 ff ff ff       	jmp    c0003620 <create_chain+0x57>
c00036ae:	83 c9 ff             	or     ecx,0xffffffff
c00036b1:	89 da                	mov    edx,ebx
c00036b3:	89 f0                	mov    eax,esi
c00036b5:	e8 b1 f2 ff ff       	call   c000296b <put_fat>
c00036ba:	85 c0                	test   eax,eax
c00036bc:	75 36                	jne    c00036f4 <create_chain+0x12b>
c00036be:	85 ff                	test   edi,edi
c00036c0:	75 16                	jne    c00036d8 <create_chain+0x10f>
c00036c2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00036c5:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00036c8:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00036cb:	8d 57 fe             	lea    edx,[edi-0x2]
c00036ce:	39 d0                	cmp    eax,edx
c00036d0:	77 17                	ja     c00036e9 <create_chain+0x120>
c00036d2:	48                   	dec    eax
c00036d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00036d6:	eb 11                	jmp    c00036e9 <create_chain+0x120>
c00036d8:	89 d9                	mov    ecx,ebx
c00036da:	89 fa                	mov    edx,edi
c00036dc:	89 f0                	mov    eax,esi
c00036de:	e8 88 f2 ff ff       	call   c000296b <put_fat>
c00036e3:	85 c0                	test   eax,eax
c00036e5:	74 db                	je     c00036c2 <create_chain+0xf9>
c00036e7:	eb 0b                	jmp    c00036f4 <create_chain+0x12b>
c00036e9:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c00036ec:	83 c8 01             	or     eax,0x1
c00036ef:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00036f2:	eb 0a                	jmp    c00036fe <create_chain+0x135>
c00036f4:	48                   	dec    eax
c00036f5:	0f 85 fb fe ff ff    	jne    c00035f6 <create_chain+0x2d>
c00036fb:	83 cb ff             	or     ebx,0xffffffff
c00036fe:	83 c4 1c             	add    esp,0x1c
c0003701:	89 d8                	mov    eax,ebx
c0003703:	5b                   	pop    ebx
c0003704:	5e                   	pop    esi
c0003705:	5f                   	pop    edi
c0003706:	5d                   	pop    ebp
c0003707:	c3                   	ret    

c0003708 <remove_chain>:
c0003708:	55                   	push   ebp
c0003709:	57                   	push   edi
c000370a:	56                   	push   esi
c000370b:	89 d6                	mov    esi,edx
c000370d:	53                   	push   ebx
c000370e:	83 ec 0c             	sub    esp,0xc
c0003711:	83 fa 01             	cmp    edx,0x1
c0003714:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003716:	76 6a                	jbe    c0003782 <remove_chain+0x7a>
c0003718:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000371b:	76 65                	jbe    c0003782 <remove_chain+0x7a>
c000371d:	89 c5                	mov    ebp,eax
c000371f:	89 ca                	mov    edx,ecx
c0003721:	85 c9                	test   ecx,ecx
c0003723:	74 0e                	je     c0003733 <remove_chain+0x2b>
c0003725:	83 c9 ff             	or     ecx,0xffffffff
c0003728:	89 d8                	mov    eax,ebx
c000372a:	e8 3c f2 ff ff       	call   c000296b <put_fat>
c000372f:	85 c0                	test   eax,eax
c0003731:	75 5b                	jne    c000378e <remove_chain+0x86>
c0003733:	89 f2                	mov    edx,esi
c0003735:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003738:	e8 c0 fc ff ff       	call   c00033fd <get_fat.isra.2>
c000373d:	89 c7                	mov    edi,eax
c000373f:	85 c0                	test   eax,eax
c0003741:	75 04                	jne    c0003747 <remove_chain+0x3f>
c0003743:	31 c0                	xor    eax,eax
c0003745:	eb 47                	jmp    c000378e <remove_chain+0x86>
c0003747:	83 f8 01             	cmp    eax,0x1
c000374a:	74 36                	je     c0003782 <remove_chain+0x7a>
c000374c:	83 f8 ff             	cmp    eax,0xffffffff
c000374f:	74 38                	je     c0003789 <remove_chain+0x81>
c0003751:	31 c9                	xor    ecx,ecx
c0003753:	89 f2                	mov    edx,esi
c0003755:	89 d8                	mov    eax,ebx
c0003757:	e8 0f f2 ff ff       	call   c000296b <put_fat>
c000375c:	85 c0                	test   eax,eax
c000375e:	75 2e                	jne    c000378e <remove_chain+0x86>
c0003760:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003763:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003766:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003769:	39 c8                	cmp    eax,ecx
c000376b:	73 0d                	jae    c000377a <remove_chain+0x72>
c000376d:	40                   	inc    eax
c000376e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003771:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003774:	83 c8 01             	or     eax,0x1
c0003777:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000377a:	89 fe                	mov    esi,edi
c000377c:	39 fa                	cmp    edx,edi
c000377e:	77 b3                	ja     c0003733 <remove_chain+0x2b>
c0003780:	eb c1                	jmp    c0003743 <remove_chain+0x3b>
c0003782:	b8 02 00 00 00       	mov    eax,0x2
c0003787:	eb 05                	jmp    c000378e <remove_chain+0x86>
c0003789:	b8 01 00 00 00       	mov    eax,0x1
c000378e:	83 c4 0c             	add    esp,0xc
c0003791:	5b                   	pop    ebx
c0003792:	5e                   	pop    esi
c0003793:	5f                   	pop    edi
c0003794:	5d                   	pop    ebp
c0003795:	c3                   	ret    

c0003796 <dir_next>:
c0003796:	55                   	push   ebp
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	83 ec 1c             	sub    esp,0x1c
c000379d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037a2:	83 c7 20             	add    edi,0x20
c00037a5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037ab:	76 07                	jbe    c00037b4 <dir_next+0x1e>
c00037ad:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037b4:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037b7:	b9 04 00 00 00       	mov    ecx,0x4
c00037bc:	85 f6                	test   esi,esi
c00037be:	0f 84 cd 00 00 00    	je     c0003891 <dir_next+0xfb>
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	89 d1                	mov    ecx,edx
c00037c8:	89 f8                	mov    eax,edi
c00037ca:	25 ff 01 00 00       	and    eax,0x1ff
c00037cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037d3:	0f 85 a8 00 00 00    	jne    c0003881 <dir_next+0xeb>
c00037d9:	46                   	inc    esi
c00037da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037dd:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00037e0:	85 d2                	test   edx,edx
c00037e2:	75 22                	jne    c0003806 <dir_next+0x70>
c00037e4:	89 fa                	mov    edx,edi
c00037e6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037ea:	c1 ea 05             	shr    edx,0x5
c00037ed:	39 c2                	cmp    edx,eax
c00037ef:	0f 82 8c 00 00 00    	jb     c0003881 <dir_next+0xeb>
c00037f5:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037fc:	b9 04 00 00 00       	mov    ecx,0x4
c0003801:	e9 8b 00 00 00       	jmp    c0003891 <dir_next+0xfb>
c0003806:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000380a:	89 fe                	mov    esi,edi
c000380c:	48                   	dec    eax
c000380d:	c1 ee 09             	shr    esi,0x9
c0003810:	85 f0                	test   eax,esi
c0003812:	75 6d                	jne    c0003881 <dir_next+0xeb>
c0003814:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003818:	89 e8                	mov    eax,ebp
c000381a:	e8 de fb ff ff       	call   c00033fd <get_fat.isra.2>
c000381f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003823:	89 c6                	mov    esi,eax
c0003825:	83 f8 01             	cmp    eax,0x1
c0003828:	77 07                	ja     c0003831 <dir_next+0x9b>
c000382a:	b9 02 00 00 00       	mov    ecx,0x2
c000382f:	eb 60                	jmp    c0003891 <dir_next+0xfb>
c0003831:	83 f8 ff             	cmp    eax,0xffffffff
c0003834:	75 07                	jne    c000383d <dir_next+0xa7>
c0003836:	b9 01 00 00 00       	mov    ecx,0x1
c000383b:	eb 54                	jmp    c0003891 <dir_next+0xfb>
c000383d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003840:	77 30                	ja     c0003872 <dir_next+0xdc>
c0003842:	85 c9                	test   ecx,ecx
c0003844:	74 af                	je     c00037f5 <dir_next+0x5f>
c0003846:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 79 fd ff ff       	call   c00035c9 <create_chain>
c0003850:	b9 07 00 00 00       	mov    ecx,0x7
c0003855:	89 c6                	mov    esi,eax
c0003857:	85 c0                	test   eax,eax
c0003859:	74 36                	je     c0003891 <dir_next+0xfb>
c000385b:	83 f8 01             	cmp    eax,0x1
c000385e:	74 ca                	je     c000382a <dir_next+0x94>
c0003860:	83 f8 ff             	cmp    eax,0xffffffff
c0003863:	74 d1                	je     c0003836 <dir_next+0xa0>
c0003865:	89 c2                	mov    edx,eax
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 54 f2 ff ff       	call   c0002ac2 <dir_clear>
c000386e:	85 c0                	test   eax,eax
c0003870:	75 c4                	jne    c0003836 <dir_next+0xa0>
c0003872:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003875:	89 f2                	mov    edx,esi
c0003877:	89 e8                	mov    eax,ebp
c0003879:	e8 99 e9 ff ff       	call   c0002217 <clst2sect>
c000387e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003881:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003885:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003888:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c000388c:	31 c9                	xor    ecx,ecx
c000388e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003891:	83 c4 1c             	add    esp,0x1c
c0003894:	89 c8                	mov    eax,ecx
c0003896:	5b                   	pop    ebx
c0003897:	5e                   	pop    esi
c0003898:	5f                   	pop    edi
c0003899:	5d                   	pop    ebp
c000389a:	c3                   	ret    

c000389b <dir_alloc>:
c000389b:	55                   	push   ebp
c000389c:	89 c5                	mov    ebp,eax
c000389e:	57                   	push   edi
c000389f:	89 d7                	mov    edi,edx
c00038a1:	56                   	push   esi
c00038a2:	31 d2                	xor    edx,edx
c00038a4:	53                   	push   ebx
c00038a5:	83 ec 0c             	sub    esp,0xc
c00038a8:	8b 30                	mov    esi,DWORD PTR [eax]
c00038aa:	e8 52 fc ff ff       	call   c0003501 <dir_sdi>
c00038af:	85 c0                	test   eax,eax
c00038b1:	75 3b                	jne    c00038ee <dir_alloc+0x53>
c00038b3:	31 db                	xor    ebx,ebx
c00038b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038b8:	89 f0                	mov    eax,esi
c00038ba:	e8 68 ec ff ff       	call   c0002527 <move_window>
c00038bf:	85 c0                	test   eax,eax
c00038c1:	75 2b                	jne    c00038ee <dir_alloc+0x53>
c00038c3:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038c6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038c9:	85 d2                	test   edx,edx
c00038cb:	74 08                	je     c00038d5 <dir_alloc+0x3a>
c00038cd:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00038d3:	75 07                	jne    c00038dc <dir_alloc+0x41>
c00038d5:	43                   	inc    ebx
c00038d6:	39 fb                	cmp    ebx,edi
c00038d8:	75 04                	jne    c00038de <dir_alloc+0x43>
c00038da:	eb 1c                	jmp    c00038f8 <dir_alloc+0x5d>
c00038dc:	31 db                	xor    ebx,ebx
c00038de:	ba 01 00 00 00       	mov    edx,0x1
c00038e3:	89 e8                	mov    eax,ebp
c00038e5:	e8 ac fe ff ff       	call   c0003796 <dir_next>
c00038ea:	85 c0                	test   eax,eax
c00038ec:	74 c7                	je     c00038b5 <dir_alloc+0x1a>
c00038ee:	83 f8 04             	cmp    eax,0x4
c00038f1:	75 05                	jne    c00038f8 <dir_alloc+0x5d>
c00038f3:	b8 07 00 00 00       	mov    eax,0x7
c00038f8:	83 c4 0c             	add    esp,0xc
c00038fb:	5b                   	pop    ebx
c00038fc:	5e                   	pop    esi
c00038fd:	5f                   	pop    edi
c00038fe:	5d                   	pop    ebp
c00038ff:	c3                   	ret    

c0003900 <dir_read>:
c0003900:	55                   	push   ebp
c0003901:	57                   	push   edi
c0003902:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003907:	56                   	push   esi
c0003908:	be 04 00 00 00       	mov    esi,0x4
c000390d:	53                   	push   ebx
c000390e:	89 c3                	mov    ebx,eax
c0003910:	83 ec 1c             	sub    esp,0x1c
c0003913:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003917:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003919:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000391e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003921:	85 d2                	test   edx,edx
c0003923:	0f 84 e3 00 00 00    	je     c0003a0c <dir_read+0x10c>
c0003929:	89 e8                	mov    eax,ebp
c000392b:	e8 f7 eb ff ff       	call   c0002527 <move_window>
c0003930:	89 c6                	mov    esi,eax
c0003932:	85 c0                	test   eax,eax
c0003934:	0f 85 dd 00 00 00    	jne    c0003a17 <dir_read+0x117>
c000393a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000393d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003940:	88 04 24             	mov    BYTE PTR [esp],al
c0003943:	85 c0                	test   eax,eax
c0003945:	0f 84 c7 00 00 00    	je     c0003a12 <dir_read+0x112>
c000394b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000394e:	83 e1 3f             	and    ecx,0x3f
c0003951:	83 f8 2e             	cmp    eax,0x2e
c0003954:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003957:	0f 84 95 00 00 00    	je     c00039f2 <dir_read+0xf2>
c000395d:	3d e5 00 00 00       	cmp    eax,0xe5
c0003962:	0f 84 8a 00 00 00    	je     c00039f2 <dir_read+0xf2>
c0003968:	0f b6 c9             	movzx  ecx,cl
c000396b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000396f:	83 e1 df             	and    ecx,0xffffffdf
c0003972:	83 f9 08             	cmp    ecx,0x8
c0003975:	0f 94 c1             	sete   cl
c0003978:	0f b6 c9             	movzx  ecx,cl
c000397b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000397f:	75 71                	jne    c00039f2 <dir_read+0xf2>
c0003981:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003986:	75 4a                	jne    c00039d2 <dir_read+0xd2>
c0003988:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c000398c:	74 16                	je     c00039a4 <dir_read+0xa4>
c000398e:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003991:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003998:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000399c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000399f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039a2:	eb 0e                	jmp    c00039b2 <dir_read+0xb2>
c00039a4:	89 f9                	mov    ecx,edi
c00039a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ab:	0f b6 c9             	movzx  ecx,cl
c00039ae:	39 c1                	cmp    ecx,eax
c00039b0:	75 45                	jne    c00039f7 <dir_read+0xf7>
c00039b2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039bb:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039be:	75 37                	jne    c00039f7 <dir_read+0xf7>
c00039c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039c3:	e8 6c e8 ff ff       	call   c0002234 <pick_lfn>
c00039c8:	85 c0                	test   eax,eax
c00039ca:	74 2b                	je     c00039f7 <dir_read+0xf7>
c00039cc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00039cf:	4f                   	dec    edi
c00039d0:	eb 25                	jmp    c00039f7 <dir_read+0xf7>
c00039d2:	89 f8                	mov    eax,edi
c00039d4:	84 c0                	test   al,al
c00039d6:	75 11                	jne    c00039e9 <dir_read+0xe9>
c00039d8:	89 d0                	mov    eax,edx
c00039da:	e8 32 ea ff ff       	call   c0002411 <sum_sfn>
c00039df:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039e3:	75 04                	jne    c00039e9 <dir_read+0xe9>
c00039e5:	31 f6                	xor    esi,esi
c00039e7:	eb 35                	jmp    c0003a1e <dir_read+0x11e>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	eb 2c                	jmp    c0003a1e <dir_read+0x11e>
c00039f2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039f7:	31 d2                	xor    edx,edx
c00039f9:	89 d8                	mov    eax,ebx
c00039fb:	e8 96 fd ff ff       	call   c0003796 <dir_next>
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	85 c0                	test   eax,eax
c0003a04:	0f 84 14 ff ff ff    	je     c000391e <dir_read+0x1e>
c0003a0a:	eb 0b                	jmp    c0003a17 <dir_read+0x117>
c0003a0c:	85 f6                	test   esi,esi
c0003a0e:	74 d5                	je     c00039e5 <dir_read+0xe5>
c0003a10:	eb 05                	jmp    c0003a17 <dir_read+0x117>
c0003a12:	be 04 00 00 00       	mov    esi,0x4
c0003a17:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a1e:	83 c4 1c             	add    esp,0x1c
c0003a21:	89 f0                	mov    eax,esi
c0003a23:	5b                   	pop    ebx
c0003a24:	5e                   	pop    esi
c0003a25:	5f                   	pop    edi
c0003a26:	5d                   	pop    ebp
c0003a27:	c3                   	ret    

c0003a28 <dir_remove>:
c0003a28:	57                   	push   edi
c0003a29:	56                   	push   esi
c0003a2a:	53                   	push   ebx
c0003a2b:	89 c3                	mov    ebx,eax
c0003a2d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a30:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a32:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a35:	83 fa ff             	cmp    edx,0xffffffff
c0003a38:	74 09                	je     c0003a43 <dir_remove+0x1b>
c0003a3a:	e8 c2 fa ff ff       	call   c0003501 <dir_sdi>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 34                	jne    c0003a77 <dir_remove+0x4f>
c0003a43:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a46:	89 f0                	mov    eax,esi
c0003a48:	e8 da ea ff ff       	call   c0002527 <move_window>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 1c                	jne    c0003a6d <dir_remove+0x45>
c0003a51:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a54:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a57:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5b:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a5e:	73 17                	jae    c0003a77 <dir_remove+0x4f>
c0003a60:	31 d2                	xor    edx,edx
c0003a62:	89 d8                	mov    eax,ebx
c0003a64:	e8 2d fd ff ff       	call   c0003796 <dir_next>
c0003a69:	85 c0                	test   eax,eax
c0003a6b:	74 d6                	je     c0003a43 <dir_remove+0x1b>
c0003a6d:	83 f8 04             	cmp    eax,0x4
c0003a70:	75 05                	jne    c0003a77 <dir_remove+0x4f>
c0003a72:	b8 02 00 00 00       	mov    eax,0x2
c0003a77:	5b                   	pop    ebx
c0003a78:	5e                   	pop    esi
c0003a79:	5f                   	pop    edi
c0003a7a:	c3                   	ret    

c0003a7b <dir_find>:
c0003a7b:	55                   	push   ebp
c0003a7c:	31 d2                	xor    edx,edx
c0003a7e:	57                   	push   edi
c0003a7f:	56                   	push   esi
c0003a80:	53                   	push   ebx
c0003a81:	89 c3                	mov    ebx,eax
c0003a83:	83 ec 1c             	sub    esp,0x1c
c0003a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0003a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 6e fa ff ff       	call   c0003501 <dir_sdi>
c0003a93:	89 c6                	mov    esi,eax
c0003a95:	85 c0                	test   eax,eax
c0003a97:	0f 85 1d 01 00 00    	jne    c0003bba <dir_find+0x13f>
c0003a9d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003aa4:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003aa9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003aae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ab5:	e8 6d ea ff ff       	call   c0002527 <move_window>
c0003aba:	89 c6                	mov    esi,eax
c0003abc:	85 c0                	test   eax,eax
c0003abe:	0f 85 f6 00 00 00    	jne    c0003bba <dir_find+0x13f>
c0003ac4:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003ac7:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003acb:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003acf:	85 c9                	test   ecx,ecx
c0003ad1:	0f 84 de 00 00 00    	je     c0003bb5 <dir_find+0x13a>
c0003ad7:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ada:	89 d0                	mov    eax,edx
c0003adc:	83 e0 3f             	and    eax,0x3f
c0003adf:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003ae5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ae8:	0f 84 a6 00 00 00    	je     c0003b94 <dir_find+0x119>
c0003aee:	80 e2 08             	and    dl,0x8
c0003af1:	0f b6 c0             	movzx  eax,al
c0003af4:	74 0b                	je     c0003b01 <dir_find+0x86>
c0003af6:	83 f8 0f             	cmp    eax,0xf
c0003af9:	0f 85 95 00 00 00    	jne    c0003b94 <dir_find+0x119>
c0003aff:	eb 05                	jmp    c0003b06 <dir_find+0x8b>
c0003b01:	83 f8 0f             	cmp    eax,0xf
c0003b04:	75 62                	jne    c0003b68 <dir_find+0xed>
c0003b06:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b0a:	0f 85 90 00 00 00    	jne    c0003ba0 <dir_find+0x125>
c0003b10:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003b15:	74 17                	je     c0003b2e <dir_find+0xb3>
c0003b17:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003b1a:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003b22:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003b26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b29:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b2c:	eb 13                	jmp    c0003b41 <dir_find+0xc6>
c0003b2e:	89 f8                	mov    eax,edi
c0003b30:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b35:	0f b6 d0             	movzx  edx,al
c0003b38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003b3d:	39 c2                	cmp    edx,eax
c0003b3f:	75 5f                	jne    c0003ba0 <dir_find+0x125>
c0003b41:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003b45:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b4a:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003b4d:	75 51                	jne    c0003ba0 <dir_find+0x125>
c0003b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b53:	89 ea                	mov    edx,ebp
c0003b55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b58:	e8 37 f3 ff ff       	call   c0002e94 <cmp_lfn>
c0003b5d:	85 c0                	test   eax,eax
c0003b5f:	74 3f                	je     c0003ba0 <dir_find+0x125>
c0003b61:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003b65:	4f                   	dec    edi
c0003b66:	eb 38                	jmp    c0003ba0 <dir_find+0x125>
c0003b68:	89 f8                	mov    eax,edi
c0003b6a:	84 c0                	test   al,al
c0003b6c:	75 0d                	jne    c0003b7b <dir_find+0x100>
c0003b6e:	89 e8                	mov    eax,ebp
c0003b70:	e8 9c e8 ff ff       	call   c0002411 <sum_sfn>
c0003b75:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003b79:	74 3f                	je     c0003bba <dir_find+0x13f>
c0003b7b:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003b7f:	75 13                	jne    c0003b94 <dir_find+0x119>
c0003b81:	8d 53 20             	lea    edx,[ebx+0x20]
c0003b84:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b89:	89 e8                	mov    eax,ebp
c0003b8b:	e8 7c e4 ff ff       	call   c000200c <mem_cmp>
c0003b90:	85 c0                	test   eax,eax
c0003b92:	74 26                	je     c0003bba <dir_find+0x13f>
c0003b94:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b9b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ba0:	31 d2                	xor    edx,edx
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 ed fb ff ff       	call   c0003796 <dir_next>
c0003ba9:	89 c6                	mov    esi,eax
c0003bab:	85 c0                	test   eax,eax
c0003bad:	0f 84 fb fe ff ff    	je     c0003aae <dir_find+0x33>
c0003bb3:	eb 05                	jmp    c0003bba <dir_find+0x13f>
c0003bb5:	be 04 00 00 00       	mov    esi,0x4
c0003bba:	83 c4 1c             	add    esp,0x1c
c0003bbd:	89 f0                	mov    eax,esi
c0003bbf:	5b                   	pop    ebx
c0003bc0:	5e                   	pop    esi
c0003bc1:	5f                   	pop    edi
c0003bc2:	5d                   	pop    ebp
c0003bc3:	c3                   	ret    

c0003bc4 <follow_path>:
c0003bc4:	56                   	push   esi
c0003bc5:	53                   	push   ebx
c0003bc6:	89 c3                	mov    ebx,eax
c0003bc8:	83 ec 14             	sub    esp,0x14
c0003bcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003bcf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003bd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bd5:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003bd8:	83 fa 5c             	cmp    edx,0x5c
c0003bdb:	75 07                	jne    c0003be4 <follow_path+0x20>
c0003bdd:	40                   	inc    eax
c0003bde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003be2:	eb ed                	jmp    c0003bd1 <follow_path+0xd>
c0003be4:	83 fa 2f             	cmp    edx,0x2f
c0003be7:	74 f4                	je     c0003bdd <follow_path+0x19>
c0003be9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003bf0:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003bf3:	77 3e                	ja     c0003c33 <follow_path+0x6f>
c0003bf5:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003bf9:	31 d2                	xor    edx,edx
c0003bfb:	89 d8                	mov    eax,ebx
c0003bfd:	e8 ff f8 ff ff       	call   c0003501 <dir_sdi>
c0003c02:	eb 4f                	jmp    c0003c53 <follow_path+0x8f>
c0003c04:	89 d8                	mov    eax,ebx
c0003c06:	e8 70 fe ff ff       	call   c0003a7b <dir_find>
c0003c0b:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c0e:	85 c0                	test   eax,eax
c0003c10:	75 32                	jne    c0003c44 <follow_path+0x80>
c0003c12:	80 e2 04             	and    dl,0x4
c0003c15:	75 3c                	jne    c0003c53 <follow_path+0x8f>
c0003c17:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c1b:	74 31                	je     c0003c4e <follow_path+0x8a>
c0003c1d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c20:	25 ff 01 00 00       	and    eax,0x1ff
c0003c25:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c29:	8a 06                	mov    al,BYTE PTR [esi]
c0003c2b:	e8 7c f7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003c30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c33:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c37:	89 d8                	mov    eax,ebx
c0003c39:	e8 7f ef ff ff       	call   c0002bbd <create_name>
c0003c3e:	85 c0                	test   eax,eax
c0003c40:	74 c2                	je     c0003c04 <follow_path+0x40>
c0003c42:	eb 0f                	jmp    c0003c53 <follow_path+0x8f>
c0003c44:	83 f8 04             	cmp    eax,0x4
c0003c47:	75 0a                	jne    c0003c53 <follow_path+0x8f>
c0003c49:	80 e2 04             	and    dl,0x4
c0003c4c:	75 05                	jne    c0003c53 <follow_path+0x8f>
c0003c4e:	b8 05 00 00 00       	mov    eax,0x5
c0003c53:	83 c4 14             	add    esp,0x14
c0003c56:	5b                   	pop    ebx
c0003c57:	5e                   	pop    esi
c0003c58:	c3                   	ret    

c0003c59 <dir_register>:
c0003c59:	55                   	push   ebp
c0003c5a:	57                   	push   edi
c0003c5b:	56                   	push   esi
c0003c5c:	be 06 00 00 00       	mov    esi,0x6
c0003c61:	53                   	push   ebx
c0003c62:	83 ec 2c             	sub    esp,0x2c
c0003c65:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003c68:	80 e2 a0             	and    dl,0xa0
c0003c6b:	0f 85 66 01 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003c71:	8b 38                	mov    edi,DWORD PTR [eax]
c0003c73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003c7b:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003c7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c82:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003c87:	74 06                	je     c0003c8f <dir_register+0x36>
c0003c89:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003c8d:	eb ef                	jmp    c0003c7e <dir_register+0x25>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	b9 0c 00 00 00       	mov    ecx,0xc
c0003c96:	8d 40 20             	lea    eax,[eax+0x20]
c0003c99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c9d:	89 c2                	mov    edx,eax
c0003c9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ca3:	e8 44 e3 ff ff       	call   c0001fec <mem_cpy>
c0003ca8:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003cad:	74 48                	je     c0003cf7 <dir_register+0x9e>
c0003caf:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cb3:	bd 01 00 00 00       	mov    ebp,0x1
c0003cb8:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cbb:	55                   	push   ebp
c0003cbc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003cc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cc4:	e8 86 e6 ff ff       	call   c000234f <gen_numname>
c0003cc9:	58                   	pop    eax
c0003cca:	89 d8                	mov    eax,ebx
c0003ccc:	e8 aa fd ff ff       	call   c0003a7b <dir_find>
c0003cd1:	89 c6                	mov    esi,eax
c0003cd3:	85 c0                	test   eax,eax
c0003cd5:	75 10                	jne    c0003ce7 <dir_register+0x8e>
c0003cd7:	45                   	inc    ebp
c0003cd8:	83 fd 64             	cmp    ebp,0x64
c0003cdb:	75 db                	jne    c0003cb8 <dir_register+0x5f>
c0003cdd:	be 07 00 00 00       	mov    esi,0x7
c0003ce2:	e9 f0 00 00 00       	jmp    c0003dd7 <dir_register+0x17e>
c0003ce7:	83 f8 04             	cmp    eax,0x4
c0003cea:	0f 85 e7 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003cf0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003cf4:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003cf7:	bd 01 00 00 00       	mov    ebp,0x1
c0003cfc:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d01:	74 13                	je     c0003d16 <dir_register+0xbd>
c0003d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d07:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d0c:	83 c0 0c             	add    eax,0xc
c0003d0f:	31 d2                	xor    edx,edx
c0003d11:	f7 f1                	div    ecx
c0003d13:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d16:	89 ea                	mov    edx,ebp
c0003d18:	89 d8                	mov    eax,ebx
c0003d1a:	e8 7c fb ff ff       	call   c000389b <dir_alloc>
c0003d1f:	89 c6                	mov    esi,eax
c0003d21:	85 c0                	test   eax,eax
c0003d23:	0f 85 ae 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d29:	4d                   	dec    ebp
c0003d2a:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003d2e:	74 67                	je     c0003d97 <dir_register+0x13e>
c0003d30:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d33:	89 e8                	mov    eax,ebp
c0003d35:	c1 e0 05             	shl    eax,0x5
c0003d38:	29 c2                	sub    edx,eax
c0003d3a:	89 d8                	mov    eax,ebx
c0003d3c:	e8 c0 f7 ff ff       	call   c0003501 <dir_sdi>
c0003d41:	89 c6                	mov    esi,eax
c0003d43:	85 c0                	test   eax,eax
c0003d45:	0f 85 8c 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d4f:	e8 bd e6 ff ff       	call   c0002411 <sum_sfn>
c0003d54:	0f b6 e8             	movzx  ebp,al
c0003d57:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d5a:	89 f8                	mov    eax,edi
c0003d5c:	e8 c6 e7 ff ff       	call   c0002527 <move_window>
c0003d61:	89 c6                	mov    esi,eax
c0003d63:	85 c0                	test   eax,eax
c0003d65:	75 70                	jne    c0003dd7 <dir_register+0x17e>
c0003d67:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003d6c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d6f:	83 ec 0c             	sub    esp,0xc
c0003d72:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003d75:	55                   	push   ebp
c0003d76:	e8 39 e5 ff ff       	call   c00022b4 <put_lfn>
c0003d7b:	31 d2                	xor    edx,edx
c0003d7d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d81:	89 d8                	mov    eax,ebx
c0003d83:	e8 0e fa ff ff       	call   c0003796 <dir_next>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	89 c6                	mov    esi,eax
c0003d8d:	85 c0                	test   eax,eax
c0003d8f:	75 46                	jne    c0003dd7 <dir_register+0x17e>
c0003d91:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003d95:	75 c0                	jne    c0003d57 <dir_register+0xfe>
c0003d97:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d9a:	89 f8                	mov    eax,edi
c0003d9c:	e8 86 e7 ff ff       	call   c0002527 <move_window>
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	85 c0                	test   eax,eax
c0003da5:	75 30                	jne    c0003dd7 <dir_register+0x17e>
c0003da7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003daa:	b9 20 00 00 00       	mov    ecx,0x20
c0003daf:	31 d2                	xor    edx,edx
c0003db1:	e8 4b e2 ff ff       	call   c0002001 <mem_set>
c0003db6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003db9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dc2:	e8 25 e2 ff ff       	call   c0001fec <mem_cpy>
c0003dc7:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003dca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dcd:	83 e0 18             	and    eax,0x18
c0003dd0:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003dd3:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dd7:	83 c4 2c             	add    esp,0x2c
c0003dda:	89 f0                	mov    eax,esi
c0003ddc:	5b                   	pop    ebx
c0003ddd:	5e                   	pop    esi
c0003dde:	5f                   	pop    edi
c0003ddf:	5d                   	pop    ebp
c0003de0:	c3                   	ret    

c0003de1 <f_mount>:
c0003de1:	53                   	push   ebx
c0003de2:	83 ec 18             	sub    esp,0x18
c0003de5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003de9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003df1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003df5:	e8 37 e6 ff ff       	call   c0002431 <get_ldnumber>
c0003dfa:	89 c2                	mov    edx,eax
c0003dfc:	b8 0b 00 00 00       	mov    eax,0xb
c0003e01:	85 d2                	test   edx,edx
c0003e03:	78 39                	js     c0003e3e <f_mount+0x5d>
c0003e05:	8b 04 95 a0 94 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6b60]
c0003e0c:	85 c0                	test   eax,eax
c0003e0e:	74 03                	je     c0003e13 <f_mount+0x32>
c0003e10:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e17:	85 c0                	test   eax,eax
c0003e19:	74 03                	je     c0003e1e <f_mount+0x3d>
c0003e1b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e22:	89 04 95 a0 94 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6b60],eax
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	84 db                	test   bl,bl
c0003e2d:	74 0f                	je     c0003e3e <f_mount+0x5d>
c0003e2f:	31 c9                	xor    ecx,ecx
c0003e31:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e35:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e39:	e8 3c e8 ff ff       	call   c000267a <mount_volume>
c0003e3e:	83 c4 18             	add    esp,0x18
c0003e41:	5b                   	pop    ebx
c0003e42:	c3                   	ret    

c0003e43 <f_open>:
c0003e43:	55                   	push   ebp
c0003e44:	b8 09 00 00 00       	mov    eax,0x9
c0003e49:	57                   	push   edi
c0003e4a:	56                   	push   esi
c0003e4b:	53                   	push   ebx
c0003e4c:	83 ec 5c             	sub    esp,0x5c
c0003e4f:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e53:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e57:	85 db                	test   ebx,ebx
c0003e59:	0f 84 9f 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003e5f:	89 fd                	mov    ebp,edi
c0003e61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e65:	83 e5 3f             	and    ebp,0x3f
c0003e68:	89 e8                	mov    eax,ebp
c0003e6a:	89 ee                	mov    esi,ebp
c0003e6c:	0f b6 c8             	movzx  ecx,al
c0003e6f:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003e73:	e8 02 e8 ff ff       	call   c000267a <mount_volume>
c0003e78:	85 c0                	test   eax,eax
c0003e7a:	0f 85 78 02 00 00    	jne    c00040f8 <f_open+0x2b5>
c0003e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e84:	83 ec 0c             	sub    esp,0xc
c0003e87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003e8b:	68 00 02 00 00       	push   0x200
c0003e90:	e8 73 1f 00 00       	call   c0005e08 <ff_memalloc>
c0003e95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	b8 11 00 00 00       	mov    eax,0x11
c0003ea1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ea6:	0f 84 52 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003eac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003eb8:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ebb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ebf:	e8 00 fd ff ff       	call   c0003bc4 <follow_path>
c0003ec4:	85 c0                	test   eax,eax
c0003ec6:	75 0c                	jne    c0003ed4 <f_open+0x91>
c0003ec8:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ecd:	74 05                	je     c0003ed4 <f_open+0x91>
c0003ecf:	b8 06 00 00 00       	mov    eax,0x6
c0003ed4:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003eda:	0f 84 d5 00 00 00    	je     c0003fb5 <f_open+0x172>
c0003ee0:	85 c0                	test   eax,eax
c0003ee2:	74 21                	je     c0003f05 <f_open+0xc2>
c0003ee4:	83 f8 04             	cmp    eax,0x4
c0003ee7:	0f 85 f0 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003eed:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ef1:	e8 63 fd ff ff       	call   c0003c59 <dir_register>
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	0f 85 df 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003efe:	83 cd 08             	or     ebp,0x8
c0003f01:	89 ee                	mov    esi,ebp
c0003f03:	eb 2c                	jmp    c0003f31 <f_open+0xee>
c0003f05:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f09:	b8 07 00 00 00       	mov    eax,0x7
c0003f0e:	80 e2 11             	and    dl,0x11
c0003f11:	0f 85 c6 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f17:	b8 08 00 00 00       	mov    eax,0x8
c0003f1c:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f22:	0f 85 b5 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f28:	83 e7 08             	and    edi,0x8
c0003f2b:	0f 84 b1 00 00 00    	je     c0003fe2 <f_open+0x19f>
c0003f31:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f39:	89 ea                	mov    edx,ebp
c0003f3b:	8a 00                	mov    al,BYTE PTR [eax]
c0003f3d:	e8 6a f4 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003f42:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f47:	89 c7                	mov    edi,eax
c0003f49:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f4c:	e8 98 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f55:	31 c9                	xor    ecx,ecx
c0003f57:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f5f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003f63:	e8 6d f4 ff ff       	call   c00033d5 <st_clust.isra.1>
c0003f68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f6c:	31 d2                	xor    edx,edx
c0003f6e:	83 c0 1c             	add    eax,0x1c
c0003f71:	e8 73 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f7a:	85 ff                	test   edi,edi
c0003f7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f80:	74 60                	je     c0003fe2 <f_open+0x19f>
c0003f82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f86:	31 c9                	xor    ecx,ecx
c0003f88:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003f8b:	89 fa                	mov    edx,edi
c0003f8d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f91:	e8 72 f7 ff ff       	call   c0003708 <remove_chain>
c0003f96:	85 c0                	test   eax,eax
c0003f98:	0f 85 3f 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f9e:	89 ea                	mov    edx,ebp
c0003fa0:	4f                   	dec    edi
c0003fa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fa5:	e8 7d e5 ff ff       	call   c0002527 <move_window>
c0003faa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fae:	85 c0                	test   eax,eax
c0003fb0:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003fb3:	eb 27                	jmp    c0003fdc <f_open+0x199>
c0003fb5:	85 c0                	test   eax,eax
c0003fb7:	0f 85 20 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fbd:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003fc1:	b8 04 00 00 00       	mov    eax,0x4
c0003fc6:	f6 c2 10             	test   dl,0x10
c0003fc9:	0f 85 0e 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fcf:	83 e7 02             	and    edi,0x2
c0003fd2:	74 0e                	je     c0003fe2 <f_open+0x19f>
c0003fd4:	b8 07 00 00 00       	mov    eax,0x7
c0003fd9:	80 e2 01             	and    dl,0x1
c0003fdc:	0f 85 fb 00 00 00    	jne    c00040dd <f_open+0x29a>
c0003fe2:	f7 c6 08 00 00 00    	test   esi,0x8
c0003fe8:	74 03                	je     c0003fed <f_open+0x1aa>
c0003fea:	83 ce 40             	or     esi,0x40
c0003fed:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003ff1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ff5:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003ff8:	89 fa                	mov    edx,edi
c0003ffa:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ffd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004000:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004003:	e8 a4 f3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004008:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000400b:	8d 47 1c             	lea    eax,[edi+0x1c]
c000400e:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004011:	e8 b7 df ff ff       	call   c0001fcd <ld_dword>
c0004016:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004018:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000401b:	31 d2                	xor    edx,edx
c000401d:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004021:	b9 00 02 00 00       	mov    ecx,0x200
c0004026:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000402a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c000402e:	89 f0                	mov    eax,esi
c0004030:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004037:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000403a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004041:	89 f8                	mov    eax,edi
c0004043:	e8 b9 df ff ff       	call   c0002001 <mem_set>
c0004048:	83 e6 20             	and    esi,0x20
c000404b:	75 07                	jne    c0004054 <f_open+0x211>
c000404d:	31 c0                	xor    eax,eax
c000404f:	e9 89 00 00 00       	jmp    c00040dd <f_open+0x29a>
c0004054:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0004057:	85 ed                	test   ebp,ebp
c0004059:	74 f2                	je     c000404d <f_open+0x20a>
c000405b:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c000405e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004062:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004065:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0004069:	c1 e6 09             	shl    esi,0x9
c000406c:	39 ee                	cmp    esi,ebp
c000406e:	73 1c                	jae    c000408c <f_open+0x249>
c0004070:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004072:	29 f5                	sub    ebp,esi
c0004074:	e8 84 f3 ff ff       	call   c00033fd <get_fat.isra.2>
c0004079:	89 c2                	mov    edx,eax
c000407b:	83 f8 01             	cmp    eax,0x1
c000407e:	76 10                	jbe    c0004090 <f_open+0x24d>
c0004080:	83 f8 ff             	cmp    eax,0xffffffff
c0004083:	75 e7                	jne    c000406c <f_open+0x229>
c0004085:	b8 01 00 00 00       	mov    eax,0x1
c000408a:	eb 09                	jmp    c0004095 <f_open+0x252>
c000408c:	31 c0                	xor    eax,eax
c000408e:	eb 05                	jmp    c0004095 <f_open+0x252>
c0004090:	b8 02 00 00 00       	mov    eax,0x2
c0004095:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0004098:	85 c0                	test   eax,eax
c000409a:	75 41                	jne    c00040dd <f_open+0x29a>
c000409c:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c00040a2:	74 a9                	je     c000404d <f_open+0x20a>
c00040a4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00040a8:	89 f0                	mov    eax,esi
c00040aa:	e8 68 e1 ff ff       	call   c0002217 <clst2sect>
c00040af:	89 c2                	mov    edx,eax
c00040b1:	b8 02 00 00 00       	mov    eax,0x2
c00040b6:	85 d2                	test   edx,edx
c00040b8:	74 23                	je     c00040dd <f_open+0x29a>
c00040ba:	c1 ed 09             	shr    ebp,0x9
c00040bd:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c00040c1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00040c4:	6a 01                	push   0x1
c00040c6:	50                   	push   eax
c00040c7:	57                   	push   edi
c00040c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00040cc:	50                   	push   eax
c00040cd:	e8 a3 de ff ff       	call   c0001f75 <disk_read>
c00040d2:	83 c4 10             	add    esp,0x10
c00040d5:	85 c0                	test   eax,eax
c00040d7:	0f 95 c0             	setne  al
c00040da:	0f b6 c0             	movzx  eax,al
c00040dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00040e1:	83 ec 0c             	sub    esp,0xc
c00040e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00040e8:	e8 33 1d 00 00       	call   c0005e20 <ff_memfree>
c00040ed:	83 c4 10             	add    esp,0x10
c00040f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040f4:	85 c0                	test   eax,eax
c00040f6:	74 06                	je     c00040fe <f_open+0x2bb>
c00040f8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00040fe:	83 c4 5c             	add    esp,0x5c
c0004101:	5b                   	pop    ebx
c0004102:	5e                   	pop    esi
c0004103:	5f                   	pop    edi
c0004104:	5d                   	pop    ebp
c0004105:	c3                   	ret    

c0004106 <f_read>:
c0004106:	55                   	push   ebp
c0004107:	57                   	push   edi
c0004108:	56                   	push   esi
c0004109:	53                   	push   ebx
c000410a:	83 ec 2c             	sub    esp,0x2c
c000410d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004111:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004115:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000411b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000411f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004123:	89 d8                	mov    eax,ebx
c0004125:	e8 54 e3 ff ff       	call   c000247e <validate>
c000412a:	89 c5                	mov    ebp,eax
c000412c:	85 c0                	test   eax,eax
c000412e:	0f 85 c7 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004134:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004138:	85 ed                	test   ebp,ebp
c000413a:	0f 85 bb 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004140:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004144:	0f 84 ac 01 00 00    	je     c00042f6 <f_read+0x1f0>
c000414a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000414d:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004150:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004154:	39 f0                	cmp    eax,esi
c0004156:	0f 86 b0 00 00 00    	jbe    c000420c <f_read+0x106>
c000415c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0004160:	e9 a7 00 00 00       	jmp    c000420c <f_read+0x106>
c0004165:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004168:	a9 ff 01 00 00       	test   eax,0x1ff
c000416d:	0f 85 56 01 00 00    	jne    c00042c9 <f_read+0x1c3>
c0004173:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004177:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c000417b:	89 c2                	mov    edx,eax
c000417d:	4f                   	dec    edi
c000417e:	c1 ea 09             	shr    edx,0x9
c0004181:	21 d7                	and    edi,edx
c0004183:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0004187:	0f 84 8f 00 00 00    	je     c000421c <f_read+0x116>
c000418d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004191:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004194:	89 c8                	mov    eax,ecx
c0004196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000419a:	e8 78 e0 ff ff       	call   c0002217 <clst2sect>
c000419f:	85 c0                	test   eax,eax
c00041a1:	0f 84 8d 00 00 00    	je     c0004234 <f_read+0x12e>
c00041a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ab:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c00041b3:	8d 3c 01             	lea    edi,[ecx+eax*1]
c00041b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041ba:	0f 86 bf 00 00 00    	jbe    c000427f <f_read+0x179>
c00041c0:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00041c4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041c8:	c1 ee 09             	shr    esi,0x9
c00041cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041cf:	01 f2                	add    edx,esi
c00041d1:	39 c2                	cmp    edx,eax
c00041d3:	76 06                	jbe    c00041db <f_read+0xd5>
c00041d5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041d9:	89 c6                	mov    esi,eax
c00041db:	56                   	push   esi
c00041dc:	57                   	push   edi
c00041dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041e5:	50                   	push   eax
c00041e6:	e8 8a dd ff ff       	call   c0001f75 <disk_read>
c00041eb:	83 c4 10             	add    esp,0x10
c00041ee:	85 c0                	test   eax,eax
c00041f0:	75 55                	jne    c0004247 <f_read+0x141>
c00041f2:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041f6:	75 65                	jne    c000425d <f_read+0x157>
c00041f8:	c1 e6 09             	shl    esi,0x9
c00041fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041ff:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004203:	01 30                	add    DWORD PTR [eax],esi
c0004205:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004209:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000420c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004211:	0f 85 4e ff ff ff    	jne    c0004165 <f_read+0x5f>
c0004217:	e9 df 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c000421c:	85 c0                	test   eax,eax
c000421e:	75 05                	jne    c0004225 <f_read+0x11f>
c0004220:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004223:	eb 0a                	jmp    c000422f <f_read+0x129>
c0004225:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004228:	8b 03                	mov    eax,DWORD PTR [ebx]
c000422a:	e8 ce f1 ff ff       	call   c00033fd <get_fat.isra.2>
c000422f:	83 f8 01             	cmp    eax,0x1
c0004232:	77 0e                	ja     c0004242 <f_read+0x13c>
c0004234:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004238:	bd 02 00 00 00       	mov    ebp,0x2
c000423d:	e9 b9 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004242:	83 f8 ff             	cmp    eax,0xffffffff
c0004245:	75 0e                	jne    c0004255 <f_read+0x14f>
c0004247:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000424b:	bd 01 00 00 00       	mov    ebp,0x1
c0004250:	e9 a6 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004255:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004258:	e9 30 ff ff ff       	jmp    c000418d <f_read+0x87>
c000425d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004260:	29 f8                	sub    eax,edi
c0004262:	39 f0                	cmp    eax,esi
c0004264:	73 92                	jae    c00041f8 <f_read+0xf2>
c0004266:	c1 e0 09             	shl    eax,0x9
c0004269:	8d 53 28             	lea    edx,[ebx+0x28]
c000426c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004270:	b9 00 02 00 00       	mov    ecx,0x200
c0004275:	e8 72 dd ff ff       	call   c0001fec <mem_cpy>
c000427a:	e9 79 ff ff ff       	jmp    c00041f8 <f_read+0xf2>
c000427f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004282:	39 f8                	cmp    eax,edi
c0004284:	74 40                	je     c00042c6 <f_read+0x1c0>
c0004286:	8d 73 28             	lea    esi,[ebx+0x28]
c0004289:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000428d:	74 1e                	je     c00042ad <f_read+0x1a7>
c000428f:	6a 01                	push   0x1
c0004291:	50                   	push   eax
c0004292:	56                   	push   esi
c0004293:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004297:	50                   	push   eax
c0004298:	e8 ee dc ff ff       	call   c0001f8b <disk_write>
c000429d:	83 c4 10             	add    esp,0x10
c00042a0:	85 c0                	test   eax,eax
c00042a2:	75 a3                	jne    c0004247 <f_read+0x141>
c00042a4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042a7:	83 e0 7f             	and    eax,0x7f
c00042aa:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ad:	6a 01                	push   0x1
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b9:	50                   	push   eax
c00042ba:	e8 b6 dc ff ff       	call   c0001f75 <disk_read>
c00042bf:	83 c4 10             	add    esp,0x10
c00042c2:	85 c0                	test   eax,eax
c00042c4:	75 81                	jne    c0004247 <f_read+0x141>
c00042c6:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00042c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042cc:	ba 00 02 00 00       	mov    edx,0x200
c00042d1:	25 ff 01 00 00       	and    eax,0x1ff
c00042d6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00042da:	29 c2                	sub    edx,eax
c00042dc:	39 d6                	cmp    esi,edx
c00042de:	76 02                	jbe    c00042e2 <f_read+0x1dc>
c00042e0:	89 d6                	mov    esi,edx
c00042e2:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042e6:	89 f1                	mov    ecx,esi
c00042e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042ec:	e8 fb dc ff ff       	call   c0001fec <mem_cpy>
c00042f1:	e9 05 ff ff ff       	jmp    c00041fb <f_read+0xf5>
c00042f6:	bd 07 00 00 00       	mov    ebp,0x7
c00042fb:	83 c4 2c             	add    esp,0x2c
c00042fe:	89 e8                	mov    eax,ebp
c0004300:	5b                   	pop    ebx
c0004301:	5e                   	pop    esi
c0004302:	5f                   	pop    edi
c0004303:	5d                   	pop    ebp
c0004304:	c3                   	ret    

c0004305 <f_write>:
c0004305:	55                   	push   ebp
c0004306:	57                   	push   edi
c0004307:	56                   	push   esi
c0004308:	53                   	push   ebx
c0004309:	83 ec 2c             	sub    esp,0x2c
c000430c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004310:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004314:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000431a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000431e:	89 d8                	mov    eax,ebx
c0004320:	e8 59 e1 ff ff       	call   c000247e <validate>
c0004325:	89 c5                	mov    ebp,eax
c0004327:	85 c0                	test   eax,eax
c0004329:	0f 85 14 02 00 00    	jne    c0004543 <f_write+0x23e>
c000432f:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004333:	85 ed                	test   ebp,ebp
c0004335:	0f 85 08 02 00 00    	jne    c0004543 <f_write+0x23e>
c000433b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433f:	0f 84 f9 01 00 00    	je     c000453e <f_write+0x239>
c0004345:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004348:	89 c7                	mov    edi,eax
c000434a:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c000434e:	0f 83 ef 00 00 00    	jae    c0004443 <f_write+0x13e>
c0004354:	f7 d0                	not    eax
c0004356:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000435a:	e9 e4 00 00 00       	jmp    c0004443 <f_write+0x13e>
c000435f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004362:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004368:	0f 85 9a 01 00 00    	jne    c0004508 <f_write+0x203>
c000436e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004372:	89 d1                	mov    ecx,edx
c0004374:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004378:	c1 e9 09             	shr    ecx,0x9
c000437b:	48                   	dec    eax
c000437c:	21 c8                	and    eax,ecx
c000437e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004382:	0f 84 c8 00 00 00    	je     c0004450 <f_write+0x14b>
c0004388:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000438c:	0f 85 22 01 00 00    	jne    c00044b4 <f_write+0x1af>
c0004392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004396:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004399:	89 c8                	mov    eax,ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	e8 73 de ff ff       	call   c0002217 <clst2sect>
c00043a4:	85 c0                	test   eax,eax
c00043a6:	0f 84 d2 00 00 00    	je     c000447e <f_write+0x179>
c00043ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00043b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b4:	01 c7                	add    edi,eax
c00043b6:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043be:	0f 86 1c 01 00 00    	jbe    c00044e0 <f_write+0x1db>
c00043c4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043c8:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043cc:	c1 ee 09             	shr    esi,0x9
c00043cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043d3:	01 f2                	add    edx,esi
c00043d5:	39 c2                	cmp    edx,eax
c00043d7:	76 06                	jbe    c00043df <f_write+0xda>
c00043d9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043dd:	89 c6                	mov    esi,eax
c00043df:	56                   	push   esi
c00043e0:	57                   	push   edi
c00043e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043e9:	50                   	push   eax
c00043ea:	e8 9c db ff ff       	call   c0001f8b <disk_write>
c00043ef:	83 c4 10             	add    esp,0x10
c00043f2:	85 c0                	test   eax,eax
c00043f4:	0f 85 97 00 00 00    	jne    c0004491 <f_write+0x18c>
c00043fa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00043fd:	29 fa                	sub    edx,edi
c00043ff:	39 f2                	cmp    edx,esi
c0004401:	73 1d                	jae    c0004420 <f_write+0x11b>
c0004403:	8d 43 28             	lea    eax,[ebx+0x28]
c0004406:	c1 e2 09             	shl    edx,0x9
c0004409:	b9 00 02 00 00       	mov    ecx,0x200
c000440e:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004412:	e8 d5 db ff ff       	call   c0001fec <mem_cpy>
c0004417:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000441a:	83 e0 7f             	and    eax,0x7f
c000441d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004420:	c1 e6 09             	shl    esi,0x9
c0004423:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004427:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000442b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000442f:	01 30                	add    DWORD PTR [eax],esi
c0004431:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004434:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004437:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000443a:	39 f0                	cmp    eax,esi
c000443c:	73 02                	jae    c0004440 <f_write+0x13b>
c000443e:	89 f0                	mov    eax,esi
c0004440:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004443:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004448:	0f 85 11 ff ff ff    	jne    c000435f <f_write+0x5a>
c000444e:	eb 1b                	jmp    c000446b <f_write+0x166>
c0004450:	85 d2                	test   edx,edx
c0004452:	75 09                	jne    c000445d <f_write+0x158>
c0004454:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004457:	85 c0                	test   eax,eax
c0004459:	75 1e                	jne    c0004479 <f_write+0x174>
c000445b:	eb 03                	jmp    c0004460 <f_write+0x15b>
c000445d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004460:	89 d8                	mov    eax,ebx
c0004462:	e8 62 f1 ff ff       	call   c00035c9 <create_chain>
c0004467:	85 c0                	test   eax,eax
c0004469:	75 0e                	jne    c0004479 <f_write+0x174>
c000446b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000446e:	83 c8 40             	or     eax,0x40
c0004471:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004474:	e9 ca 00 00 00       	jmp    c0004543 <f_write+0x23e>
c0004479:	83 f8 01             	cmp    eax,0x1
c000447c:	75 0e                	jne    c000448c <f_write+0x187>
c000447e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004482:	bd 02 00 00 00       	mov    ebp,0x2
c0004487:	e9 b7 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000448c:	83 f8 ff             	cmp    eax,0xffffffff
c000448f:	75 0e                	jne    c000449f <f_write+0x19a>
c0004491:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004495:	bd 01 00 00 00       	mov    ebp,0x1
c000449a:	e9 a4 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000449f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044a2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044a6:	0f 85 dc fe ff ff    	jne    c0004388 <f_write+0x83>
c00044ac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044af:	e9 d4 fe ff ff       	jmp    c0004388 <f_write+0x83>
c00044b4:	6a 01                	push   0x1
c00044b6:	8d 43 28             	lea    eax,[ebx+0x28]
c00044b9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044bc:	50                   	push   eax
c00044bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044c5:	50                   	push   eax
c00044c6:	e8 c0 da ff ff       	call   c0001f8b <disk_write>
c00044cb:	83 c4 10             	add    esp,0x10
c00044ce:	85 c0                	test   eax,eax
c00044d0:	75 bf                	jne    c0004491 <f_write+0x18c>
c00044d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044d5:	83 e0 7f             	and    eax,0x7f
c00044d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044db:	e9 b2 fe ff ff       	jmp    c0004392 <f_write+0x8d>
c00044e0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00044e3:	74 20                	je     c0004505 <f_write+0x200>
c00044e5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044e8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00044eb:	76 18                	jbe    c0004505 <f_write+0x200>
c00044ed:	6a 01                	push   0x1
c00044ef:	8d 43 28             	lea    eax,[ebx+0x28]
c00044f2:	57                   	push   edi
c00044f3:	50                   	push   eax
c00044f4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00044f8:	50                   	push   eax
c00044f9:	e8 77 da ff ff       	call   c0001f75 <disk_read>
c00044fe:	83 c4 10             	add    esp,0x10
c0004501:	85 c0                	test   eax,eax
c0004503:	75 8c                	jne    c0004491 <f_write+0x18c>
c0004505:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004508:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000450b:	ba 00 02 00 00       	mov    edx,0x200
c0004510:	25 ff 01 00 00       	and    eax,0x1ff
c0004515:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004519:	29 c2                	sub    edx,eax
c000451b:	39 d6                	cmp    esi,edx
c000451d:	76 02                	jbe    c0004521 <f_write+0x21c>
c000451f:	89 d6                	mov    esi,edx
c0004521:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004525:	89 f1                	mov    ecx,esi
c0004527:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000452b:	e8 bc da ff ff       	call   c0001fec <mem_cpy>
c0004530:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004533:	83 c8 80             	or     eax,0xffffff80
c0004536:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004539:	e9 e5 fe ff ff       	jmp    c0004423 <f_write+0x11e>
c000453e:	bd 07 00 00 00       	mov    ebp,0x7
c0004543:	83 c4 2c             	add    esp,0x2c
c0004546:	89 e8                	mov    eax,ebp
c0004548:	5b                   	pop    ebx
c0004549:	5e                   	pop    esi
c000454a:	5f                   	pop    edi
c000454b:	5d                   	pop    ebp
c000454c:	c3                   	ret    

c000454d <f_sync>:
c000454d:	56                   	push   esi
c000454e:	53                   	push   ebx
c000454f:	83 ec 14             	sub    esp,0x14
c0004552:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004556:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 1d df ff ff       	call   c000247e <validate>
c0004561:	85 c0                	test   eax,eax
c0004563:	0f 85 a3 00 00 00    	jne    c000460c <f_sync+0xbf>
c0004569:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000456c:	f6 c2 40             	test   dl,0x40
c000456f:	0f 84 97 00 00 00    	je     c000460c <f_sync+0xbf>
c0004575:	80 e2 80             	and    dl,0x80
c0004578:	74 2e                	je     c00045a8 <f_sync+0x5b>
c000457a:	6a 01                	push   0x1
c000457c:	8d 43 28             	lea    eax,[ebx+0x28]
c000457f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004582:	50                   	push   eax
c0004583:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004587:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000458b:	50                   	push   eax
c000458c:	e8 fa d9 ff ff       	call   c0001f8b <disk_write>
c0004591:	83 c4 10             	add    esp,0x10
c0004594:	89 c2                	mov    edx,eax
c0004596:	b8 01 00 00 00       	mov    eax,0x1
c000459b:	85 d2                	test   edx,edx
c000459d:	75 6d                	jne    c000460c <f_sync+0xbf>
c000459f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045a2:	83 e0 7f             	and    eax,0x7f
c00045a5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045a8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045af:	e8 73 df ff ff       	call   c0002527 <move_window>
c00045b4:	85 c0                	test   eax,eax
c00045b6:	75 54                	jne    c000460c <f_sync+0xbf>
c00045b8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045bb:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045be:	89 f2                	mov    edx,esi
c00045c0:	83 c8 20             	or     eax,0x20
c00045c3:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045c6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045cb:	e8 05 ee ff ff       	call   c00033d5 <st_clust.isra.1>
c00045d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045d3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045d6:	e8 0e da ff ff       	call   c0001fe9 <st_dword>
c00045db:	8d 46 16             	lea    eax,[esi+0x16]
c00045de:	ba 00 00 21 50       	mov    edx,0x50210000
c00045e3:	e8 01 da ff ff       	call   c0001fe9 <st_dword>
c00045e8:	31 d2                	xor    edx,edx
c00045ea:	8d 46 12             	lea    eax,[esi+0x12]
c00045ed:	e8 f3 d9 ff ff       	call   c0001fe5 <st_word>
c00045f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00045fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045fe:	e8 5b e9 ff ff       	call   c0002f5e <sync_fs>
c0004603:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004606:	83 e2 bf             	and    edx,0xffffffbf
c0004609:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000460c:	83 c4 14             	add    esp,0x14
c000460f:	5b                   	pop    ebx
c0004610:	5e                   	pop    esi
c0004611:	c3                   	ret    

c0004612 <f_close>:
c0004612:	53                   	push   ebx
c0004613:	83 ec 24             	sub    esp,0x24
c0004616:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000461a:	53                   	push   ebx
c000461b:	e8 2d ff ff ff       	call   c000454d <f_sync>
c0004620:	83 c4 10             	add    esp,0x10
c0004623:	85 c0                	test   eax,eax
c0004625:	75 15                	jne    c000463c <f_close+0x2a>
c0004627:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000462b:	89 d8                	mov    eax,ebx
c000462d:	e8 4c de ff ff       	call   c000247e <validate>
c0004632:	85 c0                	test   eax,eax
c0004634:	75 06                	jne    c000463c <f_close+0x2a>
c0004636:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000463c:	83 c4 18             	add    esp,0x18
c000463f:	5b                   	pop    ebx
c0004640:	c3                   	ret    

c0004641 <f_lseek>:
c0004641:	55                   	push   ebp
c0004642:	57                   	push   edi
c0004643:	56                   	push   esi
c0004644:	53                   	push   ebx
c0004645:	83 ec 2c             	sub    esp,0x2c
c0004648:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000464c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004650:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004654:	89 d8                	mov    eax,ebx
c0004656:	e8 23 de ff ff       	call   c000247e <validate>
c000465b:	89 c5                	mov    ebp,eax
c000465d:	85 c0                	test   eax,eax
c000465f:	0f 85 83 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004665:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004669:	85 ed                	test   ebp,ebp
c000466b:	0f 85 77 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004671:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004674:	39 f0                	cmp    eax,esi
c0004676:	73 08                	jae    c0004680 <f_lseek+0x3f>
c0004678:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000467c:	75 02                	jne    c0004680 <f_lseek+0x3f>
c000467e:	89 c6                	mov    esi,eax
c0004680:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004683:	85 f6                	test   esi,esi
c0004685:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000468c:	75 07                	jne    c0004695 <f_lseek+0x54>
c000468e:	31 f6                	xor    esi,esi
c0004690:	e9 e2 00 00 00       	jmp    c0004777 <f_lseek+0x136>
c0004695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004699:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000469d:	c1 e7 09             	shl    edi,0x9
c00046a0:	85 c9                	test   ecx,ecx
c00046a2:	74 28                	je     c00046cc <f_lseek+0x8b>
c00046a4:	49                   	dec    ecx
c00046a5:	31 d2                	xor    edx,edx
c00046a7:	8d 46 ff             	lea    eax,[esi-0x1]
c00046aa:	f7 f7                	div    edi
c00046ac:	31 d2                	xor    edx,edx
c00046ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046b2:	89 c8                	mov    eax,ecx
c00046b4:	f7 f7                	div    edi
c00046b6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046ba:	72 10                	jb     c00046cc <f_lseek+0x8b>
c00046bc:	89 f8                	mov    eax,edi
c00046be:	f7 d8                	neg    eax
c00046c0:	21 c1                	and    ecx,eax
c00046c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046c5:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046c8:	29 ce                	sub    esi,ecx
c00046ca:	eb 3c                	jmp    c0004708 <f_lseek+0xc7>
c00046cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046cf:	85 c0                	test   eax,eax
c00046d1:	75 32                	jne    c0004705 <f_lseek+0xc4>
c00046d3:	31 d2                	xor    edx,edx
c00046d5:	89 d8                	mov    eax,ebx
c00046d7:	e8 ed ee ff ff       	call   c00035c9 <create_chain>
c00046dc:	83 f8 01             	cmp    eax,0x1
c00046df:	75 0e                	jne    c00046ef <f_lseek+0xae>
c00046e1:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00046e5:	bd 02 00 00 00       	mov    ebp,0x2
c00046ea:	e9 f9 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c00046ef:	83 f8 ff             	cmp    eax,0xffffffff
c00046f2:	75 0e                	jne    c0004702 <f_lseek+0xc1>
c00046f4:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00046f8:	bd 01 00 00 00       	mov    ebp,0x1
c00046fd:	e9 e6 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c0004702:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004705:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004708:	85 c0                	test   eax,eax
c000470a:	74 82                	je     c000468e <f_lseek+0x4d>
c000470c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000470f:	39 fe                	cmp    esi,edi
c0004711:	76 3d                	jbe    c0004750 <f_lseek+0x10f>
c0004713:	01 fa                	add    edx,edi
c0004715:	29 fe                	sub    esi,edi
c0004717:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000471a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000471e:	89 c2                	mov    edx,eax
c0004720:	74 0d                	je     c000472f <f_lseek+0xee>
c0004722:	89 d8                	mov    eax,ebx
c0004724:	e8 a0 ee ff ff       	call   c00035c9 <create_chain>
c0004729:	85 c0                	test   eax,eax
c000472b:	75 09                	jne    c0004736 <f_lseek+0xf5>
c000472d:	eb 1f                	jmp    c000474e <f_lseek+0x10d>
c000472f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004731:	e8 c7 ec ff ff       	call   c00033fd <get_fat.isra.2>
c0004736:	83 f8 ff             	cmp    eax,0xffffffff
c0004739:	74 b9                	je     c00046f4 <f_lseek+0xb3>
c000473b:	83 f8 01             	cmp    eax,0x1
c000473e:	76 a1                	jbe    c00046e1 <f_lseek+0xa0>
c0004740:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004744:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004747:	76 98                	jbe    c00046e1 <f_lseek+0xa0>
c0004749:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000474c:	eb be                	jmp    c000470c <f_lseek+0xcb>
c000474e:	31 f6                	xor    esi,esi
c0004750:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004753:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004759:	0f 84 2f ff ff ff    	je     c000468e <f_lseek+0x4d>
c000475f:	89 c2                	mov    edx,eax
c0004761:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004765:	e8 ad da ff ff       	call   c0002217 <clst2sect>
c000476a:	85 c0                	test   eax,eax
c000476c:	0f 84 6f ff ff ff    	je     c00046e1 <f_lseek+0xa0>
c0004772:	c1 ee 09             	shr    esi,0x9
c0004775:	01 c6                	add    esi,eax
c0004777:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000477a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000477d:	76 0c                	jbe    c000478b <f_lseek+0x14a>
c000477f:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004785:	83 ca 40             	or     edx,0x40
c0004788:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000478b:	a9 ff 01 00 00       	test   eax,0x1ff
c0004790:	74 56                	je     c00047e8 <f_lseek+0x1a7>
c0004792:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004795:	39 f0                	cmp    eax,esi
c0004797:	74 4f                	je     c00047e8 <f_lseek+0x1a7>
c0004799:	8d 7b 28             	lea    edi,[ebx+0x28]
c000479c:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047a0:	74 26                	je     c00047c8 <f_lseek+0x187>
c00047a2:	6a 01                	push   0x1
c00047a4:	50                   	push   eax
c00047a5:	57                   	push   edi
c00047a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047aa:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047ae:	50                   	push   eax
c00047af:	e8 d7 d7 ff ff       	call   c0001f8b <disk_write>
c00047b4:	83 c4 10             	add    esp,0x10
c00047b7:	85 c0                	test   eax,eax
c00047b9:	0f 85 35 ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047bf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047c2:	83 e0 7f             	and    eax,0x7f
c00047c5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047c8:	6a 01                	push   0x1
c00047ca:	56                   	push   esi
c00047cb:	57                   	push   edi
c00047cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047d0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047d4:	50                   	push   eax
c00047d5:	e8 9b d7 ff ff       	call   c0001f75 <disk_read>
c00047da:	83 c4 10             	add    esp,0x10
c00047dd:	85 c0                	test   eax,eax
c00047df:	0f 85 0f ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047e5:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00047e8:	83 c4 2c             	add    esp,0x2c
c00047eb:	89 e8                	mov    eax,ebp
c00047ed:	5b                   	pop    ebx
c00047ee:	5e                   	pop    esi
c00047ef:	5f                   	pop    edi
c00047f0:	5d                   	pop    ebp
c00047f1:	c3                   	ret    

c00047f2 <f_opendir>:
c00047f2:	56                   	push   esi
c00047f3:	b8 09 00 00 00       	mov    eax,0x9
c00047f8:	53                   	push   ebx
c00047f9:	83 ec 24             	sub    esp,0x24
c00047fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004800:	85 db                	test   ebx,ebx
c0004802:	0f 84 af 00 00 00    	je     c00048b7 <f_opendir+0xc5>
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000480e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004812:	e8 63 de ff ff       	call   c000267a <mount_volume>
c0004817:	85 c0                	test   eax,eax
c0004819:	0f 85 92 00 00 00    	jne    c00048b1 <f_opendir+0xbf>
c000481f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004823:	83 ec 0c             	sub    esp,0xc
c0004826:	89 03                	mov    DWORD PTR [ebx],eax
c0004828:	68 00 02 00 00       	push   0x200
c000482d:	e8 d6 15 00 00       	call   c0005e08 <ff_memalloc>
c0004832:	83 c4 10             	add    esp,0x10
c0004835:	89 c6                	mov    esi,eax
c0004837:	b8 11 00 00 00       	mov    eax,0x11
c000483c:	85 f6                	test   esi,esi
c000483e:	74 77                	je     c00048b7 <f_opendir+0xc5>
c0004840:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004844:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004848:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000484b:	89 d8                	mov    eax,ebx
c000484d:	e8 72 f3 ff ff       	call   c0003bc4 <follow_path>
c0004852:	85 c0                	test   eax,eax
c0004854:	75 37                	jne    c000488d <f_opendir+0x9b>
c0004856:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000485a:	75 1c                	jne    c0004878 <f_opendir+0x86>
c000485c:	b8 05 00 00 00       	mov    eax,0x5
c0004861:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004865:	74 26                	je     c000488d <f_opendir+0x9b>
c0004867:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000486a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486e:	8a 00                	mov    al,BYTE PTR [eax]
c0004870:	e8 37 eb ff ff       	call   c00033ac <ld_clust.isra.0>
c0004875:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004878:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000487c:	31 d2                	xor    edx,edx
c000487e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004882:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004886:	89 d8                	mov    eax,ebx
c0004888:	e8 74 ec ff ff       	call   c0003501 <dir_sdi>
c000488d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004891:	83 ec 0c             	sub    esp,0xc
c0004894:	56                   	push   esi
c0004895:	e8 86 15 00 00       	call   c0005e20 <ff_memfree>
c000489a:	83 c4 10             	add    esp,0x10
c000489d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a1:	83 f8 04             	cmp    eax,0x4
c00048a4:	74 06                	je     c00048ac <f_opendir+0xba>
c00048a6:	85 c0                	test   eax,eax
c00048a8:	74 0d                	je     c00048b7 <f_opendir+0xc5>
c00048aa:	eb 05                	jmp    c00048b1 <f_opendir+0xbf>
c00048ac:	b8 05 00 00 00       	mov    eax,0x5
c00048b1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048b7:	83 c4 24             	add    esp,0x24
c00048ba:	5b                   	pop    ebx
c00048bb:	5e                   	pop    esi
c00048bc:	c3                   	ret    

c00048bd <f_closedir>:
c00048bd:	53                   	push   ebx
c00048be:	83 ec 18             	sub    esp,0x18
c00048c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048c5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048c9:	89 d8                	mov    eax,ebx
c00048cb:	e8 ae db ff ff       	call   c000247e <validate>
c00048d0:	85 c0                	test   eax,eax
c00048d2:	75 06                	jne    c00048da <f_closedir+0x1d>
c00048d4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048da:	83 c4 18             	add    esp,0x18
c00048dd:	5b                   	pop    ebx
c00048de:	c3                   	ret    

c00048df <f_readdir>:
c00048df:	57                   	push   edi
c00048e0:	56                   	push   esi
c00048e1:	53                   	push   ebx
c00048e2:	83 ec 20             	sub    esp,0x20
c00048e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00048e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00048ed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048f1:	89 d8                	mov    eax,ebx
c00048f3:	e8 86 db ff ff       	call   c000247e <validate>
c00048f8:	85 c0                	test   eax,eax
c00048fa:	75 6e                	jne    c000496a <f_readdir+0x8b>
c00048fc:	85 ff                	test   edi,edi
c00048fe:	75 0b                	jne    c000490b <f_readdir+0x2c>
c0004900:	31 d2                	xor    edx,edx
c0004902:	89 d8                	mov    eax,ebx
c0004904:	e8 f8 eb ff ff       	call   c0003501 <dir_sdi>
c0004909:	eb 5f                	jmp    c000496a <f_readdir+0x8b>
c000490b:	83 ec 0c             	sub    esp,0xc
c000490e:	68 00 02 00 00       	push   0x200
c0004913:	e8 f0 14 00 00       	call   c0005e08 <ff_memalloc>
c0004918:	83 c4 10             	add    esp,0x10
c000491b:	89 c6                	mov    esi,eax
c000491d:	b8 11 00 00 00       	mov    eax,0x11
c0004922:	85 f6                	test   esi,esi
c0004924:	74 44                	je     c000496a <f_readdir+0x8b>
c0004926:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000492a:	31 d2                	xor    edx,edx
c000492c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000492f:	89 d8                	mov    eax,ebx
c0004931:	e8 ca ef ff ff       	call   c0003900 <dir_read>
c0004936:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000493b:	75 19                	jne    c0004956 <f_readdir+0x77>
c000493d:	89 fa                	mov    edx,edi
c000493f:	89 d8                	mov    eax,ebx
c0004941:	e8 70 e8 ff ff       	call   c00031b6 <get_fileinfo>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	e8 47 ee ff ff       	call   c0003796 <dir_next>
c000494f:	83 f8 04             	cmp    eax,0x4
c0004952:	75 02                	jne    c0004956 <f_readdir+0x77>
c0004954:	31 c0                	xor    eax,eax
c0004956:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000495a:	83 ec 0c             	sub    esp,0xc
c000495d:	56                   	push   esi
c000495e:	e8 bd 14 00 00       	call   c0005e20 <ff_memfree>
c0004963:	83 c4 10             	add    esp,0x10
c0004966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000496a:	83 c4 20             	add    esp,0x20
c000496d:	5b                   	pop    ebx
c000496e:	5e                   	pop    esi
c000496f:	5f                   	pop    edi
c0004970:	c3                   	ret    

c0004971 <f_stat>:
c0004971:	57                   	push   edi
c0004972:	31 c9                	xor    ecx,ecx
c0004974:	56                   	push   esi
c0004975:	53                   	push   ebx
c0004976:	83 ec 30             	sub    esp,0x30
c0004979:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000497d:	89 e2                	mov    edx,esp
c000497f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004983:	e8 f2 dc ff ff       	call   c000267a <mount_volume>
c0004988:	89 c3                	mov    ebx,eax
c000498a:	85 c0                	test   eax,eax
c000498c:	75 59                	jne    c00049e7 <f_stat+0x76>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	bb 11 00 00 00       	mov    ebx,0x11
c0004996:	68 00 02 00 00       	push   0x200
c000499b:	e8 68 14 00 00       	call   c0005e08 <ff_memalloc>
c00049a0:	83 c4 10             	add    esp,0x10
c00049a3:	89 c6                	mov    esi,eax
c00049a5:	85 c0                	test   eax,eax
c00049a7:	74 3e                	je     c00049e7 <f_stat+0x76>
c00049a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049b0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049b3:	89 e0                	mov    eax,esp
c00049b5:	e8 0a f2 ff ff       	call   c0003bc4 <follow_path>
c00049ba:	89 c3                	mov    ebx,eax
c00049bc:	85 c0                	test   eax,eax
c00049be:	75 1b                	jne    c00049db <f_stat+0x6a>
c00049c0:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049c5:	75 0f                	jne    c00049d6 <f_stat+0x65>
c00049c7:	85 ff                	test   edi,edi
c00049c9:	74 10                	je     c00049db <f_stat+0x6a>
c00049cb:	89 fa                	mov    edx,edi
c00049cd:	89 e0                	mov    eax,esp
c00049cf:	e8 e2 e7 ff ff       	call   c00031b6 <get_fileinfo>
c00049d4:	eb 05                	jmp    c00049db <f_stat+0x6a>
c00049d6:	bb 06 00 00 00       	mov    ebx,0x6
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	56                   	push   esi
c00049df:	e8 3c 14 00 00       	call   c0005e20 <ff_memfree>
c00049e4:	83 c4 10             	add    esp,0x10
c00049e7:	83 c4 30             	add    esp,0x30
c00049ea:	89 d8                	mov    eax,ebx
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	c3                   	ret    

c00049f0 <f_getfree>:
c00049f0:	55                   	push   ebp
c00049f1:	31 c9                	xor    ecx,ecx
c00049f3:	57                   	push   edi
c00049f4:	56                   	push   esi
c00049f5:	53                   	push   ebx
c00049f6:	83 ec 2c             	sub    esp,0x2c
c00049f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049fd:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a01:	e8 74 dc ff ff       	call   c000267a <mount_volume>
c0004a06:	89 c7                	mov    edi,eax
c0004a08:	85 c0                	test   eax,eax
c0004a0a:	0f 85 df 00 00 00    	jne    c0004aef <f_getfree+0xff>
c0004a10:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004a14:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a18:	89 30                	mov    DWORD PTR [eax],esi
c0004a1a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004a1d:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004a20:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004a23:	39 d0                	cmp    eax,edx
c0004a25:	77 0b                	ja     c0004a32 <f_getfree+0x42>
c0004a27:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a2b:	89 01                	mov    DWORD PTR [ecx],eax
c0004a2d:	e9 bd 00 00 00       	jmp    c0004aef <f_getfree+0xff>
c0004a32:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004a35:	75 29                	jne    c0004a60 <f_getfree+0x70>
c0004a37:	bd 02 00 00 00       	mov    ebp,0x2
c0004a3c:	31 db                	xor    ebx,ebx
c0004a3e:	89 ea                	mov    edx,ebp
c0004a40:	89 f0                	mov    eax,esi
c0004a42:	e8 b6 e9 ff ff       	call   c00033fd <get_fat.isra.2>
c0004a47:	83 f8 ff             	cmp    eax,0xffffffff
c0004a4a:	74 7d                	je     c0004ac9 <f_getfree+0xd9>
c0004a4c:	83 f8 01             	cmp    eax,0x1
c0004a4f:	74 7f                	je     c0004ad0 <f_getfree+0xe0>
c0004a51:	83 d3 00             	adc    ebx,0x0
c0004a54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a58:	45                   	inc    ebp
c0004a59:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004a5c:	77 e0                	ja     c0004a3e <f_getfree+0x4e>
c0004a5e:	eb 79                	jmp    c0004ad9 <f_getfree+0xe9>
c0004a60:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004a63:	31 db                	xor    ebx,ebx
c0004a65:	31 f6                	xor    esi,esi
c0004a67:	85 f6                	test   esi,esi
c0004a69:	75 18                	jne    c0004a83 <f_getfree+0x93>
c0004a6b:	8d 42 01             	lea    eax,[edx+0x1]
c0004a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a76:	e8 ac da ff ff       	call   c0002527 <move_window>
c0004a7b:	85 c0                	test   eax,eax
c0004a7d:	75 58                	jne    c0004ad7 <f_getfree+0xe7>
c0004a7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004a87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004a8b:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004a8f:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004a92:	75 13                	jne    c0004aa7 <f_getfree+0xb7>
c0004a94:	e8 27 d5 ff ff       	call   c0001fc0 <ld_word>
c0004a99:	0f b7 c0             	movzx  eax,ax
c0004a9c:	83 f8 01             	cmp    eax,0x1
c0004a9f:	83 d3 00             	adc    ebx,0x0
c0004aa2:	83 c6 02             	add    esi,0x2
c0004aa5:	eb 13                	jmp    c0004aba <f_getfree+0xca>
c0004aa7:	e8 21 d5 ff ff       	call   c0001fcd <ld_dword>
c0004aac:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004ab1:	83 f8 01             	cmp    eax,0x1
c0004ab4:	83 d3 00             	adc    ebx,0x0
c0004ab7:	83 c6 04             	add    esi,0x4
c0004aba:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004ac0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ac4:	4d                   	dec    ebp
c0004ac5:	75 a0                	jne    c0004a67 <f_getfree+0x77>
c0004ac7:	eb 10                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ac9:	bf 01 00 00 00       	mov    edi,0x1
c0004ace:	eb 09                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad0:	bf 02 00 00 00       	mov    edi,0x2
c0004ad5:	eb 02                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad7:	89 c7                	mov    edi,eax
c0004ad9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004add:	89 18                	mov    DWORD PTR [eax],ebx
c0004adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae3:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004ae6:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004ae9:	83 ca 01             	or     edx,0x1
c0004aec:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004aef:	83 c4 2c             	add    esp,0x2c
c0004af2:	89 f8                	mov    eax,edi
c0004af4:	5b                   	pop    ebx
c0004af5:	5e                   	pop    esi
c0004af6:	5f                   	pop    edi
c0004af7:	5d                   	pop    ebp
c0004af8:	c3                   	ret    

c0004af9 <f_truncate>:
c0004af9:	56                   	push   esi
c0004afa:	53                   	push   ebx
c0004afb:	83 ec 14             	sub    esp,0x14
c0004afe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b06:	89 d8                	mov    eax,ebx
c0004b08:	e8 71 d9 ff ff       	call   c000247e <validate>
c0004b0d:	89 c6                	mov    esi,eax
c0004b0f:	85 c0                	test   eax,eax
c0004b11:	0f 85 c4 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b17:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b1b:	85 f6                	test   esi,esi
c0004b1d:	0f 85 b8 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b23:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b27:	0f 84 a9 00 00 00    	je     c0004bd6 <f_truncate+0xdd>
c0004b2d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b30:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b33:	0f 83 a2 00 00 00    	jae    c0004bdb <f_truncate+0xe2>
c0004b39:	85 c0                	test   eax,eax
c0004b3b:	75 15                	jne    c0004b52 <f_truncate+0x59>
c0004b3d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b40:	31 c9                	xor    ecx,ecx
c0004b42:	89 d8                	mov    eax,ebx
c0004b44:	e8 bf eb ff ff       	call   c0003708 <remove_chain>
c0004b49:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b50:	eb 35                	jmp    c0004b87 <f_truncate+0x8e>
c0004b52:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b57:	e8 a1 e8 ff ff       	call   c00033fd <get_fat.isra.2>
c0004b5c:	89 c2                	mov    edx,eax
c0004b5e:	b8 01 00 00 00       	mov    eax,0x1
c0004b63:	83 fa ff             	cmp    edx,0xffffffff
c0004b66:	74 1f                	je     c0004b87 <f_truncate+0x8e>
c0004b68:	b8 02 00 00 00       	mov    eax,0x2
c0004b6d:	83 fa 01             	cmp    edx,0x1
c0004b70:	74 15                	je     c0004b87 <f_truncate+0x8e>
c0004b72:	31 c0                	xor    eax,eax
c0004b74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b78:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b7b:	76 0a                	jbe    c0004b87 <f_truncate+0x8e>
c0004b7d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b80:	89 d8                	mov    eax,ebx
c0004b82:	e8 81 eb ff ff       	call   c0003708 <remove_chain>
c0004b87:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004b8a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004b8d:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004b90:	83 ca 40             	or     edx,0x40
c0004b93:	85 c0                	test   eax,eax
c0004b95:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004b98:	75 35                	jne    c0004bcf <f_truncate+0xd6>
c0004b9a:	80 e2 80             	and    dl,0x80
c0004b9d:	74 3c                	je     c0004bdb <f_truncate+0xe2>
c0004b9f:	6a 01                	push   0x1
c0004ba1:	8d 43 28             	lea    eax,[ebx+0x28]
c0004ba4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004ba7:	50                   	push   eax
c0004ba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bb0:	50                   	push   eax
c0004bb1:	e8 d5 d3 ff ff       	call   c0001f8b <disk_write>
c0004bb6:	83 c4 10             	add    esp,0x10
c0004bb9:	85 c0                	test   eax,eax
c0004bbb:	75 0d                	jne    c0004bca <f_truncate+0xd1>
c0004bbd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bc0:	31 f6                	xor    esi,esi
c0004bc2:	83 e0 7f             	and    eax,0x7f
c0004bc5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004bc8:	eb 11                	jmp    c0004bdb <f_truncate+0xe2>
c0004bca:	b8 01 00 00 00       	mov    eax,0x1
c0004bcf:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	eb 05                	jmp    c0004bdb <f_truncate+0xe2>
c0004bd6:	be 07 00 00 00       	mov    esi,0x7
c0004bdb:	89 f0                	mov    eax,esi
c0004bdd:	83 c4 14             	add    esp,0x14
c0004be0:	5b                   	pop    ebx
c0004be1:	5e                   	pop    esi
c0004be2:	c3                   	ret    

c0004be3 <f_unlink>:
c0004be3:	55                   	push   ebp
c0004be4:	b9 02 00 00 00       	mov    ecx,0x2
c0004be9:	57                   	push   edi
c0004bea:	56                   	push   esi
c0004beb:	53                   	push   ebx
c0004bec:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004bf2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004bf6:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004bfd:	e8 78 da ff ff       	call   c000267a <mount_volume>
c0004c02:	85 c0                	test   eax,eax
c0004c04:	0f 85 f0 00 00 00    	jne    c0004cfa <f_unlink+0x117>
c0004c0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c0e:	83 ec 0c             	sub    esp,0xc
c0004c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c15:	68 00 02 00 00       	push   0x200
c0004c1a:	e8 e9 11 00 00       	call   c0005e08 <ff_memalloc>
c0004c1f:	83 c4 10             	add    esp,0x10
c0004c22:	89 c3                	mov    ebx,eax
c0004c24:	b8 11 00 00 00       	mov    eax,0x11
c0004c29:	85 db                	test   ebx,ebx
c0004c2b:	0f 84 c9 00 00 00    	je     c0004cfa <f_unlink+0x117>
c0004c31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c35:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c3c:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c43:	e8 7c ef ff ff       	call   c0003bc4 <follow_path>
c0004c48:	85 c0                	test   eax,eax
c0004c4a:	0f 85 96 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c50:	b8 06 00 00 00       	mov    eax,0x6
c0004c55:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c5a:	0f 85 86 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c60:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c65:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c6b:	74 07                	je     c0004c74 <f_unlink+0x91>
c0004c6d:	b8 07 00 00 00       	mov    eax,0x7
c0004c72:	eb 72                	jmp    c0004ce6 <f_unlink+0x103>
c0004c74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c78:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c7c:	8a 07                	mov    al,BYTE PTR [edi]
c0004c7e:	e8 29 e7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004c83:	83 e5 10             	and    ebp,0x10
c0004c86:	89 c6                	mov    esi,eax
c0004c88:	75 0f                	jne    c0004c99 <f_unlink+0xb6>
c0004c8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c8e:	e8 95 ed ff ff       	call   c0003a28 <dir_remove>
c0004c93:	85 c0                	test   eax,eax
c0004c95:	74 2f                	je     c0004cc6 <f_unlink+0xe3>
c0004c97:	eb 4d                	jmp    c0004ce6 <f_unlink+0x103>
c0004c99:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004c9d:	31 d2                	xor    edx,edx
c0004c9f:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004ca3:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ca7:	e8 55 e8 ff ff       	call   c0003501 <dir_sdi>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	75 36                	jne    c0004ce6 <f_unlink+0x103>
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cb6:	e8 45 ec ff ff       	call   c0003900 <dir_read>
c0004cbb:	85 c0                	test   eax,eax
c0004cbd:	74 ae                	je     c0004c6d <f_unlink+0x8a>
c0004cbf:	83 f8 04             	cmp    eax,0x4
c0004cc2:	75 22                	jne    c0004ce6 <f_unlink+0x103>
c0004cc4:	eb c4                	jmp    c0004c8a <f_unlink+0xa7>
c0004cc6:	85 f6                	test   esi,esi
c0004cc8:	75 0b                	jne    c0004cd5 <f_unlink+0xf2>
c0004cca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cce:	e8 8b e2 ff ff       	call   c0002f5e <sync_fs>
c0004cd3:	eb 11                	jmp    c0004ce6 <f_unlink+0x103>
c0004cd5:	31 c9                	xor    ecx,ecx
c0004cd7:	89 f2                	mov    edx,esi
c0004cd9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cdd:	e8 26 ea ff ff       	call   c0003708 <remove_chain>
c0004ce2:	85 c0                	test   eax,eax
c0004ce4:	74 e4                	je     c0004cca <f_unlink+0xe7>
c0004ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cea:	83 ec 0c             	sub    esp,0xc
c0004ced:	53                   	push   ebx
c0004cee:	e8 2d 11 00 00       	call   c0005e20 <ff_memfree>
c0004cf3:	83 c4 10             	add    esp,0x10
c0004cf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cfa:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d00:	5b                   	pop    ebx
c0004d01:	5e                   	pop    esi
c0004d02:	5f                   	pop    edi
c0004d03:	5d                   	pop    ebp
c0004d04:	c3                   	ret    

c0004d05 <f_mkdir>:
c0004d05:	57                   	push   edi
c0004d06:	b9 02 00 00 00       	mov    ecx,0x2
c0004d0b:	56                   	push   esi
c0004d0c:	53                   	push   ebx
c0004d0d:	83 ec 50             	sub    esp,0x50
c0004d10:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 5d d9 ff ff       	call   c000267a <mount_volume>
c0004d1d:	89 c3                	mov    ebx,eax
c0004d1f:	85 c0                	test   eax,eax
c0004d21:	0f 85 70 01 00 00    	jne    c0004e97 <f_mkdir+0x192>
c0004d27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d2b:	bb 11 00 00 00       	mov    ebx,0x11
c0004d30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004d34:	83 ec 0c             	sub    esp,0xc
c0004d37:	68 00 02 00 00       	push   0x200
c0004d3c:	e8 c7 10 00 00       	call   c0005e08 <ff_memalloc>
c0004d41:	83 c4 10             	add    esp,0x10
c0004d44:	89 c7                	mov    edi,eax
c0004d46:	85 c0                	test   eax,eax
c0004d48:	0f 84 49 01 00 00    	je     c0004e97 <f_mkdir+0x192>
c0004d4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d52:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d56:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d59:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d5d:	e8 62 ee ff ff       	call   c0003bc4 <follow_path>
c0004d62:	89 c3                	mov    ebx,eax
c0004d64:	85 c0                	test   eax,eax
c0004d66:	74 3e                	je     c0004da6 <f_mkdir+0xa1>
c0004d68:	83 f8 04             	cmp    eax,0x4
c0004d6b:	75 3e                	jne    c0004dab <f_mkdir+0xa6>
c0004d6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d71:	31 d2                	xor    edx,edx
c0004d73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d77:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d7b:	e8 49 e8 ff ff       	call   c00035c9 <create_chain>
c0004d80:	89 c6                	mov    esi,eax
c0004d82:	85 c0                	test   eax,eax
c0004d84:	74 0c                	je     c0004d92 <f_mkdir+0x8d>
c0004d86:	bb 02 00 00 00       	mov    ebx,0x2
c0004d8b:	83 f8 01             	cmp    eax,0x1
c0004d8e:	74 07                	je     c0004d97 <f_mkdir+0x92>
c0004d90:	eb 2a                	jmp    c0004dbc <f_mkdir+0xb7>
c0004d92:	bb 07 00 00 00       	mov    ebx,0x7
c0004d97:	31 c9                	xor    ecx,ecx
c0004d99:	89 f2                	mov    edx,esi
c0004d9b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d9f:	e8 64 e9 ff ff       	call   c0003708 <remove_chain>
c0004da4:	eb 05                	jmp    c0004dab <f_mkdir+0xa6>
c0004da6:	bb 08 00 00 00       	mov    ebx,0x8
c0004dab:	83 ec 0c             	sub    esp,0xc
c0004dae:	57                   	push   edi
c0004daf:	e8 6c 10 00 00       	call   c0005e20 <ff_memfree>
c0004db4:	83 c4 10             	add    esp,0x10
c0004db7:	e9 db 00 00 00       	jmp    c0004e97 <f_mkdir+0x192>
c0004dbc:	bb 01 00 00 00       	mov    ebx,0x1
c0004dc1:	83 f8 ff             	cmp    eax,0xffffffff
c0004dc4:	74 d1                	je     c0004d97 <f_mkdir+0x92>
c0004dc6:	89 f2                	mov    edx,esi
c0004dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dcc:	e8 f1 dc ff ff       	call   c0002ac2 <dir_clear>
c0004dd1:	89 c3                	mov    ebx,eax
c0004dd3:	85 c0                	test   eax,eax
c0004dd5:	75 c0                	jne    c0004d97 <f_mkdir+0x92>
c0004dd7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de0:	ba 20 00 00 00       	mov    edx,0x20
c0004de5:	83 c0 34             	add    eax,0x34
c0004de8:	e8 14 d2 ff ff       	call   c0002001 <mem_set>
c0004ded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df1:	ba 00 00 21 50       	mov    edx,0x50210000
c0004df6:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004dfa:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004dfe:	83 c0 4a             	add    eax,0x4a
c0004e01:	e8 e3 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0a:	89 f1                	mov    ecx,esi
c0004e0c:	8d 50 34             	lea    edx,[eax+0x34]
c0004e0f:	e8 c1 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e18:	b9 20 00 00 00       	mov    ecx,0x20
c0004e1d:	8d 50 34             	lea    edx,[eax+0x34]
c0004e20:	83 c0 54             	add    eax,0x54
c0004e23:	e8 c4 d1 ff ff       	call   c0001fec <mem_cpy>
c0004e28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e2c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e30:	8d 50 54             	lea    edx,[eax+0x54]
c0004e33:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e37:	e8 99 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e40:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e44:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e48:	e8 0c ee ff ff       	call   c0003c59 <dir_register>
c0004e4d:	89 c3                	mov    ebx,eax
c0004e4f:	85 c0                	test   eax,eax
c0004e51:	0f 85 40 ff ff ff    	jne    c0004d97 <f_mkdir+0x92>
c0004e57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e5b:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e60:	83 c0 16             	add    eax,0x16
c0004e63:	e8 81 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e68:	89 f1                	mov    ecx,esi
c0004e6a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e72:	e8 5e e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e7b:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e83:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8b:	e8 ce e0 ff ff       	call   c0002f5e <sync_fs>
c0004e90:	89 c3                	mov    ebx,eax
c0004e92:	e9 14 ff ff ff       	jmp    c0004dab <f_mkdir+0xa6>
c0004e97:	83 c4 50             	add    esp,0x50
c0004e9a:	89 d8                	mov    eax,ebx
c0004e9c:	5b                   	pop    ebx
c0004e9d:	5e                   	pop    esi
c0004e9e:	5f                   	pop    edi
c0004e9f:	c3                   	ret    

c0004ea0 <f_rename>:
c0004ea0:	57                   	push   edi
c0004ea1:	56                   	push   esi
c0004ea2:	53                   	push   ebx
c0004ea3:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ea9:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004eb0:	e8 7c d5 ff ff       	call   c0002431 <get_ldnumber>
c0004eb5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ebe:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ec5:	e8 b0 d7 ff ff       	call   c000267a <mount_volume>
c0004eca:	85 c0                	test   eax,eax
c0004ecc:	0f 85 7c 01 00 00    	jne    c000504e <f_rename+0x1ae>
c0004ed2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004edd:	68 00 02 00 00       	push   0x200
c0004ee2:	e8 21 0f 00 00       	call   c0005e08 <ff_memalloc>
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	89 c6                	mov    esi,eax
c0004eec:	b8 11 00 00 00       	mov    eax,0x11
c0004ef1:	85 f6                	test   esi,esi
c0004ef3:	0f 84 55 01 00 00    	je     c000504e <f_rename+0x1ae>
c0004ef9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efd:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f04:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f07:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f0b:	e8 b4 ec ff ff       	call   c0003bc4 <follow_path>
c0004f10:	85 c0                	test   eax,eax
c0004f12:	0f 85 22 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f18:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f1c:	b8 06 00 00 00       	mov    eax,0x6
c0004f21:	80 e2 a0             	and    dl,0xa0
c0004f24:	0f 85 10 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f2a:	b9 20 00 00 00       	mov    ecx,0x20
c0004f2f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f37:	e8 b0 d0 ff ff       	call   c0001fec <mem_cpy>
c0004f3c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f41:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f45:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f49:	e8 9e d0 ff ff       	call   c0001fec <mem_cpy>
c0004f4e:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f59:	e8 66 ec ff ff       	call   c0003bc4 <follow_path>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	75 20                	jne    c0004f82 <f_rename+0xe2>
c0004f62:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f66:	b8 08 00 00 00       	mov    eax,0x8
c0004f6b:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f6f:	0f 85 c5 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f75:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f79:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f80:	eb 03                	jmp    c0004f85 <f_rename+0xe5>
c0004f82:	83 f8 04             	cmp    eax,0x4
c0004f85:	0f 85 af 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f8b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f8f:	e8 c5 ec ff ff       	call   c0003c59 <dir_register>
c0004f94:	85 c0                	test   eax,eax
c0004f96:	0f 85 9e 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f9c:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fa3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fa8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fab:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004faf:	e8 38 d0 ff ff       	call   c0001fec <mem_cpy>
c0004fb4:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fb8:	a8 10                	test   al,0x10
c0004fba:	75 03                	jne    c0004fbf <f_rename+0x11f>
c0004fbc:	83 c8 20             	or     eax,0x20
c0004fbf:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fc6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fca:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fce:	74 54                	je     c0005024 <f_rename+0x184>
c0004fd0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004fd4:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004fd8:	74 4a                	je     c0005024 <f_rename+0x184>
c0004fda:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004fde:	89 da                	mov    edx,ebx
c0004fe0:	8a 07                	mov    al,BYTE PTR [edi]
c0004fe2:	e8 c5 e3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004fe7:	89 c2                	mov    edx,eax
c0004fe9:	89 f8                	mov    eax,edi
c0004feb:	e8 27 d2 ff ff       	call   c0002217 <clst2sect>
c0004ff0:	89 c2                	mov    edx,eax
c0004ff2:	b8 02 00 00 00       	mov    eax,0x2
c0004ff7:	85 d2                	test   edx,edx
c0004ff9:	74 3f                	je     c000503a <f_rename+0x19a>
c0004ffb:	89 f8                	mov    eax,edi
c0004ffd:	e8 25 d5 ff ff       	call   c0002527 <move_window>
c0005002:	85 c0                	test   eax,eax
c0005004:	75 34                	jne    c000503a <f_rename+0x19a>
c0005006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000500a:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000500e:	75 14                	jne    c0005024 <f_rename+0x184>
c0005010:	8d 50 54             	lea    edx,[eax+0x54]
c0005013:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005017:	e8 b9 e3 ff ff       	call   c00033d5 <st_clust.isra.1>
c000501c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005020:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005024:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005028:	e8 fb e9 ff ff       	call   c0003a28 <dir_remove>
c000502d:	85 c0                	test   eax,eax
c000502f:	75 09                	jne    c000503a <f_rename+0x19a>
c0005031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005035:	e8 24 df ff ff       	call   c0002f5e <sync_fs>
c000503a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000503e:	83 ec 0c             	sub    esp,0xc
c0005041:	56                   	push   esi
c0005042:	e8 d9 0d 00 00       	call   c0005e20 <ff_memfree>
c0005047:	83 c4 10             	add    esp,0x10
c000504a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000504e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005054:	5b                   	pop    ebx
c0005055:	5e                   	pop    esi
c0005056:	5f                   	pop    edi
c0005057:	c3                   	ret    

c0005058 <f_chmod>:
c0005058:	57                   	push   edi
c0005059:	b9 02 00 00 00       	mov    ecx,0x2
c000505e:	56                   	push   esi
c000505f:	53                   	push   ebx
c0005060:	83 ec 50             	sub    esp,0x50
c0005063:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005067:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000506b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000506f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005073:	e8 02 d6 ff ff       	call   c000267a <mount_volume>
c0005078:	85 c0                	test   eax,eax
c000507a:	0f 85 81 00 00 00    	jne    c0005101 <f_chmod+0xa9>
c0005080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005084:	83 ec 0c             	sub    esp,0xc
c0005087:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000508b:	68 00 02 00 00       	push   0x200
c0005090:	e8 73 0d 00 00       	call   c0005e08 <ff_memalloc>
c0005095:	83 c4 10             	add    esp,0x10
c0005098:	89 c6                	mov    esi,eax
c000509a:	b8 11 00 00 00       	mov    eax,0x11
c000509f:	85 f6                	test   esi,esi
c00050a1:	74 5e                	je     c0005101 <f_chmod+0xa9>
c00050a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b2:	e8 0d eb ff ff       	call   c0003bc4 <follow_path>
c00050b7:	85 c0                	test   eax,eax
c00050b9:	75 32                	jne    c00050ed <f_chmod+0x95>
c00050bb:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050bf:	b8 06 00 00 00       	mov    eax,0x6
c00050c4:	80 e2 a0             	and    dl,0xa0
c00050c7:	75 24                	jne    c00050ed <f_chmod+0x95>
c00050c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cd:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050d0:	31 d7                	xor    edi,edx
c00050d2:	21 fb                	and    ebx,edi
c00050d4:	83 e3 27             	and    ebx,0x27
c00050d7:	31 d3                	xor    ebx,edx
c00050d9:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e8:	e8 71 de ff ff       	call   c0002f5e <sync_fs>
c00050ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050f1:	83 ec 0c             	sub    esp,0xc
c00050f4:	56                   	push   esi
c00050f5:	e8 26 0d 00 00       	call   c0005e20 <ff_memfree>
c00050fa:	83 c4 10             	add    esp,0x10
c00050fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005101:	83 c4 50             	add    esp,0x50
c0005104:	5b                   	pop    ebx
c0005105:	5e                   	pop    esi
c0005106:	5f                   	pop    edi
c0005107:	c3                   	ret    

c0005108 <f_utime>:
c0005108:	56                   	push   esi
c0005109:	b9 02 00 00 00       	mov    ecx,0x2
c000510e:	53                   	push   ebx
c000510f:	83 ec 54             	sub    esp,0x54
c0005112:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005116:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000511a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000511e:	e8 57 d5 ff ff       	call   c000267a <mount_volume>
c0005123:	85 c0                	test   eax,eax
c0005125:	0f 85 87 00 00 00    	jne    c00051b2 <f_utime+0xaa>
c000512b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000512f:	83 ec 0c             	sub    esp,0xc
c0005132:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005136:	68 00 02 00 00       	push   0x200
c000513b:	e8 c8 0c 00 00       	call   c0005e08 <ff_memalloc>
c0005140:	83 c4 10             	add    esp,0x10
c0005143:	89 c3                	mov    ebx,eax
c0005145:	b8 11 00 00 00       	mov    eax,0x11
c000514a:	85 db                	test   ebx,ebx
c000514c:	74 64                	je     c00051b2 <f_utime+0xaa>
c000514e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005152:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005156:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005159:	8d 44 24 20          	lea    eax,[esp+0x20]
c000515d:	e8 62 ea ff ff       	call   c0003bc4 <follow_path>
c0005162:	85 c0                	test   eax,eax
c0005164:	75 38                	jne    c000519e <f_utime+0x96>
c0005166:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000516a:	b8 06 00 00 00       	mov    eax,0x6
c000516f:	80 e2 a0             	and    dl,0xa0
c0005172:	75 2a                	jne    c000519e <f_utime+0x96>
c0005174:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005178:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c000517c:	c1 e2 10             	shl    edx,0x10
c000517f:	09 c2                	or     edx,eax
c0005181:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005185:	83 c0 16             	add    eax,0x16
c0005188:	e8 5c ce ff ff       	call   c0001fe9 <st_dword>
c000518d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005191:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005195:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005199:	e8 c0 dd ff ff       	call   c0002f5e <sync_fs>
c000519e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051a2:	83 ec 0c             	sub    esp,0xc
c00051a5:	53                   	push   ebx
c00051a6:	e8 75 0c 00 00       	call   c0005e20 <ff_memfree>
c00051ab:	83 c4 10             	add    esp,0x10
c00051ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051b2:	83 c4 54             	add    esp,0x54
c00051b5:	5b                   	pop    ebx
c00051b6:	5e                   	pop    esi
c00051b7:	c3                   	ret    

c00051b8 <f_getlabel>:
c00051b8:	55                   	push   ebp
c00051b9:	31 c9                	xor    ecx,ecx
c00051bb:	57                   	push   edi
c00051bc:	56                   	push   esi
c00051bd:	53                   	push   ebx
c00051be:	83 ec 5c             	sub    esp,0x5c
c00051c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051c5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051c9:	e8 ac d4 ff ff       	call   c000267a <mount_volume>
c00051ce:	89 c6                	mov    esi,eax
c00051d0:	85 c0                	test   eax,eax
c00051d2:	0f 85 27 01 00 00    	jne    c00052ff <f_getlabel+0x147>
c00051d8:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00051dd:	0f 84 d0 00 00 00    	je     c00052b3 <f_getlabel+0xfb>
c00051e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e7:	31 d2                	xor    edx,edx
c00051e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051ed:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051f5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051f9:	e8 03 e3 ff ff       	call   c0003501 <dir_sdi>
c00051fe:	85 c0                	test   eax,eax
c0005200:	0f 85 a1 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c0005206:	ba 01 00 00 00       	mov    edx,0x1
c000520b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000520f:	e8 ec e6 ff ff       	call   c0003900 <dir_read>
c0005214:	85 c0                	test   eax,eax
c0005216:	0f 85 8b 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c000521c:	31 db                	xor    ebx,ebx
c000521e:	31 c9                	xor    ecx,ecx
c0005220:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005224:	8d 79 01             	lea    edi,[ecx+0x1]
c0005227:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000522c:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005235:	e8 06 ce ff ff       	call   c0002040 <dbc_1st>
c000523a:	85 c0                	test   eax,eax
c000523c:	74 16                	je     c0005254 <f_getlabel+0x9c>
c000523e:	83 ff 0b             	cmp    edi,0xb
c0005241:	74 11                	je     c0005254 <f_getlabel+0x9c>
c0005243:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000524c:	8d 79 02             	lea    edi,[ecx+0x2]
c000524f:	c1 e0 08             	shl    eax,0x8
c0005252:	09 c2                	or     edx,eax
c0005254:	0f b7 d2             	movzx  edx,dx
c0005257:	50                   	push   eax
c0005258:	50                   	push   eax
c0005259:	68 b5 01 00 00       	push   0x1b5
c000525e:	52                   	push   edx
c000525f:	e8 74 0c 00 00       	call   c0005ed8 <ff_oem2uni>
c0005264:	83 c4 10             	add    esp,0x10
c0005267:	0f b7 c0             	movzx  eax,ax
c000526a:	85 c0                	test   eax,eax
c000526c:	74 22                	je     c0005290 <f_getlabel+0xd8>
c000526e:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005272:	b9 04 00 00 00       	mov    ecx,0x4
c0005277:	01 da                	add    edx,ebx
c0005279:	e8 a0 ce ff ff       	call   c000211e <put_utf>
c000527e:	0f b6 c0             	movzx  eax,al
c0005281:	85 c0                	test   eax,eax
c0005283:	74 0b                	je     c0005290 <f_getlabel+0xd8>
c0005285:	01 c3                	add    ebx,eax
c0005287:	83 ff 0b             	cmp    edi,0xb
c000528a:	74 06                	je     c0005292 <f_getlabel+0xda>
c000528c:	89 f9                	mov    ecx,edi
c000528e:	eb 90                	jmp    c0005220 <f_getlabel+0x68>
c0005290:	31 db                	xor    ebx,ebx
c0005292:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0005296:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0005299:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c000529d:	74 14                	je     c00052b3 <f_getlabel+0xfb>
c000529f:	4b                   	dec    ebx
c00052a0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00052a3:	74 f1                	je     c0005296 <f_getlabel+0xde>
c00052a5:	eb 0c                	jmp    c00052b3 <f_getlabel+0xfb>
c00052a7:	83 f8 04             	cmp    eax,0x4
c00052aa:	75 51                	jne    c00052fd <f_getlabel+0x145>
c00052ac:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00052b0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00052b3:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052b8:	74 45                	je     c00052ff <f_getlabel+0x147>
c00052ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052c1:	e8 61 d2 ff ff       	call   c0002527 <move_window>
c00052c6:	89 c6                	mov    esi,eax
c00052c8:	85 c0                	test   eax,eax
c00052ca:	75 33                	jne    c00052ff <f_getlabel+0x147>
c00052cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052d0:	b8 43 00 00 00       	mov    eax,0x43
c00052d5:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052d8:	83 f9 03             	cmp    ecx,0x3
c00052db:	74 0f                	je     c00052ec <f_getlabel+0x134>
c00052dd:	31 c0                	xor    eax,eax
c00052df:	83 f9 04             	cmp    ecx,0x4
c00052e2:	0f 94 c0             	sete   al
c00052e5:	48                   	dec    eax
c00052e6:	83 e0 c3             	and    eax,0xffffffc3
c00052e9:	83 c0 64             	add    eax,0x64
c00052ec:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00052f0:	e8 d8 cc ff ff       	call   c0001fcd <ld_dword>
c00052f5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00052f9:	89 07                	mov    DWORD PTR [edi],eax
c00052fb:	eb 02                	jmp    c00052ff <f_getlabel+0x147>
c00052fd:	89 c6                	mov    esi,eax
c00052ff:	83 c4 5c             	add    esp,0x5c
c0005302:	89 f0                	mov    eax,esi
c0005304:	5b                   	pop    ebx
c0005305:	5e                   	pop    esi
c0005306:	5f                   	pop    edi
c0005307:	5d                   	pop    ebp
c0005308:	c3                   	ret    

c0005309 <f_setlabel>:
c0005309:	57                   	push   edi
c000530a:	b9 02 00 00 00       	mov    ecx,0x2
c000530f:	56                   	push   esi
c0005310:	53                   	push   ebx
c0005311:	83 ec 50             	sub    esp,0x50
c0005314:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005318:	8d 44 24 60          	lea    eax,[esp+0x60]
c000531c:	e8 59 d3 ff ff       	call   c000267a <mount_volume>
c0005321:	89 c6                	mov    esi,eax
c0005323:	85 c0                	test   eax,eax
c0005325:	0f 85 65 01 00 00    	jne    c0005490 <f_setlabel+0x187>
c000532b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005330:	ba 20 00 00 00       	mov    edx,0x20
c0005335:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005339:	31 db                	xor    ebx,ebx
c000533b:	e8 c1 cc ff ff       	call   c0002001 <mem_set>
c0005340:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005344:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005347:	76 5d                	jbe    c00053a6 <f_setlabel+0x9d>
c0005349:	8d 44 24 60          	lea    eax,[esp+0x60]
c000534d:	e8 f4 cc ff ff       	call   c0002046 <tchar2uni>
c0005352:	3d ff ff 00 00       	cmp    eax,0xffff
c0005357:	76 0a                	jbe    c0005363 <f_setlabel+0x5a>
c0005359:	be 06 00 00 00       	mov    esi,0x6
c000535e:	e9 2d 01 00 00       	jmp    c0005490 <f_setlabel+0x187>
c0005363:	83 ec 0c             	sub    esp,0xc
c0005366:	50                   	push   eax
c0005367:	e8 e4 0b 00 00       	call   c0005f50 <ff_wtoupper>
c000536c:	5a                   	pop    edx
c000536d:	59                   	pop    ecx
c000536e:	68 b5 01 00 00       	push   0x1b5
c0005373:	50                   	push   eax
c0005374:	e8 bf 0a 00 00       	call   c0005e38 <ff_uni2oem>
c0005379:	83 c4 10             	add    esp,0x10
c000537c:	0f b7 f0             	movzx  esi,ax
c000537f:	89 f7                	mov    edi,esi
c0005381:	85 f6                	test   esi,esi
c0005383:	74 d4                	je     c0005359 <f_setlabel+0x50>
c0005385:	89 f2                	mov    edx,esi
c0005387:	b8 d0 2b 02 c0       	mov    eax,0xc0022bd0
c000538c:	e8 9e cc ff ff       	call   c000202f <chk_chr>
c0005391:	85 c0                	test   eax,eax
c0005393:	75 c4                	jne    c0005359 <f_setlabel+0x50>
c0005395:	81 fe ff 00 00 00    	cmp    esi,0xff
c000539b:	0f 87 c9 00 00 00    	ja     c000546a <f_setlabel+0x161>
c00053a1:	e9 e0 00 00 00       	jmp    c0005486 <f_setlabel+0x17d>
c00053a6:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ab:	74 ac                	je     c0005359 <f_setlabel+0x50>
c00053ad:	85 db                	test   ebx,ebx
c00053af:	74 0e                	je     c00053bf <f_setlabel+0xb6>
c00053b1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053b4:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053b9:	75 04                	jne    c00053bf <f_setlabel+0xb6>
c00053bb:	89 c3                	mov    ebx,eax
c00053bd:	eb ee                	jmp    c00053ad <f_setlabel+0xa4>
c00053bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053c3:	31 d2                	xor    edx,edx
c00053c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053c9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053d1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053d5:	e8 27 e1 ff ff       	call   c0003501 <dir_sdi>
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 ac 00 00 00    	jne    c0005490 <f_setlabel+0x187>
c00053e4:	ba 01 00 00 00       	mov    edx,0x1
c00053e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053ed:	e8 0e e5 ff ff       	call   c0003900 <dir_read>
c00053f2:	85 c0                	test   eax,eax
c00053f4:	75 18                	jne    c000540e <f_setlabel+0x105>
c00053f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053fa:	85 db                	test   ebx,ebx
c00053fc:	74 0b                	je     c0005409 <f_setlabel+0x100>
c00053fe:	b9 0b 00 00 00       	mov    ecx,0xb
c0005403:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005407:	eb 47                	jmp    c0005450 <f_setlabel+0x147>
c0005409:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000540c:	eb 47                	jmp    c0005455 <f_setlabel+0x14c>
c000540e:	83 f8 04             	cmp    eax,0x4
c0005411:	75 53                	jne    c0005466 <f_setlabel+0x15d>
c0005413:	85 db                	test   ebx,ebx
c0005415:	74 79                	je     c0005490 <f_setlabel+0x187>
c0005417:	ba 01 00 00 00       	mov    edx,0x1
c000541c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005420:	e8 76 e4 ff ff       	call   c000389b <dir_alloc>
c0005425:	89 c6                	mov    esi,eax
c0005427:	85 c0                	test   eax,eax
c0005429:	75 65                	jne    c0005490 <f_setlabel+0x187>
c000542b:	b9 20 00 00 00       	mov    ecx,0x20
c0005430:	31 d2                	xor    edx,edx
c0005432:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005436:	e8 c6 cb ff ff       	call   c0002001 <mem_set>
c000543b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000543f:	b9 0b 00 00 00       	mov    ecx,0xb
c0005444:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005448:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000544c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005450:	e8 97 cb ff ff       	call   c0001fec <mem_cpy>
c0005455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005459:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000545d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005461:	e8 f8 da ff ff       	call   c0002f5e <sync_fs>
c0005466:	89 c6                	mov    esi,eax
c0005468:	eb 26                	jmp    c0005490 <f_setlabel+0x187>
c000546a:	83 fb 09             	cmp    ebx,0x9
c000546d:	0f 87 e6 fe ff ff    	ja     c0005359 <f_setlabel+0x50>
c0005473:	89 f0                	mov    eax,esi
c0005475:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005479:	43                   	inc    ebx
c000547a:	89 f8                	mov    eax,edi
c000547c:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005480:	43                   	inc    ebx
c0005481:	e9 ba fe ff ff       	jmp    c0005340 <f_setlabel+0x37>
c0005486:	83 fb 0a             	cmp    ebx,0xa
c0005489:	76 ef                	jbe    c000547a <f_setlabel+0x171>
c000548b:	e9 c9 fe ff ff       	jmp    c0005359 <f_setlabel+0x50>
c0005490:	83 c4 50             	add    esp,0x50
c0005493:	89 f0                	mov    eax,esi
c0005495:	5b                   	pop    ebx
c0005496:	5e                   	pop    esi
c0005497:	5f                   	pop    edi
c0005498:	c3                   	ret    

c0005499 <f_expand>:
c0005499:	55                   	push   ebp
c000549a:	57                   	push   edi
c000549b:	56                   	push   esi
c000549c:	53                   	push   ebx
c000549d:	83 ec 2c             	sub    esp,0x2c
c00054a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054ac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054b0:	89 d8                	mov    eax,ebx
c00054b2:	e8 c7 cf ff ff       	call   c000247e <validate>
c00054b7:	89 c6                	mov    esi,eax
c00054b9:	85 c0                	test   eax,eax
c00054bb:	0f 85 3b 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054c1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054c5:	85 f6                	test   esi,esi
c00054c7:	0f 85 2f 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054cd:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054d2:	75 0a                	jne    c00054de <f_expand+0x45>
c00054d4:	be 07 00 00 00       	mov    esi,0x7
c00054d9:	e9 1e 01 00 00       	jmp    c00055fc <f_expand+0x163>
c00054de:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00054e2:	75 f0                	jne    c00054d4 <f_expand+0x3b>
c00054e4:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00054e8:	74 ea                	je     c00054d4 <f_expand+0x3b>
c00054ea:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00054ee:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00054f2:	c1 e1 09             	shl    ecx,0x9
c00054f5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00054f8:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00054fc:	0f 95 c0             	setne  al
c00054ff:	31 d2                	xor    edx,edx
c0005501:	0f b6 c0             	movzx  eax,al
c0005504:	89 c7                	mov    edi,eax
c0005506:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000550a:	f7 f1                	div    ecx
c000550c:	01 f8                	add    eax,edi
c000550e:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005511:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005515:	83 ff 01             	cmp    edi,0x1
c0005518:	76 05                	jbe    c000551f <f_expand+0x86>
c000551a:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c000551d:	77 05                	ja     c0005524 <f_expand+0x8b>
c000551f:	bf 02 00 00 00       	mov    edi,0x2
c0005524:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005527:	89 fd                	mov    ebp,edi
c0005529:	31 c9                	xor    ecx,ecx
c000552b:	89 ea                	mov    edx,ebp
c000552d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005531:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005533:	45                   	inc    ebp
c0005534:	e8 c4 de ff ff       	call   c00033fd <get_fat.isra.2>
c0005539:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000553d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005541:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005544:	77 05                	ja     c000554b <f_expand+0xb2>
c0005546:	bd 02 00 00 00       	mov    ebp,0x2
c000554b:	83 f8 01             	cmp    eax,0x1
c000554e:	74 20                	je     c0005570 <f_expand+0xd7>
c0005550:	83 f8 ff             	cmp    eax,0xffffffff
c0005553:	74 25                	je     c000557a <f_expand+0xe1>
c0005555:	85 c0                	test   eax,eax
c0005557:	75 09                	jne    c0005562 <f_expand+0xc9>
c0005559:	41                   	inc    ecx
c000555a:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000555e:	75 07                	jne    c0005567 <f_expand+0xce>
c0005560:	eb 1f                	jmp    c0005581 <f_expand+0xe8>
c0005562:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005565:	31 c9                	xor    ecx,ecx
c0005567:	39 fd                	cmp    ebp,edi
c0005569:	75 c0                	jne    c000552b <f_expand+0x92>
c000556b:	e9 64 ff ff ff       	jmp    c00054d4 <f_expand+0x3b>
c0005570:	be 02 00 00 00       	mov    esi,0x2
c0005575:	e9 82 00 00 00       	jmp    c00055fc <f_expand+0x163>
c000557a:	be 01 00 00 00       	mov    esi,0x1
c000557f:	eb 7b                	jmp    c00055fc <f_expand+0x163>
c0005581:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005586:	74 2b                	je     c00055b3 <f_expand+0x11a>
c0005588:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000558b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000558f:	85 ed                	test   ebp,ebp
c0005591:	74 24                	je     c00055b7 <f_expand+0x11e>
c0005593:	83 c9 ff             	or     ecx,0xffffffff
c0005596:	83 fd 01             	cmp    ebp,0x1
c0005599:	74 03                	je     c000559e <f_expand+0x105>
c000559b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000559e:	89 fa                	mov    edx,edi
c00055a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055a4:	e8 c2 d3 ff ff       	call   c000296b <put_fat>
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 4d                	jne    c00055fa <f_expand+0x161>
c00055ad:	89 f8                	mov    eax,edi
c00055af:	4d                   	dec    ebp
c00055b0:	47                   	inc    edi
c00055b1:	eb dc                	jmp    c000558f <f_expand+0xf6>
c00055b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055b6:	48                   	dec    eax
c00055b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055bb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055c0:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055c3:	74 37                	je     c00055fc <f_expand+0x163>
c00055c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055c8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055d5:	83 c8 40             	or     eax,0x40
c00055d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055db:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00055de:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055e1:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00055e4:	39 c8                	cmp    eax,ecx
c00055e6:	77 14                	ja     c00055fc <f_expand+0x163>
c00055e8:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00055ec:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00055ef:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00055f2:	83 c8 01             	or     eax,0x1
c00055f5:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00055f8:	eb 02                	jmp    c00055fc <f_expand+0x163>
c00055fa:	89 c6                	mov    esi,eax
c00055fc:	83 c4 2c             	add    esp,0x2c
c00055ff:	89 f0                	mov    eax,esi
c0005601:	5b                   	pop    ebx
c0005602:	5e                   	pop    esi
c0005603:	5f                   	pop    edi
c0005604:	5d                   	pop    ebp
c0005605:	c3                   	ret    

c0005606 <f_mkfs>:
c0005606:	55                   	push   ebp
c0005607:	57                   	push   edi
c0005608:	56                   	push   esi
c0005609:	be 0b 00 00 00       	mov    esi,0xb
c000560e:	53                   	push   ebx
c000560f:	83 ec 5c             	sub    esp,0x5c
c0005612:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005616:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000561a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000561e:	e8 0e ce ff ff       	call   c0002431 <get_ldnumber>
c0005623:	85 c0                	test   eax,eax
c0005625:	0f 88 d1 07 00 00    	js     c0005dfc <f_mkfs+0x7f6>
c000562b:	8b 14 85 a0 94 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6b60]
c0005632:	85 d2                	test   edx,edx
c0005634:	74 03                	je     c0005639 <f_mkfs+0x33>
c0005636:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005639:	85 db                	test   ebx,ebx
c000563b:	75 05                	jne    c0005642 <f_mkfs+0x3c>
c000563d:	bb c0 2b 02 c0       	mov    ebx,0xc0022bc0
c0005642:	83 ec 0c             	sub    esp,0xc
c0005645:	0f b6 c0             	movzx  eax,al
c0005648:	be 03 00 00 00       	mov    esi,0x3
c000564d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005651:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005655:	e8 18 c9 ff ff       	call   c0001f72 <disk_initialize>
c000565a:	83 c4 10             	add    esp,0x10
c000565d:	a8 01                	test   al,0x1
c000565f:	0f 85 97 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005665:	be 0a 00 00 00       	mov    esi,0xa
c000566a:	a8 04                	test   al,0x4
c000566c:	0f 85 8a 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005672:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005675:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005679:	85 c0                	test   eax,eax
c000567b:	75 20                	jne    c000569d <f_mkfs+0x97>
c000567d:	51                   	push   ecx
c000567e:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005682:	50                   	push   eax
c0005683:	6a 03                	push   0x3
c0005685:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005689:	e8 13 c9 ff ff       	call   c0001fa1 <disk_ioctl>
c000568e:	83 c4 10             	add    esp,0x10
c0005691:	85 c0                	test   eax,eax
c0005693:	74 08                	je     c000569d <f_mkfs+0x97>
c0005695:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000569d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056a1:	8d 42 ff             	lea    eax,[edx-0x1]
c00056a4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056a9:	77 04                	ja     c00056af <f_mkfs+0xa9>
c00056ab:	85 c2                	test   edx,eax
c00056ad:	74 08                	je     c00056b7 <f_mkfs+0xb1>
c00056af:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056b7:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056ba:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056c2:	48                   	dec    eax
c00056c3:	3c 01                	cmp    al,0x1
c00056c5:	76 05                	jbe    c00056cc <f_mkfs+0xc6>
c00056c7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00056d3:	48                   	dec    eax
c00056d4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056d9:	77 07                	ja     c00056e2 <f_mkfs+0xdc>
c00056db:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00056e0:	74 08                	je     c00056ea <f_mkfs+0xe4>
c00056e2:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00056ea:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00056ed:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00056f3:	77 07                	ja     c00056fc <f_mkfs+0xf6>
c00056f5:	8d 47 ff             	lea    eax,[edi-0x1]
c00056f8:	85 f8                	test   eax,edi
c00056fa:	74 02                	je     c00056fe <f_mkfs+0xf8>
c00056fc:	31 ff                	xor    edi,edi
c00056fe:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005706:	77 0a                	ja     c0005712 <f_mkfs+0x10c>
c0005708:	be 11 00 00 00       	mov    esi,0x11
c000570d:	e9 ea 06 00 00       	jmp    c0005dfc <f_mkfs+0x7f6>
c0005712:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005714:	85 ed                	test   ebp,ebp
c0005716:	89 eb                	mov    ebx,ebp
c0005718:	75 1e                	jne    c0005738 <f_mkfs+0x132>
c000571a:	83 ec 0c             	sub    esp,0xc
c000571d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005724:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005729:	50                   	push   eax
c000572a:	e8 d9 06 00 00       	call   c0005e08 <ff_memalloc>
c000572f:	83 c4 10             	add    esp,0x10
c0005732:	89 c3                	mov    ebx,eax
c0005734:	85 c0                	test   eax,eax
c0005736:	74 d0                	je     c0005708 <f_mkfs+0x102>
c0005738:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005740:	52                   	push   edx
c0005741:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005745:	50                   	push   eax
c0005746:	6a 01                	push   0x1
c0005748:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000574c:	e8 50 c8 ff ff       	call   c0001fa1 <disk_ioctl>
c0005751:	83 c4 10             	add    esp,0x10
c0005754:	85 c0                	test   eax,eax
c0005756:	0f 85 49 06 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c000575c:	89 f0                	mov    eax,esi
c000575e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005766:	83 e0 08             	and    eax,0x8
c0005769:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000576d:	75 18                	jne    c0005787 <f_mkfs+0x181>
c000576f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005773:	83 f8 3f             	cmp    eax,0x3f
c0005776:	76 0f                	jbe    c0005787 <f_mkfs+0x181>
c0005778:	83 e8 3f             	sub    eax,0x3f
c000577b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005783:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005787:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000578b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000578f:	83 f8 7f             	cmp    eax,0x7f
c0005792:	0f 86 5b 02 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005798:	b9 80 00 00 00       	mov    ecx,0x80
c000579d:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057a3:	77 05                	ja     c00057aa <f_mkfs+0x1a4>
c00057a5:	c1 ef 09             	shr    edi,0x9
c00057a8:	89 f9                	mov    ecx,edi
c00057aa:	89 f0                	mov    eax,esi
c00057ac:	89 f7                	mov    edi,esi
c00057ae:	83 e0 01             	and    eax,0x1
c00057b1:	83 e7 02             	and    edi,0x2
c00057b4:	0f b6 c0             	movzx  eax,al
c00057b7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057bb:	74 0a                	je     c00057c7 <f_mkfs+0x1c1>
c00057bd:	85 c0                	test   eax,eax
c00057bf:	0f 84 4f 01 00 00    	je     c0005914 <f_mkfs+0x30e>
c00057c5:	eb 37                	jmp    c00057fe <f_mkfs+0x1f8>
c00057c7:	be 13 00 00 00       	mov    esi,0x13
c00057cc:	85 c0                	test   eax,eax
c00057ce:	75 2e                	jne    c00057fe <f_mkfs+0x1f8>
c00057d0:	e9 e7 05 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00057d5:	83 f8 02             	cmp    eax,0x2
c00057d8:	0f 85 0d 02 00 00    	jne    c00059eb <f_mkfs+0x3e5>
c00057de:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057e4:	0f 86 e4 01 00 00    	jbe    c00059ce <f_mkfs+0x3c8>
c00057ea:	85 c9                	test   ecx,ecx
c00057ec:	0f 85 dc 05 00 00    	jne    c0005dce <f_mkfs+0x7c8>
c00057f2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f5:	83 f9 40             	cmp    ecx,0x40
c00057f8:	0f 87 e0 05 00 00    	ja     c0005dde <f_mkfs+0x7d8>
c00057fe:	89 cf                	mov    edi,ecx
c0005800:	85 c9                	test   ecx,ecx
c0005802:	75 1c                	jne    c0005820 <f_mkfs+0x21a>
c0005804:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005808:	b8 a0 2b 02 c0       	mov    eax,0xc0022ba0
c000580d:	c1 ee 0c             	shr    esi,0xc
c0005810:	bf 01 00 00 00       	mov    edi,0x1
c0005815:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005818:	85 d2                	test   edx,edx
c000581a:	0f 85 63 01 00 00    	jne    c0005983 <f_mkfs+0x37d>
c0005820:	31 d2                	xor    edx,edx
c0005822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005826:	f7 f7                	div    edi
c0005828:	3d f5 0f 00 00       	cmp    eax,0xff5
c000582d:	0f 86 62 01 00 00    	jbe    c0005995 <f_mkfs+0x38f>
c0005833:	83 c0 02             	add    eax,0x2
c0005836:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000583b:	01 c0                	add    eax,eax
c000583d:	05 ff 01 00 00       	add    eax,0x1ff
c0005842:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000584a:	c1 e8 09             	shr    eax,0x9
c000584d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005855:	c1 e0 05             	shl    eax,0x5
c0005858:	c1 e8 09             	shr    eax,0x9
c000585b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000585f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005864:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586c:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005870:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005878:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c000587d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005881:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005885:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005889:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000588d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005891:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005895:	f7 d8                	neg    eax
c0005897:	21 c6                	and    esi,eax
c0005899:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000589e:	29 d6                	sub    esi,edx
c00058a0:	83 f8 03             	cmp    eax,0x3
c00058a3:	0f 85 ff 00 00 00    	jne    c00059a8 <f_mkfs+0x3a2>
c00058a9:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058ad:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058b1:	89 f8                	mov    eax,edi
c00058b3:	c1 e0 04             	shl    eax,0x4
c00058b6:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00058ba:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058be:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058c2:	0f 82 2b 01 00 00    	jb     c00059f3 <f_mkfs+0x3ed>
c00058c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058d0:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00058d4:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00058d9:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00058dd:	29 d0                	sub    eax,edx
c00058df:	31 d2                	xor    edx,edx
c00058e1:	f7 f7                	div    edi
c00058e3:	89 c6                	mov    esi,eax
c00058e5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058ea:	83 f8 03             	cmp    eax,0x3
c00058ed:	0f 85 e2 fe ff ff    	jne    c00057d5 <f_mkfs+0x1cf>
c00058f3:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00058f9:	0f 87 03 01 00 00    	ja     c0005a02 <f_mkfs+0x3fc>
c00058ff:	85 c9                	test   ecx,ecx
c0005901:	0f 85 ec 00 00 00    	jne    c00059f3 <f_mkfs+0x3ed>
c0005907:	83 ff 01             	cmp    edi,0x1
c000590a:	0f 86 e3 00 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005910:	d1 ef                	shr    edi,1
c0005912:	89 f9                	mov    ecx,edi
c0005914:	89 ce                	mov    esi,ecx
c0005916:	85 c9                	test   ecx,ecx
c0005918:	75 25                	jne    c000593f <f_mkfs+0x339>
c000591a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000591e:	b8 b0 2b 02 c0       	mov    eax,0xc0022bb0
c0005923:	c1 ee 11             	shr    esi,0x11
c0005926:	b9 01 00 00 00       	mov    ecx,0x1
c000592b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000592e:	85 d2                	test   edx,edx
c0005930:	74 0b                	je     c000593d <f_mkfs+0x337>
c0005932:	83 c0 02             	add    eax,0x2
c0005935:	39 f2                	cmp    edx,esi
c0005937:	77 04                	ja     c000593d <f_mkfs+0x337>
c0005939:	01 c9                	add    ecx,ecx
c000593b:	eb ee                	jmp    c000592b <f_mkfs+0x325>
c000593d:	31 f6                	xor    esi,esi
c000593f:	31 d2                	xor    edx,edx
c0005941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005945:	f7 f1                	div    ecx
c0005947:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000594e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005953:	c1 ea 09             	shr    edx,0x9
c0005956:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000595b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000595f:	0f 87 8e 00 00 00    	ja     c00059f3 <f_mkfs+0x3ed>
c0005965:	89 cf                	mov    edi,ecx
c0005967:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000596f:	89 f1                	mov    ecx,esi
c0005971:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005979:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c000597e:	e9 dc fe ff ff       	jmp    c000585f <f_mkfs+0x259>
c0005983:	83 c0 02             	add    eax,0x2
c0005986:	39 f2                	cmp    edx,esi
c0005988:	0f 87 92 fe ff ff    	ja     c0005820 <f_mkfs+0x21a>
c000598e:	01 ff                	add    edi,edi
c0005990:	e9 80 fe ff ff       	jmp    c0005815 <f_mkfs+0x20f>
c0005995:	8d 04 40             	lea    eax,[eax+eax*2]
c0005998:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000599d:	40                   	inc    eax
c000599e:	d1 e8                	shr    eax,1
c00059a0:	83 c0 03             	add    eax,0x3
c00059a3:	e9 95 fe ff ff       	jmp    c000583d <f_mkfs+0x237>
c00059a8:	31 d2                	xor    edx,edx
c00059aa:	89 f0                	mov    eax,esi
c00059ac:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059b0:	85 d2                	test   edx,edx
c00059b2:	74 09                	je     c00059bd <f_mkfs+0x3b7>
c00059b4:	4e                   	dec    esi
c00059b5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059b9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059bd:	89 f0                	mov    eax,esi
c00059bf:	31 d2                	xor    edx,edx
c00059c1:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059c5:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00059c9:	e9 e3 fe ff ff       	jmp    c00058b1 <f_mkfs+0x2ab>
c00059ce:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059d4:	77 2c                	ja     c0005a02 <f_mkfs+0x3fc>
c00059d6:	85 c9                	test   ecx,ecx
c00059d8:	75 19                	jne    c00059f3 <f_mkfs+0x3ed>
c00059da:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00059dd:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059e3:	0f 86 15 fe ff ff    	jbe    c00057fe <f_mkfs+0x1f8>
c00059e9:	eb 08                	jmp    c00059f3 <f_mkfs+0x3ed>
c00059eb:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059f1:	76 0a                	jbe    c00059fd <f_mkfs+0x3f7>
c00059f3:	be 0e 00 00 00       	mov    esi,0xe
c00059f8:	e9 bf 03 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00059fd:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a02:	31 d2                	xor    edx,edx
c0005a04:	b9 00 02 00 00       	mov    ecx,0x200
c0005a09:	89 d8                	mov    eax,ebx
c0005a0b:	e8 f1 c5 ff ff       	call   c0002001 <mem_set>
c0005a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a15:	ba 52 2b 02 c0       	mov    edx,0xc0022b52
c0005a1a:	89 d8                	mov    eax,ebx
c0005a1c:	e8 cb c5 ff ff       	call   c0001fec <mem_cpy>
c0005a21:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a24:	ba 00 02 00 00       	mov    edx,0x200
c0005a29:	e8 b7 c5 ff ff       	call   c0001fe5 <st_word>
c0005a2e:	89 f8                	mov    eax,edi
c0005a30:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a35:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a38:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a3b:	e8 a5 c5 ff ff       	call   c0001fe5 <st_word>
c0005a40:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a44:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a4c:	83 f8 03             	cmp    eax,0x3
c0005a4f:	75 08                	jne    c0005a59 <f_mkfs+0x453>
c0005a51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005a59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005a5d:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a60:	e8 80 c5 ff ff       	call   c0001fe5 <st_word>
c0005a65:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005a69:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005a6f:	77 0a                	ja     c0005a7b <f_mkfs+0x475>
c0005a71:	8d 43 13             	lea    eax,[ebx+0x13]
c0005a74:	e8 6c c5 ff ff       	call   c0001fe5 <st_word>
c0005a79:	eb 08                	jmp    c0005a83 <f_mkfs+0x47d>
c0005a7b:	8d 43 20             	lea    eax,[ebx+0x20]
c0005a7e:	e8 66 c5 ff ff       	call   c0001fe9 <st_dword>
c0005a83:	8d 43 18             	lea    eax,[ebx+0x18]
c0005a86:	ba 3f 00 00 00       	mov    edx,0x3f
c0005a8b:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005a8f:	e8 51 c5 ff ff       	call   c0001fe5 <st_word>
c0005a94:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005a97:	ba ff 00 00 00       	mov    edx,0xff
c0005a9c:	e8 44 c5 ff ff       	call   c0001fe5 <st_word>
c0005aa1:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005aa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005aa8:	e8 3c c5 ff ff       	call   c0001fe9 <st_dword>
c0005aad:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ab2:	83 f8 03             	cmp    eax,0x3
c0005ab5:	75 57                	jne    c0005b0e <f_mkfs+0x508>
c0005ab7:	8d 43 43             	lea    eax,[ebx+0x43]
c0005aba:	ba 00 00 21 50       	mov    edx,0x50210000
c0005abf:	e8 25 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ac4:	8d 43 24             	lea    eax,[ebx+0x24]
c0005ac7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005acb:	e8 19 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ad0:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005ad3:	ba 02 00 00 00       	mov    edx,0x2
c0005ad8:	e8 0c c5 ff ff       	call   c0001fe9 <st_dword>
c0005add:	8d 43 30             	lea    eax,[ebx+0x30]
c0005ae0:	ba 01 00 00 00       	mov    edx,0x1
c0005ae5:	e8 fb c4 ff ff       	call   c0001fe5 <st_word>
c0005aea:	8d 43 32             	lea    eax,[ebx+0x32]
c0005aed:	ba 06 00 00 00       	mov    edx,0x6
c0005af2:	e8 ee c4 ff ff       	call   c0001fe5 <st_word>
c0005af7:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005afb:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005aff:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b02:	b9 13 00 00 00       	mov    ecx,0x13
c0005b07:	ba 5e 2b 02 c0       	mov    edx,0xc0022b5e
c0005b0c:	eb 2f                	jmp    c0005b3d <f_mkfs+0x537>
c0005b0e:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b11:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b16:	e8 ce c4 ff ff       	call   c0001fe9 <st_dword>
c0005b1b:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b20:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b23:	e8 bd c4 ff ff       	call   c0001fe5 <st_word>
c0005b28:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b2c:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b30:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b33:	b9 13 00 00 00       	mov    ecx,0x13
c0005b38:	ba 72 2b 02 c0       	mov    edx,0xc0022b72
c0005b3d:	e8 aa c4 ff ff       	call   c0001fec <mem_cpy>
c0005b42:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b48:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b51:	e8 8f c4 ff ff       	call   c0001fe5 <st_word>
c0005b56:	6a 01                	push   0x1
c0005b58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b5c:	53                   	push   ebx
c0005b5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b61:	e8 25 c4 ff ff       	call   c0001f8b <disk_write>
c0005b66:	83 c4 10             	add    esp,0x10
c0005b69:	85 c0                	test   eax,eax
c0005b6b:	0f 85 34 02 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005b71:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b76:	83 f8 03             	cmp    eax,0x3
c0005b79:	0f 85 98 00 00 00    	jne    c0005c17 <f_mkfs+0x611>
c0005b7f:	6a 01                	push   0x1
c0005b81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b85:	83 c0 06             	add    eax,0x6
c0005b88:	50                   	push   eax
c0005b89:	53                   	push   ebx
c0005b8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b8e:	e8 f8 c3 ff ff       	call   c0001f8b <disk_write>
c0005b93:	b9 00 02 00 00       	mov    ecx,0x200
c0005b98:	31 d2                	xor    edx,edx
c0005b9a:	89 d8                	mov    eax,ebx
c0005b9c:	e8 60 c4 ff ff       	call   c0002001 <mem_set>
c0005ba1:	ba 52 52 61 41       	mov    edx,0x41615252
c0005ba6:	89 d8                	mov    eax,ebx
c0005ba8:	e8 3c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bad:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bb3:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bb8:	e8 2c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bbd:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bc0:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005bc6:	e8 1e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bcb:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005bd1:	ba 02 00 00 00       	mov    edx,0x2
c0005bd6:	e8 0e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bdb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005be0:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005be6:	e8 fa c3 ff ff       	call   c0001fe5 <st_word>
c0005beb:	6a 01                	push   0x1
c0005bed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005bf1:	83 c0 07             	add    eax,0x7
c0005bf4:	50                   	push   eax
c0005bf5:	53                   	push   ebx
c0005bf6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005bfa:	e8 8c c3 ff ff       	call   c0001f8b <disk_write>
c0005bff:	83 c4 20             	add    esp,0x20
c0005c02:	6a 01                	push   0x1
c0005c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005c08:	40                   	inc    eax
c0005c09:	50                   	push   eax
c0005c0a:	53                   	push   ebx
c0005c0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c0f:	e8 77 c3 ff ff       	call   c0001f8b <disk_write>
c0005c14:	83 c4 10             	add    esp,0x10
c0005c17:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c1b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c1f:	c1 e8 09             	shr    eax,0x9
c0005c22:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c2c:	31 d2                	xor    edx,edx
c0005c2e:	89 d8                	mov    eax,ebx
c0005c30:	e8 cc c3 ff ff       	call   c0002001 <mem_set>
c0005c35:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c3a:	31 c9                	xor    ecx,ecx
c0005c3c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005c44:	83 f8 01             	cmp    eax,0x1
c0005c47:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c4b:	0f 94 c1             	sete   cl
c0005c4e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005c52:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005c56:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005c5e:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005c66:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c6b:	75 21                	jne    c0005c8e <f_mkfs+0x688>
c0005c6d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c72:	89 d8                	mov    eax,ebx
c0005c74:	e8 70 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c79:	8d 43 04             	lea    eax,[ebx+0x4]
c0005c7c:	83 ca ff             	or     edx,0xffffffff
c0005c7f:	e8 65 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c84:	8d 43 08             	lea    eax,[ebx+0x8]
c0005c87:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005c8c:	eb 06                	jmp    c0005c94 <f_mkfs+0x68e>
c0005c8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c92:	89 d8                	mov    eax,ebx
c0005c94:	e8 50 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ca1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005ca5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ca9:	39 ce                	cmp    esi,ecx
c0005cab:	76 02                	jbe    c0005caf <f_mkfs+0x6a9>
c0005cad:	89 ce                	mov    esi,ecx
c0005caf:	56                   	push   esi
c0005cb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005cb4:	53                   	push   ebx
c0005cb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cb9:	e8 cd c2 ff ff       	call   c0001f8b <disk_write>
c0005cbe:	83 c4 10             	add    esp,0x10
c0005cc1:	85 c0                	test   eax,eax
c0005cc3:	0f 85 dc 00 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005cc9:	31 d2                	xor    edx,edx
c0005ccb:	b9 00 02 00 00       	mov    ecx,0x200
c0005cd0:	89 d8                	mov    eax,ebx
c0005cd2:	e8 2a c3 ff ff       	call   c0002001 <mem_set>
c0005cd7:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005cdb:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005cdf:	75 c0                	jne    c0005ca1 <f_mkfs+0x69b>
c0005ce1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ce5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005ced:	40                   	inc    eax
c0005cee:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005cf2:	0f 87 6e ff ff ff    	ja     c0005c66 <f_mkfs+0x660>
c0005cf8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cfd:	83 f8 03             	cmp    eax,0x3
c0005d00:	74 04                	je     c0005d06 <f_mkfs+0x700>
c0005d02:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005d06:	89 fe                	mov    esi,edi
c0005d08:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d0c:	76 04                	jbe    c0005d12 <f_mkfs+0x70c>
c0005d0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d12:	56                   	push   esi
c0005d13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d17:	53                   	push   ebx
c0005d18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d1c:	e8 6a c2 ff ff       	call   c0001f8b <disk_write>
c0005d21:	83 c4 10             	add    esp,0x10
c0005d24:	85 c0                	test   eax,eax
c0005d26:	75 7d                	jne    c0005da5 <f_mkfs+0x79f>
c0005d28:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d2c:	29 f7                	sub    edi,esi
c0005d2e:	75 d6                	jne    c0005d06 <f_mkfs+0x700>
c0005d30:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d35:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d3a:	83 f8 03             	cmp    eax,0x3
c0005d3d:	74 1e                	je     c0005d5d <f_mkfs+0x757>
c0005d3f:	b9 06 00 00 00       	mov    ecx,0x6
c0005d44:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d4c:	77 0f                	ja     c0005d5d <f_mkfs+0x757>
c0005d4e:	b9 04 00 00 00       	mov    ecx,0x4
c0005d53:	83 f8 02             	cmp    eax,0x2
c0005d56:	74 05                	je     c0005d5d <f_mkfs+0x757>
c0005d58:	b9 01 00 00 00       	mov    ecx,0x1
c0005d5d:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d62:	75 2a                	jne    c0005d8e <f_mkfs+0x788>
c0005d64:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d68:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d70:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	53                   	push   ebx
c0005d78:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005d7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d80:	e8 89 d2 ff ff       	call   c000300e <create_partition>
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	89 c6                	mov    esi,eax
c0005d8a:	85 c0                	test   eax,eax
c0005d8c:	75 2e                	jne    c0005dbc <f_mkfs+0x7b6>
c0005d8e:	31 f6                	xor    esi,esi
c0005d90:	50                   	push   eax
c0005d91:	6a 00                	push   0x0
c0005d93:	6a 00                	push   0x0
c0005d95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d99:	e8 03 c2 ff ff       	call   c0001fa1 <disk_ioctl>
c0005d9e:	83 c4 10             	add    esp,0x10
c0005da1:	85 c0                	test   eax,eax
c0005da3:	74 17                	je     c0005dbc <f_mkfs+0x7b6>
c0005da5:	85 ed                	test   ebp,ebp
c0005da7:	75 0c                	jne    c0005db5 <f_mkfs+0x7af>
c0005da9:	83 ec 0c             	sub    esp,0xc
c0005dac:	53                   	push   ebx
c0005dad:	e8 6e 00 00 00       	call   c0005e20 <ff_memfree>
c0005db2:	83 c4 10             	add    esp,0x10
c0005db5:	be 01 00 00 00       	mov    esi,0x1
c0005dba:	eb 40                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dbc:	85 ed                	test   ebp,ebp
c0005dbe:	75 3c                	jne    c0005dfc <f_mkfs+0x7f6>
c0005dc0:	83 ec 0c             	sub    esp,0xc
c0005dc3:	53                   	push   ebx
c0005dc4:	e8 57 00 00 00       	call   c0005e20 <ff_memfree>
c0005dc9:	83 c4 10             	add    esp,0x10
c0005dcc:	eb 2e                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dce:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005dd3:	0f 85 3b fb ff ff    	jne    c0005914 <f_mkfs+0x30e>
c0005dd9:	e9 15 fc ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dde:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005de3:	0f 85 31 fb ff ff    	jne    c000591a <f_mkfs+0x314>
c0005de9:	89 cf                	mov    edi,ecx
c0005deb:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005df1:	0f 86 29 fa ff ff    	jbe    c0005820 <f_mkfs+0x21a>
c0005df7:	e9 f7 fb ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dfc:	83 c4 5c             	add    esp,0x5c
c0005dff:	89 f0                	mov    eax,esi
c0005e01:	5b                   	pop    ebx
c0005e02:	5e                   	pop    esi
c0005e03:	5f                   	pop    edi
c0005e04:	5d                   	pop    ebp
c0005e05:	c3                   	ret    
c0005e06:	66 90                	xchg   ax,ax

c0005e08 <ff_memalloc>:
c0005e08:	83 ec 0c             	sub    esp,0xc
c0005e0b:	83 ec 0c             	sub    esp,0xc
c0005e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e12:	e8 78 9d 00 00       	call   c000fb8f <malloc>
c0005e17:	83 c4 10             	add    esp,0x10
c0005e1a:	83 c4 0c             	add    esp,0xc
c0005e1d:	c3                   	ret    
c0005e1e:	66 90                	xchg   ax,ax

c0005e20 <ff_memfree>:
c0005e20:	83 ec 0c             	sub    esp,0xc
c0005e23:	83 ec 0c             	sub    esp,0xc
c0005e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e2a:	e8 70 9d 00 00       	call   c000fb9f <free>
c0005e2f:	83 c4 10             	add    esp,0x10
c0005e32:	90                   	nop
c0005e33:	83 c4 0c             	add    esp,0xc
c0005e36:	c3                   	ret    
c0005e37:	90                   	nop

c0005e38 <ff_uni2oem>:
c0005e38:	83 ec 14             	sub    esp,0x14
c0005e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e43:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e4a:	c7 44 24 0c a0 2f 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022fa0
c0005e52:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e57:	77 0b                	ja     c0005e64 <ff_uni2oem+0x2c>
c0005e59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e5d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e62:	eb 68                	jmp    c0005ecc <ff_uni2oem+0x94>
c0005e64:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e6c:	77 5e                	ja     c0005ecc <ff_uni2oem+0x94>
c0005e6e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e72:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e77:	75 53                	jne    c0005ecc <ff_uni2oem+0x94>
c0005e79:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e80:	eb 12                	jmp    c0005e94 <ff_uni2oem+0x5c>
c0005e82:	66 90                	xchg   ax,ax
c0005e84:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e89:	83 c0 01             	add    eax,0x1
c0005e8c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e91:	8d 76 00             	lea    esi,[esi+0x0]
c0005e94:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e99:	83 f8 7f             	cmp    eax,0x7f
c0005e9c:	77 1e                	ja     c0005ebc <ff_uni2oem+0x84>
c0005e9e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ea3:	01 c0                	add    eax,eax
c0005ea5:	89 c2                	mov    edx,eax
c0005ea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eab:	01 d0                	add    eax,edx
c0005ead:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eb0:	0f b7 c0             	movzx  eax,ax
c0005eb3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005eb7:	75 cb                	jne    c0005e84 <ff_uni2oem+0x4c>
c0005eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0005ebc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ec1:	83 e8 80             	sub    eax,0xffffff80
c0005ec4:	0f b6 c0             	movzx  eax,al
c0005ec7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ecc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ed1:	83 c4 14             	add    esp,0x14
c0005ed4:	c3                   	ret    
c0005ed5:	8d 76 00             	lea    esi,[esi+0x0]

c0005ed8 <ff_oem2uni>:
c0005ed8:	83 ec 18             	sub    esp,0x18
c0005edb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ee3:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005ee8:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005eec:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ef3:	c7 44 24 10 a0 2f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022fa0
c0005efb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f00:	83 f8 7f             	cmp    eax,0x7f
c0005f03:	77 0b                	ja     c0005f10 <ff_oem2uni+0x38>
c0005f05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f09:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f0e:	eb 34                	jmp    c0005f44 <ff_oem2uni+0x6c>
c0005f10:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f14:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f19:	75 29                	jne    c0005f44 <ff_oem2uni+0x6c>
c0005f1b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f20:	3d ff 00 00 00       	cmp    eax,0xff
c0005f25:	77 1d                	ja     c0005f44 <ff_oem2uni+0x6c>
c0005f27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f2c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f31:	01 c0                	add    eax,eax
c0005f33:	89 c2                	mov    edx,eax
c0005f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f39:	01 d0                	add    eax,edx
c0005f3b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f3e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f43:	90                   	nop
c0005f44:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f49:	83 c4 18             	add    esp,0x18
c0005f4c:	c3                   	ret    
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0005f50 <ff_wtoupper>:
c0005f50:	83 ec 10             	sub    esp,0x10
c0005f53:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f5b:	0f 87 ab 01 00 00    	ja     c000610c <ff_wtoupper+0x1bc>
c0005f61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f65:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f6a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f6f:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f74:	77 0a                	ja     c0005f80 <ff_wtoupper+0x30>
c0005f76:	b8 a0 2d 02 c0       	mov    eax,0xc0022da0
c0005f7b:	eb 0b                	jmp    c0005f88 <ff_wtoupper+0x38>
c0005f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f80:	b8 e0 2c 02 c0       	mov    eax,0xc0022ce0
c0005f85:	8d 76 00             	lea    esi,[esi+0x0]
c0005f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f90:	8d 50 02             	lea    edx,[eax+0x2]
c0005f93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f97:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f9a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005f9f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 84 54 01 00 00    	je     c0006100 <ff_wtoupper+0x1b0>
c0005fac:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fb1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fb6:	39 c2                	cmp    edx,eax
c0005fb8:	0f 82 42 01 00 00    	jb     c0006100 <ff_wtoupper+0x1b0>
c0005fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fc2:	8d 50 02             	lea    edx,[eax+0x2]
c0005fc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fcc:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005fd1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fd6:	c1 e8 08             	shr    eax,0x8
c0005fd9:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005fde:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005fe3:	0f b6 c0             	movzx  eax,al
c0005fe6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005feb:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ff0:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005ff5:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005ffa:	01 ca                	add    edx,ecx
c0005ffc:	39 d0                	cmp    eax,edx
c0005ffe:	0f 8d d8 00 00 00    	jge    c00060dc <ff_wtoupper+0x18c>
c0006004:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006009:	83 f8 08             	cmp    eax,0x8
c000600c:	0f 87 ea 00 00 00    	ja     c00060fc <ff_wtoupper+0x1ac>
c0006012:	8b 04 85 a0 2c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd360]
c0006019:	ff e0                	jmp    eax
c000601b:	90                   	nop
c000601c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006021:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006026:	29 c2                	sub    edx,eax
c0006028:	89 d0                	mov    eax,edx
c000602a:	01 c0                	add    eax,eax
c000602c:	89 c2                	mov    edx,eax
c000602e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006032:	01 d0                	add    eax,edx
c0006034:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006037:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000603c:	e9 97 00 00 00       	jmp    c00060d8 <ff_wtoupper+0x188>
c0006041:	8d 76 00             	lea    esi,[esi+0x0]
c0006044:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0006049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000604d:	89 d1                	mov    ecx,edx
c000604f:	29 c1                	sub    ecx,eax
c0006051:	89 c8                	mov    eax,ecx
c0006053:	83 e0 01             	and    eax,0x1
c0006056:	89 c2                	mov    edx,eax
c0006058:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000605d:	29 d0                	sub    eax,edx
c000605f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006064:	eb 72                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006066:	66 90                	xchg   ax,ax
c0006068:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000606d:	83 e8 10             	sub    eax,0x10
c0006070:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006075:	eb 61                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006077:	90                   	nop
c0006078:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000607d:	83 e8 20             	sub    eax,0x20
c0006080:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006085:	eb 51                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006087:	90                   	nop
c0006088:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000608d:	83 e8 30             	sub    eax,0x30
c0006090:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006095:	eb 41                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006097:	90                   	nop
c0006098:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000609d:	83 e8 1a             	sub    eax,0x1a
c00060a0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a5:	eb 31                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060a7:	90                   	nop
c00060a8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060ad:	83 c0 08             	add    eax,0x8
c00060b0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b5:	eb 21                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060b7:	90                   	nop
c00060b8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060bd:	83 e8 50             	sub    eax,0x50
c00060c0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c5:	eb 11                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060c7:	90                   	nop
c00060c8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060cd:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d7:	90                   	nop
c00060d8:	eb 22                	jmp    c00060fc <ff_wtoupper+0x1ac>
c00060da:	66 90                	xchg   ax,ax
c00060dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060e1:	85 c0                	test   eax,eax
c00060e3:	0f 85 a3 fe ff ff    	jne    c0005f8c <ff_wtoupper+0x3c>
c00060e9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00060ee:	01 c0                	add    eax,eax
c00060f0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00060f4:	e9 93 fe ff ff       	jmp    c0005f8c <ff_wtoupper+0x3c>
c00060f9:	8d 76 00             	lea    esi,[esi+0x0]
c00060fc:	90                   	nop
c00060fd:	8d 76 00             	lea    esi,[esi+0x0]
c0006100:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006105:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006109:	8d 76 00             	lea    esi,[esi+0x0]
c000610c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006110:	83 c4 10             	add    esp,0x10
c0006113:	c3                   	ret    

c0006114 <utf2ucs>:
c0006114:	57                   	push   edi
c0006115:	31 c9                	xor    ecx,ecx
c0006117:	56                   	push   esi
c0006118:	89 d7                	mov    edi,edx
c000611a:	53                   	push   ebx
c000611b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000611f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006123:	89 de                	mov    esi,ebx
c0006125:	c1 fe 08             	sar    esi,0x8
c0006128:	89 f2                	mov    edx,esi
c000612a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c000612d:	41                   	inc    ecx
c000612e:	85 db                	test   ebx,ebx
c0006130:	75 e9                	jne    c000611b <utf2ucs+0x7>
c0006132:	5b                   	pop    ebx
c0006133:	5e                   	pop    esi
c0006134:	5f                   	pop    edi
c0006135:	c3                   	ret    

c0006136 <ucs2utfn>:
c0006136:	83 e1 fe             	and    ecx,0xfffffffe
c0006139:	01 d1                	add    ecx,edx
c000613b:	39 d1                	cmp    ecx,edx
c000613d:	75 04                	jne    c0006143 <ucs2utfn+0xd>
c000613f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006142:	c3                   	ret    
c0006143:	57                   	push   edi
c0006144:	56                   	push   esi
c0006145:	53                   	push   ebx
c0006146:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006149:	83 c2 02             	add    edx,0x2
c000614c:	89 de                	mov    esi,ebx
c000614e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006152:	c1 e6 08             	shl    esi,0x8
c0006155:	09 f3                	or     ebx,esi
c0006157:	83 fb 3b             	cmp    ebx,0x3b
c000615a:	74 50                	je     c00061ac <ucs2utfn+0x76>
c000615c:	83 fb 7f             	cmp    ebx,0x7f
c000615f:	7f 05                	jg     c0006166 <ucs2utfn+0x30>
c0006161:	88 18                	mov    BYTE PTR [eax],bl
c0006163:	40                   	inc    eax
c0006164:	eb 42                	jmp    c00061a8 <ucs2utfn+0x72>
c0006166:	89 de                	mov    esi,ebx
c0006168:	89 df                	mov    edi,ebx
c000616a:	c1 fe 06             	sar    esi,0x6
c000616d:	83 e7 3f             	and    edi,0x3f
c0006170:	83 cf 80             	or     edi,0xffffff80
c0006173:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006179:	7f 12                	jg     c000618d <ucs2utfn+0x57>
c000617b:	83 ce c0             	or     esi,0xffffffc0
c000617e:	83 c0 02             	add    eax,0x2
c0006181:	89 f3                	mov    ebx,esi
c0006183:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006186:	89 fb                	mov    ebx,edi
c0006188:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000618b:	eb 1b                	jmp    c00061a8 <ucs2utfn+0x72>
c000618d:	c1 fb 0c             	sar    ebx,0xc
c0006190:	83 e6 3f             	and    esi,0x3f
c0006193:	83 cb e0             	or     ebx,0xffffffe0
c0006196:	83 ce 80             	or     esi,0xffffff80
c0006199:	88 18                	mov    BYTE PTR [eax],bl
c000619b:	89 f3                	mov    ebx,esi
c000619d:	83 c0 03             	add    eax,0x3
c00061a0:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061a3:	89 fb                	mov    ebx,edi
c00061a5:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061a8:	39 d1                	cmp    ecx,edx
c00061aa:	75 9a                	jne    c0006146 <ucs2utfn+0x10>
c00061ac:	5b                   	pop    ebx
c00061ad:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061b0:	5e                   	pop    esi
c00061b1:	5f                   	pop    edi
c00061b2:	c3                   	ret    

c00061b3 <isjoliet>:
c00061b3:	31 d2                	xor    edx,edx
c00061b5:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061b8:	75 26                	jne    c00061e0 <isjoliet+0x2d>
c00061ba:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061be:	75 20                	jne    c00061e0 <isjoliet+0x2d>
c00061c0:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061c4:	ba 02 00 00 00       	mov    edx,0x2
c00061c9:	83 f8 43             	cmp    eax,0x43
c00061cc:	74 12                	je     c00061e0 <isjoliet+0x2d>
c00061ce:	ba 03 00 00 00       	mov    edx,0x3
c00061d3:	83 f8 45             	cmp    eax,0x45
c00061d6:	74 08                	je     c00061e0 <isjoliet+0x2d>
c00061d8:	31 d2                	xor    edx,edx
c00061da:	83 f8 40             	cmp    eax,0x40
c00061dd:	0f 94 c2             	sete   dl
c00061e0:	89 d0                	mov    eax,edx
c00061e2:	c3                   	ret    

c00061e3 <htohl_32>:
c00061e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00061e5:	c3                   	ret    

c00061e6 <iso_733>:
c00061e6:	eb fb                	jmp    c00061e3 <htohl_32>

c00061e8 <bgrad_cache>:
c00061e8:	83 fa 0e             	cmp    edx,0xe
c00061eb:	77 16                	ja     c0006203 <bgrad_cache+0x1b>
c00061ed:	53                   	push   ebx
c00061ee:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00061f1:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00061f5:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00061f8:	42                   	inc    edx
c00061f9:	83 fa 0f             	cmp    edx,0xf
c00061fc:	75 f3                	jne    c00061f1 <bgrad_cache+0x9>
c00061fe:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006201:	5b                   	pop    ebx
c0006202:	c3                   	ret    
c0006203:	c3                   	ret    

c0006204 <ucscompare>:
c0006204:	55                   	push   ebp
c0006205:	57                   	push   edi
c0006206:	89 c7                	mov    edi,eax
c0006208:	56                   	push   esi
c0006209:	89 d6                	mov    esi,edx
c000620b:	53                   	push   ebx
c000620c:	31 d2                	xor    edx,edx
c000620e:	83 ec 1c             	sub    esp,0x1c
c0006211:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006215:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000621a:	c1 e3 08             	shl    ebx,0x8
c000621d:	09 c3                	or     ebx,eax
c000621f:	39 ca                	cmp    edx,ecx
c0006221:	7d 42                	jge    c0006265 <ucscompare+0x61>
c0006223:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006227:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000622c:	c1 e0 08             	shl    eax,0x8
c000622f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006233:	09 e8                	or     eax,ebp
c0006235:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006239:	83 f8 3b             	cmp    eax,0x3b
c000623c:	74 27                	je     c0006265 <ucscompare+0x61>
c000623e:	83 ec 0c             	sub    esp,0xc
c0006241:	50                   	push   eax
c0006242:	e8 09 a7 ff ff       	call   c0000950 <tolower>
c0006247:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000624a:	89 c5                	mov    ebp,eax
c000624c:	e8 ff a6 ff ff       	call   c0000950 <tolower>
c0006251:	83 c4 10             	add    esp,0x10
c0006254:	39 c5                	cmp    ebp,eax
c0006256:	75 20                	jne    c0006278 <ucscompare+0x74>
c0006258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000625c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006260:	83 c2 02             	add    edx,0x2
c0006263:	eb ac                	jmp    c0006211 <ucscompare+0xd>
c0006265:	85 db                	test   ebx,ebx
c0006267:	0f 95 c2             	setne  dl
c000626a:	31 c0                	xor    eax,eax
c000626c:	83 fb 2f             	cmp    ebx,0x2f
c000626f:	0f 95 c0             	setne  al
c0006272:	21 d0                	and    eax,edx
c0006274:	f7 d8                	neg    eax
c0006276:	eb 03                	jmp    c000627b <ucscompare+0x77>
c0006278:	83 c8 ff             	or     eax,0xffffffff
c000627b:	83 c4 1c             	add    esp,0x1c
c000627e:	5b                   	pop    ebx
c000627f:	5e                   	pop    esi
c0006280:	5f                   	pop    edi
c0006281:	5d                   	pop    ebp
c0006282:	c3                   	ret    

c0006283 <fncompare>:
c0006283:	55                   	push   ebp
c0006284:	57                   	push   edi
c0006285:	89 c7                	mov    edi,eax
c0006287:	56                   	push   esi
c0006288:	89 ce                	mov    esi,ecx
c000628a:	53                   	push   ebx
c000628b:	31 db                	xor    ebx,ebx
c000628d:	83 ec 1c             	sub    esp,0x1c
c0006290:	39 d3                	cmp    ebx,edx
c0006292:	7d 45                	jge    c00062d9 <fncompare+0x56>
c0006294:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006298:	83 f8 3b             	cmp    eax,0x3b
c000629b:	74 3c                	je     c00062d9 <fncompare+0x56>
c000629d:	83 f8 2e             	cmp    eax,0x2e
c00062a0:	75 0e                	jne    c00062b0 <fncompare+0x2d>
c00062a2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062a5:	39 d9                	cmp    ecx,ebx
c00062a7:	74 30                	je     c00062d9 <fncompare+0x56>
c00062a9:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062ae:	74 29                	je     c00062d9 <fncompare+0x56>
c00062b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062b4:	83 ec 0c             	sub    esp,0xc
c00062b7:	50                   	push   eax
c00062b8:	e8 93 a6 ff ff       	call   c0000950 <tolower>
c00062bd:	89 c5                	mov    ebp,eax
c00062bf:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00062c6:	e8 85 a6 ff ff       	call   c0000950 <tolower>
c00062cb:	83 c4 10             	add    esp,0x10
c00062ce:	39 c5                	cmp    ebp,eax
c00062d0:	75 1e                	jne    c00062f0 <fncompare+0x6d>
c00062d2:	43                   	inc    ebx
c00062d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062d7:	eb b7                	jmp    c0006290 <fncompare+0xd>
c00062d9:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00062dd:	85 d2                	test   edx,edx
c00062df:	0f 95 c1             	setne  cl
c00062e2:	31 c0                	xor    eax,eax
c00062e4:	83 fa 2f             	cmp    edx,0x2f
c00062e7:	0f 95 c0             	setne  al
c00062ea:	21 c8                	and    eax,ecx
c00062ec:	f7 d8                	neg    eax
c00062ee:	eb 03                	jmp    c00062f3 <fncompare+0x70>
c00062f0:	83 c8 ff             	or     eax,0xffffffff
c00062f3:	83 c4 1c             	add    esp,0x1c
c00062f6:	5b                   	pop    ebx
c00062f7:	5e                   	pop    esi
c00062f8:	5f                   	pop    edi
c00062f9:	5d                   	pop    ebp
c00062fa:	c3                   	ret    

c00062fb <bclear_cache>:
c00062fb:	83 ec 18             	sub    esp,0x18
c00062fe:	68 a0 30 02 c0       	push   0xc00230a0
c0006303:	e8 38 6d 01 00       	call   c001d040 <iso_kprintf>
c0006308:	83 c4 10             	add    esp,0x10
c000630b:	31 c0                	xor    eax,eax
c000630d:	8b 14 85 20 90 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6fe0]
c0006314:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000631a:	8b 14 85 80 90 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6f80]
c0006321:	40                   	inc    eax
c0006322:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006328:	83 f8 10             	cmp    eax,0x10
c000632b:	75 e0                	jne    c000630d <bclear_cache+0x12>
c000632d:	83 c4 0c             	add    esp,0xc
c0006330:	c3                   	ret    

c0006331 <bclear>:
c0006331:	eb c8                	jmp    c00062fb <bclear_cache>

c0006333 <iso_break_all>:
c0006333:	83 ec 18             	sub    esp,0x18
c0006336:	68 ae 30 02 c0       	push   0xc00230ae
c000633b:	e8 00 6d 01 00       	call   c001d040 <iso_kprintf>
c0006340:	83 c4 10             	add    esp,0x10
c0006343:	31 c0                	xor    eax,eax
c0006345:	c7 80 d0 95 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd6a30],0x1
c000634f:	05 94 00 00 00       	add    eax,0x94
c0006354:	3d 40 09 00 00       	cmp    eax,0x940
c0006359:	75 ea                	jne    c0006345 <iso_break_all+0x12>
c000635b:	83 c4 0c             	add    esp,0xc
c000635e:	c3                   	ret    

c000635f <isoReadDiscSector>:
c000635f:	83 ec 0c             	sub    esp,0xc
c0006362:	0f be 05 60 90 02 c0 	movsx  eax,BYTE PTR ds:0xc0029060
c0006369:	50                   	push   eax
c000636a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000636e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006376:	e8 69 6c 01 00       	call   c001cfe4 <isoReadDiscSectorHelper>
c000637b:	83 c4 1c             	add    esp,0x1c
c000637e:	c3                   	ret    

c000637f <bread_cache>:
c000637f:	55                   	push   ebp
c0006380:	57                   	push   edi
c0006381:	89 d7                	mov    edi,edx
c0006383:	56                   	push   esi
c0006384:	ba 0f 00 00 00       	mov    edx,0xf
c0006389:	53                   	push   ebx
c000638a:	89 c6                	mov    esi,eax
c000638c:	83 ec 0c             	sub    esp,0xc
c000638f:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0006392:	39 38                	cmp    DWORD PTR [eax],edi
c0006394:	74 3c                	je     c00063d2 <bread_cache+0x53>
c0006396:	4a                   	dec    edx
c0006397:	83 fa ff             	cmp    edx,0xffffffff
c000639a:	75 f3                	jne    c000638f <bread_cache+0x10>
c000639c:	31 db                	xor    ebx,ebx
c000639e:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063a1:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063a4:	74 08                	je     c00063ae <bread_cache+0x2f>
c00063a6:	43                   	inc    ebx
c00063a7:	83 fb 10             	cmp    ebx,0x10
c00063aa:	75 f2                	jne    c000639e <bread_cache+0x1f>
c00063ac:	31 db                	xor    ebx,ebx
c00063ae:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063b1:	50                   	push   eax
c00063b2:	6a 01                	push   0x1
c00063b4:	57                   	push   edi
c00063b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063b8:	83 c0 04             	add    eax,0x4
c00063bb:	50                   	push   eax
c00063bc:	e8 9e ff ff ff       	call   c000635f <isoReadDiscSector>
c00063c1:	83 c4 10             	add    esp,0x10
c00063c4:	83 c9 ff             	or     ecx,0xffffffff
c00063c7:	85 c0                	test   eax,eax
c00063c9:	78 13                	js     c00063de <bread_cache+0x5f>
c00063cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063ce:	89 da                	mov    edx,ebx
c00063d0:	89 38                	mov    DWORD PTR [eax],edi
c00063d2:	89 f0                	mov    eax,esi
c00063d4:	e8 0f fe ff ff       	call   c00061e8 <bgrad_cache>
c00063d9:	b9 0f 00 00 00       	mov    ecx,0xf
c00063de:	83 c4 0c             	add    esp,0xc
c00063e1:	89 c8                	mov    eax,ecx
c00063e3:	5b                   	pop    ebx
c00063e4:	5e                   	pop    esi
c00063e5:	5f                   	pop    edi
c00063e6:	5d                   	pop    ebp
c00063e7:	c3                   	ret    

c00063e8 <biread>:
c00063e8:	89 c2                	mov    edx,eax
c00063ea:	b8 80 90 02 c0       	mov    eax,0xc0029080
c00063ef:	eb 8e                	jmp    c000637f <bread_cache>

c00063f1 <bdread>:
c00063f1:	89 c2                	mov    edx,eax
c00063f3:	b8 20 90 02 c0       	mov    eax,0xc0029020
c00063f8:	eb 85                	jmp    c000637f <bread_cache>

c00063fa <strnicmp>:
c00063fa:	55                   	push   ebp
c00063fb:	57                   	push   edi
c00063fc:	31 ff                	xor    edi,edi
c00063fe:	56                   	push   esi
c00063ff:	53                   	push   ebx
c0006400:	83 ec 0c             	sub    esp,0xc
c0006403:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006407:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000640b:	74 43                	je     c0006450 <strnicmp+0x56>
c000640d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006411:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006415:	85 c0                	test   eax,eax
c0006417:	74 37                	je     c0006450 <strnicmp+0x56>
c0006419:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c000641d:	85 d2                	test   edx,edx
c000641f:	74 2f                	je     c0006450 <strnicmp+0x56>
c0006421:	39 d0                	cmp    eax,edx
c0006423:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006426:	75 04                	jne    c000642c <strnicmp+0x32>
c0006428:	89 ef                	mov    edi,ebp
c000642a:	eb db                	jmp    c0006407 <strnicmp+0xd>
c000642c:	83 ec 0c             	sub    esp,0xc
c000642f:	50                   	push   eax
c0006430:	e8 1b a5 ff ff       	call   c0000950 <tolower>
c0006435:	89 c3                	mov    ebx,eax
c0006437:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000643b:	89 ef                	mov    edi,ebp
c000643d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006440:	e8 0b a5 ff ff       	call   c0000950 <tolower>
c0006445:	83 c4 10             	add    esp,0x10
c0006448:	29 c3                	sub    ebx,eax
c000644a:	89 d8                	mov    eax,ebx
c000644c:	74 b9                	je     c0006407 <strnicmp+0xd>
c000644e:	eb 02                	jmp    c0006452 <strnicmp+0x58>
c0006450:	31 c0                	xor    eax,eax
c0006452:	83 c4 0c             	add    esp,0xc
c0006455:	5b                   	pop    ebx
c0006456:	5e                   	pop    esi
c0006457:	5f                   	pop    edi
c0006458:	5d                   	pop    ebp
c0006459:	c3                   	ret    

c000645a <find_object>:
c000645a:	55                   	push   ebp
c000645b:	57                   	push   edi
c000645c:	89 c7                	mov    edi,eax
c000645e:	56                   	push   esi
c000645f:	53                   	push   ebx
c0006460:	89 d3                	mov    ebx,edx
c0006462:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006468:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000646f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006473:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006477:	83 3d b4 9e 02 c0 00 	cmp    DWORD PTR ds:0xc0029eb4,0x0
c000647e:	74 0b                	je     c000648b <find_object+0x31>
c0006480:	89 fa                	mov    edx,edi
c0006482:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006486:	e8 89 fc ff ff       	call   c0006114 <utf2ucs>
c000648b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000648e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006492:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006497:	7e 11                	jle    c00064aa <find_object+0x50>
c0006499:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000649d:	e8 46 ff ff ff       	call   c00063e8 <biread>
c00064a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00064a6:	85 c0                	test   eax,eax
c00064a8:	79 07                	jns    c00064b1 <find_object+0x57>
c00064aa:	31 db                	xor    ebx,ebx
c00064ac:	e9 56 01 00 00       	jmp    c0006607 <find_object+0x1ad>
c00064b1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00064b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00064c1:	8b 04 85 80 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f80]
c00064c8:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00064cc:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064cf:	85 f6                	test   esi,esi
c00064d1:	75 0e                	jne    c00064e1 <find_object+0x87>
c00064d3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00064d7:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00064df:	eb b1                	jmp    c0006492 <find_object+0x38>
c00064e1:	8b 2d b4 9e 02 c0    	mov    ebp,DWORD PTR ds:0xc0029eb4
c00064e7:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00064eb:	85 ed                	test   ebp,ebp
c00064ed:	89 c8                	mov    eax,ecx
c00064ef:	74 2b                	je     c000651c <find_object+0xc2>
c00064f1:	8d 43 21             	lea    eax,[ebx+0x21]
c00064f4:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064f8:	e8 07 fd ff ff       	call   c0006204 <ucscompare>
c00064fd:	85 c0                	test   eax,eax
c00064ff:	0f 84 bf 00 00 00    	je     c00065c4 <find_object+0x16a>
c0006505:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006508:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c000650c:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006514:	0f 8e da 00 00 00    	jle    c00065f4 <find_object+0x19a>
c000651a:	eb b7                	jmp    c00064d3 <find_object+0x79>
c000651c:	29 ce                	sub    esi,ecx
c000651e:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006522:	a8 01                	test   al,0x1
c0006524:	74 05                	je     c000652b <find_object+0xd1>
c0006526:	83 ee 21             	sub    esi,0x21
c0006529:	eb 5a                	jmp    c0006585 <find_object+0x12b>
c000652b:	42                   	inc    edx
c000652c:	83 ee 22             	sub    esi,0x22
c000652f:	eb 54                	jmp    c0006585 <find_object+0x12b>
c0006531:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006534:	48                   	dec    eax
c0006535:	3c 01                	cmp    al,0x1
c0006537:	77 51                	ja     c000658a <find_object+0x130>
c0006539:	50                   	push   eax
c000653a:	6a 02                	push   0x2
c000653c:	68 bd 30 02 c0       	push   0xc00230bd
c0006541:	52                   	push   edx
c0006542:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006546:	e8 95 a2 ff ff       	call   c00007e0 <strncmp>
c000654b:	83 c4 10             	add    esp,0x10
c000654e:	85 c0                	test   eax,eax
c0006550:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006554:	75 27                	jne    c000657d <find_object+0x123>
c0006556:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000655a:	8d 68 fb             	lea    ebp,[eax-0x5]
c000655d:	50                   	push   eax
c000655e:	8d 42 05             	lea    eax,[edx+0x5]
c0006561:	55                   	push   ebp
c0006562:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006566:	50                   	push   eax
c0006567:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000656b:	50                   	push   eax
c000656c:	e8 0f a1 ff ff       	call   c0000680 <strncpy>
c0006571:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006576:	83 c4 10             	add    esp,0x10
c0006579:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657d:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006581:	29 c6                	sub    esi,eax
c0006583:	01 c2                	add    edx,eax
c0006585:	83 fe 03             	cmp    esi,0x3
c0006588:	7f a7                	jg     c0006531 <find_object+0xd7>
c000658a:	85 ed                	test   ebp,ebp
c000658c:	7e 40                	jle    c00065ce <find_object+0x174>
c000658e:	51                   	push   ecx
c000658f:	51                   	push   ecx
c0006590:	6a 2f                	push   0x2f
c0006592:	57                   	push   edi
c0006593:	e8 08 a2 ff ff       	call   c00007a0 <strchr>
c0006598:	83 c4 10             	add    esp,0x10
c000659b:	85 c0                	test   eax,eax
c000659d:	74 04                	je     c00065a3 <find_object+0x149>
c000659f:	29 f8                	sub    eax,edi
c00065a1:	eb 0c                	jmp    c00065af <find_object+0x155>
c00065a3:	83 ec 0c             	sub    esp,0xc
c00065a6:	57                   	push   edi
c00065a7:	e8 c4 9f ff ff       	call   c0000570 <strlen>
c00065ac:	83 c4 10             	add    esp,0x10
c00065af:	52                   	push   edx
c00065b0:	50                   	push   eax
c00065b1:	57                   	push   edi
c00065b2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065b6:	50                   	push   eax
c00065b7:	e8 3e fe ff ff       	call   c00063fa <strnicmp>
c00065bc:	83 c4 10             	add    esp,0x10
c00065bf:	e9 39 ff ff ff       	jmp    c00064fd <find_object+0xa3>
c00065c4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065c8:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00065cc:	eb 1e                	jmp    c00065ec <find_object+0x192>
c00065ce:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065d2:	8d 43 21             	lea    eax,[ebx+0x21]
c00065d5:	89 f9                	mov    ecx,edi
c00065d7:	e8 a7 fc ff ff       	call   c0006283 <fncompare>
c00065dc:	85 c0                	test   eax,eax
c00065de:	0f 85 21 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065e4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065e8:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00065ec:	0f 85 13 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065f2:	eb 13                	jmp    c0006607 <find_object+0x1ad>
c00065f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00065f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00065fc:	0f 8f b7 fe ff ff    	jg     c00064b9 <find_object+0x5f>
c0006602:	e9 cc fe ff ff       	jmp    c00064d3 <find_object+0x79>
c0006607:	81 c4 2c 01 00 00    	add    esp,0x12c
c000660d:	89 d8                	mov    eax,ebx
c000660f:	5b                   	pop    ebx
c0006610:	5e                   	pop    esi
c0006611:	5f                   	pop    edi
c0006612:	5d                   	pop    ebp
c0006613:	c3                   	ret    

c0006614 <find_object_path>:
c0006614:	55                   	push   ebp
c0006615:	57                   	push   edi
c0006616:	89 d7                	mov    edi,edx
c0006618:	56                   	push   esi
c0006619:	89 c6                	mov    esi,eax
c000661b:	53                   	push   ebx
c000661c:	89 cb                	mov    ebx,ecx
c000661e:	83 ec 0c             	sub    esp,0xc
c0006621:	50                   	push   eax
c0006622:	50                   	push   eax
c0006623:	6a 2f                	push   0x2f
c0006625:	56                   	push   esi
c0006626:	e8 75 a1 ff ff       	call   c00007a0 <strchr>
c000662b:	83 c4 10             	add    esp,0x10
c000662e:	89 c5                	mov    ebp,eax
c0006630:	85 c0                	test   eax,eax
c0006632:	74 3a                	je     c000666e <find_object_path+0x5a>
c0006634:	39 ee                	cmp    esi,ebp
c0006636:	74 31                	je     c0006669 <find_object_path+0x55>
c0006638:	8d 43 0a             	lea    eax,[ebx+0xa]
c000663b:	e8 a6 fb ff ff       	call   c00061e6 <iso_733>
c0006640:	89 c2                	mov    edx,eax
c0006642:	8d 43 02             	lea    eax,[ebx+0x2]
c0006645:	e8 9c fb ff ff       	call   c00061e6 <iso_733>
c000664a:	83 ec 0c             	sub    esp,0xc
c000664d:	89 c1                	mov    ecx,eax
c000664f:	52                   	push   edx
c0006650:	89 f0                	mov    eax,esi
c0006652:	ba 01 00 00 00       	mov    edx,0x1
c0006657:	e8 fe fd ff ff       	call   c000645a <find_object>
c000665c:	83 c4 10             	add    esp,0x10
c000665f:	89 c3                	mov    ebx,eax
c0006661:	85 c0                	test   eax,eax
c0006663:	75 04                	jne    c0006669 <find_object_path+0x55>
c0006665:	31 db                	xor    ebx,ebx
c0006667:	eb 36                	jmp    c000669f <find_object_path+0x8b>
c0006669:	8d 75 01             	lea    esi,[ebp+0x1]
c000666c:	eb b3                	jmp    c0006621 <find_object_path+0xd>
c000666e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006671:	74 28                	je     c000669b <find_object_path+0x87>
c0006673:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006676:	e8 6b fb ff ff       	call   c00061e6 <iso_733>
c000667b:	89 c2                	mov    edx,eax
c000667d:	8d 43 02             	lea    eax,[ebx+0x2]
c0006680:	e8 61 fb ff ff       	call   c00061e6 <iso_733>
c0006685:	83 ec 0c             	sub    esp,0xc
c0006688:	89 c1                	mov    ecx,eax
c000668a:	52                   	push   edx
c000668b:	89 f0                	mov    eax,esi
c000668d:	89 fa                	mov    edx,edi
c000668f:	e8 c6 fd ff ff       	call   c000645a <find_object>
c0006694:	83 c4 10             	add    esp,0x10
c0006697:	89 c3                	mov    ebx,eax
c0006699:	eb 04                	jmp    c000669f <find_object_path+0x8b>
c000669b:	85 ff                	test   edi,edi
c000669d:	74 c6                	je     c0006665 <find_object_path+0x51>
c000669f:	83 c4 0c             	add    esp,0xc
c00066a2:	89 d8                	mov    eax,ebx
c00066a4:	5b                   	pop    ebx
c00066a5:	5e                   	pop    esi
c00066a6:	5f                   	pop    edi
c00066a7:	5d                   	pop    ebp
c00066a8:	c3                   	ret    

c00066a9 <stricmp>:
c00066a9:	57                   	push   edi
c00066aa:	56                   	push   esi
c00066ab:	31 f6                	xor    esi,esi
c00066ad:	53                   	push   ebx
c00066ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b2:	83 ec 0c             	sub    esp,0xc
c00066b5:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066bd:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066c1:	50                   	push   eax
c00066c2:	e8 69 a2 ff ff       	call   c0000930 <toupper>
c00066c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00066ca:	e8 81 a2 ff ff       	call   c0000950 <tolower>
c00066cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066d2:	89 c3                	mov    ebx,eax
c00066d4:	e8 57 a2 ff ff       	call   c0000930 <toupper>
c00066d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00066dc:	e8 6f a2 ff ff       	call   c0000950 <tolower>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	39 c3                	cmp    ebx,eax
c00066e6:	75 05                	jne    c00066ed <stricmp+0x44>
c00066e8:	46                   	inc    esi
c00066e9:	85 db                	test   ebx,ebx
c00066eb:	75 c1                	jne    c00066ae <stricmp+0x5>
c00066ed:	29 c3                	sub    ebx,eax
c00066ef:	89 d8                	mov    eax,ebx
c00066f1:	5b                   	pop    ebx
c00066f2:	5e                   	pop    esi
c00066f3:	5f                   	pop    edi
c00066f4:	c3                   	ret    

c00066f5 <iso_open>:
c00066f5:	57                   	push   edi
c00066f6:	31 c0                	xor    eax,eax
c00066f8:	56                   	push   esi
c00066f9:	b9 80 9e 02 c0       	mov    ecx,0xc0029e80
c00066fe:	53                   	push   ebx
c00066ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006704:	0f 95 c0             	setne  al
c0006707:	89 c2                	mov    edx,eax
c0006709:	89 c6                	mov    esi,eax
c000670b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000670f:	e8 00 ff ff ff       	call   c0006614 <find_object_path>
c0006714:	83 ca ff             	or     edx,0xffffffff
c0006717:	85 c0                	test   eax,eax
c0006719:	74 5e                	je     c0006779 <iso_open+0x84>
c000671b:	89 c1                	mov    ecx,eax
c000671d:	31 d2                	xor    edx,edx
c000671f:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006725:	83 bf 40 95 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd6ac0],0x0
c000672c:	75 42                	jne    c0006770 <iso_open+0x7b>
c000672e:	8d 41 02             	lea    eax,[ecx+0x2]
c0006731:	c7 87 40 95 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd6ac0],0xffffffff
c000673b:	e8 a6 fa ff ff       	call   c00061e6 <iso_733>
c0006740:	89 b7 44 95 02 c0    	mov    DWORD PTR [edi-0x3ffd6abc],esi
c0006746:	89 87 40 95 02 c0    	mov    DWORD PTR [edi-0x3ffd6ac0],eax
c000674c:	c7 87 48 95 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd6ab8],0x0
c0006756:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006759:	e8 88 fa ff ff       	call   c00061e6 <iso_733>
c000675e:	c7 87 d0 95 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd6a30],0x0
c0006768:	89 87 4c 95 02 c0    	mov    DWORD PTR [edi-0x3ffd6ab4],eax
c000676e:	eb 09                	jmp    c0006779 <iso_open+0x84>
c0006770:	42                   	inc    edx
c0006771:	83 fa 10             	cmp    edx,0x10
c0006774:	75 a9                	jne    c000671f <iso_open+0x2a>
c0006776:	83 ca ff             	or     edx,0xffffffff
c0006779:	5b                   	pop    ebx
c000677a:	89 d0                	mov    eax,edx
c000677c:	5e                   	pop    esi
c000677d:	5f                   	pop    edi
c000677e:	c3                   	ret    

c000677f <iso_close>:
c000677f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006783:	83 f8 0f             	cmp    eax,0xf
c0006786:	7f 10                	jg     c0006798 <iso_close+0x19>
c0006788:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000678e:	c7 80 40 95 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6ac0],0x0
c0006798:	e9 5e fb ff ff       	jmp    c00062fb <bclear_cache>

c000679d <iso_read>:
c000679d:	55                   	push   ebp
c000679e:	57                   	push   edi
c000679f:	56                   	push   esi
c00067a0:	53                   	push   ebx
c00067a1:	83 ec 1c             	sub    esp,0x1c
c00067a4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067a8:	83 fd 0f             	cmp    ebp,0xf
c00067ab:	7e 0a                	jle    c00067b7 <iso_read+0x1a>
c00067ad:	83 c8 ff             	or     eax,0xffffffff
c00067b0:	89 c2                	mov    edx,eax
c00067b2:	e9 f4 00 00 00       	jmp    c00068ab <iso_read+0x10e>
c00067b7:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067bd:	83 bd 40 95 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd6ac0],0x0
c00067c4:	74 e7                	je     c00067ad <iso_read+0x10>
c00067c6:	8b 95 d0 95 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd6a30]
c00067cc:	85 d2                	test   edx,edx
c00067ce:	75 dd                	jne    c00067ad <iso_read+0x10>
c00067d0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067d5:	0f 84 cd 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067db:	8b 85 48 95 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd6ab8]
c00067e1:	8b 8d 4c 95 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd6ab4]
c00067e7:	29 c1                	sub    ecx,eax
c00067e9:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00067ed:	76 04                	jbe    c00067f3 <iso_read+0x56>
c00067ef:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00067f3:	85 c9                	test   ecx,ecx
c00067f5:	0f 84 ad 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067fb:	89 c6                	mov    esi,eax
c00067fd:	bb 00 08 00 00       	mov    ebx,0x800
c0006802:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006808:	c1 e8 0b             	shr    eax,0xb
c000680b:	29 f3                	sub    ebx,esi
c000680d:	03 85 40 95 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd6ac0]
c0006813:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006819:	7e 3f                	jle    c000685a <iso_read+0xbd>
c000681b:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006821:	75 37                	jne    c000685a <iso_read+0xbd>
c0006823:	be 20 00 00 00       	mov    esi,0x20
c0006828:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000682e:	7f 05                	jg     c0006835 <iso_read+0x98>
c0006830:	89 ce                	mov    esi,ecx
c0006832:	c1 fe 0b             	sar    esi,0xb
c0006835:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006839:	89 f3                	mov    ebx,esi
c000683b:	c1 e3 0b             	shl    ebx,0xb
c000683e:	52                   	push   edx
c000683f:	56                   	push   esi
c0006840:	50                   	push   eax
c0006841:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006845:	e8 15 fb ff ff       	call   c000635f <isoReadDiscSector>
c000684a:	83 c4 10             	add    esp,0x10
c000684d:	85 c0                	test   eax,eax
c000684f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006853:	7f 3e                	jg     c0006893 <iso_read+0xf6>
c0006855:	e9 53 ff ff ff       	jmp    c00067ad <iso_read+0x10>
c000685a:	39 cb                	cmp    ebx,ecx
c000685c:	7e 02                	jle    c0006860 <iso_read+0xc3>
c000685e:	89 cb                	mov    ebx,ecx
c0006860:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006864:	e8 88 fb ff ff       	call   c00063f1 <bdread>
c0006869:	85 c0                	test   eax,eax
c000686b:	0f 88 3c ff ff ff    	js     c00067ad <iso_read+0x10>
c0006871:	8b 0c 85 20 90 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6fe0]
c0006878:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000687c:	8b 85 48 95 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd6ab8]
c0006882:	25 ff 07 00 00       	and    eax,0x7ff
c0006887:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c000688b:	89 d9                	mov    ecx,ebx
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006893:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006897:	01 9d 48 95 02 c0    	add    DWORD PTR [ebp-0x3ffd6ab8],ebx
c000689d:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068a1:	01 da                	add    edx,ebx
c00068a3:	e9 28 ff ff ff       	jmp    c00067d0 <iso_read+0x33>
c00068a8:	89 d0                	mov    eax,edx
c00068aa:	99                   	cdq    
c00068ab:	83 c4 1c             	add    esp,0x1c
c00068ae:	5b                   	pop    ebx
c00068af:	5e                   	pop    esi
c00068b0:	5f                   	pop    edi
c00068b1:	5d                   	pop    ebp
c00068b2:	c3                   	ret    

c00068b3 <iso_seek>:
c00068b3:	55                   	push   ebp
c00068b4:	83 c8 ff             	or     eax,0xffffffff
c00068b7:	57                   	push   edi
c00068b8:	89 c2                	mov    edx,eax
c00068ba:	56                   	push   esi
c00068bb:	53                   	push   ebx
c00068bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068c8:	83 fe 0f             	cmp    esi,0xf
c00068cb:	7f 65                	jg     c0006932 <iso_seek+0x7f>
c00068cd:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068d3:	8d 8d 40 95 02 c0    	lea    ecx,[ebp-0x3ffd6ac0]
c00068d9:	83 bd 40 95 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd6ac0],0x0
c00068e0:	74 50                	je     c0006932 <iso_seek+0x7f>
c00068e2:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068e9:	75 47                	jne    c0006932 <iso_seek+0x7f>
c00068eb:	83 fb 01             	cmp    ebx,0x1
c00068ee:	74 0e                	je     c00068fe <iso_seek+0x4b>
c00068f0:	83 fb 02             	cmp    ebx,0x2
c00068f3:	74 0e                	je     c0006903 <iso_seek+0x50>
c00068f5:	85 db                	test   ebx,ebx
c00068f7:	75 39                	jne    c0006932 <iso_seek+0x7f>
c00068f9:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00068fc:	eb 0d                	jmp    c000690b <iso_seek+0x58>
c00068fe:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006901:	eb 08                	jmp    c000690b <iso_seek+0x58>
c0006903:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006906:	01 f8                	add    eax,edi
c0006908:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000690b:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006911:	8b 88 4c 95 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd6ab4]
c0006917:	05 40 95 02 c0       	add    eax,0xc0029540
c000691c:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000691f:	76 03                	jbe    c0006924 <iso_seek+0x71>
c0006921:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006924:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000692a:	8b 82 48 95 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd6ab8]
c0006930:	31 d2                	xor    edx,edx
c0006932:	5b                   	pop    ebx
c0006933:	5e                   	pop    esi
c0006934:	5f                   	pop    edi
c0006935:	5d                   	pop    ebp
c0006936:	c3                   	ret    

c0006937 <iso_tell>:
c0006937:	83 c8 ff             	or     eax,0xffffffff
c000693a:	53                   	push   ebx
c000693b:	89 c2                	mov    edx,eax
c000693d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006941:	83 f9 0f             	cmp    ecx,0xf
c0006944:	7f 20                	jg     c0006966 <iso_tell+0x2f>
c0006946:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000694c:	83 bb 40 95 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd6ac0],0x0
c0006953:	74 11                	je     c0006966 <iso_tell+0x2f>
c0006955:	83 bb d0 95 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd6a30],0x0
c000695c:	75 08                	jne    c0006966 <iso_tell+0x2f>
c000695e:	8b 83 48 95 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd6ab8]
c0006964:	31 d2                	xor    edx,edx
c0006966:	5b                   	pop    ebx
c0006967:	c3                   	ret    

c0006968 <iso_total>:
c0006968:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000696c:	83 c8 ff             	or     eax,0xffffffff
c000696f:	83 fa 0f             	cmp    edx,0xf
c0006972:	7f 1e                	jg     c0006992 <iso_total+0x2a>
c0006974:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000697a:	83 ba 40 95 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd6ac0],0x0
c0006981:	74 0f                	je     c0006992 <iso_total+0x2a>
c0006983:	83 ba d0 95 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd6a30],0x0
c000698a:	75 06                	jne    c0006992 <iso_total+0x2a>
c000698c:	8b 82 4c 95 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd6ab4]
c0006992:	c3                   	ret    

c0006993 <fn_postprocess>:
c0006993:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006997:	89 d0                	mov    eax,edx
c0006999:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000699c:	83 f9 3b             	cmp    ecx,0x3b
c000699f:	74 07                	je     c00069a8 <fn_postprocess+0x15>
c00069a1:	85 c9                	test   ecx,ecx
c00069a3:	74 03                	je     c00069a8 <fn_postprocess+0x15>
c00069a5:	40                   	inc    eax
c00069a6:	eb f1                	jmp    c0006999 <fn_postprocess+0x6>
c00069a8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069ab:	39 d0                	cmp    eax,edx
c00069ad:	76 0a                	jbe    c00069b9 <fn_postprocess+0x26>
c00069af:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069b3:	75 04                	jne    c00069b9 <fn_postprocess+0x26>
c00069b5:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b9:	c3                   	ret    

c00069ba <iso_readdir>:
c00069ba:	55                   	push   ebp
c00069bb:	57                   	push   edi
c00069bc:	56                   	push   esi
c00069bd:	53                   	push   ebx
c00069be:	83 ec 1c             	sub    esp,0x1c
c00069c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069c5:	83 fb 0f             	cmp    ebx,0xf
c00069c8:	7f 28                	jg     c00069f2 <iso_readdir+0x38>
c00069ca:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069d0:	8d b8 40 95 02 c0    	lea    edi,[eax-0x3ffd6ac0]
c00069d6:	83 b8 40 95 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd6ac0],0x0
c00069dd:	74 13                	je     c00069f2 <iso_readdir+0x38>
c00069df:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069e3:	74 0d                	je     c00069f2 <iso_readdir+0x38>
c00069e5:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00069ec:	0f 84 b1 00 00 00    	je     c0006aa3 <iso_readdir+0xe9>
c00069f2:	83 ec 0c             	sub    esp,0xc
c00069f5:	68 c0 30 02 c0       	push   0xc00230c0
c00069fa:	e8 41 66 01 00       	call   c001d040 <iso_kprintf>
c00069ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a02:	e8 55 66 01 00       	call   c001d05c <iso_kprintfd>
c0006a07:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a0d:	c7 04 24 c5 30 02 c0 	mov    DWORD PTR [esp],0xc00230c5
c0006a14:	e8 27 66 01 00       	call   c001d040 <iso_kprintf>
c0006a19:	5d                   	pop    ebp
c0006a1a:	ff b3 40 95 02 c0    	push   DWORD PTR [ebx-0x3ffd6ac0]
c0006a20:	e8 37 66 01 00       	call   c001d05c <iso_kprintfd>
c0006a25:	c7 04 24 cb 30 02 c0 	mov    DWORD PTR [esp],0xc00230cb
c0006a2c:	e8 0f 66 01 00       	call   c001d040 <iso_kprintf>
c0006a31:	58                   	pop    eax
c0006a32:	ff b3 44 95 02 c0    	push   DWORD PTR [ebx-0x3ffd6abc]
c0006a38:	e8 1f 66 01 00       	call   c001d05c <iso_kprintfd>
c0006a3d:	c7 04 24 d1 30 02 c0 	mov    DWORD PTR [esp],0xc00230d1
c0006a44:	e8 f7 65 01 00       	call   c001d040 <iso_kprintf>
c0006a49:	58                   	pop    eax
c0006a4a:	ff b3 d0 95 02 c0    	push   DWORD PTR [ebx-0x3ffd6a30]
c0006a50:	e8 07 66 01 00       	call   c001d05c <iso_kprintfd>
c0006a55:	83 c4 10             	add    esp,0x10
c0006a58:	eb 42                	jmp    c0006a9c <iso_readdir+0xe2>
c0006a5a:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a5d:	8b 34 85 80 90 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd6f80]
c0006a64:	89 d1                	mov    ecx,edx
c0006a66:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a6c:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a70:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a73:	75 35                	jne    c0006aaa <iso_readdir+0xf0>
c0006a75:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a7b:	81 c2 00 08 00 00    	add    edx,0x800
c0006a81:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a84:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a87:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a8a:	73 1e                	jae    c0006aaa <iso_readdir+0xf0>
c0006a8c:	c1 ea 0b             	shr    edx,0xb
c0006a8f:	8b 07                	mov    eax,DWORD PTR [edi]
c0006a91:	01 d0                	add    eax,edx
c0006a93:	e8 50 f9 ff ff       	call   c00063e8 <biread>
c0006a98:	85 c0                	test   eax,eax
c0006a9a:	79 be                	jns    c0006a5a <iso_readdir+0xa0>
c0006a9c:	31 c0                	xor    eax,eax
c0006a9e:	e9 66 01 00 00       	jmp    c0006c09 <iso_readdir+0x24f>
c0006aa3:	31 f6                	xor    esi,esi
c0006aa5:	83 c8 ff             	or     eax,0xffffffff
c0006aa8:	eb da                	jmp    c0006a84 <iso_readdir+0xca>
c0006aaa:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ab0:	8b ba 48 95 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd6ab8]
c0006ab6:	81 c2 40 95 02 c0    	add    edx,0xc0029540
c0006abc:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006abf:	73 db                	jae    c0006a9c <iso_readdir+0xe2>
c0006ac1:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ac5:	75 34                	jne    c0006afb <iso_readdir+0x141>
c0006ac7:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006acb:	75 2e                	jne    c0006afb <iso_readdir+0x141>
c0006acd:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ad0:	8b 34 85 80 90 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd6f80]
c0006ad7:	01 f9                	add    ecx,edi
c0006ad9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006adc:	89 c8                	mov    eax,ecx
c0006ade:	25 ff 07 00 00       	and    eax,0x7ff
c0006ae3:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006ae8:	01 c8                	add    eax,ecx
c0006aea:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006aed:	25 ff 07 00 00       	and    eax,0x7ff
c0006af2:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006af6:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006af9:	74 a1                	je     c0006a9c <iso_readdir+0xe2>
c0006afb:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b01:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b05:	8d 56 21             	lea    edx,[esi+0x21]
c0006b08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b0c:	8d a8 58 95 02 c0    	lea    ebp,[eax-0x3ffd6aa8]
c0006b12:	83 3d b4 9e 02 c0 00 	cmp    DWORD PTR ds:0xc0029eb4,0x0
c0006b19:	74 0c                	je     c0006b27 <iso_readdir+0x16d>
c0006b1b:	89 e8                	mov    eax,ebp
c0006b1d:	e8 14 f6 ff ff       	call   c0006136 <ucs2utfn>
c0006b22:	e9 a6 00 00 00       	jmp    c0006bcd <iso_readdir+0x213>
c0006b27:	57                   	push   edi
c0006b28:	51                   	push   ecx
c0006b29:	52                   	push   edx
c0006b2a:	55                   	push   ebp
c0006b2b:	e8 50 9b ff ff       	call   c0000680 <strncpy>
c0006b30:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b34:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006b3a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b3d:	c6 84 01 58 95 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd6aa8],0x0
c0006b45:	e8 49 fe ff ff       	call   c0006993 <fn_postprocess>
c0006b4a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b4e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b51:	83 c4 10             	add    esp,0x10
c0006b54:	29 d0                	sub    eax,edx
c0006b56:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006b5a:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006b5e:	74 05                	je     c0006b65 <iso_readdir+0x1ab>
c0006b60:	83 e8 21             	sub    eax,0x21
c0006b63:	eb 04                	jmp    c0006b69 <iso_readdir+0x1af>
c0006b65:	47                   	inc    edi
c0006b66:	83 e8 22             	sub    eax,0x22
c0006b69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b6d:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b77:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b7c:	7e 4f                	jle    c0006bcd <iso_readdir+0x213>
c0006b7e:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006b81:	48                   	dec    eax
c0006b82:	3c 01                	cmp    al,0x1
c0006b84:	77 47                	ja     c0006bcd <iso_readdir+0x213>
c0006b86:	52                   	push   edx
c0006b87:	6a 02                	push   0x2
c0006b89:	68 bd 30 02 c0       	push   0xc00230bd
c0006b8e:	57                   	push   edi
c0006b8f:	e8 4c 9c ff ff       	call   c00007e0 <strncmp>
c0006b94:	83 c4 10             	add    esp,0x10
c0006b97:	85 c0                	test   eax,eax
c0006b99:	75 26                	jne    c0006bc1 <iso_readdir+0x207>
c0006b9b:	50                   	push   eax
c0006b9c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006ba0:	83 e8 05             	sub    eax,0x5
c0006ba3:	50                   	push   eax
c0006ba4:	8d 47 05             	lea    eax,[edi+0x5]
c0006ba7:	50                   	push   eax
c0006ba8:	55                   	push   ebp
c0006ba9:	e8 d2 9a ff ff       	call   c0000680 <strncpy>
c0006bae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006bb2:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bb6:	83 c4 10             	add    esp,0x10
c0006bb9:	c6 84 08 53 95 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd6aad],0x0
c0006bc1:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bc5:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006bc9:	01 c7                	add    edi,eax
c0006bcb:	eb aa                	jmp    c0006b77 <iso_readdir+0x1bd>
c0006bcd:	83 c8 ff             	or     eax,0xffffffff
c0006bd0:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bd4:	89 c2                	mov    edx,eax
c0006bd6:	75 0a                	jne    c0006be2 <iso_readdir+0x228>
c0006bd8:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bdb:	e8 06 f6 ff ff       	call   c00061e6 <iso_733>
c0006be0:	31 d2                	xor    edx,edx
c0006be2:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006be8:	89 83 50 95 02 c0    	mov    DWORD PTR [ebx-0x3ffd6ab0],eax
c0006bee:	89 93 54 95 02 c0    	mov    DWORD PTR [ebx-0x3ffd6aac],edx
c0006bf4:	81 c3 40 95 02 c0    	add    ebx,0xc0029540
c0006bfa:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006bfd:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c04:	05 50 95 02 c0       	add    eax,0xc0029550
c0006c09:	83 c4 1c             	add    esp,0x1c
c0006c0c:	5b                   	pop    ebx
c0006c0d:	5e                   	pop    esi
c0006c0e:	5f                   	pop    edi
c0006c0f:	5d                   	pop    ebp
c0006c10:	c3                   	ret    

c0006c11 <iso_reset>:
c0006c11:	83 ec 18             	sub    esp,0x18
c0006c14:	68 da 30 02 c0       	push   0xc00230da
c0006c19:	e8 22 64 01 00       	call   c001d040 <iso_kprintf>
c0006c1e:	e8 10 f7 ff ff       	call   c0006333 <iso_break_all>
c0006c23:	e8 09 f7 ff ff       	call   c0006331 <bclear>
c0006c28:	31 c0                	xor    eax,eax
c0006c2a:	83 c4 1c             	add    esp,0x1c
c0006c2d:	c3                   	ret    

c0006c2e <init_percd>:
c0006c2e:	57                   	push   edi
c0006c2f:	56                   	push   esi
c0006c30:	53                   	push   ebx
c0006c31:	bb 01 00 00 00       	mov    ebx,0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	a2 60 90 02 c0       	mov    ds:0xc0029060,al
c0006c3f:	e8 cd ff ff ff       	call   c0006c11 <iso_reset>
c0006c44:	c7 05 b4 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029eb4,0x0
c0006c4e:	a1 ac 9e 02 c0       	mov    eax,ds:0xc0029eac
c0006c53:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c57:	e8 8c f7 ff ff       	call   c00063e8 <biread>
c0006c5c:	89 c6                	mov    esi,eax
c0006c5e:	85 c0                	test   eax,eax
c0006c60:	0f 88 ba 00 00 00    	js     c0006d20 <init_percd+0xf2>
c0006c66:	8b 04 85 80 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f80]
c0006c6d:	83 c0 04             	add    eax,0x4
c0006c70:	52                   	push   edx
c0006c71:	6a 06                	push   0x6
c0006c73:	68 e5 30 02 c0       	push   0xc00230e5
c0006c78:	50                   	push   eax
c0006c79:	e8 02 97 ff ff       	call   c0000380 <memcmp>
c0006c7e:	83 c4 10             	add    esp,0x10
c0006c81:	85 c0                	test   eax,eax
c0006c83:	74 08                	je     c0006c8d <init_percd+0x5f>
c0006c85:	43                   	inc    ebx
c0006c86:	83 fb 04             	cmp    ebx,0x4
c0006c89:	75 c3                	jne    c0006c4e <init_percd+0x20>
c0006c8b:	eb 1a                	jmp    c0006ca7 <init_percd+0x79>
c0006c8d:	8b 04 b5 80 90 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd6f80]
c0006c94:	83 c0 5c             	add    eax,0x5c
c0006c97:	e8 17 f5 ff ff       	call   c00061b3 <isjoliet>
c0006c9c:	a3 b4 9e 02 c0       	mov    ds:0xc0029eb4,eax
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 e0                	je     c0006c85 <init_percd+0x57>
c0006ca5:	eb 3e                	jmp    c0006ce5 <init_percd+0xb7>
c0006ca7:	83 3d b4 9e 02 c0 00 	cmp    DWORD PTR ds:0xc0029eb4,0x0
c0006cae:	75 35                	jne    c0006ce5 <init_percd+0xb7>
c0006cb0:	a1 ac 9e 02 c0       	mov    eax,ds:0xc0029eac
c0006cb5:	83 c0 10             	add    eax,0x10
c0006cb8:	e8 2b f7 ff ff       	call   c00063e8 <biread>
c0006cbd:	89 c6                	mov    esi,eax
c0006cbf:	85 c0                	test   eax,eax
c0006cc1:	78 5f                	js     c0006d22 <init_percd+0xf4>
c0006cc3:	83 cb ff             	or     ebx,0xffffffff
c0006cc6:	50                   	push   eax
c0006cc7:	8b 04 b5 80 90 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd6f80]
c0006cce:	6a 06                	push   0x6
c0006cd0:	83 c0 04             	add    eax,0x4
c0006cd3:	68 ec 30 02 c0       	push   0xc00230ec
c0006cd8:	50                   	push   eax
c0006cd9:	e8 a2 96 ff ff       	call   c0000380 <memcmp>
c0006cde:	83 c4 10             	add    esp,0x10
c0006ce1:	85 c0                	test   eax,eax
c0006ce3:	75 3d                	jne    c0006d22 <init_percd+0xf4>
c0006ce5:	8b 34 b5 80 90 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd6f80]
c0006cec:	bf 80 9e 02 c0       	mov    edi,0xc0029e80
c0006cf1:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006cf7:	b9 22 00 00 00       	mov    ecx,0x22
c0006cfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cfe:	b8 82 9e 02 c0       	mov    eax,0xc0029e82
c0006d03:	31 db                	xor    ebx,ebx
c0006d05:	e8 dc f4 ff ff       	call   c00061e6 <iso_733>
c0006d0a:	a3 a8 9e 02 c0       	mov    ds:0xc0029ea8,eax
c0006d0f:	b8 8a 9e 02 c0       	mov    eax,0xc0029e8a
c0006d14:	e8 cd f4 ff ff       	call   c00061e6 <iso_733>
c0006d19:	a3 a4 9e 02 c0       	mov    ds:0xc0029ea4,eax
c0006d1e:	eb 02                	jmp    c0006d22 <init_percd+0xf4>
c0006d20:	89 c3                	mov    ebx,eax
c0006d22:	89 d8                	mov    eax,ebx
c0006d24:	5b                   	pop    ebx
c0006d25:	5e                   	pop    esi
c0006d26:	5f                   	pop    edi
c0006d27:	c3                   	ret    

c0006d28 <iso_ioctl>:
c0006d28:	83 ec 18             	sub    esp,0x18
c0006d2b:	68 f3 30 02 c0       	push   0xc00230f3
c0006d30:	e8 0b 63 01 00       	call   c001d040 <iso_kprintf>
c0006d35:	e8 d7 fe ff ff       	call   c0006c11 <iso_reset>
c0006d3a:	31 c0                	xor    eax,eax
c0006d3c:	83 c4 1c             	add    esp,0x1c
c0006d3f:	c3                   	ret    

c0006d40 <fs_iso9660_init>:
c0006d40:	53                   	push   ebx
c0006d41:	31 db                	xor    ebx,ebx
c0006d43:	83 ec 14             	sub    esp,0x14
c0006d46:	68 fe 30 02 c0       	push   0xc00230fe
c0006d4b:	e8 f0 62 01 00       	call   c001d040 <iso_kprintf>
c0006d50:	83 c4 0c             	add    esp,0xc
c0006d53:	68 40 09 00 00       	push   0x940
c0006d58:	6a 00                	push   0x0
c0006d5a:	68 40 95 02 c0       	push   0xc0029540
c0006d5f:	e8 8c 97 ff ff       	call   c00004f0 <memset>
c0006d64:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d6b:	c7 05 40 95 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0029540,0xffffffff
c0006d75:	e8 15 8e 00 00       	call   c000fb8f <malloc>
c0006d7a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d81:	a3 b0 9e 02 c0       	mov    ds:0xc0029eb0,eax
c0006d86:	e8 04 8e 00 00       	call   c000fb8f <malloc>
c0006d8b:	83 c4 10             	add    esp,0x10
c0006d8e:	a3 20 95 02 c0       	mov    ds:0xc0029520,eax
c0006d93:	83 ec 0c             	sub    esp,0xc
c0006d96:	68 04 08 00 00       	push   0x804
c0006d9b:	e8 ef 8d 00 00       	call   c000fb8f <malloc>
c0006da0:	89 04 9d 80 90 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd6f80],eax
c0006da7:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dad:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006db4:	e8 d6 8d 00 00       	call   c000fb8f <malloc>
c0006db9:	83 c4 10             	add    esp,0x10
c0006dbc:	89 04 9d 20 90 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd6fe0],eax
c0006dc3:	43                   	inc    ebx
c0006dc4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dca:	83 fb 10             	cmp    ebx,0x10
c0006dcd:	75 c4                	jne    c0006d93 <fs_iso9660_init+0x53>
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	83 c4 08             	add    esp,0x8
c0006dd4:	5b                   	pop    ebx
c0006dd5:	c3                   	ret    

c0006dd6 <fs_iso9660_shutdown>:
c0006dd6:	53                   	push   ebx
c0006dd7:	31 db                	xor    ebx,ebx
c0006dd9:	83 ec 08             	sub    esp,0x8
c0006ddc:	83 ec 0c             	sub    esp,0xc
c0006ddf:	ff 34 9d 80 90 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6f80]
c0006de6:	e8 b4 8d 00 00       	call   c000fb9f <free>
c0006deb:	58                   	pop    eax
c0006dec:	ff 34 9d 20 90 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6fe0]
c0006df3:	43                   	inc    ebx
c0006df4:	e8 a6 8d 00 00       	call   c000fb9f <free>
c0006df9:	83 c4 10             	add    esp,0x10
c0006dfc:	83 fb 10             	cmp    ebx,0x10
c0006dff:	75 db                	jne    c0006ddc <fs_iso9660_shutdown+0x6>
c0006e01:	a1 b0 9e 02 c0       	mov    eax,ds:0xc0029eb0
c0006e06:	85 c0                	test   eax,eax
c0006e08:	74 0c                	je     c0006e16 <fs_iso9660_shutdown+0x40>
c0006e0a:	83 ec 0c             	sub    esp,0xc
c0006e0d:	50                   	push   eax
c0006e0e:	e8 8c 8d 00 00       	call   c000fb9f <free>
c0006e13:	83 c4 10             	add    esp,0x10
c0006e16:	a1 20 95 02 c0       	mov    eax,ds:0xc0029520
c0006e1b:	85 c0                	test   eax,eax
c0006e1d:	74 0c                	je     c0006e2b <fs_iso9660_shutdown+0x55>
c0006e1f:	83 ec 0c             	sub    esp,0xc
c0006e22:	50                   	push   eax
c0006e23:	e8 77 8d 00 00       	call   c000fb9f <free>
c0006e28:	83 c4 10             	add    esp,0x10
c0006e2b:	c7 05 20 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029520,0x0
c0006e35:	c7 05 b0 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029eb0,0x0
c0006e3f:	31 c0                	xor    eax,eax
c0006e41:	83 c4 08             	add    esp,0x8
c0006e44:	5b                   	pop    ebx
c0006e45:	c3                   	ret    

c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e46:	55                   	push   ebp
c0006e47:	57                   	push   edi
c0006e48:	56                   	push   esi
c0006e49:	be 10 31 02 c0       	mov    esi,0xc0023110
c0006e4e:	53                   	push   ebx
c0006e4f:	83 ec 20             	sub    esp,0x20
c0006e52:	a0 0f 31 02 c0       	mov    al,ds:0xc002310f
c0006e57:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0006e5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0006e5f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0006e63:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0006e67:	b8 10 00 00 00       	mov    eax,0x10
c0006e6c:	f7 c7 02 00 00 00    	test   edi,0x2
c0006e72:	75 60                	jne    c0006ed4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0006e74:	89 c1                	mov    ecx,eax
c0006e76:	c1 e9 02             	shr    ecx,0x2
c0006e79:	fc                   	cld    
c0006e7a:	31 d2                	xor    edx,edx
c0006e7c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0006e7e:	a8 02                	test   al,0x2
c0006e80:	74 0b                	je     c0006e8d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c0006e82:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006e85:	66 89 17             	mov    WORD PTR [edi],dx
c0006e88:	ba 02 00 00 00       	mov    edx,0x2
c0006e8d:	a8 01                	test   al,0x1
c0006e8f:	74 06                	je     c0006e97 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c0006e91:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0006e94:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0006e97:	89 ee                	mov    esi,ebp
c0006e99:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006e9d:	eb 02                	jmp    c0006ea1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c0006e9f:	89 c6                	mov    esi,eax
c0006ea1:	31 d2                	xor    edx,edx
c0006ea3:	83 c1 01             	add    ecx,0x1
c0006ea6:	89 f0                	mov    eax,esi
c0006ea8:	f7 f3                	div    ebx
c0006eaa:	39 de                	cmp    esi,ebx
c0006eac:	73 f1                	jae    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c0006eae:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0006eb1:	eb 02                	jmp    c0006eb5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c0006eb3:	89 c5                	mov    ebp,eax
c0006eb5:	31 d2                	xor    edx,edx
c0006eb7:	83 e9 01             	sub    ecx,0x1
c0006eba:	89 e8                	mov    eax,ebp
c0006ebc:	f7 f3                	div    ebx
c0006ebe:	39 dd                	cmp    ebp,ebx
c0006ec0:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec4:	88 11                	mov    BYTE PTR [ecx],dl
c0006ec6:	73 eb                	jae    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c0006ec8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0006ecc:	83 c4 20             	add    esp,0x20
c0006ecf:	5b                   	pop    ebx
c0006ed0:	5e                   	pop    esi
c0006ed1:	5f                   	pop    edi
c0006ed2:	5d                   	pop    ebp
c0006ed3:	c3                   	ret    
c0006ed4:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006ed7:	83 c7 02             	add    edi,0x2
c0006eda:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c0006ede:	83 c6 02             	add    esi,0x2
c0006ee1:	83 e8 02             	sub    eax,0x2
c0006ee4:	eb 8e                	jmp    c0006e74 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c0006ee6 <Dbg::logc(char)>:
c0006ee6:	53                   	push   ebx
c0006ee7:	83 ec 14             	sub    esp,0x14
c0006eea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006eee:	6a 10                	push   0x10
c0006ef0:	e8 e7 63 00 00       	call   c000d2dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006ef5:	83 c4 10             	add    esp,0x10
c0006ef8:	84 c0                	test   al,al
c0006efa:	75 12                	jne    c0006f0e <Dbg::logc(char)+0x28>
c0006efc:	ba fd 03 00 00       	mov    edx,0x3fd
c0006f01:	ec                   	in     al,dx
c0006f02:	a8 20                	test   al,0x20
c0006f04:	74 fb                	je     c0006f01 <Dbg::logc(char)+0x1b>
c0006f06:	ba f8 03 00 00       	mov    edx,0x3f8
c0006f0b:	88 d8                	mov    al,bl
c0006f0d:	ee                   	out    dx,al
c0006f0e:	83 c4 08             	add    esp,0x8
c0006f11:	5b                   	pop    ebx
c0006f12:	c3                   	ret    

c0006f13 <Dbg::logs(char*)>:
c0006f13:	53                   	push   ebx
c0006f14:	83 ec 08             	sub    esp,0x8
c0006f17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006f1b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1e:	85 c0                	test   eax,eax
c0006f20:	74 16                	je     c0006f38 <Dbg::logs(char*)+0x25>
c0006f22:	83 ec 0c             	sub    esp,0xc
c0006f25:	83 c3 01             	add    ebx,0x1
c0006f28:	50                   	push   eax
c0006f29:	e8 b8 ff ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006f2e:	83 c4 10             	add    esp,0x10
c0006f31:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f34:	85 c0                	test   eax,eax
c0006f36:	75 ea                	jne    c0006f22 <Dbg::logs(char*)+0xf>
c0006f38:	83 c4 08             	add    esp,0x8
c0006f3b:	5b                   	pop    ebx
c0006f3c:	c3                   	ret    

c0006f3d <Dbg::logWriteInt(unsigned int)>:
c0006f3d:	83 ec 1c             	sub    esp,0x1c
c0006f40:	6a 0a                	push   0xa
c0006f42:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f46:	50                   	push   eax
c0006f47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006f4b:	50                   	push   eax
c0006f4c:	e8 f5 fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f51:	50                   	push   eax
c0006f52:	e8 bc ff ff ff       	call   c0006f13 <Dbg::logs(char*)>
c0006f57:	83 c4 2c             	add    esp,0x2c
c0006f5a:	c3                   	ret    

c0006f5b <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f5b:	83 ec 1c             	sub    esp,0x1c
c0006f5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006f62:	50                   	push   eax
c0006f63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f67:	50                   	push   eax
c0006f68:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0006f6c:	52                   	push   edx
c0006f6d:	e8 d4 fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f72:	50                   	push   eax
c0006f73:	e8 9b ff ff ff       	call   c0006f13 <Dbg::logs(char*)>
c0006f78:	83 c4 2c             	add    esp,0x2c
c0006f7b:	c3                   	ret    

c0006f7c <Dbg::kprintf(char const*, ...)>:
c0006f7c:	55                   	push   ebp
c0006f7d:	57                   	push   edi
c0006f7e:	56                   	push   esi
c0006f7f:	53                   	push   ebx
c0006f80:	83 ec 1c             	sub    esp,0x1c
c0006f83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006f87:	85 db                	test   ebx,ebx
c0006f89:	0f 84 4c 01 00 00    	je     c00070db <Dbg::kprintf(char const*, ...)+0x15f>
c0006f8f:	83 ec 0c             	sub    esp,0xc
c0006f92:	6a 10                	push   0x10
c0006f94:	e8 43 63 00 00       	call   c000d2dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006f99:	83 c4 10             	add    esp,0x10
c0006f9c:	84 c0                	test   al,al
c0006f9e:	74 08                	je     c0006fa8 <Dbg::kprintf(char const*, ...)+0x2c>
c0006fa0:	83 c4 1c             	add    esp,0x1c
c0006fa3:	5b                   	pop    ebx
c0006fa4:	5e                   	pop    esi
c0006fa5:	5f                   	pop    edi
c0006fa6:	5d                   	pop    ebp
c0006fa7:	c3                   	ret    
c0006fa8:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006fac:	31 ff                	xor    edi,edi
c0006fae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006fb2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006fb5:	85 c0                	test   eax,eax
c0006fb7:	74 e7                	je     c0006fa0 <Dbg::kprintf(char const*, ...)+0x24>
c0006fb9:	8d 77 01             	lea    esi,[edi+0x1]
c0006fbc:	83 f8 25             	cmp    eax,0x25
c0006fbf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fc2:	75 4c                	jne    c0007010 <Dbg::kprintf(char const*, ...)+0x94>
c0006fc4:	83 c7 02             	add    edi,0x2
c0006fc7:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fca:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fcd:	83 e8 25             	sub    eax,0x25
c0006fd0:	0f b6 c0             	movzx  eax,al
c0006fd3:	83 f8 53             	cmp    eax,0x53
c0006fd6:	0f 87 e1 00 00 00    	ja     c00070bd <Dbg::kprintf(char const*, ...)+0x141>
c0006fdc:	ff 24 85 58 31 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdcea8]
c0006fe3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006fe7:	83 ec 0c             	sub    esp,0xc
c0006fea:	89 c8                	mov    eax,ecx
c0006fec:	83 c1 04             	add    ecx,0x4
c0006fef:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006ff3:	8b 00                	mov    eax,DWORD PTR [eax]
c0006ff5:	50                   	push   eax
c0006ff6:	e8 42 ff ff ff       	call   c0006f3d <Dbg::logWriteInt(unsigned int)>
c0006ffb:	83 c4 10             	add    esp,0x10
c0006ffe:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007001:	85 c0                	test   eax,eax
c0007003:	74 9b                	je     c0006fa0 <Dbg::kprintf(char const*, ...)+0x24>
c0007005:	8d 77 01             	lea    esi,[edi+0x1]
c0007008:	83 f8 25             	cmp    eax,0x25
c000700b:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000700e:	74 b4                	je     c0006fc4 <Dbg::kprintf(char const*, ...)+0x48>
c0007010:	83 ec 0c             	sub    esp,0xc
c0007013:	89 f7                	mov    edi,esi
c0007015:	50                   	push   eax
c0007016:	89 ee                	mov    esi,ebp
c0007018:	e8 c9 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c000701d:	83 c4 10             	add    esp,0x10
c0007020:	eb dc                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c0007022:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007026:	83 ec 0c             	sub    esp,0xc
c0007029:	89 c8                	mov    eax,ecx
c000702b:	83 c1 04             	add    ecx,0x4
c000702e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0007030:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007034:	55                   	push   ebp
c0007035:	e8 d9 fe ff ff       	call   c0006f13 <Dbg::logs(char*)>
c000703a:	83 c4 10             	add    esp,0x10
c000703d:	eb bf                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000703f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	89 d0                	mov    eax,edx
c0007048:	83 c2 04             	add    edx,0x4
c000704b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000704f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007051:	51                   	push   ecx
c0007052:	e8 e6 fe ff ff       	call   c0006f3d <Dbg::logWriteInt(unsigned int)>
c0007057:	83 c4 10             	add    esp,0x10
c000705a:	eb a2                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000705c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007060:	83 ec 0c             	sub    esp,0xc
c0007063:	89 d0                	mov    eax,edx
c0007065:	83 c2 04             	add    edx,0x4
c0007068:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000706b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000706f:	50                   	push   eax
c0007070:	e8 71 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007075:	83 c4 10             	add    esp,0x10
c0007078:	eb 84                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000707a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000707e:	89 c8                	mov    eax,ecx
c0007080:	83 c1 04             	add    ecx,0x4
c0007083:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007087:	83 ec 08             	sub    esp,0x8
c000708a:	6a 10                	push   0x10
c000708c:	8b 10                	mov    edx,DWORD PTR [eax]
c000708e:	52                   	push   edx
c000708f:	e8 c7 fe ff ff       	call   c0006f5b <Dbg::logWriteIntBase(unsigned int, int)>
c0007094:	83 c4 10             	add    esp,0x10
c0007097:	e9 62 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000709c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00070a0:	89 d0                	mov    eax,edx
c00070a2:	83 c2 08             	add    edx,0x8
c00070a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a9:	eb dc                	jmp    c0007087 <Dbg::kprintf(char const*, ...)+0x10b>
c00070ab:	83 ec 0c             	sub    esp,0xc
c00070ae:	6a 25                	push   0x25
c00070b0:	e8 31 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070b5:	83 c4 10             	add    esp,0x10
c00070b8:	e9 41 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c00070bd:	83 ec 0c             	sub    esp,0xc
c00070c0:	6a 25                	push   0x25
c00070c2:	e8 1f fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070c7:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00070cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00070ce:	e8 13 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070d3:	83 c4 10             	add    esp,0x10
c00070d6:	e9 23 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c00070db:	83 ec 0c             	sub    esp,0xc
c00070de:	68 20 31 02 c0       	push   0xc0023120
c00070e3:	e8 94 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00070e8:	83 c4 10             	add    esp,0x10
c00070eb:	83 c4 1c             	add    esp,0x1c
c00070ee:	5b                   	pop    ebx
c00070ef:	5e                   	pop    esi
c00070f0:	5f                   	pop    edi
c00070f1:	5d                   	pop    ebp
c00070f2:	c3                   	ret    
c00070f3:	90                   	nop

c00070f4 <KiUbsanPrintDetails(char const*, void*)>:
c00070f4:	83 ec 1c             	sub    esp,0x1c
c00070f7:	83 ec 08             	sub    esp,0x8
c00070fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070fe:	68 a8 32 02 c0       	push   0xc00232a8
c0007103:	e8 74 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007108:	83 c4 10             	add    esp,0x10
c000710b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000710f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007113:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007117:	8b 00                	mov    eax,DWORD PTR [eax]
c0007119:	83 ec 08             	sub    esp,0x8
c000711c:	50                   	push   eax
c000711d:	68 bc 32 02 c0       	push   0xc00232bc
c0007122:	e8 55 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007127:	83 c4 10             	add    esp,0x10
c000712a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000712e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007131:	83 ec 08             	sub    esp,0x8
c0007134:	50                   	push   eax
c0007135:	68 c6 32 02 c0       	push   0xc00232c6
c000713a:	e8 3d fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000713f:	83 c4 10             	add    esp,0x10
c0007142:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007146:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0007149:	83 ec 08             	sub    esp,0x8
c000714c:	50                   	push   eax
c000714d:	68 d0 32 02 c0       	push   0xc00232d0
c0007152:	e8 25 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007157:	83 c4 10             	add    esp,0x10
c000715a:	90                   	nop
c000715b:	83 c4 1c             	add    esp,0x1c
c000715e:	c3                   	ret    
c000715f:	90                   	nop

c0007160 <__ubsan_handle_type_mismatch_v1>:
c0007160:	83 ec 0c             	sub    esp,0xc
c0007163:	83 ec 08             	sub    esp,0x8
c0007166:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000716a:	68 14 34 02 c0       	push   0xc0023414
c000716f:	e8 80 ff ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007174:	83 c4 10             	add    esp,0x10
c0007177:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000717c:	75 16                	jne    c0007194 <__ubsan_handle_type_mismatch_v1+0x34>
c000717e:	83 ec 0c             	sub    esp,0xc
c0007181:	68 da 32 02 c0       	push   0xc00232da
c0007186:	e8 f1 fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000718b:	83 c4 10             	add    esp,0x10
c000718e:	e9 91 00 00 00       	jmp    c0007224 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007193:	90                   	nop
c0007194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007198:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000719b:	85 c0                	test   eax,eax
c000719d:	74 29                	je     c00071c8 <__ubsan_handle_type_mismatch_v1+0x68>
c000719f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00071a6:	83 e8 01             	sub    eax,0x1
c00071a9:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00071ad:	75 19                	jne    c00071c8 <__ubsan_handle_type_mismatch_v1+0x68>
c00071af:	83 ec 08             	sub    esp,0x8
c00071b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00071b6:	68 34 34 02 c0       	push   0xc0023434
c00071bb:	e8 bc fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071c0:	83 c4 10             	add    esp,0x10
c00071c3:	eb 5f                	jmp    c0007224 <__ubsan_handle_type_mismatch_v1+0xc4>
c00071c5:	8d 76 00             	lea    esi,[esi+0x0]
c00071c8:	83 ec 0c             	sub    esp,0xc
c00071cb:	68 ef 32 02 c0       	push   0xc00232ef
c00071d0:	e8 a7 fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071d5:	83 c4 10             	add    esp,0x10
c00071d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071dc:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071df:	0f b6 c0             	movzx  eax,al
c00071e2:	83 ec 08             	sub    esp,0x8
c00071e5:	50                   	push   eax
c00071e6:	68 09 33 02 c0       	push   0xc0023309
c00071eb:	e8 8c fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071f0:	83 c4 10             	add    esp,0x10
c00071f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071fa:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007205:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007208:	0f b6 c0             	movzx  eax,al
c000720b:	8b 04 85 a0 67 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9860]
c0007212:	51                   	push   ecx
c0007213:	52                   	push   edx
c0007214:	50                   	push   eax
c0007215:	68 5c 34 02 c0       	push   0xc002345c
c000721a:	e8 5d fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	66 90                	xchg   ax,ax
c0007224:	83 ec 0c             	sub    esp,0xc
c0007227:	68 14 34 02 c0       	push   0xc0023414
c000722c:	e8 b5 8d 00 00       	call   c000ffe6 <KePanic(char const*)>
c0007231:	83 c4 10             	add    esp,0x10
c0007234:	90                   	nop
c0007235:	83 c4 0c             	add    esp,0xc
c0007238:	c3                   	ret    
c0007239:	8d 76 00             	lea    esi,[esi+0x0]

c000723c <__ubsan_handle_pointer_overflow>:
c000723c:	83 ec 0c             	sub    esp,0xc
c000723f:	83 ec 08             	sub    esp,0x8
c0007242:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007246:	68 a4 34 02 c0       	push   0xc00234a4
c000724b:	e8 a4 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007250:	83 c4 10             	add    esp,0x10
c0007253:	83 ec 0c             	sub    esp,0xc
c0007256:	68 a4 34 02 c0       	push   0xc00234a4
c000725b:	e8 86 8d 00 00       	call   c000ffe6 <KePanic(char const*)>
c0007260:	83 c4 10             	add    esp,0x10
c0007263:	90                   	nop
c0007264:	83 c4 0c             	add    esp,0xc
c0007267:	c3                   	ret    

c0007268 <__ubsan_handle_out_of_bounds>:
c0007268:	83 ec 0c             	sub    esp,0xc
c000726b:	83 ec 08             	sub    esp,0x8
c000726e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007272:	68 14 33 02 c0       	push   0xc0023314
c0007277:	e8 78 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c000727c:	83 c4 10             	add    esp,0x10
c000727f:	83 ec 0c             	sub    esp,0xc
c0007282:	68 14 33 02 c0       	push   0xc0023314
c0007287:	e8 5a 8d 00 00       	call   c000ffe6 <KePanic(char const*)>
c000728c:	83 c4 10             	add    esp,0x10
c000728f:	90                   	nop
c0007290:	83 c4 0c             	add    esp,0xc
c0007293:	c3                   	ret    

c0007294 <__ubsan_handle_add_overflow>:
c0007294:	83 ec 0c             	sub    esp,0xc
c0007297:	83 ec 08             	sub    esp,0x8
c000729a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000729e:	68 31 33 02 c0       	push   0xc0023331
c00072a3:	e8 4c fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	83 ec 0c             	sub    esp,0xc
c00072ae:	68 31 33 02 c0       	push   0xc0023331
c00072b3:	e8 2e 8d 00 00       	call   c000ffe6 <KePanic(char const*)>
c00072b8:	83 c4 10             	add    esp,0x10
c00072bb:	90                   	nop
c00072bc:	83 c4 0c             	add    esp,0xc
c00072bf:	c3                   	ret    

c00072c0 <__ubsan_handle_load_invalid_value>:
c00072c0:	83 ec 0c             	sub    esp,0xc
c00072c3:	83 ec 08             	sub    esp,0x8
c00072c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072ca:	68 c4 34 02 c0       	push   0xc00234c4
c00072cf:	e8 20 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00072d4:	83 c4 10             	add    esp,0x10
c00072d7:	83 ec 0c             	sub    esp,0xc
c00072da:	68 c4 34 02 c0       	push   0xc00234c4
c00072df:	e8 02 8d 00 00       	call   c000ffe6 <KePanic(char const*)>
c00072e4:	83 c4 10             	add    esp,0x10
c00072e7:	90                   	nop
c00072e8:	83 c4 0c             	add    esp,0xc
c00072eb:	c3                   	ret    

c00072ec <__ubsan_handle_divrem_overflow>:
c00072ec:	83 ec 0c             	sub    esp,0xc
c00072ef:	83 ec 08             	sub    esp,0x8
c00072f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072f6:	68 e8 34 02 c0       	push   0xc00234e8
c00072fb:	e8 f4 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007300:	83 c4 10             	add    esp,0x10
c0007303:	83 ec 0c             	sub    esp,0xc
c0007306:	68 e8 34 02 c0       	push   0xc00234e8
c000730b:	e8 d6 8c 00 00       	call   c000ffe6 <KePanic(char const*)>
c0007310:	83 c4 10             	add    esp,0x10
c0007313:	90                   	nop
c0007314:	83 c4 0c             	add    esp,0xc
c0007317:	c3                   	ret    

c0007318 <__ubsan_handle_mul_overflow>:
c0007318:	83 ec 0c             	sub    esp,0xc
c000731b:	83 ec 08             	sub    esp,0x8
c000731e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007322:	68 4d 33 02 c0       	push   0xc002334d
c0007327:	e8 c8 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c000732c:	83 c4 10             	add    esp,0x10
c000732f:	83 ec 0c             	sub    esp,0xc
c0007332:	68 4d 33 02 c0       	push   0xc002334d
c0007337:	e8 aa 8c 00 00       	call   c000ffe6 <KePanic(char const*)>
c000733c:	83 c4 10             	add    esp,0x10
c000733f:	90                   	nop
c0007340:	83 c4 0c             	add    esp,0xc
c0007343:	c3                   	ret    

c0007344 <__ubsan_handle_sub_overflow>:
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	83 ec 08             	sub    esp,0x8
c000734a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000734e:	68 69 33 02 c0       	push   0xc0023369
c0007353:	e8 9c fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007358:	83 c4 10             	add    esp,0x10
c000735b:	83 ec 0c             	sub    esp,0xc
c000735e:	68 69 33 02 c0       	push   0xc0023369
c0007363:	e8 7e 8c 00 00       	call   c000ffe6 <KePanic(char const*)>
c0007368:	83 c4 10             	add    esp,0x10
c000736b:	90                   	nop
c000736c:	83 c4 0c             	add    esp,0xc
c000736f:	c3                   	ret    

c0007370 <__ubsan_handle_shift_out_of_bounds>:
c0007370:	83 ec 0c             	sub    esp,0xc
c0007373:	83 ec 08             	sub    esp,0x8
c0007376:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000737a:	68 08 35 02 c0       	push   0xc0023508
c000737f:	e8 70 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007384:	83 c4 10             	add    esp,0x10
c0007387:	83 ec 0c             	sub    esp,0xc
c000738a:	68 08 35 02 c0       	push   0xc0023508
c000738f:	e8 52 8c 00 00       	call   c000ffe6 <KePanic(char const*)>
c0007394:	83 c4 10             	add    esp,0x10
c0007397:	90                   	nop
c0007398:	83 c4 0c             	add    esp,0xc
c000739b:	c3                   	ret    

c000739c <__ubsan_handle_negate_overflow>:
c000739c:	83 ec 0c             	sub    esp,0xc
c000739f:	83 ec 08             	sub    esp,0x8
c00073a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073a6:	68 2c 35 02 c0       	push   0xc002352c
c00073ab:	e8 44 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00073b0:	83 c4 10             	add    esp,0x10
c00073b3:	83 ec 0c             	sub    esp,0xc
c00073b6:	68 2c 35 02 c0       	push   0xc002352c
c00073bb:	e8 26 8c 00 00       	call   c000ffe6 <KePanic(char const*)>
c00073c0:	83 c4 10             	add    esp,0x10
c00073c3:	90                   	nop
c00073c4:	83 c4 0c             	add    esp,0xc
c00073c7:	c3                   	ret    

c00073c8 <KiIsHashInTable(unsigned short)>:
c00073c8:	0f b7 d0             	movzx  edx,ax
c00073cb:	83 e0 07             	and    eax,0x7
c00073ce:	c1 fa 03             	sar    edx,0x3
c00073d1:	88 c1                	mov    cl,al
c00073d3:	0f b6 92 00 a3 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd5d00]
c00073da:	d3 fa                	sar    edx,cl
c00073dc:	89 d0                	mov    eax,edx
c00073de:	83 e0 01             	and    eax,0x1
c00073e1:	c3                   	ret    

c00073e2 <KiSetHashInTable(unsigned short, bool)>:
c00073e2:	56                   	push   esi
c00073e3:	53                   	push   ebx
c00073e4:	0f b7 d8             	movzx  ebx,ax
c00073e7:	83 e0 07             	and    eax,0x7
c00073ea:	c1 fb 03             	sar    ebx,0x3
c00073ed:	89 c1                	mov    ecx,eax
c00073ef:	0f b6 b3 00 a3 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd5d00]
c00073f6:	b8 01 00 00 00       	mov    eax,0x1
c00073fb:	d3 e0                	shl    eax,cl
c00073fd:	84 d2                	test   dl,dl
c00073ff:	74 04                	je     c0007405 <KiSetHashInTable(unsigned short, bool)+0x23>
c0007401:	09 f0                	or     eax,esi
c0007403:	eb 04                	jmp    c0007409 <KiSetHashInTable(unsigned short, bool)+0x27>
c0007405:	f7 d0                	not    eax
c0007407:	21 f0                	and    eax,esi
c0007409:	88 83 00 a3 02 c0    	mov    BYTE PTR [ebx-0x3ffd5d00],al
c000740f:	5b                   	pop    ebx
c0007410:	5e                   	pop    esi
c0007411:	c3                   	ret    

c0007412 <KiFlushSymlinkChanges()>:
c0007412:	57                   	push   edi
c0007413:	56                   	push   esi
c0007414:	53                   	push   ebx
c0007415:	83 ec 1c             	sub    esp,0x1c
c0007418:	68 14 01 00 00       	push   0x114
c000741d:	e8 6d 87 00 00       	call   c000fb8f <malloc>
c0007422:	83 c4 0c             	add    esp,0xc
c0007425:	89 c3                	mov    ebx,eax
c0007427:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c000742d:	68 4b 35 02 c0       	push   0xc002354b
c0007432:	50                   	push   eax
c0007433:	e8 52 0d 00 00       	call   c000818a <File::File(char const*, Process*)>
c0007438:	83 c4 10             	add    esp,0x10
c000743b:	85 db                	test   ebx,ebx
c000743d:	75 10                	jne    c000744f <KiFlushSymlinkChanges()+0x3d>
c000743f:	83 ec 0c             	sub    esp,0xc
c0007442:	68 69 35 02 c0       	push   0xc0023569
c0007447:	e8 9a 8b 00 00       	call   c000ffe6 <KePanic(char const*)>
c000744c:	83 c4 10             	add    esp,0x10
c000744f:	50                   	push   eax
c0007450:	50                   	push   eax
c0007451:	6a 06                	push   0x6
c0007453:	53                   	push   ebx
c0007454:	e8 4f 0d 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c0007459:	83 c4 10             	add    esp,0x10
c000745c:	85 c0                	test   eax,eax
c000745e:	74 10                	je     c0007470 <KiFlushSymlinkChanges()+0x5e>
c0007460:	83 ec 0c             	sub    esp,0xc
c0007463:	68 83 35 02 c0       	push   0xc0023583
c0007468:	e8 79 8b 00 00       	call   c000ffe6 <KePanic(char const*)>
c000746d:	83 c4 10             	add    esp,0x10
c0007470:	31 f6                	xor    esi,esi
c0007472:	39 35 c0 9e 02 c0    	cmp    DWORD PTR ds:0xc0029ec0,esi
c0007478:	7e 70                	jle    c00074ea <KiFlushSymlinkChanges()+0xd8>
c000747a:	83 ec 0c             	sub    esp,0xc
c000747d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000747f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007483:	89 f0                	mov    eax,esi
c0007485:	57                   	push   edi
c0007486:	c1 e0 08             	shl    eax,0x8
c0007489:	05 00 9f 02 c0       	add    eax,0xc0029f00
c000748e:	50                   	push   eax
c000748f:	6a 00                	push   0x0
c0007491:	68 00 01 00 00       	push   0x100
c0007496:	53                   	push   ebx
c0007497:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000749a:	83 c4 20             	add    esp,0x20
c000749d:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c00074a5:	74 10                	je     c00074b7 <KiFlushSymlinkChanges()+0xa5>
c00074a7:	83 ec 0c             	sub    esp,0xc
c00074aa:	68 9d 35 02 c0       	push   0xc002359d
c00074af:	e8 32 8b 00 00       	call   c000ffe6 <KePanic(char const*)>
c00074b4:	83 c4 10             	add    esp,0x10
c00074b7:	83 ec 0c             	sub    esp,0xc
c00074ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074bc:	8d 14 f5 e0 9e 02 c0 	lea    edx,[esi*8-0x3ffd6120]
c00074c3:	57                   	push   edi
c00074c4:	52                   	push   edx
c00074c5:	6a 00                	push   0x0
c00074c7:	6a 08                	push   0x8
c00074c9:	53                   	push   ebx
c00074ca:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00074cd:	83 c4 20             	add    esp,0x20
c00074d0:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00074d5:	74 10                	je     c00074e7 <KiFlushSymlinkChanges()+0xd5>
c00074d7:	83 ec 0c             	sub    esp,0xc
c00074da:	68 b7 35 02 c0       	push   0xc00235b7
c00074df:	e8 02 8b 00 00       	call   c000ffe6 <KePanic(char const*)>
c00074e4:	83 c4 10             	add    esp,0x10
c00074e7:	46                   	inc    esi
c00074e8:	eb 88                	jmp    c0007472 <KiFlushSymlinkChanges()+0x60>
c00074ea:	83 ec 0c             	sub    esp,0xc
c00074ed:	53                   	push   ebx
c00074ee:	e8 13 0d 00 00       	call   c0008206 <File::close()>
c00074f3:	83 c4 10             	add    esp,0x10
c00074f6:	85 db                	test   ebx,ebx
c00074f8:	74 0c                	je     c0007506 <KiFlushSymlinkChanges()+0xf4>
c00074fa:	83 ec 0c             	sub    esp,0xc
c00074fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074ff:	53                   	push   ebx
c0007500:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007503:	83 c4 10             	add    esp,0x10
c0007506:	c7 05 c0 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ec0,0x0
c0007510:	83 c4 10             	add    esp,0x10
c0007513:	5b                   	pop    ebx
c0007514:	5e                   	pop    esi
c0007515:	5f                   	pop    edi
c0007516:	c3                   	ret    

c0007517 <KiDeinitialiseSymlinks(void*)>:
c0007517:	e9 f6 fe ff ff       	jmp    c0007412 <KiFlushSymlinkChanges()>

c000751c <KiGetSymlinkHash(char const*)>:
c000751c:	53                   	push   ebx
c000751d:	89 c3                	mov    ebx,eax
c000751f:	83 ec 14             	sub    esp,0x14
c0007522:	50                   	push   eax
c0007523:	e8 48 90 ff ff       	call   c0000570 <strlen>
c0007528:	5a                   	pop    edx
c0007529:	59                   	pop    ecx
c000752a:	50                   	push   eax
c000752b:	53                   	push   ebx
c000752c:	e8 64 6d 00 00       	call   c000e295 <KeCalculateCRC32(unsigned char*, int)>
c0007531:	83 c4 18             	add    esp,0x18
c0007534:	89 c2                	mov    edx,eax
c0007536:	5b                   	pop    ebx
c0007537:	c1 ea 10             	shr    edx,0x10
c000753a:	31 d0                	xor    eax,edx
c000753c:	c3                   	ret    

c000753d <KiCreateSymlinkID()>:
c000753d:	55                   	push   ebp
c000753e:	57                   	push   edi
c000753f:	56                   	push   esi
c0007540:	53                   	push   ebx
c0007541:	31 db                	xor    ebx,ebx
c0007543:	83 ec 1c             	sub    esp,0x1c
c0007546:	e8 27 95 00 00       	call   c0010a72 <KeRand()>
c000754b:	43                   	inc    ebx
c000754c:	8b 2d 00 c3 02 c0    	mov    ebp,DWORD PTR ds:0xc002c300
c0007552:	31 d2                	xor    edx,edx
c0007554:	8d 4d 01             	lea    ecx,[ebp+0x1]
c0007557:	0f a4 c2 1f          	shld   edx,eax,0x1f
c000755b:	89 0d 00 c3 02 c0    	mov    DWORD PTR ds:0xc002c300,ecx
c0007561:	c1 e0 1f             	shl    eax,0x1f
c0007564:	89 d7                	mov    edi,edx
c0007566:	89 c6                	mov    esi,eax
c0007568:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000756c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007574:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000757a:	75 10                	jne    c000758c <KiCreateSymlinkID()+0x4f>
c000757c:	83 ec 0c             	sub    esp,0xc
c000757f:	68 d1 35 02 c0       	push   0xc00235d1
c0007584:	e8 5d 8a 00 00       	call   c000ffe6 <KePanic(char const*)>
c0007589:	83 c4 10             	add    esp,0x10
c000758c:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0007590:	75 04                	jne    c0007596 <KiCreateSymlinkID()+0x59>
c0007592:	39 f5                	cmp    ebp,esi
c0007594:	74 b0                	je     c0007546 <KiCreateSymlinkID()+0x9>
c0007596:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000759e:	31 f0                	xor    eax,esi
c00075a0:	83 c4 1c             	add    esp,0x1c
c00075a3:	31 fa                	xor    edx,edi
c00075a5:	5b                   	pop    ebx
c00075a6:	5e                   	pop    esi
c00075a7:	5f                   	pop    edi
c00075a8:	5d                   	pop    ebp
c00075a9:	c3                   	ret    

c00075aa <KeRegisterSymlink(char const*, unsigned long long)>:
c00075aa:	53                   	push   ebx
c00075ab:	83 ec 0c             	sub    esp,0xc
c00075ae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00075b2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00075b6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00075ba:	a1 c0 9e 02 c0       	mov    eax,ds:0xc0029ec0
c00075bf:	68 00 01 00 00       	push   0x100
c00075c4:	89 0c c5 e4 9e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd611c],ecx
c00075cb:	6a 00                	push   0x0
c00075cd:	89 14 c5 e0 9e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6120],edx
c00075d4:	c1 e0 08             	shl    eax,0x8
c00075d7:	05 00 9f 02 c0       	add    eax,0xc0029f00
c00075dc:	50                   	push   eax
c00075dd:	e8 0e 8f ff ff       	call   c00004f0 <memset>
c00075e2:	58                   	pop    eax
c00075e3:	a1 c0 9e 02 c0       	mov    eax,ds:0xc0029ec0
c00075e8:	5a                   	pop    edx
c00075e9:	c1 e0 08             	shl    eax,0x8
c00075ec:	53                   	push   ebx
c00075ed:	05 00 9f 02 c0       	add    eax,0xc0029f00
c00075f2:	50                   	push   eax
c00075f3:	e8 48 90 ff ff       	call   c0000640 <strcpy>
c00075f8:	89 d8                	mov    eax,ebx
c00075fa:	e8 1d ff ff ff       	call   c000751c <KiGetSymlinkHash(char const*)>
c00075ff:	ba 01 00 00 00       	mov    edx,0x1
c0007604:	0f b7 c0             	movzx  eax,ax
c0007607:	e8 d6 fd ff ff       	call   c00073e2 <KiSetHashInTable(unsigned short, bool)>
c000760c:	a1 c0 9e 02 c0       	mov    eax,ds:0xc0029ec0
c0007611:	83 c4 10             	add    esp,0x10
c0007614:	40                   	inc    eax
c0007615:	a3 c0 9e 02 c0       	mov    ds:0xc0029ec0,eax
c000761a:	83 f8 03             	cmp    eax,0x3
c000761d:	7e 09                	jle    c0007628 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c000761f:	83 c4 08             	add    esp,0x8
c0007622:	5b                   	pop    ebx
c0007623:	e9 ea fd ff ff       	jmp    c0007412 <KiFlushSymlinkChanges()>
c0007628:	83 c4 08             	add    esp,0x8
c000762b:	5b                   	pop    ebx
c000762c:	c3                   	ret    

c000762d <KeInitialiseSymlinks()>:
c000762d:	57                   	push   edi
c000762e:	56                   	push   esi
c000762f:	53                   	push   ebx
c0007630:	81 ec 14 01 00 00    	sub    esp,0x114
c0007636:	c7 05 00 c3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c300,0x0
c0007640:	68 00 20 00 00       	push   0x2000
c0007645:	c7 05 c0 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ec0,0x0
c000764f:	6a 00                	push   0x0
c0007651:	68 00 a3 02 c0       	push   0xc002a300
c0007656:	e8 95 8e ff ff       	call   c00004f0 <memset>
c000765b:	59                   	pop    ecx
c000765c:	5b                   	pop    ebx
c000765d:	6a 00                	push   0x0
c000765f:	68 17 75 00 c0       	push   0xc0007517
c0007664:	e8 dc 5b 00 00       	call   c000d245 <KeRegisterAtexit(void (*)(void*), void*)>
c0007669:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0007670:	e8 1a 85 00 00       	call   c000fb8f <malloc>
c0007675:	83 c4 0c             	add    esp,0xc
c0007678:	89 c3                	mov    ebx,eax
c000767a:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c0007680:	68 4b 35 02 c0       	push   0xc002354b
c0007685:	50                   	push   eax
c0007686:	e8 ff 0a 00 00       	call   c000818a <File::File(char const*, Process*)>
c000768b:	83 c4 10             	add    esp,0x10
c000768e:	85 db                	test   ebx,ebx
c0007690:	75 10                	jne    c00076a2 <KeInitialiseSymlinks()+0x75>
c0007692:	83 ec 0c             	sub    esp,0xc
c0007695:	68 da 35 02 c0       	push   0xc00235da
c000769a:	e8 47 89 00 00       	call   c000ffe6 <KePanic(char const*)>
c000769f:	83 c4 10             	add    esp,0x10
c00076a2:	83 ec 0c             	sub    esp,0xc
c00076a5:	53                   	push   ebx
c00076a6:	e8 c1 0d 00 00       	call   c000846c <File::exists()>
c00076ab:	83 c4 10             	add    esp,0x10
c00076ae:	84 c0                	test   al,al
c00076b0:	75 3a                	jne    c00076ec <KeInitialiseSymlinks()+0xbf>
c00076b2:	52                   	push   edx
c00076b3:	52                   	push   edx
c00076b4:	6a 12                	push   0x12
c00076b6:	53                   	push   ebx
c00076b7:	e8 ec 0a 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c00076bc:	83 c4 10             	add    esp,0x10
c00076bf:	85 c0                	test   eax,eax
c00076c1:	74 10                	je     c00076d3 <KeInitialiseSymlinks()+0xa6>
c00076c3:	83 ec 0c             	sub    esp,0xc
c00076c6:	68 f7 35 02 c0       	push   0xc00235f7
c00076cb:	e8 16 89 00 00       	call   c000ffe6 <KePanic(char const*)>
c00076d0:	83 c4 10             	add    esp,0x10
c00076d3:	83 ec 0c             	sub    esp,0xc
c00076d6:	53                   	push   ebx
c00076d7:	e8 2a 0b 00 00       	call   c0008206 <File::close()>
c00076dc:	83 c4 10             	add    esp,0x10
c00076df:	85 db                	test   ebx,ebx
c00076e1:	0f 84 9e 00 00 00    	je     c0007785 <KeInitialiseSymlinks()+0x158>
c00076e7:	e9 8d 00 00 00       	jmp    c0007779 <KeInitialiseSymlinks()+0x14c>
c00076ec:	50                   	push   eax
c00076ed:	50                   	push   eax
c00076ee:	6a 01                	push   0x1
c00076f0:	53                   	push   ebx
c00076f1:	e8 b2 0a 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c00076f6:	83 c4 10             	add    esp,0x10
c00076f9:	85 c0                	test   eax,eax
c00076fb:	74 10                	je     c000770d <KeInitialiseSymlinks()+0xe0>
c00076fd:	83 ec 0c             	sub    esp,0xc
c0007700:	68 14 36 02 c0       	push   0xc0023614
c0007705:	e8 dc 88 00 00       	call   c000ffe6 <KePanic(char const*)>
c000770a:	83 c4 10             	add    esp,0x10
c000770d:	83 ec 0c             	sub    esp,0xc
c0007710:	ff 05 00 c3 02 c0    	inc    DWORD PTR ds:0xc002c300
c0007716:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000771a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000771c:	57                   	push   edi
c000771d:	8d 74 24 20          	lea    esi,[esp+0x20]
c0007721:	56                   	push   esi
c0007722:	6a 00                	push   0x0
c0007724:	68 00 01 00 00       	push   0x100
c0007729:	53                   	push   ebx
c000772a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000772d:	83 c4 20             	add    esp,0x20
c0007730:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007738:	75 33                	jne    c000776d <KeInitialiseSymlinks()+0x140>
c000773a:	83 ec 0c             	sub    esp,0xc
c000773d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000773f:	57                   	push   edi
c0007740:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007744:	52                   	push   edx
c0007745:	6a 00                	push   0x0
c0007747:	6a 08                	push   0x8
c0007749:	53                   	push   ebx
c000774a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000774d:	83 c4 20             	add    esp,0x20
c0007750:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007755:	75 16                	jne    c000776d <KeInitialiseSymlinks()+0x140>
c0007757:	89 f0                	mov    eax,esi
c0007759:	e8 be fd ff ff       	call   c000751c <KiGetSymlinkHash(char const*)>
c000775e:	ba 01 00 00 00       	mov    edx,0x1
c0007763:	0f b7 c0             	movzx  eax,ax
c0007766:	e8 77 fc ff ff       	call   c00073e2 <KiSetHashInTable(unsigned short, bool)>
c000776b:	eb a0                	jmp    c000770d <KeInitialiseSymlinks()+0xe0>
c000776d:	83 ec 0c             	sub    esp,0xc
c0007770:	53                   	push   ebx
c0007771:	e8 90 0a 00 00       	call   c0008206 <File::close()>
c0007776:	83 c4 10             	add    esp,0x10
c0007779:	83 ec 0c             	sub    esp,0xc
c000777c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000777e:	53                   	push   ebx
c000777f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007782:	83 c4 10             	add    esp,0x10
c0007785:	81 c4 10 01 00 00    	add    esp,0x110
c000778b:	5b                   	pop    ebx
c000778c:	5e                   	pop    esi
c000778d:	5f                   	pop    edi
c000778e:	c3                   	ret    

c000778f <KiIsSymlinkRegistered(char const*)>:
c000778f:	55                   	push   ebp
c0007790:	57                   	push   edi
c0007791:	56                   	push   esi
c0007792:	53                   	push   ebx
c0007793:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007799:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c00077a0:	89 f0                	mov    eax,esi
c00077a2:	e8 75 fd ff ff       	call   c000751c <KiGetSymlinkHash(char const*)>
c00077a7:	0f b7 c0             	movzx  eax,ax
c00077aa:	e8 19 fc ff ff       	call   c00073c8 <KiIsHashInTable(unsigned short)>
c00077af:	31 d2                	xor    edx,edx
c00077b1:	88 c1                	mov    cl,al
c00077b3:	31 c0                	xor    eax,eax
c00077b5:	84 c9                	test   cl,cl
c00077b7:	0f 84 31 01 00 00    	je     c00078ee <KiIsSymlinkRegistered(char const*)+0x15f>
c00077bd:	31 db                	xor    ebx,ebx
c00077bf:	39 1d c0 9e 02 c0    	cmp    DWORD PTR ds:0xc0029ec0,ebx
c00077c5:	7e 30                	jle    c00077f7 <KiIsSymlinkRegistered(char const*)+0x68>
c00077c7:	89 d8                	mov    eax,ebx
c00077c9:	51                   	push   ecx
c00077ca:	c1 e0 08             	shl    eax,0x8
c00077cd:	51                   	push   ecx
c00077ce:	05 00 9f 02 c0       	add    eax,0xc0029f00
c00077d3:	50                   	push   eax
c00077d4:	56                   	push   esi
c00077d5:	e8 76 8f ff ff       	call   c0000750 <strcmp>
c00077da:	83 c4 10             	add    esp,0x10
c00077dd:	85 c0                	test   eax,eax
c00077df:	75 13                	jne    c00077f4 <KiIsSymlinkRegistered(char const*)+0x65>
c00077e1:	8b 04 dd e0 9e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd6120]
c00077e8:	8b 14 dd e4 9e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd611c]
c00077ef:	e9 fa 00 00 00       	jmp    c00078ee <KiIsSymlinkRegistered(char const*)+0x15f>
c00077f4:	43                   	inc    ebx
c00077f5:	eb c8                	jmp    c00077bf <KiIsSymlinkRegistered(char const*)+0x30>
c00077f7:	83 ec 0c             	sub    esp,0xc
c00077fa:	68 14 01 00 00       	push   0x114
c00077ff:	e8 8b 83 00 00       	call   c000fb8f <malloc>
c0007804:	83 c4 0c             	add    esp,0xc
c0007807:	89 c3                	mov    ebx,eax
c0007809:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c000780f:	68 4b 35 02 c0       	push   0xc002354b
c0007814:	50                   	push   eax
c0007815:	e8 70 09 00 00       	call   c000818a <File::File(char const*, Process*)>
c000781a:	83 c4 10             	add    esp,0x10
c000781d:	85 db                	test   ebx,ebx
c000781f:	75 12                	jne    c0007833 <KiIsSymlinkRegistered(char const*)+0xa4>
c0007821:	83 ec 0c             	sub    esp,0xc
c0007824:	68 2f 36 02 c0       	push   0xc002362f
c0007829:	e8 b8 87 00 00       	call   c000ffe6 <KePanic(char const*)>
c000782e:	83 c4 10             	add    esp,0x10
c0007831:	eb 10                	jmp    c0007843 <KiIsSymlinkRegistered(char const*)+0xb4>
c0007833:	83 ec 0c             	sub    esp,0xc
c0007836:	53                   	push   ebx
c0007837:	e8 30 0c 00 00       	call   c000846c <File::exists()>
c000783c:	83 c4 10             	add    esp,0x10
c000783f:	84 c0                	test   al,al
c0007841:	74 de                	je     c0007821 <KiIsSymlinkRegistered(char const*)+0x92>
c0007843:	52                   	push   edx
c0007844:	52                   	push   edx
c0007845:	6a 01                	push   0x1
c0007847:	53                   	push   ebx
c0007848:	e8 5b 09 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c000784d:	83 c4 10             	add    esp,0x10
c0007850:	85 c0                	test   eax,eax
c0007852:	74 10                	je     c0007864 <KiIsSymlinkRegistered(char const*)+0xd5>
c0007854:	83 ec 0c             	sub    esp,0xc
c0007857:	68 4a 36 02 c0       	push   0xc002364a
c000785c:	e8 85 87 00 00       	call   c000ffe6 <KePanic(char const*)>
c0007861:	83 c4 10             	add    esp,0x10
c0007864:	83 ec 0c             	sub    esp,0xc
c0007867:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007869:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000786d:	55                   	push   ebp
c000786e:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0007872:	57                   	push   edi
c0007873:	6a 00                	push   0x0
c0007875:	68 00 01 00 00       	push   0x100
c000787a:	53                   	push   ebx
c000787b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000787e:	83 c4 20             	add    esp,0x20
c0007881:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007889:	75 4b                	jne    c00078d6 <KiIsSymlinkRegistered(char const*)+0x147>
c000788b:	83 ec 0c             	sub    esp,0xc
c000788e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007890:	55                   	push   ebp
c0007891:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007895:	52                   	push   edx
c0007896:	6a 00                	push   0x0
c0007898:	6a 08                	push   0x8
c000789a:	53                   	push   ebx
c000789b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000789e:	83 c4 20             	add    esp,0x20
c00078a1:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00078a6:	75 2e                	jne    c00078d6 <KiIsSymlinkRegistered(char const*)+0x147>
c00078a8:	50                   	push   eax
c00078a9:	50                   	push   eax
c00078aa:	57                   	push   edi
c00078ab:	56                   	push   esi
c00078ac:	e8 9f 8e ff ff       	call   c0000750 <strcmp>
c00078b1:	83 c4 10             	add    esp,0x10
c00078b4:	85 c0                	test   eax,eax
c00078b6:	75 ac                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0xd5>
c00078b8:	83 ec 0c             	sub    esp,0xc
c00078bb:	53                   	push   ebx
c00078bc:	e8 45 09 00 00       	call   c0008206 <File::close()>
c00078c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078c6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00078c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078cd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078d1:	83 c4 10             	add    esp,0x10
c00078d4:	eb 18                	jmp    c00078ee <KiIsSymlinkRegistered(char const*)+0x15f>
c00078d6:	83 ec 0c             	sub    esp,0xc
c00078d9:	53                   	push   ebx
c00078da:	e8 27 09 00 00       	call   c0008206 <File::close()>
c00078df:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078e4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00078e7:	83 c4 10             	add    esp,0x10
c00078ea:	31 c0                	xor    eax,eax
c00078ec:	31 d2                	xor    edx,edx
c00078ee:	81 c4 1c 01 00 00    	add    esp,0x11c
c00078f4:	5b                   	pop    ebx
c00078f5:	5e                   	pop    esi
c00078f6:	5f                   	pop    edi
c00078f7:	5d                   	pop    ebp
c00078f8:	c3                   	ret    

c00078f9 <KeDereferenceSymlink(char const*, char*)>:
c00078f9:	55                   	push   ebp
c00078fa:	57                   	push   edi
c00078fb:	56                   	push   esi
c00078fc:	53                   	push   ebx
c00078fd:	83 ec 48             	sub    esp,0x48
c0007900:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0007904:	56                   	push   esi
c0007905:	e8 85 fe ff ff       	call   c000778f <KiIsSymlinkRegistered(char const*)>
c000790a:	83 c4 10             	add    esp,0x10
c000790d:	89 c7                	mov    edi,eax
c000790f:	89 d0                	mov    eax,edx
c0007911:	09 f8                	or     eax,edi
c0007913:	75 07                	jne    c000791c <KeDereferenceSymlink(char const*, char*)+0x23>
c0007915:	31 c0                	xor    eax,eax
c0007917:	e9 7c 01 00 00       	jmp    c0007a98 <KeDereferenceSymlink(char const*, char*)+0x19f>
c000791c:	83 ec 0c             	sub    esp,0xc
c000791f:	89 d5                	mov    ebp,edx
c0007921:	68 14 01 00 00       	push   0x114
c0007926:	e8 64 82 00 00       	call   c000fb8f <malloc>
c000792b:	83 c4 0c             	add    esp,0xc
c000792e:	89 c3                	mov    ebx,eax
c0007930:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c0007936:	56                   	push   esi
c0007937:	50                   	push   eax
c0007938:	e8 4d 08 00 00       	call   c000818a <File::File(char const*, Process*)>
c000793d:	83 c4 10             	add    esp,0x10
c0007940:	85 db                	test   ebx,ebx
c0007942:	0f 84 32 01 00 00    	je     c0007a7a <KeDereferenceSymlink(char const*, char*)+0x181>
c0007948:	56                   	push   esi
c0007949:	56                   	push   esi
c000794a:	6a 01                	push   0x1
c000794c:	53                   	push   ebx
c000794d:	e8 56 08 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c0007952:	83 c4 10             	add    esp,0x10
c0007955:	85 c0                	test   eax,eax
c0007957:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007959:	74 09                	je     c0007964 <KeDereferenceSymlink(char const*, char*)+0x6b>
c000795b:	83 ec 0c             	sub    esp,0xc
c000795e:	53                   	push   ebx
c000795f:	e9 10 01 00 00       	jmp    c0007a74 <KeDereferenceSymlink(char const*, char*)+0x17b>
c0007964:	83 ec 0c             	sub    esp,0xc
c0007967:	8d 74 24 18          	lea    esi,[esp+0x18]
c000796b:	56                   	push   esi
c000796c:	8d 54 24 37          	lea    edx,[esp+0x37]
c0007970:	52                   	push   edx
c0007971:	6a 00                	push   0x0
c0007973:	6a 08                	push   0x8
c0007975:	53                   	push   ebx
c0007976:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007979:	83 c4 20             	add    esp,0x20
c000797c:	85 c0                	test   eax,eax
c000797e:	0f 85 e2 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007984:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007989:	0f 85 d7 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000798f:	83 ec 0c             	sub    esp,0xc
c0007992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007994:	56                   	push   esi
c0007995:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007999:	52                   	push   edx
c000799a:	6a 00                	push   0x0
c000799c:	6a 08                	push   0x8
c000799e:	53                   	push   ebx
c000799f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079a2:	83 c4 20             	add    esp,0x20
c00079a5:	85 c0                	test   eax,eax
c00079a7:	0f 85 b9 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079ad:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00079b2:	0f 85 ae 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079b8:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c00079bc:	0f 85 53 ff ff ff    	jne    c0007915 <KeDereferenceSymlink(char const*, char*)+0x1c>
c00079c2:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c00079c6:	0f 85 49 ff ff ff    	jne    c0007915 <KeDereferenceSymlink(char const*, char*)+0x1c>
c00079cc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00079d4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00079dc:	51                   	push   ecx
c00079dd:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00079e1:	50                   	push   eax
c00079e2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00079e6:	50                   	push   eax
c00079e7:	53                   	push   ebx
c00079e8:	e8 bd 0a 00 00       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00079ed:	83 c4 10             	add    esp,0x10
c00079f0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00079f5:	75 6f                	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079f7:	31 c9                	xor    ecx,ecx
c00079f9:	bf 0f 00 00 00       	mov    edi,0xf
c00079fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a02:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a06:	39 c7                	cmp    edi,eax
c0007a08:	89 cf                	mov    edi,ecx
c0007a0a:	19 d7                	sbb    edi,edx
c0007a0c:	73 58                	jae    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a0e:	83 c0 f0             	add    eax,0xfffffff0
c0007a11:	bf ff 00 00 00       	mov    edi,0xff
c0007a16:	83 d2 ff             	adc    edx,0xffffffff
c0007a19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007a1d:	39 c7                	cmp    edi,eax
c0007a1f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007a23:	19 d1                	sbb    ecx,edx
c0007a25:	72 53                	jb     c0007a7a <KeDereferenceSymlink(char const*, char*)+0x181>
c0007a27:	40                   	inc    eax
c0007a28:	52                   	push   edx
c0007a29:	50                   	push   eax
c0007a2a:	6a 00                	push   0x0
c0007a2c:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0007a30:	e8 bb 8a ff ff       	call   c00004f0 <memset>
c0007a35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a37:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a3a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0007a3e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a42:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a46:	53                   	push   ebx
c0007a47:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007a4a:	83 c4 20             	add    esp,0x20
c0007a4d:	85 c0                	test   eax,eax
c0007a4f:	75 15                	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a55:	89 c7                	mov    edi,eax
c0007a57:	c1 ff 1f             	sar    edi,0x1f
c0007a5a:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0007a5e:	75 06                	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a60:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0007a64:	74 19                	je     c0007a7f <KeDereferenceSymlink(char const*, char*)+0x186>
c0007a66:	83 ec 0c             	sub    esp,0xc
c0007a69:	53                   	push   ebx
c0007a6a:	e8 97 07 00 00       	call   c0008206 <File::close()>
c0007a6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a74:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a77:	83 c4 10             	add    esp,0x10
c0007a7a:	83 c8 ff             	or     eax,0xffffffff
c0007a7d:	eb 19                	jmp    c0007a98 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a7f:	83 ec 0c             	sub    esp,0xc
c0007a82:	53                   	push   ebx
c0007a83:	e8 7e 07 00 00       	call   c0008206 <File::close()>
c0007a88:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a8d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a90:	83 c4 10             	add    esp,0x10
c0007a93:	b8 01 00 00 00       	mov    eax,0x1
c0007a98:	83 c4 3c             	add    esp,0x3c
c0007a9b:	5b                   	pop    ebx
c0007a9c:	5e                   	pop    esi
c0007a9d:	5f                   	pop    edi
c0007a9e:	5d                   	pop    ebp
c0007a9f:	c3                   	ret    

c0007aa0 <KeCreateSymlink(char const*, char const*)>:
c0007aa0:	55                   	push   ebp
c0007aa1:	57                   	push   edi
c0007aa2:	56                   	push   esi
c0007aa3:	53                   	push   ebx
c0007aa4:	83 ec 38             	sub    esp,0x38
c0007aa7:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007aab:	68 14 01 00 00       	push   0x114
c0007ab0:	e8 da 80 00 00       	call   c000fb8f <malloc>
c0007ab5:	6a 00                	push   0x0
c0007ab7:	89 c3                	mov    ebx,eax
c0007ab9:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c0007abf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007ac3:	50                   	push   eax
c0007ac4:	e8 c3 05 00 00       	call   c000808c <File::File(char const*, Process*, bool)>
c0007ac9:	83 c4 20             	add    esp,0x20
c0007acc:	b8 01 00 00 00       	mov    eax,0x1
c0007ad1:	85 db                	test   ebx,ebx
c0007ad3:	0f 84 fb 00 00 00    	je     c0007bd4 <KeCreateSymlink(char const*, char const*)+0x134>
c0007ad9:	52                   	push   edx
c0007ada:	52                   	push   edx
c0007adb:	6a 12                	push   0x12
c0007add:	53                   	push   ebx
c0007ade:	e8 c5 06 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c0007ae3:	83 c4 10             	add    esp,0x10
c0007ae6:	85 c0                	test   eax,eax
c0007ae8:	74 0b                	je     c0007af5 <KeCreateSymlink(char const*, char const*)+0x55>
c0007aea:	83 ec 0c             	sub    esp,0xc
c0007aed:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007aef:	53                   	push   ebx
c0007af0:	e9 d4 00 00 00       	jmp    c0007bc9 <KeCreateSymlink(char const*, char const*)+0x129>
c0007af5:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007af9:	be 65 36 02 c0       	mov    esi,0xc0023665
c0007afe:	b9 09 00 00 00       	mov    ecx,0x9
c0007b03:	fc                   	cld    
c0007b04:	83 ec 0c             	sub    esp,0xc
c0007b07:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007b09:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007b0d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b0f:	56                   	push   esi
c0007b10:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007b14:	52                   	push   edx
c0007b15:	6a 00                	push   0x0
c0007b17:	6a 08                	push   0x8
c0007b19:	53                   	push   ebx
c0007b1a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007b1d:	83 c4 20             	add    esp,0x20
c0007b20:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b25:	0f 85 90 00 00 00    	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b2b:	85 c0                	test   eax,eax
c0007b2d:	0f 85 88 00 00 00    	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b33:	e8 05 fa ff ff       	call   c000753d <KiCreateSymlinkID()>
c0007b38:	83 ec 0c             	sub    esp,0xc
c0007b3b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007b3f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007b43:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b45:	56                   	push   esi
c0007b46:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007b4a:	52                   	push   edx
c0007b4b:	6a 00                	push   0x0
c0007b4d:	6a 08                	push   0x8
c0007b4f:	53                   	push   ebx
c0007b50:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007b53:	83 c4 20             	add    esp,0x20
c0007b56:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b5b:	75 5e                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b5d:	85 c0                	test   eax,eax
c0007b5f:	75 5a                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b61:	83 ec 0c             	sub    esp,0xc
c0007b64:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b66:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007b69:	55                   	push   ebp
c0007b6a:	e8 01 8a ff ff       	call   c0000570 <strlen>
c0007b6f:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b72:	31 d2                	xor    edx,edx
c0007b74:	55                   	push   ebp
c0007b75:	52                   	push   edx
c0007b76:	50                   	push   eax
c0007b77:	53                   	push   ebx
c0007b78:	ff d7                	call   edi
c0007b7a:	83 c4 14             	add    esp,0x14
c0007b7d:	89 c6                	mov    esi,eax
c0007b7f:	55                   	push   ebp
c0007b80:	e8 eb 89 ff ff       	call   c0000570 <strlen>
c0007b85:	83 c4 10             	add    esp,0x10
c0007b88:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b8c:	75 2d                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b8e:	85 f6                	test   esi,esi
c0007b90:	75 29                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b92:	50                   	push   eax
c0007b93:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b97:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b9b:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b9f:	e8 06 fa ff ff       	call   c00075aa <KeRegisterSymlink(char const*, unsigned long long)>
c0007ba4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007ba7:	e8 5a 06 00 00       	call   c0008206 <File::close()>
c0007bac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007bae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007bb1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007bb4:	83 c4 10             	add    esp,0x10
c0007bb7:	31 c0                	xor    eax,eax
c0007bb9:	eb 19                	jmp    c0007bd4 <KeCreateSymlink(char const*, char const*)+0x134>
c0007bbb:	83 ec 0c             	sub    esp,0xc
c0007bbe:	53                   	push   ebx
c0007bbf:	e8 42 06 00 00       	call   c0008206 <File::close()>
c0007bc4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007bc6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007bc9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007bcc:	83 c4 10             	add    esp,0x10
c0007bcf:	b8 01 00 00 00       	mov    eax,0x1
c0007bd4:	83 c4 2c             	add    esp,0x2c
c0007bd7:	5b                   	pop    ebx
c0007bd8:	5e                   	pop    esi
c0007bd9:	5f                   	pop    edi
c0007bda:	5d                   	pop    ebp
c0007bdb:	c3                   	ret    

c0007bdc <File::read(unsigned long long, void*, int*)>:
c0007bdc:	53                   	push   ebx
c0007bdd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007be1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007be5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bec:	83 f8 19             	cmp    eax,0x19
c0007bef:	77 35                	ja     c0007c26 <File::read(unsigned long long, void*, int*)+0x4a>
c0007bf1:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0007bf8:	85 c0                	test   eax,eax
c0007bfa:	74 2a                	je     c0007c26 <File::read(unsigned long long, void*, int*)+0x4a>
c0007bfc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c02:	85 c0                	test   eax,eax
c0007c04:	74 20                	je     c0007c26 <File::read(unsigned long long, void*, int*)+0x4a>
c0007c06:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c0a:	74 21                	je     c0007c2d <File::read(unsigned long long, void*, int*)+0x51>
c0007c0c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c0e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c12:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c20:	5b                   	pop    ebx
c0007c21:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007c24:	ff e0                	jmp    eax
c0007c26:	b8 0b 00 00 00       	mov    eax,0xb
c0007c2b:	eb 05                	jmp    c0007c32 <File::read(unsigned long long, void*, int*)+0x56>
c0007c2d:	b8 05 00 00 00       	mov    eax,0x5
c0007c32:	5b                   	pop    ebx
c0007c33:	c3                   	ret    

c0007c34 <File::write(unsigned long long, void*, int*)>:
c0007c34:	53                   	push   ebx
c0007c35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c3d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c44:	83 f8 19             	cmp    eax,0x19
c0007c47:	77 35                	ja     c0007c7e <File::write(unsigned long long, void*, int*)+0x4a>
c0007c49:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0007c50:	85 c0                	test   eax,eax
c0007c52:	74 2a                	je     c0007c7e <File::write(unsigned long long, void*, int*)+0x4a>
c0007c54:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c5a:	85 c0                	test   eax,eax
c0007c5c:	74 20                	je     c0007c7e <File::write(unsigned long long, void*, int*)+0x4a>
c0007c5e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c62:	74 21                	je     c0007c85 <File::write(unsigned long long, void*, int*)+0x51>
c0007c64:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c66:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c6a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c78:	5b                   	pop    ebx
c0007c79:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c7c:	ff e0                	jmp    eax
c0007c7e:	b8 0b 00 00 00       	mov    eax,0xb
c0007c83:	eb 05                	jmp    c0007c8a <File::write(unsigned long long, void*, int*)+0x56>
c0007c85:	b8 05 00 00 00       	mov    eax,0x5
c0007c8a:	5b                   	pop    ebx
c0007c8b:	c3                   	ret    

c0007c8c <Directory::read(unsigned long long, void*, int*)>:
c0007c8c:	53                   	push   ebx
c0007c8d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c91:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c95:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c9c:	83 f8 19             	cmp    eax,0x19
c0007c9f:	77 35                	ja     c0007cd6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007ca1:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0007ca8:	85 c0                	test   eax,eax
c0007caa:	74 2a                	je     c0007cd6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007cac:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007cb2:	85 c0                	test   eax,eax
c0007cb4:	74 20                	je     c0007cd6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007cb6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007cba:	74 21                	je     c0007cdd <Directory::read(unsigned long long, void*, int*)+0x51>
c0007cbc:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007cbe:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007cc2:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007cc8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ccc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007cd0:	5b                   	pop    ebx
c0007cd1:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007cd4:	ff e0                	jmp    eax
c0007cd6:	b8 0b 00 00 00       	mov    eax,0xb
c0007cdb:	eb 05                	jmp    c0007ce2 <Directory::read(unsigned long long, void*, int*)+0x56>
c0007cdd:	b8 05 00 00 00       	mov    eax,0x5
c0007ce2:	5b                   	pop    ebx
c0007ce3:	c3                   	ret    

c0007ce4 <Directory::write(unsigned long long, void*, int*)>:
c0007ce4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ce8:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007cef:	b8 0b 00 00 00       	mov    eax,0xb
c0007cf4:	83 fa 19             	cmp    edx,0x19
c0007cf7:	77 18                	ja     c0007d11 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007cf9:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c0007d00:	85 d2                	test   edx,edx
c0007d02:	74 0d                	je     c0007d11 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007d04:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007d0b:	19 c0                	sbb    eax,eax
c0007d0d:	83 e0 0a             	and    eax,0xa
c0007d10:	40                   	inc    eax
c0007d11:	c3                   	ret    

c0007d12 <File::isAtty()>:
c0007d12:	31 c0                	xor    eax,eax
c0007d14:	c3                   	ret    
c0007d15:	90                   	nop

c0007d16 <Directory::isAtty()>:
c0007d16:	31 c0                	xor    eax,eax
c0007d18:	c3                   	ret    
c0007d19:	90                   	nop

c0007d1a <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007d1a:	b8 0a 00 00 00       	mov    eax,0xa
c0007d1f:	c3                   	ret    

c0007d20 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007d20:	b8 0a 00 00 00       	mov    eax,0xa
c0007d25:	c3                   	ret    

c0007d26 <Filesystem::allocateSwapfile(char const*, int)>:
c0007d26:	31 c0                	xor    eax,eax
c0007d28:	31 d2                	xor    edx,edx
c0007d2a:	c3                   	ret    
c0007d2b:	90                   	nop

c0007d2c <File::~File()>:
c0007d2c:	83 ec 0c             	sub    esp,0xc
c0007d2f:	ba 3c 37 02 c0       	mov    edx,0xc002373c
c0007d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d38:	89 10                	mov    DWORD PTR [eax],edx
c0007d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d3e:	83 ec 0c             	sub    esp,0xc
c0007d41:	50                   	push   eax
c0007d42:	e8 e7 b5 00 00       	call   c001332e <UnixFile::~UnixFile()>
c0007d47:	83 c4 10             	add    esp,0x10
c0007d4a:	90                   	nop
c0007d4b:	83 c4 0c             	add    esp,0xc
c0007d4e:	c3                   	ret    
c0007d4f:	90                   	nop

c0007d50 <File::~File()>:
c0007d50:	83 ec 0c             	sub    esp,0xc
c0007d53:	83 ec 0c             	sub    esp,0xc
c0007d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d5a:	e8 cd ff ff ff       	call   c0007d2c <File::~File()>
c0007d5f:	83 c4 10             	add    esp,0x10
c0007d62:	83 ec 08             	sub    esp,0x8
c0007d65:	68 14 01 00 00       	push   0x114
c0007d6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d6e:	e8 76 56 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0007d73:	83 c4 10             	add    esp,0x10
c0007d76:	83 c4 0c             	add    esp,0xc
c0007d79:	c3                   	ret    

c0007d7a <Directory::~Directory()>:
c0007d7a:	83 ec 0c             	sub    esp,0xc
c0007d7d:	ba 58 37 02 c0       	mov    edx,0xc0023758
c0007d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d86:	89 10                	mov    DWORD PTR [eax],edx
c0007d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d8c:	83 ec 0c             	sub    esp,0xc
c0007d8f:	50                   	push   eax
c0007d90:	e8 99 b5 00 00       	call   c001332e <UnixFile::~UnixFile()>
c0007d95:	83 c4 10             	add    esp,0x10
c0007d98:	90                   	nop
c0007d99:	83 c4 0c             	add    esp,0xc
c0007d9c:	c3                   	ret    
c0007d9d:	90                   	nop

c0007d9e <Directory::~Directory()>:
c0007d9e:	83 ec 0c             	sub    esp,0xc
c0007da1:	83 ec 0c             	sub    esp,0xc
c0007da4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007da8:	e8 cd ff ff ff       	call   c0007d7a <Directory::~Directory()>
c0007dad:	83 c4 10             	add    esp,0x10
c0007db0:	83 ec 08             	sub    esp,0x8
c0007db3:	68 14 01 00 00       	push   0x114
c0007db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dbc:	e8 28 56 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0007dc1:	83 c4 10             	add    esp,0x10
c0007dc4:	83 c4 0c             	add    esp,0xc
c0007dc7:	c3                   	ret    

c0007dc8 <Filesystem::Filesystem()>:
c0007dc8:	ba d0 36 02 c0       	mov    edx,0xc00236d0
c0007dcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dd1:	89 10                	mov    DWORD PTR [eax],edx
c0007dd3:	8b 15 04 c3 02 c0    	mov    edx,DWORD PTR ds:0xc002c304
c0007dd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ddd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007de0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007de4:	a3 04 c3 02 c0       	mov    ds:0xc002c304,eax
c0007de9:	90                   	nop
c0007dea:	c3                   	ret    
c0007deb:	90                   	nop

c0007dec <Filesystem::~Filesystem()>:
c0007dec:	ba d0 36 02 c0       	mov    edx,0xc00236d0
c0007df1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007df5:	89 10                	mov    DWORD PTR [eax],edx
c0007df7:	90                   	nop
c0007df8:	c3                   	ret    
c0007df9:	90                   	nop

c0007dfa <Filesystem::~Filesystem()>:
c0007dfa:	83 ec 0c             	sub    esp,0xc
c0007dfd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007e01:	e8 e6 ff ff ff       	call   c0007dec <Filesystem::~Filesystem()>
c0007e06:	83 c4 04             	add    esp,0x4
c0007e09:	83 ec 08             	sub    esp,0x8
c0007e0c:	6a 08                	push   0x8
c0007e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e12:	e8 d2 55 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0007e17:	83 c4 10             	add    esp,0x10
c0007e1a:	83 c4 0c             	add    esp,0xc
c0007e1d:	c3                   	ret    

c0007e1e <Fs::getcwd(Process*, char*, int)>:
c0007e1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007e22:	31 c0                	xor    eax,eax
c0007e24:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007e27:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007e2b:	7d 15                	jge    c0007e42 <Fs::getcwd(Process*, char*, int)+0x24>
c0007e2d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007e31:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007e38:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007e3b:	84 c9                	test   cl,cl
c0007e3d:	74 06                	je     c0007e45 <Fs::getcwd(Process*, char*, int)+0x27>
c0007e3f:	40                   	inc    eax
c0007e40:	eb e2                	jmp    c0007e24 <Fs::getcwd(Process*, char*, int)+0x6>
c0007e42:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007e45:	31 c0                	xor    eax,eax
c0007e47:	c3                   	ret    

c0007e48 <Fs::initVFS()>:
c0007e48:	83 ec 18             	sub    esp,0x18
c0007e4b:	6a 08                	push   0x8
c0007e4d:	e8 3d 7d 00 00       	call   c000fb8f <malloc>
c0007e52:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e55:	e8 e6 49 01 00       	call   c001c840 <FAT::FAT()>
c0007e5a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007e61:	e8 29 7d 00 00       	call   c000fb8f <malloc>
c0007e66:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e69:	e8 fe 58 01 00       	call   c001d76c <ISO9660::ISO9660()>
c0007e6e:	83 c4 1c             	add    esp,0x1c
c0007e71:	c3                   	ret    

c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e72:	55                   	push   ebp
c0007e73:	57                   	push   edi
c0007e74:	56                   	push   esi
c0007e75:	53                   	push   ebx
c0007e76:	81 ec 10 04 00 00    	sub    esp,0x410
c0007e7c:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c0007e83:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c0007e8a:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c0007e92:	68 00 04 00 00       	push   0x400
c0007e97:	6a 00                	push   0x0
c0007e99:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0007e9d:	57                   	push   edi
c0007e9e:	e8 4d 86 ff ff       	call   c00004f0 <memset>
c0007ea3:	83 c4 10             	add    esp,0x10
c0007ea6:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c0007eaa:	75 0b                	jne    c0007eb7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c0007eac:	50                   	push   eax
c0007ead:	50                   	push   eax
c0007eae:	55                   	push   ebp
c0007eaf:	57                   	push   edi
c0007eb0:	e8 8b 87 ff ff       	call   c0000640 <strcpy>
c0007eb5:	eb 51                	jmp    c0007f08 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c0007eb7:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007ebb:	83 f8 5c             	cmp    eax,0x5c
c0007ebe:	74 05                	je     c0007ec5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c0007ec0:	83 f8 2f             	cmp    eax,0x2f
c0007ec3:	75 1e                	jne    c0007ee3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c0007ec5:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0007ecc:	8a 00                	mov    al,BYTE PTR [eax]
c0007ece:	3c 60                	cmp    al,0x60
c0007ed0:	7e 03                	jle    c0007ed5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c0007ed2:	83 e8 20             	sub    eax,0x20
c0007ed5:	88 04 24             	mov    BYTE PTR [esp],al
c0007ed8:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007edf:	50                   	push   eax
c0007ee0:	50                   	push   eax
c0007ee1:	eb 1e                	jmp    c0007f01 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c0007ee3:	50                   	push   eax
c0007ee4:	50                   	push   eax
c0007ee5:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c0007eec:	57                   	push   edi
c0007eed:	e8 4e 87 ff ff       	call   c0000640 <strcpy>
c0007ef2:	58                   	pop    eax
c0007ef3:	5a                   	pop    edx
c0007ef4:	68 4c 53 02 c0       	push   0xc002534c
c0007ef9:	57                   	push   edi
c0007efa:	e8 41 89 ff ff       	call   c0000840 <strcat>
c0007eff:	59                   	pop    ecx
c0007f00:	58                   	pop    eax
c0007f01:	55                   	push   ebp
c0007f02:	57                   	push   edi
c0007f03:	e8 38 89 ff ff       	call   c0000840 <strcat>
c0007f08:	83 c4 10             	add    esp,0x10
c0007f0b:	8a 04 24             	mov    al,BYTE PTR [esp]
c0007f0e:	3c 60                	cmp    al,0x60
c0007f10:	7e 03                	jle    c0007f15 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c0007f12:	83 e8 20             	sub    eax,0x20
c0007f15:	88 04 24             	mov    BYTE PTR [esp],al
c0007f18:	88 06                	mov    BYTE PTR [esi],al
c0007f1a:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007f21:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c0007f27:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c0007f2b:	bf 03 00 00 00       	mov    edi,0x3
c0007f30:	b8 03 00 00 00       	mov    eax,0x3
c0007f35:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c0007f39:	89 e9                	mov    ecx,ebp
c0007f3b:	85 ed                	test   ebp,ebp
c0007f3d:	0f 84 97 00 00 00    	je     c0007fda <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c0007f43:	8d 57 01             	lea    edx,[edi+0x1]
c0007f46:	83 fd 5c             	cmp    ebp,0x5c
c0007f49:	74 05                	je     c0007f50 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c0007f4b:	83 fd 2f             	cmp    ebp,0x2f
c0007f4e:	75 12                	jne    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f50:	89 c5                	mov    ebp,eax
c0007f52:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007f57:	74 09                	je     c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f59:	40                   	inc    eax
c0007f5a:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c0007f5e:	89 d7                	mov    edi,edx
c0007f60:	eb d3                	jmp    c0007f35 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007f62:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0007f67:	0f be e9             	movsx  ebp,cl
c0007f6a:	75 5e                	jne    c0007fca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f6c:	83 fd 2e             	cmp    ebp,0x2e
c0007f6f:	75 59                	jne    c0007fca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f71:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c0007f75:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c0007f7a:	74 18                	je     c0007f94 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c0007f7c:	83 fd 2e             	cmp    ebp,0x2e
c0007f7f:	74 53                	je     c0007fd4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f81:	89 fa                	mov    edx,edi
c0007f83:	42                   	inc    edx
c0007f84:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f88:	83 f9 2f             	cmp    ecx,0x2f
c0007f8b:	74 f6                	je     c0007f83 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f8d:	83 f9 5c             	cmp    ecx,0x5c
c0007f90:	74 f1                	je     c0007f83 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f92:	eb ca                	jmp    c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f94:	83 fd 2e             	cmp    ebp,0x2e
c0007f97:	74 3b                	je     c0007fd4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f99:	83 f8 03             	cmp    eax,0x3
c0007f9c:	74 c0                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f9e:	42                   	inc    edx
c0007f9f:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007fa3:	83 f9 5c             	cmp    ecx,0x5c
c0007fa6:	74 f6                	je     c0007f9e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007fa8:	83 f9 2f             	cmp    ecx,0x2f
c0007fab:	74 f1                	je     c0007f9e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007fad:	48                   	dec    eax
c0007fae:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007fb2:	75 06                	jne    c0007fba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007fb4:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007fb8:	eb f3                	jmp    c0007fad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c0007fba:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007fbe:	74 07                	je     c0007fc7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c0007fc0:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007fc4:	48                   	dec    eax
c0007fc5:	eb f3                	jmp    c0007fba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007fc7:	40                   	inc    eax
c0007fc8:	eb 94                	jmp    c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fca:	83 fd 5c             	cmp    ebp,0x5c
c0007fcd:	74 8f                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fcf:	83 fd 2f             	cmp    ebp,0x2f
c0007fd2:	74 8a                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fd4:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c0007fd7:	40                   	inc    eax
c0007fd8:	eb 84                	jmp    c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fda:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007fde:	83 ec 0c             	sub    esp,0xc
c0007fe1:	56                   	push   esi
c0007fe2:	e8 89 85 ff ff       	call   c0000570 <strlen>
c0007fe7:	83 c4 10             	add    esp,0x10
c0007fea:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c0007fef:	74 17                	je     c0008008 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007ff1:	83 ec 0c             	sub    esp,0xc
c0007ff4:	56                   	push   esi
c0007ff5:	e8 76 85 ff ff       	call   c0000570 <strlen>
c0007ffa:	83 c4 10             	add    esp,0x10
c0007ffd:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0008002:	74 04                	je     c0008008 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0008004:	31 ff                	xor    edi,edi
c0008006:	eb 5c                	jmp    c0008064 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008008:	83 ec 0c             	sub    esp,0xc
c000800b:	56                   	push   esi
c000800c:	e8 5f 85 ff ff       	call   c0000570 <strlen>
c0008011:	83 c4 10             	add    esp,0x10
c0008014:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c0008019:	74 e9                	je     c0008004 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c000801b:	83 ec 0c             	sub    esp,0xc
c000801e:	56                   	push   esi
c000801f:	e8 4c 85 ff ff       	call   c0000570 <strlen>
c0008024:	83 c4 10             	add    esp,0x10
c0008027:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000802c:	eb b0                	jmp    c0007fde <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000802e:	52                   	push   edx
c000802f:	52                   	push   edx
c0008030:	56                   	push   esi
c0008031:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c0008035:	55                   	push   ebp
c0008036:	e8 05 86 ff ff       	call   c0000640 <strcpy>
c000803b:	59                   	pop    ecx
c000803c:	58                   	pop    eax
c000803d:	56                   	push   esi
c000803e:	55                   	push   ebp
c000803f:	e8 b5 f8 ff ff       	call   c00078f9 <KeDereferenceSymlink(char const*, char*)>
c0008044:	83 c4 10             	add    esp,0x10
c0008047:	48                   	dec    eax
c0008048:	75 37                	jne    c0008081 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000804a:	50                   	push   eax
c000804b:	56                   	push   esi
c000804c:	55                   	push   ebp
c000804d:	68 6e 36 02 c0       	push   0xc002366e
c0008052:	e8 25 ef ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008057:	83 c4 10             	add    esp,0x10
c000805a:	8d 47 01             	lea    eax,[edi+0x1]
c000805d:	83 ff 14             	cmp    edi,0x14
c0008060:	74 08                	je     c000806a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c0008062:	89 c7                	mov    edi,eax
c0008064:	85 db                	test   ebx,ebx
c0008066:	75 c6                	jne    c000802e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c0008068:	eb 17                	jmp    c0008081 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000806a:	83 ec 0c             	sub    esp,0xc
c000806d:	bf 15 00 00 00       	mov    edi,0x15
c0008072:	68 89 36 02 c0       	push   0xc0023689
c0008077:	e8 6a 7f 00 00       	call   c000ffe6 <KePanic(char const*)>
c000807c:	83 c4 10             	add    esp,0x10
c000807f:	eb e3                	jmp    c0008064 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008081:	81 c4 0c 04 00 00    	add    esp,0x40c
c0008087:	5b                   	pop    ebx
c0008088:	5e                   	pop    esi
c0008089:	5f                   	pop    edi
c000808a:	5d                   	pop    ebp
c000808b:	c3                   	ret    

c000808c <File::File(char const*, Process*, bool)>:
c000808c:	83 ec 1c             	sub    esp,0x1c
c000808f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008093:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008097:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000809b:	83 ec 08             	sub    esp,0x8
c000809e:	6a 00                	push   0x0
c00080a0:	50                   	push   eax
c00080a1:	e8 a2 b0 00 00       	call   c0013148 <UnixFile::UnixFile(int)>
c00080a6:	83 c4 10             	add    esp,0x10
c00080a9:	ba 3c 37 02 c0       	mov    edx,0xc002373c
c00080ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080b2:	89 10                	mov    DWORD PTR [eax],edx
c00080b4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00080b9:	85 c0                	test   eax,eax
c00080bb:	74 0f                	je     c00080cc <File::File(char const*, Process*, bool)+0x40>
c00080bd:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c00080c2:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c00080c6:	74 04                	je     c00080cc <File::File(char const*, Process*, bool)+0x40>
c00080c8:	b0 01                	mov    al,0x1
c00080ca:	eb 02                	jmp    c00080ce <File::File(char const*, Process*, bool)+0x42>
c00080cc:	b0 00                	mov    al,0x0
c00080ce:	0f b6 c0             	movzx  eax,al
c00080d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080d5:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00080db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080df:	83 c2 0d             	add    edx,0xd
c00080e2:	50                   	push   eax
c00080e3:	51                   	push   ecx
c00080e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00080e8:	52                   	push   edx
c00080e9:	e8 84 fd ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00080ee:	83 c4 10             	add    esp,0x10
c00080f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080f5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080fc:	83 c2 0d             	add    edx,0xd
c00080ff:	83 ec 04             	sub    esp,0x4
c0008102:	50                   	push   eax
c0008103:	52                   	push   edx
c0008104:	68 af 36 02 c0       	push   0xc00236af
c0008109:	e8 6e ee ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000810e:	83 c4 10             	add    esp,0x10
c0008111:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008115:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008118:	83 e8 41             	sub    eax,0x41
c000811b:	88 c2                	mov    dl,al
c000811d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008121:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008127:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000812b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000812f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008133:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008139:	0f b6 c0             	movzx  eax,al
c000813c:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008143:	85 c0                	test   eax,eax
c0008145:	74 3e                	je     c0008185 <File::File(char const*, Process*, bool)+0xf9>
c0008147:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000814b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008151:	0f b6 c0             	movzx  eax,al
c0008154:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c000815b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008161:	85 c0                	test   eax,eax
c0008163:	75 20                	jne    c0008185 <File::File(char const*, Process*, bool)+0xf9>
c0008165:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008169:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000816f:	0f b6 c0             	movzx  eax,al
c0008172:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008179:	83 ec 0c             	sub    esp,0xc
c000817c:	50                   	push   eax
c000817d:	e8 64 28 00 00       	call   c000a9e6 <LogicalDisk::mount()>
c0008182:	83 c4 10             	add    esp,0x10
c0008185:	90                   	nop
c0008186:	83 c4 1c             	add    esp,0x1c
c0008189:	c3                   	ret    

c000818a <File::File(char const*, Process*)>:
c000818a:	83 ec 0c             	sub    esp,0xc
c000818d:	6a 01                	push   0x1
c000818f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008193:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000819b:	e8 ec fe ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c00081a0:	83 c4 10             	add    esp,0x10
c00081a3:	90                   	nop
c00081a4:	83 c4 0c             	add    esp,0xc
c00081a7:	c3                   	ret    

c00081a8 <File::open(FileOpenMode)>:
c00081a8:	53                   	push   ebx
c00081a9:	b8 0b 00 00 00       	mov    eax,0xb
c00081ae:	83 ec 08             	sub    esp,0x8
c00081b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00081b5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00081bc:	83 fa 19             	cmp    edx,0x19
c00081bf:	77 40                	ja     c0008201 <File::open(FileOpenMode)+0x59>
c00081c1:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c00081c8:	85 d2                	test   edx,edx
c00081ca:	74 35                	je     c0008201 <File::open(FileOpenMode)+0x59>
c00081cc:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00081d2:	85 d2                	test   edx,edx
c00081d4:	74 2b                	je     c0008201 <File::open(FileOpenMode)+0x59>
c00081d6:	b8 06 00 00 00       	mov    eax,0x6
c00081db:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00081df:	75 20                	jne    c0008201 <File::open(FileOpenMode)+0x59>
c00081e1:	8b 02                	mov    eax,DWORD PTR [edx]
c00081e3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00081e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00081ed:	51                   	push   ecx
c00081ee:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00081f1:	51                   	push   ecx
c00081f2:	52                   	push   edx
c00081f3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00081f6:	83 c4 10             	add    esp,0x10
c00081f9:	85 c0                	test   eax,eax
c00081fb:	75 04                	jne    c0008201 <File::open(FileOpenMode)+0x59>
c00081fd:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008201:	83 c4 08             	add    esp,0x8
c0008204:	5b                   	pop    ebx
c0008205:	c3                   	ret    

c0008206 <File::close()>:
c0008206:	53                   	push   ebx
c0008207:	b8 0b 00 00 00       	mov    eax,0xb
c000820c:	83 ec 08             	sub    esp,0x8
c000820f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008213:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000821a:	83 f9 19             	cmp    ecx,0x19
c000821d:	77 41                	ja     c0008260 <File::close()+0x5a>
c000821f:	8b 1c 8d e0 ca 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd3520]
c0008226:	85 db                	test   ebx,ebx
c0008228:	74 36                	je     c0008260 <File::close()+0x5a>
c000822a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008231:	74 2d                	je     c0008260 <File::close()+0x5a>
c0008233:	b8 05 00 00 00       	mov    eax,0x5
c0008238:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000823c:	74 22                	je     c0008260 <File::close()+0x5a>
c000823e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008242:	8b 04 8d e0 ca 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd3520]
c0008249:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000824f:	53                   	push   ebx
c0008250:	53                   	push   ebx
c0008251:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008253:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008259:	50                   	push   eax
c000825a:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000825d:	83 c4 10             	add    esp,0x10
c0008260:	83 c4 08             	add    esp,0x8
c0008263:	5b                   	pop    ebx
c0008264:	c3                   	ret    
c0008265:	90                   	nop

c0008266 <File::seek(unsigned long long)>:
c0008266:	56                   	push   esi
c0008267:	53                   	push   ebx
c0008268:	b8 0b 00 00 00       	mov    eax,0xb
c000826d:	51                   	push   ecx
c000826e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008272:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008276:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000827d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008281:	83 fa 19             	cmp    edx,0x19
c0008284:	77 31                	ja     c00082b7 <File::seek(unsigned long long)+0x51>
c0008286:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c000828d:	85 d2                	test   edx,edx
c000828f:	74 26                	je     c00082b7 <File::seek(unsigned long long)+0x51>
c0008291:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008297:	85 d2                	test   edx,edx
c0008299:	74 1c                	je     c00082b7 <File::seek(unsigned long long)+0x51>
c000829b:	b8 05 00 00 00       	mov    eax,0x5
c00082a0:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082a4:	74 11                	je     c00082b7 <File::seek(unsigned long long)+0x51>
c00082a6:	8b 02                	mov    eax,DWORD PTR [edx]
c00082a8:	53                   	push   ebx
c00082a9:	51                   	push   ecx
c00082aa:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082b0:	52                   	push   edx
c00082b1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00082b4:	83 c4 10             	add    esp,0x10
c00082b7:	5a                   	pop    edx
c00082b8:	5b                   	pop    ebx
c00082b9:	5e                   	pop    esi
c00082ba:	c3                   	ret    
c00082bb:	90                   	nop

c00082bc <File::truncate(unsigned long long)>:
c00082bc:	56                   	push   esi
c00082bd:	53                   	push   ebx
c00082be:	b8 0b 00 00 00       	mov    eax,0xb
c00082c3:	51                   	push   ecx
c00082c4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00082c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00082cc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00082d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00082d7:	83 fa 19             	cmp    edx,0x19
c00082da:	77 31                	ja     c000830d <File::truncate(unsigned long long)+0x51>
c00082dc:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c00082e3:	85 d2                	test   edx,edx
c00082e5:	74 26                	je     c000830d <File::truncate(unsigned long long)+0x51>
c00082e7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082ed:	85 d2                	test   edx,edx
c00082ef:	74 1c                	je     c000830d <File::truncate(unsigned long long)+0x51>
c00082f1:	b8 05 00 00 00       	mov    eax,0x5
c00082f6:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082fa:	74 11                	je     c000830d <File::truncate(unsigned long long)+0x51>
c00082fc:	8b 02                	mov    eax,DWORD PTR [edx]
c00082fe:	53                   	push   ebx
c00082ff:	51                   	push   ecx
c0008300:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008306:	52                   	push   edx
c0008307:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000830a:	83 c4 10             	add    esp,0x10
c000830d:	5a                   	pop    edx
c000830e:	5b                   	pop    ebx
c000830f:	5e                   	pop    esi
c0008310:	c3                   	ret    
c0008311:	90                   	nop

c0008312 <File::tell(unsigned long long*)>:
c0008312:	83 ec 0c             	sub    esp,0xc
c0008315:	b8 0b 00 00 00       	mov    eax,0xb
c000831a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000831e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0008325:	83 fa 19             	cmp    edx,0x19
c0008328:	77 34                	ja     c000835e <File::tell(unsigned long long*)+0x4c>
c000832a:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c0008331:	85 d2                	test   edx,edx
c0008333:	74 29                	je     c000835e <File::tell(unsigned long long*)+0x4c>
c0008335:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000833b:	85 d2                	test   edx,edx
c000833d:	74 1f                	je     c000835e <File::tell(unsigned long long*)+0x4c>
c000833f:	b8 05 00 00 00       	mov    eax,0x5
c0008344:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0008348:	74 14                	je     c000835e <File::tell(unsigned long long*)+0x4c>
c000834a:	50                   	push   eax
c000834b:	8b 02                	mov    eax,DWORD PTR [edx]
c000834d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008351:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0008357:	52                   	push   edx
c0008358:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000835b:	83 c4 10             	add    esp,0x10
c000835e:	83 c4 0c             	add    esp,0xc
c0008361:	c3                   	ret    

c0008362 <File::rewind()>:
c0008362:	83 ec 10             	sub    esp,0x10
c0008365:	6a 00                	push   0x0
c0008367:	6a 00                	push   0x0
c0008369:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000836d:	e8 f4 fe ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0008372:	83 c4 1c             	add    esp,0x1c
c0008375:	c3                   	ret    

c0008376 <File::unlink()>:
c0008376:	83 ec 0c             	sub    esp,0xc
c0008379:	b8 0b 00 00 00       	mov    eax,0xb
c000837e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008382:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008389:	83 f9 19             	cmp    ecx,0x19
c000838c:	77 2f                	ja     c00083bd <File::unlink()+0x47>
c000838e:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008395:	85 c9                	test   ecx,ecx
c0008397:	74 24                	je     c00083bd <File::unlink()+0x47>
c0008399:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000839f:	85 c9                	test   ecx,ecx
c00083a1:	74 1a                	je     c00083bd <File::unlink()+0x47>
c00083a3:	b8 06 00 00 00       	mov    eax,0x6
c00083a8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083ac:	75 0f                	jne    c00083bd <File::unlink()+0x47>
c00083ae:	83 c2 0d             	add    edx,0xd
c00083b1:	50                   	push   eax
c00083b2:	50                   	push   eax
c00083b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083b5:	52                   	push   edx
c00083b6:	51                   	push   ecx
c00083b7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00083ba:	83 c4 10             	add    esp,0x10
c00083bd:	83 c4 0c             	add    esp,0xc
c00083c0:	c3                   	ret    
c00083c1:	90                   	nop

c00083c2 <File::rename(char const*)>:
c00083c2:	83 ec 0c             	sub    esp,0xc
c00083c5:	b8 0b 00 00 00       	mov    eax,0xb
c00083ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083ce:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083d5:	83 f9 19             	cmp    ecx,0x19
c00083d8:	77 32                	ja     c000840c <File::rename(char const*)+0x4a>
c00083da:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00083e1:	85 c9                	test   ecx,ecx
c00083e3:	74 27                	je     c000840c <File::rename(char const*)+0x4a>
c00083e5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083eb:	85 c9                	test   ecx,ecx
c00083ed:	74 1d                	je     c000840c <File::rename(char const*)+0x4a>
c00083ef:	b8 06 00 00 00       	mov    eax,0x6
c00083f4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083f8:	75 12                	jne    c000840c <File::rename(char const*)+0x4a>
c00083fa:	83 c2 0d             	add    edx,0xd
c00083fd:	50                   	push   eax
c00083fe:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008400:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008404:	52                   	push   edx
c0008405:	51                   	push   ecx
c0008406:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008409:	83 c4 10             	add    esp,0x10
c000840c:	83 c4 0c             	add    esp,0xc
c000840f:	c3                   	ret    

c0008410 <File::chfatattr(unsigned char, unsigned char)>:
c0008410:	57                   	push   edi
c0008411:	b8 0b 00 00 00       	mov    eax,0xb
c0008416:	56                   	push   esi
c0008417:	53                   	push   ebx
c0008418:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000841c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008420:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008427:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000842b:	83 f9 19             	cmp    ecx,0x19
c000842e:	77 37                	ja     c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008430:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008437:	85 c9                	test   ecx,ecx
c0008439:	74 2c                	je     c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000843b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008441:	85 c9                	test   ecx,ecx
c0008443:	74 22                	je     c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008445:	b8 06 00 00 00       	mov    eax,0x6
c000844a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000844e:	75 17                	jne    c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008450:	8b 39                	mov    edi,DWORD PTR [ecx]
c0008452:	89 f0                	mov    eax,esi
c0008454:	83 c2 0d             	add    edx,0xd
c0008457:	0f b6 f0             	movzx  esi,al
c000845a:	0f b6 db             	movzx  ebx,bl
c000845d:	56                   	push   esi
c000845e:	53                   	push   ebx
c000845f:	52                   	push   edx
c0008460:	51                   	push   ecx
c0008461:	ff 57 38             	call   DWORD PTR [edi+0x38]
c0008464:	83 c4 10             	add    esp,0x10
c0008467:	5b                   	pop    ebx
c0008468:	5e                   	pop    esi
c0008469:	5f                   	pop    edi
c000846a:	c3                   	ret    
c000846b:	90                   	nop

c000846c <File::exists()>:
c000846c:	83 ec 0c             	sub    esp,0xc
c000846f:	31 c0                	xor    eax,eax
c0008471:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008475:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000847c:	83 f9 19             	cmp    ecx,0x19
c000847f:	77 24                	ja     c00084a5 <File::exists()+0x39>
c0008481:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008488:	85 c9                	test   ecx,ecx
c000848a:	74 19                	je     c00084a5 <File::exists()+0x39>
c000848c:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008492:	85 c9                	test   ecx,ecx
c0008494:	74 0f                	je     c00084a5 <File::exists()+0x39>
c0008496:	83 c2 0d             	add    edx,0xd
c0008499:	50                   	push   eax
c000849a:	50                   	push   eax
c000849b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000849d:	52                   	push   edx
c000849e:	51                   	push   ecx
c000849f:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00084a2:	83 c4 10             	add    esp,0x10
c00084a5:	83 c4 0c             	add    esp,0xc
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <File::stat(unsigned long long*, bool*)>:
c00084aa:	56                   	push   esi
c00084ab:	53                   	push   ebx
c00084ac:	50                   	push   eax
c00084ad:	b8 0b 00 00 00       	mov    eax,0xb
c00084b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00084b6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084ba:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00084c1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00084c5:	83 f9 19             	cmp    ecx,0x19
c00084c8:	77 3d                	ja     c0008507 <File::stat(unsigned long long*, bool*)+0x5d>
c00084ca:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00084d1:	85 c9                	test   ecx,ecx
c00084d3:	74 32                	je     c0008507 <File::stat(unsigned long long*, bool*)+0x5d>
c00084d5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00084db:	85 c9                	test   ecx,ecx
c00084dd:	74 28                	je     c0008507 <File::stat(unsigned long long*, bool*)+0x5d>
c00084df:	8b 01                	mov    eax,DWORD PTR [ecx]
c00084e1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00084e5:	74 13                	je     c00084fa <File::stat(unsigned long long*, bool*)+0x50>
c00084e7:	83 ec 04             	sub    esp,0x4
c00084ea:	56                   	push   esi
c00084eb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00084f1:	51                   	push   ecx
c00084f2:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00084f5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00084f8:	eb 0a                	jmp    c0008504 <File::stat(unsigned long long*, bool*)+0x5a>
c00084fa:	53                   	push   ebx
c00084fb:	83 c2 0d             	add    edx,0xd
c00084fe:	56                   	push   esi
c00084ff:	52                   	push   edx
c0008500:	51                   	push   ecx
c0008501:	ff 50 34             	call   DWORD PTR [eax+0x34]
c0008504:	83 c4 10             	add    esp,0x10
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	c3                   	ret    

c000850b <Fs::setcwd(Process*, char*)>:
c000850b:	55                   	push   ebp
c000850c:	57                   	push   edi
c000850d:	56                   	push   esi
c000850e:	53                   	push   ebx
c000850f:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0008515:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000851c:	6a 00                	push   0x0
c000851e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0008524:	57                   	push   edi
c0008525:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000852c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0008530:	56                   	push   esi
c0008531:	e8 3c f9 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008536:	89 34 24             	mov    DWORD PTR [esp],esi
c0008539:	e8 32 80 ff ff       	call   c0000570 <strlen>
c000853e:	83 c4 10             	add    esp,0x10
c0008541:	83 f8 02             	cmp    eax,0x2
c0008544:	77 15                	ja     c000855b <Fs::setcwd(Process*, char*)+0x50>
c0008546:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000854b:	83 eb 41             	sub    ebx,0x41
c000854e:	8b 04 9d e0 ca 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3520]
c0008555:	85 c0                	test   eax,eax
c0008557:	75 1c                	jne    c0008575 <Fs::setcwd(Process*, char*)+0x6a>
c0008559:	eb 2f                	jmp    c000858a <Fs::setcwd(Process*, char*)+0x7f>
c000855b:	83 ec 0c             	sub    esp,0xc
c000855e:	56                   	push   esi
c000855f:	e8 0c 80 ff ff       	call   c0000570 <strlen>
c0008564:	83 c4 10             	add    esp,0x10
c0008567:	83 f8 03             	cmp    eax,0x3
c000856a:	75 57                	jne    c00085c3 <Fs::setcwd(Process*, char*)+0xb8>
c000856c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0008571:	75 50                	jne    c00085c3 <Fs::setcwd(Process*, char*)+0xb8>
c0008573:	eb d1                	jmp    c0008546 <Fs::setcwd(Process*, char*)+0x3b>
c0008575:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000857c:	75 0c                	jne    c000858a <Fs::setcwd(Process*, char*)+0x7f>
c000857e:	83 ec 0c             	sub    esp,0xc
c0008581:	50                   	push   eax
c0008582:	e8 5f 24 00 00       	call   c000a9e6 <LogicalDisk::mount()>
c0008587:	83 c4 10             	add    esp,0x10
c000858a:	b8 03 00 00 00       	mov    eax,0x3
c000858f:	83 fb 19             	cmp    ebx,0x19
c0008592:	0f 87 c6 00 00 00    	ja     c000865e <Fs::setcwd(Process*, char*)+0x153>
c0008598:	8b 14 9d e0 ca 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd3520]
c000859f:	b8 05 00 00 00       	mov    eax,0x5
c00085a4:	85 d2                	test   edx,edx
c00085a6:	0f 84 b2 00 00 00    	je     c000865e <Fs::setcwd(Process*, char*)+0x153>
c00085ac:	b8 06 00 00 00       	mov    eax,0x6
c00085b1:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c00085b8:	0f 85 92 00 00 00    	jne    c0008650 <Fs::setcwd(Process*, char*)+0x145>
c00085be:	e9 9b 00 00 00       	jmp    c000865e <Fs::setcwd(Process*, char*)+0x153>
c00085c3:	83 ec 0c             	sub    esp,0xc
c00085c6:	68 14 01 00 00       	push   0x114
c00085cb:	e8 bf 75 00 00       	call   c000fb8f <malloc>
c00085d0:	83 c4 0c             	add    esp,0xc
c00085d3:	89 c3                	mov    ebx,eax
c00085d5:	55                   	push   ebp
c00085d6:	56                   	push   esi
c00085d7:	50                   	push   eax
c00085d8:	e8 ad fb ff ff       	call   c000818a <File::File(char const*, Process*)>
c00085dd:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00085e2:	83 c4 0c             	add    esp,0xc
c00085e5:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00085e9:	50                   	push   eax
c00085ea:	8d 44 24 10          	lea    eax,[esp+0x10]
c00085ee:	50                   	push   eax
c00085ef:	53                   	push   ebx
c00085f0:	e8 b5 fe ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00085f5:	83 c4 10             	add    esp,0x10
c00085f8:	83 f8 02             	cmp    eax,0x2
c00085fb:	74 27                	je     c0008624 <Fs::setcwd(Process*, char*)+0x119>
c00085fd:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0008602:	75 1c                	jne    c0008620 <Fs::setcwd(Process*, char*)+0x115>
c0008604:	b8 02 00 00 00       	mov    eax,0x2
c0008609:	85 db                	test   ebx,ebx
c000860b:	74 51                	je     c000865e <Fs::setcwd(Process*, char*)+0x153>
c000860d:	83 ec 0c             	sub    esp,0xc
c0008610:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008612:	53                   	push   ebx
c0008613:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008616:	83 c4 10             	add    esp,0x10
c0008619:	b8 02 00 00 00       	mov    eax,0x2
c000861e:	eb 3e                	jmp    c000865e <Fs::setcwd(Process*, char*)+0x153>
c0008620:	85 c0                	test   eax,eax
c0008622:	74 1c                	je     c0008640 <Fs::setcwd(Process*, char*)+0x135>
c0008624:	b8 01 00 00 00       	mov    eax,0x1
c0008629:	85 db                	test   ebx,ebx
c000862b:	74 31                	je     c000865e <Fs::setcwd(Process*, char*)+0x153>
c000862d:	83 ec 0c             	sub    esp,0xc
c0008630:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008632:	53                   	push   ebx
c0008633:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008636:	83 c4 10             	add    esp,0x10
c0008639:	b8 01 00 00 00       	mov    eax,0x1
c000863e:	eb 1e                	jmp    c000865e <Fs::setcwd(Process*, char*)+0x153>
c0008640:	85 db                	test   ebx,ebx
c0008642:	74 0c                	je     c0008650 <Fs::setcwd(Process*, char*)+0x145>
c0008644:	83 ec 0c             	sub    esp,0xc
c0008647:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008649:	53                   	push   ebx
c000864a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000864d:	83 c4 10             	add    esp,0x10
c0008650:	50                   	push   eax
c0008651:	50                   	push   eax
c0008652:	56                   	push   esi
c0008653:	57                   	push   edi
c0008654:	e8 e7 7f ff ff       	call   c0000640 <strcpy>
c0008659:	83 c4 10             	add    esp,0x10
c000865c:	31 c0                	xor    eax,eax
c000865e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0008664:	5b                   	pop    ebx
c0008665:	5e                   	pop    esi
c0008666:	5f                   	pop    edi
c0008667:	5d                   	pop    ebp
c0008668:	c3                   	ret    
c0008669:	90                   	nop

c000866a <Directory::Directory(char const*, Process*)>:
c000866a:	83 ec 0c             	sub    esp,0xc
c000866d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008671:	83 ec 08             	sub    esp,0x8
c0008674:	6a 00                	push   0x0
c0008676:	50                   	push   eax
c0008677:	e8 cc aa 00 00       	call   c0013148 <UnixFile::UnixFile(int)>
c000867c:	83 c4 10             	add    esp,0x10
c000867f:	ba 58 37 02 c0       	mov    edx,0xc0023758
c0008684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008688:	89 10                	mov    DWORD PTR [eax],edx
c000868a:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c000868f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008693:	0f 95 c0             	setne  al
c0008696:	0f b6 c0             	movzx  eax,al
c0008699:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000869d:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00086a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00086a7:	83 c2 0d             	add    edx,0xd
c00086aa:	50                   	push   eax
c00086ab:	51                   	push   ecx
c00086ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00086b0:	52                   	push   edx
c00086b1:	e8 bc f7 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00086b6:	83 c4 10             	add    esp,0x10
c00086b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086bd:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00086c0:	83 e8 41             	sub    eax,0x41
c00086c3:	88 c2                	mov    dl,al
c00086c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086c9:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00086cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086d3:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00086d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086db:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086e1:	0f b6 c0             	movzx  eax,al
c00086e4:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c00086eb:	85 c0                	test   eax,eax
c00086ed:	74 3e                	je     c000872d <Directory::Directory(char const*, Process*)+0xc3>
c00086ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086f3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086f9:	0f b6 c0             	movzx  eax,al
c00086fc:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008703:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008709:	85 c0                	test   eax,eax
c000870b:	75 20                	jne    c000872d <Directory::Directory(char const*, Process*)+0xc3>
c000870d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008711:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008717:	0f b6 c0             	movzx  eax,al
c000871a:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c0008721:	83 ec 0c             	sub    esp,0xc
c0008724:	50                   	push   eax
c0008725:	e8 bc 22 00 00       	call   c000a9e6 <LogicalDisk::mount()>
c000872a:	83 c4 10             	add    esp,0x10
c000872d:	90                   	nop
c000872e:	83 c4 0c             	add    esp,0xc
c0008731:	c3                   	ret    

c0008732 <Directory::open()>:
c0008732:	53                   	push   ebx
c0008733:	b8 0b 00 00 00       	mov    eax,0xb
c0008738:	83 ec 08             	sub    esp,0x8
c000873b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000873f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008746:	83 fa 19             	cmp    edx,0x19
c0008749:	77 3d                	ja     c0008788 <Directory::open()+0x56>
c000874b:	8b 14 95 e0 ca 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3520]
c0008752:	85 d2                	test   edx,edx
c0008754:	74 32                	je     c0008788 <Directory::open()+0x56>
c0008756:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000875c:	85 d2                	test   edx,edx
c000875e:	74 28                	je     c0008788 <Directory::open()+0x56>
c0008760:	b8 06 00 00 00       	mov    eax,0x6
c0008765:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008769:	75 1d                	jne    c0008788 <Directory::open()+0x56>
c000876b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008771:	50                   	push   eax
c0008772:	8b 02                	mov    eax,DWORD PTR [edx]
c0008774:	51                   	push   ecx
c0008775:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008778:	51                   	push   ecx
c0008779:	52                   	push   edx
c000877a:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000877d:	83 c4 10             	add    esp,0x10
c0008780:	85 c0                	test   eax,eax
c0008782:	75 04                	jne    c0008788 <Directory::open()+0x56>
c0008784:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008788:	83 c4 08             	add    esp,0x8
c000878b:	5b                   	pop    ebx
c000878c:	c3                   	ret    
c000878d:	90                   	nop

c000878e <Directory::close()>:
c000878e:	53                   	push   ebx
c000878f:	b8 0b 00 00 00       	mov    eax,0xb
c0008794:	83 ec 08             	sub    esp,0x8
c0008797:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000879b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087a2:	83 f9 19             	cmp    ecx,0x19
c00087a5:	77 41                	ja     c00087e8 <Directory::close()+0x5a>
c00087a7:	8b 1c 8d e0 ca 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd3520]
c00087ae:	85 db                	test   ebx,ebx
c00087b0:	74 36                	je     c00087e8 <Directory::close()+0x5a>
c00087b2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00087b9:	74 2d                	je     c00087e8 <Directory::close()+0x5a>
c00087bb:	b8 05 00 00 00       	mov    eax,0x5
c00087c0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087c4:	74 22                	je     c00087e8 <Directory::close()+0x5a>
c00087c6:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00087ca:	8b 04 8d e0 ca 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd3520]
c00087d1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00087d7:	53                   	push   ebx
c00087d8:	53                   	push   ebx
c00087d9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00087db:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00087e1:	50                   	push   eax
c00087e2:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c00087e5:	83 c4 10             	add    esp,0x10
c00087e8:	83 c4 08             	add    esp,0x8
c00087eb:	5b                   	pop    ebx
c00087ec:	c3                   	ret    
c00087ed:	90                   	nop

c00087ee <Directory::unlink()>:
c00087ee:	83 ec 0c             	sub    esp,0xc
c00087f1:	b8 0b 00 00 00       	mov    eax,0xb
c00087f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008801:	83 f9 19             	cmp    ecx,0x19
c0008804:	77 2f                	ja     c0008835 <Directory::unlink()+0x47>
c0008806:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c000880d:	85 c9                	test   ecx,ecx
c000880f:	74 24                	je     c0008835 <Directory::unlink()+0x47>
c0008811:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008817:	85 c9                	test   ecx,ecx
c0008819:	74 1a                	je     c0008835 <Directory::unlink()+0x47>
c000881b:	b8 06 00 00 00       	mov    eax,0x6
c0008820:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008824:	75 0f                	jne    c0008835 <Directory::unlink()+0x47>
c0008826:	83 c2 0d             	add    edx,0xd
c0008829:	50                   	push   eax
c000882a:	50                   	push   eax
c000882b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000882d:	52                   	push   edx
c000882e:	51                   	push   ecx
c000882f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008832:	83 c4 10             	add    esp,0x10
c0008835:	83 c4 0c             	add    esp,0xc
c0008838:	c3                   	ret    
c0008839:	90                   	nop

c000883a <Directory::rename(char const*)>:
c000883a:	83 ec 0c             	sub    esp,0xc
c000883d:	b8 0b 00 00 00       	mov    eax,0xb
c0008842:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008846:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000884d:	83 f9 19             	cmp    ecx,0x19
c0008850:	77 32                	ja     c0008884 <Directory::rename(char const*)+0x4a>
c0008852:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008859:	85 c9                	test   ecx,ecx
c000885b:	74 27                	je     c0008884 <Directory::rename(char const*)+0x4a>
c000885d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008863:	85 c9                	test   ecx,ecx
c0008865:	74 1d                	je     c0008884 <Directory::rename(char const*)+0x4a>
c0008867:	b8 06 00 00 00       	mov    eax,0x6
c000886c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008870:	75 12                	jne    c0008884 <Directory::rename(char const*)+0x4a>
c0008872:	83 c2 0d             	add    edx,0xd
c0008875:	50                   	push   eax
c0008876:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008878:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000887c:	52                   	push   edx
c000887d:	51                   	push   ecx
c000887e:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008881:	83 c4 10             	add    esp,0x10
c0008884:	83 c4 0c             	add    esp,0xc
c0008887:	c3                   	ret    

c0008888 <Directory::exists()>:
c0008888:	83 ec 0c             	sub    esp,0xc
c000888b:	31 c0                	xor    eax,eax
c000888d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008891:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008898:	83 f9 19             	cmp    ecx,0x19
c000889b:	77 24                	ja     c00088c1 <Directory::exists()+0x39>
c000889d:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00088a4:	85 c9                	test   ecx,ecx
c00088a6:	74 19                	je     c00088c1 <Directory::exists()+0x39>
c00088a8:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088ae:	85 c9                	test   ecx,ecx
c00088b0:	74 0f                	je     c00088c1 <Directory::exists()+0x39>
c00088b2:	83 c2 0d             	add    edx,0xd
c00088b5:	50                   	push   eax
c00088b6:	50                   	push   eax
c00088b7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088b9:	52                   	push   edx
c00088ba:	51                   	push   ecx
c00088bb:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00088be:	83 c4 10             	add    esp,0x10
c00088c1:	83 c4 0c             	add    esp,0xc
c00088c4:	c3                   	ret    
c00088c5:	90                   	nop

c00088c6 <Directory::read(dirent*)>:
c00088c6:	83 ec 1c             	sub    esp,0x1c
c00088c9:	b8 0b 00 00 00       	mov    eax,0xb
c00088ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00088d2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088d9:	83 f9 19             	cmp    ecx,0x19
c00088dc:	77 30                	ja     c000890e <Directory::read(dirent*)+0x48>
c00088de:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c00088e5:	85 c9                	test   ecx,ecx
c00088e7:	74 25                	je     c000890e <Directory::read(dirent*)+0x48>
c00088e9:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c00088f0:	74 1c                	je     c000890e <Directory::read(dirent*)+0x48>
c00088f2:	83 ec 0c             	sub    esp,0xc
c00088f5:	8b 02                	mov    eax,DWORD PTR [edx]
c00088f7:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00088fb:	51                   	push   ecx
c00088fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0008900:	6a 00                	push   0x0
c0008902:	68 10 01 00 00       	push   0x110
c0008907:	52                   	push   edx
c0008908:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000890b:	83 c4 20             	add    esp,0x20
c000890e:	83 c4 1c             	add    esp,0x1c
c0008911:	c3                   	ret    

c0008912 <Directory::create()>:
c0008912:	83 ec 0c             	sub    esp,0xc
c0008915:	b8 0b 00 00 00       	mov    eax,0xb
c000891a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000891e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008925:	83 f9 19             	cmp    ecx,0x19
c0008928:	77 2f                	ja     c0008959 <Directory::create()+0x47>
c000892a:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0008931:	85 c9                	test   ecx,ecx
c0008933:	74 24                	je     c0008959 <Directory::create()+0x47>
c0008935:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000893b:	85 c9                	test   ecx,ecx
c000893d:	74 1a                	je     c0008959 <Directory::create()+0x47>
c000893f:	b8 06 00 00 00       	mov    eax,0x6
c0008944:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008948:	75 0f                	jne    c0008959 <Directory::create()+0x47>
c000894a:	83 c2 0d             	add    edx,0xd
c000894d:	50                   	push   eax
c000894e:	50                   	push   eax
c000894f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008951:	52                   	push   edx
c0008952:	51                   	push   ecx
c0008953:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0008956:	83 c4 10             	add    esp,0x10
c0008959:	83 c4 0c             	add    esp,0xc
c000895c:	c3                   	ret    
c000895d:	90                   	nop

c000895e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000895e:	b8 0a 00 00 00       	mov    eax,0xa
c0008963:	c3                   	ret    

c0008964 <Bus::Bus(char const*)>:
c0008964:	83 ec 0c             	sub    esp,0xc
c0008967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000896b:	83 ec 08             	sub    esp,0x8
c000896e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008972:	50                   	push   eax
c0008973:	e8 3e 12 00 00       	call   c0009bb6 <Device::Device(char const*)>
c0008978:	83 c4 10             	add    esp,0x10
c000897b:	ba 74 37 02 c0       	mov    edx,0xc0023774
c0008980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008984:	89 10                	mov    DWORD PTR [eax],edx
c0008986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008994:	90                   	nop
c0008995:	83 c4 0c             	add    esp,0xc
c0008998:	c3                   	ret    
c0008999:	90                   	nop
c000899a:	66 90                	xchg   ax,ax

c000899c <Bus::~Bus()>:
c000899c:	83 ec 0c             	sub    esp,0xc
c000899f:	ba 74 37 02 c0       	mov    edx,0xc0023774
c00089a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089a8:	89 10                	mov    DWORD PTR [eax],edx
c00089aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089ae:	83 ec 0c             	sub    esp,0xc
c00089b1:	50                   	push   eax
c00089b2:	e8 9f 0f 00 00       	call   c0009956 <Device::~Device()>
c00089b7:	83 c4 10             	add    esp,0x10
c00089ba:	90                   	nop
c00089bb:	83 c4 0c             	add    esp,0xc
c00089be:	c3                   	ret    
c00089bf:	90                   	nop

c00089c0 <Bus::~Bus()>:
c00089c0:	83 ec 0c             	sub    esp,0xc
c00089c3:	83 ec 0c             	sub    esp,0xc
c00089c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089ca:	e8 cd ff ff ff       	call   c000899c <Bus::~Bus()>
c00089cf:	83 c4 10             	add    esp,0x10
c00089d2:	83 ec 08             	sub    esp,0x8
c00089d5:	68 58 01 00 00       	push   0x158
c00089da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089de:	e8 06 4a 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c00089e3:	83 c4 10             	add    esp,0x10
c00089e6:	83 c4 0c             	add    esp,0xc
c00089e9:	c3                   	ret    

c00089ea <KeBeepThread(void*)>:
c00089ea:	83 ec 0c             	sub    esp,0xc
c00089ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089f1:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c00089f8:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c00089ff:	75 01                	jne    c0008a02 <KeBeepThread(void*)+0x18>
c0008a01:	fb                   	sti    
c0008a02:	6b c0 0a             	imul   eax,eax,0xa
c0008a05:	52                   	push   edx
c0008a06:	52                   	push   edx
c0008a07:	99                   	cdq    
c0008a08:	52                   	push   edx
c0008a09:	50                   	push   eax
c0008a0a:	e8 f9 e9 00 00       	call   c0017408 <milliTenthSleep(unsigned long long)>
c0008a0f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a16:	e8 86 20 01 00       	call   c001aaa1 <HalMakeBeep(int)>
c0008a1b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0008a23:	83 c4 1c             	add    esp,0x1c
c0008a26:	e9 a9 e8 00 00       	jmp    c00172d4 <blockTask(TaskState)>

c0008a2b <KeBeep(int, int, bool)>:
c0008a2b:	56                   	push   esi
c0008a2c:	53                   	push   ebx
c0008a2d:	83 ec 10             	sub    esp,0x10
c0008a30:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a34:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a3c:	e8 60 20 01 00       	call   c001aaa1 <HalMakeBeep(int)>
c0008a41:	83 c4 10             	add    esp,0x10
c0008a44:	89 f0                	mov    eax,esi
c0008a46:	84 c0                	test   al,al
c0008a48:	74 1f                	je     c0008a69 <KeBeep(int, int, bool)+0x3e>
c0008a4a:	50                   	push   eax
c0008a4b:	50                   	push   eax
c0008a4c:	6b c3 0a             	imul   eax,ebx,0xa
c0008a4f:	99                   	cdq    
c0008a50:	52                   	push   edx
c0008a51:	50                   	push   eax
c0008a52:	e8 b1 e9 00 00       	call   c0017408 <milliTenthSleep(unsigned long long)>
c0008a57:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a5f:	83 c4 14             	add    esp,0x14
c0008a62:	5b                   	pop    ebx
c0008a63:	5e                   	pop    esi
c0008a64:	e9 38 20 01 00       	jmp    c001aaa1 <HalMakeBeep(int)>
c0008a69:	68 e6 00 00 00       	push   0xe6
c0008a6e:	53                   	push   ebx
c0008a6f:	68 ea 89 00 c0       	push   0xc00089ea
c0008a74:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c0008a7a:	e8 d5 e4 00 00       	call   c0016f54 <Process::createThread(void (*)(void*), void*, int)>
c0008a7f:	83 c4 14             	add    esp,0x14
c0008a82:	5b                   	pop    ebx
c0008a83:	5e                   	pop    esi
c0008a84:	c3                   	ret    
c0008a85:	90                   	nop

c0008a86 <KeLoadTimezoneStrings()>:
c0008a86:	55                   	push   ebp
c0008a87:	89 e5                	mov    ebp,esp
c0008a89:	53                   	push   ebx
c0008a8a:	83 ec 44             	sub    esp,0x44
c0008a8d:	c6 05 20 c3 02 c0 01 	mov    BYTE PTR ds:0xc002c320,0x1
c0008a94:	c7 45 dc 14 01 00 00 	mov    DWORD PTR [ebp-0x24],0x114
c0008a9b:	83 ec 0c             	sub    esp,0xc
c0008a9e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0008aa1:	e8 e9 70 00 00       	call   c000fb8f <malloc>
c0008aa6:	83 c4 10             	add    esp,0x10
c0008aa9:	89 c3                	mov    ebx,eax
c0008aab:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0008ab0:	83 ec 04             	sub    esp,0x4
c0008ab3:	50                   	push   eax
c0008ab4:	68 a0 37 02 c0       	push   0xc00237a0
c0008ab9:	53                   	push   ebx
c0008aba:	e8 cb f6 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0008abf:	83 c4 10             	add    esp,0x10
c0008ac2:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0008ac5:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008ac9:	75 10                	jne    c0008adb <KeLoadTimezoneStrings()+0x55>
c0008acb:	83 ec 0c             	sub    esp,0xc
c0008ace:	68 bf 37 02 c0       	push   0xc00237bf
c0008ad3:	e8 0e 75 00 00       	call   c000ffe6 <KePanic(char const*)>
c0008ad8:	83 c4 10             	add    esp,0x10
c0008adb:	83 ec 08             	sub    esp,0x8
c0008ade:	6a 01                	push   0x1
c0008ae0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008ae3:	e8 c0 f6 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0008ae8:	83 c4 10             	add    esp,0x10
c0008aeb:	83 ec 04             	sub    esp,0x4
c0008aee:	8d 45 cf             	lea    eax,[ebp-0x31]
c0008af1:	50                   	push   eax
c0008af2:	8d 45 d0             	lea    eax,[ebp-0x30]
c0008af5:	50                   	push   eax
c0008af6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008af9:	e8 ac f9 ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b04:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b07:	83 ec 08             	sub    esp,0x8
c0008b0a:	50                   	push   eax
c0008b0b:	68 d5 37 02 c0       	push   0xc00237d5
c0008b10:	e8 67 e4 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008b15:	83 c4 10             	add    esp,0x10
c0008b18:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b1b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b1e:	83 c0 01             	add    eax,0x1
c0008b21:	83 ec 0c             	sub    esp,0xc
c0008b24:	50                   	push   eax
c0008b25:	e8 65 70 00 00       	call   c000fb8f <malloc>
c0008b2a:	83 c4 10             	add    esp,0x10
c0008b2d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0008b30:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b33:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b36:	83 ec 04             	sub    esp,0x4
c0008b39:	50                   	push   eax
c0008b3a:	6a 00                	push   0x0
c0008b3c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b3f:	e8 ac 79 ff ff       	call   c00004f0 <memset>
c0008b44:	83 c4 10             	add    esp,0x10
c0008b47:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b4c:	83 c0 0c             	add    eax,0xc
c0008b4f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008b51:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b54:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b57:	83 ec 0c             	sub    esp,0xc
c0008b5a:	8d 5d c8             	lea    ebx,[ebp-0x38]
c0008b5d:	53                   	push   ebx
c0008b5e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b61:	52                   	push   edx
c0008b62:	50                   	push   eax
c0008b63:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b66:	ff d1                	call   ecx
c0008b68:	83 c4 20             	add    esp,0x20
c0008b6b:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0008b6e:	83 ec 08             	sub    esp,0x8
c0008b71:	50                   	push   eax
c0008b72:	68 e5 37 02 c0       	push   0xc00237e5
c0008b77:	e8 00 e4 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008b7c:	83 c4 10             	add    esp,0x10
c0008b7f:	83 ec 0c             	sub    esp,0xc
c0008b82:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b85:	e8 7c f6 ff ff       	call   c0008206 <File::close()>
c0008b8a:	83 c4 10             	add    esp,0x10
c0008b8d:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008b91:	74 15                	je     c0008ba8 <KeLoadTimezoneStrings()+0x122>
c0008b93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b96:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b98:	83 c0 08             	add    eax,0x8
c0008b9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b9d:	83 ec 0c             	sub    esp,0xc
c0008ba0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008ba3:	ff d0                	call   eax
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0008baf:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0008bb6:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
c0008bbd:	7f 3a                	jg     c0008bf9 <KeLoadTimezoneStrings()+0x173>
c0008bbf:	83 ec 0c             	sub    esp,0xc
c0008bc2:	6a 78                	push   0x78
c0008bc4:	e8 c6 6f 00 00       	call   c000fb8f <malloc>
c0008bc9:	83 c4 10             	add    esp,0x10
c0008bcc:	89 c2                	mov    edx,eax
c0008bce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bd1:	89 14 85 40 c3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3cc0],edx
c0008bd8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bdb:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008be2:	83 ec 08             	sub    esp,0x8
c0008be5:	68 ee 37 02 c0       	push   0xc00237ee
c0008bea:	50                   	push   eax
c0008beb:	e8 50 7a ff ff       	call   c0000640 <strcpy>
c0008bf0:	83 c4 10             	add    esp,0x10
c0008bf3:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0008bf7:	eb bd                	jmp    c0008bb6 <KeLoadTimezoneStrings()+0x130>
c0008bf9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0008c00:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008c03:	8d 50 01             	lea    edx,[eax+0x1]
c0008c06:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0008c09:	89 c2                	mov    edx,eax
c0008c0b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0008c0e:	01 d0                	add    eax,edx
c0008c10:	8a 00                	mov    al,BYTE PTR [eax]
c0008c12:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
c0008c15:	c6 45 c7 00          	mov    BYTE PTR [ebp-0x39],0x0
c0008c19:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c1c:	0f be c0             	movsx  eax,al
c0008c1f:	83 f8 0d             	cmp    eax,0xd
c0008c22:	0f 84 82 01 00 00    	je     c0008daa <KeLoadTimezoneStrings()+0x324>
c0008c28:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c2b:	0f be c0             	movsx  eax,al
c0008c2e:	83 f8 09             	cmp    eax,0x9
c0008c31:	75 44                	jne    c0008c77 <KeLoadTimezoneStrings()+0x1f1>
c0008c33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c36:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008c3d:	83 ec 0c             	sub    esp,0xc
c0008c40:	50                   	push   eax
c0008c41:	e8 2a 79 ff ff       	call   c0000570 <strlen>
c0008c46:	83 c4 10             	add    esp,0x10
c0008c49:	83 f8 08             	cmp    eax,0x8
c0008c4c:	0f 96 c0             	setbe  al
c0008c4f:	0f b6 c0             	movzx  eax,al
c0008c52:	85 c0                	test   eax,eax
c0008c54:	0f 84 56 01 00 00    	je     c0008db0 <KeLoadTimezoneStrings()+0x32a>
c0008c5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c5d:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008c64:	83 ec 08             	sub    esp,0x8
c0008c67:	68 ee 37 02 c0       	push   0xc00237ee
c0008c6c:	50                   	push   eax
c0008c6d:	e8 ce 7b ff ff       	call   c0000840 <strcat>
c0008c72:	83 c4 10             	add    esp,0x10
c0008c75:	eb bc                	jmp    c0008c33 <KeLoadTimezoneStrings()+0x1ad>
c0008c77:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c7a:	0f be c0             	movsx  eax,al
c0008c7d:	83 f8 0a             	cmp    eax,0xa
c0008c80:	0f 85 9b 00 00 00    	jne    c0008d21 <KeLoadTimezoneStrings()+0x29b>
c0008c86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c89:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008c90:	83 ec 0c             	sub    esp,0xc
c0008c93:	50                   	push   eax
c0008c94:	e8 d7 78 ff ff       	call   c0000570 <strlen>
c0008c99:	83 c4 10             	add    esp,0x10
c0008c9c:	83 f8 35             	cmp    eax,0x35
c0008c9f:	0f 96 c0             	setbe  al
c0008ca2:	0f b6 c0             	movzx  eax,al
c0008ca5:	85 c0                	test   eax,eax
c0008ca7:	74 1d                	je     c0008cc6 <KeLoadTimezoneStrings()+0x240>
c0008ca9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008cac:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008cb3:	83 ec 08             	sub    esp,0x8
c0008cb6:	68 ee 37 02 c0       	push   0xc00237ee
c0008cbb:	50                   	push   eax
c0008cbc:	e8 7f 7b ff ff       	call   c0000840 <strcat>
c0008cc1:	83 c4 10             	add    esp,0x10
c0008cc4:	eb c0                	jmp    c0008c86 <KeLoadTimezoneStrings()+0x200>
c0008cc6:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0008cca:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008ccd:	89 c2                	mov    edx,eax
c0008ccf:	c1 fa 1f             	sar    edx,0x1f
c0008cd2:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0008cd5:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0008cd8:	39 c8                	cmp    eax,ecx
c0008cda:	89 d0                	mov    eax,edx
c0008cdc:	19 d8                	sbb    eax,ebx
c0008cde:	0f 82 d2 00 00 00    	jb     c0008db6 <KeLoadTimezoneStrings()+0x330>
c0008ce4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008ce7:	a3 24 c3 02 c0       	mov    ds:0xc002c324,eax
c0008cec:	83 ec 08             	sub    esp,0x8
c0008cef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008cf2:	68 f0 37 02 c0       	push   0xc00237f0
c0008cf7:	e8 80 e2 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008cfc:	83 c4 10             	add    esp,0x10
c0008cff:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008d04:	83 ec 08             	sub    esp,0x8
c0008d07:	50                   	push   eax
c0008d08:	68 05 38 02 c0       	push   0xc0023805
c0008d0d:	e8 6a e2 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008d12:	83 c4 10             	add    esp,0x10
c0008d15:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0008d1c:	e9 9b 00 00 00       	jmp    c0008dbc <KeLoadTimezoneStrings()+0x336>
c0008d21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d24:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d2b:	83 ec 0c             	sub    esp,0xc
c0008d2e:	50                   	push   eax
c0008d2f:	e8 3c 78 ff ff       	call   c0000570 <strlen>
c0008d34:	83 c4 10             	add    esp,0x10
c0008d37:	83 f8 31             	cmp    eax,0x31
c0008d3a:	0f 96 c0             	setbe  al
c0008d3d:	0f b6 c0             	movzx  eax,al
c0008d40:	85 c0                	test   eax,eax
c0008d42:	74 1f                	je     c0008d63 <KeLoadTimezoneStrings()+0x2dd>
c0008d44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d47:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d4e:	83 ec 08             	sub    esp,0x8
c0008d51:	8d 55 c6             	lea    edx,[ebp-0x3a]
c0008d54:	52                   	push   edx
c0008d55:	50                   	push   eax
c0008d56:	e8 e5 7a ff ff       	call   c0000840 <strcat>
c0008d5b:	83 c4 10             	add    esp,0x10
c0008d5e:	e9 9d fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008d63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d66:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d6d:	83 ec 0c             	sub    esp,0xc
c0008d70:	50                   	push   eax
c0008d71:	e8 fa 77 ff ff       	call   c0000570 <strlen>
c0008d76:	83 c4 10             	add    esp,0x10
c0008d79:	83 f8 32             	cmp    eax,0x32
c0008d7c:	0f 94 c0             	sete   al
c0008d7f:	0f b6 c0             	movzx  eax,al
c0008d82:	85 c0                	test   eax,eax
c0008d84:	0f 84 76 fe ff ff    	je     c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008d8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d8d:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008d94:	83 ec 08             	sub    esp,0x8
c0008d97:	68 09 38 02 c0       	push   0xc0023809
c0008d9c:	50                   	push   eax
c0008d9d:	e8 9e 7a ff ff       	call   c0000840 <strcat>
c0008da2:	83 c4 10             	add    esp,0x10
c0008da5:	e9 56 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008daa:	90                   	nop
c0008dab:	e9 50 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008db0:	90                   	nop
c0008db1:	e9 4a fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008db6:	90                   	nop
c0008db7:	e9 44 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008dbc:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008dc1:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008dc4:	7d 49                	jge    c0008e0f <KeLoadTimezoneStrings()+0x389>
c0008dc6:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008dcb:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008dce:	0f 9c c0             	setl   al
c0008dd1:	0f b6 d0             	movzx  edx,al
c0008dd4:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008dd9:	52                   	push   edx
c0008dda:	50                   	push   eax
c0008ddb:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dde:	68 0e 38 02 c0       	push   0xc002380e
c0008de3:	e8 94 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008de8:	83 c4 10             	add    esp,0x10
c0008deb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0008dee:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008df5:	83 ec 04             	sub    esp,0x4
c0008df8:	50                   	push   eax
c0008df9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dfc:	68 1c 38 02 c0       	push   0xc002381c
c0008e01:	e8 76 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e06:	83 c4 10             	add    esp,0x10
c0008e09:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
c0008e0d:	eb ad                	jmp    c0008dbc <KeLoadTimezoneStrings()+0x336>
c0008e0f:	90                   	nop
c0008e10:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0008e13:	c9                   	leave  
c0008e14:	c3                   	ret    

c0008e15 <KeGetTimezoneStringFromID(int)>:
c0008e15:	55                   	push   ebp
c0008e16:	89 e5                	mov    ebp,esp
c0008e18:	83 ec 08             	sub    esp,0x8
c0008e1b:	83 ec 08             	sub    esp,0x8
c0008e1e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e21:	68 25 38 02 c0       	push   0xc0023825
c0008e26:	e8 51 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e2b:	83 c4 10             	add    esp,0x10
c0008e2e:	a0 20 c3 02 c0       	mov    al,ds:0xc002c320
c0008e33:	83 f0 01             	xor    eax,0x1
c0008e36:	0f b6 c0             	movzx  eax,al
c0008e39:	85 c0                	test   eax,eax
c0008e3b:	74 15                	je     c0008e52 <KeGetTimezoneStringFromID(int)+0x3d>
c0008e3d:	e8 44 fc ff ff       	call   c0008a86 <KeLoadTimezoneStrings()>
c0008e42:	83 ec 0c             	sub    esp,0xc
c0008e45:	68 43 38 02 c0       	push   0xc0023843
c0008e4a:	e8 2d e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e4f:	83 c4 10             	add    esp,0x10
c0008e52:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008e57:	83 ec 04             	sub    esp,0x4
c0008e5a:	50                   	push   eax
c0008e5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e5e:	68 54 38 02 c0       	push   0xc0023854
c0008e63:	e8 14 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e68:	83 c4 10             	add    esp,0x10
c0008e6b:	a1 24 c3 02 c0       	mov    eax,ds:0xc002c324
c0008e70:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
c0008e73:	7d 06                	jge    c0008e7b <KeGetTimezoneStringFromID(int)+0x66>
c0008e75:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0008e79:	79 07                	jns    c0008e82 <KeGetTimezoneStringFromID(int)+0x6d>
c0008e7b:	b8 00 00 00 00       	mov    eax,0x0
c0008e80:	eb 2e                	jmp    c0008eb0 <KeGetTimezoneStringFromID(int)+0x9b>
c0008e82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e85:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008e8c:	83 c0 01             	add    eax,0x1
c0008e8f:	83 ec 04             	sub    esp,0x4
c0008e92:	50                   	push   eax
c0008e93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e96:	68 67 38 02 c0       	push   0xc0023867
c0008e9b:	e8 dc e0 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ea6:	8b 04 85 40 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3cc0]
c0008ead:	83 c0 01             	add    eax,0x1
c0008eb0:	c9                   	leave  
c0008eb1:	c3                   	ret    

c0008eb2 <KeUpdateTimezone(char const*)>:
c0008eb2:	55                   	push   ebp
c0008eb3:	89 e5                	mov    ebp,esp
c0008eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eb8:	8a 00                	mov    al,BYTE PTR [eax]
c0008eba:	0f be c0             	movsx  eax,al
c0008ebd:	83 f8 2b             	cmp    eax,0x2b
c0008ec0:	74 11                	je     c0008ed3 <KeUpdateTimezone(char const*)+0x21>
c0008ec2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ec5:	8a 00                	mov    al,BYTE PTR [eax]
c0008ec7:	0f be c0             	movsx  eax,al
c0008eca:	83 f8 2d             	cmp    eax,0x2d
c0008ecd:	0f 85 be 00 00 00    	jne    c0008f91 <KeUpdateTimezone(char const*)+0xdf>
c0008ed3:	c6 05 60 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c660,0x0
c0008eda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008edd:	83 c0 02             	add    eax,0x2
c0008ee0:	8a 00                	mov    al,BYTE PTR [eax]
c0008ee2:	0f be c0             	movsx  eax,al
c0008ee5:	83 f8 2e             	cmp    eax,0x2e
c0008ee8:	75 10                	jne    c0008efa <KeUpdateTimezone(char const*)+0x48>
c0008eea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eed:	83 c0 03             	add    eax,0x3
c0008ef0:	8a 00                	mov    al,BYTE PTR [eax]
c0008ef2:	0f be c0             	movsx  eax,al
c0008ef5:	83 f8 35             	cmp    eax,0x35
c0008ef8:	74 20                	je     c0008f1a <KeUpdateTimezone(char const*)+0x68>
c0008efa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008efd:	83 c0 03             	add    eax,0x3
c0008f00:	8a 00                	mov    al,BYTE PTR [eax]
c0008f02:	0f be c0             	movsx  eax,al
c0008f05:	83 f8 2e             	cmp    eax,0x2e
c0008f08:	75 14                	jne    c0008f1e <KeUpdateTimezone(char const*)+0x6c>
c0008f0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f0d:	83 c0 04             	add    eax,0x4
c0008f10:	8a 00                	mov    al,BYTE PTR [eax]
c0008f12:	0f be c0             	movsx  eax,al
c0008f15:	83 f8 35             	cmp    eax,0x35
c0008f18:	75 04                	jne    c0008f1e <KeUpdateTimezone(char const*)+0x6c>
c0008f1a:	b0 01                	mov    al,0x1
c0008f1c:	eb 02                	jmp    c0008f20 <KeUpdateTimezone(char const*)+0x6e>
c0008f1e:	b0 00                	mov    al,0x0
c0008f20:	a2 61 c6 02 c0       	mov    ds:0xc002c661,al
c0008f25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f28:	83 c0 01             	add    eax,0x1
c0008f2b:	8a 00                	mov    al,BYTE PTR [eax]
c0008f2d:	0f be c0             	movsx  eax,al
c0008f30:	83 e8 30             	sub    eax,0x30
c0008f33:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f3b:	83 c0 03             	add    eax,0x3
c0008f3e:	8a 00                	mov    al,BYTE PTR [eax]
c0008f40:	0f be c0             	movsx  eax,al
c0008f43:	83 f8 2e             	cmp    eax,0x2e
c0008f46:	75 2e                	jne    c0008f76 <KeUpdateTimezone(char const*)+0xc4>
c0008f48:	8b 15 64 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c664
c0008f4e:	89 d0                	mov    eax,edx
c0008f50:	c1 e0 02             	shl    eax,0x2
c0008f53:	01 d0                	add    eax,edx
c0008f55:	01 c0                	add    eax,eax
c0008f57:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5f:	83 c0 02             	add    eax,0x2
c0008f62:	8a 00                	mov    al,BYTE PTR [eax]
c0008f64:	0f be c0             	movsx  eax,al
c0008f67:	8d 50 d0             	lea    edx,[eax-0x30]
c0008f6a:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0008f6f:	01 d0                	add    eax,edx
c0008f71:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f79:	8a 00                	mov    al,BYTE PTR [eax]
c0008f7b:	0f be c0             	movsx  eax,al
c0008f7e:	83 f8 2d             	cmp    eax,0x2d
c0008f81:	75 26                	jne    c0008fa9 <KeUpdateTimezone(char const*)+0xf7>
c0008f83:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0008f88:	f7 d8                	neg    eax
c0008f8a:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0008f8f:	eb 18                	jmp    c0008fa9 <KeUpdateTimezone(char const*)+0xf7>
c0008f91:	c6 05 60 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c660,0x0
c0008f98:	c6 05 61 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c661,0x0
c0008f9f:	c7 05 64 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c664,0x0
c0008fa9:	90                   	nop
c0008faa:	5d                   	pop    ebp
c0008fab:	c3                   	ret    

c0008fac <KeSetTimezone(char const*)>:
c0008fac:	55                   	push   ebp
c0008fad:	89 e5                	mov    ebp,esp
c0008faf:	83 ec 18             	sub    esp,0x18
c0008fb2:	83 ec 0c             	sub    esp,0xc
c0008fb5:	68 74 38 02 c0       	push   0xc0023874
c0008fba:	e8 7d 44 00 00       	call   c000d43c <CmOpen(char const*)>
c0008fbf:	83 c4 10             	add    esp,0x10
c0008fc2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008fc5:	83 ec 08             	sub    esp,0x8
c0008fc8:	68 99 38 02 c0       	push   0xc0023899
c0008fcd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fd0:	e8 67 50 00 00       	call   c000e03c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008fd5:	83 c4 10             	add    esp,0x10
c0008fd8:	83 ec 04             	sub    esp,0x4
c0008fdb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fde:	50                   	push   eax
c0008fdf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fe2:	e8 27 49 00 00       	call   c000d90e <CmSetString(Reghive_Tag*, int, char const*)>
c0008fe7:	83 c4 10             	add    esp,0x10
c0008fea:	83 ec 0c             	sub    esp,0xc
c0008fed:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008ff0:	e8 65 45 00 00       	call   c000d55a <CmClose(Reghive_Tag*)>
c0008ff5:	83 c4 10             	add    esp,0x10
c0008ff8:	83 ec 0c             	sub    esp,0xc
c0008ffb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008ffe:	e8 af fe ff ff       	call   c0008eb2 <KeUpdateTimezone(char const*)>
c0009003:	83 c4 10             	add    esp,0x10
c0009006:	90                   	nop
c0009007:	c9                   	leave  
c0009008:	c3                   	ret    

c0009009 <KeSetTimezone(int)>:
c0009009:	55                   	push   ebp
c000900a:	89 e5                	mov    ebp,esp
c000900c:	83 ec 18             	sub    esp,0x18
c000900f:	83 ec 0c             	sub    esp,0xc
c0009012:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009015:	e8 fb fd ff ff       	call   c0008e15 <KeGetTimezoneStringFromID(int)>
c000901a:	83 c4 10             	add    esp,0x10
c000901d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009020:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009024:	74 12                	je     c0009038 <KeSetTimezone(int)+0x2f>
c0009026:	83 ec 0c             	sub    esp,0xc
c0009029:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000902c:	e8 7b ff ff ff       	call   c0008fac <KeSetTimezone(char const*)>
c0009031:	83 c4 10             	add    esp,0x10
c0009034:	b0 01                	mov    al,0x1
c0009036:	eb 02                	jmp    c000903a <KeSetTimezone(int)+0x31>
c0009038:	b0 00                	mov    al,0x0
c000903a:	c9                   	leave  
c000903b:	c3                   	ret    

c000903c <KeLoadTimezone()>:
c000903c:	55                   	push   ebp
c000903d:	89 e5                	mov    ebp,esp
c000903f:	81 ec 68 02 00 00    	sub    esp,0x268
c0009045:	c6 85 98 fd ff ff 00 	mov    BYTE PTR [ebp-0x268],0x0
c000904c:	83 ec 0c             	sub    esp,0xc
c000904f:	68 74 38 02 c0       	push   0xc0023874
c0009054:	e8 e3 43 00 00       	call   c000d43c <CmOpen(char const*)>
c0009059:	83 c4 10             	add    esp,0x10
c000905c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000905f:	83 ec 08             	sub    esp,0x8
c0009062:	68 99 38 02 c0       	push   0xc0023899
c0009067:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000906a:	e8 cd 4f 00 00       	call   c000e03c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009075:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009079:	7e 18                	jle    c0009093 <KeLoadTimezone()+0x57>
c000907b:	83 ec 04             	sub    esp,0x4
c000907e:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009084:	50                   	push   eax
c0009085:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009088:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000908b:	e8 1c 45 00 00       	call   c000d5ac <CmGetString(Reghive_Tag*, int, char*)>
c0009090:	83 c4 10             	add    esp,0x10
c0009093:	83 ec 0c             	sub    esp,0xc
c0009096:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009099:	e8 bc 44 00 00       	call   c000d55a <CmClose(Reghive_Tag*)>
c000909e:	83 c4 10             	add    esp,0x10
c00090a1:	83 ec 0c             	sub    esp,0xc
c00090a4:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c00090aa:	50                   	push   eax
c00090ab:	e8 02 fe ff ff       	call   c0008eb2 <KeUpdateTimezone(char const*)>
c00090b0:	83 c4 10             	add    esp,0x10
c00090b3:	90                   	nop
c00090b4:	c9                   	leave  
c00090b5:	c3                   	ret    

c00090b6 <Clock::Clock(char const*)>:
c00090b6:	83 ec 0c             	sub    esp,0xc
c00090b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090bd:	83 ec 08             	sub    esp,0x8
c00090c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c4:	50                   	push   eax
c00090c5:	e8 ec 0a 00 00       	call   c0009bb6 <Device::Device(char const*)>
c00090ca:	83 c4 10             	add    esp,0x10
c00090cd:	ba f8 38 02 c0       	mov    edx,0xc00238f8
c00090d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d6:	89 10                	mov    DWORD PTR [eax],edx
c00090d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090dc:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00090e6:	90                   	nop
c00090e7:	83 c4 0c             	add    esp,0xc
c00090ea:	c3                   	ret    
c00090eb:	90                   	nop

c00090ec <Clock::~Clock()>:
c00090ec:	83 ec 0c             	sub    esp,0xc
c00090ef:	ba f8 38 02 c0       	mov    edx,0xc00238f8
c00090f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f8:	89 10                	mov    DWORD PTR [eax],edx
c00090fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090fe:	83 ec 0c             	sub    esp,0xc
c0009101:	50                   	push   eax
c0009102:	e8 4f 08 00 00       	call   c0009956 <Device::~Device()>
c0009107:	83 c4 10             	add    esp,0x10
c000910a:	90                   	nop
c000910b:	83 c4 0c             	add    esp,0xc
c000910e:	c3                   	ret    
c000910f:	90                   	nop

c0009110 <Clock::~Clock()>:
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	83 ec 0c             	sub    esp,0xc
c0009116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000911a:	e8 cd ff ff ff       	call   c00090ec <Clock::~Clock()>
c000911f:	83 c4 10             	add    esp,0x10
c0009122:	83 ec 08             	sub    esp,0x8
c0009125:	68 58 01 00 00       	push   0x158
c000912a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000912e:	e8 b6 42 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0009133:	83 c4 10             	add    esp,0x10
c0009136:	83 c4 0c             	add    esp,0xc
c0009139:	c3                   	ret    

c000913a <Clock::timeInSecondsLocal()>:
c000913a:	55                   	push   ebp
c000913b:	89 e5                	mov    ebp,esp
c000913d:	53                   	push   ebx
c000913e:	83 ec 04             	sub    esp,0x4
c0009141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009144:	8b 00                	mov    eax,DWORD PTR [eax]
c0009146:	83 c0 24             	add    eax,0x24
c0009149:	8b 00                	mov    eax,DWORD PTR [eax]
c000914b:	83 ec 0c             	sub    esp,0xc
c000914e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009151:	ff d0                	call   eax
c0009153:	83 c4 10             	add    esp,0x10
c0009156:	89 c1                	mov    ecx,eax
c0009158:	89 d3                	mov    ebx,edx
c000915a:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c000915f:	0f b6 d0             	movzx  edx,al
c0009162:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0009167:	01 c2                	add    edx,eax
c0009169:	89 d0                	mov    eax,edx
c000916b:	01 c0                	add    eax,eax
c000916d:	01 d0                	add    eax,edx
c000916f:	01 c0                	add    eax,eax
c0009171:	01 d0                	add    eax,edx
c0009173:	c1 e0 05             	shl    eax,0x5
c0009176:	01 d0                	add    eax,edx
c0009178:	c1 e0 04             	shl    eax,0x4
c000917b:	89 c2                	mov    edx,eax
c000917d:	c1 fa 1f             	sar    edx,0x1f
c0009180:	01 c1                	add    ecx,eax
c0009182:	11 d3                	adc    ebx,edx
c0009184:	a0 61 c6 02 c0       	mov    al,ds:0xc002c661
c0009189:	0f b6 c0             	movzx  eax,al
c000918c:	85 c0                	test   eax,eax
c000918e:	74 0c                	je     c000919c <Clock::timeInSecondsLocal()+0x62>
c0009190:	b8 08 07 00 00       	mov    eax,0x708
c0009195:	ba 00 00 00 00       	mov    edx,0x0
c000919a:	eb 0a                	jmp    c00091a6 <Clock::timeInSecondsLocal()+0x6c>
c000919c:	b8 00 00 00 00       	mov    eax,0x0
c00091a1:	ba 00 00 00 00       	mov    edx,0x0
c00091a6:	01 c8                	add    eax,ecx
c00091a8:	11 da                	adc    edx,ebx
c00091aa:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00091ad:	c9                   	leave  
c00091ae:	c3                   	ret    
c00091af:	90                   	nop

c00091b0 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00091b0:	55                   	push   ebp
c00091b1:	89 e5                	mov    ebp,esp
c00091b3:	56                   	push   esi
c00091b4:	53                   	push   ebx
c00091b5:	83 ec 10             	sub    esp,0x10
c00091b8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00091bb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00091be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00091c1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00091c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00091c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00091c9:	83 c0 2c             	add    eax,0x2c
c00091cc:	8b 30                	mov    esi,DWORD PTR [eax]
c00091ce:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c00091d3:	0f b6 d0             	movzx  edx,al
c00091d6:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c00091db:	01 c2                	add    edx,eax
c00091dd:	89 d0                	mov    eax,edx
c00091df:	01 c0                	add    eax,eax
c00091e1:	01 d0                	add    eax,edx
c00091e3:	01 c0                	add    eax,eax
c00091e5:	01 d0                	add    eax,edx
c00091e7:	c1 e0 05             	shl    eax,0x5
c00091ea:	01 d0                	add    eax,edx
c00091ec:	c1 e0 04             	shl    eax,0x4
c00091ef:	89 c2                	mov    edx,eax
c00091f1:	c1 fa 1f             	sar    edx,0x1f
c00091f4:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00091f7:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
c00091fa:	29 c1                	sub    ecx,eax
c00091fc:	19 d3                	sbb    ebx,edx
c00091fe:	a0 61 c6 02 c0       	mov    al,ds:0xc002c661
c0009203:	0f b6 c0             	movzx  eax,al
c0009206:	85 c0                	test   eax,eax
c0009208:	74 0c                	je     c0009216 <Clock::setTimeInSecondsLocal(unsigned long long)+0x66>
c000920a:	b8 08 07 00 00       	mov    eax,0x708
c000920f:	ba 00 00 00 00       	mov    edx,0x0
c0009214:	eb 0a                	jmp    c0009220 <Clock::setTimeInSecondsLocal(unsigned long long)+0x70>
c0009216:	b8 00 00 00 00       	mov    eax,0x0
c000921b:	ba 00 00 00 00       	mov    edx,0x0
c0009220:	29 c1                	sub    ecx,eax
c0009222:	19 d3                	sbb    ebx,edx
c0009224:	89 c8                	mov    eax,ecx
c0009226:	89 da                	mov    edx,ebx
c0009228:	83 ec 04             	sub    esp,0x4
c000922b:	52                   	push   edx
c000922c:	50                   	push   eax
c000922d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009230:	ff d6                	call   esi
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009238:	5b                   	pop    ebx
c0009239:	5e                   	pop    esi
c000923a:	5d                   	pop    ebp
c000923b:	c3                   	ret    

c000923c <KeDatetimeToSeconds(datetime_t)>:
c000923c:	55                   	push   ebp
c000923d:	89 e5                	mov    ebp,esp
c000923f:	53                   	push   ebx
c0009240:	83 ec 24             	sub    esp,0x24
c0009243:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009247:	2d 6c 07 00 00       	sub    eax,0x76c
c000924c:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0009250:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009253:	83 e8 01             	sub    eax,0x1
c0009256:	88 45 09             	mov    BYTE PTR [ebp+0x9],al
c0009259:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009260:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0009267:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000926e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0009275:	8a 45 0e             	mov    al,BYTE PTR [ebp+0xe]
c0009278:	0f b6 c8             	movzx  ecx,al
c000927b:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000927e:	0f b6 d0             	movzx  edx,al
c0009281:	89 d0                	mov    eax,edx
c0009283:	01 c0                	add    eax,eax
c0009285:	01 d0                	add    eax,edx
c0009287:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000928e:	01 d0                	add    eax,edx
c0009290:	c1 e0 02             	shl    eax,0x2
c0009293:	01 c1                	add    ecx,eax
c0009295:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0009298:	0f b6 d0             	movzx  edx,al
c000929b:	89 d0                	mov    eax,edx
c000929d:	01 c0                	add    eax,eax
c000929f:	01 d0                	add    eax,edx
c00092a1:	01 c0                	add    eax,eax
c00092a3:	01 d0                	add    eax,edx
c00092a5:	c1 e0 05             	shl    eax,0x5
c00092a8:	01 d0                	add    eax,edx
c00092aa:	c1 e0 04             	shl    eax,0x4
c00092ad:	01 c8                	add    eax,ecx
c00092af:	89 c2                	mov    edx,eax
c00092b1:	c1 fa 1f             	sar    edx,0x1f
c00092b4:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c00092b7:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c00092ba:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
c00092bd:	0f b6 c0             	movzx  eax,al
c00092c0:	83 e8 01             	sub    eax,0x1
c00092c3:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00092c6:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00092c9:	0f b6 c0             	movzx  eax,al
c00092cc:	8b 04 85 c0 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc740]
c00092d3:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00092d6:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00092d9:	0f b6 c0             	movzx  eax,al
c00092dc:	83 f8 01             	cmp    eax,0x1
c00092df:	76 7c                	jbe    c000935d <KeDatetimeToSeconds(datetime_t)+0x121>
c00092e1:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092e5:	0f b7 c0             	movzx  eax,ax
c00092e8:	83 e0 03             	and    eax,0x3
c00092eb:	85 c0                	test   eax,eax
c00092ed:	75 6e                	jne    c000935d <KeDatetimeToSeconds(datetime_t)+0x121>
c00092ef:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092f3:	0f b7 c8             	movzx  ecx,ax
c00092f6:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00092fb:	89 c8                	mov    eax,ecx
c00092fd:	f7 e2                	mul    edx
c00092ff:	c1 ea 05             	shr    edx,0x5
c0009302:	89 d0                	mov    eax,edx
c0009304:	c1 e0 02             	shl    eax,0x2
c0009307:	01 d0                	add    eax,edx
c0009309:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009310:	01 d0                	add    eax,edx
c0009312:	c1 e0 02             	shl    eax,0x2
c0009315:	29 c1                	sub    ecx,eax
c0009317:	89 c8                	mov    eax,ecx
c0009319:	0f b7 c0             	movzx  eax,ax
c000931c:	85 c0                	test   eax,eax
c000931e:	75 39                	jne    c0009359 <KeDatetimeToSeconds(datetime_t)+0x11d>
c0009320:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009324:	0f b7 c0             	movzx  eax,ax
c0009327:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000932d:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009332:	f7 e9                	imul   ecx
c0009334:	c1 fa 07             	sar    edx,0x7
c0009337:	89 c8                	mov    eax,ecx
c0009339:	c1 f8 1f             	sar    eax,0x1f
c000933c:	29 c2                	sub    edx,eax
c000933e:	89 d0                	mov    eax,edx
c0009340:	c1 e0 02             	shl    eax,0x2
c0009343:	01 d0                	add    eax,edx
c0009345:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000934c:	01 d0                	add    eax,edx
c000934e:	c1 e0 04             	shl    eax,0x4
c0009351:	29 c1                	sub    ecx,eax
c0009353:	89 ca                	mov    edx,ecx
c0009355:	85 d2                	test   edx,edx
c0009357:	75 04                	jne    c000935d <KeDatetimeToSeconds(datetime_t)+0x121>
c0009359:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000935d:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009361:	0f b7 c0             	movzx  eax,ax
c0009364:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009367:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000936a:	83 f8 46             	cmp    eax,0x46
c000936d:	0f 9f c0             	setg   al
c0009370:	0f b6 c0             	movzx  eax,al
c0009373:	85 c0                	test   eax,eax
c0009375:	0f 84 a4 00 00 00    	je     c000941f <KeDatetimeToSeconds(datetime_t)+0x1e3>
c000937b:	c7 45 e0 46 00 00 00 	mov    DWORD PTR [ebp-0x20],0x46
c0009382:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009386:	0f b7 d0             	movzx  edx,ax
c0009389:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000938c:	39 c2                	cmp    edx,eax
c000938e:	0f 8e b8 01 00 00    	jle    c000954c <KeDatetimeToSeconds(datetime_t)+0x310>
c0009394:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009397:	83 e0 03             	and    eax,0x3
c000939a:	85 c0                	test   eax,eax
c000939c:	75 6b                	jne    c0009409 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c000939e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00093a1:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00093a6:	f7 e9                	imul   ecx
c00093a8:	c1 fa 05             	sar    edx,0x5
c00093ab:	89 c8                	mov    eax,ecx
c00093ad:	c1 f8 1f             	sar    eax,0x1f
c00093b0:	29 c2                	sub    edx,eax
c00093b2:	89 d0                	mov    eax,edx
c00093b4:	c1 e0 02             	shl    eax,0x2
c00093b7:	01 d0                	add    eax,edx
c00093b9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00093c0:	01 d0                	add    eax,edx
c00093c2:	c1 e0 02             	shl    eax,0x2
c00093c5:	29 c1                	sub    ecx,eax
c00093c7:	89 ca                	mov    edx,ecx
c00093c9:	85 d2                	test   edx,edx
c00093cb:	75 35                	jne    c0009402 <KeDatetimeToSeconds(datetime_t)+0x1c6>
c00093cd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093d0:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00093d6:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00093db:	f7 e9                	imul   ecx
c00093dd:	c1 fa 07             	sar    edx,0x7
c00093e0:	89 c8                	mov    eax,ecx
c00093e2:	c1 f8 1f             	sar    eax,0x1f
c00093e5:	29 c2                	sub    edx,eax
c00093e7:	89 d0                	mov    eax,edx
c00093e9:	c1 e0 02             	shl    eax,0x2
c00093ec:	01 d0                	add    eax,edx
c00093ee:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00093f5:	01 d0                	add    eax,edx
c00093f7:	c1 e0 04             	shl    eax,0x4
c00093fa:	29 c1                	sub    ecx,eax
c00093fc:	89 ca                	mov    edx,ecx
c00093fe:	85 d2                	test   edx,edx
c0009400:	75 07                	jne    c0009409 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c0009402:	b8 6e 01 00 00       	mov    eax,0x16e
c0009407:	eb 05                	jmp    c000940e <KeDatetimeToSeconds(datetime_t)+0x1d2>
c0009409:	b8 6d 01 00 00       	mov    eax,0x16d
c000940e:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c0009411:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009414:	83 c0 01             	add    eax,0x1
c0009417:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000941a:	e9 63 ff ff ff       	jmp    c0009382 <KeDatetimeToSeconds(datetime_t)+0x146>
c000941f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009422:	83 f8 45             	cmp    eax,0x45
c0009425:	0f 8f 21 01 00 00    	jg     c000954c <KeDatetimeToSeconds(datetime_t)+0x310>
c000942b:	c7 45 e0 45 00 00 00 	mov    DWORD PTR [ebp-0x20],0x45
c0009432:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009436:	0f b7 d0             	movzx  edx,ax
c0009439:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000943c:	39 c2                	cmp    edx,eax
c000943e:	0f 8d 8b 00 00 00    	jge    c00094cf <KeDatetimeToSeconds(datetime_t)+0x293>
c0009444:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009447:	83 e0 03             	and    eax,0x3
c000944a:	85 c0                	test   eax,eax
c000944c:	75 6b                	jne    c00094b9 <KeDatetimeToSeconds(datetime_t)+0x27d>
c000944e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009451:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009456:	f7 e9                	imul   ecx
c0009458:	c1 fa 05             	sar    edx,0x5
c000945b:	89 c8                	mov    eax,ecx
c000945d:	c1 f8 1f             	sar    eax,0x1f
c0009460:	29 c2                	sub    edx,eax
c0009462:	89 d0                	mov    eax,edx
c0009464:	c1 e0 02             	shl    eax,0x2
c0009467:	01 d0                	add    eax,edx
c0009469:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009470:	01 d0                	add    eax,edx
c0009472:	c1 e0 02             	shl    eax,0x2
c0009475:	29 c1                	sub    ecx,eax
c0009477:	89 ca                	mov    edx,ecx
c0009479:	85 d2                	test   edx,edx
c000947b:	75 35                	jne    c00094b2 <KeDatetimeToSeconds(datetime_t)+0x276>
c000947d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009480:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009486:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000948b:	f7 e9                	imul   ecx
c000948d:	c1 fa 07             	sar    edx,0x7
c0009490:	89 c8                	mov    eax,ecx
c0009492:	c1 f8 1f             	sar    eax,0x1f
c0009495:	29 c2                	sub    edx,eax
c0009497:	89 d0                	mov    eax,edx
c0009499:	c1 e0 02             	shl    eax,0x2
c000949c:	01 d0                	add    eax,edx
c000949e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094a5:	01 d0                	add    eax,edx
c00094a7:	c1 e0 04             	shl    eax,0x4
c00094aa:	29 c1                	sub    ecx,eax
c00094ac:	89 ca                	mov    edx,ecx
c00094ae:	85 d2                	test   edx,edx
c00094b0:	75 07                	jne    c00094b9 <KeDatetimeToSeconds(datetime_t)+0x27d>
c00094b2:	b8 6e 01 00 00       	mov    eax,0x16e
c00094b7:	eb 05                	jmp    c00094be <KeDatetimeToSeconds(datetime_t)+0x282>
c00094b9:	b8 6d 01 00 00       	mov    eax,0x16d
c00094be:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c00094c1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094c4:	83 e8 01             	sub    eax,0x1
c00094c7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00094ca:	e9 63 ff ff ff       	jmp    c0009432 <KeDatetimeToSeconds(datetime_t)+0x1f6>
c00094cf:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094d2:	83 e0 03             	and    eax,0x3
c00094d5:	85 c0                	test   eax,eax
c00094d7:	75 6b                	jne    c0009544 <KeDatetimeToSeconds(datetime_t)+0x308>
c00094d9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00094dc:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00094e1:	f7 e9                	imul   ecx
c00094e3:	c1 fa 05             	sar    edx,0x5
c00094e6:	89 c8                	mov    eax,ecx
c00094e8:	c1 f8 1f             	sar    eax,0x1f
c00094eb:	29 c2                	sub    edx,eax
c00094ed:	89 d0                	mov    eax,edx
c00094ef:	c1 e0 02             	shl    eax,0x2
c00094f2:	01 d0                	add    eax,edx
c00094f4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094fb:	01 d0                	add    eax,edx
c00094fd:	c1 e0 02             	shl    eax,0x2
c0009500:	29 c1                	sub    ecx,eax
c0009502:	89 ca                	mov    edx,ecx
c0009504:	85 d2                	test   edx,edx
c0009506:	75 35                	jne    c000953d <KeDatetimeToSeconds(datetime_t)+0x301>
c0009508:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000950b:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009511:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009516:	f7 e9                	imul   ecx
c0009518:	c1 fa 07             	sar    edx,0x7
c000951b:	89 c8                	mov    eax,ecx
c000951d:	c1 f8 1f             	sar    eax,0x1f
c0009520:	29 c2                	sub    edx,eax
c0009522:	89 d0                	mov    eax,edx
c0009524:	c1 e0 02             	shl    eax,0x2
c0009527:	01 d0                	add    eax,edx
c0009529:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009530:	01 d0                	add    eax,edx
c0009532:	c1 e0 04             	shl    eax,0x4
c0009535:	29 c1                	sub    ecx,eax
c0009537:	89 ca                	mov    edx,ecx
c0009539:	85 d2                	test   edx,edx
c000953b:	75 07                	jne    c0009544 <KeDatetimeToSeconds(datetime_t)+0x308>
c000953d:	b8 6e 01 00 00       	mov    eax,0x16e
c0009542:	eb 05                	jmp    c0009549 <KeDatetimeToSeconds(datetime_t)+0x30d>
c0009544:	b8 6d 01 00 00       	mov    eax,0x16d
c0009549:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c000954c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000954f:	89 c2                	mov    edx,eax
c0009551:	c1 fa 1f             	sar    edx,0x1f
c0009554:	69 da 80 51 01 00    	imul   ebx,edx,0x15180
c000955a:	6b c8 00             	imul   ecx,eax,0x0
c000955d:	01 d9                	add    ecx,ebx
c000955f:	bb 80 51 01 00       	mov    ebx,0x15180
c0009564:	f7 e3                	mul    ebx
c0009566:	01 d1                	add    ecx,edx
c0009568:	89 ca                	mov    edx,ecx
c000956a:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c000956d:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009570:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009573:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0009576:	83 c4 24             	add    esp,0x24
c0009579:	5b                   	pop    ebx
c000957a:	5d                   	pop    ebp
c000957b:	c3                   	ret    

c000957c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000957c:	55                   	push   ebp
c000957d:	89 e5                	mov    ebp,esp
c000957f:	56                   	push   esi
c0009580:	53                   	push   ebx
c0009581:	83 ec 20             	sub    esp,0x20
c0009584:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0009587:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000958a:	e8 ad fc ff ff       	call   c000923c <KeDatetimeToSeconds(datetime_t)>
c000958f:	83 c4 08             	add    esp,0x8
c0009592:	89 c3                	mov    ebx,eax
c0009594:	89 d6                	mov    esi,edx
c0009596:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c000959b:	0f b6 d0             	movzx  edx,al
c000959e:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c00095a3:	01 c2                	add    edx,eax
c00095a5:	89 d0                	mov    eax,edx
c00095a7:	01 c0                	add    eax,eax
c00095a9:	01 d0                	add    eax,edx
c00095ab:	01 c0                	add    eax,eax
c00095ad:	01 d0                	add    eax,edx
c00095af:	c1 e0 05             	shl    eax,0x5
c00095b2:	01 d0                	add    eax,edx
c00095b4:	c1 e0 04             	shl    eax,0x4
c00095b7:	89 c2                	mov    edx,eax
c00095b9:	c1 fa 1f             	sar    edx,0x1f
c00095bc:	29 c3                	sub    ebx,eax
c00095be:	19 d6                	sbb    esi,edx
c00095c0:	a0 61 c6 02 c0       	mov    al,ds:0xc002c661
c00095c5:	0f b6 c0             	movzx  eax,al
c00095c8:	85 c0                	test   eax,eax
c00095ca:	74 0c                	je     c00095d8 <Clock::setTimeInDatetimeLocal(datetime_t)+0x5c>
c00095cc:	b8 08 07 00 00       	mov    eax,0x708
c00095d1:	ba 00 00 00 00       	mov    edx,0x0
c00095d6:	eb 0a                	jmp    c00095e2 <Clock::setTimeInDatetimeLocal(datetime_t)+0x66>
c00095d8:	b8 00 00 00 00       	mov    eax,0x0
c00095dd:	ba 00 00 00 00       	mov    edx,0x0
c00095e2:	29 c3                	sub    ebx,eax
c00095e4:	19 d6                	sbb    esi,edx
c00095e6:	89 d8                	mov    eax,ebx
c00095e8:	89 f2                	mov    edx,esi
c00095ea:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00095ed:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00095f0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00095f3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00095f6:	89 d0                	mov    eax,edx
c00095f8:	31 d2                	xor    edx,edx
c00095fa:	89 c3                	mov    ebx,eax
c00095fc:	89 d6                	mov    esi,edx
c00095fe:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009601:	80 e5 ff             	and    ch,0xff
c0009604:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0009607:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c000960a:	83 e1 00             	and    ecx,0x0
c000960d:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0009610:	83 ec 0c             	sub    esp,0xc
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0009618:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000961b:	68 ae 38 02 c0       	push   0xc00238ae
c0009620:	e8 57 d9 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009625:	83 c4 20             	add    esp,0x20
c0009628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000962b:	8b 00                	mov    eax,DWORD PTR [eax]
c000962d:	83 c0 2c             	add    eax,0x2c
c0009630:	8b 00                	mov    eax,DWORD PTR [eax]
c0009632:	83 ec 04             	sub    esp,0x4
c0009635:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009638:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000963b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000963e:	ff d0                	call   eax
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009646:	5b                   	pop    ebx
c0009647:	5e                   	pop    esi
c0009648:	5d                   	pop    ebp
c0009649:	c3                   	ret    

c000964a <KeSecondsToDatetime(unsigned long long)>:
c000964a:	55                   	push   ebp
c000964b:	89 e5                	mov    ebp,esp
c000964d:	83 ec 48             	sub    esp,0x48
c0009650:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009653:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0009656:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009659:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c000965c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c000965f:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0009662:	6a 00                	push   0x0
c0009664:	68 80 51 01 00       	push   0x15180
c0009669:	52                   	push   edx
c000966a:	50                   	push   eax
c000966b:	e8 c4 86 01 00       	call   c0021d34 <__udivdi3>
c0009670:	83 c4 10             	add    esp,0x10
c0009673:	05 6c fa 0a 00       	add    eax,0xafa6c
c0009678:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000967b:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c000967e:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0009681:	6a 00                	push   0x0
c0009683:	68 80 51 01 00       	push   0x15180
c0009688:	52                   	push   edx
c0009689:	50                   	push   eax
c000968a:	e8 a5 87 01 00       	call   c0021e34 <__umoddi3>
c000968f:	83 c4 10             	add    esp,0x10
c0009692:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009695:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009699:	79 0b                	jns    c00096a6 <KeSecondsToDatetime(unsigned long long)+0x5c>
c000969b:	81 45 f0 80 51 01 00 	add    DWORD PTR [ebp-0x10],0x15180
c00096a2:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
c00096a6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096a9:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c00096ae:	89 c8                	mov    eax,ecx
c00096b0:	f7 ea                	imul   edx
c00096b2:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096b5:	c1 f8 0b             	sar    eax,0xb
c00096b8:	89 c2                	mov    edx,eax
c00096ba:	89 c8                	mov    eax,ecx
c00096bc:	c1 f8 1f             	sar    eax,0x1f
c00096bf:	29 c2                	sub    edx,eax
c00096c1:	89 d0                	mov    eax,edx
c00096c3:	88 c2                	mov    dl,al
c00096c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096c8:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c00096cb:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096ce:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c00096d3:	89 c8                	mov    eax,ecx
c00096d5:	f7 ea                	imul   edx
c00096d7:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096da:	c1 f8 0b             	sar    eax,0xb
c00096dd:	89 c2                	mov    edx,eax
c00096df:	89 c8                	mov    eax,ecx
c00096e1:	c1 f8 1f             	sar    eax,0x1f
c00096e4:	29 c2                	sub    edx,eax
c00096e6:	89 d0                	mov    eax,edx
c00096e8:	01 c0                	add    eax,eax
c00096ea:	01 d0                	add    eax,edx
c00096ec:	01 c0                	add    eax,eax
c00096ee:	01 d0                	add    eax,edx
c00096f0:	c1 e0 05             	shl    eax,0x5
c00096f3:	01 d0                	add    eax,edx
c00096f5:	c1 e0 04             	shl    eax,0x4
c00096f8:	29 c1                	sub    ecx,eax
c00096fa:	89 c8                	mov    eax,ecx
c00096fc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00096ff:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009702:	ba 89 88 88 88       	mov    edx,0x88888889
c0009707:	89 c8                	mov    eax,ecx
c0009709:	f7 ea                	imul   edx
c000970b:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000970e:	c1 f8 05             	sar    eax,0x5
c0009711:	89 c2                	mov    edx,eax
c0009713:	89 c8                	mov    eax,ecx
c0009715:	c1 f8 1f             	sar    eax,0x1f
c0009718:	29 c2                	sub    edx,eax
c000971a:	89 d0                	mov    eax,edx
c000971c:	88 c2                	mov    dl,al
c000971e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009721:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009724:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009727:	ba 89 88 88 88       	mov    edx,0x88888889
c000972c:	89 c8                	mov    eax,ecx
c000972e:	f7 ea                	imul   edx
c0009730:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009733:	c1 f8 05             	sar    eax,0x5
c0009736:	89 c2                	mov    edx,eax
c0009738:	89 c8                	mov    eax,ecx
c000973a:	c1 f8 1f             	sar    eax,0x1f
c000973d:	29 c2                	sub    edx,eax
c000973f:	89 d0                	mov    eax,edx
c0009741:	01 c0                	add    eax,eax
c0009743:	01 d0                	add    eax,edx
c0009745:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000974c:	01 d0                	add    eax,edx
c000974e:	c1 e0 02             	shl    eax,0x2
c0009751:	29 c1                	sub    ecx,eax
c0009753:	89 ca                	mov    edx,ecx
c0009755:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009758:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
c000975b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000975f:	79 20                	jns    c0009781 <KeSecondsToDatetime(unsigned long long)+0x137>
c0009761:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009764:	8d 88 50 c5 fd ff    	lea    ecx,[eax-0x23ab0]
c000976a:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c000976f:	89 c8                	mov    eax,ecx
c0009771:	f7 ea                	imul   edx
c0009773:	c1 fa 0f             	sar    edx,0xf
c0009776:	89 c8                	mov    eax,ecx
c0009778:	c1 f8 1f             	sar    eax,0x1f
c000977b:	29 c2                	sub    edx,eax
c000977d:	89 d0                	mov    eax,edx
c000977f:	eb 18                	jmp    c0009799 <KeSecondsToDatetime(unsigned long long)+0x14f>
c0009781:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c0009784:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009789:	89 c8                	mov    eax,ecx
c000978b:	f7 ea                	imul   edx
c000978d:	c1 fa 0f             	sar    edx,0xf
c0009790:	89 c8                	mov    eax,ecx
c0009792:	c1 f8 1f             	sar    eax,0x1f
c0009795:	29 c2                	sub    edx,eax
c0009797:	89 d0                	mov    eax,edx
c0009799:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000979c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000979f:	89 d0                	mov    eax,edx
c00097a1:	c1 e0 03             	shl    eax,0x3
c00097a4:	01 d0                	add    eax,edx
c00097a6:	c1 e0 04             	shl    eax,0x4
c00097a9:	01 d0                	add    eax,edx
c00097ab:	c1 e0 04             	shl    eax,0x4
c00097ae:	29 d0                	sub    eax,edx
c00097b0:	89 c2                	mov    edx,eax
c00097b2:	c1 e2 06             	shl    edx,0x6
c00097b5:	29 c2                	sub    edx,eax
c00097b7:	89 d0                	mov    eax,edx
c00097b9:	f7 d8                	neg    eax
c00097bb:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00097be:	01 d0                	add    eax,edx
c00097c0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00097c3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097c6:	c1 e8 02             	shr    eax,0x2
c00097c9:	ba d9 7c c6 59       	mov    edx,0x59c67cd9
c00097ce:	f7 e2                	mul    edx
c00097d0:	c1 ea 07             	shr    edx,0x7
c00097d3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097d6:	29 d0                	sub    eax,edx
c00097d8:	89 c1                	mov    ecx,eax
c00097da:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097dd:	c1 e8 02             	shr    eax,0x2
c00097e0:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c00097e5:	f7 e2                	mul    edx
c00097e7:	89 d0                	mov    eax,edx
c00097e9:	c1 e8 0b             	shr    eax,0xb
c00097ec:	01 c1                	add    ecx,eax
c00097ee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097f1:	c1 e8 04             	shr    eax,0x4
c00097f4:	ba 41 d6 72 00       	mov    edx,0x72d641
c00097f9:	f7 e2                	mul    edx
c00097fb:	89 d0                	mov    eax,edx
c00097fd:	c1 e8 04             	shr    eax,0x4
c0009800:	29 c1                	sub    ecx,eax
c0009802:	ba 61 f3 19 67       	mov    edx,0x6719f361
c0009807:	89 c8                	mov    eax,ecx
c0009809:	f7 e2                	mul    edx
c000980b:	89 c8                	mov    eax,ecx
c000980d:	29 d0                	sub    eax,edx
c000980f:	d1 e8                	shr    eax,1
c0009811:	01 d0                	add    eax,edx
c0009813:	c1 e8 08             	shr    eax,0x8
c0009816:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0009819:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000981c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c0009821:	f7 e2                	mul    edx
c0009823:	89 d1                	mov    ecx,edx
c0009825:	c1 e9 05             	shr    ecx,0x5
c0009828:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000982b:	89 d0                	mov    eax,edx
c000982d:	c1 e0 03             	shl    eax,0x3
c0009830:	01 d0                	add    eax,edx
c0009832:	c1 e0 03             	shl    eax,0x3
c0009835:	01 d0                	add    eax,edx
c0009837:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000983e:	01 c2                	add    edx,eax
c0009840:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0009843:	c1 e8 02             	shr    eax,0x2
c0009846:	01 d0                	add    eax,edx
c0009848:	29 c1                	sub    ecx,eax
c000984a:	89 ca                	mov    edx,ecx
c000984c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000984f:	01 d0                	add    eax,edx
c0009851:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009854:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0009857:	89 d0                	mov    eax,edx
c0009859:	c1 e0 02             	shl    eax,0x2
c000985c:	01 d0                	add    eax,edx
c000985e:	83 c0 02             	add    eax,0x2
c0009861:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c0009866:	f7 e2                	mul    edx
c0009868:	89 d0                	mov    eax,edx
c000986a:	c1 e8 07             	shr    eax,0x7
c000986d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0009870:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0009873:	89 d0                	mov    eax,edx
c0009875:	c1 e0 03             	shl    eax,0x3
c0009878:	01 d0                	add    eax,edx
c000987a:	01 c0                	add    eax,eax
c000987c:	01 d0                	add    eax,edx
c000987e:	c1 e0 03             	shl    eax,0x3
c0009881:	01 d0                	add    eax,edx
c0009883:	83 c0 02             	add    eax,0x2
c0009886:	ba cd cc cc cc       	mov    edx,0xcccccccd
c000988b:	f7 e2                	mul    edx
c000988d:	c1 ea 02             	shr    edx,0x2
c0009890:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009893:	29 d0                	sub    eax,edx
c0009895:	83 c0 01             	add    eax,0x1
c0009898:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000989b:	83 7d dc 09          	cmp    DWORD PTR [ebp-0x24],0x9
c000989f:	77 07                	ja     c00098a8 <KeSecondsToDatetime(unsigned long long)+0x25e>
c00098a1:	b8 02 00 00 00       	mov    eax,0x2
c00098a6:	eb 05                	jmp    c00098ad <KeSecondsToDatetime(unsigned long long)+0x263>
c00098a8:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
c00098ad:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
c00098b0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00098b3:	89 d0                	mov    eax,edx
c00098b5:	c1 e0 02             	shl    eax,0x2
c00098b8:	01 d0                	add    eax,edx
c00098ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00098c1:	01 d0                	add    eax,edx
c00098c3:	c1 e0 04             	shl    eax,0x4
c00098c6:	89 c2                	mov    edx,eax
c00098c8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00098cb:	01 c2                	add    edx,eax
c00098cd:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
c00098d1:	0f 96 c0             	setbe  al
c00098d4:	0f b6 c0             	movzx  eax,al
c00098d7:	01 d0                	add    eax,edx
c00098d9:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00098dc:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00098df:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00098e2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00098e6:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00098e9:	83 c0 01             	add    eax,0x1
c00098ec:	88 c2                	mov    dl,al
c00098ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098f1:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00098f4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00098f7:	88 c2                	mov    dl,al
c00098f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098fc:	88 10                	mov    BYTE PTR [eax],dl
c00098fe:	90                   	nop
c00098ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009902:	c9                   	leave  
c0009903:	c2 04 00             	ret    0x4

c0009906 <Clock::timeInDatetimeLocal()>:
c0009906:	55                   	push   ebp
c0009907:	89 e5                	mov    ebp,esp
c0009909:	83 ec 08             	sub    esp,0x8
c000990c:	83 ec 0c             	sub    esp,0xc
c000990f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009912:	e8 23 f8 ff ff       	call   c000913a <Clock::timeInSecondsLocal()>
c0009917:	83 c4 10             	add    esp,0x10
c000991a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000991d:	83 ec 04             	sub    esp,0x4
c0009920:	52                   	push   edx
c0009921:	50                   	push   eax
c0009922:	51                   	push   ecx
c0009923:	e8 22 fd ff ff       	call   c000964a <KeSecondsToDatetime(unsigned long long)>
c0009928:	83 c4 0c             	add    esp,0xc
c000992b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000992e:	c9                   	leave  
c000992f:	c2 04 00             	ret    0x4

c0009932 <Device::hibernate()>:
c0009932:	c3                   	ret    
c0009933:	90                   	nop

c0009934 <Device::wake()>:
c0009934:	c3                   	ret    
c0009935:	90                   	nop

c0009936 <Device::detect()>:
c0009936:	c3                   	ret    
c0009937:	90                   	nop

c0009938 <Device::disableLegacy()>:
c0009938:	c3                   	ret    
c0009939:	90                   	nop

c000993a <Device::powerSaving(PowerSavingLevel)>:
c000993a:	c3                   	ret    
c000993b:	90                   	nop

c000993c <DriverlessDevice::close(int, int, void*)>:
c000993c:	31 c0                	xor    eax,eax
c000993e:	c3                   	ret    
c000993f:	90                   	nop

c0009940 <DriverlessDevice::detect()>:
c0009940:	c3                   	ret    
c0009941:	90                   	nop

c0009942 <DriverlessDevice::open(int, int, void*)>:
c0009942:	83 ec 18             	sub    esp,0x18
c0009945:	68 2c 39 02 c0       	push   0xc002392c
c000994a:	e8 97 66 00 00       	call   c000ffe6 <KePanic(char const*)>
c000994f:	83 c8 ff             	or     eax,0xffffffff
c0009952:	83 c4 1c             	add    esp,0x1c
c0009955:	c3                   	ret    

c0009956 <Device::~Device()>:
c0009956:	ba d0 39 02 c0       	mov    edx,0xc00239d0
c000995b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000995f:	89 10                	mov    DWORD PTR [eax],edx
c0009961:	90                   	nop
c0009962:	c3                   	ret    
c0009963:	90                   	nop

c0009964 <Device::~Device()>:
c0009964:	83 ec 0c             	sub    esp,0xc
c0009967:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000996b:	e8 e6 ff ff ff       	call   c0009956 <Device::~Device()>
c0009970:	83 c4 04             	add    esp,0x4
c0009973:	83 ec 08             	sub    esp,0x8
c0009976:	68 58 01 00 00       	push   0x158
c000997b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000997f:	e8 65 3a 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0009984:	83 c4 10             	add    esp,0x10
c0009987:	83 c4 0c             	add    esp,0xc
c000998a:	c3                   	ret    
c000998b:	90                   	nop

c000998c <Device::findAndLoadDriver()>:
c000998c:	c7 44 24 04 4a 39 02 c0 	mov    DWORD PTR [esp+0x4],0xc002394a
c0009994:	e9 e3 d5 ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c0009999:	90                   	nop

c000999a <Device::preOpenPCI(PCIDeviceInfo)>:
c000999a:	57                   	push   edi
c000999b:	b9 09 00 00 00       	mov    ecx,0x9
c00099a0:	56                   	push   esi
c00099a1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00099a5:	8d 74 24 10          	lea    esi,[esp+0x10]
c00099a9:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00099b3:	81 c7 18 01 00 00    	add    edi,0x118
c00099b9:	fc                   	cld    
c00099ba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00099bc:	5e                   	pop    esi
c00099bd:	5f                   	pop    edi
c00099be:	c3                   	ret    
c00099bf:	90                   	nop

c00099c0 <Device::preOpenACPI(void*, char*, char*)>:
c00099c0:	57                   	push   edi
c00099c1:	b9 1e 00 00 00       	mov    ecx,0x1e
c00099c6:	56                   	push   esi
c00099c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00099cf:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c00099d9:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c00099df:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c00099e5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00099e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00099eb:	b9 0e 00 00 00       	mov    ecx,0xe
c00099f0:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c00099f6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00099fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00099fc:	5e                   	pop    esi
c00099fd:	5f                   	pop    edi
c00099fe:	c3                   	ret    
c00099ff:	90                   	nop

c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0009a00:	53                   	push   ebx
c0009a01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a05:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009a09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009a0d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009a11:	0f b6 c0             	movzx  eax,al
c0009a14:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0009a18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009a1c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009a20:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009a24:	5b                   	pop    ebx
c0009a25:	e9 4b 14 01 00       	jmp    c001ae75 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c0009a2a <Device::getParent()>:
c0009a2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a2e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0009a34:	c3                   	ret    
c0009a35:	90                   	nop

c0009a36 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0009a36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a3e:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0009a43:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009a47:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009a4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a4f:	e9 83 15 01 00       	jmp    c001afd7 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c0009a54 <Device::addChild(Device*)>:
c0009a54:	53                   	push   ebx
c0009a55:	83 ec 08             	sub    esp,0x8
c0009a58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009a60:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009a66:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0009a6c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009a6e:	85 d2                	test   edx,edx
c0009a70:	74 04                	je     c0009a76 <Device::addChild(Device*)+0x22>
c0009a72:	89 d3                	mov    ebx,edx
c0009a74:	eb f6                	jmp    c0009a6c <Device::addChild(Device*)+0x18>
c0009a76:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009a79:	83 ec 0c             	sub    esp,0xc
c0009a7c:	6a 08                	push   0x8
c0009a7e:	e8 0c 61 00 00       	call   c000fb8f <malloc>
c0009a83:	89 03                	mov    DWORD PTR [ebx],eax
c0009a85:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a8b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a92:	83 c4 18             	add    esp,0x18
c0009a95:	5b                   	pop    ebx
c0009a96:	c3                   	ret    
c0009a97:	90                   	nop

c0009a98 <Device::removeAllChildren()>:
c0009a98:	56                   	push   esi
c0009a99:	53                   	push   ebx
c0009a9a:	52                   	push   edx
c0009a9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009a9f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0009aa5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009aa8:	74 17                	je     c0009ac1 <Device::removeAllChildren()+0x29>
c0009aaa:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009aad:	85 c0                	test   eax,eax
c0009aaf:	74 0c                	je     c0009abd <Device::removeAllChildren()+0x25>
c0009ab1:	83 ec 0c             	sub    esp,0xc
c0009ab4:	8b 10                	mov    edx,DWORD PTR [eax]
c0009ab6:	50                   	push   eax
c0009ab7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0009aba:	83 c4 10             	add    esp,0x10
c0009abd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009abf:	eb e4                	jmp    c0009aa5 <Device::removeAllChildren()+0xd>
c0009ac1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009ac7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009acd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009ad3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ada:	58                   	pop    eax
c0009adb:	5b                   	pop    ebx
c0009adc:	5e                   	pop    esi
c0009add:	c3                   	ret    

c0009ade <Device::hibernateAll()>:
c0009ade:	53                   	push   ebx
c0009adf:	83 ec 14             	sub    esp,0x14
c0009ae2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ae6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009ae8:	53                   	push   ebx
c0009ae9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009aec:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009af2:	83 c4 10             	add    esp,0x10
c0009af5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009af8:	74 0f                	je     c0009b09 <Device::hibernateAll()+0x2b>
c0009afa:	83 ec 0c             	sub    esp,0xc
c0009afd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b00:	e8 d9 ff ff ff       	call   c0009ade <Device::hibernateAll()>
c0009b05:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b07:	eb e9                	jmp    c0009af2 <Device::hibernateAll()+0x14>
c0009b09:	83 c4 08             	add    esp,0x8
c0009b0c:	5b                   	pop    ebx
c0009b0d:	c3                   	ret    

c0009b0e <Device::wakeAll()>:
c0009b0e:	53                   	push   ebx
c0009b0f:	83 ec 14             	sub    esp,0x14
c0009b12:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009b16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b18:	53                   	push   ebx
c0009b19:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0009b1c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b22:	83 c4 10             	add    esp,0x10
c0009b25:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b28:	74 0f                	je     c0009b39 <Device::wakeAll()+0x2b>
c0009b2a:	83 ec 0c             	sub    esp,0xc
c0009b2d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b30:	e8 d9 ff ff ff       	call   c0009b0e <Device::wakeAll()>
c0009b35:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b37:	eb e9                	jmp    c0009b22 <Device::wakeAll()+0x14>
c0009b39:	83 c4 08             	add    esp,0x8
c0009b3c:	5b                   	pop    ebx
c0009b3d:	c3                   	ret    

c0009b3e <Device::detectAll()>:
c0009b3e:	53                   	push   ebx
c0009b3f:	83 ec 14             	sub    esp,0x14
c0009b42:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009b46:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b48:	53                   	push   ebx
c0009b49:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0009b4c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b52:	83 c4 10             	add    esp,0x10
c0009b55:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b58:	74 0f                	je     c0009b69 <Device::detectAll()+0x2b>
c0009b5a:	83 ec 0c             	sub    esp,0xc
c0009b5d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b60:	e8 d9 ff ff ff       	call   c0009b3e <Device::detectAll()>
c0009b65:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b67:	eb e9                	jmp    c0009b52 <Device::detectAll()+0x14>
c0009b69:	83 c4 08             	add    esp,0x8
c0009b6c:	5b                   	pop    ebx
c0009b6d:	c3                   	ret    

c0009b6e <Device::disableLegacyAll()>:
c0009b6e:	c3                   	ret    
c0009b6f:	90                   	nop

c0009b70 <Device::loadDriversForAll()>:
c0009b70:	c3                   	ret    
c0009b71:	90                   	nop

c0009b72 <Device::powerSavingAll(PowerSavingLevel)>:
c0009b72:	56                   	push   esi
c0009b73:	53                   	push   ebx
c0009b74:	83 ec 0c             	sub    esp,0xc
c0009b77:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009b7b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0009b7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b81:	56                   	push   esi
c0009b82:	53                   	push   ebx
c0009b83:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009b86:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b8c:	83 c4 10             	add    esp,0x10
c0009b8f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b92:	74 0f                	je     c0009ba3 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0009b94:	52                   	push   edx
c0009b95:	52                   	push   edx
c0009b96:	56                   	push   esi
c0009b97:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b9a:	e8 d3 ff ff ff       	call   c0009b72 <Device::powerSavingAll(PowerSavingLevel)>
c0009b9f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009ba1:	eb e9                	jmp    c0009b8c <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0009ba3:	58                   	pop    eax
c0009ba4:	5b                   	pop    ebx
c0009ba5:	5e                   	pop    esi
c0009ba6:	c3                   	ret    
c0009ba7:	90                   	nop

c0009ba8 <Device::setName(char const*)>:
c0009ba8:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0009bb0:	e9 8b 6a ff ff       	jmp    c0000640 <strcpy>
c0009bb5:	90                   	nop

c0009bb6 <Device::Device(char const*)>:
c0009bb6:	83 ec 1c             	sub    esp,0x1c
c0009bb9:	ba d0 39 02 c0       	mov    edx,0xc00239d0
c0009bbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bc2:	89 10                	mov    DWORD PTR [eax],edx
c0009bc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bc8:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0009bd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bd6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009be0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009be4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009bee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bf2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009bfc:	83 ec 08             	sub    esp,0x8
c0009bff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009c03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009c07:	e8 9c ff ff ff       	call   c0009ba8 <Device::setName(char const*)>
c0009c0c:	83 c4 10             	add    esp,0x10
c0009c0f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009c17:	83 ec 0c             	sub    esp,0xc
c0009c1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009c1e:	e8 6c 5f 00 00       	call   c000fb8f <malloc>
c0009c23:	83 c4 10             	add    esp,0x10
c0009c26:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009c2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c33:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009c37:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0009c3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c41:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009c47:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009c4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c51:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009c57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c62:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0009c69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c6d:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009c74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c78:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009c82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c86:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009c90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c94:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009c9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ca2:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c0009cac:	90                   	nop
c0009cad:	83 c4 1c             	add    esp,0x1c
c0009cb0:	c3                   	ret    
c0009cb1:	90                   	nop

c0009cb2 <Device::getName()>:
c0009cb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009cb6:	05 d0 00 00 00       	add    eax,0xd0
c0009cbb:	c3                   	ret    

c0009cbc <Device::closeAll()>:
c0009cbc:	53                   	push   ebx
c0009cbd:	83 ec 08             	sub    esp,0x8
c0009cc0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009cc4:	53                   	push   ebx
c0009cc5:	e8 e8 ff ff ff       	call   c0009cb2 <Device::getName()>
c0009cca:	52                   	push   edx
c0009ccb:	50                   	push   eax
c0009ccc:	68 84 39 02 c0       	push   0xc0023984
c0009cd1:	e8 a6 d2 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009cd6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009cd8:	6a 00                	push   0x0
c0009cda:	6a 00                	push   0x0
c0009cdc:	6a 00                	push   0x0
c0009cde:	53                   	push   ebx
c0009cdf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009ce2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009ce8:	83 c4 20             	add    esp,0x20
c0009ceb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009cee:	74 12                	je     c0009d02 <Device::closeAll()+0x46>
c0009cf0:	83 ec 0c             	sub    esp,0xc
c0009cf3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009cf6:	e8 c1 ff ff ff       	call   c0009cbc <Device::closeAll()>
c0009cfb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009cfd:	83 c4 10             	add    esp,0x10
c0009d00:	eb e9                	jmp    c0009ceb <Device::closeAll()+0x2f>
c0009d02:	83 c4 08             	add    esp,0x8
c0009d05:	5b                   	pop    ebx
c0009d06:	c3                   	ret    
c0009d07:	90                   	nop

c0009d08 <DriverlessDevice::DriverlessDevice(char const*)>:
c0009d08:	83 ec 0c             	sub    esp,0xc
c0009d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d0f:	83 ec 08             	sub    esp,0x8
c0009d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d16:	50                   	push   eax
c0009d17:	e8 9a fe ff ff       	call   c0009bb6 <Device::Device(char const*)>
c0009d1c:	83 c4 10             	add    esp,0x10
c0009d1f:	ba fc 39 02 c0       	mov    edx,0xc00239fc
c0009d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d28:	89 10                	mov    DWORD PTR [eax],edx
c0009d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d2e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009d38:	90                   	nop
c0009d39:	83 c4 0c             	add    esp,0xc
c0009d3c:	c3                   	ret    
c0009d3d:	90                   	nop

c0009d3e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0009d3e:	57                   	push   edi
c0009d3f:	56                   	push   esi
c0009d40:	53                   	push   ebx
c0009d41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009d45:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009d49:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009d4d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009d53:	75 0c                	jne    c0009d61 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	53                   	push   ebx
c0009d58:	56                   	push   esi
c0009d59:	e8 4e 82 01 00       	call   c0021fac <LinkedList<Device>::addElement(Device*)>
c0009d5e:	83 c4 10             	add    esp,0x10
c0009d61:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009d67:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009d6a:	74 12                	je     c0009d7e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0009d6c:	50                   	push   eax
c0009d6d:	57                   	push   edi
c0009d6e:	56                   	push   esi
c0009d6f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009d72:	e8 c7 ff ff ff       	call   c0009d3e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009d77:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009d79:	83 c4 10             	add    esp,0x10
c0009d7c:	eb e9                	jmp    c0009d67 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0009d7e:	5b                   	pop    ebx
c0009d7f:	5e                   	pop    esi
c0009d80:	5f                   	pop    edi
c0009d81:	c3                   	ret    

c0009d82 <getDevicesOfType(DeviceType)>:
c0009d82:	53                   	push   ebx
c0009d83:	83 ec 14             	sub    esp,0x14
c0009d86:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009d8a:	53                   	push   ebx
c0009d8b:	e8 f8 82 01 00       	call   c0022088 <LinkedList<Device>::LinkedList()>
c0009d90:	83 c4 0c             	add    esp,0xc
c0009d93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d97:	53                   	push   ebx
c0009d98:	ff 35 c8 d0 02 c0    	push   DWORD PTR ds:0xc002d0c8
c0009d9e:	e8 9b ff ff ff       	call   c0009d3e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009da3:	89 d8                	mov    eax,ebx
c0009da5:	83 c4 18             	add    esp,0x18
c0009da8:	5b                   	pop    ebx
c0009da9:	c2 04 00             	ret    0x4

c0009dac <HardDiskController::HardDiskController(char const*)>:
c0009dac:	83 ec 0c             	sub    esp,0xc
c0009daf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009db3:	83 ec 08             	sub    esp,0x8
c0009db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dba:	50                   	push   eax
c0009dbb:	e8 f6 fd ff ff       	call   c0009bb6 <Device::Device(char const*)>
c0009dc0:	83 c4 10             	add    esp,0x10
c0009dc3:	ba 28 3a 02 c0       	mov    edx,0xc0023a28
c0009dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dcc:	89 10                	mov    DWORD PTR [eax],edx
c0009dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dd2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0009ddc:	90                   	nop
c0009ddd:	83 c4 0c             	add    esp,0xc
c0009de0:	c3                   	ret    
c0009de1:	90                   	nop
c0009de2:	66 90                	xchg   ax,ax

c0009de4 <HardDiskController::~HardDiskController()>:
c0009de4:	83 ec 0c             	sub    esp,0xc
c0009de7:	ba 28 3a 02 c0       	mov    edx,0xc0023a28
c0009dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009df0:	89 10                	mov    DWORD PTR [eax],edx
c0009df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009df6:	83 ec 0c             	sub    esp,0xc
c0009df9:	50                   	push   eax
c0009dfa:	e8 57 fb ff ff       	call   c0009956 <Device::~Device()>
c0009dff:	83 c4 10             	add    esp,0x10
c0009e02:	90                   	nop
c0009e03:	83 c4 0c             	add    esp,0xc
c0009e06:	c3                   	ret    
c0009e07:	90                   	nop

c0009e08 <HardDiskController::~HardDiskController()>:
c0009e08:	83 ec 0c             	sub    esp,0xc
c0009e0b:	83 ec 0c             	sub    esp,0xc
c0009e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e12:	e8 cd ff ff ff       	call   c0009de4 <HardDiskController::~HardDiskController()>
c0009e17:	83 c4 10             	add    esp,0x10
c0009e1a:	83 ec 08             	sub    esp,0x8
c0009e1d:	68 58 01 00 00       	push   0x158
c0009e22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e26:	e8 be 35 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0009e2b:	83 c4 10             	add    esp,0x10
c0009e2e:	83 c4 0c             	add    esp,0xc
c0009e31:	c3                   	ret    

c0009e32 <PhysicalDisk::eject()>:
c0009e32:	83 c8 ff             	or     eax,0xffffffff
c0009e35:	c3                   	ret    

c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009e36:	83 ec 0c             	sub    esp,0xc
c0009e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e3d:	83 ec 08             	sub    esp,0x8
c0009e40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e44:	50                   	push   eax
c0009e45:	e8 6c fd ff ff       	call   c0009bb6 <Device::Device(char const*)>
c0009e4a:	83 c4 10             	add    esp,0x10
c0009e4d:	ba 54 3a 02 c0       	mov    edx,0xc0023a54
c0009e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e56:	89 10                	mov    DWORD PTR [eax],edx
c0009e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e5c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009e63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e67:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0009e6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e72:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0009e7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e80:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e84:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0009e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e8e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0009e98:	90                   	nop
c0009e99:	83 c4 0c             	add    esp,0xc
c0009e9c:	c3                   	ret    
c0009e9d:	90                   	nop

c0009e9e <PhysicalDisk::startCache()>:
c0009e9e:	56                   	push   esi
c0009e9f:	53                   	push   ebx
c0009ea0:	83 ec 10             	sub    esp,0x10
c0009ea3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ea7:	6a 44                	push   0x44
c0009ea9:	e8 e1 5c 00 00       	call   c000fb8f <malloc>
c0009eae:	89 c6                	mov    esi,eax
c0009eb0:	58                   	pop    eax
c0009eb1:	5a                   	pop    edx
c0009eb2:	53                   	push   ebx
c0009eb3:	56                   	push   esi
c0009eb4:	e8 d3 13 00 00       	call   c000b28c <VCache::VCache(PhysicalDisk*)>
c0009eb9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0009ebf:	83 c4 14             	add    esp,0x14
c0009ec2:	5b                   	pop    ebx
c0009ec3:	5e                   	pop    esi
c0009ec4:	c3                   	ret    
c0009ec5:	90                   	nop

c0009ec6 <PhysicalDisk::~PhysicalDisk()>:
c0009ec6:	83 ec 0c             	sub    esp,0xc
c0009ec9:	ba 54 3a 02 c0       	mov    edx,0xc0023a54
c0009ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ed2:	89 10                	mov    DWORD PTR [eax],edx
c0009ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ed8:	83 ec 0c             	sub    esp,0xc
c0009edb:	50                   	push   eax
c0009edc:	e8 75 fa ff ff       	call   c0009956 <Device::~Device()>
c0009ee1:	83 c4 10             	add    esp,0x10
c0009ee4:	90                   	nop
c0009ee5:	83 c4 0c             	add    esp,0xc
c0009ee8:	c3                   	ret    
c0009ee9:	90                   	nop

c0009eea <PhysicalDisk::~PhysicalDisk()>:
c0009eea:	83 ec 0c             	sub    esp,0xc
c0009eed:	83 ec 0c             	sub    esp,0xc
c0009ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ef4:	e8 cd ff ff ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c0009ef9:	83 c4 10             	add    esp,0x10
c0009efc:	83 ec 08             	sub    esp,0x8
c0009eff:	68 6c 01 00 00       	push   0x16c
c0009f04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f08:	e8 dc 34 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	83 c4 0c             	add    esp,0xc
c0009f13:	c3                   	ret    

c0009f14 <startGUI(void*)>:
c0009f14:	55                   	push   ebp
c0009f15:	89 e5                	mov    ebp,esp
c0009f17:	53                   	push   ebx
c0009f18:	83 ec 04             	sub    esp,0x4
c0009f1b:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0009f23:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0009f28:	85 c0                	test   eax,eax
c0009f2a:	75 01                	jne    c0009f2d <startGUI(void*)+0x19>
c0009f2c:	fb                   	sti    
c0009f2d:	8b 1d c8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0c8
c0009f33:	83 ec 08             	sub    esp,0x8
c0009f36:	6a 01                	push   0x1
c0009f38:	68 84 3a 02 c0       	push   0xc0023a84
c0009f3d:	e8 2c c7 00 00       	call   c001666e <Thr::loadDLL(char const*, bool)>
c0009f42:	83 c4 10             	add    esp,0x10
c0009f45:	83 ec 08             	sub    esp,0x8
c0009f48:	53                   	push   ebx
c0009f49:	50                   	push   eax
c0009f4a:	e8 71 c9 00 00       	call   c00168c0 <Thr::executeDLL(unsigned long, void*)>
c0009f4f:	83 c4 10             	add    esp,0x10
c0009f52:	8b 1d c8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0c8
c0009f58:	83 ec 08             	sub    esp,0x8
c0009f5b:	6a 01                	push   0x1
c0009f5d:	68 9e 3a 02 c0       	push   0xc0023a9e
c0009f62:	e8 07 c7 00 00       	call   c001666e <Thr::loadDLL(char const*, bool)>
c0009f67:	83 c4 10             	add    esp,0x10
c0009f6a:	83 ec 08             	sub    esp,0x8
c0009f6d:	53                   	push   ebx
c0009f6e:	50                   	push   eax
c0009f6f:	e8 4c c9 00 00       	call   c00168c0 <Thr::executeDLL(unsigned long, void*)>
c0009f74:	83 c4 10             	add    esp,0x10
c0009f77:	eb fe                	jmp    c0009f77 <startGUI(void*)+0x63>

c0009f79 <startGUIVESA(void*)>:
c0009f79:	55                   	push   ebp
c0009f7a:	89 e5                	mov    ebp,esp
c0009f7c:	53                   	push   ebx
c0009f7d:	83 ec 04             	sub    esp,0x4
c0009f80:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0009f88:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0009f8d:	85 c0                	test   eax,eax
c0009f8f:	75 01                	jne    c0009f92 <startGUIVESA(void*)+0x19>
c0009f91:	fb                   	sti    
c0009f92:	8b 1d c8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0c8
c0009f98:	83 ec 08             	sub    esp,0x8
c0009f9b:	6a 01                	push   0x1
c0009f9d:	68 bc 3a 02 c0       	push   0xc0023abc
c0009fa2:	e8 c7 c6 00 00       	call   c001666e <Thr::loadDLL(char const*, bool)>
c0009fa7:	83 c4 10             	add    esp,0x10
c0009faa:	83 ec 08             	sub    esp,0x8
c0009fad:	53                   	push   ebx
c0009fae:	50                   	push   eax
c0009faf:	e8 0c c9 00 00       	call   c00168c0 <Thr::executeDLL(unsigned long, void*)>
c0009fb4:	83 c4 10             	add    esp,0x10
c0009fb7:	8b 1d c8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0c8
c0009fbd:	83 ec 08             	sub    esp,0x8
c0009fc0:	6a 01                	push   0x1
c0009fc2:	68 9e 3a 02 c0       	push   0xc0023a9e
c0009fc7:	e8 a2 c6 00 00       	call   c001666e <Thr::loadDLL(char const*, bool)>
c0009fcc:	83 c4 10             	add    esp,0x10
c0009fcf:	83 ec 08             	sub    esp,0x8
c0009fd2:	53                   	push   ebx
c0009fd3:	50                   	push   eax
c0009fd4:	e8 e7 c8 00 00       	call   c00168c0 <Thr::executeDLL(unsigned long, void*)>
c0009fd9:	83 c4 10             	add    esp,0x10
c0009fdc:	eb fe                	jmp    c0009fdc <startGUIVESA(void*)+0x63>

c0009fde <sendKeyToTerminal(unsigned char)>:
c0009fde:	55                   	push   ebp
c0009fdf:	89 e5                	mov    ebp,esp
c0009fe1:	83 ec 28             	sub    esp,0x28
c0009fe4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009fe7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0009fea:	a1 b4 f1 02 c0       	mov    eax,ds:0xc002f1b4
c0009fef:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0009ff3:	83 ec 08             	sub    esp,0x8
c0009ff6:	52                   	push   edx
c0009ff7:	50                   	push   eax
c0009ff8:	e8 bf 8c 00 00       	call   c0012cbc <VgaText::receiveKey(unsigned char)>
c0009ffd:	83 c4 10             	add    esp,0x10
c000a000:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a004:	83 f8 0a             	cmp    eax,0xa
c000a007:	74 16                	je     c000a01f <sendKeyToTerminal(unsigned char)+0x41>
c000a009:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a00d:	83 f8 03             	cmp    eax,0x3
c000a010:	74 0d                	je     c000a01f <sendKeyToTerminal(unsigned char)+0x41>
c000a012:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a016:	83 f8 1c             	cmp    eax,0x1c
c000a019:	0f 85 92 00 00 00    	jne    c000a0b1 <sendKeyToTerminal(unsigned char)+0xd3>
c000a01f:	fa                   	cli    
c000a020:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000a025:	83 c0 01             	add    eax,0x1
c000a028:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c000a02d:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c000a032:	83 c0 01             	add    eax,0x1
c000a035:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c000a03a:	a1 80 c6 02 c0       	mov    eax,ds:0xc002c680
c000a03f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a042:	c7 05 80 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c680,0x0
c000a04c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000a050:	74 1f                	je     c000a071 <sendKeyToTerminal(unsigned char)+0x93>
c000a052:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a055:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000a058:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a05b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a05e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a061:	83 ec 0c             	sub    esp,0xc
c000a064:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000a067:	e8 04 d5 00 00       	call   c0017570 <unblockTask(ThreadControlBlock*)>
c000a06c:	83 c4 10             	add    esp,0x10
c000a06f:	eb db                	jmp    c000a04c <sendKeyToTerminal(unsigned char)+0x6e>
c000a071:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c000a076:	83 e8 01             	sub    eax,0x1
c000a079:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c000a07e:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c000a083:	85 c0                	test   eax,eax
c000a085:	75 18                	jne    c000a09f <sendKeyToTerminal(unsigned char)+0xc1>
c000a087:	a1 28 fa 02 c0       	mov    eax,ds:0xc002fa28
c000a08c:	85 c0                	test   eax,eax
c000a08e:	74 0f                	je     c000a09f <sendKeyToTerminal(unsigned char)+0xc1>
c000a090:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c000a09a:	e8 75 d1 00 00       	call   c0017214 <schedule()>
c000a09f:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000a0a7:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000a0ac:	85 c0                	test   eax,eax
c000a0ae:	75 01                	jne    c000a0b1 <sendKeyToTerminal(unsigned char)+0xd3>
c000a0b0:	fb                   	sti    
c000a0b1:	90                   	nop
c000a0b2:	c9                   	leave  
c000a0b3:	c3                   	ret    

c000a0b4 <sendKeyboardToken(KeyboardToken)>:
c000a0b4:	55                   	push   ebp
c000a0b5:	89 e5                	mov    ebp,esp
c000a0b7:	83 ec 18             	sub    esp,0x18
c000a0ba:	e8 58 68 00 00       	call   c0010917 <KeUserIOReceived()>
c000a0bf:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000a0c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0c5:	0f b7 c0             	movzx  eax,ax
c000a0c8:	83 f2 01             	xor    edx,0x1
c000a0cb:	88 90 a0 c6 02 c0    	mov    BYTE PTR [eax-0x3ffd3960],dl
c000a0d1:	a1 88 c6 02 c0       	mov    eax,ds:0xc002c688
c000a0d6:	85 c0                	test   eax,eax
c000a0d8:	74 24                	je     c000a0fe <sendKeyboardToken(KeyboardToken)+0x4a>
c000a0da:	8b 0d 88 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c688
c000a0e0:	83 ec 04             	sub    esp,0x4
c000a0e3:	68 a0 c6 02 c0       	push   0xc002c6a0
c000a0e8:	83 ec 08             	sub    esp,0x8
c000a0eb:	89 e2                	mov    edx,esp
c000a0ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0f0:	89 02                	mov    DWORD PTR [edx],eax
c000a0f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a0f5:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000a0f9:	ff d1                	call   ecx
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000a102:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000a105:	0f b6 c0             	movzx  eax,al
c000a108:	85 c0                	test   eax,eax
c000a10a:	0f 84 da 00 00 00    	je     c000a1ea <sendKeyboardToken(KeyboardToken)+0x136>
c000a110:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a113:	0f b7 c0             	movzx  eax,ax
c000a116:	3d 18 03 00 00       	cmp    eax,0x318
c000a11b:	75 06                	jne    c000a123 <sendKeyboardToken(KeyboardToken)+0x6f>
c000a11d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000a123:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a126:	0f b7 c0             	movzx  eax,ax
c000a129:	3d 19 03 00 00       	cmp    eax,0x319
c000a12e:	75 06                	jne    c000a136 <sendKeyboardToken(KeyboardToken)+0x82>
c000a130:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000a136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a139:	0f b7 c0             	movzx  eax,ax
c000a13c:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a141:	75 06                	jne    c000a149 <sendKeyboardToken(KeyboardToken)+0x95>
c000a143:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000a149:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a14c:	0f b7 c0             	movzx  eax,ax
c000a14f:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a154:	75 06                	jne    c000a15c <sendKeyboardToken(KeyboardToken)+0xa8>
c000a156:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000a15c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a15f:	0f b7 c0             	movzx  eax,ax
c000a162:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a167:	75 06                	jne    c000a16f <sendKeyboardToken(KeyboardToken)+0xbb>
c000a169:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000a16f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a172:	0f b7 c0             	movzx  eax,ax
c000a175:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a17a:	75 06                	jne    c000a182 <sendKeyboardToken(KeyboardToken)+0xce>
c000a17c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a182:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a185:	0f b7 c0             	movzx  eax,ax
c000a188:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a18d:	75 06                	jne    c000a195 <sendKeyboardToken(KeyboardToken)+0xe1>
c000a18f:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000a195:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a198:	0f b7 c0             	movzx  eax,ax
c000a19b:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a1a0:	75 06                	jne    c000a1a8 <sendKeyboardToken(KeyboardToken)+0xf4>
c000a1a2:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000a1a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1ab:	0f b7 c0             	movzx  eax,ax
c000a1ae:	3d 20 03 00 00       	cmp    eax,0x320
c000a1b3:	75 06                	jne    c000a1bb <sendKeyboardToken(KeyboardToken)+0x107>
c000a1b5:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000a1bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1be:	0f b7 c0             	movzx  eax,ax
c000a1c1:	3d 21 03 00 00       	cmp    eax,0x321
c000a1c6:	75 06                	jne    c000a1ce <sendKeyboardToken(KeyboardToken)+0x11a>
c000a1c8:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000a1ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1d1:	0f b7 c0             	movzx  eax,ax
c000a1d4:	3d 22 03 00 00       	cmp    eax,0x322
c000a1d9:	0f 85 f1 00 00 00    	jne    c000a2d0 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a1df:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000a1e5:	e9 e6 00 00 00       	jmp    c000a2d0 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a1ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1ed:	0f b7 c0             	movzx  eax,ax
c000a1f0:	3d 18 03 00 00       	cmp    eax,0x318
c000a1f5:	75 0a                	jne    c000a201 <sendKeyboardToken(KeyboardToken)+0x14d>
c000a1f7:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000a1fd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a204:	0f b7 c0             	movzx  eax,ax
c000a207:	3d 19 03 00 00       	cmp    eax,0x319
c000a20c:	75 0a                	jne    c000a218 <sendKeyboardToken(KeyboardToken)+0x164>
c000a20e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000a214:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a218:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a21b:	0f b7 c0             	movzx  eax,ax
c000a21e:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a223:	75 0a                	jne    c000a22f <sendKeyboardToken(KeyboardToken)+0x17b>
c000a225:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000a22b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a22f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a232:	0f b7 c0             	movzx  eax,ax
c000a235:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a23a:	75 0a                	jne    c000a246 <sendKeyboardToken(KeyboardToken)+0x192>
c000a23c:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000a242:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a246:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a249:	0f b7 c0             	movzx  eax,ax
c000a24c:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a251:	75 0a                	jne    c000a25d <sendKeyboardToken(KeyboardToken)+0x1a9>
c000a253:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000a259:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a25d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a260:	0f b7 c0             	movzx  eax,ax
c000a263:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a268:	75 0a                	jne    c000a274 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000a26a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a270:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a274:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a277:	0f b7 c0             	movzx  eax,ax
c000a27a:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a27f:	75 0a                	jne    c000a28b <sendKeyboardToken(KeyboardToken)+0x1d7>
c000a281:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000a287:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a28b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a28e:	0f b7 c0             	movzx  eax,ax
c000a291:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a296:	75 0a                	jne    c000a2a2 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000a298:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000a29e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2a5:	0f b7 c0             	movzx  eax,ax
c000a2a8:	3d 20 03 00 00       	cmp    eax,0x320
c000a2ad:	75 0a                	jne    c000a2b9 <sendKeyboardToken(KeyboardToken)+0x205>
c000a2af:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000a2b5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a2b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2bc:	0f b7 c0             	movzx  eax,ax
c000a2bf:	3d 21 03 00 00       	cmp    eax,0x321
c000a2c4:	75 0a                	jne    c000a2d0 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a2c6:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000a2cc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a2d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2d3:	0f b7 c0             	movzx  eax,ax
c000a2d6:	3d 00 02 00 00       	cmp    eax,0x200
c000a2db:	75 2f                	jne    c000a30c <sendKeyboardToken(KeyboardToken)+0x258>
c000a2dd:	a0 a0 ca 02 c0       	mov    al,ds:0xc002caa0
c000a2e2:	83 f0 01             	xor    eax,0x1
c000a2e5:	0f b6 c0             	movzx  eax,al
c000a2e8:	85 c0                	test   eax,eax
c000a2ea:	74 20                	je     c000a30c <sendKeyboardToken(KeyboardToken)+0x258>
c000a2ec:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c000a2f1:	6a 01                	push   0x1
c000a2f3:	6a 00                	push   0x0
c000a2f5:	68 14 9f 00 c0       	push   0xc0009f14
c000a2fa:	50                   	push   eax
c000a2fb:	e8 54 cc 00 00       	call   c0016f54 <Process::createThread(void (*)(void*), void*, int)>
c000a300:	83 c4 10             	add    esp,0x10
c000a303:	c6 05 a0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002caa0,0x1
c000a30a:	eb 3a                	jmp    c000a346 <sendKeyboardToken(KeyboardToken)+0x292>
c000a30c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a30f:	0f b7 c0             	movzx  eax,ax
c000a312:	3d 01 02 00 00       	cmp    eax,0x201
c000a317:	75 2d                	jne    c000a346 <sendKeyboardToken(KeyboardToken)+0x292>
c000a319:	a0 a0 ca 02 c0       	mov    al,ds:0xc002caa0
c000a31e:	83 f0 01             	xor    eax,0x1
c000a321:	0f b6 c0             	movzx  eax,al
c000a324:	85 c0                	test   eax,eax
c000a326:	74 1e                	je     c000a346 <sendKeyboardToken(KeyboardToken)+0x292>
c000a328:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c000a32d:	6a 01                	push   0x1
c000a32f:	6a 00                	push   0x0
c000a331:	68 79 9f 00 c0       	push   0xc0009f79
c000a336:	50                   	push   eax
c000a337:	e8 18 cc 00 00       	call   c0016f54 <Process::createThread(void (*)(void*), void*, int)>
c000a33c:	83 c4 10             	add    esp,0x10
c000a33f:	c6 05 a0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002caa0,0x1
c000a346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a349:	0f b7 c0             	movzx  eax,ax
c000a34c:	3d 25 03 00 00       	cmp    eax,0x325
c000a351:	75 06                	jne    c000a359 <sendKeyboardToken(KeyboardToken)+0x2a5>
c000a353:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000a359:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a35c:	0f b7 c0             	movzx  eax,ax
c000a35f:	3d 24 03 00 00       	cmp    eax,0x324
c000a364:	75 06                	jne    c000a36c <sendKeyboardToken(KeyboardToken)+0x2b8>
c000a366:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000a36c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a36f:	0f b7 c0             	movzx  eax,ax
c000a372:	3d 23 03 00 00       	cmp    eax,0x323
c000a377:	75 06                	jne    c000a37f <sendKeyboardToken(KeyboardToken)+0x2cb>
c000a379:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000a37f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a382:	0f b7 c0             	movzx  eax,ax
c000a385:	3d 26 03 00 00       	cmp    eax,0x326
c000a38a:	75 06                	jne    c000a392 <sendKeyboardToken(KeyboardToken)+0x2de>
c000a38c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000a392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a395:	0f b7 c0             	movzx  eax,ax
c000a398:	3d 27 03 00 00       	cmp    eax,0x327
c000a39d:	75 06                	jne    c000a3a5 <sendKeyboardToken(KeyboardToken)+0x2f1>
c000a39f:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000a3a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3a8:	0f b7 c0             	movzx  eax,ax
c000a3ab:	3d 22 03 00 00       	cmp    eax,0x322
c000a3b0:	75 06                	jne    c000a3b8 <sendKeyboardToken(KeyboardToken)+0x304>
c000a3b2:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000a3b8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000a3bc:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a3bf:	83 f0 01             	xor    eax,0x1
c000a3c2:	0f b6 c0             	movzx  eax,al
c000a3c5:	85 c0                	test   eax,eax
c000a3c7:	74 7c                	je     c000a445 <sendKeyboardToken(KeyboardToken)+0x391>
c000a3c9:	a0 a1 c7 02 c0       	mov    al,ds:0xc002c7a1
c000a3ce:	0f b6 c0             	movzx  eax,al
c000a3d1:	85 c0                	test   eax,eax
c000a3d3:	74 43                	je     c000a418 <sendKeyboardToken(KeyboardToken)+0x364>
c000a3d5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a3d9:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000a3dd:	85 c0                	test   eax,eax
c000a3df:	74 2b                	je     c000a40c <sendKeyboardToken(KeyboardToken)+0x358>
c000a3e1:	8b 15 a4 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002caa4
c000a3e7:	89 d0                	mov    eax,edx
c000a3e9:	c1 e0 02             	shl    eax,0x2
c000a3ec:	01 d0                	add    eax,edx
c000a3ee:	01 c0                	add    eax,eax
c000a3f0:	a3 a4 ca 02 c0       	mov    ds:0xc002caa4,eax
c000a3f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3f8:	0f b7 c0             	movzx  eax,ax
c000a3fb:	8d 50 d0             	lea    edx,[eax-0x30]
c000a3fe:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a403:	01 d0                	add    eax,edx
c000a405:	a3 a4 ca 02 c0       	mov    ds:0xc002caa4,eax
c000a40a:	eb 71                	jmp    c000a47d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a40c:	c7 05 a4 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002caa4,0x0
c000a416:	eb 65                	jmp    c000a47d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a418:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a41d:	85 c0                	test   eax,eax
c000a41f:	74 18                	je     c000a439 <sendKeyboardToken(KeyboardToken)+0x385>
c000a421:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a426:	0f b6 c0             	movzx  eax,al
c000a429:	83 ec 0c             	sub    esp,0xc
c000a42c:	50                   	push   eax
c000a42d:	e8 ac fb ff ff       	call   c0009fde <sendKeyToTerminal(unsigned char)>
c000a432:	83 c4 10             	add    esp,0x10
c000a435:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a439:	c7 05 a4 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002caa4,0x0
c000a443:	eb 38                	jmp    c000a47d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a445:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a448:	0f b7 c0             	movzx  eax,ax
c000a44b:	3d 01 01 00 00       	cmp    eax,0x101
c000a450:	75 2b                	jne    c000a47d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a452:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a457:	85 c0                	test   eax,eax
c000a459:	74 18                	je     c000a473 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000a45b:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c000a460:	0f b6 c0             	movzx  eax,al
c000a463:	83 ec 0c             	sub    esp,0xc
c000a466:	50                   	push   eax
c000a467:	e8 72 fb ff ff       	call   c0009fde <sendKeyToTerminal(unsigned char)>
c000a46c:	83 c4 10             	add    esp,0x10
c000a46f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a473:	c7 05 a4 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002caa4,0x0
c000a47d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a480:	83 f0 01             	xor    eax,0x1
c000a483:	0f b6 c0             	movzx  eax,al
c000a486:	85 c0                	test   eax,eax
c000a488:	74 5a                	je     c000a4e4 <sendKeyboardToken(KeyboardToken)+0x430>
c000a48a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a48d:	83 f0 01             	xor    eax,0x1
c000a490:	0f b6 c0             	movzx  eax,al
c000a493:	85 c0                	test   eax,eax
c000a495:	74 4d                	je     c000a4e4 <sendKeyboardToken(KeyboardToken)+0x430>
c000a497:	a0 a0 c7 02 c0       	mov    al,ds:0xc002c7a0
c000a49c:	83 f0 01             	xor    eax,0x1
c000a49f:	0f b6 c0             	movzx  eax,al
c000a4a2:	85 c0                	test   eax,eax
c000a4a4:	74 3e                	je     c000a4e4 <sendKeyboardToken(KeyboardToken)+0x430>
c000a4a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4a9:	0f b7 c0             	movzx  eax,ax
c000a4ac:	83 f8 1f             	cmp    eax,0x1f
c000a4af:	76 0b                	jbe    c000a4bc <sendKeyboardToken(KeyboardToken)+0x408>
c000a4b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4b4:	0f b7 c0             	movzx  eax,ax
c000a4b7:	83 f8 7e             	cmp    eax,0x7e
c000a4ba:	76 16                	jbe    c000a4d2 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a4bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4bf:	0f b7 c0             	movzx  eax,ax
c000a4c2:	83 f8 0a             	cmp    eax,0xa
c000a4c5:	74 0b                	je     c000a4d2 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a4c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4ca:	0f b7 c0             	movzx  eax,ax
c000a4cd:	83 f8 08             	cmp    eax,0x8
c000a4d0:	75 12                	jne    c000a4e4 <sendKeyboardToken(KeyboardToken)+0x430>
c000a4d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4d5:	0f b6 c0             	movzx  eax,al
c000a4d8:	83 ec 0c             	sub    esp,0xc
c000a4db:	50                   	push   eax
c000a4dc:	e8 fd fa ff ff       	call   c0009fde <sendKeyToTerminal(unsigned char)>
c000a4e1:	83 c4 10             	add    esp,0x10
c000a4e4:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a4e7:	83 f0 01             	xor    eax,0x1
c000a4ea:	0f b6 c0             	movzx  eax,al
c000a4ed:	85 c0                	test   eax,eax
c000a4ef:	74 5d                	je     c000a54e <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4f1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a4f4:	83 f0 01             	xor    eax,0x1
c000a4f7:	0f b6 c0             	movzx  eax,al
c000a4fa:	85 c0                	test   eax,eax
c000a4fc:	74 50                	je     c000a54e <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4fe:	a0 a0 c7 02 c0       	mov    al,ds:0xc002c7a0
c000a503:	0f b6 c0             	movzx  eax,al
c000a506:	85 c0                	test   eax,eax
c000a508:	74 44                	je     c000a54e <sendKeyboardToken(KeyboardToken)+0x49a>
c000a50a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a50d:	0f b7 c0             	movzx  eax,ax
c000a510:	83 f8 3f             	cmp    eax,0x3f
c000a513:	76 39                	jbe    c000a54e <sendKeyboardToken(KeyboardToken)+0x49a>
c000a515:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a518:	0f b7 c0             	movzx  eax,ax
c000a51b:	83 f8 7f             	cmp    eax,0x7f
c000a51e:	77 2e                	ja     c000a54e <sendKeyboardToken(KeyboardToken)+0x49a>
c000a520:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a523:	88 c2                	mov    dl,al
c000a525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a528:	0f b7 c0             	movzx  eax,ax
c000a52b:	83 f8 5f             	cmp    eax,0x5f
c000a52e:	76 04                	jbe    c000a534 <sendKeyboardToken(KeyboardToken)+0x480>
c000a530:	b0 20                	mov    al,0x20
c000a532:	eb 02                	jmp    c000a536 <sendKeyboardToken(KeyboardToken)+0x482>
c000a534:	b0 00                	mov    al,0x0
c000a536:	89 d1                	mov    ecx,edx
c000a538:	29 c1                	sub    ecx,eax
c000a53a:	89 c8                	mov    eax,ecx
c000a53c:	83 e8 40             	sub    eax,0x40
c000a53f:	0f b6 c0             	movzx  eax,al
c000a542:	83 ec 0c             	sub    esp,0xc
c000a545:	50                   	push   eax
c000a546:	e8 93 fa ff ff       	call   c0009fde <sendKeyToTerminal(unsigned char)>
c000a54b:	83 c4 10             	add    esp,0x10
c000a54e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a551:	0f b7 c0             	movzx  eax,ax
c000a554:	3d 00 03 00 00       	cmp    eax,0x300
c000a559:	75 12                	jne    c000a56d <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a55b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a55e:	83 f0 01             	xor    eax,0x1
c000a561:	0f b6 c0             	movzx  eax,al
c000a564:	85 c0                	test   eax,eax
c000a566:	74 05                	je     c000a56d <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a568:	e8 44 7e 00 00       	call   c00123b1 <doTerminalCycle()>
c000a56d:	90                   	nop
c000a56e:	c9                   	leave  
c000a56f:	c3                   	ret    

c000a570 <clearInternalKeybuffer(VgaText*)>:
c000a570:	55                   	push   ebp
c000a571:	89 e5                	mov    ebp,esp
c000a573:	83 ec 08             	sub    esp,0x8
c000a576:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a579:	05 02 01 00 00       	add    eax,0x102
c000a57e:	83 ec 0c             	sub    esp,0xc
c000a581:	50                   	push   eax
c000a582:	e8 e9 5f ff ff       	call   c0000570 <strlen>
c000a587:	83 c4 10             	add    esp,0x10
c000a58a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a58d:	81 c2 02 01 00 00    	add    edx,0x102
c000a593:	83 ec 04             	sub    esp,0x4
c000a596:	50                   	push   eax
c000a597:	6a 00                	push   0x0
c000a599:	52                   	push   edx
c000a59a:	e8 51 5f ff ff       	call   c00004f0 <memset>
c000a59f:	83 c4 10             	add    esp,0x10
c000a5a2:	90                   	nop
c000a5a3:	c9                   	leave  
c000a5a4:	c3                   	ret    

c000a5a5 <readKeyboard(VgaText*, char*, unsigned long)>:
c000a5a5:	55                   	push   ebp
c000a5a6:	89 e5                	mov    ebp,esp
c000a5a8:	83 ec 18             	sub    esp,0x18
c000a5ab:	a1 88 c6 02 c0       	mov    eax,ds:0xc002c688
c000a5b0:	85 c0                	test   eax,eax
c000a5b2:	74 2a                	je     c000a5de <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000a5b4:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000a5ba:	8b 0d 88 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c688
c000a5c0:	83 ec 04             	sub    esp,0x4
c000a5c3:	68 a0 c6 02 c0       	push   0xc002c6a0
c000a5c8:	83 ec 08             	sub    esp,0x8
c000a5cb:	89 e2                	mov    edx,esp
c000a5cd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000a5d0:	89 02                	mov    DWORD PTR [edx],eax
c000a5d2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a5d5:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000a5d9:	ff d1                	call   ecx
c000a5db:	83 c4 10             	add    esp,0x10
c000a5de:	fb                   	sti    
c000a5df:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000a5e6:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000a5ea:	0f 84 08 01 00 00    	je     c000a6f8 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000a5f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5f3:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a5f9:	0f be c0             	movsx  eax,al
c000a5fc:	85 c0                	test   eax,eax
c000a5fe:	75 27                	jne    c000a627 <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c000a600:	fa                   	cli    
c000a601:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000a606:	83 c0 01             	add    eax,0x1
c000a609:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c000a60e:	e8 01 cc 00 00       	call   c0017214 <schedule()>
c000a613:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000a61b:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000a620:	85 c0                	test   eax,eax
c000a622:	75 cc                	jne    c000a5f0 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a624:	fb                   	sti    
c000a625:	eb c9                	jmp    c000a5f0 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a627:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a62a:	8d 50 01             	lea    edx,[eax+0x1]
c000a62d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000a630:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a633:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000a639:	88 10                	mov    BYTE PTR [eax],dl
c000a63b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a63e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a644:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000a647:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a64b:	83 f8 03             	cmp    eax,0x3
c000a64e:	75 1e                	jne    c000a66e <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c000a650:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a655:	8b 00                	mov    eax,DWORD PTR [eax]
c000a657:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a65a:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a660:	83 ec 08             	sub    esp,0x8
c000a663:	6a 02                	push   0x2
c000a665:	50                   	push   eax
c000a666:	e8 bc 6b 00 00       	call   c0011227 <KeRaiseSignal(SigHandlerBlock*, int)>
c000a66b:	83 c4 10             	add    esp,0x10
c000a66e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a672:	83 f8 1c             	cmp    eax,0x1c
c000a675:	75 1e                	jne    c000a695 <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c000a677:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a67c:	8b 00                	mov    eax,DWORD PTR [eax]
c000a67e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a681:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a687:	83 ec 08             	sub    esp,0x8
c000a68a:	6a 09                	push   0x9
c000a68c:	50                   	push   eax
c000a68d:	e8 95 6b 00 00       	call   c0011227 <KeRaiseSignal(SigHandlerBlock*, int)>
c000a692:	83 c4 10             	add    esp,0x10
c000a695:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a698:	05 02 01 00 00       	add    eax,0x102
c000a69d:	83 ec 0c             	sub    esp,0xc
c000a6a0:	50                   	push   eax
c000a6a1:	e8 ca 5e ff ff       	call   c0000570 <strlen>
c000a6a6:	83 c4 10             	add    esp,0x10
c000a6a9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a6ac:	81 c2 02 01 00 00    	add    edx,0x102
c000a6b2:	8d 4a 01             	lea    ecx,[edx+0x1]
c000a6b5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a6b8:	81 c2 02 01 00 00    	add    edx,0x102
c000a6be:	83 ec 04             	sub    esp,0x4
c000a6c1:	50                   	push   eax
c000a6c2:	51                   	push   ecx
c000a6c3:	52                   	push   edx
c000a6c4:	e8 07 5d ff ff       	call   c00003d0 <memmove>
c000a6c9:	83 c4 10             	add    esp,0x10
c000a6cc:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000a6d0:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000a6d4:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a6d8:	83 f8 0a             	cmp    eax,0xa
c000a6db:	74 16                	je     c000a6f3 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a6dd:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a6e1:	83 f8 03             	cmp    eax,0x3
c000a6e4:	74 0d                	je     c000a6f3 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a6e6:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a6ea:	83 f8 1c             	cmp    eax,0x1c
c000a6ed:	0f 85 f3 fe ff ff    	jne    c000a5e6 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000a6f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a6f6:	eb 03                	jmp    c000a6fb <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c000a6f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a6fb:	c9                   	leave  
c000a6fc:	c3                   	ret    
c000a6fd:	90                   	nop

c000a6fe <Keyboard::Keyboard(char const*)>:
c000a6fe:	83 ec 0c             	sub    esp,0xc
c000a701:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a705:	83 ec 08             	sub    esp,0x8
c000a708:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a70c:	50                   	push   eax
c000a70d:	e8 a4 f4 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000a712:	83 c4 10             	add    esp,0x10
c000a715:	ba e0 3a 02 c0       	mov    edx,0xc0023ae0
c000a71a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a71e:	89 10                	mov    DWORD PTR [eax],edx
c000a720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a724:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000a72e:	c6 05 84 c6 02 c0 01 	mov    BYTE PTR ds:0xc002c684,0x1
c000a735:	90                   	nop
c000a736:	83 c4 0c             	add    esp,0xc
c000a739:	c3                   	ret    

c000a73a <Keyboard::~Keyboard()>:
c000a73a:	83 ec 0c             	sub    esp,0xc
c000a73d:	ba e0 3a 02 c0       	mov    edx,0xc0023ae0
c000a742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a746:	89 10                	mov    DWORD PTR [eax],edx
c000a748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a74c:	83 ec 0c             	sub    esp,0xc
c000a74f:	50                   	push   eax
c000a750:	e8 01 f2 ff ff       	call   c0009956 <Device::~Device()>
c000a755:	83 c4 10             	add    esp,0x10
c000a758:	90                   	nop
c000a759:	83 c4 0c             	add    esp,0xc
c000a75c:	c3                   	ret    
c000a75d:	90                   	nop

c000a75e <Keyboard::~Keyboard()>:
c000a75e:	83 ec 0c             	sub    esp,0xc
c000a761:	83 ec 0c             	sub    esp,0xc
c000a764:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a768:	e8 cd ff ff ff       	call   c000a73a <Keyboard::~Keyboard()>
c000a76d:	83 c4 10             	add    esp,0x10
c000a770:	83 ec 08             	sub    esp,0x8
c000a773:	68 5c 01 00 00       	push   0x15c
c000a778:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a77c:	e8 68 2c 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c000a781:	83 c4 10             	add    esp,0x10
c000a784:	83 c4 0c             	add    esp,0xc
c000a787:	c3                   	ret    

c000a788 <LogicalDisk::close(int, int, void*)>:
c000a788:	83 c8 ff             	or     eax,0xffffffff
c000a78b:	c3                   	ret    

c000a78c <LogicalDisk::~LogicalDisk()>:
c000a78c:	83 ec 0c             	sub    esp,0xc
c000a78f:	ba 58 3b 02 c0       	mov    edx,0xc0023b58
c000a794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a798:	89 10                	mov    DWORD PTR [eax],edx
c000a79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a79e:	83 ec 0c             	sub    esp,0xc
c000a7a1:	50                   	push   eax
c000a7a2:	e8 af f1 ff ff       	call   c0009956 <Device::~Device()>
c000a7a7:	83 c4 10             	add    esp,0x10
c000a7aa:	90                   	nop
c000a7ab:	83 c4 0c             	add    esp,0xc
c000a7ae:	c3                   	ret    
c000a7af:	90                   	nop

c000a7b0 <LogicalDisk::~LogicalDisk()>:
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	83 ec 0c             	sub    esp,0xc
c000a7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ba:	e8 cd ff ff ff       	call   c000a78c <LogicalDisk::~LogicalDisk()>
c000a7bf:	83 c4 10             	add    esp,0x10
c000a7c2:	83 ec 08             	sub    esp,0x8
c000a7c5:	68 78 01 00 00       	push   0x178
c000a7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ce:	e8 16 2c 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c000a7d3:	83 c4 10             	add    esp,0x10
c000a7d6:	83 c4 0c             	add    esp,0xc
c000a7d9:	c3                   	ret    

c000a7da <LogicalDisk::open(int, int, void*)>:
c000a7da:	83 ec 18             	sub    esp,0x18
c000a7dd:	68 0c 3b 02 c0       	push   0xc0023b0c
c000a7e2:	e8 ff 57 00 00       	call   c000ffe6 <KePanic(char const*)>
c000a7e7:	83 c8 ff             	or     eax,0xffffffff
c000a7ea:	83 c4 1c             	add    esp,0x1c
c000a7ed:	c3                   	ret    

c000a7ee <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000a7ee:	53                   	push   ebx
c000a7ef:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a7f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a7f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a7fb:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000a801:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000a807:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000a80d:	77 10                	ja     c000a81f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000a80f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000a815:	89 d3                	mov    ebx,edx
c000a817:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000a81d:	72 05                	jb     c000a824 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000a81f:	83 c8 ff             	or     eax,0xffffffff
c000a822:	89 c2                	mov    edx,eax
c000a824:	5b                   	pop    ebx
c000a825:	c3                   	ret    

c000a826 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000a826:	56                   	push   esi
c000a827:	83 c8 ff             	or     eax,0xffffffff
c000a82a:	53                   	push   ebx
c000a82b:	89 c2                	mov    edx,eax
c000a82d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a831:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000a835:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a839:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a83f:	77 27                	ja     c000a868 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a841:	89 d8                	mov    eax,ebx
c000a843:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000a849:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000a84f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000a854:	89 c2                	mov    edx,eax
c000a856:	73 10                	jae    c000a868 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a858:	89 c8                	mov    eax,ecx
c000a85a:	89 da                	mov    edx,ebx
c000a85c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000a862:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000a868:	5b                   	pop    ebx
c000a869:	5e                   	pop    esi
c000a86a:	c3                   	ret    
c000a86b:	90                   	nop

c000a86c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a86c:	83 ec 1c             	sub    esp,0x1c
c000a86f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000a873:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a877:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a87b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a87f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a883:	89 04 24             	mov    DWORD PTR [esp],eax
c000a886:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a88a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a88e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a892:	83 ec 08             	sub    esp,0x8
c000a895:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a899:	50                   	push   eax
c000a89a:	e8 17 f3 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000a89f:	83 c4 10             	add    esp,0x10
c000a8a2:	ba 58 3b 02 c0       	mov    edx,0xc0023b58
c000a8a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8ab:	89 10                	mov    DWORD PTR [eax],edx
c000a8ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8b1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a8b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8bc:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000a8c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8c7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a8ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8d2:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000a8dc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a8e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a8e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a8e8:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000a8ee:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000a8f4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a8f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a8fb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8ff:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000a905:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000a90b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a90f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000a913:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000a919:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a91d:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a927:	90                   	nop
c000a928:	83 c4 1c             	add    esp,0x1c
c000a92b:	c3                   	ret    

c000a92c <LogicalDisk::assignDriveLetter()>:
c000a92c:	55                   	push   ebp
c000a92d:	57                   	push   edi
c000a92e:	56                   	push   esi
c000a92f:	53                   	push   ebx
c000a930:	83 ec 14             	sub    esp,0x14
c000a933:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a937:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000a93d:	b0 41                	mov    al,0x41
c000a93f:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000a945:	84 d2                	test   dl,dl
c000a947:	75 02                	jne    c000a94b <LogicalDisk::assignDriveLetter()+0x1f>
c000a949:	b0 43                	mov    al,0x43
c000a94b:	8b 3d c0 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002cac0
c000a951:	0f b6 ca             	movzx  ecx,dl
c000a954:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000a958:	0f be e8             	movsx  ebp,al
c000a95b:	8b 3d c4 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002cac4
c000a961:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a965:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000a969:	3c 43                	cmp    al,0x43
c000a96b:	75 10                	jne    c000a97d <LogicalDisk::assignDriveLetter()+0x51>
c000a96d:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000a974:	75 5a                	jne    c000a9d0 <LogicalDisk::assignDriveLetter()+0xa4>
c000a976:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a97b:	75 53                	jne    c000a9d0 <LogicalDisk::assignDriveLetter()+0xa4>
c000a97d:	8d 75 bf             	lea    esi,[ebp-0x41]
c000a980:	ba 01 00 00 00       	mov    edx,0x1
c000a985:	89 34 24             	mov    DWORD PTR [esp],esi
c000a988:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000a98b:	d3 e2                	shl    edx,cl
c000a98d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a991:	89 d7                	mov    edi,edx
c000a993:	89 d6                	mov    esi,edx
c000a995:	c1 ff 1f             	sar    edi,0x1f
c000a998:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000a99c:	21 f9                	and    ecx,edi
c000a99e:	09 d1                	or     ecx,edx
c000a9a0:	75 2e                	jne    c000a9d0 <LogicalDisk::assignDriveLetter()+0xa4>
c000a9a2:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000a9a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9aa:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000a9b0:	09 f2                	or     edx,esi
c000a9b2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000a9b5:	89 15 c0 ca 02 c0    	mov    DWORD PTR ds:0xc002cac0,edx
c000a9bb:	89 1c b5 e0 ca 02 c0 	mov    DWORD PTR [esi*4-0x3ffd3520],ebx
c000a9c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a9c6:	09 fa                	or     edx,edi
c000a9c8:	89 15 c4 ca 02 c0    	mov    DWORD PTR ds:0xc002cac4,edx
c000a9ce:	eb 0d                	jmp    c000a9dd <LogicalDisk::assignDriveLetter()+0xb1>
c000a9d0:	8d 50 01             	lea    edx,[eax+0x1]
c000a9d3:	45                   	inc    ebp
c000a9d4:	88 d0                	mov    al,dl
c000a9d6:	80 fa 5b             	cmp    dl,0x5b
c000a9d9:	75 8e                	jne    c000a969 <LogicalDisk::assignDriveLetter()+0x3d>
c000a9db:	31 c0                	xor    eax,eax
c000a9dd:	83 c4 14             	add    esp,0x14
c000a9e0:	5b                   	pop    ebx
c000a9e1:	5e                   	pop    esi
c000a9e2:	5f                   	pop    edi
c000a9e3:	5d                   	pop    ebp
c000a9e4:	c3                   	ret    
c000a9e5:	90                   	nop

c000a9e6 <LogicalDisk::mount()>:
c000a9e6:	56                   	push   esi
c000a9e7:	53                   	push   ebx
c000a9e8:	53                   	push   ebx
c000a9e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a9ed:	8b 1d 04 c3 02 c0    	mov    ebx,DWORD PTR ds:0xc002c304
c000a9f3:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a9fd:	85 db                	test   ebx,ebx
c000a9ff:	74 27                	je     c000aa28 <LogicalDisk::mount()+0x42>
c000aa01:	51                   	push   ecx
c000aa02:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000aa09:	8b 13                	mov    edx,DWORD PTR [ebx]
c000aa0b:	83 e8 41             	sub    eax,0x41
c000aa0e:	50                   	push   eax
c000aa0f:	56                   	push   esi
c000aa10:	53                   	push   ebx
c000aa11:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000aa14:	83 c4 10             	add    esp,0x10
c000aa17:	84 c0                	test   al,al
c000aa19:	74 08                	je     c000aa23 <LogicalDisk::mount()+0x3d>
c000aa1b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000aa21:	eb 07                	jmp    c000aa2a <LogicalDisk::mount()+0x44>
c000aa23:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000aa26:	eb d5                	jmp    c000a9fd <LogicalDisk::mount()+0x17>
c000aa28:	31 c0                	xor    eax,eax
c000aa2a:	5a                   	pop    edx
c000aa2b:	5b                   	pop    ebx
c000aa2c:	5e                   	pop    esi
c000aa2d:	c3                   	ret    

c000aa2e <LogicalDisk::unmount()>:
c000aa2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa32:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000aa3c:	c3                   	ret    
c000aa3d:	90                   	nop

c000aa3e <LogicalDisk::eject()>:
c000aa3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa42:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000aa48:	8b 10                	mov    edx,DWORD PTR [eax]
c000aa4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa4e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000aa51:	90                   	nop

c000aa52 <LogicalDisk::unassignDriveLetter()>:
c000aa52:	57                   	push   edi
c000aa53:	56                   	push   esi
c000aa54:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aa58:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000aa5f:	85 c9                	test   ecx,ecx
c000aa61:	75 0f                	jne    c000aa72 <LogicalDisk::unassignDriveLetter()+0x20>
c000aa63:	c7 44 24 0c 30 3b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023b30
c000aa6b:	5e                   	pop    esi
c000aa6c:	5f                   	pop    edi
c000aa6d:	e9 74 55 00 00       	jmp    c000ffe6 <KePanic(char const*)>
c000aa72:	83 e9 41             	sub    ecx,0x41
c000aa75:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000aa7c:	b8 01 00 00 00       	mov    eax,0x1
c000aa81:	c7 04 8d e0 ca 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd3520],0x0
c000aa8c:	d3 e0                	shl    eax,cl
c000aa8e:	89 c7                	mov    edi,eax
c000aa90:	f7 d0                	not    eax
c000aa92:	c1 ff 1f             	sar    edi,0x1f
c000aa95:	21 05 c0 ca 02 c0    	and    DWORD PTR ds:0xc002cac0,eax
c000aa9b:	89 fe                	mov    esi,edi
c000aa9d:	f7 d6                	not    esi
c000aa9f:	21 35 c4 ca 02 c0    	and    DWORD PTR ds:0xc002cac4,esi
c000aaa5:	5e                   	pop    esi
c000aaa6:	5f                   	pop    edi
c000aaa7:	c3                   	ret    

c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)>:
c000aaa8:	57                   	push   edi
c000aaa9:	56                   	push   esi
c000aaaa:	53                   	push   ebx
c000aaab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aaaf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aab3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aab7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aabb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aac1:	77 41                	ja     c000ab04 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000aac3:	99                   	cdq    
c000aac4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aaca:	01 c8                	add    eax,ecx
c000aacc:	11 da                	adc    edx,ebx
c000aace:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aad4:	19 d7                	sbb    edi,edx
c000aad6:	72 33                	jb     c000ab0b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000aad8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aade:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aae4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aae8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aaec:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000aaf2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000aaf8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aafc:	5b                   	pop    ebx
c000aafd:	5e                   	pop    esi
c000aafe:	5f                   	pop    edi
c000aaff:	e9 a2 0b 00 00       	jmp    c000b6a6 <VCache::read(unsigned long long, int, void*)>
c000ab04:	b8 05 00 00 00       	mov    eax,0x5
c000ab09:	eb 05                	jmp    c000ab10 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000ab0b:	b8 07 00 00 00       	mov    eax,0x7
c000ab10:	5b                   	pop    ebx
c000ab11:	5e                   	pop    esi
c000ab12:	5f                   	pop    edi
c000ab13:	c3                   	ret    

c000ab14 <LogicalDisk::write(unsigned long long, int, void*)>:
c000ab14:	57                   	push   edi
c000ab15:	56                   	push   esi
c000ab16:	53                   	push   ebx
c000ab17:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ab1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ab1f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ab23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab27:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ab2d:	77 41                	ja     c000ab70 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000ab2f:	99                   	cdq    
c000ab30:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ab36:	01 c8                	add    eax,ecx
c000ab38:	11 da                	adc    edx,ebx
c000ab3a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ab40:	19 d7                	sbb    edi,edx
c000ab42:	72 33                	jb     c000ab77 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000ab44:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ab4a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ab50:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ab54:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ab58:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ab5e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ab64:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ab68:	5b                   	pop    ebx
c000ab69:	5e                   	pop    esi
c000ab6a:	5f                   	pop    edi
c000ab6b:	e9 68 09 00 00       	jmp    c000b4d8 <VCache::write(unsigned long long, int, void*)>
c000ab70:	b8 05 00 00 00       	mov    eax,0x5
c000ab75:	eb 05                	jmp    c000ab7c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ab77:	b8 07 00 00 00       	mov    eax,0x7
c000ab7c:	5b                   	pop    ebx
c000ab7d:	5e                   	pop    esi
c000ab7e:	5f                   	pop    edi
c000ab7f:	c3                   	ret    

c000ab80 <Mouse::Mouse(char const*)>:
c000ab80:	83 ec 0c             	sub    esp,0xc
c000ab83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab87:	83 ec 08             	sub    esp,0x8
c000ab8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab8e:	50                   	push   eax
c000ab8f:	e8 22 f0 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000ab94:	83 c4 10             	add    esp,0x10
c000ab97:	ba 84 3b 02 c0       	mov    edx,0xc0023b84
c000ab9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aba0:	89 10                	mov    DWORD PTR [eax],edx
c000aba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aba6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000abb0:	90                   	nop
c000abb1:	83 c4 0c             	add    esp,0xc
c000abb4:	c3                   	ret    
c000abb5:	90                   	nop
c000abb6:	66 90                	xchg   ax,ax

c000abb8 <Mouse::~Mouse()>:
c000abb8:	83 ec 0c             	sub    esp,0xc
c000abbb:	ba 84 3b 02 c0       	mov    edx,0xc0023b84
c000abc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abc4:	89 10                	mov    DWORD PTR [eax],edx
c000abc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abca:	83 ec 0c             	sub    esp,0xc
c000abcd:	50                   	push   eax
c000abce:	e8 83 ed ff ff       	call   c0009956 <Device::~Device()>
c000abd3:	83 c4 10             	add    esp,0x10
c000abd6:	90                   	nop
c000abd7:	83 c4 0c             	add    esp,0xc
c000abda:	c3                   	ret    
c000abdb:	90                   	nop

c000abdc <Mouse::~Mouse()>:
c000abdc:	83 ec 0c             	sub    esp,0xc
c000abdf:	83 ec 0c             	sub    esp,0xc
c000abe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abe6:	e8 cd ff ff ff       	call   c000abb8 <Mouse::~Mouse()>
c000abeb:	83 c4 10             	add    esp,0x10
c000abee:	83 ec 08             	sub    esp,0x8
c000abf1:	68 58 01 00 00       	push   0x158
c000abf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abfa:	e8 ea 27 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c000abff:	83 c4 10             	add    esp,0x10
c000ac02:	83 c4 0c             	add    esp,0xc
c000ac05:	c3                   	ret    

c000ac06 <NIC::getMAC()>:
c000ac06:	31 c0                	xor    eax,eax
c000ac08:	31 d2                	xor    edx,edx
c000ac0a:	c3                   	ret    
c000ac0b:	90                   	nop

c000ac0c <NIC::write(int, unsigned char*, int*)>:
c000ac0c:	b8 01 00 00 00       	mov    eax,0x1
c000ac11:	c3                   	ret    

c000ac12 <NIC::NIC(char const*)>:
c000ac12:	83 ec 0c             	sub    esp,0xc
c000ac15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac19:	83 ec 08             	sub    esp,0x8
c000ac1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac20:	50                   	push   eax
c000ac21:	e8 90 ef ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000ac26:	83 c4 10             	add    esp,0x10
c000ac29:	ba b0 3b 02 c0       	mov    edx,0xc0023bb0
c000ac2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac32:	89 10                	mov    DWORD PTR [eax],edx
c000ac34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac38:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000ac42:	90                   	nop
c000ac43:	83 c4 0c             	add    esp,0xc
c000ac46:	c3                   	ret    
c000ac47:	90                   	nop

c000ac48 <NIC::~NIC()>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	ba b0 3b 02 c0       	mov    edx,0xc0023bb0
c000ac50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac54:	89 10                	mov    DWORD PTR [eax],edx
c000ac56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac5a:	83 ec 0c             	sub    esp,0xc
c000ac5d:	50                   	push   eax
c000ac5e:	e8 f3 ec ff ff       	call   c0009956 <Device::~Device()>
c000ac63:	83 c4 10             	add    esp,0x10
c000ac66:	90                   	nop
c000ac67:	83 c4 0c             	add    esp,0xc
c000ac6a:	c3                   	ret    
c000ac6b:	90                   	nop

c000ac6c <NIC::~NIC()>:
c000ac6c:	83 ec 0c             	sub    esp,0xc
c000ac6f:	83 ec 0c             	sub    esp,0xc
c000ac72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac76:	e8 cd ff ff ff       	call   c000ac48 <NIC::~NIC()>
c000ac7b:	83 c4 10             	add    esp,0x10
c000ac7e:	83 ec 08             	sub    esp,0x8
c000ac81:	68 58 01 00 00       	push   0x158
c000ac86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac8a:	e8 5a 27 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c000ac8f:	83 c4 10             	add    esp,0x10
c000ac92:	83 c4 0c             	add    esp,0xc
c000ac95:	c3                   	ret    

c000ac96 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ac96:	55                   	push   ebp
c000ac97:	57                   	push   edi
c000ac98:	56                   	push   esi
c000ac99:	53                   	push   ebx
c000ac9a:	81 ec 28 01 00 00    	sub    esp,0x128
c000aca0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000aca7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000acae:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000acb5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000acbc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000acc0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000acc4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000accb:	e8 e2 ef ff ff       	call   c0009cb2 <Device::getName()>
c000acd0:	5a                   	pop    edx
c000acd1:	59                   	pop    ecx
c000acd2:	50                   	push   eax
c000acd3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000acd7:	55                   	push   ebp
c000acd8:	e8 63 59 ff ff       	call   c0000640 <strcpy>
c000acdd:	5b                   	pop    ebx
c000acde:	58                   	pop    eax
c000acdf:	68 dc 3b 02 c0       	push   0xc0023bdc
c000ace4:	55                   	push   ebp
c000ace5:	e8 56 5b ff ff       	call   c0000840 <strcat>
c000acea:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000acf1:	e8 99 4e 00 00       	call   c000fb8f <malloc>
c000acf6:	83 c4 0c             	add    esp,0xc
c000acf9:	89 c3                	mov    ebx,eax
c000acfb:	57                   	push   edi
c000acfc:	56                   	push   esi
c000acfd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad05:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000ad0c:	55                   	push   ebp
c000ad0d:	50                   	push   eax
c000ad0e:	e8 59 fb ff ff       	call   c000a86c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000ad13:	83 c4 14             	add    esp,0x14
c000ad16:	53                   	push   ebx
c000ad17:	e8 10 fc ff ff       	call   c000a92c <LogicalDisk::assignDriveLetter()>
c000ad1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ad1f:	e8 c2 fc ff ff       	call   c000a9e6 <LogicalDisk::mount()>
c000ad24:	58                   	pop    eax
c000ad25:	5a                   	pop    edx
c000ad26:	53                   	push   ebx
c000ad27:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ad2e:	e8 21 ed ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000ad33:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ad39:	5b                   	pop    ebx
c000ad3a:	5e                   	pop    esi
c000ad3b:	5f                   	pop    edi
c000ad3c:	5d                   	pop    ebp
c000ad3d:	c3                   	ret    

c000ad3e <createPartitionsForDisk(PhysicalDisk*)>:
c000ad3e:	55                   	push   ebp
c000ad3f:	57                   	push   edi
c000ad40:	56                   	push   esi
c000ad41:	53                   	push   ebx
c000ad42:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ad48:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ad4f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ad55:	3d 00 02 00 00       	cmp    eax,0x200
c000ad5a:	74 27                	je     c000ad83 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ad5c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ad62:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ad68:	83 ec 10             	sub    esp,0x10
c000ad6b:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ad6f:	99                   	cdq    
c000ad70:	c1 e6 0a             	shl    esi,0xa
c000ad73:	52                   	push   edx
c000ad74:	89 fd                	mov    ebp,edi
c000ad76:	50                   	push   eax
c000ad77:	55                   	push   ebp
c000ad78:	56                   	push   esi
c000ad79:	e8 b6 6f 01 00       	call   c0021d34 <__udivdi3>
c000ad7e:	e9 b9 00 00 00       	jmp    c000ae3c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad83:	83 ec 0c             	sub    esp,0xc
c000ad86:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ad88:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ad8c:	56                   	push   esi
c000ad8d:	6a 01                	push   0x1
c000ad8f:	6a 00                	push   0x0
c000ad91:	6a 00                	push   0x0
c000ad93:	53                   	push   ebx
c000ad94:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad97:	83 c4 20             	add    esp,0x20
c000ad9a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ada2:	75 0a                	jne    c000adae <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ada4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000adac:	74 2c                	je     c000adda <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000adae:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000adb4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000adba:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000adc0:	83 ec 10             	sub    esp,0x10
c000adc3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000adc7:	89 f7                	mov    edi,esi
c000adc9:	c1 e0 0a             	shl    eax,0xa
c000adcc:	c1 ff 1f             	sar    edi,0x1f
c000adcf:	57                   	push   edi
c000add0:	56                   	push   esi
c000add1:	52                   	push   edx
c000add2:	50                   	push   eax
c000add3:	e8 5c 6f 01 00       	call   c0021d34 <__udivdi3>
c000add8:	eb 62                	jmp    c000ae3c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000adda:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ade1:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000ade8:	89 cf                	mov    edi,ecx
c000adea:	83 e2 7f             	and    edx,0x7f
c000aded:	83 e7 7f             	and    edi,0x7f
c000adf0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000adf7:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000adfa:	83 e0 7f             	and    eax,0x7f
c000adfd:	8d 14 01             	lea    edx,[ecx+eax*1]
c000ae00:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000ae07:	83 e0 7f             	and    eax,0x7f
c000ae0a:	01 d0                	add    eax,edx
c000ae0c:	89 c5                	mov    ebp,eax
c000ae0e:	84 c0                	test   al,al
c000ae10:	74 41                	je     c000ae53 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000ae12:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ae18:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ae1e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ae24:	83 ec 10             	sub    esp,0x10
c000ae27:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ae2b:	89 f7                	mov    edi,esi
c000ae2d:	c1 e0 0a             	shl    eax,0xa
c000ae30:	c1 ff 1f             	sar    edi,0x1f
c000ae33:	57                   	push   edi
c000ae34:	56                   	push   esi
c000ae35:	52                   	push   edx
c000ae36:	50                   	push   eax
c000ae37:	e8 f8 6e 01 00       	call   c0021d34 <__udivdi3>
c000ae3c:	83 c4 14             	add    esp,0x14
c000ae3f:	52                   	push   edx
c000ae40:	50                   	push   eax
c000ae41:	6a 00                	push   0x0
c000ae43:	6a 00                	push   0x0
c000ae45:	53                   	push   ebx
c000ae46:	e8 4b fe ff ff       	call   c000ac96 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000ae4b:	83 c4 20             	add    esp,0x20
c000ae4e:	e9 73 01 00 00       	jmp    c000afc6 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000ae53:	89 f0                	mov    eax,esi
c000ae55:	31 c9                	xor    ecx,ecx
c000ae57:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000ae5e:	75 02                	jne    c000ae62 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000ae60:	89 cd                	mov    ebp,ecx
c000ae62:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000ae69:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000ae70:	c1 e2 08             	shl    edx,0x8
c000ae73:	c1 e6 10             	shl    esi,0x10
c000ae76:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000ae7e:	09 f2                	or     edx,esi
c000ae80:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000ae88:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000ae8f:	83 c0 10             	add    eax,0x10
c000ae92:	09 f2                	or     edx,esi
c000ae94:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000ae9b:	c1 e6 18             	shl    esi,0x18
c000ae9e:	09 f2                	or     edx,esi
c000aea0:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000aea7:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000aeab:	c1 e6 10             	shl    esi,0x10
c000aeae:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000aeb5:	c1 e2 08             	shl    edx,0x8
c000aeb8:	09 f2                	or     edx,esi
c000aeba:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000aec1:	09 f2                	or     edx,esi
c000aec3:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000aeca:	c1 e6 18             	shl    esi,0x18
c000aecd:	09 f2                	or     edx,esi
c000aecf:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000aed3:	41                   	inc    ecx
c000aed4:	83 f9 04             	cmp    ecx,0x4
c000aed7:	0f 85 7a ff ff ff    	jne    c000ae57 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000aedd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee1:	83 f0 01             	xor    eax,0x1
c000aee4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000aee8:	75 4f                	jne    c000af39 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000aeea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aeee:	83 f0 01             	xor    eax,0x1
c000aef1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000aef5:	75 42                	jne    c000af39 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000aef7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000aeff:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000af07:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000af0d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000af13:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000af19:	0f a4 c2 0a          	shld   edx,eax,0xa
c000af1d:	89 f7                	mov    edi,esi
c000af1f:	c1 e0 0a             	shl    eax,0xa
c000af22:	c1 ff 1f             	sar    edi,0x1f
c000af25:	57                   	push   edi
c000af26:	56                   	push   esi
c000af27:	52                   	push   edx
c000af28:	50                   	push   eax
c000af29:	e8 06 6e 01 00       	call   c0021d34 <__udivdi3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000af35:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000af39:	89 e8                	mov    eax,ebp
c000af3b:	0f b6 e8             	movzx  ebp,al
c000af3e:	85 ed                	test   ebp,ebp
c000af40:	74 50                	je     c000af92 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000af42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af46:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000af4a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000af4e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000af52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af56:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000af5a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000af5e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000af62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000af66:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000af6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af6e:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000af72:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000af76:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af7a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af82:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000af86:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000af8a:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000af8e:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000af92:	31 ed                	xor    ebp,ebp
c000af94:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af98:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af9c:	89 f8                	mov    eax,edi
c000af9e:	09 f0                	or     eax,esi
c000afa0:	74 1e                	je     c000afc0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000afa2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000afa6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000afaa:	89 d1                	mov    ecx,edx
c000afac:	09 c1                	or     ecx,eax
c000afae:	74 10                	je     c000afc0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000afb0:	83 ec 0c             	sub    esp,0xc
c000afb3:	57                   	push   edi
c000afb4:	56                   	push   esi
c000afb5:	52                   	push   edx
c000afb6:	50                   	push   eax
c000afb7:	53                   	push   ebx
c000afb8:	e8 d9 fc ff ff       	call   c000ac96 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000afbd:	83 c4 20             	add    esp,0x20
c000afc0:	45                   	inc    ebp
c000afc1:	83 fd 04             	cmp    ebp,0x4
c000afc4:	75 ce                	jne    c000af94 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000afc6:	81 c4 5c 02 00 00    	add    esp,0x25c
c000afcc:	5b                   	pop    ebx
c000afcd:	5e                   	pop    esi
c000afce:	5f                   	pop    edi
c000afcf:	5d                   	pop    ebp
c000afd0:	c3                   	ret    
c000afd1:	66 90                	xchg   ax,ax
c000afd3:	90                   	nop

c000afd4 <Serial::Serial(char const*)>:
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afdb:	83 ec 08             	sub    esp,0x8
c000afde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afe2:	50                   	push   eax
c000afe3:	e8 ce eb ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000afe8:	83 c4 10             	add    esp,0x10
c000afeb:	ba f0 3b 02 c0       	mov    edx,0xc0023bf0
c000aff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff4:	89 10                	mov    DWORD PTR [eax],edx
c000aff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000affa:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000b004:	90                   	nop
c000b005:	83 c4 0c             	add    esp,0xc
c000b008:	c3                   	ret    
c000b009:	90                   	nop
c000b00a:	66 90                	xchg   ax,ax

c000b00c <Serial::~Serial()>:
c000b00c:	83 ec 0c             	sub    esp,0xc
c000b00f:	ba f0 3b 02 c0       	mov    edx,0xc0023bf0
c000b014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b018:	89 10                	mov    DWORD PTR [eax],edx
c000b01a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b01e:	83 ec 0c             	sub    esp,0xc
c000b021:	50                   	push   eax
c000b022:	e8 2f e9 ff ff       	call   c0009956 <Device::~Device()>
c000b027:	83 c4 10             	add    esp,0x10
c000b02a:	90                   	nop
c000b02b:	83 c4 0c             	add    esp,0xc
c000b02e:	c3                   	ret    
c000b02f:	90                   	nop

c000b030 <Serial::~Serial()>:
c000b030:	83 ec 0c             	sub    esp,0xc
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b03a:	e8 cd ff ff ff       	call   c000b00c <Serial::~Serial()>
c000b03f:	83 c4 10             	add    esp,0x10
c000b042:	83 ec 08             	sub    esp,0x8
c000b045:	68 58 01 00 00       	push   0x158
c000b04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b04e:	e8 96 23 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c000b053:	83 c4 10             	add    esp,0x10
c000b056:	83 c4 0c             	add    esp,0xc
c000b059:	c3                   	ret    
c000b05a:	66 90                	xchg   ax,ax

c000b05c <Timer::Timer(char const*)>:
c000b05c:	83 ec 0c             	sub    esp,0xc
c000b05f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b063:	83 ec 08             	sub    esp,0x8
c000b066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b06a:	50                   	push   eax
c000b06b:	e8 46 eb ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000b070:	83 c4 10             	add    esp,0x10
c000b073:	ba cc 3c 02 c0       	mov    edx,0xc0023ccc
c000b078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b07c:	89 10                	mov    DWORD PTR [eax],edx
c000b07e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b082:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000b08c:	90                   	nop
c000b08d:	83 c4 0c             	add    esp,0xc
c000b090:	c3                   	ret    
c000b091:	90                   	nop
c000b092:	66 90                	xchg   ax,ax

c000b094 <Timer::~Timer()>:
c000b094:	83 ec 0c             	sub    esp,0xc
c000b097:	ba cc 3c 02 c0       	mov    edx,0xc0023ccc
c000b09c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0a0:	89 10                	mov    DWORD PTR [eax],edx
c000b0a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0a6:	83 ec 0c             	sub    esp,0xc
c000b0a9:	50                   	push   eax
c000b0aa:	e8 a7 e8 ff ff       	call   c0009956 <Device::~Device()>
c000b0af:	83 c4 10             	add    esp,0x10
c000b0b2:	90                   	nop
c000b0b3:	83 c4 0c             	add    esp,0xc
c000b0b6:	c3                   	ret    
c000b0b7:	90                   	nop

c000b0b8 <Timer::~Timer()>:
c000b0b8:	83 ec 0c             	sub    esp,0xc
c000b0bb:	83 ec 0c             	sub    esp,0xc
c000b0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0c2:	e8 cd ff ff ff       	call   c000b094 <Timer::~Timer()>
c000b0c7:	83 c4 10             	add    esp,0x10
c000b0ca:	83 ec 08             	sub    esp,0x8
c000b0cd:	68 5c 01 00 00       	push   0x15c
c000b0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0d6:	e8 0e 23 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c000b0db:	83 c4 10             	add    esp,0x10
c000b0de:	83 c4 0c             	add    esp,0xc
c000b0e1:	c3                   	ret    

c000b0e2 <Timer::read()>:
c000b0e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0e6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b0ec:	c3                   	ret    

c000b0ed <setupTimer(int)>:
c000b0ed:	53                   	push   ebx
c000b0ee:	83 ec 14             	sub    esp,0x14
c000b0f1:	68 5c 01 00 00       	push   0x15c
c000b0f6:	e8 94 4a 00 00       	call   c000fb8f <malloc>
c000b0fb:	89 04 24             	mov    DWORD PTR [esp],eax
c000b0fe:	89 c3                	mov    ebx,eax
c000b100:	e8 db 64 01 00       	call   c00215e0 <PIT::PIT()>
c000b105:	58                   	pop    eax
c000b106:	5a                   	pop    edx
c000b107:	53                   	push   ebx
c000b108:	ff 35 c8 d0 02 c0    	push   DWORD PTR ds:0xc002d0c8
c000b10e:	e8 41 e9 ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000b113:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b115:	6a 00                	push   0x0
c000b117:	6a 00                	push   0x0
c000b119:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b11d:	53                   	push   ebx
c000b11e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b121:	89 d8                	mov    eax,ebx
c000b123:	83 c4 28             	add    esp,0x28
c000b126:	5b                   	pop    ebx
c000b127:	c3                   	ret    

c000b128 <timerHandler(unsigned int)>:
c000b128:	57                   	push   edi
c000b129:	31 d2                	xor    edx,edx
c000b12b:	56                   	push   esi
c000b12c:	53                   	push   ebx
c000b12d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b131:	01 1d 50 cb 02 c0    	add    DWORD PTR ds:0xc002cb50,ebx
c000b137:	11 15 54 cb 02 c0    	adc    DWORD PTR ds:0xc002cb54,edx
c000b13d:	80 3d cd d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0cd,0x0
c000b144:	75 12                	jne    c000b158 <timerHandler(unsigned int)+0x30>
c000b146:	c7 44 24 10 7f 3c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023c7f
c000b14e:	5b                   	pop    ebx
c000b14f:	5e                   	pop    esi
c000b150:	5f                   	pop    edi
c000b151:	e9 26 be ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c000b156:	66 90                	xchg   ax,ax
c000b158:	fa                   	cli    
c000b159:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c000b15f:	83 ec 0c             	sub    esp,0xc
c000b162:	68 40 fa 02 c0       	push   0xc002fa40
c000b167:	e8 60 6f 01 00       	call   c00220cc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b16c:	83 c4 10             	add    esp,0x10
c000b16f:	84 c0                	test   al,al
c000b171:	0f 85 a9 00 00 00    	jne    c000b220 <timerHandler(unsigned int)+0xf8>
c000b177:	83 ec 0c             	sub    esp,0xc
c000b17a:	68 40 fa 02 c0       	push   0xc002fa40
c000b17f:	e8 64 6f 01 00       	call   c00220e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b184:	83 c4 10             	add    esp,0x10
c000b187:	89 c6                	mov    esi,eax
c000b189:	8d 76 00             	lea    esi,[esi+0x0]
c000b18c:	83 ec 0c             	sub    esp,0xc
c000b18f:	68 40 fa 02 c0       	push   0xc002fa40
c000b194:	e8 4f 6f 01 00       	call   c00220e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b199:	c7 04 24 40 fa 02 c0 	mov    DWORD PTR [esp],0xc002fa40
c000b1a0:	89 c7                	mov    edi,eax
c000b1a2:	e8 49 6f 01 00       	call   c00220f0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000b1a7:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c000b1aa:	83 c4 10             	add    esp,0x10
c000b1ad:	8b 4f 30             	mov    ecx,DWORD PTR [edi+0x30]
c000b1b0:	39 15 50 cb 02 c0    	cmp    DWORD PTR ds:0xc002cb50,edx
c000b1b6:	a1 54 cb 02 c0       	mov    eax,ds:0xc002cb54
c000b1bb:	19 c8                	sbb    eax,ecx
c000b1bd:	72 21                	jb     c000b1e0 <timerHandler(unsigned int)+0xb8>
c000b1bf:	83 ec 0c             	sub    esp,0xc
c000b1c2:	57                   	push   edi
c000b1c3:	e8 a8 c3 00 00       	call   c0017570 <unblockTask(ThreadControlBlock*)>
c000b1c8:	83 c4 10             	add    esp,0x10
c000b1cb:	39 fe                	cmp    esi,edi
c000b1cd:	75 25                	jne    c000b1f4 <timerHandler(unsigned int)+0xcc>
c000b1cf:	83 ec 0c             	sub    esp,0xc
c000b1d2:	68 40 fa 02 c0       	push   0xc002fa40
c000b1d7:	e8 0c 6f 01 00       	call   c00220e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b1dc:	89 c6                	mov    esi,eax
c000b1de:	eb 10                	jmp    c000b1f0 <timerHandler(unsigned int)+0xc8>
c000b1e0:	50                   	push   eax
c000b1e1:	50                   	push   eax
c000b1e2:	57                   	push   edi
c000b1e3:	68 40 fa 02 c0       	push   0xc002fa40
c000b1e8:	e8 bf 6f 01 00       	call   c00221ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000b1ed:	8d 76 00             	lea    esi,[esi+0x0]
c000b1f0:	83 c4 10             	add    esp,0x10
c000b1f3:	90                   	nop
c000b1f4:	83 ec 0c             	sub    esp,0xc
c000b1f7:	68 40 fa 02 c0       	push   0xc002fa40
c000b1fc:	e8 cb 6e 01 00       	call   c00220cc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b201:	83 c4 10             	add    esp,0x10
c000b204:	84 c0                	test   al,al
c000b206:	75 18                	jne    c000b220 <timerHandler(unsigned int)+0xf8>
c000b208:	83 ec 0c             	sub    esp,0xc
c000b20b:	68 40 fa 02 c0       	push   0xc002fa40
c000b210:	e8 d3 6e 01 00       	call   c00220e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b215:	83 c4 10             	add    esp,0x10
c000b218:	39 f0                	cmp    eax,esi
c000b21a:	0f 85 6c ff ff ff    	jne    c000b18c <timerHandler(unsigned int)+0x64>
c000b220:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b225:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b228:	85 c0                	test   eax,eax
c000b22a:	74 48                	je     c000b274 <timerHandler(unsigned int)+0x14c>
c000b22c:	80 3d cc d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0cc,0x0
c000b233:	74 3f                	je     c000b274 <timerHandler(unsigned int)+0x14c>
c000b235:	3d e8 03 00 00       	cmp    eax,0x3e8
c000b23a:	76 1c                	jbe    c000b258 <timerHandler(unsigned int)+0x130>
c000b23c:	83 ec 0c             	sub    esp,0xc
c000b23f:	68 95 3c 02 c0       	push   0xc0023c95
c000b244:	e8 33 bd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000b249:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b24e:	83 c4 10             	add    esp,0x10
c000b251:	c7 40 38 e8 03 00 00 	mov    DWORD PTR [eax+0x38],0x3e8
c000b258:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b25e:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000b261:	89 c1                	mov    ecx,eax
c000b263:	29 d9                	sub    ecx,ebx
c000b265:	39 d8                	cmp    eax,ebx
c000b267:	89 4a 38             	mov    DWORD PTR [edx+0x38],ecx
c000b26a:	77 08                	ja     c000b274 <timerHandler(unsigned int)+0x14c>
c000b26c:	e8 a3 bf 00 00       	call   c0017214 <schedule()>
c000b271:	8d 76 00             	lea    esi,[esi+0x0]
c000b274:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c000b27b:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c000b282:	75 04                	jne    c000b288 <timerHandler(unsigned int)+0x160>
c000b284:	fb                   	sti    
c000b285:	8d 76 00             	lea    esi,[esi+0x0]
c000b288:	5b                   	pop    ebx
c000b289:	5e                   	pop    esi
c000b28a:	5f                   	pop    edi
c000b28b:	c3                   	ret    

c000b28c <VCache::VCache(PhysicalDisk*)>:
c000b28c:	53                   	push   ebx
c000b28d:	83 ec 18             	sub    esp,0x18
c000b290:	ba 3c 3d 02 c0       	mov    edx,0xc0023d3c
c000b295:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b299:	89 10                	mov    DWORD PTR [eax],edx
c000b29b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b29f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000b2a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2aa:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000b2b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2b5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000b2bc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000b2c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2c7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000b2ce:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000b2d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2d9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000b2e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2e4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b2e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2ec:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000b2f3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000b2fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2fe:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b302:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b306:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000b30a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b30e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b312:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b316:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000b31d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000b325:	83 ec 0c             	sub    esp,0xc
c000b328:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b32c:	e8 5e 48 00 00       	call   c000fb8f <malloc>
c000b331:	83 c4 10             	add    esp,0x10
c000b334:	89 c3                	mov    ebx,eax
c000b336:	83 ec 0c             	sub    esp,0xc
c000b339:	53                   	push   ebx
c000b33a:	e8 8d 4c 00 00       	call   c000ffcc <Mutex::Mutex()>
c000b33f:	83 c4 10             	add    esp,0x10
c000b342:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b346:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000b349:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b34d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b351:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000b354:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b358:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b35f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b363:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b369:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b36d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b370:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b374:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000b37a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b380:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b384:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000b387:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000b38a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b38e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b392:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b396:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b39c:	05 00 01 00 00       	add    eax,0x100
c000b3a1:	c1 e0 04             	shl    eax,0x4
c000b3a4:	83 ec 0c             	sub    esp,0xc
c000b3a7:	50                   	push   eax
c000b3a8:	e8 e2 47 00 00       	call   c000fb8f <malloc>
c000b3ad:	83 c4 10             	add    esp,0x10
c000b3b0:	89 c2                	mov    edx,eax
c000b3b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3b6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b3b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3bd:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000b3c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3c8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b3cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b3d0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b3d6:	89 d0                	mov    eax,edx
c000b3d8:	c1 e0 02             	shl    eax,0x2
c000b3db:	01 d0                	add    eax,edx
c000b3dd:	c1 e0 04             	shl    eax,0x4
c000b3e0:	83 ec 0c             	sub    esp,0xc
c000b3e3:	50                   	push   eax
c000b3e4:	e8 a6 47 00 00       	call   c000fb8f <malloc>
c000b3e9:	83 c4 10             	add    esp,0x10
c000b3ec:	89 c2                	mov    edx,eax
c000b3ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3f2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000b3f5:	90                   	nop
c000b3f6:	83 c4 18             	add    esp,0x18
c000b3f9:	5b                   	pop    ebx
c000b3fa:	c3                   	ret    
c000b3fb:	90                   	nop

c000b3fc <VCache::invalidateReadBuffer()>:
c000b3fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b400:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000b406:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b40a:	c3                   	ret    
c000b40b:	90                   	nop

c000b40c <VCache::writeWriteBuffer()>:
c000b40c:	53                   	push   ebx
c000b40d:	83 ec 08             	sub    esp,0x8
c000b410:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b414:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b418:	74 1e                	je     c000b438 <VCache::writeWriteBuffer()+0x2c>
c000b41a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b41d:	83 ec 0c             	sub    esp,0xc
c000b420:	8b 10                	mov    edx,DWORD PTR [eax]
c000b422:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000b425:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000b428:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000b42b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b42e:	50                   	push   eax
c000b42f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b432:	83 c4 20             	add    esp,0x20
c000b435:	8d 76 00             	lea    esi,[esi+0x0]
c000b438:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b43f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000b446:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000b44a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000b451:	83 c4 08             	add    esp,0x8
c000b454:	5b                   	pop    ebx
c000b455:	c3                   	ret    
c000b456:	66 90                	xchg   ax,ax

c000b458 <VCache::~VCache()>:
c000b458:	83 ec 0c             	sub    esp,0xc
c000b45b:	ba 3c 3d 02 c0       	mov    edx,0xc0023d3c
c000b460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b464:	89 10                	mov    DWORD PTR [eax],edx
c000b466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b46a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000b46d:	0f b6 c0             	movzx  eax,al
c000b470:	85 c0                	test   eax,eax
c000b472:	74 10                	je     c000b484 <VCache::~VCache()+0x2c>
c000b474:	83 ec 0c             	sub    esp,0xc
c000b477:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b47b:	e8 8c ff ff ff       	call   c000b40c <VCache::writeWriteBuffer()>
c000b480:	83 c4 10             	add    esp,0x10
c000b483:	90                   	nop
c000b484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b488:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b48b:	83 ec 0c             	sub    esp,0xc
c000b48e:	50                   	push   eax
c000b48f:	e8 0b 47 00 00       	call   c000fb9f <free>
c000b494:	83 c4 10             	add    esp,0x10
c000b497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b49b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b49e:	83 ec 0c             	sub    esp,0xc
c000b4a1:	50                   	push   eax
c000b4a2:	e8 f8 46 00 00       	call   c000fb9f <free>
c000b4a7:	83 c4 10             	add    esp,0x10
c000b4aa:	90                   	nop
c000b4ab:	83 c4 0c             	add    esp,0xc
c000b4ae:	c3                   	ret    
c000b4af:	90                   	nop

c000b4b0 <VCache::~VCache()>:
c000b4b0:	83 ec 0c             	sub    esp,0xc
c000b4b3:	83 ec 0c             	sub    esp,0xc
c000b4b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4ba:	e8 99 ff ff ff       	call   c000b458 <VCache::~VCache()>
c000b4bf:	83 c4 10             	add    esp,0x10
c000b4c2:	83 ec 08             	sub    esp,0x8
c000b4c5:	6a 44                	push   0x44
c000b4c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4cb:	e8 19 1f 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c000b4d0:	83 c4 10             	add    esp,0x10
c000b4d3:	83 c4 0c             	add    esp,0xc
c000b4d6:	c3                   	ret    
c000b4d7:	90                   	nop

c000b4d8 <VCache::write(unsigned long long, int, void*)>:
c000b4d8:	55                   	push   ebp
c000b4d9:	57                   	push   edi
c000b4da:	56                   	push   esi
c000b4db:	53                   	push   ebx
c000b4dc:	83 ec 1c             	sub    esp,0x1c
c000b4df:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b4e3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b4e7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000b4eb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b4ef:	e8 18 ba 00 00       	call   c0016f0c <KeDisablePreemption()>
c000b4f4:	b9 00 10 00 00       	mov    ecx,0x1000
c000b4f9:	50                   	push   eax
c000b4fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b4fd:	0f af c3             	imul   eax,ebx
c000b500:	05 ff 0f 00 00       	add    eax,0xfff
c000b505:	99                   	cdq    
c000b506:	f7 f9                	idiv   ecx
c000b508:	50                   	push   eax
c000b509:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b50d:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b513:	e8 d8 8d 00 00       	call   c00142f0 <VAS::canLockPages(unsigned long, int)>
c000b518:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000b51c:	83 c4 10             	add    esp,0x10
c000b51f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b524:	74 2a                	je     c000b550 <VCache::write(unsigned long long, int, void*)+0x78>
c000b526:	b9 00 10 00 00       	mov    ecx,0x1000
c000b52b:	50                   	push   eax
c000b52c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b52f:	0f af c3             	imul   eax,ebx
c000b532:	05 ff 0f 00 00       	add    eax,0xfff
c000b537:	99                   	cdq    
c000b538:	f7 f9                	idiv   ecx
c000b53a:	50                   	push   eax
c000b53b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b53f:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b545:	e8 a0 91 00 00       	call   c00146ea <VAS::lockPages(unsigned long, int)>
c000b54a:	83 c4 10             	add    esp,0x10
c000b54d:	8d 76 00             	lea    esi,[esi+0x0]
c000b550:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000b554:	74 0e                	je     c000b564 <VCache::write(unsigned long long, int, void*)+0x8c>
c000b556:	83 ec 0c             	sub    esp,0xc
c000b559:	55                   	push   ebp
c000b55a:	e8 9d fe ff ff       	call   c000b3fc <VCache::invalidateReadBuffer()>
c000b55f:	83 c4 10             	add    esp,0x10
c000b562:	66 90                	xchg   ax,ax
c000b564:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000b568:	74 72                	je     c000b5dc <VCache::write(unsigned long long, int, void*)+0x104>
c000b56a:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000b56d:	89 c8                	mov    eax,ecx
c000b56f:	99                   	cdq    
c000b570:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000b573:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000b576:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b57a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b57e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b582:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b586:	31 f0                	xor    eax,esi
c000b588:	31 fa                	xor    edx,edi
c000b58a:	09 d0                	or     eax,edx
c000b58c:	75 42                	jne    c000b5d0 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b58e:	83 fb 01             	cmp    ebx,0x1
c000b591:	75 3d                	jne    c000b5d0 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b596:	89 cf                	mov    edi,ecx
c000b598:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b59e:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b5a2:	0f af f8             	imul   edi,eax
c000b5a5:	89 c1                	mov    ecx,eax
c000b5a7:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000b5aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b5ac:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000b5af:	40                   	inc    eax
c000b5b0:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000b5b3:	83 f8 50             	cmp    eax,0x50
c000b5b6:	0f 85 a8 00 00 00    	jne    c000b664 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b5bc:	83 ec 0c             	sub    esp,0xc
c000b5bf:	55                   	push   ebp
c000b5c0:	e8 47 fe ff ff       	call   c000b40c <VCache::writeWriteBuffer()>
c000b5c5:	83 c4 10             	add    esp,0x10
c000b5c8:	e9 97 00 00 00       	jmp    c000b664 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b5cd:	8d 76 00             	lea    esi,[esi+0x0]
c000b5d0:	83 ec 0c             	sub    esp,0xc
c000b5d3:	55                   	push   ebp
c000b5d4:	e8 33 fe ff ff       	call   c000b40c <VCache::writeWriteBuffer()>
c000b5d9:	83 c4 10             	add    esp,0x10
c000b5dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b5df:	83 fb 4f             	cmp    ebx,0x4f
c000b5e2:	7f 20                	jg     c000b604 <VCache::write(unsigned long long, int, void*)+0x12c>
c000b5e4:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000b5e7:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000b5ea:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000b5ed:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000b5f1:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000b5f4:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b5fa:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b5fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b600:	eb 62                	jmp    c000b664 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b602:	66 90                	xchg   ax,ax
c000b604:	83 ec 0c             	sub    esp,0xc
c000b607:	8b 10                	mov    edx,DWORD PTR [eax]
c000b609:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b60d:	53                   	push   ebx
c000b60e:	57                   	push   edi
c000b60f:	56                   	push   esi
c000b610:	50                   	push   eax
c000b611:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b614:	83 c4 20             	add    esp,0x20
c000b617:	89 c6                	mov    esi,eax
c000b619:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b61e:	74 28                	je     c000b648 <VCache::write(unsigned long long, int, void*)+0x170>
c000b620:	b9 00 10 00 00       	mov    ecx,0x1000
c000b625:	52                   	push   edx
c000b626:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b62a:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b630:	99                   	cdq    
c000b631:	f7 f9                	idiv   ecx
c000b633:	50                   	push   eax
c000b634:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b638:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b63e:	e8 e9 8c 00 00       	call   c001432c <VAS::unlockPages(unsigned long, int)>
c000b643:	83 c4 10             	add    esp,0x10
c000b646:	66 90                	xchg   ax,ax
c000b648:	e8 e7 b8 00 00       	call   c0016f34 <KeRestorePreemption()>
c000b64d:	85 f6                	test   esi,esi
c000b64f:	74 4b                	je     c000b69c <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b651:	83 ec 0c             	sub    esp,0xc
c000b654:	68 f4 3c 02 c0       	push   0xc0023cf4
c000b659:	e8 1e b9 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000b65e:	83 c4 10             	add    esp,0x10
c000b661:	eb 39                	jmp    c000b69c <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b663:	90                   	nop
c000b664:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b669:	74 29                	je     c000b694 <VCache::write(unsigned long long, int, void*)+0x1bc>
c000b66b:	b9 00 10 00 00       	mov    ecx,0x1000
c000b670:	50                   	push   eax
c000b671:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b675:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b67b:	99                   	cdq    
c000b67c:	f7 f9                	idiv   ecx
c000b67e:	50                   	push   eax
c000b67f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b683:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b689:	e8 9e 8c 00 00       	call   c001432c <VAS::unlockPages(unsigned long, int)>
c000b68e:	83 c4 10             	add    esp,0x10
c000b691:	8d 76 00             	lea    esi,[esi+0x0]
c000b694:	e8 9b b8 00 00       	call   c0016f34 <KeRestorePreemption()>
c000b699:	31 f6                	xor    esi,esi
c000b69b:	90                   	nop
c000b69c:	83 c4 1c             	add    esp,0x1c
c000b69f:	89 f0                	mov    eax,esi
c000b6a1:	5b                   	pop    ebx
c000b6a2:	5e                   	pop    esi
c000b6a3:	5f                   	pop    edi
c000b6a4:	5d                   	pop    ebp
c000b6a5:	c3                   	ret    

c000b6a6 <VCache::read(unsigned long long, int, void*)>:
c000b6a6:	55                   	push   ebp
c000b6a7:	57                   	push   edi
c000b6a8:	bf 00 10 00 00       	mov    edi,0x1000
c000b6ad:	56                   	push   esi
c000b6ae:	53                   	push   ebx
c000b6af:	83 ec 2c             	sub    esp,0x2c
c000b6b2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b6b6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000b6ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6be:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000b6c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6c6:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000b6ca:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b6ce:	e8 39 b8 00 00       	call   c0016f0c <KeDisablePreemption()>
c000b6d3:	50                   	push   eax
c000b6d4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b6d7:	0f af c6             	imul   eax,esi
c000b6da:	05 ff 0f 00 00       	add    eax,0xfff
c000b6df:	99                   	cdq    
c000b6e0:	f7 ff                	idiv   edi
c000b6e2:	50                   	push   eax
c000b6e3:	55                   	push   ebp
c000b6e4:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b6ea:	e8 01 8c 00 00       	call   c00142f0 <VAS::canLockPages(unsigned long, int)>
c000b6ef:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000b6f3:	83 c4 10             	add    esp,0x10
c000b6f6:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000b6fb:	74 1f                	je     c000b71c <VCache::read(unsigned long long, int, void*)+0x76>
c000b6fd:	50                   	push   eax
c000b6fe:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b701:	0f af c6             	imul   eax,esi
c000b704:	05 ff 0f 00 00       	add    eax,0xfff
c000b709:	99                   	cdq    
c000b70a:	f7 ff                	idiv   edi
c000b70c:	50                   	push   eax
c000b70d:	55                   	push   ebp
c000b70e:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b714:	e8 d1 8f 00 00       	call   c00146ea <VAS::lockPages(unsigned long, int)>
c000b719:	83 c4 10             	add    esp,0x10
c000b71c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b720:	74 0e                	je     c000b730 <VCache::read(unsigned long long, int, void*)+0x8a>
c000b722:	83 ec 0c             	sub    esp,0xc
c000b725:	53                   	push   ebx
c000b726:	e8 e1 fc ff ff       	call   c000b40c <VCache::writeWriteBuffer()>
c000b72b:	83 c4 10             	add    esp,0x10
c000b72e:	66 90                	xchg   ax,ax
c000b730:	83 fe 01             	cmp    esi,0x1
c000b733:	0f 85 ef 00 00 00    	jne    c000b828 <VCache::read(unsigned long long, int, void*)+0x182>
c000b739:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000b73c:	80 b9 68 01 00 00 00 	cmp    BYTE PTR [ecx+0x168],0x0
c000b743:	0f 85 df 00 00 00    	jne    c000b828 <VCache::read(unsigned long long, int, void*)+0x182>
c000b749:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b74c:	89 fe                	mov    esi,edi
c000b74e:	f7 de                	neg    esi
c000b750:	89 f0                	mov    eax,esi
c000b752:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000b756:	c1 f8 1f             	sar    eax,0x1f
c000b759:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b75d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b761:	89 f0                	mov    eax,esi
c000b763:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000b767:	23 74 24 0c          	and    esi,DWORD PTR [esp+0xc]
c000b76b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000b76f:	89 f2                	mov    edx,esi
c000b771:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000b776:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000b77a:	74 0c                	je     c000b788 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b77c:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000b77f:	75 07                	jne    c000b788 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b781:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000b784:	74 4e                	je     c000b7d4 <VCache::read(unsigned long long, int, void*)+0x12e>
c000b786:	66 90                	xchg   ax,ax
c000b788:	83 ec 0c             	sub    esp,0xc
c000b78b:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000b78f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000b792:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000b795:	8b 31                	mov    esi,DWORD PTR [ecx]
c000b797:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000b79a:	57                   	push   edi
c000b79b:	52                   	push   edx
c000b79c:	50                   	push   eax
c000b79d:	51                   	push   ecx
c000b79e:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000b7a1:	83 c4 20             	add    esp,0x20
c000b7a4:	89 c7                	mov    edi,eax
c000b7a6:	85 c0                	test   eax,eax
c000b7a8:	74 2a                	je     c000b7d4 <VCache::read(unsigned long long, int, void*)+0x12e>
c000b7aa:	83 ec 0c             	sub    esp,0xc
c000b7ad:	68 0c 3d 02 c0       	push   0xc0023d0c
c000b7b2:	e8 c5 b7 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000b7b7:	83 c4 10             	add    esp,0x10
c000b7ba:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b7bf:	0f 84 b3 00 00 00    	je     c000b878 <VCache::read(unsigned long long, int, void*)+0x1d2>
c000b7c5:	51                   	push   ecx
c000b7c6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b7c9:	05 ff 0f 00 00       	add    eax,0xfff
c000b7ce:	e9 8d 00 00 00       	jmp    c000b860 <VCache::read(unsigned long long, int, void*)+0x1ba>
c000b7d3:	90                   	nop
c000b7d4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b7d7:	89 ef                	mov    edi,ebp
c000b7d9:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b7df:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b7e2:	8d 70 ff             	lea    esi,[eax-0x1]
c000b7e5:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b7e9:	0f af f1             	imul   esi,ecx
c000b7ec:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000b7ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b7f1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b7f6:	74 24                	je     c000b81c <VCache::read(unsigned long long, int, void*)+0x176>
c000b7f8:	b9 00 10 00 00       	mov    ecx,0x1000
c000b7fd:	52                   	push   edx
c000b7fe:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b801:	05 ff 0f 00 00       	add    eax,0xfff
c000b806:	99                   	cdq    
c000b807:	f7 f9                	idiv   ecx
c000b809:	50                   	push   eax
c000b80a:	55                   	push   ebp
c000b80b:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b811:	e8 16 8b 00 00       	call   c001432c <VAS::unlockPages(unsigned long, int)>
c000b816:	83 c4 10             	add    esp,0x10
c000b819:	8d 76 00             	lea    esi,[esi+0x0]
c000b81c:	e8 13 b7 00 00       	call   c0016f34 <KeRestorePreemption()>
c000b821:	31 ff                	xor    edi,edi
c000b823:	eb 5b                	jmp    c000b880 <VCache::read(unsigned long long, int, void*)+0x1da>
c000b825:	8d 76 00             	lea    esi,[esi+0x0]
c000b828:	83 ec 0c             	sub    esp,0xc
c000b82b:	53                   	push   ebx
c000b82c:	e8 cb fb ff ff       	call   c000b3fc <VCache::invalidateReadBuffer()>
c000b831:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b834:	8b 10                	mov    edx,DWORD PTR [eax]
c000b836:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b839:	56                   	push   esi
c000b83a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b83e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b842:	50                   	push   eax
c000b843:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000b846:	83 c4 20             	add    esp,0x20
c000b849:	89 c7                	mov    edi,eax
c000b84b:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000b850:	74 26                	je     c000b878 <VCache::read(unsigned long long, int, void*)+0x1d2>
c000b852:	50                   	push   eax
c000b853:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000b857:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000b85d:	8d 76 00             	lea    esi,[esi+0x0]
c000b860:	b9 00 10 00 00       	mov    ecx,0x1000
c000b865:	99                   	cdq    
c000b866:	f7 f9                	idiv   ecx
c000b868:	50                   	push   eax
c000b869:	55                   	push   ebp
c000b86a:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000b870:	e8 b7 8a 00 00       	call   c001432c <VAS::unlockPages(unsigned long, int)>
c000b875:	83 c4 10             	add    esp,0x10
c000b878:	e8 b7 b6 00 00       	call   c0016f34 <KeRestorePreemption()>
c000b87d:	8d 76 00             	lea    esi,[esi+0x0]
c000b880:	83 c4 2c             	add    esp,0x2c
c000b883:	89 f8                	mov    eax,edi
c000b885:	5b                   	pop    ebx
c000b886:	5e                   	pop    esi
c000b887:	5f                   	pop    edi
c000b888:	5d                   	pop    ebp
c000b889:	c3                   	ret    

c000b88a <Video::putrect(int, int, int, int, unsigned int)>:
c000b88a:	55                   	push   ebp
c000b88b:	57                   	push   edi
c000b88c:	56                   	push   esi
c000b88d:	53                   	push   ebx
c000b88e:	83 ec 1c             	sub    esp,0x1c
c000b891:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b895:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b899:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000b89d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000b8a1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b8a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b8a9:	01 df                	add    edi,ebx
c000b8ab:	39 fb                	cmp    ebx,edi
c000b8ad:	7d 1f                	jge    c000b8ce <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000b8af:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b8b3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000b8b7:	7d 12                	jge    c000b8cb <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000b8b9:	8b 16                	mov    edx,DWORD PTR [esi]
c000b8bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b8bf:	53                   	push   ebx
c000b8c0:	55                   	push   ebp
c000b8c1:	45                   	inc    ebp
c000b8c2:	56                   	push   esi
c000b8c3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b8c6:	83 c4 10             	add    esp,0x10
c000b8c9:	eb e8                	jmp    c000b8b3 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000b8cb:	43                   	inc    ebx
c000b8cc:	eb dd                	jmp    c000b8ab <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000b8ce:	83 c4 1c             	add    esp,0x1c
c000b8d1:	5b                   	pop    ebx
c000b8d2:	5e                   	pop    esi
c000b8d3:	5f                   	pop    edi
c000b8d4:	5d                   	pop    ebp
c000b8d5:	c3                   	ret    

c000b8d6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000b8d6:	55                   	push   ebp
c000b8d7:	57                   	push   edi
c000b8d8:	31 ff                	xor    edi,edi
c000b8da:	56                   	push   esi
c000b8db:	53                   	push   ebx
c000b8dc:	83 ec 1c             	sub    esp,0x1c
c000b8df:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000b8e3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b8e7:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000b8ee:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000b8f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8f7:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000b8fb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b8ff:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000b902:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b906:	01 f9                	add    ecx,edi
c000b908:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000b90c:	7d 2f                	jge    c000b93d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000b90e:	31 f6                	xor    esi,esi
c000b910:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b914:	01 f2                	add    edx,esi
c000b916:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000b91a:	7d 1a                	jge    c000b936 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000b91c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b91f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000b922:	46                   	inc    esi
c000b923:	51                   	push   ecx
c000b924:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b928:	52                   	push   edx
c000b929:	55                   	push   ebp
c000b92a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b92d:	83 c4 10             	add    esp,0x10
c000b930:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b934:	eb da                	jmp    c000b910 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000b936:	47                   	inc    edi
c000b937:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000b93b:	eb c5                	jmp    c000b902 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000b93d:	83 c4 1c             	add    esp,0x1c
c000b940:	5b                   	pop    ebx
c000b941:	5e                   	pop    esi
c000b942:	5f                   	pop    edi
c000b943:	5d                   	pop    ebp
c000b944:	c3                   	ret    
c000b945:	90                   	nop

c000b946 <Video::blit(unsigned int*, int, int, int, int)>:
c000b946:	55                   	push   ebp
c000b947:	57                   	push   edi
c000b948:	56                   	push   esi
c000b949:	53                   	push   ebx
c000b94a:	83 ec 1c             	sub    esp,0x1c
c000b94d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b951:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b955:	85 c0                	test   eax,eax
c000b957:	79 02                	jns    c000b95b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000b959:	31 c0                	xor    eax,eax
c000b95b:	c1 e0 02             	shl    eax,0x2
c000b95e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b962:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b966:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b96a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000b96e:	39 d8                	cmp    eax,ebx
c000b970:	7e 49                	jle    c000b9bb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000b972:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b978:	7c 41                	jl     c000b9bb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000b97a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b97e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b982:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b986:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000b98a:	39 f9                	cmp    ecx,edi
c000b98c:	7e 22                	jle    c000b9b0 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000b98e:	83 c5 04             	add    ebp,0x4
c000b991:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b997:	7c 14                	jl     c000b9ad <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000b999:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b99b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000b99e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b9a2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b9a6:	56                   	push   esi
c000b9a7:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b9aa:	83 c4 10             	add    esp,0x10
c000b9ad:	47                   	inc    edi
c000b9ae:	eb d2                	jmp    c000b982 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000b9b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9b4:	43                   	inc    ebx
c000b9b5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b9b9:	eb ab                	jmp    c000b966 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000b9bb:	83 c4 1c             	add    esp,0x1c
c000b9be:	5b                   	pop    ebx
c000b9bf:	5e                   	pop    esi
c000b9c0:	5f                   	pop    edi
c000b9c1:	5d                   	pop    ebp
c000b9c2:	c3                   	ret    
c000b9c3:	90                   	nop

c000b9c4 <Video::clearScreen(unsigned int)>:
c000b9c4:	57                   	push   edi
c000b9c5:	56                   	push   esi
c000b9c6:	53                   	push   ebx
c000b9c7:	31 db                	xor    ebx,ebx
c000b9c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b9cd:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b9d3:	7e 1f                	jle    c000b9f4 <Video::clearScreen(unsigned int)+0x30>
c000b9d5:	31 ff                	xor    edi,edi
c000b9d7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b9dd:	7e 12                	jle    c000b9f1 <Video::clearScreen(unsigned int)+0x2d>
c000b9df:	8b 06                	mov    eax,DWORD PTR [esi]
c000b9e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9e5:	53                   	push   ebx
c000b9e6:	57                   	push   edi
c000b9e7:	47                   	inc    edi
c000b9e8:	56                   	push   esi
c000b9e9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	eb e6                	jmp    c000b9d7 <Video::clearScreen(unsigned int)+0x13>
c000b9f1:	43                   	inc    ebx
c000b9f2:	eb d9                	jmp    c000b9cd <Video::clearScreen(unsigned int)+0x9>
c000b9f4:	5b                   	pop    ebx
c000b9f5:	5e                   	pop    esi
c000b9f6:	5f                   	pop    edi
c000b9f7:	c3                   	ret    

c000b9f8 <Video::putpixel(int, int, unsigned int)>:
c000b9f8:	c7 44 24 04 44 3d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023d44
c000ba00:	e9 e1 45 00 00       	jmp    c000ffe6 <KePanic(char const*)>
c000ba05:	90                   	nop

c000ba06 <Video::readPixelApprox(int, int)>:
c000ba06:	83 ec 18             	sub    esp,0x18
c000ba09:	68 65 3d 02 c0       	push   0xc0023d65
c000ba0e:	e8 d3 45 00 00       	call   c000ffe6 <KePanic(char const*)>
c000ba13:	31 c0                	xor    eax,eax
c000ba15:	83 c4 1c             	add    esp,0x1c
c000ba18:	c3                   	ret    
c000ba19:	90                   	nop

c000ba1a <Video::Video(char const*)>:
c000ba1a:	83 ec 0c             	sub    esp,0xc
c000ba1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba21:	83 ec 08             	sub    esp,0x8
c000ba24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba28:	50                   	push   eax
c000ba29:	e8 88 e1 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000ba2e:	83 c4 10             	add    esp,0x10
c000ba31:	ba 08 3e 02 c0       	mov    edx,0xc0023e08
c000ba36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba3a:	89 10                	mov    DWORD PTR [eax],edx
c000ba3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba40:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ba4a:	90                   	nop
c000ba4b:	83 c4 0c             	add    esp,0xc
c000ba4e:	c3                   	ret    
c000ba4f:	90                   	nop

c000ba50 <Video::~Video()>:
c000ba50:	83 ec 0c             	sub    esp,0xc
c000ba53:	ba 08 3e 02 c0       	mov    edx,0xc0023e08
c000ba58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba5c:	89 10                	mov    DWORD PTR [eax],edx
c000ba5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba62:	83 ec 0c             	sub    esp,0xc
c000ba65:	50                   	push   eax
c000ba66:	e8 eb de ff ff       	call   c0009956 <Device::~Device()>
c000ba6b:	83 c4 10             	add    esp,0x10
c000ba6e:	90                   	nop
c000ba6f:	83 c4 0c             	add    esp,0xc
c000ba72:	c3                   	ret    
c000ba73:	90                   	nop

c000ba74 <Video::~Video()>:
c000ba74:	83 ec 0c             	sub    esp,0xc
c000ba77:	83 ec 0c             	sub    esp,0xc
c000ba7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba7e:	e8 cd ff ff ff       	call   c000ba50 <Video::~Video()>
c000ba83:	83 c4 10             	add    esp,0x10
c000ba86:	83 ec 08             	sub    esp,0x8
c000ba89:	68 64 01 00 00       	push   0x164
c000ba8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba92:	e8 52 19 00 00       	call   c000d3e9 <operator delete(void*, unsigned long)>
c000ba97:	83 c4 10             	add    esp,0x10
c000ba9a:	83 c4 0c             	add    esp,0xc
c000ba9d:	c3                   	ret    

c000ba9e <Video::isMonochrome()>:
c000ba9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000baa2:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000baa8:	c3                   	ret    
c000baa9:	90                   	nop

c000baaa <Video::getWidth()>:
c000baaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000baae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000bab4:	c3                   	ret    
c000bab5:	90                   	nop

c000bab6 <Video::getHeight()>:
c000bab6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000baba:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000bac0:	c3                   	ret    
c000bac1:	90                   	nop

c000bac2 <Video::drawCursor(int, int, unsigned int*, int)>:
c000bac2:	55                   	push   ebp
c000bac3:	57                   	push   edi
c000bac4:	56                   	push   esi
c000bac5:	53                   	push   ebx
c000bac6:	83 ec 2c             	sub    esp,0x2c
c000bac9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bacd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000bad1:	83 f8 01             	cmp    eax,0x1
c000bad4:	19 c9                	sbb    ecx,ecx
c000bad6:	31 db                	xor    ebx,ebx
c000bad8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000badc:	89 cd                	mov    ebp,ecx
c000bade:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000bae6:	f7 d5                	not    ebp
c000bae8:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000baee:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000baf2:	01 d8                	add    eax,ebx
c000baf4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000baf8:	56                   	push   esi
c000baf9:	e8 b8 ff ff ff       	call   c000bab6 <Video::getHeight()>
c000bafe:	59                   	pop    ecx
c000baff:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000bb03:	7e 70                	jle    c000bb75 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000bb05:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bb09:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000bb0d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000bb10:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb14:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bb18:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000bb1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bb23:	89 f8                	mov    eax,edi
c000bb25:	83 c0 20             	add    eax,0x20
c000bb28:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb2c:	56                   	push   esi
c000bb2d:	e8 78 ff ff ff       	call   c000baaa <Video::getWidth()>
c000bb32:	5a                   	pop    edx
c000bb33:	39 c7                	cmp    edi,eax
c000bb35:	7d 34                	jge    c000bb6b <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000bb37:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000bb3c:	74 05                	je     c000bb43 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000bb3e:	8b 06                	mov    eax,DWORD PTR [esi]
c000bb40:	55                   	push   ebp
c000bb41:	eb 0d                	jmp    c000bb50 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000bb43:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000bb48:	74 12                	je     c000bb5c <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000bb4a:	8b 06                	mov    eax,DWORD PTR [esi]
c000bb4c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb50:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bb54:	57                   	push   edi
c000bb55:	56                   	push   esi
c000bb56:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bb59:	83 c4 10             	add    esp,0x10
c000bb5c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000bb60:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000bb64:	47                   	inc    edi
c000bb65:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000bb69:	75 c1                	jne    c000bb2c <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000bb6b:	43                   	inc    ebx
c000bb6c:	83 fb 20             	cmp    ebx,0x20
c000bb6f:	0f 85 79 ff ff ff    	jne    c000baee <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000bb75:	83 c4 2c             	add    esp,0x2c
c000bb78:	5b                   	pop    ebx
c000bb79:	5e                   	pop    esi
c000bb7a:	5f                   	pop    edi
c000bb7b:	5d                   	pop    ebp
c000bb7c:	c3                   	ret    
c000bb7d:	90                   	nop

c000bb7e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000bb7e:	55                   	push   ebp
c000bb7f:	57                   	push   edi
c000bb80:	56                   	push   esi
c000bb81:	53                   	push   ebx
c000bb82:	83 ec 48             	sub    esp,0x48
c000bb85:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000bb89:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000bb8d:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000bb91:	c1 e0 08             	shl    eax,0x8
c000bb94:	01 d0                	add    eax,edx
c000bb96:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000bb9a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb9e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000bba2:	c1 e0 08             	shl    eax,0x8
c000bba5:	01 d0                	add    eax,edx
c000bba7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bbab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bbaf:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000bbb4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bbb8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbbc:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000bbc3:	50                   	push   eax
c000bbc4:	e8 c6 3f 00 00       	call   c000fb8f <malloc>
c000bbc9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bbcd:	83 c4 10             	add    esp,0x10
c000bbd0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000bbd5:	75 10                	jne    c000bbe7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c000bbd7:	83 ec 0c             	sub    esp,0xc
c000bbda:	68 90 3d 02 c0       	push   0xc0023d90
c000bbdf:	e8 02 44 00 00       	call   c000ffe6 <KePanic(char const*)>
c000bbe4:	83 c4 10             	add    esp,0x10
c000bbe7:	51                   	push   ecx
c000bbe8:	51                   	push   ecx
c000bbe9:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bbed:	50                   	push   eax
c000bbee:	68 a0 3d 02 c0       	push   0xc0023da0
c000bbf3:	e8 84 b3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bbf8:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000bbfb:	83 e0 20             	and    eax,0x20
c000bbfe:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000bc02:	85 c0                	test   eax,eax
c000bc04:	5e                   	pop    esi
c000bc05:	0f 94 c0             	sete   al
c000bc08:	5f                   	pop    edi
c000bc09:	0f b6 c0             	movzx  eax,al
c000bc0c:	be 12 00 00 00       	mov    esi,0x12
c000bc11:	50                   	push   eax
c000bc12:	68 aa 3d 02 c0       	push   0xc0023daa
c000bc17:	e8 60 b3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bc1c:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c000bc20:	83 c4 10             	add    esp,0x10
c000bc23:	89 d0                	mov    eax,edx
c000bc25:	85 d2                	test   edx,edx
c000bc27:	74 11                	je     c000bc3a <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000bc29:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c000bc2d:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000bc31:	c1 fe 03             	sar    esi,0x3
c000bc34:	0f af f1             	imul   esi,ecx
c000bc37:	83 c6 12             	add    esi,0x12
c000bc3a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000bc3f:	74 07                	je     c000bc48 <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c000bc41:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000bc46:	75 12                	jne    c000bc5a <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c000bc48:	83 ec 0c             	sub    esp,0xc
c000bc4b:	68 b8 3d 02 c0       	push   0xc0023db8
c000bc50:	e8 27 b3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bc55:	e9 a0 02 00 00       	jmp    c000befa <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c000bc5a:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000bc5e:	83 f9 02             	cmp    ecx,0x2
c000bc61:	74 0e                	je     c000bc71 <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c000bc63:	83 f9 0a             	cmp    ecx,0xa
c000bc66:	0f 84 c8 00 00 00    	je     c000bd34 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c000bc6c:	e9 72 02 00 00       	jmp    c000bee3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c000bc71:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bc76:	75 0e                	jne    c000bc86 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000bc78:	84 c0                	test   al,al
c000bc7a:	75 0a                	jne    c000bc86 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000bc7c:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bc7f:	83 e8 18             	sub    eax,0x18
c000bc82:	a8 f7                	test   al,0xf7
c000bc84:	74 0d                	je     c000bc93 <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c000bc86:	83 ec 0c             	sub    esp,0xc
c000bc89:	68 cd 3d 02 c0       	push   0xc0023dcd
c000bc8e:	e9 58 02 00 00       	jmp    c000beeb <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000bc93:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000bc98:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bca0:	31 c0                	xor    eax,eax
c000bca2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bca6:	89 c7                	mov    edi,eax
c000bca8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bcb0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bcb5:	75 15                	jne    c000bccc <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000bcb7:	99                   	cdq    
c000bcb8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000bcbc:	85 d2                	test   edx,edx
c000bcbe:	75 0c                	jne    c000bccc <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000bcc0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000bcc4:	29 c7                	sub    edi,eax
c000bcc6:	4f                   	dec    edi
c000bcc7:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c000bccc:	31 d2                	xor    edx,edx
c000bcce:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bcd2:	75 08                	jne    c000bcdc <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000bcd4:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c000bcd9:	c1 e2 18             	shl    edx,0x18
c000bcdc:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c000bce1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000bce5:	c1 e1 10             	shl    ecx,0x10
c000bce8:	8d 47 01             	lea    eax,[edi+0x1]
c000bceb:	89 cd                	mov    ebp,ecx
c000bced:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c000bcf2:	c1 e1 08             	shl    ecx,0x8
c000bcf5:	09 e9                	or     ecx,ebp
c000bcf7:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bcfb:	09 e9                	or     ecx,ebp
c000bcfd:	09 d1                	or     ecx,edx
c000bcff:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bd03:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c000bd06:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000bd0a:	c1 fa 03             	sar    edx,0x3
c000bd0d:	01 d6                	add    esi,edx
c000bd0f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd13:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000bd17:	7e 04                	jle    c000bd1d <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c000bd19:	89 c7                	mov    edi,eax
c000bd1b:	eb 93                	jmp    c000bcb0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000bd1d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bd21:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd25:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bd29:	0f 8f 77 ff ff ff    	jg     c000bca6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c000bd2f:	e9 d3 01 00 00       	jmp    c000bf07 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd34:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bd39:	75 0e                	jne    c000bd49 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000bd3b:	85 d2                	test   edx,edx
c000bd3d:	75 0a                	jne    c000bd49 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000bd3f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bd42:	83 e8 18             	sub    eax,0x18
c000bd45:	a8 f7                	test   al,0xf7
c000bd47:	74 0d                	je     c000bd56 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c000bd49:	83 ec 0c             	sub    esp,0xc
c000bd4c:	68 db 3d 02 c0       	push   0xc0023ddb
c000bd51:	e9 95 01 00 00       	jmp    c000beeb <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000bd56:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd5e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bd66:	31 c9                	xor    ecx,ecx
c000bd68:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bd6c:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c000bd70:	0f 8e 91 01 00 00    	jle    c000bf07 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd76:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c000bd7a:	0f 8d 87 01 00 00    	jge    c000bf07 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd80:	8d 46 01             	lea    eax,[esi+0x1]
c000bd83:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bd87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bd8b:	83 fd 7f             	cmp    ebp,0x7f
c000bd8e:	89 e8                	mov    eax,ebp
c000bd90:	0f 8e 9d 00 00 00    	jle    c000be33 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c000bd96:	83 e0 7f             	and    eax,0x7f
c000bd99:	31 d2                	xor    edx,edx
c000bd9b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd9f:	40                   	inc    eax
c000bda0:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bda4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bda8:	75 0a                	jne    c000bdb4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c000bdaa:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c000bdaf:	89 ea                	mov    edx,ebp
c000bdb1:	c1 e2 18             	shl    edx,0x18
c000bdb4:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c000bdb9:	c1 e0 10             	shl    eax,0x10
c000bdbc:	89 c7                	mov    edi,eax
c000bdbe:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000bdc3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bdc7:	c1 e0 08             	shl    eax,0x8
c000bdca:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bdce:	09 f8                	or     eax,edi
c000bdd0:	31 f6                	xor    esi,esi
c000bdd2:	09 c5                	or     ebp,eax
c000bdd4:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c000bdd9:	09 d5                	or     ebp,edx
c000bddb:	85 ff                	test   edi,edi
c000bddd:	75 1d                	jne    c000bdfc <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000bddf:	89 c8                	mov    eax,ecx
c000bde1:	99                   	cdq    
c000bde2:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000bde6:	85 d2                	test   edx,edx
c000bde8:	75 12                	jne    c000bdfc <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000bdea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bdee:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000bdf2:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bdf6:	49                   	dec    ecx
c000bdf7:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000bdfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be00:	8d 51 01             	lea    edx,[ecx+0x1]
c000be03:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000be06:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c000be0a:	8d 46 01             	lea    eax,[esi+0x1]
c000be0d:	7e 06                	jle    c000be15 <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c000be0f:	89 c6                	mov    esi,eax
c000be11:	89 d1                	mov    ecx,edx
c000be13:	eb c6                	jmp    c000bddb <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c000be15:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000be19:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000be1d:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000be21:	c1 f8 03             	sar    eax,0x3
c000be24:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000be28:	89 d1                	mov    ecx,edx
c000be2a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000be2e:	e9 35 ff ff ff       	jmp    c000bd68 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c000be33:	8d 45 01             	lea    eax,[ebp+0x1]
c000be36:	31 f6                	xor    esi,esi
c000be38:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be3c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000be41:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be45:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000be4a:	75 1d                	jne    c000be69 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000be4c:	89 c8                	mov    eax,ecx
c000be4e:	99                   	cdq    
c000be4f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000be53:	85 d2                	test   edx,edx
c000be55:	75 12                	jne    c000be69 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000be57:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000be5b:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000be5f:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000be63:	49                   	dec    ecx
c000be64:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000be69:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000be71:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000be75:	75 10                	jne    c000be87 <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c000be77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be7b:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c000be80:	c1 e7 18             	shl    edi,0x18
c000be83:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000be87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be8b:	8d 51 01             	lea    edx,[ecx+0x1]
c000be8e:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c000be93:	c1 e0 10             	shl    eax,0x10
c000be96:	89 c7                	mov    edi,eax
c000be98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be9c:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c000bea1:	c1 e0 08             	shl    eax,0x8
c000bea4:	09 f8                	or     eax,edi
c000bea6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000beaa:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c000beae:	09 f8                	or     eax,edi
c000beb0:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000beb4:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000beb8:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000bebb:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bebf:	c1 f8 03             	sar    eax,0x3
c000bec2:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000bec6:	8d 46 01             	lea    eax,[esi+0x1]
c000bec9:	39 f5                	cmp    ebp,esi
c000becb:	7e 09                	jle    c000bed6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c000becd:	89 c6                	mov    esi,eax
c000becf:	89 d1                	mov    ecx,edx
c000bed1:	e9 6f ff ff ff       	jmp    c000be45 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c000bed6:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000beda:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000bede:	e9 45 ff ff ff       	jmp    c000be28 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c000bee3:	52                   	push   edx
c000bee4:	52                   	push   edx
c000bee5:	51                   	push   ecx
c000bee6:	68 ea 3d 02 c0       	push   0xc0023dea
c000beeb:	e8 8c b0 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bef0:	58                   	pop    eax
c000bef1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bef5:	e8 a5 3c 00 00       	call   c000fb9f <free>
c000befa:	83 c4 10             	add    esp,0x10
c000befd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000bf05:	eb 14                	jmp    c000bf1b <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c000bf07:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bf0b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000bf0f:	89 18                	mov    DWORD PTR [eax],ebx
c000bf11:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000bf15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf19:	89 18                	mov    DWORD PTR [eax],ebx
c000bf1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf1f:	83 c4 3c             	add    esp,0x3c
c000bf22:	5b                   	pop    ebx
c000bf23:	5e                   	pop    esi
c000bf24:	5f                   	pop    edi
c000bf25:	5d                   	pop    ebp
c000bf26:	c3                   	ret    
c000bf27:	90                   	nop

c000bf28 <Video::putTGA(int, int, unsigned char*, int)>:
c000bf28:	55                   	push   ebp
c000bf29:	57                   	push   edi
c000bf2a:	56                   	push   esi
c000bf2b:	53                   	push   ebx
c000bf2c:	83 ec 28             	sub    esp,0x28
c000bf2f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000bf33:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bf37:	50                   	push   eax
c000bf38:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bf3c:	50                   	push   eax
c000bf3d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bf41:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bf45:	57                   	push   edi
c000bf46:	e8 33 fc ff ff       	call   c000bb7e <Video::tgaParse(unsigned char*, int, int*, int*)>
c000bf4b:	83 c4 20             	add    esp,0x20
c000bf4e:	85 c0                	test   eax,eax
c000bf50:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bf54:	74 3a                	je     c000bf90 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000bf56:	89 c6                	mov    esi,eax
c000bf58:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf5c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bf60:	39 d8                	cmp    eax,ebx
c000bf62:	7e 2c                	jle    c000bf90 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000bf64:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bf68:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf6c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bf70:	39 e8                	cmp    eax,ebp
c000bf72:	7e 19                	jle    c000bf8d <Video::putTGA(int, int, unsigned char*, int)+0x65>
c000bf74:	83 c6 04             	add    esi,0x4
c000bf77:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000bf7a:	85 c0                	test   eax,eax
c000bf7c:	79 0c                	jns    c000bf8a <Video::putTGA(int, int, unsigned char*, int)+0x62>
c000bf7e:	8b 17                	mov    edx,DWORD PTR [edi]
c000bf80:	50                   	push   eax
c000bf81:	53                   	push   ebx
c000bf82:	55                   	push   ebp
c000bf83:	57                   	push   edi
c000bf84:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bf87:	83 c4 10             	add    esp,0x10
c000bf8a:	45                   	inc    ebp
c000bf8b:	eb db                	jmp    c000bf68 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000bf8d:	43                   	inc    ebx
c000bf8e:	eb c8                	jmp    c000bf58 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000bf90:	83 c4 1c             	add    esp,0x1c
c000bf93:	5b                   	pop    ebx
c000bf94:	5e                   	pop    esi
c000bf95:	5f                   	pop    edi
c000bf96:	5d                   	pop    ebp
c000bf97:	c3                   	ret    

c000bf98 <ACPI::close(int, int, void*)>:
c000bf98:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf9d:	c3                   	ret    
c000bf9e:	66 90                	xchg   ax,ax

c000bfa0 <loadACPITables(unsigned char*)>:
c000bfa0:	57                   	push   edi
c000bfa1:	56                   	push   esi
c000bfa2:	53                   	push   ebx
c000bfa3:	83 ec 60             	sub    esp,0x60
c000bfa6:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000bfab:	0f 84 43 02 00 00    	je     c000c1f4 <loadACPITables(unsigned char*)+0x254>
c000bfb1:	a0 80 cd 02 c0       	mov    al,ds:0xc002cd80
c000bfb6:	0f b6 c0             	movzx  eax,al
c000bfb9:	85 c0                	test   eax,eax
c000bfbb:	74 7b                	je     c000c038 <loadACPITables(unsigned char*)+0x98>
c000bfbd:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bfc1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bfc5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bfc9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bfcc:	83 e8 24             	sub    eax,0x24
c000bfcf:	c1 e8 03             	shr    eax,0x3
c000bfd2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfd6:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000bfde:	66 90                	xchg   ax,ax
c000bfe0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bfe4:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000bfe8:	0f 8d ba 00 00 00    	jge    c000c0a8 <loadACPITables(unsigned char*)+0x108>
c000bfee:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bff2:	83 c0 24             	add    eax,0x24
c000bff5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bff9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bffd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c001:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000c005:	c1 e0 03             	shl    eax,0x3
c000c008:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000c00c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c010:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000c013:	8b 00                	mov    eax,DWORD PTR [eax]
c000c015:	89 c1                	mov    ecx,eax
c000c017:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000c01c:	8d 50 01             	lea    edx,[eax+0x1]
c000c01f:	89 15 60 cb 02 c0    	mov    DWORD PTR ds:0xc002cb60,edx
c000c025:	89 ca                	mov    edx,ecx
c000c027:	89 14 c5 84 cb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd347c],edx
c000c02e:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000c033:	eb ab                	jmp    c000bfe0 <loadACPITables(unsigned char*)+0x40>
c000c035:	8d 76 00             	lea    esi,[esi+0x0]
c000c038:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c03c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c040:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c044:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c047:	83 e8 24             	sub    eax,0x24
c000c04a:	c1 e8 02             	shr    eax,0x2
c000c04d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c051:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000c059:	8d 76 00             	lea    esi,[esi+0x0]
c000c05c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c060:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000c064:	7d 42                	jge    c000c0a8 <loadACPITables(unsigned char*)+0x108>
c000c066:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c06a:	83 c0 24             	add    eax,0x24
c000c06d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c071:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c075:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c079:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c07d:	c1 e0 02             	shl    eax,0x2
c000c080:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000c084:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c088:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c08a:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000c08f:	8d 50 01             	lea    edx,[eax+0x1]
c000c092:	89 15 60 cb 02 c0    	mov    DWORD PTR ds:0xc002cb60,edx
c000c098:	89 ca                	mov    edx,ecx
c000c09a:	89 14 c5 84 cb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd347c],edx
c000c0a1:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000c0a6:	eb b4                	jmp    c000c05c <loadACPITables(unsigned char*)+0xbc>
c000c0a8:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000c0b0:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000c0b5:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000c0b9:	0f 8d 39 01 00 00    	jge    c000c1f8 <loadACPITables(unsigned char*)+0x258>
c000c0bf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c0c3:	8b 04 c5 84 cb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd347c]
c000c0ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0da:	25 ff 0f 00 00       	and    eax,0xfff
c000c0df:	89 c6                	mov    esi,eax
c000c0e1:	8b 1d 50 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f250
c000c0e7:	83 ec 0c             	sub    esp,0xc
c000c0ea:	6a 01                	push   0x1
c000c0ec:	e8 aa 74 00 00       	call   c001359b <Virt::allocateKernelVirtualPages(int)>
c000c0f1:	83 c4 10             	add    esp,0x10
c000c0f4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c0f8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c0fe:	83 ec 0c             	sub    esp,0xc
c000c101:	6a 01                	push   0x1
c000c103:	6a 01                	push   0x1
c000c105:	50                   	push   eax
c000c106:	52                   	push   edx
c000c107:	53                   	push   ebx
c000c108:	e8 5b 7d 00 00       	call   c0013e68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c10d:	83 c4 20             	add    esp,0x20
c000c110:	09 f0                	or     eax,esi
c000c112:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c116:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c11a:	c1 e0 03             	shl    eax,0x3
c000c11d:	05 80 cb 02 c0       	add    eax,0xc002cb80
c000c122:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c12a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c12e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000c136:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c13a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c13e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c142:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c146:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c14a:	89 c6                	mov    esi,eax
c000c14c:	89 d7                	mov    edi,edx
c000c14e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c150:	89 c8                	mov    eax,ecx
c000c152:	89 fa                	mov    edx,edi
c000c154:	89 f3                	mov    ebx,esi
c000c156:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c15a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c15e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c162:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c166:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c169:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c16d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c171:	05 00 10 00 00       	add    eax,0x1000
c000c176:	c1 e8 0c             	shr    eax,0xc
c000c179:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c17d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c181:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c185:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c189:	25 ff 0f 00 00       	and    eax,0xfff
c000c18e:	89 c6                	mov    esi,eax
c000c190:	8b 1d 50 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f250
c000c196:	83 ec 0c             	sub    esp,0xc
c000c199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c19d:	e8 f9 73 00 00       	call   c001359b <Virt::allocateKernelVirtualPages(int)>
c000c1a2:	83 c4 10             	add    esp,0x10
c000c1a5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c1a9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c1af:	83 ec 0c             	sub    esp,0xc
c000c1b2:	6a 01                	push   0x1
c000c1b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b8:	50                   	push   eax
c000c1b9:	52                   	push   edx
c000c1ba:	53                   	push   ebx
c000c1bb:	e8 a8 7c 00 00       	call   c0013e68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c1c0:	83 c4 20             	add    esp,0x20
c000c1c3:	09 f0                	or     eax,esi
c000c1c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1cd:	83 ec 0c             	sub    esp,0xc
c000c1d0:	50                   	push   eax
c000c1d1:	e8 cd 76 00 00       	call   c00138a3 <Virt::freeKernelVirtualPages(unsigned long)>
c000c1d6:	83 c4 10             	add    esp,0x10
c000c1d9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c1dd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c1e1:	89 14 c5 84 cb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd347c],edx
c000c1e8:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000c1ed:	e9 be fe ff ff       	jmp    c000c0b0 <loadACPITables(unsigned char*)+0x110>
c000c1f2:	66 90                	xchg   ax,ax
c000c1f4:	90                   	nop
c000c1f5:	8d 76 00             	lea    esi,[esi+0x0]
c000c1f8:	83 c4 60             	add    esp,0x60
c000c1fb:	5b                   	pop    ebx
c000c1fc:	5e                   	pop    esi
c000c1fd:	5f                   	pop    edi
c000c1fe:	c3                   	ret    
c000c1ff:	90                   	nop

c000c200 <findRSDT(unsigned char*)>:
c000c200:	57                   	push   edi
c000c201:	56                   	push   esi
c000c202:	53                   	push   ebx
c000c203:	83 ec 50             	sub    esp,0x50
c000c206:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c20b:	85 c0                	test   eax,eax
c000c20d:	75 0d                	jne    c000c21c <findRSDT(unsigned char*)+0x1c>
c000c20f:	b8 00 00 00 00       	mov    eax,0x0
c000c214:	e9 2b 01 00 00       	jmp    c000c344 <findRSDT(unsigned char*)+0x144>
c000c219:	8d 76 00             	lea    esi,[esi+0x0]
c000c21c:	89 e0                	mov    eax,esp
c000c21e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c222:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c226:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c22a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000c232:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c236:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c23a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c23e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000c242:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000c246:	89 c6                	mov    esi,eax
c000c248:	89 d7                	mov    edi,edx
c000c24a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c24c:	89 c8                	mov    eax,ecx
c000c24e:	89 fa                	mov    edx,edi
c000c250:	89 f3                	mov    ebx,esi
c000c252:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000c256:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c25a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c25e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000c262:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000c266:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000c26e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c272:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c276:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c27a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c27e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c282:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c286:	25 ff 0f 00 00       	and    eax,0xfff
c000c28b:	89 c6                	mov    esi,eax
c000c28d:	8b 1d 50 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f250
c000c293:	83 ec 0c             	sub    esp,0xc
c000c296:	6a 02                	push   0x2
c000c298:	e8 fe 72 00 00       	call   c001359b <Virt::allocateKernelVirtualPages(int)>
c000c29d:	83 c4 10             	add    esp,0x10
c000c2a0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c2a4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c2aa:	83 ec 0c             	sub    esp,0xc
c000c2ad:	6a 01                	push   0x1
c000c2af:	6a 02                	push   0x2
c000c2b1:	50                   	push   eax
c000c2b2:	52                   	push   edx
c000c2b3:	53                   	push   ebx
c000c2b4:	e8 af 7b 00 00       	call   c0013e68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c2b9:	83 c4 20             	add    esp,0x20
c000c2bc:	09 f0                	or     eax,esi
c000c2be:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c2c2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2c6:	25 ff 0f 00 00       	and    eax,0xfff
c000c2cb:	89 c6                	mov    esi,eax
c000c2cd:	8b 1d 50 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f250
c000c2d3:	83 ec 0c             	sub    esp,0xc
c000c2d6:	6a 02                	push   0x2
c000c2d8:	e8 be 72 00 00       	call   c001359b <Virt::allocateKernelVirtualPages(int)>
c000c2dd:	83 c4 10             	add    esp,0x10
c000c2e0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c2e4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c2ea:	83 ec 0c             	sub    esp,0xc
c000c2ed:	6a 01                	push   0x1
c000c2ef:	6a 02                	push   0x2
c000c2f1:	50                   	push   eax
c000c2f2:	52                   	push   edx
c000c2f3:	53                   	push   ebx
c000c2f4:	e8 6f 7b 00 00       	call   c0013e68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c2f9:	83 c4 20             	add    esp,0x20
c000c2fc:	09 f0                	or     eax,esi
c000c2fe:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c302:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c307:	85 c0                	test   eax,eax
c000c309:	75 11                	jne    c000c31c <findRSDT(unsigned char*)+0x11c>
c000c30b:	c6 05 80 cd 02 c0 00 	mov    BYTE PTR ds:0xc002cd80,0x0
c000c312:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c316:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c31a:	eb 24                	jmp    c000c340 <findRSDT(unsigned char*)+0x140>
c000c31c:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c321:	83 f8 02             	cmp    eax,0x2
c000c324:	75 12                	jne    c000c338 <findRSDT(unsigned char*)+0x138>
c000c326:	c6 05 80 cd 02 c0 01 	mov    BYTE PTR ds:0xc002cd80,0x1
c000c32d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c331:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c335:	eb 09                	jmp    c000c340 <findRSDT(unsigned char*)+0x140>
c000c337:	90                   	nop
c000c338:	b8 00 00 00 00       	mov    eax,0x0
c000c33d:	eb 05                	jmp    c000c344 <findRSDT(unsigned char*)+0x144>
c000c33f:	90                   	nop
c000c340:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c344:	83 c4 50             	add    esp,0x50
c000c347:	5b                   	pop    ebx
c000c348:	5e                   	pop    esi
c000c349:	5f                   	pop    edi
c000c34a:	c3                   	ret    
c000c34b:	90                   	nop

c000c34c <findDataTable(unsigned char*, char*)>:
c000c34c:	83 ec 1c             	sub    esp,0x1c
c000c34f:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000c354:	75 0a                	jne    c000c360 <findDataTable(unsigned char*, char*)+0x14>
c000c356:	b8 00 00 00 00       	mov    eax,0x0
c000c35b:	eb 5f                	jmp    c000c3bc <findDataTable(unsigned char*, char*)+0x70>
c000c35d:	8d 76 00             	lea    esi,[esi+0x0]
c000c360:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c368:	a1 60 cb 02 c0       	mov    eax,ds:0xc002cb60
c000c36d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000c371:	7d 41                	jge    c000c3b4 <findDataTable(unsigned char*, char*)+0x68>
c000c373:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c377:	c1 e0 03             	shl    eax,0x3
c000c37a:	05 80 cb 02 c0       	add    eax,0xc002cb80
c000c37f:	83 ec 04             	sub    esp,0x4
c000c382:	6a 04                	push   0x4
c000c384:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c388:	50                   	push   eax
c000c389:	e8 f2 3f ff ff       	call   c0000380 <memcmp>
c000c38e:	83 c4 10             	add    esp,0x10
c000c391:	85 c0                	test   eax,eax
c000c393:	0f 94 c0             	sete   al
c000c396:	0f b6 c0             	movzx  eax,al
c000c399:	85 c0                	test   eax,eax
c000c39b:	74 0f                	je     c000c3ac <findDataTable(unsigned char*, char*)+0x60>
c000c39d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c3a1:	8b 04 c5 84 cb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd347c]
c000c3a8:	eb 12                	jmp    c000c3bc <findDataTable(unsigned char*, char*)+0x70>
c000c3aa:	66 90                	xchg   ax,ax
c000c3ac:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000c3b1:	eb b5                	jmp    c000c368 <findDataTable(unsigned char*, char*)+0x1c>
c000c3b3:	90                   	nop
c000c3b4:	b8 00 00 00 00       	mov    eax,0x0
c000c3b9:	8d 76 00             	lea    esi,[esi+0x0]
c000c3bc:	83 c4 1c             	add    esp,0x1c
c000c3bf:	c3                   	ret    

c000c3c0 <scanMADT()>:
c000c3c0:	53                   	push   ebx
c000c3c1:	83 ec 38             	sub    esp,0x38
c000c3c4:	c7 05 88 cd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cd88,0x0
c000c3ce:	c7 05 84 cd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cd84,0x0
c000c3d8:	83 ec 0c             	sub    esp,0xc
c000c3db:	68 4c 3e 02 c0       	push   0xc0023e4c
c000c3e0:	e8 97 ab ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c3e5:	83 c4 10             	add    esp,0x10
c000c3e8:	e8 89 dc 00 00       	call   c001a076 <HalFindRSDP()>
c000c3ed:	a3 88 cd 02 c0       	mov    ds:0xc002cd88,eax
c000c3f2:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c3f7:	85 c0                	test   eax,eax
c000c3f9:	0f 84 59 04 00 00    	je     c000c858 <scanMADT()+0x498>
c000c3ff:	83 ec 0c             	sub    esp,0xc
c000c402:	68 5a 3e 02 c0       	push   0xc0023e5a
c000c407:	e8 70 ab ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c40c:	83 c4 10             	add    esp,0x10
c000c40f:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c414:	83 ec 0c             	sub    esp,0xc
c000c417:	50                   	push   eax
c000c418:	e8 e3 fd ff ff       	call   c000c200 <findRSDT(unsigned char*)>
c000c41d:	83 c4 10             	add    esp,0x10
c000c420:	a3 84 cd 02 c0       	mov    ds:0xc002cd84,eax
c000c425:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000c42a:	85 c0                	test   eax,eax
c000c42c:	0f 84 2a 04 00 00    	je     c000c85c <scanMADT()+0x49c>
c000c432:	8b 15 84 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cd84
c000c438:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000c43d:	83 ec 04             	sub    esp,0x4
c000c440:	52                   	push   edx
c000c441:	50                   	push   eax
c000c442:	68 04 40 02 c0       	push   0xc0024004
c000c447:	e8 30 ab ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000c454:	83 ec 0c             	sub    esp,0xc
c000c457:	50                   	push   eax
c000c458:	e8 43 fb ff ff       	call   c000bfa0 <loadACPITables(unsigned char*)>
c000c45d:	83 c4 10             	add    esp,0x10
c000c460:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000c465:	83 ec 08             	sub    esp,0x8
c000c468:	68 69 3e 02 c0       	push   0xc0023e69
c000c46d:	50                   	push   eax
c000c46e:	e8 d9 fe ff ff       	call   c000c34c <findDataTable(unsigned char*, char*)>
c000c473:	83 c4 10             	add    esp,0x10
c000c476:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c47a:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000c47f:	0f 84 db 03 00 00    	je     c000c860 <scanMADT()+0x4a0>
c000c485:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c48d:	8d 76 00             	lea    esi,[esi+0x0]
c000c490:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c494:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c497:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000c49b:	0f 87 c7 03 00 00    	ja     c000c868 <scanMADT()+0x4a8>
c000c4a1:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000c4a9:	0f 87 b9 03 00 00    	ja     c000c868 <scanMADT()+0x4a8>
c000c4af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c4b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4bb:	8d 50 01             	lea    edx,[eax+0x1]
c000c4be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c4c6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c4ca:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000c4ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4d2:	8d 50 01             	lea    edx,[eax+0x1]
c000c4d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4d9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c4dd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c4e1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000c4e5:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000c4ea:	83 f8 02             	cmp    eax,0x2
c000c4ed:	0f 86 71 03 00 00    	jbe    c000c864 <scanMADT()+0x4a4>
c000c4f3:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c4f8:	85 c0                	test   eax,eax
c000c4fa:	75 58                	jne    c000c554 <scanMADT()+0x194>
c000c4fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c500:	8d 50 01             	lea    edx,[eax+0x1]
c000c503:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c507:	8a 15 80 cf 02 c0    	mov    dl,BYTE PTR ds:0xc002cf80
c000c50d:	0f b6 d2             	movzx  edx,dl
c000c510:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c514:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c518:	88 82 c0 cf 02 c0    	mov    BYTE PTR [edx-0x3ffd3040],al
c000c51e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c522:	8d 50 01             	lea    edx,[eax+0x1]
c000c525:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c529:	8a 15 80 cf 02 c0    	mov    dl,BYTE PTR ds:0xc002cf80
c000c52f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c532:	88 0d 80 cf 02 c0    	mov    BYTE PTR ds:0xc002cf80,cl
c000c538:	0f b6 d2             	movzx  edx,dl
c000c53b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c53f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c543:	88 82 a0 cf 02 c0    	mov    BYTE PTR [edx-0x3ffd3060],al
c000c549:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c54e:	e9 f1 02 00 00       	jmp    c000c844 <scanMADT()+0x484>
c000c553:	90                   	nop
c000c554:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c559:	83 f8 01             	cmp    eax,0x1
c000c55c:	0f 85 32 01 00 00    	jne    c000c694 <scanMADT()+0x2d4>
c000c562:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c566:	8d 50 01             	lea    edx,[eax+0x1]
c000c569:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c56d:	8a 15 40 ce 02 c0    	mov    dl,BYTE PTR ds:0xc002ce40
c000c573:	0f b6 d2             	movzx  edx,dl
c000c576:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c57a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c57e:	88 82 60 ce 02 c0    	mov    BYTE PTR [edx-0x3ffd31a0],al
c000c584:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000c589:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c58d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c591:	01 d0                	add    eax,edx
c000c593:	83 c0 2c             	add    eax,0x2c
c000c596:	8a 00                	mov    al,BYTE PTR [eax]
c000c598:	0f b6 d0             	movzx  edx,al
c000c59b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c59f:	8d 48 01             	lea    ecx,[eax+0x1]
c000c5a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5a6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c5aa:	0f b6 c0             	movzx  eax,al
c000c5ad:	c1 e0 08             	shl    eax,0x8
c000c5b0:	89 d1                	mov    ecx,edx
c000c5b2:	09 c1                	or     ecx,eax
c000c5b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5b8:	8d 50 02             	lea    edx,[eax+0x2]
c000c5bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5bf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5c3:	0f b6 c0             	movzx  eax,al
c000c5c6:	c1 e0 10             	shl    eax,0x10
c000c5c9:	09 c1                	or     ecx,eax
c000c5cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5cf:	8d 50 03             	lea    edx,[eax+0x3]
c000c5d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5d6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5da:	0f b6 c0             	movzx  eax,al
c000c5dd:	c1 e0 18             	shl    eax,0x18
c000c5e0:	09 c1                	or     ecx,eax
c000c5e2:	89 ca                	mov    edx,ecx
c000c5e4:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c5e9:	0f b6 c0             	movzx  eax,al
c000c5ec:	89 14 85 80 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3180],edx
c000c5f3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c5f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c5fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c600:	01 d0                	add    eax,edx
c000c602:	83 c0 2c             	add    eax,0x2c
c000c605:	8a 00                	mov    al,BYTE PTR [eax]
c000c607:	0f b6 d0             	movzx  edx,al
c000c60a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c60e:	8d 48 01             	lea    ecx,[eax+0x1]
c000c611:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c615:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c619:	0f b6 c0             	movzx  eax,al
c000c61c:	c1 e0 08             	shl    eax,0x8
c000c61f:	89 d1                	mov    ecx,edx
c000c621:	09 c1                	or     ecx,eax
c000c623:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c627:	8d 50 02             	lea    edx,[eax+0x2]
c000c62a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c62e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c632:	0f b6 c0             	movzx  eax,al
c000c635:	c1 e0 10             	shl    eax,0x10
c000c638:	09 c1                	or     ecx,eax
c000c63a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c63e:	8d 50 03             	lea    edx,[eax+0x3]
c000c641:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c645:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c649:	0f b6 c0             	movzx  eax,al
c000c64c:	c1 e0 18             	shl    eax,0x18
c000c64f:	09 c1                	or     ecx,eax
c000c651:	89 ca                	mov    edx,ecx
c000c653:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c658:	0f b6 c0             	movzx  eax,al
c000c65b:	89 14 85 00 cf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3100],edx
c000c662:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c667:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c66c:	83 c0 01             	add    eax,0x1
c000c66f:	a2 40 ce 02 c0       	mov    ds:0xc002ce40,al
c000c674:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c000c679:	0f b6 c0             	movzx  eax,al
c000c67c:	83 ec 08             	sub    esp,0x8
c000c67f:	50                   	push   eax
c000c680:	68 6e 3e 02 c0       	push   0xc0023e6e
c000c685:	e8 f2 a8 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c68a:	83 c4 10             	add    esp,0x10
c000c68d:	e9 b2 01 00 00       	jmp    c000c844 <scanMADT()+0x484>
c000c692:	66 90                	xchg   ax,ax
c000c694:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c699:	83 f8 02             	cmp    eax,0x2
c000c69c:	0f 85 ea 00 00 00    	jne    c000c78c <scanMADT()+0x3cc>
c000c6a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6a6:	8d 50 01             	lea    edx,[eax+0x1]
c000c6a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6ad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6b1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c6b5:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000c6b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6bd:	8d 50 01             	lea    edx,[eax+0x1]
c000c6c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6c8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c6cc:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000c6d0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6d8:	01 d0                	add    eax,edx
c000c6da:	83 c0 2c             	add    eax,0x2c
c000c6dd:	8a 00                	mov    al,BYTE PTR [eax]
c000c6df:	0f b6 d0             	movzx  edx,al
c000c6e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6e6:	8d 48 01             	lea    ecx,[eax+0x1]
c000c6e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6ed:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c6f1:	0f b6 c0             	movzx  eax,al
c000c6f4:	c1 e0 08             	shl    eax,0x8
c000c6f7:	89 d1                	mov    ecx,edx
c000c6f9:	09 c1                	or     ecx,eax
c000c6fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6ff:	8d 50 02             	lea    edx,[eax+0x2]
c000c702:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c706:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c70a:	0f b6 c0             	movzx  eax,al
c000c70d:	c1 e0 10             	shl    eax,0x10
c000c710:	09 c1                	or     ecx,eax
c000c712:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c716:	8d 50 03             	lea    edx,[eax+0x3]
c000c719:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c71d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c721:	0f b6 c0             	movzx  eax,al
c000c724:	c1 e0 18             	shl    eax,0x18
c000c727:	09 c8                	or     eax,ecx
c000c729:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c72d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c732:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c736:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c73a:	01 d0                	add    eax,edx
c000c73c:	83 c0 2c             	add    eax,0x2c
c000c73f:	8a 00                	mov    al,BYTE PTR [eax]
c000c741:	0f b6 c0             	movzx  eax,al
c000c744:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c748:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c74b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c74f:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000c753:	0f b6 d2             	movzx  edx,dl
c000c756:	c1 e2 08             	shl    edx,0x8
c000c759:	09 d0                	or     eax,edx
c000c75b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000c760:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c765:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c76a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c76e:	88 90 c8 67 02 c0    	mov    BYTE PTR [eax-0x3ffd9838],dl
c000c774:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000c779:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000c77e:	66 89 84 12 20 ce 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd31e0],ax
c000c786:	e9 b9 00 00 00       	jmp    c000c844 <scanMADT()+0x484>
c000c78b:	90                   	nop
c000c78c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c791:	83 f8 04             	cmp    eax,0x4
c000c794:	0f 85 9a 00 00 00    	jne    c000c834 <scanMADT()+0x474>
c000c79a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c79e:	8d 50 01             	lea    edx,[eax+0x1]
c000c7a1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c7a9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c7ad:	0f b6 c0             	movzx  eax,al
c000c7b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c7b4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c7b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7bc:	01 d0                	add    eax,edx
c000c7be:	83 c0 2c             	add    eax,0x2c
c000c7c1:	8a 00                	mov    al,BYTE PTR [eax]
c000c7c3:	0f b6 d0             	movzx  edx,al
c000c7c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7ca:	8d 48 01             	lea    ecx,[eax+0x1]
c000c7cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c7d1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c7d5:	0f b6 c0             	movzx  eax,al
c000c7d8:	c1 e0 08             	shl    eax,0x8
c000c7db:	09 d0                	or     eax,edx
c000c7dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c7e1:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c7e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7ea:	8d 50 01             	lea    edx,[eax+0x1]
c000c7ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c7f5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c7f9:	0f b6 c0             	movzx  eax,al
c000c7fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c804:	c1 e0 08             	shl    eax,0x8
c000c807:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c80b:	89 c1                	mov    ecx,eax
c000c80d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c811:	c1 e0 18             	shl    eax,0x18
c000c814:	89 c3                	mov    ebx,eax
c000c816:	a1 8c cd 02 c0       	mov    eax,ds:0xc002cd8c
c000c81b:	8d 50 01             	lea    edx,[eax+0x1]
c000c81e:	89 15 8c cd 02 c0    	mov    DWORD PTR ds:0xc002cd8c,edx
c000c824:	09 d9                	or     ecx,ebx
c000c826:	89 ca                	mov    edx,ecx
c000c828:	89 14 85 a0 cd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3260],edx
c000c82f:	eb 13                	jmp    c000c844 <scanMADT()+0x484>
c000c831:	8d 76 00             	lea    esi,[esi+0x0]
c000c834:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c839:	83 f8 05             	cmp    eax,0x5
c000c83c:	75 06                	jne    c000c844 <scanMADT()+0x484>
c000c83e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000c843:	90                   	nop
c000c844:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000c849:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c84d:	01 d0                	add    eax,edx
c000c84f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c853:	e9 38 fc ff ff       	jmp    c000c490 <scanMADT()+0xd0>
c000c858:	90                   	nop
c000c859:	eb 0d                	jmp    c000c868 <scanMADT()+0x4a8>
c000c85b:	90                   	nop
c000c85c:	90                   	nop
c000c85d:	eb 09                	jmp    c000c868 <scanMADT()+0x4a8>
c000c85f:	90                   	nop
c000c860:	90                   	nop
c000c861:	eb 05                	jmp    c000c868 <scanMADT()+0x4a8>
c000c863:	90                   	nop
c000c864:	90                   	nop
c000c865:	8d 76 00             	lea    esi,[esi+0x0]
c000c868:	83 c4 38             	add    esp,0x38
c000c86b:	5b                   	pop    ebx
c000c86c:	c3                   	ret    
c000c86d:	90                   	nop
c000c86e:	66 90                	xchg   ax,ax

c000c870 <ACPI::ACPI()>:
c000c870:	83 ec 0c             	sub    esp,0xc
c000c873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c877:	83 ec 08             	sub    esp,0x8
c000c87a:	68 8a 3e 02 c0       	push   0xc0023e8a
c000c87f:	50                   	push   eax
c000c880:	e8 31 d3 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000c885:	83 c4 10             	add    esp,0x10
c000c888:	ba a8 40 02 c0       	mov    edx,0xc00240a8
c000c88d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c891:	89 10                	mov    DWORD PTR [eax],edx
c000c893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c897:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000c89e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8a2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000c8ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8b0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000c8ba:	90                   	nop
c000c8bb:	83 c4 0c             	add    esp,0xc
c000c8be:	c3                   	ret    
c000c8bf:	90                   	nop

c000c8c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000c8c0:	83 ec 2c             	sub    esp,0x2c
c000c8c3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c8c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c8cb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c8cf:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000c8d3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000c8d8:	88 d0                	mov    al,dl
c000c8da:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c8de:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c8e3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c8eb:	90                   	nop
c000c8ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8f0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c8f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c8fa:	0f 8d b0 00 00 00    	jge    c000c9b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000c900:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c904:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c908:	83 c2 2a             	add    edx,0x2a
c000c90b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000c90f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000c914:	0f b7 c0             	movzx  eax,ax
c000c917:	39 c2                	cmp    edx,eax
c000c919:	0f 85 85 00 00 00    	jne    c000c9a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c91f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c923:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c927:	83 c2 2a             	add    edx,0x2a
c000c92a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000c92e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000c933:	0f b6 c0             	movzx  eax,al
c000c936:	39 c2                	cmp    edx,eax
c000c938:	75 6a                	jne    c000c9a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c93a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c93f:	85 c0                	test   eax,eax
c000c941:	74 3d                	je     c000c980 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000c943:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c947:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c94b:	83 c2 2a             	add    edx,0x2a
c000c94e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000c952:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c956:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c959:	39 c2                	cmp    edx,eax
c000c95b:	74 13                	je     c000c970 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000c95d:	83 ec 0c             	sub    esp,0xc
c000c960:	68 28 40 02 c0       	push   0xc0024028
c000c965:	e8 7c 36 00 00       	call   c000ffe6 <KePanic(char const*)>
c000c96a:	83 c4 10             	add    esp,0x10
c000c96d:	8d 76 00             	lea    esi,[esi+0x0]
c000c970:	83 ec 0c             	sub    esp,0xc
c000c973:	68 8f 3e 02 c0       	push   0xc0023e8f
c000c978:	e8 69 36 00 00       	call   c000ffe6 <KePanic(char const*)>
c000c97d:	83 c4 10             	add    esp,0x10
c000c980:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c984:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c988:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c98c:	83 c2 2a             	add    edx,0x2a
c000c98f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000c993:	8b 02                	mov    eax,DWORD PTR [edx]
c000c995:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000c998:	89 01                	mov    DWORD PTR [ecx],eax
c000c99a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000c99d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c9a2:	66 90                	xchg   ax,ax
c000c9a4:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000c9a9:	e9 3e ff ff ff       	jmp    c000c8ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000c9ae:	66 90                	xchg   ax,ax
c000c9b0:	90                   	nop
c000c9b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9b5:	83 c4 2c             	add    esp,0x2c
c000c9b8:	c2 04 00             	ret    0x4
c000c9bb:	90                   	nop

c000c9bc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000c9bc:	83 ec 1c             	sub    esp,0x1c
c000c9bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c9c3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c9c7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c9cb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000c9d0:	88 c8                	mov    al,cl
c000c9d2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000c9d6:	88 d0                	mov    al,dl
c000c9d8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c9dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9e0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ea:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c9ed:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000c9f1:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000c9f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9f9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c9ff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ca03:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000ca06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ca0a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000ca0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca13:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ca19:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000ca1d:	83 c0 01             	add    eax,0x1
c000ca20:	88 c1                	mov    cl,al
c000ca22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca26:	83 c2 2a             	add    edx,0x2a
c000ca29:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ca2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca31:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ca37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca3b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ca3e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ca42:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ca46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca4a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ca50:	8d 50 01             	lea    edx,[eax+0x1]
c000ca53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca57:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ca5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca61:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ca67:	3d 00 02 00 00       	cmp    eax,0x200
c000ca6c:	75 12                	jne    c000ca80 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000ca6e:	83 ec 0c             	sub    esp,0xc
c000ca71:	68 9e 3e 02 c0       	push   0xc0023e9e
c000ca76:	e8 6b 35 00 00       	call   c000ffe6 <KePanic(char const*)>
c000ca7b:	83 c4 10             	add    esp,0x10
c000ca7e:	66 90                	xchg   ax,ax
c000ca80:	90                   	nop
c000ca81:	83 c4 1c             	add    esp,0x1c
c000ca84:	c3                   	ret    
c000ca85:	90                   	nop
c000ca86:	66 90                	xchg   ax,ax

c000ca88 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ca88:	b8 00 00 00 00       	mov    eax,0x0
c000ca8d:	c3                   	ret    
c000ca8e:	66 90                	xchg   ax,ax

c000ca90 <ACPI::detectPCI()>:
c000ca90:	53                   	push   ebx
c000ca91:	83 ec 28             	sub    esp,0x28
c000ca94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ca99:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ca9e:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000caa3:	83 ec 08             	sub    esp,0x8
c000caa6:	68 bb 3e 02 c0       	push   0xc0023ebb
c000caab:	50                   	push   eax
c000caac:	e8 9b f8 ff ff       	call   c000c34c <findDataTable(unsigned char*, char*)>
c000cab1:	83 c4 10             	add    esp,0x10
c000cab4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cab8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000cabd:	74 0d                	je     c000cacc <ACPI::detectPCI()+0x3c>
c000cabf:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cac4:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cac9:	8d 76 00             	lea    esi,[esi+0x0]
c000cacc:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000cad4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cad8:	8a 00                	mov    al,BYTE PTR [eax]
c000cada:	0f b6 c0             	movzx  eax,al
c000cadd:	83 f8 01             	cmp    eax,0x1
c000cae0:	75 0e                	jne    c000caf0 <ACPI::detectPCI()+0x60>
c000cae2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cae7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000caec:	eb 2e                	jmp    c000cb1c <ACPI::detectPCI()+0x8c>
c000caee:	66 90                	xchg   ax,ax
c000caf0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000caf4:	8a 00                	mov    al,BYTE PTR [eax]
c000caf6:	0f b6 c0             	movzx  eax,al
c000caf9:	83 f8 02             	cmp    eax,0x2
c000cafc:	75 1e                	jne    c000cb1c <ACPI::detectPCI()+0x8c>
c000cafe:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb03:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cb08:	85 c0                	test   eax,eax
c000cb0a:	74 10                	je     c000cb1c <ACPI::detectPCI()+0x8c>
c000cb0c:	83 ec 0c             	sub    esp,0xc
c000cb0f:	68 58 40 02 c0       	push   0xc0024058
c000cb14:	e8 cd 34 00 00       	call   c000ffe6 <KePanic(char const*)>
c000cb19:	83 c4 10             	add    esp,0x10
c000cb1c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000cb20:	83 f0 01             	xor    eax,0x1
c000cb23:	0f b6 c0             	movzx  eax,al
c000cb26:	85 c0                	test   eax,eax
c000cb28:	74 46                	je     c000cb70 <ACPI::detectPCI()+0xe0>
c000cb2a:	e8 01 36 ff ff       	call   c0000130 <manualPCIProbe>
c000cb2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cb33:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000cb38:	75 0e                	jne    c000cb48 <ACPI::detectPCI()+0xb8>
c000cb3a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb3f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cb44:	eb 2a                	jmp    c000cb70 <ACPI::detectPCI()+0xe0>
c000cb46:	66 90                	xchg   ax,ax
c000cb48:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000cb4d:	75 21                	jne    c000cb70 <ACPI::detectPCI()+0xe0>
c000cb4f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb54:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cb59:	85 c0                	test   eax,eax
c000cb5b:	74 13                	je     c000cb70 <ACPI::detectPCI()+0xe0>
c000cb5d:	83 ec 0c             	sub    esp,0xc
c000cb60:	68 58 40 02 c0       	push   0xc0024058
c000cb65:	e8 7c 34 00 00       	call   c000ffe6 <KePanic(char const*)>
c000cb6a:	83 c4 10             	add    esp,0x10
c000cb6d:	8d 76 00             	lea    esi,[esi+0x0]
c000cb70:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000cb75:	85 c0                	test   eax,eax
c000cb77:	0f 84 87 00 00 00    	je     c000cc04 <ACPI::detectPCI()+0x174>
c000cb7d:	83 ec 0c             	sub    esp,0xc
c000cb80:	68 c0 3e 02 c0       	push   0xc0023ec0
c000cb85:	e8 9f 07 00 00       	call   c000d329 <KeSetBootMessage(char const*)>
c000cb8a:	83 c4 10             	add    esp,0x10
c000cb8d:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000cb95:	83 ec 0c             	sub    esp,0xc
c000cb98:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cb9c:	e8 ee 2f 00 00       	call   c000fb8f <malloc>
c000cba1:	83 c4 10             	add    esp,0x10
c000cba4:	89 c3                	mov    ebx,eax
c000cba6:	83 ec 0c             	sub    esp,0xc
c000cba9:	53                   	push   ebx
c000cbaa:	e8 99 12 01 00       	call   c001de48 <PCI::PCI()>
c000cbaf:	83 c4 10             	add    esp,0x10
c000cbb2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cbb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cbba:	83 ec 08             	sub    esp,0x8
c000cbbd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbc1:	50                   	push   eax
c000cbc2:	e8 8d ce ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000cbc7:	83 c4 10             	add    esp,0x10
c000cbca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cbce:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbd0:	83 c0 08             	add    eax,0x8
c000cbd3:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbd5:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000cbda:	85 d2                	test   edx,edx
c000cbdc:	74 0a                	je     c000cbe8 <ACPI::detectPCI()+0x158>
c000cbde:	ba 01 00 00 00       	mov    edx,0x1
c000cbe3:	eb 0b                	jmp    c000cbf0 <ACPI::detectPCI()+0x160>
c000cbe5:	8d 76 00             	lea    esi,[esi+0x0]
c000cbe8:	ba 02 00 00 00       	mov    edx,0x2
c000cbed:	8d 76 00             	lea    esi,[esi+0x0]
c000cbf0:	6a 00                	push   0x0
c000cbf2:	6a 00                	push   0x0
c000cbf4:	52                   	push   edx
c000cbf5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbf9:	ff d0                	call   eax
c000cbfb:	83 c4 10             	add    esp,0x10
c000cbfe:	e9 91 00 00 00       	jmp    c000cc94 <ACPI::detectPCI()+0x204>
c000cc03:	90                   	nop
c000cc04:	83 ec 0c             	sub    esp,0xc
c000cc07:	68 d8 3e 02 c0       	push   0xc0023ed8
c000cc0c:	e8 18 07 00 00       	call   c000d329 <KeSetBootMessage(char const*)>
c000cc11:	83 c4 10             	add    esp,0x10
c000cc14:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000cc1b:	83 ec 0c             	sub    esp,0xc
c000cc1e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cc22:	e8 68 2f 00 00       	call   c000fb8f <malloc>
c000cc27:	83 c4 10             	add    esp,0x10
c000cc2a:	89 c3                	mov    ebx,eax
c000cc2c:	83 ec 0c             	sub    esp,0xc
c000cc2f:	53                   	push   ebx
c000cc30:	e8 19 1e 01 00       	call   c001ea4e <IDE::IDE()>
c000cc35:	83 c4 10             	add    esp,0x10
c000cc38:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000cc3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc40:	83 ec 08             	sub    esp,0x8
c000cc43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cc47:	50                   	push   eax
c000cc48:	e8 07 ce ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000cc4d:	83 c4 10             	add    esp,0x10
c000cc50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc54:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000cc5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc62:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000cc6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc6f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000cc78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc7c:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc7e:	83 c0 08             	add    eax,0x8
c000cc81:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc83:	6a 00                	push   0x0
c000cc85:	6a 00                	push   0x0
c000cc87:	6a 00                	push   0x0
c000cc89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc8d:	ff d0                	call   eax
c000cc8f:	83 c4 10             	add    esp,0x10
c000cc92:	66 90                	xchg   ax,ax
c000cc94:	90                   	nop
c000cc95:	83 c4 28             	add    esp,0x28
c000cc98:	5b                   	pop    ebx
c000cc99:	c3                   	ret    
c000cc9a:	66 90                	xchg   ax,ax

c000cc9c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000cc9c:	83 ec 0c             	sub    esp,0xc
c000cc9f:	83 ec 0c             	sub    esp,0xc
c000cca2:	68 ed 3e 02 c0       	push   0xc0023eed
c000cca7:	e8 3a 33 00 00       	call   c000ffe6 <KePanic(char const*)>
c000ccac:	83 c4 10             	add    esp,0x10
c000ccaf:	90                   	nop
c000ccb0:	83 c4 0c             	add    esp,0xc
c000ccb3:	c3                   	ret    

c000ccb4 <ACPI::open(int, int, void*)>:
c000ccb4:	57                   	push   edi
c000ccb5:	56                   	push   esi
c000ccb6:	53                   	push   ebx
c000ccb7:	81 ec 70 01 00 00    	sub    esp,0x170
c000ccbd:	83 ec 0c             	sub    esp,0xc
c000ccc0:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ccc7:	e8 c4 fd ff ff       	call   c000ca90 <ACPI::detectPCI()>
c000cccc:	83 c4 10             	add    esp,0x10
c000cccf:	83 ec 0c             	sub    esp,0xc
c000ccd2:	68 80 40 02 c0       	push   0xc0024080
c000ccd7:	e8 4d 06 00 00       	call   c000d329 <KeSetBootMessage(char const*)>
c000ccdc:	83 c4 10             	add    esp,0x10
c000ccdf:	b8 4c 05 00 00       	mov    eax,0x54c
c000cce4:	8a 00                	mov    al,BYTE PTR [eax]
c000cce6:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000cced:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000ccf5:	83 f8 01             	cmp    eax,0x1
c000ccf8:	75 12                	jne    c000cd0c <ACPI::open(int, int, void*)+0x58>
c000ccfa:	83 ec 0c             	sub    esp,0xc
c000ccfd:	68 fe 3e 02 c0       	push   0xc0023efe
c000cd02:	e8 de 8e 00 00       	call   c0015be5 <Thr::loadKernelSymbolTable(char const*)>
c000cd07:	83 c4 10             	add    esp,0x10
c000cd0a:	eb 34                	jmp    c000cd40 <ACPI::open(int, int, void*)+0x8c>
c000cd0c:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000cd14:	3d bb 00 00 00       	cmp    eax,0xbb
c000cd19:	75 15                	jne    c000cd30 <ACPI::open(int, int, void*)+0x7c>
c000cd1b:	83 ec 0c             	sub    esp,0xc
c000cd1e:	68 1c 3f 02 c0       	push   0xc0023f1c
c000cd23:	e8 bd 8e 00 00       	call   c0015be5 <Thr::loadKernelSymbolTable(char const*)>
c000cd28:	83 c4 10             	add    esp,0x10
c000cd2b:	eb 13                	jmp    c000cd40 <ACPI::open(int, int, void*)+0x8c>
c000cd2d:	8d 76 00             	lea    esi,[esi+0x0]
c000cd30:	83 ec 0c             	sub    esp,0xc
c000cd33:	68 3a 3f 02 c0       	push   0xc0023f3a
c000cd38:	e8 a9 32 00 00       	call   c000ffe6 <KePanic(char const*)>
c000cd3d:	83 c4 10             	add    esp,0x10
c000cd40:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000cd48:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000cd53:	83 ec 0c             	sub    esp,0xc
c000cd56:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000cd5d:	e8 2d 2e 00 00       	call   c000fb8f <malloc>
c000cd62:	83 c4 10             	add    esp,0x10
c000cd65:	89 c3                	mov    ebx,eax
c000cd67:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c000cd6c:	83 ec 04             	sub    esp,0x4
c000cd6f:	50                   	push   eax
c000cd70:	68 54 3f 02 c0       	push   0xc0023f54
c000cd75:	53                   	push   ebx
c000cd76:	e8 0f b4 ff ff       	call   c000818a <File::File(char const*, Process*)>
c000cd7b:	83 c4 10             	add    esp,0x10
c000cd7e:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000cd85:	83 ec 08             	sub    esp,0x8
c000cd88:	6a 01                	push   0x1
c000cd8a:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cd91:	e8 12 b4 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000cd96:	83 c4 10             	add    esp,0x10
c000cd99:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000cda0:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000cda8:	75 16                	jne    c000cdc0 <ACPI::open(int, int, void*)+0x10c>
c000cdaa:	83 ec 0c             	sub    esp,0xc
c000cdad:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cdb4:	e8 4d b4 ff ff       	call   c0008206 <File::close()>
c000cdb9:	83 c4 10             	add    esp,0x10
c000cdbc:	eb 0a                	jmp    c000cdc8 <ACPI::open(int, int, void*)+0x114>
c000cdbe:	66 90                	xchg   ax,ax
c000cdc0:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000cdc8:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000cdd0:	74 1e                	je     c000cdf0 <ACPI::open(int, int, void*)+0x13c>
c000cdd2:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000cdd9:	8b 00                	mov    eax,DWORD PTR [eax]
c000cddb:	83 c0 08             	add    eax,0x8
c000cdde:	8b 00                	mov    eax,DWORD PTR [eax]
c000cde0:	83 ec 0c             	sub    esp,0xc
c000cde3:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cdea:	ff d0                	call   eax
c000cdec:	83 c4 10             	add    esp,0x10
c000cdef:	90                   	nop
c000cdf0:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000cdf7:	83 f0 01             	xor    eax,0x1
c000cdfa:	0f b6 c0             	movzx  eax,al
c000cdfd:	85 c0                	test   eax,eax
c000cdff:	74 2f                	je     c000ce30 <ACPI::open(int, int, void*)+0x17c>
c000ce01:	83 ec 0c             	sub    esp,0xc
c000ce04:	68 72 3f 02 c0       	push   0xc0023f72
c000ce09:	e8 1b 05 00 00       	call   c000d329 <KeSetBootMessage(char const*)>
c000ce0e:	83 c4 10             	add    esp,0x10
c000ce11:	c7 84 24 60 01 00 00 0c 00 00 00 	mov    DWORD PTR [esp+0x160],0xc
c000ce1c:	83 ec 0c             	sub    esp,0xc
c000ce1f:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ce26:	e8 9f 69 00 00       	call   c00137ca <Virt::setupPageSwapping(int)>
c000ce2b:	83 c4 10             	add    esp,0x10
c000ce2e:	66 90                	xchg   ax,ax
c000ce30:	83 ec 0c             	sub    esp,0xc
c000ce33:	68 8d 3f 02 c0       	push   0xc0023f8d
c000ce38:	e8 ec 04 00 00       	call   c000d329 <KeSetBootMessage(char const*)>
c000ce3d:	83 c4 10             	add    esp,0x10
c000ce40:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ce47:	83 ec 08             	sub    esp,0x8
c000ce4a:	6a 13                	push   0x13
c000ce4c:	50                   	push   eax
c000ce4d:	e8 30 cf ff ff       	call   c0009d82 <getDevicesOfType(DeviceType)>
c000ce52:	83 c4 0c             	add    esp,0xc
c000ce55:	8d 76 00             	lea    esi,[esi+0x0]
c000ce58:	83 ec 0c             	sub    esp,0xc
c000ce5b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ce62:	50                   	push   eax
c000ce63:	e8 74 54 01 00       	call   c00222dc <LinkedList<Device>::isEmpty()>
c000ce68:	83 c4 10             	add    esp,0x10
c000ce6b:	83 f0 01             	xor    eax,0x1
c000ce6e:	0f b6 c0             	movzx  eax,al
c000ce71:	85 c0                	test   eax,eax
c000ce73:	0f 84 47 01 00 00    	je     c000cfc0 <ACPI::open(int, int, void*)+0x30c>
c000ce79:	83 ec 0c             	sub    esp,0xc
c000ce7c:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ce83:	50                   	push   eax
c000ce84:	e8 6f 54 01 00       	call   c00222f8 <LinkedList<Device>::getFirstElement()>
c000ce89:	83 c4 10             	add    esp,0x10
c000ce8c:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ce93:	83 ec 0c             	sub    esp,0xc
c000ce96:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ce9d:	50                   	push   eax
c000ce9e:	e8 5d 54 01 00       	call   c0022300 <LinkedList<Device>::removeFirst()>
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000cead:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ceb4:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000cebb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000cebf:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000cec5:	ba 09 00 00 00       	mov    edx,0x9
c000ceca:	fc                   	cld    
c000cecb:	89 c7                	mov    edi,eax
c000cecd:	89 de                	mov    esi,ebx
c000cecf:	89 d1                	mov    ecx,edx
c000ced1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ced3:	83 ec 08             	sub    esp,0x8
c000ced6:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ceda:	50                   	push   eax
c000cedb:	83 ec 24             	sub    esp,0x24
c000cede:	89 e0                	mov    eax,esp
c000cee0:	89 c3                	mov    ebx,eax
c000cee2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000cee6:	ba 09 00 00 00       	mov    edx,0x9
c000ceeb:	89 df                	mov    edi,ebx
c000ceed:	89 c6                	mov    esi,eax
c000ceef:	89 d1                	mov    ecx,edx
c000cef1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000cef3:	e8 3a 14 01 00       	call   c001e332 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000cef8:	83 c4 30             	add    esp,0x30
c000cefb:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000cf02:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000cf0a:	0f 84 48 ff ff ff    	je     c000ce58 <ACPI::open(int, int, void*)+0x1a4>
c000cf10:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000cf1b:	83 ec 0c             	sub    esp,0xc
c000cf1e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000cf25:	e8 65 2c 00 00       	call   c000fb8f <malloc>
c000cf2a:	83 c4 10             	add    esp,0x10
c000cf2d:	89 c3                	mov    ebx,eax
c000cf2f:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c000cf34:	83 ec 04             	sub    esp,0x4
c000cf37:	50                   	push   eax
c000cf38:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cf3f:	53                   	push   ebx
c000cf40:	e8 45 b2 ff ff       	call   c000818a <File::File(char const*, Process*)>
c000cf45:	83 c4 10             	add    esp,0x10
c000cf48:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000cf4f:	83 ec 0c             	sub    esp,0xc
c000cf52:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cf59:	e8 0e b5 ff ff       	call   c000846c <File::exists()>
c000cf5e:	83 c4 10             	add    esp,0x10
c000cf61:	0f b6 c0             	movzx  eax,al
c000cf64:	85 c0                	test   eax,eax
c000cf66:	74 28                	je     c000cf90 <ACPI::open(int, int, void*)+0x2dc>
c000cf68:	83 ec 08             	sub    esp,0x8
c000cf6b:	6a 01                	push   0x1
c000cf6d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000cf74:	e8 f5 96 00 00       	call   c001666e <Thr::loadDLL(char const*, bool)>
c000cf79:	83 c4 10             	add    esp,0x10
c000cf7c:	83 ec 08             	sub    esp,0x8
c000cf7f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000cf86:	50                   	push   eax
c000cf87:	e8 34 99 00 00       	call   c00168c0 <Thr::executeDLL(unsigned long, void*)>
c000cf8c:	83 c4 10             	add    esp,0x10
c000cf8f:	90                   	nop
c000cf90:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000cf98:	0f 84 ba fe ff ff    	je     c000ce58 <ACPI::open(int, int, void*)+0x1a4>
c000cf9e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000cfa5:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfa7:	83 c0 08             	add    eax,0x8
c000cfaa:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfac:	83 ec 0c             	sub    esp,0xc
c000cfaf:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cfb6:	ff d0                	call   eax
c000cfb8:	83 c4 10             	add    esp,0x10
c000cfbb:	e9 98 fe ff ff       	jmp    c000ce58 <ACPI::open(int, int, void*)+0x1a4>
c000cfc0:	83 ec 0c             	sub    esp,0xc
c000cfc3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000cfca:	50                   	push   eax
c000cfcb:	e8 08 53 01 00       	call   c00222d8 <LinkedList<Device>::~LinkedList()>
c000cfd0:	83 c4 10             	add    esp,0x10
c000cfd3:	8b 1d c8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0c8
c000cfd9:	83 ec 08             	sub    esp,0x8
c000cfdc:	6a 01                	push   0x1
c000cfde:	68 a7 3f 02 c0       	push   0xc0023fa7
c000cfe3:	e8 86 96 00 00       	call   c001666e <Thr::loadDLL(char const*, bool)>
c000cfe8:	83 c4 10             	add    esp,0x10
c000cfeb:	83 ec 08             	sub    esp,0x8
c000cfee:	53                   	push   ebx
c000cfef:	50                   	push   eax
c000cff0:	e8 cb 98 00 00       	call   c00168c0 <Thr::executeDLL(unsigned long, void*)>
c000cff5:	83 c4 10             	add    esp,0x10
c000cff8:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000cffd:	85 c0                	test   eax,eax
c000cfff:	0f 84 27 01 00 00    	je     c000d12c <ACPI::open(int, int, void*)+0x478>
c000d005:	a1 88 cd 02 c0       	mov    eax,ds:0xc002cd88
c000d00a:	85 c0                	test   eax,eax
c000d00c:	0f 84 1a 01 00 00    	je     c000d12c <ACPI::open(int, int, void*)+0x478>
c000d012:	83 ec 0c             	sub    esp,0xc
c000d015:	68 c4 3f 02 c0       	push   0xc0023fc4
c000d01a:	e8 0a 03 00 00       	call   c000d329 <KeSetBootMessage(char const*)>
c000d01f:	83 c4 10             	add    esp,0x10
c000d022:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000d02d:	83 ec 0c             	sub    esp,0xc
c000d030:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000d037:	e8 53 2b 00 00       	call   c000fb8f <malloc>
c000d03c:	83 c4 10             	add    esp,0x10
c000d03f:	89 c3                	mov    ebx,eax
c000d041:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c000d046:	83 ec 04             	sub    esp,0x4
c000d049:	50                   	push   eax
c000d04a:	68 e1 3f 02 c0       	push   0xc0023fe1
c000d04f:	53                   	push   ebx
c000d050:	e8 35 b1 ff ff       	call   c000818a <File::File(char const*, Process*)>
c000d055:	83 c4 10             	add    esp,0x10
c000d058:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000d05f:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d067:	74 1f                	je     c000d088 <ACPI::open(int, int, void*)+0x3d4>
c000d069:	83 ec 0c             	sub    esp,0xc
c000d06c:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000d073:	e8 f4 b3 ff ff       	call   c000846c <File::exists()>
c000d078:	83 c4 10             	add    esp,0x10
c000d07b:	0f b6 c0             	movzx  eax,al
c000d07e:	85 c0                	test   eax,eax
c000d080:	74 06                	je     c000d088 <ACPI::open(int, int, void*)+0x3d4>
c000d082:	b0 01                	mov    al,0x1
c000d084:	eb 06                	jmp    c000d08c <ACPI::open(int, int, void*)+0x3d8>
c000d086:	66 90                	xchg   ax,ax
c000d088:	b0 00                	mov    al,0x0
c000d08a:	66 90                	xchg   ax,ax
c000d08c:	0f b6 c0             	movzx  eax,al
c000d08f:	85 c0                	test   eax,eax
c000d091:	74 25                	je     c000d0b8 <ACPI::open(int, int, void*)+0x404>
c000d093:	83 ec 08             	sub    esp,0x8
c000d096:	6a 01                	push   0x1
c000d098:	68 e1 3f 02 c0       	push   0xc0023fe1
c000d09d:	e8 cc 95 00 00       	call   c001666e <Thr::loadDLL(char const*, bool)>
c000d0a2:	83 c4 10             	add    esp,0x10
c000d0a5:	83 ec 08             	sub    esp,0x8
c000d0a8:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000d0af:	50                   	push   eax
c000d0b0:	e8 0b 98 00 00       	call   c00168c0 <Thr::executeDLL(unsigned long, void*)>
c000d0b5:	83 c4 10             	add    esp,0x10
c000d0b8:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d0c0:	74 2a                	je     c000d0ec <ACPI::open(int, int, void*)+0x438>
c000d0c2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d0ca:	74 20                	je     c000d0ec <ACPI::open(int, int, void*)+0x438>
c000d0cc:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000d0d3:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0d5:	83 c0 08             	add    eax,0x8
c000d0d8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0da:	83 ec 0c             	sub    esp,0xc
c000d0dd:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000d0e4:	ff d0                	call   eax
c000d0e6:	83 c4 10             	add    esp,0x10
c000d0e9:	8d 76 00             	lea    esi,[esi+0x0]
c000d0ec:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c000d0f1:	83 ec 08             	sub    esp,0x8
c000d0f4:	68 fe 3f 02 c0       	push   0xc0023ffe
c000d0f9:	50                   	push   eax
c000d0fa:	e8 4d f2 ff ff       	call   c000c34c <findDataTable(unsigned char*, char*)>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000d109:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000d111:	74 19                	je     c000d12c <ACPI::open(int, int, void*)+0x478>
c000d113:	83 ec 08             	sub    esp,0x8
c000d116:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000d11d:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000d124:	e8 73 fb ff ff       	call   c000cc9c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000d129:	83 c4 10             	add    esp,0x10
c000d12c:	b8 00 00 00 00       	mov    eax,0x0
c000d131:	81 c4 70 01 00 00    	add    esp,0x170
c000d137:	5b                   	pop    ebx
c000d138:	5e                   	pop    esi
c000d139:	5f                   	pop    edi
c000d13a:	c3                   	ret    
c000d13b:	90                   	nop

c000d13c <KeAssertionFailed(char*, char const*, char const*, int)>:
c000d13c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000d142:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000d149:	89 c2                	mov    edx,eax
c000d14b:	c1 fa 1f             	sar    edx,0x1f
c000d14e:	83 ec 04             	sub    esp,0x4
c000d151:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000d155:	51                   	push   ecx
c000d156:	52                   	push   edx
c000d157:	50                   	push   eax
c000d158:	e8 27 28 00 00       	call   c000f984 <KeItoa(long long, char*)>
c000d15d:	83 c4 10             	add    esp,0x10
c000d160:	83 ec 08             	sub    esp,0x8
c000d163:	68 cc 40 02 c0       	push   0xc00240cc
c000d168:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d16c:	50                   	push   eax
c000d16d:	e8 ce 34 ff ff       	call   c0000640 <strcpy>
c000d172:	83 c4 10             	add    esp,0x10
c000d175:	83 ec 08             	sub    esp,0x8
c000d178:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000d17f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d183:	50                   	push   eax
c000d184:	e8 b7 36 ff ff       	call   c0000840 <strcat>
c000d189:	83 c4 10             	add    esp,0x10
c000d18c:	83 ec 08             	sub    esp,0x8
c000d18f:	68 da 40 02 c0       	push   0xc00240da
c000d194:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d198:	50                   	push   eax
c000d199:	e8 a2 36 ff ff       	call   c0000840 <strcat>
c000d19e:	83 c4 10             	add    esp,0x10
c000d1a1:	83 ec 08             	sub    esp,0x8
c000d1a4:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d1ab:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d1af:	50                   	push   eax
c000d1b0:	e8 8b 36 ff ff       	call   c0000840 <strcat>
c000d1b5:	83 c4 10             	add    esp,0x10
c000d1b8:	83 ec 08             	sub    esp,0x8
c000d1bb:	68 dd 40 02 c0       	push   0xc00240dd
c000d1c0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d1c4:	50                   	push   eax
c000d1c5:	e8 76 36 ff ff       	call   c0000840 <strcat>
c000d1ca:	83 c4 10             	add    esp,0x10
c000d1cd:	83 ec 08             	sub    esp,0x8
c000d1d0:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000d1d7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d1db:	50                   	push   eax
c000d1dc:	e8 5f 36 ff ff       	call   c0000840 <strcat>
c000d1e1:	83 c4 10             	add    esp,0x10
c000d1e4:	83 ec 08             	sub    esp,0x8
c000d1e7:	68 dd 40 02 c0       	push   0xc00240dd
c000d1ec:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d1f0:	50                   	push   eax
c000d1f1:	e8 4a 36 ff ff       	call   c0000840 <strcat>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	83 ec 08             	sub    esp,0x8
c000d1fc:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d200:	50                   	push   eax
c000d201:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d205:	50                   	push   eax
c000d206:	e8 35 36 ff ff       	call   c0000840 <strcat>
c000d20b:	83 c4 10             	add    esp,0x10
c000d20e:	83 ec 0c             	sub    esp,0xc
c000d211:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d215:	50                   	push   eax
c000d216:	e8 cb 2d 00 00       	call   c000ffe6 <KePanic(char const*)>
c000d21b:	83 c4 10             	add    esp,0x10
c000d21e:	90                   	nop
c000d21f:	81 c4 2c 02 00 00    	add    esp,0x22c
c000d225:	c3                   	ret    

c000d226 <KeInitialiseAtexit()>:
c000d226:	83 ec 10             	sub    esp,0x10
c000d229:	c7 05 e0 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cfe0,0x0
c000d233:	6a 60                	push   0x60
c000d235:	6a 00                	push   0x0
c000d237:	68 60 d0 02 c0       	push   0xc002d060
c000d23c:	e8 af 32 ff ff       	call   c00004f0 <memset>
c000d241:	83 c4 1c             	add    esp,0x1c
c000d244:	c3                   	ret    

c000d245 <KeRegisterAtexit(void (*)(void*), void*)>:
c000d245:	a1 e0 cf 02 c0       	mov    eax,ds:0xc002cfe0
c000d24a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d24e:	89 14 85 60 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2fa0],edx
c000d255:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d259:	89 14 85 00 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3000],edx
c000d260:	40                   	inc    eax
c000d261:	a3 e0 cf 02 c0       	mov    ds:0xc002cfe0,eax
c000d266:	83 f8 17             	cmp    eax,0x17
c000d269:	7e 0d                	jle    c000d278 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000d26b:	c7 44 24 04 df 40 02 c0 	mov    DWORD PTR [esp+0x4],0xc00240df
c000d273:	e9 6e 2d 00 00       	jmp    c000ffe6 <KePanic(char const*)>
c000d278:	c3                   	ret    

c000d279 <KeExecuteAtexit()>:
c000d279:	53                   	push   ebx
c000d27a:	31 db                	xor    ebx,ebx
c000d27c:	83 ec 08             	sub    esp,0x8
c000d27f:	39 1d e0 cf 02 c0    	cmp    DWORD PTR ds:0xc002cfe0,ebx
c000d285:	7e 50                	jle    c000d2d7 <KeExecuteAtexit()+0x5e>
c000d287:	8b 04 9d 60 d0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2fa0]
c000d28e:	85 c0                	test   eax,eax
c000d290:	74 42                	je     c000d2d4 <KeExecuteAtexit()+0x5b>
c000d292:	51                   	push   ecx
c000d293:	50                   	push   eax
c000d294:	53                   	push   ebx
c000d295:	68 f8 40 02 c0       	push   0xc00240f8
c000d29a:	e8 dd 9c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d29f:	58                   	pop    eax
c000d2a0:	ff 34 9d 00 d0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd3000]
c000d2a7:	ff 14 9d 60 d0 02 c0 	call   DWORD PTR [ebx*4-0x3ffd2fa0]
c000d2ae:	c7 04 24 1a 41 02 c0 	mov    DWORD PTR [esp],0xc002411a
c000d2b5:	e8 c2 9c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d2ba:	c7 04 24 ec 47 02 c0 	mov    DWORD PTR [esp],0xc00247ec
c000d2c1:	c7 04 9d 60 d0 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd2fa0],0x0
c000d2cc:	e8 ab 9c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d2d1:	83 c4 10             	add    esp,0x10
c000d2d4:	43                   	inc    ebx
c000d2d5:	eb a8                	jmp    c000d27f <KeExecuteAtexit()+0x6>
c000d2d7:	83 c4 08             	add    esp,0x8
c000d2da:	5b                   	pop    ebx
c000d2db:	c3                   	ret    

c000d2dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>:
c000d2dc:	8b 15 c0 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0c0
c000d2e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d2e6:	21 d0                	and    eax,edx
c000d2e8:	0f 95 c0             	setne  al
c000d2eb:	c3                   	ret    

c000d2ec <KeInitialiseBootConfigurationFlags()>:
c000d2ec:	b8 00 05 00 00       	mov    eax,0x500
c000d2f1:	8b 00                	mov    eax,DWORD PTR [eax]
c000d2f3:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c000d2f8:	90                   	nop
c000d2f9:	c3                   	ret    

c000d2fa <KeDisplaySplashScreen()>:
c000d2fa:	53                   	push   ebx
c000d2fb:	bb 01 00 00 00       	mov    ebx,0x1
c000d300:	83 ec 08             	sub    esp,0x8
c000d303:	43                   	inc    ebx
c000d304:	0f be 83 1d 41 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdbee3]
c000d30b:	85 c0                	test   eax,eax
c000d30d:	74 15                	je     c000d324 <KeDisplaySplashScreen()+0x2a>
c000d30f:	83 ec 0c             	sub    esp,0xc
c000d312:	6a 01                	push   0x1
c000d314:	53                   	push   ebx
c000d315:	6a 00                	push   0x0
c000d317:	6a 0f                	push   0xf
c000d319:	50                   	push   eax
c000d31a:	e8 09 e7 00 00       	call   c001ba28 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d31f:	83 c4 20             	add    esp,0x20
c000d322:	eb df                	jmp    c000d303 <KeDisplaySplashScreen()+0x9>
c000d324:	83 c4 08             	add    esp,0x8
c000d327:	5b                   	pop    ebx
c000d328:	c3                   	ret    

c000d329 <KeSetBootMessage(char const*)>:
c000d329:	57                   	push   edi
c000d32a:	56                   	push   esi
c000d32b:	53                   	push   ebx
c000d32c:	81 ec a4 00 00 00    	sub    esp,0xa4
c000d332:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000d339:	68 9e 00 00 00       	push   0x9e
c000d33e:	6a 00                	push   0x0
c000d340:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000d344:	56                   	push   esi
c000d345:	e8 a6 31 ff ff       	call   c00004f0 <memset>
c000d34a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d34d:	e8 1e 32 ff ff       	call   c0000570 <strlen>
c000d352:	ba 50 00 00 00       	mov    edx,0x50
c000d357:	83 c4 10             	add    esp,0x10
c000d35a:	29 c2                	sub    edx,eax
c000d35c:	31 c9                	xor    ecx,ecx
c000d35e:	83 e2 fe             	and    edx,0xfffffffe
c000d361:	01 f2                	add    edx,esi
c000d363:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000d368:	84 c0                	test   al,al
c000d36a:	74 0a                	je     c000d376 <KeSetBootMessage(char const*)+0x4d>
c000d36c:	80 cc 07             	or     ah,0x7
c000d36f:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000d373:	41                   	inc    ecx
c000d374:	eb ed                	jmp    c000d363 <KeSetBootMessage(char const*)+0x3a>
c000d376:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000d37b:	b9 9e 00 00 00       	mov    ecx,0x9e
c000d380:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d382:	50                   	push   eax
c000d383:	50                   	push   eax
c000d384:	53                   	push   ebx
c000d385:	68 32 41 02 c0       	push   0xc0024132
c000d38a:	e8 ed 9b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d38f:	81 c4 b0 00 00 00    	add    esp,0xb0
c000d395:	5b                   	pop    ebx
c000d396:	5e                   	pop    esi
c000d397:	5f                   	pop    edi
c000d398:	c3                   	ret    

c000d399 <__cxa_atexit>:
c000d399:	31 c0                	xor    eax,eax
c000d39b:	c3                   	ret    

c000d39c <__cxa_finalize>:
c000d39c:	c3                   	ret    

c000d39d <__stack_chk_fail>:
c000d39d:	55                   	push   ebp
c000d39e:	89 e5                	mov    ebp,esp
c000d3a0:	83 ec 10             	sub    esp,0x10
c000d3a3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d3a6:	68 40 41 02 c0       	push   0xc0024140
c000d3ab:	e8 cc 9b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d3b0:	58                   	pop    eax
c000d3b1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d3b4:	5a                   	pop    edx
c000d3b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d3b8:	68 40 41 02 c0       	push   0xc0024140
c000d3bd:	e8 ba 9b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d3c2:	c7 04 24 48 41 02 c0 	mov    DWORD PTR [esp],0xc0024148
c000d3c9:	e8 18 2c 00 00       	call   c000ffe6 <KePanic(char const*)>
c000d3ce:	83 c4 10             	add    esp,0x10
c000d3d1:	c9                   	leave  
c000d3d2:	c3                   	ret    

c000d3d3 <__cxa_pure_virtual>:
c000d3d3:	83 ec 18             	sub    esp,0x18
c000d3d6:	68 60 41 02 c0       	push   0xc0024160
c000d3db:	e8 06 2c 00 00       	call   c000ffe6 <KePanic(char const*)>
c000d3e0:	83 c4 1c             	add    esp,0x1c
c000d3e3:	c3                   	ret    

c000d3e4 <operator new[](unsigned long)>:
c000d3e4:	e9 a6 27 00 00       	jmp    c000fb8f <malloc>

c000d3e9 <operator delete(void*, unsigned long)>:
c000d3e9:	e9 c1 27 00 00       	jmp    c000fbaf <rfree>

c000d3ee <operator delete[](void*)>:
c000d3ee:	e9 bc 27 00 00       	jmp    c000fbaf <rfree>

c000d3f3 <operator delete[](void*, unsigned long)>:
c000d3f3:	e9 b7 27 00 00       	jmp    c000fbaf <rfree>

c000d3f8 <CUnlockScheduler>:
c000d3f8:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000d400:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000d405:	85 c0                	test   eax,eax
c000d407:	75 03                	jne    c000d40c <CUnlockScheduler+0x14>
c000d409:	fb                   	sti    
c000d40a:	66 90                	xchg   ax,ax
c000d40c:	90                   	nop
c000d40d:	c3                   	ret    
c000d40e:	66 90                	xchg   ax,ax

c000d410 <CLockScheduler>:
c000d410:	fa                   	cli    
c000d411:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000d416:	83 c0 01             	add    eax,0x1
c000d419:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c000d41e:	90                   	nop
c000d41f:	c3                   	ret    

c000d420 <CPrintf>:
c000d420:	83 ec 0c             	sub    esp,0xc
c000d423:	83 ec 08             	sub    esp,0x8
c000d426:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d42a:	68 73 41 02 c0       	push   0xc0024173
c000d42f:	e8 48 9b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d434:	83 c4 10             	add    esp,0x10
c000d437:	90                   	nop
c000d438:	83 c4 0c             	add    esp,0xc
c000d43b:	c3                   	ret    

c000d43c <CmOpen(char const*)>:
c000d43c:	57                   	push   edi
c000d43d:	56                   	push   esi
c000d43e:	53                   	push   ebx
c000d43f:	83 ec 1c             	sub    esp,0x1c
c000d442:	6a 30                	push   0x30
c000d444:	e8 46 27 00 00       	call   c000fb8f <malloc>
c000d449:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000d450:	89 c3                	mov    ebx,eax
c000d452:	e8 38 27 00 00       	call   c000fb8f <malloc>
c000d457:	83 c4 0c             	add    esp,0xc
c000d45a:	89 c6                	mov    esi,eax
c000d45c:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c000d462:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d466:	50                   	push   eax
c000d467:	e8 1e ad ff ff       	call   c000818a <File::File(char const*, Process*)>
c000d46c:	83 c4 0c             	add    esp,0xc
c000d46f:	89 33                	mov    DWORD PTR [ebx],esi
c000d471:	8d 44 24 07          	lea    eax,[esp+0x7]
c000d475:	50                   	push   eax
c000d476:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d47a:	50                   	push   eax
c000d47b:	56                   	push   esi
c000d47c:	e8 29 b0 ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c000d481:	5a                   	pop    edx
c000d482:	59                   	pop    ecx
c000d483:	6a 01                	push   0x1
c000d485:	ff 33                	push   DWORD PTR [ebx]
c000d487:	e8 1c ad ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000d48c:	5e                   	pop    esi
c000d48d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d491:	e8 f9 26 00 00       	call   c000fb8f <malloc>
c000d496:	5a                   	pop    edx
c000d497:	89 c7                	mov    edi,eax
c000d499:	8d 74 24 10          	lea    esi,[esp+0x10]
c000d49d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d49f:	8b 10                	mov    edx,DWORD PTR [eax]
c000d4a1:	56                   	push   esi
c000d4a2:	57                   	push   edi
c000d4a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d4a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d4ab:	50                   	push   eax
c000d4ac:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d4af:	83 c4 14             	add    esp,0x14
c000d4b2:	ff 33                	push   DWORD PTR [ebx]
c000d4b4:	e8 4d ad ff ff       	call   c0008206 <File::close()>
c000d4b9:	59                   	pop    ecx
c000d4ba:	58                   	pop    eax
c000d4bb:	6a 13                	push   0x13
c000d4bd:	ff 33                	push   DWORD PTR [ebx]
c000d4bf:	e8 e4 ac ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000d4c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d4c6:	8b 10                	mov    edx,DWORD PTR [eax]
c000d4c8:	89 34 24             	mov    DWORD PTR [esp],esi
c000d4cb:	57                   	push   edi
c000d4cc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d4d0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d4d4:	50                   	push   eax
c000d4d5:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d4d8:	83 c4 14             	add    esp,0x14
c000d4db:	57                   	push   edi
c000d4dc:	e8 be 26 00 00       	call   c000fb9f <free>
c000d4e1:	83 c4 10             	add    esp,0x10
c000d4e4:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000d4e7:	75 10                	jne    c000d4f9 <CmOpen(char const*)+0xbd>
c000d4e9:	83 ec 0c             	sub    esp,0xc
c000d4ec:	68 76 41 02 c0       	push   0xc0024176
c000d4f1:	e8 f0 2a 00 00       	call   c000ffe6 <KePanic(char const*)>
c000d4f6:	83 c4 10             	add    esp,0x10
c000d4f9:	8d 7b 05             	lea    edi,[ebx+0x5]
c000d4fc:	50                   	push   eax
c000d4fd:	6a 00                	push   0x0
c000d4ff:	6a 00                	push   0x0
c000d501:	ff 33                	push   DWORD PTR [ebx]
c000d503:	e8 5e ad ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d508:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d50a:	8b 10                	mov    edx,DWORD PTR [eax]
c000d50c:	89 34 24             	mov    DWORD PTR [esp],esi
c000d50f:	57                   	push   edi
c000d510:	6a 00                	push   0x0
c000d512:	6a 2b                	push   0x2b
c000d514:	50                   	push   eax
c000d515:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d518:	83 c4 1c             	add    esp,0x1c
c000d51b:	6a 00                	push   0x0
c000d51d:	6a 00                	push   0x0
c000d51f:	ff 33                	push   DWORD PTR [ebx]
c000d521:	e8 40 ad ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d526:	83 c4 0c             	add    esp,0xc
c000d529:	6a 08                	push   0x8
c000d52b:	68 87 41 02 c0       	push   0xc0024187
c000d530:	57                   	push   edi
c000d531:	e8 4a 2e ff ff       	call   c0000380 <memcmp>
c000d536:	83 c4 10             	add    esp,0x10
c000d539:	85 c0                	test   eax,eax
c000d53b:	74 10                	je     c000d54d <CmOpen(char const*)+0x111>
c000d53d:	83 ec 0c             	sub    esp,0xc
c000d540:	68 90 41 02 c0       	push   0xc0024190
c000d545:	e8 9c 2a 00 00       	call   c000ffe6 <KePanic(char const*)>
c000d54a:	83 c4 10             	add    esp,0x10
c000d54d:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000d551:	89 d8                	mov    eax,ebx
c000d553:	83 c4 10             	add    esp,0x10
c000d556:	5b                   	pop    ebx
c000d557:	5e                   	pop    esi
c000d558:	5f                   	pop    edi
c000d559:	c3                   	ret    

c000d55a <CmClose(Reghive_Tag*)>:
c000d55a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d55e:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d562:	74 0b                	je     c000d56f <CmClose(Reghive_Tag*)+0x15>
c000d564:	8b 00                	mov    eax,DWORD PTR [eax]
c000d566:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d56a:	e9 97 ac ff ff       	jmp    c0008206 <File::close()>
c000d56f:	c3                   	ret    

c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000d570:	53                   	push   ebx
c000d571:	83 ec 18             	sub    esp,0x18
c000d574:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d578:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d57c:	74 29                	je     c000d5a7 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d57e:	50                   	push   eax
c000d57f:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d584:	99                   	cdq    
c000d585:	52                   	push   edx
c000d586:	50                   	push   eax
c000d587:	ff 33                	push   DWORD PTR [ebx]
c000d589:	e8 d8 ac ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d58e:	5a                   	pop    edx
c000d58f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d591:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d595:	8b 10                	mov    edx,DWORD PTR [eax]
c000d597:	51                   	push   ecx
c000d598:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d59c:	6a 00                	push   0x0
c000d59e:	6a 2b                	push   0x2b
c000d5a0:	50                   	push   eax
c000d5a1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d5a4:	83 c4 20             	add    esp,0x20
c000d5a7:	83 c4 18             	add    esp,0x18
c000d5aa:	5b                   	pop    ebx
c000d5ab:	c3                   	ret    

c000d5ac <CmGetString(Reghive_Tag*, int, char*)>:
c000d5ac:	55                   	push   ebp
c000d5ad:	57                   	push   edi
c000d5ae:	56                   	push   esi
c000d5af:	53                   	push   ebx
c000d5b0:	31 db                	xor    ebx,ebx
c000d5b2:	83 ec 70             	sub    esp,0x70
c000d5b5:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000d5bc:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000d5c0:	50                   	push   eax
c000d5c1:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000d5c8:	55                   	push   ebp
c000d5c9:	e8 a2 ff ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d5ce:	83 c4 10             	add    esp,0x10
c000d5d1:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000d5d6:	c1 e0 08             	shl    eax,0x8
c000d5d9:	89 c2                	mov    edx,eax
c000d5db:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000d5e0:	09 d0                	or     eax,edx
c000d5e2:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000d5e7:	c1 e0 08             	shl    eax,0x8
c000d5ea:	09 d0                	or     eax,edx
c000d5ec:	74 25                	je     c000d613 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000d5ee:	6b fb 0d             	imul   edi,ebx,0xd
c000d5f1:	52                   	push   edx
c000d5f2:	8d 54 24 39          	lea    edx,[esp+0x39]
c000d5f6:	52                   	push   edx
c000d5f7:	50                   	push   eax
c000d5f8:	55                   	push   ebp
c000d5f9:	e8 72 ff ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d5fe:	8d 74 24 49          	lea    esi,[esp+0x49]
c000d602:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000d609:	b9 27 00 00 00       	mov    ecx,0x27
c000d60e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d610:	83 c4 10             	add    esp,0x10
c000d613:	83 c3 03             	add    ebx,0x3
c000d616:	83 fb 15             	cmp    ebx,0x15
c000d619:	75 b6                	jne    c000d5d1 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000d61b:	83 c4 6c             	add    esp,0x6c
c000d61e:	5b                   	pop    ebx
c000d61f:	5e                   	pop    esi
c000d620:	5f                   	pop    edi
c000d621:	5d                   	pop    ebp
c000d622:	c3                   	ret    

c000d623 <CmEnterDirectory(Reghive_Tag*, int)>:
c000d623:	83 ec 40             	sub    esp,0x40
c000d626:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d62a:	50                   	push   eax
c000d62b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d62f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d633:	e8 38 ff ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d638:	83 c4 10             	add    esp,0x10
c000d63b:	83 c8 ff             	or     eax,0xffffffff
c000d63e:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000d643:	75 19                	jne    c000d65e <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000d645:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000d64a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000d64f:	c1 e0 08             	shl    eax,0x8
c000d652:	09 c2                	or     edx,eax
c000d654:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000d659:	c1 e0 10             	shl    eax,0x10
c000d65c:	09 d0                	or     eax,edx
c000d65e:	83 c4 3c             	add    esp,0x3c
c000d661:	c3                   	ret    

c000d662 <CmGetNext(Reghive_Tag*, int)>:
c000d662:	83 ec 40             	sub    esp,0x40
c000d665:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d669:	50                   	push   eax
c000d66a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d66e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d672:	e8 f9 fe ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d677:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000d67c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000d681:	c1 e0 08             	shl    eax,0x8
c000d684:	09 c2                	or     edx,eax
c000d686:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000d68b:	83 c4 4c             	add    esp,0x4c
c000d68e:	c1 e0 10             	shl    eax,0x10
c000d691:	09 d0                	or     eax,edx
c000d693:	c3                   	ret    

c000d694 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000d694:	53                   	push   ebx
c000d695:	83 ec 18             	sub    esp,0x18
c000d698:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d69c:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d6a0:	74 29                	je     c000d6cb <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d6a2:	50                   	push   eax
c000d6a3:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d6a8:	99                   	cdq    
c000d6a9:	52                   	push   edx
c000d6aa:	50                   	push   eax
c000d6ab:	ff 33                	push   DWORD PTR [ebx]
c000d6ad:	e8 b4 ab ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d6b2:	5a                   	pop    edx
c000d6b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d6b5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d6b9:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6bb:	51                   	push   ecx
c000d6bc:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d6c0:	6a 00                	push   0x0
c000d6c2:	6a 2b                	push   0x2b
c000d6c4:	50                   	push   eax
c000d6c5:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d6c8:	83 c4 20             	add    esp,0x20
c000d6cb:	83 c4 18             	add    esp,0x18
c000d6ce:	5b                   	pop    ebx
c000d6cf:	c3                   	ret    

c000d6d0 <CmFreeExtent(Reghive_Tag*, int)>:
c000d6d0:	53                   	push   ebx
c000d6d1:	83 ec 3c             	sub    esp,0x3c
c000d6d4:	6a 2b                	push   0x2b
c000d6d6:	6a 00                	push   0x0
c000d6d8:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d6dc:	53                   	push   ebx
c000d6dd:	e8 0e 2e ff ff       	call   c00004f0 <memset>
c000d6e2:	83 c4 0c             	add    esp,0xc
c000d6e5:	53                   	push   ebx
c000d6e6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d6ea:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d6ee:	e8 a1 ff ff ff       	call   c000d694 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d6f3:	83 c4 48             	add    esp,0x48
c000d6f6:	5b                   	pop    ebx
c000d6f7:	c3                   	ret    

c000d6f8 <CmUpdateHeader(Reghive_Tag*)>:
c000d6f8:	83 ec 0c             	sub    esp,0xc
c000d6fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6ff:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d703:	74 10                	je     c000d715 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000d705:	52                   	push   edx
c000d706:	8d 50 05             	lea    edx,[eax+0x5]
c000d709:	52                   	push   edx
c000d70a:	6a 00                	push   0x0
c000d70c:	50                   	push   eax
c000d70d:	e8 82 ff ff ff       	call   c000d694 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d712:	83 c4 10             	add    esp,0x10
c000d715:	83 c4 0c             	add    esp,0xc
c000d718:	c3                   	ret    

c000d719 <CmExpand(Reghive_Tag*, int)>:
c000d719:	57                   	push   edi
c000d71a:	56                   	push   esi
c000d71b:	83 ce ff             	or     esi,0xffffffff
c000d71e:	53                   	push   ebx
c000d71f:	83 ec 30             	sub    esp,0x30
c000d722:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d726:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d72a:	74 5f                	je     c000d78b <CmExpand(Reghive_Tag*, int)+0x72>
c000d72c:	31 d2                	xor    edx,edx
c000d72e:	31 f6                	xor    esi,esi
c000d730:	50                   	push   eax
c000d731:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000d735:	52                   	push   edx
c000d736:	50                   	push   eax
c000d737:	ff 33                	push   DWORD PTR [ebx]
c000d739:	e8 28 ab ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d73e:	83 c4 0c             	add    esp,0xc
c000d741:	6a 2b                	push   0x2b
c000d743:	6a 00                	push   0x0
c000d745:	8d 7c 24 11          	lea    edi,[esp+0x11]
c000d749:	57                   	push   edi
c000d74a:	e8 a1 2d ff ff       	call   c00004f0 <memset>
c000d74f:	83 c4 10             	add    esp,0x10
c000d752:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d756:	7d 1b                	jge    c000d773 <CmExpand(Reghive_Tag*, int)+0x5a>
c000d758:	83 ec 0c             	sub    esp,0xc
c000d75b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d75d:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000d761:	8b 10                	mov    edx,DWORD PTR [eax]
c000d763:	46                   	inc    esi
c000d764:	51                   	push   ecx
c000d765:	57                   	push   edi
c000d766:	6a 00                	push   0x0
c000d768:	6a 2b                	push   0x2b
c000d76a:	50                   	push   eax
c000d76b:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d76e:	83 c4 20             	add    esp,0x20
c000d771:	eb df                	jmp    c000d752 <CmExpand(Reghive_Tag*, int)+0x39>
c000d773:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000d777:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c000d77a:	83 ec 0c             	sub    esp,0xc
c000d77d:	01 f2                	add    edx,esi
c000d77f:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c000d782:	53                   	push   ebx
c000d783:	e8 70 ff ff ff       	call   c000d6f8 <CmUpdateHeader(Reghive_Tag*)>
c000d788:	83 c4 10             	add    esp,0x10
c000d78b:	83 c4 30             	add    esp,0x30
c000d78e:	89 f0                	mov    eax,esi
c000d790:	5b                   	pop    ebx
c000d791:	5e                   	pop    esi
c000d792:	5f                   	pop    edi
c000d793:	c3                   	ret    

c000d794 <CmFindUnusedExtent(Reghive_Tag*)>:
c000d794:	55                   	push   ebp
c000d795:	57                   	push   edi
c000d796:	56                   	push   esi
c000d797:	53                   	push   ebx
c000d798:	83 cb ff             	or     ebx,0xffffffff
c000d79b:	83 ec 1c             	sub    esp,0x1c
c000d79e:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d7a2:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000d7a6:	74 68                	je     c000d810 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d7a8:	be 2b 00 00 00       	mov    esi,0x2b
c000d7ad:	51                   	push   ecx
c000d7ae:	31 ff                	xor    edi,edi
c000d7b0:	6a 00                	push   0x0
c000d7b2:	31 db                	xor    ebx,ebx
c000d7b4:	6a 00                	push   0x0
c000d7b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d7b9:	e8 a8 aa ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d7be:	83 c4 10             	add    esp,0x10
c000d7c1:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000d7c4:	76 3b                	jbe    c000d801 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000d7c6:	83 ec 0c             	sub    esp,0xc
c000d7c9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d7cc:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d7d0:	8b 10                	mov    edx,DWORD PTR [eax]
c000d7d2:	51                   	push   ecx
c000d7d3:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000d7d7:	51                   	push   ecx
c000d7d8:	6a 00                	push   0x0
c000d7da:	6a 01                	push   0x1
c000d7dc:	50                   	push   eax
c000d7dd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d7e0:	83 c4 20             	add    esp,0x20
c000d7e3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000d7e8:	74 26                	je     c000d810 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d7ea:	43                   	inc    ebx
c000d7eb:	52                   	push   edx
c000d7ec:	57                   	push   edi
c000d7ed:	56                   	push   esi
c000d7ee:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d7f1:	e8 70 aa ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d7f6:	83 c6 2b             	add    esi,0x2b
c000d7f9:	83 d7 00             	adc    edi,0x0
c000d7fc:	83 c4 10             	add    esp,0x10
c000d7ff:	eb c0                	jmp    c000d7c1 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000d801:	50                   	push   eax
c000d802:	50                   	push   eax
c000d803:	6a 40                	push   0x40
c000d805:	55                   	push   ebp
c000d806:	e8 0e ff ff ff       	call   c000d719 <CmExpand(Reghive_Tag*, int)>
c000d80b:	83 c4 10             	add    esp,0x10
c000d80e:	89 c3                	mov    ebx,eax
c000d810:	83 c4 1c             	add    esp,0x1c
c000d813:	89 d8                	mov    eax,ebx
c000d815:	5b                   	pop    ebx
c000d816:	5e                   	pop    esi
c000d817:	5f                   	pop    edi
c000d818:	5d                   	pop    ebp
c000d819:	c3                   	ret    

c000d81a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000d81a:	55                   	push   ebp
c000d81b:	57                   	push   edi
c000d81c:	56                   	push   esi
c000d81d:	53                   	push   ebx
c000d81e:	81 ec 88 00 00 00    	sub    esp,0x88
c000d824:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000d82b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d832:	e8 5d ff ff ff       	call   c000d794 <CmFindUnusedExtent(Reghive_Tag*)>
c000d837:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d83b:	83 c4 0c             	add    esp,0xc
c000d83e:	6a 2b                	push   0x2b
c000d840:	6a 00                	push   0x0
c000d842:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000d846:	55                   	push   ebp
c000d847:	e8 a4 2c ff ff       	call   c00004f0 <memset>
c000d84c:	83 c4 10             	add    esp,0x10
c000d84f:	85 db                	test   ebx,ebx
c000d851:	74 12                	je     c000d865 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000d853:	51                   	push   ecx
c000d854:	55                   	push   ebp
c000d855:	53                   	push   ebx
c000d856:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d85d:	e8 0e fd ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d862:	83 c4 10             	add    esp,0x10
c000d865:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000d869:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d870:	b9 2b 00 00 00       	mov    ecx,0x2b
c000d875:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d877:	85 db                	test   ebx,ebx
c000d879:	74 49                	je     c000d8c4 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000d87b:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000d880:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000d885:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d889:	c1 e0 08             	shl    eax,0x8
c000d88c:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000d892:	09 c8                	or     eax,ecx
c000d894:	74 11                	je     c000d8a7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000d896:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000d89a:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000d89e:	c1 e8 10             	shr    eax,0x10
c000d8a1:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000d8a5:	eb 0f                	jmp    c000d8b6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000d8a7:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d8ac:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d8b1:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d8b6:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000d8ba:	c1 ea 08             	shr    edx,0x8
c000d8bd:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000d8c2:	eb 0f                	jmp    c000d8d3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000d8c4:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d8c9:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d8ce:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d8d3:	52                   	push   edx
c000d8d4:	8d 44 24 49          	lea    eax,[esp+0x49]
c000d8d8:	50                   	push   eax
c000d8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8dd:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d8e4:	e8 ab fd ff ff       	call   c000d694 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d8e9:	83 c4 10             	add    esp,0x10
c000d8ec:	85 db                	test   ebx,ebx
c000d8ee:	74 12                	je     c000d902 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000d8f0:	50                   	push   eax
c000d8f1:	55                   	push   ebp
c000d8f2:	53                   	push   ebx
c000d8f3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d8fa:	e8 95 fd ff ff       	call   c000d694 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d8ff:	83 c4 10             	add    esp,0x10
c000d902:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d906:	83 c4 7c             	add    esp,0x7c
c000d909:	5b                   	pop    ebx
c000d90a:	5e                   	pop    esi
c000d90b:	5f                   	pop    edi
c000d90c:	5d                   	pop    ebp
c000d90d:	c3                   	ret    

c000d90e <CmSetString(Reghive_Tag*, int, char const*)>:
c000d90e:	55                   	push   ebp
c000d90f:	57                   	push   edi
c000d910:	56                   	push   esi
c000d911:	53                   	push   ebx
c000d912:	bb 27 00 00 00       	mov    ebx,0x27
c000d917:	81 ec 88 00 00 00    	sub    esp,0x88
c000d91d:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d924:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000d92b:	e8 40 2c ff ff       	call   c0000570 <strlen>
c000d930:	8d 48 26             	lea    ecx,[eax+0x26]
c000d933:	89 c8                	mov    eax,ecx
c000d935:	99                   	cdq    
c000d936:	f7 fb                	idiv   ebx
c000d938:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d93c:	83 c4 10             	add    esp,0x10
c000d93f:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000d945:	7e 10                	jle    c000d957 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000d947:	83 ec 0c             	sub    esp,0xc
c000d94a:	68 a1 41 02 c0       	push   0xc00241a1
c000d94f:	e8 92 26 00 00       	call   c000ffe6 <KePanic(char const*)>
c000d954:	83 c4 10             	add    esp,0x10
c000d957:	31 ff                	xor    edi,edi
c000d959:	50                   	push   eax
c000d95a:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000d95e:	53                   	push   ebx
c000d95f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d966:	56                   	push   esi
c000d967:	e8 04 fc ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d96c:	83 c4 10             	add    esp,0x10
c000d96f:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c000d973:	89 d0                	mov    eax,edx
c000d975:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c000d979:	c1 e0 08             	shl    eax,0x8
c000d97c:	09 c2                	or     edx,eax
c000d97e:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000d982:	c1 e2 08             	shl    edx,0x8
c000d985:	09 c2                	or     edx,eax
c000d987:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000d98b:	7e 76                	jle    c000da03 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c000d98d:	85 d2                	test   edx,edx
c000d98f:	75 25                	jne    c000d9b6 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000d991:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000d996:	8d 44 24 45          	lea    eax,[esp+0x45]
c000d99a:	50                   	push   eax
c000d99b:	6a 00                	push   0x0
c000d99d:	6a 00                	push   0x0
c000d99f:	56                   	push   esi
c000d9a0:	e8 75 fe ff ff       	call   c000d81a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d9a5:	83 c4 10             	add    esp,0x10
c000d9a8:	89 c2                	mov    edx,eax
c000d9aa:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000d9ad:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000d9b0:	c1 f8 10             	sar    eax,0x10
c000d9b3:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000d9b6:	55                   	push   ebp
c000d9b7:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c000d9bb:	55                   	push   ebp
c000d9bc:	52                   	push   edx
c000d9bd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d9c1:	56                   	push   esi
c000d9c2:	e8 a9 fb ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d9c7:	83 c4 0c             	add    esp,0xc
c000d9ca:	6a 27                	push   0x27
c000d9cc:	6a 00                	push   0x0
c000d9ce:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d9d2:	51                   	push   ecx
c000d9d3:	e8 18 2b ff ff       	call   c00004f0 <memset>
c000d9d8:	83 c4 0c             	add    esp,0xc
c000d9db:	6b c7 27             	imul   eax,edi,0x27
c000d9de:	6a 27                	push   0x27
c000d9e0:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000d9e7:	50                   	push   eax
c000d9e8:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d9ec:	51                   	push   ecx
c000d9ed:	e8 8e 2c ff ff       	call   c0000680 <strncpy>
c000d9f2:	83 c4 0c             	add    esp,0xc
c000d9f5:	55                   	push   ebp
c000d9f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d9fa:	52                   	push   edx
c000d9fb:	56                   	push   esi
c000d9fc:	e8 93 fc ff ff       	call   c000d694 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000da01:	eb 19                	jmp    c000da1c <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c000da03:	85 d2                	test   edx,edx
c000da05:	74 18                	je     c000da1f <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c000da07:	51                   	push   ecx
c000da08:	51                   	push   ecx
c000da09:	52                   	push   edx
c000da0a:	56                   	push   esi
c000da0b:	e8 c0 fc ff ff       	call   c000d6d0 <CmFreeExtent(Reghive_Tag*, int)>
c000da10:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000da14:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000da18:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000da1c:	83 c4 10             	add    esp,0x10
c000da1f:	47                   	inc    edi
c000da20:	83 c3 03             	add    ebx,0x3
c000da23:	83 ff 07             	cmp    edi,0x7
c000da26:	0f 85 43 ff ff ff    	jne    c000d96f <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000da2c:	50                   	push   eax
c000da2d:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000da31:	50                   	push   eax
c000da32:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000da39:	56                   	push   esi
c000da3a:	e8 55 fc ff ff       	call   c000d694 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000da3f:	81 c4 8c 00 00 00    	add    esp,0x8c
c000da45:	5b                   	pop    ebx
c000da46:	5e                   	pop    esi
c000da47:	5f                   	pop    edi
c000da48:	5d                   	pop    ebp
c000da49:	c3                   	ret    

c000da4a <CmGetMatch(char*, char*, bool, bool*)>:
c000da4a:	56                   	push   esi
c000da4b:	53                   	push   ebx
c000da4c:	50                   	push   eax
c000da4d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000da51:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000da56:	74 25                	je     c000da7d <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000da58:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000da5b:	31 db                	xor    ebx,ebx
c000da5d:	50                   	push   eax
c000da5e:	50                   	push   eax
c000da5f:	8d 04 9d e0 67 02 c0 	lea    eax,[ebx*4-0x3ffd9820]
c000da66:	50                   	push   eax
c000da67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6b:	e8 e0 2c ff ff       	call   c0000750 <strcmp>
c000da70:	83 c4 10             	add    esp,0x10
c000da73:	85 c0                	test   eax,eax
c000da75:	74 2e                	je     c000daa5 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000da77:	43                   	inc    ebx
c000da78:	83 fb 3f             	cmp    ebx,0x3f
c000da7b:	75 e0                	jne    c000da5d <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000da7d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000da80:	31 db                	xor    ebx,ebx
c000da82:	8d 04 9d e0 67 02 c0 	lea    eax,[ebx*4-0x3ffd9820]
c000da89:	51                   	push   ecx
c000da8a:	51                   	push   ecx
c000da8b:	50                   	push   eax
c000da8c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000da90:	e8 bb 2c ff ff       	call   c0000750 <strcmp>
c000da95:	83 c4 10             	add    esp,0x10
c000da98:	85 c0                	test   eax,eax
c000da9a:	74 09                	je     c000daa5 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000da9c:	43                   	inc    ebx
c000da9d:	83 fb 3f             	cmp    ebx,0x3f
c000daa0:	75 e0                	jne    c000da82 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000daa2:	83 cb ff             	or     ebx,0xffffffff
c000daa5:	89 d8                	mov    eax,ebx
c000daa7:	5a                   	pop    edx
c000daa8:	5b                   	pop    ebx
c000daa9:	5e                   	pop    esi
c000daaa:	c3                   	ret    

c000daab <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000daab:	55                   	push   ebp
c000daac:	31 c0                	xor    eax,eax
c000daae:	57                   	push   edi
c000daaf:	56                   	push   esi
c000dab0:	53                   	push   ebx
c000dab1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dab5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000dab9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000dabb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000dabf:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000dac2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dac6:	83 fd 1f             	cmp    ebp,0x1f
c000dac9:	7f 0b                	jg     c000dad6 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000dacb:	0f b6 c2             	movzx  eax,dl
c000dace:	d3 e0                	shl    eax,cl
c000dad0:	09 07                	or     DWORD PTR [edi],eax
c000dad2:	b0 01                	mov    al,0x1
c000dad4:	01 33                	add    DWORD PTR [ebx],esi
c000dad6:	5b                   	pop    ebx
c000dad7:	5e                   	pop    esi
c000dad8:	5f                   	pop    edi
c000dad9:	5d                   	pop    ebp
c000dada:	c3                   	ret    

c000dadb <CmGetShift(unsigned int*, int*, int, bool*)>:
c000dadb:	57                   	push   edi
c000dadc:	56                   	push   esi
c000dadd:	53                   	push   ebx
c000dade:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000dae2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000dae6:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000daea:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000daee:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000daf0:	7c 17                	jl     c000db09 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000daf2:	8b 17                	mov    edx,DWORD PTR [edi]
c000daf4:	b8 01 00 00 00       	mov    eax,0x1
c000daf9:	d3 e0                	shl    eax,cl
c000dafb:	48                   	dec    eax
c000dafc:	21 d0                	and    eax,edx
c000dafe:	d3 ea                	shr    edx,cl
c000db00:	89 17                	mov    DWORD PTR [edi],edx
c000db02:	29 0b                	sub    DWORD PTR [ebx],ecx
c000db04:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000db07:	eb 05                	jmp    c000db0e <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000db09:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000db0c:	31 c0                	xor    eax,eax
c000db0e:	5b                   	pop    ebx
c000db0f:	5e                   	pop    esi
c000db10:	5f                   	pop    edi
c000db11:	c3                   	ret    

c000db12 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000db12:	83 ec 40             	sub    esp,0x40
c000db15:	8d 44 24 09          	lea    eax,[esp+0x9]
c000db19:	50                   	push   eax
c000db1a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db1e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db22:	e8 49 fa ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000db27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000db2b:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000db2f:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000db33:	89 10                	mov    DWORD PTR [eax],edx
c000db35:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000db38:	83 c4 4c             	add    esp,0x4c
c000db3b:	c3                   	ret    

c000db3c <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000db3c:	55                   	push   ebp
c000db3d:	57                   	push   edi
c000db3e:	56                   	push   esi
c000db3f:	53                   	push   ebx
c000db40:	83 ec 40             	sub    esp,0x40
c000db43:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000db47:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000db4b:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000db4f:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000db53:	53                   	push   ebx
c000db54:	56                   	push   esi
c000db55:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000db59:	e8 12 fa ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000db5e:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000db62:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000db66:	83 c4 0c             	add    esp,0xc
c000db69:	53                   	push   ebx
c000db6a:	56                   	push   esi
c000db6b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000db6f:	e8 20 fb ff ff       	call   c000d694 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000db74:	83 c4 4c             	add    esp,0x4c
c000db77:	5b                   	pop    ebx
c000db78:	5e                   	pop    esi
c000db79:	5f                   	pop    edi
c000db7a:	5d                   	pop    ebp
c000db7b:	c3                   	ret    

c000db7c <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000db7c:	55                   	push   ebp
c000db7d:	57                   	push   edi
c000db7e:	56                   	push   esi
c000db7f:	31 f6                	xor    esi,esi
c000db81:	53                   	push   ebx
c000db82:	31 db                	xor    ebx,ebx
c000db84:	83 ec 40             	sub    esp,0x40
c000db87:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000db8f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000db97:	6a 12                	push   0x12
c000db99:	68 ee 00 00 00       	push   0xee
c000db9e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000dba2:	e8 49 29 ff ff       	call   c00004f0 <memset>
c000dba7:	83 c4 10             	add    esp,0x10
c000dbaa:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000dbae:	6a 08                	push   0x8
c000dbb0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000dbb4:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000dbb8:	50                   	push   eax
c000dbb9:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dbbd:	55                   	push   ebp
c000dbbe:	57                   	push   edi
c000dbbf:	e8 e7 fe ff ff       	call   c000daab <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000dbc4:	83 c4 10             	add    esp,0x10
c000dbc7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dbcb:	50                   	push   eax
c000dbcc:	6a 06                	push   0x6
c000dbce:	55                   	push   ebp
c000dbcf:	57                   	push   edi
c000dbd0:	e8 06 ff ff ff       	call   c000dadb <CmGetShift(unsigned int*, int*, int, bool*)>
c000dbd5:	83 c4 10             	add    esp,0x10
c000dbd8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dbdd:	74 07                	je     c000dbe6 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000dbdf:	46                   	inc    esi
c000dbe0:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000dbe4:	eb e1                	jmp    c000dbc7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000dbe6:	43                   	inc    ebx
c000dbe7:	83 fb 12             	cmp    ebx,0x12
c000dbea:	75 c2                	jne    c000dbae <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000dbec:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000dbf0:	31 db                	xor    ebx,ebx
c000dbf2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000dbf5:	50                   	push   eax
c000dbf6:	50                   	push   eax
c000dbf7:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c000dbfc:	43                   	inc    ebx
c000dbfd:	8d 04 85 e0 67 02 c0 	lea    eax,[eax*4-0x3ffd9820]
c000dc04:	50                   	push   eax
c000dc05:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000dc09:	e8 32 2c ff ff       	call   c0000840 <strcat>
c000dc0e:	83 c4 10             	add    esp,0x10
c000dc11:	83 fb 18             	cmp    ebx,0x18
c000dc14:	75 df                	jne    c000dbf5 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000dc16:	83 c4 3c             	add    esp,0x3c
c000dc19:	31 c0                	xor    eax,eax
c000dc1b:	5b                   	pop    ebx
c000dc1c:	5e                   	pop    esi
c000dc1d:	5f                   	pop    edi
c000dc1e:	5d                   	pop    ebp
c000dc1f:	c3                   	ret    

c000dc20 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000dc20:	83 ec 40             	sub    esp,0x40
c000dc23:	8d 44 24 09          	lea    eax,[esp+0x9]
c000dc27:	50                   	push   eax
c000dc28:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dc2c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dc30:	e8 3b f9 ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dc35:	58                   	pop    eax
c000dc36:	5a                   	pop    edx
c000dc37:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000dc3b:	8d 44 24 15          	lea    eax,[esp+0x15]
c000dc3f:	50                   	push   eax
c000dc40:	e8 37 ff ff ff       	call   c000db7c <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000dc45:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000dc4a:	83 c4 4c             	add    esp,0x4c
c000dc4d:	c3                   	ret    

c000dc4e <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000dc4e:	55                   	push   ebp
c000dc4f:	57                   	push   edi
c000dc50:	56                   	push   esi
c000dc51:	53                   	push   ebx
c000dc52:	31 db                	xor    ebx,ebx
c000dc54:	83 ec 70             	sub    esp,0x70
c000dc57:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000dc5e:	6a 30                	push   0x30
c000dc60:	6a 00                	push   0x0
c000dc62:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000dc66:	56                   	push   esi
c000dc67:	e8 84 28 ff ff       	call   c00004f0 <memset>
c000dc6c:	83 c4 10             	add    esp,0x10
c000dc6f:	83 ec 0c             	sub    esp,0xc
c000dc72:	57                   	push   edi
c000dc73:	e8 f8 28 ff ff       	call   c0000570 <strlen>
c000dc78:	83 c4 10             	add    esp,0x10
c000dc7b:	39 d8                	cmp    eax,ebx
c000dc7d:	76 16                	jbe    c000dc95 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000dc7f:	83 ec 0c             	sub    esp,0xc
c000dc82:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000dc86:	50                   	push   eax
c000dc87:	e8 a4 2c ff ff       	call   c0000930 <toupper>
c000dc8c:	83 c4 10             	add    esp,0x10
c000dc8f:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000dc92:	43                   	inc    ebx
c000dc93:	eb da                	jmp    c000dc6f <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000dc95:	31 f6                	xor    esi,esi
c000dc97:	52                   	push   edx
c000dc98:	31 ff                	xor    edi,edi
c000dc9a:	6a 18                	push   0x18
c000dc9c:	6a 3f                	push   0x3f
c000dc9e:	8d 44 24 24          	lea    eax,[esp+0x24]
c000dca2:	50                   	push   eax
c000dca3:	e8 48 28 ff ff       	call   c00004f0 <memset>
c000dca8:	83 c4 10             	add    esp,0x10
c000dcab:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c000dcaf:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c000dcb3:	84 c0                	test   al,al
c000dcb5:	0f 84 b0 00 00 00    	je     c000dd6b <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000dcbb:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000dcbf:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000dcc4:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000dcc8:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c000dccd:	8d 6e 01             	lea    ebp,[esi+0x1]
c000dcd0:	83 ec 0c             	sub    esp,0xc
c000dcd3:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000dcd7:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000dcdb:	53                   	push   ebx
c000dcdc:	e8 8f 28 ff ff       	call   c0000570 <strlen>
c000dce1:	83 c4 10             	add    esp,0x10
c000dce4:	85 c0                	test   eax,eax
c000dce6:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dcea:	74 0b                	je     c000dcf7 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000dcec:	50                   	push   eax
c000dced:	6a 01                	push   0x1
c000dcef:	53                   	push   ebx
c000dcf0:	8d 44 24 20          	lea    eax,[esp+0x20]
c000dcf4:	50                   	push   eax
c000dcf5:	eb 0a                	jmp    c000dd01 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000dcf7:	50                   	push   eax
c000dcf8:	6a 00                	push   0x0
c000dcfa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000dcfe:	50                   	push   eax
c000dcff:	6a 00                	push   0x0
c000dd01:	e8 44 fd ff ff       	call   c000da4a <CmGetMatch(char*, char*, bool, bool*)>
c000dd06:	83 c4 10             	add    esp,0x10
c000dd09:	83 f8 ff             	cmp    eax,0xffffffff
c000dd0c:	75 1a                	jne    c000dd28 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000dd0e:	83 ec 0c             	sub    esp,0xc
c000dd11:	68 b6 41 02 c0       	push   0xc00241b6
c000dd16:	e8 cb 22 00 00       	call   c000ffe6 <KePanic(char const*)>
c000dd1b:	83 c4 10             	add    esp,0x10
c000dd1e:	b8 02 00 00 00       	mov    eax,0x2
c000dd23:	e9 bc 00 00 00       	jmp    c000dde4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dd28:	83 ff 18             	cmp    edi,0x18
c000dd2b:	75 1a                	jne    c000dd47 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000dd2d:	83 ec 0c             	sub    esp,0xc
c000dd30:	68 cb 41 02 c0       	push   0xc00241cb
c000dd35:	e8 ac 22 00 00       	call   c000ffe6 <KePanic(char const*)>
c000dd3a:	83 c4 10             	add    esp,0x10
c000dd3d:	b8 01 00 00 00       	mov    eax,0x1
c000dd42:	e9 9d 00 00 00       	jmp    c000dde4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dd47:	47                   	inc    edi
c000dd48:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dd4d:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000dd51:	74 02                	je     c000dd55 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c000dd53:	89 ee                	mov    esi,ebp
c000dd55:	83 ec 0c             	sub    esp,0xc
c000dd58:	53                   	push   ebx
c000dd59:	e8 12 28 ff ff       	call   c0000570 <strlen>
c000dd5e:	83 c4 10             	add    esp,0x10
c000dd61:	85 c0                	test   eax,eax
c000dd63:	74 06                	je     c000dd6b <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000dd65:	46                   	inc    esi
c000dd66:	e9 40 ff ff ff       	jmp    c000dcab <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000dd6b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000dd73:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dd7b:	31 f6                	xor    esi,esi
c000dd7d:	50                   	push   eax
c000dd7e:	31 ff                	xor    edi,edi
c000dd80:	6a 12                	push   0x12
c000dd82:	68 ee 00 00 00       	push   0xee
c000dd87:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000dd8e:	e8 5d 27 ff ff       	call   c00004f0 <memset>
c000dd93:	83 c4 10             	add    esp,0x10
c000dd96:	83 fe 17             	cmp    esi,0x17
c000dd99:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000dd9d:	7e 26                	jle    c000ddc5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c000dd9f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dda3:	50                   	push   eax
c000dda4:	6a 08                	push   0x8
c000dda6:	55                   	push   ebp
c000dda7:	53                   	push   ebx
c000dda8:	e8 2e fd ff ff       	call   c000dadb <CmGetShift(unsigned int*, int*, int, bool*)>
c000ddad:	83 c4 10             	add    esp,0x10
c000ddb0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000ddb5:	74 26                	je     c000dddd <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c000ddb7:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000ddbe:	4e                   	dec    esi
c000ddbf:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000ddc2:	47                   	inc    edi
c000ddc3:	eb 1c                	jmp    c000dde1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000ddc5:	6a 06                	push   0x6
c000ddc7:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c000ddcc:	50                   	push   eax
c000ddcd:	55                   	push   ebp
c000ddce:	53                   	push   ebx
c000ddcf:	e8 d7 fc ff ff       	call   c000daab <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000ddd4:	83 c4 10             	add    esp,0x10
c000ddd7:	84 c0                	test   al,al
c000ddd9:	75 06                	jne    c000dde1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000dddb:	eb c2                	jmp    c000dd9f <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c000dddd:	31 c0                	xor    eax,eax
c000dddf:	eb 03                	jmp    c000dde4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dde1:	46                   	inc    esi
c000dde2:	eb b2                	jmp    c000dd96 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c000dde4:	83 c4 6c             	add    esp,0x6c
c000dde7:	5b                   	pop    ebx
c000dde8:	5e                   	pop    esi
c000dde9:	5f                   	pop    edi
c000ddea:	5d                   	pop    ebp
c000ddeb:	c3                   	ret    

c000ddec <CmCreateString(Reghive_Tag*, int, char const*)>:
c000ddec:	53                   	push   ebx
c000dded:	83 ec 3c             	sub    esp,0x3c
c000ddf0:	6a 2b                	push   0x2b
c000ddf2:	6a 00                	push   0x0
c000ddf4:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000ddf8:	53                   	push   ebx
c000ddf9:	e8 f2 26 ff ff       	call   c00004f0 <memset>
c000ddfe:	58                   	pop    eax
c000ddff:	5a                   	pop    edx
c000de00:	8d 44 24 11          	lea    eax,[esp+0x11]
c000de04:	50                   	push   eax
c000de05:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000de09:	e8 40 fe ff ff       	call   c000dc4e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000de0e:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000de13:	83 c4 0c             	add    esp,0xc
c000de16:	6a 15                	push   0x15
c000de18:	6a 00                	push   0x0
c000de1a:	8d 44 24 27          	lea    eax,[esp+0x27]
c000de1e:	50                   	push   eax
c000de1f:	e8 cc 26 ff ff       	call   c00004f0 <memset>
c000de24:	53                   	push   ebx
c000de25:	6a 00                	push   0x0
c000de27:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000de2b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000de2f:	e8 e6 f9 ff ff       	call   c000d81a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000de34:	83 c4 58             	add    esp,0x58
c000de37:	5b                   	pop    ebx
c000de38:	c3                   	ret    

c000de39 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000de39:	56                   	push   esi
c000de3a:	53                   	push   ebx
c000de3b:	83 ec 48             	sub    esp,0x48
c000de3e:	6a 12                	push   0x12
c000de40:	68 ff 00 00 00       	push   0xff
c000de45:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000de49:	56                   	push   esi
c000de4a:	e8 a1 26 ff ff       	call   c00004f0 <memset>
c000de4f:	5a                   	pop    edx
c000de50:	59                   	pop    ecx
c000de51:	56                   	push   esi
c000de52:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000de56:	e8 f3 fd ff ff       	call   c000dc4e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000de5b:	83 c4 10             	add    esp,0x10
c000de5e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000de62:	85 db                	test   ebx,ebx
c000de64:	74 42                	je     c000dea8 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000de66:	50                   	push   eax
c000de67:	8d 44 24 19          	lea    eax,[esp+0x19]
c000de6b:	50                   	push   eax
c000de6c:	53                   	push   ebx
c000de6d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000de71:	e8 fa f6 ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000de76:	83 c4 0c             	add    esp,0xc
c000de79:	6a 12                	push   0x12
c000de7b:	8d 44 24 21          	lea    eax,[esp+0x21]
c000de7f:	50                   	push   eax
c000de80:	56                   	push   esi
c000de81:	e8 fa 24 ff ff       	call   c0000380 <memcmp>
c000de86:	83 c4 10             	add    esp,0x10
c000de89:	85 c0                	test   eax,eax
c000de8b:	74 1e                	je     c000deab <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000de8d:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000de92:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000de97:	c1 e3 08             	shl    ebx,0x8
c000de9a:	09 d8                	or     eax,ebx
c000de9c:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000dea1:	c1 e3 10             	shl    ebx,0x10
c000dea4:	09 c3                	or     ebx,eax
c000dea6:	eb ba                	jmp    c000de62 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000dea8:	83 cb ff             	or     ebx,0xffffffff
c000deab:	89 d8                	mov    eax,ebx
c000dead:	83 c4 44             	add    esp,0x44
c000deb0:	5b                   	pop    ebx
c000deb1:	5e                   	pop    esi
c000deb2:	c3                   	ret    

c000deb3 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000deb3:	57                   	push   edi
c000deb4:	56                   	push   esi
c000deb5:	53                   	push   ebx
c000deb6:	83 ec 34             	sub    esp,0x34
c000deb9:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000debd:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000dec1:	6a 2b                	push   0x2b
c000dec3:	6a 00                	push   0x0
c000dec5:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000dec9:	53                   	push   ebx
c000deca:	e8 21 26 ff ff       	call   c00004f0 <memset>
c000decf:	58                   	pop    eax
c000ded0:	5a                   	pop    edx
c000ded1:	8d 44 24 11          	lea    eax,[esp+0x11]
c000ded5:	50                   	push   eax
c000ded6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000deda:	e8 6f fd ff ff       	call   c000dc4e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dedf:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000dee3:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000dee7:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000deeb:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000deef:	53                   	push   ebx
c000def0:	6a 00                	push   0x0
c000def2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000def6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000defa:	e8 1b f9 ff ff       	call   c000d81a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000deff:	83 c4 50             	add    esp,0x50
c000df02:	5b                   	pop    ebx
c000df03:	5e                   	pop    esi
c000df04:	5f                   	pop    edi
c000df05:	c3                   	ret    

c000df06 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000df06:	55                   	push   ebp
c000df07:	57                   	push   edi
c000df08:	56                   	push   esi
c000df09:	53                   	push   ebx
c000df0a:	83 ec 40             	sub    esp,0x40
c000df0d:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000df11:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000df15:	6a 2b                	push   0x2b
c000df17:	6a 00                	push   0x0
c000df19:	8d 74 24 11          	lea    esi,[esp+0x11]
c000df1d:	56                   	push   esi
c000df1e:	e8 cd 25 ff ff       	call   c00004f0 <memset>
c000df23:	5f                   	pop    edi
c000df24:	89 ef                	mov    edi,ebp
c000df26:	58                   	pop    eax
c000df27:	8d 44 24 11          	lea    eax,[esp+0x11]
c000df2b:	50                   	push   eax
c000df2c:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000df30:	e8 19 fd ff ff       	call   c000dc4e <CmConvertToInternalFilename(char const*, unsigned char*)>
c000df35:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000df3a:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000df3f:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000df44:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000df49:	83 c4 10             	add    esp,0x10
c000df4c:	85 ed                	test   ebp,ebp
c000df4e:	74 14                	je     c000df64 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000df50:	51                   	push   ecx
c000df51:	51                   	push   ecx
c000df52:	57                   	push   edi
c000df53:	53                   	push   ebx
c000df54:	e8 09 f7 ff ff       	call   c000d662 <CmGetNext(Reghive_Tag*, int)>
c000df59:	83 c4 10             	add    esp,0x10
c000df5c:	85 c0                	test   eax,eax
c000df5e:	74 04                	je     c000df64 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000df60:	89 c7                	mov    edi,eax
c000df62:	eb e8                	jmp    c000df4c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000df64:	56                   	push   esi
c000df65:	6a 00                	push   0x0
c000df67:	57                   	push   edi
c000df68:	53                   	push   ebx
c000df69:	e8 ac f8 ff ff       	call   c000d81a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000df6e:	83 c4 0c             	add    esp,0xc
c000df71:	89 c7                	mov    edi,eax
c000df73:	56                   	push   esi
c000df74:	50                   	push   eax
c000df75:	53                   	push   ebx
c000df76:	e8 f5 f5 ff ff       	call   c000d570 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000df7b:	58                   	pop    eax
c000df7c:	5a                   	pop    edx
c000df7d:	6a 6c                	push   0x6c
c000df7f:	6a 00                	push   0x0
c000df81:	6a 00                	push   0x0
c000df83:	68 dc 41 02 c0       	push   0xc00241dc
c000df88:	57                   	push   edi
c000df89:	53                   	push   ebx
c000df8a:	e8 24 ff ff ff       	call   c000deb3 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000df8f:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000df93:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000df97:	c1 e8 10             	shr    eax,0x10
c000df9a:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000df9e:	83 c4 1c             	add    esp,0x1c
c000dfa1:	56                   	push   esi
c000dfa2:	57                   	push   edi
c000dfa3:	53                   	push   ebx
c000dfa4:	e8 eb f6 ff ff       	call   c000d694 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000dfa9:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000dfae:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000dfb3:	c1 e0 08             	shl    eax,0x8
c000dfb6:	09 c2                	or     edx,eax
c000dfb8:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000dfbd:	83 c4 4c             	add    esp,0x4c
c000dfc0:	c1 e0 10             	shl    eax,0x10
c000dfc3:	5b                   	pop    ebx
c000dfc4:	09 d0                	or     eax,edx
c000dfc6:	5e                   	pop    esi
c000dfc7:	5f                   	pop    edi
c000dfc8:	5d                   	pop    ebp
c000dfc9:	c3                   	ret    

c000dfca <zStrtok(char*, char const*)>:
c000dfca:	55                   	push   ebp
c000dfcb:	57                   	push   edi
c000dfcc:	56                   	push   esi
c000dfcd:	53                   	push   ebx
c000dfce:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dfd2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dfd6:	85 db                	test   ebx,ebx
c000dfd8:	74 2f                	je     c000e009 <zStrtok(char*, char const*)+0x3f>
c000dfda:	85 c0                	test   eax,eax
c000dfdc:	75 09                	jne    c000dfe7 <zStrtok(char*, char const*)+0x1d>
c000dfde:	a1 c4 d0 02 c0       	mov    eax,ds:0xc002d0c4
c000dfe3:	85 c0                	test   eax,eax
c000dfe5:	74 50                	je     c000e037 <zStrtok(char*, char const*)+0x6d>
c000dfe7:	31 c9                	xor    ecx,ecx
c000dfe9:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000dfed:	74 03                	je     c000dff2 <zStrtok(char*, char const*)+0x28>
c000dfef:	41                   	inc    ecx
c000dff0:	eb f7                	jmp    c000dfe9 <zStrtok(char*, char const*)+0x1f>
c000dff2:	31 d2                	xor    edx,edx
c000dff4:	39 ca                	cmp    edx,ecx
c000dff6:	74 15                	je     c000e00d <zStrtok(char*, char const*)+0x43>
c000dff8:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000dffc:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000dfff:	8d 3c 10             	lea    edi,[eax+edx*1]
c000e002:	39 ee                	cmp    esi,ebp
c000e004:	74 13                	je     c000e019 <zStrtok(char*, char const*)+0x4f>
c000e006:	42                   	inc    edx
c000e007:	eb eb                	jmp    c000dff4 <zStrtok(char*, char const*)+0x2a>
c000e009:	31 c0                	xor    eax,eax
c000e00b:	eb 2a                	jmp    c000e037 <zStrtok(char*, char const*)+0x6d>
c000e00d:	c7 05 c4 d0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d0c4,0x0
c000e017:	eb 1e                	jmp    c000e037 <zStrtok(char*, char const*)+0x6d>
c000e019:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000e01c:	39 ce                	cmp    esi,ecx
c000e01e:	75 0a                	jne    c000e02a <zStrtok(char*, char const*)+0x60>
c000e020:	40                   	inc    eax
c000e021:	a3 c4 d0 02 c0       	mov    ds:0xc002d0c4,eax
c000e026:	89 d8                	mov    eax,ebx
c000e028:	eb 0d                	jmp    c000e037 <zStrtok(char*, char const*)+0x6d>
c000e02a:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000e02e:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000e031:	89 15 c4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0c4,edx
c000e037:	5b                   	pop    ebx
c000e038:	5e                   	pop    esi
c000e039:	5f                   	pop    edi
c000e03a:	5d                   	pop    ebp
c000e03b:	c3                   	ret    

c000e03c <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000e03c:	57                   	push   edi
c000e03d:	56                   	push   esi
c000e03e:	53                   	push   ebx
c000e03f:	81 ec 08 01 00 00    	sub    esp,0x108
c000e045:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000e04c:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000e053:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000e057:	53                   	push   ebx
c000e058:	e8 e3 25 ff ff       	call   c0000640 <strcpy>
c000e05d:	59                   	pop    ecx
c000e05e:	5e                   	pop    esi
c000e05f:	68 4c 53 02 c0       	push   0xc002534c
c000e064:	53                   	push   ebx
c000e065:	bb 01 00 00 00       	mov    ebx,0x1
c000e06a:	e8 5b ff ff ff       	call   c000dfca <zStrtok(char*, char const*)>
c000e06f:	83 c4 10             	add    esp,0x10
c000e072:	85 c0                	test   eax,eax
c000e074:	74 3b                	je     c000e0b1 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e076:	52                   	push   edx
c000e077:	50                   	push   eax
c000e078:	6a 01                	push   0x1
c000e07a:	57                   	push   edi
c000e07b:	e8 b9 fd ff ff       	call   c000de39 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000e080:	59                   	pop    ecx
c000e081:	89 c3                	mov    ebx,eax
c000e083:	5e                   	pop    esi
c000e084:	68 4c 53 02 c0       	push   0xc002534c
c000e089:	6a 00                	push   0x0
c000e08b:	e8 3a ff ff ff       	call   c000dfca <zStrtok(char*, char const*)>
c000e090:	83 c4 10             	add    esp,0x10
c000e093:	89 c6                	mov    esi,eax
c000e095:	85 c0                	test   eax,eax
c000e097:	74 18                	je     c000e0b1 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e099:	52                   	push   edx
c000e09a:	52                   	push   edx
c000e09b:	53                   	push   ebx
c000e09c:	57                   	push   edi
c000e09d:	e8 81 f5 ff ff       	call   c000d623 <CmEnterDirectory(Reghive_Tag*, int)>
c000e0a2:	83 c4 10             	add    esp,0x10
c000e0a5:	89 c3                	mov    ebx,eax
c000e0a7:	83 f8 ff             	cmp    eax,0xffffffff
c000e0aa:	74 05                	je     c000e0b1 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e0ac:	50                   	push   eax
c000e0ad:	56                   	push   esi
c000e0ae:	53                   	push   ebx
c000e0af:	eb c9                	jmp    c000e07a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000e0b1:	81 c4 00 01 00 00    	add    esp,0x100
c000e0b7:	89 d8                	mov    eax,ebx
c000e0b9:	5b                   	pop    ebx
c000e0ba:	5e                   	pop    esi
c000e0bb:	5f                   	pop    edi
c000e0bc:	c3                   	ret    

c000e0bd <CmDisplayTree(Reghive_Tag*, int, int)>:
c000e0bd:	55                   	push   ebp
c000e0be:	57                   	push   edi
c000e0bf:	56                   	push   esi
c000e0c0:	53                   	push   ebx
c000e0c1:	83 ec 5c             	sub    esp,0x5c
c000e0c4:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000e0c8:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000e0cc:	85 db                	test   ebx,ebx
c000e0ce:	0f 8e 84 00 00 00    	jle    c000e158 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000e0d4:	31 ed                	xor    ebp,ebp
c000e0d6:	57                   	push   edi
c000e0d7:	6a 32                	push   0x32
c000e0d9:	6a 00                	push   0x0
c000e0db:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000e0df:	57                   	push   edi
c000e0e0:	e8 0b 24 ff ff       	call   c00004f0 <memset>
c000e0e5:	83 c4 0c             	add    esp,0xc
c000e0e8:	57                   	push   edi
c000e0e9:	53                   	push   ebx
c000e0ea:	56                   	push   esi
c000e0eb:	e8 30 fb ff ff       	call   c000dc20 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000e0f0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e0f4:	83 c4 10             	add    esp,0x10
c000e0f7:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000e0fb:	7d 13                	jge    c000e110 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000e0fd:	83 ec 0c             	sub    esp,0xc
c000e100:	45                   	inc    ebp
c000e101:	68 c3 5b 02 c0       	push   0xc0025bc3
c000e106:	e8 71 8e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000e10b:	83 c4 10             	add    esp,0x10
c000e10e:	eb e7                	jmp    c000e0f7 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000e110:	51                   	push   ecx
c000e111:	57                   	push   edi
c000e112:	53                   	push   ebx
c000e113:	68 e2 41 02 c0       	push   0xc00241e2
c000e118:	e8 5f 8e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000e125:	75 1e                	jne    c000e145 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000e127:	52                   	push   edx
c000e128:	52                   	push   edx
c000e129:	53                   	push   ebx
c000e12a:	56                   	push   esi
c000e12b:	e8 f3 f4 ff ff       	call   c000d623 <CmEnterDirectory(Reghive_Tag*, int)>
c000e130:	83 c4 0c             	add    esp,0xc
c000e133:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000e137:	8d 51 04             	lea    edx,[ecx+0x4]
c000e13a:	52                   	push   edx
c000e13b:	50                   	push   eax
c000e13c:	56                   	push   esi
c000e13d:	e8 7b ff ff ff       	call   c000e0bd <CmDisplayTree(Reghive_Tag*, int, int)>
c000e142:	83 c4 10             	add    esp,0x10
c000e145:	50                   	push   eax
c000e146:	50                   	push   eax
c000e147:	53                   	push   ebx
c000e148:	56                   	push   esi
c000e149:	e8 14 f5 ff ff       	call   c000d662 <CmGetNext(Reghive_Tag*, int)>
c000e14e:	83 c4 10             	add    esp,0x10
c000e151:	89 c3                	mov    ebx,eax
c000e153:	e9 74 ff ff ff       	jmp    c000e0cc <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000e158:	83 c4 5c             	add    esp,0x5c
c000e15b:	5b                   	pop    ebx
c000e15c:	5e                   	pop    esi
c000e15d:	5f                   	pop    edi
c000e15e:	5d                   	pop    ebp
c000e15f:	c3                   	ret    

c000e160 <CmSplitFinalSlashInPlace(char*)>:
c000e160:	53                   	push   ebx
c000e161:	83 ec 14             	sub    esp,0x14
c000e164:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e168:	53                   	push   ebx
c000e169:	e8 02 24 ff ff       	call   c0000570 <strlen>
c000e16e:	83 c4 10             	add    esp,0x10
c000e171:	48                   	dec    eax
c000e172:	85 c0                	test   eax,eax
c000e174:	74 15                	je     c000e18b <CmSplitFinalSlashInPlace(char*)+0x2b>
c000e176:	8d 14 03             	lea    edx,[ebx+eax*1]
c000e179:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000e17d:	75 09                	jne    c000e188 <CmSplitFinalSlashInPlace(char*)+0x28>
c000e17f:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000e182:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000e186:	eb 05                	jmp    c000e18d <CmSplitFinalSlashInPlace(char*)+0x2d>
c000e188:	48                   	dec    eax
c000e189:	eb e7                	jmp    c000e172 <CmSplitFinalSlashInPlace(char*)+0x12>
c000e18b:	31 c0                	xor    eax,eax
c000e18d:	83 c4 08             	add    esp,0x8
c000e190:	5b                   	pop    ebx
c000e191:	c3                   	ret    
c000e192:	66 90                	xchg   ax,ax

c000e194 <Krnl::handlePowerButton()>:
c000e194:	83 ec 0c             	sub    esp,0xc
c000e197:	e8 8e 28 00 00       	call   c0010a2a <KeHandlePowerButton()>
c000e19c:	90                   	nop
c000e19d:	83 c4 0c             	add    esp,0xc
c000e1a0:	c3                   	ret    
c000e1a1:	8d 76 00             	lea    esi,[esi+0x0]

c000e1a4 <Krnl::handleSleepButton()>:
c000e1a4:	83 ec 0c             	sub    esp,0xc
c000e1a7:	e8 90 28 00 00       	call   c0010a3c <KeHandleSleepButton()>
c000e1ac:	90                   	nop
c000e1ad:	83 c4 0c             	add    esp,0xc
c000e1b0:	c3                   	ret    
c000e1b1:	90                   	nop

c000e1b2 <Computer::close(int, int, void*)>:
c000e1b2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e1b7:	c3                   	ret    

c000e1b8 <Computer::Computer()>:
c000e1b8:	83 ec 0c             	sub    esp,0xc
c000e1bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1bf:	83 ec 08             	sub    esp,0x8
c000e1c2:	68 ec 41 02 c0       	push   0xc00241ec
c000e1c7:	50                   	push   eax
c000e1c8:	e8 e9 b9 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000e1cd:	83 c4 10             	add    esp,0x10
c000e1d0:	ba 44 42 02 c0       	mov    edx,0xc0024244
c000e1d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1d9:	89 10                	mov    DWORD PTR [eax],edx
c000e1db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1df:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e1e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1ed:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e1f7:	90                   	nop
c000e1f8:	83 c4 0c             	add    esp,0xc
c000e1fb:	c3                   	ret    

c000e1fc <Computer::open(int, int, void*)>:
c000e1fc:	56                   	push   esi
c000e1fd:	53                   	push   ebx
c000e1fe:	83 ec 04             	sub    esp,0x4
c000e201:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e205:	39 1d c8 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c8,ebx
c000e20b:	74 10                	je     c000e21d <Computer::open(int, int, void*)+0x21>
c000e20d:	83 ec 0c             	sub    esp,0xc
c000e210:	68 10 42 02 c0       	push   0xc0024210
c000e215:	e8 cc 1d 00 00       	call   c000ffe6 <KePanic(char const*)>
c000e21a:	83 c4 10             	add    esp,0x10
c000e21d:	83 ec 0c             	sub    esp,0xc
c000e220:	68 78 11 00 00       	push   0x1178
c000e225:	e8 65 19 00 00       	call   c000fb8f <malloc>
c000e22a:	89 04 24             	mov    DWORD PTR [esp],eax
c000e22d:	89 c6                	mov    esi,eax
c000e22f:	e8 d6 c8 00 00       	call   c001ab0a <CPU::CPU()>
c000e234:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e238:	89 b3 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],esi
c000e23e:	50                   	push   eax
c000e23f:	6a 00                	push   0x0
c000e241:	6a 00                	push   0x0
c000e243:	56                   	push   esi
c000e244:	e8 a3 ca 00 00       	call   c001acec <CPU::open(int, int, void*)>
c000e249:	83 c4 14             	add    esp,0x14
c000e24c:	68 f5 41 02 c0       	push   0xc00241f5
c000e251:	e8 d3 f0 ff ff       	call   c000d329 <KeSetBootMessage(char const*)>
c000e256:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000e25d:	e8 2d 19 00 00       	call   c000fb8f <malloc>
c000e262:	89 04 24             	mov    DWORD PTR [esp],eax
c000e265:	89 c6                	mov    esi,eax
c000e267:	e8 04 e6 ff ff       	call   c000c870 <ACPI::ACPI()>
c000e26c:	89 b3 64 01 00 00    	mov    DWORD PTR [ebx+0x164],esi
c000e272:	5a                   	pop    edx
c000e273:	59                   	pop    ecx
c000e274:	56                   	push   esi
c000e275:	53                   	push   ebx
c000e276:	e8 d9 b7 ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000e27b:	5e                   	pop    esi
c000e27c:	58                   	pop    eax
c000e27d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e283:	50                   	push   eax
c000e284:	53                   	push   ebx
c000e285:	e8 ca b7 ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000e28a:	83 c4 14             	add    esp,0x14
c000e28d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e292:	5b                   	pop    ebx
c000e293:	5e                   	pop    esi
c000e294:	c3                   	ret    

c000e295 <KeCalculateCRC32(unsigned char*, int)>:
c000e295:	53                   	push   ebx
c000e296:	83 c8 ff             	or     eax,0xffffffff
c000e299:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e29d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e2a1:	01 cb                	add    ebx,ecx
c000e2a3:	39 d9                	cmp    ecx,ebx
c000e2a5:	74 15                	je     c000e2bc <KeCalculateCRC32(unsigned char*, int)+0x27>
c000e2a7:	41                   	inc    ecx
c000e2a8:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000e2ab:	31 c2                	xor    edx,eax
c000e2ad:	c1 e8 08             	shr    eax,0x8
c000e2b0:	0f b6 d2             	movzx  edx,dl
c000e2b3:	33 04 95 e0 68 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffd9720]
c000e2ba:	eb e7                	jmp    c000e2a3 <KeCalculateCRC32(unsigned char*, int)+0xe>
c000e2bc:	f7 d0                	not    eax
c000e2be:	5b                   	pop    ebx
c000e2bf:	c3                   	ret    

c000e2c0 <EnvVarContainer::getEnv(char const*)>:
c000e2c0:	57                   	push   edi
c000e2c1:	56                   	push   esi
c000e2c2:	53                   	push   ebx
c000e2c3:	31 db                	xor    ebx,ebx
c000e2c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e2c9:	39 1e                	cmp    DWORD PTR [esi],ebx
c000e2cb:	7e 2b                	jle    c000e2f8 <EnvVarContainer::getEnv(char const*)+0x38>
c000e2cd:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000e2d4:	50                   	push   eax
c000e2d5:	50                   	push   eax
c000e2d6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e2d9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000e2dc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e2e0:	e8 6b 24 ff ff       	call   c0000750 <strcmp>
c000e2e5:	83 c4 10             	add    esp,0x10
c000e2e8:	85 c0                	test   eax,eax
c000e2ea:	75 09                	jne    c000e2f5 <EnvVarContainer::getEnv(char const*)+0x35>
c000e2ec:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e2ef:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000e2f3:	eb 05                	jmp    c000e2fa <EnvVarContainer::getEnv(char const*)+0x3a>
c000e2f5:	43                   	inc    ebx
c000e2f6:	eb d1                	jmp    c000e2c9 <EnvVarContainer::getEnv(char const*)+0x9>
c000e2f8:	31 c0                	xor    eax,eax
c000e2fa:	5b                   	pop    ebx
c000e2fb:	5e                   	pop    esi
c000e2fc:	5f                   	pop    edi
c000e2fd:	c3                   	ret    

c000e2fe <EnvVarContainer::setEnv(char const*, char const*)>:
c000e2fe:	55                   	push   ebp
c000e2ff:	57                   	push   edi
c000e300:	56                   	push   esi
c000e301:	53                   	push   ebx
c000e302:	83 ec 28             	sub    esp,0x28
c000e305:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e309:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e30d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e311:	56                   	push   esi
c000e312:	e8 59 22 ff ff       	call   c0000570 <strlen>
c000e317:	40                   	inc    eax
c000e318:	89 04 24             	mov    DWORD PTR [esp],eax
c000e31b:	e8 6f 18 00 00       	call   c000fb8f <malloc>
c000e320:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e323:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e327:	e8 44 22 ff ff       	call   c0000570 <strlen>
c000e32c:	40                   	inc    eax
c000e32d:	89 04 24             	mov    DWORD PTR [esp],eax
c000e330:	e8 5a 18 00 00       	call   c000fb8f <malloc>
c000e335:	89 34 24             	mov    DWORD PTR [esp],esi
c000e338:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e33c:	e8 2f 22 ff ff       	call   c0000570 <strlen>
c000e341:	83 c4 0c             	add    esp,0xc
c000e344:	40                   	inc    eax
c000e345:	50                   	push   eax
c000e346:	6a 00                	push   0x0
c000e348:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e34c:	e8 9f 21 ff ff       	call   c00004f0 <memset>
c000e351:	89 34 24             	mov    DWORD PTR [esp],esi
c000e354:	e8 17 22 ff ff       	call   c0000570 <strlen>
c000e359:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e35d:	8d 48 01             	lea    ecx,[eax+0x1]
c000e360:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e362:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e365:	89 de                	mov    esi,ebx
c000e367:	e8 04 22 ff ff       	call   c0000570 <strlen>
c000e36c:	83 c4 0c             	add    esp,0xc
c000e36f:	40                   	inc    eax
c000e370:	50                   	push   eax
c000e371:	6a 00                	push   0x0
c000e373:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e377:	e8 74 21 ff ff       	call   c00004f0 <memset>
c000e37c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e37f:	e8 ec 21 ff ff       	call   c0000570 <strlen>
c000e384:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e388:	8d 48 01             	lea    ecx,[eax+0x1]
c000e38b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e38d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e390:	40                   	inc    eax
c000e391:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e394:	c1 e0 03             	shl    eax,0x3
c000e397:	5a                   	pop    edx
c000e398:	59                   	pop    ecx
c000e399:	50                   	push   eax
c000e39a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000e39d:	e8 d9 17 00 00       	call   c000fb7b <realloc>
c000e3a2:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e3a6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e3a9:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e3ac:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e3b0:	b9 08 00 00 00       	mov    ecx,0x8
c000e3b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e3b7:	83 c4 2c             	add    esp,0x2c
c000e3ba:	5b                   	pop    ebx
c000e3bb:	5e                   	pop    esi
c000e3bc:	5f                   	pop    edi
c000e3bd:	5d                   	pop    ebp
c000e3be:	c3                   	ret    
c000e3bf:	90                   	nop

c000e3c0 <EnvVarContainer::deleteEnv(char const*)>:
c000e3c0:	c3                   	ret    
c000e3c1:	90                   	nop

c000e3c2 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000e3c2:	55                   	push   ebp
c000e3c3:	57                   	push   edi
c000e3c4:	56                   	push   esi
c000e3c5:	53                   	push   ebx
c000e3c6:	81 ec 38 01 00 00    	sub    esp,0x138
c000e3cc:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000e3d3:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000e3da:	68 14 01 00 00       	push   0x114
c000e3df:	e8 ab 17 00 00       	call   c000fb8f <malloc>
c000e3e4:	83 c4 0c             	add    esp,0xc
c000e3e7:	89 c3                	mov    ebx,eax
c000e3e9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e3ec:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e3f3:	50                   	push   eax
c000e3f4:	e8 91 9d ff ff       	call   c000818a <File::File(char const*, Process*)>
c000e3f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e3fc:	e8 6b a0 ff ff       	call   c000846c <File::exists()>
c000e401:	83 c4 10             	add    esp,0x10
c000e404:	84 c0                	test   al,al
c000e406:	75 31                	jne    c000e439 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000e408:	50                   	push   eax
c000e409:	50                   	push   eax
c000e40a:	6a 12                	push   0x12
c000e40c:	53                   	push   ebx
c000e40d:	e8 96 9d ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000e412:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e414:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000e417:	89 34 24             	mov    DWORD PTR [esp],esi
c000e41a:	e8 51 21 ff ff       	call   c0000570 <strlen>
c000e41f:	5a                   	pop    edx
c000e420:	31 d2                	xor    edx,edx
c000e422:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000e426:	51                   	push   ecx
c000e427:	56                   	push   esi
c000e428:	52                   	push   edx
c000e429:	50                   	push   eax
c000e42a:	53                   	push   ebx
c000e42b:	ff d7                	call   edi
c000e42d:	83 c4 14             	add    esp,0x14
c000e430:	53                   	push   ebx
c000e431:	e8 d0 9d ff ff       	call   c0008206 <File::close()>
c000e436:	83 c4 10             	add    esp,0x10
c000e439:	56                   	push   esi
c000e43a:	31 f6                	xor    esi,esi
c000e43c:	68 00 01 00 00       	push   0x100
c000e441:	6a 00                	push   0x0
c000e443:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e447:	50                   	push   eax
c000e448:	e8 a3 20 ff ff       	call   c00004f0 <memset>
c000e44d:	5f                   	pop    edi
c000e44e:	58                   	pop    eax
c000e44f:	6a 01                	push   0x1
c000e451:	53                   	push   ebx
c000e452:	e8 51 9d ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000e457:	83 c4 10             	add    esp,0x10
c000e45a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e462:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e46a:	83 ec 0c             	sub    esp,0xc
c000e46d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e46f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000e473:	51                   	push   ecx
c000e474:	8d 54 24 23          	lea    edx,[esp+0x23]
c000e478:	52                   	push   edx
c000e479:	6a 00                	push   0x0
c000e47b:	6a 01                	push   0x1
c000e47d:	53                   	push   ebx
c000e47e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e481:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000e486:	83 c4 20             	add    esp,0x20
c000e489:	89 c2                	mov    edx,eax
c000e48b:	85 c0                	test   eax,eax
c000e48d:	0f 84 36 01 00 00    	je     c000e5c9 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000e493:	83 f8 0d             	cmp    eax,0xd
c000e496:	0f 84 22 01 00 00    	je     c000e5be <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e49c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e4a1:	0f 84 f0 00 00 00    	je     c000e597 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000e4a7:	83 f8 0a             	cmp    eax,0xa
c000e4aa:	74 13                	je     c000e4bf <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e4ac:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e4b1:	74 0c                	je     c000e4bf <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e4b3:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e4b9:	0f 8e f6 00 00 00    	jle    c000e5b5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000e4bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e4c3:	83 ec 0c             	sub    esp,0xc
c000e4c6:	8d 78 01             	lea    edi,[eax+0x1]
c000e4c9:	57                   	push   edi
c000e4ca:	e8 c0 16 00 00       	call   c000fb8f <malloc>
c000e4cf:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000e4d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e4d7:	8d 56 04             	lea    edx,[esi+0x4]
c000e4da:	89 14 24             	mov    DWORD PTR [esp],edx
c000e4dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e4e1:	e8 a9 16 00 00       	call   c000fb8f <malloc>
c000e4e6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e4ea:	83 c4 0c             	add    esp,0xc
c000e4ed:	57                   	push   edi
c000e4ee:	6a 00                	push   0x0
c000e4f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e4f4:	e8 f7 1f ff ff       	call   c00004f0 <memset>
c000e4f9:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e4fd:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000e501:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e505:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e507:	83 c4 0c             	add    esp,0xc
c000e50a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e50e:	52                   	push   edx
c000e50f:	6a 00                	push   0x0
c000e511:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e515:	e8 d6 1f ff ff       	call   c00004f0 <memset>
c000e51a:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e51e:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000e522:	89 34 24             	mov    DWORD PTR [esp],esi
c000e525:	e8 46 20 ff ff       	call   c0000570 <strlen>
c000e52a:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000e52e:	89 c1                	mov    ecx,eax
c000e530:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e532:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e535:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000e538:	40                   	inc    eax
c000e539:	83 c4 10             	add    esp,0x10
c000e53c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e53f:	85 d2                	test   edx,edx
c000e541:	75 0c                	jne    c000e54f <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000e543:	83 ec 0c             	sub    esp,0xc
c000e546:	6a 08                	push   0x8
c000e548:	e8 42 16 00 00       	call   c000fb8f <malloc>
c000e54d:	eb 0c                	jmp    c000e55b <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000e54f:	c1 e0 03             	shl    eax,0x3
c000e552:	51                   	push   ecx
c000e553:	51                   	push   ecx
c000e554:	50                   	push   eax
c000e555:	52                   	push   edx
c000e556:	e8 20 16 00 00       	call   c000fb7b <realloc>
c000e55b:	83 c4 10             	add    esp,0x10
c000e55e:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e561:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e564:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000e567:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e56b:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e56f:	b9 08 00 00 00       	mov    ecx,0x8
c000e574:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e576:	31 f6                	xor    esi,esi
c000e578:	50                   	push   eax
c000e579:	68 00 01 00 00       	push   0x100
c000e57e:	6a 00                	push   0x0
c000e580:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e584:	50                   	push   eax
c000e585:	e8 66 1f ff ff       	call   c00004f0 <memset>
c000e58a:	83 c4 10             	add    esp,0x10
c000e58d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e595:	eb 27                	jmp    c000e5be <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e597:	83 f8 3d             	cmp    eax,0x3d
c000e59a:	74 1e                	je     c000e5ba <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000e59c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e5a2:	7f 07                	jg     c000e5ab <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000e5a4:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c000e5a8:	46                   	inc    esi
c000e5a9:	eb 13                	jmp    c000e5be <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e5ab:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000e5b3:	eb 09                	jmp    c000e5be <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e5b5:	83 f8 3d             	cmp    eax,0x3d
c000e5b8:	75 ea                	jne    c000e5a4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000e5ba:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000e5be:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e5c3:	0f 85 99 fe ff ff    	jne    c000e462 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000e5c9:	83 ec 0c             	sub    esp,0xc
c000e5cc:	53                   	push   ebx
c000e5cd:	e8 34 9c ff ff       	call   c0008206 <File::close()>
c000e5d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e5d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e5d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e5da:	81 c4 3c 01 00 00    	add    esp,0x13c
c000e5e0:	5b                   	pop    ebx
c000e5e1:	5e                   	pop    esi
c000e5e2:	5f                   	pop    edi
c000e5e3:	5d                   	pop    ebp
c000e5e4:	c3                   	ret    
c000e5e5:	90                   	nop

c000e5e6 <EnvVarContainer::__loadSystem()>:
c000e5e6:	83 ec 10             	sub    esp,0x10
c000e5e9:	68 e0 6c 02 c0       	push   0xc0026ce0
c000e5ee:	68 68 42 02 c0       	push   0xc0024268
c000e5f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5f7:	e8 c6 fd ff ff       	call   c000e3c2 <EnvVarContainer::loadFrom(char const*, char const*)>
c000e5fc:	83 c4 1c             	add    esp,0x1c
c000e5ff:	c3                   	ret    

c000e600 <EnvVarContainer::__loadUser()>:
c000e600:	c3                   	ret    
c000e601:	90                   	nop

c000e602 <EnvVarContainer::EnvVarContainer(Process*)>:
c000e602:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e606:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e60c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e610:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e614:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e617:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e61b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e622:	90                   	nop
c000e623:	c3                   	ret    

c000e624 <EnvVarContainer::~EnvVarContainer()>:
c000e624:	83 ec 0c             	sub    esp,0xc
c000e627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e62b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e62e:	85 c0                	test   eax,eax
c000e630:	74 1d                	je     c000e64f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e636:	8b 00                	mov    eax,DWORD PTR [eax]
c000e638:	85 c0                	test   eax,eax
c000e63a:	74 13                	je     c000e64f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e63c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e640:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e643:	83 ec 0c             	sub    esp,0xc
c000e646:	50                   	push   eax
c000e647:	e8 53 15 00 00       	call   c000fb9f <free>
c000e64c:	83 c4 10             	add    esp,0x10
c000e64f:	90                   	nop
c000e650:	83 c4 0c             	add    esp,0xc
c000e653:	c3                   	ret    

c000e654 <KeGetEnv(Process*, char const*)>:
c000e654:	53                   	push   ebx
c000e655:	83 ec 08             	sub    esp,0x8
c000e658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e65c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e660:	39 05 58 fa 02 c0    	cmp    DWORD PTR ds:0xc002fa58,eax
c000e666:	74 04                	je     c000e66c <KeGetEnv(Process*, char const*)+0x18>
c000e668:	85 c0                	test   eax,eax
c000e66a:	75 0b                	jne    c000e677 <KeGetEnv(Process*, char const*)+0x23>
c000e66c:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c000e671:	85 c0                	test   eax,eax
c000e673:	75 19                	jne    c000e68e <KeGetEnv(Process*, char const*)+0x3a>
c000e675:	eb 27                	jmp    c000e69e <KeGetEnv(Process*, char const*)+0x4a>
c000e677:	52                   	push   edx
c000e678:	52                   	push   edx
c000e679:	53                   	push   ebx
c000e67a:	ff b0 ba 07 00 00    	push   DWORD PTR [eax+0x7ba]
c000e680:	e8 3b fc ff ff       	call   c000e2c0 <EnvVarContainer::getEnv(char const*)>
c000e685:	83 c4 10             	add    esp,0x10
c000e688:	85 c0                	test   eax,eax
c000e68a:	75 28                	jne    c000e6b4 <KeGetEnv(Process*, char const*)+0x60>
c000e68c:	eb de                	jmp    c000e66c <KeGetEnv(Process*, char const*)+0x18>
c000e68e:	52                   	push   edx
c000e68f:	52                   	push   edx
c000e690:	53                   	push   ebx
c000e691:	50                   	push   eax
c000e692:	e8 29 fc ff ff       	call   c000e2c0 <EnvVarContainer::getEnv(char const*)>
c000e697:	83 c4 10             	add    esp,0x10
c000e69a:	85 c0                	test   eax,eax
c000e69c:	75 16                	jne    c000e6b4 <KeGetEnv(Process*, char const*)+0x60>
c000e69e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000e6a2:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c000e6a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6ab:	83 c4 08             	add    esp,0x8
c000e6ae:	5b                   	pop    ebx
c000e6af:	e9 0c fc ff ff       	jmp    c000e2c0 <EnvVarContainer::getEnv(char const*)>
c000e6b4:	83 c4 08             	add    esp,0x8
c000e6b7:	5b                   	pop    ebx
c000e6b8:	c3                   	ret    

c000e6b9 <KeSetEnvSystem(char const*, char const*)>:
c000e6b9:	83 ec 10             	sub    esp,0x10
c000e6bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6c4:	ff 35 d4 d0 02 c0    	push   DWORD PTR ds:0xc002d0d4
c000e6ca:	e8 2f fc ff ff       	call   c000e2fe <EnvVarContainer::setEnv(char const*, char const*)>
c000e6cf:	83 c4 1c             	add    esp,0x1c
c000e6d2:	c3                   	ret    

c000e6d3 <KeSetEnvUser(char const*, char const*)>:
c000e6d3:	a1 d0 d0 02 c0       	mov    eax,ds:0xc002d0d0
c000e6d8:	85 c0                	test   eax,eax
c000e6da:	74 15                	je     c000e6f1 <KeSetEnvUser(char const*, char const*)+0x1e>
c000e6dc:	83 ec 10             	sub    esp,0x10
c000e6df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6e7:	50                   	push   eax
c000e6e8:	e8 11 fc ff ff       	call   c000e2fe <EnvVarContainer::setEnv(char const*, char const*)>
c000e6ed:	83 c4 1c             	add    esp,0x1c
c000e6f0:	c3                   	ret    
c000e6f1:	c3                   	ret    

c000e6f2 <KeSetEnvProcess(Process*, char const*, char const*)>:
c000e6f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6f6:	8b 80 ba 07 00 00    	mov    eax,DWORD PTR [eax+0x7ba]
c000e6fc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e700:	e9 f9 fb ff ff       	jmp    c000e2fe <EnvVarContainer::setEnv(char const*, char const*)>

c000e705 <KeDeleteEnvSystem(char const*)>:
c000e705:	c3                   	ret    

c000e706 <KeDeleteEnvUser(char const*)>:
c000e706:	c3                   	ret    

c000e707 <KeDeleteEnvProcess(Process*, char const*)>:
c000e707:	c3                   	ret    

c000e708 <KeNewProcessEnv(Process*)>:
c000e708:	83 ec 28             	sub    esp,0x28
c000e70b:	6a 0c                	push   0xc
c000e70d:	e8 7d 14 00 00       	call   c000fb8f <malloc>
c000e712:	5a                   	pop    edx
c000e713:	59                   	pop    ecx
c000e714:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e718:	50                   	push   eax
c000e719:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e71d:	e8 e0 fe ff ff       	call   c000e602 <EnvVarContainer::EnvVarContainer(Process*)>
c000e722:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e726:	83 c4 2c             	add    esp,0x2c
c000e729:	c3                   	ret    

c000e72a <KeCopyProcessEnv(Process*, Process*)>:
c000e72a:	57                   	push   edi
c000e72b:	56                   	push   esi
c000e72c:	53                   	push   ebx
c000e72d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e731:	83 ec 0c             	sub    esp,0xc
c000e734:	8b b8 ba 07 00 00    	mov    edi,DWORD PTR [eax+0x7ba]
c000e73a:	6a 0c                	push   0xc
c000e73c:	e8 4e 14 00 00       	call   c000fb8f <malloc>
c000e741:	89 c3                	mov    ebx,eax
c000e743:	58                   	pop    eax
c000e744:	5a                   	pop    edx
c000e745:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e749:	53                   	push   ebx
c000e74a:	e8 b3 fe ff ff       	call   c000e602 <EnvVarContainer::EnvVarContainer(Process*)>
c000e74f:	8b 07                	mov    eax,DWORD PTR [edi]
c000e751:	89 03                	mov    DWORD PTR [ebx],eax
c000e753:	c1 e0 03             	shl    eax,0x3
c000e756:	89 04 24             	mov    DWORD PTR [esp],eax
c000e759:	e8 31 14 00 00       	call   c000fb8f <malloc>
c000e75e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e761:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e763:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000e766:	c1 e1 03             	shl    ecx,0x3
c000e769:	89 c7                	mov    edi,eax
c000e76b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e76d:	83 c4 10             	add    esp,0x10
c000e770:	89 d8                	mov    eax,ebx
c000e772:	5b                   	pop    ebx
c000e773:	5e                   	pop    esi
c000e774:	5f                   	pop    edi
c000e775:	c3                   	ret    

c000e776 <KeLoadSystemEnv()>:
c000e776:	53                   	push   ebx
c000e777:	83 ec 14             	sub    esp,0x14
c000e77a:	6a 0c                	push   0xc
c000e77c:	e8 0e 14 00 00       	call   c000fb8f <malloc>
c000e781:	89 c3                	mov    ebx,eax
c000e783:	58                   	pop    eax
c000e784:	5a                   	pop    edx
c000e785:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c000e78b:	53                   	push   ebx
c000e78c:	e8 71 fe ff ff       	call   c000e602 <EnvVarContainer::EnvVarContainer(Process*)>
c000e791:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e794:	89 1d d4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0d4,ebx
c000e79a:	e8 47 fe ff ff       	call   c000e5e6 <EnvVarContainer::__loadSystem()>
c000e79f:	83 c4 18             	add    esp,0x18
c000e7a2:	5b                   	pop    ebx
c000e7a3:	c3                   	ret    

c000e7a4 <KeLoadUserEnv()>:
c000e7a4:	53                   	push   ebx
c000e7a5:	83 ec 14             	sub    esp,0x14
c000e7a8:	6a 0c                	push   0xc
c000e7aa:	e8 e0 13 00 00       	call   c000fb8f <malloc>
c000e7af:	89 c3                	mov    ebx,eax
c000e7b1:	58                   	pop    eax
c000e7b2:	5a                   	pop    edx
c000e7b3:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c000e7b9:	53                   	push   ebx
c000e7ba:	e8 43 fe ff ff       	call   c000e602 <EnvVarContainer::EnvVarContainer(Process*)>
c000e7bf:	89 1d d0 d0 02 c0    	mov    DWORD PTR ds:0xc002d0d0,ebx
c000e7c5:	83 c4 18             	add    esp,0x18
c000e7c8:	5b                   	pop    ebx
c000e7c9:	c3                   	ret    

c000e7ca <KeFlushEnv()>:
c000e7ca:	c3                   	ret    

c000e7cb <KeGetProcessTotalEnvCount(Process*)>:
c000e7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e7cf:	8b 15 d0 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0d0
c000e7d5:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e7db:	a1 d4 d0 02 c0       	mov    eax,ds:0xc002d0d4
c000e7e0:	8b 00                	mov    eax,DWORD PTR [eax]
c000e7e2:	03 01                	add    eax,DWORD PTR [ecx]
c000e7e4:	85 d2                	test   edx,edx
c000e7e6:	74 02                	je     c000e7ea <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000e7e8:	03 02                	add    eax,DWORD PTR [edx]
c000e7ea:	c3                   	ret    

c000e7eb <KeGetProcessEnvPair(Process*, int)>:
c000e7eb:	57                   	push   edi
c000e7ec:	56                   	push   esi
c000e7ed:	8b 35 d0 d0 02 c0    	mov    esi,DWORD PTR ds:0xc002d0d0
c000e7f3:	53                   	push   ebx
c000e7f4:	85 f6                	test   esi,esi
c000e7f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e7fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e7fe:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e804:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e808:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e80a:	75 16                	jne    c000e822 <KeGetProcessEnvPair(Process*, int)+0x37>
c000e80c:	39 c2                	cmp    edx,eax
c000e80e:	7c 16                	jl     c000e826 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e810:	8b 0d d4 d0 02 c0    	mov    ecx,DWORD PTR ds:0xc002d0d4
c000e816:	8b 31                	mov    esi,DWORD PTR [ecx]
c000e818:	01 c6                	add    esi,eax
c000e81a:	39 d6                	cmp    esi,edx
c000e81c:	7e 3c                	jle    c000e85a <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e81e:	29 c2                	sub    edx,eax
c000e820:	eb 04                	jmp    c000e826 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e822:	39 c2                	cmp    edx,eax
c000e824:	7d 05                	jge    c000e82b <KeGetProcessEnvPair(Process*, int)+0x40>
c000e826:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000e829:	eb 20                	jmp    c000e84b <KeGetProcessEnvPair(Process*, int)+0x60>
c000e82b:	8b 3e                	mov    edi,DWORD PTR [esi]
c000e82d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000e830:	39 d1                	cmp    ecx,edx
c000e832:	7e 04                	jle    c000e838 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000e834:	29 c2                	sub    edx,eax
c000e836:	eb 10                	jmp    c000e848 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000e838:	8b 35 d4 d0 02 c0    	mov    esi,DWORD PTR ds:0xc002d0d4
c000e83e:	03 0e                	add    ecx,DWORD PTR [esi]
c000e840:	39 d1                	cmp    ecx,edx
c000e842:	7e 16                	jle    c000e85a <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e844:	29 c2                	sub    edx,eax
c000e846:	29 fa                	sub    edx,edi
c000e848:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e84b:	8d 14 d0             	lea    edx,[eax+edx*8]
c000e84e:	8b 02                	mov    eax,DWORD PTR [edx]
c000e850:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e853:	89 03                	mov    DWORD PTR [ebx],eax
c000e855:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000e858:	eb 1d                	jmp    c000e877 <KeGetProcessEnvPair(Process*, int)+0x8c>
c000e85a:	83 ec 0c             	sub    esp,0xc
c000e85d:	68 8a 42 02 c0       	push   0xc002428a
c000e862:	e8 7f 17 00 00       	call   c000ffe6 <KePanic(char const*)>
c000e867:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000e86d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000e874:	83 c4 10             	add    esp,0x10
c000e877:	89 d8                	mov    eax,ebx
c000e879:	5b                   	pop    ebx
c000e87a:	5e                   	pop    esi
c000e87b:	5f                   	pop    edi
c000e87c:	c2 04 00             	ret    0x4
c000e87f:	90                   	nop

c000e880 <KeSetupInterrupts()>:
c000e880:	83 ec 10             	sub    esp,0x10
c000e883:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e88b:	90                   	nop
c000e88c:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000e894:	7f 5a                	jg     c000e8f0 <KeSetupInterrupts()+0x70>
c000e896:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e89e:	66 90                	xchg   ax,ax
c000e8a0:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000e8a5:	7f 41                	jg     c000e8e8 <KeSetupInterrupts()+0x68>
c000e8a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8ab:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e8b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e8b6:	01 d0                	add    eax,edx
c000e8b8:	c7 04 85 e0 e0 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd1f20],0x0
c000e8c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8c7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e8ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e8d2:	01 d0                	add    eax,edx
c000e8d4:	c7 04 85 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd2f20],0x0
c000e8df:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000e8e4:	eb ba                	jmp    c000e8a0 <KeSetupInterrupts()+0x20>
c000e8e6:	66 90                	xchg   ax,ax
c000e8e8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000e8ed:	eb 9d                	jmp    c000e88c <KeSetupInterrupts()+0xc>
c000e8ef:	90                   	nop
c000e8f0:	90                   	nop
c000e8f1:	83 c4 10             	add    esp,0x10
c000e8f4:	c3                   	ret    
c000e8f5:	8d 76 00             	lea    esi,[esi+0x0]

c000e8f8 <int_handler>:
c000e8f8:	83 ec 2c             	sub    esp,0x2c
c000e8fb:	90                   	nop
c000e8fc:	a0 24 f1 02 c0       	mov    al,ds:0xc002f124
c000e901:	0f b6 c0             	movzx  eax,al
c000e904:	85 c0                	test   eax,eax
c000e906:	74 04                	je     c000e90c <int_handler+0x14>
c000e908:	fa                   	cli    
c000e909:	f4                   	hlt    
c000e90a:	eb f0                	jmp    c000e8fc <int_handler+0x4>
c000e90c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e910:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e913:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e917:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000e91c:	7e 1a                	jle    c000e938 <int_handler+0x40>
c000e91e:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000e923:	7f 13                	jg     c000e938 <int_handler+0x40>
c000e925:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e929:	83 e8 20             	sub    eax,0x20
c000e92c:	83 ec 0c             	sub    esp,0xc
c000e92f:	50                   	push   eax
c000e930:	e8 a9 c1 00 00       	call   c001aade <HalEndOfInterrupt(int)>
c000e935:	83 c4 10             	add    esp,0x10
c000e938:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e93c:	c1 e0 04             	shl    eax,0x4
c000e93f:	05 e0 e0 02 c0       	add    eax,0xc002e0e0
c000e944:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e948:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e94c:	c1 e0 04             	shl    eax,0x4
c000e94f:	05 e0 d0 02 c0       	add    eax,0xc002d0e0
c000e954:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e958:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e960:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000e965:	0f 8f ad 00 00 00    	jg     c000ea18 <int_handler+0x120>
c000e96b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e96f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e976:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e97a:	01 d0                	add    eax,edx
c000e97c:	8b 00                	mov    eax,DWORD PTR [eax]
c000e97e:	85 c0                	test   eax,eax
c000e980:	0f 84 86 00 00 00    	je     c000ea0c <int_handler+0x114>
c000e986:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e98a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e98d:	83 f8 60             	cmp    eax,0x60
c000e990:	75 46                	jne    c000e9d8 <int_handler+0xe0>
c000e992:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e996:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e99d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9a1:	01 d0                	add    eax,edx
c000e9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e9a9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e9b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e9b4:	01 ca                	add    edx,ecx
c000e9b6:	8b 12                	mov    edx,DWORD PTR [edx]
c000e9b8:	83 ec 08             	sub    esp,0x8
c000e9bb:	52                   	push   edx
c000e9bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e9c0:	ff d0                	call   eax
c000e9c2:	83 c4 10             	add    esp,0x10
c000e9c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e9c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e9cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9d1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e9d5:	eb 4d                	jmp    c000ea24 <int_handler+0x12c>
c000e9d7:	90                   	nop
c000e9d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e9dc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e9e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9e7:	01 d0                	add    eax,edx
c000e9e9:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9eb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e9ef:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e9f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e9fa:	01 ca                	add    edx,ecx
c000e9fc:	8b 12                	mov    edx,DWORD PTR [edx]
c000e9fe:	83 ec 08             	sub    esp,0x8
c000ea01:	52                   	push   edx
c000ea02:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ea06:	ff d0                	call   eax
c000ea08:	83 c4 10             	add    esp,0x10
c000ea0b:	90                   	nop
c000ea0c:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000ea11:	e9 4a ff ff ff       	jmp    c000e960 <int_handler+0x68>
c000ea16:	66 90                	xchg   ax,ax
c000ea18:	b8 00 00 00 00       	mov    eax,0x0
c000ea1d:	ba 00 00 00 00       	mov    edx,0x0
c000ea22:	66 90                	xchg   ax,ax
c000ea24:	83 c4 2c             	add    esp,0x2c
c000ea27:	c3                   	ret    

c000ea28 <KeDisplayProgramFault(char const*)>:
c000ea28:	83 ec 0c             	sub    esp,0xc
c000ea2b:	83 ec 0c             	sub    esp,0xc
c000ea2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea32:	e8 45 85 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000ea37:	83 c4 10             	add    esp,0x10
c000ea3a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000ea3f:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea41:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ea44:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000ea4a:	85 c0                	test   eax,eax
c000ea4c:	74 22                	je     c000ea70 <KeDisplayProgramFault(char const*)+0x48>
c000ea4e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000ea53:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea55:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ea58:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000ea5e:	6a 04                	push   0x4
c000ea60:	6a 0f                	push   0xf
c000ea62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea66:	50                   	push   eax
c000ea67:	e8 76 3f 00 00       	call   c00129e2 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000ea6c:	83 c4 10             	add    esp,0x10
c000ea6f:	90                   	nop
c000ea70:	90                   	nop
c000ea71:	83 c4 0c             	add    esp,0xc
c000ea74:	c3                   	ret    
c000ea75:	8d 76 00             	lea    esi,[esi+0x0]

c000ea78 <KeGeneralProtectionFault(void*, void*)>:
c000ea78:	83 ec 0c             	sub    esp,0xc
c000ea7b:	83 ec 0c             	sub    esp,0xc
c000ea7e:	68 a4 42 02 c0       	push   0xc00242a4
c000ea83:	e8 f4 84 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000ea88:	83 c4 10             	add    esp,0x10
c000ea8b:	83 ec 08             	sub    esp,0x8
c000ea8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea96:	e8 c5 b5 00 00       	call   c001a060 <HalHandleGeneralProtectionFault(void*, void*)>
c000ea9b:	83 c4 10             	add    esp,0x10
c000ea9e:	0f b6 c0             	movzx  eax,al
c000eaa1:	85 c0                	test   eax,eax
c000eaa3:	75 2f                	jne    c000ead4 <KeGeneralProtectionFault(void*, void*)+0x5c>
c000eaa5:	83 ec 0c             	sub    esp,0xc
c000eaa8:	68 af 42 02 c0       	push   0xc00242af
c000eaad:	e8 76 ff ff ff       	call   c000ea28 <KeDisplayProgramFault(char const*)>
c000eab2:	83 c4 10             	add    esp,0x10
c000eab5:	83 ec 0c             	sub    esp,0xc
c000eab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eabc:	e8 03 b7 00 00       	call   c001a1c4 <HalDisplayDebugInfo(void*)>
c000eac1:	83 c4 10             	add    esp,0x10
c000eac4:	83 ec 0c             	sub    esp,0xc
c000eac7:	6a 00                	push   0x0
c000eac9:	e8 56 90 00 00       	call   c0017b24 <Thr::terminateFromIRQ(int)>
c000eace:	83 c4 10             	add    esp,0x10
c000ead1:	eb 05                	jmp    c000ead8 <KeGeneralProtectionFault(void*, void*)+0x60>
c000ead3:	90                   	nop
c000ead4:	90                   	nop
c000ead5:	8d 76 00             	lea    esi,[esi+0x0]
c000ead8:	83 c4 0c             	add    esp,0xc
c000eadb:	c3                   	ret    

c000eadc <KePageFault(void*, void*)>:
c000eadc:	83 ec 0c             	sub    esp,0xc
c000eadf:	83 ec 0c             	sub    esp,0xc
c000eae2:	68 c8 42 02 c0       	push   0xc00242c8
c000eae7:	e8 90 84 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000eaec:	83 c4 10             	add    esp,0x10
c000eaef:	83 ec 08             	sub    esp,0x8
c000eaf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eaf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eafa:	e8 54 b6 00 00       	call   c001a153 <HalHandlePageFault(void*, void*)>
c000eaff:	83 c4 10             	add    esp,0x10
c000eb02:	0f b6 c0             	movzx  eax,al
c000eb05:	85 c0                	test   eax,eax
c000eb07:	75 2f                	jne    c000eb38 <KePageFault(void*, void*)+0x5c>
c000eb09:	83 ec 0c             	sub    esp,0xc
c000eb0c:	68 d5 42 02 c0       	push   0xc00242d5
c000eb11:	e8 12 ff ff ff       	call   c000ea28 <KeDisplayProgramFault(char const*)>
c000eb16:	83 c4 10             	add    esp,0x10
c000eb19:	83 ec 0c             	sub    esp,0xc
c000eb1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb20:	e8 9f b6 00 00       	call   c001a1c4 <HalDisplayDebugInfo(void*)>
c000eb25:	83 c4 10             	add    esp,0x10
c000eb28:	83 ec 0c             	sub    esp,0xc
c000eb2b:	6a 00                	push   0x0
c000eb2d:	e8 f2 8f 00 00       	call   c0017b24 <Thr::terminateFromIRQ(int)>
c000eb32:	83 c4 10             	add    esp,0x10
c000eb35:	eb 05                	jmp    c000eb3c <KePageFault(void*, void*)+0x60>
c000eb37:	90                   	nop
c000eb38:	90                   	nop
c000eb39:	8d 76 00             	lea    esi,[esi+0x0]
c000eb3c:	83 c4 0c             	add    esp,0xc
c000eb3f:	c3                   	ret    

c000eb40 <KeNonMaskableInterrupt(void*, void*)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	e8 0a ba 00 00       	call   c001a552 <HalReceivedNMI()>
c000eb48:	90                   	nop
c000eb49:	83 c4 0c             	add    esp,0xc
c000eb4c:	c3                   	ret    
c000eb4d:	8d 76 00             	lea    esi,[esi+0x0]

c000eb50 <KeOtherFault(void*, void*)>:
c000eb50:	83 ec 0c             	sub    esp,0xc
c000eb53:	83 ec 0c             	sub    esp,0xc
c000eb56:	68 e0 42 02 c0       	push   0xc00242e0
c000eb5b:	e8 c8 fe ff ff       	call   c000ea28 <KeDisplayProgramFault(char const*)>
c000eb60:	83 c4 10             	add    esp,0x10
c000eb63:	83 ec 0c             	sub    esp,0xc
c000eb66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb6a:	e8 55 b6 00 00       	call   c001a1c4 <HalDisplayDebugInfo(void*)>
c000eb6f:	83 c4 10             	add    esp,0x10
c000eb72:	83 ec 0c             	sub    esp,0xc
c000eb75:	6a 00                	push   0x0
c000eb77:	e8 a8 8f 00 00       	call   c0017b24 <Thr::terminateFromIRQ(int)>
c000eb7c:	83 c4 10             	add    esp,0x10
c000eb7f:	90                   	nop
c000eb80:	83 c4 0c             	add    esp,0xc
c000eb83:	c3                   	ret    

c000eb84 <KeOpcodeFault(void*, void*)>:
c000eb84:	55                   	push   ebp
c000eb85:	89 e5                	mov    ebp,esp
c000eb87:	83 ec 08             	sub    esp,0x8
c000eb8a:	83 ec 08             	sub    esp,0x8
c000eb8d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000eb90:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000eb93:	e8 ea b5 00 00       	call   c001a182 <HalHandleOpcodeFault(void*, void*)>
c000eb98:	83 c4 10             	add    esp,0x10
c000eb9b:	0f b6 c0             	movzx  eax,al
c000eb9e:	85 c0                	test   eax,eax
c000eba0:	75 2e                	jne    c000ebd0 <KeOpcodeFault(void*, void*)+0x4c>
c000eba2:	83 ec 0c             	sub    esp,0xc
c000eba5:	68 08 43 02 c0       	push   0xc0024308
c000ebaa:	e8 79 fe ff ff       	call   c000ea28 <KeDisplayProgramFault(char const*)>
c000ebaf:	83 c4 10             	add    esp,0x10
c000ebb2:	83 ec 0c             	sub    esp,0xc
c000ebb5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ebb8:	e8 07 b6 00 00       	call   c001a1c4 <HalDisplayDebugInfo(void*)>
c000ebbd:	83 c4 10             	add    esp,0x10
c000ebc0:	83 ec 0c             	sub    esp,0xc
c000ebc3:	6a 00                	push   0x0
c000ebc5:	e8 5a 8f 00 00       	call   c0017b24 <Thr::terminateFromIRQ(int)>
c000ebca:	83 c4 10             	add    esp,0x10
c000ebcd:	eb 05                	jmp    c000ebd4 <KeOpcodeFault(void*, void*)+0x50>
c000ebcf:	90                   	nop
c000ebd0:	90                   	nop
c000ebd1:	8d 76 00             	lea    esi,[esi+0x0]
c000ebd4:	c9                   	leave  
c000ebd5:	c3                   	ret    
c000ebd6:	66 90                	xchg   ax,ax

c000ebd8 <KeDoubleFault(void*, void*)>:
c000ebd8:	55                   	push   ebp
c000ebd9:	89 e5                	mov    ebp,esp
c000ebdb:	83 ec 08             	sub    esp,0x8
c000ebde:	83 ec 0c             	sub    esp,0xc
c000ebe1:	68 15 43 02 c0       	push   0xc0024315
c000ebe6:	e8 fb 13 00 00       	call   c000ffe6 <KePanic(char const*)>
c000ebeb:	83 c4 10             	add    esp,0x10
c000ebee:	90                   	nop
c000ebef:	c9                   	leave  
c000ebf0:	c3                   	ret    
c000ebf1:	90                   	nop

c000ebf2 <GDTEntry::setBase(unsigned int)>:
c000ebf2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebf6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ebfa:	89 c1                	mov    ecx,eax
c000ebfc:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ec00:	c1 e9 10             	shr    ecx,0x10
c000ec03:	c1 e8 18             	shr    eax,0x18
c000ec06:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ec09:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ec0c:	c3                   	ret    
c000ec0d:	90                   	nop

c000ec0e <GDTEntry::setLimit(unsigned int)>:
c000ec0e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ec12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec16:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ec19:	66 89 01             	mov    WORD PTR [ecx],ax
c000ec1c:	83 e2 f0             	and    edx,0xfffffff0
c000ec1f:	c1 e8 10             	shr    eax,0x10
c000ec22:	83 e0 0f             	and    eax,0xf
c000ec25:	09 d0                	or     eax,edx
c000ec27:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ec2a:	c3                   	ret    
c000ec2b:	90                   	nop

c000ec2c <GDT::GDT()>:
c000ec2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec30:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ec36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec3a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ec40:	90                   	nop
c000ec41:	c3                   	ret    

c000ec42 <GDT::addEntry(GDTEntry)>:
c000ec42:	53                   	push   ebx
c000ec43:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec47:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ec4b:	8b 02                	mov    eax,DWORD PTR [edx]
c000ec4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ec51:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000ec55:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000ec59:	8d 48 01             	lea    ecx,[eax+0x1]
c000ec5c:	c1 e0 03             	shl    eax,0x3
c000ec5f:	89 0a                	mov    DWORD PTR [edx],ecx
c000ec61:	5b                   	pop    ebx
c000ec62:	c3                   	ret    
c000ec63:	90                   	nop

c000ec64 <GDT::getNumberOfEntries()>:
c000ec64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec68:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec6a:	c3                   	ret    
c000ec6b:	90                   	nop

c000ec6c <GDT::flush()>:
c000ec6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec70:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec72:	83 c0 04             	add    eax,0x4
c000ec75:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ec7c:	a3 e2 f0 02 c0       	mov    ds:0xc002f0e2,eax
c000ec81:	66 89 15 e0 f0 02 c0 	mov    WORD PTR ds:0xc002f0e0,dx
c000ec88:	e9 cd 16 ff ff       	jmp    c000035a <loadGDT>
c000ec8d:	90                   	nop

c000ec8e <GDT::setup()>:
c000ec8e:	57                   	push   edi
c000ec8f:	56                   	push   esi
c000ec90:	53                   	push   ebx
c000ec91:	83 ec 30             	sub    esp,0x30
c000ec94:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ec98:	6a 00                	push   0x0
c000ec9a:	8d 74 24 14          	lea    esi,[esp+0x14]
c000ec9e:	56                   	push   esi
c000ec9f:	e8 4e ff ff ff       	call   c000ebf2 <GDTEntry::setBase(unsigned int)>
c000eca4:	6a 00                	push   0x0
c000eca6:	56                   	push   esi
c000eca7:	e8 62 ff ff ff       	call   c000ec0e <GDTEntry::setLimit(unsigned int)>
c000ecac:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000ecb4:	6a 00                	push   0x0
c000ecb6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000ecba:	56                   	push   esi
c000ecbb:	e8 32 ff ff ff       	call   c000ebf2 <GDTEntry::setBase(unsigned int)>
c000ecc0:	68 ff ff ff 00       	push   0xffffff
c000ecc5:	56                   	push   esi
c000ecc6:	e8 43 ff ff ff       	call   c000ec0e <GDTEntry::setLimit(unsigned int)>
c000eccb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eccf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ecd3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000ecd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000ecdb:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ece0:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ece5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ece9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eced:	89 f8                	mov    eax,edi
c000ecef:	89 fa                	mov    edx,edi
c000ecf1:	80 e4 f7             	and    ah,0xf7
c000ecf4:	80 ce 60             	or     dh,0x60
c000ecf7:	89 c7                	mov    edi,eax
c000ecf9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ecfd:	80 cc 60             	or     ah,0x60
c000ed00:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ed04:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ed08:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000ed0c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ed10:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ed14:	83 c4 20             	add    esp,0x20
c000ed17:	6a 00                	push   0x0
c000ed19:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ed1d:	50                   	push   eax
c000ed1e:	e8 cf fe ff ff       	call   c000ebf2 <GDTEntry::setBase(unsigned int)>
c000ed23:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000ed27:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000ed2b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000ed2f:	83 e0 3f             	and    eax,0x3f
c000ed32:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000ed36:	6a 00                	push   0x0
c000ed38:	8d 44 24 34          	lea    eax,[esp+0x34]
c000ed3c:	50                   	push   eax
c000ed3d:	e8 b0 fe ff ff       	call   c000ebf2 <GDTEntry::setBase(unsigned int)>
c000ed42:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000ed46:	83 e0 3f             	and    eax,0x3f
c000ed49:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000ed4d:	83 c4 0c             	add    esp,0xc
c000ed50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed58:	53                   	push   ebx
c000ed59:	e8 e4 fe ff ff       	call   c000ec42 <GDT::addEntry(GDTEntry)>
c000ed5e:	83 c4 0c             	add    esp,0xc
c000ed61:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ed65:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ed69:	53                   	push   ebx
c000ed6a:	e8 d3 fe ff ff       	call   c000ec42 <GDT::addEntry(GDTEntry)>
c000ed6f:	83 c4 0c             	add    esp,0xc
c000ed72:	57                   	push   edi
c000ed73:	56                   	push   esi
c000ed74:	53                   	push   ebx
c000ed75:	e8 c8 fe ff ff       	call   c000ec42 <GDT::addEntry(GDTEntry)>
c000ed7a:	83 c4 0c             	add    esp,0xc
c000ed7d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ed81:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ed85:	53                   	push   ebx
c000ed86:	e8 b7 fe ff ff       	call   c000ec42 <GDT::addEntry(GDTEntry)>
c000ed8b:	83 c4 0c             	add    esp,0xc
c000ed8e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ed92:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ed96:	53                   	push   ebx
c000ed97:	e8 a6 fe ff ff       	call   c000ec42 <GDT::addEntry(GDTEntry)>
c000ed9c:	83 c4 0c             	add    esp,0xc
c000ed9f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eda3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eda7:	53                   	push   ebx
c000eda8:	e8 95 fe ff ff       	call   c000ec42 <GDT::addEntry(GDTEntry)>
c000edad:	83 c4 0c             	add    esp,0xc
c000edb0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000edb4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000edb8:	53                   	push   ebx
c000edb9:	e8 84 fe ff ff       	call   c000ec42 <GDT::addEntry(GDTEntry)>
c000edbe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000edc1:	e8 a6 fe ff ff       	call   c000ec6c <GDT::flush()>
c000edc6:	83 c4 40             	add    esp,0x40
c000edc9:	5b                   	pop    ebx
c000edca:	5e                   	pop    esi
c000edcb:	5f                   	pop    edi
c000edcc:	c3                   	ret    

c000edcd <idleFunction(void*)>:
c000edcd:	83 ec 0c             	sub    esp,0xc
c000edd0:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c000edd7:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c000edde:	75 01                	jne    c000ede1 <idleFunction(void*)+0x14>
c000ede0:	fb                   	sti    
c000ede1:	e8 07 b8 00 00       	call   c001a5ed <HalSystemIdle()>
c000ede6:	e8 1b 36 01 00       	call   c0022406 <idleCommon()>
c000edeb:	eb f4                	jmp    c000ede1 <idleFunction(void*)+0x14>
c000eded:	66 90                	xchg   ax,ax
c000edef:	90                   	nop

c000edf0 <IDTEntry::IDTEntry(bool)>:
c000edf0:	53                   	push   ebx
c000edf1:	83 ec 04             	sub    esp,0x4
c000edf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edf8:	88 04 24             	mov    BYTE PTR [esp],al
c000edfb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000edff:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000ee05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee09:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000ee0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee11:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ee14:	83 e2 f0             	and    edx,0xfffffff0
c000ee17:	83 ca 0e             	or     edx,0xe
c000ee1a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ee1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee21:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ee24:	83 e2 ef             	and    edx,0xffffffef
c000ee27:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ee2a:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000ee2e:	85 c0                	test   eax,eax
c000ee30:	74 06                	je     c000ee38 <IDTEntry::IDTEntry(bool)+0x48>
c000ee32:	b2 03                	mov    dl,0x3
c000ee34:	eb 06                	jmp    c000ee3c <IDTEntry::IDTEntry(bool)+0x4c>
c000ee36:	66 90                	xchg   ax,ax
c000ee38:	b2 00                	mov    dl,0x0
c000ee3a:	66 90                	xchg   ax,ax
c000ee3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee40:	83 e2 03             	and    edx,0x3
c000ee43:	89 d3                	mov    ebx,edx
c000ee45:	c1 e3 05             	shl    ebx,0x5
c000ee48:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ee4b:	83 e2 9f             	and    edx,0xffffff9f
c000ee4e:	88 d1                	mov    cl,dl
c000ee50:	88 da                	mov    dl,bl
c000ee52:	09 ca                	or     edx,ecx
c000ee54:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ee57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee5b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ee5e:	83 ca 80             	or     edx,0xffffff80
c000ee61:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ee64:	90                   	nop
c000ee65:	83 c4 04             	add    esp,0x4
c000ee68:	5b                   	pop    ebx
c000ee69:	c3                   	ret    

c000ee6a <IDTEntry::setOffset(unsigned int)>:
c000ee6a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ee6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee72:	66 89 02             	mov    WORD PTR [edx],ax
c000ee75:	c1 e8 10             	shr    eax,0x10
c000ee78:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ee7c:	c3                   	ret    
c000ee7d:	90                   	nop
c000ee7e:	66 90                	xchg   ax,ax

c000ee80 <IDT::IDT()>:
c000ee80:	90                   	nop
c000ee81:	c3                   	ret    

c000ee82 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ee82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee86:	83 c0 30             	add    eax,0x30
c000ee89:	c3                   	ret    

c000ee8a <IDT::addEntry(IDTEntry, int)>:
c000ee8a:	53                   	push   ebx
c000ee8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee8f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ee93:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee9b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ee9e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000eea2:	5b                   	pop    ebx
c000eea3:	c3                   	ret    

c000eea4 <IDT::addEntry(int, void (*)(), bool)>:
c000eea4:	53                   	push   ebx
c000eea5:	83 ec 10             	sub    esp,0x10
c000eea8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000eead:	50                   	push   eax
c000eeae:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000eeb2:	53                   	push   ebx
c000eeb3:	e8 38 ff ff ff       	call   c000edf0 <IDTEntry::IDTEntry(bool)>
c000eeb8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eebc:	53                   	push   ebx
c000eebd:	e8 a8 ff ff ff       	call   c000ee6a <IDTEntry::setOffset(unsigned int)>
c000eec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eec6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eeca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eece:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000eed2:	e8 b3 ff ff ff       	call   c000ee8a <IDT::addEntry(IDTEntry, int)>
c000eed7:	83 c4 30             	add    esp,0x30
c000eeda:	5b                   	pop    ebx
c000eedb:	c3                   	ret    

c000eedc <IDT::flush()>:
c000eedc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eee0:	66 c7 05 e8 f0 02 c0 ff 07 	mov    WORD PTR ds:0xc002f0e8,0x7ff
c000eee9:	a3 ea f0 02 c0       	mov    ds:0xc002f0ea,eax
c000eeee:	0f 01 1d e8 f0 02 c0 	lidtd  ds:0xc002f0e8
c000eef5:	c3                   	ret    

c000eef6 <IDT::setup()>:
c000eef6:	57                   	push   edi
c000eef7:	56                   	push   esi
c000eef8:	53                   	push   ebx
c000eef9:	83 ec 10             	sub    esp,0x10
c000eefc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ef00:	6a 00                	push   0x0
c000ef02:	68 e0 16 02 c0       	push   0xc00216e0
c000ef07:	6a 00                	push   0x0
c000ef09:	53                   	push   ebx
c000ef0a:	e8 95 ff ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000ef0f:	6a 00                	push   0x0
c000ef11:	68 f0 16 02 c0       	push   0xc00216f0
c000ef16:	6a 01                	push   0x1
c000ef18:	53                   	push   ebx
c000ef19:	e8 86 ff ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000ef1e:	83 c4 20             	add    esp,0x20
c000ef21:	6a 00                	push   0x0
c000ef23:	68 fa 16 02 c0       	push   0xc00216fa
c000ef28:	6a 02                	push   0x2
c000ef2a:	53                   	push   ebx
c000ef2b:	e8 74 ff ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000ef30:	6a 00                	push   0x0
c000ef32:	68 04 17 02 c0       	push   0xc0021704
c000ef37:	6a 03                	push   0x3
c000ef39:	53                   	push   ebx
c000ef3a:	e8 65 ff ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000ef3f:	83 c4 20             	add    esp,0x20
c000ef42:	6a 00                	push   0x0
c000ef44:	68 0e 17 02 c0       	push   0xc002170e
c000ef49:	6a 04                	push   0x4
c000ef4b:	53                   	push   ebx
c000ef4c:	e8 53 ff ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000ef51:	6a 00                	push   0x0
c000ef53:	68 18 17 02 c0       	push   0xc0021718
c000ef58:	6a 05                	push   0x5
c000ef5a:	53                   	push   ebx
c000ef5b:	e8 44 ff ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000ef60:	83 c4 20             	add    esp,0x20
c000ef63:	6a 00                	push   0x0
c000ef65:	68 22 17 02 c0       	push   0xc0021722
c000ef6a:	6a 06                	push   0x6
c000ef6c:	53                   	push   ebx
c000ef6d:	e8 32 ff ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000ef72:	6a 00                	push   0x0
c000ef74:	68 2c 17 02 c0       	push   0xc002172c
c000ef79:	6a 07                	push   0x7
c000ef7b:	53                   	push   ebx
c000ef7c:	e8 23 ff ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000ef81:	83 c4 20             	add    esp,0x20
c000ef84:	6a 00                	push   0x0
c000ef86:	68 36 17 02 c0       	push   0xc0021736
c000ef8b:	6a 08                	push   0x8
c000ef8d:	53                   	push   ebx
c000ef8e:	e8 11 ff ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000ef93:	6a 00                	push   0x0
c000ef95:	68 3e 17 02 c0       	push   0xc002173e
c000ef9a:	6a 09                	push   0x9
c000ef9c:	53                   	push   ebx
c000ef9d:	e8 02 ff ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000efa2:	83 c4 20             	add    esp,0x20
c000efa5:	6a 00                	push   0x0
c000efa7:	68 48 17 02 c0       	push   0xc0021748
c000efac:	6a 0a                	push   0xa
c000efae:	53                   	push   ebx
c000efaf:	e8 f0 fe ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000efb4:	6a 00                	push   0x0
c000efb6:	68 50 17 02 c0       	push   0xc0021750
c000efbb:	6a 0b                	push   0xb
c000efbd:	53                   	push   ebx
c000efbe:	e8 e1 fe ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000efc3:	83 c4 20             	add    esp,0x20
c000efc6:	6a 00                	push   0x0
c000efc8:	68 58 17 02 c0       	push   0xc0021758
c000efcd:	6a 0c                	push   0xc
c000efcf:	53                   	push   ebx
c000efd0:	e8 cf fe ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000efd5:	6a 00                	push   0x0
c000efd7:	68 60 17 02 c0       	push   0xc0021760
c000efdc:	6a 0d                	push   0xd
c000efde:	53                   	push   ebx
c000efdf:	e8 c0 fe ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000efe4:	83 c4 20             	add    esp,0x20
c000efe7:	6a 00                	push   0x0
c000efe9:	68 7a 17 02 c0       	push   0xc002177a
c000efee:	6a 0e                	push   0xe
c000eff0:	53                   	push   ebx
c000eff1:	e8 ae fe ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000eff6:	6a 00                	push   0x0
c000eff8:	68 82 17 02 c0       	push   0xc0021782
c000effd:	6a 0f                	push   0xf
c000efff:	53                   	push   ebx
c000f000:	e8 9f fe ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f005:	83 c4 20             	add    esp,0x20
c000f008:	6a 00                	push   0x0
c000f00a:	68 8c 17 02 c0       	push   0xc002178c
c000f00f:	6a 10                	push   0x10
c000f011:	53                   	push   ebx
c000f012:	e8 8d fe ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f017:	6a 00                	push   0x0
c000f019:	68 96 17 02 c0       	push   0xc0021796
c000f01e:	6a 11                	push   0x11
c000f020:	53                   	push   ebx
c000f021:	e8 7e fe ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f026:	83 c4 20             	add    esp,0x20
c000f029:	6a 00                	push   0x0
c000f02b:	68 a0 17 02 c0       	push   0xc00217a0
c000f030:	6a 12                	push   0x12
c000f032:	53                   	push   ebx
c000f033:	e8 6c fe ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f038:	6a 01                	push   0x1
c000f03a:	68 3a 18 02 c0       	push   0xc002183a
c000f03f:	6a 60                	push   0x60
c000f041:	53                   	push   ebx
c000f042:	e8 5d fe ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f047:	83 c4 20             	add    esp,0x20
c000f04a:	6a 00                	push   0x0
c000f04c:	68 41 18 02 c0       	push   0xc0021841
c000f051:	6a 20                	push   0x20
c000f053:	53                   	push   ebx
c000f054:	e8 4b fe ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f059:	6a 00                	push   0x0
c000f05b:	68 2c 18 02 c0       	push   0xc002182c
c000f060:	6a 21                	push   0x21
c000f062:	53                   	push   ebx
c000f063:	e8 3c fe ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f068:	83 c4 20             	add    esp,0x20
c000f06b:	6a 00                	push   0x0
c000f06d:	68 33 18 02 c0       	push   0xc0021833
c000f072:	6a 22                	push   0x22
c000f074:	53                   	push   ebx
c000f075:	e8 2a fe ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f07a:	6a 00                	push   0x0
c000f07c:	68 aa 17 02 c0       	push   0xc00217aa
c000f081:	6a 23                	push   0x23
c000f083:	53                   	push   ebx
c000f084:	e8 1b fe ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f089:	83 c4 20             	add    esp,0x20
c000f08c:	6a 00                	push   0x0
c000f08e:	68 b4 17 02 c0       	push   0xc00217b4
c000f093:	6a 24                	push   0x24
c000f095:	53                   	push   ebx
c000f096:	e8 09 fe ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f09b:	6a 00                	push   0x0
c000f09d:	68 be 17 02 c0       	push   0xc00217be
c000f0a2:	6a 25                	push   0x25
c000f0a4:	53                   	push   ebx
c000f0a5:	e8 fa fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f0aa:	83 c4 20             	add    esp,0x20
c000f0ad:	6a 00                	push   0x0
c000f0af:	68 c8 17 02 c0       	push   0xc00217c8
c000f0b4:	6a 26                	push   0x26
c000f0b6:	53                   	push   ebx
c000f0b7:	e8 e8 fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f0bc:	6a 00                	push   0x0
c000f0be:	68 d2 17 02 c0       	push   0xc00217d2
c000f0c3:	6a 27                	push   0x27
c000f0c5:	53                   	push   ebx
c000f0c6:	e8 d9 fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f0cb:	83 c4 20             	add    esp,0x20
c000f0ce:	6a 00                	push   0x0
c000f0d0:	68 dc 17 02 c0       	push   0xc00217dc
c000f0d5:	6a 28                	push   0x28
c000f0d7:	53                   	push   ebx
c000f0d8:	e8 c7 fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f0dd:	6a 00                	push   0x0
c000f0df:	68 e6 17 02 c0       	push   0xc00217e6
c000f0e4:	6a 29                	push   0x29
c000f0e6:	53                   	push   ebx
c000f0e7:	e8 b8 fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f0ec:	83 c4 20             	add    esp,0x20
c000f0ef:	6a 00                	push   0x0
c000f0f1:	68 f0 17 02 c0       	push   0xc00217f0
c000f0f6:	6a 2a                	push   0x2a
c000f0f8:	53                   	push   ebx
c000f0f9:	e8 a6 fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f0fe:	6a 00                	push   0x0
c000f100:	68 fa 17 02 c0       	push   0xc00217fa
c000f105:	6a 2b                	push   0x2b
c000f107:	53                   	push   ebx
c000f108:	e8 97 fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f10d:	83 c4 20             	add    esp,0x20
c000f110:	6a 00                	push   0x0
c000f112:	68 04 18 02 c0       	push   0xc0021804
c000f117:	6a 2c                	push   0x2c
c000f119:	53                   	push   ebx
c000f11a:	e8 85 fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f11f:	6a 00                	push   0x0
c000f121:	68 0e 18 02 c0       	push   0xc002180e
c000f126:	6a 2d                	push   0x2d
c000f128:	53                   	push   ebx
c000f129:	e8 76 fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f12e:	83 c4 20             	add    esp,0x20
c000f131:	6a 00                	push   0x0
c000f133:	68 18 18 02 c0       	push   0xc0021818
c000f138:	6a 2e                	push   0x2e
c000f13a:	53                   	push   ebx
c000f13b:	e8 64 fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f140:	6a 00                	push   0x0
c000f142:	68 22 18 02 c0       	push   0xc0021822
c000f147:	6a 2f                	push   0x2f
c000f149:	53                   	push   ebx
c000f14a:	e8 55 fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f14f:	83 c4 20             	add    esp,0x20
c000f152:	6a 00                	push   0x0
c000f154:	68 44 19 02 c0       	push   0xc0021944
c000f159:	6a 30                	push   0x30
c000f15b:	53                   	push   ebx
c000f15c:	e8 43 fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f161:	6a 00                	push   0x0
c000f163:	68 4e 19 02 c0       	push   0xc002194e
c000f168:	6a 31                	push   0x31
c000f16a:	53                   	push   ebx
c000f16b:	e8 34 fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f170:	83 c4 20             	add    esp,0x20
c000f173:	6a 00                	push   0x0
c000f175:	68 58 19 02 c0       	push   0xc0021958
c000f17a:	6a 32                	push   0x32
c000f17c:	53                   	push   ebx
c000f17d:	e8 22 fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f182:	6a 00                	push   0x0
c000f184:	68 62 19 02 c0       	push   0xc0021962
c000f189:	6a 33                	push   0x33
c000f18b:	53                   	push   ebx
c000f18c:	e8 13 fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f191:	83 c4 20             	add    esp,0x20
c000f194:	6a 00                	push   0x0
c000f196:	68 6c 19 02 c0       	push   0xc002196c
c000f19b:	6a 34                	push   0x34
c000f19d:	53                   	push   ebx
c000f19e:	e8 01 fd ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f1a3:	6a 00                	push   0x0
c000f1a5:	68 76 19 02 c0       	push   0xc0021976
c000f1aa:	6a 35                	push   0x35
c000f1ac:	53                   	push   ebx
c000f1ad:	e8 f2 fc ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f1b2:	83 c4 20             	add    esp,0x20
c000f1b5:	6a 00                	push   0x0
c000f1b7:	68 80 19 02 c0       	push   0xc0021980
c000f1bc:	6a 36                	push   0x36
c000f1be:	53                   	push   ebx
c000f1bf:	e8 e0 fc ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f1c4:	6a 00                	push   0x0
c000f1c6:	68 8a 19 02 c0       	push   0xc002198a
c000f1cb:	6a 37                	push   0x37
c000f1cd:	53                   	push   ebx
c000f1ce:	e8 d1 fc ff ff       	call   c000eea4 <IDT::addEntry(int, void (*)(), bool)>
c000f1d3:	83 c4 1c             	add    esp,0x1c
c000f1d6:	6a 03                	push   0x3
c000f1d8:	6a 02                	push   0x2
c000f1da:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000f1e0:	e8 9d 4b 00 00       	call   c0013d82 <VAS::allocatePages(int, int)>
c000f1e5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f1ec:	89 c6                	mov    esi,eax
c000f1ee:	e8 9c 09 00 00       	call   c000fb8f <malloc>
c000f1f3:	81 c6 00 20 00 00    	add    esi,0x2000
c000f1f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000f1fc:	89 c7                	mov    edi,eax
c000f1fe:	e8 49 3c 00 00       	call   c0012e4c <TSS::TSS()>
c000f203:	83 c4 0c             	add    esp,0xc
c000f206:	68 36 17 02 c0       	push   0xc0021736
c000f20b:	56                   	push   esi
c000f20c:	57                   	push   edi
c000f20d:	e8 7e 3c 00 00       	call   c0012e90 <TSS::setup(unsigned long, unsigned long)>
c000f212:	89 c6                	mov    esi,eax
c000f214:	58                   	pop    eax
c000f215:	5a                   	pop    edx
c000f216:	6a 00                	push   0x0
c000f218:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f21c:	50                   	push   eax
c000f21d:	e8 ce fb ff ff       	call   c000edf0 <IDTEntry::IDTEntry(bool)>
c000f222:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f226:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f22b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f232:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f238:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f23c:	80 ce 05             	or     dh,0x5
c000f23f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f242:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f246:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f24a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f24d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f250:	e8 87 fc ff ff       	call   c000eedc <IDT::flush()>
c000f255:	83 c4 20             	add    esp,0x20
c000f258:	5b                   	pop    ebx
c000f259:	5e                   	pop    esi
c000f25a:	5f                   	pop    edi
c000f25b:	c3                   	ret    

c000f25c <CPU::current()>:
c000f25c:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c000f261:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000f267:	c3                   	ret    

c000f268 <operator new(unsigned long)>:
c000f268:	e9 22 09 00 00       	jmp    c000fb8f <malloc>

c000f26d <operator delete(void*)>:
c000f26d:	e9 3d 09 00 00       	jmp    c000fbaf <rfree>

c000f272 <disableIRQs()>:
c000f272:	fa                   	cli    
c000f273:	c3                   	ret    

c000f274 <enableIRQs()>:
c000f274:	fb                   	sti    
c000f275:	c3                   	ret    

c000f276 <lockScheduler()>:
c000f276:	fa                   	cli    
c000f277:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c000f27d:	c3                   	ret    

c000f27e <unlockScheduler()>:
c000f27e:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c000f285:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c000f28c:	75 01                	jne    c000f28f <unlockScheduler()+0x11>
c000f28e:	fb                   	sti    
c000f28f:	c3                   	ret    

c000f290 <lockStuff()>:
c000f290:	fa                   	cli    
c000f291:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c000f297:	ff 05 2c fa 02 c0    	inc    DWORD PTR ds:0xc002fa2c
c000f29d:	c3                   	ret    

c000f29e <unlockStuff()>:
c000f29e:	83 ec 0c             	sub    esp,0xc
c000f2a1:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c000f2a6:	48                   	dec    eax
c000f2a7:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c000f2ac:	75 18                	jne    c000f2c6 <unlockStuff()+0x28>
c000f2ae:	83 3d 28 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa28,0x0
c000f2b5:	74 0f                	je     c000f2c6 <unlockStuff()+0x28>
c000f2b7:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c000f2c1:	e8 4e 7f 00 00       	call   c0017214 <schedule()>
c000f2c6:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c000f2cd:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c000f2d4:	75 01                	jne    c000f2d7 <unlockStuff()+0x39>
c000f2d6:	fb                   	sti    
c000f2d7:	83 c4 0c             	add    esp,0xc
c000f2da:	c3                   	ret    

c000f2db <Virt::getAKernelVAS()>:
c000f2db:	a1 50 f2 02 c0       	mov    eax,ds:0xc002f250
c000f2e0:	c3                   	ret    

c000f2e1 <__not_memcpy>:
c000f2e1:	57                   	push   edi
c000f2e2:	56                   	push   esi
c000f2e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f2eb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f2ef:	89 c7                	mov    edi,eax
c000f2f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2f3:	5e                   	pop    esi
c000f2f4:	5f                   	pop    edi
c000f2f5:	c3                   	ret    

c000f2f6 <KeFormatDate(char*, int, int, int, int, bool)>:
c000f2f6:	55                   	push   ebp
c000f2f7:	b9 0a 00 00 00       	mov    ecx,0xa
c000f2fc:	57                   	push   edi
c000f2fd:	56                   	push   esi
c000f2fe:	53                   	push   ebx
c000f2ff:	bb e8 03 00 00       	mov    ebx,0x3e8
c000f304:	81 ec ac 00 00 00    	sub    esp,0xac
c000f30a:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f311:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000f316:	99                   	cdq    
c000f317:	f7 f9                	idiv   ecx
c000f319:	89 d5                	mov    ebp,edx
c000f31b:	99                   	cdq    
c000f31c:	f7 f9                	idiv   ecx
c000f31e:	8d 42 30             	lea    eax,[edx+0x30]
c000f321:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f325:	8d 45 30             	lea    eax,[ebp+0x30]
c000f328:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000f32c:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f333:	99                   	cdq    
c000f334:	f7 fb                	idiv   ebx
c000f336:	bb 64 00 00 00       	mov    ebx,0x64
c000f33b:	99                   	cdq    
c000f33c:	f7 f9                	idiv   ecx
c000f33e:	8d 42 30             	lea    eax,[edx+0x30]
c000f341:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000f345:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f34c:	99                   	cdq    
c000f34d:	f7 fb                	idiv   ebx
c000f34f:	31 db                	xor    ebx,ebx
c000f351:	99                   	cdq    
c000f352:	f7 f9                	idiv   ecx
c000f354:	8d 42 30             	lea    eax,[edx+0x30]
c000f357:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000f35b:	0f b6 84 24 d4 00 00 00 	movzx  eax,BYTE PTR [esp+0xd4]
c000f363:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f367:	0f be 8b 04 f1 02 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffd0efc]
c000f36e:	83 f9 59             	cmp    ecx,0x59
c000f371:	74 1c                	je     c000f38f <KeFormatDate(char*, int, int, int, int, bool)+0x99>
c000f373:	8b ac 24 cc 00 00 00 	mov    ebp,DWORD PTR [esp+0xcc]
c000f37a:	83 f9 4d             	cmp    ecx,0x4d
c000f37d:	0f 84 e3 00 00 00    	je     c000f466 <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000f383:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c000f38a:	e9 d7 00 00 00       	jmp    c000f466 <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000f38f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000f394:	74 27                	je     c000f3bd <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000f396:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000f39a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f39f:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f3a3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000f3a7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f3ab:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f3af:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000f3b3:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f3b7:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f3bb:	eb 15                	jmp    c000f3d2 <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000f3bd:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f3c1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f3c5:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f3c9:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f3cd:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000f3d2:	50                   	push   eax
c000f3d3:	50                   	push   eax
c000f3d4:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000f3d8:	57                   	push   edi
c000f3d9:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f3dd:	56                   	push   esi
c000f3de:	e8 5d 14 ff ff       	call   c0000840 <strcat>
c000f3e3:	83 c4 10             	add    esp,0x10
c000f3e6:	83 fb 02             	cmp    ebx,0x2
c000f3e9:	74 1a                	je     c000f405 <KeFormatDate(char*, int, int, int, int, bool)+0x10f>
c000f3eb:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f3f0:	a1 08 f1 02 c0       	mov    eax,ds:0xc002f108
c000f3f5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f3f9:	55                   	push   ebp
c000f3fa:	55                   	push   ebp
c000f3fb:	57                   	push   edi
c000f3fc:	56                   	push   esi
c000f3fd:	e8 3e 14 ff ff       	call   c0000840 <strcat>
c000f402:	83 c4 10             	add    esp,0x10
c000f405:	43                   	inc    ebx
c000f406:	83 fb 03             	cmp    ebx,0x3
c000f409:	0f 85 58 ff ff ff    	jne    c000f367 <KeFormatDate(char*, int, int, int, int, bool)+0x71>
c000f40f:	51                   	push   ecx
c000f410:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000f417:	6a 00                	push   0x0
c000f419:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f420:	e8 cb 10 ff ff       	call   c00004f0 <memset>
c000f425:	89 34 24             	mov    DWORD PTR [esp],esi
c000f428:	e8 43 11 ff ff       	call   c0000570 <strlen>
c000f42d:	83 c4 10             	add    esp,0x10
c000f430:	40                   	inc    eax
c000f431:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000f438:	72 17                	jb     c000f451 <KeFormatDate(char*, int, int, int, int, bool)+0x15b>
c000f43a:	52                   	push   edx
c000f43b:	52                   	push   edx
c000f43c:	56                   	push   esi
c000f43d:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f444:	e8 f7 11 ff ff       	call   c0000640 <strcpy>
c000f449:	83 c4 10             	add    esp,0x10
c000f44c:	e9 8a 00 00 00       	jmp    c000f4db <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000f451:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000f458:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000f45f:	8d 48 ff             	lea    ecx,[eax-0x1]
c000f462:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f464:	eb 75                	jmp    c000f4db <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000f466:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000f46a:	89 ef                	mov    edi,ebp
c000f46c:	50                   	push   eax
c000f46d:	c1 ff 1f             	sar    edi,0x1f
c000f470:	50                   	push   eax
c000f471:	57                   	push   edi
c000f472:	55                   	push   ebp
c000f473:	e8 70 04 00 00       	call   c000f8e8 <KeGetDigitsInNumber(long long)>
c000f478:	83 c4 10             	add    esp,0x10
c000f47b:	48                   	dec    eax
c000f47c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f480:	75 1c                	jne    c000f49e <KeFormatDate(char*, int, int, int, int, bool)+0x1a8>
c000f482:	83 f9 44             	cmp    ecx,0x44
c000f485:	75 09                	jne    c000f490 <KeFormatDate(char*, int, int, int, int, bool)+0x19a>
c000f487:	80 3d 20 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f120,0x0
c000f48e:	eb 0c                	jmp    c000f49c <KeFormatDate(char*, int, int, int, int, bool)+0x1a6>
c000f490:	83 f9 4d             	cmp    ecx,0x4d
c000f493:	75 2b                	jne    c000f4c0 <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000f495:	80 3d 21 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f121,0x0
c000f49c:	74 22                	je     c000f4c0 <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000f49e:	89 e8                	mov    eax,ebp
c000f4a0:	b9 0a 00 00 00       	mov    ecx,0xa
c000f4a5:	99                   	cdq    
c000f4a6:	f7 f9                	idiv   ecx
c000f4a8:	89 d5                	mov    ebp,edx
c000f4aa:	99                   	cdq    
c000f4ab:	f7 f9                	idiv   ecx
c000f4ad:	83 c2 30             	add    edx,0x30
c000f4b0:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f4b4:	8d 55 30             	lea    edx,[ebp+0x30]
c000f4b7:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000f4bb:	e9 0d ff ff ff       	jmp    c000f3cd <KeFormatDate(char*, int, int, int, int, bool)+0xd7>
c000f4c0:	89 e8                	mov    eax,ebp
c000f4c2:	b9 0a 00 00 00       	mov    ecx,0xa
c000f4c7:	99                   	cdq    
c000f4c8:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f4cd:	f7 f9                	idiv   ecx
c000f4cf:	83 c2 30             	add    edx,0x30
c000f4d2:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f4d6:	e9 f7 fe ff ff       	jmp    c000f3d2 <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000f4db:	81 c4 ac 00 00 00    	add    esp,0xac
c000f4e1:	5b                   	pop    ebx
c000f4e2:	5e                   	pop    esi
c000f4e3:	5f                   	pop    edi
c000f4e4:	5d                   	pop    ebp
c000f4e5:	c3                   	ret    

c000f4e6 <KeFormatShortDate(char*, int, int, int, int)>:
c000f4e6:	83 ec 14             	sub    esp,0x14
c000f4e9:	6a 00                	push   0x0
c000f4eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4ff:	e8 f2 fd ff ff       	call   c000f2f6 <KeFormatDate(char*, int, int, int, int, bool)>
c000f504:	83 c4 2c             	add    esp,0x2c
c000f507:	c3                   	ret    

c000f508 <KeFormatLongDate(char*, int, int, int, int)>:
c000f508:	83 ec 14             	sub    esp,0x14
c000f50b:	6a 01                	push   0x1
c000f50d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f511:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f515:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f519:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f51d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f521:	e8 d0 fd ff ff       	call   c000f2f6 <KeFormatDate(char*, int, int, int, int, bool)>
c000f526:	83 c4 2c             	add    esp,0x2c
c000f529:	c3                   	ret    

c000f52a <KeSetLocale(klocale_t)>:
c000f52a:	57                   	push   edi
c000f52b:	b9 09 00 00 00       	mov    ecx,0x9
c000f530:	56                   	push   esi
c000f531:	bf 00 f1 02 c0       	mov    edi,0xc002f100
c000f536:	fc                   	cld    
c000f537:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f53b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f53d:	5e                   	pop    esi
c000f53e:	5f                   	pop    edi
c000f53f:	c3                   	ret    

c000f540 <KeInitialiseLocale()>:
c000f540:	57                   	push   edi
c000f541:	56                   	push   esi
c000f542:	83 ec 3c             	sub    esp,0x3c
c000f545:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000f54d:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000f555:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000f55d:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000f565:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000f56c:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000f574:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000f57c:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000f583:	68 22 43 02 c0       	push   0xc0024322
c000f588:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f58c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000f590:	50                   	push   eax
c000f591:	e8 aa 10 ff ff       	call   c0000640 <strcpy>
c000f596:	83 ec 20             	sub    esp,0x20
c000f599:	b9 09 00 00 00       	mov    ecx,0x9
c000f59e:	fc                   	cld    
c000f59f:	89 e7                	mov    edi,esp
c000f5a1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f5a3:	e8 82 ff ff ff       	call   c000f52a <KeSetLocale(klocale_t)>
c000f5a8:	83 c4 64             	add    esp,0x64
c000f5ab:	5e                   	pop    esi
c000f5ac:	5f                   	pop    edi
c000f5ad:	c3                   	ret    

c000f5ae <KeFormatCurrency(char*, int, long long, long long)>:
c000f5ae:	c3                   	ret    

c000f5af <KeFormatCurrency(char*, int, double)>:
c000f5af:	c3                   	ret    

c000f5b0 <KeFormatNumber(char*, long long, long long)>:
c000f5b0:	c3                   	ret    

c000f5b1 <KeFormatNumber(char*, double)>:
c000f5b1:	c3                   	ret    
c000f5b2:	66 90                	xchg   ax,ax

c000f5b4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000f5b4:	55                   	push   ebp
c000f5b5:	57                   	push   edi
c000f5b6:	56                   	push   esi
c000f5b7:	53                   	push   ebx
c000f5b8:	83 ec 5c             	sub    esp,0x5c
c000f5bb:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f5bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f5c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000f5c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f5cb:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000f5cf:	bb 0f 31 02 c0       	mov    ebx,0xc002310f
c000f5d4:	bd 11 00 00 00       	mov    ebp,0x11
c000f5d9:	89 d0                	mov    eax,edx
c000f5db:	83 e0 01             	and    eax,0x1
c000f5de:	74 10                	je     c000f5f0 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x3c>
c000f5e0:	8a 03                	mov    al,BYTE PTR [ebx]
c000f5e2:	88 02                	mov    BYTE PTR [edx],al
c000f5e4:	8d 52 01             	lea    edx,[edx+0x1]
c000f5e7:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000f5ea:	83 ed 01             	sub    ebp,0x1
c000f5ed:	8d 76 00             	lea    esi,[esi+0x0]
c000f5f0:	89 d0                	mov    eax,edx
c000f5f2:	83 e0 02             	and    eax,0x2
c000f5f5:	74 11                	je     c000f608 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000f5f7:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000f5fa:	66 89 02             	mov    WORD PTR [edx],ax
c000f5fd:	8d 52 02             	lea    edx,[edx+0x2]
c000f600:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000f603:	83 ed 02             	sub    ebp,0x2
c000f606:	66 90                	xchg   ax,ax
c000f608:	89 e8                	mov    eax,ebp
c000f60a:	c1 e8 02             	shr    eax,0x2
c000f60d:	fc                   	cld    
c000f60e:	89 d7                	mov    edi,edx
c000f610:	89 de                	mov    esi,ebx
c000f612:	89 c1                	mov    ecx,eax
c000f614:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f616:	89 f3                	mov    ebx,esi
c000f618:	89 fa                	mov    edx,edi
c000f61a:	b9 00 00 00 00       	mov    ecx,0x0
c000f61f:	89 e8                	mov    eax,ebp
c000f621:	83 e0 02             	and    eax,0x2
c000f624:	74 0e                	je     c000f634 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x80>
c000f626:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000f62a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000f62e:	8d 41 02             	lea    eax,[ecx+0x2]
c000f631:	89 c1                	mov    ecx,eax
c000f633:	90                   	nop
c000f634:	89 e8                	mov    eax,ebp
c000f636:	83 e0 01             	and    eax,0x1
c000f639:	74 09                	je     c000f644 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x90>
c000f63b:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000f63e:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000f641:	8d 76 00             	lea    esi,[esi+0x0]
c000f644:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000f648:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f64c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f650:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f654:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f658:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f65c:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000f661:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f665:	89 c2                	mov    edx,eax
c000f667:	c1 fa 1f             	sar    edx,0x1f
c000f66a:	52                   	push   edx
c000f66b:	50                   	push   eax
c000f66c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f670:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f674:	e8 bb 26 01 00       	call   c0021d34 <__udivdi3>
c000f679:	83 c4 10             	add    esp,0x10
c000f67c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f680:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f684:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f688:	80 f4 00             	xor    ah,0x0
c000f68b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f68f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f693:	80 f4 00             	xor    ah,0x0
c000f696:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f69a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000f69e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f6a2:	89 f8                	mov    eax,edi
c000f6a4:	09 f0                	or     eax,esi
c000f6a6:	74 04                	je     c000f6ac <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xf8>
c000f6a8:	eb b2                	jmp    c000f65c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa8>
c000f6aa:	66 90                	xchg   ax,ax
c000f6ac:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f6b0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f6b3:	90                   	nop
c000f6b4:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f6b8:	89 c1                	mov    ecx,eax
c000f6ba:	89 c3                	mov    ebx,eax
c000f6bc:	c1 fb 1f             	sar    ebx,0x1f
c000f6bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6c7:	53                   	push   ebx
c000f6c8:	51                   	push   ecx
c000f6c9:	52                   	push   edx
c000f6ca:	50                   	push   eax
c000f6cb:	e8 64 27 01 00       	call   c0021e34 <__umoddi3>
c000f6d0:	83 c4 10             	add    esp,0x10
c000f6d3:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000f6d8:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000f6dc:	01 c8                	add    eax,ecx
c000f6de:	8a 10                	mov    dl,BYTE PTR [eax]
c000f6e0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f6e4:	88 10                	mov    BYTE PTR [eax],dl
c000f6e6:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f6ea:	89 c2                	mov    edx,eax
c000f6ec:	c1 fa 1f             	sar    edx,0x1f
c000f6ef:	52                   	push   edx
c000f6f0:	50                   	push   eax
c000f6f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f6f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f6f9:	e8 36 26 01 00       	call   c0021d34 <__udivdi3>
c000f6fe:	83 c4 10             	add    esp,0x10
c000f701:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f705:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f709:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f70d:	80 f4 00             	xor    ah,0x0
c000f710:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f714:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f718:	80 f4 00             	xor    ah,0x0
c000f71b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f71f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f723:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f727:	89 f8                	mov    eax,edi
c000f729:	09 f0                	or     eax,esi
c000f72b:	74 03                	je     c000f730 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x17c>
c000f72d:	eb 85                	jmp    c000f6b4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x100>
c000f72f:	90                   	nop
c000f730:	90                   	nop
c000f731:	83 c4 5c             	add    esp,0x5c
c000f734:	5b                   	pop    ebx
c000f735:	5e                   	pop    esi
c000f736:	5f                   	pop    edi
c000f737:	5d                   	pop    ebp
c000f738:	c3                   	ret    
c000f739:	8d 76 00             	lea    esi,[esi+0x0]

c000f73c <KeBasedSignedIntegerToString(long long, char*, int)>:
c000f73c:	55                   	push   ebp
c000f73d:	57                   	push   edi
c000f73e:	56                   	push   esi
c000f73f:	53                   	push   ebx
c000f740:	83 ec 5c             	sub    esp,0x5c
c000f743:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f747:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f74b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000f74f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f753:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000f757:	bb 0f 31 02 c0       	mov    ebx,0xc002310f
c000f75c:	bd 11 00 00 00       	mov    ebp,0x11
c000f761:	89 d0                	mov    eax,edx
c000f763:	83 e0 01             	and    eax,0x1
c000f766:	74 10                	je     c000f778 <KeBasedSignedIntegerToString(long long, char*, int)+0x3c>
c000f768:	8a 03                	mov    al,BYTE PTR [ebx]
c000f76a:	88 02                	mov    BYTE PTR [edx],al
c000f76c:	8d 52 01             	lea    edx,[edx+0x1]
c000f76f:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000f772:	83 ed 01             	sub    ebp,0x1
c000f775:	8d 76 00             	lea    esi,[esi+0x0]
c000f778:	89 d0                	mov    eax,edx
c000f77a:	83 e0 02             	and    eax,0x2
c000f77d:	74 11                	je     c000f790 <KeBasedSignedIntegerToString(long long, char*, int)+0x54>
c000f77f:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000f782:	66 89 02             	mov    WORD PTR [edx],ax
c000f785:	8d 52 02             	lea    edx,[edx+0x2]
c000f788:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000f78b:	83 ed 02             	sub    ebp,0x2
c000f78e:	66 90                	xchg   ax,ax
c000f790:	89 e8                	mov    eax,ebp
c000f792:	c1 e8 02             	shr    eax,0x2
c000f795:	fc                   	cld    
c000f796:	89 d7                	mov    edi,edx
c000f798:	89 de                	mov    esi,ebx
c000f79a:	89 c1                	mov    ecx,eax
c000f79c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f79e:	89 f3                	mov    ebx,esi
c000f7a0:	89 fa                	mov    edx,edi
c000f7a2:	b9 00 00 00 00       	mov    ecx,0x0
c000f7a7:	89 e8                	mov    eax,ebp
c000f7a9:	83 e0 02             	and    eax,0x2
c000f7ac:	74 0e                	je     c000f7bc <KeBasedSignedIntegerToString(long long, char*, int)+0x80>
c000f7ae:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000f7b2:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000f7b6:	8d 41 02             	lea    eax,[ecx+0x2]
c000f7b9:	89 c1                	mov    ecx,eax
c000f7bb:	90                   	nop
c000f7bc:	89 e8                	mov    eax,ebp
c000f7be:	83 e0 01             	and    eax,0x1
c000f7c1:	74 09                	je     c000f7cc <KeBasedSignedIntegerToString(long long, char*, int)+0x90>
c000f7c3:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000f7c6:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000f7c9:	8d 76 00             	lea    esi,[esi+0x0]
c000f7cc:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000f7d0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f7d4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000f7d9:	79 1d                	jns    c000f7f8 <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000f7db:	f7 5c 24 18          	neg    DWORD PTR [esp+0x18]
c000f7df:	83 54 24 1c 00       	adc    DWORD PTR [esp+0x1c],0x0
c000f7e4:	f7 5c 24 1c          	neg    DWORD PTR [esp+0x1c]
c000f7e8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f7ec:	8d 50 01             	lea    edx,[eax+0x1]
c000f7ef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000f7f3:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000f7f6:	66 90                	xchg   ax,ax
c000f7f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f7fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f800:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f804:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f808:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000f80d:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f811:	89 c2                	mov    edx,eax
c000f813:	c1 fa 1f             	sar    edx,0x1f
c000f816:	52                   	push   edx
c000f817:	50                   	push   eax
c000f818:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f81c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f820:	e8 0f 25 01 00       	call   c0021d34 <__udivdi3>
c000f825:	83 c4 10             	add    esp,0x10
c000f828:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f82c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f830:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f834:	80 f4 00             	xor    ah,0x0
c000f837:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f83b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f83f:	80 f4 00             	xor    ah,0x0
c000f842:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f846:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000f84a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f84e:	89 f8                	mov    eax,edi
c000f850:	09 f0                	or     eax,esi
c000f852:	74 04                	je     c000f858 <KeBasedSignedIntegerToString(long long, char*, int)+0x11c>
c000f854:	eb b2                	jmp    c000f808 <KeBasedSignedIntegerToString(long long, char*, int)+0xcc>
c000f856:	66 90                	xchg   ax,ax
c000f858:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f85c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f85f:	90                   	nop
c000f860:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f864:	89 c1                	mov    ecx,eax
c000f866:	89 c3                	mov    ebx,eax
c000f868:	c1 fb 1f             	sar    ebx,0x1f
c000f86b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f86f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f873:	53                   	push   ebx
c000f874:	51                   	push   ecx
c000f875:	52                   	push   edx
c000f876:	50                   	push   eax
c000f877:	e8 38 23 01 00       	call   c0021bb4 <__moddi3>
c000f87c:	83 c4 10             	add    esp,0x10
c000f87f:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000f884:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000f888:	01 c8                	add    eax,ecx
c000f88a:	8a 10                	mov    dl,BYTE PTR [eax]
c000f88c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f890:	88 10                	mov    BYTE PTR [eax],dl
c000f892:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f896:	89 c2                	mov    edx,eax
c000f898:	c1 fa 1f             	sar    edx,0x1f
c000f89b:	52                   	push   edx
c000f89c:	50                   	push   eax
c000f89d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f8a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f8a5:	e8 be 21 01 00       	call   c0021a68 <__divdi3>
c000f8aa:	83 c4 10             	add    esp,0x10
c000f8ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f8b1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f8b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f8b9:	80 f4 00             	xor    ah,0x0
c000f8bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f8c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f8c4:	80 f4 00             	xor    ah,0x0
c000f8c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f8cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f8cf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8d3:	89 f8                	mov    eax,edi
c000f8d5:	09 f0                	or     eax,esi
c000f8d7:	74 03                	je     c000f8dc <KeBasedSignedIntegerToString(long long, char*, int)+0x1a0>
c000f8d9:	eb 85                	jmp    c000f860 <KeBasedSignedIntegerToString(long long, char*, int)+0x124>
c000f8db:	90                   	nop
c000f8dc:	90                   	nop
c000f8dd:	83 c4 5c             	add    esp,0x5c
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    
c000f8e5:	8d 76 00             	lea    esi,[esi+0x0]

c000f8e8 <KeGetDigitsInNumber(long long)>:
c000f8e8:	56                   	push   esi
c000f8e9:	53                   	push   ebx
c000f8ea:	83 ec 24             	sub    esp,0x24
c000f8ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f8f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f8f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f8f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f8fd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000f905:	8d 76 00             	lea    esi,[esi+0x0]
c000f908:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f90c:	80 f4 00             	xor    ah,0x0
c000f90f:	89 c3                	mov    ebx,eax
c000f911:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f915:	80 f4 00             	xor    ah,0x0
c000f918:	89 c6                	mov    esi,eax
c000f91a:	89 f0                	mov    eax,esi
c000f91c:	09 d8                	or     eax,ebx
c000f91e:	74 28                	je     c000f948 <KeGetDigitsInNumber(long long)+0x60>
c000f920:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f924:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f928:	6a 00                	push   0x0
c000f92a:	6a 0a                	push   0xa
c000f92c:	52                   	push   edx
c000f92d:	50                   	push   eax
c000f92e:	e8 35 21 01 00       	call   c0021a68 <__divdi3>
c000f933:	83 c4 10             	add    esp,0x10
c000f936:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f93a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f93e:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000f943:	eb c3                	jmp    c000f908 <KeGetDigitsInNumber(long long)+0x20>
c000f945:	8d 76 00             	lea    esi,[esi+0x0]
c000f948:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f94c:	83 c4 24             	add    esp,0x24
c000f94f:	5b                   	pop    ebx
c000f950:	5e                   	pop    esi
c000f951:	c3                   	ret    
c000f952:	66 90                	xchg   ax,ax

c000f954 <KeItoa(unsigned long long, char*)>:
c000f954:	83 ec 1c             	sub    esp,0x1c
c000f957:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f95b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f95f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f963:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f967:	6a 0a                	push   0xa
c000f969:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f96d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f971:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f975:	e8 3a fc ff ff       	call   c000f5b4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f97a:	83 c4 10             	add    esp,0x10
c000f97d:	90                   	nop
c000f97e:	83 c4 1c             	add    esp,0x1c
c000f981:	c3                   	ret    
c000f982:	66 90                	xchg   ax,ax

c000f984 <KeItoa(long long, char*)>:
c000f984:	83 ec 1c             	sub    esp,0x1c
c000f987:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f98b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f98f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f993:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f997:	6a 0a                	push   0xa
c000f999:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f99d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f9a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f9a5:	e8 92 fd ff ff       	call   c000f73c <KeBasedSignedIntegerToString(long long, char*, int)>
c000f9aa:	83 c4 10             	add    esp,0x10
c000f9ad:	90                   	nop
c000f9ae:	83 c4 1c             	add    esp,0x1c
c000f9b1:	c3                   	ret    
c000f9b2:	66 90                	xchg   ax,ax

c000f9b4 <KeXtoa(unsigned long long, char*)>:
c000f9b4:	83 ec 1c             	sub    esp,0x1c
c000f9b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f9bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f9bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f9c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f9c7:	6a 10                	push   0x10
c000f9c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f9cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f9d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f9d5:	e8 da fb ff ff       	call   c000f5b4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f9da:	83 c4 10             	add    esp,0x10
c000f9dd:	90                   	nop
c000f9de:	83 c4 1c             	add    esp,0x1c
c000f9e1:	c3                   	ret    

c000f9e2 <sbrk>:
c000f9e2:	55                   	push   ebp
c000f9e3:	57                   	push   edi
c000f9e4:	56                   	push   esi
c000f9e5:	53                   	push   ebx
c000f9e6:	83 ec 1c             	sub    esp,0x1c
c000f9e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9ed:	85 c0                	test   eax,eax
c000f9ef:	74 61                	je     c000fa52 <sbrk+0x70>
c000f9f1:	78 66                	js     c000fa59 <sbrk+0x77>
c000f9f3:	8b 15 30 6d 02 c0    	mov    edx,DWORD PTR ds:0xc0026d30
c000f9f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f9fd:	05 ff 0f 00 00       	add    eax,0xfff
c000fa02:	89 c5                	mov    ebp,eax
c000fa04:	78 6b                	js     c000fa71 <sbrk+0x8f>
c000fa06:	c1 fd 0c             	sar    ebp,0xc
c000fa09:	bb 00 00 00 00       	mov    ebx,0x0
c000fa0e:	8b 35 50 f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f250
c000fa14:	8b 3d 30 6d 02 c0    	mov    edi,DWORD PTR ds:0xc0026d30
c000fa1a:	e8 bb 07 00 00       	call   c00101da <Phys::allocatePage()>
c000fa1f:	68 01 04 00 00       	push   0x401
c000fa24:	57                   	push   edi
c000fa25:	50                   	push   eax
c000fa26:	56                   	push   esi
c000fa27:	e8 52 42 00 00       	call   c0013c7e <VAS::mapPage(unsigned long, unsigned long, int)>
c000fa2c:	81 05 30 6d 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0026d30,0x1000
c000fa36:	83 c3 01             	add    ebx,0x1
c000fa39:	83 c4 10             	add    esp,0x10
c000fa3c:	39 dd                	cmp    ebp,ebx
c000fa3e:	75 ce                	jne    c000fa0e <sbrk+0x2c>
c000fa40:	0f 20 d8             	mov    eax,cr3
c000fa43:	0f 22 d8             	mov    cr3,eax
c000fa46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa4a:	83 c4 1c             	add    esp,0x1c
c000fa4d:	5b                   	pop    ebx
c000fa4e:	5e                   	pop    esi
c000fa4f:	5f                   	pop    edi
c000fa50:	5d                   	pop    ebp
c000fa51:	c3                   	ret    
c000fa52:	a1 30 6d 02 c0       	mov    eax,ds:0xc0026d30
c000fa57:	eb f1                	jmp    c000fa4a <sbrk+0x68>
c000fa59:	83 ec 08             	sub    esp,0x8
c000fa5c:	50                   	push   eax
c000fa5d:	68 28 43 02 c0       	push   0xc0024328
c000fa62:	e8 15 75 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000fa67:	83 c4 10             	add    esp,0x10
c000fa6a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000fa6f:	eb d9                	jmp    c000fa4a <sbrk+0x68>
c000fa71:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c000fa77:	eb 8d                	jmp    c000fa06 <sbrk+0x24>

c000fa79 <sbrk_thunk>:
c000fa79:	83 ec 0c             	sub    esp,0xc
c000fa7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa80:	3d ff bf 00 00       	cmp    eax,0xbfff
c000fa85:	7f 10                	jg     c000fa97 <sbrk_thunk+0x1e>
c000fa87:	83 ec 0c             	sub    esp,0xc
c000fa8a:	50                   	push   eax
c000fa8b:	e8 52 ff ff ff       	call   c000f9e2 <sbrk>
c000fa90:	83 c4 10             	add    esp,0x10
c000fa93:	83 c4 0c             	add    esp,0xc
c000fa96:	c3                   	ret    
c000fa97:	83 ec 08             	sub    esp,0x8
c000fa9a:	50                   	push   eax
c000fa9b:	68 58 43 02 c0       	push   0xc0024358
c000faa0:	e8 d7 74 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000faa5:	83 c4 10             	add    esp,0x10
c000faa8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000faad:	eb e4                	jmp    c000fa93 <sbrk_thunk+0x1a>

c000faaf <mmap>:
c000faaf:	55                   	push   ebp
c000fab0:	57                   	push   edi
c000fab1:	56                   	push   esi
c000fab2:	53                   	push   ebx
c000fab3:	83 ec 18             	sub    esp,0x18
c000fab6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000faba:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000fac0:	89 fb                	mov    ebx,edi
c000fac2:	c1 eb 0c             	shr    ebx,0xc
c000fac5:	53                   	push   ebx
c000fac6:	e8 d0 3a 00 00       	call   c001359b <Virt::allocateKernelVirtualPages(int)>
c000facb:	89 c5                	mov    ebp,eax
c000facd:	83 c4 10             	add    esp,0x10
c000fad0:	85 db                	test   ebx,ebx
c000fad2:	7e 2f                	jle    c000fb03 <mmap+0x54>
c000fad4:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000fada:	01 c7                	add    edi,eax
c000fadc:	89 c3                	mov    ebx,eax
c000fade:	8b 35 50 f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f250
c000fae4:	e8 f1 06 00 00       	call   c00101da <Phys::allocatePage()>
c000fae9:	68 01 04 00 00       	push   0x401
c000faee:	53                   	push   ebx
c000faef:	50                   	push   eax
c000faf0:	56                   	push   esi
c000faf1:	e8 88 41 00 00       	call   c0013c7e <VAS::mapPage(unsigned long, unsigned long, int)>
c000faf6:	81 c3 00 10 00 00    	add    ebx,0x1000
c000fafc:	83 c4 10             	add    esp,0x10
c000faff:	39 fb                	cmp    ebx,edi
c000fb01:	75 db                	jne    c000fade <mmap+0x2f>
c000fb03:	89 e8                	mov    eax,ebp
c000fb05:	83 c4 0c             	add    esp,0xc
c000fb08:	5b                   	pop    ebx
c000fb09:	5e                   	pop    esi
c000fb0a:	5f                   	pop    edi
c000fb0b:	5d                   	pop    ebp
c000fb0c:	c3                   	ret    

c000fb0d <munmap>:
c000fb0d:	83 ec 18             	sub    esp,0x18
c000fb10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb14:	e8 8a 3d 00 00       	call   c00138a3 <Virt::freeKernelVirtualPages(unsigned long)>
c000fb19:	b8 00 00 00 00       	mov    eax,0x0
c000fb1e:	83 c4 1c             	add    esp,0x1c
c000fb21:	c3                   	ret    

c000fb22 <liballoc_lock()>:
c000fb22:	fa                   	cli    
c000fb23:	83 05 30 fa 02 c0 01 	add    DWORD PTR ds:0xc002fa30,0x1
c000fb2a:	b8 00 00 00 00       	mov    eax,0x0
c000fb2f:	c3                   	ret    

c000fb30 <liballoc_unlock()>:
c000fb30:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000fb38:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c000fb3f:	75 01                	jne    c000fb42 <liballoc_unlock()+0x12>
c000fb41:	fb                   	sti    
c000fb42:	b8 00 00 00 00       	mov    eax,0x0
c000fb47:	c3                   	ret    

c000fb48 <liballoc_alloc(int)>:
c000fb48:	83 ec 10             	sub    esp,0x10
c000fb4b:	6a 01                	push   0x1
c000fb4d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fb51:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000fb57:	e8 26 42 00 00       	call   c0013d82 <VAS::allocatePages(int, int)>
c000fb5c:	83 c4 1c             	add    esp,0x1c
c000fb5f:	c3                   	ret    

c000fb60 <liballoc_free(void*, int)>:
c000fb60:	83 ec 14             	sub    esp,0x14
c000fb63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fb67:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c000fb6d:	e8 6e 3e 00 00       	call   c00139e0 <VAS::freeAllocatedPages(unsigned long)>
c000fb72:	b8 00 00 00 00       	mov    eax,0x0
c000fb77:	83 c4 1c             	add    esp,0x1c
c000fb7a:	c3                   	ret    

c000fb7b <realloc>:
c000fb7b:	83 ec 14             	sub    esp,0x14
c000fb7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb86:	e8 cc 1b ff ff       	call   c0001757 <dlrealloc>
c000fb8b:	83 c4 1c             	add    esp,0x1c
c000fb8e:	c3                   	ret    

c000fb8f <malloc>:
c000fb8f:	83 ec 18             	sub    esp,0x18
c000fb92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb96:	e8 7f 16 ff ff       	call   c000121a <dlmalloc>
c000fb9b:	83 c4 1c             	add    esp,0x1c
c000fb9e:	c3                   	ret    

c000fb9f <free>:
c000fb9f:	83 ec 18             	sub    esp,0x18
c000fba2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fba6:	e8 a8 11 ff ff       	call   c0000d53 <dlfree>
c000fbab:	83 c4 1c             	add    esp,0x1c
c000fbae:	c3                   	ret    

c000fbaf <rfree>:
c000fbaf:	83 ec 18             	sub    esp,0x18
c000fbb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fbb6:	e8 98 11 ff ff       	call   c0000d53 <dlfree>
c000fbbb:	83 c4 1c             	add    esp,0x1c
c000fbbe:	c3                   	ret    

c000fbbf <calloc>:
c000fbbf:	56                   	push   esi
c000fbc0:	53                   	push   ebx
c000fbc1:	83 ec 10             	sub    esp,0x10
c000fbc4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fbc8:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000fbcd:	53                   	push   ebx
c000fbce:	e8 bc ff ff ff       	call   c000fb8f <malloc>
c000fbd3:	89 c6                	mov    esi,eax
c000fbd5:	83 c4 0c             	add    esp,0xc
c000fbd8:	53                   	push   ebx
c000fbd9:	6a 00                	push   0x0
c000fbdb:	50                   	push   eax
c000fbdc:	e8 0f 09 ff ff       	call   c00004f0 <memset>
c000fbe1:	89 f0                	mov    eax,esi
c000fbe3:	83 c4 14             	add    esp,0x14
c000fbe6:	5b                   	pop    ebx
c000fbe7:	5e                   	pop    esi
c000fbe8:	c3                   	ret    
c000fbe9:	66 90                	xchg   ax,ax
c000fbeb:	90                   	nop

c000fbec <KeMailboxTryPost(Mailbox*, void*)>:
c000fbec:	83 ec 10             	sub    esp,0x10
c000fbef:	fa                   	cli    
c000fbf0:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fbf5:	83 c0 01             	add    eax,0x1
c000fbf8:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c000fbfd:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fc02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc09:	85 c0                	test   eax,eax
c000fc0b:	75 23                	jne    c000fc30 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000fc0d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc11:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fc15:	89 10                	mov    DWORD PTR [eax],edx
c000fc17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc1e:	8d 50 01             	lea    edx,[eax+0x1]
c000fc21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc25:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fc28:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000fc2d:	8d 76 00             	lea    esi,[esi+0x0]
c000fc30:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000fc38:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fc3d:	85 c0                	test   eax,eax
c000fc3f:	75 03                	jne    c000fc44 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000fc41:	fb                   	sti    
c000fc42:	66 90                	xchg   ax,ax
c000fc44:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fc48:	83 c4 10             	add    esp,0x10
c000fc4b:	c3                   	ret    

c000fc4c <KeMailboxTryGet(Mailbox*, void**)>:
c000fc4c:	83 ec 10             	sub    esp,0x10
c000fc4f:	fa                   	cli    
c000fc50:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fc55:	83 c0 01             	add    eax,0x1
c000fc58:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c000fc5d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fc62:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc69:	83 f8 01             	cmp    eax,0x1
c000fc6c:	75 22                	jne    c000fc90 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000fc6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc72:	8b 10                	mov    edx,DWORD PTR [eax]
c000fc74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fc78:	89 10                	mov    DWORD PTR [eax],edx
c000fc7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc81:	8d 50 ff             	lea    edx,[eax-0x1]
c000fc84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fc8b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000fc90:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000fc98:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fc9d:	85 c0                	test   eax,eax
c000fc9f:	75 03                	jne    c000fca4 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000fca1:	fb                   	sti    
c000fca2:	66 90                	xchg   ax,ax
c000fca4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fca8:	83 c4 10             	add    esp,0x10
c000fcab:	c3                   	ret    

c000fcac <KeMailboxCreate()>:
c000fcac:	83 ec 1c             	sub    esp,0x1c
c000fcaf:	83 ec 0c             	sub    esp,0xc
c000fcb2:	6a 08                	push   0x8
c000fcb4:	e8 d6 fe ff ff       	call   c000fb8f <malloc>
c000fcb9:	83 c4 10             	add    esp,0x10
c000fcbc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fcc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcc4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fcca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcce:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fcd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcd9:	83 c4 1c             	add    esp,0x1c
c000fcdc:	c3                   	ret    
c000fcdd:	8d 76 00             	lea    esi,[esi+0x0]

c000fce0 <KeMailboxPost(Mailbox*, void*)>:
c000fce0:	83 ec 1c             	sub    esp,0x1c
c000fce3:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fce8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fcec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fcf0:	e8 f7 fe ff ff       	call   c000fbec <KeMailboxTryPost(Mailbox*, void*)>
c000fcf5:	83 c4 08             	add    esp,0x8
c000fcf8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fcfc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fd00:	83 f0 01             	xor    eax,0x1
c000fd03:	0f b6 c0             	movzx  eax,al
c000fd06:	85 c0                	test   eax,eax
c000fd08:	74 26                	je     c000fd30 <KeMailboxPost(Mailbox*, void*)+0x50>
c000fd0a:	fa                   	cli    
c000fd0b:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fd10:	83 c0 01             	add    eax,0x1
c000fd13:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c000fd18:	e8 f7 74 00 00       	call   c0017214 <schedule()>
c000fd1d:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000fd25:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fd2a:	85 c0                	test   eax,eax
c000fd2c:	75 02                	jne    c000fd30 <KeMailboxPost(Mailbox*, void*)+0x50>
c000fd2e:	fb                   	sti    
c000fd2f:	90                   	nop
c000fd30:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fd35:	85 c0                	test   eax,eax
c000fd37:	75 03                	jne    c000fd3c <KeMailboxPost(Mailbox*, void*)+0x5c>
c000fd39:	eb ad                	jmp    c000fce8 <KeMailboxPost(Mailbox*, void*)+0x8>
c000fd3b:	90                   	nop
c000fd3c:	90                   	nop
c000fd3d:	83 c4 1c             	add    esp,0x1c
c000fd40:	c3                   	ret    
c000fd41:	8d 76 00             	lea    esi,[esi+0x0]

c000fd44 <KeMailboxGet(Mailbox*, void**)>:
c000fd44:	83 ec 1c             	sub    esp,0x1c
c000fd47:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fd4c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd50:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd54:	e8 f3 fe ff ff       	call   c000fc4c <KeMailboxTryGet(Mailbox*, void**)>
c000fd59:	83 c4 08             	add    esp,0x8
c000fd5c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fd60:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fd64:	83 f0 01             	xor    eax,0x1
c000fd67:	0f b6 c0             	movzx  eax,al
c000fd6a:	85 c0                	test   eax,eax
c000fd6c:	74 26                	je     c000fd94 <KeMailboxGet(Mailbox*, void**)+0x50>
c000fd6e:	fa                   	cli    
c000fd6f:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fd74:	83 c0 01             	add    eax,0x1
c000fd77:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c000fd7c:	e8 93 74 00 00       	call   c0017214 <schedule()>
c000fd81:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c000fd89:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c000fd8e:	85 c0                	test   eax,eax
c000fd90:	75 02                	jne    c000fd94 <KeMailboxGet(Mailbox*, void**)+0x50>
c000fd92:	fb                   	sti    
c000fd93:	90                   	nop
c000fd94:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fd99:	85 c0                	test   eax,eax
c000fd9b:	75 03                	jne    c000fda0 <KeMailboxGet(Mailbox*, void**)+0x5c>
c000fd9d:	eb ad                	jmp    c000fd4c <KeMailboxGet(Mailbox*, void**)+0x8>
c000fd9f:	90                   	nop
c000fda0:	90                   	nop
c000fda1:	83 c4 1c             	add    esp,0x1c
c000fda4:	c3                   	ret    
c000fda5:	8d 76 00             	lea    esi,[esi+0x0]

c000fda8 <KeMailboxDestroy(Mailbox*)>:
c000fda8:	83 ec 0c             	sub    esp,0xc
c000fdab:	83 ec 0c             	sub    esp,0xc
c000fdae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdb2:	e8 e8 fd ff ff       	call   c000fb9f <free>
c000fdb7:	83 c4 10             	add    esp,0x10
c000fdba:	90                   	nop
c000fdbb:	83 c4 0c             	add    esp,0xc
c000fdbe:	c3                   	ret    

c000fdbf <KeFirstTask()>:
c000fdbf:	53                   	push   ebx
c000fdc0:	83 ec 08             	sub    esp,0x8
c000fdc3:	fb                   	sti    
c000fdc4:	e8 e8 a1 00 00       	call   c0019fb1 <HalEnableNMI()>
c000fdc9:	83 ec 0c             	sub    esp,0xc
c000fdcc:	68 67 43 02 c0       	push   0xc0024367
c000fdd1:	e8 53 d5 ff ff       	call   c000d329 <KeSetBootMessage(char const*)>
c000fdd6:	c7 04 24 c4 07 00 00 	mov    DWORD PTR [esp],0x7c4
c000fddd:	e8 ad fd ff ff       	call   c000fb8f <malloc>
c000fde2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000fde9:	89 c3                	mov    ebx,eax
c000fdeb:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c000fdf0:	50                   	push   eax
c000fdf1:	68 80 43 02 c0       	push   0xc0024380
c000fdf6:	6a 01                	push   0x1
c000fdf8:	53                   	push   ebx
c000fdf9:	e8 16 6f 00 00       	call   c0016d14 <Process::Process(bool, char const*, Process*, char**)>
c000fdfe:	83 c4 20             	add    esp,0x20
c000fe01:	68 ff 00 00 00       	push   0xff
c000fe06:	6a 00                	push   0x0
c000fe08:	68 cd ed 00 c0       	push   0xc000edcd
c000fe0d:	53                   	push   ebx
c000fe0e:	e8 41 71 00 00       	call   c0016f54 <Process::createThread(void (*)(void*), void*, int)>
c000fe13:	8b 15 58 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa58
c000fe19:	6a 7a                	push   0x7a
c000fe1b:	6a 00                	push   0x0
c000fe1d:	68 fc 78 01 c0       	push   0xc00178fc
c000fe22:	52                   	push   edx
c000fe23:	e8 2c 71 00 00       	call   c0016f54 <Process::createThread(void (*)(void*), void*, int)>
c000fe28:	83 c4 14             	add    esp,0x14
c000fe2b:	a3 10 fa 02 c0       	mov    ds:0xc002fa10,eax
c000fe30:	68 08 44 02 c0       	push   0xc0024408
c000fe35:	e8 ef d4 ff ff       	call   c000d329 <KeSetBootMessage(char const*)>
c000fe3a:	c6 05 cd d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0cd,0x1
c000fe41:	e8 97 0c 00 00       	call   c0010add <KeInitRand()>
c000fe46:	e8 93 7e 00 00       	call   c0017cde <Vm::initialise8086()>
c000fe4b:	e8 f8 7f ff ff       	call   c0007e48 <Fs::initVFS()>
c000fe50:	c7 04 24 8d 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f8d
c000fe57:	e8 cd d4 ff ff       	call   c000d329 <KeSetBootMessage(char const*)>
c000fe5c:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c000fe61:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c000fe67:	8b 10                	mov    edx,DWORD PTR [eax]
c000fe69:	6a 00                	push   0x0
c000fe6b:	6a 00                	push   0x0
c000fe6d:	6a 00                	push   0x0
c000fe6f:	50                   	push   eax
c000fe70:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fe73:	83 c4 14             	add    esp,0x14
c000fe76:	68 08 44 02 c0       	push   0xc0024408
c000fe7b:	e8 a9 d4 ff ff       	call   c000d329 <KeSetBootMessage(char const*)>
c000fe80:	e8 a8 77 ff ff       	call   c000762d <KeInitialiseSymlinks()>
c000fe85:	e8 ec e8 ff ff       	call   c000e776 <KeLoadSystemEnv()>
c000fe8a:	e8 93 0a 00 00       	call   c0010922 <KeSetupPowerManager()>
c000fe8f:	c7 04 24 8d 43 02 c0 	mov    DWORD PTR [esp],0xc002438d
c000fe96:	e8 8e d4 ff ff       	call   c000d329 <KeSetBootMessage(char const*)>
c000fe9b:	59                   	pop    ecx
c000fe9c:	8b 1d c8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0c8
c000fea2:	58                   	pop    eax
c000fea3:	6a 01                	push   0x1
c000fea5:	68 9e 43 02 c0       	push   0xc002439e
c000feaa:	e8 bf 67 00 00       	call   c001666e <Thr::loadDLL(char const*, bool)>
c000feaf:	5a                   	pop    edx
c000feb0:	59                   	pop    ecx
c000feb1:	53                   	push   ebx
c000feb2:	50                   	push   eax
c000feb3:	e8 08 6a 00 00       	call   c00168c0 <Thr::executeDLL(unsigned long, void*)>
c000feb8:	83 c4 10             	add    esp,0x10
c000febb:	83 ec 0c             	sub    esp,0xc
c000febe:	6a 02                	push   0x2
c000fec0:	e8 0f 74 00 00       	call   c00172d4 <blockTask(TaskState)>
c000fec5:	83 c4 10             	add    esp,0x10
c000fec8:	eb f1                	jmp    c000febb <KeFirstTask()+0xfc>

c000feca <KeEntryPoint>:
c000feca:	57                   	push   edi
c000fecb:	bf f9 03 00 00       	mov    edi,0x3f9
c000fed0:	56                   	push   esi
c000fed1:	31 f6                	xor    esi,esi
c000fed3:	53                   	push   ebx
c000fed4:	83 ec 20             	sub    esp,0x20
c000fed7:	e8 10 d4 ff ff       	call   c000d2ec <KeInitialiseBootConfigurationFlags()>
c000fedc:	89 f0                	mov    eax,esi
c000fede:	89 fa                	mov    edx,edi
c000fee0:	ee                   	out    dx,al
c000fee1:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fee6:	b0 80                	mov    al,0x80
c000fee8:	89 da                	mov    edx,ebx
c000feea:	ee                   	out    dx,al
c000feeb:	b1 03                	mov    cl,0x3
c000feed:	ba f8 03 00 00       	mov    edx,0x3f8
c000fef2:	88 c8                	mov    al,cl
c000fef4:	ee                   	out    dx,al
c000fef5:	89 f0                	mov    eax,esi
c000fef7:	89 fa                	mov    edx,edi
c000fef9:	ee                   	out    dx,al
c000fefa:	88 c8                	mov    al,cl
c000fefc:	89 da                	mov    edx,ebx
c000fefe:	ee                   	out    dx,al
c000feff:	b0 c7                	mov    al,0xc7
c000ff01:	ba fa 03 00 00       	mov    edx,0x3fa
c000ff06:	ee                   	out    dx,al
c000ff07:	b0 0b                	mov    al,0xb
c000ff09:	ba fc 03 00 00       	mov    edx,0x3fc
c000ff0e:	ee                   	out    dx,al
c000ff0f:	83 ec 0c             	sub    esp,0xc
c000ff12:	68 ba 43 02 c0       	push   0xc00243ba
c000ff17:	e8 60 70 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000ff1c:	e8 d9 d3 ff ff       	call   c000d2fa <KeDisplaySplashScreen()>
c000ff21:	a1 24 05 00 00       	mov    eax,ds:0x524
c000ff26:	05 ff 0f 00 00       	add    eax,0xfff
c000ff2b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ff30:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff33:	e8 33 04 00 00       	call   c001036b <Phys::physicalMemorySetup(unsigned int)>
c000ff38:	e8 3c 38 00 00       	call   c0013779 <Virt::virtualMemorySetup()>
c000ff3d:	e8 e4 d2 ff ff       	call   c000d226 <KeInitialiseAtexit()>
c000ff42:	58                   	pop    eax
c000ff43:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000ff47:	53                   	push   ebx
c000ff48:	e8 13 3b 00 00       	call   c0013a60 <VAS::VAS()>
c000ff4d:	89 1d 50 f2 02 c0    	mov    DWORD PTR ds:0xc002f250,ebx
c000ff53:	e8 f6 1f 01 00       	call   c0021f4e <_init>
c000ff58:	c7 04 24 d1 43 02 c0 	mov    DWORD PTR [esp],0xc00243d1
c000ff5f:	e8 c5 d3 ff ff       	call   c000d329 <KeSetBootMessage(char const*)>
c000ff64:	c7 04 24 68 01 00 00 	mov    DWORD PTR [esp],0x168
c000ff6b:	e8 1f fc ff ff       	call   c000fb8f <malloc>
c000ff70:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff73:	89 c6                	mov    esi,eax
c000ff75:	e8 3e e2 ff ff       	call   c000e1b8 <Computer::Computer()>
c000ff7a:	8b 15 50 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f250
c000ff80:	89 35 c8 d0 02 c0    	mov    DWORD PTR ds:0xc002d0c8,esi
c000ff86:	52                   	push   edx
c000ff87:	6a 00                	push   0x0
c000ff89:	6a 00                	push   0x0
c000ff8b:	56                   	push   esi
c000ff8c:	e8 6b e2 ff ff       	call   c000e1fc <Computer::open(int, int, void*)>
c000ff91:	83 c4 14             	add    esp,0x14
c000ff94:	68 2c 44 02 c0       	push   0xc002442c
c000ff99:	e8 8b d3 ff ff       	call   c000d329 <KeSetBootMessage(char const*)>
c000ff9e:	e8 6e a7 00 00       	call   c001a711 <HalInitialiseCoprocessor()>
c000ffa3:	c7 04 24 eb 43 02 c0 	mov    DWORD PTR [esp],0xc00243eb
c000ffaa:	e8 7a d3 ff ff       	call   c000d329 <KeSetBootMessage(char const*)>
c000ffaf:	c7 04 24 bf fd 00 c0 	mov    DWORD PTR [esp],0xc000fdbf
c000ffb6:	e8 11 71 00 00       	call   c00170cc <setupMultitasking(void (*)())>
c000ffbb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffbe:	e8 53 3b 00 00       	call   c0013b16 <VAS::~VAS()>
c000ffc3:	83 c4 30             	add    esp,0x30
c000ffc6:	5b                   	pop    ebx
c000ffc7:	5e                   	pop    esi
c000ffc8:	5f                   	pop    edi
c000ffc9:	c3                   	ret    
c000ffca:	66 90                	xchg   ax,ax

c000ffcc <Mutex::Mutex()>:
c000ffcc:	83 ec 0c             	sub    esp,0xc
c000ffcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffd3:	83 ec 08             	sub    esp,0x8
c000ffd6:	6a 01                	push   0x1
c000ffd8:	50                   	push   eax
c000ffd9:	e8 1a 0d 00 00       	call   c0010cf8 <Semaphore::Semaphore(int)>
c000ffde:	83 c4 10             	add    esp,0x10
c000ffe1:	90                   	nop
c000ffe2:	83 c4 0c             	add    esp,0xc
c000ffe5:	c3                   	ret    

c000ffe6 <KePanic(char const*)>:
c000ffe6:	c6 05 24 f1 02 c0 01 	mov    BYTE PTR ds:0xc002f124,0x1
c000ffed:	e9 a3 a7 00 00       	jmp    c001a795 <HalPanic(char const*)>

c000fff2 <Phys::allocateDMA(unsigned long)>:
c000fff2:	55                   	push   ebp
c000fff3:	31 ed                	xor    ebp,ebp
c000fff5:	57                   	push   edi
c000fff6:	56                   	push   esi
c000fff7:	53                   	push   ebx
c000fff8:	31 db                	xor    ebx,ebx
c000fffa:	83 ec 1c             	sub    esp,0x1c
c000fffd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010001:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010009:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c001000f:	31 c0                	xor    eax,eax
c0010011:	c1 ef 0c             	shr    edi,0xc
c0010014:	eb 1b                	jmp    c0010031 <Phys::allocateDMA(unsigned long)+0x3f>
c0010016:	85 c0                	test   eax,eax
c0010018:	75 06                	jne    c0010020 <Phys::allocateDMA(unsigned long)+0x2e>
c001001a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001001e:	89 dd                	mov    ebp,ebx
c0010020:	8d 70 01             	lea    esi,[eax+0x1]
c0010023:	39 f7                	cmp    edi,esi
c0010025:	74 37                	je     c001005e <Phys::allocateDMA(unsigned long)+0x6c>
c0010027:	89 f0                	mov    eax,esi
c0010029:	83 c3 01             	add    ebx,0x1
c001002c:	83 fb 0f             	cmp    ebx,0xf
c001002f:	7f 13                	jg     c0010044 <Phys::allocateDMA(unsigned long)+0x52>
c0010031:	80 bb 40 f1 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd0ec0],0x0
c0010038:	74 dc                	je     c0010016 <Phys::allocateDMA(unsigned long)+0x24>
c001003a:	31 c0                	xor    eax,eax
c001003c:	83 c3 01             	add    ebx,0x1
c001003f:	83 fb 0f             	cmp    ebx,0xf
c0010042:	7e ed                	jle    c0010031 <Phys::allocateDMA(unsigned long)+0x3f>
c0010044:	83 ec 0c             	sub    esp,0xc
c0010047:	68 50 44 02 c0       	push   0xc0024450
c001004c:	e8 95 ff ff ff       	call   c000ffe6 <KePanic(char const*)>
c0010051:	83 c4 10             	add    esp,0x10
c0010054:	31 c0                	xor    eax,eax
c0010056:	83 c4 1c             	add    esp,0x1c
c0010059:	5b                   	pop    ebx
c001005a:	5e                   	pop    esi
c001005b:	5f                   	pop    edi
c001005c:	5d                   	pop    ebp
c001005d:	c3                   	ret    
c001005e:	89 e9                	mov    ecx,ebp
c0010060:	c1 f9 04             	sar    ecx,0x4
c0010063:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0010067:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c001006b:	89 ca                	mov    edx,ecx
c001006d:	83 ea 01             	sub    edx,0x1
c0010070:	79 03                	jns    c0010075 <Phys::allocateDMA(unsigned long)+0x83>
c0010072:	8d 51 0e             	lea    edx,[ecx+0xe]
c0010075:	c1 fa 04             	sar    edx,0x4
c0010078:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c001007c:	74 08                	je     c0010086 <Phys::allocateDMA(unsigned long)+0x94>
c001007e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0010082:	31 c0                	xor    eax,eax
c0010084:	eb b6                	jmp    c001003c <Phys::allocateDMA(unsigned long)+0x4a>
c0010086:	85 f6                	test   esi,esi
c0010088:	74 17                	je     c00100a1 <Phys::allocateDMA(unsigned long)+0xaf>
c001008a:	8d 95 40 f1 02 c0    	lea    edx,[ebp-0x3ffd0ec0]
c0010090:	8d 84 05 41 f1 02 c0 	lea    eax,[ebp+eax*1-0x3ffd0ebf]
c0010097:	c6 02 01             	mov    BYTE PTR [edx],0x1
c001009a:	83 c2 01             	add    edx,0x1
c001009d:	39 d0                	cmp    eax,edx
c001009f:	75 f6                	jne    c0010097 <Phys::allocateDMA(unsigned long)+0xa5>
c00100a1:	a1 38 f1 02 c0       	mov    eax,ds:0xc002f138
c00100a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00100aa:	01 f8                	add    eax,edi
c00100ac:	85 d2                	test   edx,edx
c00100ae:	a3 38 f1 02 c0       	mov    ds:0xc002f138,eax
c00100b3:	74 17                	je     c00100cc <Phys::allocateDMA(unsigned long)+0xda>
c00100b5:	83 ec 0c             	sub    esp,0xc
c00100b8:	68 50 44 02 c0       	push   0xc0024450
c00100bd:	e8 24 ff ff ff       	call   c000ffe6 <KePanic(char const*)>
c00100c2:	83 c4 10             	add    esp,0x10
c00100c5:	89 f0                	mov    eax,esi
c00100c7:	e9 5d ff ff ff       	jmp    c0010029 <Phys::allocateDMA(unsigned long)+0x37>
c00100cc:	c1 e5 0c             	shl    ebp,0xc
c00100cf:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00100d5:	e9 7c ff ff ff       	jmp    c0010056 <Phys::allocateDMA(unsigned long)+0x64>

c00100da <Phys::freeDMA(unsigned long, unsigned long)>:
c00100da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00100de:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00100e4:	a1 38 f1 02 c0       	mov    eax,ds:0xc002f138
c00100e9:	c1 ea 0c             	shr    edx,0xc
c00100ec:	29 d0                	sub    eax,edx
c00100ee:	a3 38 f1 02 c0       	mov    ds:0xc002f138,eax
c00100f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100f7:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00100fc:	c1 e8 0c             	shr    eax,0xc
c00100ff:	85 d2                	test   edx,edx
c0010101:	74 11                	je     c0010114 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0010103:	05 40 f1 02 c0       	add    eax,0xc002f140
c0010108:	01 c2                	add    edx,eax
c001010a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001010d:	83 c0 01             	add    eax,0x1
c0010110:	39 d0                	cmp    eax,edx
c0010112:	75 f6                	jne    c001010a <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0010114:	c3                   	ret    

c0010115 <Phys::setPageState(unsigned long, bool)>:
c0010115:	57                   	push   edi
c0010116:	56                   	push   esi
c0010117:	8b 35 34 6d 02 c0    	mov    esi,DWORD PTR ds:0xc0026d34
c001011d:	53                   	push   ebx
c001011e:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0010123:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010127:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001012b:	0f b6 c0             	movzx  eax,al
c001012e:	89 ca                	mov    edx,ecx
c0010130:	83 e1 07             	and    ecx,0x7
c0010133:	c1 ea 03             	shr    edx,0x3
c0010136:	d3 c3                	rol    ebx,cl
c0010138:	01 d6                	add    esi,edx
c001013a:	d3 e0                	shl    eax,cl
c001013c:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c001013f:	21 fb                	and    ebx,edi
c0010141:	88 1e                	mov    BYTE PTR [esi],bl
c0010143:	8b 1d 34 6d 02 c0    	mov    ebx,DWORD PTR ds:0xc0026d34
c0010149:	01 da                	add    edx,ebx
c001014b:	8a 0a                	mov    cl,BYTE PTR [edx]
c001014d:	09 c8                	or     eax,ecx
c001014f:	88 02                	mov    BYTE PTR [edx],al
c0010151:	5b                   	pop    ebx
c0010152:	5e                   	pop    esi
c0010153:	5f                   	pop    edi
c0010154:	c3                   	ret    

c0010155 <Phys::getPageState(unsigned long)>:
c0010155:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010159:	8b 15 34 6d 02 c0    	mov    edx,DWORD PTR ds:0xc0026d34
c001015f:	89 c8                	mov    eax,ecx
c0010161:	83 e1 07             	and    ecx,0x7
c0010164:	c1 e8 03             	shr    eax,0x3
c0010167:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c001016b:	d3 f8                	sar    eax,cl
c001016d:	83 e0 01             	and    eax,0x1
c0010170:	c3                   	ret    

c0010171 <Phys::freePage(unsigned long)>:
c0010171:	53                   	push   ebx
c0010172:	83 ec 08             	sub    esp,0x8
c0010175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010179:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c001017f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0010185:	76 41                	jbe    c00101c8 <Phys::freePage(unsigned long)+0x57>
c0010187:	c1 e8 0c             	shr    eax,0xc
c001018a:	50                   	push   eax
c001018b:	89 c3                	mov    ebx,eax
c001018d:	e8 c3 ff ff ff       	call   c0010155 <Phys::getPageState(unsigned long)>
c0010192:	5a                   	pop    edx
c0010193:	84 c0                	test   al,al
c0010195:	74 20                	je     c00101b7 <Phys::freePage(unsigned long)+0x46>
c0010197:	83 ec 08             	sub    esp,0x8
c001019a:	a1 38 f1 02 c0       	mov    eax,ds:0xc002f138
c001019f:	6a 00                	push   0x0
c00101a1:	83 e8 01             	sub    eax,0x1
c00101a4:	53                   	push   ebx
c00101a5:	a3 38 f1 02 c0       	mov    ds:0xc002f138,eax
c00101aa:	e8 66 ff ff ff       	call   c0010115 <Phys::setPageState(unsigned long, bool)>
c00101af:	83 c4 10             	add    esp,0x10
c00101b2:	83 c4 08             	add    esp,0x8
c00101b5:	5b                   	pop    ebx
c00101b6:	c3                   	ret    
c00101b7:	c7 44 24 10 55 45 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024555
c00101bf:	83 c4 08             	add    esp,0x8
c00101c2:	5b                   	pop    ebx
c00101c3:	e9 1e fe ff ff       	jmp    c000ffe6 <KePanic(char const*)>
c00101c8:	68 00 10 00 00       	push   0x1000
c00101cd:	50                   	push   eax
c00101ce:	e8 07 ff ff ff       	call   c00100da <Phys::freeDMA(unsigned long, unsigned long)>
c00101d3:	59                   	pop    ecx
c00101d4:	5b                   	pop    ebx
c00101d5:	83 c4 08             	add    esp,0x8
c00101d8:	5b                   	pop    ebx
c00101d9:	c3                   	ret    

c00101da <Phys::allocatePage()>:
c00101da:	56                   	push   esi
c00101db:	53                   	push   ebx
c00101dc:	83 ec 14             	sub    esp,0x14
c00101df:	8b 35 2c f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f12c
c00101e5:	89 f3                	mov    ebx,esi
c00101e7:	eb 0a                	jmp    c00101f3 <Phys::allocatePage()+0x19>
c00101e9:	89 1d 2c f1 02 c0    	mov    DWORD PTR ds:0xc002f12c,ebx
c00101ef:	39 de                	cmp    esi,ebx
c00101f1:	74 26                	je     c0010219 <Phys::allocatePage()+0x3f>
c00101f3:	53                   	push   ebx
c00101f4:	e8 5c ff ff ff       	call   c0010155 <Phys::getPageState(unsigned long)>
c00101f9:	59                   	pop    ecx
c00101fa:	84 c0                	test   al,al
c00101fc:	74 67                	je     c0010265 <Phys::allocatePage()+0x8b>
c00101fe:	83 c3 01             	add    ebx,0x1
c0010201:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010207:	75 e0                	jne    c00101e9 <Phys::allocatePage()+0xf>
c0010209:	31 db                	xor    ebx,ebx
c001020b:	c7 05 2c f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f12c,0x0
c0010215:	39 de                	cmp    esi,ebx
c0010217:	75 da                	jne    c00101f3 <Phys::allocatePage()+0x19>
c0010219:	83 ec 0c             	sub    esp,0xc
c001021c:	a0 50 f1 02 c0       	mov    al,ds:0xc002f150
c0010221:	83 f0 01             	xor    eax,0x1
c0010224:	a2 50 f1 02 c0       	mov    ds:0xc002f150,al
c0010229:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001022e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010231:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c0010237:	51                   	push   ecx
c0010238:	e8 89 45 00 00       	call   c00147c6 <VAS::scanForEviction()>
c001023d:	83 c4 10             	add    esp,0x10
c0010240:	85 c0                	test   eax,eax
c0010242:	75 48                	jne    c001028c <Phys::allocatePage()+0xb2>
c0010244:	83 ec 0c             	sub    esp,0xc
c0010247:	68 78 44 02 c0       	push   0xc0024478
c001024c:	e8 95 fd ff ff       	call   c000ffe6 <KePanic(char const*)>
c0010251:	83 c4 10             	add    esp,0x10
c0010254:	8b 1d 2c f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f12c
c001025a:	53                   	push   ebx
c001025b:	e8 f5 fe ff ff       	call   c0010155 <Phys::getPageState(unsigned long)>
c0010260:	59                   	pop    ecx
c0010261:	84 c0                	test   al,al
c0010263:	75 99                	jne    c00101fe <Phys::allocatePage()+0x24>
c0010265:	6a 01                	push   0x1
c0010267:	53                   	push   ebx
c0010268:	e8 a8 fe ff ff       	call   c0010115 <Phys::setPageState(unsigned long, bool)>
c001026d:	8b 1d 38 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f138
c0010273:	a1 2c f1 02 c0       	mov    eax,ds:0xc002f12c
c0010278:	83 c3 01             	add    ebx,0x1
c001027b:	5e                   	pop    esi
c001027c:	89 1d 38 f1 02 c0    	mov    DWORD PTR ds:0xc002f138,ebx
c0010282:	c1 e0 0c             	shl    eax,0xc
c0010285:	5a                   	pop    edx
c0010286:	83 c4 14             	add    esp,0x14
c0010289:	5b                   	pop    ebx
c001028a:	5e                   	pop    esi
c001028b:	c3                   	ret    
c001028c:	83 ec 08             	sub    esp,0x8
c001028f:	8b 15 38 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f138
c0010295:	6a 01                	push   0x1
c0010297:	83 c2 01             	add    edx,0x1
c001029a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001029e:	89 15 38 f1 02 c0    	mov    DWORD PTR ds:0xc002f138,edx
c00102a4:	89 c2                	mov    edx,eax
c00102a6:	c1 ea 0c             	shr    edx,0xc
c00102a9:	52                   	push   edx
c00102aa:	e8 66 fe ff ff       	call   c0010115 <Phys::setPageState(unsigned long, bool)>
c00102af:	83 c4 10             	add    esp,0x10
c00102b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00102b6:	eb ce                	jmp    c0010286 <Phys::allocatePage()+0xac>

c00102b8 <Phys::allocateContiguousPages(int)>:
c00102b8:	57                   	push   edi
c00102b9:	56                   	push   esi
c00102ba:	53                   	push   ebx
c00102bb:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00102bf:	fa                   	cli    
c00102c0:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c00102c6:	83 ec 0c             	sub    esp,0xc
c00102c9:	83 c2 01             	add    edx,0x1
c00102cc:	68 a8 44 02 c0       	push   0xc00244a8
c00102d1:	89 15 30 fa 02 c0    	mov    DWORD PTR ds:0xc002fa30,edx
c00102d7:	31 db                	xor    ebx,ebx
c00102d9:	e8 9e 6c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00102de:	83 c4 10             	add    esp,0x10
c00102e1:	85 db                	test   ebx,ebx
c00102e3:	75 11                	jne    c00102f6 <Phys::allocateContiguousPages(int)+0x3e>
c00102e5:	e8 f0 fe ff ff       	call   c00101da <Phys::allocatePage()>
c00102ea:	83 ff 01             	cmp    edi,0x1
c00102ed:	89 c6                	mov    esi,eax
c00102ef:	74 21                	je     c0010312 <Phys::allocateContiguousPages(int)+0x5a>
c00102f1:	bb 01 00 00 00       	mov    ebx,0x1
c00102f6:	e8 df fe ff ff       	call   c00101da <Phys::allocatePage()>
c00102fb:	89 da                	mov    edx,ebx
c00102fd:	c1 e2 0c             	shl    edx,0xc
c0010300:	01 f2                	add    edx,esi
c0010302:	39 c2                	cmp    edx,eax
c0010304:	74 24                	je     c001032a <Phys::allocateContiguousPages(int)+0x72>
c0010306:	bb 01 00 00 00       	mov    ebx,0x1
c001030b:	89 c6                	mov    esi,eax
c001030d:	83 ff 01             	cmp    edi,0x1
c0010310:	75 e4                	jne    c00102f6 <Phys::allocateContiguousPages(int)+0x3e>
c0010312:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c001031a:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c001031f:	85 c0                	test   eax,eax
c0010321:	75 01                	jne    c0010324 <Phys::allocateContiguousPages(int)+0x6c>
c0010323:	fb                   	sti    
c0010324:	89 f0                	mov    eax,esi
c0010326:	5b                   	pop    ebx
c0010327:	5e                   	pop    esi
c0010328:	5f                   	pop    edi
c0010329:	c3                   	ret    
c001032a:	83 c3 01             	add    ebx,0x1
c001032d:	39 fb                	cmp    ebx,edi
c001032f:	75 b0                	jne    c00102e1 <Phys::allocateContiguousPages(int)+0x29>
c0010331:	eb df                	jmp    c0010312 <Phys::allocateContiguousPages(int)+0x5a>

c0010333 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010333:	56                   	push   esi
c0010334:	53                   	push   ebx
c0010335:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010339:	39 1d 30 f1 02 c0    	cmp    DWORD PTR ds:0xc002f130,ebx
c001033f:	73 06                	jae    c0010347 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010341:	89 1d 30 f1 02 c0    	mov    DWORD PTR ds:0xc002f130,ebx
c0010347:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001034b:	c1 eb 0c             	shr    ebx,0xc
c001034e:	c1 e8 0c             	shr    eax,0xc
c0010351:	39 d8                	cmp    eax,ebx
c0010353:	73 13                	jae    c0010368 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010355:	6a 00                	push   0x0
c0010357:	8d 70 01             	lea    esi,[eax+0x1]
c001035a:	50                   	push   eax
c001035b:	e8 b5 fd ff ff       	call   c0010115 <Phys::setPageState(unsigned long, bool)>
c0010360:	5a                   	pop    edx
c0010361:	89 f0                	mov    eax,esi
c0010363:	59                   	pop    ecx
c0010364:	39 f3                	cmp    ebx,esi
c0010366:	75 ed                	jne    c0010355 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010368:	5b                   	pop    ebx
c0010369:	5e                   	pop    esi
c001036a:	c3                   	ret    

c001036b <Phys::physicalMemorySetup(unsigned int)>:
c001036b:	55                   	push   ebp
c001036c:	57                   	push   edi
c001036d:	56                   	push   esi
c001036e:	53                   	push   ebx
c001036f:	83 ec 40             	sub    esp,0x40
c0010372:	6a 10                	push   0x10
c0010374:	6a 00                	push   0x0
c0010376:	68 40 f1 02 c0       	push   0xc002f140
c001037b:	e8 70 01 ff ff       	call   c00004f0 <memset>
c0010380:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010384:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010389:	05 00 10 00 00       	add    eax,0x1000
c001038e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010392:	5b                   	pop    ebx
c0010393:	31 db                	xor    ebx,ebx
c0010395:	5e                   	pop    esi
c0010396:	50                   	push   eax
c0010397:	68 6b 45 02 c0       	push   0xc002456b
c001039c:	e8 db 6b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00103a1:	83 c4 10             	add    esp,0x10
c00103a4:	83 ec 08             	sub    esp,0x8
c00103a7:	6a 01                	push   0x1
c00103a9:	53                   	push   ebx
c00103aa:	83 c3 01             	add    ebx,0x1
c00103ad:	e8 63 fd ff ff       	call   c0010115 <Phys::setPageState(unsigned long, bool)>
c00103b2:	83 c4 10             	add    esp,0x10
c00103b5:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00103bb:	75 e7                	jne    c00103a4 <Phys::physicalMemorySetup(unsigned int)+0x39>
c00103bd:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c00103c4:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c00103cb:	c1 e0 08             	shl    eax,0x8
c00103ce:	09 c2                	or     edx,eax
c00103d0:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00103d4:	0f 84 98 01 00 00    	je     c0010572 <Phys::physicalMemorySetup(unsigned int)+0x207>
c00103da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00103de:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00103e6:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00103eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00103ef:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00103f7:	eb 1c                	jmp    c0010415 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c00103f9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103fd:	83 c3 18             	add    ebx,0x18
c0010400:	83 c6 01             	add    esi,0x1
c0010403:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0010407:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001040b:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001040f:	0f 84 6d 01 00 00    	je     c0010582 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0010415:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010418:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001041b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001041e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010422:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010426:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010428:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c001042b:	01 f0                	add    eax,esi
c001042d:	55                   	push   ebp
c001042e:	11 fa                	adc    edx,edi
c0010430:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010434:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010438:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001043c:	51                   	push   ecx
c001043d:	56                   	push   esi
c001043e:	68 08 45 02 c0       	push   0xc0024508
c0010443:	e8 34 6b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001044c:	83 c4 10             	add    esp,0x10
c001044f:	09 f8                	or     eax,edi
c0010451:	0f 85 2b 01 00 00    	jne    c0010582 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0010457:	83 fd 01             	cmp    ebp,0x1
c001045a:	75 9d                	jne    c00103f9 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c001045c:	ba 00 00 08 00       	mov    edx,0x80000
c0010461:	89 c1                	mov    ecx,eax
c0010463:	39 f2                	cmp    edx,esi
c0010465:	19 f9                	sbb    ecx,edi
c0010467:	0f 82 ab 00 00 00    	jb     c0010518 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c001046d:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010471:	89 c1                	mov    ecx,eax
c0010473:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010477:	0f 83 9b 00 00 00    	jae    c0010518 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c001047d:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010482:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010486:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001048a:	39 fa                	cmp    edx,edi
c001048c:	19 e8                	sbb    eax,ebp
c001048e:	0f 82 b0 01 00 00    	jb     c0010644 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0010494:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010498:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001049c:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00104a2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00104a7:	83 d5 ff             	adc    ebp,0xffffffff
c00104aa:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00104ae:	31 c0                	xor    eax,eax
c00104b0:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00104b4:	39 fa                	cmp    edx,edi
c00104b6:	89 c1                	mov    ecx,eax
c00104b8:	19 e9                	sbb    ecx,ebp
c00104ba:	0f 83 39 ff ff ff    	jae    c00103f9 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00104c0:	be 00 00 08 00       	mov    esi,0x80000
c00104c5:	83 ec 04             	sub    esp,0x4
c00104c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00104cc:	57                   	push   edi
c00104cd:	56                   	push   esi
c00104ce:	68 2c 45 02 c0       	push   0xc002452c
c00104d3:	e8 a4 6a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00104d8:	5d                   	pop    ebp
c00104d9:	58                   	pop    eax
c00104da:	57                   	push   edi
c00104db:	56                   	push   esi
c00104dc:	e8 52 fe ff ff       	call   c0010333 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00104e1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00104e5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00104e9:	83 c4 0c             	add    esp,0xc
c00104ec:	0f ac d0 0c          	shrd   eax,edx,0xc
c00104f0:	8b 15 3c f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f13c
c00104f6:	01 d0                	add    eax,edx
c00104f8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00104ff:	a3 3c f1 02 c0       	mov    ds:0xc002f13c,eax
c0010504:	52                   	push   edx
c0010505:	50                   	push   eax
c0010506:	68 91 45 02 c0       	push   0xc0024591
c001050b:	e8 6c 6a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010510:	83 c4 10             	add    esp,0x10
c0010513:	e9 e1 fe ff ff       	jmp    c00103f9 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0010518:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001051c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010520:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010524:	39 ea                	cmp    edx,ebp
c0010526:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c001052a:	0f 82 c9 fe ff ff    	jb     c00103f9 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0010530:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010535:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010539:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c001053d:	0f 83 b6 fe ff ff    	jae    c00103f9 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0010543:	39 ee                	cmp    esi,ebp
c0010545:	89 f8                	mov    eax,edi
c0010547:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c001054b:	0f 83 74 ff ff ff    	jae    c00104c5 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0010551:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010555:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010559:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001055d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010561:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010565:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010569:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001056d:	e9 53 ff ff ff       	jmp    c00104c5 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0010572:	83 ec 0c             	sub    esp,0xc
c0010575:	68 83 45 02 c0       	push   0xc0024583
c001057a:	e8 67 fa ff ff       	call   c000ffe6 <KePanic(char const*)>
c001057f:	83 c4 10             	add    esp,0x10
c0010582:	83 ec 08             	sub    esp,0x8
c0010585:	bb 60 00 00 00       	mov    ebx,0x60
c001058a:	6a 00                	push   0x0
c001058c:	6a 06                	push   0x6
c001058e:	e8 82 fb ff ff       	call   c0010115 <Phys::setPageState(unsigned long, bool)>
c0010593:	58                   	pop    eax
c0010594:	5a                   	pop    edx
c0010595:	6a 00                	push   0x0
c0010597:	6a 07                	push   0x7
c0010599:	e8 77 fb ff ff       	call   c0010115 <Phys::setPageState(unsigned long, bool)>
c001059e:	8b 0d 3c f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f13c
c00105a4:	83 c4 10             	add    esp,0x10
c00105a7:	83 c1 02             	add    ecx,0x2
c00105aa:	89 0d 3c f1 02 c0    	mov    DWORD PTR ds:0xc002f13c,ecx
c00105b0:	83 ec 08             	sub    esp,0x8
c00105b3:	6a 00                	push   0x0
c00105b5:	53                   	push   ebx
c00105b6:	83 c3 01             	add    ebx,0x1
c00105b9:	e8 57 fb ff ff       	call   c0010115 <Phys::setPageState(unsigned long, bool)>
c00105be:	83 c4 10             	add    esp,0x10
c00105c1:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00105c7:	75 e7                	jne    c00105b0 <Phys::physicalMemorySetup(unsigned int)+0x245>
c00105c9:	a1 3c f1 02 c0       	mov    eax,ds:0xc002f13c
c00105ce:	bb 40 01 00 00       	mov    ebx,0x140
c00105d3:	83 c0 20             	add    eax,0x20
c00105d6:	a3 3c f1 02 c0       	mov    ds:0xc002f13c,eax
c00105db:	eb 26                	jmp    c0010603 <Phys::physicalMemorySetup(unsigned int)+0x298>
c00105dd:	83 ec 08             	sub    esp,0x8
c00105e0:	6a 00                	push   0x0
c00105e2:	53                   	push   ebx
c00105e3:	83 c3 01             	add    ebx,0x1
c00105e6:	e8 2a fb ff ff       	call   c0010115 <Phys::setPageState(unsigned long, bool)>
c00105eb:	a1 3c f1 02 c0       	mov    eax,ds:0xc002f13c
c00105f0:	83 c4 10             	add    esp,0x10
c00105f3:	83 c0 01             	add    eax,0x1
c00105f6:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00105fc:	a3 3c f1 02 c0       	mov    ds:0xc002f13c,eax
c0010601:	74 07                	je     c001060a <Phys::physicalMemorySetup(unsigned int)+0x29f>
c0010603:	3d ff 03 00 00       	cmp    eax,0x3ff
c0010608:	7e d3                	jle    c00105dd <Phys::physicalMemorySetup(unsigned int)+0x272>
c001060a:	bb d0 01 00 00       	mov    ebx,0x1d0
c001060f:	3d ff 07 00 00       	cmp    eax,0x7ff
c0010614:	7f 26                	jg     c001063c <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c0010616:	83 ec 08             	sub    esp,0x8
c0010619:	6a 00                	push   0x0
c001061b:	53                   	push   ebx
c001061c:	83 c3 01             	add    ebx,0x1
c001061f:	e8 f1 fa ff ff       	call   c0010115 <Phys::setPageState(unsigned long, bool)>
c0010624:	a1 3c f1 02 c0       	mov    eax,ds:0xc002f13c
c0010629:	83 c4 10             	add    esp,0x10
c001062c:	83 c0 01             	add    eax,0x1
c001062f:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0010635:	a3 3c f1 02 c0       	mov    ds:0xc002f13c,eax
c001063a:	75 d3                	jne    c001060f <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c001063c:	83 c4 3c             	add    esp,0x3c
c001063f:	5b                   	pop    ebx
c0010640:	5e                   	pop    esi
c0010641:	5f                   	pop    edi
c0010642:	5d                   	pop    ebp
c0010643:	c3                   	ret    
c0010644:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c001064c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010654:	e9 3b fe ff ff       	jmp    c0010494 <Phys::physicalMemorySetup(unsigned int)+0x129>
c0010659:	90                   	nop

c001065a <Pipe::isAtty()>:
c001065a:	31 c0                	xor    eax,eax
c001065c:	c3                   	ret    
c001065d:	90                   	nop

c001065e <Pipe::~Pipe()>:
c001065e:	83 ec 0c             	sub    esp,0xc
c0010661:	ba f0 45 02 c0       	mov    edx,0xc00245f0
c0010666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001066a:	89 10                	mov    DWORD PTR [eax],edx
c001066c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010670:	83 ec 0c             	sub    esp,0xc
c0010673:	50                   	push   eax
c0010674:	e8 b5 2c 00 00       	call   c001332e <UnixFile::~UnixFile()>
c0010679:	83 c4 10             	add    esp,0x10
c001067c:	90                   	nop
c001067d:	83 c4 0c             	add    esp,0xc
c0010680:	c3                   	ret    
c0010681:	90                   	nop

c0010682 <Pipe::~Pipe()>:
c0010682:	83 ec 0c             	sub    esp,0xc
c0010685:	83 ec 0c             	sub    esp,0xc
c0010688:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001068c:	e8 cd ff ff ff       	call   c001065e <Pipe::~Pipe()>
c0010691:	83 c4 10             	add    esp,0x10
c0010694:	83 ec 08             	sub    esp,0x8
c0010697:	6a 20                	push   0x20
c0010699:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001069d:	e8 47 cd ff ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c00106a2:	83 c4 10             	add    esp,0x10
c00106a5:	83 c4 0c             	add    esp,0xc
c00106a8:	c3                   	ret    
c00106a9:	90                   	nop

c00106aa <Pipe::write(unsigned long long, void*, int*)>:
c00106aa:	55                   	push   ebp
c00106ab:	57                   	push   edi
c00106ac:	56                   	push   esi
c00106ad:	53                   	push   ebx
c00106ae:	83 ec 1c             	sub    esp,0x1c
c00106b1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00106b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00106b9:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00106bc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00106c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00106c3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00106c7:	89 d8                	mov    eax,ebx
c00106c9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00106cc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00106d0:	89 d6                	mov    esi,edx
c00106d2:	89 d7                	mov    edi,edx
c00106d4:	c1 ff 1f             	sar    edi,0x1f
c00106d7:	03 34 24             	add    esi,DWORD PTR [esp]
c00106da:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00106de:	c1 f8 1f             	sar    eax,0x1f
c00106e1:	39 f3                	cmp    ebx,esi
c00106e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00106e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106eb:	19 f8                	sbb    eax,edi
c00106ed:	b8 01 00 00 00       	mov    eax,0x1
c00106f2:	72 6e                	jb     c0010762 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00106f4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00106f7:	01 d0                	add    eax,edx
c00106f9:	99                   	cdq    
c00106fa:	f7 fb                	idiv   ebx
c00106fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010700:	29 d3                	sub    ebx,edx
c0010702:	89 d7                	mov    edi,edx
c0010704:	89 de                	mov    esi,ebx
c0010706:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010709:	c1 fb 1f             	sar    ebx,0x1f
c001070c:	39 f2                	cmp    edx,esi
c001070e:	19 d8                	sbb    eax,ebx
c0010710:	b8 00 00 00 00       	mov    eax,0x0
c0010715:	72 04                	jb     c001071b <Pipe::write(unsigned long long, void*, int*)+0x71>
c0010717:	89 d0                	mov    eax,edx
c0010719:	29 f0                	sub    eax,esi
c001071b:	89 d3                	mov    ebx,edx
c001071d:	29 c3                	sub    ebx,eax
c001071f:	74 0b                	je     c001072c <Pipe::write(unsigned long long, void*, int*)+0x82>
c0010721:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010724:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010728:	89 d9                	mov    ecx,ebx
c001072a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001072c:	85 c0                	test   eax,eax
c001072e:	74 0d                	je     c001073d <Pipe::write(unsigned long long, void*, int*)+0x93>
c0010730:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010734:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0010737:	89 de                	mov    esi,ebx
c0010739:	89 c1                	mov    ecx,eax
c001073b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001073d:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010740:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010745:	75 10                	jne    c0010757 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0010747:	83 ec 0c             	sub    esp,0xc
c001074a:	68 ad 45 02 c0       	push   0xc00245ad
c001074f:	e8 92 f8 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0010754:	83 c4 10             	add    esp,0x10
c0010757:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001075b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001075e:	89 08                	mov    DWORD PTR [eax],ecx
c0010760:	31 c0                	xor    eax,eax
c0010762:	83 c4 1c             	add    esp,0x1c
c0010765:	5b                   	pop    ebx
c0010766:	5e                   	pop    esi
c0010767:	5f                   	pop    edi
c0010768:	5d                   	pop    ebp
c0010769:	c3                   	ret    

c001076a <Pipe::read(unsigned long long, void*, int*)>:
c001076a:	55                   	push   ebp
c001076b:	57                   	push   edi
c001076c:	56                   	push   esi
c001076d:	53                   	push   ebx
c001076e:	83 ec 1c             	sub    esp,0x1c
c0010771:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010775:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010779:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001077d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010780:	89 c8                	mov    eax,ecx
c0010782:	99                   	cdq    
c0010783:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010787:	74 27                	je     c00107b0 <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010789:	39 f9                	cmp    ecx,edi
c001078b:	89 d1                	mov    ecx,edx
c001078d:	19 f1                	sbb    ecx,esi
c001078f:	73 1f                	jae    c00107b0 <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010791:	fa                   	cli    
c0010792:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c0010798:	e8 77 6a 00 00       	call   c0017214 <schedule()>
c001079d:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c00107a4:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c00107ab:	75 d0                	jne    c001077d <Pipe::read(unsigned long long, void*, int*)+0x13>
c00107ad:	fb                   	sti    
c00107ae:	eb cd                	jmp    c001077d <Pipe::read(unsigned long long, void*, int*)+0x13>
c00107b0:	39 f8                	cmp    eax,edi
c00107b2:	89 d1                	mov    ecx,edx
c00107b4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00107b7:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00107bb:	19 f1                	sbb    ecx,esi
c00107bd:	73 07                	jae    c00107c6 <Pipe::read(unsigned long long, void*, int*)+0x5c>
c00107bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00107c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00107c6:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00107c9:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00107cc:	29 f7                	sub    edi,esi
c00107ce:	89 f8                	mov    eax,edi
c00107d0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00107d4:	99                   	cdq    
c00107d5:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00107d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107dc:	19 d0                	sbb    eax,edx
c00107de:	73 07                	jae    c00107e7 <Pipe::read(unsigned long long, void*, int*)+0x7d>
c00107e0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00107e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00107e7:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00107ea:	89 ea                	mov    edx,ebp
c00107ec:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00107f0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00107f5:	74 0d                	je     c0010804 <Pipe::read(unsigned long long, void*, int*)+0x9a>
c00107f7:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00107fa:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00107fe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010802:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010804:	85 d2                	test   edx,edx
c0010806:	74 11                	je     c0010819 <Pipe::read(unsigned long long, void*, int*)+0xaf>
c0010808:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001080c:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001080f:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010813:	89 d1                	mov    ecx,edx
c0010815:	89 c7                	mov    edi,eax
c0010817:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010819:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001081c:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c001081f:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010822:	99                   	cdq    
c0010823:	89 f7                	mov    edi,esi
c0010825:	03 04 24             	add    eax,DWORD PTR [esp]
c0010828:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c001082c:	c1 ff 1f             	sar    edi,0x1f
c001082f:	57                   	push   edi
c0010830:	56                   	push   esi
c0010831:	52                   	push   edx
c0010832:	50                   	push   eax
c0010833:	e8 fc 15 01 00       	call   c0021e34 <__umoddi3>
c0010838:	83 c4 10             	add    esp,0x10
c001083b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001083e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010843:	75 10                	jne    c0010855 <Pipe::read(unsigned long long, void*, int*)+0xeb>
c0010845:	83 ec 0c             	sub    esp,0xc
c0010848:	68 ca 45 02 c0       	push   0xc00245ca
c001084d:	e8 94 f7 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0010852:	83 c4 10             	add    esp,0x10
c0010855:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010859:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001085c:	89 10                	mov    DWORD PTR [eax],edx
c001085e:	83 c4 1c             	add    esp,0x1c
c0010861:	31 c0                	xor    eax,eax
c0010863:	5b                   	pop    ebx
c0010864:	5e                   	pop    esi
c0010865:	5f                   	pop    edi
c0010866:	5d                   	pop    ebp
c0010867:	c3                   	ret    

c0010868 <Pipe::Pipe(int)>:
c0010868:	83 ec 0c             	sub    esp,0xc
c001086b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001086f:	83 ec 08             	sub    esp,0x8
c0010872:	6a 00                	push   0x0
c0010874:	50                   	push   eax
c0010875:	e8 ce 28 00 00       	call   c0013148 <UnixFile::UnixFile(int)>
c001087a:	83 c4 10             	add    esp,0x10
c001087d:	ba f0 45 02 c0       	mov    edx,0xc00245f0
c0010882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010886:	89 10                	mov    DWORD PTR [eax],edx
c0010888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010890:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010897:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001089e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a2:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00108a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108ad:	83 ec 0c             	sub    esp,0xc
c00108b0:	50                   	push   eax
c00108b1:	e8 d9 f2 ff ff       	call   c000fb8f <malloc>
c00108b6:	83 c4 10             	add    esp,0x10
c00108b9:	89 c2                	mov    edx,eax
c00108bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108bf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00108c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c6:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00108ca:	90                   	nop
c00108cb:	83 c4 0c             	add    esp,0xc
c00108ce:	c3                   	ret    

c00108cf <KePowerThread(void*)>:
c00108cf:	83 ec 0c             	sub    esp,0xc
c00108d2:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c00108d9:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c00108e0:	75 01                	jne    c00108e3 <KePowerThread(void*)+0x14>
c00108e2:	fb                   	sti    
c00108e3:	c6 05 6c f1 02 c0 00 	mov    BYTE PTR ds:0xc002f16c,0x0
c00108ea:	50                   	push   eax
c00108eb:	50                   	push   eax
c00108ec:	6a 00                	push   0x0
c00108ee:	6a 0a                	push   0xa
c00108f0:	e8 2b 6b 00 00       	call   c0017420 <sleep(unsigned long long)>
c00108f5:	83 05 a4 f1 02 c0 0a 	add    DWORD PTR ds:0xc002f1a4,0xa
c00108fc:	83 c4 10             	add    esp,0x10
c00108ff:	eb e2                	jmp    c00108e3 <KePowerThread(void*)+0x14>

c0010901 <KeChangePowerSettings(PowerSettings)>:
c0010901:	57                   	push   edi
c0010902:	b9 09 00 00 00       	mov    ecx,0x9
c0010907:	56                   	push   esi
c0010908:	bf 80 f1 02 c0       	mov    edi,0xc002f180
c001090d:	fc                   	cld    
c001090e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010912:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010914:	5e                   	pop    esi
c0010915:	5f                   	pop    edi
c0010916:	c3                   	ret    

c0010917 <KeUserIOReceived()>:
c0010917:	c7 05 a4 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1a4,0x0
c0010921:	c3                   	ret    

c0010922 <KeSetupPowerManager()>:
c0010922:	83 ec 0c             	sub    esp,0xc
c0010925:	c7 05 a4 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1a4,0x0
c001092f:	68 f0 00 00 00       	push   0xf0
c0010934:	c6 05 6c f1 02 c0 00 	mov    BYTE PTR ds:0xc002f16c,0x0
c001093b:	6a 00                	push   0x0
c001093d:	68 cf 08 01 c0       	push   0xc00108cf
c0010942:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c0010948:	e8 07 66 00 00       	call   c0016f54 <Process::createThread(void (*)(void*), void*, int)>
c001094d:	c7 05 80 f1 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002f180,0x2
c0010957:	c7 05 84 f1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002f184,0x1
c0010961:	c7 05 88 f1 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002f188,0x3
c001096b:	c7 05 8c f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f18c,0x0
c0010975:	c7 05 98 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f198,0x0
c001097f:	c7 05 90 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f190,0x0
c0010989:	c7 05 9c f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f19c,0x0
c0010993:	c7 05 94 f1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002f194,0x3c
c001099d:	c7 05 a0 f1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002f1a0,0x3c
c00109a7:	83 c4 1c             	add    esp,0x1c
c00109aa:	c3                   	ret    

c00109ab <KePrepareShutdown()>:
c00109ab:	83 ec 0c             	sub    esp,0xc
c00109ae:	e8 c6 c8 ff ff       	call   c000d279 <KeExecuteAtexit()>
c00109b3:	83 ec 0c             	sub    esp,0xc
c00109b6:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c00109bb:	ff b0 64 01 00 00    	push   DWORD PTR [eax+0x164]
c00109c1:	e8 f6 92 ff ff       	call   c0009cbc <Device::closeAll()>
c00109c6:	83 c4 1c             	add    esp,0x1c
c00109c9:	c3                   	ret    

c00109ca <KeRegisterShutdownHandler(void (*)())>:
c00109ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109ce:	a3 68 f1 02 c0       	mov    ds:0xc002f168,eax
c00109d3:	c3                   	ret    

c00109d4 <KeRegisterRestartHandler(void (*)())>:
c00109d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109d8:	a3 64 f1 02 c0       	mov    ds:0xc002f164,eax
c00109dd:	c3                   	ret    

c00109de <KeRegisterSleepHandler(void (*)())>:
c00109de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109e2:	a3 60 f1 02 c0       	mov    ds:0xc002f160,eax
c00109e7:	c3                   	ret    

c00109e8 <KeShutdown()>:
c00109e8:	83 ec 0c             	sub    esp,0xc
c00109eb:	e8 bb ff ff ff       	call   c00109ab <KePrepareShutdown()>
c00109f0:	a1 68 f1 02 c0       	mov    eax,ds:0xc002f168
c00109f5:	85 c0                	test   eax,eax
c00109f7:	74 04                	je     c00109fd <KeShutdown()+0x15>
c00109f9:	ff d0                	call   eax
c00109fb:	eb 10                	jmp    c0010a0d <KeShutdown()+0x25>
c00109fd:	83 ec 0c             	sub    esp,0xc
c0010a00:	68 04 46 02 c0       	push   0xc0024604
c0010a05:	e8 dc f5 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0010a0a:	83 c4 10             	add    esp,0x10
c0010a0d:	83 ec 0c             	sub    esp,0xc
c0010a10:	68 25 46 02 c0       	push   0xc0024625
c0010a15:	e8 cc f5 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0010a1a:	83 c4 1c             	add    esp,0x1c
c0010a1d:	c3                   	ret    

c0010a1e <KeSleep()>:
c0010a1e:	a1 60 f1 02 c0       	mov    eax,ds:0xc002f160
c0010a23:	85 c0                	test   eax,eax
c0010a25:	74 02                	je     c0010a29 <KeSleep()+0xb>
c0010a27:	ff e0                	jmp    eax
c0010a29:	c3                   	ret    

c0010a2a <KeHandlePowerButton()>:
c0010a2a:	a1 80 f1 02 c0       	mov    eax,ds:0xc002f180
c0010a2f:	83 f8 02             	cmp    eax,0x2
c0010a32:	75 02                	jne    c0010a36 <KeHandlePowerButton()+0xc>
c0010a34:	eb b2                	jmp    c00109e8 <KeShutdown()>
c0010a36:	48                   	dec    eax
c0010a37:	75 02                	jne    c0010a3b <KeHandlePowerButton()+0x11>
c0010a39:	eb e3                	jmp    c0010a1e <KeSleep()>
c0010a3b:	c3                   	ret    

c0010a3c <KeHandleSleepButton()>:
c0010a3c:	a1 84 f1 02 c0       	mov    eax,ds:0xc002f184
c0010a41:	83 f8 02             	cmp    eax,0x2
c0010a44:	75 02                	jne    c0010a48 <KeHandleSleepButton()+0xc>
c0010a46:	eb a0                	jmp    c00109e8 <KeShutdown()>
c0010a48:	48                   	dec    eax
c0010a49:	75 02                	jne    c0010a4d <KeHandleSleepButton()+0x11>
c0010a4b:	eb d1                	jmp    c0010a1e <KeSleep()>
c0010a4d:	c3                   	ret    

c0010a4e <KeRestart()>:
c0010a4e:	83 ec 0c             	sub    esp,0xc
c0010a51:	e8 55 ff ff ff       	call   c00109ab <KePrepareShutdown()>
c0010a56:	a1 64 f1 02 c0       	mov    eax,ds:0xc002f164
c0010a5b:	85 c0                	test   eax,eax
c0010a5d:	74 02                	je     c0010a61 <KeRestart()+0x13>
c0010a5f:	ff d0                	call   eax
c0010a61:	83 ec 0c             	sub    esp,0xc
c0010a64:	68 49 46 02 c0       	push   0xc0024649
c0010a69:	e8 78 f5 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0010a6e:	83 c4 1c             	add    esp,0x1c
c0010a71:	c3                   	ret    

c0010a72 <KeRand()>:
c0010a72:	69 05 a8 f1 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002f1a8,0x2875
c0010a7c:	69 0d ac f1 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002f1ac,0xa2e7b175
c0010a86:	53                   	push   ebx
c0010a87:	01 c1                	add    ecx,eax
c0010a89:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010a8e:	f7 25 a8 f1 02 c0    	mul    DWORD PTR ds:0xc002f1a8
c0010a94:	01 ca                	add    edx,ecx
c0010a96:	05 ef 04 b5 00       	add    eax,0xb504ef
c0010a9b:	83 d2 00             	adc    edx,0x0
c0010a9e:	a3 a8 f1 02 c0       	mov    ds:0xc002f1a8,eax
c0010aa3:	0f b7 da             	movzx  ebx,dx
c0010aa6:	89 da                	mov    edx,ebx
c0010aa8:	89 1d ac f1 02 c0    	mov    DWORD PTR ds:0xc002f1ac,ebx
c0010aae:	0f ac d0 0e          	shrd   eax,edx,0xe
c0010ab2:	5b                   	pop    ebx
c0010ab3:	c3                   	ret    

c0010ab4 <KeSeedRand(unsigned int)>:
c0010ab4:	53                   	push   ebx
c0010ab5:	83 ec 08             	sub    esp,0x8
c0010ab8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010abc:	e8 1a a0 00 00       	call   c001aadb <HalGetRand()>
c0010ac1:	c7 05 ac f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1ac,0x0
c0010acb:	31 d8                	xor    eax,ebx
c0010acd:	a3 a8 f1 02 c0       	mov    ds:0xc002f1a8,eax
c0010ad2:	e8 9b ff ff ff       	call   c0010a72 <KeRand()>
c0010ad7:	83 c4 08             	add    esp,0x8
c0010ada:	5b                   	pop    ebx
c0010adb:	eb 95                	jmp    c0010a72 <KeRand()>

c0010add <KeInitRand()>:
c0010add:	83 ec 0c             	sub    esp,0xc
c0010ae0:	e8 c4 9d 00 00       	call   c001a8a9 <HalQueryPerformanceCounter()>
c0010ae5:	0f 20 da             	mov    edx,cr3
c0010ae8:	0f 22 da             	mov    cr3,edx
c0010aeb:	0f 20 da             	mov    edx,cr3
c0010aee:	0f 22 da             	mov    cr3,edx
c0010af1:	0f 20 da             	mov    edx,cr3
c0010af4:	0f 22 da             	mov    cr3,edx
c0010af7:	0f 20 da             	mov    edx,cr3
c0010afa:	0f 22 da             	mov    cr3,edx
c0010afd:	83 ec 0c             	sub    esp,0xc
c0010b00:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010b05:	50                   	push   eax
c0010b06:	e8 a9 ff ff ff       	call   c0010ab4 <KeSeedRand(unsigned int)>
c0010b0b:	83 c4 1c             	add    esp,0x1c
c0010b0e:	c3                   	ret    
c0010b0f:	90                   	nop

c0010b10 <KeResolveCompatibilitySymbol(char*)>:
c0010b10:	83 ec 0c             	sub    esp,0xc
c0010b13:	83 ec 08             	sub    esp,0x8
c0010b16:	68 58 46 02 c0       	push   0xc0024658
c0010b1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b1f:	e8 2c fc fe ff       	call   c0000750 <strcmp>
c0010b24:	83 c4 10             	add    esp,0x10
c0010b27:	85 c0                	test   eax,eax
c0010b29:	0f 94 c0             	sete   al
c0010b2c:	0f b6 c0             	movzx  eax,al
c0010b2f:	85 c0                	test   eax,eax
c0010b31:	74 0d                	je     c0010b40 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010b33:	b8 c8 d0 02 c0       	mov    eax,0xc002d0c8
c0010b38:	e9 b7 01 00 00       	jmp    c0010cf4 <KeResolveCompatibilitySymbol(char*)+0x1e4>
c0010b3d:	8d 76 00             	lea    esi,[esi+0x0]
c0010b40:	83 ec 08             	sub    esp,0x8
c0010b43:	68 61 46 02 c0       	push   0xc0024661
c0010b48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b4c:	e8 ff fb fe ff       	call   c0000750 <strcmp>
c0010b51:	83 c4 10             	add    esp,0x10
c0010b54:	85 c0                	test   eax,eax
c0010b56:	0f 94 c0             	sete   al
c0010b59:	0f b6 c0             	movzx  eax,al
c0010b5c:	85 c0                	test   eax,eax
c0010b5e:	74 0c                	je     c0010b6c <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010b60:	b8 34 1d 02 c0       	mov    eax,0xc0021d34
c0010b65:	e9 8a 01 00 00       	jmp    c0010cf4 <KeResolveCompatibilitySymbol(char*)+0x1e4>
c0010b6a:	66 90                	xchg   ax,ax
c0010b6c:	83 ec 08             	sub    esp,0x8
c0010b6f:	68 6b 46 02 c0       	push   0xc002466b
c0010b74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b78:	e8 d3 fb fe ff       	call   c0000750 <strcmp>
c0010b7d:	83 c4 10             	add    esp,0x10
c0010b80:	85 c0                	test   eax,eax
c0010b82:	0f 94 c0             	sete   al
c0010b85:	0f b6 c0             	movzx  eax,al
c0010b88:	85 c0                	test   eax,eax
c0010b8a:	74 0c                	je     c0010b98 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010b8c:	b8 c8 d0 02 c0       	mov    eax,0xc002d0c8
c0010b91:	e9 5e 01 00 00       	jmp    c0010cf4 <KeResolveCompatibilitySymbol(char*)+0x1e4>
c0010b96:	66 90                	xchg   ax,ax
c0010b98:	83 ec 08             	sub    esp,0x8
c0010b9b:	68 7e 46 02 c0       	push   0xc002467e
c0010ba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ba4:	e8 a7 fb fe ff       	call   c0000750 <strcmp>
c0010ba9:	83 c4 10             	add    esp,0x10
c0010bac:	85 c0                	test   eax,eax
c0010bae:	0f 94 c0             	sete   al
c0010bb1:	0f b6 c0             	movzx  eax,al
c0010bb4:	85 c0                	test   eax,eax
c0010bb6:	74 0c                	je     c0010bc4 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010bb8:	b8 68 1a 02 c0       	mov    eax,0xc0021a68
c0010bbd:	e9 32 01 00 00       	jmp    c0010cf4 <KeResolveCompatibilitySymbol(char*)+0x1e4>
c0010bc2:	66 90                	xchg   ax,ax
c0010bc4:	83 ec 08             	sub    esp,0x8
c0010bc7:	68 87 46 02 c0       	push   0xc0024687
c0010bcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bd0:	e8 7b fb fe ff       	call   c0000750 <strcmp>
c0010bd5:	83 c4 10             	add    esp,0x10
c0010bd8:	85 c0                	test   eax,eax
c0010bda:	0f 94 c0             	sete   al
c0010bdd:	0f b6 c0             	movzx  eax,al
c0010be0:	85 c0                	test   eax,eax
c0010be2:	74 0c                	je     c0010bf0 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010be4:	b8 e6 ff 00 c0       	mov    eax,0xc000ffe6
c0010be9:	e9 06 01 00 00       	jmp    c0010cf4 <KeResolveCompatibilitySymbol(char*)+0x1e4>
c0010bee:	66 90                	xchg   ax,ax
c0010bf0:	83 ec 08             	sub    esp,0x8
c0010bf3:	68 9a 46 02 c0       	push   0xc002469a
c0010bf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bfc:	e8 4f fb fe ff       	call   c0000750 <strcmp>
c0010c01:	83 c4 10             	add    esp,0x10
c0010c04:	85 c0                	test   eax,eax
c0010c06:	0f 94 c0             	sete   al
c0010c09:	0f b6 c0             	movzx  eax,al
c0010c0c:	85 c0                	test   eax,eax
c0010c0e:	74 0c                	je     c0010c1c <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010c10:	b8 29 d3 00 c0       	mov    eax,0xc000d329
c0010c15:	e9 da 00 00 00       	jmp    c0010cf4 <KeResolveCompatibilitySymbol(char*)+0x1e4>
c0010c1a:	66 90                	xchg   ax,ax
c0010c1c:	83 ec 08             	sub    esp,0x8
c0010c1f:	68 b7 46 02 c0       	push   0xc00246b7
c0010c24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c28:	e8 23 fb fe ff       	call   c0000750 <strcmp>
c0010c2d:	83 c4 10             	add    esp,0x10
c0010c30:	85 c0                	test   eax,eax
c0010c32:	0f 94 c0             	sete   al
c0010c35:	0f b6 c0             	movzx  eax,al
c0010c38:	85 c0                	test   eax,eax
c0010c3a:	74 0c                	je     c0010c48 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010c3c:	b8 34 1e 02 c0       	mov    eax,0xc0021e34
c0010c41:	e9 ae 00 00 00       	jmp    c0010cf4 <KeResolveCompatibilitySymbol(char*)+0x1e4>
c0010c46:	66 90                	xchg   ax,ax
c0010c48:	83 ec 08             	sub    esp,0x8
c0010c4b:	68 c1 46 02 c0       	push   0xc00246c1
c0010c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c54:	e8 f7 fa fe ff       	call   c0000750 <strcmp>
c0010c59:	83 c4 10             	add    esp,0x10
c0010c5c:	85 c0                	test   eax,eax
c0010c5e:	0f 94 c0             	sete   al
c0010c61:	0f b6 c0             	movzx  eax,al
c0010c64:	85 c0                	test   eax,eax
c0010c66:	74 0c                	je     c0010c74 <KeResolveCompatibilitySymbol(char*)+0x164>
c0010c68:	b8 b4 1b 02 c0       	mov    eax,0xc0021bb4
c0010c6d:	e9 82 00 00 00       	jmp    c0010cf4 <KeResolveCompatibilitySymbol(char*)+0x1e4>
c0010c72:	66 90                	xchg   ax,ax
c0010c74:	83 ec 08             	sub    esp,0x8
c0010c77:	68 ca 46 02 c0       	push   0xc00246ca
c0010c7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c80:	e8 cb fa fe ff       	call   c0000750 <strcmp>
c0010c85:	83 c4 10             	add    esp,0x10
c0010c88:	85 c0                	test   eax,eax
c0010c8a:	0f 94 c0             	sete   al
c0010c8d:	0f b6 c0             	movzx  eax,al
c0010c90:	85 c0                	test   eax,eax
c0010c92:	74 08                	je     c0010c9c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010c94:	b8 cc d0 02 c0       	mov    eax,0xc002d0cc
c0010c99:	eb 59                	jmp    c0010cf4 <KeResolveCompatibilitySymbol(char*)+0x1e4>
c0010c9b:	90                   	nop
c0010c9c:	83 ec 08             	sub    esp,0x8
c0010c9f:	68 e2 46 02 c0       	push   0xc00246e2
c0010ca4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ca8:	e8 a3 fa fe ff       	call   c0000750 <strcmp>
c0010cad:	83 c4 10             	add    esp,0x10
c0010cb0:	85 c0                	test   eax,eax
c0010cb2:	0f 94 c0             	sete   al
c0010cb5:	0f b6 c0             	movzx  eax,al
c0010cb8:	85 c0                	test   eax,eax
c0010cba:	74 08                	je     c0010cc4 <KeResolveCompatibilitySymbol(char*)+0x1b4>
c0010cbc:	b8 cc d0 02 c0       	mov    eax,0xc002d0cc
c0010cc1:	eb 31                	jmp    c0010cf4 <KeResolveCompatibilitySymbol(char*)+0x1e4>
c0010cc3:	90                   	nop
c0010cc4:	83 ec 08             	sub    esp,0x8
c0010cc7:	68 ef 46 02 c0       	push   0xc00246ef
c0010ccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010cd0:	e8 7b fa fe ff       	call   c0000750 <strcmp>
c0010cd5:	83 c4 10             	add    esp,0x10
c0010cd8:	85 c0                	test   eax,eax
c0010cda:	0f 94 c0             	sete   al
c0010cdd:	0f b6 c0             	movzx  eax,al
c0010ce0:	85 c0                	test   eax,eax
c0010ce2:	74 08                	je     c0010cec <KeResolveCompatibilitySymbol(char*)+0x1dc>
c0010ce4:	b8 cd d0 02 c0       	mov    eax,0xc002d0cd
c0010ce9:	eb 09                	jmp    c0010cf4 <KeResolveCompatibilitySymbol(char*)+0x1e4>
c0010ceb:	90                   	nop
c0010cec:	b8 00 00 00 00       	mov    eax,0x0
c0010cf1:	8d 76 00             	lea    esi,[esi+0x0]
c0010cf4:	83 c4 0c             	add    esp,0xc
c0010cf7:	c3                   	ret    

c0010cf8 <Semaphore::Semaphore(int)>:
c0010cf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d00:	89 10                	mov    DWORD PTR [eax],edx
c0010d02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d06:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0010d0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d11:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010d18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d1c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0010d23:	90                   	nop
c0010d24:	c3                   	ret    
c0010d25:	90                   	nop
c0010d26:	66 90                	xchg   ax,ax

c0010d28 <Semaphore::tryAcquire()>:
c0010d28:	83 ec 0c             	sub    esp,0xc
c0010d2b:	fa                   	cli    
c0010d2c:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0010d31:	83 c0 01             	add    eax,0x1
c0010d34:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0010d39:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010d3e:	83 c0 01             	add    eax,0x1
c0010d41:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0010d46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d4a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d51:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d53:	39 c2                	cmp    edx,eax
c0010d55:	7d 59                	jge    c0010db0 <Semaphore::tryAcquire()+0x88>
c0010d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d5b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010d5e:	8d 50 01             	lea    edx,[eax+0x1]
c0010d61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d65:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010d68:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010d6d:	83 e8 01             	sub    eax,0x1
c0010d70:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0010d75:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010d7a:	85 c0                	test   eax,eax
c0010d7c:	75 1a                	jne    c0010d98 <Semaphore::tryAcquire()+0x70>
c0010d7e:	a1 28 fa 02 c0       	mov    eax,ds:0xc002fa28
c0010d83:	85 c0                	test   eax,eax
c0010d85:	74 11                	je     c0010d98 <Semaphore::tryAcquire()+0x70>
c0010d87:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c0010d91:	e8 7e 64 00 00       	call   c0017214 <schedule()>
c0010d96:	66 90                	xchg   ax,ax
c0010d98:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0010da0:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0010da5:	85 c0                	test   eax,eax
c0010da7:	75 03                	jne    c0010dac <Semaphore::tryAcquire()+0x84>
c0010da9:	fb                   	sti    
c0010daa:	66 90                	xchg   ax,ax
c0010dac:	b0 01                	mov    al,0x1
c0010dae:	eb 48                	jmp    c0010df8 <Semaphore::tryAcquire()+0xd0>
c0010db0:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010db5:	83 e8 01             	sub    eax,0x1
c0010db8:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0010dbd:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010dc2:	85 c0                	test   eax,eax
c0010dc4:	75 1a                	jne    c0010de0 <Semaphore::tryAcquire()+0xb8>
c0010dc6:	a1 28 fa 02 c0       	mov    eax,ds:0xc002fa28
c0010dcb:	85 c0                	test   eax,eax
c0010dcd:	74 11                	je     c0010de0 <Semaphore::tryAcquire()+0xb8>
c0010dcf:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c0010dd9:	e8 36 64 00 00       	call   c0017214 <schedule()>
c0010dde:	66 90                	xchg   ax,ax
c0010de0:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0010de8:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0010ded:	85 c0                	test   eax,eax
c0010def:	75 03                	jne    c0010df4 <Semaphore::tryAcquire()+0xcc>
c0010df1:	fb                   	sti    
c0010df2:	66 90                	xchg   ax,ax
c0010df4:	b0 00                	mov    al,0x0
c0010df6:	66 90                	xchg   ax,ax
c0010df8:	83 c4 0c             	add    esp,0xc
c0010dfb:	c3                   	ret    

c0010dfc <Semaphore::assertLocked(char const*)>:
c0010dfc:	83 ec 0c             	sub    esp,0xc
c0010dff:	fa                   	cli    
c0010e00:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0010e05:	83 c0 01             	add    eax,0x1
c0010e08:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0010e0d:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010e12:	83 c0 01             	add    eax,0x1
c0010e15:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0010e1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e1e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e27:	39 c2                	cmp    edx,eax
c0010e29:	7d 11                	jge    c0010e3c <Semaphore::assertLocked(char const*)+0x40>
c0010e2b:	83 ec 0c             	sub    esp,0xc
c0010e2e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010e32:	e8 af f1 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0010e37:	83 c4 10             	add    esp,0x10
c0010e3a:	66 90                	xchg   ax,ax
c0010e3c:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010e41:	83 e8 01             	sub    eax,0x1
c0010e44:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0010e49:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010e4e:	85 c0                	test   eax,eax
c0010e50:	75 1a                	jne    c0010e6c <Semaphore::assertLocked(char const*)+0x70>
c0010e52:	a1 28 fa 02 c0       	mov    eax,ds:0xc002fa28
c0010e57:	85 c0                	test   eax,eax
c0010e59:	74 11                	je     c0010e6c <Semaphore::assertLocked(char const*)+0x70>
c0010e5b:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c0010e65:	e8 aa 63 00 00       	call   c0017214 <schedule()>
c0010e6a:	66 90                	xchg   ax,ax
c0010e6c:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0010e74:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0010e79:	85 c0                	test   eax,eax
c0010e7b:	75 03                	jne    c0010e80 <Semaphore::assertLocked(char const*)+0x84>
c0010e7d:	fb                   	sti    
c0010e7e:	66 90                	xchg   ax,ax
c0010e80:	90                   	nop
c0010e81:	83 c4 0c             	add    esp,0xc
c0010e84:	c3                   	ret    
c0010e85:	90                   	nop
c0010e86:	66 90                	xchg   ax,ax

c0010e88 <Semaphore::acquire(int)>:
c0010e88:	83 ec 1c             	sub    esp,0x1c
c0010e8b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0010e90:	0f 84 ae 00 00 00    	je     c0010f44 <Semaphore::acquire(int)+0xbc>
c0010e96:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010e9e:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0010ea3:	90                   	nop
c0010ea4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0010ea9:	85 c0                	test   eax,eax
c0010eab:	0f 84 87 00 00 00    	je     c0010f38 <Semaphore::acquire(int)+0xb0>
c0010eb1:	83 ec 0c             	sub    esp,0xc
c0010eb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010eb8:	e8 6b fe ff ff       	call   c0010d28 <Semaphore::tryAcquire()>
c0010ebd:	83 c4 10             	add    esp,0x10
c0010ec0:	83 f0 01             	xor    eax,0x1
c0010ec3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0010ec7:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0010ecb:	83 f0 01             	xor    eax,0x1
c0010ece:	0f b6 c0             	movzx  eax,al
c0010ed1:	85 c0                	test   eax,eax
c0010ed3:	75 5f                	jne    c0010f34 <Semaphore::acquire(int)+0xac>
c0010ed5:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0010eda:	7f 34                	jg     c0010f10 <Semaphore::acquire(int)+0x88>
c0010edc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010ee0:	89 d0                	mov    eax,edx
c0010ee2:	c1 e0 02             	shl    eax,0x2
c0010ee5:	01 d0                	add    eax,edx
c0010ee7:	01 c0                	add    eax,eax
c0010ee9:	89 c2                	mov    edx,eax
c0010eeb:	c1 fa 1f             	sar    edx,0x1f
c0010eee:	83 ec 08             	sub    esp,0x8
c0010ef1:	52                   	push   edx
c0010ef2:	50                   	push   eax
c0010ef3:	e8 10 65 00 00       	call   c0017408 <milliTenthSleep(unsigned long long)>
c0010ef8:	83 c4 10             	add    esp,0x10
c0010efb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010eff:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0010f03:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0010f0b:	eb 97                	jmp    c0010ea4 <Semaphore::acquire(int)+0x1c>
c0010f0d:	8d 76 00             	lea    esi,[esi+0x0]
c0010f10:	83 ec 08             	sub    esp,0x8
c0010f13:	6a 00                	push   0x0
c0010f15:	68 90 01 00 00       	push   0x190
c0010f1a:	e8 e9 64 00 00       	call   c0017408 <milliTenthSleep(unsigned long long)>
c0010f1f:	83 c4 10             	add    esp,0x10
c0010f22:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0010f27:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0010f2c:	e9 73 ff ff ff       	jmp    c0010ea4 <Semaphore::acquire(int)+0x1c>
c0010f31:	8d 76 00             	lea    esi,[esi+0x0]
c0010f34:	90                   	nop
c0010f35:	8d 76 00             	lea    esi,[esi+0x0]
c0010f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f3c:	e9 fb 00 00 00       	jmp    c001103c <Semaphore::acquire(int)+0x1b4>
c0010f41:	8d 76 00             	lea    esi,[esi+0x0]
c0010f44:	fa                   	cli    
c0010f45:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0010f4a:	83 c0 01             	add    eax,0x1
c0010f4d:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0010f52:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010f57:	83 c0 01             	add    eax,0x1
c0010f5a:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0010f5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f63:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010f66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f6c:	39 c2                	cmp    edx,eax
c0010f6e:	7d 14                	jge    c0010f84 <Semaphore::acquire(int)+0xfc>
c0010f70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f74:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010f77:	8d 50 01             	lea    edx,[eax+0x1]
c0010f7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f7e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010f81:	eb 6d                	jmp    c0010ff0 <Semaphore::acquire(int)+0x168>
c0010f83:	90                   	nop
c0010f84:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010f89:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f8b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010f92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f99:	85 c0                	test   eax,eax
c0010f9b:	75 13                	jne    c0010fb0 <Semaphore::acquire(int)+0x128>
c0010f9d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010fa2:	8b 10                	mov    edx,DWORD PTR [eax]
c0010fa4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fa8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fab:	eb 17                	jmp    c0010fc4 <Semaphore::acquire(int)+0x13c>
c0010fad:	8d 76 00             	lea    esi,[esi+0x0]
c0010fb0:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0010fb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fb9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010fbc:	8b 12                	mov    edx,DWORD PTR [edx]
c0010fbe:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010fc1:	8d 76 00             	lea    esi,[esi+0x0]
c0010fc4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010fc9:	8b 10                	mov    edx,DWORD PTR [eax]
c0010fcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fcf:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010fd2:	83 ec 0c             	sub    esp,0xc
c0010fd5:	68 fc 46 02 c0       	push   0xc00246fc
c0010fda:	e8 9d 5f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010fdf:	83 c4 10             	add    esp,0x10
c0010fe2:	83 ec 0c             	sub    esp,0xc
c0010fe5:	6a 05                	push   0x5
c0010fe7:	e8 e8 62 00 00       	call   c00172d4 <blockTask(TaskState)>
c0010fec:	83 c4 10             	add    esp,0x10
c0010fef:	90                   	nop
c0010ff0:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0010ff5:	83 e8 01             	sub    eax,0x1
c0010ff8:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0010ffd:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0011002:	85 c0                	test   eax,eax
c0011004:	75 1a                	jne    c0011020 <Semaphore::acquire(int)+0x198>
c0011006:	a1 28 fa 02 c0       	mov    eax,ds:0xc002fa28
c001100b:	85 c0                	test   eax,eax
c001100d:	74 11                	je     c0011020 <Semaphore::acquire(int)+0x198>
c001100f:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c0011019:	e8 f6 61 00 00       	call   c0017214 <schedule()>
c001101e:	66 90                	xchg   ax,ax
c0011020:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0011028:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c001102d:	85 c0                	test   eax,eax
c001102f:	75 03                	jne    c0011034 <Semaphore::acquire(int)+0x1ac>
c0011031:	fb                   	sti    
c0011032:	66 90                	xchg   ax,ax
c0011034:	b8 00 00 00 00       	mov    eax,0x0
c0011039:	8d 76 00             	lea    esi,[esi+0x0]
c001103c:	83 c4 1c             	add    esp,0x1c
c001103f:	c3                   	ret    

c0011040 <Semaphore::acquire()>:
c0011040:	83 ec 0c             	sub    esp,0xc
c0011043:	83 ec 08             	sub    esp,0x8
c0011046:	6a 00                	push   0x0
c0011048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001104c:	e8 37 fe ff ff       	call   c0010e88 <Semaphore::acquire(int)>
c0011051:	83 c4 10             	add    esp,0x10
c0011054:	90                   	nop
c0011055:	83 c4 0c             	add    esp,0xc
c0011058:	c3                   	ret    
c0011059:	90                   	nop
c001105a:	66 90                	xchg   ax,ax

c001105c <Semaphore::release()>:
c001105c:	83 ec 1c             	sub    esp,0x1c
c001105f:	fa                   	cli    
c0011060:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0011065:	83 c0 01             	add    eax,0x1
c0011068:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c001106d:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0011072:	83 c0 01             	add    eax,0x1
c0011075:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c001107a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001107e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011081:	85 c0                	test   eax,eax
c0011083:	74 2b                	je     c00110b0 <Semaphore::release()+0x54>
c0011085:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011089:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001108c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011090:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011094:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011097:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001109b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001109e:	83 ec 0c             	sub    esp,0xc
c00110a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110a5:	e8 c6 64 00 00       	call   c0017570 <unblockTask(ThreadControlBlock*)>
c00110aa:	83 c4 10             	add    esp,0x10
c00110ad:	eb 15                	jmp    c00110c4 <Semaphore::release()+0x68>
c00110af:	90                   	nop
c00110b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00110b7:	8d 50 ff             	lea    edx,[eax-0x1]
c00110ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110be:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00110c1:	8d 76 00             	lea    esi,[esi+0x0]
c00110c4:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c00110c9:	83 e8 01             	sub    eax,0x1
c00110cc:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c00110d1:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c00110d6:	85 c0                	test   eax,eax
c00110d8:	75 1a                	jne    c00110f4 <Semaphore::release()+0x98>
c00110da:	a1 28 fa 02 c0       	mov    eax,ds:0xc002fa28
c00110df:	85 c0                	test   eax,eax
c00110e1:	74 11                	je     c00110f4 <Semaphore::release()+0x98>
c00110e3:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c00110ed:	e8 22 61 00 00       	call   c0017214 <schedule()>
c00110f2:	66 90                	xchg   ax,ax
c00110f4:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c00110fc:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0011101:	85 c0                	test   eax,eax
c0011103:	75 03                	jne    c0011108 <Semaphore::release()+0xac>
c0011105:	fb                   	sti    
c0011106:	66 90                	xchg   ax,ax
c0011108:	90                   	nop
c0011109:	83 c4 1c             	add    esp,0x1c
c001110c:	c3                   	ret    

c001110d <KiSigKill(int)>:
c001110d:	83 ec 0c             	sub    esp,0xc
c0011110:	6a 00                	push   0x0
c0011112:	6a 00                	push   0x0
c0011114:	6a ff                	push   0xffffffff
c0011116:	6a 01                	push   0x1
c0011118:	e8 35 6f 01 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001111d:	83 c4 1c             	add    esp,0x1c
c0011120:	c3                   	ret    

c0011121 <KiDefaultSignalHandlerIgnore(int)>:
c0011121:	c3                   	ret    

c0011122 <KiDefaultSignalHandlerPause(int)>:
c0011122:	57                   	push   edi
c0011123:	b9 07 00 00 00       	mov    ecx,0x7
c0011128:	56                   	push   esi
c0011129:	be 57 47 02 c0       	mov    esi,0xc0024757
c001112e:	83 ec 24             	sub    esp,0x24
c0011131:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011135:	fc                   	cld    
c0011136:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011138:	8d 44 24 04          	lea    eax,[esp+0x4]
c001113c:	50                   	push   eax
c001113d:	6a 00                	push   0x0
c001113f:	6a 00                	push   0x0
c0011141:	6a 27                	push   0x27
c0011143:	e8 0a 6f 01 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011148:	83 c4 34             	add    esp,0x34
c001114b:	5e                   	pop    esi
c001114c:	5f                   	pop    edi
c001114d:	c3                   	ret    

c001114e <KiDefaultSignalHandlerResume(int)>:
c001114e:	57                   	push   edi
c001114f:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011154:	56                   	push   esi
c0011155:	be 73 47 02 c0       	mov    esi,0xc0024773
c001115a:	83 ec 24             	sub    esp,0x24
c001115d:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011161:	fc                   	cld    
c0011162:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011164:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011168:	50                   	push   eax
c0011169:	6a 00                	push   0x0
c001116b:	6a 00                	push   0x0
c001116d:	6a 27                	push   0x27
c001116f:	e8 de 6e 01 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011174:	83 c4 34             	add    esp,0x34
c0011177:	5e                   	pop    esi
c0011178:	5f                   	pop    edi
c0011179:	c3                   	ret    

c001117a <KeDeinitSignals(SigHandlerBlock*)>:
c001117a:	e9 20 ea ff ff       	jmp    c000fb9f <free>

c001117f <KeInitSignals()>:
c001117f:	53                   	push   ebx
c0011180:	83 ec 14             	sub    esp,0x14
c0011183:	68 c8 00 00 00       	push   0xc8
c0011188:	e8 02 ea ff ff       	call   c000fb8f <malloc>
c001118d:	83 c4 0c             	add    esp,0xc
c0011190:	89 c3                	mov    ebx,eax
c0011192:	6a 04                	push   0x4
c0011194:	6a 00                	push   0x0
c0011196:	50                   	push   eax
c0011197:	e8 54 f3 fe ff       	call   c00004f0 <memset>
c001119c:	c7 83 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xbc],0x0
c00111a6:	c7 83 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xc0],0x0
c00111b0:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00111b7:	83 c4 0c             	add    esp,0xc
c00111ba:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00111c0:	6a 20                	push   0x20
c00111c2:	6a 00                	push   0x0
c00111c4:	50                   	push   eax
c00111c5:	e8 26 f3 fe ff       	call   c00004f0 <memset>
c00111ca:	83 c4 0c             	add    esp,0xc
c00111cd:	6a 44                	push   0x44
c00111cf:	6a 00                	push   0x0
c00111d1:	53                   	push   ebx
c00111d2:	e8 19 f3 fe ff       	call   c00004f0 <memset>
c00111d7:	83 c4 0c             	add    esp,0xc
c00111da:	8d 83 88 00 00 00    	lea    eax,[ebx+0x88]
c00111e0:	6a 11                	push   0x11
c00111e2:	6a 00                	push   0x0
c00111e4:	50                   	push   eax
c00111e5:	e8 06 f3 fe ff       	call   c00004f0 <memset>
c00111ea:	89 d8                	mov    eax,ebx
c00111ec:	83 c4 18             	add    esp,0x18
c00111ef:	5b                   	pop    ebx
c00111f0:	c3                   	ret    

c00111f1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00111f1:	53                   	push   ebx
c00111f2:	b8 01 00 00 00       	mov    eax,0x1
c00111f7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00111fb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00111ff:	83 f9 10             	cmp    ecx,0x10
c0011202:	7f 21                	jg     c0011225 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011204:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001120b:	89 03                	mov    DWORD PTR [ebx],eax
c001120d:	b8 01 00 00 00       	mov    eax,0x1
c0011212:	d3 e0                	shl    eax,cl
c0011214:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011218:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001121b:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011223:	31 c0                	xor    eax,eax
c0011225:	5b                   	pop    ebx
c0011226:	c3                   	ret    

c0011227 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011227:	55                   	push   ebp
c0011228:	57                   	push   edi
c0011229:	bf 08 00 00 00       	mov    edi,0x8
c001122e:	56                   	push   esi
c001122f:	53                   	push   ebx
c0011230:	83 ec 14             	sub    esp,0x14
c0011233:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0011237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001123b:	68 90 47 02 c0       	push   0xc0024790
c0011240:	e8 37 5d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011245:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001124c:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011252:	83 c4 10             	add    esp,0x10
c0011255:	31 c9                	xor    ecx,ecx
c0011257:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001125b:	99                   	cdq    
c001125c:	f7 ff                	idiv   edi
c001125e:	8d 42 24             	lea    eax,[edx+0x24]
c0011261:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011265:	85 f6                	test   esi,esi
c0011267:	75 1a                	jne    c0011283 <KeRaiseSignal(SigHandlerBlock*, int)+0x5c>
c0011269:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001126d:	89 7c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],edi
c0011271:	50                   	push   eax
c0011272:	50                   	push   eax
c0011273:	52                   	push   edx
c0011274:	68 a6 47 02 c0       	push   0xc00247a6
c0011279:	e8 fe 5c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001127e:	83 c4 10             	add    esp,0x10
c0011281:	eb 1b                	jmp    c001129e <KeRaiseSignal(SigHandlerBlock*, int)+0x77>
c0011283:	41                   	inc    ecx
c0011284:	83 f9 08             	cmp    ecx,0x8
c0011287:	75 ce                	jne    c0011257 <KeRaiseSignal(SigHandlerBlock*, int)+0x30>
c0011289:	83 ec 0c             	sub    esp,0xc
c001128c:	be 01 00 00 00       	mov    esi,0x1
c0011291:	68 c7 47 02 c0       	push   0xc00247c7
c0011296:	e8 e1 5c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001129b:	83 c4 10             	add    esp,0x10
c001129e:	83 c4 0c             	add    esp,0xc
c00112a1:	89 f0                	mov    eax,esi
c00112a3:	5b                   	pop    ebx
c00112a4:	5e                   	pop    esi
c00112a5:	5f                   	pop    edi
c00112a6:	5d                   	pop    ebp
c00112a7:	c3                   	ret    

c00112a8 <KeCheckSignal(SigHandlerBlock*, int*)>:
c00112a8:	55                   	push   ebp
c00112a9:	57                   	push   edi
c00112aa:	56                   	push   esi
c00112ab:	53                   	push   ebx
c00112ac:	83 ec 1c             	sub    esp,0x1c
c00112af:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00112b3:	85 db                	test   ebx,ebx
c00112b5:	0f 84 e0 00 00 00    	je     c001139b <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c00112bb:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00112c2:	0f 84 d3 00 00 00    	je     c001139b <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c00112c8:	31 c9                	xor    ecx,ecx
c00112ca:	bf 08 00 00 00       	mov    edi,0x8
c00112cf:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c00112d5:	8d 04 0e             	lea    eax,[esi+ecx*1]
c00112d8:	99                   	cdq    
c00112d9:	f7 ff                	idiv   edi
c00112db:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c00112e2:	85 ed                	test   ebp,ebp
c00112e4:	0f 84 d2 00 00 00    	je     c00113bc <KeCheckSignal(SigHandlerBlock*, int*)+0x114>
c00112ea:	89 e9                	mov    ecx,ebp
c00112ec:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00112f2:	bf 01 00 00 00       	mov    edi,0x1
c00112f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00112fb:	d3 e7                	shl    edi,cl
c00112fd:	31 c9                	xor    ecx,ecx
c00112ff:	b8 01 00 00 00       	mov    eax,0x1
c0011304:	d3 e0                	shl    eax,cl
c0011306:	85 44 24 0c          	test   DWORD PTR [esp+0xc],eax
c001130a:	74 0a                	je     c0011316 <KeCheckSignal(SigHandlerBlock*, int*)+0x6e>
c001130c:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011310:	0f 85 85 00 00 00    	jne    c001139b <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011316:	41                   	inc    ecx
c0011317:	83 f9 11             	cmp    ecx,0x11
c001131a:	75 e3                	jne    c00112ff <KeCheckSignal(SigHandlerBlock*, int*)+0x57>
c001131c:	46                   	inc    esi
c001131d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011321:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011327:	09 f8                	or     eax,edi
c0011329:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011334:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c001133a:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011341:	31 c0                	xor    eax,eax
c0011343:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c001134b:	74 09                	je     c0011356 <KeCheckSignal(SigHandlerBlock*, int*)+0xae>
c001134d:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011354:	eb 06                	jmp    c001135c <KeCheckSignal(SigHandlerBlock*, int*)+0xb4>
c0011356:	40                   	inc    eax
c0011357:	83 f8 08             	cmp    eax,0x8
c001135a:	75 e7                	jne    c0011343 <KeCheckSignal(SigHandlerBlock*, int*)+0x9b>
c001135c:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c001135f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011363:	83 fd 09             	cmp    ebp,0x9
c0011366:	89 2a                	mov    DWORD PTR [edx],ebp
c0011368:	75 14                	jne    c001137e <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c001136a:	83 ec 0c             	sub    esp,0xc
c001136d:	68 d8 47 02 c0       	push   0xc00247d8
c0011372:	e8 05 5c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011377:	b8 0d 11 01 c0       	mov    eax,0xc001110d
c001137c:	eb 39                	jmp    c00113b7 <KeCheckSignal(SigHandlerBlock*, int*)+0x10f>
c001137e:	83 f8 01             	cmp    eax,0x1
c0011381:	75 1c                	jne    c001139f <KeCheckSignal(SigHandlerBlock*, int*)+0xf7>
c0011383:	83 ec 0c             	sub    esp,0xc
c0011386:	f7 d7                	not    edi
c0011388:	68 e2 47 02 c0       	push   0xc00247e2
c001138d:	e8 ea 5b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011392:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011398:	83 c4 10             	add    esp,0x10
c001139b:	31 c0                	xor    eax,eax
c001139d:	eb 30                	jmp    c00113cf <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c001139f:	85 c0                	test   eax,eax
c00113a1:	75 2c                	jne    c00113cf <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c00113a3:	83 ec 0c             	sub    esp,0xc
c00113a6:	68 ef 47 02 c0       	push   0xc00247ef
c00113ab:	e8 cc 5b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00113b0:	8b 04 ad 40 6d 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffd92c0]
c00113b7:	83 c4 10             	add    esp,0x10
c00113ba:	eb 13                	jmp    c00113cf <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c00113bc:	46                   	inc    esi
c00113bd:	41                   	inc    ecx
c00113be:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00113c4:	83 f9 08             	cmp    ecx,0x8
c00113c7:	0f 85 02 ff ff ff    	jne    c00112cf <KeCheckSignal(SigHandlerBlock*, int*)+0x27>
c00113cd:	eb cc                	jmp    c001139b <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c00113cf:	83 c4 1c             	add    esp,0x1c
c00113d2:	5b                   	pop    ebx
c00113d3:	5e                   	pop    esi
c00113d4:	5f                   	pop    edi
c00113d5:	5d                   	pop    ebp
c00113d6:	c3                   	ret    

c00113d7 <KiCheckSignalZ>:
c00113d7:	80 3d cc d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0cc,0x0
c00113de:	74 43                	je     c0011423 <KiCheckSignalZ+0x4c>
c00113e0:	83 ec 24             	sub    esp,0x24
c00113e3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00113e7:	50                   	push   eax
c00113e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113ed:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00113f0:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c00113f6:	e8 ad fe ff ff       	call   c00112a8 <KeCheckSignal(SigHandlerBlock*, int*)>
c00113fb:	83 c4 10             	add    esp,0x10
c00113fe:	31 d2                	xor    edx,edx
c0011400:	85 c0                	test   eax,eax
c0011402:	74 19                	je     c001141d <KiCheckSignalZ+0x46>
c0011404:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001140a:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001140d:	89 02                	mov    DWORD PTR [edx],eax
c001140f:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011416:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001141a:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001141d:	89 d0                	mov    eax,edx
c001141f:	83 c4 1c             	add    esp,0x1c
c0011422:	c3                   	ret    
c0011423:	31 d2                	xor    edx,edx
c0011425:	89 d0                	mov    eax,edx
c0011427:	c3                   	ret    

c0011428 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011428:	56                   	push   esi
c0011429:	53                   	push   ebx
c001142a:	bb 01 00 00 00       	mov    ebx,0x1
c001142f:	52                   	push   edx
c0011430:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011434:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011438:	d3 e3                	shl    ebx,cl
c001143a:	83 f9 10             	cmp    ecx,0x10
c001143d:	7f 08                	jg     c0011447 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c001143f:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011445:	75 10                	jne    c0011457 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011447:	83 ec 0c             	sub    esp,0xc
c001144a:	68 12 48 02 c0       	push   0xc0024812
c001144f:	e8 92 eb ff ff       	call   c000ffe6 <KePanic(char const*)>
c0011454:	83 c4 10             	add    esp,0x10
c0011457:	f7 d3                	not    ebx
c0011459:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c001145f:	58                   	pop    eax
c0011460:	5b                   	pop    ebx
c0011461:	5e                   	pop    esi
c0011462:	c3                   	ret    

c0011463 <KiFinishSignalZ>:
c0011463:	53                   	push   ebx
c0011464:	83 ec 08             	sub    esp,0x8
c0011467:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001146c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011470:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0011473:	83 fa 08             	cmp    edx,0x8
c0011476:	75 0c                	jne    c0011484 <KiFinishSignalZ+0x21>
c0011478:	83 ec 0c             	sub    esp,0xc
c001147b:	50                   	push   eax
c001147c:	e8 ef 60 00 00       	call   c0017570 <unblockTask(ThreadControlBlock*)>
c0011481:	83 c4 10             	add    esp,0x10
c0011484:	50                   	push   eax
c0011485:	50                   	push   eax
c0011486:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011489:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001148e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011491:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0011497:	e8 8c ff ff ff       	call   c0011428 <KeCompleteSignal(SigHandlerBlock*, int)>
c001149c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00114a2:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00114a9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00114b0:	83 c4 18             	add    esp,0x18
c00114b3:	5b                   	pop    ebx
c00114b4:	c3                   	ret    

c00114b5 <SysSeekDir(regs*)>:
c00114b5:	31 c0                	xor    eax,eax
c00114b7:	31 d2                	xor    edx,edx
c00114b9:	c3                   	ret    

c00114ba <SysTellDir(regs*)>:
c00114ba:	31 c0                	xor    eax,eax
c00114bc:	31 d2                	xor    edx,edx
c00114be:	c3                   	ret    

c00114bf <SysVerify(regs*)>:
c00114bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114c3:	31 d2                	xor    edx,edx
c00114c5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00114c8:	c3                   	ret    

c00114c9 <SysGetArgc(regs*)>:
c00114c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114ce:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00114d1:	8b 80 b6 05 00 00    	mov    eax,DWORD PTR [eax+0x5b6]
c00114d7:	89 c2                	mov    edx,eax
c00114d9:	c1 fa 1f             	sar    edx,0x1f
c00114dc:	c3                   	ret    

c00114dd <SysTTYName(regs*)>:
c00114dd:	b8 01 00 00 00       	mov    eax,0x1
c00114e2:	31 d2                	xor    edx,edx
c00114e4:	c3                   	ret    

c00114e5 <SysFormatDisk(regs*)>:
c00114e5:	56                   	push   esi
c00114e6:	53                   	push   ebx
c00114e7:	83 ec 04             	sub    esp,0x4
c00114ea:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00114ee:	8b 1d 04 c3 02 c0    	mov    ebx,DWORD PTR ds:0xc002c304
c00114f4:	eb 28                	jmp    c001151e <SysFormatDisk(regs*)+0x39>
c00114f6:	83 ec 0c             	sub    esp,0xc
c00114f9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00114fc:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00114ff:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011501:	51                   	push   ecx
c0011502:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011505:	51                   	push   ecx
c0011506:	50                   	push   eax
c0011507:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c001150e:	50                   	push   eax
c001150f:	53                   	push   ebx
c0011510:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011513:	83 c4 20             	add    esp,0x20
c0011516:	83 f8 08             	cmp    eax,0x8
c0011519:	75 14                	jne    c001152f <SysFormatDisk(regs*)+0x4a>
c001151b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001151e:	85 db                	test   ebx,ebx
c0011520:	75 d4                	jne    c00114f6 <SysFormatDisk(regs*)+0x11>
c0011522:	83 c4 04             	add    esp,0x4
c0011525:	b8 03 00 00 00       	mov    eax,0x3
c001152a:	31 d2                	xor    edx,edx
c001152c:	5b                   	pop    ebx
c001152d:	5e                   	pop    esi
c001152e:	c3                   	ret    
c001152f:	85 c0                	test   eax,eax
c0011531:	74 1f                	je     c0011552 <SysFormatDisk(regs*)+0x6d>
c0011533:	83 f8 09             	cmp    eax,0x9
c0011536:	74 0d                	je     c0011545 <SysFormatDisk(regs*)+0x60>
c0011538:	83 c4 04             	add    esp,0x4
c001153b:	b8 02 00 00 00       	mov    eax,0x2
c0011540:	31 d2                	xor    edx,edx
c0011542:	5b                   	pop    ebx
c0011543:	5e                   	pop    esi
c0011544:	c3                   	ret    
c0011545:	83 c4 04             	add    esp,0x4
c0011548:	b8 01 00 00 00       	mov    eax,0x1
c001154d:	31 d2                	xor    edx,edx
c001154f:	5b                   	pop    ebx
c0011550:	5e                   	pop    esi
c0011551:	c3                   	ret    
c0011552:	83 c4 04             	add    esp,0x4
c0011555:	31 c0                	xor    eax,eax
c0011557:	31 d2                	xor    edx,edx
c0011559:	5b                   	pop    ebx
c001155a:	5e                   	pop    esi
c001155b:	c3                   	ret    

c001155c <SysSetDiskVolumeLabel(regs*)>:
c001155c:	56                   	push   esi
c001155d:	53                   	push   ebx
c001155e:	83 ec 04             	sub    esp,0x4
c0011561:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011565:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011568:	83 f8 19             	cmp    eax,0x19
c001156b:	77 33                	ja     c00115a0 <SysSetDiskVolumeLabel(regs*)+0x44>
c001156d:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c0011574:	85 c9                	test   ecx,ecx
c0011576:	74 28                	je     c00115a0 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011578:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001157b:	85 db                	test   ebx,ebx
c001157d:	74 21                	je     c00115a0 <SysSetDiskVolumeLabel(regs*)+0x44>
c001157f:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011585:	85 d2                	test   edx,edx
c0011587:	74 17                	je     c00115a0 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011589:	8b 32                	mov    esi,DWORD PTR [edx]
c001158b:	53                   	push   ebx
c001158c:	50                   	push   eax
c001158d:	51                   	push   ecx
c001158e:	52                   	push   edx
c001158f:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011592:	83 c4 10             	add    esp,0x10
c0011595:	89 c2                	mov    edx,eax
c0011597:	83 c4 04             	add    esp,0x4
c001159a:	c1 fa 1f             	sar    edx,0x1f
c001159d:	5b                   	pop    ebx
c001159e:	5e                   	pop    esi
c001159f:	c3                   	ret    
c00115a0:	83 c4 04             	add    esp,0x4
c00115a3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00115a8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115ad:	5b                   	pop    ebx
c00115ae:	5e                   	pop    esi
c00115af:	c3                   	ret    

c00115b0 <SysGetDiskVolumeLabel(regs*)>:
c00115b0:	57                   	push   edi
c00115b1:	56                   	push   esi
c00115b2:	53                   	push   ebx
c00115b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115b7:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00115ba:	83 fa 19             	cmp    edx,0x19
c00115bd:	77 3c                	ja     c00115fb <SysGetDiskVolumeLabel(regs*)+0x4b>
c00115bf:	8b 0c 95 e0 ca 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd3520]
c00115c6:	85 c9                	test   ecx,ecx
c00115c8:	74 31                	je     c00115fb <SysGetDiskVolumeLabel(regs*)+0x4b>
c00115ca:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00115cd:	85 db                	test   ebx,ebx
c00115cf:	74 2a                	je     c00115fb <SysGetDiskVolumeLabel(regs*)+0x4b>
c00115d1:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00115d4:	85 f6                	test   esi,esi
c00115d6:	74 23                	je     c00115fb <SysGetDiskVolumeLabel(regs*)+0x4b>
c00115d8:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c00115de:	85 c0                	test   eax,eax
c00115e0:	74 19                	je     c00115fb <SysGetDiskVolumeLabel(regs*)+0x4b>
c00115e2:	83 ec 0c             	sub    esp,0xc
c00115e5:	8b 38                	mov    edi,DWORD PTR [eax]
c00115e7:	56                   	push   esi
c00115e8:	53                   	push   ebx
c00115e9:	52                   	push   edx
c00115ea:	51                   	push   ecx
c00115eb:	50                   	push   eax
c00115ec:	ff 57 58             	call   DWORD PTR [edi+0x58]
c00115ef:	83 c4 20             	add    esp,0x20
c00115f2:	89 c2                	mov    edx,eax
c00115f4:	5b                   	pop    ebx
c00115f5:	c1 fa 1f             	sar    edx,0x1f
c00115f8:	5e                   	pop    esi
c00115f9:	5f                   	pop    edi
c00115fa:	c3                   	ret    
c00115fb:	5b                   	pop    ebx
c00115fc:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011601:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011606:	5e                   	pop    esi
c0011607:	5f                   	pop    edi
c0011608:	c3                   	ret    

c0011609 <SysRealpath(regs*)>:
c0011609:	83 ec 0c             	sub    esp,0xc
c001160c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011610:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011613:	85 d2                	test   edx,edx
c0011615:	74 07                	je     c001161e <SysRealpath(regs*)+0x15>
c0011617:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001161a:	85 c0                	test   eax,eax
c001161c:	75 0b                	jne    c0011629 <SysRealpath(regs*)+0x20>
c001161e:	b8 01 00 00 00       	mov    eax,0x1
c0011623:	31 d2                	xor    edx,edx
c0011625:	83 c4 0c             	add    esp,0xc
c0011628:	c3                   	ret    
c0011629:	6a 00                	push   0x0
c001162b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011631:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0011634:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001163a:	51                   	push   ecx
c001163b:	52                   	push   edx
c001163c:	50                   	push   eax
c001163d:	e8 30 68 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011642:	83 c4 10             	add    esp,0x10
c0011645:	31 c0                	xor    eax,eax
c0011647:	31 d2                	xor    edx,edx
c0011649:	83 c4 0c             	add    esp,0xc
c001164c:	c3                   	ret    

c001164d <SysReadDir(regs*)>:
c001164d:	53                   	push   ebx
c001164e:	83 ec 18             	sub    esp,0x18
c0011651:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011655:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011658:	83 f8 02             	cmp    eax,0x2
c001165b:	76 61                	jbe    c00116be <SysReadDir(regs*)+0x71>
c001165d:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011664:	77 49                	ja     c00116af <SysReadDir(regs*)+0x62>
c0011666:	83 ec 0c             	sub    esp,0xc
c0011669:	50                   	push   eax
c001166a:	e8 ce 1d 00 00       	call   c001343d <KeGetFileFromDescriptor(int)>
c001166f:	83 c4 10             	add    esp,0x10
c0011672:	85 c0                	test   eax,eax
c0011674:	74 39                	je     c00116af <SysReadDir(regs*)+0x62>
c0011676:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001167e:	83 ec 0c             	sub    esp,0xc
c0011681:	8b 10                	mov    edx,DWORD PTR [eax]
c0011683:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011687:	51                   	push   ecx
c0011688:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001168b:	51                   	push   ecx
c001168c:	6a 00                	push   0x0
c001168e:	68 10 01 00 00       	push   0x110
c0011693:	50                   	push   eax
c0011694:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011697:	83 c4 20             	add    esp,0x20
c001169a:	85 c0                	test   eax,eax
c001169c:	74 29                	je     c00116c7 <SysReadDir(regs*)+0x7a>
c001169e:	83 f8 07             	cmp    eax,0x7
c00116a1:	74 1b                	je     c00116be <SysReadDir(regs*)+0x71>
c00116a3:	b8 02 00 00 00       	mov    eax,0x2
c00116a8:	31 d2                	xor    edx,edx
c00116aa:	83 c4 18             	add    esp,0x18
c00116ad:	5b                   	pop    ebx
c00116ae:	c3                   	ret    
c00116af:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00116b4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00116b9:	83 c4 18             	add    esp,0x18
c00116bc:	5b                   	pop    ebx
c00116bd:	c3                   	ret    
c00116be:	b8 01 00 00 00       	mov    eax,0x1
c00116c3:	31 d2                	xor    edx,edx
c00116c5:	eb e3                	jmp    c00116aa <SysReadDir(regs*)+0x5d>
c00116c7:	31 c0                	xor    eax,eax
c00116c9:	31 d2                	xor    edx,edx
c00116cb:	eb dd                	jmp    c00116aa <SysReadDir(regs*)+0x5d>

c00116cd <SysIsATTY(regs*)>:
c00116cd:	83 ec 0c             	sub    esp,0xc
c00116d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116d4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00116d7:	83 f8 02             	cmp    eax,0x2
c00116da:	76 07                	jbe    c00116e3 <SysIsATTY(regs*)+0x16>
c00116dc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116e1:	75 26                	jne    c0011709 <SysIsATTY(regs*)+0x3c>
c00116e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116e8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116eb:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00116f1:	85 c0                	test   eax,eax
c00116f3:	74 24                	je     c0011719 <SysIsATTY(regs*)+0x4c>
c00116f5:	83 ec 0c             	sub    esp,0xc
c00116f8:	8b 10                	mov    edx,DWORD PTR [eax]
c00116fa:	50                   	push   eax
c00116fb:	ff 12                	call   DWORD PTR [edx]
c00116fd:	31 d2                	xor    edx,edx
c00116ff:	0f b6 c0             	movzx  eax,al
c0011702:	83 c4 10             	add    esp,0x10
c0011705:	83 c4 0c             	add    esp,0xc
c0011708:	c3                   	ret    
c0011709:	83 ec 0c             	sub    esp,0xc
c001170c:	50                   	push   eax
c001170d:	e8 2b 1d 00 00       	call   c001343d <KeGetFileFromDescriptor(int)>
c0011712:	83 c4 10             	add    esp,0x10
c0011715:	85 c0                	test   eax,eax
c0011717:	75 dc                	jne    c00116f5 <SysIsATTY(regs*)+0x28>
c0011719:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001171e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011723:	83 c4 0c             	add    esp,0xc
c0011726:	c3                   	ret    

c0011727 <SysSeek(regs*)>:
c0011727:	53                   	push   ebx
c0011728:	83 ec 08             	sub    esp,0x8
c001172b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001172f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011732:	8d 50 fd             	lea    edx,[eax-0x3]
c0011735:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001173b:	77 39                	ja     c0011776 <SysSeek(regs*)+0x4f>
c001173d:	83 ec 0c             	sub    esp,0xc
c0011740:	50                   	push   eax
c0011741:	e8 f7 1c 00 00       	call   c001343d <KeGetFileFromDescriptor(int)>
c0011746:	83 c4 10             	add    esp,0x10
c0011749:	85 c0                	test   eax,eax
c001174b:	74 29                	je     c0011776 <SysSeek(regs*)+0x4f>
c001174d:	83 ec 04             	sub    esp,0x4
c0011750:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011753:	31 db                	xor    ebx,ebx
c0011755:	53                   	push   ebx
c0011756:	51                   	push   ecx
c0011757:	50                   	push   eax
c0011758:	e8 09 6b ff ff       	call   c0008266 <File::seek(unsigned long long)>
c001175d:	83 c4 10             	add    esp,0x10
c0011760:	85 c0                	test   eax,eax
c0011762:	0f 95 c0             	setne  al
c0011765:	31 d2                	xor    edx,edx
c0011767:	0f b6 c0             	movzx  eax,al
c001176a:	f7 d8                	neg    eax
c001176c:	83 d2 00             	adc    edx,0x0
c001176f:	83 c4 08             	add    esp,0x8
c0011772:	f7 da                	neg    edx
c0011774:	5b                   	pop    ebx
c0011775:	c3                   	ret    
c0011776:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001177b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011780:	83 c4 08             	add    esp,0x8
c0011783:	5b                   	pop    ebx
c0011784:	c3                   	ret    

c0011785 <SysTell(regs*)>:
c0011785:	53                   	push   ebx
c0011786:	83 ec 08             	sub    esp,0x8
c0011789:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001178d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011790:	83 f8 02             	cmp    eax,0x2
c0011793:	76 56                	jbe    c00117eb <SysTell(regs*)+0x66>
c0011795:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001179a:	76 19                	jbe    c00117b5 <SysTell(regs*)+0x30>
c001179c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001179f:	31 d2                	xor    edx,edx
c00117a1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00117a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00117ae:	31 c0                	xor    eax,eax
c00117b0:	83 c4 08             	add    esp,0x8
c00117b3:	5b                   	pop    ebx
c00117b4:	c3                   	ret    
c00117b5:	83 ec 0c             	sub    esp,0xc
c00117b8:	50                   	push   eax
c00117b9:	e8 7f 1c 00 00       	call   c001343d <KeGetFileFromDescriptor(int)>
c00117be:	83 c4 10             	add    esp,0x10
c00117c1:	85 c0                	test   eax,eax
c00117c3:	74 26                	je     c00117eb <SysTell(regs*)+0x66>
c00117c5:	83 ec 08             	sub    esp,0x8
c00117c8:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00117cb:	52                   	push   edx
c00117cc:	50                   	push   eax
c00117cd:	e8 40 6b ff ff       	call   c0008312 <File::tell(unsigned long long*)>
c00117d2:	83 c4 10             	add    esp,0x10
c00117d5:	85 c0                	test   eax,eax
c00117d7:	0f 95 c0             	setne  al
c00117da:	31 d2                	xor    edx,edx
c00117dc:	0f b6 c0             	movzx  eax,al
c00117df:	f7 d8                	neg    eax
c00117e1:	83 d2 00             	adc    edx,0x0
c00117e4:	83 c4 08             	add    esp,0x8
c00117e7:	f7 da                	neg    edx
c00117e9:	5b                   	pop    ebx
c00117ea:	c3                   	ret    
c00117eb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00117f0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00117f5:	83 c4 08             	add    esp,0x8
c00117f8:	5b                   	pop    ebx
c00117f9:	c3                   	ret    

c00117fa <SysSize(regs*)>:
c00117fa:	53                   	push   ebx
c00117fb:	83 ec 18             	sub    esp,0x18
c00117fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011802:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011805:	83 f8 02             	cmp    eax,0x2
c0011808:	76 5b                	jbe    c0011865 <SysSize(regs*)+0x6b>
c001180a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001180f:	76 19                	jbe    c001182a <SysSize(regs*)+0x30>
c0011811:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011814:	31 d2                	xor    edx,edx
c0011816:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001181c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011823:	31 c0                	xor    eax,eax
c0011825:	83 c4 18             	add    esp,0x18
c0011828:	5b                   	pop    ebx
c0011829:	c3                   	ret    
c001182a:	83 ec 0c             	sub    esp,0xc
c001182d:	50                   	push   eax
c001182e:	e8 0a 1c 00 00       	call   c001343d <KeGetFileFromDescriptor(int)>
c0011833:	83 c4 10             	add    esp,0x10
c0011836:	85 c0                	test   eax,eax
c0011838:	74 2b                	je     c0011865 <SysSize(regs*)+0x6b>
c001183a:	83 ec 04             	sub    esp,0x4
c001183d:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011841:	52                   	push   edx
c0011842:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011845:	52                   	push   edx
c0011846:	50                   	push   eax
c0011847:	e8 5e 6c ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c001184c:	83 c4 10             	add    esp,0x10
c001184f:	85 c0                	test   eax,eax
c0011851:	0f 95 c0             	setne  al
c0011854:	31 d2                	xor    edx,edx
c0011856:	0f b6 c0             	movzx  eax,al
c0011859:	f7 d8                	neg    eax
c001185b:	83 d2 00             	adc    edx,0x0
c001185e:	83 c4 18             	add    esp,0x18
c0011861:	f7 da                	neg    edx
c0011863:	5b                   	pop    ebx
c0011864:	c3                   	ret    
c0011865:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001186a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001186f:	83 c4 18             	add    esp,0x18
c0011872:	5b                   	pop    ebx
c0011873:	c3                   	ret    

c0011874 <SysSizeFromFilename(regs*)>:
c0011874:	55                   	push   ebp
c0011875:	57                   	push   edi
c0011876:	56                   	push   esi
c0011877:	53                   	push   ebx
c0011878:	81 ec 4c 02 00 00    	sub    esp,0x24c
c001187e:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011885:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011888:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001188b:	85 f6                	test   esi,esi
c001188d:	74 34                	je     c00118c3 <SysSizeFromFilename(regs*)+0x4f>
c001188f:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011895:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011898:	83 f8 02             	cmp    eax,0x2
c001189b:	76 2d                	jbe    c00118ca <SysSizeFromFilename(regs*)+0x56>
c001189d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00118a2:	76 3b                	jbe    c00118df <SysSizeFromFilename(regs*)+0x6b>
c00118a4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00118a7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00118ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00118b4:	81 c4 4c 02 00 00    	add    esp,0x24c
c00118ba:	31 c0                	xor    eax,eax
c00118bc:	5b                   	pop    ebx
c00118bd:	31 d2                	xor    edx,edx
c00118bf:	5e                   	pop    esi
c00118c0:	5f                   	pop    edi
c00118c1:	5d                   	pop    ebp
c00118c2:	c3                   	ret    
c00118c3:	89 f8                	mov    eax,edi
c00118c5:	83 f8 02             	cmp    eax,0x2
c00118c8:	77 d3                	ja     c001189d <SysSizeFromFilename(regs*)+0x29>
c00118ca:	81 c4 4c 02 00 00    	add    esp,0x24c
c00118d0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00118d5:	5b                   	pop    ebx
c00118d6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118db:	5e                   	pop    esi
c00118dc:	5f                   	pop    edi
c00118dd:	5d                   	pop    ebp
c00118de:	c3                   	ret    
c00118df:	83 ec 0c             	sub    esp,0xc
c00118e2:	68 14 01 00 00       	push   0x114
c00118e7:	e8 a3 e2 ff ff       	call   c000fb8f <malloc>
c00118ec:	6a 01                	push   0x1
c00118ee:	89 c5                	mov    ebp,eax
c00118f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118f5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118f8:	50                   	push   eax
c00118f9:	57                   	push   edi
c00118fa:	55                   	push   ebp
c00118fb:	e8 8c 67 ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c0011900:	83 c4 20             	add    esp,0x20
c0011903:	85 ed                	test   ebp,ebp
c0011905:	74 c3                	je     c00118ca <SysSizeFromFilename(regs*)+0x56>
c0011907:	83 ec 04             	sub    esp,0x4
c001190a:	8d 44 24 13          	lea    eax,[esp+0x13]
c001190e:	50                   	push   eax
c001190f:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011912:	51                   	push   ecx
c0011913:	55                   	push   ebp
c0011914:	e8 91 6b ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c0011919:	89 c3                	mov    ebx,eax
c001191b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001191e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011921:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011924:	83 c4 10             	add    esp,0x10
c0011927:	85 db                	test   ebx,ebx
c0011929:	75 9f                	jne    c00118ca <SysSizeFromFilename(regs*)+0x56>
c001192b:	6a 00                	push   0x0
c001192d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011932:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011935:	05 0c 01 00 00       	add    eax,0x10c
c001193a:	50                   	push   eax
c001193b:	57                   	push   edi
c001193c:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0011943:	53                   	push   ebx
c0011944:	e8 29 65 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011949:	58                   	pop    eax
c001194a:	5a                   	pop    edx
c001194b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001194f:	50                   	push   eax
c0011950:	53                   	push   ebx
c0011951:	e8 a3 5f ff ff       	call   c00078f9 <KeDereferenceSymlink(char const*, char*)>
c0011956:	83 c4 10             	add    esp,0x10
c0011959:	83 f8 01             	cmp    eax,0x1
c001195c:	74 1a                	je     c0011978 <SysSizeFromFilename(regs*)+0x104>
c001195e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011963:	74 26                	je     c001198b <SysSizeFromFilename(regs*)+0x117>
c0011965:	85 f6                	test   esi,esi
c0011967:	0f 84 47 ff ff ff    	je     c00118b4 <SysSizeFromFilename(regs*)+0x40>
c001196d:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011973:	e9 3c ff ff ff       	jmp    c00118b4 <SysSizeFromFilename(regs*)+0x40>
c0011978:	85 f6                	test   esi,esi
c001197a:	0f 84 34 ff ff ff    	je     c00118b4 <SysSizeFromFilename(regs*)+0x40>
c0011980:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011986:	e9 29 ff ff ff       	jmp    c00118b4 <SysSizeFromFilename(regs*)+0x40>
c001198b:	85 f6                	test   esi,esi
c001198d:	0f 84 21 ff ff ff    	je     c00118b4 <SysSizeFromFilename(regs*)+0x40>
c0011993:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011999:	e9 16 ff ff ff       	jmp    c00118b4 <SysSizeFromFilename(regs*)+0x40>

c001199e <SysSizeFromFilenameNoSymlink(regs*)>:
c001199e:	55                   	push   ebp
c001199f:	57                   	push   edi
c00119a0:	56                   	push   esi
c00119a1:	53                   	push   ebx
c00119a2:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00119a8:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00119af:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00119b2:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00119b5:	85 f6                	test   esi,esi
c00119b7:	74 34                	je     c00119ed <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c00119b9:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00119bf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00119c2:	83 f8 02             	cmp    eax,0x2
c00119c5:	76 2d                	jbe    c00119f4 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00119c7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00119cc:	76 3b                	jbe    c0011a09 <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c00119ce:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00119d1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00119d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00119de:	81 c4 4c 02 00 00    	add    esp,0x24c
c00119e4:	31 c0                	xor    eax,eax
c00119e6:	5b                   	pop    ebx
c00119e7:	31 d2                	xor    edx,edx
c00119e9:	5e                   	pop    esi
c00119ea:	5f                   	pop    edi
c00119eb:	5d                   	pop    ebp
c00119ec:	c3                   	ret    
c00119ed:	89 f8                	mov    eax,edi
c00119ef:	83 f8 02             	cmp    eax,0x2
c00119f2:	77 d3                	ja     c00119c7 <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c00119f4:	81 c4 4c 02 00 00    	add    esp,0x24c
c00119fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00119ff:	5b                   	pop    ebx
c0011a00:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a05:	5e                   	pop    esi
c0011a06:	5f                   	pop    edi
c0011a07:	5d                   	pop    ebp
c0011a08:	c3                   	ret    
c0011a09:	83 ec 0c             	sub    esp,0xc
c0011a0c:	68 14 01 00 00       	push   0x114
c0011a11:	e8 79 e1 ff ff       	call   c000fb8f <malloc>
c0011a16:	6a 00                	push   0x0
c0011a18:	89 c5                	mov    ebp,eax
c0011a1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a1f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a22:	50                   	push   eax
c0011a23:	57                   	push   edi
c0011a24:	55                   	push   ebp
c0011a25:	e8 62 66 ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c0011a2a:	83 c4 20             	add    esp,0x20
c0011a2d:	85 ed                	test   ebp,ebp
c0011a2f:	74 c3                	je     c00119f4 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0011a31:	83 ec 04             	sub    esp,0x4
c0011a34:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011a38:	50                   	push   eax
c0011a39:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011a3c:	51                   	push   ecx
c0011a3d:	55                   	push   ebp
c0011a3e:	e8 67 6a ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c0011a43:	89 c3                	mov    ebx,eax
c0011a45:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011a48:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011a4b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011a4e:	83 c4 10             	add    esp,0x10
c0011a51:	85 db                	test   ebx,ebx
c0011a53:	75 9f                	jne    c00119f4 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0011a55:	6a 00                	push   0x0
c0011a57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a5c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a5f:	05 0c 01 00 00       	add    eax,0x10c
c0011a64:	50                   	push   eax
c0011a65:	57                   	push   edi
c0011a66:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0011a6d:	53                   	push   ebx
c0011a6e:	e8 ff 63 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011a73:	58                   	pop    eax
c0011a74:	5a                   	pop    edx
c0011a75:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011a79:	50                   	push   eax
c0011a7a:	53                   	push   ebx
c0011a7b:	e8 79 5e ff ff       	call   c00078f9 <KeDereferenceSymlink(char const*, char*)>
c0011a80:	83 c4 10             	add    esp,0x10
c0011a83:	83 f8 01             	cmp    eax,0x1
c0011a86:	74 1a                	je     c0011aa2 <SysSizeFromFilenameNoSymlink(regs*)+0x104>
c0011a88:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011a8d:	74 26                	je     c0011ab5 <SysSizeFromFilenameNoSymlink(regs*)+0x117>
c0011a8f:	85 f6                	test   esi,esi
c0011a91:	0f 84 47 ff ff ff    	je     c00119de <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011a97:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011a9d:	e9 3c ff ff ff       	jmp    c00119de <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011aa2:	85 f6                	test   esi,esi
c0011aa4:	0f 84 34 ff ff ff    	je     c00119de <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011aaa:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011ab0:	e9 29 ff ff ff       	jmp    c00119de <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011ab5:	85 f6                	test   esi,esi
c0011ab7:	0f 84 21 ff ff ff    	je     c00119de <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011abd:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011ac3:	e9 16 ff ff ff       	jmp    c00119de <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c0011ac8 <SysClose(regs*)>:
c0011ac8:	53                   	push   ebx
c0011ac9:	83 ec 08             	sub    esp,0x8
c0011acc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ad0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ad3:	83 f8 02             	cmp    eax,0x2
c0011ad6:	76 41                	jbe    c0011b19 <SysClose(regs*)+0x51>
c0011ad8:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011ade:	83 fa 01             	cmp    edx,0x1
c0011ae1:	76 2d                	jbe    c0011b10 <SysClose(regs*)+0x48>
c0011ae3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011ae8:	77 2f                	ja     c0011b19 <SysClose(regs*)+0x51>
c0011aea:	83 ec 0c             	sub    esp,0xc
c0011aed:	50                   	push   eax
c0011aee:	e8 4a 19 00 00       	call   c001343d <KeGetFileFromDescriptor(int)>
c0011af3:	83 c4 10             	add    esp,0x10
c0011af6:	89 c3                	mov    ebx,eax
c0011af8:	85 c0                	test   eax,eax
c0011afa:	74 1d                	je     c0011b19 <SysClose(regs*)+0x51>
c0011afc:	83 ec 0c             	sub    esp,0xc
c0011aff:	50                   	push   eax
c0011b00:	e8 01 67 ff ff       	call   c0008206 <File::close()>
c0011b05:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011b07:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011b0a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b0d:	83 c4 10             	add    esp,0x10
c0011b10:	31 c0                	xor    eax,eax
c0011b12:	31 d2                	xor    edx,edx
c0011b14:	83 c4 08             	add    esp,0x8
c0011b17:	5b                   	pop    ebx
c0011b18:	c3                   	ret    
c0011b19:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b1e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b23:	83 c4 08             	add    esp,0x8
c0011b26:	5b                   	pop    ebx
c0011b27:	c3                   	ret    

c0011b28 <SysOpenDir(regs*)>:
c0011b28:	56                   	push   esi
c0011b29:	53                   	push   ebx
c0011b2a:	83 ec 04             	sub    esp,0x4
c0011b2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b31:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011b34:	85 c9                	test   ecx,ecx
c0011b36:	74 5d                	je     c0011b95 <SysOpenDir(regs*)+0x6d>
c0011b38:	83 ec 0c             	sub    esp,0xc
c0011b3b:	68 14 01 00 00       	push   0x114
c0011b40:	e8 4a e0 ff ff       	call   c000fb8f <malloc>
c0011b45:	83 c4 0c             	add    esp,0xc
c0011b48:	89 c6                	mov    esi,eax
c0011b4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b4f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011b52:	50                   	push   eax
c0011b53:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011b56:	52                   	push   edx
c0011b57:	56                   	push   esi
c0011b58:	e8 0d 6b ff ff       	call   c000866a <Directory::Directory(char const*, Process*)>
c0011b5d:	83 c4 10             	add    esp,0x10
c0011b60:	85 f6                	test   esi,esi
c0011b62:	74 31                	je     c0011b95 <SysOpenDir(regs*)+0x6d>
c0011b64:	83 ec 0c             	sub    esp,0xc
c0011b67:	56                   	push   esi
c0011b68:	e8 c5 6b ff ff       	call   c0008732 <Directory::open()>
c0011b6d:	83 c4 10             	add    esp,0x10
c0011b70:	85 c0                	test   eax,eax
c0011b72:	75 21                	jne    c0011b95 <SysOpenDir(regs*)+0x6d>
c0011b74:	83 ec 0c             	sub    esp,0xc
c0011b77:	56                   	push   esi
c0011b78:	e8 c3 15 00 00       	call   c0013140 <UnixFile::getFileDescriptor()>
c0011b7d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011b80:	83 c4 10             	add    esp,0x10
c0011b83:	89 02                	mov    DWORD PTR [edx],eax
c0011b85:	c1 f8 1f             	sar    eax,0x1f
c0011b88:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011b8b:	83 c4 04             	add    esp,0x4
c0011b8e:	31 c0                	xor    eax,eax
c0011b90:	31 d2                	xor    edx,edx
c0011b92:	5b                   	pop    ebx
c0011b93:	5e                   	pop    esi
c0011b94:	c3                   	ret    
c0011b95:	83 c4 04             	add    esp,0x4
c0011b98:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b9d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ba2:	5b                   	pop    ebx
c0011ba3:	5e                   	pop    esi
c0011ba4:	c3                   	ret    

c0011ba5 <SysMakeDir(regs*)>:
c0011ba5:	56                   	push   esi
c0011ba6:	53                   	push   ebx
c0011ba7:	83 ec 10             	sub    esp,0x10
c0011baa:	68 14 01 00 00       	push   0x114
c0011baf:	e8 db df ff ff       	call   c000fb8f <malloc>
c0011bb4:	83 c4 0c             	add    esp,0xc
c0011bb7:	89 c3                	mov    ebx,eax
c0011bb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bbe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011bc1:	50                   	push   eax
c0011bc2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011bc6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011bc9:	52                   	push   edx
c0011bca:	53                   	push   ebx
c0011bcb:	e8 9a 6a ff ff       	call   c000866a <Directory::Directory(char const*, Process*)>
c0011bd0:	83 c4 10             	add    esp,0x10
c0011bd3:	85 db                	test   ebx,ebx
c0011bd5:	74 2c                	je     c0011c03 <SysMakeDir(regs*)+0x5e>
c0011bd7:	83 ec 0c             	sub    esp,0xc
c0011bda:	53                   	push   ebx
c0011bdb:	e8 32 6d ff ff       	call   c0008912 <Directory::create()>
c0011be0:	89 c6                	mov    esi,eax
c0011be2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011be4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011be7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011bea:	83 c4 10             	add    esp,0x10
c0011bed:	31 c0                	xor    eax,eax
c0011bef:	85 f6                	test   esi,esi
c0011bf1:	0f 95 c0             	setne  al
c0011bf4:	31 d2                	xor    edx,edx
c0011bf6:	f7 d8                	neg    eax
c0011bf8:	83 d2 00             	adc    edx,0x0
c0011bfb:	83 c4 04             	add    esp,0x4
c0011bfe:	f7 da                	neg    edx
c0011c00:	5b                   	pop    ebx
c0011c01:	5e                   	pop    esi
c0011c02:	c3                   	ret    
c0011c03:	83 c4 04             	add    esp,0x4
c0011c06:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c0b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c10:	5b                   	pop    ebx
c0011c11:	5e                   	pop    esi
c0011c12:	c3                   	ret    

c0011c13 <SysCloseDir(regs*)>:
c0011c13:	53                   	push   ebx
c0011c14:	83 ec 08             	sub    esp,0x8
c0011c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c1b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011c1e:	8d 50 fd             	lea    edx,[eax-0x3]
c0011c21:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011c27:	77 2f                	ja     c0011c58 <SysCloseDir(regs*)+0x45>
c0011c29:	83 ec 0c             	sub    esp,0xc
c0011c2c:	50                   	push   eax
c0011c2d:	e8 0b 18 00 00       	call   c001343d <KeGetFileFromDescriptor(int)>
c0011c32:	83 c4 10             	add    esp,0x10
c0011c35:	89 c3                	mov    ebx,eax
c0011c37:	85 c0                	test   eax,eax
c0011c39:	74 1d                	je     c0011c58 <SysCloseDir(regs*)+0x45>
c0011c3b:	83 ec 0c             	sub    esp,0xc
c0011c3e:	50                   	push   eax
c0011c3f:	e8 4a 6b ff ff       	call   c000878e <Directory::close()>
c0011c44:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011c46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c49:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011c4c:	83 c4 10             	add    esp,0x10
c0011c4f:	31 c0                	xor    eax,eax
c0011c51:	31 d2                	xor    edx,edx
c0011c53:	83 c4 08             	add    esp,0x8
c0011c56:	5b                   	pop    ebx
c0011c57:	c3                   	ret    
c0011c58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c5d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c62:	83 c4 08             	add    esp,0x8
c0011c65:	5b                   	pop    ebx
c0011c66:	c3                   	ret    

c0011c67 <SysWait(regs*)>:
c0011c67:	83 ec 10             	sub    esp,0x10
c0011c6a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c6e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011c71:	52                   	push   edx
c0011c72:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011c75:	51                   	push   ecx
c0011c76:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011c79:	50                   	push   eax
c0011c7a:	e8 91 56 00 00       	call   c0017310 <waitTask(int, int*, int)>
c0011c7f:	83 c4 1c             	add    esp,0x1c
c0011c82:	89 c2                	mov    edx,eax
c0011c84:	c1 fa 1f             	sar    edx,0x1f
c0011c87:	c3                   	ret    

c0011c88 <SysNotImpl(regs*)>:
c0011c88:	83 ec 18             	sub    esp,0x18
c0011c8b:	68 23 48 02 c0       	push   0xc0024823
c0011c90:	e8 51 e3 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0011c95:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c9a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c9f:	83 c4 1c             	add    esp,0x1c
c0011ca2:	c3                   	ret    

c0011ca3 <SysPanic(regs*)>:
c0011ca3:	83 ec 18             	sub    esp,0x18
c0011ca6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011caa:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011cad:	50                   	push   eax
c0011cae:	e8 33 e3 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0011cb3:	b8 01 00 00 00       	mov    eax,0x1
c0011cb8:	31 d2                	xor    edx,edx
c0011cba:	83 c4 1c             	add    esp,0x1c
c0011cbd:	c3                   	ret    

c0011cbe <SysRmdir(regs*)>:
c0011cbe:	56                   	push   esi
c0011cbf:	53                   	push   ebx
c0011cc0:	83 ec 20             	sub    esp,0x20
c0011cc3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cc7:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011cca:	68 14 01 00 00       	push   0x114
c0011ccf:	e8 bb de ff ff       	call   c000fb8f <malloc>
c0011cd4:	6a 00                	push   0x0
c0011cd6:	89 c3                	mov    ebx,eax
c0011cd8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cdd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ce0:	50                   	push   eax
c0011ce1:	56                   	push   esi
c0011ce2:	53                   	push   ebx
c0011ce3:	e8 a4 63 ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c0011ce8:	83 c4 14             	add    esp,0x14
c0011ceb:	53                   	push   ebx
c0011cec:	e8 85 66 ff ff       	call   c0008376 <File::unlink()>
c0011cf1:	83 c4 10             	add    esp,0x10
c0011cf4:	85 db                	test   ebx,ebx
c0011cf6:	74 14                	je     c0011d0c <SysRmdir(regs*)+0x4e>
c0011cf8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011cfc:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011cfe:	83 ec 0c             	sub    esp,0xc
c0011d01:	53                   	push   ebx
c0011d02:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011d05:	83 c4 10             	add    esp,0x10
c0011d08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d0c:	85 c0                	test   eax,eax
c0011d0e:	0f 95 c0             	setne  al
c0011d11:	31 d2                	xor    edx,edx
c0011d13:	0f b6 c0             	movzx  eax,al
c0011d16:	f7 d8                	neg    eax
c0011d18:	83 d2 00             	adc    edx,0x0
c0011d1b:	83 c4 14             	add    esp,0x14
c0011d1e:	f7 da                	neg    edx
c0011d20:	5b                   	pop    ebx
c0011d21:	5e                   	pop    esi
c0011d22:	c3                   	ret    

c0011d23 <SysUnlink(regs*)>:
c0011d23:	56                   	push   esi
c0011d24:	53                   	push   ebx
c0011d25:	83 ec 20             	sub    esp,0x20
c0011d28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d2c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011d2f:	68 14 01 00 00       	push   0x114
c0011d34:	e8 56 de ff ff       	call   c000fb8f <malloc>
c0011d39:	6a 00                	push   0x0
c0011d3b:	89 c3                	mov    ebx,eax
c0011d3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d42:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d45:	50                   	push   eax
c0011d46:	56                   	push   esi
c0011d47:	53                   	push   ebx
c0011d48:	e8 3f 63 ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c0011d4d:	83 c4 14             	add    esp,0x14
c0011d50:	53                   	push   ebx
c0011d51:	e8 20 66 ff ff       	call   c0008376 <File::unlink()>
c0011d56:	83 c4 10             	add    esp,0x10
c0011d59:	85 db                	test   ebx,ebx
c0011d5b:	74 14                	je     c0011d71 <SysUnlink(regs*)+0x4e>
c0011d5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d61:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d63:	83 ec 0c             	sub    esp,0xc
c0011d66:	53                   	push   ebx
c0011d67:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011d6a:	83 c4 10             	add    esp,0x10
c0011d6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d71:	85 c0                	test   eax,eax
c0011d73:	0f 95 c0             	setne  al
c0011d76:	31 d2                	xor    edx,edx
c0011d78:	0f b6 c0             	movzx  eax,al
c0011d7b:	f7 d8                	neg    eax
c0011d7d:	83 d2 00             	adc    edx,0x0
c0011d80:	83 c4 14             	add    esp,0x14
c0011d83:	f7 da                	neg    edx
c0011d85:	5b                   	pop    ebx
c0011d86:	5e                   	pop    esi
c0011d87:	c3                   	ret    

c0011d88 <SysGetArgv(regs*)>:
c0011d88:	83 ec 0c             	sub    esp,0xc
c0011d8b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011d8f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011d92:	85 c0                	test   eax,eax
c0011d94:	78 2c                	js     c0011dc2 <SysGetArgv(regs*)+0x3a>
c0011d96:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011d9c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0011d9f:	3b 81 b6 05 00 00    	cmp    eax,DWORD PTR [ecx+0x5b6]
c0011da5:	7d 1b                	jge    c0011dc2 <SysGetArgv(regs*)+0x3a>
c0011da7:	8b 84 81 ba 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x5ba]
c0011dae:	85 c0                	test   eax,eax
c0011db0:	74 18                	je     c0011dca <SysGetArgv(regs*)+0x42>
c0011db2:	83 ec 08             	sub    esp,0x8
c0011db5:	50                   	push   eax
c0011db6:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011db9:	50                   	push   eax
c0011dba:	e8 81 e8 fe ff       	call   c0000640 <strcpy>
c0011dbf:	83 c4 10             	add    esp,0x10
c0011dc2:	31 c0                	xor    eax,eax
c0011dc4:	31 d2                	xor    edx,edx
c0011dc6:	83 c4 0c             	add    esp,0xc
c0011dc9:	c3                   	ret    
c0011dca:	b8 01 00 00 00       	mov    eax,0x1
c0011dcf:	31 d2                	xor    edx,edx
c0011dd1:	83 c4 0c             	add    esp,0xc
c0011dd4:	c3                   	ret    

c0011dd5 <SysUSleep(regs*)>:
c0011dd5:	83 ec 1c             	sub    esp,0x1c
c0011dd8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011ddc:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011ddf:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011de2:	6a 00                	push   0x0
c0011de4:	6a 64                	push   0x64
c0011de6:	52                   	push   edx
c0011de7:	50                   	push   eax
c0011de8:	e8 47 ff 00 00       	call   c0021d34 <__udivdi3>
c0011ded:	83 c4 18             	add    esp,0x18
c0011df0:	52                   	push   edx
c0011df1:	50                   	push   eax
c0011df2:	e8 11 56 00 00       	call   c0017408 <milliTenthSleep(unsigned long long)>
c0011df7:	31 c0                	xor    eax,eax
c0011df9:	31 d2                	xor    edx,edx
c0011dfb:	83 c4 1c             	add    esp,0x1c
c0011dfe:	c3                   	ret    

c0011dff <SysSpawn(regs*)>:
c0011dff:	56                   	push   esi
c0011e00:	53                   	push   ebx
c0011e01:	83 ec 04             	sub    esp,0x4
c0011e04:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011e08:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011e0b:	85 f6                	test   esi,esi
c0011e0d:	75 0a                	jne    c0011e19 <SysSpawn(regs*)+0x1a>
c0011e0f:	83 c4 04             	add    esp,0x4
c0011e12:	31 c0                	xor    eax,eax
c0011e14:	31 d2                	xor    edx,edx
c0011e16:	5b                   	pop    ebx
c0011e17:	5e                   	pop    esi
c0011e18:	c3                   	ret    
c0011e19:	83 ec 0c             	sub    esp,0xc
c0011e1c:	68 c4 07 00 00       	push   0x7c4
c0011e21:	e8 69 dd ff ff       	call   c000fb8f <malloc>
c0011e26:	83 c4 10             	add    esp,0x10
c0011e29:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011e2c:	89 c6                	mov    esi,eax
c0011e2e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011e31:	85 c9                	test   ecx,ecx
c0011e33:	74 39                	je     c0011e6e <SysSpawn(regs*)+0x6f>
c0011e35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e3a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011e3d:	52                   	push   edx
c0011e3e:	50                   	push   eax
c0011e3f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011e42:	50                   	push   eax
c0011e43:	56                   	push   esi
c0011e44:	e8 93 4c 00 00       	call   c0016adc <Process::Process(char const*, Process*, char**)>
c0011e49:	83 c4 10             	add    esp,0x10
c0011e4c:	80 be be 07 00 00 00 	cmp    BYTE PTR [esi+0x7be],0x0
c0011e53:	75 ba                	jne    c0011e0f <SysSpawn(regs*)+0x10>
c0011e55:	83 ec 0c             	sub    esp,0xc
c0011e58:	56                   	push   esi
c0011e59:	e8 4e 52 00 00       	call   c00170ac <Process::createUserThread()>
c0011e5e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e60:	83 c4 10             	add    esp,0x10
c0011e63:	89 c2                	mov    edx,eax
c0011e65:	83 c4 04             	add    esp,0x4
c0011e68:	c1 fa 1f             	sar    edx,0x1f
c0011e6b:	5b                   	pop    ebx
c0011e6c:	5e                   	pop    esi
c0011e6d:	c3                   	ret    
c0011e6e:	31 c0                	xor    eax,eax
c0011e70:	eb cb                	jmp    c0011e3d <SysSpawn(regs*)+0x3e>

c0011e72 <SysGetEnv(regs*)>:
c0011e72:	57                   	push   edi
c0011e73:	56                   	push   esi
c0011e74:	53                   	push   ebx
c0011e75:	83 ec 1c             	sub    esp,0x1c
c0011e78:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011e7c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e81:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011e84:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011e87:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0011e8a:	51                   	push   ecx
c0011e8b:	e8 3b c9 ff ff       	call   c000e7cb <KeGetProcessTotalEnvCount(Process*)>
c0011e90:	83 c4 10             	add    esp,0x10
c0011e93:	39 c7                	cmp    edi,eax
c0011e95:	7c 14                	jl     c0011eab <SysGetEnv(regs*)+0x39>
c0011e97:	85 f6                	test   esi,esi
c0011e99:	75 0b                	jne    c0011ea6 <SysGetEnv(regs*)+0x34>
c0011e9b:	83 c4 10             	add    esp,0x10
c0011e9e:	31 c0                	xor    eax,eax
c0011ea0:	5b                   	pop    ebx
c0011ea1:	31 d2                	xor    edx,edx
c0011ea3:	5e                   	pop    esi
c0011ea4:	5f                   	pop    edi
c0011ea5:	c3                   	ret    
c0011ea6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011ea9:	eb f0                	jmp    c0011e9b <SysGetEnv(regs*)+0x29>
c0011eab:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011eaf:	83 ec 04             	sub    esp,0x4
c0011eb2:	57                   	push   edi
c0011eb3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011eb9:	8b 7a 40             	mov    edi,DWORD PTR [edx+0x40]
c0011ebc:	57                   	push   edi
c0011ebd:	50                   	push   eax
c0011ebe:	e8 28 c9 ff ff       	call   c000e7eb <KeGetProcessEnvPair(Process*, int)>
c0011ec3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011ec6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011eca:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011ece:	83 c4 0c             	add    esp,0xc
c0011ed1:	85 d2                	test   edx,edx
c0011ed3:	75 23                	jne    c0011ef8 <SysGetEnv(regs*)+0x86>
c0011ed5:	83 ec 0c             	sub    esp,0xc
c0011ed8:	50                   	push   eax
c0011ed9:	e8 92 e6 fe ff       	call   c0000570 <strlen>
c0011ede:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011ee1:	89 c3                	mov    ebx,eax
c0011ee3:	e8 88 e6 fe ff       	call   c0000570 <strlen>
c0011ee8:	83 c4 10             	add    esp,0x10
c0011eeb:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011eef:	83 c4 10             	add    esp,0x10
c0011ef2:	31 d2                	xor    edx,edx
c0011ef4:	5b                   	pop    ebx
c0011ef5:	5e                   	pop    esi
c0011ef6:	5f                   	pop    edi
c0011ef7:	c3                   	ret    
c0011ef8:	83 ec 08             	sub    esp,0x8
c0011efb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011efe:	50                   	push   eax
c0011eff:	56                   	push   esi
c0011f00:	e8 3b e7 fe ff       	call   c0000640 <strcpy>
c0011f05:	58                   	pop    eax
c0011f06:	5a                   	pop    edx
c0011f07:	68 3d 48 02 c0       	push   0xc002483d
c0011f0c:	56                   	push   esi
c0011f0d:	e8 2e e9 fe ff       	call   c0000840 <strcat>
c0011f12:	59                   	pop    ecx
c0011f13:	5b                   	pop    ebx
c0011f14:	57                   	push   edi
c0011f15:	56                   	push   esi
c0011f16:	e8 25 e9 fe ff       	call   c0000840 <strcat>
c0011f1b:	83 c4 10             	add    esp,0x10
c0011f1e:	e9 78 ff ff ff       	jmp    c0011e9b <SysGetEnv(regs*)+0x29>

c0011f23 <SysSetFatAttrib(regs*)>:
c0011f23:	57                   	push   edi
c0011f24:	56                   	push   esi
c0011f25:	53                   	push   ebx
c0011f26:	83 ec 1c             	sub    esp,0x1c
c0011f29:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011f2d:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011f30:	68 14 01 00 00       	push   0x114
c0011f35:	e8 55 dc ff ff       	call   c000fb8f <malloc>
c0011f3a:	83 c4 0c             	add    esp,0xc
c0011f3d:	89 c3                	mov    ebx,eax
c0011f3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f44:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011f47:	50                   	push   eax
c0011f48:	57                   	push   edi
c0011f49:	53                   	push   ebx
c0011f4a:	e8 3b 62 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0011f4f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011f52:	83 c4 0c             	add    esp,0xc
c0011f55:	0f b6 d4             	movzx  edx,ah
c0011f58:	0f b6 c0             	movzx  eax,al
c0011f5b:	52                   	push   edx
c0011f5c:	50                   	push   eax
c0011f5d:	53                   	push   ebx
c0011f5e:	e8 ad 64 ff ff       	call   c0008410 <File::chfatattr(unsigned char, unsigned char)>
c0011f63:	83 c4 10             	add    esp,0x10
c0011f66:	85 db                	test   ebx,ebx
c0011f68:	74 14                	je     c0011f7e <SysSetFatAttrib(regs*)+0x5b>
c0011f6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011f6e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011f70:	83 ec 0c             	sub    esp,0xc
c0011f73:	53                   	push   ebx
c0011f74:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011f77:	83 c4 10             	add    esp,0x10
c0011f7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f7e:	85 c0                	test   eax,eax
c0011f80:	0f 95 c0             	setne  al
c0011f83:	31 d2                	xor    edx,edx
c0011f85:	0f b6 c0             	movzx  eax,al
c0011f88:	f7 d8                	neg    eax
c0011f8a:	83 d2 00             	adc    edx,0x0
c0011f8d:	83 c4 10             	add    esp,0x10
c0011f90:	f7 da                	neg    edx
c0011f92:	5b                   	pop    ebx
c0011f93:	5e                   	pop    esi
c0011f94:	5f                   	pop    edi
c0011f95:	c3                   	ret    

c0011f96 <SysShutdown(regs*)>:
c0011f96:	83 ec 1c             	sub    esp,0x1c
c0011f99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f9d:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011fa0:	85 c9                	test   ecx,ecx
c0011fa2:	74 18                	je     c0011fbc <SysShutdown(regs*)+0x26>
c0011fa4:	83 f9 01             	cmp    ecx,0x1
c0011fa7:	74 26                	je     c0011fcf <SysShutdown(regs*)+0x39>
c0011fa9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fae:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fb3:	83 f9 02             	cmp    ecx,0x2
c0011fb6:	74 24                	je     c0011fdc <SysShutdown(regs*)+0x46>
c0011fb8:	83 c4 1c             	add    esp,0x1c
c0011fbb:	c3                   	ret    
c0011fbc:	e8 27 ea ff ff       	call   c00109e8 <KeShutdown()>
c0011fc1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fc6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fcb:	83 c4 1c             	add    esp,0x1c
c0011fce:	c3                   	ret    
c0011fcf:	e8 4a ea ff ff       	call   c0010a1e <KeSleep()>
c0011fd4:	31 c0                	xor    eax,eax
c0011fd6:	31 d2                	xor    edx,edx
c0011fd8:	83 c4 1c             	add    esp,0x1c
c0011fdb:	c3                   	ret    
c0011fdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011fe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011fe4:	e8 65 ea ff ff       	call   c0010a4e <KeRestart()>
c0011fe9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011fed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011ff1:	eb c5                	jmp    c0011fb8 <SysShutdown(regs*)+0x22>

c0011ff3 <SysPipe(regs*)>:
c0011ff3:	57                   	push   edi
c0011ff4:	56                   	push   esi
c0011ff5:	53                   	push   ebx
c0011ff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ffa:	83 ec 0c             	sub    esp,0xc
c0011ffd:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0012000:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0012003:	6a 20                	push   0x20
c0012005:	e8 85 db ff ff       	call   c000fb8f <malloc>
c001200a:	89 c3                	mov    ebx,eax
c001200c:	58                   	pop    eax
c001200d:	5a                   	pop    edx
c001200e:	68 00 50 00 00       	push   0x5000
c0012013:	53                   	push   ebx
c0012014:	e8 4f e8 ff ff       	call   c0010868 <Pipe::Pipe(int)>
c0012019:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001201c:	e8 1f 11 00 00       	call   c0013140 <UnixFile::getFileDescriptor()>
c0012021:	89 07                	mov    DWORD PTR [edi],eax
c0012023:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012026:	e8 15 11 00 00       	call   c0013140 <UnixFile::getFileDescriptor()>
c001202b:	83 c4 10             	add    esp,0x10
c001202e:	89 06                	mov    DWORD PTR [esi],eax
c0012030:	31 d2                	xor    edx,edx
c0012032:	5b                   	pop    ebx
c0012033:	31 c0                	xor    eax,eax
c0012035:	5e                   	pop    esi
c0012036:	5f                   	pop    edi
c0012037:	c3                   	ret    

c0012038 <SysGetUnixTime(regs*)>:
c0012038:	57                   	push   edi
c0012039:	56                   	push   esi
c001203a:	53                   	push   ebx
c001203b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001203f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012042:	83 f8 01             	cmp    eax,0x1
c0012045:	74 4b                	je     c0012092 <SysGetUnixTime(regs*)+0x5a>
c0012047:	83 f8 02             	cmp    eax,0x2
c001204a:	74 17                	je     c0012063 <SysGetUnixTime(regs*)+0x2b>
c001204c:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c0012051:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012057:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001205b:	5b                   	pop    ebx
c001205c:	5e                   	pop    esi
c001205d:	5f                   	pop    edi
c001205e:	e9 d7 70 ff ff       	jmp    c000913a <Clock::timeInSecondsLocal()>
c0012063:	8b 35 50 cb 02 c0    	mov    esi,DWORD PTR ds:0xc002cb50
c0012069:	8b 3d 54 cb 02 c0    	mov    edi,DWORD PTR ds:0xc002cb54
c001206f:	89 f0                	mov    eax,esi
c0012071:	89 fa                	mov    edx,edi
c0012073:	01 f0                	add    eax,esi
c0012075:	11 fa                	adc    edx,edi
c0012077:	01 f0                	add    eax,esi
c0012079:	11 fa                	adc    edx,edi
c001207b:	89 c1                	mov    ecx,eax
c001207d:	89 d3                	mov    ebx,edx
c001207f:	0f a4 cb 05          	shld   ebx,ecx,0x5
c0012083:	c1 e1 05             	shl    ecx,0x5
c0012086:	01 c8                	add    eax,ecx
c0012088:	11 da                	adc    edx,ebx
c001208a:	01 f0                	add    eax,esi
c001208c:	5b                   	pop    ebx
c001208d:	11 fa                	adc    edx,edi
c001208f:	5e                   	pop    esi
c0012090:	5f                   	pop    edi
c0012091:	c3                   	ret    
c0012092:	83 ec 0c             	sub    esp,0xc
c0012095:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c001209a:	be 40 42 0f 00       	mov    esi,0xf4240
c001209f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00120a5:	50                   	push   eax
c00120a6:	e8 8f 70 ff ff       	call   c000913a <Clock::timeInSecondsLocal()>
c00120ab:	83 c4 10             	add    esp,0x10
c00120ae:	69 da 40 42 0f 00    	imul   ebx,edx,0xf4240
c00120b4:	f7 e6                	mul    esi
c00120b6:	01 da                	add    edx,ebx
c00120b8:	5b                   	pop    ebx
c00120b9:	5e                   	pop    esi
c00120ba:	5f                   	pop    edi
c00120bb:	c3                   	ret    

c00120bc <string_ends_with(char const*, char const*)>:
c00120bc:	57                   	push   edi
c00120bd:	56                   	push   esi
c00120be:	53                   	push   ebx
c00120bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00120c3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00120c7:	83 ec 0c             	sub    esp,0xc
c00120ca:	53                   	push   ebx
c00120cb:	e8 a0 e4 fe ff       	call   c0000570 <strlen>
c00120d0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00120d3:	89 c6                	mov    esi,eax
c00120d5:	e8 96 e4 fe ff       	call   c0000570 <strlen>
c00120da:	83 c4 10             	add    esp,0x10
c00120dd:	39 c6                	cmp    esi,eax
c00120df:	7d 06                	jge    c00120e7 <string_ends_with(char const*, char const*)+0x2b>
c00120e1:	5b                   	pop    ebx
c00120e2:	31 c0                	xor    eax,eax
c00120e4:	5e                   	pop    esi
c00120e5:	5f                   	pop    edi
c00120e6:	c3                   	ret    
c00120e7:	83 ec 08             	sub    esp,0x8
c00120ea:	29 c6                	sub    esi,eax
c00120ec:	57                   	push   edi
c00120ed:	01 f3                	add    ebx,esi
c00120ef:	53                   	push   ebx
c00120f0:	e8 5b e6 fe ff       	call   c0000750 <strcmp>
c00120f5:	83 c4 10             	add    esp,0x10
c00120f8:	85 c0                	test   eax,eax
c00120fa:	5b                   	pop    ebx
c00120fb:	0f 94 c0             	sete   al
c00120fe:	5e                   	pop    esi
c00120ff:	0f b6 c0             	movzx  eax,al
c0012102:	5f                   	pop    edi
c0012103:	c3                   	ret    

c0012104 <SysOpen(regs*)>:
c0012104:	56                   	push   esi
c0012105:	53                   	push   ebx
c0012106:	81 ec 04 01 00 00    	sub    esp,0x104
c001210c:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012113:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012116:	85 c0                	test   eax,eax
c0012118:	0f 84 bc 01 00 00    	je     c00122da <SysOpen(regs*)+0x1d6>
c001211e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012121:	85 c0                	test   eax,eax
c0012123:	0f 84 b1 01 00 00    	je     c00122da <SysOpen(regs*)+0x1d6>
c0012129:	6a 00                	push   0x0
c001212b:	68 3f 48 02 c0       	push   0xc002483f
c0012130:	50                   	push   eax
c0012131:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012135:	56                   	push   esi
c0012136:	e8 37 5d ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001213b:	89 34 24             	mov    DWORD PTR [esp],esi
c001213e:	e8 2d e4 fe ff       	call   c0000570 <strlen>
c0012143:	83 c4 10             	add    esp,0x10
c0012146:	83 e8 01             	sub    eax,0x1
c0012149:	74 21                	je     c001216c <SysOpen(regs*)+0x68>
c001214b:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c001214f:	eb 12                	jmp    c0012163 <SysOpen(regs*)+0x5f>
c0012151:	83 fa 3a             	cmp    edx,0x3a
c0012154:	74 12                	je     c0012168 <SysOpen(regs*)+0x64>
c0012156:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001215a:	83 e8 01             	sub    eax,0x1
c001215d:	74 0d                	je     c001216c <SysOpen(regs*)+0x68>
c001215f:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0012163:	83 fa 2e             	cmp    edx,0x2e
c0012166:	75 e9                	jne    c0012151 <SysOpen(regs*)+0x4d>
c0012168:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001216c:	83 ec 08             	sub    esp,0x8
c001216f:	68 43 48 02 c0       	push   0xc0024843
c0012174:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012177:	50                   	push   eax
c0012178:	e8 3f ff ff ff       	call   c00120bc <string_ends_with(char const*, char const*)>
c001217d:	83 c4 10             	add    esp,0x10
c0012180:	85 c0                	test   eax,eax
c0012182:	74 1d                	je     c00121a1 <SysOpen(regs*)+0x9d>
c0012184:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012187:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001218d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012194:	81 c4 04 01 00 00    	add    esp,0x104
c001219a:	31 c0                	xor    eax,eax
c001219c:	31 d2                	xor    edx,edx
c001219e:	5b                   	pop    ebx
c001219f:	5e                   	pop    esi
c00121a0:	c3                   	ret    
c00121a1:	83 ec 08             	sub    esp,0x8
c00121a4:	68 48 48 02 c0       	push   0xc0024848
c00121a9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00121ac:	50                   	push   eax
c00121ad:	e8 0a ff ff ff       	call   c00120bc <string_ends_with(char const*, char const*)>
c00121b2:	83 c4 10             	add    esp,0x10
c00121b5:	85 c0                	test   eax,eax
c00121b7:	75 cb                	jne    c0012184 <SysOpen(regs*)+0x80>
c00121b9:	83 ec 08             	sub    esp,0x8
c00121bc:	68 44 48 02 c0       	push   0xc0024844
c00121c1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00121c4:	50                   	push   eax
c00121c5:	e8 86 e5 fe ff       	call   c0000750 <strcmp>
c00121ca:	83 c4 10             	add    esp,0x10
c00121cd:	85 c0                	test   eax,eax
c00121cf:	74 b3                	je     c0012184 <SysOpen(regs*)+0x80>
c00121d1:	83 ec 08             	sub    esp,0x8
c00121d4:	68 43 48 02 c0       	push   0xc0024843
c00121d9:	56                   	push   esi
c00121da:	e8 dd fe ff ff       	call   c00120bc <string_ends_with(char const*, char const*)>
c00121df:	83 c4 10             	add    esp,0x10
c00121e2:	85 c0                	test   eax,eax
c00121e4:	75 9e                	jne    c0012184 <SysOpen(regs*)+0x80>
c00121e6:	83 ec 08             	sub    esp,0x8
c00121e9:	68 4d 48 02 c0       	push   0xc002484d
c00121ee:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00121f1:	50                   	push   eax
c00121f2:	e8 c5 fe ff ff       	call   c00120bc <string_ends_with(char const*, char const*)>
c00121f7:	83 c4 10             	add    esp,0x10
c00121fa:	85 c0                	test   eax,eax
c00121fc:	0f 85 eb 00 00 00    	jne    c00122ed <SysOpen(regs*)+0x1e9>
c0012202:	83 ec 08             	sub    esp,0x8
c0012205:	68 52 48 02 c0       	push   0xc0024852
c001220a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001220d:	50                   	push   eax
c001220e:	e8 a9 fe ff ff       	call   c00120bc <string_ends_with(char const*, char const*)>
c0012213:	83 c4 10             	add    esp,0x10
c0012216:	85 c0                	test   eax,eax
c0012218:	0f 85 cf 00 00 00    	jne    c00122ed <SysOpen(regs*)+0x1e9>
c001221e:	83 ec 08             	sub    esp,0x8
c0012221:	68 4e 48 02 c0       	push   0xc002484e
c0012226:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012229:	51                   	push   ecx
c001222a:	e8 21 e5 fe ff       	call   c0000750 <strcmp>
c001222f:	83 c4 10             	add    esp,0x10
c0012232:	85 c0                	test   eax,eax
c0012234:	0f 84 b3 00 00 00    	je     c00122ed <SysOpen(regs*)+0x1e9>
c001223a:	83 ec 08             	sub    esp,0x8
c001223d:	68 4d 48 02 c0       	push   0xc002484d
c0012242:	56                   	push   esi
c0012243:	e8 74 fe ff ff       	call   c00120bc <string_ends_with(char const*, char const*)>
c0012248:	83 c4 10             	add    esp,0x10
c001224b:	85 c0                	test   eax,eax
c001224d:	0f 85 9a 00 00 00    	jne    c00122ed <SysOpen(regs*)+0x1e9>
c0012253:	83 ec 0c             	sub    esp,0xc
c0012256:	68 14 01 00 00       	push   0x114
c001225b:	e8 2f d9 ff ff       	call   c000fb8f <malloc>
c0012260:	83 c4 0c             	add    esp,0xc
c0012263:	89 c6                	mov    esi,eax
c0012265:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001226a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001226d:	50                   	push   eax
c001226e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012271:	52                   	push   edx
c0012272:	56                   	push   esi
c0012273:	e8 12 5f ff ff       	call   c000818a <File::File(char const*, Process*)>
c0012278:	83 c4 10             	add    esp,0x10
c001227b:	85 f6                	test   esi,esi
c001227d:	74 5b                	je     c00122da <SysOpen(regs*)+0x1d6>
c001227f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012282:	0f b6 c2             	movzx  eax,dl
c0012285:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012288:	89 d0                	mov    eax,edx
c001228a:	83 e0 01             	and    eax,0x1
c001228d:	f6 c2 02             	test   dl,0x2
c0012290:	74 03                	je     c0012295 <SysOpen(regs*)+0x191>
c0012292:	83 c8 02             	or     eax,0x2
c0012295:	f6 c2 04             	test   dl,0x4
c0012298:	74 03                	je     c001229d <SysOpen(regs*)+0x199>
c001229a:	83 c8 04             	or     eax,0x4
c001229d:	f6 c2 08             	test   dl,0x8
c00122a0:	74 03                	je     c00122a5 <SysOpen(regs*)+0x1a1>
c00122a2:	83 c8 0a             	or     eax,0xa
c00122a5:	80 e2 10             	and    dl,0x10
c00122a8:	74 03                	je     c00122ad <SysOpen(regs*)+0x1a9>
c00122aa:	83 c8 12             	or     eax,0x12
c00122ad:	83 ec 08             	sub    esp,0x8
c00122b0:	50                   	push   eax
c00122b1:	56                   	push   esi
c00122b2:	e8 f1 5e ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c00122b7:	83 c4 10             	add    esp,0x10
c00122ba:	85 c0                	test   eax,eax
c00122bc:	75 1c                	jne    c00122da <SysOpen(regs*)+0x1d6>
c00122be:	83 ec 0c             	sub    esp,0xc
c00122c1:	56                   	push   esi
c00122c2:	e8 79 0e 00 00       	call   c0013140 <UnixFile::getFileDescriptor()>
c00122c7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00122ca:	83 c4 10             	add    esp,0x10
c00122cd:	89 02                	mov    DWORD PTR [edx],eax
c00122cf:	c1 f8 1f             	sar    eax,0x1f
c00122d2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00122d5:	e9 ba fe ff ff       	jmp    c0012194 <SysOpen(regs*)+0x90>
c00122da:	81 c4 04 01 00 00    	add    esp,0x104
c00122e0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00122e5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00122ea:	5b                   	pop    ebx
c00122eb:	5e                   	pop    esi
c00122ec:	c3                   	ret    
c00122ed:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00122f0:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00122f6:	e9 92 fe ff ff       	jmp    c001218d <SysOpen(regs*)+0x89>

c00122fb <KeSystemCall(regs*, void*)>:
c00122fb:	53                   	push   ebx
c00122fc:	83 ec 08             	sub    esp,0x8
c00122ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012303:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012306:	83 f8 48             	cmp    eax,0x48
c0012309:	77 16                	ja     c0012321 <KeSystemCall(regs*, void*)+0x26>
c001230b:	8b 14 85 a0 6d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9260]
c0012312:	85 d2                	test   edx,edx
c0012314:	74 0b                	je     c0012321 <KeSystemCall(regs*, void*)+0x26>
c0012316:	83 ec 0c             	sub    esp,0xc
c0012319:	53                   	push   ebx
c001231a:	ff d2                	call   edx
c001231c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001231f:	eb 0d                	jmp    c001232e <KeSystemCall(regs*, void*)+0x33>
c0012321:	52                   	push   edx
c0012322:	52                   	push   edx
c0012323:	50                   	push   eax
c0012324:	68 57 48 02 c0       	push   0xc0024857
c0012329:	e8 4e 4c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001232e:	83 c4 10             	add    esp,0x10
c0012331:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012336:	31 d2                	xor    edx,edx
c0012338:	83 c4 08             	add    esp,0x8
c001233b:	5b                   	pop    ebx
c001233c:	c3                   	ret    
c001233d:	90                   	nop

c001233e <VgaText::isAtty()>:
c001233e:	b0 01                	mov    al,0x1
c0012340:	c3                   	ret    
c0012341:	90                   	nop

c0012342 <VgaText::~VgaText()>:
c0012342:	83 ec 0c             	sub    esp,0xc
c0012345:	ba c0 48 02 c0       	mov    edx,0xc00248c0
c001234a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001234e:	89 10                	mov    DWORD PTR [eax],edx
c0012350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012354:	83 ec 0c             	sub    esp,0xc
c0012357:	50                   	push   eax
c0012358:	e8 d1 0f 00 00       	call   c001332e <UnixFile::~UnixFile()>
c001235d:	83 c4 10             	add    esp,0x10
c0012360:	90                   	nop
c0012361:	83 c4 0c             	add    esp,0xc
c0012364:	c3                   	ret    
c0012365:	90                   	nop

c0012366 <VgaText::~VgaText()>:
c0012366:	83 ec 0c             	sub    esp,0xc
c0012369:	83 ec 0c             	sub    esp,0xc
c001236c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012370:	e8 cd ff ff ff       	call   c0012342 <VgaText::~VgaText()>
c0012375:	83 c4 10             	add    esp,0x10
c0012378:	83 ec 08             	sub    esp,0x8
c001237b:	68 84 01 00 00       	push   0x184
c0012380:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012384:	e8 60 b0 ff ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0012389:	83 c4 10             	add    esp,0x10
c001238c:	83 c4 0c             	add    esp,0xc
c001238f:	c3                   	ret    

c0012390 <VgaText::read(unsigned long long, void*, int*)>:
c0012390:	83 ec 10             	sub    esp,0x10
c0012393:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012397:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001239b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001239f:	e8 01 82 ff ff       	call   c000a5a5 <readKeyboard(VgaText*, char*, unsigned long)>
c00123a4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00123a8:	89 02                	mov    DWORD PTR [edx],eax
c00123aa:	31 c0                	xor    eax,eax
c00123ac:	83 c4 1c             	add    esp,0x1c
c00123af:	c3                   	ret    

c00123b0 <setTerminalScrollLock(bool)>:
c00123b0:	c3                   	ret    

c00123b1 <doTerminalCycle()>:
c00123b1:	c3                   	ret    

c00123b2 <addToTerminalCycle(VgaText*)>:
c00123b2:	c3                   	ret    

c00123b3 <scrollTerminalScrollLock(int)>:
c00123b3:	c3                   	ret    

c00123b4 <VgaText::updateTitle()>:
c00123b4:	c3                   	ret    
c00123b5:	90                   	nop

c00123b6 <VgaText::load()>:
c00123b6:	c3                   	ret    
c00123b7:	90                   	nop

c00123b8 <VgaText::updateCursor()>:
c00123b8:	83 ec 14             	sub    esp,0x14
c00123bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00123bf:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00123c2:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00123c5:	e8 c2 96 00 00       	call   c001ba8c <HalConsoleCursorUpdate(int, int)>
c00123ca:	83 c4 1c             	add    esp,0x1c
c00123cd:	c3                   	ret    

c00123ce <VgaText::doANSI_SGR(int)>:
c00123ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00123d6:	85 d2                	test   edx,edx
c00123d8:	75 0b                	jne    c00123e5 <VgaText::doANSI_SGR(int)+0x17>
c00123da:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00123dd:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00123e0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00123e3:	eb 59                	jmp    c001243e <VgaText::doANSI_SGR(int)+0x70>
c00123e5:	83 fa 07             	cmp    edx,0x7
c00123e8:	75 0b                	jne    c00123f5 <VgaText::doANSI_SGR(int)+0x27>
c00123ea:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00123ed:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00123f0:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00123f3:	eb 49                	jmp    c001243e <VgaText::doANSI_SGR(int)+0x70>
c00123f5:	83 fa 1b             	cmp    edx,0x1b
c00123f8:	74 e0                	je     c00123da <VgaText::doANSI_SGR(int)+0xc>
c00123fa:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00123fd:	83 f9 07             	cmp    ecx,0x7
c0012400:	77 09                	ja     c001240b <VgaText::doANSI_SGR(int)+0x3d>
c0012402:	8b 14 8d 00 6f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd9100]
c0012409:	eb 20                	jmp    c001242b <VgaText::doANSI_SGR(int)+0x5d>
c001240b:	8d 4a d8             	lea    ecx,[edx-0x28]
c001240e:	83 f9 07             	cmp    ecx,0x7
c0012411:	77 09                	ja     c001241c <VgaText::doANSI_SGR(int)+0x4e>
c0012413:	8b 14 8d 00 6f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd9100]
c001241a:	eb 22                	jmp    c001243e <VgaText::doANSI_SGR(int)+0x70>
c001241c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001241f:	83 f9 07             	cmp    ecx,0x7
c0012422:	77 0b                	ja     c001242f <VgaText::doANSI_SGR(int)+0x61>
c0012424:	8b 14 95 b8 6d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9248]
c001242b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001242e:	c3                   	ret    
c001242f:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0012432:	83 f9 07             	cmp    ecx,0x7
c0012435:	77 0a                	ja     c0012441 <VgaText::doANSI_SGR(int)+0x73>
c0012437:	8b 14 95 90 6d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9270]
c001243e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0012441:	c3                   	ret    

c0012442 <VgaText::setDefaultBgColour(VgaColour)>:
c0012442:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012446:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001244a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001244d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0012450:	c3                   	ret    
c0012451:	90                   	nop

c0012452 <VgaText::setDefaultFgColour(VgaColour)>:
c0012452:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012456:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001245a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001245d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012460:	c3                   	ret    
c0012461:	90                   	nop

c0012462 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0012462:	53                   	push   ebx
c0012463:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012467:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001246b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001246f:	51                   	push   ecx
c0012470:	e8 cd ff ff ff       	call   c0012442 <VgaText::setDefaultBgColour(VgaColour)>
c0012475:	58                   	pop    eax
c0012476:	5a                   	pop    edx
c0012477:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001247b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001247f:	5b                   	pop    ebx
c0012480:	eb d0                	jmp    c0012452 <VgaText::setDefaultFgColour(VgaColour)>

c0012482 <VgaText::setTitleTextColour(VgaColour)>:
c0012482:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012486:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001248a:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c001248d:	c3                   	ret    

c001248e <VgaText::setTitleColour(VgaColour)>:
c001248e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012492:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012496:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012499:	c3                   	ret    

c001249a <VgaText::setTitle(char*)>:
c001249a:	c3                   	ret    
c001249b:	90                   	nop

c001249c <VgaText::combineColours(unsigned char, unsigned char)>:
c001249c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124a0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00124a5:	83 e0 0f             	and    eax,0xf
c00124a8:	c1 e2 04             	shl    edx,0x4
c00124ab:	09 d0                	or     eax,edx
c00124ad:	c3                   	ret    

c00124ae <VgaText::scrollScreen()>:
c00124ae:	55                   	push   ebp
c00124af:	57                   	push   edi
c00124b0:	56                   	push   esi
c00124b1:	be 01 00 00 00       	mov    esi,0x1
c00124b6:	53                   	push   ebx
c00124b7:	83 ec 0c             	sub    esp,0xc
c00124ba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00124be:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00124c1:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00124c7:	31 ff                	xor    edi,edi
c00124c9:	01 e9                	add    ecx,ebp
c00124cb:	8a 01                	mov    al,BYTE PTR [ecx]
c00124cd:	83 fe 18             	cmp    esi,0x18
c00124d0:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c00124d6:	75 20                	jne    c00124f8 <VgaText::scrollScreen()+0x4a>
c00124d8:	f7 c7 01 00 00 00    	test   edi,0x1
c00124de:	74 15                	je     c00124f5 <VgaText::scrollScreen()+0x47>
c00124e0:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00124e4:	50                   	push   eax
c00124e5:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00124e9:	50                   	push   eax
c00124ea:	e8 ad ff ff ff       	call   c001249c <VgaText::combineColours(unsigned char, unsigned char)>
c00124ef:	5a                   	pop    edx
c00124f0:	5a                   	pop    edx
c00124f1:	88 01                	mov    BYTE PTR [ecx],al
c00124f3:	eb 03                	jmp    c00124f8 <VgaText::scrollScreen()+0x4a>
c00124f5:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c00124f8:	47                   	inc    edi
c00124f9:	41                   	inc    ecx
c00124fa:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0012500:	75 c9                	jne    c00124cb <VgaText::scrollScreen()+0x1d>
c0012502:	46                   	inc    esi
c0012503:	83 fe 19             	cmp    esi,0x19
c0012506:	75 b9                	jne    c00124c1 <VgaText::scrollScreen()+0x13>
c0012508:	39 1d b4 f1 02 c0    	cmp    DWORD PTR ds:0xc002f1b4,ebx
c001250e:	75 1f                	jne    c001252f <VgaText::scrollScreen()+0x81>
c0012510:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0012514:	74 05                	je     c001251b <VgaText::scrollScreen()+0x6d>
c0012516:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0012519:	eb 14                	jmp    c001252f <VgaText::scrollScreen()+0x81>
c001251b:	50                   	push   eax
c001251c:	50                   	push   eax
c001251d:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0012521:	50                   	push   eax
c0012522:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0012526:	50                   	push   eax
c0012527:	e8 f4 93 00 00       	call   c001b920 <HalConsoleScroll(int, int)>
c001252c:	83 c4 10             	add    esp,0x10
c001252f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0012533:	83 c4 0c             	add    esp,0xc
c0012536:	5b                   	pop    ebx
c0012537:	5e                   	pop    esi
c0012538:	5f                   	pop    edi
c0012539:	5d                   	pop    ebp
c001253a:	e9 79 fe ff ff       	jmp    c00123b8 <VgaText::updateCursor()>
c001253f:	90                   	nop

c0012540 <VgaText::combineCharAndColour(char, unsigned char)>:
c0012540:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0012545:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001254a:	c1 e0 08             	shl    eax,0x8
c001254d:	09 d0                	or     eax,edx
c001254f:	c3                   	ret    

c0012550 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0012550:	55                   	push   ebp
c0012551:	57                   	push   edi
c0012552:	56                   	push   esi
c0012553:	53                   	push   ebx
c0012554:	83 ec 1c             	sub    esp,0x1c
c0012557:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001255b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001255f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012563:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c0012566:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001256a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001256e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012572:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012576:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001257a:	85 ed                	test   ebp,ebp
c001257c:	75 14                	jne    c0012592 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c001257e:	c7 44 24 30 6b 48 02 c0 	mov    DWORD PTR [esp+0x30],0xc002486b
c0012586:	83 c4 1c             	add    esp,0x1c
c0012589:	5b                   	pop    ebx
c001258a:	5e                   	pop    esi
c001258b:	5f                   	pop    edi
c001258c:	5d                   	pop    ebp
c001258d:	e9 54 da ff ff       	jmp    c000ffe6 <KePanic(char const*)>
c0012592:	50                   	push   eax
c0012593:	50                   	push   eax
c0012594:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012599:	50                   	push   eax
c001259a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001259f:	50                   	push   eax
c00125a0:	e8 f7 fe ff ff       	call   c001249c <VgaText::combineColours(unsigned char, unsigned char)>
c00125a5:	5a                   	pop    edx
c00125a6:	0f be c9             	movsx  ecx,cl
c00125a9:	5a                   	pop    edx
c00125aa:	0f b6 c0             	movzx  eax,al
c00125ad:	50                   	push   eax
c00125ae:	51                   	push   ecx
c00125af:	e8 8c ff ff ff       	call   c0012540 <VgaText::combineCharAndColour(char, unsigned char)>
c00125b4:	6b d6 50             	imul   edx,esi,0x50
c00125b7:	83 c4 10             	add    esp,0x10
c00125ba:	01 da                	add    edx,ebx
c00125bc:	0f b7 d2             	movzx  edx,dx
c00125bf:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c00125c4:	39 3d b4 f1 02 c0    	cmp    DWORD PTR ds:0xc002f1b4,edi
c00125ca:	75 28                	jne    c00125f4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c00125cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125d0:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00125d4:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c00125d8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00125dc:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c00125e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00125e4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00125e8:	83 c4 1c             	add    esp,0x1c
c00125eb:	5b                   	pop    ebx
c00125ec:	5e                   	pop    esi
c00125ed:	5f                   	pop    edi
c00125ee:	5d                   	pop    ebp
c00125ef:	e9 34 94 00 00       	jmp    c001ba28 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00125f4:	83 c4 1c             	add    esp,0x1c
c00125f7:	5b                   	pop    ebx
c00125f8:	5e                   	pop    esi
c00125f9:	5f                   	pop    edi
c00125fa:	5d                   	pop    ebp
c00125fb:	c3                   	ret    

c00125fc <VgaText::getCursorX()>:
c00125fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012600:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0012603:	c3                   	ret    

c0012604 <VgaText::getCursorY()>:
c0012604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012608:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001260b:	c3                   	ret    

c001260c <VgaText::setCursor(int, int)>:
c001260c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012610:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012614:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0012617:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001261b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001261e:	e9 95 fd ff ff       	jmp    c00123b8 <VgaText::updateCursor()>

c0012623 <setActiveTerminal(VgaText*)>:
c0012623:	53                   	push   ebx
c0012624:	83 ec 08             	sub    esp,0x8
c0012627:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001262b:	85 db                	test   ebx,ebx
c001262d:	75 11                	jne    c0012640 <setActiveTerminal(VgaText*)+0x1d>
c001262f:	c7 44 24 10 7b 48 02 c0 	mov    DWORD PTR [esp+0x10],0xc002487b
c0012637:	83 c4 08             	add    esp,0x8
c001263a:	5b                   	pop    ebx
c001263b:	e9 a6 d9 ff ff       	jmp    c000ffe6 <KePanic(char const*)>
c0012640:	a1 b4 f1 02 c0       	mov    eax,ds:0xc002f1b4
c0012645:	85 c0                	test   eax,eax
c0012647:	74 0c                	je     c0012655 <setActiveTerminal(VgaText*)+0x32>
c0012649:	83 ec 0c             	sub    esp,0xc
c001264c:	50                   	push   eax
c001264d:	e8 66 fd ff ff       	call   c00123b8 <VgaText::updateCursor()>
c0012652:	83 c4 10             	add    esp,0x10
c0012655:	89 1d b4 f1 02 c0    	mov    DWORD PTR ds:0xc002f1b4,ebx
c001265b:	50                   	push   eax
c001265c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001265f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012662:	53                   	push   ebx
c0012663:	e8 a4 ff ff ff       	call   c001260c <VgaText::setCursor(int, int)>
c0012668:	83 c4 18             	add    esp,0x18
c001266b:	5b                   	pop    ebx
c001266c:	c3                   	ret    
c001266d:	90                   	nop

c001266e <VgaText::clearScreen()>:
c001266e:	57                   	push   edi
c001266f:	56                   	push   esi
c0012670:	31 f6                	xor    esi,esi
c0012672:	53                   	push   ebx
c0012673:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012677:	52                   	push   edx
c0012678:	6a 00                	push   0x0
c001267a:	6a 00                	push   0x0
c001267c:	53                   	push   ebx
c001267d:	e8 8a ff ff ff       	call   c001260c <VgaText::setCursor(int, int)>
c0012682:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0012689:	83 c4 10             	add    esp,0x10
c001268c:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c001268f:	7e 20                	jle    c00126b1 <VgaText::clearScreen()+0x43>
c0012691:	31 ff                	xor    edi,edi
c0012693:	50                   	push   eax
c0012694:	50                   	push   eax
c0012695:	56                   	push   esi
c0012696:	57                   	push   edi
c0012697:	47                   	inc    edi
c0012698:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001269b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001269e:	6a 20                	push   0x20
c00126a0:	53                   	push   ebx
c00126a1:	e8 aa fe ff ff       	call   c0012550 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00126a6:	83 c4 20             	add    esp,0x20
c00126a9:	83 ff 50             	cmp    edi,0x50
c00126ac:	75 e5                	jne    c0012693 <VgaText::clearScreen()+0x25>
c00126ae:	46                   	inc    esi
c00126af:	eb db                	jmp    c001268c <VgaText::clearScreen()+0x1e>
c00126b1:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00126b8:	5b                   	pop    ebx
c00126b9:	5e                   	pop    esi
c00126ba:	5f                   	pop    edi
c00126bb:	c3                   	ret    

c00126bc <VgaText::setCursorX(int)>:
c00126bc:	83 ec 10             	sub    esp,0x10
c00126bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00126c3:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00126c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126ca:	50                   	push   eax
c00126cb:	e8 3c ff ff ff       	call   c001260c <VgaText::setCursor(int, int)>
c00126d0:	83 c4 1c             	add    esp,0x1c
c00126d3:	c3                   	ret    

c00126d4 <VgaText::setCursorY(int)>:
c00126d4:	83 ec 10             	sub    esp,0x10
c00126d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00126db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00126df:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00126e2:	50                   	push   eax
c00126e3:	e8 24 ff ff ff       	call   c001260c <VgaText::setCursor(int, int)>
c00126e8:	83 c4 1c             	add    esp,0x1c
c00126eb:	c3                   	ret    

c00126ec <VgaText::incrementCursor(bool)>:
c00126ec:	56                   	push   esi
c00126ed:	53                   	push   ebx
c00126ee:	51                   	push   ecx
c00126ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00126f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00126f7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00126fa:	40                   	inc    eax
c00126fb:	83 f8 50             	cmp    eax,0x50
c00126fe:	74 05                	je     c0012705 <VgaText::incrementCursor(bool)+0x19>
c0012700:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0012703:	eb 24                	jmp    c0012729 <VgaText::incrementCursor(bool)+0x3d>
c0012705:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012708:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001270f:	8d 50 01             	lea    edx,[eax+0x1]
c0012712:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0012715:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0012718:	75 0f                	jne    c0012729 <VgaText::incrementCursor(bool)+0x3d>
c001271a:	83 ec 0c             	sub    esp,0xc
c001271d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0012720:	53                   	push   ebx
c0012721:	e8 88 fd ff ff       	call   c00124ae <VgaText::scrollScreen()>
c0012726:	83 c4 10             	add    esp,0x10
c0012729:	89 f0                	mov    eax,esi
c001272b:	84 c0                	test   al,al
c001272d:	74 0c                	je     c001273b <VgaText::incrementCursor(bool)+0x4f>
c001272f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012733:	5a                   	pop    edx
c0012734:	5b                   	pop    ebx
c0012735:	5e                   	pop    esi
c0012736:	e9 7d fc ff ff       	jmp    c00123b8 <VgaText::updateCursor()>
c001273b:	58                   	pop    eax
c001273c:	5b                   	pop    ebx
c001273d:	5e                   	pop    esi
c001273e:	c3                   	ret    
c001273f:	90                   	nop

c0012740 <VgaText::decrementCursor(bool)>:
c0012740:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012744:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012748:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001274b:	85 c0                	test   eax,eax
c001274d:	74 04                	je     c0012753 <VgaText::decrementCursor(bool)+0x13>
c001274f:	48                   	dec    eax
c0012750:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0012753:	84 c9                	test   cl,cl
c0012755:	74 09                	je     c0012760 <VgaText::decrementCursor(bool)+0x20>
c0012757:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001275b:	e9 58 fc ff ff       	jmp    c00123b8 <VgaText::updateCursor()>
c0012760:	c3                   	ret    
c0012761:	90                   	nop

c0012762 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0012762:	53                   	push   ebx
c0012763:	83 ec 08             	sub    esp,0x8
c0012766:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c001276b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001276f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012773:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012777:	83 f8 07             	cmp    eax,0x7
c001277a:	75 21                	jne    c001279d <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c001277c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012784:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c001278c:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0012794:	83 c4 08             	add    esp,0x8
c0012797:	5b                   	pop    ebx
c0012798:	e9 8e 62 ff ff       	jmp    c0008a2b <KeBeep(int, int, bool)>
c001279d:	83 f8 0d             	cmp    eax,0xd
c00127a0:	75 09                	jne    c00127ab <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00127a2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00127a9:	eb 2d                	jmp    c00127d8 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00127ab:	83 f8 0a             	cmp    eax,0xa
c00127ae:	75 31                	jne    c00127e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00127b0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00127b3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00127ba:	8d 50 01             	lea    edx,[eax+0x1]
c00127bd:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00127c0:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00127c3:	75 0f                	jne    c00127d4 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00127c5:	83 ec 0c             	sub    esp,0xc
c00127c8:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00127cb:	53                   	push   ebx
c00127cc:	e8 dd fc ff ff       	call   c00124ae <VgaText::scrollScreen()>
c00127d1:	83 c4 10             	add    esp,0x10
c00127d4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00127d8:	83 c4 08             	add    esp,0x8
c00127db:	5b                   	pop    ebx
c00127dc:	e9 d7 fb ff ff       	jmp    c00123b8 <VgaText::updateCursor()>
c00127e1:	83 f8 08             	cmp    eax,0x8
c00127e4:	75 25                	jne    c001280b <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c00127e6:	50                   	push   eax
c00127e7:	50                   	push   eax
c00127e8:	6a 01                	push   0x1
c00127ea:	53                   	push   ebx
c00127eb:	e8 50 ff ff ff       	call   c0012740 <VgaText::decrementCursor(bool)>
c00127f0:	5a                   	pop    edx
c00127f1:	59                   	pop    ecx
c00127f2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00127f5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00127f8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00127fb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00127fe:	6a 20                	push   0x20
c0012800:	53                   	push   ebx
c0012801:	e8 4a fd ff ff       	call   c0012550 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012806:	83 c4 28             	add    esp,0x28
c0012809:	5b                   	pop    ebx
c001280a:	c3                   	ret    
c001280b:	83 ec 08             	sub    esp,0x8
c001280e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012811:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012814:	51                   	push   ecx
c0012815:	52                   	push   edx
c0012816:	50                   	push   eax
c0012817:	53                   	push   ebx
c0012818:	e8 33 fd ff ff       	call   c0012550 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001281d:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0012821:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0012829:	83 c4 28             	add    esp,0x28
c001282c:	5b                   	pop    ebx
c001282d:	e9 ba fe ff ff       	jmp    c00126ec <VgaText::incrementCursor(bool)>

c0012832 <VgaText::putchar(char)>:
c0012832:	57                   	push   edi
c0012833:	56                   	push   esi
c0012834:	53                   	push   ebx
c0012835:	83 ec 10             	sub    esp,0x10
c0012838:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001283c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012840:	89 f8                	mov    eax,edi
c0012842:	0f be c0             	movsx  eax,al
c0012845:	83 f8 5b             	cmp    eax,0x5b
c0012848:	75 18                	jne    c0012862 <VgaText::putchar(char)+0x30>
c001284a:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c001284e:	74 20                	je     c0012870 <VgaText::putchar(char)+0x3e>
c0012850:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0012856:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c001285d:	e9 c1 00 00 00       	jmp    c0012923 <VgaText::putchar(char)+0xf1>
c0012862:	83 f8 1b             	cmp    eax,0x1b
c0012865:	75 09                	jne    c0012870 <VgaText::putchar(char)+0x3e>
c0012867:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c001286b:	e9 b3 00 00 00       	jmp    c0012923 <VgaText::putchar(char)+0xf1>
c0012870:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0012873:	84 c9                	test   cl,cl
c0012875:	0f 84 98 00 00 00    	je     c0012913 <VgaText::putchar(char)+0xe1>
c001287b:	8d 77 c0             	lea    esi,[edi-0x40]
c001287e:	89 f2                	mov    edx,esi
c0012880:	80 fa 3e             	cmp    dl,0x3e
c0012883:	77 78                	ja     c00128fd <VgaText::putchar(char)+0xcb>
c0012885:	83 f8 6d             	cmp    eax,0x6d
c0012888:	75 47                	jne    c00128d1 <VgaText::putchar(char)+0x9f>
c001288a:	31 f6                	xor    esi,esi
c001288c:	31 d2                	xor    edx,edx
c001288e:	31 c0                	xor    eax,eax
c0012890:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0012893:	7e 2d                	jle    c00128c2 <VgaText::putchar(char)+0x90>
c0012895:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001289a:	83 fa 3b             	cmp    edx,0x3b
c001289d:	75 17                	jne    c00128b6 <VgaText::putchar(char)+0x84>
c001289f:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00128a3:	50                   	push   eax
c00128a4:	53                   	push   ebx
c00128a5:	e8 24 fb ff ff       	call   c00123ce <VgaText::doANSI_SGR(int)>
c00128aa:	59                   	pop    ecx
c00128ab:	31 d2                	xor    edx,edx
c00128ad:	5f                   	pop    edi
c00128ae:	31 c0                	xor    eax,eax
c00128b0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00128b4:	eb 09                	jmp    c00128bf <VgaText::putchar(char)+0x8d>
c00128b6:	6b c0 0a             	imul   eax,eax,0xa
c00128b9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00128bd:	88 ca                	mov    dl,cl
c00128bf:	46                   	inc    esi
c00128c0:	eb ce                	jmp    c0012890 <VgaText::putchar(char)+0x5e>
c00128c2:	84 d2                	test   dl,dl
c00128c4:	74 2f                	je     c00128f5 <VgaText::putchar(char)+0xc3>
c00128c6:	50                   	push   eax
c00128c7:	53                   	push   ebx
c00128c8:	e8 01 fb ff ff       	call   c00123ce <VgaText::doANSI_SGR(int)>
c00128cd:	58                   	pop    eax
c00128ce:	5a                   	pop    edx
c00128cf:	eb 24                	jmp    c00128f5 <VgaText::putchar(char)+0xc3>
c00128d1:	83 f8 4a             	cmp    eax,0x4a
c00128d4:	75 1f                	jne    c00128f5 <VgaText::putchar(char)+0xc3>
c00128d6:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00128da:	75 19                	jne    c00128f5 <VgaText::putchar(char)+0xc3>
c00128dc:	83 ec 0c             	sub    esp,0xc
c00128df:	53                   	push   ebx
c00128e0:	e8 89 fd ff ff       	call   c001266e <VgaText::clearScreen()>
c00128e5:	83 c4 0c             	add    esp,0xc
c00128e8:	6a 00                	push   0x0
c00128ea:	6a 00                	push   0x0
c00128ec:	53                   	push   ebx
c00128ed:	e8 1a fd ff ff       	call   c001260c <VgaText::setCursor(int, int)>
c00128f2:	83 c4 10             	add    esp,0x10
c00128f5:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00128fb:	eb 26                	jmp    c0012923 <VgaText::putchar(char)+0xf1>
c00128fd:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0012900:	83 f8 0e             	cmp    eax,0xe
c0012903:	7f 1e                	jg     c0012923 <VgaText::putchar(char)+0xf1>
c0012905:	8d 48 01             	lea    ecx,[eax+0x1]
c0012908:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c001290b:	89 f9                	mov    ecx,edi
c001290d:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0012911:	eb 10                	jmp    c0012923 <VgaText::putchar(char)+0xf1>
c0012913:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012916:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012919:	50                   	push   eax
c001291a:	53                   	push   ebx
c001291b:	e8 42 fe ff ff       	call   c0012762 <VgaText::putchar(char, VgaColour, VgaColour)>
c0012920:	83 c4 10             	add    esp,0x10
c0012923:	83 c4 10             	add    esp,0x10
c0012926:	5b                   	pop    ebx
c0012927:	5e                   	pop    esi
c0012928:	5f                   	pop    edi
c0012929:	c3                   	ret    

c001292a <VgaText::putx(unsigned int)>:
c001292a:	57                   	push   edi
c001292b:	b9 11 00 00 00       	mov    ecx,0x11
c0012930:	56                   	push   esi
c0012931:	be 0f 31 02 c0       	mov    esi,0xc002310f
c0012936:	53                   	push   ebx
c0012937:	83 ec 20             	sub    esp,0x20
c001293a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001293e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0012942:	fc                   	cld    
c0012943:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012945:	be 08 00 00 00       	mov    esi,0x8
c001294a:	50                   	push   eax
c001294b:	50                   	push   eax
c001294c:	89 d8                	mov    eax,ebx
c001294e:	c1 e3 04             	shl    ebx,0x4
c0012951:	c1 e8 1c             	shr    eax,0x1c
c0012954:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0012959:	50                   	push   eax
c001295a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001295e:	e8 cf fe ff ff       	call   c0012832 <VgaText::putchar(char)>
c0012963:	83 c4 10             	add    esp,0x10
c0012966:	4e                   	dec    esi
c0012967:	75 e1                	jne    c001294a <VgaText::putx(unsigned int)+0x20>
c0012969:	83 c4 20             	add    esp,0x20
c001296c:	5b                   	pop    ebx
c001296d:	5e                   	pop    esi
c001296e:	5f                   	pop    edi
c001296f:	c3                   	ret    

c0012970 <VgaText::puts(char const*)>:
c0012970:	53                   	push   ebx
c0012971:	83 ec 08             	sub    esp,0x8
c0012974:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012978:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001297b:	85 c0                	test   eax,eax
c001297d:	74 12                	je     c0012991 <VgaText::puts(char const*)+0x21>
c001297f:	43                   	inc    ebx
c0012980:	51                   	push   ecx
c0012981:	51                   	push   ecx
c0012982:	50                   	push   eax
c0012983:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012987:	e8 a6 fe ff ff       	call   c0012832 <VgaText::putchar(char)>
c001298c:	83 c4 10             	add    esp,0x10
c001298f:	eb e7                	jmp    c0012978 <VgaText::puts(char const*)+0x8>
c0012991:	83 c4 08             	add    esp,0x8
c0012994:	5b                   	pop    ebx
c0012995:	c3                   	ret    

c0012996 <VgaText::write(unsigned long long, void*, int*)>:
c0012996:	55                   	push   ebp
c0012997:	57                   	push   edi
c0012998:	56                   	push   esi
c0012999:	53                   	push   ebx
c001299a:	83 ec 0c             	sub    esp,0xc
c001299d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00129a1:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00129a5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00129a9:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00129b0:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00129b3:	39 eb                	cmp    ebx,ebp
c00129b5:	74 13                	je     c00129ca <VgaText::write(unsigned long long, void*, int*)+0x34>
c00129b7:	43                   	inc    ebx
c00129b8:	50                   	push   eax
c00129b9:	50                   	push   eax
c00129ba:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00129be:	50                   	push   eax
c00129bf:	56                   	push   esi
c00129c0:	e8 6d fe ff ff       	call   c0012832 <VgaText::putchar(char)>
c00129c5:	83 c4 10             	add    esp,0x10
c00129c8:	eb e9                	jmp    c00129b3 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00129ca:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00129d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129d5:	89 38                	mov    DWORD PTR [eax],edi
c00129d7:	83 c4 0c             	add    esp,0xc
c00129da:	31 c0                	xor    eax,eax
c00129dc:	5b                   	pop    ebx
c00129dd:	5e                   	pop    esi
c00129de:	5f                   	pop    edi
c00129df:	5d                   	pop    ebp
c00129e0:	c3                   	ret    
c00129e1:	90                   	nop

c00129e2 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00129e2:	55                   	push   ebp
c00129e3:	57                   	push   edi
c00129e4:	56                   	push   esi
c00129e5:	53                   	push   ebx
c00129e6:	83 ec 1c             	sub    esp,0x1c
c00129e9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00129ed:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00129f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00129f5:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c00129f8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00129fc:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012a00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a04:	85 db                	test   ebx,ebx
c0012a06:	75 14                	jne    c0012a1c <VgaText::puts(char const*, VgaColour, VgaColour)+0x3a>
c0012a08:	c7 44 24 30 89 48 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024889
c0012a10:	83 c4 1c             	add    esp,0x1c
c0012a13:	5b                   	pop    ebx
c0012a14:	5e                   	pop    esi
c0012a15:	5f                   	pop    edi
c0012a16:	5d                   	pop    ebp
c0012a17:	e9 ca d5 ff ff       	jmp    c000ffe6 <KePanic(char const*)>
c0012a1c:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c0012a23:	50                   	push   eax
c0012a24:	50                   	push   eax
c0012a25:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012a2a:	50                   	push   eax
c0012a2b:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012a30:	50                   	push   eax
c0012a31:	e8 66 fa ff ff       	call   c001249c <VgaText::combineColours(unsigned char, unsigned char)>
c0012a36:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c0012a3a:	83 c4 10             	add    esp,0x10
c0012a3d:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c0012a40:	0f b6 e8             	movzx  ebp,al
c0012a43:	0f b7 c9             	movzx  ecx,cx
c0012a46:	01 c9                	add    ecx,ecx
c0012a48:	01 cb                	add    ebx,ecx
c0012a4a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012a4d:	85 c0                	test   eax,eax
c0012a4f:	0f 84 ef 00 00 00    	je     c0012b44 <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c0012a55:	83 f8 0d             	cmp    eax,0xd
c0012a58:	75 0c                	jne    c0012a66 <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c0012a5a:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012a61:	e9 d8 00 00 00       	jmp    c0012b3e <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012a66:	83 f8 0a             	cmp    eax,0xa
c0012a69:	75 44                	jne    c0012aaf <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c0012a6b:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012a6e:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012a75:	8d 48 01             	lea    ecx,[eax+0x1]
c0012a78:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c0012a7b:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c0012a7e:	75 0f                	jne    c0012a8f <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c0012a80:	83 ec 0c             	sub    esp,0xc
c0012a83:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c0012a86:	57                   	push   edi
c0012a87:	e8 22 fa ff ff       	call   c00124ae <VgaText::scrollScreen()>
c0012a8c:	83 c4 10             	add    esp,0x10
c0012a8f:	83 ec 0c             	sub    esp,0xc
c0012a92:	57                   	push   edi
c0012a93:	e8 20 f9 ff ff       	call   c00123b8 <VgaText::updateCursor()>
c0012a98:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012a9c:	83 c4 10             	add    esp,0x10
c0012a9f:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0012aa2:	0f b7 db             	movzx  ebx,bx
c0012aa5:	01 db                	add    ebx,ebx
c0012aa7:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012aaa:	e9 8f 00 00 00       	jmp    c0012b3e <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012aaf:	83 f8 08             	cmp    eax,0x8
c0012ab2:	75 34                	jne    c0012ae8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c0012ab4:	51                   	push   ecx
c0012ab5:	51                   	push   ecx
c0012ab6:	6a 01                	push   0x1
c0012ab8:	57                   	push   edi
c0012ab9:	e8 82 fc ff ff       	call   c0012740 <VgaText::decrementCursor(bool)>
c0012abe:	5b                   	pop    ebx
c0012abf:	58                   	pop    eax
c0012ac0:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0012ac3:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012ac6:	ff 77 30             	push   DWORD PTR [edi+0x30]
c0012ac9:	ff 77 34             	push   DWORD PTR [edi+0x34]
c0012acc:	6a 20                	push   0x20
c0012ace:	57                   	push   edi
c0012acf:	e8 7c fa ff ff       	call   c0012550 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012ad4:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012ad8:	83 c4 20             	add    esp,0x20
c0012adb:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0012ade:	0f b7 db             	movzx  ebx,bx
c0012ae1:	01 db                	add    ebx,ebx
c0012ae3:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012ae6:	eb 56                	jmp    c0012b3e <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012ae8:	52                   	push   edx
c0012ae9:	52                   	push   edx
c0012aea:	55                   	push   ebp
c0012aeb:	50                   	push   eax
c0012aec:	e8 4f fa ff ff       	call   c0012540 <VgaText::combineCharAndColour(char, unsigned char)>
c0012af1:	83 c4 10             	add    esp,0x10
c0012af4:	66 89 03             	mov    WORD PTR [ebx],ax
c0012af7:	39 3d b4 f1 02 c0    	cmp    DWORD PTR ds:0xc002f1b4,edi
c0012afd:	75 1d                	jne    c0012b1c <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0012aff:	83 ec 0c             	sub    esp,0xc
c0012b02:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0012b05:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012b08:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012b0c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012b10:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012b13:	50                   	push   eax
c0012b14:	e8 0f 8f 00 00       	call   c001ba28 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0012b19:	83 c4 20             	add    esp,0x20
c0012b1c:	83 c3 02             	add    ebx,0x2
c0012b1f:	50                   	push   eax
c0012b20:	50                   	push   eax
c0012b21:	6a 00                	push   0x0
c0012b23:	57                   	push   edi
c0012b24:	e8 c3 fb ff ff       	call   c00126ec <VgaText::incrementCursor(bool)>
c0012b29:	83 c4 10             	add    esp,0x10
c0012b2c:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c0012b30:	75 0c                	jne    c0012b3e <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012b32:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012b36:	0f b7 db             	movzx  ebx,bx
c0012b39:	01 db                	add    ebx,ebx
c0012b3b:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012b3e:	46                   	inc    esi
c0012b3f:	e9 06 ff ff ff       	jmp    c0012a4a <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0012b44:	83 ec 0c             	sub    esp,0xc
c0012b47:	57                   	push   edi
c0012b48:	e8 6b f8 ff ff       	call   c00123b8 <VgaText::updateCursor()>
c0012b4d:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c0012b54:	83 c4 2c             	add    esp,0x2c
c0012b57:	5b                   	pop    ebx
c0012b58:	5e                   	pop    esi
c0012b59:	5f                   	pop    edi
c0012b5a:	5d                   	pop    ebp
c0012b5b:	c3                   	ret    

c0012b5c <VgaText::VgaText(char const*)>:
c0012b5c:	56                   	push   esi
c0012b5d:	53                   	push   ebx
c0012b5e:	83 ec 04             	sub    esp,0x4
c0012b61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b65:	83 ec 08             	sub    esp,0x8
c0012b68:	6a 00                	push   0x0
c0012b6a:	50                   	push   eax
c0012b6b:	e8 d8 05 00 00       	call   c0013148 <UnixFile::UnixFile(int)>
c0012b70:	83 c4 10             	add    esp,0x10
c0012b73:	ba c0 48 02 c0       	mov    edx,0xc00248c0
c0012b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b7c:	89 10                	mov    DWORD PTR [eax],edx
c0012b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b82:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0012b89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b8d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0012b94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b98:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0012b9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ba0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0012ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ba8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0012baf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bb3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0012bba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bbe:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0012bc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bc9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0012bd0:	83 ec 0c             	sub    esp,0xc
c0012bd3:	68 99 48 02 c0       	push   0xc0024899
c0012bd8:	e8 9f 43 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012bdd:	83 c4 10             	add    esp,0x10
c0012be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012be4:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0012beb:	83 ec 0c             	sub    esp,0xc
c0012bee:	6a 01                	push   0x1
c0012bf0:	e8 a6 09 00 00       	call   c001359b <Virt::allocateKernelVirtualPages(int)>
c0012bf5:	83 c4 10             	add    esp,0x10
c0012bf8:	89 c2                	mov    edx,eax
c0012bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012c01:	8b 1d 50 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f250
c0012c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c0e:	89 c6                	mov    esi,eax
c0012c10:	e8 c5 d5 ff ff       	call   c00101da <Phys::allocatePage()>
c0012c15:	68 05 0c 00 00       	push   0xc05
c0012c1a:	56                   	push   esi
c0012c1b:	50                   	push   eax
c0012c1c:	53                   	push   ebx
c0012c1d:	e8 5c 10 00 00       	call   c0013c7e <VAS::mapPage(unsigned long, unsigned long, int)>
c0012c22:	83 c4 10             	add    esp,0x10
c0012c25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c29:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c2c:	83 ec 04             	sub    esp,0x4
c0012c2f:	68 a0 0f 00 00       	push   0xfa0
c0012c34:	6a 00                	push   0x0
c0012c36:	50                   	push   eax
c0012c37:	e8 b4 d8 fe ff       	call   c00004f0 <memset>
c0012c3c:	83 c4 10             	add    esp,0x10
c0012c3f:	83 ec 04             	sub    esp,0x4
c0012c42:	6a 00                	push   0x0
c0012c44:	6a 07                	push   0x7
c0012c46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c4a:	e8 13 f8 ff ff       	call   c0012462 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0012c4f:	83 c4 10             	add    esp,0x10
c0012c52:	83 ec 04             	sub    esp,0x4
c0012c55:	6a 00                	push   0x0
c0012c57:	6a 00                	push   0x0
c0012c59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c5d:	e8 aa f9 ff ff       	call   c001260c <VgaText::setCursor(int, int)>
c0012c62:	83 c4 10             	add    esp,0x10
c0012c65:	83 ec 0c             	sub    esp,0xc
c0012c68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c6c:	e8 fd f9 ff ff       	call   c001266e <VgaText::clearScreen()>
c0012c71:	83 c4 10             	add    esp,0x10
c0012c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c78:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0012c7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c80:	05 82 00 00 00       	add    eax,0x82
c0012c85:	83 ec 04             	sub    esp,0x4
c0012c88:	68 80 00 00 00       	push   0x80
c0012c8d:	6a 00                	push   0x0
c0012c8f:	50                   	push   eax
c0012c90:	e8 5b d8 fe ff       	call   c00004f0 <memset>
c0012c95:	83 c4 10             	add    esp,0x10
c0012c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c9c:	05 02 01 00 00       	add    eax,0x102
c0012ca1:	83 ec 04             	sub    esp,0x4
c0012ca4:	68 80 00 00 00       	push   0x80
c0012ca9:	6a 00                	push   0x0
c0012cab:	50                   	push   eax
c0012cac:	e8 3f d8 fe ff       	call   c00004f0 <memset>
c0012cb1:	83 c4 10             	add    esp,0x10
c0012cb4:	90                   	nop
c0012cb5:	83 c4 04             	add    esp,0x4
c0012cb8:	5b                   	pop    ebx
c0012cb9:	5e                   	pop    esi
c0012cba:	c3                   	ret    
c0012cbb:	90                   	nop

c0012cbc <VgaText::receiveKey(unsigned char)>:
c0012cbc:	55                   	push   ebp
c0012cbd:	57                   	push   edi
c0012cbe:	56                   	push   esi
c0012cbf:	53                   	push   ebx
c0012cc0:	83 ec 2c             	sub    esp,0x2c
c0012cc3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0012cc7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012ccb:	89 ef                	mov    edi,ebp
c0012ccd:	81 e7 ff 00 00 00    	and    edi,0xff
c0012cd3:	0f 84 66 01 00 00    	je     c0012e3f <VgaText::receiveKey(unsigned char)+0x183>
c0012cd9:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0012cdf:	83 ff 08             	cmp    edi,0x8
c0012ce2:	75 73                	jne    c0012d57 <VgaText::receiveKey(unsigned char)+0x9b>
c0012ce4:	83 ec 0c             	sub    esp,0xc
c0012ce7:	56                   	push   esi
c0012ce8:	e8 83 d8 fe ff       	call   c0000570 <strlen>
c0012ced:	83 c4 10             	add    esp,0x10
c0012cf0:	85 c0                	test   eax,eax
c0012cf2:	0f 84 02 01 00 00    	je     c0012dfa <VgaText::receiveKey(unsigned char)+0x13e>
c0012cf8:	50                   	push   eax
c0012cf9:	50                   	push   eax
c0012cfa:	6a 08                	push   0x8
c0012cfc:	53                   	push   ebx
c0012cfd:	e8 30 fb ff ff       	call   c0012832 <VgaText::putchar(char)>
c0012d02:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d05:	e8 66 d8 fe ff       	call   c0000570 <strlen>
c0012d0a:	83 c4 10             	add    esp,0x10
c0012d0d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0012d15:	83 fa 0d             	cmp    edx,0xd
c0012d18:	89 d0                	mov    eax,edx
c0012d1a:	0f 95 c1             	setne  cl
c0012d1d:	83 fa 1f             	cmp    edx,0x1f
c0012d20:	0f 9e c2             	setle  dl
c0012d23:	0f b6 d2             	movzx  edx,dl
c0012d26:	85 ca                	test   edx,ecx
c0012d28:	74 17                	je     c0012d41 <VgaText::receiveKey(unsigned char)+0x85>
c0012d2a:	83 e8 08             	sub    eax,0x8
c0012d2d:	3c 02                	cmp    al,0x2
c0012d2f:	76 10                	jbe    c0012d41 <VgaText::receiveKey(unsigned char)+0x85>
c0012d31:	55                   	push   ebp
c0012d32:	55                   	push   ebp
c0012d33:	68 ac 48 02 c0       	push   0xc00248ac
c0012d38:	53                   	push   ebx
c0012d39:	e8 32 fc ff ff       	call   c0012970 <VgaText::puts(char const*)>
c0012d3e:	83 c4 10             	add    esp,0x10
c0012d41:	83 ec 0c             	sub    esp,0xc
c0012d44:	56                   	push   esi
c0012d45:	e8 26 d8 fe ff       	call   c0000570 <strlen>
c0012d4a:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0012d52:	e9 a0 00 00 00       	jmp    c0012df7 <VgaText::receiveKey(unsigned char)+0x13b>
c0012d57:	83 ec 0c             	sub    esp,0xc
c0012d5a:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0012d60:	50                   	push   eax
c0012d61:	e8 0a d8 fe ff       	call   c0000570 <strlen>
c0012d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d69:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012d6d:	e8 fe d7 fe ff       	call   c0000570 <strlen>
c0012d72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012d76:	83 c4 10             	add    esp,0x10
c0012d79:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0012d7d:	3d 80 00 00 00       	cmp    eax,0x80
c0012d82:	0f 87 b7 00 00 00    	ja     c0012e3f <VgaText::receiveKey(unsigned char)+0x183>
c0012d88:	8d 45 ff             	lea    eax,[ebp-0x1]
c0012d8b:	8d 55 f7             	lea    edx,[ebp-0x9]
c0012d8e:	3c 1e                	cmp    al,0x1e
c0012d90:	0f 96 c0             	setbe  al
c0012d93:	80 fa 01             	cmp    dl,0x1
c0012d96:	0f 97 c2             	seta   dl
c0012d99:	0f b6 d2             	movzx  edx,dl
c0012d9c:	85 c2                	test   edx,eax
c0012d9e:	74 2e                	je     c0012dce <VgaText::receiveKey(unsigned char)+0x112>
c0012da0:	83 ff 0d             	cmp    edi,0xd
c0012da3:	74 29                	je     c0012dce <VgaText::receiveKey(unsigned char)+0x112>
c0012da5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012da8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012dab:	68 b2 48 02 c0       	push   0xc00248b2
c0012db0:	53                   	push   ebx
c0012db1:	e8 2c fc ff ff       	call   c00129e2 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0012db6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012db9:	8d 45 40             	lea    eax,[ebp+0x40]
c0012dbc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012dbf:	0f b6 c0             	movzx  eax,al
c0012dc2:	50                   	push   eax
c0012dc3:	53                   	push   ebx
c0012dc4:	e8 99 f9 ff ff       	call   c0012762 <VgaText::putchar(char, VgaColour, VgaColour)>
c0012dc9:	83 c4 20             	add    esp,0x20
c0012dcc:	eb 11                	jmp    c0012ddf <VgaText::receiveKey(unsigned char)+0x123>
c0012dce:	89 e8                	mov    eax,ebp
c0012dd0:	51                   	push   ecx
c0012dd1:	0f be c0             	movsx  eax,al
c0012dd4:	51                   	push   ecx
c0012dd5:	50                   	push   eax
c0012dd6:	53                   	push   ebx
c0012dd7:	e8 56 fa ff ff       	call   c0012832 <VgaText::putchar(char)>
c0012ddc:	83 c4 10             	add    esp,0x10
c0012ddf:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012de4:	89 e8                	mov    eax,ebp
c0012de6:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0012dea:	52                   	push   edx
c0012deb:	52                   	push   edx
c0012dec:	8d 44 24 26          	lea    eax,[esp+0x26]
c0012df0:	50                   	push   eax
c0012df1:	56                   	push   esi
c0012df2:	e8 49 da fe ff       	call   c0000840 <strcat>
c0012df7:	83 c4 10             	add    esp,0x10
c0012dfa:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0012e00:	b0 01                	mov    al,0x1
c0012e02:	83 ff 1c             	cmp    edi,0x1c
c0012e05:	77 0e                	ja     c0012e15 <VgaText::receiveKey(unsigned char)+0x159>
c0012e07:	b8 08 04 00 10       	mov    eax,0x10000408
c0012e0c:	89 f9                	mov    ecx,edi
c0012e0e:	d3 e8                	shr    eax,cl
c0012e10:	f7 d0                	not    eax
c0012e12:	83 e0 01             	and    eax,0x1
c0012e15:	84 c0                	test   al,al
c0012e17:	74 04                	je     c0012e1d <VgaText::receiveKey(unsigned char)+0x161>
c0012e19:	84 d2                	test   dl,dl
c0012e1b:	74 22                	je     c0012e3f <VgaText::receiveKey(unsigned char)+0x183>
c0012e1d:	81 c3 02 01 00 00    	add    ebx,0x102
c0012e23:	50                   	push   eax
c0012e24:	50                   	push   eax
c0012e25:	56                   	push   esi
c0012e26:	53                   	push   ebx
c0012e27:	e8 14 da fe ff       	call   c0000840 <strcat>
c0012e2c:	83 c4 0c             	add    esp,0xc
c0012e2f:	68 80 00 00 00       	push   0x80
c0012e34:	6a 00                	push   0x0
c0012e36:	56                   	push   esi
c0012e37:	e8 b4 d6 fe ff       	call   c00004f0 <memset>
c0012e3c:	83 c4 10             	add    esp,0x10
c0012e3f:	83 c4 2c             	add    esp,0x2c
c0012e42:	5b                   	pop    ebx
c0012e43:	5e                   	pop    esi
c0012e44:	5f                   	pop    edi
c0012e45:	5d                   	pop    ebp
c0012e46:	c3                   	ret    
c0012e47:	90                   	nop

c0012e48 <VgaText::doUpdate()>:
c0012e48:	c3                   	ret    
c0012e49:	66 90                	xchg   ax,ax
c0012e4b:	90                   	nop

c0012e4c <TSS::TSS()>:
c0012e4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e50:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012e57:	90                   	nop
c0012e58:	c3                   	ret    
c0012e59:	90                   	nop
c0012e5a:	66 90                	xchg   ax,ax

c0012e5c <TSS::setESP(unsigned long)>:
c0012e5c:	55                   	push   ebp
c0012e5d:	89 e5                	mov    ebp,esp
c0012e5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e65:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012e68:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012e6b:	90                   	nop
c0012e6c:	5d                   	pop    ebp
c0012e6d:	c3                   	ret    
c0012e6e:	66 90                	xchg   ax,ax

c0012e70 <TSS::flush()>:
c0012e70:	55                   	push   ebp
c0012e71:	89 e5                	mov    ebp,esp
c0012e73:	83 ec 10             	sub    esp,0x10
c0012e76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e79:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e7b:	83 c8 03             	or     eax,0x3
c0012e7e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0012e82:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0012e86:	66 89 d0             	mov    ax,dx
c0012e89:	0f 00 d8             	ltr    ax
c0012e8c:	90                   	nop
c0012e8d:	c9                   	leave  
c0012e8e:	c3                   	ret    
c0012e8f:	90                   	nop

c0012e90 <TSS::setup(unsigned long, unsigned long)>:
c0012e90:	55                   	push   ebp
c0012e91:	89 e5                	mov    ebp,esp
c0012e93:	83 ec 18             	sub    esp,0x18
c0012e96:	83 ec 0c             	sub    esp,0xc
c0012e99:	6a 68                	push   0x68
c0012e9b:	e8 ef cc ff ff       	call   c000fb8f <malloc>
c0012ea0:	83 c4 10             	add    esp,0x10
c0012ea3:	89 c2                	mov    edx,eax
c0012ea5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ea8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012eab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012eae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012eb1:	83 ec 08             	sub    esp,0x8
c0012eb4:	50                   	push   eax
c0012eb5:	68 d4 48 02 c0       	push   0xc00248d4
c0012eba:	e8 bd 40 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012ebf:	83 c4 10             	add    esp,0x10
c0012ec2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ec5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ec8:	83 ec 04             	sub    esp,0x4
c0012ecb:	6a 68                	push   0x68
c0012ecd:	6a 00                	push   0x0
c0012ecf:	50                   	push   eax
c0012ed0:	e8 1b d6 fe ff       	call   c00004f0 <memset>
c0012ed5:	83 c4 10             	add    esp,0x10
c0012ed8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012edb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ede:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0012ee4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ee7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012eea:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0012ef0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ef3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ef6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012ef9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012efc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012eff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f02:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0012f08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012f0b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f0e:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0012f14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012f17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f1a:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0012f20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012f23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f26:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0012f2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012f2f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f32:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0012f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012f3b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f3e:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0012f44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012f47:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f4a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0012f4d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0012f50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012f53:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f56:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012f59:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012f5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f62:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0012f69:	83 ec 0c             	sub    esp,0xc
c0012f6c:	68 eb 48 02 c0       	push   0xc00248eb
c0012f71:	e8 06 40 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012f76:	83 c4 10             	add    esp,0x10
c0012f79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012f7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f7f:	0f 20 da             	mov    edx,cr3
c0012f82:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0012f85:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0012f88:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0012f8b:	83 ec 0c             	sub    esp,0xc
c0012f8e:	68 ee 48 02 c0       	push   0xc00248ee
c0012f93:	e8 e4 3f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012f98:	83 c4 10             	add    esp,0x10
c0012f9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012f9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012fa1:	83 ec 08             	sub    esp,0x8
c0012fa4:	50                   	push   eax
c0012fa5:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012fa8:	50                   	push   eax
c0012fa9:	e8 44 bc ff ff       	call   c000ebf2 <GDTEntry::setBase(unsigned int)>
c0012fae:	83 c4 10             	add    esp,0x10
c0012fb1:	83 ec 08             	sub    esp,0x8
c0012fb4:	6a 68                	push   0x68
c0012fb6:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012fb9:	50                   	push   eax
c0012fba:	e8 4f bc ff ff       	call   c000ec0e <GDTEntry::setLimit(unsigned int)>
c0012fbf:	83 c4 10             	add    esp,0x10
c0012fc2:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0012fc6:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012fc9:	83 e0 0f             	and    eax,0xf
c0012fcc:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012fcf:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012fd2:	83 c8 40             	or     eax,0x40
c0012fd5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012fd8:	83 ec 0c             	sub    esp,0xc
c0012fdb:	68 f1 48 02 c0       	push   0xc00248f1
c0012fe0:	e8 97 3f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012fe5:	83 c4 10             	add    esp,0x10
c0012fe8:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c0012fed:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012ff3:	83 ec 08             	sub    esp,0x8
c0012ff6:	50                   	push   eax
c0012ff7:	68 f4 48 02 c0       	push   0xc00248f4
c0012ffc:	e8 7b 3f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013001:	83 c4 10             	add    esp,0x10
c0013004:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c0013009:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001300f:	05 64 01 00 00       	add    eax,0x164
c0013014:	83 ec 04             	sub    esp,0x4
c0013017:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001301a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001301d:	50                   	push   eax
c001301e:	e8 1f bc ff ff       	call   c000ec42 <GDT::addEntry(GDTEntry)>
c0013023:	83 c4 10             	add    esp,0x10
c0013026:	89 c2                	mov    edx,eax
c0013028:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001302b:	89 10                	mov    DWORD PTR [eax],edx
c001302d:	83 ec 0c             	sub    esp,0xc
c0013030:	68 09 49 02 c0       	push   0xc0024909
c0013035:	e8 42 3f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001303a:	83 c4 10             	add    esp,0x10
c001303d:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c0013042:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013048:	05 64 01 00 00       	add    eax,0x164
c001304d:	83 ec 0c             	sub    esp,0xc
c0013050:	50                   	push   eax
c0013051:	e8 16 bc ff ff       	call   c000ec6c <GDT::flush()>
c0013056:	83 c4 10             	add    esp,0x10
c0013059:	83 ec 0c             	sub    esp,0xc
c001305c:	68 0c 49 02 c0       	push   0xc002490c
c0013061:	e8 16 3f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013066:	83 c4 10             	add    esp,0x10
c0013069:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001306c:	8b 00                	mov    eax,DWORD PTR [eax]
c001306e:	c9                   	leave  
c001306f:	c3                   	ret    

c0013070 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0013070:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013074:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013078:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001307b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0013080:	75 08                	jne    c001308a <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0013082:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0013088:	eb 38                	jmp    c00130c2 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001308a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001308f:	75 17                	jne    c00130a8 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0013091:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013096:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013099:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001309f:	8b 10                	mov    edx,DWORD PTR [eax]
c00130a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00130a5:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00130a8:	89 c1                	mov    ecx,eax
c00130aa:	83 e1 fd             	and    ecx,0xfffffffd
c00130ad:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00130b3:	74 cd                	je     c0013082 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00130b5:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00130ba:	83 e0 ef             	and    eax,0xffffffef
c00130bd:	83 f8 08             	cmp    eax,0x8
c00130c0:	76 c0                	jbe    c0013082 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00130c2:	31 c0                	xor    eax,eax
c00130c4:	c3                   	ret    
c00130c5:	90                   	nop

c00130c6 <ReservedFilename::isAtty()>:
c00130c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130ca:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00130cd:	31 c0                	xor    eax,eax
c00130cf:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00130d5:	74 09                	je     c00130e0 <ReservedFilename::isAtty()+0x1a>
c00130d7:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00130dd:	0f 94 c0             	sete   al
c00130e0:	c3                   	ret    
c00130e1:	90                   	nop

c00130e2 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00130e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130e6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00130ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00130ed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00130f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00130f6:	75 08                	jne    c0013100 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00130f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00130fe:	eb 3d                	jmp    c001313d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0013100:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0013105:	75 17                	jne    c001311e <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0013107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001310c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001310f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0013115:	8b 10                	mov    edx,DWORD PTR [eax]
c0013117:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001311b:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c001311e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0013123:	75 04                	jne    c0013129 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0013125:	89 0a                	mov    DWORD PTR [edx],ecx
c0013127:	eb 14                	jmp    c001313d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0013129:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c001312e:	74 c8                	je     c00130f8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0013130:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0013135:	83 e0 ef             	and    eax,0xffffffef
c0013138:	83 f8 08             	cmp    eax,0x8
c001313b:	76 bb                	jbe    c00130f8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001313d:	31 c0                	xor    eax,eax
c001313f:	c3                   	ret    

c0013140 <UnixFile::getFileDescriptor()>:
c0013140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013144:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013147:	c3                   	ret    

c0013148 <UnixFile::UnixFile(int)>:
c0013148:	53                   	push   ebx
c0013149:	83 ec 28             	sub    esp,0x28
c001314c:	ba 38 49 02 c0       	mov    edx,0xc0024938
c0013151:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013155:	89 10                	mov    DWORD PTR [eax],edx
c0013157:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001315f:	0f 8f 90 01 00 00    	jg     c00132f5 <UnixFile::UnixFile(int)+0x1ad>
c0013165:	a1 40 6f 02 c0       	mov    eax,ds:0xc0026f40
c001316a:	8d 50 01             	lea    edx,[eax+0x1]
c001316d:	89 15 40 6f 02 c0    	mov    DWORD PTR ds:0xc0026f40,edx
c0013173:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013177:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001317a:	83 ec 08             	sub    esp,0x8
c001317d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0013181:	68 38 f2 02 c0       	push   0xc002f238
c0013186:	e8 e3 f2 00 00       	call   c002246e <LinkedList<UnixFile>::addElement(UnixFile*)>
c001318b:	83 c4 10             	add    esp,0x10
c001318e:	a0 34 f2 02 c0       	mov    al,ds:0xc002f234
c0013193:	83 f0 01             	xor    eax,0x1
c0013196:	0f b6 c0             	movzx  eax,al
c0013199:	85 c0                	test   eax,eax
c001319b:	0f 84 55 01 00 00    	je     c00132f6 <UnixFile::UnixFile(int)+0x1ae>
c00131a1:	c6 05 34 f2 02 c0 01 	mov    BYTE PTR ds:0xc002f234,0x1
c00131a8:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00131b0:	83 ec 0c             	sub    esp,0xc
c00131b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00131b7:	e8 d3 c9 ff ff       	call   c000fb8f <malloc>
c00131bc:	83 c4 10             	add    esp,0x10
c00131bf:	89 c3                	mov    ebx,eax
c00131c1:	83 ec 08             	sub    esp,0x8
c00131c4:	68 03 ff ff 0f       	push   0xfffff03
c00131c9:	53                   	push   ebx
c00131ca:	e8 2d 01 00 00       	call   c00132fc <ReservedFilename::ReservedFilename(int)>
c00131cf:	83 c4 10             	add    esp,0x10
c00131d2:	89 1d 2c f2 02 c0    	mov    DWORD PTR ds:0xc002f22c,ebx
c00131d8:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00131e0:	83 ec 0c             	sub    esp,0xc
c00131e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131e7:	e8 a3 c9 ff ff       	call   c000fb8f <malloc>
c00131ec:	83 c4 10             	add    esp,0x10
c00131ef:	89 c3                	mov    ebx,eax
c00131f1:	83 ec 08             	sub    esp,0x8
c00131f4:	68 01 ff ff 0f       	push   0xfffff01
c00131f9:	53                   	push   ebx
c00131fa:	e8 fd 00 00 00       	call   c00132fc <ReservedFilename::ReservedFilename(int)>
c00131ff:	83 c4 10             	add    esp,0x10
c0013202:	89 1d 30 f2 02 c0    	mov    DWORD PTR ds:0xc002f230,ebx
c0013208:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0013210:	83 ec 0c             	sub    esp,0xc
c0013213:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013217:	e8 73 c9 ff ff       	call   c000fb8f <malloc>
c001321c:	83 c4 10             	add    esp,0x10
c001321f:	89 c3                	mov    ebx,eax
c0013221:	83 ec 08             	sub    esp,0x8
c0013224:	68 00 ff ff 0f       	push   0xfffff00
c0013229:	53                   	push   ebx
c001322a:	e8 cd 00 00 00       	call   c00132fc <ReservedFilename::ReservedFilename(int)>
c001322f:	83 c4 10             	add    esp,0x10
c0013232:	89 1d 24 f2 02 c0    	mov    DWORD PTR ds:0xc002f224,ebx
c0013238:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0013240:	83 ec 0c             	sub    esp,0xc
c0013243:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013247:	e8 43 c9 ff ff       	call   c000fb8f <malloc>
c001324c:	83 c4 10             	add    esp,0x10
c001324f:	89 c3                	mov    ebx,eax
c0013251:	83 ec 08             	sub    esp,0x8
c0013254:	68 02 ff ff 0f       	push   0xfffff02
c0013259:	53                   	push   ebx
c001325a:	e8 9d 00 00 00       	call   c00132fc <ReservedFilename::ReservedFilename(int)>
c001325f:	83 c4 10             	add    esp,0x10
c0013262:	89 1d 28 f2 02 c0    	mov    DWORD PTR ds:0xc002f228,ebx
c0013268:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013270:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0013275:	7f 7f                	jg     c00132f6 <UnixFile::UnixFile(int)+0x1ae>
c0013277:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001327f:	83 ec 0c             	sub    esp,0xc
c0013282:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013286:	e8 04 c9 ff ff       	call   c000fb8f <malloc>
c001328b:	83 c4 10             	add    esp,0x10
c001328e:	89 c3                	mov    ebx,eax
c0013290:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013294:	05 10 ff ff 0f       	add    eax,0xfffff10
c0013299:	83 ec 08             	sub    esp,0x8
c001329c:	50                   	push   eax
c001329d:	53                   	push   ebx
c001329e:	e8 59 00 00 00       	call   c00132fc <ReservedFilename::ReservedFilename(int)>
c00132a3:	83 c4 10             	add    esp,0x10
c00132a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132aa:	89 1c 85 00 f2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0e00],ebx
c00132b1:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00132b9:	83 ec 0c             	sub    esp,0xc
c00132bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00132c0:	e8 ca c8 ff ff       	call   c000fb8f <malloc>
c00132c5:	83 c4 10             	add    esp,0x10
c00132c8:	89 c3                	mov    ebx,eax
c00132ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132ce:	05 20 ff ff 0f       	add    eax,0xfffff20
c00132d3:	83 ec 08             	sub    esp,0x8
c00132d6:	50                   	push   eax
c00132d7:	53                   	push   ebx
c00132d8:	e8 1f 00 00 00       	call   c00132fc <ReservedFilename::ReservedFilename(int)>
c00132dd:	83 c4 10             	add    esp,0x10
c00132e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132e4:	89 1c 85 c0 f1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0e40],ebx
c00132eb:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00132f0:	e9 7b ff ff ff       	jmp    c0013270 <UnixFile::UnixFile(int)+0x128>
c00132f5:	90                   	nop
c00132f6:	83 c4 28             	add    esp,0x28
c00132f9:	5b                   	pop    ebx
c00132fa:	c3                   	ret    
c00132fb:	90                   	nop

c00132fc <ReservedFilename::ReservedFilename(int)>:
c00132fc:	83 ec 0c             	sub    esp,0xc
c00132ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013303:	83 ec 08             	sub    esp,0x8
c0013306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001330a:	50                   	push   eax
c001330b:	e8 38 fe ff ff       	call   c0013148 <UnixFile::UnixFile(int)>
c0013310:	83 c4 10             	add    esp,0x10
c0013313:	ba 54 49 02 c0       	mov    edx,0xc0024954
c0013318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001331c:	89 10                	mov    DWORD PTR [eax],edx
c001331e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013322:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013326:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013329:	90                   	nop
c001332a:	83 c4 0c             	add    esp,0xc
c001332d:	c3                   	ret    

c001332e <UnixFile::~UnixFile()>:
c001332e:	83 ec 1c             	sub    esp,0x1c
c0013331:	ba 38 49 02 c0       	mov    edx,0xc0024938
c0013336:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001333a:	89 10                	mov    DWORD PTR [eax],edx
c001333c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013340:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013343:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0013348:	7f 76                	jg     c00133c0 <UnixFile::~UnixFile()+0x92>
c001334a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013352:	83 ec 0c             	sub    esp,0xc
c0013355:	68 38 f2 02 c0       	push   0xc002f238
c001335a:	e8 e3 f1 00 00       	call   c0022542 <LinkedList<UnixFile>::getFirstElement()>
c001335f:	83 c4 10             	add    esp,0x10
c0013362:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013366:	83 ec 0c             	sub    esp,0xc
c0013369:	68 38 f2 02 c0       	push   0xc002f238
c001336e:	e8 d7 f1 00 00       	call   c002254a <LinkedList<UnixFile>::removeFirst()>
c0013373:	83 c4 10             	add    esp,0x10
c0013376:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001337a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001337e:	74 43                	je     c00133c3 <UnixFile::~UnixFile()+0x95>
c0013380:	83 ec 08             	sub    esp,0x8
c0013383:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013387:	68 38 f2 02 c0       	push   0xc002f238
c001338c:	e8 dd f0 00 00       	call   c002246e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0013391:	83 c4 10             	add    esp,0x10
c0013394:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013398:	8d 50 01             	lea    edx,[eax+0x1]
c001339b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001339f:	3d 20 a1 07 00       	cmp    eax,0x7a120
c00133a4:	0f 94 c0             	sete   al
c00133a7:	0f b6 c0             	movzx  eax,al
c00133aa:	85 c0                	test   eax,eax
c00133ac:	74 a4                	je     c0013352 <UnixFile::~UnixFile()+0x24>
c00133ae:	83 ec 0c             	sub    esp,0xc
c00133b1:	68 10 49 02 c0       	push   0xc0024910
c00133b6:	e8 2b cc ff ff       	call   c000ffe6 <KePanic(char const*)>
c00133bb:	83 c4 10             	add    esp,0x10
c00133be:	eb 92                	jmp    c0013352 <UnixFile::~UnixFile()+0x24>
c00133c0:	90                   	nop
c00133c1:	eb 01                	jmp    c00133c4 <UnixFile::~UnixFile()+0x96>
c00133c3:	90                   	nop
c00133c4:	90                   	nop
c00133c5:	83 c4 1c             	add    esp,0x1c
c00133c8:	c3                   	ret    
c00133c9:	90                   	nop

c00133ca <UnixFile::~UnixFile()>:
c00133ca:	83 ec 0c             	sub    esp,0xc
c00133cd:	83 ec 0c             	sub    esp,0xc
c00133d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133d4:	e8 55 ff ff ff       	call   c001332e <UnixFile::~UnixFile()>
c00133d9:	83 c4 10             	add    esp,0x10
c00133dc:	83 ec 08             	sub    esp,0x8
c00133df:	6a 0c                	push   0xc
c00133e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133e5:	e8 ff 9f ff ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c00133ea:	83 c4 10             	add    esp,0x10
c00133ed:	83 c4 0c             	add    esp,0xc
c00133f0:	c3                   	ret    
c00133f1:	90                   	nop

c00133f2 <ReservedFilename::~ReservedFilename()>:
c00133f2:	83 ec 0c             	sub    esp,0xc
c00133f5:	ba 54 49 02 c0       	mov    edx,0xc0024954
c00133fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133fe:	89 10                	mov    DWORD PTR [eax],edx
c0013400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013404:	83 ec 0c             	sub    esp,0xc
c0013407:	50                   	push   eax
c0013408:	e8 21 ff ff ff       	call   c001332e <UnixFile::~UnixFile()>
c001340d:	83 c4 10             	add    esp,0x10
c0013410:	90                   	nop
c0013411:	83 c4 0c             	add    esp,0xc
c0013414:	c3                   	ret    
c0013415:	90                   	nop

c0013416 <ReservedFilename::~ReservedFilename()>:
c0013416:	83 ec 0c             	sub    esp,0xc
c0013419:	83 ec 0c             	sub    esp,0xc
c001341c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013420:	e8 cd ff ff ff       	call   c00133f2 <ReservedFilename::~ReservedFilename()>
c0013425:	83 c4 10             	add    esp,0x10
c0013428:	83 ec 08             	sub    esp,0x8
c001342b:	6a 0c                	push   0xc
c001342d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013431:	e8 b3 9f ff ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0013436:	83 c4 10             	add    esp,0x10
c0013439:	83 c4 0c             	add    esp,0xc
c001343c:	c3                   	ret    

c001343d <KeGetFileFromDescriptor(int)>:
c001343d:	53                   	push   ebx
c001343e:	83 ec 08             	sub    esp,0x8
c0013441:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013445:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001344b:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0013451:	7f 30                	jg     c0013483 <KeGetFileFromDescriptor(int)+0x46>
c0013453:	83 ec 0c             	sub    esp,0xc
c0013456:	68 38 f2 02 c0       	push   0xc002f238
c001345b:	e8 e2 f0 00 00       	call   c0022542 <LinkedList<UnixFile>::getFirstElement()>
c0013460:	83 c4 10             	add    esp,0x10
c0013463:	8d 50 ff             	lea    edx,[eax-0x1]
c0013466:	83 fa fd             	cmp    edx,0xfffffffd
c0013469:	76 04                	jbe    c001346f <KeGetFileFromDescriptor(int)+0x32>
c001346b:	31 c0                	xor    eax,eax
c001346d:	eb 6e                	jmp    c00134dd <KeGetFileFromDescriptor(int)+0xa0>
c001346f:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0013472:	74 69                	je     c00134dd <KeGetFileFromDescriptor(int)+0xa0>
c0013474:	52                   	push   edx
c0013475:	52                   	push   edx
c0013476:	50                   	push   eax
c0013477:	68 38 f2 02 c0       	push   0xc002f238
c001347c:	e8 6b f1 00 00       	call   c00225ec <LinkedList<UnixFile>::getNext(UnixFile*)>
c0013481:	eb dd                	jmp    c0013460 <KeGetFileFromDescriptor(int)+0x23>
c0013483:	a1 2c f2 02 c0       	mov    eax,ds:0xc002f22c
c0013488:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c001348e:	74 4d                	je     c00134dd <KeGetFileFromDescriptor(int)+0xa0>
c0013490:	a1 30 f2 02 c0       	mov    eax,ds:0xc002f230
c0013495:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c001349b:	74 40                	je     c00134dd <KeGetFileFromDescriptor(int)+0xa0>
c001349d:	a1 28 f2 02 c0       	mov    eax,ds:0xc002f228
c00134a2:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00134a8:	74 33                	je     c00134dd <KeGetFileFromDescriptor(int)+0xa0>
c00134aa:	a1 24 f2 02 c0       	mov    eax,ds:0xc002f224
c00134af:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00134b5:	74 26                	je     c00134dd <KeGetFileFromDescriptor(int)+0xa0>
c00134b7:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00134bd:	83 f8 08             	cmp    eax,0x8
c00134c0:	77 09                	ja     c00134cb <KeGetFileFromDescriptor(int)+0x8e>
c00134c2:	8b 04 85 00 f2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0e00]
c00134c9:	eb 12                	jmp    c00134dd <KeGetFileFromDescriptor(int)+0xa0>
c00134cb:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00134d1:	83 fb 08             	cmp    ebx,0x8
c00134d4:	77 95                	ja     c001346b <KeGetFileFromDescriptor(int)+0x2e>
c00134d6:	8b 04 9d c0 f1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0e40]
c00134dd:	83 c4 08             	add    esp,0x8
c00134e0:	5b                   	pop    ebx
c00134e1:	c3                   	ret    

c00134e2 <__static_initialization_and_destruction_0(int, int)>:
c00134e2:	83 ec 0c             	sub    esp,0xc
c00134e5:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00134ea:	75 34                	jne    c0013520 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00134ec:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00134f4:	75 2a                	jne    c0013520 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00134f6:	83 ec 0c             	sub    esp,0xc
c00134f9:	68 38 f2 02 c0       	push   0xc002f238
c00134fe:	e8 29 ef 00 00       	call   c002242c <LinkedList<UnixFile>::LinkedList()>
c0013503:	83 c4 10             	add    esp,0x10
c0013506:	83 ec 04             	sub    esp,0x4
c0013509:	68 8c 67 02 c0       	push   0xc002678c
c001350e:	68 38 f2 02 c0       	push   0xc002f238
c0013513:	68 2a 24 02 c0       	push   0xc002242a
c0013518:	e8 7c 9e ff ff       	call   c000d399 <__cxa_atexit>
c001351d:	83 c4 10             	add    esp,0x10
c0013520:	90                   	nop
c0013521:	83 c4 0c             	add    esp,0xc
c0013524:	c3                   	ret    

c0013525 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0013525:	83 ec 0c             	sub    esp,0xc
c0013528:	83 ec 08             	sub    esp,0x8
c001352b:	68 ff ff 00 00       	push   0xffff
c0013530:	6a 01                	push   0x1
c0013532:	e8 ab ff ff ff       	call   c00134e2 <__static_initialization_and_destruction_0(int, int)>
c0013537:	83 c4 10             	add    esp,0x10
c001353a:	83 c4 0c             	add    esp,0xc
c001353d:	c3                   	ret    

c001353e <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001353e:	53                   	push   ebx
c001353f:	8b 15 48 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026f48
c0013545:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013549:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001354d:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0013553:	89 d8                	mov    eax,ebx
c0013555:	d1 e8                	shr    eax,1
c0013557:	01 d0                	add    eax,edx
c0013559:	80 e3 01             	and    bl,0x1
c001355c:	8a 10                	mov    dl,BYTE PTR [eax]
c001355e:	75 09                	jne    c0013569 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0013560:	83 e2 f0             	and    edx,0xfffffff0
c0013563:	09 ca                	or     edx,ecx
c0013565:	88 10                	mov    BYTE PTR [eax],dl
c0013567:	5b                   	pop    ebx
c0013568:	c3                   	ret    
c0013569:	83 e2 0f             	and    edx,0xf
c001356c:	0f b6 c9             	movzx  ecx,cl
c001356f:	c1 e1 04             	shl    ecx,0x4
c0013572:	09 ca                	or     edx,ecx
c0013574:	88 10                	mov    BYTE PTR [eax],dl
c0013576:	5b                   	pop    ebx
c0013577:	c3                   	ret    

c0013578 <Virt::getPageState(unsigned long)>:
c0013578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001357c:	8b 0d 48 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026f48
c0013582:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0013588:	89 d0                	mov    eax,edx
c001358a:	d1 e8                	shr    eax,1
c001358c:	80 e2 01             	and    dl,0x1
c001358f:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0013592:	74 03                	je     c0013597 <Virt::getPageState(unsigned long)+0x1f>
c0013594:	c1 e8 04             	shr    eax,0x4
c0013597:	83 e0 0f             	and    eax,0xf
c001359a:	c3                   	ret    

c001359b <Virt::allocateKernelVirtualPages(int)>:
c001359b:	55                   	push   ebp
c001359c:	31 ed                	xor    ebp,ebp
c001359e:	57                   	push   edi
c001359f:	31 ff                	xor    edi,edi
c00135a1:	56                   	push   esi
c00135a2:	53                   	push   ebx
c00135a3:	31 db                	xor    ebx,ebx
c00135a5:	83 ec 0c             	sub    esp,0xc
c00135a8:	8b 35 44 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026f44
c00135ae:	56                   	push   esi
c00135af:	e8 c4 ff ff ff       	call   c0013578 <Virt::getPageState(unsigned long)>
c00135b4:	5a                   	pop    edx
c00135b5:	84 c0                	test   al,al
c00135b7:	75 41                	jne    c00135fa <Virt::allocateKernelVirtualPages(int)+0x5f>
c00135b9:	85 db                	test   ebx,ebx
c00135bb:	75 02                	jne    c00135bf <Virt::allocateKernelVirtualPages(int)+0x24>
c00135bd:	89 f5                	mov    ebp,esi
c00135bf:	83 c3 01             	add    ebx,0x1
c00135c2:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00135c6:	74 5f                	je     c0013627 <Virt::allocateKernelVirtualPages(int)+0x8c>
c00135c8:	83 c6 01             	add    esi,0x1
c00135cb:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c00135d1:	76 34                	jbe    c0013607 <Virt::allocateKernelVirtualPages(int)+0x6c>
c00135d3:	c7 05 44 6f 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0026f44,0xc8000
c00135dd:	f7 c7 01 00 00 00    	test   edi,0x1
c00135e3:	75 2a                	jne    c001360f <Virt::allocateKernelVirtualPages(int)+0x74>
c00135e5:	be 00 80 0c 00       	mov    esi,0xc8000
c00135ea:	bf 01 00 00 00       	mov    edi,0x1
c00135ef:	56                   	push   esi
c00135f0:	e8 83 ff ff ff       	call   c0013578 <Virt::getPageState(unsigned long)>
c00135f5:	5a                   	pop    edx
c00135f6:	84 c0                	test   al,al
c00135f8:	74 bf                	je     c00135b9 <Virt::allocateKernelVirtualPages(int)+0x1e>
c00135fa:	31 db                	xor    ebx,ebx
c00135fc:	83 c6 01             	add    esi,0x1
c00135ff:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0013605:	77 cc                	ja     c00135d3 <Virt::allocateKernelVirtualPages(int)+0x38>
c0013607:	89 35 44 6f 02 c0    	mov    DWORD PTR ds:0xc0026f44,esi
c001360d:	eb 9f                	jmp    c00135ae <Virt::allocateKernelVirtualPages(int)+0x13>
c001360f:	83 ec 0c             	sub    esp,0xc
c0013612:	68 68 49 02 c0       	push   0xc0024968
c0013617:	e8 ca c9 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001361c:	8b 35 44 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026f44
c0013622:	83 c4 10             	add    esp,0x10
c0013625:	eb 87                	jmp    c00135ae <Virt::allocateKernelVirtualPages(int)+0x13>
c0013627:	89 2d 44 6f 02 c0    	mov    DWORD PTR ds:0xc0026f44,ebp
c001362d:	83 fb 01             	cmp    ebx,0x1
c0013630:	74 6f                	je     c00136a1 <Virt::allocateKernelVirtualPages(int)+0x106>
c0013632:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013636:	85 c9                	test   ecx,ecx
c0013638:	74 49                	je     c0013683 <Virt::allocateKernelVirtualPages(int)+0xe8>
c001363a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001363e:	89 e8                	mov    eax,ebp
c0013640:	31 db                	xor    ebx,ebx
c0013642:	8d 79 ff             	lea    edi,[ecx-0x1]
c0013645:	eb 18                	jmp    c001365f <Virt::allocateKernelVirtualPages(int)+0xc4>
c0013647:	6a 01                	push   0x1
c0013649:	83 c3 01             	add    ebx,0x1
c001364c:	50                   	push   eax
c001364d:	e8 ec fe ff ff       	call   c001353e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013652:	58                   	pop    eax
c0013653:	5a                   	pop    edx
c0013654:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0013658:	74 29                	je     c0013683 <Virt::allocateKernelVirtualPages(int)+0xe8>
c001365a:	a1 44 6f 02 c0       	mov    eax,ds:0xc0026f44
c001365f:	8d 50 01             	lea    edx,[eax+0x1]
c0013662:	85 db                	test   ebx,ebx
c0013664:	89 15 44 6f 02 c0    	mov    DWORD PTR ds:0xc0026f44,edx
c001366a:	74 24                	je     c0013690 <Virt::allocateKernelVirtualPages(int)+0xf5>
c001366c:	39 df                	cmp    edi,ebx
c001366e:	75 d7                	jne    c0013647 <Virt::allocateKernelVirtualPages(int)+0xac>
c0013670:	6a 03                	push   0x3
c0013672:	83 c3 01             	add    ebx,0x1
c0013675:	50                   	push   eax
c0013676:	e8 c3 fe ff ff       	call   c001353e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001367b:	59                   	pop    ecx
c001367c:	5e                   	pop    esi
c001367d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0013681:	75 d7                	jne    c001365a <Virt::allocateKernelVirtualPages(int)+0xbf>
c0013683:	83 c4 0c             	add    esp,0xc
c0013686:	89 e8                	mov    eax,ebp
c0013688:	5b                   	pop    ebx
c0013689:	c1 e0 0c             	shl    eax,0xc
c001368c:	5e                   	pop    esi
c001368d:	5f                   	pop    edi
c001368e:	5d                   	pop    ebp
c001368f:	c3                   	ret    
c0013690:	6a 02                	push   0x2
c0013692:	bb 01 00 00 00       	mov    ebx,0x1
c0013697:	50                   	push   eax
c0013698:	e8 a1 fe ff ff       	call   c001353e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001369d:	58                   	pop    eax
c001369e:	5a                   	pop    edx
c001369f:	eb b9                	jmp    c001365a <Virt::allocateKernelVirtualPages(int)+0xbf>
c00136a1:	6a 04                	push   0x4
c00136a3:	8d 45 01             	lea    eax,[ebp+0x1]
c00136a6:	55                   	push   ebp
c00136a7:	a3 44 6f 02 c0       	mov    ds:0xc0026f44,eax
c00136ac:	e8 8d fe ff ff       	call   c001353e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00136b1:	5b                   	pop    ebx
c00136b2:	89 e8                	mov    eax,ebp
c00136b4:	5e                   	pop    esi
c00136b5:	c1 e0 0c             	shl    eax,0xc
c00136b8:	83 c4 0c             	add    esp,0xc
c00136bb:	5b                   	pop    ebx
c00136bc:	5e                   	pop    esi
c00136bd:	5f                   	pop    edi
c00136be:	5d                   	pop    ebp
c00136bf:	c3                   	ret    

c00136c0 <Virt::freeSwapfilePage(unsigned long)>:
c00136c0:	53                   	push   ebx
c00136c1:	8b 15 4c f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f24c
c00136c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00136cb:	b8 01 00 00 00       	mov    eax,0x1
c00136d0:	89 cb                	mov    ebx,ecx
c00136d2:	d3 e0                	shl    eax,cl
c00136d4:	c1 eb 05             	shr    ebx,0x5
c00136d7:	f7 d0                	not    eax
c00136d9:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c00136dc:	21 c1                	and    ecx,eax
c00136de:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c00136e1:	5b                   	pop    ebx
c00136e2:	c3                   	ret    

c00136e3 <Virt::swapIDToSector(unsigned long)>:
c00136e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136e7:	8b 15 4c 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026f4c
c00136ed:	8b 0d 54 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026f54
c00136f3:	0f af c2             	imul   eax,edx
c00136f6:	01 c8                	add    eax,ecx
c00136f8:	c3                   	ret    

c00136f9 <Virt::allocateSwapfilePage()>:
c00136f9:	55                   	push   ebp
c00136fa:	31 d2                	xor    edx,edx
c00136fc:	57                   	push   edi
c00136fd:	56                   	push   esi
c00136fe:	53                   	push   ebx
c00136ff:	83 ec 0c             	sub    esp,0xc
c0013702:	8b 0d 4c 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026f4c
c0013708:	a1 50 6f 02 c0       	mov    eax,ds:0xc0026f50
c001370d:	f7 f1                	div    ecx
c001370f:	39 0d 50 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f50,ecx
c0013715:	72 2f                	jb     c0013746 <Virt::allocateSwapfilePage()+0x4d>
c0013717:	8b 35 4c f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f24c
c001371d:	8b 16                	mov    edx,DWORD PTR [esi]
c001371f:	f6 c2 01             	test   dl,0x1
c0013722:	74 3e                	je     c0013762 <Virt::allocateSwapfilePage()+0x69>
c0013724:	31 c9                	xor    ecx,ecx
c0013726:	bf 01 00 00 00       	mov    edi,0x1
c001372b:	eb 12                	jmp    c001373f <Virt::allocateSwapfilePage()+0x46>
c001372d:	89 fd                	mov    ebp,edi
c001372f:	89 ca                	mov    edx,ecx
c0013731:	d3 e5                	shl    ebp,cl
c0013733:	c1 ea 05             	shr    edx,0x5
c0013736:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0013739:	8b 13                	mov    edx,DWORD PTR [ebx]
c001373b:	85 ea                	test   edx,ebp
c001373d:	74 2c                	je     c001376b <Virt::allocateSwapfilePage()+0x72>
c001373f:	83 c1 01             	add    ecx,0x1
c0013742:	39 c8                	cmp    eax,ecx
c0013744:	77 e7                	ja     c001372d <Virt::allocateSwapfilePage()+0x34>
c0013746:	83 ec 0c             	sub    esp,0xc
c0013749:	68 eb 4e 02 c0       	push   0xc0024eeb
c001374e:	e8 93 c8 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0013753:	83 c4 10             	add    esp,0x10
c0013756:	31 c9                	xor    ecx,ecx
c0013758:	83 c4 0c             	add    esp,0xc
c001375b:	89 c8                	mov    eax,ecx
c001375d:	5b                   	pop    ebx
c001375e:	5e                   	pop    esi
c001375f:	5f                   	pop    edi
c0013760:	5d                   	pop    ebp
c0013761:	c3                   	ret    
c0013762:	89 f3                	mov    ebx,esi
c0013764:	bd 01 00 00 00       	mov    ebp,0x1
c0013769:	31 c9                	xor    ecx,ecx
c001376b:	09 ea                	or     edx,ebp
c001376d:	89 c8                	mov    eax,ecx
c001376f:	89 13                	mov    DWORD PTR [ebx],edx
c0013771:	83 c4 0c             	add    esp,0xc
c0013774:	5b                   	pop    ebx
c0013775:	5e                   	pop    esi
c0013776:	5f                   	pop    edi
c0013777:	5d                   	pop    ebp
c0013778:	c3                   	ret    

c0013779 <Virt::virtualMemorySetup()>:
c0013779:	53                   	push   ebx
c001377a:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001377f:	6a 0f                	push   0xf
c0013781:	53                   	push   ebx
c0013782:	83 c3 01             	add    ebx,0x1
c0013785:	e8 b4 fd ff ff       	call   c001353e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001378a:	58                   	pop    eax
c001378b:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0013791:	5a                   	pop    edx
c0013792:	75 eb                	jne    c001377f <Virt::virtualMemorySetup()+0x6>
c0013794:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0013799:	6a 00                	push   0x0
c001379b:	53                   	push   ebx
c001379c:	83 c3 01             	add    ebx,0x1
c001379f:	e8 9a fd ff ff       	call   c001353e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00137a4:	59                   	pop    ecx
c00137a5:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00137ab:	58                   	pop    eax
c00137ac:	75 eb                	jne    c0013799 <Virt::virtualMemorySetup()+0x20>
c00137ae:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00137b3:	6a 0f                	push   0xf
c00137b5:	53                   	push   ebx
c00137b6:	83 c3 01             	add    ebx,0x1
c00137b9:	e8 80 fd ff ff       	call   c001353e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00137be:	58                   	pop    eax
c00137bf:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00137c5:	5a                   	pop    edx
c00137c6:	75 eb                	jne    c00137b3 <Virt::virtualMemorySetup()+0x3a>
c00137c8:	5b                   	pop    ebx
c00137c9:	c3                   	ret    

c00137ca <Virt::setupPageSwapping(int)>:
c00137ca:	53                   	push   ebx
c00137cb:	83 ec 0c             	sub    esp,0xc
c00137ce:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00137d2:	a1 e8 ca 02 c0       	mov    eax,ds:0xc002cae8
c00137d7:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00137dd:	8b 10                	mov    edx,DWORD PTR [eax]
c00137df:	53                   	push   ebx
c00137e0:	c1 e3 0b             	shl    ebx,0xb
c00137e3:	68 02 4f 02 c0       	push   0xc0024f02
c00137e8:	50                   	push   eax
c00137e9:	ff 52 60             	call   DWORD PTR [edx+0x60]
c00137ec:	89 1d 50 6f 02 c0    	mov    DWORD PTR ds:0xc0026f50,ebx
c00137f2:	c6 05 58 6f 02 c0 43 	mov    BYTE PTR ds:0xc0026f58,0x43
c00137f9:	c1 eb 08             	shr    ebx,0x8
c00137fc:	a3 54 6f 02 c0       	mov    ds:0xc0026f54,eax
c0013801:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013804:	c7 05 4c 6f 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0026f4c,0x8
c001380e:	e8 7c c3 ff ff       	call   c000fb8f <malloc>
c0013813:	83 c4 0c             	add    esp,0xc
c0013816:	89 c1                	mov    ecx,eax
c0013818:	a3 4c f2 02 c0       	mov    ds:0xc002f24c,eax
c001381d:	31 d2                	xor    edx,edx
c001381f:	a1 50 6f 02 c0       	mov    eax,ds:0xc0026f50
c0013824:	f7 35 4c 6f 02 c0    	div    DWORD PTR ds:0xc0026f4c
c001382a:	c1 e8 05             	shr    eax,0x5
c001382d:	50                   	push   eax
c001382e:	6a 00                	push   0x0
c0013830:	51                   	push   ecx
c0013831:	e8 ba cc fe ff       	call   c00004f0 <memset>
c0013836:	83 c4 18             	add    esp,0x18
c0013839:	5b                   	pop    ebx
c001383a:	c3                   	ret    
c001383b:	90                   	nop

c001383c <VAS::setCPUSpecific(unsigned long)>:
c001383c:	c3                   	ret    
c001383d:	90                   	nop

c001383e <VAS::VAS(VAS*)>:
c001383e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013842:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013849:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001384d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013854:	90                   	nop
c0013855:	c3                   	ret    

c0013856 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0013856:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001385a:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001385f:	89 c2                	mov    edx,eax
c0013861:	c1 e8 0a             	shr    eax,0xa
c0013864:	c1 ea 16             	shr    edx,0x16
c0013867:	83 f9 01             	cmp    ecx,0x1
c001386a:	19 c9                	sbb    ecx,ecx
c001386c:	c1 e2 0c             	shl    edx,0xc
c001386f:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0013875:	25 fc 0f 00 00       	and    eax,0xffc
c001387a:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0013881:	01 d0                	add    eax,edx
c0013883:	c3                   	ret    

c0013884 <VAS::getPageTableEntry(unsigned long)>:
c0013884:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013888:	89 ca                	mov    edx,ecx
c001388a:	c1 e9 0a             	shr    ecx,0xa
c001388d:	c1 ea 16             	shr    edx,0x16
c0013890:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0013896:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001389c:	c1 e0 0c             	shl    eax,0xc
c001389f:	8d 04 08             	lea    eax,[eax+ecx*1]
c00138a2:	c3                   	ret    

c00138a3 <Virt::freeKernelVirtualPages(unsigned long)>:
c00138a3:	55                   	push   ebp
c00138a4:	57                   	push   edi
c00138a5:	bf 01 00 00 00       	mov    edi,0x1
c00138aa:	56                   	push   esi
c00138ab:	53                   	push   ebx
c00138ac:	83 ec 1c             	sub    esp,0x1c
c00138af:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00138b3:	c1 ee 0c             	shr    esi,0xc
c00138b6:	eb 48                	jmp    c0013900 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c00138b8:	83 ec 08             	sub    esp,0x8
c00138bb:	a1 50 f2 02 c0       	mov    eax,ds:0xc002f250
c00138c0:	55                   	push   ebp
c00138c1:	50                   	push   eax
c00138c2:	e8 bd ff ff ff       	call   c0013884 <VAS::getPageTableEntry(unsigned long)>
c00138c7:	83 c4 10             	add    esp,0x10
c00138ca:	8b 10                	mov    edx,DWORD PTR [eax]
c00138cc:	f6 c6 04             	test   dh,0x4
c00138cf:	75 70                	jne    c0013941 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00138d1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00138d7:	83 fb 04             	cmp    ebx,0x4
c00138da:	0f 84 8a 00 00 00    	je     c001396a <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00138e0:	83 fb 02             	cmp    ebx,0x2
c00138e3:	0f 84 9a 00 00 00    	je     c0013983 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c00138e9:	83 fb 03             	cmp    ebx,0x3
c00138ec:	0f 84 be 00 00 00    	je     c00139b0 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c00138f2:	83 fb 01             	cmp    ebx,0x1
c00138f5:	0f 84 a2 00 00 00    	je     c001399d <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00138fb:	83 c6 01             	add    esi,0x1
c00138fe:	31 ff                	xor    edi,edi
c0013900:	56                   	push   esi
c0013901:	89 f5                	mov    ebp,esi
c0013903:	e8 70 fc ff ff       	call   c0013578 <Virt::getPageState(unsigned long)>
c0013908:	c1 e5 0c             	shl    ebp,0xc
c001390b:	0f b6 d8             	movzx  ebx,al
c001390e:	5a                   	pop    edx
c001390f:	85 db                	test   ebx,ebx
c0013911:	75 a5                	jne    c00138b8 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0013913:	83 ec 0c             	sub    esp,0xc
c0013916:	68 19 4f 02 c0       	push   0xc0024f19
c001391b:	e8 c6 c6 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0013920:	5a                   	pop    edx
c0013921:	59                   	pop    ecx
c0013922:	55                   	push   ebp
c0013923:	8b 2d 50 f2 02 c0    	mov    ebp,DWORD PTR ds:0xc002f250
c0013929:	55                   	push   ebp
c001392a:	e8 55 ff ff ff       	call   c0013884 <VAS::getPageTableEntry(unsigned long)>
c001392f:	83 c4 10             	add    esp,0x10
c0013932:	8b 10                	mov    edx,DWORD PTR [eax]
c0013934:	f6 c6 04             	test   dh,0x4
c0013937:	75 08                	jne    c0013941 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0013939:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001393f:	eb ba                	jmp    c00138fb <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013941:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013945:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001394b:	83 ec 0c             	sub    esp,0xc
c001394e:	52                   	push   edx
c001394f:	e8 1d c8 ff ff       	call   c0010171 <Phys::freePage(unsigned long)>
c0013954:	83 c4 10             	add    esp,0x10
c0013957:	83 fb 04             	cmp    ebx,0x4
c001395a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001395e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013964:	0f 85 76 ff ff ff    	jne    c00138e0 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c001396a:	83 e7 01             	and    edi,0x1
c001396d:	75 46                	jne    c00139b5 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c001396f:	c7 44 24 30 88 49 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024988
c0013977:	83 c4 1c             	add    esp,0x1c
c001397a:	5b                   	pop    ebx
c001397b:	5e                   	pop    esi
c001397c:	5f                   	pop    edi
c001397d:	5d                   	pop    ebp
c001397e:	e9 63 c6 ff ff       	jmp    c000ffe6 <KePanic(char const*)>
c0013983:	83 e7 01             	and    edi,0x1
c0013986:	75 15                	jne    c001399d <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0013988:	83 ec 0c             	sub    esp,0xc
c001398b:	68 35 4f 02 c0       	push   0xc0024f35
c0013990:	e8 51 c6 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0013995:	83 c4 10             	add    esp,0x10
c0013998:	e9 5e ff ff ff       	jmp    c00138fb <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001399d:	83 ec 08             	sub    esp,0x8
c00139a0:	6a 00                	push   0x0
c00139a2:	56                   	push   esi
c00139a3:	e8 96 fb ff ff       	call   c001353e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00139a8:	83 c4 10             	add    esp,0x10
c00139ab:	e9 4b ff ff ff       	jmp    c00138fb <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00139b0:	83 e7 01             	and    edi,0x1
c00139b3:	75 16                	jne    c00139cb <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c00139b5:	83 ec 08             	sub    esp,0x8
c00139b8:	6a 00                	push   0x0
c00139ba:	56                   	push   esi
c00139bb:	e8 7e fb ff ff       	call   c001353e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00139c0:	83 c4 10             	add    esp,0x10
c00139c3:	83 c4 1c             	add    esp,0x1c
c00139c6:	5b                   	pop    ebx
c00139c7:	5e                   	pop    esi
c00139c8:	5f                   	pop    edi
c00139c9:	5d                   	pop    ebp
c00139ca:	c3                   	ret    
c00139cb:	c7 44 24 30 51 4f 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024f51
c00139d3:	83 c4 1c             	add    esp,0x1c
c00139d6:	5b                   	pop    ebx
c00139d7:	5e                   	pop    esi
c00139d8:	5f                   	pop    edi
c00139d9:	5d                   	pop    ebp
c00139da:	e9 07 c6 ff ff       	jmp    c000ffe6 <KePanic(char const*)>
c00139df:	90                   	nop

c00139e0 <VAS::freeAllocatedPages(unsigned long)>:
c00139e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00139e8:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00139ec:	74 09                	je     c00139f7 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00139ee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00139f2:	e9 ac fe ff ff       	jmp    c00138a3 <Virt::freeKernelVirtualPages(unsigned long)>
c00139f7:	c7 44 24 04 ac 49 02 c0 	mov    DWORD PTR [esp+0x4],0xc00249ac
c00139ff:	e9 78 35 ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>

c0013a04 <VAS::virtualToPhysical(unsigned long)>:
c0013a04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a08:	50                   	push   eax
c0013a09:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013a0d:	52                   	push   edx
c0013a0e:	e8 71 fe ff ff       	call   c0013884 <VAS::getPageTableEntry(unsigned long)>
c0013a13:	59                   	pop    ecx
c0013a14:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a16:	5a                   	pop    edx
c0013a17:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013a1c:	c3                   	ret    
c0013a1d:	90                   	nop

c0013a1e <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0013a1e:	55                   	push   ebp
c0013a1f:	57                   	push   edi
c0013a20:	56                   	push   esi
c0013a21:	53                   	push   ebx
c0013a22:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a26:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0013a2a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013a2e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013a32:	85 db                	test   ebx,ebx
c0013a34:	7e 24                	jle    c0013a5a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0013a36:	c1 e3 0c             	shl    ebx,0xc
c0013a39:	01 f3                	add    ebx,esi
c0013a3b:	56                   	push   esi
c0013a3c:	81 c6 00 10 00 00    	add    esi,0x1000
c0013a42:	55                   	push   ebp
c0013a43:	e8 3c fe ff ff       	call   c0013884 <VAS::getPageTableEntry(unsigned long)>
c0013a48:	5a                   	pop    edx
c0013a49:	59                   	pop    ecx
c0013a4a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a4c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013a50:	21 f9                	and    ecx,edi
c0013a52:	09 d1                	or     ecx,edx
c0013a54:	39 f3                	cmp    ebx,esi
c0013a56:	89 08                	mov    DWORD PTR [eax],ecx
c0013a58:	75 e1                	jne    c0013a3b <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0013a5a:	5b                   	pop    ebx
c0013a5b:	5e                   	pop    esi
c0013a5c:	5f                   	pop    edi
c0013a5d:	5d                   	pop    ebp
c0013a5e:	c3                   	ret    
c0013a5f:	90                   	nop

c0013a60 <VAS::VAS()>:
c0013a60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a64:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013a6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a6f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013a76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a7a:	a3 50 f2 02 c0       	mov    ds:0xc002f250,eax
c0013a7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a83:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0013a87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a8b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0013a8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a92:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0013a99:	ba 7d 80 02 c0       	mov    edx,0xc002807d
c0013a9e:	b8 00 80 02 c0       	mov    eax,0xc0028000
c0013aa3:	29 c2                	sub    edx,eax
c0013aa5:	89 d0                	mov    eax,edx
c0013aa7:	05 ff 0f 00 00       	add    eax,0xfff
c0013aac:	c1 e8 0c             	shr    eax,0xc
c0013aaf:	89 c2                	mov    edx,eax
c0013ab1:	b8 00 80 02 c0       	mov    eax,0xc0028000
c0013ab6:	6a 04                	push   0x4
c0013ab8:	6a ff                	push   0xffffffff
c0013aba:	52                   	push   edx
c0013abb:	50                   	push   eax
c0013abc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013ac0:	e8 59 ff ff ff       	call   c0013a1e <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013ac5:	83 c4 14             	add    esp,0x14
c0013ac8:	90                   	nop
c0013ac9:	c3                   	ret    

c0013aca <VAS::setToWriteCombining(unsigned long, int)>:
c0013aca:	a1 24 fb 02 c0       	mov    eax,ds:0xc002fb24
c0013acf:	50                   	push   eax
c0013ad0:	6a ff                	push   0xffffffff
c0013ad2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013ad6:	52                   	push   edx
c0013ad7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013adb:	51                   	push   ecx
c0013adc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ae0:	50                   	push   eax
c0013ae1:	e8 38 ff ff ff       	call   c0013a1e <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013ae6:	83 c4 14             	add    esp,0x14
c0013ae9:	c3                   	ret    

c0013aea <VAS::mapOtherVASIn(bool, VAS*)>:
c0013aea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013aee:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013af1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013af5:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0013af8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013afd:	83 f8 01             	cmp    eax,0x1
c0013b00:	19 c0                	sbb    eax,eax
c0013b02:	83 ca 03             	or     edx,0x3
c0013b05:	83 e0 fc             	and    eax,0xfffffffc
c0013b08:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0013b0f:	0f 20 d8             	mov    eax,cr3
c0013b12:	0f 22 d8             	mov    cr3,eax
c0013b15:	c3                   	ret    

c0013b16 <VAS::~VAS()>:
c0013b16:	83 ec 2c             	sub    esp,0x2c
c0013b19:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013b21:	fa                   	cli    
c0013b22:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0013b27:	83 c0 01             	add    eax,0x1
c0013b2a:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0013b2f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013b34:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b36:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013b39:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0013b3f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013b43:	6a 01                	push   0x1
c0013b45:	50                   	push   eax
c0013b46:	e8 9f ff ff ff       	call   c0013aea <VAS::mapOtherVASIn(bool, VAS*)>
c0013b4b:	83 c4 0c             	add    esp,0xc
c0013b4e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013b56:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0013b5e:	0f 8f d8 00 00 00    	jg     c0013c3c <VAS::~VAS()+0x126>
c0013b64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b68:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013b6b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b6f:	c1 e2 02             	shl    edx,0x2
c0013b72:	01 d0                	add    eax,edx
c0013b74:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b76:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b7e:	83 e0 01             	and    eax,0x1
c0013b81:	0f 84 ab 00 00 00    	je     c0013c32 <VAS::~VAS()+0x11c>
c0013b87:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013b8f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0013b97:	7f 74                	jg     c0013c0d <VAS::~VAS()+0xf7>
c0013b99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b9d:	c1 e0 0a             	shl    eax,0xa
c0013ba0:	89 c2                	mov    edx,eax
c0013ba2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ba6:	01 d0                	add    eax,edx
c0013ba8:	c1 e0 0c             	shl    eax,0xc
c0013bab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013baf:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013bb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0013bb6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013bb9:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0013bbf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013bc3:	6a 01                	push   0x1
c0013bc5:	50                   	push   eax
c0013bc6:	e8 8b fc ff ff       	call   c0013856 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0013bcb:	83 c4 0c             	add    esp,0xc
c0013bce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013bd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0013bd8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013bdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013be0:	25 01 04 00 00       	and    eax,0x401
c0013be5:	3d 01 04 00 00       	cmp    eax,0x401
c0013bea:	75 1a                	jne    c0013c06 <VAS::~VAS()+0xf0>
c0013bec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013bf0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013bf5:	83 ec 0c             	sub    esp,0xc
c0013bf8:	50                   	push   eax
c0013bf9:	e8 73 c5 ff ff       	call   c0010171 <Phys::freePage(unsigned long)>
c0013bfe:	83 c4 10             	add    esp,0x10
c0013c01:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013c06:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0013c0b:	eb 82                	jmp    c0013b8f <VAS::~VAS()+0x79>
c0013c0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c11:	25 00 04 00 00       	and    eax,0x400
c0013c16:	74 1a                	je     c0013c32 <VAS::~VAS()+0x11c>
c0013c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c1c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013c21:	83 ec 0c             	sub    esp,0xc
c0013c24:	50                   	push   eax
c0013c25:	e8 47 c5 ff ff       	call   c0010171 <Phys::freePage(unsigned long)>
c0013c2a:	83 c4 10             	add    esp,0x10
c0013c2d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013c32:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013c37:	e9 1a ff ff ff       	jmp    c0013b56 <VAS::~VAS()+0x40>
c0013c3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c40:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013c43:	83 ec 0c             	sub    esp,0xc
c0013c46:	50                   	push   eax
c0013c47:	e8 57 fc ff ff       	call   c00138a3 <Virt::freeKernelVirtualPages(unsigned long)>
c0013c4c:	83 c4 10             	add    esp,0x10
c0013c4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c53:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013c56:	83 ec 0c             	sub    esp,0xc
c0013c59:	50                   	push   eax
c0013c5a:	e8 12 c5 ff ff       	call   c0010171 <Phys::freePage(unsigned long)>
c0013c5f:	83 c4 10             	add    esp,0x10
c0013c62:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013c67:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0013c6f:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0013c74:	85 c0                	test   eax,eax
c0013c76:	75 01                	jne    c0013c79 <VAS::~VAS()+0x163>
c0013c78:	fb                   	sti    
c0013c79:	90                   	nop
c0013c7a:	83 c4 2c             	add    esp,0x2c
c0013c7d:	c3                   	ret    

c0013c7e <VAS::mapPage(unsigned long, unsigned long, int)>:
c0013c7e:	55                   	push   ebp
c0013c7f:	57                   	push   edi
c0013c80:	56                   	push   esi
c0013c81:	53                   	push   ebx
c0013c82:	83 ec 1c             	sub    esp,0x1c
c0013c85:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0013c89:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013c8d:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0013c93:	77 08                	ja     c0013c9d <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0013c95:	0f 20 d8             	mov    eax,cr3
c0013c98:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0013c9b:	75 49                	jne    c0013ce6 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0013c9d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013ca1:	09 d8                	or     eax,ebx
c0013ca3:	a9 ff 0f 00 00       	test   eax,0xfff
c0013ca8:	75 59                	jne    c0013d03 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0013caa:	89 de                	mov    esi,ebx
c0013cac:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013caf:	c1 ee 16             	shr    esi,0x16
c0013cb2:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0013cb9:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0013cbd:	74 56                	je     c0013d15 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0013cbf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013cc3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013cc7:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0013ccd:	c1 eb 0a             	shr    ebx,0xa
c0013cd0:	c1 e6 0c             	shl    esi,0xc
c0013cd3:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013cd9:	09 d0                	or     eax,edx
c0013cdb:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0013cde:	83 c4 1c             	add    esp,0x1c
c0013ce1:	5b                   	pop    ebx
c0013ce2:	5e                   	pop    esi
c0013ce3:	5f                   	pop    edi
c0013ce4:	5d                   	pop    ebp
c0013ce5:	c3                   	ret    
c0013ce6:	83 ec 0c             	sub    esp,0xc
c0013ce9:	68 d0 49 02 c0       	push   0xc00249d0
c0013cee:	e8 89 32 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013cf3:	83 c4 10             	add    esp,0x10
c0013cf6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013cfa:	09 d8                	or     eax,ebx
c0013cfc:	a9 ff 0f 00 00       	test   eax,0xfff
c0013d01:	74 a7                	je     c0013caa <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0013d03:	83 ec 0c             	sub    esp,0xc
c0013d06:	68 38 4a 02 c0       	push   0xc0024a38
c0013d0b:	e8 d6 c2 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0013d10:	83 c4 10             	add    esp,0x10
c0013d13:	eb 95                	jmp    c0013caa <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0013d15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013d19:	e8 bc c4 ff ff       	call   c00101da <Phys::allocatePage()>
c0013d1e:	83 ec 0c             	sub    esp,0xc
c0013d21:	89 c5                	mov    ebp,eax
c0013d23:	8b 0d 50 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f250
c0013d29:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013d2d:	6a 01                	push   0x1
c0013d2f:	e8 67 f8 ff ff       	call   c001359b <Virt::allocateKernelVirtualPages(int)>
c0013d34:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013d3b:	6a 01                	push   0x1
c0013d3d:	50                   	push   eax
c0013d3e:	55                   	push   ebp
c0013d3f:	81 cd 07 04 00 00    	or     ebp,0x407
c0013d45:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013d49:	51                   	push   ecx
c0013d4a:	e8 19 01 00 00       	call   c0013e68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013d4f:	83 c4 1c             	add    esp,0x1c
c0013d52:	68 00 10 00 00       	push   0x1000
c0013d57:	6a 00                	push   0x0
c0013d59:	50                   	push   eax
c0013d5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013d5e:	e8 8d c7 fe ff       	call   c00004f0 <memset>
c0013d63:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013d67:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013d6a:	e8 34 fb ff ff       	call   c00138a3 <Virt::freeKernelVirtualPages(unsigned long)>
c0013d6f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013d73:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013d76:	83 c4 10             	add    esp,0x10
c0013d79:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0013d7c:	e9 3e ff ff ff       	jmp    c0013cbf <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0013d81:	90                   	nop

c0013d82 <VAS::allocatePages(int, int)>:
c0013d82:	55                   	push   ebp
c0013d83:	57                   	push   edi
c0013d84:	56                   	push   esi
c0013d85:	53                   	push   ebx
c0013d86:	83 ec 1c             	sub    esp,0x1c
c0013d89:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013d8d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0013d91:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0013d95:	75 71                	jne    c0013e08 <VAS::allocatePages(int, int)+0x86>
c0013d97:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013d9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013d9e:	85 c0                	test   eax,eax
c0013da0:	74 4d                	je     c0013def <VAS::allocatePages(int, int)+0x6d>
c0013da2:	89 dd                	mov    ebp,ebx
c0013da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013da8:	c1 e5 0c             	shl    ebp,0xc
c0013dab:	01 c5                	add    ebp,eax
c0013dad:	85 db                	test   ebx,ebx
c0013daf:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0013db2:	7e 29                	jle    c0013ddd <VAS::allocatePages(int, int)+0x5b>
c0013db4:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013db8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013dbc:	81 cf 00 04 00 00    	or     edi,0x400
c0013dc2:	e8 13 c4 ff ff       	call   c00101da <Phys::allocatePage()>
c0013dc7:	57                   	push   edi
c0013dc8:	53                   	push   ebx
c0013dc9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013dcf:	50                   	push   eax
c0013dd0:	56                   	push   esi
c0013dd1:	e8 a8 fe ff ff       	call   c0013c7e <VAS::mapPage(unsigned long, unsigned long, int)>
c0013dd6:	83 c4 10             	add    esp,0x10
c0013dd9:	39 dd                	cmp    ebp,ebx
c0013ddb:	75 e5                	jne    c0013dc2 <VAS::allocatePages(int, int)+0x40>
c0013ddd:	0f 20 d8             	mov    eax,cr3
c0013de0:	0f 22 d8             	mov    cr3,eax
c0013de3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013de7:	83 c4 1c             	add    esp,0x1c
c0013dea:	5b                   	pop    ebx
c0013deb:	5e                   	pop    esi
c0013dec:	5f                   	pop    edi
c0013ded:	5d                   	pop    ebp
c0013dee:	c3                   	ret    
c0013def:	83 ec 0c             	sub    esp,0xc
c0013df2:	68 5c 4a 02 c0       	push   0xc0024a5c
c0013df7:	e8 ea c1 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0013dfc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013dff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e03:	83 c4 10             	add    esp,0x10
c0013e06:	eb 9a                	jmp    c0013da2 <VAS::allocatePages(int, int)+0x20>
c0013e08:	83 ec 0c             	sub    esp,0xc
c0013e0b:	53                   	push   ebx
c0013e0c:	e8 8a f7 ff ff       	call   c001359b <Virt::allocateKernelVirtualPages(int)>
c0013e11:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e15:	83 c4 10             	add    esp,0x10
c0013e18:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0013e1d:	77 37                	ja     c0013e56 <VAS::allocatePages(int, int)+0xd4>
c0013e1f:	85 db                	test   ebx,ebx
c0013e21:	7e ba                	jle    c0013ddd <VAS::allocatePages(int, int)+0x5b>
c0013e23:	c1 e3 0c             	shl    ebx,0xc
c0013e26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013e2a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013e2e:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0013e31:	81 cf 00 04 00 00    	or     edi,0x400
c0013e37:	89 c3                	mov    ebx,eax
c0013e39:	e8 9c c3 ff ff       	call   c00101da <Phys::allocatePage()>
c0013e3e:	57                   	push   edi
c0013e3f:	53                   	push   ebx
c0013e40:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013e46:	50                   	push   eax
c0013e47:	56                   	push   esi
c0013e48:	e8 31 fe ff ff       	call   c0013c7e <VAS::mapPage(unsigned long, unsigned long, int)>
c0013e4d:	83 c4 10             	add    esp,0x10
c0013e50:	39 dd                	cmp    ebp,ebx
c0013e52:	75 e5                	jne    c0013e39 <VAS::allocatePages(int, int)+0xb7>
c0013e54:	eb 87                	jmp    c0013ddd <VAS::allocatePages(int, int)+0x5b>
c0013e56:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013e5a:	a1 28 fb 02 c0       	mov    eax,ds:0xc002fb28
c0013e5f:	09 c2                	or     edx,eax
c0013e61:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0013e65:	eb b8                	jmp    c0013e1f <VAS::allocatePages(int, int)+0x9d>
c0013e67:	90                   	nop

c0013e68 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0013e68:	55                   	push   ebp
c0013e69:	57                   	push   edi
c0013e6a:	56                   	push   esi
c0013e6b:	53                   	push   ebx
c0013e6c:	83 ec 0c             	sub    esp,0xc
c0013e6f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013e73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013e77:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013e7b:	85 db                	test   ebx,ebx
c0013e7d:	7e 2f                	jle    c0013eae <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0013e7f:	c1 e3 0c             	shl    ebx,0xc
c0013e82:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013e86:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0013e8a:	01 d3                	add    ebx,edx
c0013e8c:	55                   	push   ebp
c0013e8d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013e91:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013e95:	29 c2                	sub    edx,eax
c0013e97:	01 f2                	add    edx,esi
c0013e99:	52                   	push   edx
c0013e9a:	56                   	push   esi
c0013e9b:	81 c6 00 10 00 00    	add    esi,0x1000
c0013ea1:	57                   	push   edi
c0013ea2:	e8 d7 fd ff ff       	call   c0013c7e <VAS::mapPage(unsigned long, unsigned long, int)>
c0013ea7:	83 c4 10             	add    esp,0x10
c0013eaa:	39 de                	cmp    esi,ebx
c0013eac:	75 de                	jne    c0013e8c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0013eae:	0f 20 d8             	mov    eax,cr3
c0013eb1:	0f 22 d8             	mov    cr3,eax
c0013eb4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013eb8:	83 c4 0c             	add    esp,0xc
c0013ebb:	5b                   	pop    ebx
c0013ebc:	5e                   	pop    esi
c0013ebd:	5f                   	pop    edi
c0013ebe:	5d                   	pop    ebp
c0013ebf:	c3                   	ret    

c0013ec0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0013ec0:	55                   	push   ebp
c0013ec1:	57                   	push   edi
c0013ec2:	56                   	push   esi
c0013ec3:	53                   	push   ebx
c0013ec4:	83 ec 1c             	sub    esp,0x1c
c0013ec7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013ecb:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0013ecf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013ed3:	09 f8                	or     eax,edi
c0013ed5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0013ed9:	a9 ff 0f 00 00       	test   eax,0xfff
c0013ede:	75 4f                	jne    c0013f2f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0013ee0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0013ee4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0013ee7:	c1 eb 16             	shr    ebx,0x16
c0013eea:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0013ef1:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0013ef5:	74 52                	je     c0013f49 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0013ef7:	0f b6 f2             	movzx  esi,dl
c0013efa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013efe:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0013f02:	c1 e8 0a             	shr    eax,0xa
c0013f05:	83 fe 01             	cmp    esi,0x1
c0013f08:	19 d2                	sbb    edx,edx
c0013f0a:	c1 e3 0c             	shl    ebx,0xc
c0013f0d:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0013f13:	25 fc 0f 00 00       	and    eax,0xffc
c0013f18:	01 d8                	add    eax,ebx
c0013f1a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013f1e:	09 d9                	or     ecx,ebx
c0013f20:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0013f27:	83 c4 1c             	add    esp,0x1c
c0013f2a:	5b                   	pop    ebx
c0013f2b:	5e                   	pop    esi
c0013f2c:	5f                   	pop    edi
c0013f2d:	5d                   	pop    ebp
c0013f2e:	c3                   	ret    
c0013f2f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0013f33:	83 ec 0c             	sub    esp,0xc
c0013f36:	68 88 4a 02 c0       	push   0xc0024a88
c0013f3b:	e8 a6 c0 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0013f40:	83 c4 10             	add    esp,0x10
c0013f43:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013f47:	eb 97                	jmp    c0013ee0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0013f49:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013f4d:	e8 88 c2 ff ff       	call   c00101da <Phys::allocatePage()>
c0013f52:	83 ec 0c             	sub    esp,0xc
c0013f55:	89 c5                	mov    ebp,eax
c0013f57:	8b 0d 50 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f250
c0013f5d:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013f61:	6a 01                	push   0x1
c0013f63:	e8 33 f6 ff ff       	call   c001359b <Virt::allocateKernelVirtualPages(int)>
c0013f68:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013f6f:	6a 01                	push   0x1
c0013f71:	50                   	push   eax
c0013f72:	55                   	push   ebp
c0013f73:	81 cd 07 04 00 00    	or     ebp,0x407
c0013f79:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013f7d:	51                   	push   ecx
c0013f7e:	e8 e5 fe ff ff       	call   c0013e68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013f83:	83 c4 1c             	add    esp,0x1c
c0013f86:	68 00 10 00 00       	push   0x1000
c0013f8b:	6a 00                	push   0x0
c0013f8d:	50                   	push   eax
c0013f8e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013f92:	e8 59 c5 fe ff       	call   c00004f0 <memset>
c0013f97:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013f9b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013f9e:	e8 00 f9 ff ff       	call   c00138a3 <Virt::freeKernelVirtualPages(unsigned long)>
c0013fa3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0013fa6:	83 c4 10             	add    esp,0x10
c0013fa9:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c0013fac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013fb0:	e9 42 ff ff ff       	jmp    c0013ef7 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c0013fb5:	90                   	nop

c0013fb6 <VAS::VAS(bool)>:
c0013fb6:	53                   	push   ebx
c0013fb7:	83 ec 28             	sub    esp,0x28
c0013fba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013fbe:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013fc2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013fc6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013fcd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013fd1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013fd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013fdc:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013fe0:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0013fe3:	e8 f2 c1 ff ff       	call   c00101da <Phys::allocatePage()>
c0013fe8:	89 c2                	mov    edx,eax
c0013fea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013ff1:	8b 1d 50 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f250
c0013ff7:	83 ec 0c             	sub    esp,0xc
c0013ffa:	6a 01                	push   0x1
c0013ffc:	e8 9a f5 ff ff       	call   c001359b <Virt::allocateKernelVirtualPages(int)>
c0014001:	83 c4 10             	add    esp,0x10
c0014004:	89 c2                	mov    edx,eax
c0014006:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001400a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001400d:	83 ec 0c             	sub    esp,0xc
c0014010:	6a 03                	push   0x3
c0014012:	6a 01                	push   0x1
c0014014:	52                   	push   edx
c0014015:	50                   	push   eax
c0014016:	53                   	push   ebx
c0014017:	e8 4c fe ff ff       	call   c0013e68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001401c:	83 c4 20             	add    esp,0x20
c001401f:	89 c2                	mov    edx,eax
c0014021:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014025:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0014028:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014030:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0014038:	7f 1d                	jg     c0014057 <VAS::VAS(bool)+0xa1>
c001403a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001403e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014041:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014045:	c1 e2 02             	shl    edx,0x2
c0014048:	01 d0                	add    eax,edx
c001404a:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0014050:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0014055:	eb d9                	jmp    c0014030 <VAS::VAS(bool)+0x7a>
c0014057:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c001405f:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0014067:	7f 59                	jg     c00140c2 <VAS::VAS(bool)+0x10c>
c0014069:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001406d:	2d 00 02 00 00       	sub    eax,0x200
c0014072:	c1 e0 0c             	shl    eax,0xc
c0014075:	89 c2                	mov    edx,eax
c0014077:	a1 28 fb 02 c0       	mov    eax,ds:0xc002fb28
c001407c:	89 d1                	mov    ecx,edx
c001407e:	09 c1                	or     ecx,eax
c0014080:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014084:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014087:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001408b:	c1 e2 02             	shl    edx,0x2
c001408e:	01 d0                	add    eax,edx
c0014090:	83 c9 05             	or     ecx,0x5
c0014093:	89 ca                	mov    edx,ecx
c0014095:	89 10                	mov    DWORD PTR [eax],edx
c0014097:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001409b:	2d 40 03 00 00       	sub    eax,0x340
c00140a0:	83 f8 7f             	cmp    eax,0x7f
c00140a3:	77 16                	ja     c00140bb <VAS::VAS(bool)+0x105>
c00140a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00140a9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00140ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00140b0:	c1 e2 02             	shl    edx,0x2
c00140b3:	01 d0                	add    eax,edx
c00140b5:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00140bb:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00140c0:	eb 9d                	jmp    c001405f <VAS::VAS(bool)+0xa9>
c00140c2:	8b 15 28 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb28
c00140c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00140cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00140cf:	05 20 0c 00 00       	add    eax,0xc20
c00140d4:	81 ca 03 40 00 00    	or     edx,0x4003
c00140da:	89 10                	mov    DWORD PTR [eax],edx
c00140dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00140e0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00140e3:	a1 28 fb 02 c0       	mov    eax,ds:0xc002fb28
c00140e8:	09 c2                	or     edx,eax
c00140ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00140ee:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00140f1:	05 fc 0f 00 00       	add    eax,0xffc
c00140f6:	83 ca 03             	or     edx,0x3
c00140f9:	89 10                	mov    DWORD PTR [eax],edx
c00140fb:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c0014100:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0014106:	83 ec 0c             	sub    esp,0xc
c0014109:	50                   	push   eax
c001410a:	e8 a3 5b ff ff       	call   c0009cb2 <Device::getName()>
c001410f:	83 c4 10             	add    esp,0x10
c0014112:	83 ec 08             	sub    esp,0x8
c0014115:	68 6b 4f 02 c0       	push   0xc0024f6b
c001411a:	50                   	push   eax
c001411b:	e8 30 c6 fe ff       	call   c0000750 <strcmp>
c0014120:	83 c4 10             	add    esp,0x10
c0014123:	85 c0                	test   eax,eax
c0014125:	0f 94 c0             	sete   al
c0014128:	0f b6 c0             	movzx  eax,al
c001412b:	85 c0                	test   eax,eax
c001412d:	74 68                	je     c0014197 <VAS::VAS(bool)+0x1e1>
c001412f:	fa                   	cli    
c0014130:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c0014135:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001413b:	05 68 09 00 00       	add    eax,0x968
c0014140:	83 ec 0c             	sub    esp,0xc
c0014143:	50                   	push   eax
c0014144:	e8 39 ad ff ff       	call   c000ee82 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0014149:	83 c4 10             	add    esp,0x10
c001414c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014151:	89 c3                	mov    ebx,eax
c0014153:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c0014158:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001415e:	05 68 09 00 00       	add    eax,0x968
c0014163:	83 ec 0c             	sub    esp,0xc
c0014166:	50                   	push   eax
c0014167:	e8 16 ad ff ff       	call   c000ee82 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001416c:	83 c4 10             	add    esp,0x10
c001416f:	83 ec 08             	sub    esp,0x8
c0014172:	50                   	push   eax
c0014173:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014177:	e8 08 f7 ff ff       	call   c0013884 <VAS::getPageTableEntry(unsigned long)>
c001417c:	83 c4 10             	add    esp,0x10
c001417f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014181:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014186:	6a 11                	push   0x11
c0014188:	53                   	push   ebx
c0014189:	50                   	push   eax
c001418a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001418e:	e8 eb fa ff ff       	call   c0013c7e <VAS::mapPage(unsigned long, unsigned long, int)>
c0014193:	83 c4 10             	add    esp,0x10
c0014196:	fb                   	sti    
c0014197:	90                   	nop
c0014198:	83 c4 28             	add    esp,0x28
c001419b:	5b                   	pop    ebx
c001419c:	c3                   	ret    
c001419d:	90                   	nop

c001419e <VAS::evict(unsigned long)>:
c001419e:	55                   	push   ebp
c001419f:	57                   	push   edi
c00141a0:	56                   	push   esi
c00141a1:	53                   	push   ebx
c00141a2:	83 ec 24             	sub    esp,0x24
c00141a5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00141a9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00141ad:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00141b1:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00141b6:	50                   	push   eax
c00141b7:	68 79 4f 02 c0       	push   0xc0024f79
c00141bc:	e8 bb 2d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00141c1:	e8 33 f5 ff ff       	call   c00136f9 <Virt::allocateSwapfilePage()>
c00141c6:	83 c4 10             	add    esp,0x10
c00141c9:	89 c7                	mov    edi,eax
c00141cb:	a1 4c 6f 02 c0       	mov    eax,ds:0xc0026f4c
c00141d0:	85 c0                	test   eax,eax
c00141d2:	7e 40                	jle    c0014214 <VAS::evict(unsigned long)+0x76>
c00141d4:	89 ee                	mov    esi,ebp
c00141d6:	31 db                	xor    ebx,ebx
c00141d8:	83 ec 0c             	sub    esp,0xc
c00141db:	57                   	push   edi
c00141dc:	e8 02 f5 ff ff       	call   c00136e3 <Virt::swapIDToSector(unsigned long)>
c00141e1:	89 34 24             	mov    DWORD PTR [esp],esi
c00141e4:	01 d8                	add    eax,ebx
c00141e6:	6a 01                	push   0x1
c00141e8:	31 d2                	xor    edx,edx
c00141ea:	83 c3 01             	add    ebx,0x1
c00141ed:	52                   	push   edx
c00141ee:	81 c6 00 02 00 00    	add    esi,0x200
c00141f4:	50                   	push   eax
c00141f5:	0f be 05 58 6f 02 c0 	movsx  eax,BYTE PTR ds:0xc0026f58
c00141fc:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c0014203:	50                   	push   eax
c0014204:	e8 0b 69 ff ff       	call   c000ab14 <LogicalDisk::write(unsigned long long, int, void*)>
c0014209:	83 c4 20             	add    esp,0x20
c001420c:	39 1d 4c 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f4c,ebx
c0014212:	7f c4                	jg     c00141d8 <VAS::evict(unsigned long)+0x3a>
c0014214:	83 ec 08             	sub    esp,0x8
c0014217:	c1 e7 0c             	shl    edi,0xc
c001421a:	55                   	push   ebp
c001421b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001421f:	50                   	push   eax
c0014220:	e8 5f f6 ff ff       	call   c0013884 <VAS::getPageTableEntry(unsigned long)>
c0014225:	8b 10                	mov    edx,DWORD PTR [eax]
c0014227:	89 d3                	mov    ebx,edx
c0014229:	81 e2 fe 07 00 00    	and    edx,0x7fe
c001422f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0014235:	09 d7                	or     edi,edx
c0014237:	89 38                	mov    DWORD PTR [eax],edi
c0014239:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001423c:	8b 15 48 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f248
c0014242:	83 c2 01             	add    edx,0x1
c0014245:	89 15 48 f2 02 c0    	mov    DWORD PTR ds:0xc002f248,edx
c001424b:	e8 21 bf ff ff       	call   c0010171 <Phys::freePage(unsigned long)>
c0014250:	0f 20 d8             	mov    eax,cr3
c0014253:	0f 22 d8             	mov    cr3,eax
c0014256:	8b 0d 48 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f248
c001425c:	51                   	push   ecx
c001425d:	55                   	push   ebp
c001425e:	53                   	push   ebx
c001425f:	68 ac 4a 02 c0       	push   0xc0024aac
c0014264:	e8 13 2d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014269:	83 c4 18             	add    esp,0x18
c001426c:	a1 44 f2 02 c0       	mov    eax,ds:0xc002f244
c0014271:	50                   	push   eax
c0014272:	8d 50 01             	lea    edx,[eax+0x1]
c0014275:	68 8e 4f 02 c0       	push   0xc0024f8e
c001427a:	89 15 44 f2 02 c0    	mov    DWORD PTR ds:0xc002f244,edx
c0014280:	e8 f7 2c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014285:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c001428a:	c7 44 24 40 a0 4f 02 c0 	mov    DWORD PTR [esp+0x40],0xc0024fa0
c0014292:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014296:	83 c4 2c             	add    esp,0x2c
c0014299:	5b                   	pop    ebx
c001429a:	5e                   	pop    esi
c001429b:	5f                   	pop    edi
c001429c:	5d                   	pop    ebp
c001429d:	e9 da 2c ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>

c00142a2 <VAS::canLockPage(unsigned long)>:
c00142a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00142a6:	50                   	push   eax
c00142a7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00142ab:	52                   	push   edx
c00142ac:	e8 d3 f5 ff ff       	call   c0013884 <VAS::getPageTableEntry(unsigned long)>
c00142b1:	59                   	pop    ecx
c00142b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00142b4:	5a                   	pop    edx
c00142b5:	c1 e8 0b             	shr    eax,0xb
c00142b8:	83 e0 01             	and    eax,0x1
c00142bb:	c3                   	ret    

c00142bc <VAS::unlockPage(unsigned long)>:
c00142bc:	83 ec 0c             	sub    esp,0xc
c00142bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142c3:	50                   	push   eax
c00142c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00142c8:	52                   	push   edx
c00142c9:	e8 b6 f5 ff ff       	call   c0013884 <VAS::getPageTableEntry(unsigned long)>
c00142ce:	59                   	pop    ecx
c00142cf:	5a                   	pop    edx
c00142d0:	8b 10                	mov    edx,DWORD PTR [eax]
c00142d2:	f6 c6 08             	test   dh,0x8
c00142d5:	75 09                	jne    c00142e0 <VAS::unlockPage(unsigned long)+0x24>
c00142d7:	80 ce 08             	or     dh,0x8
c00142da:	89 10                	mov    DWORD PTR [eax],edx
c00142dc:	83 c4 0c             	add    esp,0xc
c00142df:	c3                   	ret    
c00142e0:	c7 44 24 10 e0 4a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024ae0
c00142e8:	83 c4 0c             	add    esp,0xc
c00142eb:	e9 f6 bc ff ff       	jmp    c000ffe6 <KePanic(char const*)>

c00142f0 <VAS::canLockPages(unsigned long, int)>:
c00142f0:	55                   	push   ebp
c00142f1:	57                   	push   edi
c00142f2:	56                   	push   esi
c00142f3:	53                   	push   ebx
c00142f4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00142f8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00142fc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014300:	85 ff                	test   edi,edi
c0014302:	7e 23                	jle    c0014327 <VAS::canLockPages(unsigned long, int)+0x37>
c0014304:	31 f6                	xor    esi,esi
c0014306:	eb 0d                	jmp    c0014315 <VAS::canLockPages(unsigned long, int)+0x25>
c0014308:	81 c3 00 10 00 00    	add    ebx,0x1000
c001430e:	83 c6 01             	add    esi,0x1
c0014311:	39 f7                	cmp    edi,esi
c0014313:	74 0d                	je     c0014322 <VAS::canLockPages(unsigned long, int)+0x32>
c0014315:	53                   	push   ebx
c0014316:	55                   	push   ebp
c0014317:	e8 86 ff ff ff       	call   c00142a2 <VAS::canLockPage(unsigned long)>
c001431c:	5a                   	pop    edx
c001431d:	84 c0                	test   al,al
c001431f:	59                   	pop    ecx
c0014320:	75 e6                	jne    c0014308 <VAS::canLockPages(unsigned long, int)+0x18>
c0014322:	5b                   	pop    ebx
c0014323:	5e                   	pop    esi
c0014324:	5f                   	pop    edi
c0014325:	5d                   	pop    ebp
c0014326:	c3                   	ret    
c0014327:	b0 01                	mov    al,0x1
c0014329:	eb f7                	jmp    c0014322 <VAS::canLockPages(unsigned long, int)+0x32>
c001432b:	90                   	nop

c001432c <VAS::unlockPages(unsigned long, int)>:
c001432c:	55                   	push   ebp
c001432d:	57                   	push   edi
c001432e:	56                   	push   esi
c001432f:	53                   	push   ebx
c0014330:	83 ec 0c             	sub    esp,0xc
c0014333:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014337:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001433b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001433f:	85 ff                	test   edi,edi
c0014341:	7e 1c                	jle    c001435f <VAS::unlockPages(unsigned long, int)+0x33>
c0014343:	31 f6                	xor    esi,esi
c0014345:	83 ec 08             	sub    esp,0x8
c0014348:	83 c6 01             	add    esi,0x1
c001434b:	53                   	push   ebx
c001434c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014352:	55                   	push   ebp
c0014353:	e8 64 ff ff ff       	call   c00142bc <VAS::unlockPage(unsigned long)>
c0014358:	83 c4 10             	add    esp,0x10
c001435b:	39 f7                	cmp    edi,esi
c001435d:	75 e6                	jne    c0014345 <VAS::unlockPages(unsigned long, int)+0x19>
c001435f:	83 c4 0c             	add    esp,0xc
c0014362:	5b                   	pop    ebx
c0014363:	5e                   	pop    esi
c0014364:	5f                   	pop    edi
c0014365:	5d                   	pop    ebp
c0014366:	c3                   	ret    
c0014367:	90                   	nop

c0014368 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0014368:	55                   	push   ebp
c0014369:	57                   	push   edi
c001436a:	56                   	push   esi
c001436b:	53                   	push   ebx
c001436c:	81 ec 0c 10 00 00    	sub    esp,0x100c
c0014372:	8b b4 24 24 10 00 00 	mov    esi,DWORD PTR [esp+0x1024]
c0014379:	89 f3                	mov    ebx,esi
c001437b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0014381:	53                   	push   ebx
c0014382:	8b 84 24 24 10 00 00 	mov    eax,DWORD PTR [esp+0x1024]
c0014389:	50                   	push   eax
c001438a:	e8 f5 f4 ff ff       	call   c0013884 <VAS::getPageTableEntry(unsigned long)>
c001438f:	5a                   	pop    edx
c0014390:	89 c5                	mov    ebp,eax
c0014392:	59                   	pop    ecx
c0014393:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c0014399:	0f 87 cb 00 00 00    	ja     c001446a <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c001439f:	83 ec 08             	sub    esp,0x8
c00143a2:	56                   	push   esi
c00143a3:	68 10 4b 02 c0       	push   0xc0024b10
c00143a8:	e8 cf 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00143ad:	5e                   	pop    esi
c00143ae:	a1 0c fa 02 c0       	mov    eax,ds:0xc002fa0c
c00143b3:	5f                   	pop    edi
c00143b4:	50                   	push   eax
c00143b5:	68 40 4b 02 c0       	push   0xc0024b40
c00143ba:	e8 bd 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00143bf:	58                   	pop    eax
c00143c0:	8b 0d 30 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa30
c00143c6:	5a                   	pop    edx
c00143c7:	51                   	push   ecx
c00143c8:	68 64 4b 02 c0       	push   0xc0024b64
c00143cd:	e8 aa 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00143d2:	83 c4 10             	add    esp,0x10
c00143d5:	85 db                	test   ebx,ebx
c00143d7:	74 5b                	je     c0014434 <VAS::tryLoadBackOffDisk(unsigned long)+0xcc>
c00143d9:	85 ed                	test   ebp,ebp
c00143db:	74 21                	je     c00143fe <VAS::tryLoadBackOffDisk(unsigned long)+0x96>
c00143dd:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c00143e0:	f7 c6 00 02 00 00    	test   esi,0x200
c00143e6:	0f 85 c5 00 00 00    	jne    c00144b1 <VAS::tryLoadBackOffDisk(unsigned long)+0x149>
c00143ec:	89 f0                	mov    eax,esi
c00143ee:	25 01 04 00 00       	and    eax,0x401
c00143f3:	3d 00 04 00 00       	cmp    eax,0x400
c00143f8:	0f 84 39 01 00 00    	je     c0014537 <VAS::tryLoadBackOffDisk(unsigned long)+0x1cf>
c00143fe:	83 ec 08             	sub    esp,0x8
c0014401:	a1 0c fa 02 c0       	mov    eax,ds:0xc002fa0c
c0014406:	50                   	push   eax
c0014407:	68 58 4d 02 c0       	push   0xc0024d58
c001440c:	e8 6b 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014411:	5a                   	pop    edx
c0014412:	8b 1d 30 fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa30
c0014418:	59                   	pop    ecx
c0014419:	53                   	push   ebx
c001441a:	68 7c 4d 02 c0       	push   0xc0024d7c
c001441f:	e8 58 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014424:	83 c4 10             	add    esp,0x10
c0014427:	31 c0                	xor    eax,eax
c0014429:	81 c4 0c 10 00 00    	add    esp,0x100c
c001442f:	5b                   	pop    ebx
c0014430:	5e                   	pop    esi
c0014431:	5f                   	pop    edi
c0014432:	5d                   	pop    ebp
c0014433:	c3                   	ret    
c0014434:	83 ec 08             	sub    esp,0x8
c0014437:	a1 0c fa 02 c0       	mov    eax,ds:0xc002fa0c
c001443c:	50                   	push   eax
c001443d:	68 88 4b 02 c0       	push   0xc0024b88
c0014442:	e8 35 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014447:	58                   	pop    eax
c0014448:	8b 0d 30 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa30
c001444e:	5a                   	pop    edx
c001444f:	51                   	push   ecx
c0014450:	68 ac 4b 02 c0       	push   0xc0024bac
c0014455:	e8 22 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001445a:	83 c4 10             	add    esp,0x10
c001445d:	31 c0                	xor    eax,eax
c001445f:	81 c4 0c 10 00 00    	add    esp,0x100c
c0014465:	5b                   	pop    ebx
c0014466:	5e                   	pop    esi
c0014467:	5f                   	pop    edi
c0014468:	5d                   	pop    ebp
c0014469:	c3                   	ret    
c001446a:	83 ec 0c             	sub    esp,0xc
c001446d:	68 b5 4f 02 c0       	push   0xc0024fb5
c0014472:	e8 6f bb ff ff       	call   c000ffe6 <KePanic(char const*)>
c0014477:	5f                   	pop    edi
c0014478:	58                   	pop    eax
c0014479:	56                   	push   esi
c001447a:	68 10 4b 02 c0       	push   0xc0024b10
c001447f:	e8 f8 2a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014484:	58                   	pop    eax
c0014485:	8b 0d 0c fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa0c
c001448b:	5a                   	pop    edx
c001448c:	51                   	push   ecx
c001448d:	68 40 4b 02 c0       	push   0xc0024b40
c0014492:	e8 e5 2a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014497:	5e                   	pop    esi
c0014498:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c001449d:	5f                   	pop    edi
c001449e:	50                   	push   eax
c001449f:	68 64 4b 02 c0       	push   0xc0024b64
c00144a4:	e8 d3 2a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00144a9:	83 c4 10             	add    esp,0x10
c00144ac:	e9 28 ff ff ff       	jmp    c00143d9 <VAS::tryLoadBackOffDisk(unsigned long)+0x71>
c00144b1:	83 ec 0c             	sub    esp,0xc
c00144b4:	68 d0 4b 02 c0       	push   0xc0024bd0
c00144b9:	e8 be 2a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00144be:	e8 17 bd ff ff       	call   c00101da <Phys::allocatePage()>
c00144c3:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00144c6:	83 ca 01             	or     edx,0x1
c00144c9:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c00144cc:	0f 20 da             	mov    edx,cr3
c00144cf:	0f 22 da             	mov    cr3,edx
c00144d2:	ba 00 10 00 00       	mov    edx,0x1000
c00144d7:	89 de                	mov    esi,ebx
c00144d9:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00144dd:	89 d1                	mov    ecx,edx
c00144df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00144e1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00144e4:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c00144ea:	09 c8                	or     eax,ecx
c00144ec:	83 c8 02             	or     eax,0x2
c00144ef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00144f2:	0f 20 d8             	mov    eax,cr3
c00144f5:	0f 22 d8             	mov    cr3,eax
c00144f8:	8d 74 24 10          	lea    esi,[esp+0x10]
c00144fc:	89 df                	mov    edi,ebx
c00144fe:	89 d1                	mov    ecx,edx
c0014500:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014502:	8b 35 0c fa 02 c0    	mov    esi,DWORD PTR ds:0xc002fa0c
c0014508:	59                   	pop    ecx
c0014509:	5b                   	pop    ebx
c001450a:	56                   	push   esi
c001450b:	68 f0 4b 02 c0       	push   0xc0024bf0
c0014510:	e8 67 2a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014515:	5f                   	pop    edi
c0014516:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c001451b:	5d                   	pop    ebp
c001451c:	50                   	push   eax
c001451d:	68 14 4c 02 c0       	push   0xc0024c14
c0014522:	e8 55 2a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014527:	83 c4 10             	add    esp,0x10
c001452a:	b0 01                	mov    al,0x1
c001452c:	81 c4 0c 10 00 00    	add    esp,0x100c
c0014532:	5b                   	pop    ebx
c0014533:	5e                   	pop    esi
c0014534:	5f                   	pop    edi
c0014535:	5d                   	pop    ebp
c0014536:	c3                   	ret    
c0014537:	83 ec 08             	sub    esp,0x8
c001453a:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c001453f:	c1 ee 0c             	shr    esi,0xc
c0014542:	50                   	push   eax
c0014543:	68 38 4c 02 c0       	push   0xc0024c38
c0014548:	e8 2f 2a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001454d:	e8 88 bc ff ff       	call   c00101da <Phys::allocatePage()>
c0014552:	8b 0d 30 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa30
c0014558:	89 c7                	mov    edi,eax
c001455a:	58                   	pop    eax
c001455b:	5a                   	pop    edx
c001455c:	51                   	push   ecx
c001455d:	68 5c 4c 02 c0       	push   0xc0024c5c
c0014562:	e8 15 2a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014567:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001456a:	83 c4 10             	add    esp,0x10
c001456d:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0014573:	09 fa                	or     edx,edi
c0014575:	81 ca 01 08 00 00    	or     edx,0x801
c001457b:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c001457e:	8b 3d 4c 6f 02 c0    	mov    edi,DWORD PTR ds:0xc0026f4c
c0014584:	85 ff                	test   edi,edi
c0014586:	7e 65                	jle    c00145ed <VAS::tryLoadBackOffDisk(unsigned long)+0x285>
c0014588:	89 dd                	mov    ebp,ebx
c001458a:	31 ff                	xor    edi,edi
c001458c:	83 ec 08             	sub    esp,0x8
c001458f:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0014594:	50                   	push   eax
c0014595:	68 10 4d 02 c0       	push   0xc0024d10
c001459a:	e8 dd 29 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001459f:	89 34 24             	mov    DWORD PTR [esp],esi
c00145a2:	e8 3c f1 ff ff       	call   c00136e3 <Virt::swapIDToSector(unsigned long)>
c00145a7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00145aa:	01 f8                	add    eax,edi
c00145ac:	6a 01                	push   0x1
c00145ae:	31 d2                	xor    edx,edx
c00145b0:	83 c7 01             	add    edi,0x1
c00145b3:	52                   	push   edx
c00145b4:	81 c5 00 02 00 00    	add    ebp,0x200
c00145ba:	50                   	push   eax
c00145bb:	0f be 05 58 6f 02 c0 	movsx  eax,BYTE PTR ds:0xc0026f58
c00145c2:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c00145c9:	50                   	push   eax
c00145ca:	e8 d9 64 ff ff       	call   c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)>
c00145cf:	83 c4 18             	add    esp,0x18
c00145d2:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00145d7:	50                   	push   eax
c00145d8:	68 34 4d 02 c0       	push   0xc0024d34
c00145dd:	e8 9a 29 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00145e2:	83 c4 10             	add    esp,0x10
c00145e5:	39 3d 4c 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f4c,edi
c00145eb:	7f 9f                	jg     c001458c <VAS::tryLoadBackOffDisk(unsigned long)+0x224>
c00145ed:	83 ec 08             	sub    esp,0x8
c00145f0:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00145f5:	50                   	push   eax
c00145f6:	68 80 4c 02 c0       	push   0xc0024c80
c00145fb:	e8 7c 29 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014600:	83 c4 0c             	add    esp,0xc
c0014603:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0014608:	83 e8 01             	sub    eax,0x1
c001460b:	50                   	push   eax
c001460c:	a3 48 f2 02 c0       	mov    ds:0xc002f248,eax
c0014611:	53                   	push   ebx
c0014612:	68 c7 4f 02 c0       	push   0xc0024fc7
c0014617:	e8 60 29 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001461c:	89 34 24             	mov    DWORD PTR [esp],esi
c001461f:	e8 9c f0 ff ff       	call   c00136c0 <Virt::freeSwapfilePage(unsigned long)>
c0014624:	58                   	pop    eax
c0014625:	8b 0d 30 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa30
c001462b:	5a                   	pop    edx
c001462c:	51                   	push   ecx
c001462d:	68 a4 4c 02 c0       	push   0xc0024ca4
c0014632:	e8 45 29 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014637:	0f 20 d8             	mov    eax,cr3
c001463a:	0f 22 d8             	mov    cr3,eax
c001463d:	c7 04 24 dc 4f 02 c0 	mov    DWORD PTR [esp],0xc0024fdc
c0014644:	e8 33 29 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014649:	5b                   	pop    ebx
c001464a:	8b 3d 0c fa 02 c0    	mov    edi,DWORD PTR ds:0xc002fa0c
c0014650:	5e                   	pop    esi
c0014651:	57                   	push   edi
c0014652:	68 c8 4c 02 c0       	push   0xc0024cc8
c0014657:	e8 20 29 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001465c:	5d                   	pop    ebp
c001465d:	58                   	pop    eax
c001465e:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0014663:	50                   	push   eax
c0014664:	68 ec 4c 02 c0       	push   0xc0024cec
c0014669:	e8 0e 29 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001466e:	83 c4 10             	add    esp,0x10
c0014671:	b0 01                	mov    al,0x1
c0014673:	e9 b1 fd ff ff       	jmp    c0014429 <VAS::tryLoadBackOffDisk(unsigned long)+0xc1>

c0014678 <VAS::lockPage(unsigned long)>:
c0014678:	56                   	push   esi
c0014679:	53                   	push   ebx
c001467a:	83 ec 04             	sub    esp,0x4
c001467d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014681:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014685:	50                   	push   eax
c0014686:	56                   	push   esi
c0014687:	e8 f8 f1 ff ff       	call   c0013884 <VAS::getPageTableEntry(unsigned long)>
c001468c:	5a                   	pop    edx
c001468d:	89 c3                	mov    ebx,eax
c001468f:	59                   	pop    ecx
c0014690:	8b 00                	mov    eax,DWORD PTR [eax]
c0014692:	a8 01                	test   al,0x1
c0014694:	74 10                	je     c00146a6 <VAS::lockPage(unsigned long)+0x2e>
c0014696:	f6 c4 08             	test   ah,0x8
c0014699:	74 28                	je     c00146c3 <VAS::lockPage(unsigned long)+0x4b>
c001469b:	80 e4 f7             	and    ah,0xf7
c001469e:	89 03                	mov    DWORD PTR [ebx],eax
c00146a0:	83 c4 04             	add    esp,0x4
c00146a3:	5b                   	pop    ebx
c00146a4:	5e                   	pop    esi
c00146a5:	c3                   	ret    
c00146a6:	83 ec 08             	sub    esp,0x8
c00146a9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00146ae:	50                   	push   eax
c00146af:	56                   	push   esi
c00146b0:	e8 b3 fc ff ff       	call   c0014368 <VAS::tryLoadBackOffDisk(unsigned long)>
c00146b5:	83 c4 10             	add    esp,0x10
c00146b8:	84 c0                	test   al,al
c00146ba:	74 19                	je     c00146d5 <VAS::lockPage(unsigned long)+0x5d>
c00146bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146be:	f6 c4 08             	test   ah,0x8
c00146c1:	75 d8                	jne    c001469b <VAS::lockPage(unsigned long)+0x23>
c00146c3:	c7 44 24 10 e0 4a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024ae0
c00146cb:	83 c4 04             	add    esp,0x4
c00146ce:	5b                   	pop    ebx
c00146cf:	5e                   	pop    esi
c00146d0:	e9 11 b9 ff ff       	jmp    c000ffe6 <KePanic(char const*)>
c00146d5:	83 ec 0c             	sub    esp,0xc
c00146d8:	68 a0 4d 02 c0       	push   0xc0024da0
c00146dd:	e8 04 b9 ff ff       	call   c000ffe6 <KePanic(char const*)>
c00146e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146e4:	83 c4 10             	add    esp,0x10
c00146e7:	eb ad                	jmp    c0014696 <VAS::lockPage(unsigned long)+0x1e>
c00146e9:	90                   	nop

c00146ea <VAS::lockPages(unsigned long, int)>:
c00146ea:	55                   	push   ebp
c00146eb:	57                   	push   edi
c00146ec:	56                   	push   esi
c00146ed:	53                   	push   ebx
c00146ee:	83 ec 0c             	sub    esp,0xc
c00146f1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00146f5:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00146f9:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00146fd:	85 ff                	test   edi,edi
c00146ff:	7e 1c                	jle    c001471d <VAS::lockPages(unsigned long, int)+0x33>
c0014701:	31 f6                	xor    esi,esi
c0014703:	83 ec 08             	sub    esp,0x8
c0014706:	83 c6 01             	add    esi,0x1
c0014709:	53                   	push   ebx
c001470a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014710:	55                   	push   ebp
c0014711:	e8 62 ff ff ff       	call   c0014678 <VAS::lockPage(unsigned long)>
c0014716:	83 c4 10             	add    esp,0x10
c0014719:	39 f7                	cmp    edi,esi
c001471b:	75 e6                	jne    c0014703 <VAS::lockPages(unsigned long, int)+0x19>
c001471d:	83 c4 0c             	add    esp,0xc
c0014720:	5b                   	pop    ebx
c0014721:	5e                   	pop    esi
c0014722:	5f                   	pop    edi
c0014723:	5d                   	pop    ebp
c0014724:	c3                   	ret    
c0014725:	90                   	nop

c0014726 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0014726:	55                   	push   ebp
c0014727:	57                   	push   edi
c0014728:	56                   	push   esi
c0014729:	53                   	push   ebx
c001472a:	83 ec 28             	sub    esp,0x28
c001472d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0014731:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014735:	50                   	push   eax
c0014736:	e8 60 ee ff ff       	call   c001359b <Virt::allocateKernelVirtualPages(int)>
c001473b:	83 c4 0c             	add    esp,0xc
c001473e:	89 c5                	mov    ebp,eax
c0014740:	6a 07                	push   0x7
c0014742:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014746:	52                   	push   edx
c0014747:	56                   	push   esi
c0014748:	e8 35 f6 ff ff       	call   c0013d82 <VAS::allocatePages(int, int)>
c001474d:	83 c4 10             	add    esp,0x10
c0014750:	89 c7                	mov    edi,eax
c0014752:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014756:	85 c9                	test   ecx,ecx
c0014758:	74 2f                	je     c0014789 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c001475a:	31 db                	xor    ebx,ebx
c001475c:	e8 79 ba ff ff       	call   c00101da <Phys::allocatePage()>
c0014761:	83 c3 01             	add    ebx,0x1
c0014764:	6a 03                	push   0x3
c0014766:	55                   	push   ebp
c0014767:	50                   	push   eax
c0014768:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001476c:	56                   	push   esi
c001476d:	e8 0c f5 ff ff       	call   c0013c7e <VAS::mapPage(unsigned long, unsigned long, int)>
c0014772:	6a 07                	push   0x7
c0014774:	57                   	push   edi
c0014775:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014779:	50                   	push   eax
c001477a:	56                   	push   esi
c001477b:	e8 fe f4 ff ff       	call   c0013c7e <VAS::mapPage(unsigned long, unsigned long, int)>
c0014780:	83 c4 20             	add    esp,0x20
c0014783:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c0014787:	75 d3                	jne    c001475c <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0014789:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001478d:	89 28                	mov    DWORD PTR [eax],ebp
c001478f:	83 c4 1c             	add    esp,0x1c
c0014792:	89 f8                	mov    eax,edi
c0014794:	5b                   	pop    ebx
c0014795:	5e                   	pop    esi
c0014796:	5f                   	pop    edi
c0014797:	5d                   	pop    ebp
c0014798:	c3                   	ret    
c0014799:	90                   	nop

c001479a <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c001479a:	53                   	push   ebx
c001479b:	83 ec 14             	sub    esp,0x14
c001479e:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00147a2:	68 d0 4d 02 c0       	push   0xc0024dd0
c00147a7:	e8 d0 27 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00147ac:	c7 04 24 30 4e 02 c0 	mov    DWORD PTR [esp],0xc0024e30
c00147b3:	e8 c4 27 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00147b8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00147bc:	83 c4 18             	add    esp,0x18
c00147bf:	5b                   	pop    ebx
c00147c0:	e9 de f0 ff ff       	jmp    c00138a3 <Virt::freeKernelVirtualPages(unsigned long)>
c00147c5:	90                   	nop

c00147c6 <VAS::scanForEviction()>:
c00147c6:	57                   	push   edi
c00147c7:	56                   	push   esi
c00147c8:	31 f6                	xor    esi,esi
c00147ca:	53                   	push   ebx
c00147cb:	83 ec 18             	sub    esp,0x18
c00147ce:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00147d2:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00147d7:	50                   	push   eax
c00147d8:	68 ac 4e 02 c0       	push   0xc0024eac
c00147dd:	e8 9a 27 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00147e2:	c7 04 24 e3 4f 02 c0 	mov    DWORD PTR [esp],0xc0024fe3
c00147e9:	e8 8e 27 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00147ee:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00147f1:	83 c4 10             	add    esp,0x10
c00147f4:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00147fa:	75 0e                	jne    c001480a <VAS::scanForEviction()+0x44>
c00147fc:	89 da                	mov    edx,ebx
c00147fe:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0014801:	c1 ea 16             	shr    edx,0x16
c0014804:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014808:	74 5b                	je     c0014865 <VAS::scanForEviction()+0x9f>
c001480a:	83 ec 08             	sub    esp,0x8
c001480d:	53                   	push   ebx
c001480e:	57                   	push   edi
c001480f:	e8 70 f0 ff ff       	call   c0013884 <VAS::getPageTableEntry(unsigned long)>
c0014814:	83 c4 10             	add    esp,0x10
c0014817:	8b 10                	mov    edx,DWORD PTR [eax]
c0014819:	89 d1                	mov    ecx,edx
c001481b:	c1 e9 0c             	shr    ecx,0xc
c001481e:	74 10                	je     c0014830 <VAS::scanForEviction()+0x6a>
c0014820:	89 d1                	mov    ecx,edx
c0014822:	81 e1 01 08 00 00    	and    ecx,0x801
c0014828:	81 f9 01 08 00 00    	cmp    ecx,0x801
c001482e:	74 40                	je     c0014870 <VAS::scanForEviction()+0xaa>
c0014830:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014836:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c001483c:	76 2d                	jbe    c001486b <VAS::scanForEviction()+0xa5>
c001483e:	83 c6 01             	add    esi,0x1
c0014841:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0014848:	83 fe 03             	cmp    esi,0x3
c001484b:	74 32                	je     c001487f <VAS::scanForEviction()+0xb9>
c001484d:	31 db                	xor    ebx,ebx
c001484f:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014855:	75 b3                	jne    c001480a <VAS::scanForEviction()+0x44>
c0014857:	89 da                	mov    edx,ebx
c0014859:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001485c:	c1 ea 16             	shr    edx,0x16
c001485f:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014863:	75 a5                	jne    c001480a <VAS::scanForEviction()+0x44>
c0014865:	81 c3 00 00 40 00    	add    ebx,0x400000
c001486b:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c001486e:	eb 84                	jmp    c00147f4 <VAS::scanForEviction()+0x2e>
c0014870:	f6 c2 20             	test   dl,0x20
c0014873:	74 13                	je     c0014888 <VAS::scanForEviction()+0xc2>
c0014875:	83 e2 df             	and    edx,0xffffffdf
c0014878:	89 10                	mov    DWORD PTR [eax],edx
c001487a:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001487d:	eb b1                	jmp    c0014830 <VAS::scanForEviction()+0x6a>
c001487f:	83 c4 10             	add    esp,0x10
c0014882:	31 c0                	xor    eax,eax
c0014884:	5b                   	pop    ebx
c0014885:	5e                   	pop    esi
c0014886:	5f                   	pop    edi
c0014887:	c3                   	ret    
c0014888:	83 ec 08             	sub    esp,0x8
c001488b:	89 d0                	mov    eax,edx
c001488d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014892:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014896:	53                   	push   ebx
c0014897:	68 ff 4f 02 c0       	push   0xc0024fff
c001489c:	e8 db 26 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00148a1:	58                   	pop    eax
c00148a2:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00148a5:	5a                   	pop    edx
c00148a6:	51                   	push   ecx
c00148a7:	57                   	push   edi
c00148a8:	e8 f1 f8 ff ff       	call   c001419e <VAS::evict(unsigned long)>
c00148ad:	5b                   	pop    ebx
c00148ae:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00148b1:	5e                   	pop    esi
c00148b2:	50                   	push   eax
c00148b3:	68 13 50 02 c0       	push   0xc0025013
c00148b8:	e8 bf 26 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00148bd:	58                   	pop    eax
c00148be:	5a                   	pop    edx
c00148bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00148c3:	50                   	push   eax
c00148c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00148c8:	68 26 50 02 c0       	push   0xc0025026
c00148cd:	e8 aa 26 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00148d2:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00148d5:	81 c1 00 10 00 00    	add    ecx,0x1000
c00148db:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c00148de:	8b 3d 30 fa 02 c0    	mov    edi,DWORD PTR ds:0xc002fa30
c00148e4:	5b                   	pop    ebx
c00148e5:	5e                   	pop    esi
c00148e6:	57                   	push   edi
c00148e7:	68 cc 4e 02 c0       	push   0xc0024ecc
c00148ec:	e8 8b 26 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00148f1:	83 c4 10             	add    esp,0x10
c00148f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148f8:	83 c4 10             	add    esp,0x10
c00148fb:	5b                   	pop    ebx
c00148fc:	5e                   	pop    esi
c00148fd:	5f                   	pop    edi
c00148fe:	c3                   	ret    

c00148ff <mapVASFirstTime>:
c00148ff:	55                   	push   ebp
c0014900:	57                   	push   edi
c0014901:	56                   	push   esi
c0014902:	53                   	push   ebx
c0014903:	83 ec 0c             	sub    esp,0xc
c0014906:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001490b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001490e:	83 fa 01             	cmp    edx,0x1
c0014911:	0f 84 cb 00 00 00    	je     c00149e2 <mapVASFirstTime+0xe3>
c0014917:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001491a:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001491d:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0014922:	c1 e5 15             	shl    ebp,0x15
c0014925:	bf 00 90 e7 01       	mov    edi,0x1e79000
c001492a:	8b b2 b2 05 00 00    	mov    esi,DWORD PTR [edx+0x5b2]
c0014930:	29 eb                	sub    ebx,ebp
c0014932:	29 ef                	sub    edi,ebp
c0014934:	e8 a1 b8 ff ff       	call   c00101da <Phys::allocatePage()>
c0014939:	83 ec 0c             	sub    esp,0xc
c001493c:	68 03 04 00 00       	push   0x403
c0014941:	6a 01                	push   0x1
c0014943:	53                   	push   ebx
c0014944:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001494a:	50                   	push   eax
c001494b:	56                   	push   esi
c001494c:	e8 17 f5 ff ff       	call   c0013e68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014951:	83 c4 20             	add    esp,0x20
c0014954:	39 fb                	cmp    ebx,edi
c0014956:	75 dc                	jne    c0014934 <mapVASFirstTime+0x35>
c0014958:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c001495d:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0014962:	29 eb                	sub    ebx,ebp
c0014964:	29 ef                	sub    edi,ebp
c0014966:	e8 6f b8 ff ff       	call   c00101da <Phys::allocatePage()>
c001496b:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c001496f:	83 fa 01             	cmp    edx,0x1
c0014972:	19 d2                	sbb    edx,edx
c0014974:	83 ec 0c             	sub    esp,0xc
c0014977:	83 e2 04             	and    edx,0x4
c001497a:	81 c2 03 04 00 00    	add    edx,0x403
c0014980:	52                   	push   edx
c0014981:	6a 01                	push   0x1
c0014983:	53                   	push   ebx
c0014984:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001498a:	50                   	push   eax
c001498b:	56                   	push   esi
c001498c:	e8 d7 f4 ff ff       	call   c0013e68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014991:	83 c4 20             	add    esp,0x20
c0014994:	39 df                	cmp    edi,ebx
c0014996:	75 ce                	jne    c0014966 <mapVASFirstTime+0x67>
c0014998:	83 ec 0c             	sub    esp,0xc
c001499b:	bb 7c 90 02 c0       	mov    ebx,0xc002907c
c00149a0:	6a 04                	push   0x4
c00149a2:	81 eb 00 80 02 c0    	sub    ebx,0xc0028000
c00149a8:	6a ff                	push   0xffffffff
c00149aa:	c1 eb 0c             	shr    ebx,0xc
c00149ad:	53                   	push   ebx
c00149ae:	68 00 80 02 c0       	push   0xc0028000
c00149b3:	56                   	push   esi
c00149b4:	e8 65 f0 ff ff       	call   c0013a1e <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00149b9:	83 c4 14             	add    esp,0x14
c00149bc:	a1 50 f2 02 c0       	mov    eax,ds:0xc002f250
c00149c1:	6a 04                	push   0x4
c00149c3:	6a ff                	push   0xffffffff
c00149c5:	53                   	push   ebx
c00149c6:	68 00 80 02 c0       	push   0xc0028000
c00149cb:	50                   	push   eax
c00149cc:	e8 4d f0 ff ff       	call   c0013a1e <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00149d1:	0f 20 d8             	mov    eax,cr3
c00149d4:	0f 22 d8             	mov    cr3,eax
c00149d7:	83 c4 20             	add    esp,0x20
c00149da:	83 c4 0c             	add    esp,0xc
c00149dd:	5b                   	pop    ebx
c00149de:	5e                   	pop    esi
c00149df:	5f                   	pop    edi
c00149e0:	5d                   	pop    ebp
c00149e1:	c3                   	ret    
c00149e2:	83 ec 0c             	sub    esp,0xc
c00149e5:	68 33 50 02 c0       	push   0xc0025033
c00149ea:	e8 8d 25 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00149ef:	83 c4 10             	add    esp,0x10
c00149f2:	83 c4 0c             	add    esp,0xc
c00149f5:	5b                   	pop    ebx
c00149f6:	5e                   	pop    esi
c00149f7:	5f                   	pop    edi
c00149f8:	5d                   	pop    ebp
c00149f9:	c3                   	ret    

c00149fa <SysAlarm(regs*)>:
c00149fa:	53                   	push   ebx
c00149fb:	83 ec 10             	sub    esp,0x10
c00149fe:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014a02:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014a05:	68 4c 50 02 c0       	push   0xc002504c
c0014a0a:	e8 6d 25 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014a0f:	83 c4 0c             	add    esp,0xc
c0014a12:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014a15:	31 d2                	xor    edx,edx
c0014a17:	52                   	push   edx
c0014a18:	50                   	push   eax
c0014a19:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0014a1f:	e8 b4 09 00 00       	call   c00153d8 <KeAlarm(ThreadControlBlock*, unsigned long long)>
c0014a24:	83 c4 18             	add    esp,0x18
c0014a27:	5b                   	pop    ebx
c0014a28:	c3                   	ret    

c0014a29 <SysEject(regs*)>:
c0014a29:	83 ec 0c             	sub    esp,0xc
c0014a2c:	83 ca ff             	or     edx,0xffffffff
c0014a2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014a33:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014a36:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0014a3b:	83 e9 41             	sub    ecx,0x41
c0014a3e:	83 f9 19             	cmp    ecx,0x19
c0014a41:	77 18                	ja     c0014a5b <SysEject(regs*)+0x32>
c0014a43:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c0014a4a:	85 c9                	test   ecx,ecx
c0014a4c:	74 0d                	je     c0014a5b <SysEject(regs*)+0x32>
c0014a4e:	83 ec 0c             	sub    esp,0xc
c0014a51:	51                   	push   ecx
c0014a52:	e8 e7 5f ff ff       	call   c000aa3e <LogicalDisk::eject()>
c0014a57:	83 c4 10             	add    esp,0x10
c0014a5a:	99                   	cdq    
c0014a5b:	83 c4 0c             	add    esp,0xc
c0014a5e:	c3                   	ret    

c0014a5f <SysExit(regs*)>:
c0014a5f:	83 ec 18             	sub    esp,0x18
c0014a62:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a66:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014a69:	e8 a6 2f 00 00       	call   c0017a14 <terminateTask(int)>
c0014a6e:	83 c8 ff             	or     eax,0xffffffff
c0014a71:	83 c4 1c             	add    esp,0x1c
c0014a74:	89 c2                	mov    edx,eax
c0014a76:	c3                   	ret    

c0014a77 <SysGetCwd(regs*)>:
c0014a77:	83 ec 10             	sub    esp,0x10
c0014a7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a7e:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014a81:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014a84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a89:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014a8c:	e8 8d 33 ff ff       	call   c0007e1e <Fs::getcwd(Process*, char*, int)>
c0014a91:	83 c4 1c             	add    esp,0x1c
c0014a94:	99                   	cdq    
c0014a95:	c3                   	ret    

c0014a96 <SysGetPID(regs*)>:
c0014a96:	83 ec 14             	sub    esp,0x14
c0014a99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a9e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014aa1:	ff 30                	push   DWORD PTR [eax]
c0014aa3:	68 61 50 02 c0       	push   0xc0025061
c0014aa8:	e8 cf 24 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014aad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ab2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ab5:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ab7:	83 c4 1c             	add    esp,0x1c
c0014aba:	99                   	cdq    
c0014abb:	c3                   	ret    

c0014abc <SysGetRAMData(regs*)>:
c0014abc:	8b 0d 3c f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f13c
c0014ac2:	a1 48 f2 02 c0       	mov    eax,ds:0xc002f248
c0014ac7:	03 05 38 f1 02 c0    	add    eax,DWORD PTR ds:0xc002f138
c0014acd:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c0014ad3:	99                   	cdq    
c0014ad4:	f7 f9                	idiv   ecx
c0014ad6:	c1 e0 18             	shl    eax,0x18
c0014ad9:	09 c8                	or     eax,ecx
c0014adb:	99                   	cdq    
c0014adc:	c3                   	ret    

c0014add <SysGetVGAPtr(regs*)>:
c0014add:	55                   	push   ebp
c0014ade:	57                   	push   edi
c0014adf:	56                   	push   esi
c0014ae0:	53                   	push   ebx
c0014ae1:	83 ec 1c             	sub    esp,0x1c
c0014ae4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014ae8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0014aeb:	83 f8 ff             	cmp    eax,0xffffffff
c0014aee:	74 23                	je     c0014b13 <SysGetVGAPtr(regs*)+0x36>
c0014af0:	83 ec 0c             	sub    esp,0xc
c0014af3:	50                   	push   eax
c0014af4:	e8 c7 29 00 00       	call   c00174c0 <Thr::processFromPID(int)>
c0014af9:	31 d2                	xor    edx,edx
c0014afb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014aff:	83 c4 10             	add    esp,0x10
c0014b02:	b8 01 00 00 00       	mov    eax,0x1
c0014b07:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014b0c:	75 11                	jne    c0014b1f <SysGetVGAPtr(regs*)+0x42>
c0014b0e:	e9 80 00 00 00       	jmp    c0014b93 <SysGetVGAPtr(regs*)+0xb6>
c0014b13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b18:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014b1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014b23:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0014b27:	8b a8 a6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5a6]
c0014b2d:	74 0c                	je     c0014b3b <SysGetVGAPtr(regs*)+0x5e>
c0014b2f:	83 ec 0c             	sub    esp,0xc
c0014b32:	55                   	push   ebp
c0014b33:	e8 eb da ff ff       	call   c0012623 <setActiveTerminal(VgaText*)>
c0014b38:	83 c4 10             	add    esp,0x10
c0014b3b:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0014b3e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0014b41:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0014b46:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014b48:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0014b4b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014b4e:	89 88 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],ecx
c0014b54:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0014b57:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014b5a:	89 88 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],ecx
c0014b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014b64:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0014b67:	0f b6 80 76 02 00 00 	movzx  eax,BYTE PTR [eax+0x276]
c0014b6e:	c1 e8 07             	shr    eax,0x7
c0014b71:	89 81 a8 0f 00 00    	mov    DWORD PTR [ecx+0xfa8],eax
c0014b77:	50                   	push   eax
c0014b78:	50                   	push   eax
c0014b79:	68 70 50 02 c0       	push   0xc0025070
c0014b7e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014b81:	05 ac 0f 00 00       	add    eax,0xfac
c0014b86:	50                   	push   eax
c0014b87:	e8 b4 ba fe ff       	call   c0000640 <strcpy>
c0014b8c:	83 c4 10             	add    esp,0x10
c0014b8f:	31 c0                	xor    eax,eax
c0014b91:	31 d2                	xor    edx,edx
c0014b93:	83 c4 1c             	add    esp,0x1c
c0014b96:	5b                   	pop    ebx
c0014b97:	5e                   	pop    esi
c0014b98:	5f                   	pop    edi
c0014b99:	5d                   	pop    ebp
c0014b9a:	c3                   	ret    
c0014b9b:	90                   	nop

c0014b9c <SysKill(regs*)>:
c0014b9c:	53                   	push   ebx
c0014b9d:	83 ec 08             	sub    esp,0x8
c0014ba0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014ba4:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0014ba8:	75 16                	jne    c0014bc0 <SysKill(regs*)+0x24>
c0014baa:	83 ec 0c             	sub    esp,0xc
c0014bad:	68 7a 50 02 c0       	push   0xc002507a
c0014bb2:	e8 2f b4 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0014bb7:	83 c4 10             	add    esp,0x10
c0014bba:	e9 89 00 00 00       	jmp    c0014c48 <SysKill(regs*)+0xac>
c0014bbf:	90                   	nop
c0014bc0:	83 ec 0c             	sub    esp,0xc
c0014bc3:	68 4c fa 02 c0       	push   0xc002fa4c
c0014bc8:	e8 1b d5 00 00       	call   c00220e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014bcd:	8d 76 00             	lea    esi,[esi+0x0]
c0014bd0:	83 c4 10             	add    esp,0x10
c0014bd3:	85 c0                	test   eax,eax
c0014bd5:	74 19                	je     c0014bf0 <SysKill(regs*)+0x54>
c0014bd7:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014bda:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014bdd:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014bdf:	74 33                	je     c0014c14 <SysKill(regs*)+0x78>
c0014be1:	52                   	push   edx
c0014be2:	52                   	push   edx
c0014be3:	50                   	push   eax
c0014be4:	68 4c fa 02 c0       	push   0xc002fa4c
c0014be9:	e8 06 da 00 00       	call   c00225f4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014bee:	eb e0                	jmp    c0014bd0 <SysKill(regs*)+0x34>
c0014bf0:	83 ec 0c             	sub    esp,0xc
c0014bf3:	68 40 fa 02 c0       	push   0xc002fa40
c0014bf8:	e8 eb d4 00 00       	call   c00220e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014bfd:	8d 76 00             	lea    esi,[esi+0x0]
c0014c00:	83 c4 10             	add    esp,0x10
c0014c03:	85 c0                	test   eax,eax
c0014c05:	74 41                	je     c0014c48 <SysKill(regs*)+0xac>
c0014c07:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014c0a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014c0d:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014c0f:	75 27                	jne    c0014c38 <SysKill(regs*)+0x9c>
c0014c11:	8d 76 00             	lea    esi,[esi+0x0]
c0014c14:	51                   	push   ecx
c0014c15:	51                   	push   ecx
c0014c16:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014c19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c1e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014c21:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0014c27:	e8 fb c5 ff ff       	call   c0011227 <KeRaiseSignal(SigHandlerBlock*, int)>
c0014c2c:	83 c4 10             	add    esp,0x10
c0014c2f:	31 c0                	xor    eax,eax
c0014c31:	31 d2                	xor    edx,edx
c0014c33:	eb 1b                	jmp    c0014c50 <SysKill(regs*)+0xb4>
c0014c35:	8d 76 00             	lea    esi,[esi+0x0]
c0014c38:	52                   	push   edx
c0014c39:	52                   	push   edx
c0014c3a:	50                   	push   eax
c0014c3b:	68 40 fa 02 c0       	push   0xc002fa40
c0014c40:	e8 af d9 00 00       	call   c00225f4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014c45:	eb b9                	jmp    c0014c00 <SysKill(regs*)+0x64>
c0014c47:	90                   	nop
c0014c48:	83 c8 ff             	or     eax,0xffffffff
c0014c4b:	89 c2                	mov    edx,eax
c0014c4d:	8d 76 00             	lea    esi,[esi+0x0]
c0014c50:	83 c4 08             	add    esp,0x8
c0014c53:	5b                   	pop    ebx
c0014c54:	c3                   	ret    

c0014c55 <SysLoadDLL(regs*)>:
c0014c55:	56                   	push   esi
c0014c56:	53                   	push   ebx
c0014c57:	31 d2                	xor    edx,edx
c0014c59:	51                   	push   ecx
c0014c5a:	b8 01 00 00 00       	mov    eax,0x1
c0014c5f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014c63:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0014c67:	0f 84 8c 00 00 00    	je     c0014cf9 <SysLoadDLL(regs*)+0xa4>
c0014c6d:	83 ec 0c             	sub    esp,0xc
c0014c70:	68 14 01 00 00       	push   0x114
c0014c75:	e8 15 af ff ff       	call   c000fb8f <malloc>
c0014c7a:	83 c4 0c             	add    esp,0xc
c0014c7d:	89 c3                	mov    ebx,eax
c0014c7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c84:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014c87:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014c8a:	53                   	push   ebx
c0014c8b:	e8 fa 34 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0014c90:	83 c4 10             	add    esp,0x10
c0014c93:	31 d2                	xor    edx,edx
c0014c95:	b8 02 00 00 00       	mov    eax,0x2
c0014c9a:	85 db                	test   ebx,ebx
c0014c9c:	74 5b                	je     c0014cf9 <SysLoadDLL(regs*)+0xa4>
c0014c9e:	83 ec 0c             	sub    esp,0xc
c0014ca1:	53                   	push   ebx
c0014ca2:	e8 c5 37 ff ff       	call   c000846c <File::exists()>
c0014ca7:	83 c4 10             	add    esp,0x10
c0014caa:	84 c0                	test   al,al
c0014cac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014cae:	75 11                	jne    c0014cc1 <SysLoadDLL(regs*)+0x6c>
c0014cb0:	83 ec 0c             	sub    esp,0xc
c0014cb3:	53                   	push   ebx
c0014cb4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014cb7:	83 c4 10             	add    esp,0x10
c0014cba:	b8 03 00 00 00       	mov    eax,0x3
c0014cbf:	eb 36                	jmp    c0014cf7 <SysLoadDLL(regs*)+0xa2>
c0014cc1:	83 ec 0c             	sub    esp,0xc
c0014cc4:	53                   	push   ebx
c0014cc5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014cc8:	58                   	pop    eax
c0014cc9:	5a                   	pop    edx
c0014cca:	6a 00                	push   0x0
c0014ccc:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014ccf:	e8 9a 19 00 00       	call   c001666e <Thr::loadDLL(char const*, bool)>
c0014cd4:	83 c4 10             	add    esp,0x10
c0014cd7:	89 c1                	mov    ecx,eax
c0014cd9:	31 d2                	xor    edx,edx
c0014cdb:	b8 04 00 00 00       	mov    eax,0x4
c0014ce0:	85 c9                	test   ecx,ecx
c0014ce2:	74 15                	je     c0014cf9 <SysLoadDLL(regs*)+0xa4>
c0014ce4:	53                   	push   ebx
c0014ce5:	53                   	push   ebx
c0014ce6:	ff 35 c8 d0 02 c0    	push   DWORD PTR ds:0xc002d0c8
c0014cec:	51                   	push   ecx
c0014ced:	e8 ce 1b 00 00       	call   c00168c0 <Thr::executeDLL(unsigned long, void*)>
c0014cf2:	83 c4 10             	add    esp,0x10
c0014cf5:	31 c0                	xor    eax,eax
c0014cf7:	31 d2                	xor    edx,edx
c0014cf9:	59                   	pop    ecx
c0014cfa:	5b                   	pop    ebx
c0014cfb:	5e                   	pop    esi
c0014cfc:	c3                   	ret    

c0014cfd <SysPause(regs*)>:
c0014cfd:	83 ec 18             	sub    esp,0x18
c0014d00:	6a 08                	push   0x8
c0014d02:	e8 cd 25 00 00       	call   c00172d4 <blockTask(TaskState)>
c0014d07:	31 c0                	xor    eax,eax
c0014d09:	31 d2                	xor    edx,edx
c0014d0b:	83 c4 1c             	add    esp,0x1c
c0014d0e:	c3                   	ret    

c0014d0f <SysPthreadCreate(regs*)>:
c0014d0f:	83 ec 18             	sub    esp,0x18
c0014d12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d17:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014d1a:	e8 8d 23 00 00       	call   c00170ac <Process::createUserThread()>
c0014d1f:	31 c0                	xor    eax,eax
c0014d21:	31 d2                	xor    edx,edx
c0014d23:	83 c4 1c             	add    esp,0x1c
c0014d26:	c3                   	ret    

c0014d27 <SysPthreadGetTID(regs*)>:
c0014d27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d2c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014d2f:	99                   	cdq    
c0014d30:	c3                   	ret    

c0014d31 <SysInternalPthreadGetContext(regs*)>:
c0014d31:	31 c0                	xor    eax,eax
c0014d33:	31 d2                	xor    edx,edx
c0014d35:	c3                   	ret    

c0014d36 <SysInternalPthreadGetStartLocation(regs*)>:
c0014d36:	31 c0                	xor    eax,eax
c0014d38:	31 d2                	xor    edx,edx
c0014d3a:	c3                   	ret    

c0014d3b <SysPthreadJoin(regs*)>:
c0014d3b:	31 c0                	xor    eax,eax
c0014d3d:	31 d2                	xor    edx,edx
c0014d3f:	c3                   	ret    

c0014d40 <SysPthreadExit(regs*)>:
c0014d40:	83 ec 18             	sub    esp,0x18
c0014d43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d47:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014d4a:	e8 c5 2c 00 00       	call   c0017a14 <terminateTask(int)>
c0014d4f:	83 c8 ff             	or     eax,0xffffffff
c0014d52:	83 c4 1c             	add    esp,0x1c
c0014d55:	89 c2                	mov    edx,eax
c0014d57:	c3                   	ret    

c0014d58 <SysRead(regs*)>:
c0014d58:	57                   	push   edi
c0014d59:	56                   	push   esi
c0014d5a:	53                   	push   ebx
c0014d5b:	83 ec 10             	sub    esp,0x10
c0014d5e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014d62:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014d65:	83 f8 02             	cmp    eax,0x2
c0014d68:	77 10                	ja     c0014d7a <SysRead(regs*)+0x22>
c0014d6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d6f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014d72:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0014d78:	eb 0e                	jmp    c0014d88 <SysRead(regs*)+0x30>
c0014d7a:	83 ec 0c             	sub    esp,0xc
c0014d7d:	50                   	push   eax
c0014d7e:	e8 ba e6 ff ff       	call   c001343d <KeGetFileFromDescriptor(int)>
c0014d83:	83 c4 10             	add    esp,0x10
c0014d86:	89 c1                	mov    ecx,eax
c0014d88:	83 c8 ff             	or     eax,0xffffffff
c0014d8b:	85 c9                	test   ecx,ecx
c0014d8d:	89 c2                	mov    edx,eax
c0014d8f:	74 28                	je     c0014db9 <SysRead(regs*)+0x61>
c0014d91:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d99:	31 ff                	xor    edi,edi
c0014d9b:	83 ec 0c             	sub    esp,0xc
c0014d9e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014da0:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014da4:	52                   	push   edx
c0014da5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014da8:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014dab:	57                   	push   edi
c0014dac:	56                   	push   esi
c0014dad:	51                   	push   ecx
c0014dae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014db1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014db5:	83 c4 20             	add    esp,0x20
c0014db8:	99                   	cdq    
c0014db9:	83 c4 10             	add    esp,0x10
c0014dbc:	5b                   	pop    ebx
c0014dbd:	5e                   	pop    esi
c0014dbe:	5f                   	pop    edi
c0014dbf:	c3                   	ret    

c0014dc0 <SysRegisterSignal(regs*)>:
c0014dc0:	83 ec 18             	sub    esp,0x18
c0014dc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014dc7:	6a 00                	push   0x0
c0014dc9:	6a 00                	push   0x0
c0014dcb:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014dce:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014dd1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014dd6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014dd9:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0014ddf:	e8 0d c4 ff ff       	call   c00111f1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014de4:	83 c4 2c             	add    esp,0x2c
c0014de7:	99                   	cdq    
c0014de8:	c3                   	ret    

c0014de9 <SysRegistryGetTypeFromPath(regs*)>:
c0014de9:	53                   	push   ebx
c0014dea:	81 ec 40 01 00 00    	sub    esp,0x140
c0014df0:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014df7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014dfa:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014dfd:	e8 3a 92 ff ff       	call   c000e03c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014e02:	83 c4 10             	add    esp,0x10
c0014e05:	89 c1                	mov    ecx,eax
c0014e07:	85 c0                	test   eax,eax
c0014e09:	74 15                	je     c0014e20 <SysRegistryGetTypeFromPath(regs*)+0x37>
c0014e0b:	50                   	push   eax
c0014e0c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014e10:	50                   	push   eax
c0014e11:	51                   	push   ecx
c0014e12:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014e15:	e8 06 8e ff ff       	call   c000dc20 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014e1a:	83 c4 10             	add    esp,0x10
c0014e1d:	99                   	cdq    
c0014e1e:	eb 05                	jmp    c0014e25 <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0014e20:	83 c8 ff             	or     eax,0xffffffff
c0014e23:	89 c2                	mov    edx,eax
c0014e25:	81 c4 38 01 00 00    	add    esp,0x138
c0014e2b:	5b                   	pop    ebx
c0014e2c:	c3                   	ret    

c0014e2d <SysRegistryReadExtent(regs*)>:
c0014e2d:	83 ec 1c             	sub    esp,0x1c
c0014e30:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014e34:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014e37:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014e3a:	85 c0                	test   eax,eax
c0014e3c:	79 1f                	jns    c0014e5d <SysRegistryReadExtent(regs*)+0x30>
c0014e3e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014e43:	52                   	push   edx
c0014e44:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014e48:	52                   	push   edx
c0014e49:	50                   	push   eax
c0014e4a:	51                   	push   ecx
c0014e4b:	e8 c2 8c ff ff       	call   c000db12 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014e50:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e54:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014e58:	83 c4 10             	add    esp,0x10
c0014e5b:	eb 14                	jmp    c0014e71 <SysRegistryReadExtent(regs*)+0x44>
c0014e5d:	83 ec 04             	sub    esp,0x4
c0014e60:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014e63:	50                   	push   eax
c0014e64:	51                   	push   ecx
c0014e65:	e8 42 87 ff ff       	call   c000d5ac <CmGetString(Reghive_Tag*, int, char*)>
c0014e6a:	83 c4 10             	add    esp,0x10
c0014e6d:	31 c0                	xor    eax,eax
c0014e6f:	31 d2                	xor    edx,edx
c0014e71:	83 c4 1c             	add    esp,0x1c
c0014e74:	c3                   	ret    

c0014e75 <SysRegistryPathToExtentLookup(regs*)>:
c0014e75:	83 ec 14             	sub    esp,0x14
c0014e78:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e7c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014e7f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014e82:	e8 b5 91 ff ff       	call   c000e03c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014e87:	83 c4 1c             	add    esp,0x1c
c0014e8a:	99                   	cdq    
c0014e8b:	c3                   	ret    

c0014e8c <SysRegistryEnterDirectory(regs*)>:
c0014e8c:	83 ec 14             	sub    esp,0x14
c0014e8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e93:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014e96:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014e99:	e8 85 87 ff ff       	call   c000d623 <CmEnterDirectory(Reghive_Tag*, int)>
c0014e9e:	83 c4 1c             	add    esp,0x1c
c0014ea1:	99                   	cdq    
c0014ea2:	c3                   	ret    

c0014ea3 <SysRegistryGetNext(regs*)>:
c0014ea3:	83 ec 14             	sub    esp,0x14
c0014ea6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014eaa:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014ead:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014eb0:	e8 ad 87 ff ff       	call   c000d662 <CmGetNext(Reghive_Tag*, int)>
c0014eb5:	83 c4 1c             	add    esp,0x1c
c0014eb8:	99                   	cdq    
c0014eb9:	c3                   	ret    

c0014eba <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0014eba:	57                   	push   edi
c0014ebb:	56                   	push   esi
c0014ebc:	53                   	push   ebx
c0014ebd:	81 ec 34 01 00 00    	sub    esp,0x134
c0014ec3:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014eca:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014ece:	57                   	push   edi
c0014ecf:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014ed2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014ed5:	e8 46 8d ff ff       	call   c000dc20 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014eda:	89 c3                	mov    ebx,eax
c0014edc:	58                   	pop    eax
c0014edd:	5a                   	pop    edx
c0014ede:	57                   	push   edi
c0014edf:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014ee2:	e8 59 b7 fe ff       	call   c0000640 <strcpy>
c0014ee7:	89 d8                	mov    eax,ebx
c0014ee9:	81 c4 40 01 00 00    	add    esp,0x140
c0014eef:	99                   	cdq    
c0014ef0:	5b                   	pop    ebx
c0014ef1:	5e                   	pop    esi
c0014ef2:	5f                   	pop    edi
c0014ef3:	c3                   	ret    

c0014ef4 <SysRegistryOpen(regs*)>:
c0014ef4:	83 ec 18             	sub    esp,0x18
c0014ef7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014efb:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014efe:	e8 39 85 ff ff       	call   c000d43c <CmOpen(char const*)>
c0014f03:	83 c4 1c             	add    esp,0x1c
c0014f06:	99                   	cdq    
c0014f07:	c3                   	ret    

c0014f08 <SysRegistryClose(regs*)>:
c0014f08:	83 ec 18             	sub    esp,0x18
c0014f0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014f0f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014f12:	e8 43 86 ff ff       	call   c000d55a <CmClose(Reghive_Tag*)>
c0014f17:	31 c0                	xor    eax,eax
c0014f19:	31 d2                	xor    edx,edx
c0014f1b:	83 c4 1c             	add    esp,0x1c
c0014f1e:	c3                   	ret    

c0014f1f <SysRegistryEasyReadString(regs*)>:
c0014f1f:	57                   	push   edi
c0014f20:	56                   	push   esi
c0014f21:	53                   	push   ebx
c0014f22:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014f26:	83 ec 0c             	sub    esp,0xc
c0014f29:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014f2c:	e8 0b 85 ff ff       	call   c000d43c <CmOpen(char const*)>
c0014f31:	5a                   	pop    edx
c0014f32:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014f35:	59                   	pop    ecx
c0014f36:	89 c3                	mov    ebx,eax
c0014f38:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014f3b:	50                   	push   eax
c0014f3c:	e8 fb 90 ff ff       	call   c000e03c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014f41:	83 c4 10             	add    esp,0x10
c0014f44:	89 c1                	mov    ecx,eax
c0014f46:	b8 01 00 00 00       	mov    eax,0x1
c0014f4b:	85 c9                	test   ecx,ecx
c0014f4d:	7e 16                	jle    c0014f65 <SysRegistryEasyReadString(regs*)+0x46>
c0014f4f:	50                   	push   eax
c0014f50:	57                   	push   edi
c0014f51:	51                   	push   ecx
c0014f52:	53                   	push   ebx
c0014f53:	e8 54 86 ff ff       	call   c000d5ac <CmGetString(Reghive_Tag*, int, char*)>
c0014f58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f5b:	e8 fa 85 ff ff       	call   c000d55a <CmClose(Reghive_Tag*)>
c0014f60:	83 c4 10             	add    esp,0x10
c0014f63:	31 c0                	xor    eax,eax
c0014f65:	5b                   	pop    ebx
c0014f66:	31 d2                	xor    edx,edx
c0014f68:	5e                   	pop    esi
c0014f69:	5f                   	pop    edi
c0014f6a:	c3                   	ret    

c0014f6b <SysRegistryEasyReadInteger(regs*)>:
c0014f6b:	56                   	push   esi
c0014f6c:	53                   	push   ebx
c0014f6d:	83 ec 10             	sub    esp,0x10
c0014f70:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014f74:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014f77:	e8 c0 84 ff ff       	call   c000d43c <CmOpen(char const*)>
c0014f7c:	5a                   	pop    edx
c0014f7d:	89 c3                	mov    ebx,eax
c0014f7f:	59                   	pop    ecx
c0014f80:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014f83:	50                   	push   eax
c0014f84:	e8 b3 90 ff ff       	call   c000e03c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014f89:	83 c4 10             	add    esp,0x10
c0014f8c:	89 c1                	mov    ecx,eax
c0014f8e:	b8 01 00 00 00       	mov    eax,0x1
c0014f93:	85 c9                	test   ecx,ecx
c0014f95:	7e 18                	jle    c0014faf <SysRegistryEasyReadInteger(regs*)+0x44>
c0014f97:	50                   	push   eax
c0014f98:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014f9b:	51                   	push   ecx
c0014f9c:	53                   	push   ebx
c0014f9d:	e8 70 8b ff ff       	call   c000db12 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014fa2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014fa5:	e8 b0 85 ff ff       	call   c000d55a <CmClose(Reghive_Tag*)>
c0014faa:	83 c4 10             	add    esp,0x10
c0014fad:	31 c0                	xor    eax,eax
c0014faf:	59                   	pop    ecx
c0014fb0:	31 d2                	xor    edx,edx
c0014fb2:	5b                   	pop    ebx
c0014fb3:	5e                   	pop    esi
c0014fb4:	c3                   	ret    

c0014fb5 <SysSbrk(regs*)>:
c0014fb5:	56                   	push   esi
c0014fb6:	53                   	push   ebx
c0014fb7:	50                   	push   eax
c0014fb8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014fbd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014fc1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014fc4:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014fc7:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c0014fcd:	85 db                	test   ebx,ebx
c0014fcf:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014fd2:	74 02                	je     c0014fd6 <SysSbrk(regs*)+0x21>
c0014fd4:	79 06                	jns    c0014fdc <SysSbrk(regs*)+0x27>
c0014fd6:	89 f0                	mov    eax,esi
c0014fd8:	31 d2                	xor    edx,edx
c0014fda:	eb 2a                	jmp    c0015006 <SysSbrk(regs*)+0x51>
c0014fdc:	83 c8 ff             	or     eax,0xffffffff
c0014fdf:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014fe5:	89 c2                	mov    edx,eax
c0014fe7:	77 1d                	ja     c0015006 <SysSbrk(regs*)+0x51>
c0014fe9:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014fef:	50                   	push   eax
c0014ff0:	c1 ea 0c             	shr    edx,0xc
c0014ff3:	68 07 0c 00 00       	push   0xc07
c0014ff8:	52                   	push   edx
c0014ff9:	51                   	push   ecx
c0014ffa:	e8 83 ed ff ff       	call   c0013d82 <VAS::allocatePages(int, int)>
c0014fff:	89 f0                	mov    eax,esi
c0015001:	31 d2                	xor    edx,edx
c0015003:	83 c4 10             	add    esp,0x10
c0015006:	59                   	pop    ecx
c0015007:	5b                   	pop    ebx
c0015008:	5e                   	pop    esi
c0015009:	c3                   	ret    

c001500a <SysSetCwd(regs*)>:
c001500a:	83 ec 14             	sub    esp,0x14
c001500d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015011:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015014:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015019:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001501c:	e8 ea 34 ff ff       	call   c000850b <Fs::setcwd(Process*, char*)>
c0015021:	83 c4 1c             	add    esp,0x1c
c0015024:	99                   	cdq    
c0015025:	c3                   	ret    

c0015026 <SysSetTime(regs*)>:
c0015026:	55                   	push   ebp
c0015027:	31 d2                	xor    edx,edx
c0015029:	57                   	push   edi
c001502a:	56                   	push   esi
c001502b:	be 18 00 00 00       	mov    esi,0x18
c0015030:	53                   	push   ebx
c0015031:	bb 3c 00 00 00       	mov    ebx,0x3c
c0015036:	83 ec 20             	sub    esp,0x20
c0015039:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001503d:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015040:	f7 f3                	div    ebx
c0015042:	89 d7                	mov    edi,edx
c0015044:	31 d2                	xor    edx,edx
c0015046:	f7 f3                	div    ebx
c0015048:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001504b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001504f:	bb 10 0e 00 00       	mov    ebx,0xe10
c0015054:	31 d2                	xor    edx,edx
c0015056:	f7 f3                	div    ebx
c0015058:	31 d2                	xor    edx,edx
c001505a:	f7 f6                	div    esi
c001505c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001505f:	89 d5                	mov    ebp,edx
c0015061:	89 c3                	mov    ebx,eax
c0015063:	be 0c 00 00 00       	mov    esi,0xc
c0015068:	83 e3 1f             	and    ebx,0x1f
c001506b:	c1 e8 05             	shr    eax,0x5
c001506e:	43                   	inc    ebx
c001506f:	31 d2                	xor    edx,edx
c0015071:	f7 f6                	div    esi
c0015073:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0015077:	57                   	push   edi
c0015078:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001507c:	55                   	push   ebp
c001507d:	0f b7 71 24          	movzx  esi,WORD PTR [ecx+0x24]
c0015081:	56                   	push   esi
c0015082:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015086:	53                   	push   ebx
c0015087:	68 9b 50 02 c0       	push   0xc002509b
c001508c:	e8 eb 1e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015091:	83 c4 1c             	add    esp,0x1c
c0015094:	57                   	push   edi
c0015095:	c1 e7 10             	shl    edi,0x10
c0015098:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001509c:	55                   	push   ebp
c001509d:	56                   	push   esi
c001509e:	c1 e6 10             	shl    esi,0x10
c00150a1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00150a5:	53                   	push   ebx
c00150a6:	68 bd 50 02 c0       	push   0xc00250bd
c00150ab:	e8 cc 1e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00150b0:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c00150b5:	31 d2                	xor    edx,edx
c00150b7:	8b 88 58 01 00 00    	mov    ecx,DWORD PTR [eax+0x158]
c00150bd:	31 c0                	xor    eax,eax
c00150bf:	88 d8                	mov    al,bl
c00150c1:	8a 64 24 2c          	mov    ah,BYTE PTR [esp+0x2c]
c00150c5:	0f b7 d8             	movzx  ebx,ax
c00150c8:	09 f3                	or     ebx,esi
c00150ca:	89 d8                	mov    eax,ebx
c00150cc:	89 eb                	mov    ebx,ebp
c00150ce:	88 5c 24 2c          	mov    BYTE PTR [esp+0x2c],bl
c00150d2:	88 da                	mov    dl,bl
c00150d4:	8a 74 24 28          	mov    dh,BYTE PTR [esp+0x28]
c00150d8:	83 c4 1c             	add    esp,0x1c
c00150db:	89 d6                	mov    esi,edx
c00150dd:	81 e6 ff ff 00 ff    	and    esi,0xff00ffff
c00150e3:	09 fe                	or     esi,edi
c00150e5:	56                   	push   esi
c00150e6:	50                   	push   eax
c00150e7:	51                   	push   ecx
c00150e8:	e8 8f 44 ff ff       	call   c000957c <Clock::setTimeInDatetimeLocal(datetime_t)>
c00150ed:	83 c4 2c             	add    esp,0x2c
c00150f0:	83 f0 01             	xor    eax,0x1
c00150f3:	5b                   	pop    ebx
c00150f4:	0f b6 c0             	movzx  eax,al
c00150f7:	5e                   	pop    esi
c00150f8:	31 d2                	xor    edx,edx
c00150fa:	5f                   	pop    edi
c00150fb:	5d                   	pop    ebp
c00150fc:	c3                   	ret    

c00150fd <SysSymlink(regs*)>:
c00150fd:	56                   	push   esi
c00150fe:	83 c8 ff             	or     eax,0xffffffff
c0015101:	53                   	push   ebx
c0015102:	89 c2                	mov    edx,eax
c0015104:	81 ec 34 02 00 00    	sub    esp,0x234
c001510a:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0015111:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0015115:	74 50                	je     c0015167 <SysSymlink(regs*)+0x6a>
c0015117:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001511a:	85 c9                	test   ecx,ecx
c001511c:	74 49                	je     c0015167 <SysSymlink(regs*)+0x6a>
c001511e:	6a 01                	push   0x1
c0015120:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015125:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015128:	05 0c 01 00 00       	add    eax,0x10c
c001512d:	50                   	push   eax
c001512e:	51                   	push   ecx
c001512f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0015133:	56                   	push   esi
c0015134:	e8 39 2d ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0015139:	6a 01                	push   0x1
c001513b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015140:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015143:	05 0c 01 00 00       	add    eax,0x10c
c0015148:	50                   	push   eax
c0015149:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001514c:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0015153:	53                   	push   ebx
c0015154:	e8 19 2d ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0015159:	83 c4 18             	add    esp,0x18
c001515c:	56                   	push   esi
c001515d:	53                   	push   ebx
c001515e:	e8 3d 29 ff ff       	call   c0007aa0 <KeCreateSymlink(char const*, char const*)>
c0015163:	83 c4 10             	add    esp,0x10
c0015166:	99                   	cdq    
c0015167:	81 c4 34 02 00 00    	add    esp,0x234
c001516d:	5b                   	pop    ebx
c001516e:	5e                   	pop    esi
c001516f:	c3                   	ret    

c0015170 <SysTimezone(regs*)>:
c0015170:	83 ec 0c             	sub    esp,0xc
c0015173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015177:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c001517b:	75 17                	jne    c0015194 <SysTimezone(regs*)+0x24>
c001517d:	83 ec 0c             	sub    esp,0xc
c0015180:	68 df 50 02 c0       	push   0xc00250df
c0015185:	e8 f2 1d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001518a:	83 c8 ff             	or     eax,0xffffffff
c001518d:	83 c4 10             	add    esp,0x10
c0015190:	89 c2                	mov    edx,eax
c0015192:	eb 16                	jmp    c00151aa <SysTimezone(regs*)+0x3a>
c0015194:	83 ec 0c             	sub    esp,0xc
c0015197:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001519a:	e8 6a 3e ff ff       	call   c0009009 <KeSetTimezone(int)>
c001519f:	31 d2                	xor    edx,edx
c00151a1:	83 f0 01             	xor    eax,0x1
c00151a4:	83 c4 10             	add    esp,0x10
c00151a7:	0f b6 c0             	movzx  eax,al
c00151aa:	83 c4 0c             	add    esp,0xc
c00151ad:	c3                   	ret    

c00151ae <SysTruncate(regs*)>:
c00151ae:	55                   	push   ebp
c00151af:	57                   	push   edi
c00151b0:	31 ff                	xor    edi,edi
c00151b2:	56                   	push   esi
c00151b3:	53                   	push   ebx
c00151b4:	83 ec 0c             	sub    esp,0xc
c00151b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151bb:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00151be:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00151c1:	89 ce                	mov    esi,ecx
c00151c3:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00151c7:	0f 84 9a 00 00 00    	je     c0015267 <SysTruncate(regs*)+0xb9>
c00151cd:	83 ec 0c             	sub    esp,0xc
c00151d0:	68 14 01 00 00       	push   0x114
c00151d5:	e8 b5 a9 ff ff       	call   c000fb8f <malloc>
c00151da:	83 c4 0c             	add    esp,0xc
c00151dd:	89 c3                	mov    ebx,eax
c00151df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151e4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00151e7:	55                   	push   ebp
c00151e8:	53                   	push   ebx
c00151e9:	e8 9c 2f ff ff       	call   c000818a <File::File(char const*, Process*)>
c00151ee:	83 c4 10             	add    esp,0x10
c00151f1:	31 d2                	xor    edx,edx
c00151f3:	b8 03 00 00 00       	mov    eax,0x3
c00151f8:	85 db                	test   ebx,ebx
c00151fa:	0f 84 a2 00 00 00    	je     c00152a2 <SysTruncate(regs*)+0xf4>
c0015200:	51                   	push   ecx
c0015201:	51                   	push   ecx
c0015202:	6a 02                	push   0x2
c0015204:	53                   	push   ebx
c0015205:	e8 9e 2f ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c001520a:	83 c4 10             	add    esp,0x10
c001520d:	85 c0                	test   eax,eax
c001520f:	74 13                	je     c0015224 <SysTruncate(regs*)+0x76>
c0015211:	83 ec 0c             	sub    esp,0xc
c0015214:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015216:	53                   	push   ebx
c0015217:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001521a:	83 c4 10             	add    esp,0x10
c001521d:	b8 04 00 00 00       	mov    eax,0x4
c0015222:	eb 7c                	jmp    c00152a0 <SysTruncate(regs*)+0xf2>
c0015224:	52                   	push   edx
c0015225:	57                   	push   edi
c0015226:	56                   	push   esi
c0015227:	53                   	push   ebx
c0015228:	e8 8f 30 ff ff       	call   c00082bc <File::truncate(unsigned long long)>
c001522d:	83 c4 10             	add    esp,0x10
c0015230:	85 c0                	test   eax,eax
c0015232:	74 1b                	je     c001524f <SysTruncate(regs*)+0xa1>
c0015234:	83 ec 0c             	sub    esp,0xc
c0015237:	53                   	push   ebx
c0015238:	e8 c9 2f ff ff       	call   c0008206 <File::close()>
c001523d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001523f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015242:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015245:	83 c4 10             	add    esp,0x10
c0015248:	b8 05 00 00 00       	mov    eax,0x5
c001524d:	eb 51                	jmp    c00152a0 <SysTruncate(regs*)+0xf2>
c001524f:	83 ec 0c             	sub    esp,0xc
c0015252:	53                   	push   ebx
c0015253:	e8 ae 2f ff ff       	call   c0008206 <File::close()>
c0015258:	8b 03                	mov    eax,DWORD PTR [ebx]
c001525a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001525d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015260:	83 c4 10             	add    esp,0x10
c0015263:	31 c0                	xor    eax,eax
c0015265:	eb 39                	jmp    c00152a0 <SysTruncate(regs*)+0xf2>
c0015267:	31 d2                	xor    edx,edx
c0015269:	b8 01 00 00 00       	mov    eax,0x1
c001526e:	83 fd 02             	cmp    ebp,0x2
c0015271:	7e 2f                	jle    c00152a2 <SysTruncate(regs*)+0xf4>
c0015273:	83 ec 0c             	sub    esp,0xc
c0015276:	51                   	push   ecx
c0015277:	e8 c1 e1 ff ff       	call   c001343d <KeGetFileFromDescriptor(int)>
c001527c:	83 c4 10             	add    esp,0x10
c001527f:	89 c1                	mov    ecx,eax
c0015281:	31 d2                	xor    edx,edx
c0015283:	b8 02 00 00 00       	mov    eax,0x2
c0015288:	85 c9                	test   ecx,ecx
c001528a:	74 16                	je     c00152a2 <SysTruncate(regs*)+0xf4>
c001528c:	50                   	push   eax
c001528d:	57                   	push   edi
c001528e:	56                   	push   esi
c001528f:	51                   	push   ecx
c0015290:	e8 27 30 ff ff       	call   c00082bc <File::truncate(unsigned long long)>
c0015295:	83 c4 10             	add    esp,0x10
c0015298:	85 c0                	test   eax,eax
c001529a:	0f 95 c0             	setne  al
c001529d:	0f b6 c0             	movzx  eax,al
c00152a0:	31 d2                	xor    edx,edx
c00152a2:	83 c4 0c             	add    esp,0xc
c00152a5:	5b                   	pop    ebx
c00152a6:	5e                   	pop    esi
c00152a7:	5f                   	pop    edi
c00152a8:	5d                   	pop    ebp
c00152a9:	c3                   	ret    

c00152aa <SysWrite(regs*)>:
c00152aa:	57                   	push   edi
c00152ab:	56                   	push   esi
c00152ac:	53                   	push   ebx
c00152ad:	83 ec 10             	sub    esp,0x10
c00152b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00152b4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00152b7:	83 f8 02             	cmp    eax,0x2
c00152ba:	77 10                	ja     c00152cc <SysWrite(regs*)+0x22>
c00152bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152c1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152c4:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c00152ca:	eb 0e                	jmp    c00152da <SysWrite(regs*)+0x30>
c00152cc:	83 ec 0c             	sub    esp,0xc
c00152cf:	50                   	push   eax
c00152d0:	e8 68 e1 ff ff       	call   c001343d <KeGetFileFromDescriptor(int)>
c00152d5:	83 c4 10             	add    esp,0x10
c00152d8:	89 c1                	mov    ecx,eax
c00152da:	83 c8 ff             	or     eax,0xffffffff
c00152dd:	85 c9                	test   ecx,ecx
c00152df:	89 c2                	mov    edx,eax
c00152e1:	74 28                	je     c001530b <SysWrite(regs*)+0x61>
c00152e3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00152eb:	31 ff                	xor    edi,edi
c00152ed:	83 ec 0c             	sub    esp,0xc
c00152f0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00152f2:	8d 54 24 18          	lea    edx,[esp+0x18]
c00152f6:	52                   	push   edx
c00152f7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00152fa:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00152fd:	57                   	push   edi
c00152fe:	56                   	push   esi
c00152ff:	51                   	push   ecx
c0015300:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015303:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015307:	83 c4 20             	add    esp,0x20
c001530a:	99                   	cdq    
c001530b:	83 c4 10             	add    esp,0x10
c001530e:	5b                   	pop    ebx
c001530f:	5e                   	pop    esi
c0015310:	5f                   	pop    edi
c0015311:	c3                   	ret    

c0015312 <SysWsbe(regs*)>:
c0015312:	55                   	push   ebp
c0015313:	57                   	push   edi
c0015314:	56                   	push   esi
c0015315:	53                   	push   ebx
c0015316:	83 ec 3c             	sub    esp,0x3c
c0015319:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001531d:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0015324:	75 2d                	jne    c0015353 <SysWsbe(regs*)+0x41>
c0015326:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c001532d:	75 24                	jne    c0015353 <SysWsbe(regs*)+0x41>
c001532f:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c0015336:	75 1b                	jne    c0015353 <SysWsbe(regs*)+0x41>
c0015338:	6a 01                	push   0x1
c001533a:	6a 00                	push   0x0
c001533c:	68 79 9f 00 c0       	push   0xc0009f79
c0015341:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c0015347:	e8 08 1c 00 00       	call   c0016f54 <Process::createThread(void (*)(void*), void*, int)>
c001534c:	83 c4 10             	add    esp,0x10
c001534f:	31 c0                	xor    eax,eax
c0015351:	eb 52                	jmp    c00153a5 <SysWsbe(regs*)+0x93>
c0015353:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0015357:	be f4 50 02 c0       	mov    esi,0xc00250f4
c001535c:	b9 0b 00 00 00       	mov    ecx,0xb
c0015361:	fc                   	cld    
c0015362:	83 ec 0c             	sub    esp,0xc
c0015365:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015367:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001536b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015370:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015373:	8b b0 a6 05 00 00    	mov    esi,DWORD PTR [eax+0x5a6]
c0015379:	8b 06                	mov    eax,DWORD PTR [esi]
c001537b:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c001537e:	57                   	push   edi
c001537f:	e8 ec b1 fe ff       	call   c0000570 <strlen>
c0015384:	5a                   	pop    edx
c0015385:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015389:	52                   	push   edx
c001538a:	31 d2                	xor    edx,edx
c001538c:	57                   	push   edi
c001538d:	52                   	push   edx
c001538e:	50                   	push   eax
c001538f:	56                   	push   esi
c0015390:	ff d5                	call   ebp
c0015392:	83 c4 14             	add    esp,0x14
c0015395:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015398:	e8 77 26 00 00       	call   c0017a14 <terminateTask(int)>
c001539d:	83 c4 10             	add    esp,0x10
c00153a0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00153a5:	83 c4 3c             	add    esp,0x3c
c00153a8:	31 d2                	xor    edx,edx
c00153aa:	5b                   	pop    ebx
c00153ab:	5e                   	pop    esi
c00153ac:	5f                   	pop    edi
c00153ad:	5d                   	pop    ebp
c00153ae:	c3                   	ret    

c00153af <SysYield(regs*)>:
c00153af:	83 ec 0c             	sub    esp,0xc
c00153b2:	fa                   	cli    
c00153b3:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c00153b9:	e8 56 1e 00 00       	call   c0017214 <schedule()>
c00153be:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c00153c5:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c00153cc:	75 01                	jne    c00153cf <SysYield(regs*)+0x20>
c00153ce:	fb                   	sti    
c00153cf:	31 c0                	xor    eax,eax
c00153d1:	31 d2                	xor    edx,edx
c00153d3:	83 c4 0c             	add    esp,0xc
c00153d6:	c3                   	ret    
c00153d7:	90                   	nop

c00153d8 <KeAlarm(ThreadControlBlock*, unsigned long long)>:
c00153d8:	55                   	push   ebp
c00153d9:	57                   	push   edi
c00153da:	56                   	push   esi
c00153db:	53                   	push   ebx
c00153dc:	83 ec 2c             	sub    esp,0x2c
c00153df:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00153e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00153e7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00153eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00153ef:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00153f3:	8b 7a 63             	mov    edi,DWORD PTR [edx+0x63]
c00153f6:	0f b6 4a 67          	movzx  ecx,BYTE PTR [edx+0x67]
c00153fa:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c00153fe:	c1 e0 08             	shl    eax,0x8
c0015401:	09 c1                	or     ecx,eax
c0015403:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c0015407:	c1 e0 10             	shl    eax,0x10
c001540a:	09 c1                	or     ecx,eax
c001540c:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c0015410:	83 e0 7f             	and    eax,0x7f
c0015413:	c1 e0 18             	shl    eax,0x18
c0015416:	09 c8                	or     eax,ecx
c0015418:	89 c5                	mov    ebp,eax
c001541a:	89 f8                	mov    eax,edi
c001541c:	80 f4 00             	xor    ah,0x0
c001541f:	89 c3                	mov    ebx,eax
c0015421:	89 e8                	mov    eax,ebp
c0015423:	80 f4 00             	xor    ah,0x0
c0015426:	89 c6                	mov    esi,eax
c0015428:	89 f0                	mov    eax,esi
c001542a:	09 d8                	or     eax,ebx
c001542c:	74 42                	je     c0015470 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x98>
c001542e:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015432:	8b 4a 63             	mov    ecx,DWORD PTR [edx+0x63]
c0015435:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c0015439:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c001543d:	c1 e0 08             	shl    eax,0x8
c0015440:	09 c6                	or     esi,eax
c0015442:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c0015446:	c1 e0 10             	shl    eax,0x10
c0015449:	09 c6                	or     esi,eax
c001544b:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c001544f:	83 e0 7f             	and    eax,0x7f
c0015452:	c1 e0 18             	shl    eax,0x18
c0015455:	09 f0                	or     eax,esi
c0015457:	89 c3                	mov    ebx,eax
c0015459:	a1 50 cb 02 c0       	mov    eax,ds:0xc002cb50
c001545e:	8b 15 54 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb54
c0015464:	29 c1                	sub    ecx,eax
c0015466:	19 d3                	sbb    ebx,edx
c0015468:	89 c8                	mov    eax,ecx
c001546a:	89 da                	mov    edx,ebx
c001546c:	eb 0e                	jmp    c001547c <KeAlarm(ThreadControlBlock*, unsigned long long)+0xa4>
c001546e:	66 90                	xchg   ax,ax
c0015470:	b8 00 00 00 00       	mov    eax,0x0
c0015475:	ba 00 00 00 00       	mov    edx,0x0
c001547a:	66 90                	xchg   ax,ax
c001547c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015480:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015488:	80 f4 00             	xor    ah,0x0
c001548b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001548f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015493:	80 f4 00             	xor    ah,0x0
c0015496:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001549a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001549e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00154a2:	89 e8                	mov    eax,ebp
c00154a4:	09 f8                	or     eax,edi
c00154a6:	74 30                	je     c00154d8 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x100>
c00154a8:	8b 0d 50 cb 02 c0    	mov    ecx,DWORD PTR ds:0xc002cb50
c00154ae:	8b 1d 54 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb54
c00154b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00154bc:	01 c8                	add    eax,ecx
c00154be:	11 da                	adc    edx,ebx
c00154c0:	89 c6                	mov    esi,eax
c00154c2:	83 e6 ff             	and    esi,0xffffffff
c00154c5:	89 34 24             	mov    DWORD PTR [esp],esi
c00154c8:	89 d0                	mov    eax,edx
c00154ca:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00154cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00154d3:	eb 13                	jmp    c00154e8 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x110>
c00154d5:	8d 76 00             	lea    esi,[esi+0x0]
c00154d8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00154df:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00154e7:	90                   	nop
c00154e8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00154ec:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00154ef:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00154f3:	89 cf                	mov    edi,ecx
c00154f5:	89 78 63             	mov    DWORD PTR [eax+0x63],edi
c00154f8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00154fb:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00154ff:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0015504:	8a 48 67             	mov    cl,BYTE PTR [eax+0x67]
c0015507:	83 e1 00             	and    ecx,0x0
c001550a:	09 ca                	or     edx,ecx
c001550c:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c001550f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015513:	c1 ea 08             	shr    edx,0x8
c0015516:	0f b6 d2             	movzx  edx,dl
c0015519:	8a 48 68             	mov    cl,BYTE PTR [eax+0x68]
c001551c:	83 e1 00             	and    ecx,0x0
c001551f:	09 ca                	or     edx,ecx
c0015521:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0015524:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015528:	c1 ea 10             	shr    edx,0x10
c001552b:	0f b6 d2             	movzx  edx,dl
c001552e:	8a 48 69             	mov    cl,BYTE PTR [eax+0x69]
c0015531:	83 e1 00             	and    ecx,0x0
c0015534:	09 ca                	or     edx,ecx
c0015536:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0015539:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001553d:	c1 ea 18             	shr    edx,0x18
c0015540:	83 e2 7f             	and    edx,0x7f
c0015543:	89 d3                	mov    ebx,edx
c0015545:	83 e3 7f             	and    ebx,0x7f
c0015548:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c001554b:	83 e2 80             	and    edx,0xffffff80
c001554e:	88 d1                	mov    cl,dl
c0015550:	88 da                	mov    dl,bl
c0015552:	09 ca                	or     edx,ecx
c0015554:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c0015557:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001555b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001555f:	83 c4 2c             	add    esp,0x2c
c0015562:	5b                   	pop    ebx
c0015563:	5e                   	pop    esi
c0015564:	5f                   	pop    edi
c0015565:	5d                   	pop    ebp
c0015566:	c3                   	ret    
c0015567:	90                   	nop

c0015568 <KeCheckAlarm(ThreadControlBlock*)>:
c0015568:	55                   	push   ebp
c0015569:	57                   	push   edi
c001556a:	56                   	push   esi
c001556b:	53                   	push   ebx
c001556c:	83 ec 0c             	sub    esp,0xc
c001556f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015573:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c0015576:	0f b6 78 67          	movzx  edi,BYTE PTR [eax+0x67]
c001557a:	0f b6 68 68          	movzx  ebp,BYTE PTR [eax+0x68]
c001557e:	c1 e5 08             	shl    ebp,0x8
c0015581:	09 fd                	or     ebp,edi
c0015583:	0f b6 78 69          	movzx  edi,BYTE PTR [eax+0x69]
c0015587:	c1 e7 10             	shl    edi,0x10
c001558a:	09 ef                	or     edi,ebp
c001558c:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c0015590:	83 e0 7f             	and    eax,0x7f
c0015593:	c1 e0 18             	shl    eax,0x18
c0015596:	09 f8                	or     eax,edi
c0015598:	89 c1                	mov    ecx,eax
c001559a:	89 d0                	mov    eax,edx
c001559c:	80 f4 00             	xor    ah,0x0
c001559f:	89 c3                	mov    ebx,eax
c00155a1:	89 c8                	mov    eax,ecx
c00155a3:	80 f4 00             	xor    ah,0x0
c00155a6:	89 c6                	mov    esi,eax
c00155a8:	89 f0                	mov    eax,esi
c00155aa:	09 d8                	or     eax,ebx
c00155ac:	0f 84 9e 00 00 00    	je     c0015650 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c00155b2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00155b6:	8b 41 63             	mov    eax,DWORD PTR [ecx+0x63]
c00155b9:	0f b6 59 67          	movzx  ebx,BYTE PTR [ecx+0x67]
c00155bd:	0f b6 71 68          	movzx  esi,BYTE PTR [ecx+0x68]
c00155c1:	c1 e6 08             	shl    esi,0x8
c00155c4:	09 de                	or     esi,ebx
c00155c6:	0f b6 59 69          	movzx  ebx,BYTE PTR [ecx+0x69]
c00155ca:	c1 e3 10             	shl    ebx,0x10
c00155cd:	09 f3                	or     ebx,esi
c00155cf:	0f b6 49 6a          	movzx  ecx,BYTE PTR [ecx+0x6a]
c00155d3:	83 e1 7f             	and    ecx,0x7f
c00155d6:	c1 e1 18             	shl    ecx,0x18
c00155d9:	09 d9                	or     ecx,ebx
c00155db:	89 ca                	mov    edx,ecx
c00155dd:	89 c1                	mov    ecx,eax
c00155df:	89 d3                	mov    ebx,edx
c00155e1:	a1 50 cb 02 c0       	mov    eax,ds:0xc002cb50
c00155e6:	8b 15 54 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb54
c00155ec:	39 c8                	cmp    eax,ecx
c00155ee:	89 d0                	mov    eax,edx
c00155f0:	19 d8                	sbb    eax,ebx
c00155f2:	72 5c                	jb     c0015650 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c00155f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155f8:	c7 40 63 00 00 00 00 	mov    DWORD PTR [eax+0x63],0x0
c00155ff:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c0015602:	83 e2 00             	and    edx,0x0
c0015605:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c0015608:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c001560b:	83 e2 00             	and    edx,0x0
c001560e:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0015611:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c0015614:	83 e2 00             	and    edx,0x0
c0015617:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c001561a:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c001561d:	83 e2 80             	and    edx,0xffffff80
c0015620:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c0015623:	83 ec 0c             	sub    esp,0xc
c0015626:	68 20 51 02 c0       	push   0xc0025120
c001562b:	e8 4c 19 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015630:	83 c4 10             	add    esp,0x10
c0015633:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015637:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001563a:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c0015640:	83 ec 08             	sub    esp,0x8
c0015643:	6a 0e                	push   0xe
c0015645:	50                   	push   eax
c0015646:	e8 dc bb ff ff       	call   c0011227 <KeRaiseSignal(SigHandlerBlock*, int)>
c001564b:	83 c4 10             	add    esp,0x10
c001564e:	66 90                	xchg   ax,ax
c0015650:	90                   	nop
c0015651:	83 c4 0c             	add    esp,0xc
c0015654:	5b                   	pop    ebx
c0015655:	5e                   	pop    esi
c0015656:	5f                   	pop    edi
c0015657:	5d                   	pop    ebp
c0015658:	c3                   	ret    

c0015659 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0015659:	55                   	push   ebp
c001565a:	57                   	push   edi
c001565b:	56                   	push   esi
c001565c:	53                   	push   ebx
c001565d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0015663:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c001566b:	0f 95 c0             	setne  al
c001566e:	31 d2                	xor    edx,edx
c0015670:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0015678:	0f 94 c2             	sete   dl
c001567b:	85 c2                	test   edx,eax
c001567d:	74 34                	je     c00156b3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c001567f:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001568a:	74 27                	je     c00156b3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c001568c:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0015693:	05 00 10 00 00       	add    eax,0x1000
c0015698:	89 c1                	mov    ecx,eax
c001569a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001569f:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00156a5:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00156ac:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00156b3:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00156ba:	83 ec 0c             	sub    esp,0xc
c00156bd:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00156c3:	6a 01                	push   0x1
c00156c5:	e8 d1 de ff ff       	call   c001359b <Virt::allocateKernelVirtualPages(int)>
c00156ca:	83 c4 10             	add    esp,0x10
c00156cd:	89 c3                	mov    ebx,eax
c00156cf:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00156d5:	0f 86 26 01 00 00    	jbe    c0015801 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c00156db:	c1 ee 0c             	shr    esi,0xc
c00156de:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00156e5:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00156e9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00156f1:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00156f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00156fc:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0015703:	29 ef                	sub    edi,ebp
c0015705:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0015709:	0f 83 f9 00 00 00    	jae    c0015808 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1af>
c001570f:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0015715:	76 05                	jbe    c001571c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0015717:	bf 00 10 00 00       	mov    edi,0x1000
c001571c:	83 ec 0c             	sub    esp,0xc
c001571f:	31 d2                	xor    edx,edx
c0015721:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015728:	8b 08                	mov    ecx,DWORD PTR [eax]
c001572a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001572e:	50                   	push   eax
c001572f:	8d 74 24 30          	lea    esi,[esp+0x30]
c0015733:	56                   	push   esi
c0015734:	52                   	push   edx
c0015735:	57                   	push   edi
c0015736:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001573d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015740:	83 c4 20             	add    esp,0x20
c0015743:	85 c0                	test   eax,eax
c0015745:	75 06                	jne    c001574d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0015747:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001574b:	74 13                	je     c0015760 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c001574d:	83 ec 0c             	sub    esp,0xc
c0015750:	53                   	push   ebx
c0015751:	e8 4d e1 ff ff       	call   c00138a3 <Virt::freeKernelVirtualPages(unsigned long)>
c0015756:	83 c4 10             	add    esp,0x10
c0015759:	31 c0                	xor    eax,eax
c001575b:	e9 80 01 00 00       	jmp    c00158e0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c0015760:	fa                   	cli    
c0015761:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c0015767:	e8 6e aa ff ff       	call   c00101da <Phys::allocatePage()>
c001576c:	6a 07                	push   0x7
c001576e:	89 c7                	mov    edi,eax
c0015770:	53                   	push   ebx
c0015771:	50                   	push   eax
c0015772:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015777:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001577a:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015780:	e8 f9 e4 ff ff       	call   c0013c7e <VAS::mapPage(unsigned long, unsigned long, int)>
c0015785:	83 c4 0c             	add    esp,0xc
c0015788:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001578f:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015795:	6a 00                	push   0x0
c0015797:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001579c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001579f:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00157a5:	e8 40 e3 ff ff       	call   c0013aea <VAS::mapOtherVASIn(bool, VAS*)>
c00157aa:	58                   	pop    eax
c00157ab:	5a                   	pop    edx
c00157ac:	68 07 0c 00 00       	push   0xc07
c00157b1:	55                   	push   ebp
c00157b2:	57                   	push   edi
c00157b3:	89 df                	mov    edi,ebx
c00157b5:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00157bc:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00157c2:	6a 00                	push   0x0
c00157c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157c9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157cc:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00157d2:	e8 e9 e6 ff ff       	call   c0013ec0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00157d7:	b9 00 10 00 00       	mov    ecx,0x1000
c00157dc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00157de:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c00157e5:	83 c4 20             	add    esp,0x20
c00157e8:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c00157ef:	75 01                	jne    c00157f2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x199>
c00157f1:	fb                   	sti    
c00157f2:	81 c5 00 10 00 00    	add    ebp,0x1000
c00157f8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00157fc:	e9 f0 fe ff ff       	jmp    c00156f1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0015801:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0015808:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001580f:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0015815:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001581b:	0f 86 b1 00 00 00    	jbe    c00158d2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c0015821:	fa                   	cli    
c0015822:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c0015828:	c1 ee 0c             	shr    esi,0xc
c001582b:	51                   	push   ecx
c001582c:	31 ff                	xor    edi,edi
c001582e:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015835:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001583b:	6a 00                	push   0x0
c001583d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015842:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015845:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001584b:	e8 9a e2 ff ff       	call   c0013aea <VAS::mapOtherVASIn(bool, VAS*)>
c0015850:	83 c4 10             	add    esp,0x10
c0015853:	e8 82 a9 ff ff       	call   c00101da <Phys::allocatePage()>
c0015858:	47                   	inc    edi
c0015859:	6a 07                	push   0x7
c001585b:	53                   	push   ebx
c001585c:	50                   	push   eax
c001585d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015861:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015867:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001586a:	ff b2 b2 05 00 00    	push   DWORD PTR [edx+0x5b2]
c0015870:	e8 09 e4 ff ff       	call   c0013c7e <VAS::mapPage(unsigned long, unsigned long, int)>
c0015875:	58                   	pop    eax
c0015876:	5a                   	pop    edx
c0015877:	68 07 0c 00 00       	push   0xc07
c001587c:	55                   	push   ebp
c001587d:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015883:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015887:	50                   	push   eax
c0015888:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001588f:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015895:	6a 00                	push   0x0
c0015897:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001589c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001589f:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00158a5:	e8 16 e6 ff ff       	call   c0013ec0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00158aa:	83 c4 1c             	add    esp,0x1c
c00158ad:	68 00 10 00 00       	push   0x1000
c00158b2:	6a 00                	push   0x0
c00158b4:	53                   	push   ebx
c00158b5:	e8 36 ac fe ff       	call   c00004f0 <memset>
c00158ba:	83 c4 10             	add    esp,0x10
c00158bd:	39 fe                	cmp    esi,edi
c00158bf:	77 92                	ja     c0015853 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1fa>
c00158c1:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c00158c8:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c00158cf:	75 01                	jne    c00158d2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c00158d1:	fb                   	sti    
c00158d2:	83 ec 0c             	sub    esp,0xc
c00158d5:	53                   	push   ebx
c00158d6:	e8 c8 df ff ff       	call   c00138a3 <Virt::freeKernelVirtualPages(unsigned long)>
c00158db:	83 c4 10             	add    esp,0x10
c00158de:	b0 01                	mov    al,0x1
c00158e0:	81 c4 2c 10 00 00    	add    esp,0x102c
c00158e6:	5b                   	pop    ebx
c00158e7:	5e                   	pop    esi
c00158e8:	5f                   	pop    edi
c00158e9:	5d                   	pop    ebp
c00158ea:	c3                   	ret    

c00158eb <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00158eb:	55                   	push   ebp
c00158ec:	57                   	push   edi
c00158ed:	56                   	push   esi
c00158ee:	53                   	push   ebx
c00158ef:	83 ec 68             	sub    esp,0x68
c00158f2:	68 14 01 00 00       	push   0x114
c00158f7:	e8 93 a2 ff ff       	call   c000fb8f <malloc>
c00158fc:	83 c4 0c             	add    esp,0xc
c00158ff:	89 c6                	mov    esi,eax
c0015901:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0015905:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0015909:	50                   	push   eax
c001590a:	e8 7b 28 ff ff       	call   c000818a <File::File(char const*, Process*)>
c001590f:	5b                   	pop    ebx
c0015910:	5f                   	pop    edi
c0015911:	6a 01                	push   0x1
c0015913:	56                   	push   esi
c0015914:	e8 8f 28 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0015919:	83 c4 10             	add    esp,0x10
c001591c:	85 c0                	test   eax,eax
c001591e:	0f 85 c6 01 00 00    	jne    c0015aea <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015924:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001592c:	83 ec 0c             	sub    esp,0xc
c001592f:	6a 34                	push   0x34
c0015931:	e8 59 a2 ff ff       	call   c000fb8f <malloc>
c0015936:	59                   	pop    ecx
c0015937:	89 c3                	mov    ebx,eax
c0015939:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001593d:	8b 06                	mov    eax,DWORD PTR [esi]
c001593f:	57                   	push   edi
c0015940:	53                   	push   ebx
c0015941:	6a 00                	push   0x0
c0015943:	6a 34                	push   0x34
c0015945:	56                   	push   esi
c0015946:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015949:	83 c4 20             	add    esp,0x20
c001594c:	85 c0                	test   eax,eax
c001594e:	0f 85 96 01 00 00    	jne    c0015aea <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015954:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001595a:	0f 85 8a 01 00 00    	jne    c0015aea <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015960:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015963:	85 c0                	test   eax,eax
c0015965:	0f 84 7f 01 00 00    	je     c0015aea <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c001596b:	52                   	push   edx
c001596c:	31 d2                	xor    edx,edx
c001596e:	52                   	push   edx
c001596f:	50                   	push   eax
c0015970:	56                   	push   esi
c0015971:	e8 f0 28 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015976:	83 c4 10             	add    esp,0x10
c0015979:	85 c0                	test   eax,eax
c001597b:	0f 85 69 01 00 00    	jne    c0015aea <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015981:	83 ec 0c             	sub    esp,0xc
c0015984:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015987:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001598b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001598f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0015993:	0f af c2             	imul   eax,edx
c0015996:	50                   	push   eax
c0015997:	e8 f3 a1 ff ff       	call   c000fb8f <malloc>
c001599c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001599e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00159a2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00159a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00159a9:	31 ff                	xor    edi,edi
c00159ab:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00159af:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00159b3:	0f af c2             	imul   eax,edx
c00159b6:	99                   	cdq    
c00159b7:	52                   	push   edx
c00159b8:	50                   	push   eax
c00159b9:	56                   	push   esi
c00159ba:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00159bd:	83 c4 20             	add    esp,0x20
c00159c0:	0f b7 c7             	movzx  eax,di
c00159c3:	66 3b 7b 30          	cmp    di,WORD PTR [ebx+0x30]
c00159c7:	73 71                	jae    c0015a3a <Thr::loadProgramIntoMemory(Process*, char const*)+0x14f>
c00159c9:	6b c0 28             	imul   eax,eax,0x28
c00159cc:	55                   	push   ebp
c00159cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00159d1:	0f b7 53 32          	movzx  edx,WORD PTR [ebx+0x32]
c00159d5:	8b 04 01             	mov    eax,DWORD PTR [ecx+eax*1]
c00159d8:	6b d2 28             	imul   edx,edx,0x28
c00159db:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00159df:	31 d2                	xor    edx,edx
c00159e1:	52                   	push   edx
c00159e2:	50                   	push   eax
c00159e3:	56                   	push   esi
c00159e4:	e8 7d 28 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c00159e9:	83 c4 0c             	add    esp,0xc
c00159ec:	6a 20                	push   0x20
c00159ee:	6a 00                	push   0x0
c00159f0:	8d 6c 24 3c          	lea    ebp,[esp+0x3c]
c00159f4:	55                   	push   ebp
c00159f5:	e8 f6 aa fe ff       	call   c00004f0 <memset>
c00159fa:	58                   	pop    eax
c00159fb:	8b 06                	mov    eax,DWORD PTR [esi]
c00159fd:	8d 54 24 38          	lea    edx,[esp+0x38]
c0015a01:	52                   	push   edx
c0015a02:	55                   	push   ebp
c0015a03:	6a 00                	push   0x0
c0015a05:	6a 1f                	push   0x1f
c0015a07:	56                   	push   esi
c0015a08:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015a0b:	83 c4 18             	add    esp,0x18
c0015a0e:	55                   	push   ebp
c0015a0f:	68 31 51 02 c0       	push   0xc0025131
c0015a14:	e8 37 ad fe ff       	call   c0000750 <strcmp>
c0015a19:	83 c4 10             	add    esp,0x10
c0015a1c:	85 c0                	test   eax,eax
c0015a1e:	75 17                	jne    c0015a37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x14c>
c0015a20:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0015a24:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c0015a28:	8a 80 76 02 00 00    	mov    al,BYTE PTR [eax+0x276]
c0015a2e:	83 c8 80             	or     eax,0xffffff80
c0015a31:	88 81 76 02 00 00    	mov    BYTE PTR [ecx+0x276],al
c0015a37:	47                   	inc    edi
c0015a38:	eb 86                	jmp    c00159c0 <Thr::loadProgramIntoMemory(Process*, char const*)+0xd5>
c0015a3a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0015a3d:	85 c0                	test   eax,eax
c0015a3f:	0f 84 a5 00 00 00    	je     c0015aea <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015a45:	31 d2                	xor    edx,edx
c0015a47:	57                   	push   edi
c0015a48:	52                   	push   edx
c0015a49:	50                   	push   eax
c0015a4a:	56                   	push   esi
c0015a4b:	e8 16 28 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015a50:	83 c4 10             	add    esp,0x10
c0015a53:	85 c0                	test   eax,eax
c0015a55:	0f 85 8f 00 00 00    	jne    c0015aea <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015a5b:	83 ec 0c             	sub    esp,0xc
c0015a5e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0015a62:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0015a66:	31 ed                	xor    ebp,ebp
c0015a68:	0f af c2             	imul   eax,edx
c0015a6b:	50                   	push   eax
c0015a6c:	e8 1e a1 ff ff       	call   c000fb8f <malloc>
c0015a71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015a75:	59                   	pop    ecx
c0015a76:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015a78:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015a7c:	50                   	push   eax
c0015a7d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015a81:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0015a85:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0015a89:	0f af c2             	imul   eax,edx
c0015a8c:	99                   	cdq    
c0015a8d:	52                   	push   edx
c0015a8e:	50                   	push   eax
c0015a8f:	56                   	push   esi
c0015a90:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015a93:	83 c4 20             	add    esp,0x20
c0015a96:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015a9e:	0f b7 fd             	movzx  edi,bp
c0015aa1:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0015aa5:	0f 83 80 00 00 00    	jae    c0015b2b <Thr::loadProgramIntoMemory(Process*, char const*)+0x240>
c0015aab:	c1 e7 05             	shl    edi,0x5
c0015aae:	03 7c 24 10          	add    edi,DWORD PTR [esp+0x10]
c0015ab2:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0015ab5:	75 6e                	jne    c0015b25 <Thr::loadProgramIntoMemory(Process*, char const*)+0x23a>
c0015ab7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0015aba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015abe:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0015ac1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015ac5:	52                   	push   edx
c0015ac6:	31 d2                	xor    edx,edx
c0015ac8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0015acb:	52                   	push   edx
c0015acc:	50                   	push   eax
c0015acd:	56                   	push   esi
c0015ace:	e8 93 27 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015ad3:	83 c4 10             	add    esp,0x10
c0015ad6:	85 c0                	test   eax,eax
c0015ad8:	74 17                	je     c0015af1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x206>
c0015ada:	83 ec 0c             	sub    esp,0xc
c0015add:	68 40 51 02 c0       	push   0xc0025140
c0015ae2:	e8 95 14 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015ae7:	83 c4 10             	add    esp,0x10
c0015aea:	31 c0                	xor    eax,eax
c0015aec:	e9 8a 00 00 00       	jmp    c0015b7b <Thr::loadProgramIntoMemory(Process*, char const*)+0x290>
c0015af1:	83 ec 0c             	sub    esp,0xc
c0015af4:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015af7:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0015afa:	50                   	push   eax
c0015afb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015aff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b03:	56                   	push   esi
c0015b04:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0015b0b:	e8 49 fb ff ff       	call   c0015659 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0015b10:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015b14:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0015b18:	83 c4 20             	add    esp,0x20
c0015b1b:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0015b1f:	73 04                	jae    c0015b25 <Thr::loadProgramIntoMemory(Process*, char const*)+0x23a>
c0015b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015b25:	45                   	inc    ebp
c0015b26:	e9 73 ff ff ff       	jmp    c0015a9e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b3>
c0015b2b:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c0015b2f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015b37:	89 91 ae 05 00 00    	mov    DWORD PTR [ecx+0x5ae],edx
c0015b3d:	83 ec 0c             	sub    esp,0xc
c0015b40:	8b 91 b2 05 00 00    	mov    edx,DWORD PTR [ecx+0x5b2]
c0015b46:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015b4b:	05 00 10 00 00       	add    eax,0x1000
c0015b50:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015b53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015b57:	e8 43 a0 ff ff       	call   c000fb9f <free>
c0015b5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b5f:	e8 3b a0 ff ff       	call   c000fb9f <free>
c0015b64:	58                   	pop    eax
c0015b65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b69:	e8 31 a0 ff ff       	call   c000fb9f <free>
c0015b6e:	89 34 24             	mov    DWORD PTR [esp],esi
c0015b71:	e8 90 26 ff ff       	call   c0008206 <File::close()>
c0015b76:	83 c4 10             	add    esp,0x10
c0015b79:	b0 01                	mov    al,0x1
c0015b7b:	83 c4 5c             	add    esp,0x5c
c0015b7e:	5b                   	pop    ebx
c0015b7f:	5e                   	pop    esi
c0015b80:	5f                   	pop    edi
c0015b81:	5d                   	pop    ebp
c0015b82:	c3                   	ret    

c0015b83 <Thr::runtimeReferenceHelper()>:
c0015b83:	83 ec 18             	sub    esp,0x18
c0015b86:	68 48 51 02 c0       	push   0xc0025148
c0015b8b:	e8 ec 13 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015b90:	fa                   	cli    
c0015b91:	83 c4 10             	add    esp,0x10
c0015b94:	eb fe                	jmp    c0015b94 <Thr::runtimeReferenceHelper()+0x11>

c0015b96 <Thr::getAddressOfKernelSymbol(char const*)>:
c0015b96:	57                   	push   edi
c0015b97:	56                   	push   esi
c0015b98:	53                   	push   ebx
c0015b99:	31 db                	xor    ebx,ebx
c0015b9b:	39 1d 00 fa 02 c0    	cmp    DWORD PTR ds:0xc002fa00,ebx
c0015ba1:	7e 3c                	jle    c0015bdf <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0015ba3:	8b 34 9d 80 f9 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd0680]
c0015baa:	31 ff                	xor    edi,edi
c0015bac:	39 3c 9d 80 f8 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd0780],edi
c0015bb3:	7e 27                	jle    c0015bdc <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0015bb5:	50                   	push   eax
c0015bb6:	50                   	push   eax
c0015bb7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015bbb:	8b 06                	mov    eax,DWORD PTR [esi]
c0015bbd:	03 04 9d 00 f9 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd0700]
c0015bc4:	50                   	push   eax
c0015bc5:	e8 86 ab fe ff       	call   c0000750 <strcmp>
c0015bca:	83 c4 10             	add    esp,0x10
c0015bcd:	85 c0                	test   eax,eax
c0015bcf:	75 05                	jne    c0015bd6 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0015bd1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0015bd4:	eb 0b                	jmp    c0015be1 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0015bd6:	83 c6 10             	add    esi,0x10
c0015bd9:	47                   	inc    edi
c0015bda:	eb d0                	jmp    c0015bac <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0015bdc:	43                   	inc    ebx
c0015bdd:	eb bc                	jmp    c0015b9b <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0015bdf:	31 c0                	xor    eax,eax
c0015be1:	5b                   	pop    ebx
c0015be2:	5e                   	pop    esi
c0015be3:	5f                   	pop    edi
c0015be4:	c3                   	ret    

c0015be5 <Thr::loadKernelSymbolTable(char const*)>:
c0015be5:	55                   	push   ebp
c0015be6:	57                   	push   edi
c0015be7:	56                   	push   esi
c0015be8:	53                   	push   ebx
c0015be9:	83 ec 68             	sub    esp,0x68
c0015bec:	8b 35 58 fa 02 c0    	mov    esi,DWORD PTR ds:0xc002fa58
c0015bf2:	68 14 01 00 00       	push   0x114
c0015bf7:	e8 93 9f ff ff       	call   c000fb8f <malloc>
c0015bfc:	83 c4 0c             	add    esp,0xc
c0015bff:	89 c3                	mov    ebx,eax
c0015c01:	56                   	push   esi
c0015c02:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015c06:	50                   	push   eax
c0015c07:	e8 7e 25 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0015c0c:	5e                   	pop    esi
c0015c0d:	5f                   	pop    edi
c0015c0e:	6a 01                	push   0x1
c0015c10:	53                   	push   ebx
c0015c11:	e8 92 25 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0015c16:	83 c4 10             	add    esp,0x10
c0015c19:	85 c0                	test   eax,eax
c0015c1b:	74 0a                	je     c0015c27 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0015c1d:	83 ec 0c             	sub    esp,0xc
c0015c20:	68 6a 51 02 c0       	push   0xc002516a
c0015c25:	eb 34                	jmp    c0015c5b <Thr::loadKernelSymbolTable(char const*)+0x76>
c0015c27:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015c2f:	83 ec 0c             	sub    esp,0xc
c0015c32:	6a 34                	push   0x34
c0015c34:	e8 56 9f ff ff       	call   c000fb8f <malloc>
c0015c39:	59                   	pop    ecx
c0015c3a:	89 c7                	mov    edi,eax
c0015c3c:	8d 74 24 34          	lea    esi,[esp+0x34]
c0015c40:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c42:	56                   	push   esi
c0015c43:	57                   	push   edi
c0015c44:	6a 00                	push   0x0
c0015c46:	6a 34                	push   0x34
c0015c48:	53                   	push   ebx
c0015c49:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015c4c:	83 c4 20             	add    esp,0x20
c0015c4f:	85 c0                	test   eax,eax
c0015c51:	74 17                	je     c0015c6a <Thr::loadKernelSymbolTable(char const*)+0x85>
c0015c53:	83 ec 0c             	sub    esp,0xc
c0015c56:	68 81 51 02 c0       	push   0xc0025181
c0015c5b:	e8 86 a3 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0015c60:	83 c4 10             	add    esp,0x10
c0015c63:	31 c0                	xor    eax,eax
c0015c65:	e9 31 02 00 00       	jmp    c0015e9b <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0015c6a:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015c70:	75 e1                	jne    c0015c53 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015c72:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015c75:	85 c0                	test   eax,eax
c0015c77:	74 da                	je     c0015c53 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015c79:	52                   	push   edx
c0015c7a:	31 d2                	xor    edx,edx
c0015c7c:	52                   	push   edx
c0015c7d:	50                   	push   eax
c0015c7e:	53                   	push   ebx
c0015c7f:	e8 e2 25 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015c84:	83 c4 10             	add    esp,0x10
c0015c87:	85 c0                	test   eax,eax
c0015c89:	75 c8                	jne    c0015c53 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015c8b:	83 ec 0c             	sub    esp,0xc
c0015c8e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015c92:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015c96:	31 ed                	xor    ebp,ebp
c0015c98:	0f af c2             	imul   eax,edx
c0015c9b:	50                   	push   eax
c0015c9c:	e8 ee 9e ff ff       	call   c000fb8f <malloc>
c0015ca1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015ca3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015ca7:	89 34 24             	mov    DWORD PTR [esp],esi
c0015caa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015cae:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015cb2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015cb6:	0f af c2             	imul   eax,edx
c0015cb9:	99                   	cdq    
c0015cba:	52                   	push   edx
c0015cbb:	50                   	push   eax
c0015cbc:	53                   	push   ebx
c0015cbd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015cc0:	83 c4 20             	add    esp,0x20
c0015cc3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015ccb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015cd3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015cdb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015ce3:	0f b7 f5             	movzx  esi,bp
c0015ce6:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0015cea:	0f 83 a7 00 00 00    	jae    c0015d97 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0015cf0:	6b f6 28             	imul   esi,esi,0x28
c0015cf3:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015cf7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015cfa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015cfe:	50                   	push   eax
c0015cff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015d03:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0015d07:	8b 16                	mov    edx,DWORD PTR [esi]
c0015d09:	6b c0 28             	imul   eax,eax,0x28
c0015d0c:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0015d10:	89 d0                	mov    eax,edx
c0015d12:	31 d2                	xor    edx,edx
c0015d14:	52                   	push   edx
c0015d15:	50                   	push   eax
c0015d16:	53                   	push   ebx
c0015d17:	e8 4a 25 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015d1c:	83 c4 0c             	add    esp,0xc
c0015d1f:	6a 20                	push   0x20
c0015d21:	6a 00                	push   0x0
c0015d23:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015d27:	52                   	push   edx
c0015d28:	e8 c3 a7 fe ff       	call   c00004f0 <memset>
c0015d2d:	58                   	pop    eax
c0015d2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d30:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0015d34:	51                   	push   ecx
c0015d35:	8d 54 24 40          	lea    edx,[esp+0x40]
c0015d39:	52                   	push   edx
c0015d3a:	6a 00                	push   0x0
c0015d3c:	6a 1f                	push   0x1f
c0015d3e:	53                   	push   ebx
c0015d3f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015d42:	83 c4 18             	add    esp,0x18
c0015d45:	68 98 51 02 c0       	push   0xc0025198
c0015d4a:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015d4e:	52                   	push   edx
c0015d4f:	e8 fc a9 fe ff       	call   c0000750 <strcmp>
c0015d54:	83 c4 10             	add    esp,0x10
c0015d57:	85 c0                	test   eax,eax
c0015d59:	75 0f                	jne    c0015d6a <Thr::loadKernelSymbolTable(char const*)+0x185>
c0015d5b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015d5e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015d62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015d66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d6a:	50                   	push   eax
c0015d6b:	50                   	push   eax
c0015d6c:	68 a0 51 02 c0       	push   0xc00251a0
c0015d71:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0015d75:	50                   	push   eax
c0015d76:	e8 d5 a9 fe ff       	call   c0000750 <strcmp>
c0015d7b:	83 c4 10             	add    esp,0x10
c0015d7e:	85 c0                	test   eax,eax
c0015d80:	75 0f                	jne    c0015d91 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0015d82:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015d85:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015d89:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015d8d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015d91:	45                   	inc    ebp
c0015d92:	e9 4c ff ff ff       	jmp    c0015ce3 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0015d97:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015d9c:	75 10                	jne    c0015dae <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0015d9e:	83 ec 0c             	sub    esp,0xc
c0015da1:	68 a8 51 02 c0       	push   0xc00251a8
c0015da6:	e8 3b a2 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0015dab:	83 c4 10             	add    esp,0x10
c0015dae:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0015db3:	75 10                	jne    c0015dc5 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0015db5:	83 ec 0c             	sub    esp,0xc
c0015db8:	68 a8 51 02 c0       	push   0xc00251a8
c0015dbd:	e8 24 a2 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0015dc2:	83 c4 10             	add    esp,0x10
c0015dc5:	31 d2                	xor    edx,edx
c0015dc7:	50                   	push   eax
c0015dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dcc:	52                   	push   edx
c0015dcd:	50                   	push   eax
c0015dce:	53                   	push   ebx
c0015dcf:	e8 92 24 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015dd4:	5a                   	pop    edx
c0015dd5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015dd9:	e8 b1 9d ff ff       	call   c000fb8f <malloc>
c0015dde:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015de2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015de6:	31 c9                	xor    ecx,ecx
c0015de8:	5e                   	pop    esi
c0015de9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015deb:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0015def:	55                   	push   ebp
c0015df0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015df4:	51                   	push   ecx
c0015df5:	52                   	push   edx
c0015df6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015dfa:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0015dfe:	53                   	push   ebx
c0015dff:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015e02:	83 c4 14             	add    esp,0x14
c0015e05:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015e09:	e8 81 9d ff ff       	call   c000fb8f <malloc>
c0015e0e:	89 c6                	mov    esi,eax
c0015e10:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e12:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015e15:	56                   	push   esi
c0015e16:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0015e1a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015e1e:	51                   	push   ecx
c0015e1f:	52                   	push   edx
c0015e20:	53                   	push   ebx
c0015e21:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015e24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015e28:	8b 15 00 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa00
c0015e2e:	83 c4 1c             	add    esp,0x1c
c0015e31:	c1 e8 04             	shr    eax,0x4
c0015e34:	89 04 95 80 f8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0780],eax
c0015e3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015e3f:	31 d2                	xor    edx,edx
c0015e41:	52                   	push   edx
c0015e42:	50                   	push   eax
c0015e43:	53                   	push   ebx
c0015e44:	e8 1d 24 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015e49:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015e4b:	31 d2                	xor    edx,edx
c0015e4d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015e50:	56                   	push   esi
c0015e51:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015e55:	52                   	push   edx
c0015e56:	50                   	push   eax
c0015e57:	53                   	push   ebx
c0015e58:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015e5b:	83 c4 14             	add    esp,0x14
c0015e5e:	53                   	push   ebx
c0015e5f:	e8 a2 23 ff ff       	call   c0008206 <File::close()>
c0015e64:	5d                   	pop    ebp
c0015e65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015e69:	e8 31 9d ff ff       	call   c000fb9f <free>
c0015e6e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015e71:	e8 29 9d ff ff       	call   c000fb9f <free>
c0015e76:	a1 00 fa 02 c0       	mov    eax,ds:0xc002fa00
c0015e7b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015e7f:	8d 50 01             	lea    edx,[eax+0x1]
c0015e82:	89 0c 85 80 f9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0680],ecx
c0015e89:	89 34 85 00 f9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0700],esi
c0015e90:	89 15 00 fa 02 c0    	mov    DWORD PTR ds:0xc002fa00,edx
c0015e96:	83 c4 10             	add    esp,0x10
c0015e99:	b0 01                	mov    al,0x1
c0015e9b:	83 c4 5c             	add    esp,0x5c
c0015e9e:	5b                   	pop    ebx
c0015e9f:	5e                   	pop    esi
c0015ea0:	5f                   	pop    edi
c0015ea1:	5d                   	pop    ebp
c0015ea2:	c3                   	ret    

c0015ea3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0015ea3:	55                   	push   ebp
c0015ea4:	57                   	push   edi
c0015ea5:	56                   	push   esi
c0015ea6:	53                   	push   ebx
c0015ea7:	81 ec 68 03 00 00    	sub    esp,0x368
c0015ead:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0015eb4:	8b 1d 58 fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa58
c0015eba:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015ebe:	68 14 01 00 00       	push   0x114
c0015ec3:	e8 c7 9c ff ff       	call   c000fb8f <malloc>
c0015ec8:	83 c4 0c             	add    esp,0xc
c0015ecb:	89 c5                	mov    ebp,eax
c0015ecd:	53                   	push   ebx
c0015ece:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0015ed5:	50                   	push   eax
c0015ed6:	e8 af 22 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0015edb:	5e                   	pop    esi
c0015edc:	5f                   	pop    edi
c0015edd:	6a 01                	push   0x1
c0015edf:	55                   	push   ebp
c0015ee0:	e8 c3 22 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0015ee5:	83 c4 10             	add    esp,0x10
c0015ee8:	85 c0                	test   eax,eax
c0015eea:	0f 85 b9 06 00 00    	jne    c00165a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0015ef0:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0015ef8:	83 ec 0c             	sub    esp,0xc
c0015efb:	6a 34                	push   0x34
c0015efd:	e8 8d 9c ff ff       	call   c000fb8f <malloc>
c0015f02:	5b                   	pop    ebx
c0015f03:	89 c7                	mov    edi,eax
c0015f05:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0015f09:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015f0c:	53                   	push   ebx
c0015f0d:	57                   	push   edi
c0015f0e:	6a 00                	push   0x0
c0015f10:	6a 34                	push   0x34
c0015f12:	55                   	push   ebp
c0015f13:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015f16:	83 c4 20             	add    esp,0x20
c0015f19:	85 c0                	test   eax,eax
c0015f1b:	0f 85 88 06 00 00    	jne    c00165a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0015f21:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015f27:	0f 85 7c 06 00 00    	jne    c00165a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0015f2d:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015f30:	85 c0                	test   eax,eax
c0015f32:	0f 84 71 06 00 00    	je     c00165a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0015f38:	31 d2                	xor    edx,edx
c0015f3a:	51                   	push   ecx
c0015f3b:	52                   	push   edx
c0015f3c:	50                   	push   eax
c0015f3d:	55                   	push   ebp
c0015f3e:	e8 23 23 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015f43:	83 c4 10             	add    esp,0x10
c0015f46:	85 c0                	test   eax,eax
c0015f48:	0f 85 5b 06 00 00    	jne    c00165a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0015f4e:	83 ec 0c             	sub    esp,0xc
c0015f51:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0015f54:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015f58:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015f5c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015f60:	0f af c2             	imul   eax,edx
c0015f63:	50                   	push   eax
c0015f64:	e8 26 9c ff ff       	call   c000fb8f <malloc>
c0015f69:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015f6c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015f70:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015f77:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015f7b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015f7f:	0f af c2             	imul   eax,edx
c0015f82:	99                   	cdq    
c0015f83:	52                   	push   edx
c0015f84:	50                   	push   eax
c0015f85:	55                   	push   ebp
c0015f86:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015f89:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0015f8c:	83 c4 20             	add    esp,0x20
c0015f8f:	85 c0                	test   eax,eax
c0015f91:	0f 84 12 06 00 00    	je     c00165a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0015f97:	52                   	push   edx
c0015f98:	31 d2                	xor    edx,edx
c0015f9a:	52                   	push   edx
c0015f9b:	50                   	push   eax
c0015f9c:	55                   	push   ebp
c0015f9d:	e8 c4 22 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015fa2:	83 c4 10             	add    esp,0x10
c0015fa5:	85 c0                	test   eax,eax
c0015fa7:	0f 85 fc 05 00 00    	jne    c00165a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0015fad:	83 ec 0c             	sub    esp,0xc
c0015fb0:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015fb4:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015fb8:	31 f6                	xor    esi,esi
c0015fba:	0f af c2             	imul   eax,edx
c0015fbd:	50                   	push   eax
c0015fbe:	e8 cc 9b ff ff       	call   c000fb8f <malloc>
c0015fc3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015fc6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015fca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015fcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015fd1:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015fd5:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015fd9:	0f af c2             	imul   eax,edx
c0015fdc:	99                   	cdq    
c0015fdd:	52                   	push   edx
c0015fde:	50                   	push   eax
c0015fdf:	55                   	push   ebp
c0015fe0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015fe3:	83 c4 20             	add    esp,0x20
c0015fe6:	0f b7 de             	movzx  ebx,si
c0015fe9:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0015fed:	0f 83 85 00 00 00    	jae    c0016078 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d5>
c0015ff3:	c1 e3 05             	shl    ebx,0x5
c0015ff6:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0015ffa:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0015ffd:	75 73                	jne    c0016072 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1cf>
c0015fff:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016002:	31 d2                	xor    edx,edx
c0016004:	89 04 24             	mov    DWORD PTR [esp],eax
c0016007:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001600a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001600e:	50                   	push   eax
c001600f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016012:	52                   	push   edx
c0016013:	50                   	push   eax
c0016014:	55                   	push   ebp
c0016015:	e8 4c 22 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c001601a:	83 c4 10             	add    esp,0x10
c001601d:	85 c0                	test   eax,eax
c001601f:	0f 85 84 05 00 00    	jne    c00165a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0016025:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001602c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001602f:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0016033:	31 d2                	xor    edx,edx
c0016035:	03 04 24             	add    eax,DWORD PTR [esp]
c0016038:	83 ec 0c             	sub    esp,0xc
c001603b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001603f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016046:	50                   	push   eax
c0016047:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001604b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001604f:	52                   	push   edx
c0016050:	50                   	push   eax
c0016051:	55                   	push   ebp
c0016052:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016055:	83 c4 1c             	add    esp,0x1c
c0016058:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001605b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001605e:	50                   	push   eax
c001605f:	6a 00                	push   0x0
c0016061:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016065:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0016069:	50                   	push   eax
c001606a:	e8 81 a4 fe ff       	call   c00004f0 <memset>
c001606f:	83 c4 10             	add    esp,0x10
c0016072:	46                   	inc    esi
c0016073:	e9 6e ff ff ff       	jmp    c0015fe6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0016078:	31 db                	xor    ebx,ebx
c001607a:	50                   	push   eax
c001607b:	68 00 01 00 00       	push   0x100
c0016080:	6a 00                	push   0x0
c0016082:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0016086:	50                   	push   eax
c0016087:	e8 64 a4 fe ff       	call   c00004f0 <memset>
c001608c:	83 c4 0c             	add    esp,0xc
c001608f:	68 00 01 00 00       	push   0x100
c0016094:	6a 00                	push   0x0
c0016096:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001609d:	50                   	push   eax
c001609e:	e8 4d a4 fe ff       	call   c00004f0 <memset>
c00160a3:	83 c4 10             	add    esp,0x10
c00160a6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00160ad:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00160b5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00160bd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00160c5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00160cd:	0f b7 f3             	movzx  esi,bx
c00160d0:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c00160d4:	0f 83 27 01 00 00    	jae    c0016201 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x35e>
c00160da:	6b f6 28             	imul   esi,esi,0x28
c00160dd:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c00160e1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00160e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00160e8:	50                   	push   eax
c00160e9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00160ed:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00160f1:	8b 06                	mov    eax,DWORD PTR [esi]
c00160f3:	6b d2 28             	imul   edx,edx,0x28
c00160f6:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00160fa:	31 d2                	xor    edx,edx
c00160fc:	52                   	push   edx
c00160fd:	50                   	push   eax
c00160fe:	55                   	push   ebp
c00160ff:	e8 62 21 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0016104:	83 c4 0c             	add    esp,0xc
c0016107:	6a 20                	push   0x20
c0016109:	6a 00                	push   0x0
c001610b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016112:	51                   	push   ecx
c0016113:	e8 d8 a3 fe ff       	call   c00004f0 <memset>
c0016118:	58                   	pop    eax
c0016119:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001611c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0016120:	52                   	push   edx
c0016121:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0016128:	51                   	push   ecx
c0016129:	6a 00                	push   0x0
c001612b:	6a 1f                	push   0x1f
c001612d:	55                   	push   ebp
c001612e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016131:	83 c4 1c             	add    esp,0x1c
c0016134:	6a 09                	push   0x9
c0016136:	68 c2 51 02 c0       	push   0xc00251c2
c001613b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016142:	51                   	push   ecx
c0016143:	e8 38 a2 fe ff       	call   c0000380 <memcmp>
c0016148:	83 c4 10             	add    esp,0x10
c001614b:	85 c0                	test   eax,eax
c001614d:	75 1e                	jne    c001616d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2ca>
c001614f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016152:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016156:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001615a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001615d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016160:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0016167:	89 d0                	mov    eax,edx
c0016169:	40                   	inc    eax
c001616a:	89 04 24             	mov    DWORD PTR [esp],eax
c001616d:	51                   	push   ecx
c001616e:	6a 09                	push   0x9
c0016170:	68 cc 51 02 c0       	push   0xc00251cc
c0016175:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001617c:	50                   	push   eax
c001617d:	e8 fe a1 fe ff       	call   c0000380 <memcmp>
c0016182:	83 c4 10             	add    esp,0x10
c0016185:	85 c0                	test   eax,eax
c0016187:	75 1e                	jne    c00161a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x304>
c0016189:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001618c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016190:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0016194:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016197:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001619a:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00161a1:	89 d0                	mov    eax,edx
c00161a3:	40                   	inc    eax
c00161a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00161a7:	52                   	push   edx
c00161a8:	52                   	push   edx
c00161a9:	68 98 51 02 c0       	push   0xc0025198
c00161ae:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00161b5:	50                   	push   eax
c00161b6:	e8 95 a5 fe ff       	call   c0000750 <strcmp>
c00161bb:	83 c4 10             	add    esp,0x10
c00161be:	85 c0                	test   eax,eax
c00161c0:	75 0f                	jne    c00161d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32e>
c00161c2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00161c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00161c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00161cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00161d1:	50                   	push   eax
c00161d2:	50                   	push   eax
c00161d3:	68 a0 51 02 c0       	push   0xc00251a0
c00161d8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00161df:	50                   	push   eax
c00161e0:	e8 6b a5 fe ff       	call   c0000750 <strcmp>
c00161e5:	83 c4 10             	add    esp,0x10
c00161e8:	85 c0                	test   eax,eax
c00161ea:	75 0f                	jne    c00161fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x358>
c00161ec:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00161ef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00161f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00161f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00161fb:	43                   	inc    ebx
c00161fc:	e9 cc fe ff ff       	jmp    c00160cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22a>
c0016201:	31 d2                	xor    edx,edx
c0016203:	50                   	push   eax
c0016204:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016208:	52                   	push   edx
c0016209:	50                   	push   eax
c001620a:	55                   	push   ebp
c001620b:	e8 56 20 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0016210:	58                   	pop    eax
c0016211:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016215:	e8 75 99 ff ff       	call   c000fb8f <malloc>
c001621a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001621d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0016221:	31 d2                	xor    edx,edx
c0016223:	58                   	pop    eax
c0016224:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016228:	53                   	push   ebx
c0016229:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001622d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016231:	52                   	push   edx
c0016232:	50                   	push   eax
c0016233:	55                   	push   ebp
c0016234:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016237:	83 c4 14             	add    esp,0x14
c001623a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001623e:	e8 4c 99 ff ff       	call   c000fb8f <malloc>
c0016243:	31 d2                	xor    edx,edx
c0016245:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016249:	83 c4 0c             	add    esp,0xc
c001624c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016250:	52                   	push   edx
c0016251:	50                   	push   eax
c0016252:	55                   	push   ebp
c0016253:	e8 0e 20 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0016258:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001625b:	31 d2                	xor    edx,edx
c001625d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016260:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016264:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016268:	52                   	push   edx
c0016269:	50                   	push   eax
c001626a:	55                   	push   ebp
c001626b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001626e:	83 c4 20             	add    esp,0x20
c0016271:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0016276:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001627e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016282:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016286:	39 34 24             	cmp    DWORD PTR [esp],esi
c0016289:	0f 84 1e 03 00 00    	je     c00165ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x70a>
c001628f:	8b 84 b4 50 01 00 00 	mov    eax,DWORD PTR [esp+esi*4+0x150]
c0016296:	31 d2                	xor    edx,edx
c0016298:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001629c:	c1 e8 03             	shr    eax,0x3
c001629f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00162a3:	56                   	push   esi
c00162a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00162a8:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00162ac:	52                   	push   edx
c00162ad:	50                   	push   eax
c00162ae:	55                   	push   ebp
c00162af:	e8 b2 1f ff ff       	call   c0008266 <File::seek(unsigned long long)>
c00162b4:	58                   	pop    eax
c00162b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162b9:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00162c0:	e8 ca 98 ff ff       	call   c000fb8f <malloc>
c00162c5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00162c8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00162cc:	31 d2                	xor    edx,edx
c00162ce:	58                   	pop    eax
c00162cf:	8d 44 24 58          	lea    eax,[esp+0x58]
c00162d3:	50                   	push   eax
c00162d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00162d8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00162dc:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00162e3:	52                   	push   edx
c00162e4:	50                   	push   eax
c00162e5:	55                   	push   ebp
c00162e6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00162e9:	83 c4 20             	add    esp,0x20
c00162ec:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00162f4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00162f8:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c00162fc:	0f 8d 8f 02 00 00    	jge    c0016591 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ee>
c0016302:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016306:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001630a:	31 c9                	xor    ecx,ecx
c001630c:	8b 04 f0             	mov    eax,DWORD PTR [eax+esi*8]
c001630f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016313:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016317:	8b 44 f0 04          	mov    eax,DWORD PTR [eax+esi*8+0x4]
c001631b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001631f:	c1 e8 08             	shr    eax,0x8
c0016322:	89 c3                	mov    ebx,eax
c0016324:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016328:	c1 e3 04             	shl    ebx,0x4
c001632b:	03 5c 24 30          	add    ebx,DWORD PTR [esp+0x30]
c001632f:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0016332:	85 d2                	test   edx,edx
c0016334:	0f 85 97 00 00 00    	jne    c00163d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52e>
c001633a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001633e:	83 ec 0c             	sub    esp,0xc
c0016341:	03 33                	add    esi,DWORD PTR [ebx]
c0016343:	56                   	push   esi
c0016344:	e8 4d f8 ff ff       	call   c0015b96 <Thr::getAddressOfKernelSymbol(char const*)>
c0016349:	83 c4 10             	add    esp,0x10
c001634c:	89 c2                	mov    edx,eax
c001634e:	b1 01                	mov    cl,0x1
c0016350:	85 c0                	test   eax,eax
c0016352:	75 7d                	jne    c00163d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52e>
c0016354:	88 4c 24 3c          	mov    BYTE PTR [esp+0x3c],cl
c0016358:	83 ec 0c             	sub    esp,0xc
c001635b:	56                   	push   esi
c001635c:	e8 af a7 ff ff       	call   c0010b10 <KeResolveCompatibilitySymbol(char*)>
c0016361:	83 c4 10             	add    esp,0x10
c0016364:	89 c2                	mov    edx,eax
c0016366:	85 c0                	test   eax,eax
c0016368:	8a 4c 24 3c          	mov    cl,BYTE PTR [esp+0x3c]
c001636c:	75 63                	jne    c00163d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52e>
c001636e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016372:	51                   	push   ecx
c0016373:	51                   	push   ecx
c0016374:	56                   	push   esi
c0016375:	68 d6 51 02 c0       	push   0xc00251d6
c001637a:	e8 fd 0b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001637f:	5e                   	pop    esi
c0016380:	58                   	pop    eax
c0016381:	68 f0 51 02 c0       	push   0xc00251f0
c0016386:	8d b4 24 5c 02 00 00 	lea    esi,[esp+0x25c]
c001638d:	56                   	push   esi
c001638e:	e8 ad a2 fe ff       	call   c0000640 <strcpy>
c0016393:	58                   	pop    eax
c0016394:	5a                   	pop    edx
c0016395:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016399:	03 03                	add    eax,DWORD PTR [ebx]
c001639b:	50                   	push   eax
c001639c:	56                   	push   esi
c001639d:	e8 9e a4 fe ff       	call   c0000840 <strcat>
c00163a2:	59                   	pop    ecx
c00163a3:	5b                   	pop    ebx
c00163a4:	68 8a 52 02 c0       	push   0xc002528a
c00163a9:	56                   	push   esi
c00163aa:	e8 91 a4 fe ff       	call   c0000840 <strcat>
c00163af:	83 c4 10             	add    esp,0x10
c00163b2:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00163b7:	0f 84 8e 01 00 00    	je     c001654b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00163bd:	83 ec 0c             	sub    esp,0xc
c00163c0:	56                   	push   esi
c00163c1:	e8 20 9c ff ff       	call   c000ffe6 <KePanic(char const*)>
c00163c6:	83 c4 10             	add    esp,0x10
c00163c9:	8a 4c 24 37          	mov    cl,BYTE PTR [esp+0x37]
c00163cd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00163d1:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00163d6:	83 f8 01             	cmp    eax,0x1
c00163d9:	0f 85 ab 00 00 00    	jne    c001648a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e7>
c00163df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163e3:	8b 9c 24 74 03 00 00 	mov    ebx,DWORD PTR [esp+0x374]
c00163ea:	2b 5c 24 1c          	sub    ebx,DWORD PTR [esp+0x1c]
c00163ee:	01 d8                	add    eax,ebx
c00163f0:	81 7c 24 14 01 04 00 00 	cmp    DWORD PTR [esp+0x14],0x401
c00163f8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00163fc:	0f 94 44 24 3c       	sete   BYTE PTR [esp+0x3c]
c0016401:	81 7c 24 14 01 01 00 00 	cmp    DWORD PTR [esp+0x14],0x101
c0016409:	0f 94 c0             	sete   al
c001640c:	89 c6                	mov    esi,eax
c001640e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016412:	0b 74 24 3c          	or     esi,DWORD PTR [esp+0x3c]
c0016416:	8b 00                	mov    eax,DWORD PTR [eax]
c0016418:	84 c9                	test   cl,cl
c001641a:	89 f1                	mov    ecx,esi
c001641c:	0f b6 f1             	movzx  esi,cl
c001641f:	74 39                	je     c001645a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b7>
c0016421:	8d 1c 02             	lea    ebx,[edx+eax*1]
c0016424:	85 f6                	test   esi,esi
c0016426:	75 15                	jne    c001643d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59a>
c0016428:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001642c:	66 83 f8 0c          	cmp    ax,0xc
c0016430:	76 05                	jbe    c0016437 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x594>
c0016432:	b8 0c 00 00 00       	mov    eax,0xc
c0016437:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c001643b:	76 42                	jbe    c001647f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5dc>
c001643d:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0016442:	0f 84 03 01 00 00    	je     c001654b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0016448:	83 ec 0c             	sub    esp,0xc
c001644b:	68 07 52 02 c0       	push   0xc0025207
c0016450:	e8 91 9b ff ff       	call   c000ffe6 <KePanic(char const*)>
c0016455:	83 c4 10             	add    esp,0x10
c0016458:	eb 25                	jmp    c001647f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5dc>
c001645a:	01 c3                	add    ebx,eax
c001645c:	85 f6                	test   esi,esi
c001645e:	89 d8                	mov    eax,ebx
c0016460:	75 0d                	jne    c001646f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0016462:	0f b7 4f 30          	movzx  ecx,WORD PTR [edi+0x30]
c0016466:	3b 4c 24 24          	cmp    ecx,DWORD PTR [esp+0x24]
c001646a:	77 03                	ja     c001646f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001646c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c001646f:	8d 90 00 00 00 28    	lea    edx,[eax+0x28000000]
c0016475:	81 fa ff ff ff 00    	cmp    edx,0xffffff
c001647b:	76 02                	jbe    c001647f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5dc>
c001647d:	89 c3                	mov    ebx,eax
c001647f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016483:	89 18                	mov    DWORD PTR [eax],ebx
c0016485:	e9 fe 00 00 00       	jmp    c0016588 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e5>
c001648a:	83 f8 02             	cmp    eax,0x2
c001648d:	0f 85 8f 00 00 00    	jne    c0016522 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0016493:	8b 9c 24 74 03 00 00 	mov    ebx,DWORD PTR [esp+0x374]
c001649a:	2b 5c 24 1c          	sub    ebx,DWORD PTR [esp+0x1c]
c001649e:	03 5c 24 20          	add    ebx,DWORD PTR [esp+0x20]
c00164a2:	81 7c 24 14 01 04 00 00 	cmp    DWORD PTR [esp+0x14],0x401
c00164aa:	74 21                	je     c00164cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c00164ac:	81 7c 24 14 01 01 00 00 	cmp    DWORD PTR [esp+0x14],0x101
c00164b4:	74 17                	je     c00164cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c00164b6:	0f b7 77 30          	movzx  esi,WORD PTR [edi+0x30]
c00164ba:	b8 0a 00 00 00       	mov    eax,0xa
c00164bf:	83 fe 0e             	cmp    esi,0xe
c00164c2:	77 03                	ja     c00164c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c00164c4:	8d 46 fc             	lea    eax,[esi-0x4]
c00164c7:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c00164cb:	76 27                	jbe    c00164f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x651>
c00164cd:	88 4c 24 24          	mov    BYTE PTR [esp+0x24],cl
c00164d1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00164d5:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00164da:	74 6f                	je     c001654b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00164dc:	83 ec 0c             	sub    esp,0xc
c00164df:	68 23 52 02 c0       	push   0xc0025223
c00164e4:	e8 fd 9a ff ff       	call   c000ffe6 <KePanic(char const*)>
c00164e9:	83 c4 10             	add    esp,0x10
c00164ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00164f0:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
c00164f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00164f6:	84 c9                	test   cl,cl
c00164f8:	74 13                	je     c001650d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00164fa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00164fe:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0016505:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c0016509:	01 c1                	add    ecx,eax
c001650b:	eb 06                	jmp    c0016513 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c001650d:	89 c1                	mov    ecx,eax
c001650f:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c0016513:	01 ca                	add    edx,ecx
c0016515:	3d fe ff 0f 00       	cmp    eax,0xffffe
c001651a:	77 02                	ja     c001651e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c001651c:	89 c2                	mov    edx,eax
c001651e:	89 13                	mov    DWORD PTR [ebx],edx
c0016520:	eb 66                	jmp    c0016588 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e5>
c0016522:	52                   	push   edx
c0016523:	52                   	push   edx
c0016524:	50                   	push   eax
c0016525:	68 3f 52 02 c0       	push   0xc002523f
c001652a:	e8 4d 0a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001652f:	83 c4 10             	add    esp,0x10
c0016532:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0016537:	74 12                	je     c001654b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0016539:	83 ec 0c             	sub    esp,0xc
c001653c:	68 4a 52 02 c0       	push   0xc002524a
c0016541:	e8 a0 9a ff ff       	call   c000ffe6 <KePanic(char const*)>
c0016546:	83 c4 10             	add    esp,0x10
c0016549:	eb 3d                	jmp    c0016588 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e5>
c001654b:	83 ec 0c             	sub    esp,0xc
c001654e:	55                   	push   ebp
c001654f:	e8 b2 1c ff ff       	call   c0008206 <File::close()>
c0016554:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016557:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001655a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001655d:	59                   	pop    ecx
c001655e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016562:	e8 38 96 ff ff       	call   c000fb9f <free>
c0016567:	5b                   	pop    ebx
c0016568:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001656c:	e8 2e 96 ff ff       	call   c000fb9f <free>
c0016571:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016574:	e8 26 96 ff ff       	call   c000fb9f <free>
c0016579:	5e                   	pop    esi
c001657a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001657e:	e8 1c 96 ff ff       	call   c000fb9f <free>
c0016583:	83 c4 10             	add    esp,0x10
c0016586:	eb 21                	jmp    c00165a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0016588:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001658c:	e9 63 fd ff ff       	jmp    c00162f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x451>
c0016591:	83 ec 0c             	sub    esp,0xc
c0016594:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016598:	e8 02 96 ff ff       	call   c000fb9f <free>
c001659d:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00165a1:	83 c4 10             	add    esp,0x10
c00165a4:	e9 d9 fc ff ff       	jmp    c0016282 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c00165a9:	31 c0                	xor    eax,eax
c00165ab:	eb 33                	jmp    c00165e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73d>
c00165ad:	83 ec 0c             	sub    esp,0xc
c00165b0:	55                   	push   ebp
c00165b1:	e8 50 1c ff ff       	call   c0008206 <File::close()>
c00165b6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00165b9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00165bc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00165bf:	58                   	pop    eax
c00165c0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00165c4:	e8 d6 95 ff ff       	call   c000fb9f <free>
c00165c9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00165cc:	e8 ce 95 ff ff       	call   c000fb9f <free>
c00165d1:	5a                   	pop    edx
c00165d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00165d6:	e8 c4 95 ff ff       	call   c000fb9f <free>
c00165db:	83 c4 10             	add    esp,0x10
c00165de:	b0 01                	mov    al,0x1
c00165e0:	81 c4 5c 03 00 00    	add    esp,0x35c
c00165e6:	5b                   	pop    ebx
c00165e7:	5e                   	pop    esi
c00165e8:	5f                   	pop    edi
c00165e9:	5d                   	pop    ebp
c00165ea:	c3                   	ret    

c00165eb <Thr::getDriverBaseFromAddress(unsigned long)>:
c00165eb:	56                   	push   esi
c00165ec:	31 d2                	xor    edx,edx
c00165ee:	53                   	push   ebx
c00165ef:	8b 1d 60 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f260
c00165f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165f9:	39 d3                	cmp    ebx,edx
c00165fb:	7e 1b                	jle    c0016618 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00165fd:	8b 04 95 80 f4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0b80]
c0016604:	39 c8                	cmp    eax,ecx
c0016606:	77 0d                	ja     c0016615 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0016608:	8b 34 95 80 f2 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd0d80]
c001660f:	01 c6                	add    esi,eax
c0016611:	39 ce                	cmp    esi,ecx
c0016613:	77 05                	ja     c001661a <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0016615:	42                   	inc    edx
c0016616:	eb e1                	jmp    c00165f9 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0016618:	31 c0                	xor    eax,eax
c001661a:	5b                   	pop    ebx
c001661b:	5e                   	pop    esi
c001661c:	c3                   	ret    

c001661d <Thr::getDriverNameFromAddress(unsigned long)>:
c001661d:	53                   	push   ebx
c001661e:	31 c0                	xor    eax,eax
c0016620:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016624:	8b 1d 60 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f260
c001662a:	39 c3                	cmp    ebx,eax
c001662c:	7e 22                	jle    c0016650 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001662e:	8b 14 85 80 f4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0b80]
c0016635:	39 ca                	cmp    edx,ecx
c0016637:	77 14                	ja     c001664d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0016639:	03 14 85 80 f2 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd0d80]
c0016640:	39 ca                	cmp    edx,ecx
c0016642:	76 09                	jbe    c001664d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0016644:	8b 04 85 80 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0980]
c001664b:	eb 05                	jmp    c0016652 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001664d:	40                   	inc    eax
c001664e:	eb da                	jmp    c001662a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0016650:	31 c0                	xor    eax,eax
c0016652:	5b                   	pop    ebx
c0016653:	c3                   	ret    

c0016654 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0016654:	53                   	push   ebx
c0016655:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0016659:	53                   	push   ebx
c001665a:	e8 8c ff ff ff       	call   c00165eb <Thr::getDriverBaseFromAddress(unsigned long)>
c001665f:	5a                   	pop    edx
c0016660:	31 d2                	xor    edx,edx
c0016662:	85 c0                	test   eax,eax
c0016664:	74 04                	je     c001666a <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0016666:	89 da                	mov    edx,ebx
c0016668:	29 c2                	sub    edx,eax
c001666a:	89 d0                	mov    eax,edx
c001666c:	5b                   	pop    ebx
c001666d:	c3                   	ret    

c001666e <Thr::loadDLL(char const*, bool)>:
c001666e:	55                   	push   ebp
c001666f:	57                   	push   edi
c0016670:	56                   	push   esi
c0016671:	53                   	push   ebx
c0016672:	81 ec 34 01 00 00    	sub    esp,0x134
c0016678:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001667f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016686:	56                   	push   esi
c0016687:	68 62 52 02 c0       	push   0xc0025262
c001668c:	e8 eb 08 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016691:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016698:	e8 f2 94 ff ff       	call   c000fb8f <malloc>
c001669d:	83 c4 0c             	add    esp,0xc
c00166a0:	89 c3                	mov    ebx,eax
c00166a2:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c00166a8:	56                   	push   esi
c00166a9:	50                   	push   eax
c00166aa:	e8 db 1a ff ff       	call   c000818a <File::File(char const*, Process*)>
c00166af:	83 c4 10             	add    esp,0x10
c00166b2:	85 db                	test   ebx,ebx
c00166b4:	75 3c                	jne    c00166f2 <Thr::loadDLL(char const*, bool)+0x84>
c00166b6:	89 f8                	mov    eax,edi
c00166b8:	84 c0                	test   al,al
c00166ba:	0f 84 f3 01 00 00    	je     c00168b3 <Thr::loadDLL(char const*, bool)+0x245>
c00166c0:	55                   	push   ebp
c00166c1:	55                   	push   ebp
c00166c2:	68 73 52 02 c0       	push   0xc0025273
c00166c7:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00166cb:	55                   	push   ebp
c00166cc:	e8 6f 9f fe ff       	call   c0000640 <strcpy>
c00166d1:	58                   	pop    eax
c00166d2:	5a                   	pop    edx
c00166d3:	56                   	push   esi
c00166d4:	55                   	push   ebp
c00166d5:	e8 66 a1 fe ff       	call   c0000840 <strcat>
c00166da:	59                   	pop    ecx
c00166db:	58                   	pop    eax
c00166dc:	68 8a 52 02 c0       	push   0xc002528a
c00166e1:	55                   	push   ebp
c00166e2:	e8 59 a1 fe ff       	call   c0000840 <strcat>
c00166e7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00166ea:	e8 f7 98 ff ff       	call   c000ffe6 <KePanic(char const*)>
c00166ef:	83 c4 10             	add    esp,0x10
c00166f2:	51                   	push   ecx
c00166f3:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00166f7:	50                   	push   eax
c00166f8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00166fc:	50                   	push   eax
c00166fd:	53                   	push   ebx
c00166fe:	e8 a7 1d ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c0016703:	83 c4 10             	add    esp,0x10
c0016706:	89 c5                	mov    ebp,eax
c0016708:	85 db                	test   ebx,ebx
c001670a:	74 0c                	je     c0016718 <Thr::loadDLL(char const*, bool)+0xaa>
c001670c:	83 ec 0c             	sub    esp,0xc
c001670f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016711:	53                   	push   ebx
c0016712:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016715:	83 c4 10             	add    esp,0x10
c0016718:	83 ec 0c             	sub    esp,0xc
c001671b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0016720:	50                   	push   eax
c0016721:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016725:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016729:	55                   	push   ebp
c001672a:	68 8c 52 02 c0       	push   0xc002528c
c001672f:	e8 48 08 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016734:	83 c4 20             	add    esp,0x20
c0016737:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001673c:	75 0a                	jne    c0016748 <Thr::loadDLL(char const*, bool)+0xda>
c001673e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016742:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0016746:	75 3c                	jne    c0016784 <Thr::loadDLL(char const*, bool)+0x116>
c0016748:	89 f8                	mov    eax,edi
c001674a:	84 c0                	test   al,al
c001674c:	0f 84 49 01 00 00    	je     c001689b <Thr::loadDLL(char const*, bool)+0x22d>
c0016752:	51                   	push   ecx
c0016753:	51                   	push   ecx
c0016754:	68 ad 52 02 c0       	push   0xc00252ad
c0016759:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001675d:	53                   	push   ebx
c001675e:	e8 dd 9e fe ff       	call   c0000640 <strcpy>
c0016763:	5d                   	pop    ebp
c0016764:	58                   	pop    eax
c0016765:	56                   	push   esi
c0016766:	53                   	push   ebx
c0016767:	e8 d4 a0 fe ff       	call   c0000840 <strcat>
c001676c:	58                   	pop    eax
c001676d:	5a                   	pop    edx
c001676e:	68 8a 52 02 c0       	push   0xc002528a
c0016773:	53                   	push   ebx
c0016774:	e8 c7 a0 fe ff       	call   c0000840 <strcat>
c0016779:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001677c:	e8 65 98 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0016781:	83 c4 10             	add    esp,0x10
c0016784:	52                   	push   edx
c0016785:	6a 03                	push   0x3
c0016787:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001678b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001678f:	05 ff 0f 00 00       	add    eax,0xfff
c0016794:	83 d2 00             	adc    edx,0x0
c0016797:	0f ac d0 0c          	shrd   eax,edx,0xc
c001679b:	50                   	push   eax
c001679c:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c00167a2:	e8 db d5 ff ff       	call   c0013d82 <VAS::allocatePages(int, int)>
c00167a7:	59                   	pop    ecx
c00167a8:	89 c3                	mov    ebx,eax
c00167aa:	5d                   	pop    ebp
c00167ab:	50                   	push   eax
c00167ac:	68 76 45 02 c0       	push   0xc0024576
c00167b1:	e8 c6 07 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00167b6:	89 34 24             	mov    DWORD PTR [esp],esi
c00167b9:	e8 b2 9d fe ff       	call   c0000570 <strlen>
c00167be:	8b 2d 60 f2 02 c0    	mov    ebp,DWORD PTR ds:0xc002f260
c00167c4:	40                   	inc    eax
c00167c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00167c8:	e8 c2 93 ff ff       	call   c000fb8f <malloc>
c00167cd:	89 04 ad 80 f6 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd0980],eax
c00167d4:	58                   	pop    eax
c00167d5:	a1 60 f2 02 c0       	mov    eax,ds:0xc002f260
c00167da:	5a                   	pop    edx
c00167db:	56                   	push   esi
c00167dc:	ff 34 85 80 f6 02 c0 	push   DWORD PTR [eax*4-0x3ffd0980]
c00167e3:	e8 58 9e fe ff       	call   c0000640 <strcpy>
c00167e8:	a1 60 f2 02 c0       	mov    eax,ds:0xc002f260
c00167ed:	8d 50 01             	lea    edx,[eax+0x1]
c00167f0:	89 1c 85 80 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0b80],ebx
c00167f7:	89 15 60 f2 02 c0    	mov    DWORD PTR ds:0xc002f260,edx
c00167fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016801:	83 c4 0c             	add    esp,0xc
c0016804:	89 14 85 80 f2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0d80],edx
c001680b:	6a 01                	push   0x1
c001680d:	53                   	push   ebx
c001680e:	56                   	push   esi
c001680f:	e8 8f f6 ff ff       	call   c0015ea3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0016814:	83 c4 10             	add    esp,0x10
c0016817:	0f b6 c0             	movzx  eax,al
c001681a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001681e:	85 c0                	test   eax,eax
c0016820:	0f 85 89 00 00 00    	jne    c00168af <Thr::loadDLL(char const*, bool)+0x241>
c0016826:	89 f8                	mov    eax,edi
c0016828:	84 c0                	test   al,al
c001682a:	74 73                	je     c001689f <Thr::loadDLL(char const*, bool)+0x231>
c001682c:	83 ec 0c             	sub    esp,0xc
c001682f:	68 c6 52 02 c0       	push   0xc00252c6
c0016834:	e8 ad 97 ff ff       	call   c000ffe6 <KePanic(char const*)>
c0016839:	83 c4 10             	add    esp,0x10
c001683c:	eb 61                	jmp    c001689f <Thr::loadDLL(char const*, bool)+0x231>
c001683e:	50                   	push   eax
c001683f:	50                   	push   eax
c0016840:	89 e8                	mov    eax,ebp
c0016842:	c1 e0 0c             	shl    eax,0xc
c0016845:	01 d8                	add    eax,ebx
c0016847:	50                   	push   eax
c0016848:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c001684e:	e8 31 d0 ff ff       	call   c0013884 <VAS::getPageTableEntry(unsigned long)>
c0016853:	83 c4 10             	add    esp,0x10
c0016856:	8b 00                	mov    eax,DWORD PTR [eax]
c0016858:	a8 60                	test   al,0x60
c001685a:	75 11                	jne    c001686d <Thr::loadDLL(char const*, bool)+0x1ff>
c001685c:	83 ec 0c             	sub    esp,0xc
c001685f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016864:	50                   	push   eax
c0016865:	e8 07 99 ff ff       	call   c0010171 <Phys::freePage(unsigned long)>
c001686a:	83 c4 10             	add    esp,0x10
c001686d:	45                   	inc    ebp
c001686e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016872:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016876:	05 ff 0f 00 00       	add    eax,0xfff
c001687b:	bf 00 00 00 00       	mov    edi,0x0
c0016880:	83 d2 00             	adc    edx,0x0
c0016883:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016887:	c1 ea 0c             	shr    edx,0xc
c001688a:	39 c5                	cmp    ebp,eax
c001688c:	89 d1                	mov    ecx,edx
c001688e:	89 f8                	mov    eax,edi
c0016890:	19 c8                	sbb    eax,ecx
c0016892:	72 aa                	jb     c001683e <Thr::loadDLL(char const*, bool)+0x1d0>
c0016894:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016899:	75 18                	jne    c00168b3 <Thr::loadDLL(char const*, bool)+0x245>
c001689b:	31 db                	xor    ebx,ebx
c001689d:	eb 14                	jmp    c00168b3 <Thr::loadDLL(char const*, bool)+0x245>
c001689f:	83 ec 0c             	sub    esp,0xc
c00168a2:	68 e5 52 02 c0       	push   0xc00252e5
c00168a7:	e8 3a 97 ff ff       	call   c000ffe6 <KePanic(char const*)>
c00168ac:	83 c4 10             	add    esp,0x10
c00168af:	31 ed                	xor    ebp,ebp
c00168b1:	eb bb                	jmp    c001686e <Thr::loadDLL(char const*, bool)+0x200>
c00168b3:	81 c4 2c 01 00 00    	add    esp,0x12c
c00168b9:	89 d8                	mov    eax,ebx
c00168bb:	5b                   	pop    ebx
c00168bc:	5e                   	pop    esi
c00168bd:	5f                   	pop    edi
c00168be:	5d                   	pop    ebp
c00168bf:	c3                   	ret    

c00168c0 <Thr::executeDLL(unsigned long, void*)>:
c00168c0:	56                   	push   esi
c00168c1:	53                   	push   ebx
c00168c2:	52                   	push   edx
c00168c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00168c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00168cb:	85 db                	test   ebx,ebx
c00168cd:	75 10                	jne    c00168df <Thr::executeDLL(unsigned long, void*)+0x1f>
c00168cf:	83 ec 0c             	sub    esp,0xc
c00168d2:	68 01 53 02 c0       	push   0xc0025301
c00168d7:	e8 0a 97 ff ff       	call   c000ffe6 <KePanic(char const*)>
c00168dc:	83 c4 10             	add    esp,0x10
c00168df:	50                   	push   eax
c00168e0:	50                   	push   eax
c00168e1:	53                   	push   ebx
c00168e2:	68 2b 53 02 c0       	push   0xc002532b
c00168e7:	e8 90 06 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00168ec:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00168f0:	89 d8                	mov    eax,ebx
c00168f2:	83 c4 14             	add    esp,0x14
c00168f5:	5b                   	pop    ebx
c00168f6:	5e                   	pop    esi
c00168f7:	ff e0                	jmp    eax

c00168f9 <KeProcessExec(Process*, char const*)>:
c00168f9:	56                   	push   esi
c00168fa:	53                   	push   ebx
c00168fb:	83 ec 04             	sub    esp,0x4
c00168fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016902:	8b b3 b2 05 00 00    	mov    esi,DWORD PTR [ebx+0x5b2]
c0016908:	85 f6                	test   esi,esi
c001690a:	74 16                	je     c0016922 <KeProcessExec(Process*, char const*)+0x29>
c001690c:	83 ec 0c             	sub    esp,0xc
c001690f:	56                   	push   esi
c0016910:	e8 01 d2 ff ff       	call   c0013b16 <VAS::~VAS()>
c0016915:	58                   	pop    eax
c0016916:	5a                   	pop    edx
c0016917:	6a 14                	push   0x14
c0016919:	56                   	push   esi
c001691a:	e8 ca 6a ff ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c001691f:	83 c4 10             	add    esp,0x10
c0016922:	83 ec 0c             	sub    esp,0xc
c0016925:	6a 14                	push   0x14
c0016927:	e8 63 92 ff ff       	call   c000fb8f <malloc>
c001692c:	89 c6                	mov    esi,eax
c001692e:	58                   	pop    eax
c001692f:	5a                   	pop    edx
c0016930:	6a 00                	push   0x0
c0016932:	56                   	push   esi
c0016933:	e8 7e d6 ff ff       	call   c0013fb6 <VAS::VAS(bool)>
c0016938:	89 b3 b2 05 00 00    	mov    DWORD PTR [ebx+0x5b2],esi
c001693e:	59                   	pop    ecx
c001693f:	5e                   	pop    esi
c0016940:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016944:	50                   	push   eax
c0016945:	53                   	push   ebx
c0016946:	e8 a0 ef ff ff       	call   c00158eb <Thr::loadProgramIntoMemory(Process*, char const*)>
c001694b:	83 c4 14             	add    esp,0x14
c001694e:	31 c0                	xor    eax,eax
c0016950:	5b                   	pop    ebx
c0016951:	5e                   	pop    esi
c0016952:	c3                   	ret    
c0016953:	90                   	nop

c0016954 <userModeEntryPoint(void*)>:
c0016954:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c001695c:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0016961:	85 c0                	test   eax,eax
c0016963:	75 03                	jne    c0016968 <userModeEntryPoint(void*)+0x14>
c0016965:	fb                   	sti    
c0016966:	66 90                	xchg   ax,ax
c0016968:	fb                   	sti    
c0016969:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001696e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016971:	8b 80 ae 05 00 00    	mov    eax,DWORD PTR [eax+0x5ae]
c0016977:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001697b:	e9 bf 98 fe ff       	jmp    c000023f <goToUsermode>

c0016980 <changeTSS>:
c0016980:	83 ec 14             	sub    esp,0x14
c0016983:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016988:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001698b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0016990:	c1 e2 15             	shl    edx,0x15
c0016993:	29 d0                	sub    eax,edx
c0016995:	50                   	push   eax
c0016996:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c001699b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00169a1:	05 68 11 00 00       	add    eax,0x1168
c00169a6:	50                   	push   eax
c00169a7:	e8 b0 c4 ff ff       	call   c0012e5c <TSS::setESP(unsigned long)>
c00169ac:	83 c4 1c             	add    esp,0x1c
c00169af:	c3                   	ret    

c00169b0 <switchToThread(ThreadControlBlock*)>:
c00169b0:	57                   	push   edi
c00169b1:	8b 0d 2c fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa2c
c00169b7:	56                   	push   esi
c00169b8:	85 c9                	test   ecx,ecx
c00169ba:	53                   	push   ebx
c00169bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00169bf:	0f 85 9b 00 00 00    	jne    c0016a60 <switchToThread(ThreadControlBlock*)+0xb0>
c00169c5:	0f b6 53 44          	movzx  edx,BYTE PTR [ebx+0x44]
c00169c9:	81 fa ff 00 00 00    	cmp    edx,0xff
c00169cf:	0f 84 87 00 00 00    	je     c0016a5c <switchToThread(ThreadControlBlock*)+0xac>
c00169d5:	b8 00 04 00 00       	mov    eax,0x400
c00169da:	29 d0                	sub    eax,edx
c00169dc:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00169df:	d1 f8                	sar    eax,1
c00169e1:	01 d0                	add    eax,edx
c00169e3:	90                   	nop
c00169e4:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00169e7:	e8 bd 3e 00 00       	call   c001a8a9 <HalQueryPerformanceCounter()>
c00169ec:	a3 70 fa 02 c0       	mov    ds:0xc002fa70,eax
c00169f1:	89 15 74 fa 02 c0    	mov    DWORD PTR ds:0xc002fa74,edx
c00169f7:	89 c6                	mov    esi,eax
c00169f9:	89 d7                	mov    edi,edx
c00169fb:	2b 35 60 fa 02 c0    	sub    esi,DWORD PTR ds:0xc002fa60
c0016a01:	a3 60 fa 02 c0       	mov    ds:0xc002fa60,eax
c0016a06:	1b 3d 64 fa 02 c0    	sbb    edi,DWORD PTR ds:0xc002fa64
c0016a0c:	89 35 68 fa 02 c0    	mov    DWORD PTR ds:0xc002fa68,esi
c0016a12:	89 3d 6c fa 02 c0    	mov    DWORD PTR ds:0xc002fa6c,edi
c0016a18:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016a1e:	89 15 64 fa 02 c0    	mov    DWORD PTR ds:0xc002fa64,edx
c0016a24:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0016a27:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0016a2a:	01 c6                	add    esi,eax
c0016a2c:	11 d7                	adc    edi,edx
c0016a2e:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0016a31:	83 ec 0c             	sub    esp,0xc
c0016a34:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0016a37:	53                   	push   ebx
c0016a38:	e8 3a 98 fe ff       	call   c0000277 <switchToThreadASM>
c0016a3d:	0f 20 c0             	mov    eax,cr0
c0016a40:	83 c8 08             	or     eax,0x8
c0016a43:	0f 22 c0             	mov    cr0,eax
c0016a46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a4b:	83 c4 10             	add    esp,0x10
c0016a4e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016a52:	5b                   	pop    ebx
c0016a53:	5e                   	pop    esi
c0016a54:	5f                   	pop    edi
c0016a55:	e9 0e eb ff ff       	jmp    c0015568 <KeCheckAlarm(ThreadControlBlock*)>
c0016a5a:	66 90                	xchg   ax,ax
c0016a5c:	31 c0                	xor    eax,eax
c0016a5e:	eb 84                	jmp    c00169e4 <switchToThread(ThreadControlBlock*)+0x34>
c0016a60:	5b                   	pop    ebx
c0016a61:	c7 05 28 fa 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x1
c0016a6b:	5e                   	pop    esi
c0016a6c:	5f                   	pop    edi
c0016a6d:	c3                   	ret    
c0016a6e:	66 90                	xchg   ax,ax

c0016a70 <Process::addArgs(char**)>:
c0016a70:	57                   	push   edi
c0016a71:	56                   	push   esi
c0016a72:	53                   	push   ebx
c0016a73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016a77:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016a7b:	c7 86 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x5b6],0x0
c0016a85:	85 ff                	test   edi,edi
c0016a87:	74 4f                	je     c0016ad8 <Process::addArgs(char**)+0x68>
c0016a89:	8b 07                	mov    eax,DWORD PTR [edi]
c0016a8b:	85 c0                	test   eax,eax
c0016a8d:	74 49                	je     c0016ad8 <Process::addArgs(char**)+0x68>
c0016a8f:	31 db                	xor    ebx,ebx
c0016a91:	8d 76 00             	lea    esi,[esi+0x0]
c0016a94:	83 ec 0c             	sub    esp,0xc
c0016a97:	50                   	push   eax
c0016a98:	e8 d3 9a fe ff       	call   c0000570 <strlen>
c0016a9d:	83 c0 01             	add    eax,0x1
c0016aa0:	89 04 24             	mov    DWORD PTR [esp],eax
c0016aa3:	e8 e7 90 ff ff       	call   c000fb8f <malloc>
c0016aa8:	89 84 9e ba 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x5ba],eax
c0016aaf:	5a                   	pop    edx
c0016ab0:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0016ab3:	59                   	pop    ecx
c0016ab4:	83 c3 01             	add    ebx,0x1
c0016ab7:	52                   	push   edx
c0016ab8:	50                   	push   eax
c0016ab9:	e8 82 9b fe ff       	call   c0000640 <strcpy>
c0016abe:	8b 8e b6 05 00 00    	mov    ecx,DWORD PTR [esi+0x5b6]
c0016ac4:	83 c4 10             	add    esp,0x10
c0016ac7:	83 c1 01             	add    ecx,0x1
c0016aca:	89 8e b6 05 00 00    	mov    DWORD PTR [esi+0x5b6],ecx
c0016ad0:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0016ad3:	85 c0                	test   eax,eax
c0016ad5:	75 bd                	jne    c0016a94 <Process::addArgs(char**)+0x24>
c0016ad7:	90                   	nop
c0016ad8:	5b                   	pop    ebx
c0016ad9:	5e                   	pop    esi
c0016ada:	5f                   	pop    edi
c0016adb:	c3                   	ret    

c0016adc <Process::Process(char const*, Process*, char**)>:
c0016adc:	56                   	push   esi
c0016add:	53                   	push   ebx
c0016ade:	83 ec 14             	sub    esp,0x14
c0016ae1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ae5:	05 0c 02 00 00       	add    eax,0x20c
c0016aea:	bb 07 00 00 00       	mov    ebx,0x7
c0016aef:	89 c6                	mov    esi,eax
c0016af1:	8d 76 00             	lea    esi,[esi+0x0]
c0016af4:	85 db                	test   ebx,ebx
c0016af6:	78 14                	js     c0016b0c <Process::Process(char const*, Process*, char**)+0x30>
c0016af8:	83 ec 0c             	sub    esp,0xc
c0016afb:	56                   	push   esi
c0016afc:	e8 ff ba 00 00       	call   c0022600 <ThreadControlBlock::ThreadControlBlock()>
c0016b01:	83 c4 10             	add    esp,0x10
c0016b04:	83 c6 73             	add    esi,0x73
c0016b07:	83 eb 01             	sub    ebx,0x1
c0016b0a:	eb e8                	jmp    c0016af4 <Process::Process(char const*, Process*, char**)+0x18>
c0016b0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b10:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016b17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b1b:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c0016b22:	83 ec 0c             	sub    esp,0xc
c0016b25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016b29:	e8 da 7b ff ff       	call   c000e708 <KeNewProcessEnv(Process*)>
c0016b2e:	83 c4 10             	add    esp,0x10
c0016b31:	89 c2                	mov    edx,eax
c0016b33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b37:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016b3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b41:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016b4a:	a1 5c 6f 02 c0       	mov    eax,ds:0xc0026f5c
c0016b4f:	8d 50 01             	lea    edx,[eax+0x1]
c0016b52:	89 15 5c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f5c,edx
c0016b58:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016b5c:	89 02                	mov    DWORD PTR [edx],eax
c0016b5e:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0016b66:	83 ec 0c             	sub    esp,0xc
c0016b69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016b6d:	e8 1d 90 ff ff       	call   c000fb8f <malloc>
c0016b72:	83 c4 10             	add    esp,0x10
c0016b75:	89 c3                	mov    ebx,eax
c0016b77:	83 ec 08             	sub    esp,0x8
c0016b7a:	6a 00                	push   0x0
c0016b7c:	53                   	push   ebx
c0016b7d:	e8 34 d4 ff ff       	call   c0013fb6 <VAS::VAS(bool)>
c0016b82:	83 c4 10             	add    esp,0x10
c0016b85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b89:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c0016b8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b93:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016b9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ba1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016ba5:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c0016bab:	e8 cf a5 ff ff       	call   c001117f <KeInitSignals()>
c0016bb0:	89 c2                	mov    edx,eax
c0016bb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bb6:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016bbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bc0:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016bc6:	85 c0                	test   eax,eax
c0016bc8:	74 42                	je     c0016c0c <Process::Process(char const*, Process*, char**)+0x130>
c0016bca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bce:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016bd4:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016bda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bde:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016be4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016be8:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016bee:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016bf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bf8:	05 0c 01 00 00       	add    eax,0x10c
c0016bfd:	83 ec 08             	sub    esp,0x8
c0016c00:	52                   	push   edx
c0016c01:	50                   	push   eax
c0016c02:	e8 39 9a fe ff       	call   c0000640 <strcpy>
c0016c07:	83 c4 10             	add    esp,0x10
c0016c0a:	eb 7c                	jmp    c0016c88 <Process::Process(char const*, Process*, char**)+0x1ac>
c0016c0c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0016c14:	83 ec 0c             	sub    esp,0xc
c0016c17:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016c1b:	e8 6f 8f ff ff       	call   c000fb8f <malloc>
c0016c20:	83 c4 10             	add    esp,0x10
c0016c23:	89 c3                	mov    ebx,eax
c0016c25:	83 ec 08             	sub    esp,0x8
c0016c28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016c2c:	53                   	push   ebx
c0016c2d:	e8 2a bf ff ff       	call   c0012b5c <VgaText::VgaText(char const*)>
c0016c32:	83 c4 10             	add    esp,0x10
c0016c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c39:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0016c3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c43:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016c49:	83 ec 0c             	sub    esp,0xc
c0016c4c:	50                   	push   eax
c0016c4d:	e8 60 b7 ff ff       	call   c00123b2 <addToTerminalCycle(VgaText*)>
c0016c52:	83 c4 10             	add    esp,0x10
c0016c55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c59:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016c5f:	83 ec 0c             	sub    esp,0xc
c0016c62:	50                   	push   eax
c0016c63:	e8 bb b9 ff ff       	call   c0012623 <setActiveTerminal(VgaText*)>
c0016c68:	83 c4 10             	add    esp,0x10
c0016c6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c6f:	05 0c 01 00 00       	add    eax,0x10c
c0016c74:	83 ec 08             	sub    esp,0x8
c0016c77:	68 4a 53 02 c0       	push   0xc002534a
c0016c7c:	50                   	push   eax
c0016c7d:	e8 be 99 fe ff       	call   c0000640 <strcpy>
c0016c82:	83 c4 10             	add    esp,0x10
c0016c85:	8d 76 00             	lea    esi,[esi+0x0]
c0016c88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c8c:	83 c0 0c             	add    eax,0xc
c0016c8f:	83 ec 08             	sub    esp,0x8
c0016c92:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016c96:	50                   	push   eax
c0016c97:	e8 a4 99 fe ff       	call   c0000640 <strcpy>
c0016c9c:	83 c4 10             	add    esp,0x10
c0016c9f:	83 ec 08             	sub    esp,0x8
c0016ca2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016ca6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016caa:	e8 c1 fd ff ff       	call   c0016a70 <Process::addArgs(char**)>
c0016caf:	83 c4 10             	add    esp,0x10
c0016cb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cb6:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0016cbc:	83 e2 7f             	and    edx,0x7f
c0016cbf:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c0016cc5:	83 ec 08             	sub    esp,0x8
c0016cc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016ccc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016cd0:	e8 16 ec ff ff       	call   c00158eb <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016cd5:	83 c4 10             	add    esp,0x10
c0016cd8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016cdc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016ce0:	83 f0 01             	xor    eax,0x1
c0016ce3:	88 c2                	mov    dl,al
c0016ce5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ce9:	88 90 be 07 00 00    	mov    BYTE PTR [eax+0x7be],dl
c0016cef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cf3:	8b 10                	mov    edx,DWORD PTR [eax]
c0016cf5:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016cfa:	52                   	push   edx
c0016cfb:	50                   	push   eax
c0016cfc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d00:	68 a4 53 02 c0       	push   0xc00253a4
c0016d05:	e8 72 02 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016d0a:	83 c4 10             	add    esp,0x10
c0016d0d:	90                   	nop
c0016d0e:	83 c4 14             	add    esp,0x14
c0016d11:	5b                   	pop    ebx
c0016d12:	5e                   	pop    esi
c0016d13:	c3                   	ret    

c0016d14 <Process::Process(bool, char const*, Process*, char**)>:
c0016d14:	56                   	push   esi
c0016d15:	53                   	push   ebx
c0016d16:	83 ec 24             	sub    esp,0x24
c0016d19:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016d1d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016d21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d25:	05 0c 02 00 00       	add    eax,0x20c
c0016d2a:	bb 07 00 00 00       	mov    ebx,0x7
c0016d2f:	89 c6                	mov    esi,eax
c0016d31:	8d 76 00             	lea    esi,[esi+0x0]
c0016d34:	85 db                	test   ebx,ebx
c0016d36:	78 14                	js     c0016d4c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0016d38:	83 ec 0c             	sub    esp,0xc
c0016d3b:	56                   	push   esi
c0016d3c:	e8 bf b8 00 00       	call   c0022600 <ThreadControlBlock::ThreadControlBlock()>
c0016d41:	83 c4 10             	add    esp,0x10
c0016d44:	83 c6 73             	add    esi,0x73
c0016d47:	83 eb 01             	sub    ebx,0x1
c0016d4a:	eb e8                	jmp    c0016d34 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0016d4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d50:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016d57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d5b:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c0016d62:	83 ec 0c             	sub    esp,0xc
c0016d65:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016d69:	e8 9a 79 ff ff       	call   c000e708 <KeNewProcessEnv(Process*)>
c0016d6e:	83 c4 10             	add    esp,0x10
c0016d71:	89 c2                	mov    edx,eax
c0016d73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d77:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016d7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d81:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016d8a:	a1 5c 6f 02 c0       	mov    eax,ds:0xc0026f5c
c0016d8f:	8d 50 01             	lea    edx,[eax+0x1]
c0016d92:	89 15 5c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f5c,edx
c0016d98:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016d9c:	89 02                	mov    DWORD PTR [edx],eax
c0016d9e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0016da6:	83 ec 0c             	sub    esp,0xc
c0016da9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016dad:	e8 dd 8d ff ff       	call   c000fb8f <malloc>
c0016db2:	83 c4 10             	add    esp,0x10
c0016db5:	89 c3                	mov    ebx,eax
c0016db7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016dbc:	83 ec 08             	sub    esp,0x8
c0016dbf:	50                   	push   eax
c0016dc0:	53                   	push   ebx
c0016dc1:	e8 f0 d1 ff ff       	call   c0013fb6 <VAS::VAS(bool)>
c0016dc6:	83 c4 10             	add    esp,0x10
c0016dc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016dcd:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c0016dd3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016dd7:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016de1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016de5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016de9:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c0016def:	e8 8b a3 ff ff       	call   c001117f <KeInitSignals()>
c0016df4:	89 c2                	mov    edx,eax
c0016df6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016dfa:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016e00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e04:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016e0a:	85 c0                	test   eax,eax
c0016e0c:	74 42                	je     c0016e50 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0016e0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e12:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016e18:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016e1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e22:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016e28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e2c:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016e32:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016e38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e3c:	05 0c 01 00 00       	add    eax,0x10c
c0016e41:	83 ec 08             	sub    esp,0x8
c0016e44:	52                   	push   edx
c0016e45:	50                   	push   eax
c0016e46:	e8 f5 97 fe ff       	call   c0000640 <strcpy>
c0016e4b:	83 c4 10             	add    esp,0x10
c0016e4e:	eb 7c                	jmp    c0016ecc <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c0016e50:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0016e58:	83 ec 0c             	sub    esp,0xc
c0016e5b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016e5f:	e8 2b 8d ff ff       	call   c000fb8f <malloc>
c0016e64:	83 c4 10             	add    esp,0x10
c0016e67:	89 c3                	mov    ebx,eax
c0016e69:	83 ec 08             	sub    esp,0x8
c0016e6c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016e70:	53                   	push   ebx
c0016e71:	e8 e6 bc ff ff       	call   c0012b5c <VgaText::VgaText(char const*)>
c0016e76:	83 c4 10             	add    esp,0x10
c0016e79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e7d:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0016e83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e87:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016e8d:	83 ec 0c             	sub    esp,0xc
c0016e90:	50                   	push   eax
c0016e91:	e8 1c b5 ff ff       	call   c00123b2 <addToTerminalCycle(VgaText*)>
c0016e96:	83 c4 10             	add    esp,0x10
c0016e99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e9d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016ea3:	83 ec 0c             	sub    esp,0xc
c0016ea6:	50                   	push   eax
c0016ea7:	e8 77 b7 ff ff       	call   c0012623 <setActiveTerminal(VgaText*)>
c0016eac:	83 c4 10             	add    esp,0x10
c0016eaf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016eb3:	05 0c 01 00 00       	add    eax,0x10c
c0016eb8:	83 ec 08             	sub    esp,0x8
c0016ebb:	68 4a 53 02 c0       	push   0xc002534a
c0016ec0:	50                   	push   eax
c0016ec1:	e8 7a 97 fe ff       	call   c0000640 <strcpy>
c0016ec6:	83 c4 10             	add    esp,0x10
c0016ec9:	8d 76 00             	lea    esi,[esi+0x0]
c0016ecc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ed0:	83 c0 0c             	add    eax,0xc
c0016ed3:	83 ec 08             	sub    esp,0x8
c0016ed6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016eda:	50                   	push   eax
c0016edb:	e8 60 97 fe ff       	call   c0000640 <strcpy>
c0016ee0:	83 c4 10             	add    esp,0x10
c0016ee3:	83 ec 08             	sub    esp,0x8
c0016ee6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016eea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016eee:	e8 7d fb ff ff       	call   c0016a70 <Process::addArgs(char**)>
c0016ef3:	83 c4 10             	add    esp,0x10
c0016ef6:	90                   	nop
c0016ef7:	83 c4 24             	add    esp,0x24
c0016efa:	5b                   	pop    ebx
c0016efb:	5e                   	pop    esi
c0016efc:	c3                   	ret    
c0016efd:	8d 76 00             	lea    esi,[esi+0x0]

c0016f00 <taskStartupFunction>:
c0016f00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f05:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016f08:	c3                   	ret    
c0016f09:	8d 76 00             	lea    esi,[esi+0x0]

c0016f0c <KeDisablePreemption()>:
c0016f0c:	a1 0c fa 02 c0       	mov    eax,ds:0xc002fa0c
c0016f11:	85 c0                	test   eax,eax
c0016f13:	75 13                	jne    c0016f28 <KeDisablePreemption()+0x1c>
c0016f15:	8a 15 cc d0 02 c0    	mov    dl,BYTE PTR ds:0xc002d0cc
c0016f1b:	c6 05 cc d0 02 c0 00 	mov    BYTE PTR ds:0xc002d0cc,0x0
c0016f22:	88 15 08 fa 02 c0    	mov    BYTE PTR ds:0xc002fa08,dl
c0016f28:	83 c0 01             	add    eax,0x1
c0016f2b:	a3 0c fa 02 c0       	mov    ds:0xc002fa0c,eax
c0016f30:	c3                   	ret    
c0016f31:	8d 76 00             	lea    esi,[esi+0x0]

c0016f34 <KeRestorePreemption()>:
c0016f34:	a1 0c fa 02 c0       	mov    eax,ds:0xc002fa0c
c0016f39:	83 e8 01             	sub    eax,0x1
c0016f3c:	a3 0c fa 02 c0       	mov    ds:0xc002fa0c,eax
c0016f41:	75 0d                	jne    c0016f50 <KeRestorePreemption()+0x1c>
c0016f43:	a0 08 fa 02 c0       	mov    al,ds:0xc002fa08
c0016f48:	a2 cc d0 02 c0       	mov    ds:0xc002d0cc,al
c0016f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f50:	c3                   	ret    
c0016f51:	90                   	nop
c0016f52:	66 90                	xchg   ax,ax

c0016f54 <Process::createThread(void (*)(void*), void*, int)>:
c0016f54:	55                   	push   ebp
c0016f55:	31 c9                	xor    ecx,ecx
c0016f57:	57                   	push   edi
c0016f58:	56                   	push   esi
c0016f59:	53                   	push   ebx
c0016f5a:	83 ec 0c             	sub    esp,0xc
c0016f5d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016f61:	66 8b b3 a4 05 00 00 	mov    si,WORD PTR [ebx+0x5a4]
c0016f68:	89 f2                	mov    edx,esi
c0016f6a:	66 90                	xchg   ax,ax
c0016f6c:	0f b7 c2             	movzx  eax,dx
c0016f6f:	80 e2 01             	and    dl,0x1
c0016f72:	74 18                	je     c0016f8c <Process::createThread(void (*)(void*), void*, int)+0x38>
c0016f74:	d1 f8                	sar    eax,1
c0016f76:	83 c1 01             	add    ecx,0x1
c0016f79:	89 c2                	mov    edx,eax
c0016f7b:	83 f9 10             	cmp    ecx,0x10
c0016f7e:	75 ec                	jne    c0016f6c <Process::createThread(void (*)(void*), void*, int)+0x18>
c0016f80:	83 c4 0c             	add    esp,0xc
c0016f83:	31 db                	xor    ebx,ebx
c0016f85:	89 d8                	mov    eax,ebx
c0016f87:	5b                   	pop    ebx
c0016f88:	5e                   	pop    esi
c0016f89:	5f                   	pop    edi
c0016f8a:	5d                   	pop    ebp
c0016f8b:	c3                   	ret    
c0016f8c:	b8 01 00 00 00       	mov    eax,0x1
c0016f91:	d3 e0                	shl    eax,cl
c0016f93:	09 c6                	or     esi,eax
c0016f95:	8d 04 89             	lea    eax,[ecx+ecx*4]
c0016f98:	66 89 b3 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],si
c0016f9f:	01 c0                	add    eax,eax
c0016fa1:	01 c8                	add    eax,ecx
c0016fa3:	01 c0                	add    eax,eax
c0016fa5:	01 c8                	add    eax,ecx
c0016fa7:	8d 04 80             	lea    eax,[eax+eax*4]
c0016faa:	01 d8                	add    eax,ebx
c0016fac:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c0016fb3:	75 0b                	jne    c0016fc0 <Process::createThread(void (*)(void*), void*, int)+0x6c>
c0016fb5:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c0016fbf:	90                   	nop
c0016fc0:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0016fc6:	83 ec 0c             	sub    esp,0xc
c0016fc9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0016fcc:	8d 04 89             	lea    eax,[ecx+ecx*4]
c0016fcf:	01 c0                	add    eax,eax
c0016fd1:	01 c8                	add    eax,ecx
c0016fd3:	01 c0                	add    eax,eax
c0016fd5:	01 c8                	add    eax,ecx
c0016fd7:	8d 3c 80             	lea    edi,[eax+eax*4]
c0016fda:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0016fdd:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0016fe3:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0016fe9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016fed:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0016ff3:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0016ff9:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0016fff:	89 ca                	mov    edx,ecx
c0017001:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0017008:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001700c:	c7 80 44 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x244],0x0
c0017016:	c7 80 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x26f],0x0
c0017020:	c6 80 73 02 00 00 00 	mov    BYTE PTR [eax+0x273],0x0
c0017027:	c6 80 74 02 00 00 00 	mov    BYTE PTR [eax+0x274],0x0
c001702e:	c6 80 75 02 00 00 00 	mov    BYTE PTR [eax+0x275],0x0
c0017035:	f7 da                	neg    edx
c0017037:	c1 e2 15             	shl    edx,0x15
c001703a:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0017040:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0017046:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001704a:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0017054:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001705a:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c0017060:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0017066:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0017070:	83 e2 80             	and    edx,0xffffff80
c0017073:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001707d:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c0017083:	68 00 01 00 00       	push   0x100
c0017088:	e8 02 8b ff ff       	call   c000fb8f <malloc>
c001708d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0017090:	58                   	pop    eax
c0017091:	5a                   	pop    edx
c0017092:	53                   	push   ebx
c0017093:	68 4c fa 02 c0       	push   0xc002fa4c
c0017098:	e8 0f b1 00 00       	call   c00221ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001709d:	89 d8                	mov    eax,ebx
c001709f:	83 c4 10             	add    esp,0x10
c00170a2:	83 c4 0c             	add    esp,0xc
c00170a5:	5b                   	pop    ebx
c00170a6:	5e                   	pop    esi
c00170a7:	5f                   	pop    edi
c00170a8:	5d                   	pop    ebp
c00170a9:	c3                   	ret    
c00170aa:	66 90                	xchg   ax,ax

c00170ac <Process::createUserThread()>:
c00170ac:	83 ec 0c             	sub    esp,0xc
c00170af:	68 80 00 00 00       	push   0x80
c00170b4:	6a 00                	push   0x0
c00170b6:	68 54 69 01 c0       	push   0xc0016954
c00170bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00170bf:	50                   	push   eax
c00170c0:	e8 8f fe ff ff       	call   c0016f54 <Process::createThread(void (*)(void*), void*, int)>
c00170c5:	83 c4 1c             	add    esp,0x1c
c00170c8:	c3                   	ret    
c00170c9:	8d 76 00             	lea    esi,[esi+0x0]

c00170cc <setupMultitasking(void (*)())>:
c00170cc:	56                   	push   esi
c00170cd:	53                   	push   ebx
c00170ce:	83 ec 04             	sub    esp,0x4
c00170d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00170d5:	eb 11                	jmp    c00170e8 <setupMultitasking(void (*)())+0x1c>
c00170d7:	90                   	nop
c00170d8:	83 ec 0c             	sub    esp,0xc
c00170db:	68 4c fa 02 c0       	push   0xc002fa4c
c00170e0:	e8 0b b0 00 00       	call   c00220f0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00170e5:	83 c4 10             	add    esp,0x10
c00170e8:	83 ec 0c             	sub    esp,0xc
c00170eb:	68 4c fa 02 c0       	push   0xc002fa4c
c00170f0:	e8 d7 af 00 00       	call   c00220cc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00170f5:	83 c4 10             	add    esp,0x10
c00170f8:	84 c0                	test   al,al
c00170fa:	74 dc                	je     c00170d8 <setupMultitasking(void (*)())+0xc>
c00170fc:	83 ec 0c             	sub    esp,0xc
c00170ff:	68 c4 07 00 00       	push   0x7c4
c0017104:	e8 86 8a ff ff       	call   c000fb8f <malloc>
c0017109:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017110:	89 c3                	mov    ebx,eax
c0017112:	6a 00                	push   0x0
c0017114:	68 4e 53 02 c0       	push   0xc002534e
c0017119:	6a 01                	push   0x1
c001711b:	50                   	push   eax
c001711c:	e8 f3 fb ff ff       	call   c0016d14 <Process::Process(bool, char const*, Process*, char**)>
c0017121:	83 c4 14             	add    esp,0x14
c0017124:	8b 83 a6 05 00 00    	mov    eax,DWORD PTR [ebx+0x5a6]
c001712a:	89 1d 58 fa 02 c0    	mov    DWORD PTR ds:0xc002fa58,ebx
c0017130:	50                   	push   eax
c0017131:	e8 ed b4 ff ff       	call   c0012623 <setActiveTerminal(VgaText*)>
c0017136:	66 8b 83 a4 05 00 00 	mov    ax,WORD PTR [ebx+0x5a4]
c001713d:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c0017147:	83 c8 01             	or     eax,0x1
c001714a:	66 89 83 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],ax
c0017151:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0017157:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001715a:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0017164:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001716a:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0017170:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001717a:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0017184:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001718e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017194:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001719e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00171a4:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00171ae:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00171b5:	e8 d5 89 ff ff       	call   c000fb8f <malloc>
c00171ba:	c7 83 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x26f],0x0
c00171c4:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00171ca:	c6 83 73 02 00 00 00 	mov    BYTE PTR [ebx+0x273],0x0
c00171d1:	c6 83 74 02 00 00 00 	mov    BYTE PTR [ebx+0x274],0x0
c00171d8:	c6 83 75 02 00 00 00 	mov    BYTE PTR [ebx+0x275],0x0
c00171df:	c6 83 76 02 00 00 00 	mov    BYTE PTR [ebx+0x276],0x0
c00171e6:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00171ec:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00171f2:	5a                   	pop    edx
c00171f3:	59                   	pop    ecx
c00171f4:	68 4a 53 02 c0       	push   0xc002534a
c00171f9:	50                   	push   eax
c00171fa:	e8 41 94 fe ff       	call   c0000640 <strcpy>
c00171ff:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0017206:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001720a:	83 c4 14             	add    esp,0x14
c001720d:	5b                   	pop    ebx
c001720e:	5e                   	pop    esi
c001720f:	e9 55 90 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>

c0017214 <schedule()>:
c0017214:	8b 15 2c fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa2c
c001721a:	85 d2                	test   edx,edx
c001721c:	74 0e                	je     c001722c <schedule()+0x18>
c001721e:	c7 05 28 fa 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x1
c0017228:	c3                   	ret    
c0017229:	8d 76 00             	lea    esi,[esi+0x0]
c001722c:	53                   	push   ebx
c001722d:	83 ec 14             	sub    esp,0x14
c0017230:	68 4c fa 02 c0       	push   0xc002fa4c
c0017235:	e8 92 ae 00 00       	call   c00220cc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001723a:	83 c4 10             	add    esp,0x10
c001723d:	84 c0                	test   al,al
c001723f:	75 3f                	jne    c0017280 <schedule()+0x6c>
c0017241:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017249:	83 fa 01             	cmp    edx,0x1
c001724c:	74 3a                	je     c0017288 <schedule()+0x74>
c001724e:	66 90                	xchg   ax,ax
c0017250:	83 ec 0c             	sub    esp,0xc
c0017253:	68 4c fa 02 c0       	push   0xc002fa4c
c0017258:	e8 8b ae 00 00       	call   c00220e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001725d:	c7 04 24 4c fa 02 c0 	mov    DWORD PTR [esp],0xc002fa4c
c0017264:	89 c3                	mov    ebx,eax
c0017266:	e8 85 ae 00 00       	call   c00220f0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001726b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017272:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017275:	e8 36 f7 ff ff       	call   c00169b0 <switchToThread(ThreadControlBlock*)>
c001727a:	83 c4 10             	add    esp,0x10
c001727d:	8d 76 00             	lea    esi,[esi+0x0]
c0017280:	83 c4 08             	add    esp,0x8
c0017283:	5b                   	pop    ebx
c0017284:	c3                   	ret    
c0017285:	8d 76 00             	lea    esi,[esi+0x0]
c0017288:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001728f:	83 ec 08             	sub    esp,0x8
c0017292:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017297:	50                   	push   eax
c0017298:	68 4c fa 02 c0       	push   0xc002fa4c
c001729d:	e8 0a af 00 00       	call   c00221ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00172a2:	83 c4 10             	add    esp,0x10
c00172a5:	eb a9                	jmp    c0017250 <schedule()+0x3c>
c00172a7:	90                   	nop

c00172a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00172a8:	83 ec 0c             	sub    esp,0xc
c00172ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00172b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00172b4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00172b7:	e8 58 ff ff ff       	call   c0017214 <schedule()>
c00172bc:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c00172c4:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00172c9:	85 c0                	test   eax,eax
c00172cb:	75 03                	jne    c00172d0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c00172cd:	fb                   	sti    
c00172ce:	66 90                	xchg   ax,ax
c00172d0:	83 c4 0c             	add    esp,0xc
c00172d3:	c3                   	ret    

c00172d4 <blockTask(TaskState)>:
c00172d4:	83 ec 0c             	sub    esp,0xc
c00172d7:	fa                   	cli    
c00172d8:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00172dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00172e1:	83 c0 01             	add    eax,0x1
c00172e4:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c00172e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00172ee:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00172f1:	e8 1e ff ff ff       	call   c0017214 <schedule()>
c00172f6:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c00172fe:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c0017304:	85 d2                	test   edx,edx
c0017306:	75 04                	jne    c001730c <blockTask(TaskState)+0x38>
c0017308:	fb                   	sti    
c0017309:	8d 76 00             	lea    esi,[esi+0x0]
c001730c:	83 c4 0c             	add    esp,0xc
c001730f:	c3                   	ret    

c0017310 <waitTask(int, int*, int)>:
c0017310:	83 ec 18             	sub    esp,0x18
c0017313:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017318:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001731c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001731f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017323:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017328:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001732b:	6a 07                	push   0x7
c001732d:	e8 a2 ff ff ff       	call   c00172d4 <blockTask(TaskState)>
c0017332:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017337:	83 c4 10             	add    esp,0x10
c001733a:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001733d:	85 d2                	test   edx,edx
c001733f:	74 0b                	je     c001734c <waitTask(int, int*, int)+0x3c>
c0017341:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0017344:	89 02                	mov    DWORD PTR [edx],eax
c0017346:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001734b:	90                   	nop
c001734c:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001734f:	83 c4 0c             	add    esp,0xc
c0017352:	c3                   	ret    
c0017353:	90                   	nop

c0017354 <milliTenthSleepUntil(unsigned long long)>:
c0017354:	83 ec 0c             	sub    esp,0xc
c0017357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001735b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001735f:	3b 05 50 cb 02 c0    	cmp    eax,DWORD PTR ds:0xc002cb50
c0017365:	89 d1                	mov    ecx,edx
c0017367:	1b 0d 54 cb 02 c0    	sbb    ecx,DWORD PTR ds:0xc002cb54
c001736d:	73 05                	jae    c0017374 <milliTenthSleepUntil(unsigned long long)+0x20>
c001736f:	90                   	nop
c0017370:	83 c4 0c             	add    esp,0xc
c0017373:	c3                   	ret    
c0017374:	fa                   	cli    
c0017375:	8b 0d 30 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa30
c001737b:	83 ec 08             	sub    esp,0x8
c001737e:	83 c1 01             	add    ecx,0x1
c0017381:	89 0d 30 fa 02 c0    	mov    DWORD PTR ds:0xc002fa30,ecx
c0017387:	8b 0d 2c fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa2c
c001738d:	83 c1 01             	add    ecx,0x1
c0017390:	89 0d 2c fa 02 c0    	mov    DWORD PTR ds:0xc002fa2c,ecx
c0017396:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001739c:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001739f:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c00173a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00173a7:	50                   	push   eax
c00173a8:	68 40 fa 02 c0       	push   0xc002fa40
c00173ad:	e8 fa ad 00 00       	call   c00221ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00173b2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00173b9:	e8 16 ff ff ff       	call   c00172d4 <blockTask(TaskState)>
c00173be:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c00173c3:	83 c4 10             	add    esp,0x10
c00173c6:	83 e8 01             	sub    eax,0x1
c00173c9:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c00173ce:	85 c0                	test   eax,eax
c00173d0:	75 0a                	jne    c00173dc <milliTenthSleepUntil(unsigned long long)+0x88>
c00173d2:	8b 15 28 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa28
c00173d8:	85 d2                	test   edx,edx
c00173da:	75 18                	jne    c00173f4 <milliTenthSleepUntil(unsigned long long)+0xa0>
c00173dc:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c00173e4:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00173e9:	85 c0                	test   eax,eax
c00173eb:	75 83                	jne    c0017370 <milliTenthSleepUntil(unsigned long long)+0x1c>
c00173ed:	fb                   	sti    
c00173ee:	83 c4 0c             	add    esp,0xc
c00173f1:	c3                   	ret    
c00173f2:	66 90                	xchg   ax,ax
c00173f4:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c00173fe:	e8 11 fe ff ff       	call   c0017214 <schedule()>
c0017403:	eb d7                	jmp    c00173dc <milliTenthSleepUntil(unsigned long long)+0x88>
c0017405:	8d 76 00             	lea    esi,[esi+0x0]

c0017408 <milliTenthSleep(unsigned long long)>:
c0017408:	a1 50 cb 02 c0       	mov    eax,ds:0xc002cb50
c001740d:	8b 15 54 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb54
c0017413:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0017417:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001741b:	e9 34 ff ff ff       	jmp    c0017354 <milliTenthSleepUntil(unsigned long long)>

c0017420 <sleep(unsigned long long)>:
c0017420:	69 4c 24 08 10 27 00 00 	imul   ecx,DWORD PTR [esp+0x8],0x2710
c0017428:	b8 10 27 00 00       	mov    eax,0x2710
c001742d:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0017431:	01 ca                	add    edx,ecx
c0017433:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017437:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001743b:	eb cb                	jmp    c0017408 <milliTenthSleep(unsigned long long)>
c001743d:	8d 76 00             	lea    esi,[esi+0x0]

c0017440 <sleep(unsigned int)>:
c0017440:	83 ec 14             	sub    esp,0x14
c0017443:	b8 10 27 00 00       	mov    eax,0x2710
c0017448:	f7 64 24 18          	mul    DWORD PTR [esp+0x18]
c001744c:	52                   	push   edx
c001744d:	50                   	push   eax
c001744e:	e8 b5 ff ff ff       	call   c0017408 <milliTenthSleep(unsigned long long)>
c0017453:	83 c4 1c             	add    esp,0x1c
c0017456:	c3                   	ret    
c0017457:	90                   	nop

c0017458 <milliTenthSleep(unsigned int)>:
c0017458:	83 ec 14             	sub    esp,0x14
c001745b:	31 d2                	xor    edx,edx
c001745d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017461:	03 05 50 cb 02 c0    	add    eax,DWORD PTR ds:0xc002cb50
c0017467:	13 15 54 cb 02 c0    	adc    edx,DWORD PTR ds:0xc002cb54
c001746d:	52                   	push   edx
c001746e:	50                   	push   eax
c001746f:	e8 e0 fe ff ff       	call   c0017354 <milliTenthSleepUntil(unsigned long long)>
c0017474:	83 c4 1c             	add    esp,0x1c
c0017477:	c3                   	ret    

c0017478 <taskReturned>:
c0017478:	83 ec 18             	sub    esp,0x18
c001747b:	68 d8 53 02 c0       	push   0xc00253d8
c0017480:	e8 61 8b ff ff       	call   c000ffe6 <KePanic(char const*)>
c0017485:	83 c4 10             	add    esp,0x10
c0017488:	83 ec 0c             	sub    esp,0xc
c001748b:	6a 02                	push   0x2
c001748d:	e8 42 fe ff ff       	call   c00172d4 <blockTask(TaskState)>
c0017492:	fa                   	cli    
c0017493:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017498:	83 c0 01             	add    eax,0x1
c001749b:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c00174a0:	e8 6f fd ff ff       	call   c0017214 <schedule()>
c00174a5:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c00174ad:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c00174b3:	83 c4 10             	add    esp,0x10
c00174b6:	85 d2                	test   edx,edx
c00174b8:	75 ce                	jne    c0017488 <taskReturned+0x10>
c00174ba:	fb                   	sti    
c00174bb:	eb cb                	jmp    c0017488 <taskReturned+0x10>
c00174bd:	8d 76 00             	lea    esi,[esi+0x0]

c00174c0 <Thr::processFromPID(int)>:
c00174c0:	57                   	push   edi
c00174c1:	56                   	push   esi
c00174c2:	53                   	push   ebx
c00174c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00174c7:	fa                   	cli    
c00174c8:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00174cd:	83 ec 0c             	sub    esp,0xc
c00174d0:	83 c0 01             	add    eax,0x1
c00174d3:	68 4c fa 02 c0       	push   0xc002fa4c
c00174d8:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c00174dd:	e8 06 ac 00 00       	call   c00220e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00174e2:	83 c4 10             	add    esp,0x10
c00174e5:	89 c7                	mov    edi,eax
c00174e7:	eb 17                	jmp    c0017500 <Thr::processFromPID(int)+0x40>
c00174e9:	8d 76 00             	lea    esi,[esi+0x0]
c00174ec:	83 ec 0c             	sub    esp,0xc
c00174ef:	68 4c fa 02 c0       	push   0xc002fa4c
c00174f4:	e8 ef ab 00 00       	call   c00220e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00174f9:	83 c4 10             	add    esp,0x10
c00174fc:	39 f8                	cmp    eax,edi
c00174fe:	74 50                	je     c0017550 <Thr::processFromPID(int)+0x90>
c0017500:	83 ec 0c             	sub    esp,0xc
c0017503:	68 4c fa 02 c0       	push   0xc002fa4c
c0017508:	e8 db ab 00 00       	call   c00220e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001750d:	c7 04 24 4c fa 02 c0 	mov    DWORD PTR [esp],0xc002fa4c
c0017514:	89 c3                	mov    ebx,eax
c0017516:	e8 d5 ab 00 00       	call   c00220f0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001751b:	59                   	pop    ecx
c001751c:	58                   	pop    eax
c001751d:	53                   	push   ebx
c001751e:	68 4c fa 02 c0       	push   0xc002fa4c
c0017523:	e8 84 ac 00 00       	call   c00221ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017528:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001752b:	83 c4 10             	add    esp,0x10
c001752e:	39 30                	cmp    DWORD PTR [eax],esi
c0017530:	75 ba                	jne    c00174ec <Thr::processFromPID(int)+0x2c>
c0017532:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c001753a:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c0017540:	85 d2                	test   edx,edx
c0017542:	74 08                	je     c001754c <Thr::processFromPID(int)+0x8c>
c0017544:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017547:	5b                   	pop    ebx
c0017548:	5e                   	pop    esi
c0017549:	5f                   	pop    edi
c001754a:	c3                   	ret    
c001754b:	90                   	nop
c001754c:	fb                   	sti    
c001754d:	eb f5                	jmp    c0017544 <Thr::processFromPID(int)+0x84>
c001754f:	90                   	nop
c0017550:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017558:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c001755d:	85 c0                	test   eax,eax
c001755f:	75 07                	jne    c0017568 <Thr::processFromPID(int)+0xa8>
c0017561:	fb                   	sti    
c0017562:	31 c0                	xor    eax,eax
c0017564:	5b                   	pop    ebx
c0017565:	5e                   	pop    esi
c0017566:	5f                   	pop    edi
c0017567:	c3                   	ret    
c0017568:	5b                   	pop    ebx
c0017569:	31 c0                	xor    eax,eax
c001756b:	5e                   	pop    esi
c001756c:	5f                   	pop    edi
c001756d:	c3                   	ret    
c001756e:	66 90                	xchg   ax,ax

c0017570 <unblockTask(ThreadControlBlock*)>:
c0017570:	53                   	push   ebx
c0017571:	83 ec 08             	sub    esp,0x8
c0017574:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017578:	fa                   	cli    
c0017579:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c001757f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017582:	83 c2 01             	add    edx,0x1
c0017585:	85 c0                	test   eax,eax
c0017587:	89 15 30 fa 02 c0    	mov    DWORD PTR ds:0xc002fa30,edx
c001758d:	74 6d                	je     c00175fc <unblockTask(ThreadControlBlock*)+0x8c>
c001758f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017592:	83 f8 01             	cmp    eax,0x1
c0017595:	74 39                	je     c00175d0 <unblockTask(ThreadControlBlock*)+0x60>
c0017597:	83 ec 0c             	sub    esp,0xc
c001759a:	68 4c fa 02 c0       	push   0xc002fa4c
c001759f:	e8 44 ab 00 00       	call   c00220e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00175a4:	83 c4 10             	add    esp,0x10
c00175a7:	85 c0                	test   eax,eax
c00175a9:	75 1d                	jne    c00175c8 <unblockTask(ThreadControlBlock*)+0x58>
c00175ab:	eb 63                	jmp    c0017610 <unblockTask(ThreadControlBlock*)+0xa0>
c00175ad:	8d 76 00             	lea    esi,[esi+0x0]
c00175b0:	83 ec 08             	sub    esp,0x8
c00175b3:	50                   	push   eax
c00175b4:	68 4c fa 02 c0       	push   0xc002fa4c
c00175b9:	e8 36 b0 00 00       	call   c00225f4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00175be:	83 c4 10             	add    esp,0x10
c00175c1:	85 c0                	test   eax,eax
c00175c3:	74 4b                	je     c0017610 <unblockTask(ThreadControlBlock*)+0xa0>
c00175c5:	8d 76 00             	lea    esi,[esi+0x0]
c00175c8:	39 c3                	cmp    ebx,eax
c00175ca:	75 e4                	jne    c00175b0 <unblockTask(ThreadControlBlock*)+0x40>
c00175cc:	eb 12                	jmp    c00175e0 <unblockTask(ThreadControlBlock*)+0x70>
c00175ce:	66 90                	xchg   ax,ax
c00175d0:	83 ec 0c             	sub    esp,0xc
c00175d3:	68 6c 53 02 c0       	push   0xc002536c
c00175d8:	e8 9f f9 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00175dd:	83 c4 10             	add    esp,0x10
c00175e0:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c00175e8:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c00175ed:	85 c0                	test   eax,eax
c00175ef:	75 03                	jne    c00175f4 <unblockTask(ThreadControlBlock*)+0x84>
c00175f1:	fb                   	sti    
c00175f2:	66 90                	xchg   ax,ax
c00175f4:	83 c4 08             	add    esp,0x8
c00175f7:	5b                   	pop    ebx
c00175f8:	c3                   	ret    
c00175f9:	8d 76 00             	lea    esi,[esi+0x0]
c00175fc:	83 ec 0c             	sub    esp,0xc
c00175ff:	68 55 53 02 c0       	push   0xc0025355
c0017604:	e8 73 f9 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0017609:	83 c4 10             	add    esp,0x10
c001760c:	eb d2                	jmp    c00175e0 <unblockTask(ThreadControlBlock*)+0x70>
c001760e:	66 90                	xchg   ax,ax
c0017610:	83 ec 08             	sub    esp,0x8
c0017613:	53                   	push   ebx
c0017614:	68 4c fa 02 c0       	push   0xc002fa4c
c0017619:	e8 8e ab 00 00       	call   c00221ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001761e:	83 c4 10             	add    esp,0x10
c0017621:	eb bd                	jmp    c00175e0 <unblockTask(ThreadControlBlock*)+0x70>
c0017623:	90                   	nop

c0017624 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0017624:	55                   	push   ebp
c0017625:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001762a:	57                   	push   edi
c001762b:	56                   	push   esi
c001762c:	53                   	push   ebx
c001762d:	83 ec 1c             	sub    esp,0x1c
c0017630:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017634:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0017637:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001763a:	d3 c0                	rol    eax,cl
c001763c:	66 8b 8a a4 05 00 00 	mov    cx,WORD PTR [edx+0x5a4]
c0017643:	21 c8                	and    eax,ecx
c0017645:	66 89 82 a4 05 00 00 	mov    WORD PTR [edx+0x5a4],ax
c001764c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001764f:	66 83 b8 a4 05 00 00 00 	cmp    WORD PTR [eax+0x5a4],0x0
c0017657:	0f 85 b7 01 00 00    	jne    c0017814 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c001765d:	8b a8 b6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5b6]
c0017663:	85 ed                	test   ebp,ebp
c0017665:	7e 29                	jle    c0017690 <cleanupTerminatedTask(ThreadControlBlock*)+0x6c>
c0017667:	31 f6                	xor    esi,esi
c0017669:	8d 76 00             	lea    esi,[esi+0x0]
c001766c:	83 ec 0c             	sub    esp,0xc
c001766f:	8b bc b0 ba 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x5ba]
c0017676:	83 c6 01             	add    esi,0x1
c0017679:	57                   	push   edi
c001767a:	e8 20 85 ff ff       	call   c000fb9f <free>
c001767f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017682:	83 c4 10             	add    esp,0x10
c0017685:	39 b0 b6 05 00 00    	cmp    DWORD PTR [eax+0x5b6],esi
c001768b:	7f df                	jg     c001766c <cleanupTerminatedTask(ThreadControlBlock*)+0x48>
c001768d:	8d 76 00             	lea    esi,[esi+0x0]
c0017690:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c001769a:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001769d:	8b ae ba 07 00 00    	mov    ebp,DWORD PTR [esi+0x7ba]
c00176a3:	89 f7                	mov    edi,esi
c00176a5:	85 ed                	test   ebp,ebp
c00176a7:	74 1b                	je     c00176c4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00176a9:	83 ec 0c             	sub    esp,0xc
c00176ac:	55                   	push   ebp
c00176ad:	e8 72 6f ff ff       	call   c000e624 <EnvVarContainer::~EnvVarContainer()>
c00176b2:	59                   	pop    ecx
c00176b3:	5e                   	pop    esi
c00176b4:	6a 0c                	push   0xc
c00176b6:	55                   	push   ebp
c00176b7:	e8 2d 5d ff ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c00176bc:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00176bf:	83 c4 10             	add    esp,0x10
c00176c2:	89 f7                	mov    edi,esi
c00176c4:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c00176ca:	85 c0                	test   eax,eax
c00176cc:	0f 84 b6 00 00 00    	je     c0017788 <cleanupTerminatedTask(ThreadControlBlock*)+0x164>
c00176d2:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c00176d5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00176d9:	31 c9                	xor    ecx,ecx
c00176db:	eb 17                	jmp    c00176f4 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00176dd:	8d 76 00             	lea    esi,[esi+0x0]
c00176e0:	83 c1 01             	add    ecx,0x1
c00176e3:	83 f9 10             	cmp    ecx,0x10
c00176e6:	0f 84 9c 00 00 00    	je     c0017788 <cleanupTerminatedTask(ThreadControlBlock*)+0x164>
c00176ec:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c00176f2:	66 90                	xchg   ax,ax
c00176f4:	0f b7 90 a4 05 00 00 	movzx  edx,WORD PTR [eax+0x5a4]
c00176fb:	d3 fa                	sar    edx,cl
c00176fd:	80 e2 01             	and    dl,0x1
c0017700:	74 de                	je     c00176e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017702:	8d 14 89             	lea    edx,[ecx+ecx*4]
c0017705:	01 d2                	add    edx,edx
c0017707:	01 ca                	add    edx,ecx
c0017709:	01 d2                	add    edx,edx
c001770b:	01 ca                	add    edx,ecx
c001770d:	8d 14 92             	lea    edx,[edx+edx*4]
c0017710:	01 d0                	add    eax,edx
c0017712:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0017718:	83 fd 07             	cmp    ebp,0x7
c001771b:	75 c3                	jne    c00176e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001771d:	05 40 02 00 00       	add    eax,0x240
c0017722:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0017725:	83 fd ff             	cmp    ebp,0xffffffff
c0017728:	0f 8c ee 00 00 00    	jl     c001781c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c001772e:	0f 84 ac 01 00 00    	je     c00178e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2bc>
c0017734:	85 ed                	test   ebp,ebp
c0017736:	0f 84 90 01 00 00    	je     c00178cc <cleanupTerminatedTask(ThreadControlBlock*)+0x2a8>
c001773c:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001773e:	75 a0                	jne    c00176e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017740:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0017746:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001774a:	01 d0                	add    eax,edx
c001774c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0017750:	83 ec 0c             	sub    esp,0xc
c0017753:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0017759:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001775c:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0017762:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0017769:	50                   	push   eax
c001776a:	e8 01 fe ff ff       	call   c0017570 <unblockTask(ThreadControlBlock*)>
c001776f:	83 c4 10             	add    esp,0x10
c0017772:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017775:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017779:	89 f7                	mov    edi,esi
c001777b:	83 c1 01             	add    ecx,0x1
c001777e:	83 f9 10             	cmp    ecx,0x10
c0017781:	0f 85 65 ff ff ff    	jne    c00176ec <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0017787:	90                   	nop
c0017788:	8b 86 a6 05 00 00    	mov    eax,DWORD PTR [esi+0x5a6]
c001778e:	85 c0                	test   eax,eax
c0017790:	74 62                	je     c00177f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d0>
c0017792:	8b 96 aa 05 00 00    	mov    edx,DWORD PTR [esi+0x5aa]
c0017798:	3b 82 a6 05 00 00    	cmp    eax,DWORD PTR [edx+0x5a6]
c001779e:	74 54                	je     c00177f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d0>
c00177a0:	83 ec 0c             	sub    esp,0xc
c00177a3:	68 4c fa 02 c0       	push   0xc002fa4c
c00177a8:	e8 3b a9 00 00       	call   c00220e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00177ad:	c7 04 24 4c fa 02 c0 	mov    DWORD PTR [esp],0xc002fa4c
c00177b4:	89 c7                	mov    edi,eax
c00177b6:	e8 11 a9 00 00       	call   c00220cc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00177bb:	83 c4 10             	add    esp,0x10
c00177be:	84 c0                	test   al,al
c00177c0:	0f 84 ce 00 00 00    	je     c0017894 <cleanupTerminatedTask(ThreadControlBlock*)+0x270>
c00177c6:	66 90                	xchg   ax,ax
c00177c8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00177cb:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c00177d1:	85 d2                	test   edx,edx
c00177d3:	74 0f                	je     c00177e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00177d5:	83 ec 0c             	sub    esp,0xc
c00177d8:	8b 02                	mov    eax,DWORD PTR [edx]
c00177da:	52                   	push   edx
c00177db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00177de:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00177e1:	83 c4 10             	add    esp,0x10
c00177e4:	c7 80 a6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5a6],0x0
c00177ee:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c00177f1:	8d 76 00             	lea    esi,[esi+0x0]
c00177f4:	8b 9f b2 05 00 00    	mov    ebx,DWORD PTR [edi+0x5b2]
c00177fa:	85 db                	test   ebx,ebx
c00177fc:	74 16                	je     c0017814 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c00177fe:	83 ec 0c             	sub    esp,0xc
c0017801:	53                   	push   ebx
c0017802:	e8 0f c3 ff ff       	call   c0013b16 <VAS::~VAS()>
c0017807:	58                   	pop    eax
c0017808:	5a                   	pop    edx
c0017809:	6a 14                	push   0x14
c001780b:	53                   	push   ebx
c001780c:	e8 d8 5b ff ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0017811:	83 c4 10             	add    esp,0x10
c0017814:	83 c4 1c             	add    esp,0x1c
c0017817:	5b                   	pop    ebx
c0017818:	5e                   	pop    esi
c0017819:	5f                   	pop    edi
c001781a:	5d                   	pop    ebp
c001781b:	c3                   	ret    
c001781c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017820:	83 ec 0c             	sub    esp,0xc
c0017823:	68 0c 54 02 c0       	push   0xc002540c
c0017828:	e8 b9 87 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001782d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017830:	83 c4 10             	add    esp,0x10
c0017833:	89 f7                	mov    edi,esi
c0017835:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017839:	e9 a2 fe ff ff       	jmp    c00176e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001783e:	66 90                	xchg   ax,ax
c0017840:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0017846:	39 82 a6 05 00 00    	cmp    DWORD PTR [edx+0x5a6],eax
c001784c:	75 1e                	jne    c001786c <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c001784e:	83 ec 0c             	sub    esp,0xc
c0017851:	68 74 54 02 c0       	push   0xc0025474
c0017856:	e8 21 f7 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001785b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0017862:	e8 6d fa ff ff       	call   c00172d4 <blockTask(TaskState)>
c0017867:	83 c4 10             	add    esp,0x10
c001786a:	66 90                	xchg   ax,ax
c001786c:	83 ec 08             	sub    esp,0x8
c001786f:	56                   	push   esi
c0017870:	68 4c fa 02 c0       	push   0xc002fa4c
c0017875:	e8 32 a9 00 00       	call   c00221ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001787a:	c7 04 24 4c fa 02 c0 	mov    DWORD PTR [esp],0xc002fa4c
c0017881:	e8 62 a8 00 00       	call   c00220e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017886:	83 c4 10             	add    esp,0x10
c0017889:	39 f8                	cmp    eax,edi
c001788b:	0f 84 37 ff ff ff    	je     c00177c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a4>
c0017891:	8d 76 00             	lea    esi,[esi+0x0]
c0017894:	83 ec 0c             	sub    esp,0xc
c0017897:	68 4c fa 02 c0       	push   0xc002fa4c
c001789c:	e8 47 a8 00 00       	call   c00220e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00178a1:	c7 04 24 4c fa 02 c0 	mov    DWORD PTR [esp],0xc002fa4c
c00178a8:	89 c6                	mov    esi,eax
c00178aa:	e8 41 a8 00 00       	call   c00220f0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00178af:	83 c4 10             	add    esp,0x10
c00178b2:	39 f3                	cmp    ebx,esi
c00178b4:	74 b6                	je     c001786c <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c00178b6:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c00178b9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00178bc:	39 82 aa 05 00 00    	cmp    DWORD PTR [edx+0x5aa],eax
c00178c2:	75 a8                	jne    c001786c <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c00178c4:	e9 77 ff ff ff       	jmp    c0017840 <cleanupTerminatedTask(ThreadControlBlock*)+0x21c>
c00178c9:	8d 76 00             	lea    esi,[esi+0x0]
c00178cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00178d0:	83 ec 0c             	sub    esp,0xc
c00178d3:	68 40 54 02 c0       	push   0xc0025440
c00178d8:	e9 4b ff ff ff       	jmp    c0017828 <cleanupTerminatedTask(ThreadControlBlock*)+0x204>
c00178dd:	8d 76 00             	lea    esi,[esi+0x0]
c00178e0:	8b 36                	mov    esi,DWORD PTR [esi]
c00178e2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00178e6:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c00178e9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00178ec:	8b b8 aa 05 00 00    	mov    edi,DWORD PTR [eax+0x5aa]
c00178f2:	01 d7                	add    edi,edx
c00178f4:	89 f8                	mov    eax,edi
c00178f6:	e9 51 fe ff ff       	jmp    c001774c <cleanupTerminatedTask(ThreadControlBlock*)+0x128>
c00178fb:	90                   	nop

c00178fc <cleanerTaskFunction(void*)>:
c00178fc:	53                   	push   ebx
c00178fd:	83 ec 08             	sub    esp,0x8
c0017900:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017908:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c001790d:	85 c0                	test   eax,eax
c001790f:	75 03                	jne    c0017914 <cleanerTaskFunction(void*)+0x18>
c0017911:	fb                   	sti    
c0017912:	66 90                	xchg   ax,ax
c0017914:	fa                   	cli    
c0017915:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c001791a:	83 c0 01             	add    eax,0x1
c001791d:	80 3d 14 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002fa14,0x0
c0017924:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0017929:	0f 85 c9 00 00 00    	jne    c00179f8 <cleanerTaskFunction(void*)+0xfc>
c001792f:	83 ec 0c             	sub    esp,0xc
c0017932:	6a 02                	push   0x2
c0017934:	e8 6f f9 ff ff       	call   c00172a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017939:	83 c4 10             	add    esp,0x10
c001793c:	c6 05 14 fa 02 c0 00 	mov    BYTE PTR ds:0xc002fa14,0x0
c0017943:	fa                   	cli    
c0017944:	8b 0d 30 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa30
c001794a:	8b 1d 2c fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa2c
c0017950:	83 c1 01             	add    ecx,0x1
c0017953:	83 c3 01             	add    ebx,0x1
c0017956:	89 0d 30 fa 02 c0    	mov    DWORD PTR ds:0xc002fa30,ecx
c001795c:	89 1d 2c fa 02 c0    	mov    DWORD PTR ds:0xc002fa2c,ebx
c0017962:	fa                   	cli    
c0017963:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017968:	83 c0 01             	add    eax,0x1
c001796b:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0017970:	eb 2a                	jmp    c001799c <cleanerTaskFunction(void*)+0xa0>
c0017972:	66 90                	xchg   ax,ax
c0017974:	83 ec 0c             	sub    esp,0xc
c0017977:	68 34 fa 02 c0       	push   0xc002fa34
c001797c:	e8 67 a7 00 00       	call   c00220e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017981:	c7 04 24 34 fa 02 c0 	mov    DWORD PTR [esp],0xc002fa34
c0017988:	89 c3                	mov    ebx,eax
c001798a:	e8 61 a7 00 00       	call   c00220f0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001798f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017992:	e8 8d fc ff ff       	call   c0017624 <cleanupTerminatedTask(ThreadControlBlock*)>
c0017997:	83 c4 10             	add    esp,0x10
c001799a:	66 90                	xchg   ax,ax
c001799c:	83 ec 0c             	sub    esp,0xc
c001799f:	68 34 fa 02 c0       	push   0xc002fa34
c00179a4:	e8 23 a7 00 00       	call   c00220cc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00179a9:	83 c4 10             	add    esp,0x10
c00179ac:	84 c0                	test   al,al
c00179ae:	74 c4                	je     c0017974 <cleanerTaskFunction(void*)+0x78>
c00179b0:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c00179b8:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c00179be:	85 d2                	test   edx,edx
c00179c0:	75 02                	jne    c00179c4 <cleanerTaskFunction(void*)+0xc8>
c00179c2:	fb                   	sti    
c00179c3:	90                   	nop
c00179c4:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c00179c9:	83 e8 01             	sub    eax,0x1
c00179cc:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c00179d1:	0f 85 29 ff ff ff    	jne    c0017900 <cleanerTaskFunction(void*)+0x4>
c00179d7:	a1 28 fa 02 c0       	mov    eax,ds:0xc002fa28
c00179dc:	85 c0                	test   eax,eax
c00179de:	0f 84 1c ff ff ff    	je     c0017900 <cleanerTaskFunction(void*)+0x4>
c00179e4:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c00179ee:	e8 21 f8 ff ff       	call   c0017214 <schedule()>
c00179f3:	e9 08 ff ff ff       	jmp    c0017900 <cleanerTaskFunction(void*)+0x4>
c00179f8:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017a00:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017a05:	85 c0                	test   eax,eax
c0017a07:	0f 85 2f ff ff ff    	jne    c001793c <cleanerTaskFunction(void*)+0x40>
c0017a0d:	fb                   	sti    
c0017a0e:	e9 29 ff ff ff       	jmp    c001793c <cleanerTaskFunction(void*)+0x40>
c0017a13:	90                   	nop

c0017a14 <terminateTask(int)>:
c0017a14:	83 ec 14             	sub    esp,0x14
c0017a17:	fa                   	cli    
c0017a18:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017a1d:	83 c0 01             	add    eax,0x1
c0017a20:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0017a25:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0017a2a:	83 c0 01             	add    eax,0x1
c0017a2d:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0017a32:	fa                   	cli    
c0017a33:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017a38:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017a3c:	83 c0 01             	add    eax,0x1
c0017a3f:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0017a44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a49:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0017a4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a51:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0017a54:	50                   	push   eax
c0017a55:	68 34 fa 02 c0       	push   0xc002fa34
c0017a5a:	e8 4d a7 00 00       	call   c00221ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017a5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a64:	83 c4 10             	add    esp,0x10
c0017a67:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0017a6e:	a1 10 fa 02 c0       	mov    eax,ds:0xc002fa10
c0017a73:	85 c0                	test   eax,eax
c0017a75:	0f 84 81 00 00 00    	je     c0017afc <terminateTask(int)+0xe8>
c0017a7b:	83 ec 0c             	sub    esp,0xc
c0017a7e:	c6 05 14 fa 02 c0 01 	mov    BYTE PTR ds:0xc002fa14,0x1
c0017a85:	50                   	push   eax
c0017a86:	e8 e5 fa ff ff       	call   c0017570 <unblockTask(ThreadControlBlock*)>
c0017a8b:	83 c4 10             	add    esp,0x10
c0017a8e:	66 90                	xchg   ax,ax
c0017a90:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017a98:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017a9d:	85 c0                	test   eax,eax
c0017a9f:	75 03                	jne    c0017aa4 <terminateTask(int)+0x90>
c0017aa1:	fb                   	sti    
c0017aa2:	66 90                	xchg   ax,ax
c0017aa4:	a1 2c fa 02 c0       	mov    eax,ds:0xc002fa2c
c0017aa9:	83 e8 01             	sub    eax,0x1
c0017aac:	a3 2c fa 02 c0       	mov    ds:0xc002fa2c,eax
c0017ab1:	75 09                	jne    c0017abc <terminateTask(int)+0xa8>
c0017ab3:	83 3d 28 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa28,0x0
c0017aba:	75 54                	jne    c0017b10 <terminateTask(int)+0xfc>
c0017abc:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017ac4:	8b 0d 30 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa30
c0017aca:	85 c9                	test   ecx,ecx
c0017acc:	75 06                	jne    c0017ad4 <terminateTask(int)+0xc0>
c0017ace:	66 90                	xchg   ax,ax
c0017ad0:	fb                   	sti    
c0017ad1:	8d 76 00             	lea    esi,[esi+0x0]
c0017ad4:	fa                   	cli    
c0017ad5:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017ada:	83 c0 01             	add    eax,0x1
c0017add:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0017ae2:	e8 2d f7 ff ff       	call   c0017214 <schedule()>
c0017ae7:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017aef:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c0017af5:	85 d2                	test   edx,edx
c0017af7:	75 db                	jne    c0017ad4 <terminateTask(int)+0xc0>
c0017af9:	eb d5                	jmp    c0017ad0 <terminateTask(int)+0xbc>
c0017afb:	90                   	nop
c0017afc:	83 ec 0c             	sub    esp,0xc
c0017aff:	68 83 53 02 c0       	push   0xc0025383
c0017b04:	e8 73 f4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0017b09:	83 c4 10             	add    esp,0x10
c0017b0c:	eb 82                	jmp    c0017a90 <terminateTask(int)+0x7c>
c0017b0e:	66 90                	xchg   ax,ax
c0017b10:	c7 05 28 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa28,0x0
c0017b1a:	e8 f5 f6 ff ff       	call   c0017214 <schedule()>
c0017b1f:	eb 9b                	jmp    c0017abc <terminateTask(int)+0xa8>
c0017b21:	8d 76 00             	lea    esi,[esi+0x0]

c0017b24 <Thr::terminateFromIRQ(int)>:
c0017b24:	83 ec 18             	sub    esp,0x18
c0017b27:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b2b:	50                   	push   eax
c0017b2c:	e8 e3 fe ff ff       	call   c0017a14 <terminateTask(int)>
c0017b31:	8d 76 00             	lea    esi,[esi+0x0]

c0017b34 <__static_initialization_and_destruction_0(int, int)>:
c0017b34:	83 ec 0c             	sub    esp,0xc
c0017b37:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017b3c:	0f 85 8e 00 00 00    	jne    c0017bd0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017b42:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0017b4a:	0f 85 80 00 00 00    	jne    c0017bd0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017b50:	83 ec 0c             	sub    esp,0xc
c0017b53:	68 4c fa 02 c0       	push   0xc002fa4c
c0017b58:	e8 ef aa 00 00       	call   c002264c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017b5d:	83 c4 10             	add    esp,0x10
c0017b60:	83 ec 04             	sub    esp,0x4
c0017b63:	68 8c 67 02 c0       	push   0xc002678c
c0017b68:	68 4c fa 02 c0       	push   0xc002fa4c
c0017b6d:	68 fc 25 02 c0       	push   0xc00225fc
c0017b72:	e8 22 58 ff ff       	call   c000d399 <__cxa_atexit>
c0017b77:	83 c4 10             	add    esp,0x10
c0017b7a:	83 ec 0c             	sub    esp,0xc
c0017b7d:	68 40 fa 02 c0       	push   0xc002fa40
c0017b82:	e8 c5 aa 00 00       	call   c002264c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017b87:	83 c4 10             	add    esp,0x10
c0017b8a:	83 ec 04             	sub    esp,0x4
c0017b8d:	68 8c 67 02 c0       	push   0xc002678c
c0017b92:	68 40 fa 02 c0       	push   0xc002fa40
c0017b97:	68 fc 25 02 c0       	push   0xc00225fc
c0017b9c:	e8 f8 57 ff ff       	call   c000d399 <__cxa_atexit>
c0017ba1:	83 c4 10             	add    esp,0x10
c0017ba4:	83 ec 0c             	sub    esp,0xc
c0017ba7:	68 34 fa 02 c0       	push   0xc002fa34
c0017bac:	e8 9b aa 00 00       	call   c002264c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017bb1:	83 c4 10             	add    esp,0x10
c0017bb4:	83 ec 04             	sub    esp,0x4
c0017bb7:	68 8c 67 02 c0       	push   0xc002678c
c0017bbc:	68 34 fa 02 c0       	push   0xc002fa34
c0017bc1:	68 fc 25 02 c0       	push   0xc00225fc
c0017bc6:	e8 ce 57 ff ff       	call   c000d399 <__cxa_atexit>
c0017bcb:	83 c4 10             	add    esp,0x10
c0017bce:	66 90                	xchg   ax,ax
c0017bd0:	90                   	nop
c0017bd1:	83 c4 0c             	add    esp,0xc
c0017bd4:	c3                   	ret    
c0017bd5:	8d 76 00             	lea    esi,[esi+0x0]

c0017bd8 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0017bd8:	83 ec 0c             	sub    esp,0xc
c0017bdb:	83 ec 08             	sub    esp,0x8
c0017bde:	68 ff ff 00 00       	push   0xffff
c0017be3:	6a 01                	push   0x1
c0017be5:	e8 4a ff ff ff       	call   c0017b34 <__static_initialization_and_destruction_0(int, int)>
c0017bea:	83 c4 10             	add    esp,0x10
c0017bed:	83 c4 0c             	add    esp,0xc
c0017bf0:	c3                   	ret    

c0017bf1 <Vm::inbv(unsigned short)>:
c0017bf1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017bf5:	66 81 fa fe fe       	cmp    dx,0xfefe
c0017bfa:	74 02                	je     c0017bfe <Vm::inbv(unsigned short)+0xd>
c0017bfc:	ec                   	in     al,dx
c0017bfd:	c3                   	ret    
c0017bfe:	a0 90 fa 02 c0       	mov    al,ds:0xc002fa90
c0017c03:	c3                   	ret    

c0017c04 <Vm::outbv(unsigned short, unsigned char)>:
c0017c04:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017c08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c0c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0017c11:	74 02                	je     c0017c15 <Vm::outbv(unsigned short, unsigned char)+0x11>
c0017c13:	ee                   	out    dx,al
c0017c14:	c3                   	ret    
c0017c15:	8b 0d 90 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa90
c0017c1b:	8d 51 01             	lea    edx,[ecx+0x1]
c0017c1e:	88 81 a0 fa 02 c0    	mov    BYTE PTR [ecx-0x3ffd0560],al
c0017c24:	89 15 90 fa 02 c0    	mov    DWORD PTR ds:0xc002fa90,edx
c0017c2a:	83 fa 20             	cmp    edx,0x20
c0017c2d:	75 e5                	jne    c0017c14 <Vm::outbv(unsigned short, unsigned char)+0x10>
c0017c2f:	c7 05 90 fa 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002fa90,0x1f
c0017c39:	c3                   	ret    

c0017c3a <Vm::realToLinear(unsigned short, unsigned short)>:
c0017c3a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017c3f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017c44:	c1 e0 04             	shl    eax,0x4
c0017c47:	01 d0                	add    eax,edx
c0017c49:	c3                   	ret    

c0017c4a <Vm::getSegment(unsigned int)>:
c0017c4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c4e:	c1 e8 10             	shr    eax,0x10
c0017c51:	c3                   	ret    

c0017c52 <Vm::getOffset(unsigned int)>:
c0017c52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c56:	c3                   	ret    

c0017c57 <Vm::mainloop2()>:
c0017c57:	83 ec 18             	sub    esp,0x18
c0017c5a:	fa                   	cli    
c0017c5b:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017c60:	6a 02                	push   0x2
c0017c62:	83 c0 01             	add    eax,0x1
c0017c65:	c6 05 89 fa 02 c0 01 	mov    BYTE PTR ds:0xc002fa89,0x1
c0017c6c:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0017c71:	e8 32 f6 ff ff       	call   c00172a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017c76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c7b:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0017c7f:	52                   	push   edx
c0017c80:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0017c84:	52                   	push   edx
c0017c85:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0017c89:	52                   	push   edx
c0017c8a:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0017c8e:	50                   	push   eax
c0017c8f:	e8 7b 85 fe ff       	call   c000020f <goToVM86>
c0017c94:	83 c4 2c             	add    esp,0x2c
c0017c97:	c3                   	ret    

c0017c98 <Vm::mainVm8086Loop(void*)>:
c0017c98:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017ca0:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017ca5:	85 c0                	test   eax,eax
c0017ca7:	75 01                	jne    c0017caa <Vm::mainVm8086Loop(void*)+0x12>
c0017ca9:	fb                   	sti    
c0017caa:	eb ab                	jmp    c0017c57 <Vm::mainloop2()>

c0017cac <Vm::mainloop3(unsigned long)>:
c0017cac:	83 ec 18             	sub    esp,0x18
c0017caf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017cb3:	fa                   	cli    
c0017cb4:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c0017cba:	6a 02                	push   0x2
c0017cbc:	83 c2 01             	add    edx,0x1
c0017cbf:	c6 05 88 fa 02 c0 01 	mov    BYTE PTR ds:0xc002fa88,0x1
c0017cc6:	89 15 30 fa 02 c0    	mov    DWORD PTR ds:0xc002fa30,edx
c0017ccc:	a3 84 fa 02 c0       	mov    ds:0xc002fa84,eax
c0017cd1:	e8 d2 f5 ff ff       	call   c00172a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017cd6:	83 c4 1c             	add    esp,0x1c
c0017cd9:	e9 79 ff ff ff       	jmp    c0017c57 <Vm::mainloop2()>

c0017cde <Vm::initialise8086()>:
c0017cde:	83 ec 0c             	sub    esp,0xc
c0017ce1:	68 80 00 00 00       	push   0x80
c0017ce6:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0017ceb:	6a 00                	push   0x0
c0017ced:	68 98 7c 01 c0       	push   0xc0017c98
c0017cf2:	50                   	push   eax
c0017cf3:	e8 5c f2 ff ff       	call   c0016f54 <Process::createThread(void (*)(void*), void*, int)>
c0017cf8:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0017cff:	a3 8c fa 02 c0       	mov    ds:0xc002fa8c,eax
c0017d04:	68 10 01 00 00       	push   0x110
c0017d09:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0017d0e:	6a 00                	push   0x0
c0017d10:	6a 00                	push   0x0
c0017d12:	8b 90 b2 05 00 00    	mov    edx,DWORD PTR [eax+0x5b2]
c0017d18:	52                   	push   edx
c0017d19:	e8 4a c1 ff ff       	call   c0013e68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d1e:	83 c4 2c             	add    esp,0x2c
c0017d21:	c3                   	ret    

c0017d22 <Vm::resetConventionalMemory8086()>:
c0017d22:	c3                   	ret    

c0017d23 <Vm::finish8086()>:
c0017d23:	53                   	push   ebx
c0017d24:	83 ec 08             	sub    esp,0x8
c0017d27:	eb 17                	jmp    c0017d40 <Vm::finish8086()+0x1d>
c0017d29:	e8 e6 f4 ff ff       	call   c0017214 <schedule()>
c0017d2e:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017d36:	8b 0d 30 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa30
c0017d3c:	85 c9                	test   ecx,ecx
c0017d3e:	74 51                	je     c0017d91 <Vm::finish8086()+0x6e>
c0017d40:	fa                   	cli    
c0017d41:	8b 1d 30 fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa30
c0017d47:	83 c3 01             	add    ebx,0x1
c0017d4a:	80 3d 88 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002fa88,0x0
c0017d51:	89 1d 30 fa 02 c0    	mov    DWORD PTR ds:0xc002fa30,ebx
c0017d57:	74 d0                	je     c0017d29 <Vm::finish8086()+0x6>
c0017d59:	83 ec 0c             	sub    esp,0xc
c0017d5c:	a1 8c fa 02 c0       	mov    eax,ds:0xc002fa8c
c0017d61:	8b 1d 84 fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa84
c0017d67:	50                   	push   eax
c0017d68:	c6 05 88 fa 02 c0 00 	mov    BYTE PTR ds:0xc002fa88,0x0
c0017d6f:	e8 fc f7 ff ff       	call   c0017570 <unblockTask(ThreadControlBlock*)>
c0017d74:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017d7c:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c0017d82:	83 c4 10             	add    esp,0x10
c0017d85:	85 d2                	test   edx,edx
c0017d87:	75 01                	jne    c0017d8a <Vm::finish8086()+0x67>
c0017d89:	fb                   	sti    
c0017d8a:	89 d8                	mov    eax,ebx
c0017d8c:	83 c4 08             	add    esp,0x8
c0017d8f:	5b                   	pop    ebx
c0017d90:	c3                   	ret    
c0017d91:	fb                   	sti    
c0017d92:	eb ac                	jmp    c0017d40 <Vm::finish8086()+0x1d>

c0017d94 <Vm::getOutput8086(unsigned char*)>:
c0017d94:	57                   	push   edi
c0017d95:	8b 0d 90 fa 02 c0    	mov    ecx,DWORD PTR ds:0xc002fa90
c0017d9b:	56                   	push   esi
c0017d9c:	be a0 fa 02 c0       	mov    esi,0xc002faa0
c0017da1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0017da5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017da7:	a1 90 fa 02 c0       	mov    eax,ds:0xc002fa90
c0017dac:	5e                   	pop    esi
c0017dad:	c7 05 90 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa90,0x0
c0017db7:	5f                   	pop    edi
c0017db8:	c3                   	ret    

c0017db9 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017db9:	55                   	push   ebp
c0017dba:	57                   	push   edi
c0017dbb:	56                   	push   esi
c0017dbc:	53                   	push   ebx
c0017dbd:	83 ec 2c             	sub    esp,0x2c
c0017dc0:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017dc4:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017dc8:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0017dcc:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0017dd0:	80 3d 80 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002fa80,0x0
c0017dd7:	75 1f                	jne    c0017df8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>
c0017dd9:	e9 bb 00 00 00       	jmp    c0017e99 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xe0>
c0017dde:	e8 31 f4 ff ff       	call   c0017214 <schedule()>
c0017de3:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017deb:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017df0:	85 c0                	test   eax,eax
c0017df2:	0f 84 9b 00 00 00    	je     c0017e93 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xda>
c0017df8:	fa                   	cli    
c0017df9:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017dfe:	83 c0 01             	add    eax,0x1
c0017e01:	80 3d 89 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002fa89,0x0
c0017e08:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c0017e0d:	74 cf                	je     c0017dde <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x25>
c0017e0f:	83 ec 04             	sub    esp,0x4
c0017e12:	a1 8c fa 02 c0       	mov    eax,ds:0xc002fa8c
c0017e17:	c7 05 90 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa90,0x0
c0017e21:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c0017e25:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0017e29:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c0017e2d:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c0017e31:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017e35:	0f b7 f6             	movzx  esi,si
c0017e38:	6a 20                	push   0x20
c0017e3a:	0f b7 db             	movzx  ebx,bx
c0017e3d:	6a 00                	push   0x0
c0017e3f:	68 a0 fa 02 c0       	push   0xc002faa0
c0017e44:	e8 a7 86 fe ff       	call   c00004f0 <memset>
c0017e49:	5a                   	pop    edx
c0017e4a:	59                   	pop    ecx
c0017e4b:	56                   	push   esi
c0017e4c:	53                   	push   ebx
c0017e4d:	e8 e8 fd ff ff       	call   c0017c3a <Vm::realToLinear(unsigned short, unsigned short)>
c0017e52:	83 c4 10             	add    esp,0x10
c0017e55:	89 c7                	mov    edi,eax
c0017e57:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017e5b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0017e5f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017e61:	c6 05 89 fa 02 c0 00 	mov    BYTE PTR ds:0xc002fa89,0x0
c0017e68:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017e70:	8b 1d 30 fa 02 c0    	mov    ebx,DWORD PTR ds:0xc002fa30
c0017e76:	85 db                	test   ebx,ebx
c0017e78:	75 01                	jne    c0017e7b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xc2>
c0017e7a:	fb                   	sti    
c0017e7b:	83 ec 0c             	sub    esp,0xc
c0017e7e:	a1 8c fa 02 c0       	mov    eax,ds:0xc002fa8c
c0017e83:	50                   	push   eax
c0017e84:	e8 e7 f6 ff ff       	call   c0017570 <unblockTask(ThreadControlBlock*)>
c0017e89:	83 c4 3c             	add    esp,0x3c
c0017e8c:	b0 01                	mov    al,0x1
c0017e8e:	5b                   	pop    ebx
c0017e8f:	5e                   	pop    esi
c0017e90:	5f                   	pop    edi
c0017e91:	5d                   	pop    ebp
c0017e92:	c3                   	ret    
c0017e93:	fb                   	sti    
c0017e94:	e9 5f ff ff ff       	jmp    c0017df8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>
c0017e99:	83 ec 0c             	sub    esp,0xc
c0017e9c:	68 14 01 00 00       	push   0x114
c0017ea1:	e8 e9 7c ff ff       	call   c000fb8f <malloc>
c0017ea6:	83 c4 0c             	add    esp,0xc
c0017ea9:	89 c2                	mov    edx,eax
c0017eab:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0017eb0:	50                   	push   eax
c0017eb1:	68 9c 54 02 c0       	push   0xc002549c
c0017eb6:	52                   	push   edx
c0017eb7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0017ebb:	e8 ca 02 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0017ec0:	58                   	pop    eax
c0017ec1:	5a                   	pop    edx
c0017ec2:	6a 12                	push   0x12
c0017ec4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ec8:	52                   	push   edx
c0017ec9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0017ecd:	e8 d6 02 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0017ed2:	59                   	pop    ecx
c0017ed3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ed7:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0017edb:	8b 02                	mov    eax,DWORD PTR [edx]
c0017edd:	51                   	push   ecx
c0017ede:	6a 00                	push   0x0
c0017ee0:	6a 00                	push   0x0
c0017ee2:	68 00 00 11 00       	push   0x110000
c0017ee7:	52                   	push   edx
c0017ee8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017eec:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0017eef:	83 c4 14             	add    esp,0x14
c0017ef2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ef6:	52                   	push   edx
c0017ef7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0017efb:	e8 06 03 ff ff       	call   c0008206 <File::close()>
c0017f00:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f04:	8b 02                	mov    eax,DWORD PTR [edx]
c0017f06:	89 14 24             	mov    DWORD PTR [esp],edx
c0017f09:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017f0c:	c6 05 80 fa 02 c0 01 	mov    BYTE PTR ds:0xc002fa80,0x1
c0017f13:	83 c4 10             	add    esp,0x10
c0017f16:	e9 dd fe ff ff       	jmp    c0017df8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>

c0017f1b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017f1b:	55                   	push   ebp
c0017f1c:	57                   	push   edi
c0017f1d:	56                   	push   esi
c0017f1e:	53                   	push   ebx
c0017f1f:	83 ec 2c             	sub    esp,0x2c
c0017f22:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017f26:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0017f2a:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017f2e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017f32:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0017f36:	80 3d 80 fa 02 c0 00 	cmp    BYTE PTR ds:0xc002fa80,0x0
c0017f3d:	0f 84 59 01 00 00    	je     c001809c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x181>
c0017f43:	83 ec 08             	sub    esp,0x8
c0017f46:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0017f4a:	51                   	push   ecx
c0017f4b:	68 00 55 02 c0       	push   0xc0025500
c0017f50:	e8 27 f0 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0017f55:	83 c4 10             	add    esp,0x10
c0017f58:	eb 1a                	jmp    c0017f74 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x59>
c0017f5a:	e8 b5 f2 ff ff       	call   c0017214 <schedule()>
c0017f5f:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0017f67:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0017f6c:	85 c0                	test   eax,eax
c0017f6e:	0f 84 22 01 00 00    	je     c0018096 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17b>
c0017f74:	fa                   	cli    
c0017f75:	8b 15 30 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa30
c0017f7b:	8a 1d 89 fa 02 c0    	mov    bl,BYTE PTR ds:0xc002fa89
c0017f81:	83 c2 01             	add    edx,0x1
c0017f84:	84 db                	test   bl,bl
c0017f86:	89 15 30 fa 02 c0    	mov    DWORD PTR ds:0xc002fa30,edx
c0017f8c:	74 cc                	je     c0017f5a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>
c0017f8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017f92:	a1 8c fa 02 c0       	mov    eax,ds:0xc002fa8c
c0017f97:	83 ec 04             	sub    esp,0x4
c0017f9a:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c0017f9e:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c0017fa2:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c0017fa6:	66 89 68 5b          	mov    WORD PTR [eax+0x5b],bp
c0017faa:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017fae:	c7 05 90 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa90,0x0
c0017fb8:	6a 20                	push   0x20
c0017fba:	6a 00                	push   0x0
c0017fbc:	68 a0 fa 02 c0       	push   0xc002faa0
c0017fc1:	e8 2a 85 fe ff       	call   c00004f0 <memset>
c0017fc6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017fcd:	e8 bd 7b ff ff       	call   c000fb8f <malloc>
c0017fd2:	83 c4 0c             	add    esp,0xc
c0017fd5:	89 c7                	mov    edi,eax
c0017fd7:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c0017fdc:	50                   	push   eax
c0017fdd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017fe1:	50                   	push   eax
c0017fe2:	57                   	push   edi
c0017fe3:	e8 a2 01 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0017fe8:	83 c4 10             	add    esp,0x10
c0017feb:	85 ff                	test   edi,edi
c0017fed:	0f 84 66 01 00 00    	je     c0018159 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x23e>
c0017ff3:	83 ec 04             	sub    esp,0x4
c0017ff6:	8d 44 24 17          	lea    eax,[esp+0x17]
c0017ffa:	50                   	push   eax
c0017ffb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017fff:	50                   	push   eax
c0018000:	57                   	push   edi
c0018001:	e8 a4 04 ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c0018006:	8a 4c 24 23          	mov    cl,BYTE PTR [esp+0x23]
c001800a:	83 c4 10             	add    esp,0x10
c001800d:	84 c9                	test   cl,cl
c001800f:	0f 85 e9 00 00 00    	jne    c00180fe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1e3>
c0018015:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018019:	83 ec 08             	sub    esp,0x8
c001801c:	6a 01                	push   0x1
c001801e:	57                   	push   edi
c001801f:	e8 84 01 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0018024:	83 c4 10             	add    esp,0x10
c0018027:	85 c0                	test   eax,eax
c0018029:	0f 85 fd 00 00 00    	jne    c001812c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x211>
c001802f:	83 ec 08             	sub    esp,0x8
c0018032:	0f b7 c5             	movzx  eax,bp
c0018035:	0f b7 f6             	movzx  esi,si
c0018038:	56                   	push   esi
c0018039:	50                   	push   eax
c001803a:	e8 fb fb ff ff       	call   c0017c3a <Vm::realToLinear(unsigned short, unsigned short)>
c001803f:	5a                   	pop    edx
c0018040:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0018042:	8d 54 24 20          	lea    edx,[esp+0x20]
c0018046:	52                   	push   edx
c0018047:	50                   	push   eax
c0018048:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001804c:	56                   	push   esi
c001804d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0018051:	55                   	push   ebp
c0018052:	57                   	push   edi
c0018053:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0018056:	83 c4 14             	add    esp,0x14
c0018059:	57                   	push   edi
c001805a:	e8 a7 01 ff ff       	call   c0008206 <File::close()>
c001805f:	c6 05 89 fa 02 c0 00 	mov    BYTE PTR ds:0xc002fa89,0x0
c0018066:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c001806e:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0018073:	83 c4 10             	add    esp,0x10
c0018076:	85 c0                	test   eax,eax
c0018078:	75 01                	jne    c001807b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x160>
c001807a:	fb                   	sti    
c001807b:	83 ec 0c             	sub    esp,0xc
c001807e:	a1 8c fa 02 c0       	mov    eax,ds:0xc002fa8c
c0018083:	50                   	push   eax
c0018084:	e8 e7 f4 ff ff       	call   c0017570 <unblockTask(ThreadControlBlock*)>
c0018089:	83 c4 10             	add    esp,0x10
c001808c:	83 c4 2c             	add    esp,0x2c
c001808f:	88 d8                	mov    al,bl
c0018091:	5b                   	pop    ebx
c0018092:	5e                   	pop    esi
c0018093:	5f                   	pop    edi
c0018094:	5d                   	pop    ebp
c0018095:	c3                   	ret    
c0018096:	fb                   	sti    
c0018097:	e9 d8 fe ff ff       	jmp    c0017f74 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x59>
c001809c:	83 ec 0c             	sub    esp,0xc
c001809f:	68 14 01 00 00       	push   0x114
c00180a4:	e8 e6 7a ff ff       	call   c000fb8f <malloc>
c00180a9:	83 c4 0c             	add    esp,0xc
c00180ac:	89 c3                	mov    ebx,eax
c00180ae:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c00180b3:	50                   	push   eax
c00180b4:	68 9c 54 02 c0       	push   0xc002549c
c00180b9:	53                   	push   ebx
c00180ba:	e8 cb 00 ff ff       	call   c000818a <File::File(char const*, Process*)>
c00180bf:	58                   	pop    eax
c00180c0:	5a                   	pop    edx
c00180c1:	6a 12                	push   0x12
c00180c3:	53                   	push   ebx
c00180c4:	e8 df 00 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c00180c9:	59                   	pop    ecx
c00180ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c00180cc:	8d 4c 24 24          	lea    ecx,[esp+0x24]
c00180d0:	51                   	push   ecx
c00180d1:	6a 00                	push   0x0
c00180d3:	6a 00                	push   0x0
c00180d5:	68 00 00 11 00       	push   0x110000
c00180da:	53                   	push   ebx
c00180db:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00180de:	83 c4 14             	add    esp,0x14
c00180e1:	53                   	push   ebx
c00180e2:	e8 1f 01 ff ff       	call   c0008206 <File::close()>
c00180e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00180e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00180ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00180ef:	c6 05 80 fa 02 c0 01 	mov    BYTE PTR ds:0xc002fa80,0x1
c00180f6:	83 c4 10             	add    esp,0x10
c00180f9:	e9 45 fe ff ff       	jmp    c0017f43 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x28>
c00180fe:	83 ec 0c             	sub    esp,0xc
c0018101:	68 cb 54 02 c0       	push   0xc00254cb
c0018106:	e8 db 7e ff ff       	call   c000ffe6 <KePanic(char const*)>
c001810b:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0018113:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0018118:	83 c4 10             	add    esp,0x10
c001811b:	85 c0                	test   eax,eax
c001811d:	75 01                	jne    c0018120 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x205>
c001811f:	fb                   	sti    
c0018120:	83 c4 2c             	add    esp,0x2c
c0018123:	31 db                	xor    ebx,ebx
c0018125:	88 d8                	mov    al,bl
c0018127:	5b                   	pop    ebx
c0018128:	5e                   	pop    esi
c0018129:	5f                   	pop    edi
c001812a:	5d                   	pop    ebp
c001812b:	c3                   	ret    
c001812c:	83 ec 0c             	sub    esp,0xc
c001812f:	68 e4 54 02 c0       	push   0xc00254e4
c0018134:	e8 ad 7e ff ff       	call   c000ffe6 <KePanic(char const*)>
c0018139:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c0018141:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0018146:	83 c4 10             	add    esp,0x10
c0018149:	85 c0                	test   eax,eax
c001814b:	75 d3                	jne    c0018120 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x205>
c001814d:	fb                   	sti    
c001814e:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018152:	88 cb                	mov    bl,cl
c0018154:	e9 33 ff ff ff       	jmp    c001808c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x171>
c0018159:	83 ec 0c             	sub    esp,0xc
c001815c:	68 b7 54 02 c0       	push   0xc00254b7
c0018161:	eb a3                	jmp    c0018106 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1eb>

c0018163 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0018163:	57                   	push   edi
c0018164:	56                   	push   esi
c0018165:	53                   	push   ebx
c0018166:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001816a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001816e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018172:	83 e8 06             	sub    eax,0x6
c0018175:	0f b7 c0             	movzx  eax,ax
c0018178:	50                   	push   eax
c0018179:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001817e:	50                   	push   eax
c001817f:	e8 b6 fa ff ff       	call   c0017c3a <Vm::realToLinear(unsigned short, unsigned short)>
c0018184:	5a                   	pop    edx
c0018185:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018188:	5b                   	pop    ebx
c0018189:	8d 56 fa             	lea    edx,[esi-0x6]
c001818c:	8b 59 38             	mov    ebx,DWORD PTR [ecx+0x38]
c001818f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018195:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0018198:	8d 53 02             	lea    edx,[ebx+0x2]
c001819b:	66 89 10             	mov    WORD PTR [eax],dx
c001819e:	66 8b 51 3c          	mov    dx,WORD PTR [ecx+0x3c]
c00181a2:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00181a6:	8b 59 40             	mov    ebx,DWORD PTR [ecx+0x40]
c00181a9:	66 8b 71 40          	mov    si,WORD PTR [ecx+0x40]
c00181ad:	0f b6 d7             	movzx  edx,bh
c00181b0:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00181b4:	c1 e2 08             	shl    edx,0x8
c00181b7:	8b 35 00 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002000
c00181bd:	80 7e 61 00          	cmp    BYTE PTR [esi+0x61],0x0
c00181c1:	0f b6 f3             	movzx  esi,bl
c00181c4:	74 2c                	je     c00181f2 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x8f>
c00181c6:	09 f2                	or     edx,esi
c00181c8:	80 ce 02             	or     dh,0x2
c00181cb:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00181cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181d4:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00181d8:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c00181e0:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00181e3:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c00181eb:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00181ee:	5b                   	pop    ebx
c00181ef:	5e                   	pop    esi
c00181f0:	5f                   	pop    edi
c00181f1:	c3                   	ret    
c00181f2:	09 f2                	or     edx,esi
c00181f4:	80 e6 fd             	and    dh,0xfd
c00181f7:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00181fb:	eb d2                	jmp    c00181cf <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6c>

c00181fd <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00181fd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018202:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018207:	c1 e0 04             	shl    eax,0x4
c001820a:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001820d:	c3                   	ret    

c001820e <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001820e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018213:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018218:	c1 e0 04             	shl    eax,0x4
c001821b:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001821f:	c3                   	ret    

c0018220 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0018220:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018225:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001822a:	c1 e0 04             	shl    eax,0x4
c001822d:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0018230:	c3                   	ret    

c0018231 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018231:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018236:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001823b:	c1 e0 04             	shl    eax,0x4
c001823e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018242:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018245:	c3                   	ret    

c0018246 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018246:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001824b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018250:	c1 e0 04             	shl    eax,0x4
c0018253:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018257:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001825b:	c3                   	ret    

c001825c <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001825c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018261:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018266:	c1 e0 04             	shl    eax,0x4
c0018269:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001826d:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0018270:	c3                   	ret    

c0018271 <Vm::faultHandler(regs*)>:
c0018271:	55                   	push   ebp
c0018272:	57                   	push   edi
c0018273:	56                   	push   esi
c0018274:	53                   	push   ebx
c0018275:	83 ec 1c             	sub    esp,0x1c
c0018278:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001827c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001827f:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0018283:	89 c6                	mov    esi,eax
c0018285:	52                   	push   edx
c0018286:	0f b7 c0             	movzx  eax,ax
c0018289:	50                   	push   eax
c001828a:	e8 ab f9 ff ff       	call   c0017c3a <Vm::realToLinear(unsigned short, unsigned short)>
c001828f:	59                   	pop    ecx
c0018290:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0018293:	5f                   	pop    edi
c0018294:	0f b7 d5             	movzx  edx,bp
c0018297:	8b 7b 44             	mov    edi,DWORD PTR [ebx+0x44]
c001829a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001829e:	89 c1                	mov    ecx,eax
c00182a0:	0f b7 c7             	movzx  eax,di
c00182a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00182a7:	50                   	push   eax
c00182a8:	52                   	push   edx
c00182a9:	e8 8c f9 ff ff       	call   c0017c3a <Vm::realToLinear(unsigned short, unsigned short)>
c00182ae:	83 c4 08             	add    esp,0x8
c00182b1:	c6 44 24 06 06       	mov    BYTE PTR [esp+0x6],0x6
c00182b6:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c00182bb:	c6 44 24 05 00       	mov    BYTE PTR [esp+0x5],0x0
c00182c0:	8a 11                	mov    dl,BYTE PTR [ecx]
c00182c2:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c00182c6:	83 ea 26             	sub    edx,0x26
c00182c9:	0f b6 d2             	movzx  edx,dl
c00182cc:	81 fa d5 00 00 00    	cmp    edx,0xd5
c00182d2:	0f 87 04 04 00 00    	ja     c00186dc <Vm::faultHandler(regs*)+0x46b>
c00182d8:	ff 24 95 84 55 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdaa7c]
c00182df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00182e4:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c00182e8:	b0 01                	mov    al,0x1
c00182ea:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00182ed:	83 c5 01             	add    ebp,0x1
c00182f0:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c00182f3:	83 c4 1c             	add    esp,0x1c
c00182f6:	5b                   	pop    ebx
c00182f7:	5e                   	pop    esi
c00182f8:	5f                   	pop    edi
c00182f9:	5d                   	pop    ebp
c00182fa:	c3                   	ret    
c00182fb:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00182fe:	c6 44 24 06 02       	mov    BYTE PTR [esp+0x6],0x2
c0018303:	83 c2 01             	add    edx,0x1
c0018306:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018309:	83 c1 01             	add    ecx,0x1
c001830c:	eb b2                	jmp    c00182c0 <Vm::faultHandler(regs*)+0x4f>
c001830e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018311:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c0018316:	83 c2 01             	add    edx,0x1
c0018319:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001831c:	eb eb                	jmp    c0018309 <Vm::faultHandler(regs*)+0x98>
c001831e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018321:	c6 44 24 06 05       	mov    BYTE PTR [esp+0x6],0x5
c0018326:	83 c2 01             	add    edx,0x1
c0018329:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001832c:	eb db                	jmp    c0018309 <Vm::faultHandler(regs*)+0x98>
c001832e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018331:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c0018336:	83 c2 01             	add    edx,0x1
c0018339:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001833c:	eb cb                	jmp    c0018309 <Vm::faultHandler(regs*)+0x98>
c001833e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018341:	c6 44 24 06 03       	mov    BYTE PTR [esp+0x6],0x3
c0018346:	83 c2 01             	add    edx,0x1
c0018349:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001834c:	eb bb                	jmp    c0018309 <Vm::faultHandler(regs*)+0x98>
c001834e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018351:	c6 44 24 06 04       	mov    BYTE PTR [esp+0x6],0x4
c0018356:	83 c2 01             	add    edx,0x1
c0018359:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001835c:	eb ab                	jmp    c0018309 <Vm::faultHandler(regs*)+0x98>
c001835e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018361:	c6 44 24 05 01       	mov    BYTE PTR [esp+0x5],0x1
c0018366:	83 c2 01             	add    edx,0x1
c0018369:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001836c:	eb 9b                	jmp    c0018309 <Vm::faultHandler(regs*)+0x98>
c001836e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018371:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0018376:	83 c2 01             	add    edx,0x1
c0018379:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001837c:	eb 8b                	jmp    c0018309 <Vm::faultHandler(regs*)+0x98>
c001837e:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018381:	f6 44 24 07 01       	test   BYTE PTR [esp+0x7],0x1
c0018386:	74 0d                	je     c0018395 <Vm::faultHandler(regs*)+0x124>
c0018388:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001838f:	0f 87 8a 06 00 00    	ja     c0018a1f <Vm::faultHandler(regs*)+0x7ae>
c0018395:	83 ec 0c             	sub    esp,0xc
c0018398:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001839c:	0f b7 f6             	movzx  esi,si
c001839f:	50                   	push   eax
c00183a0:	e8 4c f8 ff ff       	call   c0017bf1 <Vm::inbv(unsigned short)>
c00183a5:	83 c4 0c             	add    esp,0xc
c00183a8:	0f b6 c0             	movzx  eax,al
c00183ab:	50                   	push   eax
c00183ac:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00183b0:	50                   	push   eax
c00183b1:	56                   	push   esi
c00183b2:	e8 7a fe ff ff       	call   c0018231 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00183b7:	83 c4 10             	add    esp,0x10
c00183ba:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00183bd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00183c1:	0f 84 d6 05 00 00    	je     c001899d <Vm::faultHandler(regs*)+0x72c>
c00183c7:	83 e8 01             	sub    eax,0x1
c00183ca:	0f b7 c0             	movzx  eax,ax
c00183cd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00183d0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00183d3:	83 c0 01             	add    eax,0x1
c00183d6:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00183d9:	83 c4 1c             	add    esp,0x1c
c00183dc:	b0 01                	mov    al,0x1
c00183de:	5b                   	pop    ebx
c00183df:	5e                   	pop    esi
c00183e0:	5f                   	pop    edi
c00183e1:	5d                   	pop    ebp
c00183e2:	c3                   	ret    
c00183e3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00183e6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00183e9:	f6 44 24 07 01       	test   BYTE PTR [esp+0x7],0x1
c00183ee:	0f 85 98 04 00 00    	jne    c001888c <Vm::faultHandler(regs*)+0x61b>
c00183f4:	0f b7 c8             	movzx  ecx,ax
c00183f7:	0f b7 f6             	movzx  esi,si
c00183fa:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00183fd:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018402:	0f 84 35 05 00 00    	je     c001893d <Vm::faultHandler(regs*)+0x6cc>
c0018408:	ed                   	in     eax,dx
c0018409:	83 ec 04             	sub    esp,0x4
c001840c:	50                   	push   eax
c001840d:	51                   	push   ecx
c001840e:	56                   	push   esi
c001840f:	e8 48 fe ff ff       	call   c001825c <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018414:	83 c4 10             	add    esp,0x10
c0018417:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001841a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001841e:	0f 84 9d 05 00 00    	je     c00189c1 <Vm::faultHandler(regs*)+0x750>
c0018424:	83 e8 04             	sub    eax,0x4
c0018427:	25 ff ff 00 00       	and    eax,0xffff
c001842c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001842f:	eb 9f                	jmp    c00183d0 <Vm::faultHandler(regs*)+0x15f>
c0018431:	0f b6 44 24 06       	movzx  eax,BYTE PTR [esp+0x6]
c0018436:	83 f8 06             	cmp    eax,0x6
c0018439:	0f 87 60 03 00 00    	ja     c001879f <Vm::faultHandler(regs*)+0x52e>
c001843f:	ff 24 85 dc 58 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda724]
c0018446:	0f b6 44 24 06       	movzx  eax,BYTE PTR [esp+0x6]
c001844b:	83 f8 06             	cmp    eax,0x6
c001844e:	0f 87 f6 02 00 00    	ja     c001874a <Vm::faultHandler(regs*)+0x4d9>
c0018454:	ff 24 85 f8 58 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda708]
c001845b:	83 ec 08             	sub    esp,0x8
c001845e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018462:	50                   	push   eax
c0018463:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018467:	50                   	push   eax
c0018468:	e8 97 f7 ff ff       	call   c0017c04 <Vm::outbv(unsigned short, unsigned char)>
c001846d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0018470:	83 c4 10             	add    esp,0x10
c0018473:	83 c0 02             	add    eax,0x2
c0018476:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018479:	b0 01                	mov    al,0x1
c001847b:	e9 73 fe ff ff       	jmp    c00182f3 <Vm::faultHandler(regs*)+0x82>
c0018480:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018484:	3d ee 00 00 00       	cmp    eax,0xee
c0018489:	0f 84 5a 04 00 00    	je     c00188e9 <Vm::faultHandler(regs*)+0x678>
c001848f:	83 ec 0c             	sub    esp,0xc
c0018492:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018496:	52                   	push   edx
c0018497:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001849b:	56                   	push   esi
c001849c:	51                   	push   ecx
c001849d:	50                   	push   eax
c001849e:	53                   	push   ebx
c001849f:	e8 bf fc ff ff       	call   c0018163 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00184a4:	83 c4 20             	add    esp,0x20
c00184a7:	b0 01                	mov    al,0x1
c00184a9:	e9 45 fe ff ff       	jmp    c00182f3 <Vm::faultHandler(regs*)+0x82>
c00184ae:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00184b2:	89 d1                	mov    ecx,edx
c00184b4:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00184b7:	c1 e1 08             	shl    ecx,0x8
c00184ba:	09 ca                	or     edx,ecx
c00184bc:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00184bf:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00184c3:	89 d1                	mov    ecx,edx
c00184c5:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00184c9:	c1 e1 08             	shl    ecx,0x8
c00184cc:	09 ca                	or     edx,ecx
c00184ce:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00184d1:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00184d5:	89 d1                	mov    ecx,edx
c00184d7:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00184db:	c1 e1 08             	shl    ecx,0x8
c00184de:	09 ca                	or     edx,ecx
c00184e0:	81 ca 00 02 02 00    	or     edx,0x20200
c00184e6:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00184e9:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c00184ed:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00184f3:	d1 e8                	shr    eax,1
c00184f5:	83 e0 01             	and    eax,0x1
c00184f8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00184fb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00184fe:	83 c0 06             	add    eax,0x6
c0018501:	25 ff ff 00 00       	and    eax,0xffff
c0018506:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018509:	b0 01                	mov    al,0x1
c001850b:	e9 e3 fd ff ff       	jmp    c00182f3 <Vm::faultHandler(regs*)+0x82>
c0018510:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018513:	83 ec 0c             	sub    esp,0xc
c0018516:	b0 00                	mov    al,0x0
c0018518:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001851b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001851f:	50                   	push   eax
c0018520:	e8 cc f6 ff ff       	call   c0017bf1 <Vm::inbv(unsigned short)>
c0018525:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018528:	0f b6 c0             	movzx  eax,al
c001852b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001852e:	09 c2                	or     edx,eax
c0018530:	83 c1 02             	add    ecx,0x2
c0018533:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0018536:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0018539:	83 c4 10             	add    esp,0x10
c001853c:	b0 01                	mov    al,0x1
c001853e:	e9 b0 fd ff ff       	jmp    c00182f3 <Vm::faultHandler(regs*)+0x82>
c0018543:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018548:	0f 85 7a 03 00 00    	jne    c00188c8 <Vm::faultHandler(regs*)+0x657>
c001854e:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0018551:	81 e6 00 00 ff ff    	and    esi,0xffff0000
c0018557:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001855a:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001855e:	66 ed                	in     ax,dx
c0018560:	0f b7 c0             	movzx  eax,ax
c0018563:	09 f0                	or     eax,esi
c0018565:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018568:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c001856b:	83 c0 02             	add    eax,0x2
c001856e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018571:	83 c4 1c             	add    esp,0x1c
c0018574:	b0 01                	mov    al,0x1
c0018576:	5b                   	pop    ebx
c0018577:	5e                   	pop    esi
c0018578:	5f                   	pop    edi
c0018579:	5d                   	pop    ebp
c001857a:	c3                   	ret    
c001857b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001857e:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018583:	0f 84 d7 02 00 00    	je     c0018860 <Vm::faultHandler(regs*)+0x5ef>
c0018589:	83 ef 04             	sub    edi,0x4
c001858c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018592:	81 e7 ff ff 00 00    	and    edi,0xffff
c0018598:	89 7b 44             	mov    DWORD PTR [ebx+0x44],edi
c001859b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001859e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00185a4:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c00185a8:	0f 84 22 fe ff ff    	je     c00183d0 <Vm::faultHandler(regs*)+0x15f>
c00185ae:	80 ce 02             	or     dh,0x2
c00185b1:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00185b4:	e9 17 fe ff ff       	jmp    c00183d0 <Vm::faultHandler(regs*)+0x15f>
c00185b9:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c00185be:	0f 84 6b 02 00 00    	je     c001882f <Vm::faultHandler(regs*)+0x5be>
c00185c4:	8b 10                	mov    edx,DWORD PTR [eax]
c00185c6:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00185cc:	81 ca 00 02 02 00    	or     edx,0x20200
c00185d2:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00185d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00185d7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00185dd:	c1 e8 09             	shr    eax,0x9
c00185e0:	83 e0 01             	and    eax,0x1
c00185e3:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00185e6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00185e9:	83 c0 04             	add    eax,0x4
c00185ec:	25 ff ff 00 00       	and    eax,0xffff
c00185f1:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00185f4:	e9 d7 fd ff ff       	jmp    c00183d0 <Vm::faultHandler(regs*)+0x15f>
c00185f9:	83 ec 08             	sub    esp,0x8
c00185fc:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018600:	50                   	push   eax
c0018601:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018605:	50                   	push   eax
c0018606:	e8 f9 f5 ff ff       	call   c0017c04 <Vm::outbv(unsigned short, unsigned char)>
c001860b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001860e:	83 c4 10             	add    esp,0x10
c0018611:	83 c2 01             	add    edx,0x1
c0018614:	b0 01                	mov    al,0x1
c0018616:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018619:	e9 d5 fc ff ff       	jmp    c00182f3 <Vm::faultHandler(regs*)+0x82>
c001861e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018621:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018624:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018629:	0f 84 ac 02 00 00    	je     c00188db <Vm::faultHandler(regs*)+0x66a>
c001862f:	ef                   	out    dx,eax
c0018630:	e9 9b fd ff ff       	jmp    c00183d0 <Vm::faultHandler(regs*)+0x15f>
c0018635:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018638:	83 c2 01             	add    edx,0x1
c001863b:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001863e:	e9 c6 fc ff ff       	jmp    c0018309 <Vm::faultHandler(regs*)+0x98>
c0018643:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018648:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001864c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c001864f:	83 c0 01             	add    eax,0x1
c0018652:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018655:	b0 01                	mov    al,0x1
c0018657:	e9 97 fc ff ff       	jmp    c00182f3 <Vm::faultHandler(regs*)+0x82>
c001865c:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001865f:	83 ec 0c             	sub    esp,0xc
c0018662:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018666:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c001866c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001866f:	50                   	push   eax
c0018670:	e8 7c f5 ff ff       	call   c0017bf1 <Vm::inbv(unsigned short)>
c0018675:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0018678:	0f b6 c0             	movzx  eax,al
c001867b:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001867e:	09 c7                	or     edi,eax
c0018680:	83 c5 01             	add    ebp,0x1
c0018683:	89 7b 2c             	mov    DWORD PTR [ebx+0x2c],edi
c0018686:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0018689:	83 c4 10             	add    esp,0x10
c001868c:	b0 01                	mov    al,0x1
c001868e:	e9 60 fc ff ff       	jmp    c00182f3 <Vm::faultHandler(regs*)+0x82>
c0018693:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018696:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c001869b:	0f 85 34 02 00 00    	jne    c00188d5 <Vm::faultHandler(regs*)+0x664>
c00186a1:	66 ed                	in     ax,dx
c00186a3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00186a6:	0f b7 c0             	movzx  eax,ax
c00186a9:	81 e2 00 00 ff ff    	and    edx,0xffff0000
c00186af:	09 d0                	or     eax,edx
c00186b1:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00186b4:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00186b7:	83 c1 01             	add    ecx,0x1
c00186ba:	b0 01                	mov    al,0x1
c00186bc:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c00186bf:	e9 2f fc ff ff       	jmp    c00182f3 <Vm::faultHandler(regs*)+0x82>
c00186c4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00186c7:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00186cb:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c00186d0:	0f 84 0c 02 00 00    	je     c00188e2 <Vm::faultHandler(regs*)+0x671>
c00186d6:	ef                   	out    dx,eax
c00186d7:	e9 8c fe ff ff       	jmp    c0018568 <Vm::faultHandler(regs*)+0x2f7>
c00186dc:	0f b6 74 24 04       	movzx  esi,BYTE PTR [esp+0x4]
c00186e1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00186e5:	50                   	push   eax
c00186e6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00186ea:	50                   	push   eax
c00186eb:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00186ef:	50                   	push   eax
c00186f0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00186f4:	50                   	push   eax
c00186f5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00186f9:	50                   	push   eax
c00186fa:	56                   	push   esi
c00186fb:	56                   	push   esi
c00186fc:	68 54 55 02 c0       	push   0xc0025554
c0018701:	e8 76 e8 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018706:	83 c4 20             	add    esp,0x20
c0018709:	eb 05                	jmp    c0018710 <Vm::faultHandler(regs*)+0x49f>
c001870b:	83 f8 5a             	cmp    eax,0x5a
c001870e:	74 27                	je     c0018737 <Vm::faultHandler(regs*)+0x4c6>
c0018710:	83 ec 0c             	sub    esp,0xc
c0018713:	6a 60                	push   0x60
c0018715:	e8 d7 f4 ff ff       	call   c0017bf1 <Vm::inbv(unsigned short)>
c001871a:	83 c4 10             	add    esp,0x10
c001871d:	0f b6 c0             	movzx  eax,al
c0018720:	83 f8 1c             	cmp    eax,0x1c
c0018723:	75 e6                	jne    c001870b <Vm::faultHandler(regs*)+0x49a>
c0018725:	eb 10                	jmp    c0018737 <Vm::faultHandler(regs*)+0x4c6>
c0018727:	83 ec 0c             	sub    esp,0xc
c001872a:	6a 60                	push   0x60
c001872c:	e8 c0 f4 ff ff       	call   c0017bf1 <Vm::inbv(unsigned short)>
c0018731:	83 c4 10             	add    esp,0x10
c0018734:	0f b6 c0             	movzx  eax,al
c0018737:	83 f8 1c             	cmp    eax,0x1c
c001873a:	74 eb                	je     c0018727 <Vm::faultHandler(regs*)+0x4b6>
c001873c:	83 f8 5a             	cmp    eax,0x5a
c001873f:	74 e6                	je     c0018727 <Vm::faultHandler(regs*)+0x4b6>
c0018741:	31 c0                	xor    eax,eax
c0018743:	e9 ab fb ff ff       	jmp    c00182f3 <Vm::faultHandler(regs*)+0x82>
c0018748:	8b 33                	mov    esi,DWORD PTR [ebx]
c001874a:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c001874d:	f6 44 24 07 01       	test   BYTE PTR [esp+0x7],0x1
c0018752:	0f 85 9a 00 00 00    	jne    c00187f2 <Vm::faultHandler(regs*)+0x581>
c0018758:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001875b:	0f b7 c5             	movzx  eax,bp
c001875e:	81 e1 00 04 00 00    	and    ecx,0x400
c0018764:	0f b7 d6             	movzx  edx,si
c0018767:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001876a:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c001876f:	0f 84 f8 01 00 00    	je     c001896d <Vm::faultHandler(regs*)+0x6fc>
c0018775:	83 ec 08             	sub    esp,0x8
c0018778:	50                   	push   eax
c0018779:	52                   	push   edx
c001877a:	e8 a1 fa ff ff       	call   c0018220 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001877f:	83 c4 10             	add    esp,0x10
c0018782:	89 fa                	mov    edx,edi
c0018784:	ef                   	out    dx,eax
c0018785:	85 c9                	test   ecx,ecx
c0018787:	0f 84 44 02 00 00    	je     c00189d1 <Vm::faultHandler(regs*)+0x760>
c001878d:	8d 45 fc             	lea    eax,[ebp-0x4]
c0018790:	25 ff ff 00 00       	and    eax,0xffff
c0018795:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018798:	e9 33 fc ff ff       	jmp    c00183d0 <Vm::faultHandler(regs*)+0x15f>
c001879d:	8b 33                	mov    esi,DWORD PTR [ebx]
c001879f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00187a2:	f6 44 24 07 01       	test   BYTE PTR [esp+0x7],0x1
c00187a7:	74 0b                	je     c00187b4 <Vm::faultHandler(regs*)+0x543>
c00187a9:	3d ff ff 00 00       	cmp    eax,0xffff
c00187ae:	0f 87 3a 02 00 00    	ja     c00189ee <Vm::faultHandler(regs*)+0x77d>
c00187b4:	83 ec 08             	sub    esp,0x8
c00187b7:	0f b7 c0             	movzx  eax,ax
c00187ba:	50                   	push   eax
c00187bb:	0f b7 c6             	movzx  eax,si
c00187be:	50                   	push   eax
c00187bf:	e8 39 fa ff ff       	call   c00181fd <Vm::readByteFromReal(unsigned short, unsigned short)>
c00187c4:	5e                   	pop    esi
c00187c5:	0f b6 c0             	movzx  eax,al
c00187c8:	5f                   	pop    edi
c00187c9:	50                   	push   eax
c00187ca:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00187ce:	50                   	push   eax
c00187cf:	e8 30 f4 ff ff       	call   c0017c04 <Vm::outbv(unsigned short, unsigned char)>
c00187d4:	83 c4 10             	add    esp,0x10
c00187d7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00187da:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00187de:	0f 84 ae 01 00 00    	je     c0018992 <Vm::faultHandler(regs*)+0x721>
c00187e4:	83 e8 01             	sub    eax,0x1
c00187e7:	0f b7 c0             	movzx  eax,ax
c00187ea:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00187ed:	e9 de fb ff ff       	jmp    c00183d0 <Vm::faultHandler(regs*)+0x15f>
c00187f2:	81 fd ff ff 00 00    	cmp    ebp,0xffff
c00187f8:	0f 86 5a ff ff ff    	jbe    c0018758 <Vm::faultHandler(regs*)+0x4e7>
c00187fe:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018802:	50                   	push   eax
c0018803:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018807:	50                   	push   eax
c0018808:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001880c:	50                   	push   eax
c001880d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018811:	50                   	push   eax
c0018812:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018816:	50                   	push   eax
c0018817:	6a 6f                	push   0x6f
c0018819:	6a 6f                	push   0x6f
c001881b:	68 24 55 02 c0       	push   0xc0025524
c0018820:	e8 57 e7 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018825:	83 c4 20             	add    esp,0x20
c0018828:	31 c0                	xor    eax,eax
c001882a:	e9 c4 fa ff ff       	jmp    c00182f3 <Vm::faultHandler(regs*)+0x82>
c001882f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018832:	81 ca 00 02 02 00    	or     edx,0x20200
c0018838:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001883b:	0f b7 00             	movzx  eax,WORD PTR [eax]
c001883e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018844:	c1 e8 09             	shr    eax,0x9
c0018847:	83 e0 01             	and    eax,0x1
c001884a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001884d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018850:	83 c0 02             	add    eax,0x2
c0018853:	25 ff ff 00 00       	and    eax,0xffff
c0018858:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001885b:	e9 70 fb ff ff       	jmp    c00183d0 <Vm::faultHandler(regs*)+0x15f>
c0018860:	83 ef 02             	sub    edi,0x2
c0018863:	81 e7 ff ff 00 00    	and    edi,0xffff
c0018869:	89 7b 44             	mov    DWORD PTR [ebx+0x44],edi
c001886c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018870:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018876:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001887a:	0f 84 28 01 00 00    	je     c00189a8 <Vm::faultHandler(regs*)+0x737>
c0018880:	80 ce 02             	or     dh,0x2
c0018883:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018887:	e9 44 fb ff ff       	jmp    c00183d0 <Vm::faultHandler(regs*)+0x15f>
c001888c:	3d ff ff 00 00       	cmp    eax,0xffff
c0018891:	0f 86 5d fb ff ff    	jbe    c00183f4 <Vm::faultHandler(regs*)+0x183>
c0018897:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001889b:	50                   	push   eax
c001889c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00188a0:	50                   	push   eax
c00188a1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00188a5:	50                   	push   eax
c00188a6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00188aa:	50                   	push   eax
c00188ab:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00188af:	50                   	push   eax
c00188b0:	6a 6d                	push   0x6d
c00188b2:	6a 6d                	push   0x6d
c00188b4:	68 24 55 02 c0       	push   0xc0025524
c00188b9:	e8 be e6 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00188be:	83 c4 20             	add    esp,0x20
c00188c1:	31 c0                	xor    eax,eax
c00188c3:	e9 2b fa ff ff       	jmp    c00182f3 <Vm::faultHandler(regs*)+0x82>
c00188c8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00188cc:	ed                   	in     eax,dx
c00188cd:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00188d0:	e9 93 fc ff ff       	jmp    c0018568 <Vm::faultHandler(regs*)+0x2f7>
c00188d5:	ed                   	in     eax,dx
c00188d6:	e9 d6 fd ff ff       	jmp    c00186b1 <Vm::faultHandler(regs*)+0x440>
c00188db:	66 ef                	out    dx,ax
c00188dd:	e9 ee fa ff ff       	jmp    c00183d0 <Vm::faultHandler(regs*)+0x15f>
c00188e2:	66 ef                	out    dx,ax
c00188e4:	e9 7f fc ff ff       	jmp    c0018568 <Vm::faultHandler(regs*)+0x2f7>
c00188e9:	83 ec 0c             	sub    esp,0xc
c00188ec:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c00188ef:	57                   	push   edi
c00188f0:	e8 b7 f3 ff ff       	call   c0017cac <Vm::mainloop3(unsigned long)>
c00188f5:	83 c4 10             	add    esp,0x10
c00188f8:	b0 01                	mov    al,0x1
c00188fa:	e9 f4 f9 ff ff       	jmp    c00182f3 <Vm::faultHandler(regs*)+0x82>
c00188ff:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0018902:	e9 43 fe ff ff       	jmp    c001874a <Vm::faultHandler(regs*)+0x4d9>
c0018907:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001890a:	e9 3b fe ff ff       	jmp    c001874a <Vm::faultHandler(regs*)+0x4d9>
c001890f:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0018912:	e9 33 fe ff ff       	jmp    c001874a <Vm::faultHandler(regs*)+0x4d9>
c0018917:	89 ee                	mov    esi,ebp
c0018919:	e9 2c fe ff ff       	jmp    c001874a <Vm::faultHandler(regs*)+0x4d9>
c001891e:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0018921:	e9 79 fe ff ff       	jmp    c001879f <Vm::faultHandler(regs*)+0x52e>
c0018926:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018929:	e9 71 fe ff ff       	jmp    c001879f <Vm::faultHandler(regs*)+0x52e>
c001892e:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0018931:	e9 69 fe ff ff       	jmp    c001879f <Vm::faultHandler(regs*)+0x52e>
c0018936:	89 ee                	mov    esi,ebp
c0018938:	e9 62 fe ff ff       	jmp    c001879f <Vm::faultHandler(regs*)+0x52e>
c001893d:	66 ed                	in     ax,dx
c001893f:	83 ec 04             	sub    esp,0x4
c0018942:	0f b7 c0             	movzx  eax,ax
c0018945:	50                   	push   eax
c0018946:	51                   	push   ecx
c0018947:	56                   	push   esi
c0018948:	e8 f9 f8 ff ff       	call   c0018246 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001894d:	83 c4 10             	add    esp,0x10
c0018950:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018953:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018957:	0f 84 84 00 00 00    	je     c00189e1 <Vm::faultHandler(regs*)+0x770>
c001895d:	83 e8 02             	sub    eax,0x2
c0018960:	25 ff ff 00 00       	and    eax,0xffff
c0018965:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0018968:	e9 63 fa ff ff       	jmp    c00183d0 <Vm::faultHandler(regs*)+0x15f>
c001896d:	83 ec 08             	sub    esp,0x8
c0018970:	50                   	push   eax
c0018971:	52                   	push   edx
c0018972:	e8 97 f8 ff ff       	call   c001820e <Vm::readWordFromReal(unsigned short, unsigned short)>
c0018977:	83 c4 10             	add    esp,0x10
c001897a:	89 fa                	mov    edx,edi
c001897c:	66 ef                	out    dx,ax
c001897e:	85 c9                	test   ecx,ecx
c0018980:	74 32                	je     c00189b4 <Vm::faultHandler(regs*)+0x743>
c0018982:	8d 45 fe             	lea    eax,[ebp-0x2]
c0018985:	25 ff ff 00 00       	and    eax,0xffff
c001898a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001898d:	e9 3e fa ff ff       	jmp    c00183d0 <Vm::faultHandler(regs*)+0x15f>
c0018992:	83 c0 01             	add    eax,0x1
c0018995:	0f b7 c0             	movzx  eax,ax
c0018998:	e9 4d fe ff ff       	jmp    c00187ea <Vm::faultHandler(regs*)+0x579>
c001899d:	83 c0 01             	add    eax,0x1
c00189a0:	0f b7 c0             	movzx  eax,ax
c00189a3:	e9 25 fa ff ff       	jmp    c00183cd <Vm::faultHandler(regs*)+0x15c>
c00189a8:	80 e6 fd             	and    dh,0xfd
c00189ab:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00189af:	e9 1c fa ff ff       	jmp    c00183d0 <Vm::faultHandler(regs*)+0x15f>
c00189b4:	8d 45 02             	lea    eax,[ebp+0x2]
c00189b7:	25 ff ff 00 00       	and    eax,0xffff
c00189bc:	e9 29 fe ff ff       	jmp    c00187ea <Vm::faultHandler(regs*)+0x579>
c00189c1:	83 c0 04             	add    eax,0x4
c00189c4:	25 ff ff 00 00       	and    eax,0xffff
c00189c9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00189cc:	e9 ff f9 ff ff       	jmp    c00183d0 <Vm::faultHandler(regs*)+0x15f>
c00189d1:	8d 45 04             	lea    eax,[ebp+0x4]
c00189d4:	25 ff ff 00 00       	and    eax,0xffff
c00189d9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00189dc:	e9 ef f9 ff ff       	jmp    c00183d0 <Vm::faultHandler(regs*)+0x15f>
c00189e1:	83 c0 02             	add    eax,0x2
c00189e4:	25 ff ff 00 00       	and    eax,0xffff
c00189e9:	e9 df f9 ff ff       	jmp    c00183cd <Vm::faultHandler(regs*)+0x15c>
c00189ee:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00189f2:	50                   	push   eax
c00189f3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00189f7:	50                   	push   eax
c00189f8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00189fc:	50                   	push   eax
c00189fd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018a01:	50                   	push   eax
c0018a02:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018a06:	50                   	push   eax
c0018a07:	6a 6e                	push   0x6e
c0018a09:	6a 6e                	push   0x6e
c0018a0b:	68 24 55 02 c0       	push   0xc0025524
c0018a10:	e8 67 e5 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018a15:	83 c4 20             	add    esp,0x20
c0018a18:	31 c0                	xor    eax,eax
c0018a1a:	e9 d4 f8 ff ff       	jmp    c00182f3 <Vm::faultHandler(regs*)+0x82>
c0018a1f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018a23:	50                   	push   eax
c0018a24:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018a28:	50                   	push   eax
c0018a29:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018a2d:	50                   	push   eax
c0018a2e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018a32:	50                   	push   eax
c0018a33:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018a37:	50                   	push   eax
c0018a38:	6a 6c                	push   0x6c
c0018a3a:	6a 6c                	push   0x6c
c0018a3c:	68 24 55 02 c0       	push   0xc0025524
c0018a41:	e8 36 e5 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018a46:	83 c4 20             	add    esp,0x20
c0018a49:	31 c0                	xor    eax,eax
c0018a4b:	e9 a3 f8 ff ff       	jmp    c00182f3 <Vm::faultHandler(regs*)+0x82>

c0018a50 <IOAPIC::close(int, int, void*)>:
c0018a50:	b8 00 00 00 00       	mov    eax,0x0
c0018a55:	c3                   	ret    

c0018a56 <apicGetBase()>:
c0018a56:	55                   	push   ebp
c0018a57:	89 e5                	mov    ebp,esp
c0018a59:	83 ec 18             	sub    esp,0x18
c0018a5c:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0018a61:	83 e0 08             	and    eax,0x8
c0018a64:	0f b6 c0             	movzx  eax,al
c0018a67:	85 c0                	test   eax,eax
c0018a69:	75 07                	jne    c0018a72 <apicGetBase()+0x1c>
c0018a6b:	b8 00 00 00 00       	mov    eax,0x0
c0018a70:	eb 1b                	jmp    c0018a8d <apicGetBase()+0x37>
c0018a72:	83 ec 0c             	sub    esp,0xc
c0018a75:	6a 1b                	push   0x1b
c0018a77:	e8 61 15 00 00       	call   c0019fdd <x86rdmsr(unsigned int)>
c0018a7c:	83 c4 10             	add    esp,0x10
c0018a7f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0018a82:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0018a85:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018a88:	25 00 00 ff ff       	and    eax,0xffff0000
c0018a8d:	c9                   	leave  
c0018a8e:	c3                   	ret    
c0018a8f:	90                   	nop

c0018a90 <IOAPIC::IOAPIC()>:
c0018a90:	83 ec 0c             	sub    esp,0xc
c0018a93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a97:	83 ec 08             	sub    esp,0x8
c0018a9a:	68 14 59 02 c0       	push   0xc0025914
c0018a9f:	50                   	push   eax
c0018aa0:	e8 11 11 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c0018aa5:	83 c4 10             	add    esp,0x10
c0018aa8:	ba 34 59 02 c0       	mov    edx,0xc0025934
c0018aad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ab1:	89 10                	mov    DWORD PTR [eax],edx
c0018ab3:	90                   	nop
c0018ab4:	83 c4 0c             	add    esp,0xc
c0018ab7:	c3                   	ret    

c0018ab8 <apicOpen()>:
c0018ab8:	55                   	push   ebp
c0018ab9:	89 e5                	mov    ebp,esp
c0018abb:	53                   	push   ebx
c0018abc:	83 ec 34             	sub    esp,0x34
c0018abf:	83 ec 0c             	sub    esp,0xc
c0018ac2:	68 1c 59 02 c0       	push   0xc002591c
c0018ac7:	e8 b0 e4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018acc:	83 c4 10             	add    esp,0x10
c0018acf:	a0 00 fb 02 c0       	mov    al,ds:0xc002fb00
c0018ad4:	83 f0 01             	xor    eax,0x1
c0018ad7:	0f b6 c0             	movzx  eax,al
c0018ada:	85 c0                	test   eax,eax
c0018adc:	0f 84 a3 00 00 00    	je     c0018b85 <apicOpen()+0xcd>
c0018ae2:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0018ae6:	a0 40 ce 02 c0       	mov    al,ds:0xc002ce40
c0018aeb:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0018aef:	0f b6 c0             	movzx  eax,al
c0018af2:	39 c2                	cmp    edx,eax
c0018af4:	0f 83 84 00 00 00    	jae    c0018b7e <apicOpen()+0xc6>
c0018afa:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c0018b01:	83 ec 0c             	sub    esp,0xc
c0018b04:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0018b07:	e8 83 70 ff ff       	call   c000fb8f <malloc>
c0018b0c:	83 c4 10             	add    esp,0x10
c0018b0f:	89 c3                	mov    ebx,eax
c0018b11:	83 ec 0c             	sub    esp,0xc
c0018b14:	53                   	push   ebx
c0018b15:	e8 76 ff ff ff       	call   c0018a90 <IOAPIC::IOAPIC()>
c0018b1a:	83 c4 10             	add    esp,0x10
c0018b1d:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0018b20:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0018b24:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0018b27:	89 14 85 e0 fa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0520],edx
c0018b2e:	a1 c0 fa 02 c0       	mov    eax,ds:0xc002fac0
c0018b33:	83 c0 01             	add    eax,0x1
c0018b36:	a3 c0 fa 02 c0       	mov    ds:0xc002fac0,eax
c0018b3b:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c0018b40:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0018b46:	83 ec 08             	sub    esp,0x8
c0018b49:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0018b4c:	50                   	push   eax
c0018b4d:	e8 02 0f ff ff       	call   c0009a54 <Device::addChild(Device*)>
c0018b52:	83 c4 10             	add    esp,0x10
c0018b55:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018b58:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b5a:	83 c0 08             	add    eax,0x8
c0018b5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b5f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0018b63:	6a 00                	push   0x0
c0018b65:	6a 00                	push   0x0
c0018b67:	52                   	push   edx
c0018b68:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0018b6b:	ff d0                	call   eax
c0018b6d:	83 c4 10             	add    esp,0x10
c0018b70:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c0018b73:	83 c0 01             	add    eax,0x1
c0018b76:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c0018b79:	e9 68 ff ff ff       	jmp    c0018ae6 <apicOpen()+0x2e>
c0018b7e:	c6 05 00 fb 02 c0 01 	mov    BYTE PTR ds:0xc002fb00,0x1
c0018b85:	e8 cc fe ff ff       	call   c0018a56 <apicGetBase()>
c0018b8a:	05 f0 00 00 00       	add    eax,0xf0
c0018b8f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0018b92:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0018b95:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b97:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0018b9a:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c0018ba1:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c0018ba8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0018bab:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0018bae:	89 10                	mov    DWORD PTR [eax],edx
c0018bb0:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0018bb7:	a1 8c cd 02 c0       	mov    eax,ds:0xc002cd8c
c0018bbc:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c0018bbf:	7d 7c                	jge    c0018c3d <apicOpen()+0x185>
c0018bc1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018bc4:	8b 04 85 a0 cd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3260]
c0018bcb:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c0018bce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018bd1:	8b 04 85 a0 cd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3260]
c0018bd8:	c1 e8 08             	shr    eax,0x8
c0018bdb:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0018bdf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018be2:	8b 04 85 a0 cd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3260]
c0018be9:	c1 e8 18             	shr    eax,0x18
c0018bec:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0018bef:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018bf3:	3d ff 00 00 00       	cmp    eax,0xff
c0018bf8:	75 3a                	jne    c0018c34 <apicOpen()+0x17c>
c0018bfa:	e8 57 fe ff ff       	call   c0018a56 <apicGetBase()>
c0018bff:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c0018c03:	83 fa 01             	cmp    edx,0x1
c0018c06:	75 07                	jne    c0018c0f <apicOpen()+0x157>
c0018c08:	ba 60 03 00 00       	mov    edx,0x360
c0018c0d:	eb 05                	jmp    c0018c14 <apicOpen()+0x15c>
c0018c0f:	ba 50 03 00 00       	mov    edx,0x350
c0018c14:	01 d0                	add    eax,edx
c0018c16:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0018c19:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018c1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c1e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0018c21:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0018c28:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c0018c2c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018c2f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0018c32:	89 10                	mov    DWORD PTR [eax],edx
c0018c34:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0018c38:	e9 7a ff ff ff       	jmp    c0018bb7 <apicOpen()+0xff>
c0018c3d:	90                   	nop
c0018c3e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0018c41:	c9                   	leave  
c0018c42:	c3                   	ret    
c0018c43:	90                   	nop

c0018c44 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0018c44:	55                   	push   ebp
c0018c45:	89 e5                	mov    ebp,esp
c0018c47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c4a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018c50:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0018c53:	72 1d                	jb     c0018c72 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0018c55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c58:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0018c5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c61:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0018c67:	01 d0                	add    eax,edx
c0018c69:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0018c6c:	73 04                	jae    c0018c72 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0018c6e:	b0 01                	mov    al,0x1
c0018c70:	eb 02                	jmp    c0018c74 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0018c72:	b0 00                	mov    al,0x0
c0018c74:	5d                   	pop    ebp
c0018c75:	c3                   	ret    

c0018c76 <IOAPIC::read(int)>:
c0018c76:	55                   	push   ebp
c0018c77:	89 e5                	mov    ebp,esp
c0018c79:	83 ec 10             	sub    esp,0x10
c0018c7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c7f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018c85:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0018c88:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018c8b:	0f b6 d0             	movzx  edx,al
c0018c8e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018c91:	89 10                	mov    DWORD PTR [eax],edx
c0018c93:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018c96:	83 c0 10             	add    eax,0x10
c0018c99:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c9b:	c9                   	leave  
c0018c9c:	c3                   	ret    
c0018c9d:	90                   	nop

c0018c9e <IOAPIC::open(int, int, void*)>:
c0018c9e:	55                   	push   ebp
c0018c9f:	89 e5                	mov    ebp,esp
c0018ca1:	57                   	push   edi
c0018ca2:	56                   	push   esi
c0018ca3:	53                   	push   ebx
c0018ca4:	83 ec 04             	sub    esp,0x4
c0018ca7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018caa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0018cad:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018cb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018cb6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018cbc:	8b 14 85 80 ce 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3180]
c0018cc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018cc6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0018ccc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ccf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018cd5:	8b 14 85 00 cf 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3100]
c0018cdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018cdf:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0018ce5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ce8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018cee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018cf1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0018cf7:	0f b6 f0             	movzx  esi,al
c0018cfa:	89 d0                	mov    eax,edx
c0018cfc:	ba 00 00 00 00       	mov    edx,0x0
c0018d01:	89 c7                	mov    edi,eax
c0018d03:	83 e7 ff             	and    edi,0xffffffff
c0018d06:	89 f9                	mov    ecx,edi
c0018d08:	0f b6 da             	movzx  ebx,dl
c0018d0b:	89 c8                	mov    eax,ecx
c0018d0d:	89 da                	mov    edx,ebx
c0018d0f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0018d12:	8d 5e 08             	lea    ebx,[esi+0x8]
c0018d15:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0018d19:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0018d1d:	83 e0 00             	and    eax,0x0
c0018d20:	09 d0                	or     eax,edx
c0018d22:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0018d26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d29:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0018d2f:	8d 50 01             	lea    edx,[eax+0x1]
c0018d32:	88 d1                	mov    cl,dl
c0018d34:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018d37:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c0018d3d:	0f b6 d0             	movzx  edx,al
c0018d40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d43:	83 c2 08             	add    edx,0x8
c0018d46:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0018d4a:	0f b6 c9             	movzx  ecx,cl
c0018d4d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0018d53:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0018d57:	6a 01                	push   0x1
c0018d59:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018d5c:	e8 15 ff ff ff       	call   c0018c76 <IOAPIC::read(int)>
c0018d61:	83 c4 08             	add    esp,0x8
c0018d64:	c1 f8 10             	sar    eax,0x10
c0018d67:	0f b6 c0             	movzx  eax,al
c0018d6a:	8d 50 01             	lea    edx,[eax+0x1]
c0018d6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d70:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0018d76:	b8 00 00 00 00       	mov    eax,0x0
c0018d7b:	8d 65 f4             	lea    esp,[ebp-0xc]
c0018d7e:	5b                   	pop    ebx
c0018d7f:	5e                   	pop    esi
c0018d80:	5f                   	pop    edi
c0018d81:	5d                   	pop    ebp
c0018d82:	c3                   	ret    
c0018d83:	90                   	nop

c0018d84 <IOAPIC::write(int, int)>:
c0018d84:	55                   	push   ebp
c0018d85:	89 e5                	mov    ebp,esp
c0018d87:	83 ec 10             	sub    esp,0x10
c0018d8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d8d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018d93:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0018d96:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018d99:	0f b6 d0             	movzx  edx,al
c0018d9c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018d9f:	89 10                	mov    DWORD PTR [eax],edx
c0018da1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018da4:	8d 50 10             	lea    edx,[eax+0x10]
c0018da7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0018daa:	89 02                	mov    DWORD PTR [edx],eax
c0018dac:	90                   	nop
c0018dad:	c9                   	leave  
c0018dae:	c3                   	ret    
c0018daf:	90                   	nop

c0018db0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0018db0:	55                   	push   ebp
c0018db1:	89 e5                	mov    ebp,esp
c0018db3:	53                   	push   ebx
c0018db4:	83 ec 2c             	sub    esp,0x2c
c0018db7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018dba:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0018dbd:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0018dc0:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0018dc3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0018dc6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0018dc9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0018dcc:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0018dcf:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0018dd2:	88 d8                	mov    al,bl
c0018dd4:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0018dd7:	88 c8                	mov    al,cl
c0018dd9:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0018ddc:	88 d0                	mov    al,dl
c0018dde:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0018de1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0018de5:	83 c0 08             	add    eax,0x8
c0018de8:	01 c0                	add    eax,eax
c0018dea:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0018ded:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0018df1:	83 c0 08             	add    eax,0x8
c0018df4:	01 c0                	add    eax,eax
c0018df6:	83 c0 01             	add    eax,0x1
c0018df9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0018dfc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018dff:	50                   	push   eax
c0018e00:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018e03:	e8 6e fe ff ff       	call   c0018c76 <IOAPIC::read(int)>
c0018e08:	83 c4 08             	add    esp,0x8
c0018e0b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0018e0e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0018e15:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018e18:	c1 e0 18             	shl    eax,0x18
c0018e1b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0018e1e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0018e21:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018e24:	52                   	push   edx
c0018e25:	50                   	push   eax
c0018e26:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018e29:	e8 56 ff ff ff       	call   c0018d84 <IOAPIC::write(int, int)>
c0018e2e:	83 c4 0c             	add    esp,0xc
c0018e31:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018e34:	50                   	push   eax
c0018e35:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018e38:	e8 39 fe ff ff       	call   c0018c76 <IOAPIC::read(int)>
c0018e3d:	83 c4 08             	add    esp,0x8
c0018e40:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0018e43:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0018e4a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0018e51:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0018e58:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c0018e5c:	85 c0                	test   eax,eax
c0018e5e:	74 09                	je     c0018e69 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c0018e60:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0018e67:	eb 07                	jmp    c0018e70 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c0018e69:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0018e70:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c0018e74:	85 c0                	test   eax,eax
c0018e76:	74 09                	je     c0018e81 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c0018e78:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0018e7f:	eb 07                	jmp    c0018e88 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c0018e81:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0018e88:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0018e8f:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0018e93:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0018e96:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0018e99:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018e9c:	52                   	push   edx
c0018e9d:	50                   	push   eax
c0018e9e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018ea1:	e8 de fe ff ff       	call   c0018d84 <IOAPIC::write(int, int)>
c0018ea6:	83 c4 0c             	add    esp,0xc
c0018ea9:	90                   	nop
c0018eaa:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0018ead:	c9                   	leave  
c0018eae:	c3                   	ret    
c0018eaf:	90                   	nop

c0018eb0 <noCopro(unsigned long)>:
c0018eb0:	c3                   	ret    

c0018eb1 <HalRestart()>:
c0018eb1:	e4 64                	in     al,0x64
c0018eb3:	a8 02                	test   al,0x2
c0018eb5:	75 fa                	jne    c0018eb1 <HalRestart()>
c0018eb7:	b0 fe                	mov    al,0xfe
c0018eb9:	e6 64                	out    0x64,al
c0018ebb:	c3                   	ret    

c0018ebc <HalShutdown()>:
c0018ebc:	c3                   	ret    

c0018ebd <HalSleep()>:
c0018ebd:	c3                   	ret    

c0018ebe <CPU::close(int, int, void*)>:
c0018ebe:	31 c0                	xor    eax,eax
c0018ec0:	c3                   	ret    

c0018ec1 <x86ReadCMOS(unsigned char)>:
c0018ec1:	83 ec 14             	sub    esp,0x14
c0018ec4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018ec8:	88 04 24             	mov    BYTE PTR [esp],al
c0018ecb:	a0 2c fb 02 c0       	mov    al,ds:0xc002fb2c
c0018ed0:	0f b6 c0             	movzx  eax,al
c0018ed3:	85 c0                	test   eax,eax
c0018ed5:	74 04                	je     c0018edb <x86ReadCMOS(unsigned char)+0x1a>
c0018ed7:	b2 00                	mov    dl,0x0
c0018ed9:	eb 02                	jmp    c0018edd <x86ReadCMOS(unsigned char)+0x1c>
c0018edb:	b2 80                	mov    dl,0x80
c0018edd:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018ee0:	09 d0                	or     eax,edx
c0018ee2:	0f b6 c0             	movzx  eax,al
c0018ee5:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c0018eec:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018ef0:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018ef4:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018ef9:	ee                   	out    dx,al
c0018efa:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0018f01:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018f06:	89 c2                	mov    edx,eax
c0018f08:	ec                   	in     al,dx
c0018f09:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018f0d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018f11:	83 c4 14             	add    esp,0x14
c0018f14:	c3                   	ret    

c0018f15 <x86WriteCMOS(unsigned char, unsigned char)>:
c0018f15:	83 ec 18             	sub    esp,0x18
c0018f18:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018f20:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c0018f24:	88 04 24             	mov    BYTE PTR [esp],al
c0018f27:	a0 2c fb 02 c0       	mov    al,ds:0xc002fb2c
c0018f2c:	0f b6 c0             	movzx  eax,al
c0018f2f:	85 c0                	test   eax,eax
c0018f31:	74 04                	je     c0018f37 <x86WriteCMOS(unsigned char, unsigned char)+0x22>
c0018f33:	b2 00                	mov    dl,0x0
c0018f35:	eb 02                	jmp    c0018f39 <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0018f37:	b2 80                	mov    dl,0x80
c0018f39:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0018f3d:	09 d0                	or     eax,edx
c0018f3f:	0f b6 c0             	movzx  eax,al
c0018f42:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0018f49:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018f4d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018f51:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018f56:	ee                   	out    dx,al
c0018f57:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0018f5b:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0018f62:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0018f66:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0018f6a:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0018f6f:	ee                   	out    dx,al
c0018f70:	90                   	nop
c0018f71:	83 c4 18             	add    esp,0x18
c0018f74:	c3                   	ret    

c0018f75 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0018f75:	60                   	pusha  
c0018f76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f7a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018f7e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018f82:	9c                   	pushf  
c0018f83:	fa                   	cli    
c0018f84:	0f 09                	wbinvd 
c0018f86:	0f 30                	wrmsr  
c0018f88:	9d                   	popf   
c0018f89:	89 c2                	mov    edx,eax
c0018f8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f8f:	89 10                	mov    DWORD PTR [eax],edx
c0018f91:	61                   	popa   
c0018f92:	90                   	nop
c0018f93:	c3                   	ret    

c0018f94 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0018f94:	60                   	pusha  
c0018f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f99:	89 c1                	mov    ecx,eax
c0018f9b:	9c                   	pushf  
c0018f9c:	fa                   	cli    
c0018f9d:	0f 09                	wbinvd 
c0018f9f:	31 c0                	xor    eax,eax
c0018fa1:	31 d2                	xor    edx,edx
c0018fa3:	0f 32                	rdmsr  
c0018fa5:	9d                   	popf   
c0018fa6:	89 c2                	mov    edx,eax
c0018fa8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018fac:	89 10                	mov    DWORD PTR [eax],edx
c0018fae:	61                   	popa   
c0018faf:	90                   	nop
c0018fb0:	c3                   	ret    

c0018fb1 <AMD_K6_writeback(int, int, int)>:
c0018fb1:	83 ec 20             	sub    esp,0x20
c0018fb4:	a1 30 f1 02 c0       	mov    eax,ds:0xc002f130
c0018fb9:	c1 e8 14             	shr    eax,0x14
c0018fbc:	c1 e8 02             	shr    eax,0x2
c0018fbf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018fc3:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0018fc8:	0f 85 9e 00 00 00    	jne    c001906c <AMD_K6_writeback(int, int, int)+0xbb>
c0018fce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fd2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018fd6:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0018fdb:	75 19                	jne    c0018ff6 <AMD_K6_writeback(int, int, int)+0x45>
c0018fdd:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0018fe2:	7f 0a                	jg     c0018fee <AMD_K6_writeback(int, int, int)+0x3d>
c0018fe4:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0018fec:	eb 08                	jmp    c0018ff6 <AMD_K6_writeback(int, int, int)+0x45>
c0018fee:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0018ff6:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0018ffb:	7c 6e                	jl     c001906b <AMD_K6_writeback(int, int, int)+0xba>
c0018ffd:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0019002:	7e 09                	jle    c001900d <AMD_K6_writeback(int, int, int)+0x5c>
c0019004:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0019009:	74 36                	je     c0019041 <AMD_K6_writeback(int, int, int)+0x90>
c001900b:	eb 5e                	jmp    c001906b <AMD_K6_writeback(int, int, int)+0xba>
c001900d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019011:	50                   	push   eax
c0019012:	68 82 00 00 c0       	push   0xc0000082
c0019017:	e8 78 ff ff ff       	call   c0018f94 <AMD_K6_read_msr(unsigned int, REGS*)>
c001901c:	83 c4 08             	add    esp,0x8
c001901f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019023:	01 c0                	add    eax,eax
c0019025:	83 e0 7f             	and    eax,0x7f
c0019028:	89 c2                	mov    edx,eax
c001902a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001902e:	50                   	push   eax
c001902f:	6a 00                	push   0x0
c0019031:	52                   	push   edx
c0019032:	68 82 00 00 c0       	push   0xc0000082
c0019037:	e8 39 ff ff ff       	call   c0018f75 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c001903c:	83 c4 10             	add    esp,0x10
c001903f:	eb 2b                	jmp    c001906c <AMD_K6_writeback(int, int, int)+0xbb>
c0019041:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019045:	50                   	push   eax
c0019046:	68 82 00 00 c0       	push   0xc0000082
c001904b:	e8 44 ff ff ff       	call   c0018f94 <AMD_K6_read_msr(unsigned int, REGS*)>
c0019050:	83 c4 08             	add    esp,0x8
c0019053:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019057:	50                   	push   eax
c0019058:	6a 00                	push   0x0
c001905a:	6a 00                	push   0x0
c001905c:	68 82 00 00 c0       	push   0xc0000082
c0019061:	e8 0f ff ff ff       	call   c0018f75 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0019066:	83 c4 10             	add    esp,0x10
c0019069:	eb 01                	jmp    c001906c <AMD_K6_writeback(int, int, int)+0xbb>
c001906b:	90                   	nop
c001906c:	90                   	nop
c001906d:	83 c4 20             	add    esp,0x20
c0019070:	c3                   	ret    

c0019071 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0019071:	56                   	push   esi
c0019072:	53                   	push   ebx
c0019073:	a1 00 72 02 c0       	mov    eax,ds:0xc0027200
c0019078:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001907c:	75 32                	jne    c00190b0 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001907e:	8b 15 20 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb20
c0019084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019088:	89 10                	mov    DWORD PTR [eax],edx
c001908a:	8b 15 1c fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb1c
c0019090:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019094:	89 10                	mov    DWORD PTR [eax],edx
c0019096:	8b 15 18 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb18
c001909c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00190a0:	89 10                	mov    DWORD PTR [eax],edx
c00190a2:	8b 15 14 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb14
c00190a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00190ac:	89 10                	mov    DWORD PTR [eax],edx
c00190ae:	eb 5c                	jmp    c001910c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c00190b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00190b4:	ba 00 00 00 00       	mov    edx,0x0
c00190b9:	89 d1                	mov    ecx,edx
c00190bb:	0f a2                	cpuid  
c00190bd:	89 c6                	mov    esi,eax
c00190bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190c3:	89 30                	mov    DWORD PTR [eax],esi
c00190c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00190c9:	89 18                	mov    DWORD PTR [eax],ebx
c00190cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00190cf:	89 08                	mov    DWORD PTR [eax],ecx
c00190d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00190d5:	89 10                	mov    DWORD PTR [eax],edx
c00190d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00190db:	a3 00 72 02 c0       	mov    ds:0xc0027200,eax
c00190e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00190e6:	a3 20 fb 02 c0       	mov    ds:0xc002fb20,eax
c00190eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00190ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00190f1:	a3 1c fb 02 c0       	mov    ds:0xc002fb1c,eax
c00190f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00190fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00190fc:	a3 18 fb 02 c0       	mov    ds:0xc002fb18,eax
c0019101:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019105:	8b 00                	mov    eax,DWORD PTR [eax]
c0019107:	a3 14 fb 02 c0       	mov    ds:0xc002fb14,eax
c001910c:	5b                   	pop    ebx
c001910d:	5e                   	pop    esi
c001910e:	c3                   	ret    

c001910f <cpuidCheckEDX(unsigned int)>:
c001910f:	83 ec 10             	sub    esp,0x10
c0019112:	89 e0                	mov    eax,esp
c0019114:	50                   	push   eax
c0019115:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019119:	50                   	push   eax
c001911a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001911e:	50                   	push   eax
c001911f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019123:	50                   	push   eax
c0019124:	6a 01                	push   0x1
c0019126:	e8 46 ff ff ff       	call   c0019071 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001912b:	83 c4 14             	add    esp,0x14
c001912e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019131:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019135:	0f 95 c0             	setne  al
c0019138:	83 c4 10             	add    esp,0x10
c001913b:	c3                   	ret    

c001913c <cpuidCheckECX(unsigned int)>:
c001913c:	83 ec 10             	sub    esp,0x10
c001913f:	89 e0                	mov    eax,esp
c0019141:	50                   	push   eax
c0019142:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019146:	50                   	push   eax
c0019147:	8d 44 24 10          	lea    eax,[esp+0x10]
c001914b:	50                   	push   eax
c001914c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019150:	50                   	push   eax
c0019151:	6a 01                	push   0x1
c0019153:	e8 19 ff ff ff       	call   c0019071 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019158:	83 c4 14             	add    esp,0x14
c001915b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001915f:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019163:	0f 95 c0             	setne  al
c0019166:	83 c4 10             	add    esp,0x10
c0019169:	c3                   	ret    

c001916a <cpuidCheckExtendedEBX(unsigned int)>:
c001916a:	83 ec 10             	sub    esp,0x10
c001916d:	89 e0                	mov    eax,esp
c001916f:	50                   	push   eax
c0019170:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019174:	50                   	push   eax
c0019175:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019179:	50                   	push   eax
c001917a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001917e:	50                   	push   eax
c001917f:	6a 07                	push   0x7
c0019181:	e8 eb fe ff ff       	call   c0019071 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019186:	83 c4 14             	add    esp,0x14
c0019189:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001918d:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019191:	0f 95 c0             	setne  al
c0019194:	83 c4 10             	add    esp,0x10
c0019197:	c3                   	ret    

c0019198 <cpuidCheckExtendedECX(unsigned int)>:
c0019198:	83 ec 10             	sub    esp,0x10
c001919b:	89 e0                	mov    eax,esp
c001919d:	50                   	push   eax
c001919e:	8d 44 24 08          	lea    eax,[esp+0x8]
c00191a2:	50                   	push   eax
c00191a3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00191a7:	50                   	push   eax
c00191a8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00191ac:	50                   	push   eax
c00191ad:	6a 07                	push   0x7
c00191af:	e8 bd fe ff ff       	call   c0019071 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00191b4:	83 c4 14             	add    esp,0x14
c00191b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00191bb:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00191bf:	0f 95 c0             	setne  al
c00191c2:	83 c4 10             	add    esp,0x10
c00191c5:	c3                   	ret    

c00191c6 <HalDetectFeatures()>:
c00191c6:	57                   	push   edi
c00191c7:	56                   	push   esi
c00191c8:	53                   	push   ebx
c00191c9:	81 ec 90 00 00 00    	sub    esp,0x90
c00191cf:	83 ec 04             	sub    esp,0x4
c00191d2:	6a 08                	push   0x8
c00191d4:	6a 00                	push   0x0
c00191d6:	68 4c fb 02 c0       	push   0xc002fb4c
c00191db:	e8 10 73 fe ff       	call   c00004f0 <memset>
c00191e0:	83 c4 10             	add    esp,0x10
c00191e3:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c00191e8:	83 c8 04             	or     eax,0x4
c00191eb:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c00191f0:	83 ec 0c             	sub    esp,0xc
c00191f3:	68 58 59 02 c0       	push   0xc0025958
c00191f8:	e8 7f dd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00191fd:	83 c4 10             	add    esp,0x10
c0019200:	e8 f4 6f fe ff       	call   c00001f9 <detectCPUID>
c0019205:	85 c0                	test   eax,eax
c0019207:	0f 95 c0             	setne  al
c001920a:	83 e0 01             	and    eax,0x1
c001920d:	83 e0 01             	and    eax,0x1
c0019210:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019213:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019218:	83 e0 fd             	and    eax,0xfffffffd
c001921b:	88 c2                	mov    dl,al
c001921d:	88 c8                	mov    al,cl
c001921f:	09 d0                	or     eax,edx
c0019221:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c0019226:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c001922b:	83 e0 02             	and    eax,0x2
c001922e:	0f b6 c0             	movzx  eax,al
c0019231:	85 c0                	test   eax,eax
c0019233:	0f 84 84 02 00 00    	je     c00194bd <HalDetectFeatures()+0x2f7>
c0019239:	83 ec 0c             	sub    esp,0xc
c001923c:	6a 20                	push   0x20
c001923e:	e8 cc fe ff ff       	call   c001910f <cpuidCheckEDX(unsigned int)>
c0019243:	83 c4 10             	add    esp,0x10
c0019246:	83 e0 01             	and    eax,0x1
c0019249:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019250:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019255:	83 e0 f7             	and    eax,0xfffffff7
c0019258:	88 c2                	mov    dl,al
c001925a:	88 c8                	mov    al,cl
c001925c:	09 d0                	or     eax,edx
c001925e:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c0019263:	83 ec 0c             	sub    esp,0xc
c0019266:	68 00 00 00 04       	push   0x4000000
c001926b:	e8 9f fe ff ff       	call   c001910f <cpuidCheckEDX(unsigned int)>
c0019270:	83 c4 10             	add    esp,0x10
c0019273:	89 c1                	mov    ecx,eax
c0019275:	83 e1 01             	and    ecx,0x1
c0019278:	a0 4d fb 02 c0       	mov    al,ds:0xc002fb4d
c001927d:	83 e0 fe             	and    eax,0xfffffffe
c0019280:	88 c2                	mov    dl,al
c0019282:	88 c8                	mov    al,cl
c0019284:	09 d0                	or     eax,edx
c0019286:	a2 4d fb 02 c0       	mov    ds:0xc002fb4d,al
c001928b:	83 ec 0c             	sub    esp,0xc
c001928e:	68 80 00 00 00       	push   0x80
c0019293:	e8 77 fe ff ff       	call   c001910f <cpuidCheckEDX(unsigned int)>
c0019298:	83 c4 10             	add    esp,0x10
c001929b:	89 c1                	mov    ecx,eax
c001929d:	c1 e1 07             	shl    ecx,0x7
c00192a0:	a0 4d fb 02 c0       	mov    al,ds:0xc002fb4d
c00192a5:	83 e0 7f             	and    eax,0x7f
c00192a8:	88 c2                	mov    dl,al
c00192aa:	88 c8                	mov    al,cl
c00192ac:	09 d0                	or     eax,edx
c00192ae:	a2 4d fb 02 c0       	mov    ds:0xc002fb4d,al
c00192b3:	83 ec 0c             	sub    esp,0xc
c00192b6:	68 00 00 80 00       	push   0x800000
c00192bb:	e8 4f fe ff ff       	call   c001910f <cpuidCheckEDX(unsigned int)>
c00192c0:	83 c4 10             	add    esp,0x10
c00192c3:	83 e0 01             	and    eax,0x1
c00192c6:	89 c1                	mov    ecx,eax
c00192c8:	c1 e1 05             	shl    ecx,0x5
c00192cb:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c00192d0:	83 e0 df             	and    eax,0xffffffdf
c00192d3:	88 c2                	mov    dl,al
c00192d5:	88 c8                	mov    al,cl
c00192d7:	09 d0                	or     eax,edx
c00192d9:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c00192de:	83 ec 0c             	sub    esp,0xc
c00192e1:	6a 01                	push   0x1
c00192e3:	e8 f4 3f ff ff       	call   c000d2dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c00192e8:	83 c4 10             	add    esp,0x10
c00192eb:	0f b6 c0             	movzx  eax,al
c00192ee:	85 c0                	test   eax,eax
c00192f0:	75 17                	jne    c0019309 <HalDetectFeatures()+0x143>
c00192f2:	83 ec 0c             	sub    esp,0xc
c00192f5:	68 00 04 00 00       	push   0x400
c00192fa:	e8 dd 3f ff ff       	call   c000d2dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c00192ff:	83 c4 10             	add    esp,0x10
c0019302:	0f b6 c0             	movzx  eax,al
c0019305:	85 c0                	test   eax,eax
c0019307:	74 04                	je     c001930d <HalDetectFeatures()+0x147>
c0019309:	b0 01                	mov    al,0x1
c001930b:	eb 02                	jmp    c001930f <HalDetectFeatures()+0x149>
c001930d:	b0 00                	mov    al,0x0
c001930f:	0f b6 c0             	movzx  eax,al
c0019312:	85 c0                	test   eax,eax
c0019314:	74 0f                	je     c0019325 <HalDetectFeatures()+0x15f>
c0019316:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c001931b:	83 e0 fe             	and    eax,0xfffffffe
c001931e:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c0019323:	eb 28                	jmp    c001934d <HalDetectFeatures()+0x187>
c0019325:	83 ec 0c             	sub    esp,0xc
c0019328:	68 00 02 00 00       	push   0x200
c001932d:	e8 dd fd ff ff       	call   c001910f <cpuidCheckEDX(unsigned int)>
c0019332:	83 c4 10             	add    esp,0x10
c0019335:	89 c1                	mov    ecx,eax
c0019337:	83 e1 01             	and    ecx,0x1
c001933a:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c001933f:	83 e0 fe             	and    eax,0xfffffffe
c0019342:	88 c2                	mov    dl,al
c0019344:	88 c8                	mov    al,cl
c0019346:	09 d0                	or     eax,edx
c0019348:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c001934d:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019352:	83 e0 01             	and    eax,0x1
c0019355:	0f b6 c0             	movzx  eax,al
c0019358:	85 c0                	test   eax,eax
c001935a:	74 1c                	je     c0019378 <HalDetectFeatures()+0x1b2>
c001935c:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019361:	83 e0 08             	and    eax,0x8
c0019364:	0f b6 c0             	movzx  eax,al
c0019367:	85 c0                	test   eax,eax
c0019369:	75 0d                	jne    c0019378 <HalDetectFeatures()+0x1b2>
c001936b:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019370:	83 e0 fe             	and    eax,0xfffffffe
c0019373:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c0019378:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0019380:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0019388:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c0019390:	85 c0                	test   eax,eax
c0019392:	0f 84 ab 00 00 00    	je     c0019443 <HalDetectFeatures()+0x27d>
c0019398:	83 ec 0c             	sub    esp,0xc
c001939b:	6a 01                	push   0x1
c001939d:	e8 9a fd ff ff       	call   c001913c <cpuidCheckECX(unsigned int)>
c00193a2:	83 c4 10             	add    esp,0x10
c00193a5:	83 e0 01             	and    eax,0x1
c00193a8:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00193ab:	a0 4d fb 02 c0       	mov    al,ds:0xc002fb4d
c00193b0:	83 e0 fd             	and    eax,0xfffffffd
c00193b3:	88 c2                	mov    dl,al
c00193b5:	88 c8                	mov    al,cl
c00193b7:	09 d0                	or     eax,edx
c00193b9:	a2 4d fb 02 c0       	mov    ds:0xc002fb4d,al
c00193be:	83 ec 0c             	sub    esp,0xc
c00193c1:	68 00 02 00 00       	push   0x200
c00193c6:	e8 71 fd ff ff       	call   c001913c <cpuidCheckECX(unsigned int)>
c00193cb:	83 c4 10             	add    esp,0x10
c00193ce:	83 e0 01             	and    eax,0x1
c00193d1:	89 c1                	mov    ecx,eax
c00193d3:	c1 e1 04             	shl    ecx,0x4
c00193d6:	a0 4d fb 02 c0       	mov    al,ds:0xc002fb4d
c00193db:	83 e0 ef             	and    eax,0xffffffef
c00193de:	88 c2                	mov    dl,al
c00193e0:	88 c8                	mov    al,cl
c00193e2:	09 d0                	or     eax,edx
c00193e4:	a2 4d fb 02 c0       	mov    ds:0xc002fb4d,al
c00193e9:	83 ec 0c             	sub    esp,0xc
c00193ec:	68 00 00 08 00       	push   0x80000
c00193f1:	e8 46 fd ff ff       	call   c001913c <cpuidCheckECX(unsigned int)>
c00193f6:	83 c4 10             	add    esp,0x10
c00193f9:	83 e0 01             	and    eax,0x1
c00193fc:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0019403:	a0 4d fb 02 c0       	mov    al,ds:0xc002fb4d
c0019408:	83 e0 fb             	and    eax,0xfffffffb
c001940b:	88 c2                	mov    dl,al
c001940d:	88 c8                	mov    al,cl
c001940f:	09 d0                	or     eax,edx
c0019411:	a2 4d fb 02 c0       	mov    ds:0xc002fb4d,al
c0019416:	83 ec 0c             	sub    esp,0xc
c0019419:	68 00 00 10 00       	push   0x100000
c001941e:	e8 19 fd ff ff       	call   c001913c <cpuidCheckECX(unsigned int)>
c0019423:	83 c4 10             	add    esp,0x10
c0019426:	83 e0 01             	and    eax,0x1
c0019429:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019430:	a0 4d fb 02 c0       	mov    al,ds:0xc002fb4d
c0019435:	83 e0 f7             	and    eax,0xfffffff7
c0019438:	88 c2                	mov    dl,al
c001943a:	88 c8                	mov    al,cl
c001943c:	09 d0                	or     eax,edx
c001943e:	a2 4d fb 02 c0       	mov    ds:0xc002fb4d,al
c0019443:	83 ec 0c             	sub    esp,0xc
c0019446:	8d 44 24 24          	lea    eax,[esp+0x24]
c001944a:	50                   	push   eax
c001944b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001944f:	50                   	push   eax
c0019450:	8d 44 24 34          	lea    eax,[esp+0x34]
c0019454:	50                   	push   eax
c0019455:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0019459:	50                   	push   eax
c001945a:	68 00 00 00 80       	push   0x80000000
c001945f:	e8 0d fc ff ff       	call   c0019071 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019464:	83 c4 20             	add    esp,0x20
c0019467:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001946b:	3d 00 00 00 80       	cmp    eax,0x80000000
c0019470:	76 4b                	jbe    c00194bd <HalDetectFeatures()+0x2f7>
c0019472:	83 ec 0c             	sub    esp,0xc
c0019475:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019479:	50                   	push   eax
c001947a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001947e:	50                   	push   eax
c001947f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0019483:	50                   	push   eax
c0019484:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0019488:	50                   	push   eax
c0019489:	68 01 00 00 80       	push   0x80000001
c001948e:	e8 de fb ff ff       	call   c0019071 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019493:	83 c4 20             	add    esp,0x20
c0019496:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c001949b:	83 e0 bf             	and    eax,0xffffffbf
c001949e:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c00194a3:	a0 4e fb 02 c0       	mov    al,ds:0xc002fb4e
c00194a8:	83 e0 fd             	and    eax,0xfffffffd
c00194ab:	a2 4e fb 02 c0       	mov    ds:0xc002fb4e,al
c00194b0:	a0 4e fb 02 c0       	mov    al,ds:0xc002fb4e
c00194b5:	83 e0 fe             	and    eax,0xfffffffe
c00194b8:	a2 4e fb 02 c0       	mov    ds:0xc002fb4e,al
c00194bd:	83 ec 0c             	sub    esp,0xc
c00194c0:	68 00 04 00 00       	push   0x400
c00194c5:	e8 12 3e ff ff       	call   c000d2dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c00194ca:	83 c4 10             	add    esp,0x10
c00194cd:	0f b6 c0             	movzx  eax,al
c00194d0:	85 c0                	test   eax,eax
c00194d2:	74 0d                	je     c00194e1 <HalDetectFeatures()+0x31b>
c00194d4:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c00194d9:	83 e0 fb             	and    eax,0xfffffffb
c00194dc:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c00194e1:	c6 05 48 fb 02 c0 01 	mov    BYTE PTR ds:0xc002fb48,0x1
c00194e8:	83 ec 04             	sub    esp,0x4
c00194eb:	6a 0d                	push   0xd
c00194ed:	6a 00                	push   0x0
c00194ef:	68 30 fb 02 c0       	push   0xc002fb30
c00194f4:	e8 f7 6f fe ff       	call   c00004f0 <memset>
c00194f9:	83 c4 10             	add    esp,0x10
c00194fc:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019501:	83 e0 02             	and    eax,0x2
c0019504:	0f b6 c0             	movzx  eax,al
c0019507:	85 c0                	test   eax,eax
c0019509:	0f 84 16 08 00 00    	je     c0019d25 <HalDetectFeatures()+0xb5f>
c001950f:	83 ec 0c             	sub    esp,0xc
c0019512:	6a 10                	push   0x10
c0019514:	e8 f6 fb ff ff       	call   c001910f <cpuidCheckEDX(unsigned int)>
c0019519:	83 c4 10             	add    esp,0x10
c001951c:	83 e0 01             	and    eax,0x1
c001951f:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019526:	a0 4e fb 02 c0       	mov    al,ds:0xc002fb4e
c001952b:	83 e0 f7             	and    eax,0xfffffff7
c001952e:	88 c2                	mov    dl,al
c0019530:	88 c8                	mov    al,cl
c0019532:	09 d0                	or     eax,edx
c0019534:	a2 4e fb 02 c0       	mov    ds:0xc002fb4e,al
c0019539:	83 ec 0c             	sub    esp,0xc
c001953c:	6a 40                	push   0x40
c001953e:	e8 cc fb ff ff       	call   c001910f <cpuidCheckEDX(unsigned int)>
c0019543:	83 c4 10             	add    esp,0x10
c0019546:	83 e0 01             	and    eax,0x1
c0019549:	89 c1                	mov    ecx,eax
c001954b:	c1 e1 04             	shl    ecx,0x4
c001954e:	a0 4e fb 02 c0       	mov    al,ds:0xc002fb4e
c0019553:	83 e0 ef             	and    eax,0xffffffef
c0019556:	88 c2                	mov    dl,al
c0019558:	88 c8                	mov    al,cl
c001955a:	09 d0                	or     eax,edx
c001955c:	a2 4e fb 02 c0       	mov    ds:0xc002fb4e,al
c0019561:	83 ec 0c             	sub    esp,0xc
c0019564:	6a 08                	push   0x8
c0019566:	e8 a4 fb ff ff       	call   c001910f <cpuidCheckEDX(unsigned int)>
c001956b:	83 c4 10             	add    esp,0x10
c001956e:	83 e0 01             	and    eax,0x1
c0019571:	89 c1                	mov    ecx,eax
c0019573:	c1 e1 05             	shl    ecx,0x5
c0019576:	a0 4e fb 02 c0       	mov    al,ds:0xc002fb4e
c001957b:	83 e0 df             	and    eax,0xffffffdf
c001957e:	88 c2                	mov    dl,al
c0019580:	88 c8                	mov    al,cl
c0019582:	09 d0                	or     eax,edx
c0019584:	a2 4e fb 02 c0       	mov    ds:0xc002fb4e,al
c0019589:	83 ec 0c             	sub    esp,0xc
c001958c:	68 00 20 00 00       	push   0x2000
c0019591:	e8 79 fb ff ff       	call   c001910f <cpuidCheckEDX(unsigned int)>
c0019596:	83 c4 10             	add    esp,0x10
c0019599:	83 e0 01             	and    eax,0x1
c001959c:	89 c1                	mov    ecx,eax
c001959e:	c1 e1 06             	shl    ecx,0x6
c00195a1:	a0 4e fb 02 c0       	mov    al,ds:0xc002fb4e
c00195a6:	83 e0 bf             	and    eax,0xffffffbf
c00195a9:	88 c2                	mov    dl,al
c00195ab:	88 c8                	mov    al,cl
c00195ad:	09 d0                	or     eax,edx
c00195af:	a2 4e fb 02 c0       	mov    ds:0xc002fb4e,al
c00195b4:	83 ec 0c             	sub    esp,0xc
c00195b7:	68 00 00 01 00       	push   0x10000
c00195bc:	e8 4e fb ff ff       	call   c001910f <cpuidCheckEDX(unsigned int)>
c00195c1:	83 c4 10             	add    esp,0x10
c00195c4:	89 c1                	mov    ecx,eax
c00195c6:	c1 e1 07             	shl    ecx,0x7
c00195c9:	a0 4e fb 02 c0       	mov    al,ds:0xc002fb4e
c00195ce:	83 e0 7f             	and    eax,0x7f
c00195d1:	88 c2                	mov    dl,al
c00195d3:	88 c8                	mov    al,cl
c00195d5:	09 d0                	or     eax,edx
c00195d7:	a2 4e fb 02 c0       	mov    ds:0xc002fb4e,al
c00195dc:	83 ec 0c             	sub    esp,0xc
c00195df:	6a 01                	push   0x1
c00195e1:	e8 29 fb ff ff       	call   c001910f <cpuidCheckEDX(unsigned int)>
c00195e6:	83 c4 10             	add    esp,0x10
c00195e9:	83 e0 01             	and    eax,0x1
c00195ec:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00195f3:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c00195f8:	83 e0 f7             	and    eax,0xfffffff7
c00195fb:	88 c2                	mov    dl,al
c00195fd:	88 c8                	mov    al,cl
c00195ff:	09 d0                	or     eax,edx
c0019601:	a2 50 fb 02 c0       	mov    ds:0xc002fb50,al
c0019606:	83 ec 0c             	sub    esp,0xc
c0019609:	68 00 08 00 00       	push   0x800
c001960e:	e8 fc fa ff ff       	call   c001910f <cpuidCheckEDX(unsigned int)>
c0019613:	83 c4 10             	add    esp,0x10
c0019616:	89 c1                	mov    ecx,eax
c0019618:	83 e1 01             	and    ecx,0x1
c001961b:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c0019620:	83 e0 fe             	and    eax,0xfffffffe
c0019623:	88 c2                	mov    dl,al
c0019625:	88 c8                	mov    al,cl
c0019627:	09 d0                	or     eax,edx
c0019629:	a2 50 fb 02 c0       	mov    ds:0xc002fb50,al
c001962e:	a0 4e fb 02 c0       	mov    al,ds:0xc002fb4e
c0019633:	83 e0 40             	and    eax,0x40
c0019636:	0f b6 c0             	movzx  eax,al
c0019639:	85 c0                	test   eax,eax
c001963b:	74 0a                	je     c0019647 <HalDetectFeatures()+0x481>
c001963d:	c7 05 28 fb 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002fb28,0x100
c0019647:	a0 4e fb 02 c0       	mov    al,ds:0xc002fb4e
c001964c:	83 e0 80             	and    eax,0xffffff80
c001964f:	0f b6 c0             	movzx  eax,al
c0019652:	85 c0                	test   eax,eax
c0019654:	74 0a                	je     c0019660 <HalDetectFeatures()+0x49a>
c0019656:	c7 05 24 fb 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002fb24,0x80
c0019660:	83 ec 0c             	sub    esp,0xc
c0019663:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019667:	50                   	push   eax
c0019668:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001966c:	50                   	push   eax
c001966d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019671:	50                   	push   eax
c0019672:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019676:	50                   	push   eax
c0019677:	6a 00                	push   0x0
c0019679:	e8 f3 f9 ff ff       	call   c0019071 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001967e:	83 c4 20             	add    esp,0x20
c0019681:	c7 44 24 48 30 fb 02 c0 	mov    DWORD PTR [esp+0x48],0xc002fb30
c0019689:	8d 44 24 10          	lea    eax,[esp+0x10]
c001968d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0019691:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c0019699:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001969d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00196a1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00196a5:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00196a9:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00196ad:	89 c6                	mov    esi,eax
c00196af:	89 d7                	mov    edi,edx
c00196b1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00196b3:	89 c8                	mov    eax,ecx
c00196b5:	89 fa                	mov    edx,edi
c00196b7:	89 f3                	mov    ebx,esi
c00196b9:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00196bd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00196c1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00196c5:	b8 34 fb 02 c0       	mov    eax,0xc002fb34
c00196ca:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00196ce:	8d 44 24 08          	lea    eax,[esp+0x8]
c00196d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00196d6:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c00196de:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00196e2:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00196e6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00196ea:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00196ee:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c00196f2:	89 c6                	mov    esi,eax
c00196f4:	89 d7                	mov    edi,edx
c00196f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00196f8:	89 c8                	mov    eax,ecx
c00196fa:	89 fa                	mov    edx,edi
c00196fc:	89 f3                	mov    ebx,esi
c00196fe:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c0019702:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c0019706:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001970a:	b8 38 fb 02 c0       	mov    eax,0xc002fb38
c001970f:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0019716:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001971a:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c001971e:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c0019726:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001972d:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0019731:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0019735:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001973c:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0019740:	89 c6                	mov    esi,eax
c0019742:	89 d7                	mov    edi,edx
c0019744:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019746:	89 c8                	mov    eax,ecx
c0019748:	89 fa                	mov    edx,edi
c001974a:	89 f3                	mov    ebx,esi
c001974c:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c0019750:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c0019754:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0019758:	83 ec 08             	sub    esp,0x8
c001975b:	68 6d 59 02 c0       	push   0xc002596d
c0019760:	68 30 fb 02 c0       	push   0xc002fb30
c0019765:	e8 e6 6f fe ff       	call   c0000750 <strcmp>
c001976a:	83 c4 10             	add    esp,0x10
c001976d:	85 c0                	test   eax,eax
c001976f:	74 19                	je     c001978a <HalDetectFeatures()+0x5c4>
c0019771:	83 ec 08             	sub    esp,0x8
c0019774:	68 7a 59 02 c0       	push   0xc002597a
c0019779:	68 30 fb 02 c0       	push   0xc002fb30
c001977e:	e8 cd 6f fe ff       	call   c0000750 <strcmp>
c0019783:	83 c4 10             	add    esp,0x10
c0019786:	85 c0                	test   eax,eax
c0019788:	75 04                	jne    c001978e <HalDetectFeatures()+0x5c8>
c001978a:	b0 01                	mov    al,0x1
c001978c:	eb 02                	jmp    c0019790 <HalDetectFeatures()+0x5ca>
c001978e:	b0 00                	mov    al,0x0
c0019790:	0f b6 c0             	movzx  eax,al
c0019793:	85 c0                	test   eax,eax
c0019795:	74 0f                	je     c00197a6 <HalDetectFeatures()+0x5e0>
c0019797:	c7 05 44 fb 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0x2
c00197a1:	e9 0d 03 00 00       	jmp    c0019ab3 <HalDetectFeatures()+0x8ed>
c00197a6:	83 ec 08             	sub    esp,0x8
c00197a9:	68 87 59 02 c0       	push   0xc0025987
c00197ae:	68 30 fb 02 c0       	push   0xc002fb30
c00197b3:	e8 98 6f fe ff       	call   c0000750 <strcmp>
c00197b8:	83 c4 10             	add    esp,0x10
c00197bb:	85 c0                	test   eax,eax
c00197bd:	74 19                	je     c00197d8 <HalDetectFeatures()+0x612>
c00197bf:	83 ec 08             	sub    esp,0x8
c00197c2:	68 94 59 02 c0       	push   0xc0025994
c00197c7:	68 30 fb 02 c0       	push   0xc002fb30
c00197cc:	e8 7f 6f fe ff       	call   c0000750 <strcmp>
c00197d1:	83 c4 10             	add    esp,0x10
c00197d4:	85 c0                	test   eax,eax
c00197d6:	75 04                	jne    c00197dc <HalDetectFeatures()+0x616>
c00197d8:	b0 01                	mov    al,0x1
c00197da:	eb 02                	jmp    c00197de <HalDetectFeatures()+0x618>
c00197dc:	b0 00                	mov    al,0x0
c00197de:	0f b6 c0             	movzx  eax,al
c00197e1:	85 c0                	test   eax,eax
c00197e3:	74 0f                	je     c00197f4 <HalDetectFeatures()+0x62e>
c00197e5:	c7 05 44 fb 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0x4
c00197ef:	e9 bf 02 00 00       	jmp    c0019ab3 <HalDetectFeatures()+0x8ed>
c00197f4:	83 ec 08             	sub    esp,0x8
c00197f7:	68 a1 59 02 c0       	push   0xc00259a1
c00197fc:	68 30 fb 02 c0       	push   0xc002fb30
c0019801:	e8 4a 6f fe ff       	call   c0000750 <strcmp>
c0019806:	83 c4 10             	add    esp,0x10
c0019809:	85 c0                	test   eax,eax
c001980b:	74 19                	je     c0019826 <HalDetectFeatures()+0x660>
c001980d:	83 ec 08             	sub    esp,0x8
c0019810:	68 ae 59 02 c0       	push   0xc00259ae
c0019815:	68 30 fb 02 c0       	push   0xc002fb30
c001981a:	e8 31 6f fe ff       	call   c0000750 <strcmp>
c001981f:	83 c4 10             	add    esp,0x10
c0019822:	85 c0                	test   eax,eax
c0019824:	75 04                	jne    c001982a <HalDetectFeatures()+0x664>
c0019826:	b0 01                	mov    al,0x1
c0019828:	eb 02                	jmp    c001982c <HalDetectFeatures()+0x666>
c001982a:	b0 00                	mov    al,0x0
c001982c:	0f b6 c0             	movzx  eax,al
c001982f:	85 c0                	test   eax,eax
c0019831:	74 0f                	je     c0019842 <HalDetectFeatures()+0x67c>
c0019833:	c7 05 44 fb 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0x5
c001983d:	e9 71 02 00 00       	jmp    c0019ab3 <HalDetectFeatures()+0x8ed>
c0019842:	83 ec 08             	sub    esp,0x8
c0019845:	68 bb 59 02 c0       	push   0xc00259bb
c001984a:	68 30 fb 02 c0       	push   0xc002fb30
c001984f:	e8 fc 6e fe ff       	call   c0000750 <strcmp>
c0019854:	83 c4 10             	add    esp,0x10
c0019857:	85 c0                	test   eax,eax
c0019859:	0f 94 c0             	sete   al
c001985c:	0f b6 c0             	movzx  eax,al
c001985f:	85 c0                	test   eax,eax
c0019861:	74 0f                	je     c0019872 <HalDetectFeatures()+0x6ac>
c0019863:	c7 05 44 fb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0x1
c001986d:	e9 41 02 00 00       	jmp    c0019ab3 <HalDetectFeatures()+0x8ed>
c0019872:	83 ec 08             	sub    esp,0x8
c0019875:	68 c8 59 02 c0       	push   0xc00259c8
c001987a:	68 30 fb 02 c0       	push   0xc002fb30
c001987f:	e8 cc 6e fe ff       	call   c0000750 <strcmp>
c0019884:	83 c4 10             	add    esp,0x10
c0019887:	85 c0                	test   eax,eax
c0019889:	0f 94 c0             	sete   al
c001988c:	0f b6 c0             	movzx  eax,al
c001988f:	85 c0                	test   eax,eax
c0019891:	74 0f                	je     c00198a2 <HalDetectFeatures()+0x6dc>
c0019893:	c7 05 44 fb 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0x3
c001989d:	e9 11 02 00 00       	jmp    c0019ab3 <HalDetectFeatures()+0x8ed>
c00198a2:	83 ec 08             	sub    esp,0x8
c00198a5:	68 87 59 02 c0       	push   0xc0025987
c00198aa:	68 30 fb 02 c0       	push   0xc002fb30
c00198af:	e8 9c 6e fe ff       	call   c0000750 <strcmp>
c00198b4:	83 c4 10             	add    esp,0x10
c00198b7:	85 c0                	test   eax,eax
c00198b9:	0f 94 c0             	sete   al
c00198bc:	0f b6 c0             	movzx  eax,al
c00198bf:	85 c0                	test   eax,eax
c00198c1:	74 0f                	je     c00198d2 <HalDetectFeatures()+0x70c>
c00198c3:	c7 05 44 fb 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0x6
c00198cd:	e9 e1 01 00 00       	jmp    c0019ab3 <HalDetectFeatures()+0x8ed>
c00198d2:	83 ec 08             	sub    esp,0x8
c00198d5:	68 d5 59 02 c0       	push   0xc00259d5
c00198da:	68 30 fb 02 c0       	push   0xc002fb30
c00198df:	e8 6c 6e fe ff       	call   c0000750 <strcmp>
c00198e4:	83 c4 10             	add    esp,0x10
c00198e7:	85 c0                	test   eax,eax
c00198e9:	0f 94 c0             	sete   al
c00198ec:	0f b6 c0             	movzx  eax,al
c00198ef:	85 c0                	test   eax,eax
c00198f1:	74 0f                	je     c0019902 <HalDetectFeatures()+0x73c>
c00198f3:	c7 05 44 fb 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0x7
c00198fd:	e9 b1 01 00 00       	jmp    c0019ab3 <HalDetectFeatures()+0x8ed>
c0019902:	83 ec 08             	sub    esp,0x8
c0019905:	68 e2 59 02 c0       	push   0xc00259e2
c001990a:	68 30 fb 02 c0       	push   0xc002fb30
c001990f:	e8 3c 6e fe ff       	call   c0000750 <strcmp>
c0019914:	83 c4 10             	add    esp,0x10
c0019917:	85 c0                	test   eax,eax
c0019919:	0f 94 c0             	sete   al
c001991c:	0f b6 c0             	movzx  eax,al
c001991f:	85 c0                	test   eax,eax
c0019921:	74 0f                	je     c0019932 <HalDetectFeatures()+0x76c>
c0019923:	c7 05 44 fb 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0x8
c001992d:	e9 81 01 00 00       	jmp    c0019ab3 <HalDetectFeatures()+0x8ed>
c0019932:	83 ec 08             	sub    esp,0x8
c0019935:	68 ef 59 02 c0       	push   0xc00259ef
c001993a:	68 30 fb 02 c0       	push   0xc002fb30
c001993f:	e8 0c 6e fe ff       	call   c0000750 <strcmp>
c0019944:	83 c4 10             	add    esp,0x10
c0019947:	85 c0                	test   eax,eax
c0019949:	0f 94 c0             	sete   al
c001994c:	0f b6 c0             	movzx  eax,al
c001994f:	85 c0                	test   eax,eax
c0019951:	74 0f                	je     c0019962 <HalDetectFeatures()+0x79c>
c0019953:	c7 05 44 fb 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0x9
c001995d:	e9 51 01 00 00       	jmp    c0019ab3 <HalDetectFeatures()+0x8ed>
c0019962:	83 ec 08             	sub    esp,0x8
c0019965:	68 fc 59 02 c0       	push   0xc00259fc
c001996a:	68 30 fb 02 c0       	push   0xc002fb30
c001996f:	e8 dc 6d fe ff       	call   c0000750 <strcmp>
c0019974:	83 c4 10             	add    esp,0x10
c0019977:	85 c0                	test   eax,eax
c0019979:	0f 94 c0             	sete   al
c001997c:	0f b6 c0             	movzx  eax,al
c001997f:	85 c0                	test   eax,eax
c0019981:	74 0f                	je     c0019992 <HalDetectFeatures()+0x7cc>
c0019983:	c7 05 44 fb 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0xa
c001998d:	e9 21 01 00 00       	jmp    c0019ab3 <HalDetectFeatures()+0x8ed>
c0019992:	83 ec 08             	sub    esp,0x8
c0019995:	68 09 5a 02 c0       	push   0xc0025a09
c001999a:	68 30 fb 02 c0       	push   0xc002fb30
c001999f:	e8 ac 6d fe ff       	call   c0000750 <strcmp>
c00199a4:	83 c4 10             	add    esp,0x10
c00199a7:	85 c0                	test   eax,eax
c00199a9:	0f 94 c0             	sete   al
c00199ac:	0f b6 c0             	movzx  eax,al
c00199af:	85 c0                	test   eax,eax
c00199b1:	74 0f                	je     c00199c2 <HalDetectFeatures()+0x7fc>
c00199b3:	c7 05 44 fb 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0xb
c00199bd:	e9 f1 00 00 00       	jmp    c0019ab3 <HalDetectFeatures()+0x8ed>
c00199c2:	83 ec 08             	sub    esp,0x8
c00199c5:	68 16 5a 02 c0       	push   0xc0025a16
c00199ca:	68 30 fb 02 c0       	push   0xc002fb30
c00199cf:	e8 7c 6d fe ff       	call   c0000750 <strcmp>
c00199d4:	83 c4 10             	add    esp,0x10
c00199d7:	85 c0                	test   eax,eax
c00199d9:	0f 94 c0             	sete   al
c00199dc:	0f b6 c0             	movzx  eax,al
c00199df:	85 c0                	test   eax,eax
c00199e1:	74 0f                	je     c00199f2 <HalDetectFeatures()+0x82c>
c00199e3:	c7 05 44 fb 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0xc
c00199ed:	e9 c1 00 00 00       	jmp    c0019ab3 <HalDetectFeatures()+0x8ed>
c00199f2:	83 ec 08             	sub    esp,0x8
c00199f5:	68 23 5a 02 c0       	push   0xc0025a23
c00199fa:	68 30 fb 02 c0       	push   0xc002fb30
c00199ff:	e8 4c 6d fe ff       	call   c0000750 <strcmp>
c0019a04:	83 c4 10             	add    esp,0x10
c0019a07:	85 c0                	test   eax,eax
c0019a09:	0f 94 c0             	sete   al
c0019a0c:	0f b6 c0             	movzx  eax,al
c0019a0f:	85 c0                	test   eax,eax
c0019a11:	74 0f                	je     c0019a22 <HalDetectFeatures()+0x85c>
c0019a13:	c7 05 44 fb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0xd
c0019a1d:	e9 91 00 00 00       	jmp    c0019ab3 <HalDetectFeatures()+0x8ed>
c0019a22:	83 ec 08             	sub    esp,0x8
c0019a25:	68 30 5a 02 c0       	push   0xc0025a30
c0019a2a:	68 30 fb 02 c0       	push   0xc002fb30
c0019a2f:	e8 1c 6d fe ff       	call   c0000750 <strcmp>
c0019a34:	83 c4 10             	add    esp,0x10
c0019a37:	85 c0                	test   eax,eax
c0019a39:	0f 94 c0             	sete   al
c0019a3c:	0f b6 c0             	movzx  eax,al
c0019a3f:	85 c0                	test   eax,eax
c0019a41:	74 0c                	je     c0019a4f <HalDetectFeatures()+0x889>
c0019a43:	c7 05 44 fb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0xd
c0019a4d:	eb 64                	jmp    c0019ab3 <HalDetectFeatures()+0x8ed>
c0019a4f:	83 ec 08             	sub    esp,0x8
c0019a52:	68 3d 5a 02 c0       	push   0xc0025a3d
c0019a57:	68 30 fb 02 c0       	push   0xc002fb30
c0019a5c:	e8 ef 6c fe ff       	call   c0000750 <strcmp>
c0019a61:	83 c4 10             	add    esp,0x10
c0019a64:	85 c0                	test   eax,eax
c0019a66:	0f 94 c0             	sete   al
c0019a69:	0f b6 c0             	movzx  eax,al
c0019a6c:	85 c0                	test   eax,eax
c0019a6e:	74 0c                	je     c0019a7c <HalDetectFeatures()+0x8b6>
c0019a70:	c7 05 44 fb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0xd
c0019a7a:	eb 37                	jmp    c0019ab3 <HalDetectFeatures()+0x8ed>
c0019a7c:	83 ec 08             	sub    esp,0x8
c0019a7f:	68 4a 5a 02 c0       	push   0xc0025a4a
c0019a84:	68 30 fb 02 c0       	push   0xc002fb30
c0019a89:	e8 c2 6c fe ff       	call   c0000750 <strcmp>
c0019a8e:	83 c4 10             	add    esp,0x10
c0019a91:	85 c0                	test   eax,eax
c0019a93:	0f 94 c0             	sete   al
c0019a96:	0f b6 c0             	movzx  eax,al
c0019a99:	85 c0                	test   eax,eax
c0019a9b:	74 0c                	je     c0019aa9 <HalDetectFeatures()+0x8e3>
c0019a9d:	c7 05 44 fb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0xd
c0019aa7:	eb 0a                	jmp    c0019ab3 <HalDetectFeatures()+0x8ed>
c0019aa9:	c7 05 44 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0x0
c0019ab3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019ab7:	83 f8 06             	cmp    eax,0x6
c0019aba:	0f 86 cc 00 00 00    	jbe    c0019b8c <HalDetectFeatures()+0x9c6>
c0019ac0:	83 ec 0c             	sub    esp,0xc
c0019ac3:	68 80 00 00 00       	push   0x80
c0019ac8:	e8 9d f6 ff ff       	call   c001916a <cpuidCheckExtendedEBX(unsigned int)>
c0019acd:	83 c4 10             	add    esp,0x10
c0019ad0:	89 c1                	mov    ecx,eax
c0019ad2:	83 e1 01             	and    ecx,0x1
c0019ad5:	a0 4f fb 02 c0       	mov    al,ds:0xc002fb4f
c0019ada:	83 e0 fe             	and    eax,0xfffffffe
c0019add:	88 c2                	mov    dl,al
c0019adf:	88 c8                	mov    al,cl
c0019ae1:	09 d0                	or     eax,edx
c0019ae3:	a2 4f fb 02 c0       	mov    ds:0xc002fb4f,al
c0019ae8:	83 ec 0c             	sub    esp,0xc
c0019aeb:	68 00 00 10 00       	push   0x100000
c0019af0:	e8 75 f6 ff ff       	call   c001916a <cpuidCheckExtendedEBX(unsigned int)>
c0019af5:	83 c4 10             	add    esp,0x10
c0019af8:	83 e0 01             	and    eax,0x1
c0019afb:	89 c1                	mov    ecx,eax
c0019afd:	c1 e1 06             	shl    ecx,0x6
c0019b00:	a0 4f fb 02 c0       	mov    al,ds:0xc002fb4f
c0019b05:	83 e0 bf             	and    eax,0xffffffbf
c0019b08:	88 c2                	mov    dl,al
c0019b0a:	88 c8                	mov    al,cl
c0019b0c:	09 d0                	or     eax,edx
c0019b0e:	a2 4f fb 02 c0       	mov    ds:0xc002fb4f,al
c0019b13:	83 ec 0c             	sub    esp,0xc
c0019b16:	68 00 00 04 00       	push   0x40000
c0019b1b:	e8 4a f6 ff ff       	call   c001916a <cpuidCheckExtendedEBX(unsigned int)>
c0019b20:	83 c4 10             	add    esp,0x10
c0019b23:	83 e0 01             	and    eax,0x1
c0019b26:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019b29:	a0 4f fb 02 c0       	mov    al,ds:0xc002fb4f
c0019b2e:	83 e0 fd             	and    eax,0xfffffffd
c0019b31:	88 c2                	mov    dl,al
c0019b33:	88 c8                	mov    al,cl
c0019b35:	09 d0                	or     eax,edx
c0019b37:	a2 4f fb 02 c0       	mov    ds:0xc002fb4f,al
c0019b3c:	83 ec 0c             	sub    esp,0xc
c0019b3f:	6a 04                	push   0x4
c0019b41:	e8 52 f6 ff ff       	call   c0019198 <cpuidCheckExtendedECX(unsigned int)>
c0019b46:	83 c4 10             	add    esp,0x10
c0019b49:	83 e0 01             	and    eax,0x1
c0019b4c:	89 c1                	mov    ecx,eax
c0019b4e:	c1 e1 05             	shl    ecx,0x5
c0019b51:	a0 4f fb 02 c0       	mov    al,ds:0xc002fb4f
c0019b56:	83 e0 df             	and    eax,0xffffffdf
c0019b59:	88 c2                	mov    dl,al
c0019b5b:	88 c8                	mov    al,cl
c0019b5d:	09 d0                	or     eax,edx
c0019b5f:	a2 4f fb 02 c0       	mov    ds:0xc002fb4f,al
c0019b64:	83 ec 0c             	sub    esp,0xc
c0019b67:	6a 20                	push   0x20
c0019b69:	e8 2a f6 ff ff       	call   c0019198 <cpuidCheckExtendedECX(unsigned int)>
c0019b6e:	83 c4 10             	add    esp,0x10
c0019b71:	83 e0 01             	and    eax,0x1
c0019b74:	89 c1                	mov    ecx,eax
c0019b76:	c1 e1 04             	shl    ecx,0x4
c0019b79:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c0019b7e:	83 e0 ef             	and    eax,0xffffffef
c0019b81:	88 c2                	mov    dl,al
c0019b83:	88 c8                	mov    al,cl
c0019b85:	09 d0                	or     eax,edx
c0019b87:	a2 50 fb 02 c0       	mov    ds:0xc002fb50,al
c0019b8c:	83 ec 0c             	sub    esp,0xc
c0019b8f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019b93:	50                   	push   eax
c0019b94:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019b98:	50                   	push   eax
c0019b99:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019b9d:	50                   	push   eax
c0019b9e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019ba2:	50                   	push   eax
c0019ba3:	6a 01                	push   0x1
c0019ba5:	e8 c7 f4 ff ff       	call   c0019071 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019baa:	83 c4 20             	add    esp,0x20
c0019bad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019bb1:	83 e0 0f             	and    eax,0xf
c0019bb4:	a2 40 fb 02 c0       	mov    ds:0xc002fb40,al
c0019bb9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019bbd:	c1 e8 04             	shr    eax,0x4
c0019bc0:	83 e0 0f             	and    eax,0xf
c0019bc3:	a2 3e fb 02 c0       	mov    ds:0xc002fb3e,al
c0019bc8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019bcc:	c1 e8 08             	shr    eax,0x8
c0019bcf:	83 e0 0f             	and    eax,0xf
c0019bd2:	a2 3d fb 02 c0       	mov    ds:0xc002fb3d,al
c0019bd7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019bdb:	c1 e8 0c             	shr    eax,0xc
c0019bde:	83 e0 03             	and    eax,0x3
c0019be1:	a2 3f fb 02 c0       	mov    ds:0xc002fb3f,al
c0019be6:	a0 3d fb 02 c0       	mov    al,ds:0xc002fb3d
c0019beb:	0f b6 c0             	movzx  eax,al
c0019bee:	83 f8 06             	cmp    eax,0x6
c0019bf1:	74 0d                	je     c0019c00 <HalDetectFeatures()+0xa3a>
c0019bf3:	a0 3d fb 02 c0       	mov    al,ds:0xc002fb3d
c0019bf8:	0f b6 c0             	movzx  eax,al
c0019bfb:	83 f8 0f             	cmp    eax,0xf
c0019bfe:	75 18                	jne    c0019c18 <HalDetectFeatures()+0xa52>
c0019c00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c04:	c1 e8 10             	shr    eax,0x10
c0019c07:	c1 e0 04             	shl    eax,0x4
c0019c0a:	88 c2                	mov    dl,al
c0019c0c:	a0 3e fb 02 c0       	mov    al,ds:0xc002fb3e
c0019c11:	09 d0                	or     eax,edx
c0019c13:	a2 3e fb 02 c0       	mov    ds:0xc002fb3e,al
c0019c18:	a0 3d fb 02 c0       	mov    al,ds:0xc002fb3d
c0019c1d:	0f b6 c0             	movzx  eax,al
c0019c20:	83 f8 0f             	cmp    eax,0xf
c0019c23:	75 15                	jne    c0019c3a <HalDetectFeatures()+0xa74>
c0019c25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c29:	c1 e8 14             	shr    eax,0x14
c0019c2c:	88 c2                	mov    dl,al
c0019c2e:	a0 3d fb 02 c0       	mov    al,ds:0xc002fb3d
c0019c33:	01 d0                	add    eax,edx
c0019c35:	a2 3d fb 02 c0       	mov    ds:0xc002fb3d,al
c0019c3a:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c0019c42:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c0019c4a:	85 c0                	test   eax,eax
c0019c4c:	74 2d                	je     c0019c7b <HalDetectFeatures()+0xab5>
c0019c4e:	83 ec 0c             	sub    esp,0xc
c0019c51:	68 00 00 00 40       	push   0x40000000
c0019c56:	e8 e1 f4 ff ff       	call   c001913c <cpuidCheckECX(unsigned int)>
c0019c5b:	83 c4 10             	add    esp,0x10
c0019c5e:	83 e0 01             	and    eax,0x1
c0019c61:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0019c68:	a0 4e fb 02 c0       	mov    al,ds:0xc002fb4e
c0019c6d:	83 e0 fb             	and    eax,0xfffffffb
c0019c70:	88 c2                	mov    dl,al
c0019c72:	88 c8                	mov    al,cl
c0019c74:	09 d0                	or     eax,edx
c0019c76:	a2 4e fb 02 c0       	mov    ds:0xc002fb4e,al
c0019c7b:	a0 4f fb 02 c0       	mov    al,ds:0xc002fb4f
c0019c80:	83 c8 04             	or     eax,0x4
c0019c83:	a2 4f fb 02 c0       	mov    ds:0xc002fb4f,al
c0019c88:	a0 4f fb 02 c0       	mov    al,ds:0xc002fb4f
c0019c8d:	83 c8 08             	or     eax,0x8
c0019c90:	a2 4f fb 02 c0       	mov    ds:0xc002fb4f,al
c0019c95:	a0 4f fb 02 c0       	mov    al,ds:0xc002fb4f
c0019c9a:	83 c8 10             	or     eax,0x10
c0019c9d:	a2 4f fb 02 c0       	mov    ds:0xc002fb4f,al
c0019ca2:	83 ec 0c             	sub    esp,0xc
c0019ca5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ca9:	50                   	push   eax
c0019caa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019cae:	50                   	push   eax
c0019caf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019cb3:	50                   	push   eax
c0019cb4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019cb8:	50                   	push   eax
c0019cb9:	68 00 00 00 80       	push   0x80000000
c0019cbe:	e8 ae f3 ff ff       	call   c0019071 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019cc3:	83 c4 20             	add    esp,0x20
c0019cc6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019cca:	3d 00 00 00 80       	cmp    eax,0x80000000
c0019ccf:	0f 86 96 01 00 00    	jbe    c0019e6b <HalDetectFeatures()+0xca5>
c0019cd5:	83 ec 0c             	sub    esp,0xc
c0019cd8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019cdc:	50                   	push   eax
c0019cdd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019ce1:	50                   	push   eax
c0019ce2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019ce6:	50                   	push   eax
c0019ce7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019ceb:	50                   	push   eax
c0019cec:	68 01 00 00 80       	push   0x80000001
c0019cf1:	e8 7b f3 ff ff       	call   c0019071 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019cf6:	83 c4 20             	add    esp,0x20
c0019cf9:	a0 4f fb 02 c0       	mov    al,ds:0xc002fb4f
c0019cfe:	83 e0 7f             	and    eax,0x7f
c0019d01:	a2 4f fb 02 c0       	mov    ds:0xc002fb4f,al
c0019d06:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c0019d0b:	83 e0 fb             	and    eax,0xfffffffb
c0019d0e:	a2 50 fb 02 c0       	mov    ds:0xc002fb50,al
c0019d13:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c0019d18:	83 e0 fd             	and    eax,0xfffffffd
c0019d1b:	a2 50 fb 02 c0       	mov    ds:0xc002fb50,al
c0019d20:	e9 46 01 00 00       	jmp    c0019e6b <HalDetectFeatures()+0xca5>
c0019d25:	83 ec 08             	sub    esp,0x8
c0019d28:	68 bb 59 02 c0       	push   0xc00259bb
c0019d2d:	68 30 fb 02 c0       	push   0xc002fb30
c0019d32:	e8 09 69 fe ff       	call   c0000640 <strcpy>
c0019d37:	83 c4 10             	add    esp,0x10
c0019d3a:	c7 05 44 fb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002fb44,0x1
c0019d44:	e8 7a 64 fe ff       	call   c00001c3 <is486>
c0019d49:	85 c0                	test   eax,eax
c0019d4b:	0f 95 c0             	setne  al
c0019d4e:	0f b6 c0             	movzx  eax,al
c0019d51:	85 c0                	test   eax,eax
c0019d53:	0f 84 8d 00 00 00    	je     c0019de6 <HalDetectFeatures()+0xc20>
c0019d59:	a0 4f fb 02 c0       	mov    al,ds:0xc002fb4f
c0019d5e:	83 c8 04             	or     eax,0x4
c0019d61:	a2 4f fb 02 c0       	mov    ds:0xc002fb4f,al
c0019d66:	a0 4f fb 02 c0       	mov    al,ds:0xc002fb4f
c0019d6b:	83 c8 08             	or     eax,0x8
c0019d6e:	a2 4f fb 02 c0       	mov    ds:0xc002fb4f,al
c0019d73:	a0 4f fb 02 c0       	mov    al,ds:0xc002fb4f
c0019d78:	83 c8 10             	or     eax,0x10
c0019d7b:	a2 4f fb 02 c0       	mov    ds:0xc002fb4f,al
c0019d80:	0f 20 c0             	mov    eax,cr0
c0019d83:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019d87:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019d8b:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0019d92:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019d99:	83 e0 04             	and    eax,0x4
c0019d9c:	74 1e                	je     c0019dbc <HalDetectFeatures()+0xbf6>
c0019d9e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019da5:	83 e0 10             	and    eax,0x10
c0019da8:	75 12                	jne    c0019dbc <HalDetectFeatures()+0xbf6>
c0019daa:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c0019daf:	83 e0 f7             	and    eax,0xfffffff7
c0019db2:	a2 50 fb 02 c0       	mov    ds:0xc002fb50,al
c0019db7:	e9 af 00 00 00       	jmp    c0019e6b <HalDetectFeatures()+0xca5>
c0019dbc:	e8 dd 63 fe ff       	call   c000019e <hasLegacyFPU>
c0019dc1:	83 e0 01             	and    eax,0x1
c0019dc4:	83 e0 01             	and    eax,0x1
c0019dc7:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019dce:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c0019dd3:	83 e0 f7             	and    eax,0xfffffff7
c0019dd6:	88 c2                	mov    dl,al
c0019dd8:	88 c8                	mov    al,cl
c0019dda:	09 d0                	or     eax,edx
c0019ddc:	a2 50 fb 02 c0       	mov    ds:0xc002fb50,al
c0019de1:	e9 85 00 00 00       	jmp    c0019e6b <HalDetectFeatures()+0xca5>
c0019de6:	a0 4f fb 02 c0       	mov    al,ds:0xc002fb4f
c0019deb:	83 e0 fb             	and    eax,0xfffffffb
c0019dee:	a2 4f fb 02 c0       	mov    ds:0xc002fb4f,al
c0019df3:	a0 4f fb 02 c0       	mov    al,ds:0xc002fb4f
c0019df8:	83 e0 f7             	and    eax,0xfffffff7
c0019dfb:	a2 4f fb 02 c0       	mov    ds:0xc002fb4f,al
c0019e00:	a0 4f fb 02 c0       	mov    al,ds:0xc002fb4f
c0019e05:	83 e0 ef             	and    eax,0xffffffef
c0019e08:	a2 4f fb 02 c0       	mov    ds:0xc002fb4f,al
c0019e0d:	0f 20 c0             	mov    eax,cr0
c0019e10:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019e14:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019e18:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0019e1f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019e26:	83 e0 04             	and    eax,0x4
c0019e29:	74 1b                	je     c0019e46 <HalDetectFeatures()+0xc80>
c0019e2b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019e32:	83 e0 10             	and    eax,0x10
c0019e35:	75 0f                	jne    c0019e46 <HalDetectFeatures()+0xc80>
c0019e37:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c0019e3c:	83 e0 f7             	and    eax,0xfffffff7
c0019e3f:	a2 50 fb 02 c0       	mov    ds:0xc002fb50,al
c0019e44:	eb 25                	jmp    c0019e6b <HalDetectFeatures()+0xca5>
c0019e46:	e8 53 63 fe ff       	call   c000019e <hasLegacyFPU>
c0019e4b:	83 e0 01             	and    eax,0x1
c0019e4e:	83 e0 01             	and    eax,0x1
c0019e51:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019e58:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c0019e5d:	83 e0 f7             	and    eax,0xfffffff7
c0019e60:	88 c2                	mov    dl,al
c0019e62:	88 c8                	mov    al,cl
c0019e64:	09 d0                	or     eax,edx
c0019e66:	a2 50 fb 02 c0       	mov    ds:0xc002fb50,al
c0019e6b:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c0019e70:	83 e0 08             	and    eax,0x8
c0019e73:	0f b6 c0             	movzx  eax,al
c0019e76:	85 c0                	test   eax,eax
c0019e78:	75 25                	jne    c0019e9f <HalDetectFeatures()+0xcd9>
c0019e7a:	e8 1f 63 fe ff       	call   c000019e <hasLegacyFPU>
c0019e7f:	83 e0 01             	and    eax,0x1
c0019e82:	83 e0 01             	and    eax,0x1
c0019e85:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019e8c:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c0019e91:	83 e0 f7             	and    eax,0xfffffff7
c0019e94:	88 c2                	mov    dl,al
c0019e96:	88 c8                	mov    al,cl
c0019e98:	09 d0                	or     eax,edx
c0019e9a:	a2 50 fb 02 c0       	mov    ds:0xc002fb50,al
c0019e9f:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c0019ea4:	83 e0 08             	and    eax,0x8
c0019ea7:	0f b6 c0             	movzx  eax,al
c0019eaa:	85 c0                	test   eax,eax
c0019eac:	74 0d                	je     c0019ebb <HalDetectFeatures()+0xcf5>
c0019eae:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019eb3:	83 c8 10             	or     eax,0x10
c0019eb6:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c0019ebb:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019ec0:	83 e0 10             	and    eax,0x10
c0019ec3:	0f b6 c0             	movzx  eax,al
c0019ec6:	85 c0                	test   eax,eax
c0019ec8:	75 23                	jne    c0019eed <HalDetectFeatures()+0xd27>
c0019eca:	e8 27 7b 00 00       	call   c00219f6 <x87Detect>
c0019ecf:	83 e0 01             	and    eax,0x1
c0019ed2:	83 e0 01             	and    eax,0x1
c0019ed5:	89 c1                	mov    ecx,eax
c0019ed7:	c1 e1 04             	shl    ecx,0x4
c0019eda:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019edf:	83 e0 ef             	and    eax,0xffffffef
c0019ee2:	88 c2                	mov    dl,al
c0019ee4:	88 c8                	mov    al,cl
c0019ee6:	09 d0                	or     eax,edx
c0019ee8:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c0019eed:	a0 4d fb 02 c0       	mov    al,ds:0xc002fb4d
c0019ef2:	83 e0 01             	and    eax,0x1
c0019ef5:	0f b6 c0             	movzx  eax,al
c0019ef8:	85 c0                	test   eax,eax
c0019efa:	75 2d                	jne    c0019f29 <HalDetectFeatures()+0xd63>
c0019efc:	a0 4d fb 02 c0       	mov    al,ds:0xc002fb4d
c0019f01:	83 e0 02             	and    eax,0x2
c0019f04:	0f b6 c0             	movzx  eax,al
c0019f07:	85 c0                	test   eax,eax
c0019f09:	75 1e                	jne    c0019f29 <HalDetectFeatures()+0xd63>
c0019f0b:	a0 4d fb 02 c0       	mov    al,ds:0xc002fb4d
c0019f10:	83 e0 04             	and    eax,0x4
c0019f13:	0f b6 c0             	movzx  eax,al
c0019f16:	85 c0                	test   eax,eax
c0019f18:	75 0f                	jne    c0019f29 <HalDetectFeatures()+0xd63>
c0019f1a:	a0 4d fb 02 c0       	mov    al,ds:0xc002fb4d
c0019f1f:	83 e0 08             	and    eax,0x8
c0019f22:	0f b6 c0             	movzx  eax,al
c0019f25:	85 c0                	test   eax,eax
c0019f27:	74 0d                	je     c0019f36 <HalDetectFeatures()+0xd70>
c0019f29:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019f2e:	83 c8 80             	or     eax,0xffffff80
c0019f31:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c0019f36:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019f3b:	83 e0 10             	and    eax,0x10
c0019f3e:	0f b6 c0             	movzx  eax,al
c0019f41:	85 c0                	test   eax,eax
c0019f43:	74 2f                	je     c0019f74 <HalDetectFeatures()+0xdae>
c0019f45:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019f4a:	83 e0 80             	and    eax,0xffffff80
c0019f4d:	0f b6 c0             	movzx  eax,al
c0019f50:	85 c0                	test   eax,eax
c0019f52:	75 20                	jne    c0019f74 <HalDetectFeatures()+0xdae>
c0019f54:	e8 57 7a 00 00       	call   c00219b0 <sseDetect>
c0019f59:	83 e0 01             	and    eax,0x1
c0019f5c:	89 c1                	mov    ecx,eax
c0019f5e:	c1 e1 07             	shl    ecx,0x7
c0019f61:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019f66:	83 e0 7f             	and    eax,0x7f
c0019f69:	88 c2                	mov    dl,al
c0019f6b:	88 c8                	mov    al,cl
c0019f6d:	09 d0                	or     eax,edx
c0019f6f:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c0019f74:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019f79:	83 e0 80             	and    eax,0xffffff80
c0019f7c:	0f b6 c0             	movzx  eax,al
c0019f7f:	85 c0                	test   eax,eax
c0019f81:	74 1c                	je     c0019f9f <HalDetectFeatures()+0xdd9>
c0019f83:	a0 4d fb 02 c0       	mov    al,ds:0xc002fb4d
c0019f88:	83 e0 20             	and    eax,0x20
c0019f8b:	0f b6 c0             	movzx  eax,al
c0019f8e:	85 c0                	test   eax,eax
c0019f90:	75 0d                	jne    c0019f9f <HalDetectFeatures()+0xdd9>
c0019f92:	a0 4d fb 02 c0       	mov    al,ds:0xc002fb4d
c0019f97:	83 e0 df             	and    eax,0xffffffdf
c0019f9a:	a2 4d fb 02 c0       	mov    ds:0xc002fb4d,al
c0019f9f:	c6 05 48 fb 02 c0 00 	mov    BYTE PTR ds:0xc002fb48,0x0
c0019fa6:	90                   	nop
c0019fa7:	81 c4 90 00 00 00    	add    esp,0x90
c0019fad:	5b                   	pop    ebx
c0019fae:	5e                   	pop    esi
c0019faf:	5f                   	pop    edi
c0019fb0:	c3                   	ret    

c0019fb1 <HalEnableNMI()>:
c0019fb1:	c6 05 2c fb 02 c0 01 	mov    BYTE PTR ds:0xc002fb2c,0x1
c0019fb8:	6a 10                	push   0x10
c0019fba:	e8 02 ef ff ff       	call   c0018ec1 <x86ReadCMOS(unsigned char)>
c0019fbf:	83 c4 04             	add    esp,0x4
c0019fc2:	90                   	nop
c0019fc3:	c3                   	ret    

c0019fc4 <HalDisableNMI()>:
c0019fc4:	c6 05 2c fb 02 c0 00 	mov    BYTE PTR ds:0xc002fb2c,0x0
c0019fcb:	6a 10                	push   0x10
c0019fcd:	e8 ef ee ff ff       	call   c0018ec1 <x86ReadCMOS(unsigned char)>
c0019fd2:	83 c4 04             	add    esp,0x4
c0019fd5:	90                   	nop
c0019fd6:	c3                   	ret    

c0019fd7 <HalGetNMIState()>:
c0019fd7:	a0 2c fb 02 c0       	mov    al,ds:0xc002fb2c
c0019fdc:	c3                   	ret    

c0019fdd <x86rdmsr(unsigned int)>:
c0019fdd:	83 ec 1c             	sub    esp,0x1c
c0019fe0:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c0019fe5:	83 e0 08             	and    eax,0x8
c0019fe8:	0f b6 c0             	movzx  eax,al
c0019feb:	85 c0                	test   eax,eax
c0019fed:	75 10                	jne    c0019fff <x86rdmsr(unsigned int)+0x22>
c0019fef:	83 ec 0c             	sub    esp,0xc
c0019ff2:	68 56 5a 02 c0       	push   0xc0025a56
c0019ff7:	e8 ea 5f ff ff       	call   c000ffe6 <KePanic(char const*)>
c0019ffc:	83 c4 10             	add    esp,0x10
c0019fff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a003:	89 c1                	mov    ecx,eax
c001a005:	0f 32                	rdmsr  
c001a007:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a00b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a00f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a013:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a017:	83 c4 1c             	add    esp,0x1c
c001a01a:	c3                   	ret    

c001a01b <x86wrmsr(unsigned int, unsigned long long)>:
c001a01b:	83 ec 1c             	sub    esp,0x1c
c001a01e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a022:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a026:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a02a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a02e:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c001a033:	83 e0 08             	and    eax,0x8
c001a036:	0f b6 c0             	movzx  eax,al
c001a039:	85 c0                	test   eax,eax
c001a03b:	75 10                	jne    c001a04d <x86wrmsr(unsigned int, unsigned long long)+0x32>
c001a03d:	83 ec 0c             	sub    esp,0xc
c001a040:	68 5c 5a 02 c0       	push   0xc0025a5c
c001a045:	e8 9c 5f ff ff       	call   c000ffe6 <KePanic(char const*)>
c001a04a:	83 c4 10             	add    esp,0x10
c001a04d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001a051:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a055:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a059:	0f 30                	wrmsr  
c001a05b:	90                   	nop
c001a05c:	83 c4 1c             	add    esp,0x1c
c001a05f:	c3                   	ret    

c001a060 <HalHandleGeneralProtectionFault(void*, void*)>:
c001a060:	83 ec 0c             	sub    esp,0xc
c001a063:	83 ec 0c             	sub    esp,0xc
c001a066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a06a:	e8 02 e2 ff ff       	call   c0018271 <Vm::faultHandler(regs*)>
c001a06f:	83 c4 10             	add    esp,0x10
c001a072:	83 c4 0c             	add    esp,0xc
c001a075:	c3                   	ret    

c001a076 <HalFindRSDP()>:
c001a076:	83 ec 1c             	sub    esp,0x1c
c001a079:	a1 3c f1 02 c0       	mov    eax,ds:0xc002f13c
c001a07e:	3d ff 07 00 00       	cmp    eax,0x7ff
c001a083:	7e 17                	jle    c001a09c <HalFindRSDP()+0x26>
c001a085:	83 ec 0c             	sub    esp,0xc
c001a088:	68 00 04 00 00       	push   0x400
c001a08d:	e8 4a 32 ff ff       	call   c000d2dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001a092:	83 c4 10             	add    esp,0x10
c001a095:	0f b6 c0             	movzx  eax,al
c001a098:	85 c0                	test   eax,eax
c001a09a:	74 04                	je     c001a0a0 <HalFindRSDP()+0x2a>
c001a09c:	b0 01                	mov    al,0x1
c001a09e:	eb 02                	jmp    c001a0a2 <HalFindRSDP()+0x2c>
c001a0a0:	b0 00                	mov    al,0x0
c001a0a2:	0f b6 c0             	movzx  eax,al
c001a0a5:	85 c0                	test   eax,eax
c001a0a7:	74 1d                	je     c001a0c6 <HalFindRSDP()+0x50>
c001a0a9:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c001a0ae:	83 e0 fb             	and    eax,0xfffffffb
c001a0b1:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c001a0b6:	83 ec 0c             	sub    esp,0xc
c001a0b9:	68 62 5a 02 c0       	push   0xc0025a62
c001a0be:	e8 b9 ce fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a0c3:	83 c4 10             	add    esp,0x10
c001a0c6:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c001a0cb:	83 e0 04             	and    eax,0x4
c001a0ce:	0f b6 c0             	movzx  eax,al
c001a0d1:	85 c0                	test   eax,eax
c001a0d3:	75 17                	jne    c001a0ec <HalFindRSDP()+0x76>
c001a0d5:	83 ec 0c             	sub    esp,0xc
c001a0d8:	68 71 5a 02 c0       	push   0xc0025a71
c001a0dd:	e8 9a ce fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a0e2:	83 c4 10             	add    esp,0x10
c001a0e5:	b8 00 00 00 00       	mov    eax,0x0
c001a0ea:	eb 63                	jmp    c001a14f <HalFindRSDP()+0xd9>
c001a0ec:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001a0f4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001a0fc:	77 2f                	ja     c001a12d <HalFindRSDP()+0xb7>
c001a0fe:	83 ec 04             	sub    esp,0x4
c001a101:	6a 08                	push   0x8
c001a103:	68 7b 5a 02 c0       	push   0xc0025a7b
c001a108:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a10c:	e8 6f 62 fe ff       	call   c0000380 <memcmp>
c001a111:	83 c4 10             	add    esp,0x10
c001a114:	85 c0                	test   eax,eax
c001a116:	0f 94 c0             	sete   al
c001a119:	0f b6 c0             	movzx  eax,al
c001a11c:	85 c0                	test   eax,eax
c001a11e:	74 06                	je     c001a126 <HalFindRSDP()+0xb0>
c001a120:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a124:	eb 29                	jmp    c001a14f <HalFindRSDP()+0xd9>
c001a126:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001a12b:	eb c7                	jmp    c001a0f4 <HalFindRSDP()+0x7e>
c001a12d:	83 ec 0c             	sub    esp,0xc
c001a130:	68 84 5a 02 c0       	push   0xc0025a84
c001a135:	e8 42 ce fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a13a:	83 c4 10             	add    esp,0x10
c001a13d:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c001a142:	83 e0 fb             	and    eax,0xfffffffb
c001a145:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c001a14a:	b8 00 00 00 00       	mov    eax,0x0
c001a14f:	83 c4 1c             	add    esp,0x1c
c001a152:	c3                   	ret    

c001a153 <HalHandlePageFault(void*, void*)>:
c001a153:	83 ec 1c             	sub    esp,0x1c
c001a156:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001a15b:	8b 00                	mov    eax,DWORD PTR [eax]
c001a15d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a160:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c001a166:	0f 20 d2             	mov    edx,cr2
c001a169:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a16d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a171:	83 ec 08             	sub    esp,0x8
c001a174:	52                   	push   edx
c001a175:	50                   	push   eax
c001a176:	e8 ed a1 ff ff       	call   c0014368 <VAS::tryLoadBackOffDisk(unsigned long)>
c001a17b:	83 c4 10             	add    esp,0x10
c001a17e:	83 c4 1c             	add    esp,0x1c
c001a181:	c3                   	ret    

c001a182 <HalHandleOpcodeFault(void*, void*)>:
c001a182:	83 ec 1c             	sub    esp,0x1c
c001a185:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a189:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a18d:	a0 48 fb 02 c0       	mov    al,ds:0xc002fb48
c001a192:	0f b6 c0             	movzx  eax,al
c001a195:	85 c0                	test   eax,eax
c001a197:	74 25                	je     c001a1be <HalHandleOpcodeFault(void*, void*)+0x3c>
c001a199:	83 ec 0c             	sub    esp,0xc
c001a19c:	68 7c 5c 02 c0       	push   0xc0025c7c
c001a1a1:	e8 d6 cd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a1a6:	83 c4 10             	add    esp,0x10
c001a1a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a1ad:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a1b0:	8d 50 19             	lea    edx,[eax+0x19]
c001a1b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a1b7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001a1ba:	b0 01                	mov    al,0x1
c001a1bc:	eb 02                	jmp    c001a1c0 <HalHandleOpcodeFault(void*, void*)+0x3e>
c001a1be:	b0 00                	mov    al,0x0
c001a1c0:	83 c4 1c             	add    esp,0x1c
c001a1c3:	c3                   	ret    

c001a1c4 <HalDisplayDebugInfo(void*)>:
c001a1c4:	83 ec 2c             	sub    esp,0x2c
c001a1c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a1cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a1cf:	0f 20 c0             	mov    eax,cr0
c001a1d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a1d6:	0f 20 d0             	mov    eax,cr2
c001a1d9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a1dd:	0f 20 d8             	mov    eax,cr3
c001a1e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a1e4:	0f 20 e0             	mov    eax,cr4
c001a1e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a1eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a1ef:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001a1f2:	83 ec 08             	sub    esp,0x8
c001a1f5:	50                   	push   eax
c001a1f6:	68 9e 5a 02 c0       	push   0xc0025a9e
c001a1fb:	e8 7c cd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a200:	83 c4 10             	add    esp,0x10
c001a203:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a207:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001a20a:	83 ec 08             	sub    esp,0x8
c001a20d:	50                   	push   eax
c001a20e:	68 8f 5a 02 c0       	push   0xc0025a8f
c001a213:	e8 64 cd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a218:	83 c4 10             	add    esp,0x10
c001a21b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a21f:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001a222:	83 ec 08             	sub    esp,0x8
c001a225:	50                   	push   eax
c001a226:	68 9a 5a 02 c0       	push   0xc0025a9a
c001a22b:	e8 4c cd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a230:	83 c4 10             	add    esp,0x10
c001a233:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a237:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a23a:	83 ec 08             	sub    esp,0x8
c001a23d:	50                   	push   eax
c001a23e:	68 a9 5a 02 c0       	push   0xc0025aa9
c001a243:	e8 34 cd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a248:	83 c4 10             	add    esp,0x10
c001a24b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a24f:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001a252:	83 ec 08             	sub    esp,0x8
c001a255:	50                   	push   eax
c001a256:	68 b4 5a 02 c0       	push   0xc0025ab4
c001a25b:	e8 1c cd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a260:	83 c4 10             	add    esp,0x10
c001a263:	83 ec 08             	sub    esp,0x8
c001a266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a26a:	68 bf 5a 02 c0       	push   0xc0025abf
c001a26f:	e8 08 cd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a274:	83 c4 10             	add    esp,0x10
c001a277:	83 ec 08             	sub    esp,0x8
c001a27a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a27e:	68 ca 5a 02 c0       	push   0xc0025aca
c001a283:	e8 f4 cc fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a288:	83 c4 10             	add    esp,0x10
c001a28b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a28f:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001a292:	c1 e0 05             	shl    eax,0x5
c001a295:	8d 90 60 6f 02 c0    	lea    edx,[eax-0x3ffd90a0]
c001a29b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a29f:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001a2a2:	83 ec 04             	sub    esp,0x4
c001a2a5:	52                   	push   edx
c001a2a6:	50                   	push   eax
c001a2a7:	68 d5 5a 02 c0       	push   0xc0025ad5
c001a2ac:	e8 cb cc fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a2b1:	83 c4 10             	add    esp,0x10
c001a2b4:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a2b9:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a2bf:	83 ec 0c             	sub    esp,0xc
c001a2c2:	50                   	push   eax
c001a2c3:	e8 5b 83 ff ff       	call   c0012623 <setActiveTerminal(VgaText*)>
c001a2c8:	83 c4 10             	add    esp,0x10
c001a2cb:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a2d0:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a2d6:	83 ec 08             	sub    esp,0x8
c001a2d9:	68 e4 5a 02 c0       	push   0xc0025ae4
c001a2de:	50                   	push   eax
c001a2df:	e8 8c 86 ff ff       	call   c0012970 <VgaText::puts(char const*)>
c001a2e4:	83 c4 10             	add    esp,0x10
c001a2e7:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a2ec:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a2f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a2f6:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001a2f9:	83 ec 08             	sub    esp,0x8
c001a2fc:	52                   	push   edx
c001a2fd:	50                   	push   eax
c001a2fe:	e8 27 86 ff ff       	call   c001292a <VgaText::putx(unsigned int)>
c001a303:	83 c4 10             	add    esp,0x10
c001a306:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a30b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a311:	83 ec 08             	sub    esp,0x8
c001a314:	68 f2 5a 02 c0       	push   0xc0025af2
c001a319:	50                   	push   eax
c001a31a:	e8 51 86 ff ff       	call   c0012970 <VgaText::puts(char const*)>
c001a31f:	83 c4 10             	add    esp,0x10
c001a322:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a327:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a32d:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001a332:	8b 12                	mov    edx,DWORD PTR [edx]
c001a334:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a337:	83 c2 0c             	add    edx,0xc
c001a33a:	83 ec 08             	sub    esp,0x8
c001a33d:	52                   	push   edx
c001a33e:	50                   	push   eax
c001a33f:	e8 2c 86 ff ff       	call   c0012970 <VgaText::puts(char const*)>
c001a344:	83 c4 10             	add    esp,0x10
c001a347:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a34c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a352:	83 ec 08             	sub    esp,0x8
c001a355:	68 fb 5a 02 c0       	push   0xc0025afb
c001a35a:	50                   	push   eax
c001a35b:	e8 10 86 ff ff       	call   c0012970 <VgaText::puts(char const*)>
c001a360:	83 c4 10             	add    esp,0x10
c001a363:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a368:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a36e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a372:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001a375:	83 ec 08             	sub    esp,0x8
c001a378:	52                   	push   edx
c001a379:	50                   	push   eax
c001a37a:	e8 ab 85 ff ff       	call   c001292a <VgaText::putx(unsigned int)>
c001a37f:	83 c4 10             	add    esp,0x10
c001a382:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a387:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a38d:	83 ec 08             	sub    esp,0x8
c001a390:	68 03 5b 02 c0       	push   0xc0025b03
c001a395:	50                   	push   eax
c001a396:	e8 d5 85 ff ff       	call   c0012970 <VgaText::puts(char const*)>
c001a39b:	83 c4 10             	add    esp,0x10
c001a39e:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a3a3:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a3a9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3ad:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001a3b0:	83 ec 08             	sub    esp,0x8
c001a3b3:	52                   	push   edx
c001a3b4:	50                   	push   eax
c001a3b5:	e8 70 85 ff ff       	call   c001292a <VgaText::putx(unsigned int)>
c001a3ba:	83 c4 10             	add    esp,0x10
c001a3bd:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a3c2:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a3c8:	83 ec 08             	sub    esp,0x8
c001a3cb:	68 0b 5b 02 c0       	push   0xc0025b0b
c001a3d0:	50                   	push   eax
c001a3d1:	e8 9a 85 ff ff       	call   c0012970 <VgaText::puts(char const*)>
c001a3d6:	83 c4 10             	add    esp,0x10
c001a3d9:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a3de:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a3e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3e8:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001a3eb:	83 ec 08             	sub    esp,0x8
c001a3ee:	52                   	push   edx
c001a3ef:	50                   	push   eax
c001a3f0:	e8 35 85 ff ff       	call   c001292a <VgaText::putx(unsigned int)>
c001a3f5:	83 c4 10             	add    esp,0x10
c001a3f8:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a3fd:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a403:	83 ec 08             	sub    esp,0x8
c001a406:	68 13 5b 02 c0       	push   0xc0025b13
c001a40b:	50                   	push   eax
c001a40c:	e8 5f 85 ff ff       	call   c0012970 <VgaText::puts(char const*)>
c001a411:	83 c4 10             	add    esp,0x10
c001a414:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a419:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a41f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a423:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001a426:	83 ec 08             	sub    esp,0x8
c001a429:	52                   	push   edx
c001a42a:	50                   	push   eax
c001a42b:	e8 fa 84 ff ff       	call   c001292a <VgaText::putx(unsigned int)>
c001a430:	83 c4 10             	add    esp,0x10
c001a433:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a438:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a43e:	83 ec 08             	sub    esp,0x8
c001a441:	68 1b 5b 02 c0       	push   0xc0025b1b
c001a446:	50                   	push   eax
c001a447:	e8 24 85 ff ff       	call   c0012970 <VgaText::puts(char const*)>
c001a44c:	83 c4 10             	add    esp,0x10
c001a44f:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a454:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a45a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a45e:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001a461:	83 ec 08             	sub    esp,0x8
c001a464:	52                   	push   edx
c001a465:	50                   	push   eax
c001a466:	e8 bf 84 ff ff       	call   c001292a <VgaText::putx(unsigned int)>
c001a46b:	83 c4 10             	add    esp,0x10
c001a46e:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a473:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a479:	83 ec 08             	sub    esp,0x8
c001a47c:	68 23 5b 02 c0       	push   0xc0025b23
c001a481:	50                   	push   eax
c001a482:	e8 e9 84 ff ff       	call   c0012970 <VgaText::puts(char const*)>
c001a487:	83 c4 10             	add    esp,0x10
c001a48a:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a48f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a495:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a499:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a49c:	83 ec 08             	sub    esp,0x8
c001a49f:	52                   	push   edx
c001a4a0:	50                   	push   eax
c001a4a1:	e8 84 84 ff ff       	call   c001292a <VgaText::putx(unsigned int)>
c001a4a6:	83 c4 10             	add    esp,0x10
c001a4a9:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a4ae:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a4b4:	83 ec 08             	sub    esp,0x8
c001a4b7:	68 2b 5b 02 c0       	push   0xc0025b2b
c001a4bc:	50                   	push   eax
c001a4bd:	e8 ae 84 ff ff       	call   c0012970 <VgaText::puts(char const*)>
c001a4c2:	83 c4 10             	add    esp,0x10
c001a4c5:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a4ca:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a4d0:	83 ec 08             	sub    esp,0x8
c001a4d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a4d7:	50                   	push   eax
c001a4d8:	e8 4d 84 ff ff       	call   c001292a <VgaText::putx(unsigned int)>
c001a4dd:	83 c4 10             	add    esp,0x10
c001a4e0:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a4e5:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a4eb:	83 ec 08             	sub    esp,0x8
c001a4ee:	68 34 5b 02 c0       	push   0xc0025b34
c001a4f3:	50                   	push   eax
c001a4f4:	e8 77 84 ff ff       	call   c0012970 <VgaText::puts(char const*)>
c001a4f9:	83 c4 10             	add    esp,0x10
c001a4fc:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a501:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a507:	83 ec 08             	sub    esp,0x8
c001a50a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a50e:	50                   	push   eax
c001a50f:	e8 16 84 ff ff       	call   c001292a <VgaText::putx(unsigned int)>
c001a514:	83 c4 10             	add    esp,0x10
c001a517:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a51c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a522:	83 ec 08             	sub    esp,0x8
c001a525:	68 3c 5b 02 c0       	push   0xc0025b3c
c001a52a:	50                   	push   eax
c001a52b:	e8 40 84 ff ff       	call   c0012970 <VgaText::puts(char const*)>
c001a530:	83 c4 10             	add    esp,0x10
c001a533:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001a538:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a53e:	83 ec 08             	sub    esp,0x8
c001a541:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a545:	50                   	push   eax
c001a546:	e8 df 83 ff ff       	call   c001292a <VgaText::putx(unsigned int)>
c001a54b:	83 c4 10             	add    esp,0x10
c001a54e:	fa                   	cli    
c001a54f:	f4                   	hlt    
c001a550:	eb fe                	jmp    c001a550 <HalDisplayDebugInfo(void*)+0x38c>

c001a552 <HalReceivedNMI()>:
c001a552:	83 ec 1c             	sub    esp,0x1c
c001a555:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c001a55c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a560:	89 c2                	mov    edx,eax
c001a562:	ec                   	in     al,dx
c001a563:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001a567:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001a56b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a56f:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c001a576:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a57a:	89 c2                	mov    edx,eax
c001a57c:	ec                   	in     al,dx
c001a57d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001a581:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001a585:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001a589:	83 ec 0c             	sub    esp,0xc
c001a58c:	68 44 5b 02 c0       	push   0xc0025b44
c001a591:	e8 e6 c9 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a596:	83 c4 10             	add    esp,0x10
c001a599:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001a59e:	83 e0 10             	and    eax,0x10
c001a5a1:	74 10                	je     c001a5b3 <HalReceivedNMI()+0x61>
c001a5a3:	83 ec 0c             	sub    esp,0xc
c001a5a6:	68 55 5b 02 c0       	push   0xc0025b55
c001a5ab:	e8 36 5a ff ff       	call   c000ffe6 <KePanic(char const*)>
c001a5b0:	83 c4 10             	add    esp,0x10
c001a5b3:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001a5b8:	83 e0 40             	and    eax,0x40
c001a5bb:	74 10                	je     c001a5cd <HalReceivedNMI()+0x7b>
c001a5bd:	83 ec 0c             	sub    esp,0xc
c001a5c0:	68 62 5b 02 c0       	push   0xc0025b62
c001a5c5:	e8 1c 5a ff ff       	call   c000ffe6 <KePanic(char const*)>
c001a5ca:	83 c4 10             	add    esp,0x10
c001a5cd:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001a5d1:	0f be c0             	movsx  eax,al
c001a5d4:	85 c0                	test   eax,eax
c001a5d6:	79 10                	jns    c001a5e8 <HalReceivedNMI()+0x96>
c001a5d8:	83 ec 0c             	sub    esp,0xc
c001a5db:	68 6c 5b 02 c0       	push   0xc0025b6c
c001a5e0:	e8 01 5a ff ff       	call   c000ffe6 <KePanic(char const*)>
c001a5e5:	83 c4 10             	add    esp,0x10
c001a5e8:	90                   	nop
c001a5e9:	83 c4 1c             	add    esp,0x1c
c001a5ec:	c3                   	ret    

c001a5ed <HalSystemIdle()>:
c001a5ed:	56                   	push   esi
c001a5ee:	53                   	push   ebx
c001a5ef:	83 ec 14             	sub    esp,0x14
c001a5f2:	a0 50 fb 02 c0       	mov    al,ds:0xc002fb50
c001a5f7:	83 e0 10             	and    eax,0x10
c001a5fa:	0f b6 c0             	movzx  eax,al
c001a5fd:	85 c0                	test   eax,eax
c001a5ff:	74 43                	je     c001a644 <HalSystemIdle()+0x57>
c001a601:	83 ec 0c             	sub    esp,0xc
c001a604:	68 e1 00 00 00       	push   0xe1
c001a609:	e8 cf f9 ff ff       	call   c0019fdd <x86rdmsr(unsigned int)>
c001a60e:	83 c4 10             	add    esp,0x10
c001a611:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a615:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a619:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a61d:	83 e0 02             	and    eax,0x2
c001a620:	89 c3                	mov    ebx,eax
c001a622:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a626:	83 e0 00             	and    eax,0x0
c001a629:	89 c6                	mov    esi,eax
c001a62b:	83 ec 04             	sub    esp,0x4
c001a62e:	56                   	push   esi
c001a62f:	53                   	push   ebx
c001a630:	68 e1 00 00 00       	push   0xe1
c001a635:	e8 e1 f9 ff ff       	call   c001a01b <x86wrmsr(unsigned int, unsigned long long)>
c001a63a:	83 c4 10             	add    esp,0x10
c001a63d:	e8 52 5b fe ff       	call   c0000194 <doTPAUSE>
c001a642:	eb 01                	jmp    c001a645 <HalSystemIdle()+0x58>
c001a644:	f4                   	hlt    
c001a645:	90                   	nop
c001a646:	83 c4 14             	add    esp,0x14
c001a649:	5b                   	pop    ebx
c001a64a:	5e                   	pop    esi
c001a64b:	c3                   	ret    

c001a64c <i386SaveCoprocessor(void*)>:
c001a64c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a650:	83 c0 3f             	add    eax,0x3f
c001a653:	83 e0 c0             	and    eax,0xffffffc0
c001a656:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a65a:	ff 25 10 fb 02 c0    	jmp    DWORD PTR ds:0xc002fb10

c001a660 <i386LoadCoprocessor(void*)>:
c001a660:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a664:	83 c0 3f             	add    eax,0x3f
c001a667:	83 e0 c0             	and    eax,0xffffffc0
c001a66a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a66e:	ff 25 0c fb 02 c0    	jmp    DWORD PTR ds:0xc002fb0c

c001a674 <x87EmulHandler(regs*, void*)>:
c001a674:	53                   	push   ebx
c001a675:	83 ec 08             	sub    esp,0x8
c001a678:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a67d:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c001a681:	74 10                	je     c001a693 <x87EmulHandler(regs*, void*)+0x1f>
c001a683:	83 ec 0c             	sub    esp,0xc
c001a686:	68 79 5b 02 c0       	push   0xc0025b79
c001a68b:	e8 56 59 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001a690:	83 c4 10             	add    esp,0x10
c001a693:	0f 20 c0             	mov    eax,cr0
c001a696:	a8 08                	test   al,0x8
c001a698:	74 59                	je     c001a6f3 <x87EmulHandler(regs*, void*)+0x7f>
c001a69a:	0f 06                	clts   
c001a69c:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001a6a1:	85 c0                	test   eax,eax
c001a6a3:	74 0e                	je     c001a6b3 <x87EmulHandler(regs*, void*)+0x3f>
c001a6a5:	83 ec 0c             	sub    esp,0xc
c001a6a8:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a6ab:	e8 9c ff ff ff       	call   c001a64c <i386SaveCoprocessor(void*)>
c001a6b0:	83 c4 10             	add    esp,0x10
c001a6b3:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001a6b9:	83 7b 59 00          	cmp    DWORD PTR [ebx+0x59],0x0
c001a6bd:	75 12                	jne    c001a6d1 <x87EmulHandler(regs*, void*)+0x5d>
c001a6bf:	83 ec 0c             	sub    esp,0xc
c001a6c2:	68 40 02 00 00       	push   0x240
c001a6c7:	e8 c3 54 ff ff       	call   c000fb8f <malloc>
c001a6cc:	89 43 59             	mov    DWORD PTR [ebx+0x59],eax
c001a6cf:	eb 10                	jmp    c001a6e1 <x87EmulHandler(regs*, void*)+0x6d>
c001a6d1:	83 ec 0c             	sub    esp,0xc
c001a6d4:	a1 08 fb 02 c0       	mov    eax,ds:0xc002fb08
c001a6d9:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a6dc:	e8 7f ff ff ff       	call   c001a660 <i386LoadCoprocessor(void*)>
c001a6e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a6e6:	83 c4 10             	add    esp,0x10
c001a6e9:	a3 08 fb 02 c0       	mov    ds:0xc002fb08,eax
c001a6ee:	83 c4 08             	add    esp,0x8
c001a6f1:	5b                   	pop    ebx
c001a6f2:	c3                   	ret    
c001a6f3:	83 ec 0c             	sub    esp,0xc
c001a6f6:	68 8d 5b 02 c0       	push   0xc0025b8d
c001a6fb:	e8 7c c8 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a700:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001a708:	83 c4 18             	add    esp,0x18
c001a70b:	5b                   	pop    ebx
c001a70c:	e9 13 d4 ff ff       	jmp    c0017b24 <Thr::terminateFromIRQ(int)>

c001a711 <HalInitialiseCoprocessor()>:
c001a711:	83 ec 10             	sub    esp,0x10
c001a714:	c7 05 08 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb08,0x0
c001a71e:	6a 00                	push   0x0
c001a720:	68 74 a6 01 c0       	push   0xc001a674
c001a725:	6a 07                	push   0x7
c001a727:	e8 ff 06 00 00       	call   c001ae2b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a72c:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c001a731:	83 c4 10             	add    esp,0x10
c001a734:	a8 80                	test   al,0x80
c001a736:	74 1c                	je     c001a754 <HalInitialiseCoprocessor()+0x43>
c001a738:	c7 05 10 fb 02 c0 c8 19 02 c0 	mov    DWORD PTR ds:0xc002fb10,0xc00219c8
c001a742:	c7 05 0c fb 02 c0 d0 19 02 c0 	mov    DWORD PTR ds:0xc002fb0c,0xc00219d0
c001a74c:	83 c4 0c             	add    esp,0xc
c001a74f:	e9 84 72 00 00       	jmp    c00219d8 <sseInit>
c001a754:	a8 10                	test   al,0x10
c001a756:	74 1c                	je     c001a774 <HalInitialiseCoprocessor()+0x63>
c001a758:	c7 05 10 fb 02 c0 17 1a 02 c0 	mov    DWORD PTR ds:0xc002fb10,0xc0021a17
c001a762:	c7 05 0c fb 02 c0 1e 1a 02 c0 	mov    DWORD PTR ds:0xc002fb0c,0xc0021a1e
c001a76c:	83 c4 0c             	add    esp,0xc
c001a76f:	e9 b1 72 00 00       	jmp    c0021a25 <x87Init>
c001a774:	c7 05 10 fb 02 c0 b0 8e 01 c0 	mov    DWORD PTR ds:0xc002fb10,0xc0018eb0
c001a77e:	c7 05 0c fb 02 c0 b0 8e 01 c0 	mov    DWORD PTR ds:0xc002fb0c,0xc0018eb0
c001a788:	0f 20 c0             	mov    eax,cr0
c001a78b:	83 c8 04             	or     eax,0x4
c001a78e:	0f 22 c0             	mov    cr0,eax
c001a791:	83 c4 0c             	add    esp,0xc
c001a794:	c3                   	ret    

c001a795 <HalPanic(char const*)>:
c001a795:	53                   	push   ebx
c001a796:	83 ec 10             	sub    esp,0x10
c001a799:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a79d:	fa                   	cli    
c001a79e:	53                   	push   ebx
c001a79f:	68 a3 5b 02 c0       	push   0xc0025ba3
c001a7a4:	e8 d3 c7 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a7a9:	a1 04 fb 02 c0       	mov    eax,ds:0xc002fb04
c001a7ae:	83 c4 10             	add    esp,0x10
c001a7b1:	85 c0                	test   eax,eax
c001a7b3:	74 09                	je     c001a7be <HalPanic(char const*)+0x29>
c001a7b5:	83 ec 0c             	sub    esp,0xc
c001a7b8:	53                   	push   ebx
c001a7b9:	ff d0                	call   eax
c001a7bb:	83 c4 10             	add    esp,0x10
c001a7be:	a1 b4 f1 02 c0       	mov    eax,ds:0xc002f1b4
c001a7c3:	85 c0                	test   eax,eax
c001a7c5:	0f 84 dc 00 00 00    	je     c001a8a7 <HalPanic(char const*)+0x112>
c001a7cb:	52                   	push   edx
c001a7cc:	6a 01                	push   0x1
c001a7ce:	6a 0f                	push   0xf
c001a7d0:	50                   	push   eax
c001a7d1:	e8 8c 7c ff ff       	call   c0012462 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a7d6:	59                   	pop    ecx
c001a7d7:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a7dd:	e8 8c 7e ff ff       	call   c001266e <VgaText::clearScreen()>
c001a7e2:	58                   	pop    eax
c001a7e3:	5a                   	pop    edx
c001a7e4:	68 b1 48 02 c0       	push   0xc00248b1
c001a7e9:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a7ef:	e8 a6 7c ff ff       	call   c001249a <VgaText::setTitle(char*)>
c001a7f4:	83 c4 0c             	add    esp,0xc
c001a7f7:	6a 01                	push   0x1
c001a7f9:	6a 0f                	push   0xf
c001a7fb:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a801:	e8 5c 7c ff ff       	call   c0012462 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a806:	59                   	pop    ecx
c001a807:	58                   	pop    eax
c001a808:	68 bc 5b 02 c0       	push   0xc0025bbc
c001a80d:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a813:	e8 58 81 ff ff       	call   c0012970 <VgaText::puts(char const*)>
c001a818:	83 c4 0c             	add    esp,0xc
c001a81b:	6a 0f                	push   0xf
c001a81d:	6a 01                	push   0x1
c001a81f:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a825:	e8 38 7c ff ff       	call   c0012462 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a82a:	58                   	pop    eax
c001a82b:	5a                   	pop    edx
c001a82c:	68 c5 5b 02 c0       	push   0xc0025bc5
c001a831:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a837:	e8 34 81 ff ff       	call   c0012970 <VgaText::puts(char const*)>
c001a83c:	83 c4 0c             	add    esp,0xc
c001a83f:	6a 01                	push   0x1
c001a841:	6a 0f                	push   0xf
c001a843:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a849:	e8 14 7c ff ff       	call   c0012462 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a84e:	59                   	pop    ecx
c001a84f:	58                   	pop    eax
c001a850:	68 09 5c 02 c0       	push   0xc0025c09
c001a855:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a85b:	e8 10 81 ff ff       	call   c0012970 <VgaText::puts(char const*)>
c001a860:	58                   	pop    eax
c001a861:	5a                   	pop    edx
c001a862:	68 d2 5b 02 c0       	push   0xc0025bd2
c001a867:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a86d:	e8 fe 80 ff ff       	call   c0012970 <VgaText::puts(char const*)>
c001a872:	59                   	pop    ecx
c001a873:	58                   	pop    eax
c001a874:	68 0c 5c 02 c0       	push   0xc0025c0c
c001a879:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a87f:	e8 ec 80 ff ff       	call   c0012970 <VgaText::puts(char const*)>
c001a884:	58                   	pop    eax
c001a885:	5a                   	pop    edx
c001a886:	53                   	push   ebx
c001a887:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a88d:	e8 de 80 ff ff       	call   c0012970 <VgaText::puts(char const*)>
c001a892:	59                   	pop    ecx
c001a893:	5b                   	pop    ebx
c001a894:	68 09 5c 02 c0       	push   0xc0025c09
c001a899:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c001a89f:	e8 cc 80 ff ff       	call   c0012970 <VgaText::puts(char const*)>
c001a8a4:	83 c4 10             	add    esp,0x10
c001a8a7:	eb fe                	jmp    c001a8a7 <HalPanic(char const*)+0x112>

c001a8a9 <HalQueryPerformanceCounter()>:
c001a8a9:	31 c0                	xor    eax,eax
c001a8ab:	31 d2                	xor    edx,edx
c001a8ad:	f6 05 4e fb 02 c0 08 	test   BYTE PTR ds:0xc002fb4e,0x8
c001a8b4:	75 02                	jne    c001a8b8 <HalQueryPerformanceCounter()+0xf>
c001a8b6:	0f 31                	rdtsc  
c001a8b8:	c3                   	ret    

c001a8b9 <HalInitialise()>:
c001a8b9:	53                   	push   ebx
c001a8ba:	83 ec 08             	sub    esp,0x8
c001a8bd:	e8 04 e9 ff ff       	call   c00191c6 <HalDetectFeatures()>
c001a8c2:	83 ec 0c             	sub    esp,0xc
c001a8c5:	68 b1 8e 01 c0       	push   0xc0018eb1
c001a8ca:	e8 05 61 ff ff       	call   c00109d4 <KeRegisterRestartHandler(void (*)())>
c001a8cf:	c7 04 24 bc 8e 01 c0 	mov    DWORD PTR [esp],0xc0018ebc
c001a8d6:	e8 ef 60 ff ff       	call   c00109ca <KeRegisterShutdownHandler(void (*)())>
c001a8db:	c7 04 24 bd 8e 01 c0 	mov    DWORD PTR [esp],0xc0018ebd
c001a8e2:	e8 f7 60 ff ff       	call   c00109de <KeRegisterSleepHandler(void (*)())>
c001a8e7:	e8 d4 1a ff ff       	call   c000c3c0 <scanMADT()>
c001a8ec:	83 c4 10             	add    esp,0x10
c001a8ef:	80 3d 40 ce 02 c0 00 	cmp    BYTE PTR ds:0xc002ce40,0x0
c001a8f6:	75 0d                	jne    c001a905 <HalInitialise()+0x4c>
c001a8f8:	a0 4c fb 02 c0       	mov    al,ds:0xc002fb4c
c001a8fd:	83 e0 fe             	and    eax,0xfffffffe
c001a900:	a2 4c fb 02 c0       	mov    ds:0xc002fb4c,al
c001a905:	e8 fe 07 00 00       	call   c001b108 <picOpen()>
c001a90a:	f6 05 4c fb 02 c0 01 	test   BYTE PTR ds:0xc002fb4c,0x1
c001a911:	74 0a                	je     c001a91d <HalInitialise()+0x64>
c001a913:	e8 40 07 00 00       	call   c001b058 <picDisable()>
c001a918:	e8 9b e1 ff ff       	call   c0018ab8 <apicOpen()>
c001a91d:	bb 0f 00 00 00       	mov    ebx,0xf
c001a922:	50                   	push   eax
c001a923:	6a 00                	push   0x0
c001a925:	68 40 eb 00 c0       	push   0xc000eb40
c001a92a:	6a 02                	push   0x2
c001a92c:	e8 fa 04 00 00       	call   c001ae2b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a931:	83 c4 0c             	add    esp,0xc
c001a934:	6a 00                	push   0x0
c001a936:	68 84 eb 00 c0       	push   0xc000eb84
c001a93b:	6a 06                	push   0x6
c001a93d:	e8 e9 04 00 00       	call   c001ae2b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a942:	83 c4 0c             	add    esp,0xc
c001a945:	6a 00                	push   0x0
c001a947:	68 d8 eb 00 c0       	push   0xc000ebd8
c001a94c:	6a 08                	push   0x8
c001a94e:	e8 d8 04 00 00       	call   c001ae2b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a953:	83 c4 0c             	add    esp,0xc
c001a956:	6a 00                	push   0x0
c001a958:	68 78 ea 00 c0       	push   0xc000ea78
c001a95d:	6a 0d                	push   0xd
c001a95f:	e8 c7 04 00 00       	call   c001ae2b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a964:	83 c4 0c             	add    esp,0xc
c001a967:	6a 00                	push   0x0
c001a969:	68 dc ea 00 c0       	push   0xc000eadc
c001a96e:	6a 0e                	push   0xe
c001a970:	e8 b6 04 00 00       	call   c001ae2b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a975:	83 c4 0c             	add    esp,0xc
c001a978:	6a 00                	push   0x0
c001a97a:	68 50 eb 00 c0       	push   0xc000eb50
c001a97f:	6a 00                	push   0x0
c001a981:	e8 a5 04 00 00       	call   c001ae2b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a986:	83 c4 0c             	add    esp,0xc
c001a989:	6a 00                	push   0x0
c001a98b:	68 50 eb 00 c0       	push   0xc000eb50
c001a990:	6a 01                	push   0x1
c001a992:	e8 94 04 00 00       	call   c001ae2b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a997:	83 c4 0c             	add    esp,0xc
c001a99a:	6a 00                	push   0x0
c001a99c:	68 50 eb 00 c0       	push   0xc000eb50
c001a9a1:	6a 03                	push   0x3
c001a9a3:	e8 83 04 00 00       	call   c001ae2b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a9a8:	83 c4 0c             	add    esp,0xc
c001a9ab:	6a 00                	push   0x0
c001a9ad:	68 50 eb 00 c0       	push   0xc000eb50
c001a9b2:	6a 04                	push   0x4
c001a9b4:	e8 72 04 00 00       	call   c001ae2b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a9b9:	83 c4 0c             	add    esp,0xc
c001a9bc:	6a 00                	push   0x0
c001a9be:	68 50 eb 00 c0       	push   0xc000eb50
c001a9c3:	6a 05                	push   0x5
c001a9c5:	e8 61 04 00 00       	call   c001ae2b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a9ca:	83 c4 0c             	add    esp,0xc
c001a9cd:	6a 00                	push   0x0
c001a9cf:	68 50 eb 00 c0       	push   0xc000eb50
c001a9d4:	6a 00                	push   0x0
c001a9d6:	e8 50 04 00 00       	call   c001ae2b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a9db:	83 c4 0c             	add    esp,0xc
c001a9de:	6a 00                	push   0x0
c001a9e0:	68 50 eb 00 c0       	push   0xc000eb50
c001a9e5:	6a 01                	push   0x1
c001a9e7:	e8 3f 04 00 00       	call   c001ae2b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a9ec:	83 c4 0c             	add    esp,0xc
c001a9ef:	6a 00                	push   0x0
c001a9f1:	68 50 eb 00 c0       	push   0xc000eb50
c001a9f6:	6a 09                	push   0x9
c001a9f8:	e8 2e 04 00 00       	call   c001ae2b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a9fd:	83 c4 0c             	add    esp,0xc
c001aa00:	6a 00                	push   0x0
c001aa02:	68 50 eb 00 c0       	push   0xc000eb50
c001aa07:	6a 0a                	push   0xa
c001aa09:	e8 1d 04 00 00       	call   c001ae2b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aa0e:	83 c4 0c             	add    esp,0xc
c001aa11:	6a 00                	push   0x0
c001aa13:	68 50 eb 00 c0       	push   0xc000eb50
c001aa18:	6a 0b                	push   0xb
c001aa1a:	e8 0c 04 00 00       	call   c001ae2b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aa1f:	83 c4 10             	add    esp,0x10
c001aa22:	50                   	push   eax
c001aa23:	6a 00                	push   0x0
c001aa25:	68 50 eb 00 c0       	push   0xc000eb50
c001aa2a:	53                   	push   ebx
c001aa2b:	43                   	inc    ebx
c001aa2c:	e8 fa 03 00 00       	call   c001ae2b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aa31:	83 c4 10             	add    esp,0x10
c001aa34:	83 fb 1e             	cmp    ebx,0x1e
c001aa37:	75 e9                	jne    c001aa22 <HalInitialise()+0x169>
c001aa39:	50                   	push   eax
c001aa3a:	6a 00                	push   0x0
c001aa3c:	68 fb 22 01 c0       	push   0xc00122fb
c001aa41:	6a 60                	push   0x60
c001aa43:	e8 e3 03 00 00       	call   c001ae2b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001aa48:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c001aa4d:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001aa57:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001aa5e:	e8 2c 51 ff ff       	call   c000fb8f <malloc>
c001aa63:	89 04 24             	mov    DWORD PTR [esp],eax
c001aa66:	89 c3                	mov    ebx,eax
c001aa68:	e8 09 0e 00 00       	call   c001b876 <RTC::RTC()>
c001aa6d:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001aa77:	5a                   	pop    edx
c001aa78:	59                   	pop    ecx
c001aa79:	53                   	push   ebx
c001aa7a:	ff 35 c8 d0 02 c0    	push   DWORD PTR ds:0xc002d0c8
c001aa80:	e8 cf ef fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001aa85:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa87:	6a 00                	push   0x0
c001aa89:	6a 00                	push   0x0
c001aa8b:	6a 00                	push   0x0
c001aa8d:	53                   	push   ebx
c001aa8e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aa91:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c001aa96:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
c001aa9c:	83 c4 28             	add    esp,0x28
c001aa9f:	5b                   	pop    ebx
c001aaa0:	c3                   	ret    

c001aaa1 <HalMakeBeep(int)>:
c001aaa1:	53                   	push   ebx
c001aaa2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001aaa6:	85 db                	test   ebx,ebx
c001aaa8:	75 07                	jne    c001aab1 <HalMakeBeep(int)+0x10>
c001aaaa:	e4 61                	in     al,0x61
c001aaac:	83 e0 fc             	and    eax,0xfffffffc
c001aaaf:	eb 26                	jmp    c001aad7 <HalMakeBeep(int)+0x36>
c001aab1:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001aab6:	99                   	cdq    
c001aab7:	f7 fb                	idiv   ebx
c001aab9:	89 c1                	mov    ecx,eax
c001aabb:	b0 b6                	mov    al,0xb6
c001aabd:	e6 43                	out    0x43,al
c001aabf:	88 c8                	mov    al,cl
c001aac1:	e6 42                	out    0x42,al
c001aac3:	89 c8                	mov    eax,ecx
c001aac5:	c1 e8 08             	shr    eax,0x8
c001aac8:	e6 42                	out    0x42,al
c001aaca:	e4 61                	in     al,0x61
c001aacc:	89 c2                	mov    edx,eax
c001aace:	83 ca 03             	or     edx,0x3
c001aad1:	38 d0                	cmp    al,dl
c001aad3:	74 04                	je     c001aad9 <HalMakeBeep(int)+0x38>
c001aad5:	88 d0                	mov    al,dl
c001aad7:	e6 61                	out    0x61,al
c001aad9:	5b                   	pop    ebx
c001aada:	c3                   	ret    

c001aadb <HalGetRand()>:
c001aadb:	31 c0                	xor    eax,eax
c001aadd:	c3                   	ret    

c001aade <HalEndOfInterrupt(int)>:
c001aade:	f6 05 4c fb 02 c0 01 	test   BYTE PTR ds:0xc002fb4c,0x1
c001aae5:	74 1d                	je     c001ab04 <HalEndOfInterrupt(int)+0x26>
c001aae7:	83 ec 18             	sub    esp,0x18
c001aaea:	6a 1b                	push   0x1b
c001aaec:	e8 ec f4 ff ff       	call   c0019fdd <x86rdmsr(unsigned int)>
c001aaf1:	25 00 f0 ff ff       	and    eax,0xfffff000
c001aaf6:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001ab00:	83 c4 1c             	add    esp,0x1c
c001ab03:	c3                   	ret    
c001ab04:	e9 83 07 00 00       	jmp    c001b28c <picEOI(int)>
c001ab09:	90                   	nop

c001ab0a <CPU::CPU()>:
c001ab0a:	83 ec 0c             	sub    esp,0xc
c001ab0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab11:	83 ec 08             	sub    esp,0x8
c001ab14:	68 aa 59 02 c0       	push   0xc00259aa
c001ab19:	50                   	push   eax
c001ab1a:	e8 97 f0 fe ff       	call   c0009bb6 <Device::Device(char const*)>
c001ab1f:	83 c4 10             	add    esp,0x10
c001ab22:	ba a8 5c 02 c0       	mov    edx,0xc0025ca8
c001ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab2b:	89 10                	mov    DWORD PTR [eax],edx
c001ab2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab31:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001ab3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab3f:	05 64 01 00 00       	add    eax,0x164
c001ab44:	83 ec 0c             	sub    esp,0xc
c001ab47:	50                   	push   eax
c001ab48:	e8 df 40 ff ff       	call   c000ec2c <GDT::GDT()>
c001ab4d:	83 c4 10             	add    esp,0x10
c001ab50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab54:	05 68 09 00 00       	add    eax,0x968
c001ab59:	83 ec 0c             	sub    esp,0xc
c001ab5c:	50                   	push   eax
c001ab5d:	e8 1e 43 ff ff       	call   c000ee80 <IDT::IDT()>
c001ab62:	83 c4 10             	add    esp,0x10
c001ab65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab69:	05 68 11 00 00       	add    eax,0x1168
c001ab6e:	83 ec 0c             	sub    esp,0xc
c001ab71:	50                   	push   eax
c001ab72:	e8 d5 82 ff ff       	call   c0012e4c <TSS::TSS()>
c001ab77:	83 c4 10             	add    esp,0x10
c001ab7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab7e:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001ab88:	90                   	nop
c001ab89:	83 c4 0c             	add    esp,0xc
c001ab8c:	c3                   	ret    
c001ab8d:	90                   	nop

c001ab8e <CPU::setupSMEP()>:
c001ab8e:	0f 20 e0             	mov    eax,cr4
c001ab91:	0d 00 00 10 00       	or     eax,0x100000
c001ab96:	0f 22 e0             	mov    cr4,eax
c001ab99:	c3                   	ret    

c001ab9a <CPU::setupUMIP()>:
c001ab9a:	0f 20 e0             	mov    eax,cr4
c001ab9d:	80 cc 08             	or     ah,0x8
c001aba0:	0f 22 e0             	mov    cr4,eax
c001aba3:	c3                   	ret    

c001aba4 <CPU::setupTSC()>:
c001aba4:	0f 20 e0             	mov    eax,cr4
c001aba7:	83 c8 04             	or     eax,0x4
c001abaa:	0f 22 e0             	mov    cr4,eax
c001abad:	c3                   	ret    

c001abae <CPU::setupLargePages()>:
c001abae:	0f 20 e0             	mov    eax,cr4
c001abb1:	83 c8 10             	or     eax,0x10
c001abb4:	0f 22 e0             	mov    cr4,eax
c001abb7:	c3                   	ret    

c001abb8 <CPU::setupPAT()>:
c001abb8:	f6 05 4c fb 02 c0 08 	test   BYTE PTR ds:0xc002fb4c,0x8
c001abbf:	74 28                	je     c001abe9 <CPU::setupPAT()+0x31>
c001abc1:	53                   	push   ebx
c001abc2:	83 ec 14             	sub    esp,0x14
c001abc5:	68 77 02 00 00       	push   0x277
c001abca:	e8 0e f4 ff ff       	call   c0019fdd <x86rdmsr(unsigned int)>
c001abcf:	83 c4 0c             	add    esp,0xc
c001abd2:	83 e2 f8             	and    edx,0xfffffff8
c001abd5:	83 ca 01             	or     edx,0x1
c001abd8:	52                   	push   edx
c001abd9:	50                   	push   eax
c001abda:	68 77 02 00 00       	push   0x277
c001abdf:	e8 37 f4 ff ff       	call   c001a01b <x86wrmsr(unsigned int, unsigned long long)>
c001abe4:	83 c4 18             	add    esp,0x18
c001abe7:	5b                   	pop    ebx
c001abe8:	c3                   	ret    
c001abe9:	c3                   	ret    

c001abea <CPU::setupMTRR()>:
c001abea:	c3                   	ret    
c001abeb:	90                   	nop

c001abec <CPU::setupGlobalPages()>:
c001abec:	0f 20 e0             	mov    eax,cr4
c001abef:	0c 80                	or     al,0x80
c001abf1:	0f 22 e0             	mov    cr4,eax
c001abf4:	c3                   	ret    
c001abf5:	90                   	nop

c001abf6 <CPU::allowUsermodeDataAccess()>:
c001abf6:	f6 05 4f fb 02 c0 40 	test   BYTE PTR ds:0xc002fb4f,0x40
c001abfd:	74 03                	je     c001ac02 <CPU::allowUsermodeDataAccess()+0xc>
c001abff:	0f 01 cb             	stac   
c001ac02:	c3                   	ret    
c001ac03:	90                   	nop

c001ac04 <CPU::prohibitUsermodeDataAccess()>:
c001ac04:	f6 05 4f fb 02 c0 40 	test   BYTE PTR ds:0xc002fb4f,0x40
c001ac0b:	74 03                	je     c001ac10 <CPU::prohibitUsermodeDataAccess()+0xc>
c001ac0d:	0f 01 ca             	clac   
c001ac10:	c3                   	ret    
c001ac11:	90                   	nop

c001ac12 <CPU::setupSMAP()>:
c001ac12:	0f 20 e0             	mov    eax,cr4
c001ac15:	0d 00 00 20 00       	or     eax,0x200000
c001ac1a:	0f 22 e0             	mov    cr4,eax
c001ac1d:	eb e5                	jmp    c001ac04 <CPU::prohibitUsermodeDataAccess()>
c001ac1f:	90                   	nop

c001ac20 <CPU::setupFeatures()>:
c001ac20:	53                   	push   ebx
c001ac21:	83 ec 08             	sub    esp,0x8
c001ac24:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ac28:	f6 05 4f fb 02 c0 20 	test   BYTE PTR ds:0xc002fb4f,0x20
c001ac2f:	74 18                	je     c001ac49 <CPU::setupFeatures()+0x29>
c001ac31:	83 ec 0c             	sub    esp,0xc
c001ac34:	68 17 5c 02 c0       	push   0xc0025c17
c001ac39:	e8 3e c3 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ac3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac41:	e8 54 ff ff ff       	call   c001ab9a <CPU::setupUMIP()>
c001ac46:	83 c4 10             	add    esp,0x10
c001ac49:	f6 05 4e fb 02 c0 08 	test   BYTE PTR ds:0xc002fb4e,0x8
c001ac50:	74 18                	je     c001ac6a <CPU::setupFeatures()+0x4a>
c001ac52:	83 ec 0c             	sub    esp,0xc
c001ac55:	68 21 5c 02 c0       	push   0xc0025c21
c001ac5a:	e8 1d c3 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ac5f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac62:	e8 3d ff ff ff       	call   c001aba4 <CPU::setupTSC()>
c001ac67:	83 c4 10             	add    esp,0x10
c001ac6a:	f6 05 4e fb 02 c0 20 	test   BYTE PTR ds:0xc002fb4e,0x20
c001ac71:	74 18                	je     c001ac8b <CPU::setupFeatures()+0x6b>
c001ac73:	83 ec 0c             	sub    esp,0xc
c001ac76:	68 2a 5c 02 c0       	push   0xc0025c2a
c001ac7b:	e8 fc c2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ac80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac83:	e8 26 ff ff ff       	call   c001abae <CPU::setupLargePages()>
c001ac88:	83 c4 10             	add    esp,0x10
c001ac8b:	f6 05 4e fb 02 c0 40 	test   BYTE PTR ds:0xc002fb4e,0x40
c001ac92:	74 18                	je     c001acac <CPU::setupFeatures()+0x8c>
c001ac94:	83 ec 0c             	sub    esp,0xc
c001ac97:	68 33 5c 02 c0       	push   0xc0025c33
c001ac9c:	e8 db c2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001aca1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aca4:	e8 43 ff ff ff       	call   c001abec <CPU::setupGlobalPages()>
c001aca9:	83 c4 10             	add    esp,0x10
c001acac:	f6 05 4e fb 02 c0 80 	test   BYTE PTR ds:0xc002fb4e,0x80
c001acb3:	74 18                	je     c001accd <CPU::setupFeatures()+0xad>
c001acb5:	83 ec 0c             	sub    esp,0xc
c001acb8:	68 45 5c 02 c0       	push   0xc0025c45
c001acbd:	e8 ba c2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001acc2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001acc5:	e8 ee fe ff ff       	call   c001abb8 <CPU::setupPAT()>
c001acca:	83 c4 10             	add    esp,0x10
c001accd:	f6 05 50 fb 02 c0 04 	test   BYTE PTR ds:0xc002fb50,0x4
c001acd4:	74 11                	je     c001ace7 <CPU::setupFeatures()+0xc7>
c001acd6:	c7 44 24 10 4e 5c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025c4e
c001acde:	83 c4 08             	add    esp,0x8
c001ace1:	5b                   	pop    ebx
c001ace2:	e9 95 c2 fe ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c001ace7:	83 c4 08             	add    esp,0x8
c001acea:	5b                   	pop    ebx
c001aceb:	c3                   	ret    

c001acec <CPU::open(int, int, void*)>:
c001acec:	55                   	push   ebp
c001aced:	57                   	push   edi
c001acee:	56                   	push   esi
c001acef:	53                   	push   ebx
c001acf0:	83 ec 18             	sub    esp,0x18
c001acf3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001acf7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001acfb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001acff:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001ad05:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c001ad0b:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001ad11:	50                   	push   eax
c001ad12:	e8 77 3f ff ff       	call   c000ec8e <GDT::setup()>
c001ad17:	83 c4 0c             	add    esp,0xc
c001ad1a:	6a 00                	push   0x0
c001ad1c:	68 ef be ad de       	push   0xdeadbeef
c001ad21:	55                   	push   ebp
c001ad22:	e8 69 81 ff ff       	call   c0012e90 <TSS::setup(unsigned long, unsigned long)>
c001ad27:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ad2a:	e8 41 81 ff ff       	call   c0012e70 <TSS::flush()>
c001ad2f:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001ad35:	89 04 24             	mov    DWORD PTR [esp],eax
c001ad38:	e8 b9 41 ff ff       	call   c000eef6 <IDT::setup()>
c001ad3d:	b8 00 04 00 00       	mov    eax,0x400
c001ad42:	0f 23 f8             	mov    dr7,eax
c001ad45:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001ad4f:	e8 86 54 ff ff       	call   c00101da <Phys::allocatePage()>
c001ad54:	83 c4 10             	add    esp,0x10
c001ad57:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001ad5d:	85 f6                	test   esi,esi
c001ad5f:	89 38                	mov    DWORD PTR [eax],edi
c001ad61:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001ad67:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001ad6a:	74 10                	je     c001ad7c <CPU::open(int, int, void*)+0x90>
c001ad6c:	50                   	push   eax
c001ad6d:	50                   	push   eax
c001ad6e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ad74:	56                   	push   esi
c001ad75:	e8 c2 8a ff ff       	call   c001383c <VAS::setCPUSpecific(unsigned long)>
c001ad7a:	eb 0d                	jmp    c001ad89 <CPU::open(int, int, void*)+0x9d>
c001ad7c:	83 ec 0c             	sub    esp,0xc
c001ad7f:	68 58 5c 02 c0       	push   0xc0025c58
c001ad84:	e8 5d 52 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001ad89:	83 c4 10             	add    esp,0x10
c001ad8c:	83 ec 0c             	sub    esp,0xc
c001ad8f:	68 66 5c 02 c0       	push   0xc0025c66
c001ad94:	e8 90 25 ff ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001ad99:	e8 1b fb ff ff       	call   c001a8b9 <HalInitialise()>
c001ad9e:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
c001ada5:	e8 32 25 ff ff       	call   c000d2dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001adaa:	0f b6 c0             	movzx  eax,al
c001adad:	83 f8 01             	cmp    eax,0x1
c001adb0:	19 c0                	sbb    eax,eax
c001adb2:	83 e0 46             	and    eax,0x46
c001adb5:	83 c0 1e             	add    eax,0x1e
c001adb8:	89 04 24             	mov    DWORD PTR [esp],eax
c001adbb:	e8 2d 03 ff ff       	call   c000b0ed <setupTimer(int)>
c001adc0:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001adc6:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001adcd:	e8 0a 25 ff ff       	call   c000d2dc <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001add2:	83 c4 10             	add    esp,0x10
c001add5:	84 c0                	test   al,al
c001add7:	74 0c                	je     c001ade5 <CPU::open(int, int, void*)+0xf9>
c001add9:	83 ec 0c             	sub    esp,0xc
c001addc:	53                   	push   ebx
c001addd:	e8 3e fe ff ff       	call   c001ac20 <CPU::setupFeatures()>
c001ade2:	83 c4 10             	add    esp,0x10
c001ade5:	83 c4 0c             	add    esp,0xc
c001ade8:	31 c0                	xor    eax,eax
c001adea:	5b                   	pop    ebx
c001adeb:	5e                   	pop    esi
c001adec:	5f                   	pop    edi
c001aded:	5d                   	pop    ebp
c001adee:	c3                   	ret    

c001adef <convertLegacyIRQNumber(int)>:
c001adef:	83 ec 0c             	sub    esp,0xc
c001adf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adf6:	f6 05 4c fb 02 c0 01 	test   BYTE PTR ds:0xc002fb4c,0x1
c001adfd:	74 0c                	je     c001ae0b <convertLegacyIRQNumber(int)+0x1c>
c001adff:	83 f8 0f             	cmp    eax,0xf
c001ae02:	7f 0b                	jg     c001ae0f <convertLegacyIRQNumber(int)+0x20>
c001ae04:	0f b6 80 c8 67 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd9838]
c001ae0b:	83 c4 0c             	add    esp,0xc
c001ae0e:	c3                   	ret    
c001ae0f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ae13:	83 ec 0c             	sub    esp,0xc
c001ae16:	68 cc 5c 02 c0       	push   0xc0025ccc
c001ae1b:	e8 c6 51 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001ae20:	83 c4 10             	add    esp,0x10
c001ae23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae27:	83 c4 0c             	add    esp,0xc
c001ae2a:	c3                   	ret    

c001ae2b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c001ae2b:	56                   	push   esi
c001ae2c:	31 c0                	xor    eax,eax
c001ae2e:	53                   	push   ebx
c001ae2f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ae33:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ae37:	89 ca                	mov    edx,ecx
c001ae39:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ae3d:	c1 e2 04             	shl    edx,0x4
c001ae40:	83 bc 82 e0 e0 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd1f20],0x0
c001ae48:	74 17                	je     c001ae61 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001ae4a:	83 c0 01             	add    eax,0x1
c001ae4d:	83 f8 04             	cmp    eax,0x4
c001ae50:	75 ee                	jne    c001ae40 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001ae52:	c7 44 24 0c 2d 5d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0025d2d
c001ae5a:	5b                   	pop    ebx
c001ae5b:	5e                   	pop    esi
c001ae5c:	e9 85 51 ff ff       	jmp    c000ffe6 <KePanic(char const*)>
c001ae61:	8d 04 88             	lea    eax,[eax+ecx*4]
c001ae64:	89 1c 85 e0 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f20],ebx
c001ae6b:	89 34 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],esi
c001ae72:	5b                   	pop    ebx
c001ae73:	5e                   	pop    esi
c001ae74:	c3                   	ret    

c001ae75 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001ae75:	57                   	push   edi
c001ae76:	f6 05 4c fb 02 c0 01 	test   BYTE PTR ds:0xc002fb4c,0x1
c001ae7d:	56                   	push   esi
c001ae7e:	53                   	push   ebx
c001ae7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ae83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae87:	74 54                	je     c001aedd <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x68>
c001ae89:	89 c7                	mov    edi,eax
c001ae8b:	84 c0                	test   al,al
c001ae8d:	74 1d                	je     c001aeac <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001ae8f:	83 fe 0f             	cmp    esi,0xf
c001ae92:	0f 8f d5 00 00 00    	jg     c001af6d <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf8>
c001ae98:	0f b6 b6 c8 67 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd9838]
c001ae9f:	0f b7 bc 36 20 ce 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd31e0]
c001aea7:	d1 ef                	shr    edi,1
c001aea9:	83 e7 01             	and    edi,0x1
c001aeac:	83 ec 08             	sub    esp,0x8
c001aeaf:	a1 c0 fa 02 c0       	mov    eax,ds:0xc002fac0
c001aeb4:	31 db                	xor    ebx,ebx
c001aeb6:	50                   	push   eax
c001aeb7:	68 3a 5d 02 c0       	push   0xc0025d3a
c001aebc:	e8 bb c0 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001aec1:	83 c4 10             	add    esp,0x10
c001aec4:	a1 c0 fa 02 c0       	mov    eax,ds:0xc002fac0
c001aec9:	85 c0                	test   eax,eax
c001aecb:	7f 55                	jg     c001af22 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c001aecd:	83 ec 0c             	sub    esp,0xc
c001aed0:	68 51 5d 02 c0       	push   0xc0025d51
c001aed5:	e8 0c 51 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001aeda:	83 c4 10             	add    esp,0x10
c001aedd:	8d 7e 20             	lea    edi,[esi+0x20]
c001aee0:	89 f8                	mov    eax,edi
c001aee2:	31 d2                	xor    edx,edx
c001aee4:	c1 e0 04             	shl    eax,0x4
c001aee7:	8b 8c 90 e0 e0 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd1f20]
c001aeee:	85 c9                	test   ecx,ecx
c001aef0:	0f 84 8e 00 00 00    	je     c001af84 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10f>
c001aef6:	83 c2 01             	add    edx,0x1
c001aef9:	83 fa 04             	cmp    edx,0x4
c001aefc:	75 e9                	jne    c001aee7 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001aefe:	83 ec 0c             	sub    esp,0xc
c001af01:	68 08 5d 02 c0       	push   0xc0025d08
c001af06:	e8 db 50 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001af0b:	83 c4 10             	add    esp,0x10
c001af0e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001af13:	5b                   	pop    ebx
c001af14:	5e                   	pop    esi
c001af15:	5f                   	pop    edi
c001af16:	c3                   	ret    
c001af17:	83 c3 01             	add    ebx,0x1
c001af1a:	39 1d c0 fa 02 c0    	cmp    DWORD PTR ds:0xc002fac0,ebx
c001af20:	7e ab                	jle    c001aecd <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x58>
c001af22:	83 ec 08             	sub    esp,0x8
c001af25:	8b 04 9d e0 fa 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0520]
c001af2c:	56                   	push   esi
c001af2d:	50                   	push   eax
c001af2e:	e8 11 dd ff ff       	call   c0018c44 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001af33:	83 c4 10             	add    esp,0x10
c001af36:	84 c0                	test   al,al
c001af38:	74 dd                	je     c001af17 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa2>
c001af3a:	83 ec 04             	sub    esp,0x4
c001af3d:	89 f8                	mov    eax,edi
c001af3f:	8b 1c 9d e0 fa 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd0520]
c001af46:	0f b6 f8             	movzx  edi,al
c001af49:	57                   	push   edi
c001af4a:	8d 7e 20             	lea    edi,[esi+0x20]
c001af4d:	6a 00                	push   0x0
c001af4f:	89 f8                	mov    eax,edi
c001af51:	0f b6 c0             	movzx  eax,al
c001af54:	50                   	push   eax
c001af55:	89 f0                	mov    eax,esi
c001af57:	6a 00                	push   0x0
c001af59:	0f b6 c0             	movzx  eax,al
c001af5c:	6a 00                	push   0x0
c001af5e:	50                   	push   eax
c001af5f:	53                   	push   ebx
c001af60:	e8 4b de ff ff       	call   c0018db0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001af65:	83 c4 20             	add    esp,0x20
c001af68:	e9 73 ff ff ff       	jmp    c001aee0 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6b>
c001af6d:	83 ec 0c             	sub    esp,0xc
c001af70:	31 ff                	xor    edi,edi
c001af72:	68 cc 5c 02 c0       	push   0xc0025ccc
c001af77:	e8 6a 50 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001af7c:	83 c4 10             	add    esp,0x10
c001af7f:	e9 28 ff ff ff       	jmp    c001aeac <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001af84:	8d 04 ba             	lea    eax,[edx+edi*4]
c001af87:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001af8b:	89 14 85 e0 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f20],edx
c001af92:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001af96:	5b                   	pop    ebx
c001af97:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001af9e:	89 f0                	mov    eax,esi
c001afa0:	5e                   	pop    esi
c001afa1:	5f                   	pop    edi
c001afa2:	c3                   	ret    

c001afa3 <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001afa3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001afa7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001afab:	c1 e0 04             	shl    eax,0x4
c001afae:	8d 50 10             	lea    edx,[eax+0x10]
c001afb1:	39 88 e0 e0 02 c0    	cmp    DWORD PTR [eax-0x3ffd1f20],ecx
c001afb7:	74 08                	je     c001afc1 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001afb9:	83 c0 04             	add    eax,0x4
c001afbc:	39 d0                	cmp    eax,edx
c001afbe:	75 f1                	jne    c001afb1 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001afc0:	c3                   	ret    
c001afc1:	c7 80 e0 e0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd1f20],0x0
c001afcb:	c7 80 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2f20],0x0
c001afd5:	eb e2                	jmp    c001afb9 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001afd7 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001afd7:	53                   	push   ebx
c001afd8:	83 ec 08             	sub    esp,0x8
c001afdb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001afdf:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001afe4:	74 09                	je     c001afef <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001afe6:	f6 05 4c fb 02 c0 01 	test   BYTE PTR ds:0xc002fb4c,0x1
c001afed:	75 37                	jne    c001b026 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4f>
c001afef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aff3:	83 c0 20             	add    eax,0x20
c001aff6:	c1 e0 04             	shl    eax,0x4
c001aff9:	8d 50 10             	lea    edx,[eax+0x10]
c001affc:	39 98 e0 e0 02 c0    	cmp    DWORD PTR [eax-0x3ffd1f20],ebx
c001b002:	74 0c                	je     c001b010 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x39>
c001b004:	83 c0 04             	add    eax,0x4
c001b007:	39 d0                	cmp    eax,edx
c001b009:	75 f1                	jne    c001affc <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x25>
c001b00b:	83 c4 08             	add    esp,0x8
c001b00e:	5b                   	pop    ebx
c001b00f:	c3                   	ret    
c001b010:	c7 80 e0 e0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd1f20],0x0
c001b01a:	c7 80 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2f20],0x0
c001b024:	eb de                	jmp    c001b004 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2d>
c001b026:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c001b02b:	7f 11                	jg     c001b03e <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x67>
c001b02d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b031:	0f b6 80 c8 67 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd9838]
c001b038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b03c:	eb b1                	jmp    c001afef <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001b03e:	83 ec 0c             	sub    esp,0xc
c001b041:	68 5e 5d 02 c0       	push   0xc0025d5e
c001b046:	e8 9b 4f ff ff       	call   c000ffe6 <KePanic(char const*)>
c001b04b:	83 c4 10             	add    esp,0x10
c001b04e:	eb 9f                	jmp    c001afef <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>

c001b050 <picIoWait()>:
c001b050:	eb 00                	jmp    c001b052 <picIoWait()+0x2>
c001b052:	eb 00                	jmp    c001b054 <picIoWait()+0x4>
c001b054:	90                   	nop
c001b055:	c3                   	ret    
c001b056:	66 90                	xchg   ax,ax

c001b058 <picDisable()>:
c001b058:	83 ec 10             	sub    esp,0x10
c001b05b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001b062:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001b067:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b06b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b070:	ee                   	out    dx,al
c001b071:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001b078:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001b07d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001b081:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001b086:	ee                   	out    dx,al
c001b087:	90                   	nop
c001b088:	83 c4 10             	add    esp,0x10
c001b08b:	c3                   	ret    

c001b08c <picGetIRQReg(int)>:
c001b08c:	83 ec 10             	sub    esp,0x10
c001b08f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b093:	0f b6 c0             	movzx  eax,al
c001b096:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001b09d:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001b0a1:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b0a5:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b0aa:	ee                   	out    dx,al
c001b0ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b0af:	0f b6 c0             	movzx  eax,al
c001b0b2:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001b0b9:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b0bd:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b0c1:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b0c6:	ee                   	out    dx,al
c001b0c7:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001b0ce:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001b0d3:	89 c2                	mov    edx,eax
c001b0d5:	ec                   	in     al,dx
c001b0d6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b0da:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b0de:	0f b6 c0             	movzx  eax,al
c001b0e1:	c1 e0 08             	shl    eax,0x8
c001b0e4:	89 c1                	mov    ecx,eax
c001b0e6:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001b0ed:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001b0f2:	89 c2                	mov    edx,eax
c001b0f4:	ec                   	in     al,dx
c001b0f5:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001b0f9:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001b0fd:	0f b6 c0             	movzx  eax,al
c001b100:	09 c8                	or     eax,ecx
c001b102:	83 c4 10             	add    esp,0x10
c001b105:	c3                   	ret    
c001b106:	66 90                	xchg   ax,ax

c001b108 <picOpen()>:
c001b108:	83 ec 50             	sub    esp,0x50
c001b10b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001b112:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001b117:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b11b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b11f:	ee                   	out    dx,al
c001b120:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001b127:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b12c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001b130:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b134:	ee                   	out    dx,al
c001b135:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001b13d:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001b145:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001b14c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b150:	89 c2                	mov    edx,eax
c001b152:	ec                   	in     al,dx
c001b153:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001b157:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001b15b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001b15f:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001b166:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b16a:	89 c2                	mov    edx,eax
c001b16c:	ec                   	in     al,dx
c001b16d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b171:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001b175:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001b179:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001b180:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001b185:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001b189:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b18d:	ee                   	out    dx,al
c001b18e:	e8 bd fe ff ff       	call   c001b050 <picIoWait()>
c001b193:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001b19a:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001b19f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001b1a3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b1a7:	ee                   	out    dx,al
c001b1a8:	e8 a3 fe ff ff       	call   c001b050 <picIoWait()>
c001b1ad:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b1b1:	0f b6 c0             	movzx  eax,al
c001b1b4:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001b1bb:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001b1bf:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001b1c3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b1c7:	ee                   	out    dx,al
c001b1c8:	e8 83 fe ff ff       	call   c001b050 <picIoWait()>
c001b1cd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001b1d1:	0f b6 c0             	movzx  eax,al
c001b1d4:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001b1db:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b1df:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b1e3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b1e7:	ee                   	out    dx,al
c001b1e8:	e8 63 fe ff ff       	call   c001b050 <picIoWait()>
c001b1ed:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001b1f4:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001b1f9:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001b1fd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b201:	ee                   	out    dx,al
c001b202:	e8 49 fe ff ff       	call   c001b050 <picIoWait()>
c001b207:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001b20e:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001b213:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001b217:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b21b:	ee                   	out    dx,al
c001b21c:	e8 2f fe ff ff       	call   c001b050 <picIoWait()>
c001b221:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001b228:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001b22d:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001b231:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b235:	ee                   	out    dx,al
c001b236:	e8 15 fe ff ff       	call   c001b050 <picIoWait()>
c001b23b:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001b242:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001b247:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001b24b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b24f:	ee                   	out    dx,al
c001b250:	e8 fb fd ff ff       	call   c001b050 <picIoWait()>
c001b255:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001b25a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001b261:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001b265:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001b269:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001b26d:	ee                   	out    dx,al
c001b26e:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001b273:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001b27a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b27e:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001b282:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001b286:	ee                   	out    dx,al
c001b287:	90                   	nop
c001b288:	83 c4 50             	add    esp,0x50
c001b28b:	c3                   	ret    

c001b28c <picEOI(int)>:
c001b28c:	83 ec 10             	sub    esp,0x10
c001b28f:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001b294:	75 1e                	jne    c001b2b4 <picEOI(int)+0x28>
c001b296:	6a 0b                	push   0xb
c001b298:	e8 ef fd ff ff       	call   c001b08c <picGetIRQReg(int)>
c001b29d:	83 c4 04             	add    esp,0x4
c001b2a0:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001b2a5:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001b2aa:	25 80 00 00 00       	and    eax,0x80
c001b2af:	74 73                	je     c001b324 <picEOI(int)+0x98>
c001b2b1:	8d 76 00             	lea    esi,[esi+0x0]
c001b2b4:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001b2b9:	75 31                	jne    c001b2ec <picEOI(int)+0x60>
c001b2bb:	6a 0b                	push   0xb
c001b2bd:	e8 ca fd ff ff       	call   c001b08c <picGetIRQReg(int)>
c001b2c2:	83 c4 04             	add    esp,0x4
c001b2c5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001b2ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2ce:	98                   	cwde   
c001b2cf:	85 c0                	test   eax,eax
c001b2d1:	78 19                	js     c001b2ec <picEOI(int)+0x60>
c001b2d3:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001b2da:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001b2df:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b2e3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b2e8:	ee                   	out    dx,al
c001b2e9:	eb 3d                	jmp    c001b328 <picEOI(int)+0x9c>
c001b2eb:	90                   	nop
c001b2ec:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001b2f1:	7e 19                	jle    c001b30c <picEOI(int)+0x80>
c001b2f3:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001b2fa:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001b2ff:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b303:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b308:	ee                   	out    dx,al
c001b309:	8d 76 00             	lea    esi,[esi+0x0]
c001b30c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001b313:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001b318:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b31c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b321:	ee                   	out    dx,al
c001b322:	eb 04                	jmp    c001b328 <picEOI(int)+0x9c>
c001b324:	90                   	nop
c001b325:	8d 76 00             	lea    esi,[esi+0x0]
c001b328:	83 c4 10             	add    esp,0x10
c001b32b:	c3                   	ret    

c001b32c <RTC::open(int, int, void*)>:
c001b32c:	31 c0                	xor    eax,eax
c001b32e:	c3                   	ret    
c001b32f:	90                   	nop

c001b330 <RTC::close(int, int, void*)>:
c001b330:	31 c0                	xor    eax,eax
c001b332:	c3                   	ret    
c001b333:	90                   	nop

c001b334 <RTC::timeInSecondsUTC()>:
c001b334:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b338:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b33e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b344:	c3                   	ret    
c001b345:	90                   	nop

c001b346 <RTC::timeInDatetimeUTC()>:
c001b346:	53                   	push   ebx
c001b347:	83 ec 14             	sub    esp,0x14
c001b34a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b34e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b352:	8b 10                	mov    edx,DWORD PTR [eax]
c001b354:	50                   	push   eax
c001b355:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001b358:	83 c4 0c             	add    esp,0xc
c001b35b:	52                   	push   edx
c001b35c:	50                   	push   eax
c001b35d:	53                   	push   ebx
c001b35e:	e8 e7 e2 fe ff       	call   c000964a <KeSecondsToDatetime(unsigned long long)>
c001b363:	89 d8                	mov    eax,ebx
c001b365:	83 c4 14             	add    esp,0x14
c001b368:	5b                   	pop    ebx
c001b369:	c2 04 00             	ret    0x4

c001b36c <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001b36c:	56                   	push   esi
c001b36d:	53                   	push   ebx
c001b36e:	83 ec 14             	sub    esp,0x14
c001b371:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b375:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b377:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001b37a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b37e:	52                   	push   edx
c001b37f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b383:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b387:	50                   	push   eax
c001b388:	e8 bd e2 fe ff       	call   c000964a <KeSecondsToDatetime(unsigned long long)>
c001b38d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b391:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b395:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b399:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001b39d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001b3a1:	89 f0                	mov    eax,esi
c001b3a3:	83 c4 20             	add    esp,0x20
c001b3a6:	5b                   	pop    ebx
c001b3a7:	5e                   	pop    esi
c001b3a8:	ff e0                	jmp    eax

c001b3aa <RTC::~RTC()>:
c001b3aa:	83 ec 0c             	sub    esp,0xc
c001b3ad:	ba 88 5d 02 c0       	mov    edx,0xc0025d88
c001b3b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3b6:	89 10                	mov    DWORD PTR [eax],edx
c001b3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3bc:	83 ec 0c             	sub    esp,0xc
c001b3bf:	50                   	push   eax
c001b3c0:	e8 27 dd fe ff       	call   c00090ec <Clock::~Clock()>
c001b3c5:	83 c4 10             	add    esp,0x10
c001b3c8:	90                   	nop
c001b3c9:	83 c4 0c             	add    esp,0xc
c001b3cc:	c3                   	ret    
c001b3cd:	90                   	nop

c001b3ce <RTC::~RTC()>:
c001b3ce:	83 ec 0c             	sub    esp,0xc
c001b3d1:	83 ec 0c             	sub    esp,0xc
c001b3d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b3d8:	e8 cd ff ff ff       	call   c001b3aa <RTC::~RTC()>
c001b3dd:	83 c4 10             	add    esp,0x10
c001b3e0:	83 ec 08             	sub    esp,0x8
c001b3e3:	68 60 01 00 00       	push   0x160
c001b3e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b3ec:	e8 f8 1f ff ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c001b3f1:	83 c4 10             	add    esp,0x10
c001b3f4:	83 c4 0c             	add    esp,0xc
c001b3f7:	c3                   	ret    

c001b3f8 <RTC::get_update_in_progress_flag()>:
c001b3f8:	83 ec 18             	sub    esp,0x18
c001b3fb:	6a 0a                	push   0xa
c001b3fd:	e8 bf da ff ff       	call   c0018ec1 <x86ReadCMOS(unsigned char)>
c001b402:	83 c4 1c             	add    esp,0x1c
c001b405:	0f b6 c0             	movzx  eax,al
c001b408:	c1 e8 07             	shr    eax,0x7
c001b40b:	c3                   	ret    

c001b40c <RTC::completeRTCRefresh()>:
c001b40c:	55                   	push   ebp
c001b40d:	57                   	push   edi
c001b40e:	56                   	push   esi
c001b40f:	53                   	push   ebx
c001b410:	83 ec 3c             	sub    esp,0x3c
c001b413:	8b 1d 50 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb50
c001b419:	83 ec 0c             	sub    esp,0xc
c001b41c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b420:	e8 d3 ff ff ff       	call   c001b3f8 <RTC::get_update_in_progress_flag()>
c001b425:	83 c4 10             	add    esp,0x10
c001b428:	84 c0                	test   al,al
c001b42a:	74 0e                	je     c001b43a <RTC::completeRTCRefresh()+0x2e>
c001b42c:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001b432:	3b 05 50 cb 02 c0    	cmp    eax,DWORD PTR ds:0xc002cb50
c001b438:	73 df                	jae    c001b419 <RTC::completeRTCRefresh()+0xd>
c001b43a:	83 ec 0c             	sub    esp,0xc
c001b43d:	6a 00                	push   0x0
c001b43f:	e8 7d da ff ff       	call   c0018ec1 <x86ReadCMOS(unsigned char)>
c001b444:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001b44b:	89 c5                	mov    ebp,eax
c001b44d:	e8 6f da ff ff       	call   c0018ec1 <x86ReadCMOS(unsigned char)>
c001b452:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001b459:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001b45d:	e8 5f da ff ff       	call   c0018ec1 <x86ReadCMOS(unsigned char)>
c001b462:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001b469:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001b46d:	e8 4f da ff ff       	call   c0018ec1 <x86ReadCMOS(unsigned char)>
c001b472:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001b479:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b47d:	e8 3f da ff ff       	call   c0018ec1 <x86ReadCMOS(unsigned char)>
c001b482:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001b489:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b48d:	e8 2f da ff ff       	call   c0018ec1 <x86ReadCMOS(unsigned char)>
c001b492:	0f b6 c0             	movzx  eax,al
c001b495:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001b499:	83 c4 10             	add    esp,0x10
c001b49c:	8b 1d 50 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb50
c001b4a2:	83 ec 0c             	sub    esp,0xc
c001b4a5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b4a9:	e8 4a ff ff ff       	call   c001b3f8 <RTC::get_update_in_progress_flag()>
c001b4ae:	83 c4 10             	add    esp,0x10
c001b4b1:	84 c0                	test   al,al
c001b4b3:	74 0e                	je     c001b4c3 <RTC::completeRTCRefresh()+0xb7>
c001b4b5:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001b4bb:	3b 05 50 cb 02 c0    	cmp    eax,DWORD PTR ds:0xc002cb50
c001b4c1:	73 df                	jae    c001b4a2 <RTC::completeRTCRefresh()+0x96>
c001b4c3:	83 ec 0c             	sub    esp,0xc
c001b4c6:	6a 00                	push   0x0
c001b4c8:	e8 f4 d9 ff ff       	call   c0018ec1 <x86ReadCMOS(unsigned char)>
c001b4cd:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001b4d4:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b4d8:	e8 e4 d9 ff ff       	call   c0018ec1 <x86ReadCMOS(unsigned char)>
c001b4dd:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001b4e4:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b4e8:	e8 d4 d9 ff ff       	call   c0018ec1 <x86ReadCMOS(unsigned char)>
c001b4ed:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001b4f4:	88 c3                	mov    bl,al
c001b4f6:	e8 c6 d9 ff ff       	call   c0018ec1 <x86ReadCMOS(unsigned char)>
c001b4fb:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001b502:	89 c6                	mov    esi,eax
c001b504:	e8 b8 d9 ff ff       	call   c0018ec1 <x86ReadCMOS(unsigned char)>
c001b509:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001b510:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b514:	e8 a8 d9 ff ff       	call   c0018ec1 <x86ReadCMOS(unsigned char)>
c001b519:	89 e9                	mov    ecx,ebp
c001b51b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b51f:	0f b6 f8             	movzx  edi,al
c001b522:	83 c4 10             	add    esp,0x10
c001b525:	0f b6 eb             	movzx  ebp,bl
c001b528:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001b52c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b531:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b536:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b53a:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b53e:	0f 94 c0             	sete   al
c001b541:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001b545:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c001b549:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001b54e:	0f 94 c2             	sete   dl
c001b551:	21 d0                	and    eax,edx
c001b553:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001b557:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001b55b:	0f 94 c2             	sete   dl
c001b55e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b562:	21 c2                	and    edx,eax
c001b564:	89 f0                	mov    eax,esi
c001b566:	0f b6 c0             	movzx  eax,al
c001b569:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b56d:	89 f0                	mov    eax,esi
c001b56f:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001b573:	0f 94 c0             	sete   al
c001b576:	21 d0                	and    eax,edx
c001b578:	31 d2                	xor    edx,edx
c001b57a:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001b57e:	0f 94 c2             	sete   dl
c001b581:	85 c2                	test   edx,eax
c001b583:	75 27                	jne    c001b5ac <RTC::completeRTCRefresh()+0x1a0>
c001b585:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b589:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001b58d:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001b591:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001b595:	89 f0                	mov    eax,esi
c001b597:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c001b59b:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001b59f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b5a3:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b5a7:	e9 f0 fe ff ff       	jmp    c001b49c <RTC::completeRTCRefresh()+0x90>
c001b5ac:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c001b5b0:	75 d3                	jne    c001b585 <RTC::completeRTCRefresh()+0x179>
c001b5b2:	83 ec 0c             	sub    esp,0xc
c001b5b5:	6a 0b                	push   0xb
c001b5b7:	e8 05 d9 ff ff       	call   c0018ec1 <x86ReadCMOS(unsigned char)>
c001b5bc:	83 c4 10             	add    esp,0x10
c001b5bf:	a8 04                	test   al,0x4
c001b5c1:	75 7a                	jne    c001b63d <RTC::completeRTCRefresh()+0x231>
c001b5c3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b5c7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b5cb:	83 e1 0f             	and    ecx,0xf
c001b5ce:	c1 ea 04             	shr    edx,0x4
c001b5d1:	83 e6 0f             	and    esi,0xf
c001b5d4:	6b d2 0a             	imul   edx,edx,0xa
c001b5d7:	c1 ef 04             	shr    edi,0x4
c001b5da:	01 d1                	add    ecx,edx
c001b5dc:	6b ff 0a             	imul   edi,edi,0xa
c001b5df:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001b5e3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b5e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b5eb:	c1 ea 04             	shr    edx,0x4
c001b5ee:	83 e1 0f             	and    ecx,0xf
c001b5f1:	6b d2 0a             	imul   edx,edx,0xa
c001b5f4:	01 d1                	add    ecx,edx
c001b5f6:	89 ea                	mov    edx,ebp
c001b5f8:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001b5fc:	c1 ea 04             	shr    edx,0x4
c001b5ff:	89 d9                	mov    ecx,ebx
c001b601:	83 e2 07             	and    edx,0x7
c001b604:	83 e1 0f             	and    ecx,0xf
c001b607:	6b d2 0a             	imul   edx,edx,0xa
c001b60a:	83 e3 80             	and    ebx,0xffffff80
c001b60d:	01 d1                	add    ecx,edx
c001b60f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b613:	09 cb                	or     ebx,ecx
c001b615:	c1 ea 04             	shr    edx,0x4
c001b618:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b61c:	6b d2 0a             	imul   edx,edx,0xa
c001b61f:	83 e1 0f             	and    ecx,0xf
c001b622:	01 d6                	add    esi,edx
c001b624:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b628:	c1 ea 04             	shr    edx,0x4
c001b62b:	6b d2 0a             	imul   edx,edx,0xa
c001b62e:	01 d1                	add    ecx,edx
c001b630:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b634:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001b638:	83 e2 0f             	and    edx,0xf
c001b63b:	01 d7                	add    edi,edx
c001b63d:	a8 02                	test   al,0x2
c001b63f:	75 15                	jne    c001b656 <RTC::completeRTCRefresh()+0x24a>
c001b641:	f6 c3 80             	test   bl,0x80
c001b644:	74 10                	je     c001b656 <RTC::completeRTCRefresh()+0x24a>
c001b646:	83 e3 7f             	and    ebx,0x7f
c001b649:	b9 18 00 00 00       	mov    ecx,0x18
c001b64e:	8d 43 0c             	lea    eax,[ebx+0xc]
c001b651:	99                   	cdq    
c001b652:	f7 f9                	idiv   ecx
c001b654:	88 d3                	mov    bl,dl
c001b656:	8d af 6c 07 00 00    	lea    ebp,[edi+0x76c]
c001b65c:	81 fd b1 07 00 00    	cmp    ebp,0x7b1
c001b662:	77 06                	ja     c001b66a <RTC::completeRTCRefresh()+0x25e>
c001b664:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001b66a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b66f:	31 c9                	xor    ecx,ecx
c001b671:	c1 e0 10             	shl    eax,0x10
c001b674:	89 cf                	mov    edi,ecx
c001b676:	c1 e5 10             	shl    ebp,0x10
c001b679:	31 d2                	xor    edx,edx
c001b67b:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001b681:	09 c7                	or     edi,eax
c001b683:	89 f0                	mov    eax,esi
c001b685:	89 f9                	mov    ecx,edi
c001b687:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b68b:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001b68f:	88 c2                	mov    dl,al
c001b691:	88 d9                	mov    cl,bl
c001b693:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c001b697:	0f b7 c2             	movzx  eax,dx
c001b69a:	09 e8                	or     eax,ebp
c001b69c:	89 c2                	mov    edx,eax
c001b69e:	50                   	push   eax
c001b69f:	50                   	push   eax
c001b6a0:	51                   	push   ecx
c001b6a1:	52                   	push   edx
c001b6a2:	e8 95 db fe ff       	call   c000923c <KeDatetimeToSeconds(datetime_t)>
c001b6a7:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001b6ab:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001b6b1:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001b6b7:	83 c4 4c             	add    esp,0x4c
c001b6ba:	5b                   	pop    ebx
c001b6bb:	5e                   	pop    esi
c001b6bc:	5f                   	pop    edi
c001b6bd:	5d                   	pop    ebp
c001b6be:	c3                   	ret    
c001b6bf:	90                   	nop

c001b6c0 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001b6c0:	55                   	push   ebp
c001b6c1:	57                   	push   edi
c001b6c2:	56                   	push   esi
c001b6c3:	53                   	push   ebx
c001b6c4:	83 ec 34             	sub    esp,0x34
c001b6c7:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001b6cb:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001b6cf:	6a 00                	push   0x0
c001b6d1:	89 fb                	mov    ebx,edi
c001b6d3:	6a 00                	push   0x0
c001b6d5:	e8 3b d8 ff ff       	call   c0018f15 <x86WriteCMOS(unsigned char, unsigned char)>
c001b6da:	5d                   	pop    ebp
c001b6db:	58                   	pop    eax
c001b6dc:	6a 00                	push   0x0
c001b6de:	6a 02                	push   0x2
c001b6e0:	e8 30 d8 ff ff       	call   c0018f15 <x86WriteCMOS(unsigned char, unsigned char)>
c001b6e5:	31 d2                	xor    edx,edx
c001b6e7:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001b6ee:	89 f9                	mov    ecx,edi
c001b6f0:	89 f8                	mov    eax,edi
c001b6f2:	c1 e9 10             	shr    ecx,0x10
c001b6f5:	0f b6 c4             	movzx  eax,ah
c001b6f8:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001b6fc:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b700:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b704:	b9 64 00 00 00       	mov    ecx,0x64
c001b709:	89 f0                	mov    eax,esi
c001b70b:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b70f:	89 f0                	mov    eax,esi
c001b711:	0f b6 c4             	movzx  eax,ah
c001b714:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b718:	89 f0                	mov    eax,esi
c001b71a:	c1 e8 10             	shr    eax,0x10
c001b71d:	f7 f1                	div    ecx
c001b71f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b723:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b727:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b72b:	e8 91 d7 ff ff       	call   c0018ec1 <x86ReadCMOS(unsigned char)>
c001b730:	83 c4 10             	add    esp,0x10
c001b733:	89 c5                	mov    ebp,eax
c001b735:	a8 04                	test   al,0x4
c001b737:	75 6e                	jne    c001b7a7 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001b739:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b73d:	31 d2                	xor    edx,edx
c001b73f:	0f b6 c1             	movzx  eax,cl
c001b742:	b9 0a 00 00 00       	mov    ecx,0xa
c001b747:	f7 f1                	div    ecx
c001b749:	c1 e0 04             	shl    eax,0x4
c001b74c:	09 d0                	or     eax,edx
c001b74e:	31 d2                	xor    edx,edx
c001b750:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b754:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001b759:	f7 f1                	div    ecx
c001b75b:	c1 e0 04             	shl    eax,0x4
c001b75e:	09 d0                	or     eax,edx
c001b760:	31 d2                	xor    edx,edx
c001b762:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b766:	0f b6 c3             	movzx  eax,bl
c001b769:	f7 f1                	div    ecx
c001b76b:	c1 e0 04             	shl    eax,0x4
c001b76e:	09 d0                	or     eax,edx
c001b770:	31 d2                	xor    edx,edx
c001b772:	89 c3                	mov    ebx,eax
c001b774:	89 f0                	mov    eax,esi
c001b776:	0f b6 c0             	movzx  eax,al
c001b779:	f7 f1                	div    ecx
c001b77b:	c1 e0 04             	shl    eax,0x4
c001b77e:	09 d0                	or     eax,edx
c001b780:	31 d2                	xor    edx,edx
c001b782:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b786:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b78b:	f7 f1                	div    ecx
c001b78d:	c1 e0 04             	shl    eax,0x4
c001b790:	09 d0                	or     eax,edx
c001b792:	31 d2                	xor    edx,edx
c001b794:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b798:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b79c:	f7 f1                	div    ecx
c001b79e:	c1 e0 04             	shl    eax,0x4
c001b7a1:	09 d0                	or     eax,edx
c001b7a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b7a7:	83 e5 02             	and    ebp,0x2
c001b7aa:	75 1e                	jne    c001b7ca <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b7ac:	0f b6 c3             	movzx  eax,bl
c001b7af:	83 f8 0b             	cmp    eax,0xb
c001b7b2:	76 10                	jbe    c001b7c4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001b7b4:	8d 53 f4             	lea    edx,[ebx-0xc]
c001b7b7:	88 d3                	mov    bl,dl
c001b7b9:	84 d2                	test   dl,dl
c001b7bb:	75 02                	jne    c001b7bf <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001b7bd:	b3 0c                	mov    bl,0xc
c001b7bf:	83 cb 80             	or     ebx,0xffffff80
c001b7c2:	eb 06                	jmp    c001b7ca <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b7c4:	85 c0                	test   eax,eax
c001b7c6:	75 02                	jne    c001b7ca <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b7c8:	b3 0c                	mov    bl,0xc
c001b7ca:	0f b6 db             	movzx  ebx,bl
c001b7cd:	50                   	push   eax
c001b7ce:	50                   	push   eax
c001b7cf:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001b7d4:	52                   	push   edx
c001b7d5:	6a 00                	push   0x0
c001b7d7:	e8 39 d7 ff ff       	call   c0018f15 <x86WriteCMOS(unsigned char, unsigned char)>
c001b7dc:	5a                   	pop    edx
c001b7dd:	59                   	pop    ecx
c001b7de:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b7e3:	50                   	push   eax
c001b7e4:	6a 02                	push   0x2
c001b7e6:	e8 2a d7 ff ff       	call   c0018f15 <x86WriteCMOS(unsigned char, unsigned char)>
c001b7eb:	5e                   	pop    esi
c001b7ec:	5f                   	pop    edi
c001b7ed:	53                   	push   ebx
c001b7ee:	6a 04                	push   0x4
c001b7f0:	e8 20 d7 ff ff       	call   c0018f15 <x86WriteCMOS(unsigned char, unsigned char)>
c001b7f5:	5d                   	pop    ebp
c001b7f6:	58                   	pop    eax
c001b7f7:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001b7fc:	52                   	push   edx
c001b7fd:	6a 07                	push   0x7
c001b7ff:	e8 11 d7 ff ff       	call   c0018f15 <x86WriteCMOS(unsigned char, unsigned char)>
c001b804:	58                   	pop    eax
c001b805:	5a                   	pop    edx
c001b806:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b80b:	50                   	push   eax
c001b80c:	6a 08                	push   0x8
c001b80e:	e8 02 d7 ff ff       	call   c0018f15 <x86WriteCMOS(unsigned char, unsigned char)>
c001b813:	59                   	pop    ecx
c001b814:	5b                   	pop    ebx
c001b815:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b81a:	55                   	push   ebp
c001b81b:	6a 09                	push   0x9
c001b81d:	e8 f3 d6 ff ff       	call   c0018f15 <x86WriteCMOS(unsigned char, unsigned char)>
c001b822:	5e                   	pop    esi
c001b823:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b827:	e8 e0 fb ff ff       	call   c001b40c <RTC::completeRTCRefresh()>
c001b82c:	83 c4 3c             	add    esp,0x3c
c001b82f:	b0 01                	mov    al,0x1
c001b831:	5b                   	pop    ebx
c001b832:	5e                   	pop    esi
c001b833:	5f                   	pop    edi
c001b834:	5d                   	pop    ebp
c001b835:	c3                   	ret    

c001b836 <rtcIRQHandler(regs*, void*)>:
c001b836:	53                   	push   ebx
c001b837:	83 ec 14             	sub    esp,0x14
c001b83a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b83e:	6a 0c                	push   0xc
c001b840:	e8 7c d6 ff ff       	call   c0018ec1 <x86ReadCMOS(unsigned char)>
c001b845:	83 c4 10             	add    esp,0x10
c001b848:	a8 80                	test   al,0x80
c001b84a:	74 24                	je     c001b870 <rtcIRQHandler(regs*, void*)+0x3a>
c001b84c:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001b853:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001b85a:	66 ff 05 54 fb 02 c0 	inc    WORD PTR ds:0xc002fb54
c001b861:	75 0d                	jne    c001b870 <rtcIRQHandler(regs*, void*)+0x3a>
c001b863:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001b867:	83 c4 08             	add    esp,0x8
c001b86a:	5b                   	pop    ebx
c001b86b:	e9 9c fb ff ff       	jmp    c001b40c <RTC::completeRTCRefresh()>
c001b870:	83 c4 08             	add    esp,0x8
c001b873:	5b                   	pop    ebx
c001b874:	c3                   	ret    
c001b875:	90                   	nop

c001b876 <RTC::RTC()>:
c001b876:	83 ec 1c             	sub    esp,0x1c
c001b879:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b87d:	83 ec 08             	sub    esp,0x8
c001b880:	68 6b 5d 02 c0       	push   0xc0025d6b
c001b885:	50                   	push   eax
c001b886:	e8 2b d8 fe ff       	call   c00090b6 <Clock::Clock(char const*)>
c001b88b:	83 c4 10             	add    esp,0x10
c001b88e:	ba 88 5d 02 c0       	mov    edx,0xc0025d88
c001b893:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b897:	89 10                	mov    DWORD PTR [eax],edx
c001b899:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b89d:	83 ec 0c             	sub    esp,0xc
c001b8a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b8a4:	6a 01                	push   0x1
c001b8a6:	68 36 b8 01 c0       	push   0xc001b836
c001b8ab:	6a 08                	push   0x8
c001b8ad:	50                   	push   eax
c001b8ae:	e8 4d e1 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b8b3:	83 c4 20             	add    esp,0x20
c001b8b6:	89 c2                	mov    edx,eax
c001b8b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8bc:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b8c2:	fa                   	cli    
c001b8c3:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c001b8c8:	83 c0 01             	add    eax,0x1
c001b8cb:	a3 30 fa 02 c0       	mov    ds:0xc002fa30,eax
c001b8d0:	83 ec 0c             	sub    esp,0xc
c001b8d3:	6a 0b                	push   0xb
c001b8d5:	e8 e7 d5 ff ff       	call   c0018ec1 <x86ReadCMOS(unsigned char)>
c001b8da:	83 c4 10             	add    esp,0x10
c001b8dd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b8e1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b8e5:	83 c8 10             	or     eax,0x10
c001b8e8:	0f b6 c0             	movzx  eax,al
c001b8eb:	83 ec 08             	sub    esp,0x8
c001b8ee:	50                   	push   eax
c001b8ef:	6a 0b                	push   0xb
c001b8f1:	e8 1f d6 ff ff       	call   c0018f15 <x86WriteCMOS(unsigned char, unsigned char)>
c001b8f6:	83 c4 10             	add    esp,0x10
c001b8f9:	83 ec 0c             	sub    esp,0xc
c001b8fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b900:	e8 07 fb ff ff       	call   c001b40c <RTC::completeRTCRefresh()>
c001b905:	83 c4 10             	add    esp,0x10
c001b908:	f0 83 2d 30 fa 02 c0 01 	lock sub DWORD PTR ds:0xc002fa30,0x1
c001b910:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c001b915:	85 c0                	test   eax,eax
c001b917:	75 01                	jne    c001b91a <RTC::RTC()+0xa4>
c001b919:	fb                   	sti    
c001b91a:	90                   	nop
c001b91b:	83 c4 1c             	add    esp,0x1c
c001b91e:	c3                   	ret    
c001b91f:	90                   	nop

c001b920 <HalConsoleScroll(int, int)>:
c001b920:	83 ec 10             	sub    esp,0x10
c001b923:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001b92b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001b933:	90                   	nop
c001b934:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001b939:	0f 8f e1 00 00 00    	jg     c001ba20 <HalConsoleScroll(int, int)+0x100>
c001b93f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b947:	90                   	nop
c001b948:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001b950:	0f 8f be 00 00 00    	jg     c001ba14 <HalConsoleScroll(int, int)+0xf4>
c001b956:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b95a:	89 d0                	mov    eax,edx
c001b95c:	c1 e0 02             	shl    eax,0x2
c001b95f:	01 d0                	add    eax,edx
c001b961:	c1 e0 05             	shl    eax,0x5
c001b964:	89 c2                	mov    edx,eax
c001b966:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b96a:	01 d0                	add    eax,edx
c001b96c:	89 c2                	mov    edx,eax
c001b96e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b972:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001b975:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b979:	89 d0                	mov    eax,edx
c001b97b:	c1 e0 02             	shl    eax,0x2
c001b97e:	01 d0                	add    eax,edx
c001b980:	c1 e0 05             	shl    eax,0x5
c001b983:	89 c2                	mov    edx,eax
c001b985:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b989:	01 d0                	add    eax,edx
c001b98b:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001b991:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b995:	01 c2                	add    edx,eax
c001b997:	8a 01                	mov    al,BYTE PTR [ecx]
c001b999:	88 02                	mov    BYTE PTR [edx],al
c001b99b:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001b9a0:	75 66                	jne    c001ba08 <HalConsoleScroll(int, int)+0xe8>
c001b9a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b9a6:	83 e0 01             	and    eax,0x1
c001b9a9:	74 39                	je     c001b9e4 <HalConsoleScroll(int, int)+0xc4>
c001b9ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b9af:	83 e0 0f             	and    eax,0xf
c001b9b2:	88 c2                	mov    dl,al
c001b9b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9b8:	c1 e0 04             	shl    eax,0x4
c001b9bb:	09 d0                	or     eax,edx
c001b9bd:	88 c1                	mov    cl,al
c001b9bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b9c3:	89 d0                	mov    eax,edx
c001b9c5:	c1 e0 02             	shl    eax,0x2
c001b9c8:	01 d0                	add    eax,edx
c001b9ca:	c1 e0 05             	shl    eax,0x5
c001b9cd:	89 c2                	mov    edx,eax
c001b9cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b9d3:	01 d0                	add    eax,edx
c001b9d5:	89 c2                	mov    edx,eax
c001b9d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9db:	01 d0                	add    eax,edx
c001b9dd:	88 ca                	mov    dl,cl
c001b9df:	88 10                	mov    BYTE PTR [eax],dl
c001b9e1:	eb 25                	jmp    c001ba08 <HalConsoleScroll(int, int)+0xe8>
c001b9e3:	90                   	nop
c001b9e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b9e8:	89 d0                	mov    eax,edx
c001b9ea:	c1 e0 02             	shl    eax,0x2
c001b9ed:	01 d0                	add    eax,edx
c001b9ef:	c1 e0 05             	shl    eax,0x5
c001b9f2:	89 c2                	mov    edx,eax
c001b9f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b9f8:	01 d0                	add    eax,edx
c001b9fa:	89 c2                	mov    edx,eax
c001b9fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba00:	01 d0                	add    eax,edx
c001ba02:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001ba05:	8d 76 00             	lea    esi,[esi+0x0]
c001ba08:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001ba0d:	e9 36 ff ff ff       	jmp    c001b948 <HalConsoleScroll(int, int)+0x28>
c001ba12:	66 90                	xchg   ax,ax
c001ba14:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001ba19:	e9 16 ff ff ff       	jmp    c001b934 <HalConsoleScroll(int, int)+0x14>
c001ba1e:	66 90                	xchg   ax,ax
c001ba20:	90                   	nop
c001ba21:	83 c4 10             	add    esp,0x10
c001ba24:	c3                   	ret    
c001ba25:	8d 76 00             	lea    esi,[esi+0x0]

c001ba28 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001ba28:	83 ec 14             	sub    esp,0x14
c001ba2b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba2f:	88 04 24             	mov    BYTE PTR [esp],al
c001ba32:	8a 04 24             	mov    al,BYTE PTR [esp]
c001ba35:	0f b6 c0             	movzx  eax,al
c001ba38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ba3c:	89 d1                	mov    ecx,edx
c001ba3e:	83 e1 0f             	and    ecx,0xf
c001ba41:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ba45:	c1 e2 04             	shl    edx,0x4
c001ba48:	0f b6 d2             	movzx  edx,dl
c001ba4b:	09 ca                	or     edx,ecx
c001ba4d:	c1 e2 08             	shl    edx,0x8
c001ba50:	09 d0                	or     eax,edx
c001ba52:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001ba57:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001ba5f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ba63:	89 d0                	mov    eax,edx
c001ba65:	c1 e0 02             	shl    eax,0x2
c001ba68:	01 d0                	add    eax,edx
c001ba6a:	c1 e0 04             	shl    eax,0x4
c001ba6d:	89 c2                	mov    edx,eax
c001ba6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ba73:	01 d0                	add    eax,edx
c001ba75:	01 c0                	add    eax,eax
c001ba77:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001ba7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ba7f:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001ba84:	66 89 02             	mov    WORD PTR [edx],ax
c001ba87:	90                   	nop
c001ba88:	83 c4 14             	add    esp,0x14
c001ba8b:	c3                   	ret    

c001ba8c <HalConsoleCursorUpdate(int, int)>:
c001ba8c:	83 ec 20             	sub    esp,0x20
c001ba8f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ba93:	89 c2                	mov    edx,eax
c001ba95:	c1 e2 02             	shl    edx,0x2
c001ba98:	01 d0                	add    eax,edx
c001ba9a:	c1 e0 04             	shl    eax,0x4
c001ba9d:	89 c2                	mov    edx,eax
c001ba9f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001baa3:	01 d0                	add    eax,edx
c001baa5:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001baaa:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001bab1:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001bab6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001baba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001babe:	ee                   	out    dx,al
c001babf:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001bac4:	0f b6 c0             	movzx  eax,al
c001bac7:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001bace:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001bad2:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001bad6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bada:	ee                   	out    dx,al
c001badb:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001bae2:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001bae7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001baeb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001baef:	ee                   	out    dx,al
c001baf0:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001baf5:	c1 e8 08             	shr    eax,0x8
c001baf8:	0f b6 c0             	movzx  eax,al
c001bafb:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001bb02:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001bb06:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001bb0a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bb0e:	ee                   	out    dx,al
c001bb0f:	90                   	nop
c001bb10:	83 c4 20             	add    esp,0x20
c001bb13:	c3                   	ret    

c001bb14 <FAT::getName()>:
c001bb14:	b8 bc 5d 02 c0       	mov    eax,0xc0025dbc
c001bb19:	c3                   	ret    
c001bb1a:	66 90                	xchg   ax,ax

c001bb1c <FAT::tell(void*, unsigned long long*)>:
c001bb1c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001bb21:	75 09                	jne    c001bb2c <FAT::tell(void*, unsigned long long*)+0x10>
c001bb23:	b8 04 00 00 00       	mov    eax,0x4
c001bb28:	c3                   	ret    
c001bb29:	8d 76 00             	lea    esi,[esi+0x0]
c001bb2c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bb31:	75 09                	jne    c001bb3c <FAT::tell(void*, unsigned long long*)+0x20>
c001bb33:	b8 04 00 00 00       	mov    eax,0x4
c001bb38:	c3                   	ret    
c001bb39:	8d 76 00             	lea    esi,[esi+0x0]
c001bb3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb40:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bb43:	ba 00 00 00 00       	mov    edx,0x0
c001bb48:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bb4c:	89 01                	mov    DWORD PTR [ecx],eax
c001bb4e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001bb51:	b8 00 00 00 00       	mov    eax,0x0
c001bb56:	c3                   	ret    
c001bb57:	90                   	nop

c001bb58 <FAT::stat(void*, unsigned long long*)>:
c001bb58:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001bb5d:	75 09                	jne    c001bb68 <FAT::stat(void*, unsigned long long*)+0x10>
c001bb5f:	b8 04 00 00 00       	mov    eax,0x4
c001bb64:	c3                   	ret    
c001bb65:	8d 76 00             	lea    esi,[esi+0x0]
c001bb68:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bb6d:	75 09                	jne    c001bb78 <FAT::stat(void*, unsigned long long*)+0x20>
c001bb6f:	b8 04 00 00 00       	mov    eax,0x4
c001bb74:	c3                   	ret    
c001bb75:	8d 76 00             	lea    esi,[esi+0x0]
c001bb78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb7c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001bb7f:	ba 00 00 00 00       	mov    edx,0x0
c001bb84:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bb88:	89 01                	mov    DWORD PTR [ecx],eax
c001bb8a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001bb8d:	b8 00 00 00 00       	mov    eax,0x0
c001bb92:	c3                   	ret    
c001bb93:	90                   	nop

c001bb94 <FAT::~FAT()>:
c001bb94:	83 ec 0c             	sub    esp,0xc
c001bb97:	ba 08 5e 02 c0       	mov    edx,0xc0025e08
c001bb9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bba0:	89 10                	mov    DWORD PTR [eax],edx
c001bba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bba6:	83 ec 0c             	sub    esp,0xc
c001bba9:	50                   	push   eax
c001bbaa:	e8 3d c2 fe ff       	call   c0007dec <Filesystem::~Filesystem()>
c001bbaf:	83 c4 10             	add    esp,0x10
c001bbb2:	90                   	nop
c001bbb3:	83 c4 0c             	add    esp,0xc
c001bbb6:	c3                   	ret    
c001bbb7:	90                   	nop

c001bbb8 <FAT::~FAT()>:
c001bbb8:	83 ec 0c             	sub    esp,0xc
c001bbbb:	83 ec 0c             	sub    esp,0xc
c001bbbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bbc2:	e8 cd ff ff ff       	call   c001bb94 <FAT::~FAT()>
c001bbc7:	83 c4 10             	add    esp,0x10
c001bbca:	83 ec 08             	sub    esp,0x8
c001bbcd:	6a 08                	push   0x8
c001bbcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bbd3:	e8 11 18 ff ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c001bbd8:	83 c4 10             	add    esp,0x10
c001bbdb:	83 c4 0c             	add    esp,0xc
c001bbde:	c3                   	ret    
c001bbdf:	90                   	nop

c001bbe0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001bbe0:	83 ec 1c             	sub    esp,0x1c
c001bbe3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001bbea:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001bbef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bbf3:	8b 04 85 80 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0480]
c001bbfa:	83 f8 ff             	cmp    eax,0xffffffff
c001bbfd:	75 35                	jne    c001bc34 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001bbff:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001bc03:	88 c2                	mov    dl,al
c001bc05:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c001bc0a:	01 d0                	add    eax,edx
c001bc0c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001bc10:	8b 15 60 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb60
c001bc16:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bc1a:	89 14 85 80 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0480],edx
c001bc21:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c001bc26:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bc2a:	89 14 85 00 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0400],edx
c001bc31:	eb 19                	jmp    c001bc4c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001bc33:	90                   	nop
c001bc34:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001bc38:	88 c2                	mov    dl,al
c001bc3a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bc3e:	8b 04 85 80 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0480]
c001bc45:	01 d0                	add    eax,edx
c001bc47:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001bc4b:	90                   	nop
c001bc4c:	83 ec 04             	sub    esp,0x4
c001bc4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bc53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bc57:	8d 44 24 15          	lea    eax,[esp+0x15]
c001bc5b:	50                   	push   eax
c001bc5c:	e8 57 95 fe ff       	call   c00051b8 <f_getlabel>
c001bc61:	83 c4 10             	add    esp,0x10
c001bc64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc68:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bc6d:	75 09                	jne    c001bc78 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001bc6f:	b8 00 00 00 00       	mov    eax,0x0
c001bc74:	eb 0a                	jmp    c001bc80 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001bc76:	66 90                	xchg   ax,ax
c001bc78:	b8 01 00 00 00       	mov    eax,0x1
c001bc7d:	8d 76 00             	lea    esi,[esi+0x0]
c001bc80:	83 c4 1c             	add    esp,0x1c
c001bc83:	c3                   	ret    

c001bc84 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001bc84:	57                   	push   edi
c001bc85:	83 ec 58             	sub    esp,0x58
c001bc88:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001bc90:	8d 54 24 10          	lea    edx,[esp+0x10]
c001bc94:	b8 00 00 00 00       	mov    eax,0x0
c001bc99:	b9 0f 00 00 00       	mov    ecx,0xf
c001bc9e:	fc                   	cld    
c001bc9f:	89 d7                	mov    edi,edx
c001bca1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001bca3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001bca7:	8b 04 85 80 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0480]
c001bcae:	83 f8 ff             	cmp    eax,0xffffffff
c001bcb1:	75 35                	jne    c001bce8 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001bcb3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bcb7:	88 c2                	mov    dl,al
c001bcb9:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c001bcbe:	01 d0                	add    eax,edx
c001bcc0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bcc4:	8b 15 60 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb60
c001bcca:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001bcce:	89 14 85 80 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0480],edx
c001bcd5:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c001bcda:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001bcde:	89 14 85 00 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0400],edx
c001bce5:	eb 19                	jmp    c001bd00 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001bce7:	90                   	nop
c001bce8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bcec:	88 c2                	mov    dl,al
c001bcee:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001bcf2:	8b 04 85 80 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0480]
c001bcf9:	01 d0                	add    eax,edx
c001bcfb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bcff:	90                   	nop
c001bd00:	83 ec 08             	sub    esp,0x8
c001bd03:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001bd07:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bd0b:	50                   	push   eax
c001bd0c:	e8 2f 4b fe ff       	call   c0000840 <strcat>
c001bd11:	83 c4 10             	add    esp,0x10
c001bd14:	83 ec 0c             	sub    esp,0xc
c001bd17:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bd1b:	50                   	push   eax
c001bd1c:	e8 e8 95 fe ff       	call   c0005309 <f_setlabel>
c001bd21:	83 c4 10             	add    esp,0x10
c001bd24:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bd28:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001bd2d:	75 09                	jne    c001bd38 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001bd2f:	b8 00 00 00 00       	mov    eax,0x0
c001bd34:	eb 0a                	jmp    c001bd40 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001bd36:	66 90                	xchg   ax,ax
c001bd38:	b8 01 00 00 00       	mov    eax,0x1
c001bd3d:	8d 76 00             	lea    esi,[esi+0x0]
c001bd40:	83 c4 58             	add    esp,0x58
c001bd43:	5f                   	pop    edi
c001bd44:	c3                   	ret    
c001bd45:	90                   	nop
c001bd46:	66 90                	xchg   ax,ax

c001bd48 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001bd48:	83 ec 2c             	sub    esp,0x2c
c001bd4b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001bd53:	83 ec 08             	sub    esp,0x8
c001bd56:	68 e0 5d 02 c0       	push   0xc0025de0
c001bd5b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bd5f:	e8 ec 49 fe ff       	call   c0000750 <strcmp>
c001bd64:	83 c4 10             	add    esp,0x10
c001bd67:	85 c0                	test   eax,eax
c001bd69:	0f 94 c0             	sete   al
c001bd6c:	0f b6 c0             	movzx  eax,al
c001bd6f:	85 c0                	test   eax,eax
c001bd71:	74 0d                	je     c001bd80 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001bd73:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001bd7b:	e9 c0 00 00 00       	jmp    c001be40 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bd80:	83 ec 08             	sub    esp,0x8
c001bd83:	68 d2 5d 02 c0       	push   0xc0025dd2
c001bd88:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bd8c:	e8 bf 49 fe ff       	call   c0000750 <strcmp>
c001bd91:	83 c4 10             	add    esp,0x10
c001bd94:	85 c0                	test   eax,eax
c001bd96:	0f 94 c0             	sete   al
c001bd99:	0f b6 c0             	movzx  eax,al
c001bd9c:	85 c0                	test   eax,eax
c001bd9e:	74 10                	je     c001bdb0 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001bda0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001bda8:	e9 93 00 00 00       	jmp    c001be40 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bdad:	8d 76 00             	lea    esi,[esi+0x0]
c001bdb0:	83 ec 08             	sub    esp,0x8
c001bdb3:	68 d8 5d 02 c0       	push   0xc0025dd8
c001bdb8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bdbc:	e8 8f 49 fe ff       	call   c0000750 <strcmp>
c001bdc1:	83 c4 10             	add    esp,0x10
c001bdc4:	85 c0                	test   eax,eax
c001bdc6:	0f 94 c0             	sete   al
c001bdc9:	0f b6 c0             	movzx  eax,al
c001bdcc:	85 c0                	test   eax,eax
c001bdce:	74 0c                	je     c001bddc <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001bdd0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001bdd8:	eb 66                	jmp    c001be40 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bdda:	66 90                	xchg   ax,ax
c001bddc:	83 ec 08             	sub    esp,0x8
c001bddf:	68 3c 2b 02 c0       	push   0xc0022b3c
c001bde4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bde8:	e8 63 49 fe ff       	call   c0000750 <strcmp>
c001bded:	83 c4 10             	add    esp,0x10
c001bdf0:	85 c0                	test   eax,eax
c001bdf2:	0f 94 c0             	sete   al
c001bdf5:	0f b6 c0             	movzx  eax,al
c001bdf8:	85 c0                	test   eax,eax
c001bdfa:	74 0c                	je     c001be08 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001bdfc:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001be04:	eb 3a                	jmp    c001be40 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001be06:	66 90                	xchg   ax,ax
c001be08:	83 ec 08             	sub    esp,0x8
c001be0b:	68 de 5d 02 c0       	push   0xc0025dde
c001be10:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001be14:	e8 37 49 fe ff       	call   c0000750 <strcmp>
c001be19:	83 c4 10             	add    esp,0x10
c001be1c:	85 c0                	test   eax,eax
c001be1e:	0f 94 c0             	sete   al
c001be21:	0f b6 c0             	movzx  eax,al
c001be24:	85 c0                	test   eax,eax
c001be26:	74 0c                	je     c001be34 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001be28:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001be30:	eb 0e                	jmp    c001be40 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001be32:	66 90                	xchg   ax,ax
c001be34:	b8 08 00 00 00       	mov    eax,0x8
c001be39:	e9 ea 00 00 00       	jmp    c001bf28 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001be3e:	66 90                	xchg   ax,ax
c001be40:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001be47:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001be4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001be50:	8b 04 85 80 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0480]
c001be57:	83 f8 ff             	cmp    eax,0xffffffff
c001be5a:	75 34                	jne    c001be90 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001be5c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001be60:	88 c2                	mov    dl,al
c001be62:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c001be67:	01 d0                	add    eax,edx
c001be69:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001be6d:	8b 15 60 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb60
c001be73:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001be77:	89 14 85 80 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0480],edx
c001be7e:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c001be83:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001be87:	89 14 85 00 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0400],edx
c001be8e:	eb 18                	jmp    c001bea8 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001be90:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001be94:	88 c2                	mov    dl,al
c001be96:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001be9a:	8b 04 85 80 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0480]
c001bea1:	01 d0                	add    eax,edx
c001bea3:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001bea7:	90                   	nop
c001bea8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001beac:	88 04 24             	mov    BYTE PTR [esp],al
c001beaf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001beb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001beb7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bebf:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001bec4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001becc:	83 ec 0c             	sub    esp,0xc
c001becf:	68 00 20 00 00       	push   0x2000
c001bed4:	e8 b6 3c ff ff       	call   c000fb8f <malloc>
c001bed9:	83 c4 10             	add    esp,0x10
c001bedc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bee0:	68 00 20 00 00       	push   0x2000
c001bee5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bee9:	8d 44 24 08          	lea    eax,[esp+0x8]
c001beed:	50                   	push   eax
c001beee:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001bef2:	50                   	push   eax
c001bef3:	e8 0e 97 fe ff       	call   c0005606 <f_mkfs>
c001bef8:	83 c4 10             	add    esp,0x10
c001befb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001beff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001bf04:	75 0a                	jne    c001bf10 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001bf06:	b8 00 00 00 00       	mov    eax,0x0
c001bf0b:	eb 1b                	jmp    c001bf28 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001bf0d:	8d 76 00             	lea    esi,[esi+0x0]
c001bf10:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001bf15:	75 09                	jne    c001bf20 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001bf17:	b8 09 00 00 00       	mov    eax,0x9
c001bf1c:	eb 0a                	jmp    c001bf28 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001bf1e:	66 90                	xchg   ax,ax
c001bf20:	b8 01 00 00 00       	mov    eax,0x1
c001bf25:	8d 76 00             	lea    esi,[esi+0x0]
c001bf28:	83 c4 2c             	add    esp,0x2c
c001bf2b:	c3                   	ret    

c001bf2c <FAT::tryMount(LogicalDisk*, int)>:
c001bf2c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001bf32:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c001bf37:	83 f8 14             	cmp    eax,0x14
c001bf3a:	75 18                	jne    c001bf54 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001bf3c:	83 ec 0c             	sub    esp,0xc
c001bf3f:	68 e4 5d 02 c0       	push   0xc0025de4
c001bf44:	e8 9d 40 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001bf49:	83 c4 10             	add    esp,0x10
c001bf4c:	b0 00                	mov    al,0x0
c001bf4e:	e9 ed 01 00 00       	jmp    c001c140 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bf53:	90                   	nop
c001bf54:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001bf5b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001bf61:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bf67:	3d 00 02 00 00       	cmp    eax,0x200
c001bf6c:	74 0a                	je     c001bf78 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001bf6e:	b0 00                	mov    al,0x0
c001bf70:	e9 cb 01 00 00       	jmp    c001c140 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bf75:	8d 76 00             	lea    esi,[esi+0x0]
c001bf78:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001bf80:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001bf87:	8b 04 85 80 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0480]
c001bf8e:	83 f8 ff             	cmp    eax,0xffffffff
c001bf91:	74 09                	je     c001bf9c <FAT::tryMount(LogicalDisk*, int)+0x70>
c001bf93:	b0 01                	mov    al,0x1
c001bf95:	e9 a6 01 00 00       	jmp    c001c140 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bf9a:	66 90                	xchg   ax,ax
c001bf9c:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001bfa6:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001bfae:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001bfb5:	88 c2                	mov    dl,al
c001bfb7:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c001bfbc:	01 d0                	add    eax,edx
c001bfbe:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001bfc5:	8b 15 60 fb 02 c0    	mov    edx,DWORD PTR ds:0xc002fb60
c001bfcb:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001bfd2:	89 14 85 80 fb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0480],edx
c001bfd9:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c001bfde:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001bfe5:	89 14 85 00 fc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0400],edx
c001bfec:	83 ec 0c             	sub    esp,0xc
c001bfef:	68 34 02 00 00       	push   0x234
c001bff4:	e8 96 3b ff ff       	call   c000fb8f <malloc>
c001bff9:	83 c4 10             	add    esp,0x10
c001bffc:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001c003:	83 ec 04             	sub    esp,0x4
c001c006:	6a 00                	push   0x0
c001c008:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001c00f:	50                   	push   eax
c001c010:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001c017:	e8 c5 7d fe ff       	call   c0003de1 <f_mount>
c001c01c:	83 c4 10             	add    esp,0x10
c001c01f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001c026:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001c02e:	74 1c                	je     c001c04c <FAT::tryMount(LogicalDisk*, int)+0x120>
c001c030:	83 ec 0c             	sub    esp,0xc
c001c033:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001c03a:	e8 70 3b ff ff       	call   c000fbaf <rfree>
c001c03f:	83 c4 10             	add    esp,0x10
c001c042:	b0 00                	mov    al,0x0
c001c044:	e9 f7 00 00 00       	jmp    c001c140 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c049:	8d 76 00             	lea    esi,[esi+0x0]
c001c04c:	83 ec 04             	sub    esp,0x4
c001c04f:	68 00 01 00 00       	push   0x100
c001c054:	6a 00                	push   0x0
c001c056:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001c05d:	50                   	push   eax
c001c05e:	e8 8d 44 fe ff       	call   c00004f0 <memset>
c001c063:	83 c4 10             	add    esp,0x10
c001c066:	83 ec 08             	sub    esp,0x8
c001c069:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001c070:	50                   	push   eax
c001c071:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001c078:	50                   	push   eax
c001c079:	e8 c2 47 fe ff       	call   c0000840 <strcat>
c001c07e:	83 c4 10             	add    esp,0x10
c001c081:	83 ec 08             	sub    esp,0x8
c001c084:	68 f2 5d 02 c0       	push   0xc0025df2
c001c089:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001c090:	50                   	push   eax
c001c091:	e8 aa 47 fe ff       	call   c0000840 <strcat>
c001c096:	83 c4 10             	add    esp,0x10
c001c099:	83 ec 04             	sub    esp,0x4
c001c09c:	6a 01                	push   0x1
c001c09e:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001c0a5:	50                   	push   eax
c001c0a6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c0aa:	50                   	push   eax
c001c0ab:	e8 93 7d fe ff       	call   c0003e43 <f_open>
c001c0b0:	83 c4 10             	add    esp,0x10
c001c0b3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001c0ba:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001c0c1:	85 c0                	test   eax,eax
c001c0c3:	74 0b                	je     c001c0d0 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001c0c5:	78 31                	js     c001c0f8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001c0c7:	83 e8 04             	sub    eax,0x4
c001c0ca:	83 f8 01             	cmp    eax,0x1
c001c0cd:	77 29                	ja     c001c0f8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001c0cf:	90                   	nop
c001c0d0:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001c0d8:	83 ec 0c             	sub    esp,0xc
c001c0db:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c0df:	50                   	push   eax
c001c0e0:	e8 2d 85 fe ff       	call   c0004612 <f_close>
c001c0e5:	83 c4 10             	add    esp,0x10
c001c0e8:	90                   	nop
c001c0e9:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001c0f1:	85 c0                	test   eax,eax
c001c0f3:	74 43                	je     c001c138 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001c0f5:	eb 31                	jmp    c001c128 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001c0f7:	90                   	nop
c001c0f8:	83 ec 0c             	sub    esp,0xc
c001c0fb:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001c102:	e8 a8 3a ff ff       	call   c000fbaf <rfree>
c001c107:	83 c4 10             	add    esp,0x10
c001c10a:	83 ec 04             	sub    esp,0x4
c001c10d:	6a 00                	push   0x0
c001c10f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001c116:	50                   	push   eax
c001c117:	6a 00                	push   0x0
c001c119:	e8 c3 7c fe ff       	call   c0003de1 <f_mount>
c001c11e:	83 c4 10             	add    esp,0x10
c001c121:	b0 00                	mov    al,0x0
c001c123:	eb 1b                	jmp    c001c140 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c125:	8d 76 00             	lea    esi,[esi+0x0]
c001c128:	a1 60 fb 02 c0       	mov    eax,ds:0xc002fb60
c001c12d:	83 c0 01             	add    eax,0x1
c001c130:	a3 60 fb 02 c0       	mov    ds:0xc002fb60,eax
c001c135:	8d 76 00             	lea    esi,[esi+0x0]
c001c138:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001c13f:	90                   	nop
c001c140:	81 c4 4c 03 00 00    	add    esp,0x34c
c001c146:	c3                   	ret    
c001c147:	90                   	nop

c001c148 <FAT::allocateSwapfile(char const*, int)>:
c001c148:	55                   	push   ebp
c001c149:	57                   	push   edi
c001c14a:	56                   	push   esi
c001c14b:	53                   	push   ebx
c001c14c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001c152:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001c15d:	83 ec 0c             	sub    esp,0xc
c001c160:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001c167:	e8 23 3a ff ff       	call   c000fb8f <malloc>
c001c16c:	83 c4 10             	add    esp,0x10
c001c16f:	89 c7                	mov    edi,eax
c001c171:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001c176:	83 ec 04             	sub    esp,0x4
c001c179:	50                   	push   eax
c001c17a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001c181:	57                   	push   edi
c001c182:	e8 03 c0 fe ff       	call   c000818a <File::File(char const*, Process*)>
c001c187:	83 c4 10             	add    esp,0x10
c001c18a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001c191:	83 ec 04             	sub    esp,0x4
c001c194:	8d 44 24 13          	lea    eax,[esp+0x13]
c001c198:	50                   	push   eax
c001c199:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c19d:	50                   	push   eax
c001c19e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c1a5:	e8 00 c3 fe ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c001c1aa:	83 c4 10             	add    esp,0x10
c001c1ad:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001c1b4:	c1 e0 14             	shl    eax,0x14
c001c1b7:	89 c7                	mov    edi,eax
c001c1b9:	89 c5                	mov    ebp,eax
c001c1bb:	c1 fd 1f             	sar    ebp,0x1f
c001c1be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c1c6:	89 f9                	mov    ecx,edi
c001c1c8:	31 c1                	xor    ecx,eax
c001c1ca:	89 cb                	mov    ebx,ecx
c001c1cc:	89 e9                	mov    ecx,ebp
c001c1ce:	31 d1                	xor    ecx,edx
c001c1d0:	89 ce                	mov    esi,ecx
c001c1d2:	89 f0                	mov    eax,esi
c001c1d4:	09 d8                	or     eax,ebx
c001c1d6:	0f 84 9c 00 00 00    	je     c001c278 <FAT::allocateSwapfile(char const*, int)+0x130>
c001c1dc:	83 ec 0c             	sub    esp,0xc
c001c1df:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c1e6:	e8 8b c1 fe ff       	call   c0008376 <File::unlink()>
c001c1eb:	83 c4 10             	add    esp,0x10
c001c1ee:	83 ec 08             	sub    esp,0x8
c001c1f1:	6a 12                	push   0x12
c001c1f3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c1fa:	e8 a9 bf fe ff       	call   c00081a8 <File::open(FileOpenMode)>
c001c1ff:	83 c4 10             	add    esp,0x10
c001c202:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c209:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001c20f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001c216:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001c21d:	c1 e0 14             	shl    eax,0x14
c001c220:	83 ec 04             	sub    esp,0x4
c001c223:	6a 01                	push   0x1
c001c225:	50                   	push   eax
c001c226:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001c22d:	e8 67 92 fe ff       	call   c0005499 <f_expand>
c001c232:	83 c4 10             	add    esp,0x10
c001c235:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c23c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c23e:	83 c0 10             	add    eax,0x10
c001c241:	8b 00                	mov    eax,DWORD PTR [eax]
c001c243:	83 ec 0c             	sub    esp,0xc
c001c246:	8d 54 24 24          	lea    edx,[esp+0x24]
c001c24a:	52                   	push   edx
c001c24b:	8d 54 24 30          	lea    edx,[esp+0x30]
c001c24f:	52                   	push   edx
c001c250:	6a 00                	push   0x0
c001c252:	68 00 04 00 00       	push   0x400
c001c257:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001c25e:	ff d0                	call   eax
c001c260:	83 c4 20             	add    esp,0x20
c001c263:	83 ec 0c             	sub    esp,0xc
c001c266:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c26d:	e8 94 bf fe ff       	call   c0008206 <File::close()>
c001c272:	83 c4 10             	add    esp,0x10
c001c275:	8d 76 00             	lea    esi,[esi+0x0]
c001c278:	83 ec 08             	sub    esp,0x8
c001c27b:	6a 01                	push   0x1
c001c27d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c284:	e8 1f bf fe ff       	call   c00081a8 <File::open(FileOpenMode)>
c001c289:	83 c4 10             	add    esp,0x10
c001c28c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c293:	8b 00                	mov    eax,DWORD PTR [eax]
c001c295:	83 c0 0c             	add    eax,0xc
c001c298:	8b 00                	mov    eax,DWORD PTR [eax]
c001c29a:	83 ec 0c             	sub    esp,0xc
c001c29d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001c2a1:	52                   	push   edx
c001c2a2:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001c2a6:	52                   	push   edx
c001c2a7:	6a 00                	push   0x0
c001c2a9:	6a 04                	push   0x4
c001c2ab:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001c2b2:	ff d0                	call   eax
c001c2b4:	83 c4 20             	add    esp,0x20
c001c2b7:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c2be:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001c2c4:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001c2cb:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001c2d2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001c2d5:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001c2dc:	83 ec 0c             	sub    esp,0xc
c001c2df:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c2e6:	e8 1b bf fe ff       	call   c0008206 <File::close()>
c001c2eb:	83 c4 10             	add    esp,0x10
c001c2ee:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001c2f5:	ba 00 00 00 00       	mov    edx,0x0
c001c2fa:	81 c4 3c 04 00 00    	add    esp,0x43c
c001c300:	5b                   	pop    ebx
c001c301:	5e                   	pop    esi
c001c302:	5f                   	pop    edi
c001c303:	5d                   	pop    ebp
c001c304:	c3                   	ret    
c001c305:	90                   	nop
c001c306:	66 90                	xchg   ax,ax

c001c308 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001c308:	57                   	push   edi
c001c309:	56                   	push   esi
c001c30a:	53                   	push   ebx
c001c30b:	81 ec 50 02 00 00    	sub    esp,0x250
c001c311:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001c319:	74 0d                	je     c001c328 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001c31b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001c323:	75 0f                	jne    c001c334 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001c325:	8d 76 00             	lea    esi,[esi+0x0]
c001c328:	b8 04 00 00 00       	mov    eax,0x4
c001c32d:	e9 3a 01 00 00       	jmp    c001c46c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c332:	66 90                	xchg   ax,ax
c001c334:	83 ec 08             	sub    esp,0x8
c001c337:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001c33e:	50                   	push   eax
c001c33f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001c346:	e8 94 85 fe ff       	call   c00048df <f_readdir>
c001c34b:	83 c4 10             	add    esp,0x10
c001c34e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001c355:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001c35c:	83 ec 0c             	sub    esp,0xc
c001c35f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c366:	83 c0 16             	add    eax,0x16
c001c369:	50                   	push   eax
c001c36a:	e8 01 42 fe ff       	call   c0000570 <strlen>
c001c36f:	83 c4 10             	add    esp,0x10
c001c372:	ba 00 00 00 00       	mov    edx,0x0
c001c377:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c37b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001c37f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001c386:	0f b6 c0             	movzx  eax,al
c001c389:	83 e0 10             	and    eax,0x10
c001c38c:	74 0a                	je     c001c398 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001c38e:	b8 02 00 00 00       	mov    eax,0x2
c001c393:	eb 0b                	jmp    c001c3a0 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001c395:	8d 76 00             	lea    esi,[esi+0x0]
c001c398:	b8 01 00 00 00       	mov    eax,0x1
c001c39d:	8d 76 00             	lea    esi,[esi+0x0]
c001c3a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c3a4:	83 ec 08             	sub    esp,0x8
c001c3a7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001c3ae:	83 c0 16             	add    eax,0x16
c001c3b1:	50                   	push   eax
c001c3b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c3b6:	83 c0 10             	add    eax,0x10
c001c3b9:	50                   	push   eax
c001c3ba:	e8 81 42 fe ff       	call   c0000640 <strcpy>
c001c3bf:	83 c4 10             	add    esp,0x10
c001c3c2:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001c3c9:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001c3d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c3d4:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001c3db:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001c3e2:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001c3e9:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001c3f0:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001c3f7:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001c3fe:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001c405:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001c40c:	89 c6                	mov    esi,eax
c001c40e:	89 d7                	mov    edi,edx
c001c410:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c412:	89 c8                	mov    eax,ecx
c001c414:	89 fa                	mov    edx,edi
c001c416:	89 f3                	mov    ebx,esi
c001c418:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001c41f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001c426:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001c42d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001c434:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001c43a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001c441:	0f be c0             	movsx  eax,al
c001c444:	85 c0                	test   eax,eax
c001c446:	75 08                	jne    c001c450 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001c448:	b8 07 00 00 00       	mov    eax,0x7
c001c44d:	eb 1d                	jmp    c001c46c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c44f:	90                   	nop
c001c450:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001c457:	85 c0                	test   eax,eax
c001c459:	75 09                	jne    c001c464 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001c45b:	b8 00 00 00 00       	mov    eax,0x0
c001c460:	eb 0a                	jmp    c001c46c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c462:	66 90                	xchg   ax,ax
c001c464:	b8 01 00 00 00       	mov    eax,0x1
c001c469:	8d 76 00             	lea    esi,[esi+0x0]
c001c46c:	81 c4 50 02 00 00    	add    esp,0x250
c001c472:	5b                   	pop    ebx
c001c473:	5e                   	pop    esi
c001c474:	5f                   	pop    edi
c001c475:	c3                   	ret    
c001c476:	66 90                	xchg   ax,ax

c001c478 <FAT::read(void*, unsigned long, void*, int*)>:
c001c478:	83 ec 1c             	sub    esp,0x1c
c001c47b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c480:	74 0a                	je     c001c48c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001c482:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001c487:	75 0b                	jne    c001c494 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001c489:	8d 76 00             	lea    esi,[esi+0x0]
c001c48c:	b8 04 00 00 00       	mov    eax,0x4
c001c491:	eb 41                	jmp    c001c4d4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001c493:	90                   	nop
c001c494:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c498:	50                   	push   eax
c001c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c49d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c4a1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c4a5:	e8 5c 7c fe ff       	call   c0004106 <f_read>
c001c4aa:	83 c4 10             	add    esp,0x10
c001c4ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c4b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4b5:	89 c2                	mov    edx,eax
c001c4b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c4bb:	89 10                	mov    DWORD PTR [eax],edx
c001c4bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c4c1:	85 c0                	test   eax,eax
c001c4c3:	75 07                	jne    c001c4cc <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001c4c5:	b8 00 00 00 00       	mov    eax,0x0
c001c4ca:	eb 08                	jmp    c001c4d4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001c4cc:	b8 01 00 00 00       	mov    eax,0x1
c001c4d1:	8d 76 00             	lea    esi,[esi+0x0]
c001c4d4:	83 c4 1c             	add    esp,0x1c
c001c4d7:	c3                   	ret    

c001c4d8 <FAT::write(void*, unsigned long, void*, int*)>:
c001c4d8:	83 ec 1c             	sub    esp,0x1c
c001c4db:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c4e0:	74 0a                	je     c001c4ec <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001c4e2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001c4e7:	75 0b                	jne    c001c4f4 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001c4e9:	8d 76 00             	lea    esi,[esi+0x0]
c001c4ec:	b8 04 00 00 00       	mov    eax,0x4
c001c4f1:	eb 41                	jmp    c001c534 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c4f3:	90                   	nop
c001c4f4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c4f8:	50                   	push   eax
c001c4f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c4fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c501:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c505:	e8 fb 7d fe ff       	call   c0004305 <f_write>
c001c50a:	83 c4 10             	add    esp,0x10
c001c50d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c511:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c515:	89 c2                	mov    edx,eax
c001c517:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c51b:	89 10                	mov    DWORD PTR [eax],edx
c001c51d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c521:	85 c0                	test   eax,eax
c001c523:	75 07                	jne    c001c52c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001c525:	b8 00 00 00 00       	mov    eax,0x0
c001c52a:	eb 08                	jmp    c001c534 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c52c:	b8 01 00 00 00       	mov    eax,0x1
c001c531:	8d 76 00             	lea    esi,[esi+0x0]
c001c534:	83 c4 1c             	add    esp,0x1c
c001c537:	c3                   	ret    

c001c538 <FAT::close(void*)>:
c001c538:	83 ec 1c             	sub    esp,0x1c
c001c53b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c540:	75 0a                	jne    c001c54c <FAT::close(void*)+0x14>
c001c542:	b8 04 00 00 00       	mov    eax,0x4
c001c547:	eb 3f                	jmp    c001c588 <FAT::close(void*)+0x50>
c001c549:	8d 76 00             	lea    esi,[esi+0x0]
c001c54c:	83 ec 0c             	sub    esp,0xc
c001c54f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c553:	e8 ba 80 fe ff       	call   c0004612 <f_close>
c001c558:	83 c4 10             	add    esp,0x10
c001c55b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c55f:	83 ec 0c             	sub    esp,0xc
c001c562:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c566:	e8 34 36 ff ff       	call   c000fb9f <free>
c001c56b:	83 c4 10             	add    esp,0x10
c001c56e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c572:	85 c0                	test   eax,eax
c001c574:	75 0a                	jne    c001c580 <FAT::close(void*)+0x48>
c001c576:	b8 00 00 00 00       	mov    eax,0x0
c001c57b:	eb 0b                	jmp    c001c588 <FAT::close(void*)+0x50>
c001c57d:	8d 76 00             	lea    esi,[esi+0x0]
c001c580:	b8 01 00 00 00       	mov    eax,0x1
c001c585:	8d 76 00             	lea    esi,[esi+0x0]
c001c588:	83 c4 1c             	add    esp,0x1c
c001c58b:	c3                   	ret    

c001c58c <FAT::closeDir(void*)>:
c001c58c:	83 ec 1c             	sub    esp,0x1c
c001c58f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c594:	75 0a                	jne    c001c5a0 <FAT::closeDir(void*)+0x14>
c001c596:	b8 04 00 00 00       	mov    eax,0x4
c001c59b:	eb 3f                	jmp    c001c5dc <FAT::closeDir(void*)+0x50>
c001c59d:	8d 76 00             	lea    esi,[esi+0x0]
c001c5a0:	83 ec 0c             	sub    esp,0xc
c001c5a3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c5a7:	e8 11 83 fe ff       	call   c00048bd <f_closedir>
c001c5ac:	83 c4 10             	add    esp,0x10
c001c5af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c5b3:	83 ec 0c             	sub    esp,0xc
c001c5b6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c5ba:	e8 e0 35 ff ff       	call   c000fb9f <free>
c001c5bf:	83 c4 10             	add    esp,0x10
c001c5c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c5c6:	85 c0                	test   eax,eax
c001c5c8:	75 0a                	jne    c001c5d4 <FAT::closeDir(void*)+0x48>
c001c5ca:	b8 00 00 00 00       	mov    eax,0x0
c001c5cf:	eb 0b                	jmp    c001c5dc <FAT::closeDir(void*)+0x50>
c001c5d1:	8d 76 00             	lea    esi,[esi+0x0]
c001c5d4:	b8 01 00 00 00       	mov    eax,0x1
c001c5d9:	8d 76 00             	lea    esi,[esi+0x0]
c001c5dc:	83 c4 1c             	add    esp,0x1c
c001c5df:	c3                   	ret    

c001c5e0 <FAT::truncate(void*, unsigned long long)>:
c001c5e0:	83 ec 2c             	sub    esp,0x2c
c001c5e3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c5e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c5eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c5ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c5f3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c5f8:	75 0a                	jne    c001c604 <FAT::truncate(void*, unsigned long long)+0x24>
c001c5fa:	b8 04 00 00 00       	mov    eax,0x4
c001c5ff:	eb 47                	jmp    c001c648 <FAT::truncate(void*, unsigned long long)+0x68>
c001c601:	8d 76 00             	lea    esi,[esi+0x0]
c001c604:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c608:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c60b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c60f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001c617:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c61b:	83 ec 08             	sub    esp,0x8
c001c61e:	50                   	push   eax
c001c61f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c623:	e8 19 80 fe ff       	call   c0004641 <f_lseek>
c001c628:	83 c4 10             	add    esp,0x10
c001c62b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c62f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c633:	85 c0                	test   eax,eax
c001c635:	75 09                	jne    c001c640 <FAT::truncate(void*, unsigned long long)+0x60>
c001c637:	b8 00 00 00 00       	mov    eax,0x0
c001c63c:	eb 0a                	jmp    c001c648 <FAT::truncate(void*, unsigned long long)+0x68>
c001c63e:	66 90                	xchg   ax,ax
c001c640:	b8 01 00 00 00       	mov    eax,0x1
c001c645:	8d 76 00             	lea    esi,[esi+0x0]
c001c648:	83 c4 2c             	add    esp,0x2c
c001c64b:	c3                   	ret    

c001c64c <FAT::seek(void*, unsigned long long)>:
c001c64c:	83 ec 2c             	sub    esp,0x2c
c001c64f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c657:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c65b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c65f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c664:	75 0a                	jne    c001c670 <FAT::seek(void*, unsigned long long)+0x24>
c001c666:	b8 04 00 00 00       	mov    eax,0x4
c001c66b:	eb 33                	jmp    c001c6a0 <FAT::seek(void*, unsigned long long)+0x54>
c001c66d:	8d 76 00             	lea    esi,[esi+0x0]
c001c670:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c674:	83 ec 08             	sub    esp,0x8
c001c677:	50                   	push   eax
c001c678:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c67c:	e8 c0 7f fe ff       	call   c0004641 <f_lseek>
c001c681:	83 c4 10             	add    esp,0x10
c001c684:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c688:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c68c:	85 c0                	test   eax,eax
c001c68e:	75 08                	jne    c001c698 <FAT::seek(void*, unsigned long long)+0x4c>
c001c690:	b8 00 00 00 00       	mov    eax,0x0
c001c695:	eb 09                	jmp    c001c6a0 <FAT::seek(void*, unsigned long long)+0x54>
c001c697:	90                   	nop
c001c698:	b8 01 00 00 00       	mov    eax,0x1
c001c69d:	8d 76 00             	lea    esi,[esi+0x0]
c001c6a0:	83 c4 2c             	add    esp,0x2c
c001c6a3:	c3                   	ret    

c001c6a4 <fatWrapperReadDisk>:
c001c6a4:	53                   	push   ebx
c001c6a5:	83 ec 18             	sub    esp,0x18
c001c6a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c6ac:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c6b0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c6b5:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c001c6bc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c6c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c6c4:	ba 00 00 00 00       	mov    edx,0x0
c001c6c9:	83 ec 0c             	sub    esp,0xc
c001c6cc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c6d0:	53                   	push   ebx
c001c6d1:	52                   	push   edx
c001c6d2:	50                   	push   eax
c001c6d3:	51                   	push   ecx
c001c6d4:	e8 cf e3 fe ff       	call   c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)>
c001c6d9:	83 c4 20             	add    esp,0x20
c001c6dc:	83 c4 18             	add    esp,0x18
c001c6df:	5b                   	pop    ebx
c001c6e0:	c3                   	ret    
c001c6e1:	8d 76 00             	lea    esi,[esi+0x0]

c001c6e4 <fatWrapperWriteDisk>:
c001c6e4:	53                   	push   ebx
c001c6e5:	83 ec 18             	sub    esp,0x18
c001c6e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c6ec:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c6f0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c6f5:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c001c6fc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c700:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c704:	ba 00 00 00 00       	mov    edx,0x0
c001c709:	83 ec 0c             	sub    esp,0xc
c001c70c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c710:	53                   	push   ebx
c001c711:	52                   	push   edx
c001c712:	50                   	push   eax
c001c713:	51                   	push   ecx
c001c714:	e8 fb e3 fe ff       	call   c000ab14 <LogicalDisk::write(unsigned long long, int, void*)>
c001c719:	83 c4 20             	add    esp,0x20
c001c71c:	83 c4 18             	add    esp,0x18
c001c71f:	5b                   	pop    ebx
c001c720:	c3                   	ret    
c001c721:	8d 76 00             	lea    esi,[esi+0x0]

c001c724 <fatWrapperIoctl>:
c001c724:	53                   	push   ebx
c001c725:	83 ec 28             	sub    esp,0x28
c001c728:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c72c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c730:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c734:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c738:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c73d:	83 f8 02             	cmp    eax,0x2
c001c740:	75 32                	jne    c001c774 <fatWrapperIoctl+0x50>
c001c742:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c746:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c74a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c74f:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c001c756:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c75c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c762:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c766:	66 89 02             	mov    WORD PTR [edx],ax
c001c769:	b8 00 00 00 00       	mov    eax,0x0
c001c76e:	e9 c5 00 00 00       	jmp    c001c838 <fatWrapperIoctl+0x114>
c001c773:	90                   	nop
c001c774:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c779:	83 f8 01             	cmp    eax,0x1
c001c77c:	75 6a                	jne    c001c7e8 <fatWrapperIoctl+0xc4>
c001c77e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c782:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c786:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c78b:	8b 04 85 e0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3520]
c001c792:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c798:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001c79e:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001c7a4:	89 c8                	mov    eax,ecx
c001c7a6:	89 da                	mov    edx,ebx
c001c7a8:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c7ac:	c1 e0 0a             	shl    eax,0xa
c001c7af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c7b4:	8b 0c 8d e0 ca 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3520]
c001c7bb:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001c7c1:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001c7c7:	89 cb                	mov    ebx,ecx
c001c7c9:	c1 fb 1f             	sar    ebx,0x1f
c001c7cc:	53                   	push   ebx
c001c7cd:	51                   	push   ecx
c001c7ce:	52                   	push   edx
c001c7cf:	50                   	push   eax
c001c7d0:	e8 5f 55 00 00       	call   c0021d34 <__udivdi3>
c001c7d5:	83 c4 10             	add    esp,0x10
c001c7d8:	89 c2                	mov    edx,eax
c001c7da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c7de:	89 10                	mov    DWORD PTR [eax],edx
c001c7e0:	b8 00 00 00 00       	mov    eax,0x0
c001c7e5:	eb 51                	jmp    c001c838 <fatWrapperIoctl+0x114>
c001c7e7:	90                   	nop
c001c7e8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c7ed:	85 c0                	test   eax,eax
c001c7ef:	75 07                	jne    c001c7f8 <fatWrapperIoctl+0xd4>
c001c7f1:	b8 00 00 00 00       	mov    eax,0x0
c001c7f6:	eb 40                	jmp    c001c838 <fatWrapperIoctl+0x114>
c001c7f8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c7fd:	83 f8 03             	cmp    eax,0x3
c001c800:	75 1a                	jne    c001c81c <fatWrapperIoctl+0xf8>
c001c802:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c806:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c80a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c80e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001c814:	b8 00 00 00 00       	mov    eax,0x0
c001c819:	eb 1d                	jmp    c001c838 <fatWrapperIoctl+0x114>
c001c81b:	90                   	nop
c001c81c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c821:	83 f8 04             	cmp    eax,0x4
c001c824:	75 0a                	jne    c001c830 <fatWrapperIoctl+0x10c>
c001c826:	b8 00 00 00 00       	mov    eax,0x0
c001c82b:	eb 0b                	jmp    c001c838 <fatWrapperIoctl+0x114>
c001c82d:	8d 76 00             	lea    esi,[esi+0x0]
c001c830:	b8 04 00 00 00       	mov    eax,0x4
c001c835:	8d 76 00             	lea    esi,[esi+0x0]
c001c838:	83 c4 28             	add    esp,0x28
c001c83b:	5b                   	pop    ebx
c001c83c:	c3                   	ret    
c001c83d:	90                   	nop
c001c83e:	66 90                	xchg   ax,ax

c001c840 <FAT::FAT()>:
c001c840:	83 ec 1c             	sub    esp,0x1c
c001c843:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c847:	83 ec 0c             	sub    esp,0xc
c001c84a:	50                   	push   eax
c001c84b:	e8 78 b5 fe ff       	call   c0007dc8 <Filesystem::Filesystem()>
c001c850:	83 c4 10             	add    esp,0x10
c001c853:	ba 08 5e 02 c0       	mov    edx,0xc0025e08
c001c858:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c85c:	89 10                	mov    DWORD PTR [eax],edx
c001c85e:	c7 05 60 fb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fb60,0x0
c001c868:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c870:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001c875:	7f 19                	jg     c001c890 <FAT::FAT()+0x50>
c001c877:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c87b:	c7 04 85 80 fb 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd0480],0xffffffff
c001c886:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001c88b:	eb e3                	jmp    c001c870 <FAT::FAT()+0x30>
c001c88d:	8d 76 00             	lea    esi,[esi+0x0]
c001c890:	90                   	nop
c001c891:	83 c4 1c             	add    esp,0x1c
c001c894:	c3                   	ret    
c001c895:	90                   	nop
c001c896:	66 90                	xchg   ax,ax

c001c898 <FAT::fixFilepath(char*)>:
c001c898:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c89c:	8a 00                	mov    al,BYTE PTR [eax]
c001c89e:	0f be c0             	movsx  eax,al
c001c8a1:	83 f8 40             	cmp    eax,0x40
c001c8a4:	7e 2e                	jle    c001c8d4 <FAT::fixFilepath(char*)+0x3c>
c001c8a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c8aa:	8a 00                	mov    al,BYTE PTR [eax]
c001c8ac:	83 e8 41             	sub    eax,0x41
c001c8af:	88 c2                	mov    dl,al
c001c8b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c8b5:	88 10                	mov    BYTE PTR [eax],dl
c001c8b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c8bb:	8a 00                	mov    al,BYTE PTR [eax]
c001c8bd:	0f be c0             	movsx  eax,al
c001c8c0:	8b 04 85 80 fb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0480]
c001c8c7:	83 c0 30             	add    eax,0x30
c001c8ca:	88 c2                	mov    dl,al
c001c8cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c8d0:	88 10                	mov    BYTE PTR [eax],dl
c001c8d2:	66 90                	xchg   ax,ax
c001c8d4:	90                   	nop
c001c8d5:	c3                   	ret    
c001c8d6:	66 90                	xchg   ax,ax

c001c8d8 <FAT::open(char const*, void**, FileOpenMode)>:
c001c8d8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c8de:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c8e6:	74 0c                	je     c001c8f4 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001c8e8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c8f0:	75 0e                	jne    c001c900 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001c8f2:	66 90                	xchg   ax,ax
c001c8f4:	b8 04 00 00 00       	mov    eax,0x4
c001c8f9:	e9 46 01 00 00       	jmp    c001ca44 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001c8fe:	66 90                	xchg   ax,ax
c001c900:	83 ec 08             	sub    esp,0x8
c001c903:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c90a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c90e:	50                   	push   eax
c001c90f:	e8 2c 3d fe ff       	call   c0000640 <strcpy>
c001c914:	83 c4 10             	add    esp,0x10
c001c917:	83 ec 08             	sub    esp,0x8
c001c91a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c91e:	50                   	push   eax
c001c91f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c926:	e8 6d ff ff ff       	call   c001c898 <FAT::fixFilepath(char*)>
c001c92b:	83 c4 10             	add    esp,0x10
c001c92e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001c936:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c93d:	83 e0 01             	and    eax,0x1
c001c940:	74 12                	je     c001c954 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001c942:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c949:	83 c8 01             	or     eax,0x1
c001c94c:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c953:	90                   	nop
c001c954:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c95b:	83 e0 04             	and    eax,0x4
c001c95e:	74 24                	je     c001c984 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001c960:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c967:	83 c8 30             	or     eax,0x30
c001c96a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c971:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c978:	83 c8 02             	or     eax,0x2
c001c97b:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c982:	66 90                	xchg   ax,ax
c001c984:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c98b:	83 e0 02             	and    eax,0x2
c001c98e:	74 14                	je     c001c9a4 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001c990:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c997:	83 c8 02             	or     eax,0x2
c001c99a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c9a1:	8d 76 00             	lea    esi,[esi+0x0]
c001c9a4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c9ab:	83 e0 08             	and    eax,0x8
c001c9ae:	74 14                	je     c001c9c4 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001c9b0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c9b7:	83 c8 04             	or     eax,0x4
c001c9ba:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c9c1:	8d 76 00             	lea    esi,[esi+0x0]
c001c9c4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c9cb:	83 e0 10             	and    eax,0x10
c001c9ce:	74 14                	je     c001c9e4 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001c9d0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c9d7:	83 c8 08             	or     eax,0x8
c001c9da:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c9e1:	8d 76 00             	lea    esi,[esi+0x0]
c001c9e4:	83 ec 0c             	sub    esp,0xc
c001c9e7:	68 28 02 00 00       	push   0x228
c001c9ec:	e8 9e 31 ff ff       	call   c000fb8f <malloc>
c001c9f1:	83 c4 10             	add    esp,0x10
c001c9f4:	89 c2                	mov    edx,eax
c001c9f6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c9fd:	89 10                	mov    DWORD PTR [eax],edx
c001c9ff:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001ca07:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ca0e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca10:	83 ec 04             	sub    esp,0x4
c001ca13:	52                   	push   edx
c001ca14:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ca18:	52                   	push   edx
c001ca19:	50                   	push   eax
c001ca1a:	e8 24 74 fe ff       	call   c0003e43 <f_open>
c001ca1f:	83 c4 10             	add    esp,0x10
c001ca22:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001ca29:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001ca31:	74 09                	je     c001ca3c <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001ca33:	b8 01 00 00 00       	mov    eax,0x1
c001ca38:	eb 0a                	jmp    c001ca44 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001ca3a:	66 90                	xchg   ax,ax
c001ca3c:	b8 00 00 00 00       	mov    eax,0x0
c001ca41:	8d 76 00             	lea    esi,[esi+0x0]
c001ca44:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ca4a:	c3                   	ret    
c001ca4b:	90                   	nop

c001ca4c <FAT::openDir(char const*, void**)>:
c001ca4c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ca52:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ca5a:	74 0c                	je     c001ca68 <FAT::openDir(char const*, void**)+0x1c>
c001ca5c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ca64:	75 0e                	jne    c001ca74 <FAT::openDir(char const*, void**)+0x28>
c001ca66:	66 90                	xchg   ax,ax
c001ca68:	b8 04 00 00 00       	mov    eax,0x4
c001ca6d:	e9 82 00 00 00       	jmp    c001caf4 <FAT::openDir(char const*, void**)+0xa8>
c001ca72:	66 90                	xchg   ax,ax
c001ca74:	83 ec 08             	sub    esp,0x8
c001ca77:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ca7e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ca82:	50                   	push   eax
c001ca83:	e8 b8 3b fe ff       	call   c0000640 <strcpy>
c001ca88:	83 c4 10             	add    esp,0x10
c001ca8b:	83 ec 08             	sub    esp,0x8
c001ca8e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ca92:	50                   	push   eax
c001ca93:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ca9a:	e8 f9 fd ff ff       	call   c001c898 <FAT::fixFilepath(char*)>
c001ca9f:	83 c4 10             	add    esp,0x10
c001caa2:	83 ec 0c             	sub    esp,0xc
c001caa5:	6a 30                	push   0x30
c001caa7:	e8 e3 30 ff ff       	call   c000fb8f <malloc>
c001caac:	83 c4 10             	add    esp,0x10
c001caaf:	89 c2                	mov    edx,eax
c001cab1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001cab8:	89 10                	mov    DWORD PTR [eax],edx
c001caba:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001cac1:	8b 00                	mov    eax,DWORD PTR [eax]
c001cac3:	83 ec 08             	sub    esp,0x8
c001cac6:	8d 54 24 14          	lea    edx,[esp+0x14]
c001caca:	52                   	push   edx
c001cacb:	50                   	push   eax
c001cacc:	e8 21 7d fe ff       	call   c00047f2 <f_opendir>
c001cad1:	83 c4 10             	add    esp,0x10
c001cad4:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001cadb:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001cae3:	74 07                	je     c001caec <FAT::openDir(char const*, void**)+0xa0>
c001cae5:	b8 01 00 00 00       	mov    eax,0x1
c001caea:	eb 08                	jmp    c001caf4 <FAT::openDir(char const*, void**)+0xa8>
c001caec:	b8 00 00 00 00       	mov    eax,0x0
c001caf1:	8d 76 00             	lea    esi,[esi+0x0]
c001caf4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cafa:	c3                   	ret    
c001cafb:	90                   	nop

c001cafc <FAT::stat(char const*, unsigned long long*, bool*)>:
c001cafc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001cb02:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001cb0a:	75 0c                	jne    c001cb18 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001cb0c:	b8 04 00 00 00       	mov    eax,0x4
c001cb11:	e9 d6 00 00 00       	jmp    c001cbec <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cb16:	66 90                	xchg   ax,ax
c001cb18:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001cb20:	75 0a                	jne    c001cb2c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001cb22:	b8 04 00 00 00       	mov    eax,0x4
c001cb27:	e9 c0 00 00 00       	jmp    c001cbec <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cb2c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001cb34:	75 0a                	jne    c001cb40 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001cb36:	b8 04 00 00 00       	mov    eax,0x4
c001cb3b:	e9 ac 00 00 00       	jmp    c001cbec <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cb40:	83 ec 08             	sub    esp,0x8
c001cb43:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001cb4a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001cb51:	50                   	push   eax
c001cb52:	e8 e9 3a fe ff       	call   c0000640 <strcpy>
c001cb57:	83 c4 10             	add    esp,0x10
c001cb5a:	83 ec 08             	sub    esp,0x8
c001cb5d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001cb64:	50                   	push   eax
c001cb65:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001cb6c:	e8 27 fd ff ff       	call   c001c898 <FAT::fixFilepath(char*)>
c001cb71:	83 c4 10             	add    esp,0x10
c001cb74:	83 ec 08             	sub    esp,0x8
c001cb77:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001cb7b:	50                   	push   eax
c001cb7c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001cb83:	50                   	push   eax
c001cb84:	e8 e8 7d fe ff       	call   c0004971 <f_stat>
c001cb89:	83 c4 10             	add    esp,0x10
c001cb8c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001cb93:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001cb9a:	85 c0                	test   eax,eax
c001cb9c:	74 0a                	je     c001cba8 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001cb9e:	83 f8 04             	cmp    eax,0x4
c001cba1:	74 39                	je     c001cbdc <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001cba3:	eb 3f                	jmp    c001cbe4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001cba5:	8d 76 00             	lea    esi,[esi+0x0]
c001cba8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001cbac:	0f b6 c0             	movzx  eax,al
c001cbaf:	83 e0 10             	and    eax,0x10
c001cbb2:	0f 95 c2             	setne  dl
c001cbb5:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001cbbc:	88 10                	mov    BYTE PTR [eax],dl
c001cbbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbc2:	ba 00 00 00 00       	mov    edx,0x0
c001cbc7:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001cbce:	89 01                	mov    DWORD PTR [ecx],eax
c001cbd0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001cbd3:	b8 00 00 00 00       	mov    eax,0x0
c001cbd8:	eb 12                	jmp    c001cbec <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cbda:	66 90                	xchg   ax,ax
c001cbdc:	b8 02 00 00 00       	mov    eax,0x2
c001cbe1:	eb 09                	jmp    c001cbec <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cbe3:	90                   	nop
c001cbe4:	b8 01 00 00 00       	mov    eax,0x1
c001cbe9:	8d 76 00             	lea    esi,[esi+0x0]
c001cbec:	81 c4 2c 02 00 00    	add    esp,0x22c
c001cbf2:	c3                   	ret    
c001cbf3:	90                   	nop

c001cbf4 <FAT::unlink(char const*)>:
c001cbf4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001cbfa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001cc02:	75 08                	jne    c001cc0c <FAT::unlink(char const*)+0x18>
c001cc04:	b8 04 00 00 00       	mov    eax,0x4
c001cc09:	eb 61                	jmp    c001cc6c <FAT::unlink(char const*)+0x78>
c001cc0b:	90                   	nop
c001cc0c:	83 ec 08             	sub    esp,0x8
c001cc0f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cc16:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cc1a:	50                   	push   eax
c001cc1b:	e8 20 3a fe ff       	call   c0000640 <strcpy>
c001cc20:	83 c4 10             	add    esp,0x10
c001cc23:	83 ec 08             	sub    esp,0x8
c001cc26:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cc2a:	50                   	push   eax
c001cc2b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cc32:	e8 61 fc ff ff       	call   c001c898 <FAT::fixFilepath(char*)>
c001cc37:	83 c4 10             	add    esp,0x10
c001cc3a:	83 ec 0c             	sub    esp,0xc
c001cc3d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cc41:	50                   	push   eax
c001cc42:	e8 9c 7f fe ff       	call   c0004be3 <f_unlink>
c001cc47:	83 c4 10             	add    esp,0x10
c001cc4a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001cc51:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001cc58:	85 c0                	test   eax,eax
c001cc5a:	75 08                	jne    c001cc64 <FAT::unlink(char const*)+0x70>
c001cc5c:	b8 00 00 00 00       	mov    eax,0x0
c001cc61:	eb 09                	jmp    c001cc6c <FAT::unlink(char const*)+0x78>
c001cc63:	90                   	nop
c001cc64:	b8 01 00 00 00       	mov    eax,0x1
c001cc69:	8d 76 00             	lea    esi,[esi+0x0]
c001cc6c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cc72:	c3                   	ret    
c001cc73:	90                   	nop

c001cc74 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001cc74:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001cc7a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001cc81:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001cc88:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001cc8c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001cc90:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001cc98:	75 0a                	jne    c001cca4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001cc9a:	b8 04 00 00 00       	mov    eax,0x4
c001cc9f:	e9 7c 01 00 00       	jmp    c001ce20 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001cca4:	83 ec 08             	sub    esp,0x8
c001cca7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ccae:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ccb2:	50                   	push   eax
c001ccb3:	e8 88 39 fe ff       	call   c0000640 <strcpy>
c001ccb8:	83 c4 10             	add    esp,0x10
c001ccbb:	83 ec 08             	sub    esp,0x8
c001ccbe:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ccc2:	50                   	push   eax
c001ccc3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ccca:	e8 c9 fb ff ff       	call   c001c898 <FAT::fixFilepath(char*)>
c001cccf:	83 c4 10             	add    esp,0x10
c001ccd2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001ccda:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001cce2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cce7:	83 e0 01             	and    eax,0x1
c001ccea:	74 14                	je     c001cd00 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001ccec:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ccf3:	83 c8 01             	or     eax,0x1
c001ccf6:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001ccfd:	8d 76 00             	lea    esi,[esi+0x0]
c001cd00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cd05:	83 e0 02             	and    eax,0x2
c001cd08:	74 12                	je     c001cd1c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001cd0a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001cd11:	83 c8 20             	or     eax,0x20
c001cd14:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001cd1b:	90                   	nop
c001cd1c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cd21:	83 e0 04             	and    eax,0x4
c001cd24:	74 12                	je     c001cd38 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001cd26:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001cd2d:	83 c8 04             	or     eax,0x4
c001cd30:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001cd37:	90                   	nop
c001cd38:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cd3d:	83 e0 08             	and    eax,0x8
c001cd40:	74 12                	je     c001cd54 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001cd42:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001cd49:	83 c8 02             	or     eax,0x2
c001cd4c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001cd53:	90                   	nop
c001cd54:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cd59:	83 e0 01             	and    eax,0x1
c001cd5c:	74 12                	je     c001cd70 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001cd5e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001cd65:	83 c8 01             	or     eax,0x1
c001cd68:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001cd6f:	90                   	nop
c001cd70:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cd75:	83 e0 02             	and    eax,0x2
c001cd78:	74 12                	je     c001cd8c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001cd7a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001cd81:	83 c8 20             	or     eax,0x20
c001cd84:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001cd8b:	90                   	nop
c001cd8c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cd91:	83 e0 04             	and    eax,0x4
c001cd94:	74 12                	je     c001cda8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001cd96:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001cd9d:	83 c8 04             	or     eax,0x4
c001cda0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001cda7:	90                   	nop
c001cda8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cdad:	83 e0 08             	and    eax,0x8
c001cdb0:	74 12                	je     c001cdc4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001cdb2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001cdb9:	83 c8 02             	or     eax,0x2
c001cdbc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001cdc3:	90                   	nop
c001cdc4:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001cdcb:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001cdd2:	09 d0                	or     eax,edx
c001cdd4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001cddb:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001cde3:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001cdeb:	83 ec 04             	sub    esp,0x4
c001cdee:	52                   	push   edx
c001cdef:	50                   	push   eax
c001cdf0:	8d 44 24 24          	lea    eax,[esp+0x24]
c001cdf4:	50                   	push   eax
c001cdf5:	e8 5e 82 fe ff       	call   c0005058 <f_chmod>
c001cdfa:	83 c4 10             	add    esp,0x10
c001cdfd:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ce04:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ce0b:	85 c0                	test   eax,eax
c001ce0d:	75 09                	jne    c001ce18 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001ce0f:	b8 00 00 00 00       	mov    eax,0x0
c001ce14:	eb 0a                	jmp    c001ce20 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001ce16:	66 90                	xchg   ax,ax
c001ce18:	b8 01 00 00 00       	mov    eax,0x1
c001ce1d:	8d 76 00             	lea    esi,[esi+0x0]
c001ce20:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ce26:	c3                   	ret    
c001ce27:	90                   	nop

c001ce28 <FAT::rename(char const*, char const*)>:
c001ce28:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ce2e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001ce36:	74 0c                	je     c001ce44 <FAT::rename(char const*, char const*)+0x1c>
c001ce38:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001ce40:	75 0e                	jne    c001ce50 <FAT::rename(char const*, char const*)+0x28>
c001ce42:	66 90                	xchg   ax,ax
c001ce44:	b8 04 00 00 00       	mov    eax,0x4
c001ce49:	e9 9e 00 00 00       	jmp    c001ceec <FAT::rename(char const*, char const*)+0xc4>
c001ce4e:	66 90                	xchg   ax,ax
c001ce50:	83 ec 08             	sub    esp,0x8
c001ce53:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ce5a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ce61:	50                   	push   eax
c001ce62:	e8 d9 37 fe ff       	call   c0000640 <strcpy>
c001ce67:	83 c4 10             	add    esp,0x10
c001ce6a:	83 ec 08             	sub    esp,0x8
c001ce6d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001ce74:	50                   	push   eax
c001ce75:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ce7c:	e8 17 fa ff ff       	call   c001c898 <FAT::fixFilepath(char*)>
c001ce81:	83 c4 10             	add    esp,0x10
c001ce84:	83 ec 08             	sub    esp,0x8
c001ce87:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001ce8e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ce92:	50                   	push   eax
c001ce93:	e8 a8 37 fe ff       	call   c0000640 <strcpy>
c001ce98:	83 c4 10             	add    esp,0x10
c001ce9b:	83 ec 08             	sub    esp,0x8
c001ce9e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cea2:	50                   	push   eax
c001cea3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ceaa:	e8 e9 f9 ff ff       	call   c001c898 <FAT::fixFilepath(char*)>
c001ceaf:	83 c4 10             	add    esp,0x10
c001ceb2:	83 ec 08             	sub    esp,0x8
c001ceb5:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ceb9:	50                   	push   eax
c001ceba:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001cec1:	50                   	push   eax
c001cec2:	e8 d9 7f fe ff       	call   c0004ea0 <f_rename>
c001cec7:	83 c4 10             	add    esp,0x10
c001ceca:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001ced1:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001ced8:	85 c0                	test   eax,eax
c001ceda:	75 08                	jne    c001cee4 <FAT::rename(char const*, char const*)+0xbc>
c001cedc:	b8 00 00 00 00       	mov    eax,0x0
c001cee1:	eb 09                	jmp    c001ceec <FAT::rename(char const*, char const*)+0xc4>
c001cee3:	90                   	nop
c001cee4:	b8 01 00 00 00       	mov    eax,0x1
c001cee9:	8d 76 00             	lea    esi,[esi+0x0]
c001ceec:	81 c4 1c 02 00 00    	add    esp,0x21c
c001cef2:	c3                   	ret    
c001cef3:	90                   	nop

c001cef4 <FAT::mkdir(char const*)>:
c001cef4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001cefa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001cf02:	75 08                	jne    c001cf0c <FAT::mkdir(char const*)+0x18>
c001cf04:	b8 04 00 00 00       	mov    eax,0x4
c001cf09:	eb 61                	jmp    c001cf6c <FAT::mkdir(char const*)+0x78>
c001cf0b:	90                   	nop
c001cf0c:	83 ec 08             	sub    esp,0x8
c001cf0f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cf16:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cf1a:	50                   	push   eax
c001cf1b:	e8 20 37 fe ff       	call   c0000640 <strcpy>
c001cf20:	83 c4 10             	add    esp,0x10
c001cf23:	83 ec 08             	sub    esp,0x8
c001cf26:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cf2a:	50                   	push   eax
c001cf2b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cf32:	e8 61 f9 ff ff       	call   c001c898 <FAT::fixFilepath(char*)>
c001cf37:	83 c4 10             	add    esp,0x10
c001cf3a:	83 ec 0c             	sub    esp,0xc
c001cf3d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cf41:	50                   	push   eax
c001cf42:	e8 be 7d fe ff       	call   c0004d05 <f_mkdir>
c001cf47:	83 c4 10             	add    esp,0x10
c001cf4a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001cf51:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001cf58:	85 c0                	test   eax,eax
c001cf5a:	75 08                	jne    c001cf64 <FAT::mkdir(char const*)+0x70>
c001cf5c:	b8 00 00 00 00       	mov    eax,0x0
c001cf61:	eb 09                	jmp    c001cf6c <FAT::mkdir(char const*)+0x78>
c001cf63:	90                   	nop
c001cf64:	b8 01 00 00 00       	mov    eax,0x1
c001cf69:	8d 76 00             	lea    esi,[esi+0x0]
c001cf6c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cf72:	c3                   	ret    
c001cf73:	90                   	nop

c001cf74 <FAT::exists(char const*)>:
c001cf74:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001cf7a:	83 ec 08             	sub    esp,0x8
c001cf7d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001cf84:	8d 44 24 10          	lea    eax,[esp+0x10]
c001cf88:	50                   	push   eax
c001cf89:	e8 b2 36 fe ff       	call   c0000640 <strcpy>
c001cf8e:	83 c4 10             	add    esp,0x10
c001cf91:	83 ec 08             	sub    esp,0x8
c001cf94:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001cf98:	50                   	push   eax
c001cf99:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001cfa0:	e8 f3 f8 ff ff       	call   c001c898 <FAT::fixFilepath(char*)>
c001cfa5:	83 c4 10             	add    esp,0x10
c001cfa8:	83 ec 08             	sub    esp,0x8
c001cfab:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001cfb2:	50                   	push   eax
c001cfb3:	8d 44 24 10          	lea    eax,[esp+0x10]
c001cfb7:	50                   	push   eax
c001cfb8:	e8 b4 79 fe ff       	call   c0004971 <f_stat>
c001cfbd:	83 c4 10             	add    esp,0x10
c001cfc0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001cfc7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001cfce:	85 c0                	test   eax,eax
c001cfd0:	75 06                	jne    c001cfd8 <FAT::exists(char const*)+0x64>
c001cfd2:	b0 01                	mov    al,0x1
c001cfd4:	eb 06                	jmp    c001cfdc <FAT::exists(char const*)+0x68>
c001cfd6:	66 90                	xchg   ax,ax
c001cfd8:	b0 00                	mov    al,0x0
c001cfda:	66 90                	xchg   ax,ax
c001cfdc:	81 c4 2c 02 00 00    	add    esp,0x22c
c001cfe2:	c3                   	ret    
c001cfe3:	90                   	nop

c001cfe4 <isoReadDiscSectorHelper>:
c001cfe4:	83 ec 2c             	sub    esp,0x2c
c001cfe7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001cfeb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cfef:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001cff4:	83 e8 41             	sub    eax,0x41
c001cff7:	8b 0c 85 e0 ca 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3520]
c001cffe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d002:	ba 00 00 00 00       	mov    edx,0x0
c001d007:	83 ec 0c             	sub    esp,0xc
c001d00a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d00e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d012:	52                   	push   edx
c001d013:	50                   	push   eax
c001d014:	51                   	push   ecx
c001d015:	e8 8e da fe ff       	call   c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)>
c001d01a:	83 c4 20             	add    esp,0x20
c001d01d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d021:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001d026:	74 0c                	je     c001d034 <isoReadDiscSectorHelper+0x50>
c001d028:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d02c:	c1 e0 0b             	shl    eax,0xb
c001d02f:	eb 0b                	jmp    c001d03c <isoReadDiscSectorHelper+0x58>
c001d031:	8d 76 00             	lea    esi,[esi+0x0]
c001d034:	b8 00 00 00 00       	mov    eax,0x0
c001d039:	8d 76 00             	lea    esi,[esi+0x0]
c001d03c:	83 c4 2c             	add    esp,0x2c
c001d03f:	c3                   	ret    

c001d040 <iso_kprintf>:
c001d040:	83 ec 0c             	sub    esp,0xc
c001d043:	83 ec 08             	sub    esp,0x8
c001d046:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d04a:	68 e0 5a 02 c0       	push   0xc0025ae0
c001d04f:	e8 28 9f fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d054:	83 c4 10             	add    esp,0x10
c001d057:	90                   	nop
c001d058:	83 c4 0c             	add    esp,0xc
c001d05b:	c3                   	ret    

c001d05c <iso_kprintfd>:
c001d05c:	83 ec 0c             	sub    esp,0xc
c001d05f:	83 ec 08             	sub    esp,0x8
c001d062:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d066:	68 20 50 02 c0       	push   0xc0025020
c001d06b:	e8 0c 9f fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d070:	83 c4 10             	add    esp,0x10
c001d073:	90                   	nop
c001d074:	83 c4 0c             	add    esp,0xc
c001d077:	c3                   	ret    

c001d078 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001d078:	b8 08 00 00 00       	mov    eax,0x8
c001d07d:	c3                   	ret    

c001d07e <ISO9660::truncate(void*, unsigned long long)>:
c001d07e:	b8 01 00 00 00       	mov    eax,0x1
c001d083:	c3                   	ret    

c001d084 <ISO9660::getName()>:
c001d084:	b8 6c 5e 02 c0       	mov    eax,0xc0025e6c
c001d089:	c3                   	ret    

c001d08a <ISO9660::closeDir(void*)>:
c001d08a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d08e:	8b 00                	mov    eax,DWORD PTR [eax]
c001d090:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001d093:	90                   	nop

c001d094 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001d094:	b8 01 00 00 00       	mov    eax,0x1
c001d099:	c3                   	ret    

c001d09a <ISO9660::unlink(char const*)>:
c001d09a:	b8 01 00 00 00       	mov    eax,0x1
c001d09f:	c3                   	ret    

c001d0a0 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001d0a0:	b8 03 00 00 00       	mov    eax,0x3
c001d0a5:	c3                   	ret    

c001d0a6 <ISO9660::rename(char const*, char const*)>:
c001d0a6:	b8 01 00 00 00       	mov    eax,0x1
c001d0ab:	c3                   	ret    

c001d0ac <ISO9660::mkdir(char const*)>:
c001d0ac:	b8 01 00 00 00       	mov    eax,0x1
c001d0b1:	c3                   	ret    

c001d0b2 <ISO9660::~ISO9660()>:
c001d0b2:	83 ec 0c             	sub    esp,0xc
c001d0b5:	ba ac 5f 02 c0       	mov    edx,0xc0025fac
c001d0ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0be:	89 10                	mov    DWORD PTR [eax],edx
c001d0c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0c4:	83 ec 0c             	sub    esp,0xc
c001d0c7:	50                   	push   eax
c001d0c8:	e8 1f ad fe ff       	call   c0007dec <Filesystem::~Filesystem()>
c001d0cd:	83 c4 10             	add    esp,0x10
c001d0d0:	90                   	nop
c001d0d1:	83 c4 0c             	add    esp,0xc
c001d0d4:	c3                   	ret    
c001d0d5:	90                   	nop

c001d0d6 <ISO9660::~ISO9660()>:
c001d0d6:	83 ec 0c             	sub    esp,0xc
c001d0d9:	83 ec 0c             	sub    esp,0xc
c001d0dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0e0:	e8 cd ff ff ff       	call   c001d0b2 <ISO9660::~ISO9660()>
c001d0e5:	83 c4 10             	add    esp,0x10
c001d0e8:	83 ec 08             	sub    esp,0x8
c001d0eb:	6a 08                	push   0x8
c001d0ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0f1:	e8 f3 02 ff ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c001d0f6:	83 c4 10             	add    esp,0x10
c001d0f9:	83 c4 0c             	add    esp,0xc
c001d0fc:	c3                   	ret    
c001d0fd:	90                   	nop

c001d0fe <ISO9660::exists(char const*)>:
c001d0fe:	83 ec 18             	sub    esp,0x18
c001d101:	68 87 5e 02 c0       	push   0xc0025e87
c001d106:	e8 db 2e ff ff       	call   c000ffe6 <KePanic(char const*)>
c001d10b:	31 c0                	xor    eax,eax
c001d10d:	83 c4 1c             	add    esp,0x1c
c001d110:	c3                   	ret    
c001d111:	90                   	nop

c001d112 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001d112:	56                   	push   esi
c001d113:	53                   	push   ebx
c001d114:	53                   	push   ebx
c001d115:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d119:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d11d:	85 db                	test   ebx,ebx
c001d11f:	0f 84 ca 00 00 00    	je     c001d1ef <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001d125:	85 f6                	test   esi,esi
c001d127:	0f 84 c2 00 00 00    	je     c001d1ef <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001d12d:	b8 03 00 00 00       	mov    eax,0x3
c001d132:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001d137:	0f 85 b7 00 00 00    	jne    c001d1f4 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d13d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001d13f:	0f be 05 60 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc60
c001d146:	38 0d 60 fc 02 c0    	cmp    BYTE PTR ds:0xc002fc60,cl
c001d14c:	74 1b                	je     c001d169 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001d14e:	85 c0                	test   eax,eax
c001d150:	74 10                	je     c001d162 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001d152:	83 ec 0c             	sub    esp,0xc
c001d155:	68 a5 5e 02 c0       	push   0xc0025ea5
c001d15a:	e8 87 2e ff ff       	call   c000ffe6 <KePanic(char const*)>
c001d15f:	83 c4 10             	add    esp,0x10
c001d162:	8a 03                	mov    al,BYTE PTR [ebx]
c001d164:	a2 60 fc 02 c0       	mov    ds:0xc002fc60,al
c001d169:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d16c:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d173:	85 c0                	test   eax,eax
c001d175:	74 09                	je     c001d180 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001d177:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d17e:	74 48                	je     c001d1c8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001d180:	83 ec 0c             	sub    esp,0xc
c001d183:	68 b5 5e 02 c0       	push   0xc0025eb5
c001d188:	e8 ef 9d fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d18d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d190:	83 c4 10             	add    esp,0x10
c001d193:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d19a:	85 c0                	test   eax,eax
c001d19c:	74 17                	je     c001d1b5 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001d19e:	83 ec 0c             	sub    esp,0xc
c001d1a1:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d1a8:	68 d5 5e 02 c0       	push   0xc0025ed5
c001d1ad:	e8 ca 9d fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d1b2:	83 c4 10             	add    esp,0x10
c001d1b5:	83 ec 0c             	sub    esp,0xc
c001d1b8:	0f be 05 60 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc60
c001d1bf:	50                   	push   eax
c001d1c0:	e8 69 9a fe ff       	call   c0006c2e <init_percd>
c001d1c5:	83 c4 10             	add    esp,0x10
c001d1c8:	83 c3 03             	add    ebx,0x3
c001d1cb:	51                   	push   ecx
c001d1cc:	51                   	push   ecx
c001d1cd:	6a 00                	push   0x0
c001d1cf:	53                   	push   ebx
c001d1d0:	e8 20 95 fe ff       	call   c00066f5 <iso_open>
c001d1d5:	83 c4 10             	add    esp,0x10
c001d1d8:	89 c2                	mov    edx,eax
c001d1da:	b8 01 00 00 00       	mov    eax,0x1
c001d1df:	83 fa ff             	cmp    edx,0xffffffff
c001d1e2:	74 10                	je     c001d1f4 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d1e4:	83 c2 32             	add    edx,0x32
c001d1e7:	31 c0                	xor    eax,eax
c001d1e9:	01 d2                	add    edx,edx
c001d1eb:	89 16                	mov    DWORD PTR [esi],edx
c001d1ed:	eb 05                	jmp    c001d1f4 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d1ef:	b8 04 00 00 00       	mov    eax,0x4
c001d1f4:	5a                   	pop    edx
c001d1f5:	5b                   	pop    ebx
c001d1f6:	5e                   	pop    esi
c001d1f7:	c3                   	ret    

c001d1f8 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001d1f8:	53                   	push   ebx
c001d1f9:	83 ec 08             	sub    esp,0x8
c001d1fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d200:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d204:	85 c0                	test   eax,eax
c001d206:	74 2d                	je     c001d235 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001d208:	85 db                	test   ebx,ebx
c001d20a:	74 29                	je     c001d235 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001d20c:	b9 02 00 00 00       	mov    ecx,0x2
c001d211:	52                   	push   edx
c001d212:	99                   	cdq    
c001d213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d217:	f7 f9                	idiv   ecx
c001d219:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d21d:	83 e8 32             	sub    eax,0x32
c001d220:	50                   	push   eax
c001d221:	e8 77 95 fe ff       	call   c000679d <iso_read>
c001d226:	83 c4 10             	add    esp,0x10
c001d229:	89 03                	mov    DWORD PTR [ebx],eax
c001d22b:	09 d0                	or     eax,edx
c001d22d:	0f 94 c0             	sete   al
c001d230:	0f b6 c0             	movzx  eax,al
c001d233:	eb 05                	jmp    c001d23a <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001d235:	b8 04 00 00 00       	mov    eax,0x4
c001d23a:	83 c4 08             	add    esp,0x8
c001d23d:	5b                   	pop    ebx
c001d23e:	c3                   	ret    
c001d23f:	90                   	nop

c001d240 <ISO9660::seek(void*, unsigned long long)>:
c001d240:	57                   	push   edi
c001d241:	56                   	push   esi
c001d242:	b8 04 00 00 00       	mov    eax,0x4
c001d247:	51                   	push   ecx
c001d248:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d24c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d250:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d254:	85 d2                	test   edx,edx
c001d256:	74 26                	je     c001d27e <ISO9660::seek(void*, unsigned long long)+0x3e>
c001d258:	6a 00                	push   0x0
c001d25a:	b9 02 00 00 00       	mov    ecx,0x2
c001d25f:	57                   	push   edi
c001d260:	89 d0                	mov    eax,edx
c001d262:	56                   	push   esi
c001d263:	99                   	cdq    
c001d264:	f7 f9                	idiv   ecx
c001d266:	83 e8 32             	sub    eax,0x32
c001d269:	50                   	push   eax
c001d26a:	e8 44 96 fe ff       	call   c00068b3 <iso_seek>
c001d26f:	83 c4 10             	add    esp,0x10
c001d272:	31 f0                	xor    eax,esi
c001d274:	31 fa                	xor    edx,edi
c001d276:	09 d0                	or     eax,edx
c001d278:	0f 95 c0             	setne  al
c001d27b:	0f b6 c0             	movzx  eax,al
c001d27e:	5a                   	pop    edx
c001d27f:	5e                   	pop    esi
c001d280:	5f                   	pop    edi
c001d281:	c3                   	ret    

c001d282 <ISO9660::tell(void*, unsigned long long*)>:
c001d282:	53                   	push   ebx
c001d283:	83 ec 08             	sub    esp,0x8
c001d286:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d28a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d28e:	85 c0                	test   eax,eax
c001d290:	74 24                	je     c001d2b6 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001d292:	85 db                	test   ebx,ebx
c001d294:	74 20                	je     c001d2b6 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001d296:	83 ec 0c             	sub    esp,0xc
c001d299:	b9 02 00 00 00       	mov    ecx,0x2
c001d29e:	99                   	cdq    
c001d29f:	f7 f9                	idiv   ecx
c001d2a1:	83 e8 32             	sub    eax,0x32
c001d2a4:	50                   	push   eax
c001d2a5:	e8 8d 96 fe ff       	call   c0006937 <iso_tell>
c001d2aa:	83 c4 10             	add    esp,0x10
c001d2ad:	89 03                	mov    DWORD PTR [ebx],eax
c001d2af:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001d2b2:	31 c0                	xor    eax,eax
c001d2b4:	eb 05                	jmp    c001d2bb <ISO9660::tell(void*, unsigned long long*)+0x39>
c001d2b6:	b8 04 00 00 00       	mov    eax,0x4
c001d2bb:	83 c4 08             	add    esp,0x8
c001d2be:	5b                   	pop    ebx
c001d2bf:	c3                   	ret    

c001d2c0 <ISO9660::stat(void*, unsigned long long*)>:
c001d2c0:	53                   	push   ebx
c001d2c1:	83 ec 14             	sub    esp,0x14
c001d2c4:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d2c8:	68 f9 5e 02 c0       	push   0xc0025ef9
c001d2cd:	e8 aa 9c fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d2d2:	83 c4 10             	add    esp,0x10
c001d2d5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001d2da:	74 2c                	je     c001d308 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001d2dc:	85 db                	test   ebx,ebx
c001d2de:	74 28                	je     c001d308 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001d2e0:	83 ec 0c             	sub    esp,0xc
c001d2e3:	b9 02 00 00 00       	mov    ecx,0x2
c001d2e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2ec:	99                   	cdq    
c001d2ed:	f7 f9                	idiv   ecx
c001d2ef:	83 e8 32             	sub    eax,0x32
c001d2f2:	50                   	push   eax
c001d2f3:	e8 70 96 fe ff       	call   c0006968 <iso_total>
c001d2f8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d2ff:	89 03                	mov    DWORD PTR [ebx],eax
c001d301:	83 c4 10             	add    esp,0x10
c001d304:	31 c0                	xor    eax,eax
c001d306:	eb 05                	jmp    c001d30d <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001d308:	b8 04 00 00 00       	mov    eax,0x4
c001d30d:	83 c4 08             	add    esp,0x8
c001d310:	5b                   	pop    ebx
c001d311:	c3                   	ret    

c001d312 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001d312:	55                   	push   ebp
c001d313:	57                   	push   edi
c001d314:	56                   	push   esi
c001d315:	53                   	push   ebx
c001d316:	83 ec 18             	sub    esp,0x18
c001d319:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d31d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d321:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d325:	68 01 5f 02 c0       	push   0xc0025f01
c001d32a:	e8 4d 9c fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d32f:	83 c4 10             	add    esp,0x10
c001d332:	85 ff                	test   edi,edi
c001d334:	0f 94 c0             	sete   al
c001d337:	85 f6                	test   esi,esi
c001d339:	0f 94 c2             	sete   dl
c001d33c:	09 d0                	or     eax,edx
c001d33e:	a8 01                	test   al,0x1
c001d340:	0f 85 dd 00 00 00    	jne    c001d423 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001d346:	85 db                	test   ebx,ebx
c001d348:	0f 84 d5 00 00 00    	je     c001d423 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001d34e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001d351:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001d357:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001d35e:	0f be 05 60 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc60
c001d365:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001d367:	38 0d 60 fc 02 c0    	cmp    BYTE PTR ds:0xc002fc60,cl
c001d36d:	74 1b                	je     c001d38a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001d36f:	85 c0                	test   eax,eax
c001d371:	74 10                	je     c001d383 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001d373:	83 ec 0c             	sub    esp,0xc
c001d376:	68 a5 5e 02 c0       	push   0xc0025ea5
c001d37b:	e8 66 2c ff ff       	call   c000ffe6 <KePanic(char const*)>
c001d380:	83 c4 10             	add    esp,0x10
c001d383:	8a 03                	mov    al,BYTE PTR [ebx]
c001d385:	a2 60 fc 02 c0       	mov    ds:0xc002fc60,al
c001d38a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d38d:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d394:	85 c0                	test   eax,eax
c001d396:	74 09                	je     c001d3a1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001d398:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d39f:	74 51                	je     c001d3f2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001d3a1:	83 ec 0c             	sub    esp,0xc
c001d3a4:	68 09 5f 02 c0       	push   0xc0025f09
c001d3a9:	e8 ce 9b fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d3ae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d3b1:	83 c4 10             	add    esp,0x10
c001d3b4:	83 3c 85 dc c9 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd3624],0x0
c001d3bc:	74 21                	je     c001d3df <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001d3be:	83 ec 0c             	sub    esp,0xc
c001d3c1:	68 29 5f 02 c0       	push   0xc0025f29
c001d3c6:	e8 b1 9b fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d3cb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d3ce:	83 c4 10             	add    esp,0x10
c001d3d1:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d3d8:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d3df:	83 ec 0c             	sub    esp,0xc
c001d3e2:	0f be 05 60 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc60
c001d3e9:	50                   	push   eax
c001d3ea:	e8 3f 98 fe ff       	call   c0006c2e <init_percd>
c001d3ef:	83 c4 10             	add    esp,0x10
c001d3f2:	83 c3 03             	add    ebx,0x3
c001d3f5:	52                   	push   edx
c001d3f6:	52                   	push   edx
c001d3f7:	6a 00                	push   0x0
c001d3f9:	53                   	push   ebx
c001d3fa:	e8 f6 92 fe ff       	call   c00066f5 <iso_open>
c001d3ff:	83 c4 10             	add    esp,0x10
c001d402:	89 c5                	mov    ebp,eax
c001d404:	83 f8 ff             	cmp    eax,0xffffffff
c001d407:	75 21                	jne    c001d42a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001d409:	50                   	push   eax
c001d40a:	50                   	push   eax
c001d40b:	6a 01                	push   0x1
c001d40d:	53                   	push   ebx
c001d40e:	e8 e2 92 fe ff       	call   c00066f5 <iso_open>
c001d413:	83 c4 10             	add    esp,0x10
c001d416:	ba 02 00 00 00       	mov    edx,0x2
c001d41b:	40                   	inc    eax
c001d41c:	74 2b                	je     c001d449 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001d41e:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001d421:	eb 24                	jmp    c001d447 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001d423:	ba 04 00 00 00       	mov    edx,0x4
c001d428:	eb 1f                	jmp    c001d449 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001d42a:	83 ec 0c             	sub    esp,0xc
c001d42d:	50                   	push   eax
c001d42e:	e8 35 95 fe ff       	call   c0006968 <iso_total>
c001d433:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001d43a:	89 07                	mov    DWORD PTR [edi],eax
c001d43c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d43f:	e8 3b 93 fe ff       	call   c000677f <iso_close>
c001d444:	83 c4 10             	add    esp,0x10
c001d447:	31 d2                	xor    edx,edx
c001d449:	83 c4 0c             	add    esp,0xc
c001d44c:	89 d0                	mov    eax,edx
c001d44e:	5b                   	pop    ebx
c001d44f:	5e                   	pop    esi
c001d450:	5f                   	pop    edi
c001d451:	5d                   	pop    ebp
c001d452:	c3                   	ret    
c001d453:	90                   	nop

c001d454 <ISO9660::close(void*)>:
c001d454:	83 ec 0c             	sub    esp,0xc
c001d457:	b8 04 00 00 00       	mov    eax,0x4
c001d45c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d460:	85 d2                	test   edx,edx
c001d462:	74 1b                	je     c001d47f <ISO9660::close(void*)+0x2b>
c001d464:	83 ec 0c             	sub    esp,0xc
c001d467:	b9 02 00 00 00       	mov    ecx,0x2
c001d46c:	89 d0                	mov    eax,edx
c001d46e:	99                   	cdq    
c001d46f:	f7 f9                	idiv   ecx
c001d471:	83 e8 32             	sub    eax,0x32
c001d474:	50                   	push   eax
c001d475:	e8 05 93 fe ff       	call   c000677f <iso_close>
c001d47a:	83 c4 10             	add    esp,0x10
c001d47d:	31 c0                	xor    eax,eax
c001d47f:	83 c4 0c             	add    esp,0xc
c001d482:	c3                   	ret    
c001d483:	90                   	nop

c001d484 <ISO9660::openDir(char const*, void**)>:
c001d484:	56                   	push   esi
c001d485:	53                   	push   ebx
c001d486:	50                   	push   eax
c001d487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d48b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d48f:	85 db                	test   ebx,ebx
c001d491:	0f 84 bd 00 00 00    	je     c001d554 <ISO9660::openDir(char const*, void**)+0xd0>
c001d497:	85 f6                	test   esi,esi
c001d499:	0f 84 b5 00 00 00    	je     c001d554 <ISO9660::openDir(char const*, void**)+0xd0>
c001d49f:	8a 13                	mov    dl,BYTE PTR [ebx]
c001d4a1:	0f be 05 60 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc60
c001d4a8:	38 15 60 fc 02 c0    	cmp    BYTE PTR ds:0xc002fc60,dl
c001d4ae:	74 1b                	je     c001d4cb <ISO9660::openDir(char const*, void**)+0x47>
c001d4b0:	85 c0                	test   eax,eax
c001d4b2:	74 10                	je     c001d4c4 <ISO9660::openDir(char const*, void**)+0x40>
c001d4b4:	83 ec 0c             	sub    esp,0xc
c001d4b7:	68 a5 5e 02 c0       	push   0xc0025ea5
c001d4bc:	e8 25 2b ff ff       	call   c000ffe6 <KePanic(char const*)>
c001d4c1:	83 c4 10             	add    esp,0x10
c001d4c4:	8a 03                	mov    al,BYTE PTR [ebx]
c001d4c6:	a2 60 fc 02 c0       	mov    ds:0xc002fc60,al
c001d4cb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d4ce:	8b 04 85 dc c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3624]
c001d4d5:	85 c0                	test   eax,eax
c001d4d7:	74 10                	je     c001d4e9 <ISO9660::openDir(char const*, void**)+0x65>
c001d4d9:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d4e0:	74 1a                	je     c001d4fc <ISO9660::openDir(char const*, void**)+0x78>
c001d4e2:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d4e9:	83 ec 0c             	sub    esp,0xc
c001d4ec:	0f be 05 60 fc 02 c0 	movsx  eax,BYTE PTR ds:0xc002fc60
c001d4f3:	50                   	push   eax
c001d4f4:	e8 35 97 fe ff       	call   c0006c2e <init_percd>
c001d4f9:	83 c4 10             	add    esp,0x10
c001d4fc:	83 c3 03             	add    ebx,0x3
c001d4ff:	50                   	push   eax
c001d500:	50                   	push   eax
c001d501:	6a 01                	push   0x1
c001d503:	53                   	push   ebx
c001d504:	e8 ec 91 fe ff       	call   c00066f5 <iso_open>
c001d509:	83 c4 10             	add    esp,0x10
c001d50c:	89 c3                	mov    ebx,eax
c001d50e:	83 f8 ff             	cmp    eax,0xffffffff
c001d511:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001d516:	75 1c                	jne    c001d534 <ISO9660::openDir(char const*, void**)+0xb0>
c001d518:	53                   	push   ebx
c001d519:	53                   	push   ebx
c001d51a:	68 4d 5f 02 c0       	push   0xc0025f4d
c001d51f:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d525:	e8 46 54 ff ff       	call   c0012970 <VgaText::puts(char const*)>
c001d52a:	83 c4 10             	add    esp,0x10
c001d52d:	b8 01 00 00 00       	mov    eax,0x1
c001d532:	eb 25                	jmp    c001d559 <ISO9660::openDir(char const*, void**)+0xd5>
c001d534:	01 db                	add    ebx,ebx
c001d536:	51                   	push   ecx
c001d537:	83 c3 65             	add    ebx,0x65
c001d53a:	51                   	push   ecx
c001d53b:	68 60 5f 02 c0       	push   0xc0025f60
c001d540:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d546:	e8 25 54 ff ff       	call   c0012970 <VgaText::puts(char const*)>
c001d54b:	89 1e                	mov    DWORD PTR [esi],ebx
c001d54d:	83 c4 10             	add    esp,0x10
c001d550:	31 c0                	xor    eax,eax
c001d552:	eb 05                	jmp    c001d559 <ISO9660::openDir(char const*, void**)+0xd5>
c001d554:	b8 04 00 00 00       	mov    eax,0x4
c001d559:	5a                   	pop    edx
c001d55a:	5b                   	pop    ebx
c001d55b:	5e                   	pop    esi
c001d55c:	c3                   	ret    
c001d55d:	90                   	nop

c001d55e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001d55e:	55                   	push   ebp
c001d55f:	57                   	push   edi
c001d560:	56                   	push   esi
c001d561:	53                   	push   ebx
c001d562:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d568:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001d56f:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001d576:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001d57e:	0f 84 e7 00 00 00    	je     c001d66b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001d584:	85 db                	test   ebx,ebx
c001d586:	0f 84 df 00 00 00    	je     c001d66b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001d58c:	83 ec 0c             	sub    esp,0xc
c001d58f:	68 73 5f 02 c0       	push   0xc0025f73
c001d594:	e8 e3 99 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d599:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001d5a0:	b9 02 00 00 00       	mov    ecx,0x2
c001d5a5:	99                   	cdq    
c001d5a6:	f7 f9                	idiv   ecx
c001d5a8:	83 e8 32             	sub    eax,0x32
c001d5ab:	89 04 24             	mov    DWORD PTR [esp],eax
c001d5ae:	e8 07 94 fe ff       	call   c00069ba <iso_readdir>
c001d5b3:	83 c4 10             	add    esp,0x10
c001d5b6:	89 c6                	mov    esi,eax
c001d5b8:	85 c0                	test   eax,eax
c001d5ba:	75 37                	jne    c001d5f3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001d5bc:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001d5c1:	56                   	push   esi
c001d5c2:	56                   	push   esi
c001d5c3:	68 7e 5f 02 c0       	push   0xc0025f7e
c001d5c8:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d5ce:	e8 9d 53 ff ff       	call   c0012970 <VgaText::puts(char const*)>
c001d5d3:	83 c4 0c             	add    esp,0xc
c001d5d6:	68 10 01 00 00       	push   0x110
c001d5db:	6a 00                	push   0x0
c001d5dd:	57                   	push   edi
c001d5de:	e8 0d 2f fe ff       	call   c00004f0 <memset>
c001d5e3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001d5e9:	83 c4 10             	add    esp,0x10
c001d5ec:	b8 01 00 00 00       	mov    eax,0x1
c001d5f1:	eb 7d                	jmp    c001d670 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001d5f3:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001d5f9:	8d 68 08             	lea    ebp,[eax+0x8]
c001d5fc:	83 ec 0c             	sub    esp,0xc
c001d5ff:	55                   	push   ebp
c001d600:	e8 6b 2f fe ff       	call   c0000570 <strlen>
c001d605:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d60d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d611:	83 c4 10             	add    esp,0x10
c001d614:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001d618:	75 0a                	jne    c001d624 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001d61a:	b8 02 00 00 00       	mov    eax,0x2
c001d61f:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001d622:	74 05                	je     c001d629 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001d624:	b8 01 00 00 00       	mov    eax,0x1
c001d629:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d62d:	50                   	push   eax
c001d62e:	50                   	push   eax
c001d62f:	55                   	push   ebp
c001d630:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d634:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001d638:	50                   	push   eax
c001d639:	e8 02 30 fe ff       	call   c0000640 <strcpy>
c001d63e:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001d645:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d647:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001d64d:	5a                   	pop    edx
c001d64e:	a1 58 fa 02 c0       	mov    eax,ds:0xc002fa58
c001d653:	59                   	pop    ecx
c001d654:	68 91 5f 02 c0       	push   0xc0025f91
c001d659:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d65f:	e8 0c 53 ff ff       	call   c0012970 <VgaText::puts(char const*)>
c001d664:	83 c4 10             	add    esp,0x10
c001d667:	31 c0                	xor    eax,eax
c001d669:	eb 05                	jmp    c001d670 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001d66b:	b8 04 00 00 00       	mov    eax,0x4
c001d670:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d676:	5b                   	pop    ebx
c001d677:	5e                   	pop    esi
c001d678:	5f                   	pop    edi
c001d679:	5d                   	pop    ebp
c001d67a:	c3                   	ret    

c001d67b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001d67b:	57                   	push   edi
c001d67c:	56                   	push   esi
c001d67d:	53                   	push   ebx
c001d67e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d682:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d686:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d68a:	39 35 64 fc 02 c0    	cmp    DWORD PTR ds:0xc002fc64,esi
c001d690:	0f be cb             	movsx  ecx,bl
c001d693:	75 0b                	jne    c001d6a0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001d695:	0f be 05 04 72 02 c0 	movsx  eax,BYTE PTR ds:0xc0027204
c001d69c:	39 c8                	cmp    eax,ecx
c001d69e:	74 47                	je     c001d6e7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001d6a0:	83 ec 0c             	sub    esp,0xc
c001d6a3:	31 d2                	xor    edx,edx
c001d6a5:	68 80 fc 02 c0       	push   0xc002fc80
c001d6aa:	6a 01                	push   0x1
c001d6ac:	52                   	push   edx
c001d6ad:	56                   	push   esi
c001d6ae:	ff 34 8d dc c9 02 c0 	push   DWORD PTR [ecx*4-0x3ffd3624]
c001d6b5:	e8 ee d3 fe ff       	call   c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)>
c001d6ba:	83 c4 20             	add    esp,0x20
c001d6bd:	85 c0                	test   eax,eax
c001d6bf:	75 0e                	jne    c001d6cf <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001d6c1:	89 35 64 fc 02 c0    	mov    DWORD PTR ds:0xc002fc64,esi
c001d6c7:	88 1d 04 72 02 c0    	mov    BYTE PTR ds:0xc0027204,bl
c001d6cd:	eb 18                	jmp    c001d6e7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001d6cf:	50                   	push   eax
c001d6d0:	68 00 08 00 00       	push   0x800
c001d6d5:	6a 00                	push   0x0
c001d6d7:	57                   	push   edi
c001d6d8:	e8 13 2e fe ff       	call   c00004f0 <memset>
c001d6dd:	83 c4 10             	add    esp,0x10
c001d6e0:	b8 01 00 00 00       	mov    eax,0x1
c001d6e5:	eb 0e                	jmp    c001d6f5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001d6e7:	be 80 fc 02 c0       	mov    esi,0xc002fc80
c001d6ec:	b9 00 08 00 00       	mov    ecx,0x800
c001d6f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d6f3:	31 c0                	xor    eax,eax
c001d6f5:	5b                   	pop    ebx
c001d6f6:	5e                   	pop    esi
c001d6f7:	5f                   	pop    edi
c001d6f8:	c3                   	ret    
c001d6f9:	90                   	nop

c001d6fa <ISO9660::tryMount(LogicalDisk*, int)>:
c001d6fa:	53                   	push   ebx
c001d6fb:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001d701:	c7 05 64 fc 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002fc64,0xdeadbeef
c001d70b:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001d712:	8d 58 41             	lea    ebx,[eax+0x41]
c001d715:	0f be db             	movsx  ebx,bl
c001d718:	53                   	push   ebx
c001d719:	8d 44 24 08          	lea    eax,[esp+0x8]
c001d71d:	50                   	push   eax
c001d71e:	6a 10                	push   0x10
c001d720:	e8 56 ff ff ff       	call   c001d67b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001d725:	83 c4 10             	add    esp,0x10
c001d728:	31 d2                	xor    edx,edx
c001d72a:	85 c0                	test   eax,eax
c001d72c:	75 33                	jne    c001d761 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d72e:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001d733:	75 2c                	jne    c001d761 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d735:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001d73a:	75 25                	jne    c001d761 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d73c:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001d741:	75 1e                	jne    c001d761 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d743:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001d748:	75 17                	jne    c001d761 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d74a:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001d74f:	75 10                	jne    c001d761 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d751:	83 ec 0c             	sub    esp,0xc
c001d754:	53                   	push   ebx
c001d755:	e8 d4 94 fe ff       	call   c0006c2e <init_percd>
c001d75a:	83 c4 10             	add    esp,0x10
c001d75d:	40                   	inc    eax
c001d75e:	0f 95 c2             	setne  dl
c001d761:	88 d0                	mov    al,dl
c001d763:	81 c4 08 08 00 00    	add    esp,0x808
c001d769:	5b                   	pop    ebx
c001d76a:	c3                   	ret    
c001d76b:	90                   	nop

c001d76c <ISO9660::ISO9660()>:
c001d76c:	83 ec 0c             	sub    esp,0xc
c001d76f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d773:	83 ec 0c             	sub    esp,0xc
c001d776:	50                   	push   eax
c001d777:	e8 4c a6 fe ff       	call   c0007dc8 <Filesystem::Filesystem()>
c001d77c:	83 c4 10             	add    esp,0x10
c001d77f:	ba ac 5f 02 c0       	mov    edx,0xc0025fac
c001d784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d788:	89 10                	mov    DWORD PTR [eax],edx
c001d78a:	e8 b1 95 fe ff       	call   c0006d40 <fs_iso9660_init>
c001d78f:	90                   	nop
c001d790:	83 c4 0c             	add    esp,0xc
c001d793:	c3                   	ret    

c001d794 <SoundCard::beginPlayback()>:
c001d794:	c7 44 24 04 10 60 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026010
c001d79c:	e9 45 28 ff ff       	jmp    c000ffe6 <KePanic(char const*)>
c001d7a1:	90                   	nop

c001d7a2 <SoundCard::stopPlayback()>:
c001d7a2:	c7 44 24 04 10 60 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026010
c001d7aa:	e9 37 28 ff ff       	jmp    c000ffe6 <KePanic(char const*)>
c001d7af:	90                   	nop

c001d7b0 <SoundCard::SoundCard(char const*)>:
c001d7b0:	83 ec 1c             	sub    esp,0x1c
c001d7b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7b7:	83 ec 08             	sub    esp,0x8
c001d7ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d7be:	50                   	push   eax
c001d7bf:	e8 f2 c3 fe ff       	call   c0009bb6 <Device::Device(char const*)>
c001d7c4:	83 c4 10             	add    esp,0x10
c001d7c7:	ba 5c 60 02 c0       	mov    edx,0xc002605c
c001d7cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7d0:	89 10                	mov    DWORD PTR [eax],edx
c001d7d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7d6:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d7dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7e1:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001d7eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7ef:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001d7f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7fd:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001d807:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d80b:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001d815:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d81d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001d822:	7f 1a                	jg     c001d83e <SoundCard::SoundCard(char const*)+0x8e>
c001d824:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d828:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d82c:	83 c2 54             	add    edx,0x54
c001d82f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001d837:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001d83c:	eb df                	jmp    c001d81d <SoundCard::SoundCard(char const*)+0x6d>
c001d83e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d842:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d849:	90                   	nop
c001d84a:	83 c4 1c             	add    esp,0x1c
c001d84d:	c3                   	ret    

c001d84e <SoundCard::~SoundCard()>:
c001d84e:	83 ec 0c             	sub    esp,0xc
c001d851:	ba 5c 60 02 c0       	mov    edx,0xc002605c
c001d856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d85a:	89 10                	mov    DWORD PTR [eax],edx
c001d85c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d860:	83 ec 0c             	sub    esp,0xc
c001d863:	50                   	push   eax
c001d864:	e8 ed c0 fe ff       	call   c0009956 <Device::~Device()>
c001d869:	83 c4 10             	add    esp,0x10
c001d86c:	90                   	nop
c001d86d:	83 c4 0c             	add    esp,0xc
c001d870:	c3                   	ret    
c001d871:	90                   	nop

c001d872 <SoundCard::~SoundCard()>:
c001d872:	83 ec 0c             	sub    esp,0xc
c001d875:	83 ec 0c             	sub    esp,0xc
c001d878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d87c:	e8 cd ff ff ff       	call   c001d84e <SoundCard::~SoundCard()>
c001d881:	83 c4 10             	add    esp,0x10
c001d884:	83 ec 08             	sub    esp,0x8
c001d887:	68 e8 01 00 00       	push   0x1e8
c001d88c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d890:	e8 54 fb fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c001d895:	83 c4 10             	add    esp,0x10
c001d898:	83 c4 0c             	add    esp,0xc
c001d89b:	c3                   	ret    

c001d89c <SoundCard::configureRates(int, int, int)>:
c001d89c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d8a0:	31 c0                	xor    eax,eax
c001d8a2:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001d8a9:	75 20                	jne    c001d8cb <SoundCard::configureRates(int, int, int)+0x2f>
c001d8ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d8af:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001d8b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d8b9:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001d8bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8c3:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001d8c9:	b0 01                	mov    al,0x1
c001d8cb:	c3                   	ret    

c001d8cc <SoundCard::getSamples16(int, short*)>:
c001d8cc:	55                   	push   ebp
c001d8cd:	57                   	push   edi
c001d8ce:	31 ff                	xor    edi,edi
c001d8d0:	56                   	push   esi
c001d8d1:	53                   	push   ebx
c001d8d2:	31 db                	xor    ebx,ebx
c001d8d4:	83 ec 10             	sub    esp,0x10
c001d8d7:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001d8db:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d8df:	8d 04 36             	lea    eax,[esi+esi*1]
c001d8e2:	50                   	push   eax
c001d8e3:	6a 00                	push   0x0
c001d8e5:	55                   	push   ebp
c001d8e6:	e8 05 2c fe ff       	call   c00004f0 <memset>
c001d8eb:	83 c4 10             	add    esp,0x10
c001d8ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8f2:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001d8f9:	85 c0                	test   eax,eax
c001d8fb:	74 1b                	je     c001d918 <SoundCard::getSamples16(int, short*)+0x4c>
c001d8fd:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d901:	75 15                	jne    c001d918 <SoundCard::getSamples16(int, short*)+0x4c>
c001d903:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d907:	55                   	push   ebp
c001d908:	56                   	push   esi
c001d909:	50                   	push   eax
c001d90a:	e8 8d 03 00 00       	call   c001dc9c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001d90f:	83 c4 10             	add    esp,0x10
c001d912:	39 c7                	cmp    edi,eax
c001d914:	7d 02                	jge    c001d918 <SoundCard::getSamples16(int, short*)+0x4c>
c001d916:	89 c7                	mov    edi,eax
c001d918:	43                   	inc    ebx
c001d919:	83 fb 20             	cmp    ebx,0x20
c001d91c:	75 d0                	jne    c001d8ee <SoundCard::getSamples16(int, short*)+0x22>
c001d91e:	83 c4 0c             	add    esp,0xc
c001d921:	89 f8                	mov    eax,edi
c001d923:	5b                   	pop    ebx
c001d924:	5e                   	pop    esi
c001d925:	5f                   	pop    edi
c001d926:	5d                   	pop    ebp
c001d927:	c3                   	ret    

c001d928 <SoundCard::getSamples32(int, int*)>:
c001d928:	55                   	push   ebp
c001d929:	57                   	push   edi
c001d92a:	31 ff                	xor    edi,edi
c001d92c:	56                   	push   esi
c001d92d:	31 f6                	xor    esi,esi
c001d92f:	53                   	push   ebx
c001d930:	83 ec 10             	sub    esp,0x10
c001d933:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d937:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d93b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d93f:	c1 e0 02             	shl    eax,0x2
c001d942:	50                   	push   eax
c001d943:	6a 00                	push   0x0
c001d945:	55                   	push   ebp
c001d946:	e8 a5 2b fe ff       	call   c00004f0 <memset>
c001d94b:	83 c4 10             	add    esp,0x10
c001d94e:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001d955:	85 c0                	test   eax,eax
c001d957:	74 1b                	je     c001d974 <SoundCard::getSamples32(int, int*)+0x4c>
c001d959:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d95d:	75 15                	jne    c001d974 <SoundCard::getSamples32(int, int*)+0x4c>
c001d95f:	53                   	push   ebx
c001d960:	55                   	push   ebp
c001d961:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d965:	50                   	push   eax
c001d966:	e8 fd 03 00 00       	call   c001dd68 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001d96b:	83 c4 10             	add    esp,0x10
c001d96e:	39 c6                	cmp    esi,eax
c001d970:	7d 02                	jge    c001d974 <SoundCard::getSamples32(int, int*)+0x4c>
c001d972:	89 c6                	mov    esi,eax
c001d974:	47                   	inc    edi
c001d975:	83 ff 20             	cmp    edi,0x20
c001d978:	75 d4                	jne    c001d94e <SoundCard::getSamples32(int, int*)+0x26>
c001d97a:	85 f6                	test   esi,esi
c001d97c:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001d983:	75 0f                	jne    c001d994 <SoundCard::getSamples32(int, int*)+0x6c>
c001d985:	85 c0                	test   eax,eax
c001d987:	74 1b                	je     c001d9a4 <SoundCard::getSamples32(int, int*)+0x7c>
c001d989:	83 ec 0c             	sub    esp,0xc
c001d98c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d98e:	53                   	push   ebx
c001d98f:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001d992:	eb 0d                	jmp    c001d9a1 <SoundCard::getSamples32(int, int*)+0x79>
c001d994:	85 c0                	test   eax,eax
c001d996:	75 0c                	jne    c001d9a4 <SoundCard::getSamples32(int, int*)+0x7c>
c001d998:	83 ec 0c             	sub    esp,0xc
c001d99b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d99d:	53                   	push   ebx
c001d99e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d9a1:	83 c4 10             	add    esp,0x10
c001d9a4:	83 c4 0c             	add    esp,0xc
c001d9a7:	89 f0                	mov    eax,esi
c001d9a9:	5b                   	pop    ebx
c001d9aa:	5e                   	pop    esi
c001d9ab:	5f                   	pop    edi
c001d9ac:	5d                   	pop    ebp
c001d9ad:	c3                   	ret    

c001d9ae <SoundCard::addChannel(SoundPort*)>:
c001d9ae:	83 ec 0c             	sub    esp,0xc
c001d9b1:	31 c0                	xor    eax,eax
c001d9b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d9b7:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001d9bf:	74 1b                	je     c001d9dc <SoundCard::addChannel(SoundPort*)+0x2e>
c001d9c1:	40                   	inc    eax
c001d9c2:	83 f8 20             	cmp    eax,0x20
c001d9c5:	75 f0                	jne    c001d9b7 <SoundCard::addChannel(SoundPort*)+0x9>
c001d9c7:	83 ec 0c             	sub    esp,0xc
c001d9ca:	68 35 60 02 c0       	push   0xc0026035
c001d9cf:	e8 12 26 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001d9d4:	83 c4 10             	add    esp,0x10
c001d9d7:	83 c8 ff             	or     eax,0xffffffff
c001d9da:	eb 0b                	jmp    c001d9e7 <SoundCard::addChannel(SoundPort*)+0x39>
c001d9dc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d9e0:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001d9e7:	83 c4 0c             	add    esp,0xc
c001d9ea:	c3                   	ret    
c001d9eb:	90                   	nop

c001d9ec <SoundCard::removeChannel(int)>:
c001d9ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d9f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d9f4:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001d9ff:	c3                   	ret    

c001da00 <SoundPort::SoundPort(int, int, int, int)>:
c001da00:	83 ec 0c             	sub    esp,0xc
c001da03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da07:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001da0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da12:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001da16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da1a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001da1e:	89 10                	mov    DWORD PTR [eax],edx
c001da20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da24:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001da28:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001da2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da2f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001da33:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001da36:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001da3b:	75 13                	jne    c001da50 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001da3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da41:	8b 00                	mov    eax,DWORD PTR [eax]
c001da43:	05 a0 0f 00 00       	add    eax,0xfa0
c001da48:	01 c0                	add    eax,eax
c001da4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001da4e:	66 90                	xchg   ax,ax
c001da50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da54:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001da58:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001da5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da5f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001da66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da6a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001da6d:	c1 e0 02             	shl    eax,0x2
c001da70:	83 ec 0c             	sub    esp,0xc
c001da73:	50                   	push   eax
c001da74:	e8 16 21 ff ff       	call   c000fb8f <malloc>
c001da79:	83 c4 10             	add    esp,0x10
c001da7c:	89 c2                	mov    edx,eax
c001da7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da82:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001da85:	90                   	nop
c001da86:	83 c4 0c             	add    esp,0xc
c001da89:	c3                   	ret    
c001da8a:	66 90                	xchg   ax,ax

c001da8c <SoundPort::~SoundPort()>:
c001da8c:	83 ec 0c             	sub    esp,0xc
c001da8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da93:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001da96:	85 c0                	test   eax,eax
c001da98:	74 1e                	je     c001dab8 <SoundPort::~SoundPort()+0x2c>
c001da9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da9e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001daa1:	83 ec 0c             	sub    esp,0xc
c001daa4:	50                   	push   eax
c001daa5:	e8 f5 20 ff ff       	call   c000fb9f <free>
c001daaa:	83 c4 10             	add    esp,0x10
c001daad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dab1:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001dab8:	90                   	nop
c001dab9:	83 c4 0c             	add    esp,0xc
c001dabc:	c3                   	ret    
c001dabd:	90                   	nop
c001dabe:	66 90                	xchg   ax,ax

c001dac0 <SoundPort::unpause()>:
c001dac0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dac4:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001dac8:	c3                   	ret    
c001dac9:	90                   	nop
c001daca:	66 90                	xchg   ax,ax

c001dacc <SoundPort::pause()>:
c001dacc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dad0:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001dad4:	c3                   	ret    
c001dad5:	90                   	nop
c001dad6:	66 90                	xchg   ax,ax

c001dad8 <SoundPort::getBufferUsed()>:
c001dad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dadc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001dadf:	c3                   	ret    

c001dae0 <SoundPort::getBufferSize()>:
c001dae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dae4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001dae7:	c3                   	ret    

c001dae8 <SoundPort::buffer8(signed char*, int)>:
c001dae8:	55                   	push   ebp
c001dae9:	57                   	push   edi
c001daea:	56                   	push   esi
c001daeb:	53                   	push   ebx
c001daec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001daf0:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001daf4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001daf7:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001dafa:	74 70                	je     c001db6c <SoundPort::buffer8(signed char*, int)+0x84>
c001dafc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001db00:	85 c9                	test   ecx,ecx
c001db02:	7e 68                	jle    c001db6c <SoundPort::buffer8(signed char*, int)+0x84>
c001db04:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001db08:	8d 48 01             	lea    ecx,[eax+0x1]
c001db0b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001db0e:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001db11:	89 f1                	mov    ecx,esi
c001db13:	c1 e1 18             	shl    ecx,0x18
c001db16:	29 f1                	sub    ecx,esi
c001db18:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001db1b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001db1e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001db21:	74 51                	je     c001db74 <SoundPort::buffer8(signed char*, int)+0x8c>
c001db23:	31 ff                	xor    edi,edi
c001db25:	eb 25                	jmp    c001db4c <SoundPort::buffer8(signed char*, int)+0x64>
c001db27:	90                   	nop
c001db28:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001db2d:	8d 59 01             	lea    ebx,[ecx+0x1]
c001db30:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001db33:	89 f3                	mov    ebx,esi
c001db35:	c1 e3 18             	shl    ebx,0x18
c001db38:	29 f3                	sub    ebx,esi
c001db3a:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001db3d:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001db40:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001db43:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001db46:	74 1c                	je     c001db64 <SoundPort::buffer8(signed char*, int)+0x7c>
c001db48:	89 c7                	mov    edi,eax
c001db4a:	66 90                	xchg   ax,ax
c001db4c:	8d 47 01             	lea    eax,[edi+0x1]
c001db4f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001db53:	75 d3                	jne    c001db28 <SoundPort::buffer8(signed char*, int)+0x40>
c001db55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db59:	8d 76 00             	lea    esi,[esi+0x0]
c001db5c:	5b                   	pop    ebx
c001db5d:	5e                   	pop    esi
c001db5e:	5f                   	pop    edi
c001db5f:	5d                   	pop    ebp
c001db60:	c3                   	ret    
c001db61:	8d 76 00             	lea    esi,[esi+0x0]
c001db64:	5b                   	pop    ebx
c001db65:	8d 47 02             	lea    eax,[edi+0x2]
c001db68:	5e                   	pop    esi
c001db69:	5f                   	pop    edi
c001db6a:	5d                   	pop    ebp
c001db6b:	c3                   	ret    
c001db6c:	5b                   	pop    ebx
c001db6d:	31 c0                	xor    eax,eax
c001db6f:	5e                   	pop    esi
c001db70:	5f                   	pop    edi
c001db71:	5d                   	pop    ebp
c001db72:	c3                   	ret    
c001db73:	90                   	nop
c001db74:	b8 01 00 00 00       	mov    eax,0x1
c001db79:	eb e1                	jmp    c001db5c <SoundPort::buffer8(signed char*, int)+0x74>
c001db7b:	90                   	nop

c001db7c <SoundPort::buffer16(short*, int)>:
c001db7c:	55                   	push   ebp
c001db7d:	57                   	push   edi
c001db7e:	56                   	push   esi
c001db7f:	53                   	push   ebx
c001db80:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001db84:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001db88:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001db8b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001db8e:	74 70                	je     c001dc00 <SoundPort::buffer16(short*, int)+0x84>
c001db90:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001db94:	85 c9                	test   ecx,ecx
c001db96:	7e 68                	jle    c001dc00 <SoundPort::buffer16(short*, int)+0x84>
c001db98:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001db9c:	8d 48 01             	lea    ecx,[eax+0x1]
c001db9f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001dba2:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001dba5:	89 f1                	mov    ecx,esi
c001dba7:	c1 e1 10             	shl    ecx,0x10
c001dbaa:	29 f1                	sub    ecx,esi
c001dbac:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001dbaf:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dbb2:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dbb5:	74 51                	je     c001dc08 <SoundPort::buffer16(short*, int)+0x8c>
c001dbb7:	31 ff                	xor    edi,edi
c001dbb9:	eb 25                	jmp    c001dbe0 <SoundPort::buffer16(short*, int)+0x64>
c001dbbb:	90                   	nop
c001dbbc:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001dbc1:	8d 59 01             	lea    ebx,[ecx+0x1]
c001dbc4:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001dbc7:	89 f3                	mov    ebx,esi
c001dbc9:	c1 e3 10             	shl    ebx,0x10
c001dbcc:	29 f3                	sub    ebx,esi
c001dbce:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001dbd1:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001dbd4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dbd7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dbda:	74 1c                	je     c001dbf8 <SoundPort::buffer16(short*, int)+0x7c>
c001dbdc:	89 c7                	mov    edi,eax
c001dbde:	66 90                	xchg   ax,ax
c001dbe0:	8d 47 01             	lea    eax,[edi+0x1]
c001dbe3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001dbe7:	75 d3                	jne    c001dbbc <SoundPort::buffer16(short*, int)+0x40>
c001dbe9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dbed:	8d 76 00             	lea    esi,[esi+0x0]
c001dbf0:	5b                   	pop    ebx
c001dbf1:	5e                   	pop    esi
c001dbf2:	5f                   	pop    edi
c001dbf3:	5d                   	pop    ebp
c001dbf4:	c3                   	ret    
c001dbf5:	8d 76 00             	lea    esi,[esi+0x0]
c001dbf8:	5b                   	pop    ebx
c001dbf9:	8d 47 02             	lea    eax,[edi+0x2]
c001dbfc:	5e                   	pop    esi
c001dbfd:	5f                   	pop    edi
c001dbfe:	5d                   	pop    ebp
c001dbff:	c3                   	ret    
c001dc00:	5b                   	pop    ebx
c001dc01:	31 c0                	xor    eax,eax
c001dc03:	5e                   	pop    esi
c001dc04:	5f                   	pop    edi
c001dc05:	5d                   	pop    ebp
c001dc06:	c3                   	ret    
c001dc07:	90                   	nop
c001dc08:	b8 01 00 00 00       	mov    eax,0x1
c001dc0d:	eb e1                	jmp    c001dbf0 <SoundPort::buffer16(short*, int)+0x74>
c001dc0f:	90                   	nop

c001dc10 <SoundPort::buffer32(int*, int)>:
c001dc10:	55                   	push   ebp
c001dc11:	57                   	push   edi
c001dc12:	56                   	push   esi
c001dc13:	53                   	push   ebx
c001dc14:	83 ec 04             	sub    esp,0x4
c001dc17:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dc1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc1f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dc22:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001dc26:	89 04 24             	mov    DWORD PTR [esp],eax
c001dc29:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dc2c:	74 5a                	je     c001dc88 <SoundPort::buffer32(int*, int)+0x78>
c001dc2e:	85 c0                	test   eax,eax
c001dc30:	7e 56                	jle    c001dc88 <SoundPort::buffer32(int*, int)+0x78>
c001dc32:	8d 71 01             	lea    esi,[ecx+0x1]
c001dc35:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001dc38:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001dc3b:	8b 37                	mov    esi,DWORD PTR [edi]
c001dc3d:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001dc40:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dc43:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dc46:	74 4c                	je     c001dc94 <SoundPort::buffer32(int*, int)+0x84>
c001dc48:	31 f6                	xor    esi,esi
c001dc4a:	eb 1c                	jmp    c001dc68 <SoundPort::buffer32(int*, int)+0x58>
c001dc4c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001dc4f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001dc52:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001dc55:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001dc58:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001dc5c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dc5f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dc62:	74 18                	je     c001dc7c <SoundPort::buffer32(int*, int)+0x6c>
c001dc64:	89 de                	mov    esi,ebx
c001dc66:	66 90                	xchg   ax,ax
c001dc68:	8d 5e 01             	lea    ebx,[esi+0x1]
c001dc6b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001dc6e:	75 dc                	jne    c001dc4c <SoundPort::buffer32(int*, int)+0x3c>
c001dc70:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001dc73:	90                   	nop
c001dc74:	83 c4 04             	add    esp,0x4
c001dc77:	5b                   	pop    ebx
c001dc78:	5e                   	pop    esi
c001dc79:	5f                   	pop    edi
c001dc7a:	5d                   	pop    ebp
c001dc7b:	c3                   	ret    
c001dc7c:	83 c4 04             	add    esp,0x4
c001dc7f:	8d 46 02             	lea    eax,[esi+0x2]
c001dc82:	5b                   	pop    ebx
c001dc83:	5e                   	pop    esi
c001dc84:	5f                   	pop    edi
c001dc85:	5d                   	pop    ebp
c001dc86:	c3                   	ret    
c001dc87:	90                   	nop
c001dc88:	83 c4 04             	add    esp,0x4
c001dc8b:	31 c0                	xor    eax,eax
c001dc8d:	5b                   	pop    ebx
c001dc8e:	5e                   	pop    esi
c001dc8f:	5f                   	pop    edi
c001dc90:	5d                   	pop    ebp
c001dc91:	c3                   	ret    
c001dc92:	66 90                	xchg   ax,ax
c001dc94:	b8 01 00 00 00       	mov    eax,0x1
c001dc99:	eb d9                	jmp    c001dc74 <SoundPort::buffer32(int*, int)+0x64>
c001dc9b:	90                   	nop

c001dc9c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001dc9c:	57                   	push   edi
c001dc9d:	56                   	push   esi
c001dc9e:	53                   	push   ebx
c001dc9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dca3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001dca7:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001dcad:	39 03                	cmp    DWORD PTR [ebx],eax
c001dcaf:	74 13                	je     c001dcc4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001dcb1:	83 ec 0c             	sub    esp,0xc
c001dcb4:	68 88 60 02 c0       	push   0xc0026088
c001dcb9:	e8 28 23 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001dcbe:	83 c4 10             	add    esp,0x10
c001dcc1:	8d 76 00             	lea    esi,[esi+0x0]
c001dcc4:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001dcca:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001dccd:	74 11                	je     c001dce0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001dccf:	83 ec 0c             	sub    esp,0xc
c001dcd2:	68 c7 60 02 c0       	push   0xc00260c7
c001dcd7:	e8 0a 23 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001dcdc:	83 c4 10             	add    esp,0x10
c001dcdf:	90                   	nop
c001dce0:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001dce6:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001dce9:	74 11                	je     c001dcfc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001dceb:	83 ec 0c             	sub    esp,0xc
c001dcee:	68 c7 60 02 c0       	push   0xc00260c7
c001dcf3:	e8 ee 22 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001dcf8:	83 c4 10             	add    esp,0x10
c001dcfb:	90                   	nop
c001dcfc:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001dcff:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001dd03:	7e 07                	jle    c001dd0c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001dd05:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001dd09:	8d 76 00             	lea    esi,[esi+0x0]
c001dd0c:	85 f6                	test   esi,esi
c001dd0e:	7e 2c                	jle    c001dd3c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001dd10:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dd14:	8d 3c 36             	lea    edi,[esi+esi*1]
c001dd17:	31 c9                	xor    ecx,ecx
c001dd19:	01 d7                	add    edi,edx
c001dd1b:	90                   	nop
c001dd1c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001dd1f:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001dd22:	85 c0                	test   eax,eax
c001dd24:	79 06                	jns    c001dd2c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001dd26:	05 ff 7f 00 00       	add    eax,0x7fff
c001dd2b:	90                   	nop
c001dd2c:	c1 f8 0f             	sar    eax,0xf
c001dd2f:	83 c1 04             	add    ecx,0x4
c001dd32:	66 01 02             	add    WORD PTR [edx],ax
c001dd35:	83 c2 02             	add    edx,0x2
c001dd38:	39 d7                	cmp    edi,edx
c001dd3a:	75 e0                	jne    c001dd1c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001dd3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001dd3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001dd42:	83 ec 04             	sub    esp,0x4
c001dd45:	29 f0                	sub    eax,esi
c001dd47:	c1 e0 02             	shl    eax,0x2
c001dd4a:	50                   	push   eax
c001dd4b:	8d 04 b2             	lea    eax,[edx+esi*4]
c001dd4e:	50                   	push   eax
c001dd4f:	52                   	push   edx
c001dd50:	e8 7b 26 fe ff       	call   c00003d0 <memmove>
c001dd55:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001dd58:	83 c4 10             	add    esp,0x10
c001dd5b:	29 f0                	sub    eax,esi
c001dd5d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001dd60:	89 f0                	mov    eax,esi
c001dd62:	5b                   	pop    ebx
c001dd63:	5e                   	pop    esi
c001dd64:	5f                   	pop    edi
c001dd65:	c3                   	ret    
c001dd66:	66 90                	xchg   ax,ax

c001dd68 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001dd68:	57                   	push   edi
c001dd69:	56                   	push   esi
c001dd6a:	53                   	push   ebx
c001dd6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dd6f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001dd73:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001dd77:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001dd7d:	39 06                	cmp    DWORD PTR [esi],eax
c001dd7f:	74 13                	je     c001dd94 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001dd81:	83 ec 0c             	sub    esp,0xc
c001dd84:	68 a8 60 02 c0       	push   0xc00260a8
c001dd89:	e8 58 22 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001dd8e:	83 c4 10             	add    esp,0x10
c001dd91:	8d 76 00             	lea    esi,[esi+0x0]
c001dd94:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001dd9a:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001dd9d:	74 11                	je     c001ddb0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001dd9f:	83 ec 0c             	sub    esp,0xc
c001dda2:	68 e3 60 02 c0       	push   0xc00260e3
c001dda7:	e8 3a 22 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001ddac:	83 c4 10             	add    esp,0x10
c001ddaf:	90                   	nop
c001ddb0:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001ddb6:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001ddb9:	74 11                	je     c001ddcc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001ddbb:	83 ec 0c             	sub    esp,0xc
c001ddbe:	68 e3 60 02 c0       	push   0xc00260e3
c001ddc3:	e8 1e 22 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001ddc8:	83 c4 10             	add    esp,0x10
c001ddcb:	90                   	nop
c001ddcc:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001ddcf:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001ddd3:	7e 07                	jle    c001dddc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001ddd5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ddd9:	8d 76 00             	lea    esi,[esi+0x0]
c001dddc:	85 ff                	test   edi,edi
c001ddde:	7e 1c                	jle    c001ddfc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001dde0:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001dde7:	31 c0                	xor    eax,eax
c001dde9:	8d 76 00             	lea    esi,[esi+0x0]
c001ddec:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ddef:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001ddf2:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001ddf5:	83 c0 04             	add    eax,0x4
c001ddf8:	39 c1                	cmp    ecx,eax
c001ddfa:	75 f0                	jne    c001ddec <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001ddfc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ddff:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001de02:	83 ec 04             	sub    esp,0x4
c001de05:	29 f8                	sub    eax,edi
c001de07:	c1 e0 02             	shl    eax,0x2
c001de0a:	50                   	push   eax
c001de0b:	8d 04 ba             	lea    eax,[edx+edi*4]
c001de0e:	50                   	push   eax
c001de0f:	52                   	push   edx
c001de10:	e8 bb 25 fe ff       	call   c00003d0 <memmove>
c001de15:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001de18:	83 c4 10             	add    esp,0x10
c001de1b:	29 f8                	sub    eax,edi
c001de1d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001de20:	89 f8                	mov    eax,edi
c001de22:	5b                   	pop    ebx
c001de23:	5e                   	pop    esi
c001de24:	5f                   	pop    edi
c001de25:	c3                   	ret    

c001de26 <PCI::open(int, int, void*)>:
c001de26:	83 ec 18             	sub    esp,0x18
c001de29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001de2d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001de31:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001de37:	8b 10                	mov    edx,DWORD PTR [eax]
c001de39:	50                   	push   eax
c001de3a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001de3d:	31 c0                	xor    eax,eax
c001de3f:	83 c4 1c             	add    esp,0x1c
c001de42:	c3                   	ret    
c001de43:	90                   	nop

c001de44 <PCI::close(int, int, void*)>:
c001de44:	31 c0                	xor    eax,eax
c001de46:	c3                   	ret    
c001de47:	90                   	nop

c001de48 <PCI::PCI()>:
c001de48:	83 ec 0c             	sub    esp,0xc
c001de4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de4f:	83 ec 08             	sub    esp,0x8
c001de52:	68 ff 60 02 c0       	push   0xc00260ff
c001de57:	50                   	push   eax
c001de58:	e8 07 ab fe ff       	call   c0008964 <Bus::Bus(char const*)>
c001de5d:	83 c4 10             	add    esp,0x10
c001de60:	ba 0c 62 02 c0       	mov    edx,0xc002620c
c001de65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de69:	89 10                	mov    DWORD PTR [eax],edx
c001de6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de6f:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001de79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de7d:	a3 80 04 03 c0       	mov    ds:0xc0030480,eax
c001de82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de86:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001de8c:	0f b6 d0             	movzx  edx,al
c001de8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de93:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001de9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de9e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dea4:	0f b6 d0             	movzx  edx,al
c001dea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001deab:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001deb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001deb4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001deba:	8d 50 01             	lea    edx,[eax+0x1]
c001debd:	88 d1                	mov    cl,dl
c001debf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dec3:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001dec9:	0f b6 d0             	movzx  edx,al
c001decc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ded0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ded4:	83 c9 c0             	or     ecx,0xffffffc0
c001ded7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dedb:	90                   	nop
c001dedc:	83 c4 0c             	add    esp,0xc
c001dedf:	c3                   	ret    

c001dee0 <PCI::readBAR8(unsigned int, int)>:
c001dee0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dee8:	f6 c2 01             	test   dl,0x1
c001deeb:	74 07                	je     c001def4 <PCI::readBAR8(unsigned int, int)+0x14>
c001deed:	83 e2 fc             	and    edx,0xfffffffc
c001def0:	01 c2                	add    edx,eax
c001def2:	ec                   	in     al,dx
c001def3:	c3                   	ret    
c001def4:	83 e2 f0             	and    edx,0xfffffff0
c001def7:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001defa:	c3                   	ret    
c001defb:	90                   	nop

c001defc <PCI::readBAR16(unsigned int, int)>:
c001defc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001df00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001df04:	f6 c2 01             	test   dl,0x1
c001df07:	74 08                	je     c001df11 <PCI::readBAR16(unsigned int, int)+0x15>
c001df09:	83 e2 fc             	and    edx,0xfffffffc
c001df0c:	01 c2                	add    edx,eax
c001df0e:	66 ed                	in     ax,dx
c001df10:	c3                   	ret    
c001df11:	83 e2 f0             	and    edx,0xfffffff0
c001df14:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001df18:	c3                   	ret    
c001df19:	90                   	nop

c001df1a <PCI::readBAR32(unsigned int, int)>:
c001df1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001df1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001df22:	f6 c2 01             	test   dl,0x1
c001df25:	74 07                	je     c001df2e <PCI::readBAR32(unsigned int, int)+0x14>
c001df27:	83 e2 fc             	and    edx,0xfffffffc
c001df2a:	01 c2                	add    edx,eax
c001df2c:	ed                   	in     eax,dx
c001df2d:	c3                   	ret    
c001df2e:	83 e2 f0             	and    edx,0xfffffff0
c001df31:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001df34:	c3                   	ret    
c001df35:	90                   	nop

c001df36 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001df36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001df3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001df3e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001df42:	f6 c2 01             	test   dl,0x1
c001df45:	74 07                	je     c001df4e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001df47:	83 e2 fc             	and    edx,0xfffffffc
c001df4a:	01 ca                	add    edx,ecx
c001df4c:	ee                   	out    dx,al
c001df4d:	c3                   	ret    
c001df4e:	83 e2 f0             	and    edx,0xfffffff0
c001df51:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001df54:	c3                   	ret    
c001df55:	90                   	nop

c001df56 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001df56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001df5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001df5e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001df62:	f6 c2 01             	test   dl,0x1
c001df65:	74 08                	je     c001df6f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001df67:	83 e2 fc             	and    edx,0xfffffffc
c001df6a:	01 ca                	add    edx,ecx
c001df6c:	66 ef                	out    dx,ax
c001df6e:	c3                   	ret    
c001df6f:	83 e2 f0             	and    edx,0xfffffff0
c001df72:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001df76:	c3                   	ret    
c001df77:	90                   	nop

c001df78 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001df78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001df7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001df80:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001df84:	f6 c2 01             	test   dl,0x1
c001df87:	74 07                	je     c001df90 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001df89:	83 e2 fc             	and    edx,0xfffffffc
c001df8c:	01 ca                	add    edx,ecx
c001df8e:	ef                   	out    dx,eax
c001df8f:	c3                   	ret    
c001df90:	83 e2 f0             	and    edx,0xfffffff0
c001df93:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001df96:	c3                   	ret    
c001df97:	90                   	nop

c001df98 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001df98:	55                   	push   ebp
c001df99:	57                   	push   edi
c001df9a:	56                   	push   esi
c001df9b:	53                   	push   ebx
c001df9c:	83 ec 0c             	sub    esp,0xc
c001df9f:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001dfa4:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001dfa8:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001dfac:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001dfb0:	83 fe 07             	cmp    esi,0x7
c001dfb3:	76 10                	jbe    c001dfc5 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001dfb5:	83 ec 0c             	sub    esp,0xc
c001dfb8:	68 07 61 02 c0       	push   0xc0026107
c001dfbd:	e8 24 20 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001dfc2:	83 c4 10             	add    esp,0x10
c001dfc5:	0f b6 db             	movzx  ebx,bl
c001dfc8:	83 fb 0f             	cmp    ebx,0xf
c001dfcb:	76 10                	jbe    c001dfdd <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001dfcd:	83 ec 0c             	sub    esp,0xc
c001dfd0:	68 37 61 02 c0       	push   0xc0026137
c001dfd5:	e8 0c 20 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001dfda:	83 c4 10             	add    esp,0x10
c001dfdd:	8d 04 36             	lea    eax,[esi+esi*1]
c001dfe0:	ba f8 0c 00 00       	mov    edx,0xcf8
c001dfe5:	83 c8 f0             	or     eax,0xfffffff0
c001dfe8:	ee                   	out    dx,al
c001dfe9:	ba fa 0c 00 00       	mov    edx,0xcfa
c001dfee:	89 e8                	mov    eax,ebp
c001dff0:	ee                   	out    dx,al
c001dff1:	83 c4 0c             	add    esp,0xc
c001dff4:	89 d8                	mov    eax,ebx
c001dff6:	89 f9                	mov    ecx,edi
c001dff8:	c1 e0 08             	shl    eax,0x8
c001dffb:	0f b6 d9             	movzx  ebx,cl
c001dffe:	83 e3 fc             	and    ebx,0xfffffffc
c001e001:	09 d8                	or     eax,ebx
c001e003:	5b                   	pop    ebx
c001e004:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001e009:	5e                   	pop    esi
c001e00a:	5f                   	pop    edi
c001e00b:	5d                   	pop    ebp
c001e00c:	c3                   	ret    
c001e00d:	90                   	nop

c001e00e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001e00e:	57                   	push   edi
c001e00f:	56                   	push   esi
c001e010:	53                   	push   ebx
c001e011:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e015:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e019:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001e01f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e023:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e027:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e02b:	83 ff 01             	cmp    edi,0x1
c001e02e:	75 3f                	jne    c001e06f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001e030:	89 de                	mov    esi,ebx
c001e032:	0f b6 c0             	movzx  eax,al
c001e035:	81 e6 fc 00 00 00    	and    esi,0xfc
c001e03b:	c1 e0 10             	shl    eax,0x10
c001e03e:	0f b6 c9             	movzx  ecx,cl
c001e041:	09 f0                	or     eax,esi
c001e043:	c1 e1 08             	shl    ecx,0x8
c001e046:	0f b6 d2             	movzx  edx,dl
c001e049:	09 c8                	or     eax,ecx
c001e04b:	c1 e2 0b             	shl    edx,0xb
c001e04e:	09 d0                	or     eax,edx
c001e050:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e055:	0d 00 00 00 80       	or     eax,0x80000000
c001e05a:	ef                   	out    dx,eax
c001e05b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e060:	ed                   	in     eax,dx
c001e061:	83 e3 02             	and    ebx,0x2
c001e064:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001e06b:	d3 e8                	shr    eax,cl
c001e06d:	eb 44                	jmp    c001e0b3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001e06f:	83 ff 02             	cmp    edi,0x2
c001e072:	75 2d                	jne    c001e0a1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001e074:	83 ec 0c             	sub    esp,0xc
c001e077:	0f b6 c9             	movzx  ecx,cl
c001e07a:	0f b6 d2             	movzx  edx,dl
c001e07d:	0f b6 fb             	movzx  edi,bl
c001e080:	0f b6 c0             	movzx  eax,al
c001e083:	57                   	push   edi
c001e084:	51                   	push   ecx
c001e085:	52                   	push   edx
c001e086:	50                   	push   eax
c001e087:	56                   	push   esi
c001e088:	e8 0b ff ff ff       	call   c001df98 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e08d:	89 c2                	mov    edx,eax
c001e08f:	ed                   	in     eax,dx
c001e090:	83 e3 02             	and    ebx,0x2
c001e093:	83 c4 20             	add    esp,0x20
c001e096:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001e09d:	d3 e8                	shr    eax,cl
c001e09f:	eb 12                	jmp    c001e0b3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001e0a1:	83 ec 0c             	sub    esp,0xc
c001e0a4:	68 67 61 02 c0       	push   0xc0026167
c001e0a9:	e8 38 1f ff ff       	call   c000ffe6 <KePanic(char const*)>
c001e0ae:	83 c4 10             	add    esp,0x10
c001e0b1:	31 c0                	xor    eax,eax
c001e0b3:	5b                   	pop    ebx
c001e0b4:	5e                   	pop    esi
c001e0b5:	5f                   	pop    edi
c001e0b6:	c3                   	ret    
c001e0b7:	90                   	nop

c001e0b8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001e0b8:	83 ec 18             	sub    esp,0x18
c001e0bb:	6a 00                	push   0x0
c001e0bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e0c2:	50                   	push   eax
c001e0c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e0c8:	50                   	push   eax
c001e0c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e0ce:	50                   	push   eax
c001e0cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e0d3:	e8 36 ff ff ff       	call   c001e00e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e0d8:	83 c4 2c             	add    esp,0x2c
c001e0db:	c3                   	ret    

c001e0dc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001e0dc:	83 ec 18             	sub    esp,0x18
c001e0df:	6a 0e                	push   0xe
c001e0e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e0e6:	50                   	push   eax
c001e0e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e0ec:	50                   	push   eax
c001e0ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e0f2:	50                   	push   eax
c001e0f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e0f7:	e8 12 ff ff ff       	call   c001e00e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e0fc:	83 c4 2c             	add    esp,0x2c
c001e0ff:	0f b6 c0             	movzx  eax,al
c001e102:	c3                   	ret    
c001e103:	90                   	nop

c001e104 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001e104:	55                   	push   ebp
c001e105:	57                   	push   edi
c001e106:	56                   	push   esi
c001e107:	53                   	push   ebx
c001e108:	83 ec 18             	sub    esp,0x18
c001e10b:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001e110:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001e115:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001e11a:	6a 0a                	push   0xa
c001e11c:	56                   	push   esi
c001e11d:	55                   	push   ebp
c001e11e:	57                   	push   edi
c001e11f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e123:	e8 e6 fe ff ff       	call   c001e00e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e128:	83 c4 14             	add    esp,0x14
c001e12b:	89 c3                	mov    ebx,eax
c001e12d:	6a 0a                	push   0xa
c001e12f:	0f b6 db             	movzx  ebx,bl
c001e132:	56                   	push   esi
c001e133:	55                   	push   ebp
c001e134:	57                   	push   edi
c001e135:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e139:	e8 d0 fe ff ff       	call   c001e00e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e13e:	83 c4 2c             	add    esp,0x2c
c001e141:	25 00 ff 00 00       	and    eax,0xff00
c001e146:	09 d8                	or     eax,ebx
c001e148:	5b                   	pop    ebx
c001e149:	5e                   	pop    esi
c001e14a:	5f                   	pop    edi
c001e14b:	5d                   	pop    ebp
c001e14c:	c3                   	ret    
c001e14d:	90                   	nop

c001e14e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001e14e:	83 ec 18             	sub    esp,0x18
c001e151:	6a 08                	push   0x8
c001e153:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e158:	50                   	push   eax
c001e159:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e15e:	50                   	push   eax
c001e15f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e164:	50                   	push   eax
c001e165:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e169:	e8 a0 fe ff ff       	call   c001e00e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e16e:	83 c4 2c             	add    esp,0x2c
c001e171:	0f b6 c4             	movzx  eax,ah
c001e174:	c3                   	ret    
c001e175:	90                   	nop

c001e176 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001e176:	83 ec 18             	sub    esp,0x18
c001e179:	6a 08                	push   0x8
c001e17b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e180:	50                   	push   eax
c001e181:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e186:	50                   	push   eax
c001e187:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e18c:	50                   	push   eax
c001e18d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e191:	e8 78 fe ff ff       	call   c001e00e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e196:	83 c4 2c             	add    esp,0x2c
c001e199:	c3                   	ret    

c001e19a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001e19a:	83 ec 18             	sub    esp,0x18
c001e19d:	6a 3c                	push   0x3c
c001e19f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e1a4:	50                   	push   eax
c001e1a5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e1aa:	50                   	push   eax
c001e1ab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e1b0:	50                   	push   eax
c001e1b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e1b5:	e8 54 fe ff ff       	call   c001e00e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e1ba:	83 c4 2c             	add    esp,0x2c
c001e1bd:	c3                   	ret    

c001e1be <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001e1be:	83 ec 18             	sub    esp,0x18
c001e1c1:	6a 18                	push   0x18
c001e1c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e1c8:	50                   	push   eax
c001e1c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e1ce:	50                   	push   eax
c001e1cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e1d4:	50                   	push   eax
c001e1d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e1d9:	e8 30 fe ff ff       	call   c001e00e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e1de:	83 c4 2c             	add    esp,0x2c
c001e1e1:	0f b6 c4             	movzx  eax,ah
c001e1e4:	c3                   	ret    
c001e1e5:	90                   	nop

c001e1e6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001e1e6:	55                   	push   ebp
c001e1e7:	57                   	push   edi
c001e1e8:	56                   	push   esi
c001e1e9:	53                   	push   ebx
c001e1ea:	83 ec 28             	sub    esp,0x28
c001e1ed:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e1f1:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001e1f6:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001e1fb:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001e200:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001e207:	8d 43 12             	lea    eax,[ebx+0x12]
c001e20a:	83 c3 10             	add    ebx,0x10
c001e20d:	0f b6 c0             	movzx  eax,al
c001e210:	0f b6 db             	movzx  ebx,bl
c001e213:	50                   	push   eax
c001e214:	51                   	push   ecx
c001e215:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001e219:	57                   	push   edi
c001e21a:	55                   	push   ebp
c001e21b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e21f:	e8 ea fd ff ff       	call   c001e00e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e224:	83 c4 14             	add    esp,0x14
c001e227:	89 c6                	mov    esi,eax
c001e229:	53                   	push   ebx
c001e22a:	c1 e6 10             	shl    esi,0x10
c001e22d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e231:	51                   	push   ecx
c001e232:	57                   	push   edi
c001e233:	55                   	push   ebp
c001e234:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e238:	e8 d1 fd ff ff       	call   c001e00e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e23d:	83 c4 3c             	add    esp,0x3c
c001e240:	0f b7 c0             	movzx  eax,ax
c001e243:	5b                   	pop    ebx
c001e244:	09 f0                	or     eax,esi
c001e246:	5e                   	pop    esi
c001e247:	5f                   	pop    edi
c001e248:	5d                   	pop    ebp
c001e249:	c3                   	ret    

c001e24a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001e24a:	55                   	push   ebp
c001e24b:	57                   	push   edi
c001e24c:	56                   	push   esi
c001e24d:	53                   	push   ebx
c001e24e:	83 ec 0c             	sub    esp,0xc
c001e251:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001e255:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e259:	89 f5                	mov    ebp,esi
c001e25b:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001e261:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e265:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e269:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e26d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e271:	83 f9 01             	cmp    ecx,0x1
c001e274:	75 5d                	jne    c001e2d3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001e276:	0f b6 c8             	movzx  ecx,al
c001e279:	0f b6 d2             	movzx  edx,dl
c001e27c:	c1 e1 10             	shl    ecx,0x10
c001e27f:	c1 e2 0b             	shl    edx,0xb
c001e282:	89 f0                	mov    eax,esi
c001e284:	25 fc 00 00 00       	and    eax,0xfc
c001e289:	09 c1                	or     ecx,eax
c001e28b:	89 e8                	mov    eax,ebp
c001e28d:	0f b6 c0             	movzx  eax,al
c001e290:	c1 e0 08             	shl    eax,0x8
c001e293:	09 c1                	or     ecx,eax
c001e295:	09 d1                	or     ecx,edx
c001e297:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e29c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001e2a2:	89 c8                	mov    eax,ecx
c001e2a4:	ef                   	out    dx,eax
c001e2a5:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e2aa:	ed                   	in     eax,dx
c001e2ab:	0f b7 db             	movzx  ebx,bx
c001e2ae:	83 e6 02             	and    esi,0x2
c001e2b1:	74 0a                	je     c001e2bd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001e2b3:	0f b7 d0             	movzx  edx,ax
c001e2b6:	c1 e3 10             	shl    ebx,0x10
c001e2b9:	09 d3                	or     ebx,edx
c001e2bb:	eb 05                	jmp    c001e2c2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001e2bd:	66 31 c0             	xor    ax,ax
c001e2c0:	09 c3                	or     ebx,eax
c001e2c2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e2c7:	89 c8                	mov    eax,ecx
c001e2c9:	ef                   	out    dx,eax
c001e2ca:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e2cf:	89 d8                	mov    eax,ebx
c001e2d1:	eb 41                	jmp    c001e314 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001e2d3:	83 f9 02             	cmp    ecx,0x2
c001e2d6:	75 45                	jne    c001e31d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001e2d8:	83 ec 0c             	sub    esp,0xc
c001e2db:	0f b6 d2             	movzx  edx,dl
c001e2de:	89 f1                	mov    ecx,esi
c001e2e0:	0f b6 c0             	movzx  eax,al
c001e2e3:	0f b6 f1             	movzx  esi,cl
c001e2e6:	89 e9                	mov    ecx,ebp
c001e2e8:	56                   	push   esi
c001e2e9:	0f b6 c9             	movzx  ecx,cl
c001e2ec:	51                   	push   ecx
c001e2ed:	52                   	push   edx
c001e2ee:	50                   	push   eax
c001e2ef:	57                   	push   edi
c001e2f0:	e8 a3 fc ff ff       	call   c001df98 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e2f5:	89 c2                	mov    edx,eax
c001e2f7:	ed                   	in     eax,dx
c001e2f8:	83 c4 20             	add    esp,0x20
c001e2fb:	0f b7 db             	movzx  ebx,bx
c001e2fe:	f6 c2 02             	test   dl,0x2
c001e301:	74 0c                	je     c001e30f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001e303:	0f b7 c8             	movzx  ecx,ax
c001e306:	89 d8                	mov    eax,ebx
c001e308:	c1 e0 10             	shl    eax,0x10
c001e30b:	09 c8                	or     eax,ecx
c001e30d:	eb 05                	jmp    c001e314 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001e30f:	66 31 c0             	xor    ax,ax
c001e312:	09 d8                	or     eax,ebx
c001e314:	ef                   	out    dx,eax
c001e315:	83 c4 0c             	add    esp,0xc
c001e318:	5b                   	pop    ebx
c001e319:	5e                   	pop    esi
c001e31a:	5f                   	pop    edi
c001e31b:	5d                   	pop    ebp
c001e31c:	c3                   	ret    
c001e31d:	c7 44 24 20 67 61 02 c0 	mov    DWORD PTR [esp+0x20],0xc0026167
c001e325:	83 c4 0c             	add    esp,0xc
c001e328:	5b                   	pop    ebx
c001e329:	5e                   	pop    esi
c001e32a:	5f                   	pop    edi
c001e32b:	5d                   	pop    ebp
c001e32c:	e9 b5 1c ff ff       	jmp    c000ffe6 <KePanic(char const*)>
c001e331:	90                   	nop

c001e332 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001e332:	55                   	push   ebp
c001e333:	57                   	push   edi
c001e334:	56                   	push   esi
c001e335:	53                   	push   ebx
c001e336:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001e33c:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001e343:	80 3d 8c 04 03 c0 00 	cmp    BYTE PTR ds:0xc003048c,0x0
c001e34a:	0f 85 bd 00 00 00    	jne    c001e40d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001e350:	83 ec 0c             	sub    esp,0xc
c001e353:	68 14 01 00 00       	push   0x114
c001e358:	e8 32 18 ff ff       	call   c000fb8f <malloc>
c001e35d:	83 c4 0c             	add    esp,0xc
c001e360:	89 c3                	mov    ebx,eax
c001e362:	ff 35 58 fa 02 c0    	push   DWORD PTR ds:0xc002fa58
c001e368:	68 6d 61 02 c0       	push   0xc002616d
c001e36d:	50                   	push   eax
c001e36e:	e8 17 9e fe ff       	call   c000818a <File::File(char const*, Process*)>
c001e373:	83 c4 10             	add    esp,0x10
c001e376:	85 db                	test   ebx,ebx
c001e378:	0f 84 67 02 00 00    	je     c001e5e5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e37e:	56                   	push   esi
c001e37f:	56                   	push   esi
c001e380:	6a 01                	push   0x1
c001e382:	53                   	push   ebx
c001e383:	e8 20 9e fe ff       	call   c00081a8 <File::open(FileOpenMode)>
c001e388:	83 c4 10             	add    esp,0x10
c001e38b:	85 c0                	test   eax,eax
c001e38d:	0f 85 52 02 00 00    	jne    c001e5e5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e393:	52                   	push   edx
c001e394:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001e398:	50                   	push   eax
c001e399:	8d 44 24 48          	lea    eax,[esp+0x48]
c001e39d:	50                   	push   eax
c001e39e:	53                   	push   ebx
c001e39f:	e8 06 a1 fe ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c001e3a4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e3a8:	40                   	inc    eax
c001e3a9:	89 04 24             	mov    DWORD PTR [esp],eax
c001e3ac:	e8 de 17 ff ff       	call   c000fb8f <malloc>
c001e3b1:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001e3b5:	a3 88 04 03 c0       	mov    ds:0xc0030488,eax
c001e3ba:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001e3be:	59                   	pop    ecx
c001e3bf:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e3c1:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001e3c5:	51                   	push   ecx
c001e3c6:	50                   	push   eax
c001e3c7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e3cb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e3cf:	53                   	push   ebx
c001e3d0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e3d3:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001e3d7:	83 c4 20             	add    esp,0x20
c001e3da:	89 c8                	mov    eax,ecx
c001e3dc:	99                   	cdq    
c001e3dd:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001e3e1:	0f 85 fe 01 00 00    	jne    c001e5e5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e3e7:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001e3eb:	0f 85 f4 01 00 00    	jne    c001e5e5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e3f1:	83 ec 0c             	sub    esp,0xc
c001e3f4:	53                   	push   ebx
c001e3f5:	e8 0c 9e fe ff       	call   c0008206 <File::close()>
c001e3fa:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e3fe:	c6 05 8c 04 03 c0 01 	mov    BYTE PTR ds:0xc003048c,0x1
c001e405:	a3 84 04 03 c0       	mov    ds:0xc0030484,eax
c001e40a:	83 c4 10             	add    esp,0x10
c001e40d:	a1 84 04 03 c0       	mov    eax,ds:0xc0030484
c001e412:	8b 1d 88 04 03 c0    	mov    ebx,DWORD PTR ds:0xc0030488
c001e418:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e41c:	31 f6                	xor    esi,esi
c001e41e:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001e426:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001e42d:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001e432:	31 c9                	xor    ecx,ecx
c001e434:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001e43c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001e441:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001e449:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e44d:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001e455:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e459:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001e45d:	0f 8e 82 01 00 00    	jle    c001e5e5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e463:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001e466:	d4 40                	aam    0x40
c001e468:	d5 39                	aad    0x39
c001e46a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e46e:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001e472:	d4 40                	aam    0x40
c001e474:	d5 39                	aad    0x39
c001e476:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e47a:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001e47e:	d4 40                	aam    0x40
c001e480:	d5 39                	aad    0x39
c001e482:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e486:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001e48a:	d4 40                	aam    0x40
c001e48c:	d5 39                	aad    0x39
c001e48e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e492:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001e496:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001e49a:	3c 56                	cmp    al,0x56
c001e49c:	74 43                	je     c001e4e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001e49e:	d4 40                	aam    0x40
c001e4a0:	d5 39                	aad    0x39
c001e4a2:	8d 48 d0             	lea    ecx,[eax-0x30]
c001e4a5:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001e4a9:	0f b6 c9             	movzx  ecx,cl
c001e4ac:	c1 e1 04             	shl    ecx,0x4
c001e4af:	d4 40                	aam    0x40
c001e4b1:	d5 39                	aad    0x39
c001e4b3:	83 e8 30             	sub    eax,0x30
c001e4b6:	0f b6 c0             	movzx  eax,al
c001e4b9:	09 c1                	or     ecx,eax
c001e4bb:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001e4bf:	c1 e1 04             	shl    ecx,0x4
c001e4c2:	d4 40                	aam    0x40
c001e4c4:	d5 39                	aad    0x39
c001e4c6:	83 e8 30             	sub    eax,0x30
c001e4c9:	0f b6 c0             	movzx  eax,al
c001e4cc:	09 c1                	or     ecx,eax
c001e4ce:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001e4d2:	c1 e1 04             	shl    ecx,0x4
c001e4d5:	d4 40                	aam    0x40
c001e4d7:	d5 39                	aad    0x39
c001e4d9:	83 e8 30             	sub    eax,0x30
c001e4dc:	0f b6 c0             	movzx  eax,al
c001e4df:	09 c1                	or     ecx,eax
c001e4e1:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001e4e5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001e4e9:	3c 58                	cmp    al,0x58
c001e4eb:	74 47                	je     c001e534 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001e4ed:	d4 40                	aam    0x40
c001e4ef:	d5 39                	aad    0x39
c001e4f1:	8d 50 d0             	lea    edx,[eax-0x30]
c001e4f4:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001e4f8:	0f b6 d2             	movzx  edx,dl
c001e4fb:	c1 e2 04             	shl    edx,0x4
c001e4fe:	d4 40                	aam    0x40
c001e500:	d5 39                	aad    0x39
c001e502:	83 e8 30             	sub    eax,0x30
c001e505:	0f b6 c0             	movzx  eax,al
c001e508:	09 c2                	or     edx,eax
c001e50a:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001e50e:	c1 e2 04             	shl    edx,0x4
c001e511:	d4 40                	aam    0x40
c001e513:	d5 39                	aad    0x39
c001e515:	83 e8 30             	sub    eax,0x30
c001e518:	0f b6 c0             	movzx  eax,al
c001e51b:	09 c2                	or     edx,eax
c001e51d:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001e521:	c1 e2 04             	shl    edx,0x4
c001e524:	d4 40                	aam    0x40
c001e526:	d5 39                	aad    0x39
c001e528:	83 e8 30             	sub    eax,0x30
c001e52b:	0f b6 c0             	movzx  eax,al
c001e52e:	09 c2                	or     edx,eax
c001e530:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e534:	83 c6 10             	add    esi,0x10
c001e537:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001e53b:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001e53f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001e543:	83 fa 0a             	cmp    edx,0xa
c001e546:	74 0b                	je     c001e553 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001e548:	47                   	inc    edi
c001e549:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001e54d:	75 19                	jne    c001e568 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001e54f:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001e553:	31 c0                	xor    eax,eax
c001e555:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001e55a:	0f 94 c0             	sete   al
c001e55d:	01 c6                	add    esi,eax
c001e55f:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001e564:	75 0b                	jne    c001e571 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001e566:	eb 14                	jmp    c001e57c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001e568:	46                   	inc    esi
c001e569:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001e56c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001e56f:	eb ca                	jmp    c001e53b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001e571:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001e576:	0f 85 dd fe ff ff    	jne    c001e459 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e57c:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001e581:	74 10                	je     c001e593 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001e583:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001e588:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001e58d:	0f 85 c6 fe ff ff    	jne    c001e459 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e593:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e597:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e59b:	83 e8 30             	sub    eax,0x30
c001e59e:	83 ef 30             	sub    edi,0x30
c001e5a1:	c1 e0 04             	shl    eax,0x4
c001e5a4:	09 f8                	or     eax,edi
c001e5a6:	0f b6 c0             	movzx  eax,al
c001e5a9:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001e5ad:	0f 85 a6 fe ff ff    	jne    c001e459 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e5b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5b7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001e5bb:	83 e8 30             	sub    eax,0x30
c001e5be:	83 ef 30             	sub    edi,0x30
c001e5c1:	c1 e0 04             	shl    eax,0x4
c001e5c4:	09 f8                	or     eax,edi
c001e5c6:	0f b6 c0             	movzx  eax,al
c001e5c9:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e5cd:	0f 85 86 fe ff ff    	jne    c001e459 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e5d3:	50                   	push   eax
c001e5d4:	50                   	push   eax
c001e5d5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001e5d9:	50                   	push   eax
c001e5da:	55                   	push   ebp
c001e5db:	e8 60 20 fe ff       	call   c0000640 <strcpy>
c001e5e0:	83 c4 10             	add    esp,0x10
c001e5e3:	eb 06                	jmp    c001e5eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001e5e5:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001e5e9:	31 ed                	xor    ebp,ebp
c001e5eb:	81 c4 4c 01 00 00    	add    esp,0x14c
c001e5f1:	89 e8                	mov    eax,ebp
c001e5f3:	5b                   	pop    ebx
c001e5f4:	5e                   	pop    esi
c001e5f5:	5f                   	pop    edi
c001e5f6:	5d                   	pop    ebp
c001e5f7:	c3                   	ret    

c001e5f8 <PCI::checkBus(unsigned char)>:
c001e5f8:	56                   	push   esi
c001e5f9:	53                   	push   ebx
c001e5fa:	31 db                	xor    ebx,ebx
c001e5fc:	51                   	push   ecx
c001e5fd:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e602:	52                   	push   edx
c001e603:	53                   	push   ebx
c001e604:	43                   	inc    ebx
c001e605:	56                   	push   esi
c001e606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e60a:	e8 6f 03 00 00       	call   c001e97e <PCI::checkDevice(unsigned char, unsigned char)>
c001e60f:	83 c4 10             	add    esp,0x10
c001e612:	83 fb 20             	cmp    ebx,0x20
c001e615:	75 eb                	jne    c001e602 <PCI::checkBus(unsigned char)+0xa>
c001e617:	58                   	pop    eax
c001e618:	5b                   	pop    ebx
c001e619:	5e                   	pop    esi
c001e61a:	c3                   	ret    
c001e61b:	90                   	nop

c001e61c <PCI::foundDevice(PCIDeviceInfo)>:
c001e61c:	55                   	push   ebp
c001e61d:	57                   	push   edi
c001e61e:	56                   	push   esi
c001e61f:	53                   	push   ebx
c001e620:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001e626:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001e62e:	8b ac 24 a0 00 00 00 	mov    ebp,DWORD PTR [esp+0xa0]
c001e635:	3d ff ff 00 00       	cmp    eax,0xffff
c001e63a:	0f 84 b7 01 00 00    	je     c001e7f7 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001e640:	0f b7 9c 24 a4 00 00 00 	movzx  ebx,WORD PTR [esp+0xa4]
c001e648:	66 81 fb 06 04       	cmp    bx,0x406
c001e64d:	75 32                	jne    c001e681 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001e64f:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001e657:	50                   	push   eax
c001e658:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001e660:	50                   	push   eax
c001e661:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001e669:	50                   	push   eax
c001e66a:	55                   	push   ebp
c001e66b:	e8 4e fb ff ff       	call   c001e1be <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001e670:	59                   	pop    ecx
c001e671:	0f b6 c0             	movzx  eax,al
c001e674:	5b                   	pop    ebx
c001e675:	50                   	push   eax
c001e676:	55                   	push   ebp
c001e677:	e8 7c ff ff ff       	call   c001e5f8 <PCI::checkBus(unsigned char)>
c001e67c:	e9 16 01 00 00       	jmp    c001e797 <PCI::foundDevice(PCIDeviceInfo)+0x17b>
c001e681:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001e688:	8b 85 cc 00 00 00    	mov    eax,DWORD PTR [ebp+0xcc]
c001e68e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001e692:	8b bc 24 a4 00 00 00 	mov    edi,DWORD PTR [esp+0xa4]
c001e699:	0f b6 b4 24 c4 00 00 00 	movzx  esi,BYTE PTR [esp+0xc4]
c001e6a1:	85 c0                	test   eax,eax
c001e6a3:	74 36                	je     c001e6db <PCI::foundDevice(PCIDeviceInfo)+0xbf>
c001e6a5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e6a8:	85 d2                	test   edx,edx
c001e6aa:	74 2b                	je     c001e6d7 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001e6ac:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c001e6b2:	31 f9                	xor    ecx,edi
c001e6b4:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c001e6ba:	75 1b                	jne    c001e6d7 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001e6bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6c0:	39 8a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ecx
c001e6c6:	75 0f                	jne    c001e6d7 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001e6c8:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001e6cf:	39 f2                	cmp    edx,esi
c001e6d1:	0f 84 20 01 00 00    	je     c001e7f7 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001e6d7:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6d9:	eb c6                	jmp    c001e6a1 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001e6db:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001e6df:	be a0 61 02 c0       	mov    esi,0xc00261a0
c001e6e4:	b9 07 00 00 00       	mov    ecx,0x7
c001e6e9:	fc                   	cld    
c001e6ea:	31 d2                	xor    edx,edx
c001e6ec:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e6ee:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001e6f5:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001e6f9:	b9 12 00 00 00       	mov    ecx,0x12
c001e6fe:	83 ec 0c             	sub    esp,0xc
c001e701:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e703:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001e70b:	b9 0a 00 00 00       	mov    ecx,0xa
c001e710:	f7 f1                	div    ecx
c001e712:	83 c0 30             	add    eax,0x30
c001e715:	83 c2 30             	add    edx,0x30
c001e718:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001e71c:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001e720:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001e728:	31 d2                	xor    edx,edx
c001e72a:	f7 f1                	div    ecx
c001e72c:	83 c0 30             	add    eax,0x30
c001e72f:	83 c2 30             	add    edx,0x30
c001e732:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e736:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001e73a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e73e:	50                   	push   eax
c001e73f:	e8 e5 eb fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001e744:	83 c4 10             	add    esp,0x10
c001e747:	81 fb 01 06 00 00    	cmp    ebx,0x601
c001e74d:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001e754:	75 46                	jne    c001e79c <PCI::foundDevice(PCIDeviceInfo)+0x180>
c001e756:	83 ec 0c             	sub    esp,0xc
c001e759:	68 64 01 00 00       	push   0x164
c001e75e:	e8 2c 14 ff ff       	call   c000fb8f <malloc>
c001e763:	89 c3                	mov    ebx,eax
c001e765:	89 04 24             	mov    DWORD PTR [esp],eax
c001e768:	e8 3b 11 00 00       	call   c001f8a8 <SATABus::SATABus()>
c001e76d:	58                   	pop    eax
c001e76e:	5a                   	pop    edx
c001e76f:	53                   	push   ebx
c001e770:	55                   	push   ebp
c001e771:	e8 de b2 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001e776:	83 ec 1c             	sub    esp,0x1c
c001e779:	b9 09 00 00 00       	mov    ecx,0x9
c001e77e:	89 e7                	mov    edi,esp
c001e780:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e782:	53                   	push   ebx
c001e783:	e8 12 b2 fe ff       	call   c000999a <Device::preOpenPCI(PCIDeviceInfo)>
c001e788:	83 c4 30             	add    esp,0x30
c001e78b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e78d:	6a 00                	push   0x0
c001e78f:	6a 00                	push   0x0
c001e791:	6a 00                	push   0x0
c001e793:	53                   	push   ebx
c001e794:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e797:	83 c4 10             	add    esp,0x10
c001e79a:	eb 5b                	jmp    c001e7f7 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001e79c:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001e7a2:	75 19                	jne    c001e7bd <PCI::foundDevice(PCIDeviceInfo)+0x1a1>
c001e7a4:	83 ec 0c             	sub    esp,0xc
c001e7a7:	68 70 02 00 00       	push   0x270
c001e7ac:	e8 de 13 ff ff       	call   c000fb8f <malloc>
c001e7b1:	89 c3                	mov    ebx,eax
c001e7b3:	89 04 24             	mov    DWORD PTR [esp],eax
c001e7b6:	e8 93 02 00 00       	call   c001ea4e <IDE::IDE()>
c001e7bb:	eb b0                	jmp    c001e76d <PCI::foundDevice(PCIDeviceInfo)+0x151>
c001e7bd:	83 ec 0c             	sub    esp,0xc
c001e7c0:	68 58 01 00 00       	push   0x158
c001e7c5:	e8 c5 13 ff ff       	call   c000fb8f <malloc>
c001e7ca:	89 c3                	mov    ebx,eax
c001e7cc:	58                   	pop    eax
c001e7cd:	5a                   	pop    edx
c001e7ce:	68 86 61 02 c0       	push   0xc0026186
c001e7d3:	53                   	push   ebx
c001e7d4:	e8 2f b5 fe ff       	call   c0009d08 <DriverlessDevice::DriverlessDevice(char const*)>
c001e7d9:	59                   	pop    ecx
c001e7da:	5f                   	pop    edi
c001e7db:	53                   	push   ebx
c001e7dc:	55                   	push   ebp
c001e7dd:	e8 72 b2 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001e7e2:	83 ec 1c             	sub    esp,0x1c
c001e7e5:	b9 09 00 00 00       	mov    ecx,0x9
c001e7ea:	89 e7                	mov    edi,esp
c001e7ec:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e7ee:	53                   	push   ebx
c001e7ef:	e8 a6 b1 fe ff       	call   c000999a <Device::preOpenPCI(PCIDeviceInfo)>
c001e7f4:	83 c4 30             	add    esp,0x30
c001e7f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c001e7fd:	5b                   	pop    ebx
c001e7fe:	5e                   	pop    esi
c001e7ff:	5f                   	pop    edi
c001e800:	5d                   	pop    ebp
c001e801:	c3                   	ret    

c001e802 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e802:	55                   	push   ebp
c001e803:	57                   	push   edi
c001e804:	56                   	push   esi
c001e805:	53                   	push   ebx
c001e806:	83 ec 68             	sub    esp,0x68
c001e809:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001e80d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001e814:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e818:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001e81f:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001e824:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e828:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001e82f:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001e834:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e838:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001e83d:	6a 0c                	push   0xc
c001e83f:	57                   	push   edi
c001e840:	53                   	push   ebx
c001e841:	56                   	push   esi
c001e842:	55                   	push   ebp
c001e843:	e8 c6 f7 ff ff       	call   c001e00e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e848:	83 c4 20             	add    esp,0x20
c001e84b:	57                   	push   edi
c001e84c:	53                   	push   ebx
c001e84d:	56                   	push   esi
c001e84e:	55                   	push   ebp
c001e84f:	e8 b0 f8 ff ff       	call   c001e104 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e854:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001e859:	57                   	push   edi
c001e85a:	53                   	push   ebx
c001e85b:	56                   	push   esi
c001e85c:	55                   	push   ebp
c001e85d:	e8 38 f9 ff ff       	call   c001e19a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e862:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001e866:	83 c4 14             	add    esp,0x14
c001e869:	6a 3c                	push   0x3c
c001e86b:	57                   	push   edi
c001e86c:	53                   	push   ebx
c001e86d:	56                   	push   esi
c001e86e:	55                   	push   ebp
c001e86f:	e8 9a f7 ff ff       	call   c001e00e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e874:	0f b6 c4             	movzx  eax,ah
c001e877:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e87b:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e87f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e883:	a1 c8 d0 02 c0       	mov    eax,ds:0xc002d0c8
c001e888:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001e88e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001e894:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e898:	83 c4 20             	add    esp,0x20
c001e89b:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001e8a0:	74 30                	je     c001e8d2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001e8a2:	31 c0                	xor    eax,eax
c001e8a4:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001e8a8:	7e 28                	jle    c001e8d2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001e8aa:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001e8b2:	39 cb                	cmp    ebx,ecx
c001e8b4:	75 19                	jne    c001e8cf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001e8b6:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001e8be:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001e8c2:	75 0b                	jne    c001e8cf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001e8c4:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001e8cb:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001e8cf:	40                   	inc    eax
c001e8d0:	eb d2                	jmp    c001e8a4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001e8d2:	31 d2                	xor    edx,edx
c001e8d4:	83 ec 0c             	sub    esp,0xc
c001e8d7:	57                   	push   edi
c001e8d8:	53                   	push   ebx
c001e8d9:	56                   	push   esi
c001e8da:	52                   	push   edx
c001e8db:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001e8df:	55                   	push   ebp
c001e8e0:	e8 01 f9 ff ff       	call   c001e1e6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e8e5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e8e9:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001e8ed:	42                   	inc    edx
c001e8ee:	83 c4 20             	add    esp,0x20
c001e8f1:	83 fa 06             	cmp    edx,0x6
c001e8f4:	75 de                	jne    c001e8d4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001e8f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e8fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8fe:	c1 e2 08             	shl    edx,0x8
c001e901:	83 ec 0c             	sub    esp,0xc
c001e904:	0f b6 c4             	movzx  eax,ah
c001e907:	09 d0                	or     eax,edx
c001e909:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001e90e:	6a 02                	push   0x2
c001e910:	57                   	push   edi
c001e911:	53                   	push   ebx
c001e912:	56                   	push   esi
c001e913:	55                   	push   ebp
c001e914:	e8 f5 f6 ff ff       	call   c001e00e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e919:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001e91e:	83 c4 20             	add    esp,0x20
c001e921:	57                   	push   edi
c001e922:	53                   	push   ebx
c001e923:	56                   	push   esi
c001e924:	55                   	push   ebp
c001e925:	e8 24 f8 ff ff       	call   c001e14e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e92a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e92e:	57                   	push   edi
c001e92f:	53                   	push   ebx
c001e930:	56                   	push   esi
c001e931:	55                   	push   ebp
c001e932:	e8 81 f7 ff ff       	call   c001e0b8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e937:	b9 09 00 00 00       	mov    ecx,0x9
c001e93c:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001e941:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001e945:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e949:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e94d:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001e951:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e955:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001e959:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e95d:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001e961:	83 ec 0c             	sub    esp,0xc
c001e964:	fc                   	cld    
c001e965:	89 e7                	mov    edi,esp
c001e967:	8d 74 24 58          	lea    esi,[esp+0x58]
c001e96b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e96d:	55                   	push   ebp
c001e96e:	e8 a9 fc ff ff       	call   c001e61c <PCI::foundDevice(PCIDeviceInfo)>
c001e973:	81 c4 8c 00 00 00    	add    esp,0x8c
c001e979:	5b                   	pop    ebx
c001e97a:	5e                   	pop    esi
c001e97b:	5f                   	pop    edi
c001e97c:	5d                   	pop    ebp
c001e97d:	c3                   	ret    

c001e97e <PCI::checkDevice(unsigned char, unsigned char)>:
c001e97e:	55                   	push   ebp
c001e97f:	57                   	push   edi
c001e980:	56                   	push   esi
c001e981:	53                   	push   ebx
c001e982:	83 ec 0c             	sub    esp,0xc
c001e985:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e989:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001e98e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001e993:	6a 00                	push   0x0
c001e995:	56                   	push   esi
c001e996:	57                   	push   edi
c001e997:	55                   	push   ebp
c001e998:	e8 1b f7 ff ff       	call   c001e0b8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e99d:	6a 00                	push   0x0
c001e99f:	56                   	push   esi
c001e9a0:	57                   	push   edi
c001e9a1:	55                   	push   ebp
c001e9a2:	e8 5b fe ff ff       	call   c001e802 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e9a7:	83 c4 20             	add    esp,0x20
c001e9aa:	6a 00                	push   0x0
c001e9ac:	56                   	push   esi
c001e9ad:	57                   	push   edi
c001e9ae:	55                   	push   ebp
c001e9af:	e8 28 f7 ff ff       	call   c001e0dc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e9b4:	83 c4 10             	add    esp,0x10
c001e9b7:	a8 80                	test   al,0x80
c001e9b9:	74 2d                	je     c001e9e8 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001e9bb:	bb 01 00 00 00       	mov    ebx,0x1
c001e9c0:	53                   	push   ebx
c001e9c1:	56                   	push   esi
c001e9c2:	57                   	push   edi
c001e9c3:	55                   	push   ebp
c001e9c4:	e8 ef f6 ff ff       	call   c001e0b8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e9c9:	83 c4 10             	add    esp,0x10
c001e9cc:	0f b7 c0             	movzx  eax,ax
c001e9cf:	3d ff ff 00 00       	cmp    eax,0xffff
c001e9d4:	74 0c                	je     c001e9e2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001e9d6:	53                   	push   ebx
c001e9d7:	56                   	push   esi
c001e9d8:	57                   	push   edi
c001e9d9:	55                   	push   ebp
c001e9da:	e8 23 fe ff ff       	call   c001e802 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e9df:	83 c4 10             	add    esp,0x10
c001e9e2:	43                   	inc    ebx
c001e9e3:	83 fb 08             	cmp    ebx,0x8
c001e9e6:	75 d8                	jne    c001e9c0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001e9e8:	83 c4 0c             	add    esp,0xc
c001e9eb:	5b                   	pop    ebx
c001e9ec:	5e                   	pop    esi
c001e9ed:	5f                   	pop    edi
c001e9ee:	5d                   	pop    ebp
c001e9ef:	c3                   	ret    

c001e9f0 <PCI::detect()>:
c001e9f0:	56                   	push   esi
c001e9f1:	53                   	push   ebx
c001e9f2:	53                   	push   ebx
c001e9f3:	31 db                	xor    ebx,ebx
c001e9f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e9f9:	6a 00                	push   0x0
c001e9fb:	6a 00                	push   0x0
c001e9fd:	6a 00                	push   0x0
c001e9ff:	56                   	push   esi
c001ea00:	e8 d7 f6 ff ff       	call   c001e0dc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ea05:	83 c4 10             	add    esp,0x10
c001ea08:	a8 80                	test   al,0x80
c001ea0a:	75 21                	jne    c001ea2d <PCI::detect()+0x3d>
c001ea0c:	51                   	push   ecx
c001ea0d:	51                   	push   ecx
c001ea0e:	6a 00                	push   0x0
c001ea10:	56                   	push   esi
c001ea11:	e8 e2 fb ff ff       	call   c001e5f8 <PCI::checkBus(unsigned char)>
c001ea16:	83 c4 10             	add    esp,0x10
c001ea19:	eb 2a                	jmp    c001ea45 <PCI::detect()+0x55>
c001ea1b:	52                   	push   edx
c001ea1c:	52                   	push   edx
c001ea1d:	53                   	push   ebx
c001ea1e:	43                   	inc    ebx
c001ea1f:	56                   	push   esi
c001ea20:	e8 d3 fb ff ff       	call   c001e5f8 <PCI::checkBus(unsigned char)>
c001ea25:	83 c4 10             	add    esp,0x10
c001ea28:	83 fb 08             	cmp    ebx,0x8
c001ea2b:	74 18                	je     c001ea45 <PCI::detect()+0x55>
c001ea2d:	53                   	push   ebx
c001ea2e:	6a 00                	push   0x0
c001ea30:	6a 00                	push   0x0
c001ea32:	56                   	push   esi
c001ea33:	e8 80 f6 ff ff       	call   c001e0b8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ea38:	83 c4 10             	add    esp,0x10
c001ea3b:	0f b7 c0             	movzx  eax,ax
c001ea3e:	3d ff ff 00 00       	cmp    eax,0xffff
c001ea43:	74 d6                	je     c001ea1b <PCI::detect()+0x2b>
c001ea45:	58                   	pop    eax
c001ea46:	5b                   	pop    ebx
c001ea47:	5e                   	pop    esi
c001ea48:	c3                   	ret    
c001ea49:	90                   	nop

c001ea4a <IDE::close(int, int, void*)>:
c001ea4a:	83 c8 ff             	or     eax,0xffffffff
c001ea4d:	c3                   	ret    

c001ea4e <IDE::IDE()>:
c001ea4e:	83 ec 0c             	sub    esp,0xc
c001ea51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea55:	83 ec 08             	sub    esp,0x8
c001ea58:	68 30 62 02 c0       	push   0xc0026230
c001ea5d:	50                   	push   eax
c001ea5e:	e8 49 b3 fe ff       	call   c0009dac <HardDiskController::HardDiskController(char const*)>
c001ea63:	83 c4 10             	add    esp,0x10
c001ea66:	ba 5c 63 02 c0       	mov    edx,0xc002635c
c001ea6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea6f:	89 10                	mov    DWORD PTR [eax],edx
c001ea71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea75:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001ea7c:	90                   	nop
c001ea7d:	83 c4 0c             	add    esp,0xc
c001ea80:	c3                   	ret    
c001ea81:	90                   	nop

c001ea82 <IDE::prepareInterrupt(unsigned char)>:
c001ea82:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ea87:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea8b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001ea93:	c3                   	ret    

c001ea94 <selectDrive(unsigned char, unsigned char)>:
c001ea94:	c3                   	ret    
c001ea95:	90                   	nop

c001ea96 <IDE::getBase(unsigned char)>:
c001ea96:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001ea9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea9f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001eaa7:	c3                   	ret    

c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001eaa8:	55                   	push   ebp
c001eaa9:	57                   	push   edi
c001eaaa:	56                   	push   esi
c001eaab:	53                   	push   ebx
c001eaac:	83 ec 1c             	sub    esp,0x1c
c001eaaf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001eab3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001eab7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001eaba:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001eabe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001eac2:	80 f9 03             	cmp    cl,0x3
c001eac5:	77 4f                	ja     c001eb16 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001eac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eacb:	0f b6 fa             	movzx  edi,dl
c001eace:	0f b6 db             	movzx  ebx,bl
c001ead1:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001ead4:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001ead9:	80 ca 80             	or     dl,0x80
c001eadc:	52                   	push   edx
c001eadd:	6a 0c                	push   0xc
c001eadf:	57                   	push   edi
c001eae0:	56                   	push   esi
c001eae1:	e8 c2 ff ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eae6:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001eaeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eaef:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001eaf3:	ee                   	out    dx,al
c001eaf4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001eaf9:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001eafd:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001eb01:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001eb05:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001eb0d:	83 c4 2c             	add    esp,0x2c
c001eb10:	5b                   	pop    ebx
c001eb11:	5e                   	pop    esi
c001eb12:	5f                   	pop    edi
c001eb13:	5d                   	pop    ebp
c001eb14:	eb 92                	jmp    c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb16:	0f b6 cb             	movzx  ecx,bl
c001eb19:	83 f9 07             	cmp    ecx,0x7
c001eb1c:	77 12                	ja     c001eb30 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001eb1e:	0f b6 d2             	movzx  edx,dl
c001eb21:	0f b6 db             	movzx  ebx,bl
c001eb24:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001eb2c:	01 da                	add    edx,ebx
c001eb2e:	eb 2f                	jmp    c001eb5f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001eb30:	83 f9 0d             	cmp    ecx,0xd
c001eb33:	77 13                	ja     c001eb48 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001eb35:	0f b6 d2             	movzx  edx,dl
c001eb38:	0f b6 db             	movzx  ebx,bl
c001eb3b:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001eb42:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001eb46:	eb 17                	jmp    c001eb5f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001eb48:	83 f9 15             	cmp    ecx,0x15
c001eb4b:	77 13                	ja     c001eb60 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001eb4d:	0f b6 d2             	movzx  edx,dl
c001eb50:	0f b6 db             	movzx  ebx,bl
c001eb53:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001eb5b:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001eb5f:	ee                   	out    dx,al
c001eb60:	83 c4 1c             	add    esp,0x1c
c001eb63:	5b                   	pop    ebx
c001eb64:	5e                   	pop    esi
c001eb65:	5f                   	pop    edi
c001eb66:	5d                   	pop    ebp
c001eb67:	c3                   	ret    

c001eb68 <IDE::read(unsigned char, unsigned char)>:
c001eb68:	55                   	push   ebp
c001eb69:	57                   	push   edi
c001eb6a:	56                   	push   esi
c001eb6b:	53                   	push   ebx
c001eb6c:	83 ec 1c             	sub    esp,0x1c
c001eb6f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001eb73:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001eb77:	8d 43 f8             	lea    eax,[ebx-0x8]
c001eb7a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001eb7e:	3c 03                	cmp    al,0x3
c001eb80:	77 40                	ja     c001ebc2 <IDE::read(unsigned char, unsigned char)+0x5a>
c001eb82:	0f b6 f9             	movzx  edi,cl
c001eb85:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001eb88:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001eb8d:	0c 80                	or     al,0x80
c001eb8f:	50                   	push   eax
c001eb90:	6a 0c                	push   0xc
c001eb92:	57                   	push   edi
c001eb93:	56                   	push   esi
c001eb94:	e8 0f ff ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb99:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001eb9e:	0f b6 d3             	movzx  edx,bl
c001eba1:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001eba5:	ec                   	in     al,dx
c001eba6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ebaa:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001ebaf:	52                   	push   edx
c001ebb0:	6a 0c                	push   0xc
c001ebb2:	57                   	push   edi
c001ebb3:	56                   	push   esi
c001ebb4:	e8 ef fe ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ebb9:	83 c4 20             	add    esp,0x20
c001ebbc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ebc0:	eb 4c                	jmp    c001ec0e <IDE::read(unsigned char, unsigned char)+0xa6>
c001ebc2:	0f b6 d3             	movzx  edx,bl
c001ebc5:	83 fa 07             	cmp    edx,0x7
c001ebc8:	77 12                	ja     c001ebdc <IDE::read(unsigned char, unsigned char)+0x74>
c001ebca:	0f b6 c9             	movzx  ecx,cl
c001ebcd:	0f b6 d3             	movzx  edx,bl
c001ebd0:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001ebd8:	01 c2                	add    edx,eax
c001ebda:	eb 31                	jmp    c001ec0d <IDE::read(unsigned char, unsigned char)+0xa5>
c001ebdc:	83 fa 0d             	cmp    edx,0xd
c001ebdf:	77 13                	ja     c001ebf4 <IDE::read(unsigned char, unsigned char)+0x8c>
c001ebe1:	0f b6 c9             	movzx  ecx,cl
c001ebe4:	0f b6 d3             	movzx  edx,bl
c001ebe7:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001ebee:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ebf2:	eb 19                	jmp    c001ec0d <IDE::read(unsigned char, unsigned char)+0xa5>
c001ebf4:	31 c0                	xor    eax,eax
c001ebf6:	83 fa 15             	cmp    edx,0x15
c001ebf9:	77 13                	ja     c001ec0e <IDE::read(unsigned char, unsigned char)+0xa6>
c001ebfb:	0f b6 c9             	movzx  ecx,cl
c001ebfe:	0f b6 d3             	movzx  edx,bl
c001ec01:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001ec09:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ec0d:	ec                   	in     al,dx
c001ec0e:	83 c4 1c             	add    esp,0x1c
c001ec11:	5b                   	pop    ebx
c001ec12:	5e                   	pop    esi
c001ec13:	5f                   	pop    edi
c001ec14:	5d                   	pop    ebp
c001ec15:	c3                   	ret    

c001ec16 <IDE::waitInterrupt(unsigned char)>:
c001ec16:	55                   	push   ebp
c001ec17:	57                   	push   edi
c001ec18:	56                   	push   esi
c001ec19:	53                   	push   ebx
c001ec1a:	31 db                	xor    ebx,ebx
c001ec1c:	83 ec 0c             	sub    esp,0xc
c001ec1f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ec23:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ec28:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ec30:	89 e8                	mov    eax,ebp
c001ec32:	84 c0                	test   al,al
c001ec34:	75 31                	jne    c001ec67 <IDE::waitInterrupt(unsigned char)+0x51>
c001ec36:	52                   	push   edx
c001ec37:	6a 0c                	push   0xc
c001ec39:	56                   	push   esi
c001ec3a:	57                   	push   edi
c001ec3b:	e8 28 ff ff ff       	call   c001eb68 <IDE::read(unsigned char, unsigned char)>
c001ec40:	83 c4 10             	add    esp,0x10
c001ec43:	a8 01                	test   al,0x1
c001ec45:	75 28                	jne    c001ec6f <IDE::waitInterrupt(unsigned char)+0x59>
c001ec47:	f6 c3 04             	test   bl,0x4
c001ec4a:	75 13                	jne    c001ec5f <IDE::waitInterrupt(unsigned char)+0x49>
c001ec4c:	83 fb 32             	cmp    ebx,0x32
c001ec4f:	7e 0e                	jle    c001ec5f <IDE::waitInterrupt(unsigned char)+0x49>
c001ec51:	50                   	push   eax
c001ec52:	50                   	push   eax
c001ec53:	6a 00                	push   0x0
c001ec55:	6a 64                	push   0x64
c001ec57:	e8 ac 87 ff ff       	call   c0017408 <milliTenthSleep(unsigned long long)>
c001ec5c:	83 c4 10             	add    esp,0x10
c001ec5f:	83 fb 3c             	cmp    ebx,0x3c
c001ec62:	74 0b                	je     c001ec6f <IDE::waitInterrupt(unsigned char)+0x59>
c001ec64:	43                   	inc    ebx
c001ec65:	eb c1                	jmp    c001ec28 <IDE::waitInterrupt(unsigned char)+0x12>
c001ec67:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ec6f:	83 c4 0c             	add    esp,0xc
c001ec72:	89 e8                	mov    eax,ebp
c001ec74:	5b                   	pop    ebx
c001ec75:	5e                   	pop    esi
c001ec76:	5f                   	pop    edi
c001ec77:	5d                   	pop    ebp
c001ec78:	c3                   	ret    

c001ec79 <ideChannel0IRQHandler(regs*, void*)>:
c001ec79:	83 ec 10             	sub    esp,0x10
c001ec7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ec80:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ec87:	6a 07                	push   0x7
c001ec89:	6a 00                	push   0x0
c001ec8b:	50                   	push   eax
c001ec8c:	e8 d7 fe ff ff       	call   c001eb68 <IDE::read(unsigned char, unsigned char)>
c001ec91:	83 c4 1c             	add    esp,0x1c
c001ec94:	c3                   	ret    

c001ec95 <ideChannel1IRQHandler(regs*, void*)>:
c001ec95:	83 ec 10             	sub    esp,0x10
c001ec98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ec9c:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001eca3:	6a 07                	push   0x7
c001eca5:	6a 01                	push   0x1
c001eca7:	50                   	push   eax
c001eca8:	e8 bb fe ff ff       	call   c001eb68 <IDE::read(unsigned char, unsigned char)>
c001ecad:	83 c4 1c             	add    esp,0x1c
c001ecb0:	c3                   	ret    
c001ecb1:	90                   	nop

c001ecb2 <IDE::enableIRQs(unsigned char, bool)>:
c001ecb2:	57                   	push   edi
c001ecb3:	b8 02 00 00 00       	mov    eax,0x2
c001ecb8:	56                   	push   esi
c001ecb9:	53                   	push   ebx
c001ecba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ecbe:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ecc2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ecc7:	74 02                	je     c001eccb <IDE::enableIRQs(unsigned char, bool)+0x19>
c001ecc9:	31 c0                	xor    eax,eax
c001eccb:	0f b6 db             	movzx  ebx,bl
c001ecce:	bf 04 00 00 00       	mov    edi,0x4
c001ecd3:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001ecda:	50                   	push   eax
c001ecdb:	6a 0c                	push   0xc
c001ecdd:	53                   	push   ebx
c001ecde:	56                   	push   esi
c001ecdf:	e8 c4 fd ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ece4:	83 c4 10             	add    esp,0x10
c001ece7:	50                   	push   eax
c001ece8:	6a 0c                	push   0xc
c001ecea:	53                   	push   ebx
c001eceb:	56                   	push   esi
c001ecec:	e8 77 fe ff ff       	call   c001eb68 <IDE::read(unsigned char, unsigned char)>
c001ecf1:	83 c4 10             	add    esp,0x10
c001ecf4:	4f                   	dec    edi
c001ecf5:	75 f0                	jne    c001ece7 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001ecf7:	5b                   	pop    ebx
c001ecf8:	5e                   	pop    esi
c001ecf9:	5f                   	pop    edi
c001ecfa:	c3                   	ret    
c001ecfb:	90                   	nop

c001ecfc <IDE::open(int, int, void*)>:
c001ecfc:	57                   	push   edi
c001ecfd:	56                   	push   esi
c001ecfe:	53                   	push   ebx
c001ecff:	83 ec 10             	sub    esp,0x10
c001ed02:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ed06:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ed0f:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ed18:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ed1f:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ed26:	0f 85 84 02 00 00    	jne    c001efb0 <IDE::open(int, int, void*)+0x2b4>
c001ed2c:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ed32:	a8 70                	test   al,0x70
c001ed34:	75 44                	jne    c001ed7a <IDE::open(int, int, void*)+0x7e>
c001ed36:	ba 20 84 00 00       	mov    edx,0x8420
c001ed3b:	0f a3 c2             	bt     edx,eax
c001ed3e:	73 3a                	jae    c001ed7a <IDE::open(int, int, void*)+0x7e>
c001ed40:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ed46:	83 ec 0c             	sub    esp,0xc
c001ed49:	83 e0 fc             	and    eax,0xfffffffc
c001ed4c:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ed53:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ed59:	83 e0 fc             	and    eax,0xfffffffc
c001ed5c:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ed63:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ed69:	83 e0 fc             	and    eax,0xfffffffc
c001ed6c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ed73:	68 2d 36 02 c0       	push   0xc002362d
c001ed78:	eb 60                	jmp    c001edda <IDE::open(int, int, void*)+0xde>
c001ed7a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ed84:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ed8e:	be 64 00 00 00       	mov    esi,0x64
c001ed93:	57                   	push   edi
c001ed94:	57                   	push   edi
c001ed95:	68 48 62 02 c0       	push   0xc0026248
c001ed9a:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001ed9e:	57                   	push   edi
c001ed9f:	e8 9c 18 fe ff       	call   c0000640 <strcpy>
c001eda4:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001edab:	31 d2                	xor    edx,edx
c001edad:	89 c8                	mov    eax,ecx
c001edaf:	89 3c 24             	mov    DWORD PTR [esp],edi
c001edb2:	f7 f6                	div    esi
c001edb4:	be 0a 00 00 00       	mov    esi,0xa
c001edb9:	83 c0 30             	add    eax,0x30
c001edbc:	31 d2                	xor    edx,edx
c001edbe:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001edc2:	89 c8                	mov    eax,ecx
c001edc4:	f7 f6                	div    esi
c001edc6:	89 d1                	mov    ecx,edx
c001edc8:	31 d2                	xor    edx,edx
c001edca:	83 c1 30             	add    ecx,0x30
c001edcd:	f7 f6                	div    esi
c001edcf:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001edd3:	83 c2 30             	add    edx,0x30
c001edd6:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001edda:	e8 4a e5 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001eddf:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ede4:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001edeb:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001edf2:	c1 e1 10             	shl    ecx,0x10
c001edf5:	c1 e0 0b             	shl    eax,0xb
c001edf8:	83 c4 10             	add    esp,0x10
c001edfb:	09 c1                	or     ecx,eax
c001edfd:	89 fa                	mov    edx,edi
c001edff:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ee06:	c1 e0 08             	shl    eax,0x8
c001ee09:	09 c1                	or     ecx,eax
c001ee0b:	89 c8                	mov    eax,ecx
c001ee0d:	0d 08 00 00 80       	or     eax,0x80000008
c001ee12:	ef                   	out    dx,eax
c001ee13:	be fc 0c 00 00       	mov    esi,0xcfc
c001ee18:	89 f2                	mov    edx,esi
c001ee1a:	ed                   	in     eax,dx
c001ee1b:	c1 e8 10             	shr    eax,0x10
c001ee1e:	3d ff ff 00 00       	cmp    eax,0xffff
c001ee23:	0f 84 e5 00 00 00    	je     c001ef0e <IDE::open(int, int, void*)+0x212>
c001ee29:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001ee2f:	89 fa                	mov    edx,edi
c001ee31:	89 c8                	mov    eax,ecx
c001ee33:	ef                   	out    dx,eax
c001ee34:	b0 fe                	mov    al,0xfe
c001ee36:	89 f2                	mov    edx,esi
c001ee38:	ee                   	out    dx,al
c001ee39:	89 c8                	mov    eax,ecx
c001ee3b:	89 fa                	mov    edx,edi
c001ee3d:	ef                   	out    dx,eax
c001ee3e:	89 f2                	mov    edx,esi
c001ee40:	ed                   	in     eax,dx
c001ee41:	3c fe                	cmp    al,0xfe
c001ee43:	0f 85 85 00 00 00    	jne    c001eece <IDE::open(int, int, void*)+0x1d2>
c001ee49:	83 ec 0c             	sub    esp,0xc
c001ee4c:	68 63 36 02 c0       	push   0xc0023663
c001ee51:	e8 d3 e4 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001ee56:	c7 04 24 4e 62 02 c0 	mov    DWORD PTR [esp],0xc002624e
c001ee5d:	e8 1a 81 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ee62:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001ee6c:	c7 04 24 48 39 02 c0 	mov    DWORD PTR [esp],0xc0023948
c001ee73:	e8 b1 e4 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001ee78:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001ee7f:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ee86:	c1 e1 10             	shl    ecx,0x10
c001ee89:	c1 e0 08             	shl    eax,0x8
c001ee8c:	89 fa                	mov    edx,edi
c001ee8e:	09 c1                	or     ecx,eax
c001ee90:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ee97:	c1 e0 0b             	shl    eax,0xb
c001ee9a:	09 c1                	or     ecx,eax
c001ee9c:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001eea2:	89 c8                	mov    eax,ecx
c001eea4:	ef                   	out    dx,eax
c001eea5:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001eeab:	89 f2                	mov    edx,esi
c001eead:	ee                   	out    dx,al
c001eeae:	89 c8                	mov    eax,ecx
c001eeb0:	89 fa                	mov    edx,edi
c001eeb2:	ef                   	out    dx,eax
c001eeb3:	89 f2                	mov    edx,esi
c001eeb5:	ed                   	in     eax,dx
c001eeb6:	0f b6 c0             	movzx  eax,al
c001eeb9:	83 c4 10             	add    esp,0x10
c001eebc:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001eec2:	74 5a                	je     c001ef1e <IDE::open(int, int, void*)+0x222>
c001eec4:	83 ec 0c             	sub    esp,0xc
c001eec7:	68 63 62 02 c0       	push   0xc0026263
c001eecc:	eb 48                	jmp    c001ef16 <IDE::open(int, int, void*)+0x21a>
c001eece:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001eed7:	75 2b                	jne    c001ef04 <IDE::open(int, int, void*)+0x208>
c001eed9:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001eee0:	3d 80 00 00 00       	cmp    eax,0x80
c001eee5:	74 07                	je     c001eeee <IDE::open(int, int, void*)+0x1f2>
c001eee7:	3d 8a 00 00 00       	cmp    eax,0x8a
c001eeec:	75 16                	jne    c001ef04 <IDE::open(int, int, void*)+0x208>
c001eeee:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001eef5:	83 ec 0c             	sub    esp,0xc
c001eef8:	68 1e 31 02 c0       	push   0xc002311e
c001eefd:	e8 27 e4 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001ef02:	eb 17                	jmp    c001ef1b <IDE::open(int, int, void*)+0x21f>
c001ef04:	83 ec 0c             	sub    esp,0xc
c001ef07:	68 6b 62 02 c0       	push   0xc002626b
c001ef0c:	eb 08                	jmp    c001ef16 <IDE::open(int, int, void*)+0x21a>
c001ef0e:	83 ec 0c             	sub    esp,0xc
c001ef11:	68 9c 62 02 c0       	push   0xc002629c
c001ef16:	e8 cb 10 ff ff       	call   c000ffe6 <KePanic(char const*)>
c001ef1b:	83 c4 10             	add    esp,0x10
c001ef1e:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001ef25:	0f 84 bf 00 00 00    	je     c001efea <IDE::open(int, int, void*)+0x2ee>
c001ef2b:	83 ec 0c             	sub    esp,0xc
c001ef2e:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001ef34:	83 e0 fc             	and    eax,0xfffffffc
c001ef37:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001ef3e:	83 c0 08             	add    eax,0x8
c001ef41:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001ef48:	68 c6 62 02 c0       	push   0xc00262c6
c001ef4d:	e8 2a 80 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ef52:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ef59:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ef60:	50                   	push   eax
c001ef61:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ef68:	50                   	push   eax
c001ef69:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ef70:	50                   	push   eax
c001ef71:	ff 35 80 04 03 c0    	push   DWORD PTR ds:0xc0030480
c001ef77:	e8 92 f0 ff ff       	call   c001e00e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ef7c:	83 c4 18             	add    esp,0x18
c001ef7f:	83 c8 07             	or     eax,0x7
c001ef82:	0f b7 c0             	movzx  eax,ax
c001ef85:	50                   	push   eax
c001ef86:	6a 04                	push   0x4
c001ef88:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ef8f:	50                   	push   eax
c001ef90:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ef97:	50                   	push   eax
c001ef98:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ef9f:	50                   	push   eax
c001efa0:	ff 35 80 04 03 c0    	push   DWORD PTR ds:0xc0030480
c001efa6:	e8 9f f2 ff ff       	call   c001e24a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001efab:	83 c4 20             	add    esp,0x20
c001efae:	eb 3a                	jmp    c001efea <IDE::open(int, int, void*)+0x2ee>
c001efb0:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001efb6:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001efbd:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001efc4:	05 06 02 00 00       	add    eax,0x206
c001efc9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001efd0:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001efd7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001efde:	05 06 02 00 00       	add    eax,0x206
c001efe3:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001efea:	83 ec 0c             	sub    esp,0xc
c001efed:	68 fc 3e 02 c0       	push   0xc0023efc
c001eff2:	e8 32 e3 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001eff7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001effd:	83 c4 10             	add    esp,0x10
c001f000:	89 c2                	mov    edx,eax
c001f002:	83 e2 0f             	and    edx,0xf
c001f005:	83 fa 08             	cmp    edx,0x8
c001f008:	75 0a                	jne    c001f014 <IDE::open(int, int, void*)+0x318>
c001f00a:	83 e8 02             	sub    eax,0x2
c001f00d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f014:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001f01a:	89 c2                	mov    edx,eax
c001f01c:	83 e2 0f             	and    edx,0xf
c001f01f:	83 fa 08             	cmp    edx,0x8
c001f022:	75 0a                	jne    c001f02e <IDE::open(int, int, void*)+0x332>
c001f024:	83 e8 02             	sub    eax,0x2
c001f027:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f02e:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001f035:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001f03c:	89 d0                	mov    eax,edx
c001f03e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f041:	8d 7a 01             	lea    edi,[edx+0x1]
c001f044:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f048:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001f04c:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001f050:	83 e1 3f             	and    ecx,0x3f
c001f053:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001f057:	89 f9                	mov    ecx,edi
c001f059:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001f060:	0f b6 c9             	movzx  ecx,cl
c001f063:	8d 78 02             	lea    edi,[eax+0x2]
c001f066:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f069:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f06d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001f071:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001f075:	83 e2 3f             	and    edx,0x3f
c001f078:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001f07c:	89 f9                	mov    ecx,edi
c001f07e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001f084:	0f b6 d1             	movzx  edx,cl
c001f087:	8d 78 03             	lea    edi,[eax+0x3]
c001f08a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f08d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f091:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001f095:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001f099:	83 e1 3f             	and    ecx,0x3f
c001f09c:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001f0a0:	89 fa                	mov    edx,edi
c001f0a2:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001f0a8:	0f b6 ca             	movzx  ecx,dl
c001f0ab:	8d 78 04             	lea    edi,[eax+0x4]
c001f0ae:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f0b1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f0b5:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001f0b9:	89 fa                	mov    edx,edi
c001f0bb:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001f0c1:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001f0c5:	83 e2 3f             	and    edx,0x3f
c001f0c8:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001f0cc:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001f0d3:	66 85 f6             	test   si,si
c001f0d6:	74 24                	je     c001f0fc <IDE::open(int, int, void*)+0x400>
c001f0d8:	89 f9                	mov    ecx,edi
c001f0da:	83 c0 05             	add    eax,0x5
c001f0dd:	0f b6 d1             	movzx  edx,cl
c001f0e0:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f0e3:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f0e7:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001f0eb:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001f0f1:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001f0f5:	83 e0 3f             	and    eax,0x3f
c001f0f8:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001f0fc:	83 ec 0c             	sub    esp,0xc
c001f0ff:	68 de 62 02 c0       	push   0xc00262de
c001f104:	e8 20 e2 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f109:	58                   	pop    eax
c001f10a:	5a                   	pop    edx
c001f10b:	6a 00                	push   0x0
c001f10d:	53                   	push   ebx
c001f10e:	e8 6f f9 ff ff       	call   c001ea82 <IDE::prepareInterrupt(unsigned char)>
c001f113:	59                   	pop    ecx
c001f114:	5e                   	pop    esi
c001f115:	6a 01                	push   0x1
c001f117:	53                   	push   ebx
c001f118:	e8 65 f9 ff ff       	call   c001ea82 <IDE::prepareInterrupt(unsigned char)>
c001f11d:	c7 04 24 60 5b 02 c0 	mov    DWORD PTR [esp],0xc0025b60
c001f124:	e8 00 e2 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f129:	83 c4 0c             	add    esp,0xc
c001f12c:	6a 00                	push   0x0
c001f12e:	6a 00                	push   0x0
c001f130:	53                   	push   ebx
c001f131:	e8 7c fb ff ff       	call   c001ecb2 <IDE::enableIRQs(unsigned char, bool)>
c001f136:	83 c4 0c             	add    esp,0xc
c001f139:	6a 00                	push   0x0
c001f13b:	6a 01                	push   0x1
c001f13d:	53                   	push   ebx
c001f13e:	e8 6f fb ff ff       	call   c001ecb2 <IDE::enableIRQs(unsigned char, bool)>
c001f143:	c7 04 24 e0 62 02 c0 	mov    DWORD PTR [esp],0xc00262e0
c001f14a:	e8 da e1 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f14f:	83 c4 10             	add    esp,0x10
c001f152:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001f159:	74 3c                	je     c001f197 <IDE::open(int, int, void*)+0x49b>
c001f15b:	83 ec 0c             	sub    esp,0xc
c001f15e:	53                   	push   ebx
c001f15f:	6a 01                	push   0x1
c001f161:	68 79 ec 01 c0       	push   0xc001ec79
c001f166:	6a 0e                	push   0xe
c001f168:	53                   	push   ebx
c001f169:	e8 92 a8 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f16e:	83 c4 14             	add    esp,0x14
c001f171:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001f177:	53                   	push   ebx
c001f178:	6a 01                	push   0x1
c001f17a:	68 95 ec 01 c0       	push   0xc001ec95
c001f17f:	6a 0f                	push   0xf
c001f181:	53                   	push   ebx
c001f182:	e8 79 a8 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f187:	83 c4 14             	add    esp,0x14
c001f18a:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001f190:	68 4e 3b 02 c0       	push   0xc0023b4e
c001f195:	eb 40                	jmp    c001f1d7 <IDE::open(int, int, void*)+0x4db>
c001f197:	83 ec 0c             	sub    esp,0xc
c001f19a:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001f1a4:	53                   	push   ebx
c001f1a5:	6a 00                	push   0x0
c001f1a7:	68 79 ec 01 c0       	push   0xc001ec79
c001f1ac:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001f1b2:	53                   	push   ebx
c001f1b3:	e8 48 a8 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f1b8:	83 c4 14             	add    esp,0x14
c001f1bb:	53                   	push   ebx
c001f1bc:	6a 00                	push   0x0
c001f1be:	68 95 ec 01 c0       	push   0xc001ec95
c001f1c3:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001f1c9:	53                   	push   ebx
c001f1ca:	e8 31 a8 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f1cf:	83 c4 14             	add    esp,0x14
c001f1d2:	68 87 48 02 c0       	push   0xc0024887
c001f1d7:	e8 4d e1 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f1dc:	83 c4 10             	add    esp,0x10
c001f1df:	83 ec 0c             	sub    esp,0xc
c001f1e2:	68 e2 62 02 c0       	push   0xc00262e2
c001f1e7:	e8 3d e1 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f1ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f1ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f1f1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001f1f4:	c7 04 24 69 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f69
c001f1fb:	e8 29 e1 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f200:	83 c4 0c             	add    esp,0xc
c001f203:	6a 07                	push   0x7
c001f205:	6a 00                	push   0x0
c001f207:	53                   	push   ebx
c001f208:	e8 5b f9 ff ff       	call   c001eb68 <IDE::read(unsigned char, unsigned char)>
c001f20d:	83 c4 0c             	add    esp,0xc
c001f210:	6a 07                	push   0x7
c001f212:	6a 01                	push   0x1
c001f214:	53                   	push   ebx
c001f215:	e8 4e f9 ff ff       	call   c001eb68 <IDE::read(unsigned char, unsigned char)>
c001f21a:	c7 04 24 e4 45 02 c0 	mov    DWORD PTR [esp],0xc00245e4
c001f221:	e8 03 e1 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f226:	83 c4 0c             	add    esp,0xc
c001f229:	6a 01                	push   0x1
c001f22b:	6a 00                	push   0x0
c001f22d:	53                   	push   ebx
c001f22e:	e8 7f fa ff ff       	call   c001ecb2 <IDE::enableIRQs(unsigned char, bool)>
c001f233:	83 c4 0c             	add    esp,0xc
c001f236:	6a 01                	push   0x1
c001f238:	6a 01                	push   0x1
c001f23a:	53                   	push   ebx
c001f23b:	e8 72 fa ff ff       	call   c001ecb2 <IDE::enableIRQs(unsigned char, bool)>
c001f240:	c7 04 24 e5 62 02 c0 	mov    DWORD PTR [esp],0xc00262e5
c001f247:	e8 dd e0 fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f24c:	83 c4 20             	add    esp,0x20
c001f24f:	31 c0                	xor    eax,eax
c001f251:	5b                   	pop    ebx
c001f252:	5e                   	pop    esi
c001f253:	5f                   	pop    edi
c001f254:	c3                   	ret    
c001f255:	90                   	nop

c001f256 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001f256:	55                   	push   ebp
c001f257:	57                   	push   edi
c001f258:	56                   	push   esi
c001f259:	53                   	push   ebx
c001f25a:	83 ec 1c             	sub    esp,0x1c
c001f25d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001f261:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f265:	8d 42 f8             	lea    eax,[edx-0x8]
c001f268:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f26c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001f270:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f274:	3c 03                	cmp    al,0x3
c001f276:	77 5a                	ja     c001f2d2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001f278:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f27c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f280:	0f b6 db             	movzx  ebx,bl
c001f283:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001f286:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f28b:	0c 80                	or     al,0x80
c001f28d:	50                   	push   eax
c001f28e:	6a 0c                	push   0xc
c001f290:	53                   	push   ebx
c001f291:	56                   	push   esi
c001f292:	e8 11 f8 ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f297:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001f29c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f2a0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f2a4:	0f b6 d2             	movzx  edx,dl
c001f2a7:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001f2ab:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f2ad:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f2b2:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001f2b6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001f2ba:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f2be:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001f2c6:	83 c4 2c             	add    esp,0x2c
c001f2c9:	5b                   	pop    ebx
c001f2ca:	5e                   	pop    esi
c001f2cb:	5f                   	pop    edi
c001f2cc:	5d                   	pop    ebp
c001f2cd:	e9 d6 f7 ff ff       	jmp    c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f2d2:	0f b6 c2             	movzx  eax,dl
c001f2d5:	83 f8 07             	cmp    eax,0x7
c001f2d8:	77 12                	ja     c001f2ec <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001f2da:	0f b6 c2             	movzx  eax,dl
c001f2dd:	0f b6 db             	movzx  ebx,bl
c001f2e0:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001f2e8:	01 c2                	add    edx,eax
c001f2ea:	eb 2f                	jmp    c001f31b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001f2ec:	83 f8 0d             	cmp    eax,0xd
c001f2ef:	77 13                	ja     c001f304 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001f2f1:	0f b6 db             	movzx  ebx,bl
c001f2f4:	0f b6 d2             	movzx  edx,dl
c001f2f7:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001f2fe:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001f302:	eb 17                	jmp    c001f31b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001f304:	83 f8 15             	cmp    eax,0x15
c001f307:	77 14                	ja     c001f31d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001f309:	0f b6 db             	movzx  ebx,bl
c001f30c:	0f b6 d2             	movzx  edx,dl
c001f30f:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001f317:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001f31b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f31d:	83 c4 1c             	add    esp,0x1c
c001f320:	5b                   	pop    ebx
c001f321:	5e                   	pop    esi
c001f322:	5f                   	pop    edi
c001f323:	5d                   	pop    ebp
c001f324:	c3                   	ret    
c001f325:	90                   	nop

c001f326 <IDE::detect()>:
c001f326:	55                   	push   ebp
c001f327:	57                   	push   edi
c001f328:	56                   	push   esi
c001f329:	53                   	push   ebx
c001f32a:	81 ec 28 02 00 00    	sub    esp,0x228
c001f330:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001f337:	68 e7 62 02 c0       	push   0xc00262e7
c001f33c:	e8 e8 df fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f341:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001f347:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001f34b:	83 c4 10             	add    esp,0x10
c001f34e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001f353:	0f 85 2f 04 00 00    	jne    c001f788 <IDE::detect()+0x462>
c001f359:	83 ec 0c             	sub    esp,0xc
c001f35c:	31 f6                	xor    esi,esi
c001f35e:	68 ea 62 02 c0       	push   0xc00262ea
c001f363:	31 ff                	xor    edi,edi
c001f365:	e8 bf df fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f36a:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001f371:	83 c4 10             	add    esp,0x10
c001f374:	83 ec 0c             	sub    esp,0xc
c001f377:	68 ed 62 02 c0       	push   0xc00262ed
c001f37c:	e8 a8 df fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f381:	83 c4 10             	add    esp,0x10
c001f384:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f38b:	83 ec 0c             	sub    esp,0xc
c001f38e:	31 ed                	xor    ebp,ebp
c001f390:	68 f0 62 02 c0       	push   0xc00262f0
c001f395:	e8 8f df fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f39a:	89 f8                	mov    eax,edi
c001f39c:	c1 e0 06             	shl    eax,0x6
c001f39f:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001f3a7:	c7 04 24 f3 62 02 c0 	mov    DWORD PTR [esp],0xc00262f3
c001f3ae:	e8 76 df fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f3b3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f3b7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f3bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3bf:	c1 e0 04             	shl    eax,0x4
c001f3c2:	83 c8 a0             	or     eax,0xffffffa0
c001f3c5:	0f b6 c0             	movzx  eax,al
c001f3c8:	50                   	push   eax
c001f3c9:	6a 06                	push   0x6
c001f3cb:	56                   	push   esi
c001f3cc:	53                   	push   ebx
c001f3cd:	e8 d6 f6 ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f3d2:	83 c4 1c             	add    esp,0x1c
c001f3d5:	6a 0c                	push   0xc
c001f3d7:	56                   	push   esi
c001f3d8:	53                   	push   ebx
c001f3d9:	e8 8a f7 ff ff       	call   c001eb68 <IDE::read(unsigned char, unsigned char)>
c001f3de:	83 c4 0c             	add    esp,0xc
c001f3e1:	6a 0c                	push   0xc
c001f3e3:	56                   	push   esi
c001f3e4:	53                   	push   ebx
c001f3e5:	e8 7e f7 ff ff       	call   c001eb68 <IDE::read(unsigned char, unsigned char)>
c001f3ea:	83 c4 0c             	add    esp,0xc
c001f3ed:	6a 0c                	push   0xc
c001f3ef:	56                   	push   esi
c001f3f0:	53                   	push   ebx
c001f3f1:	e8 72 f7 ff ff       	call   c001eb68 <IDE::read(unsigned char, unsigned char)>
c001f3f6:	83 c4 0c             	add    esp,0xc
c001f3f9:	6a 0c                	push   0xc
c001f3fb:	56                   	push   esi
c001f3fc:	53                   	push   ebx
c001f3fd:	e8 66 f7 ff ff       	call   c001eb68 <IDE::read(unsigned char, unsigned char)>
c001f402:	c7 04 24 f6 62 02 c0 	mov    DWORD PTR [esp],0xc00262f6
c001f409:	e8 1b df fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f40e:	68 ec 00 00 00       	push   0xec
c001f413:	6a 07                	push   0x7
c001f415:	56                   	push   esi
c001f416:	53                   	push   ebx
c001f417:	e8 8c f6 ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f41c:	83 c4 1c             	add    esp,0x1c
c001f41f:	6a 0c                	push   0xc
c001f421:	56                   	push   esi
c001f422:	53                   	push   ebx
c001f423:	e8 40 f7 ff ff       	call   c001eb68 <IDE::read(unsigned char, unsigned char)>
c001f428:	83 c4 0c             	add    esp,0xc
c001f42b:	6a 0c                	push   0xc
c001f42d:	56                   	push   esi
c001f42e:	53                   	push   ebx
c001f42f:	e8 34 f7 ff ff       	call   c001eb68 <IDE::read(unsigned char, unsigned char)>
c001f434:	83 c4 0c             	add    esp,0xc
c001f437:	6a 0c                	push   0xc
c001f439:	56                   	push   esi
c001f43a:	53                   	push   ebx
c001f43b:	e8 28 f7 ff ff       	call   c001eb68 <IDE::read(unsigned char, unsigned char)>
c001f440:	83 c4 0c             	add    esp,0xc
c001f443:	6a 0c                	push   0xc
c001f445:	56                   	push   esi
c001f446:	53                   	push   ebx
c001f447:	e8 1c f7 ff ff       	call   c001eb68 <IDE::read(unsigned char, unsigned char)>
c001f44c:	c7 04 24 f9 62 02 c0 	mov    DWORD PTR [esp],0xc00262f9
c001f453:	e8 d1 de fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f458:	83 c4 0c             	add    esp,0xc
c001f45b:	6a 0c                	push   0xc
c001f45d:	56                   	push   esi
c001f45e:	53                   	push   ebx
c001f45f:	e8 04 f7 ff ff       	call   c001eb68 <IDE::read(unsigned char, unsigned char)>
c001f464:	83 c4 10             	add    esp,0x10
c001f467:	84 c0                	test   al,al
c001f469:	75 1f                	jne    c001f48a <IDE::detect()+0x164>
c001f46b:	83 ec 0c             	sub    esp,0xc
c001f46e:	68 fc 62 02 c0       	push   0xc00262fc
c001f473:	e8 b1 de fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f478:	e9 e9 02 00 00       	jmp    c001f766 <IDE::detect()+0x440>
c001f47d:	a8 80                	test   al,0x80
c001f47f:	74 21                	je     c001f4a2 <IDE::detect()+0x17c>
c001f481:	45                   	inc    ebp
c001f482:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001f488:	7f 1e                	jg     c001f4a8 <IDE::detect()+0x182>
c001f48a:	50                   	push   eax
c001f48b:	6a 0c                	push   0xc
c001f48d:	56                   	push   esi
c001f48e:	53                   	push   ebx
c001f48f:	e8 d4 f6 ff ff       	call   c001eb68 <IDE::read(unsigned char, unsigned char)>
c001f494:	83 c4 10             	add    esp,0x10
c001f497:	a8 01                	test   al,0x1
c001f499:	74 e2                	je     c001f47d <IDE::detect()+0x157>
c001f49b:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001f4a0:	eb 23                	jmp    c001f4c5 <IDE::detect()+0x19f>
c001f4a2:	a8 08                	test   al,0x8
c001f4a4:	74 db                	je     c001f481 <IDE::detect()+0x15b>
c001f4a6:	eb 18                	jmp    c001f4c0 <IDE::detect()+0x19a>
c001f4a8:	50                   	push   eax
c001f4a9:	50                   	push   eax
c001f4aa:	6a 00                	push   0x0
c001f4ac:	6a 32                	push   0x32
c001f4ae:	e8 55 7f ff ff       	call   c0017408 <milliTenthSleep(unsigned long long)>
c001f4b3:	83 c4 10             	add    esp,0x10
c001f4b6:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001f4bc:	75 cc                	jne    c001f48a <IDE::detect()+0x164>
c001f4be:	eb db                	jmp    c001f49b <IDE::detect()+0x175>
c001f4c0:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001f4c5:	83 ec 0c             	sub    esp,0xc
c001f4c8:	68 ff 62 02 c0       	push   0xc00262ff
c001f4cd:	e8 57 de fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f4d2:	83 c4 10             	add    esp,0x10
c001f4d5:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001f4da:	74 5f                	je     c001f53b <IDE::detect()+0x215>
c001f4dc:	51                   	push   ecx
c001f4dd:	6a 04                	push   0x4
c001f4df:	56                   	push   esi
c001f4e0:	53                   	push   ebx
c001f4e1:	e8 82 f6 ff ff       	call   c001eb68 <IDE::read(unsigned char, unsigned char)>
c001f4e6:	83 c4 0c             	add    esp,0xc
c001f4e9:	89 c5                	mov    ebp,eax
c001f4eb:	6a 05                	push   0x5
c001f4ed:	56                   	push   esi
c001f4ee:	53                   	push   ebx
c001f4ef:	e8 74 f6 ff ff       	call   c001eb68 <IDE::read(unsigned char, unsigned char)>
c001f4f4:	83 c4 10             	add    esp,0x10
c001f4f7:	89 e9                	mov    ecx,ebp
c001f4f9:	0f b6 c0             	movzx  eax,al
c001f4fc:	0f b6 e9             	movzx  ebp,cl
c001f4ff:	83 fd 14             	cmp    ebp,0x14
c001f502:	75 07                	jne    c001f50b <IDE::detect()+0x1e5>
c001f504:	3d eb 00 00 00       	cmp    eax,0xeb
c001f509:	eb 0e                	jmp    c001f519 <IDE::detect()+0x1f3>
c001f50b:	3d 96 00 00 00       	cmp    eax,0x96
c001f510:	0f 85 53 02 00 00    	jne    c001f769 <IDE::detect()+0x443>
c001f516:	83 fd 69             	cmp    ebp,0x69
c001f519:	0f 85 4a 02 00 00    	jne    c001f769 <IDE::detect()+0x443>
c001f51f:	68 a1 00 00 00       	push   0xa1
c001f524:	6a 07                	push   0x7
c001f526:	56                   	push   esi
c001f527:	53                   	push   ebx
c001f528:	e8 7b f5 ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f52d:	58                   	pop    eax
c001f52e:	5a                   	pop    edx
c001f52f:	6a 00                	push   0x0
c001f531:	6a 0a                	push   0xa
c001f533:	e8 d0 7e ff ff       	call   c0017408 <milliTenthSleep(unsigned long long)>
c001f538:	83 c4 10             	add    esp,0x10
c001f53b:	83 ec 0c             	sub    esp,0xc
c001f53e:	89 fd                	mov    ebp,edi
c001f540:	68 02 63 02 c0       	push   0xc0026302
c001f545:	c1 e5 06             	shl    ebp,0x6
c001f548:	e8 dc dd fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f54d:	01 dd                	add    ebp,ebx
c001f54f:	8d 54 24 20          	lea    edx,[esp+0x20]
c001f553:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001f55a:	52                   	push   edx
c001f55b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001f55f:	6a 00                	push   0x0
c001f561:	56                   	push   esi
c001f562:	53                   	push   ebx
c001f563:	e8 ee fc ff ff       	call   c001f256 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001f568:	83 c4 14             	add    esp,0x14
c001f56b:	68 06 63 02 c0       	push   0xc0026306
c001f570:	e8 b4 dd fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f575:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001f57a:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001f581:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001f588:	89 f0                	mov    eax,esi
c001f58a:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001f590:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f594:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001f59a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f59e:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001f5a5:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001f5ad:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001f5b4:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001f5bc:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001f5c2:	c7 04 24 0a 63 02 c0 	mov    DWORD PTR [esp],0xc002630a
c001f5c9:	e8 5b dd fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f5ce:	83 c4 10             	add    esp,0x10
c001f5d1:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001f5d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f5dc:	74 09                	je     c001f5e7 <IDE::detect()+0x2c1>
c001f5de:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001f5e5:	eb 07                	jmp    c001f5ee <IDE::detect()+0x2c8>
c001f5e7:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001f5ee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f5f2:	89 f8                	mov    eax,edi
c001f5f4:	83 ec 0c             	sub    esp,0xc
c001f5f7:	c1 e0 06             	shl    eax,0x6
c001f5fa:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001f5fd:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001f603:	68 0e 63 02 c0       	push   0xc002630e
c001f608:	e8 1c dd fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f60d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f611:	89 e8                	mov    eax,ebp
c001f613:	83 c4 10             	add    esp,0x10
c001f616:	8d 6a 28             	lea    ebp,[edx+0x28]
c001f619:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001f61c:	83 c0 02             	add    eax,0x2
c001f61f:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001f625:	83 c2 02             	add    edx,0x2
c001f628:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001f62b:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001f631:	39 d5                	cmp    ebp,edx
c001f633:	75 e4                	jne    c001f619 <IDE::detect()+0x2f3>
c001f635:	89 f8                	mov    eax,edi
c001f637:	c1 e0 06             	shl    eax,0x6
c001f63a:	01 d8                	add    eax,ebx
c001f63c:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001f643:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001f64a:	c1 ea 09             	shr    edx,0x9
c001f64d:	83 e2 01             	and    edx,0x1
c001f650:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001f657:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001f65d:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001f661:	74 0c                	je     c001f66f <IDE::detect()+0x349>
c001f663:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001f66c:	0f 95 c2             	setne  dl
c001f66f:	83 ec 0c             	sub    esp,0xc
c001f672:	89 fd                	mov    ebp,edi
c001f674:	c1 e5 06             	shl    ebp,0x6
c001f677:	01 dd                	add    ebp,ebx
c001f679:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001f67f:	68 12 63 02 c0       	push   0xc0026312
c001f684:	e8 a0 dc fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f689:	83 c4 10             	add    esp,0x10
c001f68c:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001f691:	75 66                	jne    c001f6f9 <IDE::detect()+0x3d3>
c001f693:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001f69a:	0f 84 b8 00 00 00    	je     c001f758 <IDE::detect()+0x432>
c001f6a0:	83 ec 0c             	sub    esp,0xc
c001f6a3:	68 16 63 02 c0       	push   0xc0026316
c001f6a8:	e8 7c dc fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f6ad:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001f6b4:	e8 d6 04 ff ff       	call   c000fb8f <malloc>
c001f6b9:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6bc:	89 c5                	mov    ebp,eax
c001f6be:	e8 43 05 00 00       	call   c001fc06 <ATA::ATA()>
c001f6c3:	c7 04 24 1a 63 02 c0 	mov    DWORD PTR [esp],0xc002631a
c001f6ca:	e8 5a dc fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f6cf:	59                   	pop    ecx
c001f6d0:	58                   	pop    eax
c001f6d1:	55                   	push   ebp
c001f6d2:	53                   	push   ebx
c001f6d3:	e8 7c a3 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001f6d8:	c7 04 24 1f 63 02 c0 	mov    DWORD PTR [esp],0xc002631f
c001f6df:	e8 45 dc fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f6e4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f6e7:	53                   	push   ebx
c001f6e8:	57                   	push   edi
c001f6e9:	6a 00                	push   0x0
c001f6eb:	55                   	push   ebp
c001f6ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f6ef:	83 c4 14             	add    esp,0x14
c001f6f2:	68 24 63 02 c0       	push   0xc0026324
c001f6f7:	eb 57                	jmp    c001f750 <IDE::detect()+0x42a>
c001f6f9:	83 ec 0c             	sub    esp,0xc
c001f6fc:	68 29 63 02 c0       	push   0xc0026329
c001f701:	e8 23 dc fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f706:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f70d:	e8 7d 04 ff ff       	call   c000fb8f <malloc>
c001f712:	89 04 24             	mov    DWORD PTR [esp],eax
c001f715:	89 c5                	mov    ebp,eax
c001f717:	e8 98 0c 00 00       	call   c00203b4 <ATAPI::ATAPI()>
c001f71c:	c7 04 24 2f 63 02 c0 	mov    DWORD PTR [esp],0xc002632f
c001f723:	e8 01 dc fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f728:	58                   	pop    eax
c001f729:	5a                   	pop    edx
c001f72a:	55                   	push   ebp
c001f72b:	53                   	push   ebx
c001f72c:	e8 23 a3 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001f731:	c7 04 24 36 63 02 c0 	mov    DWORD PTR [esp],0xc0026336
c001f738:	e8 ec db fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f73d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f740:	53                   	push   ebx
c001f741:	57                   	push   edi
c001f742:	6a 00                	push   0x0
c001f744:	55                   	push   ebp
c001f745:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f748:	83 c4 14             	add    esp,0x14
c001f74b:	68 3d 63 02 c0       	push   0xc002633d
c001f750:	e8 d4 db fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f755:	83 c4 10             	add    esp,0x10
c001f758:	83 ec 0c             	sub    esp,0xc
c001f75b:	47                   	inc    edi
c001f75c:	68 44 63 02 c0       	push   0xc0026344
c001f761:	e8 c3 db fe ff       	call   c000d329 <KeSetBootMessage(char const*)>
c001f766:	83 c4 10             	add    esp,0x10
c001f769:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001f76d:	74 0c                	je     c001f77b <IDE::detect()+0x455>
c001f76f:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001f776:	e9 10 fc ff ff       	jmp    c001f38b <IDE::detect()+0x65>
c001f77b:	4e                   	dec    esi
c001f77c:	74 0a                	je     c001f788 <IDE::detect()+0x462>
c001f77e:	be 01 00 00 00       	mov    esi,0x1
c001f783:	e9 ec fb ff ff       	jmp    c001f374 <IDE::detect()+0x4e>
c001f788:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f78e:	5b                   	pop    ebx
c001f78f:	5e                   	pop    esi
c001f790:	5f                   	pop    edi
c001f791:	5d                   	pop    ebp
c001f792:	c3                   	ret    
c001f793:	90                   	nop

c001f794 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001f794:	55                   	push   ebp
c001f795:	57                   	push   edi
c001f796:	56                   	push   esi
c001f797:	53                   	push   ebx
c001f798:	83 ec 1c             	sub    esp,0x1c
c001f79b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001f79f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f7a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f7a7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f7ab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f7af:	88 c3                	mov    bl,al
c001f7b1:	25 ff 00 00 00       	and    eax,0xff
c001f7b6:	0f 84 88 00 00 00    	je     c001f844 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f7bc:	83 ec 0c             	sub    esp,0xc
c001f7bf:	89 c7                	mov    edi,eax
c001f7c1:	68 48 63 02 c0       	push   0xc0026348
c001f7c6:	e8 b1 77 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001f7cb:	83 c4 10             	add    esp,0x10
c001f7ce:	83 ff 01             	cmp    edi,0x1
c001f7d1:	74 6b                	je     c001f83e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001f7d3:	83 ff 02             	cmp    edi,0x2
c001f7d6:	75 58                	jne    c001f830 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001f7d8:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001f7dd:	01 ff                	add    edi,edi
c001f7df:	50                   	push   eax
c001f7e0:	09 fe                	or     esi,edi
c001f7e2:	6a 01                	push   0x1
c001f7e4:	89 f0                	mov    eax,esi
c001f7e6:	0f b6 f0             	movzx  esi,al
c001f7e9:	c1 e6 06             	shl    esi,0x6
c001f7ec:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001f7f4:	50                   	push   eax
c001f7f5:	55                   	push   ebp
c001f7f6:	e8 6d f3 ff ff       	call   c001eb68 <IDE::read(unsigned char, unsigned char)>
c001f7fb:	83 c4 10             	add    esp,0x10
c001f7fe:	a8 01                	test   al,0x1
c001f800:	74 02                	je     c001f804 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001f802:	b3 07                	mov    bl,0x7
c001f804:	a8 02                	test   al,0x2
c001f806:	74 02                	je     c001f80a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001f808:	b3 03                	mov    bl,0x3
c001f80a:	a8 04                	test   al,0x4
c001f80c:	74 02                	je     c001f810 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001f80e:	b3 14                	mov    bl,0x14
c001f810:	a8 08                	test   al,0x8
c001f812:	74 02                	je     c001f816 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001f814:	b3 03                	mov    bl,0x3
c001f816:	a8 10                	test   al,0x10
c001f818:	74 02                	je     c001f81c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001f81a:	b3 15                	mov    bl,0x15
c001f81c:	a8 20                	test   al,0x20
c001f81e:	74 02                	je     c001f822 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001f820:	b3 03                	mov    bl,0x3
c001f822:	a8 40                	test   al,0x40
c001f824:	74 02                	je     c001f828 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001f826:	b3 16                	mov    bl,0x16
c001f828:	a8 80                	test   al,0x80
c001f82a:	74 18                	je     c001f844 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f82c:	b3 0d                	mov    bl,0xd
c001f82e:	eb 14                	jmp    c001f844 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f830:	83 ff 03             	cmp    edi,0x3
c001f833:	74 0d                	je     c001f842 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001f835:	83 ff 04             	cmp    edi,0x4
c001f838:	75 0a                	jne    c001f844 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f83a:	b3 08                	mov    bl,0x8
c001f83c:	eb 06                	jmp    c001f844 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f83e:	b3 13                	mov    bl,0x13
c001f840:	eb 02                	jmp    c001f844 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f842:	b3 17                	mov    bl,0x17
c001f844:	83 c4 1c             	add    esp,0x1c
c001f847:	88 d8                	mov    al,bl
c001f849:	5b                   	pop    ebx
c001f84a:	5e                   	pop    esi
c001f84b:	5f                   	pop    edi
c001f84c:	5d                   	pop    ebp
c001f84d:	c3                   	ret    

c001f84e <IDE::polling(unsigned char, unsigned int)>:
c001f84e:	57                   	push   edi
c001f84f:	56                   	push   esi
c001f850:	53                   	push   ebx
c001f851:	bb 04 00 00 00       	mov    ebx,0x4
c001f856:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f85a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f85f:	52                   	push   edx
c001f860:	6a 0c                	push   0xc
c001f862:	56                   	push   esi
c001f863:	57                   	push   edi
c001f864:	e8 ff f2 ff ff       	call   c001eb68 <IDE::read(unsigned char, unsigned char)>
c001f869:	83 c4 10             	add    esp,0x10
c001f86c:	4b                   	dec    ebx
c001f86d:	75 f0                	jne    c001f85f <IDE::polling(unsigned char, unsigned int)+0x11>
c001f86f:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f874:	50                   	push   eax
c001f875:	6a 0c                	push   0xc
c001f877:	56                   	push   esi
c001f878:	57                   	push   edi
c001f879:	e8 ea f2 ff ff       	call   c001eb68 <IDE::read(unsigned char, unsigned char)>
c001f87e:	83 c4 10             	add    esp,0x10
c001f881:	a8 01                	test   al,0x1
c001f883:	75 17                	jne    c001f89c <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f885:	a8 20                	test   al,0x20
c001f887:	75 0f                	jne    c001f898 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f889:	4b                   	dec    ebx
c001f88a:	74 10                	je     c001f89c <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f88c:	a8 80                	test   al,0x80
c001f88e:	75 e4                	jne    c001f874 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f890:	a8 08                	test   al,0x8
c001f892:	74 e0                	je     c001f874 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f894:	31 c0                	xor    eax,eax
c001f896:	eb 06                	jmp    c001f89e <IDE::polling(unsigned char, unsigned int)+0x50>
c001f898:	b0 01                	mov    al,0x1
c001f89a:	eb 02                	jmp    c001f89e <IDE::polling(unsigned char, unsigned int)+0x50>
c001f89c:	b0 02                	mov    al,0x2
c001f89e:	5b                   	pop    ebx
c001f89f:	5e                   	pop    esi
c001f8a0:	5f                   	pop    edi
c001f8a1:	c3                   	ret    

c001f8a2 <SATABus::close(int, int, void*)>:
c001f8a2:	31 c0                	xor    eax,eax
c001f8a4:	c3                   	ret    
c001f8a5:	90                   	nop

c001f8a6 <SATABus::detect()>:
c001f8a6:	c3                   	ret    
c001f8a7:	90                   	nop

c001f8a8 <SATABus::SATABus()>:
c001f8a8:	83 ec 0c             	sub    esp,0xc
c001f8ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8af:	83 ec 08             	sub    esp,0x8
c001f8b2:	68 80 63 02 c0       	push   0xc0026380
c001f8b7:	50                   	push   eax
c001f8b8:	e8 ef a4 fe ff       	call   c0009dac <HardDiskController::HardDiskController(char const*)>
c001f8bd:	83 c4 10             	add    esp,0x10
c001f8c0:	ba ac 63 02 c0       	mov    edx,0xc00263ac
c001f8c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c9:	89 10                	mov    DWORD PTR [eax],edx
c001f8cb:	83 ec 0c             	sub    esp,0xc
c001f8ce:	6a 50                	push   0x50
c001f8d0:	e8 e3 09 ff ff       	call   c00102b8 <Phys::allocateContiguousPages(int)>
c001f8d5:	83 c4 10             	add    esp,0x10
c001f8d8:	89 c2                	mov    edx,eax
c001f8da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8de:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f8e4:	83 ec 0c             	sub    esp,0xc
c001f8e7:	6a 50                	push   0x50
c001f8e9:	e8 ad 3c ff ff       	call   c001359b <Virt::allocateKernelVirtualPages(int)>
c001f8ee:	83 c4 10             	add    esp,0x10
c001f8f1:	89 c2                	mov    edx,eax
c001f8f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8f7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f8fd:	a1 50 f2 02 c0       	mov    eax,ds:0xc002f250
c001f902:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f906:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f90c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f910:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f916:	83 ec 0c             	sub    esp,0xc
c001f919:	6a 03                	push   0x3
c001f91b:	6a 50                	push   0x50
c001f91d:	51                   	push   ecx
c001f91e:	52                   	push   edx
c001f91f:	50                   	push   eax
c001f920:	e8 43 45 ff ff       	call   c0013e68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f925:	83 c4 20             	add    esp,0x20
c001f928:	90                   	nop
c001f929:	83 c4 0c             	add    esp,0xc
c001f92c:	c3                   	ret    
c001f92d:	90                   	nop

c001f92e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f92e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f932:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f935:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f938:	09 c2                	or     edx,eax
c001f93a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f93e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f944:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f946:	31 c0                	xor    eax,eax
c001f948:	c1 e9 08             	shr    ecx,0x8
c001f94b:	83 e1 0f             	and    ecx,0xf
c001f94e:	39 c8                	cmp    eax,ecx
c001f950:	74 0a                	je     c001f95c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f952:	f6 c2 01             	test   dl,0x1
c001f955:	74 08                	je     c001f95f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f957:	d1 ea                	shr    edx,1
c001f959:	40                   	inc    eax
c001f95a:	eb f2                	jmp    c001f94e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f95c:	83 c8 ff             	or     eax,0xffffffff
c001f95f:	c3                   	ret    

c001f960 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f960:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f964:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f967:	89 c2                	mov    edx,eax
c001f969:	c1 ea 08             	shr    edx,0x8
c001f96c:	83 e2 0f             	and    edx,0xf
c001f96f:	4a                   	dec    edx
c001f970:	75 32                	jne    c001f9a4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f972:	83 e0 0f             	and    eax,0xf
c001f975:	83 f8 03             	cmp    eax,0x3
c001f978:	75 2a                	jne    c001f9a4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f97a:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f97d:	b8 02 00 00 00       	mov    eax,0x2
c001f982:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f988:	74 1c                	je     c001f9a6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f98a:	b8 04 00 00 00       	mov    eax,0x4
c001f98f:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f995:	74 0f                	je     c001f9a6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f997:	31 c0                	xor    eax,eax
c001f999:	83 fa 03             	cmp    edx,0x3
c001f99c:	0f 94 c0             	sete   al
c001f99f:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f9a3:	c3                   	ret    
c001f9a4:	31 c0                	xor    eax,eax
c001f9a6:	c3                   	ret    
c001f9a7:	90                   	nop

c001f9a8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f9a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9ac:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f9af:	0f ba e2 0f          	bt     edx,0xf
c001f9b3:	72 f7                	jb     c001f9ac <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f9b5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f9b8:	83 ca 10             	or     edx,0x10
c001f9bb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f9be:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f9c1:	83 ca 01             	or     edx,0x1
c001f9c4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f9c7:	c3                   	ret    

c001f9c8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f9c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9cc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f9cf:	83 e2 fe             	and    edx,0xfffffffe
c001f9d2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f9d5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f9d8:	83 e2 ef             	and    edx,0xffffffef
c001f9db:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f9de:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f9e1:	0f ba e2 0e          	bt     edx,0xe
c001f9e5:	72 f7                	jb     c001f9de <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f9e7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f9ea:	0f ba e2 0f          	bt     edx,0xf
c001f9ee:	72 ee                	jb     c001f9de <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f9f0:	c3                   	ret    
c001f9f1:	90                   	nop

c001f9f2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f9f2:	55                   	push   ebp
c001f9f3:	57                   	push   edi
c001f9f4:	56                   	push   esi
c001f9f5:	53                   	push   ebx
c001f9f6:	83 ec 1c             	sub    esp,0x1c
c001f9f9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f9fd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001fa01:	53                   	push   ebx
c001fa02:	56                   	push   esi
c001fa03:	e8 c0 ff ff ff       	call   c001f9c8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001fa08:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001fa0c:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001fa12:	83 ec 0c             	sub    esp,0xc
c001fa15:	c1 e5 0a             	shl    ebp,0xa
c001fa18:	01 e8                	add    eax,ebp
c001fa1a:	89 03                	mov    DWORD PTR [ebx],eax
c001fa1c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fa1e:	68 00 04 00 00       	push   0x400
c001fa23:	6a 00                	push   0x0
c001fa25:	50                   	push   eax
c001fa26:	e8 c5 0a fe ff       	call   c00004f0 <memset>
c001fa2b:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001fa31:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001fa35:	01 e8                	add    eax,ebp
c001fa37:	83 c4 1c             	add    esp,0x1c
c001fa3a:	89 03                	mov    DWORD PTR [ebx],eax
c001fa3c:	c1 e2 08             	shl    edx,0x8
c001fa3f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001fa46:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001fa4c:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001fa52:	01 f8                	add    eax,edi
c001fa54:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001fa57:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001fa5a:	68 00 01 00 00       	push   0x100
c001fa5f:	6a 00                	push   0x0
c001fa61:	50                   	push   eax
c001fa62:	e8 89 0a fe ff       	call   c00004f0 <memset>
c001fa67:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001fa6d:	01 fa                	add    edx,edi
c001fa6f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001fa73:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001fa76:	c1 e7 0d             	shl    edi,0xd
c001fa79:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001fa80:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001fa86:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001fa8c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fa90:	31 ff                	xor    edi,edi
c001fa92:	83 c4 10             	add    esp,0x10
c001fa95:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001fa9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa9f:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001faa5:	83 c5 20             	add    ebp,0x20
c001faa8:	01 f8                	add    eax,edi
c001faaa:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001faad:	52                   	push   edx
c001faae:	68 00 01 00 00       	push   0x100
c001fab3:	6a 00                	push   0x0
c001fab5:	50                   	push   eax
c001fab6:	e8 35 0a fe ff       	call   c00004f0 <memset>
c001fabb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fabf:	83 c4 10             	add    esp,0x10
c001fac2:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001fac8:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001facf:	01 f8                	add    eax,edi
c001fad1:	81 c7 00 01 00 00    	add    edi,0x100
c001fad7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001fada:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001fae0:	75 b3                	jne    c001fa95 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001fae2:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001fae9:	50                   	push   eax
c001faea:	50                   	push   eax
c001faeb:	53                   	push   ebx
c001faec:	56                   	push   esi
c001faed:	e8 b6 fe ff ff       	call   c001f9a8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001faf2:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001faf9:	83 c4 2c             	add    esp,0x2c
c001fafc:	5b                   	pop    ebx
c001fafd:	5e                   	pop    esi
c001fafe:	5f                   	pop    edi
c001faff:	5d                   	pop    ebp
c001fb00:	c3                   	ret    
c001fb01:	90                   	nop

c001fb02 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001fb02:	55                   	push   ebp
c001fb03:	57                   	push   edi
c001fb04:	56                   	push   esi
c001fb05:	53                   	push   ebx
c001fb06:	31 db                	xor    ebx,ebx
c001fb08:	83 ec 0c             	sub    esp,0xc
c001fb0b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001fb0f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fb13:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001fb16:	f7 c7 01 00 00 00    	test   edi,0x1
c001fb1c:	74 7a                	je     c001fb98 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001fb1e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001fb22:	89 d8                	mov    eax,ebx
c001fb24:	c1 e0 07             	shl    eax,0x7
c001fb27:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001fb2e:	55                   	push   ebp
c001fb2f:	56                   	push   esi
c001fb30:	e8 2b fe ff ff       	call   c001f960 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001fb35:	5a                   	pop    edx
c001fb36:	83 f8 01             	cmp    eax,0x1
c001fb39:	59                   	pop    ecx
c001fb3a:	75 21                	jne    c001fb5d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001fb3c:	50                   	push   eax
c001fb3d:	53                   	push   ebx
c001fb3e:	55                   	push   ebp
c001fb3f:	56                   	push   esi
c001fb40:	e8 ad fe ff ff       	call   c001f9f2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fb45:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001fb4c:	e8 3e 00 ff ff       	call   c000fb8f <malloc>
c001fb51:	89 c5                	mov    ebp,eax
c001fb53:	89 04 24             	mov    DWORD PTR [esp],eax
c001fb56:	e8 25 0f 00 00       	call   c0020a80 <SATA::SATA()>
c001fb5b:	eb 24                	jmp    c001fb81 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001fb5d:	83 f8 04             	cmp    eax,0x4
c001fb60:	75 36                	jne    c001fb98 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001fb62:	51                   	push   ecx
c001fb63:	53                   	push   ebx
c001fb64:	55                   	push   ebp
c001fb65:	56                   	push   esi
c001fb66:	e8 87 fe ff ff       	call   c001f9f2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fb6b:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001fb72:	e8 18 00 ff ff       	call   c000fb8f <malloc>
c001fb77:	89 c5                	mov    ebp,eax
c001fb79:	89 04 24             	mov    DWORD PTR [esp],eax
c001fb7c:	e8 97 12 00 00       	call   c0020e18 <SATAPI::SATAPI()>
c001fb81:	58                   	pop    eax
c001fb82:	5a                   	pop    edx
c001fb83:	55                   	push   ebp
c001fb84:	56                   	push   esi
c001fb85:	e8 ca 9e fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001fb8a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001fb8d:	56                   	push   esi
c001fb8e:	6a 00                	push   0x0
c001fb90:	53                   	push   ebx
c001fb91:	55                   	push   ebp
c001fb92:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001fb95:	83 c4 20             	add    esp,0x20
c001fb98:	d1 ef                	shr    edi,1
c001fb9a:	43                   	inc    ebx
c001fb9b:	83 fb 20             	cmp    ebx,0x20
c001fb9e:	0f 85 72 ff ff ff    	jne    c001fb16 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001fba4:	83 c4 0c             	add    esp,0xc
c001fba7:	5b                   	pop    ebx
c001fba8:	5e                   	pop    esi
c001fba9:	5f                   	pop    edi
c001fbaa:	5d                   	pop    ebp
c001fbab:	c3                   	ret    

c001fbac <SATABus::open(int, int, void*)>:
c001fbac:	53                   	push   ebx
c001fbad:	83 ec 08             	sub    esp,0x8
c001fbb0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fbb4:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001fbba:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001fbc0:	e8 47 73 ff ff       	call   c0016f0c <KeDisablePreemption()>
c001fbc5:	52                   	push   edx
c001fbc6:	52                   	push   edx
c001fbc7:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001fbcd:	53                   	push   ebx
c001fbce:	e8 2f ff ff ff       	call   c001fb02 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001fbd3:	e8 5c 73 ff ff       	call   c0016f34 <KeRestorePreemption()>
c001fbd8:	31 c0                	xor    eax,eax
c001fbda:	83 c4 18             	add    esp,0x18
c001fbdd:	5b                   	pop    ebx
c001fbde:	c3                   	ret    
c001fbdf:	90                   	nop

c001fbe0 <ATA::close(int, int, void*)>:
c001fbe0:	83 ec 0c             	sub    esp,0xc
c001fbe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fbed:	85 c0                	test   eax,eax
c001fbef:	74 0c                	je     c001fbfd <ATA::close(int, int, void*)+0x1d>
c001fbf1:	83 ec 0c             	sub    esp,0xc
c001fbf4:	8b 10                	mov    edx,DWORD PTR [eax]
c001fbf6:	50                   	push   eax
c001fbf7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fbfa:	83 c4 10             	add    esp,0x10
c001fbfd:	31 c0                	xor    eax,eax
c001fbff:	83 c4 0c             	add    esp,0xc
c001fc02:	c3                   	ret    
c001fc03:	90                   	nop

c001fc04 <ATA::powerSaving(PowerSavingLevel)>:
c001fc04:	c3                   	ret    
c001fc05:	90                   	nop

c001fc06 <ATA::ATA()>:
c001fc06:	83 ec 0c             	sub    esp,0xc
c001fc09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc0d:	83 ec 04             	sub    esp,0x4
c001fc10:	68 00 02 00 00       	push   0x200
c001fc15:	68 2d 65 02 c0       	push   0xc002652d
c001fc1a:	50                   	push   eax
c001fc1b:	e8 16 a2 fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fc20:	83 c4 10             	add    esp,0x10
c001fc23:	ba 94 64 02 c0       	mov    edx,0xc0026494
c001fc28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc2c:	89 10                	mov    DWORD PTR [eax],edx
c001fc2e:	90                   	nop
c001fc2f:	83 c4 0c             	add    esp,0xc
c001fc32:	c3                   	ret    
c001fc33:	90                   	nop

c001fc34 <ATA::flush(bool)>:
c001fc34:	53                   	push   ebx
c001fc35:	83 ec 08             	sub    esp,0x8
c001fc38:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fc3c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001fc41:	83 f8 01             	cmp    eax,0x1
c001fc44:	19 c0                	sbb    eax,eax
c001fc46:	83 e0 fd             	and    eax,0xfffffffd
c001fc49:	05 ea 00 00 00       	add    eax,0xea
c001fc4e:	50                   	push   eax
c001fc4f:	6a 07                	push   0x7
c001fc51:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fc58:	50                   	push   eax
c001fc59:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fc5f:	e8 44 ee ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc64:	83 c4 0c             	add    esp,0xc
c001fc67:	6a 00                	push   0x0
c001fc69:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fc70:	50                   	push   eax
c001fc71:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fc77:	e8 d2 fb ff ff       	call   c001f84e <IDE::polling(unsigned char, unsigned int)>
c001fc7c:	83 c4 18             	add    esp,0x18
c001fc7f:	5b                   	pop    ebx
c001fc80:	c3                   	ret    
c001fc81:	90                   	nop

c001fc82 <ATA::readyForCommand()>:
c001fc82:	56                   	push   esi
c001fc83:	53                   	push   ebx
c001fc84:	31 db                	xor    ebx,ebx
c001fc86:	50                   	push   eax
c001fc87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fc8b:	50                   	push   eax
c001fc8c:	6a 0c                	push   0xc
c001fc8e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fc95:	50                   	push   eax
c001fc96:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fc9c:	e8 c7 ee ff ff       	call   c001eb68 <IDE::read(unsigned char, unsigned char)>
c001fca1:	83 c4 10             	add    esp,0x10
c001fca4:	a8 88                	test   al,0x88
c001fca6:	74 20                	je     c001fcc8 <ATA::readyForCommand()+0x46>
c001fca8:	43                   	inc    ebx
c001fca9:	83 fb 63             	cmp    ebx,0x63
c001fcac:	7e dd                	jle    c001fc8b <ATA::readyForCommand()+0x9>
c001fcae:	51                   	push   ecx
c001fcaf:	51                   	push   ecx
c001fcb0:	6a 00                	push   0x0
c001fcb2:	6a 0a                	push   0xa
c001fcb4:	e8 4f 77 ff ff       	call   c0017408 <milliTenthSleep(unsigned long long)>
c001fcb9:	83 c4 10             	add    esp,0x10
c001fcbc:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001fcc2:	75 c7                	jne    c001fc8b <ATA::readyForCommand()+0x9>
c001fcc4:	31 c0                	xor    eax,eax
c001fcc6:	eb 02                	jmp    c001fcca <ATA::readyForCommand()+0x48>
c001fcc8:	b0 01                	mov    al,0x1
c001fcca:	5a                   	pop    edx
c001fccb:	5b                   	pop    ebx
c001fccc:	5e                   	pop    esi
c001fccd:	c3                   	ret    

c001fcce <ATA::access(unsigned long long, int, void*, bool)>:
c001fcce:	55                   	push   ebp
c001fccf:	57                   	push   edi
c001fcd0:	56                   	push   esi
c001fcd1:	53                   	push   ebx
c001fcd2:	83 ec 2c             	sub    esp,0x2c
c001fcd5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001fcd9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001fcdd:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001fce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fce5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001fce9:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001fced:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001fcf1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001fcf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fcfb:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fd01:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fd05:	c1 e0 06             	shl    eax,0x6
c001fd08:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001fd10:	74 5d                	je     c001fd6f <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001fd12:	89 fa                	mov    edx,edi
c001fd14:	89 f0                	mov    eax,esi
c001fd16:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001fd1a:	c1 ea 1c             	shr    edx,0x1c
c001fd1d:	89 d1                	mov    ecx,edx
c001fd1f:	09 c1                	or     ecx,eax
c001fd21:	74 25                	je     c001fd48 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001fd23:	31 ed                	xor    ebp,ebp
c001fd25:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001fd2c:	89 fa                	mov    edx,edi
c001fd2e:	89 f0                	mov    eax,esi
c001fd30:	0f ad d0             	shrd   eax,edx,cl
c001fd33:	d3 ea                	shr    edx,cl
c001fd35:	f6 c1 20             	test   cl,0x20
c001fd38:	74 02                	je     c001fd3c <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001fd3a:	89 d0                	mov    eax,edx
c001fd3c:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001fd40:	45                   	inc    ebp
c001fd41:	83 fd 06             	cmp    ebp,0x6
c001fd44:	75 df                	jne    c001fd25 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001fd46:	eb 76                	jmp    c001fdbe <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001fd48:	89 f0                	mov    eax,esi
c001fd4a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001fd4f:	89 fa                	mov    edx,edi
c001fd51:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fd58:	0f ac d0 10          	shrd   eax,edx,0x10
c001fd5c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fd61:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001fd65:	c1 ee 18             	shr    esi,0x18
c001fd68:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001fd6d:	eb 56                	jmp    c001fdc5 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001fd6f:	6a 00                	push   0x0
c001fd71:	6a 3f                	push   0x3f
c001fd73:	57                   	push   edi
c001fd74:	56                   	push   esi
c001fd75:	e8 ba 20 00 00       	call   c0021e34 <__umoddi3>
c001fd7a:	83 c4 10             	add    esp,0x10
c001fd7d:	40                   	inc    eax
c001fd7e:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001fd82:	6a 00                	push   0x0
c001fd84:	68 f0 03 00 00       	push   0x3f0
c001fd89:	57                   	push   edi
c001fd8a:	56                   	push   esi
c001fd8b:	e8 a4 1f 00 00       	call   c0021d34 <__udivdi3>
c001fd90:	83 c4 10             	add    esp,0x10
c001fd93:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001fd98:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fd9f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fda4:	6a 00                	push   0x0
c001fda6:	6a 3f                	push   0x3f
c001fda8:	57                   	push   edi
c001fda9:	56                   	push   esi
c001fdaa:	e8 85 1f 00 00       	call   c0021d34 <__udivdi3>
c001fdaf:	83 c4 10             	add    esp,0x10
c001fdb2:	83 e0 0f             	and    eax,0xf
c001fdb5:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001fdba:	89 c6                	mov    esi,eax
c001fdbc:	eb 07                	jmp    c001fdc5 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001fdbe:	31 f6                	xor    esi,esi
c001fdc0:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001fdc5:	55                   	push   ebp
c001fdc6:	6a 00                	push   0x0
c001fdc8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fdcf:	50                   	push   eax
c001fdd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fdd4:	e8 d9 ee ff ff       	call   c001ecb2 <IDE::enableIRQs(unsigned char, bool)>
c001fdd9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fddc:	e8 a1 fe ff ff       	call   c001fc82 <ATA::readyForCommand()>
c001fde1:	83 c4 10             	add    esp,0x10
c001fde4:	84 c0                	test   al,al
c001fde6:	75 0a                	jne    c001fdf2 <ATA::access(unsigned long long, int, void*, bool)+0x124>
c001fde8:	be 01 00 00 00       	mov    esi,0x1
c001fded:	e9 c2 02 00 00       	jmp    c00200b4 <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001fdf2:	fa                   	cli    
c001fdf3:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c001fdf9:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001fdff:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001fe04:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001fe0a:	75 0a                	jne    c001fe16 <ATA::access(unsigned long long, int, void*, bool)+0x148>
c001fe0c:	c1 e0 04             	shl    eax,0x4
c001fe0f:	09 c6                	or     esi,eax
c001fe11:	83 ce a0             	or     esi,0xffffffa0
c001fe14:	eb 08                	jmp    c001fe1e <ATA::access(unsigned long long, int, void*, bool)+0x150>
c001fe16:	c1 e0 04             	shl    eax,0x4
c001fe19:	09 c6                	or     esi,eax
c001fe1b:	83 ce e0             	or     esi,0xffffffe0
c001fe1e:	89 f0                	mov    eax,esi
c001fe20:	0f b6 d2             	movzx  edx,dl
c001fe23:	0f b6 f0             	movzx  esi,al
c001fe26:	56                   	push   esi
c001fe27:	6a 06                	push   0x6
c001fe29:	52                   	push   edx
c001fe2a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe30:	e8 73 ec ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe35:	83 c4 10             	add    esp,0x10
c001fe38:	6a 00                	push   0x0
c001fe3a:	6a 01                	push   0x1
c001fe3c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe43:	50                   	push   eax
c001fe44:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe4a:	e8 59 ec ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe4f:	83 c4 10             	add    esp,0x10
c001fe52:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001fe57:	83 f8 02             	cmp    eax,0x2
c001fe5a:	75 6e                	jne    c001feca <ATA::access(unsigned long long, int, void*, bool)+0x1fc>
c001fe5c:	6a 00                	push   0x0
c001fe5e:	6a 08                	push   0x8
c001fe60:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe67:	50                   	push   eax
c001fe68:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe6e:	e8 35 ec ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe73:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001fe78:	50                   	push   eax
c001fe79:	6a 09                	push   0x9
c001fe7b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe82:	50                   	push   eax
c001fe83:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe89:	e8 1a ec ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe8e:	83 c4 20             	add    esp,0x20
c001fe91:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001fe96:	50                   	push   eax
c001fe97:	6a 0a                	push   0xa
c001fe99:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fea0:	50                   	push   eax
c001fea1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fea7:	e8 fc eb ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001feac:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001feb1:	50                   	push   eax
c001feb2:	6a 0b                	push   0xb
c001feb4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001febb:	50                   	push   eax
c001febc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fec2:	e8 e1 eb ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fec7:	83 c4 20             	add    esp,0x20
c001feca:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001fecf:	50                   	push   eax
c001fed0:	6a 02                	push   0x2
c001fed2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fed9:	50                   	push   eax
c001feda:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fee0:	e8 c3 eb ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fee5:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001feea:	50                   	push   eax
c001feeb:	6a 03                	push   0x3
c001feed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fef4:	50                   	push   eax
c001fef5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fefb:	e8 a8 eb ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff00:	83 c4 20             	add    esp,0x20
c001ff03:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001ff08:	50                   	push   eax
c001ff09:	6a 04                	push   0x4
c001ff0b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff12:	50                   	push   eax
c001ff13:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff19:	e8 8a eb ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff1e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ff23:	50                   	push   eax
c001ff24:	6a 05                	push   0x5
c001ff26:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff2d:	50                   	push   eax
c001ff2e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff34:	e8 6f eb ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff39:	83 c4 20             	add    esp,0x20
c001ff3c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ff41:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001ff46:	74 13                	je     c001ff5b <ATA::access(unsigned long long, int, void*, bool)+0x28d>
c001ff48:	83 f8 02             	cmp    eax,0x2
c001ff4b:	74 20                	je     c001ff6d <ATA::access(unsigned long long, int, void*, bool)+0x29f>
c001ff4d:	48                   	dec    eax
c001ff4e:	0f 85 94 fe ff ff    	jne    c001fde8 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001ff54:	b8 30 00 00 00       	mov    eax,0x30
c001ff59:	eb 1e                	jmp    c001ff79 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001ff5b:	83 f8 02             	cmp    eax,0x2
c001ff5e:	74 14                	je     c001ff74 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001ff60:	48                   	dec    eax
c001ff61:	b8 20 00 00 00       	mov    eax,0x20
c001ff66:	74 11                	je     c001ff79 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001ff68:	e9 7b fe ff ff       	jmp    c001fde8 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001ff6d:	b8 34 00 00 00       	mov    eax,0x34
c001ff72:	eb 05                	jmp    c001ff79 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001ff74:	b8 24 00 00 00       	mov    eax,0x24
c001ff79:	50                   	push   eax
c001ff7a:	6a 07                	push   0x7
c001ff7c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff83:	50                   	push   eax
c001ff84:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff8a:	e8 19 eb ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff8f:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c001ff96:	83 c4 10             	add    esp,0x10
c001ff99:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c001ffa0:	75 01                	jne    c001ffa3 <ATA::access(unsigned long long, int, void*, bool)+0x2d5>
c001ffa2:	fb                   	sti    
c001ffa3:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001ffa7:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ffac:	85 f6                	test   esi,esi
c001ffae:	0f 84 dd 00 00 00    	je     c0020091 <ATA::access(unsigned long long, int, void*, bool)+0x3c3>
c001ffb4:	57                   	push   edi
c001ffb5:	6a 01                	push   0x1
c001ffb7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffbe:	50                   	push   eax
c001ffbf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffc5:	e8 84 f8 ff ff       	call   c001f84e <IDE::polling(unsigned char, unsigned int)>
c001ffca:	83 c4 10             	add    esp,0x10
c001ffcd:	0f b6 c0             	movzx  eax,al
c001ffd0:	85 c0                	test   eax,eax
c001ffd2:	74 23                	je     c001fff7 <ATA::access(unsigned long long, int, void*, bool)+0x329>
c001ffd4:	50                   	push   eax
c001ffd5:	89 c6                	mov    esi,eax
c001ffd7:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001ffde:	50                   	push   eax
c001ffdf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffe6:	50                   	push   eax
c001ffe7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffed:	e8 a2 f7 ff ff       	call   c001f794 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fff2:	e9 ba 00 00 00       	jmp    c00200b1 <ATA::access(unsigned long long, int, void*, bool)+0x3e3>
c001fff7:	85 ed                	test   ebp,ebp
c001fff9:	74 49                	je     c0020044 <ATA::access(unsigned long long, int, void*, bool)+0x376>
c001fffb:	fa                   	cli    
c001fffc:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c0020002:	31 c9                	xor    ecx,ecx
c0020004:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0020008:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002000c:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c0020010:	51                   	push   ecx
c0020011:	51                   	push   ecx
c0020012:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020019:	50                   	push   eax
c002001a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020020:	e8 71 ea ff ff       	call   c001ea96 <IDE::getBase(unsigned char)>
c0020025:	89 c2                	mov    edx,eax
c0020027:	89 f8                	mov    eax,edi
c0020029:	66 ef                	out    dx,ax
c002002b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002002f:	83 c4 10             	add    esp,0x10
c0020032:	41                   	inc    ecx
c0020033:	81 f9 00 01 00 00    	cmp    ecx,0x100
c0020039:	75 c9                	jne    c0020004 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c002003b:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c0020042:	eb 35                	jmp    c0020079 <ATA::access(unsigned long long, int, void*, bool)+0x3ab>
c0020044:	fa                   	cli    
c0020045:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c002004b:	52                   	push   edx
c002004c:	52                   	push   edx
c002004d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020054:	50                   	push   eax
c0020055:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002005b:	e8 36 ea ff ff       	call   c001ea96 <IDE::getBase(unsigned char)>
c0020060:	b9 00 01 00 00       	mov    ecx,0x100
c0020065:	89 c2                	mov    edx,eax
c0020067:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002006b:	fc                   	cld    
c002006c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002006f:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c0020076:	83 c4 10             	add    esp,0x10
c0020079:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c0020080:	75 01                	jne    c0020083 <ATA::access(unsigned long long, int, void*, bool)+0x3b5>
c0020082:	fb                   	sti    
c0020083:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002008b:	4e                   	dec    esi
c002008c:	e9 1b ff ff ff       	jmp    c001ffac <ATA::access(unsigned long long, int, void*, bool)+0x2de>
c0020091:	31 f6                	xor    esi,esi
c0020093:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0020098:	74 1a                	je     c00200b4 <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c002009a:	50                   	push   eax
c002009b:	50                   	push   eax
c002009c:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00200a1:	83 f8 02             	cmp    eax,0x2
c00200a4:	0f 94 c0             	sete   al
c00200a7:	0f b6 c0             	movzx  eax,al
c00200aa:	50                   	push   eax
c00200ab:	53                   	push   ebx
c00200ac:	e8 83 fb ff ff       	call   c001fc34 <ATA::flush(bool)>
c00200b1:	83 c4 10             	add    esp,0x10
c00200b4:	83 c4 2c             	add    esp,0x2c
c00200b7:	89 f0                	mov    eax,esi
c00200b9:	5b                   	pop    ebx
c00200ba:	5e                   	pop    esi
c00200bb:	5f                   	pop    edi
c00200bc:	5d                   	pop    ebp
c00200bd:	c3                   	ret    

c00200be <ATA::read(unsigned long long, int, void*)>:
c00200be:	57                   	push   edi
c00200bf:	b8 04 00 00 00       	mov    eax,0x4
c00200c4:	56                   	push   esi
c00200c5:	53                   	push   ebx
c00200c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00200ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00200ce:	8d 7a ff             	lea    edi,[edx-0x1]
c00200d1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00200d5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00200d9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00200df:	77 25                	ja     c0020106 <ATA::read(unsigned long long, int, void*)+0x48>
c00200e1:	b8 06 00 00 00       	mov    eax,0x6
c00200e6:	85 f6                	test   esi,esi
c00200e8:	74 1c                	je     c0020106 <ATA::read(unsigned long long, int, void*)+0x48>
c00200ea:	50                   	push   eax
c00200eb:	50                   	push   eax
c00200ec:	6a 00                	push   0x0
c00200ee:	56                   	push   esi
c00200ef:	52                   	push   edx
c00200f0:	53                   	push   ebx
c00200f1:	51                   	push   ecx
c00200f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00200f6:	e8 d3 fb ff ff       	call   c001fcce <ATA::access(unsigned long long, int, void*, bool)>
c00200fb:	83 c4 20             	add    esp,0x20
c00200fe:	85 c0                	test   eax,eax
c0020100:	0f 95 c0             	setne  al
c0020103:	0f b6 c0             	movzx  eax,al
c0020106:	5b                   	pop    ebx
c0020107:	5e                   	pop    esi
c0020108:	5f                   	pop    edi
c0020109:	c3                   	ret    

c002010a <ATA::write(unsigned long long, int, void*)>:
c002010a:	57                   	push   edi
c002010b:	b8 04 00 00 00       	mov    eax,0x4
c0020110:	56                   	push   esi
c0020111:	53                   	push   ebx
c0020112:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020116:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002011a:	8d 7a ff             	lea    edi,[edx-0x1]
c002011d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020121:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0020125:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002012b:	77 25                	ja     c0020152 <ATA::write(unsigned long long, int, void*)+0x48>
c002012d:	b8 06 00 00 00       	mov    eax,0x6
c0020132:	85 f6                	test   esi,esi
c0020134:	74 1c                	je     c0020152 <ATA::write(unsigned long long, int, void*)+0x48>
c0020136:	50                   	push   eax
c0020137:	50                   	push   eax
c0020138:	6a 01                	push   0x1
c002013a:	56                   	push   esi
c002013b:	52                   	push   edx
c002013c:	53                   	push   ebx
c002013d:	51                   	push   ecx
c002013e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020142:	e8 87 fb ff ff       	call   c001fcce <ATA::access(unsigned long long, int, void*, bool)>
c0020147:	83 c4 20             	add    esp,0x20
c002014a:	85 c0                	test   eax,eax
c002014c:	0f 95 c0             	setne  al
c002014f:	0f b6 c0             	movzx  eax,al
c0020152:	5b                   	pop    ebx
c0020153:	5e                   	pop    esi
c0020154:	5f                   	pop    edi
c0020155:	c3                   	ret    

c0020156 <ATA::detectCHS()>:
c0020156:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002015a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0020160:	c1 e0 06             	shl    eax,0x6
c0020163:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0020169:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0020173:	c7 44 24 04 d0 63 02 c0 	mov    DWORD PTR [esp+0x4],0xc00263d0
c002017b:	e9 66 fe fe ff       	jmp    c000ffe6 <KePanic(char const*)>

c0020180 <ATA::open(int, int, void*)>:
c0020180:	53                   	push   ebx
c0020181:	83 ec 08             	sub    esp,0x8
c0020184:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020188:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002018c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020190:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0020196:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002019c:	c1 e0 06             	shl    eax,0x6
c002019f:	01 d0                	add    eax,edx
c00201a1:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00201a8:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00201ae:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00201b5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00201bf:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00201c5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00201cc:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00201d3:	75 0c                	jne    c00201e1 <ATA::open(int, int, void*)+0x61>
c00201d5:	83 ec 0c             	sub    esp,0xc
c00201d8:	53                   	push   ebx
c00201d9:	e8 78 ff ff ff       	call   c0020156 <ATA::detectCHS()>
c00201de:	83 c4 10             	add    esp,0x10
c00201e1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00201e7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00201ed:	c1 e0 06             	shl    eax,0x6
c00201f0:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00201f7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020201:	d1 e8                	shr    eax,1
c0020203:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0020209:	6a 04                	push   0x4
c002020b:	6a 0c                	push   0xc
c002020d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020214:	50                   	push   eax
c0020215:	52                   	push   edx
c0020216:	e8 8d e8 ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002021b:	90                   	nop
c002021c:	90                   	nop
c002021d:	6a 00                	push   0x0
c002021f:	6a 0c                	push   0xc
c0020221:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020228:	50                   	push   eax
c0020229:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002022f:	e8 74 e8 ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020234:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002023a:	83 c4 20             	add    esp,0x20
c002023d:	c1 e0 06             	shl    eax,0x6
c0020240:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c0020246:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c002024d:	0f 84 00 01 00 00    	je     c0020353 <ATA::open(int, int, void*)+0x1d3>
c0020253:	83 ec 0c             	sub    esp,0xc
c0020256:	6a 08                	push   0x8
c0020258:	e8 5b 00 ff ff       	call   c00102b8 <Phys::allocateContiguousPages(int)>
c002025d:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0020263:	c7 04 24 e2 63 02 c0 	mov    DWORD PTR [esp],0xc00263e2
c002026a:	e8 0d 6d fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c002026f:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0020276:	e8 20 33 ff ff       	call   c001359b <Virt::allocateKernelVirtualPages(int)>
c002027b:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0020281:	6a 03                	push   0x3
c0020283:	50                   	push   eax
c0020284:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002028a:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c0020290:	e8 e9 39 ff ff       	call   c0013c7e <VAS::mapPage(unsigned long, unsigned long, int)>
c0020295:	83 c4 20             	add    esp,0x20
c0020298:	e8 3d ff fe ff       	call   c00101da <Phys::allocatePage()>
c002029d:	83 ec 0c             	sub    esp,0xc
c00202a0:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c00202a6:	6a 01                	push   0x1
c00202a8:	e8 ee 32 ff ff       	call   c001359b <Virt::allocateKernelVirtualPages(int)>
c00202ad:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c00202b3:	6a 03                	push   0x3
c00202b5:	50                   	push   eax
c00202b6:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c00202bc:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c00202c2:	e8 b7 39 ff ff       	call   c0013c7e <VAS::mapPage(unsigned long, unsigned long, int)>
c00202c7:	83 c4 14             	add    esp,0x14
c00202ca:	68 1b 64 02 c0       	push   0xc002641b
c00202cf:	e8 a8 6c fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00202d4:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c00202db:	50                   	push   eax
c00202dc:	6a 12                	push   0x12
c00202de:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00202e5:	50                   	push   eax
c00202e6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00202ec:	e8 b7 e7 ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00202f1:	83 c4 20             	add    esp,0x20
c00202f4:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c00202fa:	0f b6 c4             	movzx  eax,ah
c00202fd:	50                   	push   eax
c00202fe:	6a 13                	push   0x13
c0020300:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020307:	50                   	push   eax
c0020308:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002030e:	e8 95 e7 ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020313:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c002031a:	50                   	push   eax
c002031b:	6a 14                	push   0x14
c002031d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020324:	50                   	push   eax
c0020325:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002032b:	e8 78 e7 ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020330:	83 c4 20             	add    esp,0x20
c0020333:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c002033a:	50                   	push   eax
c002033b:	6a 15                	push   0x15
c002033d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020344:	50                   	push   eax
c0020345:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002034b:	e8 58 e7 ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020350:	83 c4 10             	add    esp,0x10
c0020353:	83 ec 0c             	sub    esp,0xc
c0020356:	53                   	push   ebx
c0020357:	e8 42 9b fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c002035c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002035f:	e8 da a9 fe ff       	call   c000ad3e <createPartitionsForDisk(PhysicalDisk*)>
c0020364:	31 c0                	xor    eax,eax
c0020366:	83 c4 18             	add    esp,0x18
c0020369:	5b                   	pop    ebx
c002036a:	c3                   	ret    

c002036b <combineCharAndColour(char, unsigned char)>:
c002036b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020370:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c0020376:	c1 e0 08             	shl    eax,0x8
c0020379:	09 d0                	or     eax,edx
c002037b:	c3                   	ret    

c002037c <combineColours(unsigned char, unsigned char)>:
c002037c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020381:	c1 e0 04             	shl    eax,0x4
c0020384:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c0020388:	c3                   	ret    
c0020389:	90                   	nop

c002038a <ATAPI::write(unsigned long long, int, void*)>:
c002038a:	b8 03 00 00 00       	mov    eax,0x3
c002038f:	c3                   	ret    

c0020390 <ATAPI::close(int, int, void*)>:
c0020390:	83 ec 0c             	sub    esp,0xc
c0020393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020397:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002039d:	85 c0                	test   eax,eax
c002039f:	74 0c                	je     c00203ad <ATAPI::close(int, int, void*)+0x1d>
c00203a1:	83 ec 0c             	sub    esp,0xc
c00203a4:	8b 10                	mov    edx,DWORD PTR [eax]
c00203a6:	50                   	push   eax
c00203a7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00203aa:	83 c4 10             	add    esp,0x10
c00203ad:	31 c0                	xor    eax,eax
c00203af:	83 c4 0c             	add    esp,0xc
c00203b2:	c3                   	ret    
c00203b3:	90                   	nop

c00203b4 <ATAPI::ATAPI()>:
c00203b4:	83 ec 0c             	sub    esp,0xc
c00203b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203bb:	83 ec 04             	sub    esp,0x4
c00203be:	68 00 08 00 00       	push   0x800
c00203c3:	68 cd 65 02 c0       	push   0xc00265cd
c00203c8:	50                   	push   eax
c00203c9:	e8 68 9a fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00203ce:	83 c4 10             	add    esp,0x10
c00203d1:	ba dc 64 02 c0       	mov    edx,0xc00264dc
c00203d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203da:	89 10                	mov    DWORD PTR [eax],edx
c00203dc:	90                   	nop
c00203dd:	83 c4 0c             	add    esp,0xc
c00203e0:	c3                   	ret    
c00203e1:	90                   	nop

c00203e2 <ATAPI::readyForCommand()>:
c00203e2:	56                   	push   esi
c00203e3:	53                   	push   ebx
c00203e4:	31 db                	xor    ebx,ebx
c00203e6:	50                   	push   eax
c00203e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00203eb:	50                   	push   eax
c00203ec:	6a 0c                	push   0xc
c00203ee:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00203f5:	50                   	push   eax
c00203f6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00203fc:	e8 67 e7 ff ff       	call   c001eb68 <IDE::read(unsigned char, unsigned char)>
c0020401:	83 c4 10             	add    esp,0x10
c0020404:	a8 88                	test   al,0x88
c0020406:	74 26                	je     c002042e <ATAPI::readyForCommand()+0x4c>
c0020408:	43                   	inc    ebx
c0020409:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c002040f:	7e da                	jle    c00203eb <ATAPI::readyForCommand()+0x9>
c0020411:	51                   	push   ecx
c0020412:	51                   	push   ecx
c0020413:	6a 00                	push   0x0
c0020415:	68 5e 01 00 00       	push   0x15e
c002041a:	e8 e9 6f ff ff       	call   c0017408 <milliTenthSleep(unsigned long long)>
c002041f:	83 c4 10             	add    esp,0x10
c0020422:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c0020428:	75 c1                	jne    c00203eb <ATAPI::readyForCommand()+0x9>
c002042a:	31 c0                	xor    eax,eax
c002042c:	eb 02                	jmp    c0020430 <ATAPI::readyForCommand()+0x4e>
c002042e:	b0 01                	mov    al,0x1
c0020430:	5a                   	pop    edx
c0020431:	5b                   	pop    ebx
c0020432:	5e                   	pop    esi
c0020433:	c3                   	ret    

c0020434 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0020434:	55                   	push   ebp
c0020435:	57                   	push   edi
c0020436:	56                   	push   esi
c0020437:	53                   	push   ebx
c0020438:	83 ec 20             	sub    esp,0x20
c002043b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002043f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0020443:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0020447:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002044b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002044f:	6a 01                	push   0x1
c0020451:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020458:	50                   	push   eax
c0020459:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002045f:	e8 4e e8 ff ff       	call   c001ecb2 <IDE::enableIRQs(unsigned char, bool)>
c0020464:	5e                   	pop    esi
c0020465:	58                   	pop    eax
c0020466:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002046d:	50                   	push   eax
c002046e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020474:	e8 09 e6 ff ff       	call   c001ea82 <IDE::prepareInterrupt(unsigned char)>
c0020479:	89 3c 24             	mov    DWORD PTR [esp],edi
c002047c:	e8 61 ff ff ff       	call   c00203e2 <ATAPI::readyForCommand()>
c0020481:	83 c4 10             	add    esp,0x10
c0020484:	84 c0                	test   al,al
c0020486:	75 0a                	jne    c0020492 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0020488:	bb 01 00 00 00       	mov    ebx,0x1
c002048d:	e9 60 02 00 00       	jmp    c00206f2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c0020492:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c0020498:	c1 e0 04             	shl    eax,0x4
c002049b:	0f b6 c0             	movzx  eax,al
c002049e:	50                   	push   eax
c002049f:	6a 06                	push   0x6
c00204a1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204a8:	50                   	push   eax
c00204a9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204af:	e8 f4 e5 ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00204b4:	6a 00                	push   0x0
c00204b6:	6a 01                	push   0x1
c00204b8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204bf:	50                   	push   eax
c00204c0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204c6:	e8 dd e5 ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00204cb:	83 c4 20             	add    esp,0x20
c00204ce:	0f b6 c3             	movzx  eax,bl
c00204d1:	0f b6 df             	movzx  ebx,bh
c00204d4:	50                   	push   eax
c00204d5:	6a 04                	push   0x4
c00204d7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204de:	50                   	push   eax
c00204df:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204e5:	e8 be e5 ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00204ea:	53                   	push   ebx
c00204eb:	6a 05                	push   0x5
c00204ed:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204f4:	50                   	push   eax
c00204f5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204fb:	e8 a8 e5 ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020500:	83 c4 20             	add    esp,0x20
c0020503:	68 a0 00 00 00       	push   0xa0
c0020508:	6a 07                	push   0x7
c002050a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020511:	50                   	push   eax
c0020512:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020518:	e8 8b e5 ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002051d:	83 c4 0c             	add    esp,0xc
c0020520:	6a 01                	push   0x1
c0020522:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020529:	50                   	push   eax
c002052a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020530:	e8 19 f3 ff ff       	call   c001f84e <IDE::polling(unsigned char, unsigned int)>
c0020535:	83 c4 10             	add    esp,0x10
c0020538:	0f b6 d8             	movzx  ebx,al
c002053b:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c0020541:	85 db                	test   ebx,ebx
c0020543:	74 20                	je     c0020565 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0020545:	53                   	push   ebx
c0020546:	0f b6 c0             	movzx  eax,al
c0020549:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c0020550:	52                   	push   edx
c0020551:	50                   	push   eax
c0020552:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020558:	e8 37 f2 ff ff       	call   c001f794 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002055d:	83 c4 10             	add    esp,0x10
c0020560:	e9 8d 01 00 00       	jmp    c00206f2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c0020565:	0f b6 c0             	movzx  eax,al
c0020568:	53                   	push   ebx
c0020569:	53                   	push   ebx
c002056a:	50                   	push   eax
c002056b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020571:	e8 20 e5 ff ff       	call   c001ea96 <IDE::getBase(unsigned char)>
c0020576:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002057a:	b9 06 00 00 00       	mov    ecx,0x6
c002057f:	89 c2                	mov    edx,eax
c0020581:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0020584:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0020588:	83 c4 10             	add    esp,0x10
c002058b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0020590:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020594:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002059a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00205a1:	85 db                	test   ebx,ebx
c00205a3:	0f 84 ec 00 00 00    	je     c0020695 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c00205a9:	51                   	push   ecx
c00205aa:	51                   	push   ecx
c00205ab:	52                   	push   edx
c00205ac:	50                   	push   eax
c00205ad:	e8 64 e6 ff ff       	call   c001ec16 <IDE::waitInterrupt(unsigned char)>
c00205b2:	83 c4 10             	add    esp,0x10
c00205b5:	84 c0                	test   al,al
c00205b7:	0f 84 cb fe ff ff    	je     c0020488 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00205bd:	56                   	push   esi
c00205be:	56                   	push   esi
c00205bf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00205c6:	50                   	push   eax
c00205c7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00205cd:	e8 b0 e4 ff ff       	call   c001ea82 <IDE::prepareInterrupt(unsigned char)>
c00205d2:	83 c4 0c             	add    esp,0xc
c00205d5:	6a 04                	push   0x4
c00205d7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00205de:	50                   	push   eax
c00205df:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00205e5:	e8 7e e5 ff ff       	call   c001eb68 <IDE::read(unsigned char, unsigned char)>
c00205ea:	83 c4 0c             	add    esp,0xc
c00205ed:	89 c6                	mov    esi,eax
c00205ef:	6a 05                	push   0x5
c00205f1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00205f8:	50                   	push   eax
c00205f9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00205ff:	e8 64 e5 ff ff       	call   c001eb68 <IDE::read(unsigned char, unsigned char)>
c0020604:	89 f1                	mov    ecx,esi
c0020606:	0f b6 c0             	movzx  eax,al
c0020609:	0f b6 f1             	movzx  esi,cl
c002060c:	c1 e0 08             	shl    eax,0x8
c002060f:	09 c6                	or     esi,eax
c0020611:	d1 fe                	sar    esi,1
c0020613:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0020617:	83 c4 10             	add    esp,0x10
c002061a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002061f:	74 41                	je     c0020662 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c0020621:	31 c9                	xor    ecx,ecx
c0020623:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020629:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020630:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0020634:	75 0a                	jne    c0020640 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c0020636:	01 c9                	add    ecx,ecx
c0020638:	01 cd                	add    ebp,ecx
c002063a:	4b                   	dec    ebx
c002063b:	e9 54 ff ff ff       	jmp    c0020594 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c0020640:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0020645:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020649:	51                   	push   ecx
c002064a:	51                   	push   ecx
c002064b:	52                   	push   edx
c002064c:	50                   	push   eax
c002064d:	e8 44 e4 ff ff       	call   c001ea96 <IDE::getBase(unsigned char)>
c0020652:	89 c2                	mov    edx,eax
c0020654:	89 f0                	mov    eax,esi
c0020656:	66 ef                	out    dx,ax
c0020658:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002065c:	83 c4 10             	add    esp,0x10
c002065f:	41                   	inc    ecx
c0020660:	eb c1                	jmp    c0020623 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c0020662:	31 f6                	xor    esi,esi
c0020664:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002066a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020671:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0020675:	75 06                	jne    c002067d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c0020677:	01 f6                	add    esi,esi
c0020679:	01 f5                	add    ebp,esi
c002067b:	eb bd                	jmp    c002063a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c002067d:	51                   	push   ecx
c002067e:	51                   	push   ecx
c002067f:	52                   	push   edx
c0020680:	50                   	push   eax
c0020681:	e8 10 e4 ff ff       	call   c001ea96 <IDE::getBase(unsigned char)>
c0020686:	89 c2                	mov    edx,eax
c0020688:	66 ed                	in     ax,dx
c002068a:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002068f:	83 c4 10             	add    esp,0x10
c0020692:	46                   	inc    esi
c0020693:	eb cf                	jmp    c0020664 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c0020695:	51                   	push   ecx
c0020696:	51                   	push   ecx
c0020697:	52                   	push   edx
c0020698:	50                   	push   eax
c0020699:	e8 78 e5 ff ff       	call   c001ec16 <IDE::waitInterrupt(unsigned char)>
c002069e:	83 c4 10             	add    esp,0x10
c00206a1:	84 c0                	test   al,al
c00206a3:	0f 84 df fd ff ff    	je     c0020488 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00206a9:	bb a0 86 01 00       	mov    ebx,0x186a0
c00206ae:	52                   	push   edx
c00206af:	52                   	push   edx
c00206b0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00206b7:	50                   	push   eax
c00206b8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00206be:	e8 bf e3 ff ff       	call   c001ea82 <IDE::prepareInterrupt(unsigned char)>
c00206c3:	83 c4 10             	add    esp,0x10
c00206c6:	50                   	push   eax
c00206c7:	50                   	push   eax
c00206c8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00206cf:	50                   	push   eax
c00206d0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00206d6:	e8 bb e3 ff ff       	call   c001ea96 <IDE::getBase(unsigned char)>
c00206db:	8d 50 07             	lea    edx,[eax+0x7]
c00206de:	ec                   	in     al,dx
c00206df:	83 c4 10             	add    esp,0x10
c00206e2:	a8 88                	test   al,0x88
c00206e4:	74 0a                	je     c00206f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c00206e6:	4b                   	dec    ebx
c00206e7:	75 dd                	jne    c00206c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c00206e9:	bb 02 00 00 00       	mov    ebx,0x2
c00206ee:	eb 02                	jmp    c00206f2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c00206f0:	31 db                	xor    ebx,ebx
c00206f2:	83 c4 1c             	add    esp,0x1c
c00206f5:	89 d8                	mov    eax,ebx
c00206f7:	5b                   	pop    ebx
c00206f8:	5e                   	pop    esi
c00206f9:	5f                   	pop    edi
c00206fa:	5d                   	pop    ebp
c00206fb:	c3                   	ret    

c00206fc <ATAPI::diskRemoved()>:
c00206fc:	53                   	push   ebx
c00206fd:	83 ec 14             	sub    esp,0x14
c0020700:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020704:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002070b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c0020711:	e8 18 a3 fe ff       	call   c000aa2e <LogicalDisk::unmount()>
c0020716:	58                   	pop    eax
c0020717:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002071d:	e8 ea ac fe ff       	call   c000b40c <VCache::writeWriteBuffer()>
c0020722:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0020728:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002072c:	83 c4 18             	add    esp,0x18
c002072f:	5b                   	pop    ebx
c0020730:	e9 c7 ac fe ff       	jmp    c000b3fc <VCache::invalidateReadBuffer()>
c0020735:	90                   	nop

c0020736 <ATAPI::eject()>:
c0020736:	57                   	push   edi
c0020737:	b9 03 00 00 00       	mov    ecx,0x3
c002073c:	53                   	push   ebx
c002073d:	83 ec 14             	sub    esp,0x14
c0020740:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020744:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020748:	fc                   	cld    
c0020749:	31 c0                	xor    eax,eax
c002074b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002074d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020752:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020757:	50                   	push   eax
c0020758:	50                   	push   eax
c0020759:	6a 00                	push   0x0
c002075b:	6a 00                	push   0x0
c002075d:	6a 00                	push   0x0
c002075f:	6a 02                	push   0x2
c0020761:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020765:	50                   	push   eax
c0020766:	53                   	push   ebx
c0020767:	e8 c8 fc ff ff       	call   c0020434 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002076c:	83 c4 14             	add    esp,0x14
c002076f:	53                   	push   ebx
c0020770:	e8 87 ff ff ff       	call   c00206fc <ATAPI::diskRemoved()>
c0020775:	83 c4 24             	add    esp,0x24
c0020778:	31 c0                	xor    eax,eax
c002077a:	5b                   	pop    ebx
c002077b:	5f                   	pop    edi
c002077c:	c3                   	ret    
c002077d:	90                   	nop

c002077e <ATAPI::diskInserted()>:
c002077e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020782:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c0020789:	c3                   	ret    

c002078a <ATAPI::detectMedia()>:
c002078a:	56                   	push   esi
c002078b:	53                   	push   ebx
c002078c:	83 ec 28             	sub    esp,0x28
c002078f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020793:	6a 0c                	push   0xc
c0020795:	6a 00                	push   0x0
c0020797:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002079b:	56                   	push   esi
c002079c:	e8 4f fd fd ff       	call   c00004f0 <memset>
c00207a1:	58                   	pop    eax
c00207a2:	5a                   	pop    edx
c00207a3:	6a 00                	push   0x0
c00207a5:	6a 00                	push   0x0
c00207a7:	6a 00                	push   0x0
c00207a9:	6a 00                	push   0x0
c00207ab:	56                   	push   esi
c00207ac:	53                   	push   ebx
c00207ad:	e8 82 fc ff ff       	call   c0020434 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00207b2:	83 c4 1c             	add    esp,0x1c
c00207b5:	6a 0c                	push   0xc
c00207b7:	6a 00                	push   0x0
c00207b9:	56                   	push   esi
c00207ba:	e8 31 fd fd ff       	call   c00004f0 <memset>
c00207bf:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00207c4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00207c9:	59                   	pop    ecx
c00207ca:	58                   	pop    eax
c00207cb:	6a 01                	push   0x1
c00207cd:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00207d1:	50                   	push   eax
c00207d2:	6a 00                	push   0x0
c00207d4:	6a 12                	push   0x12
c00207d6:	56                   	push   esi
c00207d7:	53                   	push   ebx
c00207d8:	e8 57 fc ff ff       	call   c0020434 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00207dd:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00207e1:	83 c4 20             	add    esp,0x20
c00207e4:	83 e0 7f             	and    eax,0x7f
c00207e7:	83 f8 70             	cmp    eax,0x70
c00207ea:	74 15                	je     c0020801 <ATAPI::detectMedia()+0x77>
c00207ec:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00207f3:	75 0c                	jne    c0020801 <ATAPI::detectMedia()+0x77>
c00207f5:	83 ec 0c             	sub    esp,0xc
c00207f8:	53                   	push   ebx
c00207f9:	e8 80 ff ff ff       	call   c002077e <ATAPI::diskInserted()>
c00207fe:	83 c4 10             	add    esp,0x10
c0020801:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020805:	83 e0 0f             	and    eax,0xf
c0020808:	83 f8 02             	cmp    eax,0x2
c002080b:	75 1b                	jne    c0020828 <ATAPI::detectMedia()+0x9e>
c002080d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0020812:	75 2d                	jne    c0020841 <ATAPI::detectMedia()+0xb7>
c0020814:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002081b:	74 24                	je     c0020841 <ATAPI::detectMedia()+0xb7>
c002081d:	83 ec 0c             	sub    esp,0xc
c0020820:	53                   	push   ebx
c0020821:	e8 d6 fe ff ff       	call   c00206fc <ATAPI::diskRemoved()>
c0020826:	eb 16                	jmp    c002083e <ATAPI::detectMedia()+0xb4>
c0020828:	85 c0                	test   eax,eax
c002082a:	75 15                	jne    c0020841 <ATAPI::detectMedia()+0xb7>
c002082c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020833:	75 0c                	jne    c0020841 <ATAPI::detectMedia()+0xb7>
c0020835:	83 ec 0c             	sub    esp,0xc
c0020838:	53                   	push   ebx
c0020839:	e8 40 ff ff ff       	call   c002077e <ATAPI::diskInserted()>
c002083e:	83 c4 10             	add    esp,0x10
c0020841:	83 c4 24             	add    esp,0x24
c0020844:	5b                   	pop    ebx
c0020845:	5e                   	pop    esi
c0020846:	c3                   	ret    
c0020847:	90                   	nop

c0020848 <ATAPI::open(int, int, void*)>:
c0020848:	56                   	push   esi
c0020849:	53                   	push   ebx
c002084a:	50                   	push   eax
c002084b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002084f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020853:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020857:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002085d:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0020863:	c1 e0 06             	shl    eax,0x6
c0020866:	01 d0                	add    eax,edx
c0020868:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002086f:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0020875:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002087c:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020886:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002088c:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020893:	6a 04                	push   0x4
c0020895:	6a 0c                	push   0xc
c0020897:	51                   	push   ecx
c0020898:	52                   	push   edx
c0020899:	e8 0a e2 ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002089e:	90                   	nop
c002089f:	90                   	nop
c00208a0:	6a 00                	push   0x0
c00208a2:	6a 0c                	push   0xc
c00208a4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00208ab:	50                   	push   eax
c00208ac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00208b2:	e8 f1 e1 ff ff       	call   c001eaa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00208b7:	83 c4 14             	add    esp,0x14
c00208ba:	68 78 01 00 00       	push   0x178
c00208bf:	e8 cb f2 fe ff       	call   c000fb8f <malloc>
c00208c4:	83 c4 0c             	add    esp,0xc
c00208c7:	89 c6                	mov    esi,eax
c00208c9:	6a 00                	push   0x0
c00208cb:	68 ff ff ff 7f       	push   0x7fffffff
c00208d0:	6a 00                	push   0x0
c00208d2:	6a 00                	push   0x0
c00208d4:	53                   	push   ebx
c00208d5:	68 7f 66 02 c0       	push   0xc002667f
c00208da:	50                   	push   eax
c00208db:	e8 8c 9f fe ff       	call   c000a86c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00208e0:	83 c4 14             	add    esp,0x14
c00208e3:	56                   	push   esi
c00208e4:	e8 43 a0 fe ff       	call   c000a92c <LogicalDisk::assignDriveLetter()>
c00208e9:	5a                   	pop    edx
c00208ea:	0f be c0             	movsx  eax,al
c00208ed:	59                   	pop    ecx
c00208ee:	50                   	push   eax
c00208ef:	68 c4 64 02 c0       	push   0xc00264c4
c00208f4:	e8 83 66 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00208f9:	58                   	pop    eax
c00208fa:	5a                   	pop    edx
c00208fb:	56                   	push   esi
c00208fc:	53                   	push   ebx
c00208fd:	e8 52 91 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c0020902:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0020908:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002090b:	e8 8e 95 fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c0020910:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020917:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002091a:	e8 6b fe ff ff       	call   c002078a <ATAPI::detectMedia()>
c002091f:	83 c4 14             	add    esp,0x14
c0020922:	31 c0                	xor    eax,eax
c0020924:	5b                   	pop    ebx
c0020925:	5e                   	pop    esi
c0020926:	c3                   	ret    
c0020927:	90                   	nop

c0020928 <ATAPI::read(unsigned long long, int, void*)>:
c0020928:	55                   	push   ebp
c0020929:	57                   	push   edi
c002092a:	56                   	push   esi
c002092b:	53                   	push   ebx
c002092c:	83 ec 1c             	sub    esp,0x1c
c002092f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0020933:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020937:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002093b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020942:	74 3c                	je     c0020980 <ATAPI::read(unsigned long long, int, void*)+0x58>
c0020944:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020948:	b9 03 00 00 00       	mov    ecx,0x3
c002094d:	fc                   	cld    
c002094e:	31 c0                	xor    eax,eax
c0020950:	0f ce                	bswap  esi
c0020952:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020954:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0020959:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c002095d:	89 e8                	mov    eax,ebp
c002095f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0020963:	50                   	push   eax
c0020964:	50                   	push   eax
c0020965:	55                   	push   ebp
c0020966:	c1 e5 0b             	shl    ebp,0xb
c0020969:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002096d:	6a 00                	push   0x0
c002096f:	55                   	push   ebp
c0020970:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020974:	50                   	push   eax
c0020975:	53                   	push   ebx
c0020976:	e8 b9 fa ff ff       	call   c0020434 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002097b:	83 c4 20             	add    esp,0x20
c002097e:	eb 1a                	jmp    c002099a <ATAPI::read(unsigned long long, int, void*)+0x72>
c0020980:	83 ec 0c             	sub    esp,0xc
c0020983:	53                   	push   ebx
c0020984:	e8 01 fe ff ff       	call   c002078a <ATAPI::detectMedia()>
c0020989:	83 c4 10             	add    esp,0x10
c002098c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020993:	75 af                	jne    c0020944 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0020995:	b8 02 00 00 00       	mov    eax,0x2
c002099a:	83 c4 1c             	add    esp,0x1c
c002099d:	5b                   	pop    ebx
c002099e:	5e                   	pop    esi
c002099f:	5f                   	pop    edi
c00209a0:	5d                   	pop    ebp
c00209a1:	c3                   	ret    

c00209a2 <SATA::close(int, int, void*)>:
c00209a2:	83 ec 0c             	sub    esp,0xc
c00209a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209a9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00209af:	85 c0                	test   eax,eax
c00209b1:	74 0c                	je     c00209bf <SATA::close(int, int, void*)+0x1d>
c00209b3:	83 ec 0c             	sub    esp,0xc
c00209b6:	8b 10                	mov    edx,DWORD PTR [eax]
c00209b8:	50                   	push   eax
c00209b9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00209bc:	83 c4 10             	add    esp,0x10
c00209bf:	31 c0                	xor    eax,eax
c00209c1:	83 c4 0c             	add    esp,0xc
c00209c4:	c3                   	ret    
c00209c5:	90                   	nop

c00209c6 <SATA::powerSaving(PowerSavingLevel)>:
c00209c6:	c3                   	ret    
c00209c7:	90                   	nop

c00209c8 <SATA::open(int, int, void*)>:
c00209c8:	56                   	push   esi
c00209c9:	53                   	push   ebx
c00209ca:	83 ec 10             	sub    esp,0x10
c00209cd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00209d1:	68 0c 65 02 c0       	push   0xc002650c
c00209d6:	e8 a1 65 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00209db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00209df:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00209e9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00209ef:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00209f9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00209fd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020a07:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020a0d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020a14:	e8 c1 f7 fe ff       	call   c00101da <Phys::allocatePage()>
c0020a19:	89 c6                	mov    esi,eax
c0020a1b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020a21:	81 c6 00 10 00 00    	add    esi,0x1000
c0020a27:	e8 ae f7 fe ff       	call   c00101da <Phys::allocatePage()>
c0020a2c:	83 c4 10             	add    esp,0x10
c0020a2f:	39 c6                	cmp    esi,eax
c0020a31:	74 10                	je     c0020a43 <SATA::open(int, int, void*)+0x7b>
c0020a33:	83 ec 0c             	sub    esp,0xc
c0020a36:	68 18 65 02 c0       	push   0xc0026518
c0020a3b:	e8 a6 f5 fe ff       	call   c000ffe6 <KePanic(char const*)>
c0020a40:	83 c4 10             	add    esp,0x10
c0020a43:	83 ec 0c             	sub    esp,0xc
c0020a46:	6a 02                	push   0x2
c0020a48:	e8 4e 2b ff ff       	call   c001359b <Virt::allocateKernelVirtualPages(int)>
c0020a4d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020a53:	6a 03                	push   0x3
c0020a55:	50                   	push   eax
c0020a56:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0020a5c:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c0020a62:	e8 17 32 ff ff       	call   c0013c7e <VAS::mapPage(unsigned long, unsigned long, int)>
c0020a67:	83 c4 14             	add    esp,0x14
c0020a6a:	53                   	push   ebx
c0020a6b:	e8 2e 94 fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c0020a70:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020a73:	e8 c6 a2 fe ff       	call   c000ad3e <createPartitionsForDisk(PhysicalDisk*)>
c0020a78:	83 c4 14             	add    esp,0x14
c0020a7b:	31 c0                	xor    eax,eax
c0020a7d:	5b                   	pop    ebx
c0020a7e:	5e                   	pop    esi
c0020a7f:	c3                   	ret    

c0020a80 <SATA::SATA()>:
c0020a80:	83 ec 0c             	sub    esp,0xc
c0020a83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a87:	83 ec 04             	sub    esp,0x4
c0020a8a:	68 00 02 00 00       	push   0x200
c0020a8f:	68 2c 65 02 c0       	push   0xc002652c
c0020a94:	50                   	push   eax
c0020a95:	e8 9c 93 fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020a9a:	83 c4 10             	add    esp,0x10
c0020a9d:	ba 9c 65 02 c0       	mov    edx,0xc002659c
c0020aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020aa6:	89 10                	mov    DWORD PTR [eax],edx
c0020aa8:	90                   	nop
c0020aa9:	83 c4 0c             	add    esp,0xc
c0020aac:	c3                   	ret    
c0020aad:	90                   	nop

c0020aae <SATA::access(unsigned long long, int, void*, bool)>:
c0020aae:	55                   	push   ebp
c0020aaf:	57                   	push   edi
c0020ab0:	56                   	push   esi
c0020ab1:	53                   	push   ebx
c0020ab2:	83 ec 2c             	sub    esp,0x2c
c0020ab5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020ab9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020abd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020ac1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0020ac5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020ac9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020acd:	fa                   	cli    
c0020ace:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c0020ad4:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0020ad9:	7e 10                	jle    c0020aeb <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c0020adb:	83 ec 0c             	sub    esp,0xc
c0020ade:	68 3c 65 02 c0       	push   0xc002653c
c0020ae3:	e8 fe f4 fe ff       	call   c000ffe6 <KePanic(char const*)>
c0020ae8:	83 c4 10             	add    esp,0x10
c0020aeb:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0020af1:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020af7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020afd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020b01:	89 d0                	mov    eax,edx
c0020b03:	c1 e0 07             	shl    eax,0x7
c0020b06:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020b0a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020b14:	51                   	push   ecx
c0020b15:	8d 42 02             	lea    eax,[edx+0x2]
c0020b18:	51                   	push   ecx
c0020b19:	c1 e0 07             	shl    eax,0x7
c0020b1c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020b20:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020b24:	50                   	push   eax
c0020b25:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020b2b:	e8 fe ed ff ff       	call   c001f92e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020b30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020b34:	83 c4 10             	add    esp,0x10
c0020b37:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020b3c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020b40:	0f 84 a4 01 00 00    	je     c0020cea <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0020b46:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020b4a:	c1 e0 09             	shl    eax,0x9
c0020b4d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020b52:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020b56:	74 0e                	je     c0020b66 <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c0020b58:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020b5e:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0020b62:	89 c1                	mov    ecx,eax
c0020b64:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020b66:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0020b6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020b70:	8d 42 02             	lea    eax,[edx+0x2]
c0020b73:	c1 e0 07             	shl    eax,0x7
c0020b76:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020b7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b7c:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020b82:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020b88:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020b8c:	c1 e1 05             	shl    ecx,0x5
c0020b8f:	01 c8                	add    eax,ecx
c0020b91:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020b95:	83 e1 01             	and    ecx,0x1
c0020b98:	89 ce                	mov    esi,ecx
c0020b9a:	8a 08                	mov    cl,BYTE PTR [eax]
c0020b9c:	c1 e6 06             	shl    esi,0x6
c0020b9f:	83 e1 bf             	and    ecx,0xffffffbf
c0020ba2:	09 f1                	or     ecx,esi
c0020ba4:	88 08                	mov    BYTE PTR [eax],cl
c0020ba6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020ba8:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0020bae:	81 c9 05 00 01 00    	or     ecx,0x10005
c0020bb4:	89 08                	mov    DWORD PTR [eax],ecx
c0020bb6:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0020bbc:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0020bc2:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0020bc8:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0020bcb:	50                   	push   eax
c0020bcc:	68 90 00 00 00       	push   0x90
c0020bd1:	6a 00                	push   0x0
c0020bd3:	56                   	push   esi
c0020bd4:	e8 17 f9 fd ff       	call   c00004f0 <memset>
c0020bd9:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020bdf:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020be5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020be9:	83 c4 10             	add    esp,0x10
c0020bec:	48                   	dec    eax
c0020bed:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020bf2:	89 c1                	mov    ecx,eax
c0020bf4:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020bfa:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020bff:	09 c8                	or     eax,ecx
c0020c01:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0020c07:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c0020c0d:	83 c8 80             	or     eax,0xffffff80
c0020c10:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c0020c16:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020c19:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020c1d:	25 00 7f 00 00       	and    eax,0x7f00
c0020c22:	0d 27 80 ff ff       	or     eax,0xffff8027
c0020c27:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020c2c:	66 89 06             	mov    WORD PTR [esi],ax
c0020c2f:	b0 35                	mov    al,0x35
c0020c31:	75 02                	jne    c0020c35 <SATA::access(unsigned long long, int, void*, bool)+0x187>
c0020c33:	b0 25                	mov    al,0x25
c0020c35:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0020c38:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0020c3c:	89 e8                	mov    eax,ebp
c0020c3e:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0020c42:	c1 e8 10             	shr    eax,0x10
c0020c45:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020c48:	89 e8                	mov    eax,ebp
c0020c4a:	c1 e8 18             	shr    eax,0x18
c0020c4d:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0020c50:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0020c54:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0020c57:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020c5b:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0020c5e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020c62:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0020c66:	89 d6                	mov    esi,edx
c0020c68:	31 c0                	xor    eax,eax
c0020c6a:	c1 e6 07             	shl    esi,0x7
c0020c6d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0020c71:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0020c77:	80 e1 88             	and    cl,0x88
c0020c7a:	74 0a                	je     c0020c86 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c0020c7c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020c81:	74 0a                	je     c0020c8d <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0020c83:	40                   	inc    eax
c0020c84:	eb eb                	jmp    c0020c71 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c0020c86:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020c8b:	75 0a                	jne    c0020c97 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c0020c8d:	83 ec 0c             	sub    esp,0xc
c0020c90:	68 75 65 02 c0       	push   0xc0026575
c0020c95:	eb 36                	jmp    c0020ccd <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c0020c97:	b8 01 00 00 00       	mov    eax,0x1
c0020c9c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020ca0:	c1 e2 07             	shl    edx,0x7
c0020ca3:	d3 e0                	shl    eax,cl
c0020ca5:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0020ca9:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0020caf:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0020cb5:	85 c8                	test   eax,ecx
c0020cb7:	74 25                	je     c0020cde <SATA::access(unsigned long long, int, void*, bool)+0x230>
c0020cb9:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0020cbf:	0f ba e1 1e          	bt     ecx,0x1e
c0020cc3:	73 ea                	jae    c0020caf <SATA::access(unsigned long long, int, void*, bool)+0x201>
c0020cc5:	83 ec 0c             	sub    esp,0xc
c0020cc8:	68 83 65 02 c0       	push   0xc0026583
c0020ccd:	e8 aa 62 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020cd2:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c0020cd9:	83 c4 10             	add    esp,0x10
c0020cdc:	eb 13                	jmp    c0020cf1 <SATA::access(unsigned long long, int, void*, bool)+0x243>
c0020cde:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0020ce4:	0f ba e0 1e          	bt     eax,0x1e
c0020ce8:	73 18                	jae    c0020d02 <SATA::access(unsigned long long, int, void*, bool)+0x254>
c0020cea:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c0020cf1:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c0020cf8:	75 01                	jne    c0020cfb <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c0020cfa:	fb                   	sti    
c0020cfb:	b8 01 00 00 00       	mov    eax,0x1
c0020d00:	eb 2c                	jmp    c0020d2e <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020d02:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020d07:	75 10                	jne    c0020d19 <SATA::access(unsigned long long, int, void*, bool)+0x26b>
c0020d09:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0020d0f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0020d13:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020d17:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020d19:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c0020d20:	a1 30 fa 02 c0       	mov    eax,ds:0xc002fa30
c0020d25:	85 c0                	test   eax,eax
c0020d27:	75 03                	jne    c0020d2c <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c0020d29:	fb                   	sti    
c0020d2a:	eb 02                	jmp    c0020d2e <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020d2c:	31 c0                	xor    eax,eax
c0020d2e:	83 c4 2c             	add    esp,0x2c
c0020d31:	5b                   	pop    ebx
c0020d32:	5e                   	pop    esi
c0020d33:	5f                   	pop    edi
c0020d34:	5d                   	pop    ebp
c0020d35:	c3                   	ret    

c0020d36 <SATA::read(unsigned long long, int, void*)>:
c0020d36:	57                   	push   edi
c0020d37:	b8 04 00 00 00       	mov    eax,0x4
c0020d3c:	56                   	push   esi
c0020d3d:	53                   	push   ebx
c0020d3e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020d42:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020d46:	8d 7a ff             	lea    edi,[edx-0x1]
c0020d49:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020d4d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0020d51:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0020d57:	77 25                	ja     c0020d7e <SATA::read(unsigned long long, int, void*)+0x48>
c0020d59:	b8 06 00 00 00       	mov    eax,0x6
c0020d5e:	85 f6                	test   esi,esi
c0020d60:	74 1c                	je     c0020d7e <SATA::read(unsigned long long, int, void*)+0x48>
c0020d62:	50                   	push   eax
c0020d63:	50                   	push   eax
c0020d64:	6a 00                	push   0x0
c0020d66:	56                   	push   esi
c0020d67:	52                   	push   edx
c0020d68:	53                   	push   ebx
c0020d69:	51                   	push   ecx
c0020d6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020d6e:	e8 3b fd ff ff       	call   c0020aae <SATA::access(unsigned long long, int, void*, bool)>
c0020d73:	83 c4 20             	add    esp,0x20
c0020d76:	85 c0                	test   eax,eax
c0020d78:	0f 95 c0             	setne  al
c0020d7b:	0f b6 c0             	movzx  eax,al
c0020d7e:	5b                   	pop    ebx
c0020d7f:	5e                   	pop    esi
c0020d80:	5f                   	pop    edi
c0020d81:	c3                   	ret    

c0020d82 <SATA::write(unsigned long long, int, void*)>:
c0020d82:	55                   	push   ebp
c0020d83:	b8 04 00 00 00       	mov    eax,0x4
c0020d88:	57                   	push   edi
c0020d89:	56                   	push   esi
c0020d8a:	53                   	push   ebx
c0020d8b:	83 ec 0c             	sub    esp,0xc
c0020d8e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020d92:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020d96:	8d 73 ff             	lea    esi,[ebx-0x1]
c0020d99:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0020d9d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020da1:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0020da7:	77 3d                	ja     c0020de6 <SATA::write(unsigned long long, int, void*)+0x64>
c0020da9:	b8 06 00 00 00       	mov    eax,0x6
c0020dae:	85 ed                	test   ebp,ebp
c0020db0:	74 34                	je     c0020de6 <SATA::write(unsigned long long, int, void*)+0x64>
c0020db2:	c1 e3 09             	shl    ebx,0x9
c0020db5:	01 eb                	add    ebx,ebp
c0020db7:	89 d6                	mov    esi,edx
c0020db9:	89 cf                	mov    edi,ecx
c0020dbb:	83 c6 01             	add    esi,0x1
c0020dbe:	83 d7 00             	adc    edi,0x0
c0020dc1:	50                   	push   eax
c0020dc2:	50                   	push   eax
c0020dc3:	6a 01                	push   0x1
c0020dc5:	55                   	push   ebp
c0020dc6:	81 c5 00 02 00 00    	add    ebp,0x200
c0020dcc:	6a 01                	push   0x1
c0020dce:	51                   	push   ecx
c0020dcf:	52                   	push   edx
c0020dd0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020dd4:	e8 d5 fc ff ff       	call   c0020aae <SATA::access(unsigned long long, int, void*, bool)>
c0020dd9:	83 c4 20             	add    esp,0x20
c0020ddc:	89 f2                	mov    edx,esi
c0020dde:	89 f9                	mov    ecx,edi
c0020de0:	39 dd                	cmp    ebp,ebx
c0020de2:	75 d3                	jne    c0020db7 <SATA::write(unsigned long long, int, void*)+0x35>
c0020de4:	31 c0                	xor    eax,eax
c0020de6:	83 c4 0c             	add    esp,0xc
c0020de9:	5b                   	pop    ebx
c0020dea:	5e                   	pop    esi
c0020deb:	5f                   	pop    edi
c0020dec:	5d                   	pop    ebp
c0020ded:	c3                   	ret    

c0020dee <SATAPI::write(unsigned long long, int, void*)>:
c0020dee:	b8 03 00 00 00       	mov    eax,0x3
c0020df3:	c3                   	ret    

c0020df4 <SATAPI::close(int, int, void*)>:
c0020df4:	83 ec 0c             	sub    esp,0xc
c0020df7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020dfb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020e01:	85 c0                	test   eax,eax
c0020e03:	74 0c                	je     c0020e11 <SATAPI::close(int, int, void*)+0x1d>
c0020e05:	83 ec 0c             	sub    esp,0xc
c0020e08:	8b 10                	mov    edx,DWORD PTR [eax]
c0020e0a:	50                   	push   eax
c0020e0b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020e0e:	83 c4 10             	add    esp,0x10
c0020e11:	31 c0                	xor    eax,eax
c0020e13:	83 c4 0c             	add    esp,0xc
c0020e16:	c3                   	ret    
c0020e17:	90                   	nop

c0020e18 <SATAPI::SATAPI()>:
c0020e18:	83 ec 0c             	sub    esp,0xc
c0020e1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e1f:	83 ec 04             	sub    esp,0x4
c0020e22:	68 00 08 00 00       	push   0x800
c0020e27:	68 cc 65 02 c0       	push   0xc00265cc
c0020e2c:	50                   	push   eax
c0020e2d:	e8 04 90 fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020e32:	83 c4 10             	add    esp,0x10
c0020e35:	ba c0 66 02 c0       	mov    edx,0xc00266c0
c0020e3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e3e:	89 10                	mov    DWORD PTR [eax],edx
c0020e40:	90                   	nop
c0020e41:	83 c4 0c             	add    esp,0xc
c0020e44:	c3                   	ret    
c0020e45:	90                   	nop

c0020e46 <SATAPI::diskRemoved()>:
c0020e46:	c3                   	ret    
c0020e47:	90                   	nop

c0020e48 <SATAPI::diskInserted()>:
c0020e48:	83 ec 18             	sub    esp,0x18
c0020e4b:	68 d8 65 02 c0       	push   0xc00265d8
c0020e50:	e8 27 61 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020e55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e59:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020e60:	83 c4 1c             	add    esp,0x1c
c0020e63:	c3                   	ret    

c0020e64 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0020e64:	55                   	push   ebp
c0020e65:	57                   	push   edi
c0020e66:	56                   	push   esi
c0020e67:	53                   	push   ebx
c0020e68:	83 ec 34             	sub    esp,0x34
c0020e6b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0020e6f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020e73:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0020e77:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020e7b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0020e7f:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0020e85:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020e8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020e8f:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0020e95:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020e99:	83 c0 02             	add    eax,0x2
c0020e9c:	c1 e0 07             	shl    eax,0x7
c0020e9f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020ea3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ea7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020eab:	c1 e0 07             	shl    eax,0x7
c0020eae:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020eb2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020eb6:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020ec0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020ec4:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020eca:	e8 5f ea ff ff       	call   c001f92e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020ecf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020ed3:	83 c4 10             	add    esp,0x10
c0020ed6:	b8 01 00 00 00       	mov    eax,0x1
c0020edb:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020ee0:	0f 84 57 02 00 00    	je     c002113d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c0020ee6:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020eec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020ef0:	8b 00                	mov    eax,DWORD PTR [eax]
c0020ef2:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020ef8:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020efe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020f02:	c1 e1 05             	shl    ecx,0x5
c0020f05:	01 c8                	add    eax,ecx
c0020f07:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020f09:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020f0f:	81 c9 25 00 01 00    	or     ecx,0x10025
c0020f15:	89 08                	mov    DWORD PTR [eax],ecx
c0020f17:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020f1d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020f23:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0020f29:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0020f2c:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020f2f:	50                   	push   eax
c0020f30:	68 90 00 00 00       	push   0x90
c0020f35:	6a 00                	push   0x0
c0020f37:	53                   	push   ebx
c0020f38:	e8 b3 f5 fd ff       	call   c00004f0 <memset>
c0020f3d:	b9 0c 00 00 00       	mov    ecx,0xc
c0020f42:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0020f46:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020f48:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0020f4e:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0020f52:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0020f58:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0020f5c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020f60:	48                   	dec    eax
c0020f61:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020f66:	89 c1                	mov    ecx,eax
c0020f68:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020f6e:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020f73:	09 c8                	or     eax,ecx
c0020f75:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0020f7b:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c0020f81:	83 c8 80             	or     eax,0xffffff80
c0020f84:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c0020f8a:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0020f8d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020f91:	25 00 7f 00 00       	and    eax,0x7f00
c0020f96:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0020f9a:	0d 27 80 ff ff       	or     eax,0xffff8027
c0020f9f:	66 89 03             	mov    WORD PTR [ebx],ax
c0020fa2:	89 d0                	mov    eax,edx
c0020fa4:	c1 ea 18             	shr    edx,0x18
c0020fa7:	c1 e8 10             	shr    eax,0x10
c0020faa:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0020fad:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0020fb0:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0020fb4:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0020fb7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020fbb:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0020fbe:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020fc2:	83 c4 10             	add    esp,0x10
c0020fc5:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0020fc9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020fcd:	31 c0                	xor    eax,eax
c0020fcf:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0020fd5:	80 e1 88             	and    cl,0x88
c0020fd8:	74 0a                	je     c0020fe4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c0020fda:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020fdf:	74 0a                	je     c0020feb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c0020fe1:	40                   	inc    eax
c0020fe2:	eb eb                	jmp    c0020fcf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0020fe4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020fe9:	75 43                	jne    c002102e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0020feb:	83 ec 0c             	sub    esp,0xc
c0020fee:	68 f0 65 02 c0       	push   0xc00265f0
c0020ff3:	e8 84 5f fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020ff8:	58                   	pop    eax
c0020ff9:	5a                   	pop    edx
c0020ffa:	68 05 66 02 c0       	push   0xc0026605
c0020fff:	ff 35 b4 f1 02 c0    	push   DWORD PTR ds:0xc002f1b4
c0021005:	e8 66 19 ff ff       	call   c0012970 <VgaText::puts(char const*)>
c002100a:	59                   	pop    ecx
c002100b:	5b                   	pop    ebx
c002100c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0021010:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0021016:	e8 ad e9 ff ff       	call   c001f9c8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002101b:	5e                   	pop    esi
c002101c:	5f                   	pop    edi
c002101d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0021021:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0021027:	e8 7c e9 ff ff       	call   c001f9a8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002102c:	eb 48                	jmp    c0021076 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c002102e:	be 01 00 00 00       	mov    esi,0x1
c0021033:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0021037:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002103b:	d3 e6                	shl    esi,cl
c002103d:	c1 e7 07             	shl    edi,0x7
c0021040:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0021046:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c002104b:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c002104f:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0021055:	85 c6                	test   esi,eax
c0021057:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002105d:	0f 84 a7 00 00 00    	je     c002110a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a6>
c0021063:	0f ba e0 1e          	bt     eax,0x1e
c0021067:	73 1a                	jae    c0021083 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c0021069:	83 ec 0c             	sub    esp,0xc
c002106c:	68 17 66 02 c0       	push   0xc0026617
c0021071:	e8 06 5f fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0021076:	83 c4 10             	add    esp,0x10
c0021079:	b8 01 00 00 00       	mov    eax,0x1
c002107e:	e9 ba 00 00 00       	jmp    c002113d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c0021083:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c0021089:	83 f8 0d             	cmp    eax,0xd
c002108c:	77 0b                	ja     c0021099 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x235>
c002108e:	50                   	push   eax
c002108f:	50                   	push   eax
c0021090:	6a 00                	push   0x0
c0021092:	68 c8 00 00 00       	push   0xc8
c0021097:	eb 2a                	jmp    c00210c3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c0021099:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c002109f:	83 f8 0d             	cmp    eax,0xd
c00210a2:	77 0b                	ja     c00210af <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c00210a4:	51                   	push   ecx
c00210a5:	51                   	push   ecx
c00210a6:	6a 00                	push   0x0
c00210a8:	68 58 02 00 00       	push   0x258
c00210ad:	eb 14                	jmp    c00210c3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c00210af:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c00210b5:	83 f8 06             	cmp    eax,0x6
c00210b8:	77 11                	ja     c00210cb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c00210ba:	52                   	push   edx
c00210bb:	52                   	push   edx
c00210bc:	6a 00                	push   0x0
c00210be:	68 dc 05 00 00       	push   0x5dc
c00210c3:	e8 40 63 ff ff       	call   c0017408 <milliTenthSleep(unsigned long long)>
c00210c8:	83 c4 10             	add    esp,0x10
c00210cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00210cf:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c00210d2:	75 06                	jne    c00210da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x276>
c00210d4:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c00210d8:	74 16                	je     c00210f0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c00210da:	83 fb 06             	cmp    ebx,0x6
c00210dd:	77 11                	ja     c00210f0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c00210df:	50                   	push   eax
c00210e0:	50                   	push   eax
c00210e1:	6a 00                	push   0x0
c00210e3:	68 c4 09 00 00       	push   0x9c4
c00210e8:	e8 1b 63 ff ff       	call   c0017408 <milliTenthSleep(unsigned long long)>
c00210ed:	83 c4 10             	add    esp,0x10
c00210f0:	43                   	inc    ebx
c00210f1:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c00210f7:	0f 85 52 ff ff ff    	jne    c002104f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c00210fd:	83 ec 0c             	sub    esp,0xc
c0021100:	68 2a 66 02 c0       	push   0xc002662a
c0021105:	e9 67 ff ff ff       	jmp    c0021071 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c002110a:	0f ba e0 1e          	bt     eax,0x1e
c002110e:	73 0d                	jae    c002111d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b9>
c0021110:	83 ec 0c             	sub    esp,0xc
c0021113:	68 3e 66 02 c0       	push   0xc002663e
c0021118:	e9 54 ff ff ff       	jmp    c0021071 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c002111d:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0021122:	74 17                	je     c002113b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c0021124:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0021129:	74 10                	je     c002113b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c002112b:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0021131:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0021135:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0021139:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002113b:	31 c0                	xor    eax,eax
c002113d:	83 c4 2c             	add    esp,0x2c
c0021140:	5b                   	pop    ebx
c0021141:	5e                   	pop    esi
c0021142:	5f                   	pop    edi
c0021143:	5d                   	pop    ebp
c0021144:	c3                   	ret    
c0021145:	90                   	nop

c0021146 <SATAPI::eject()>:
c0021146:	57                   	push   edi
c0021147:	b9 03 00 00 00       	mov    ecx,0x3
c002114c:	83 ec 18             	sub    esp,0x18
c002114f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021153:	fc                   	cld    
c0021154:	31 c0                	xor    eax,eax
c0021156:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021158:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002115d:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0021162:	50                   	push   eax
c0021163:	6a 00                	push   0x0
c0021165:	6a 00                	push   0x0
c0021167:	6a 00                	push   0x0
c0021169:	6a 00                	push   0x0
c002116b:	6a 02                	push   0x2
c002116d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021171:	50                   	push   eax
c0021172:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021176:	e8 e9 fc ff ff       	call   c0020e64 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002117b:	31 c0                	xor    eax,eax
c002117d:	83 c4 38             	add    esp,0x38
c0021180:	5f                   	pop    edi
c0021181:	c3                   	ret    

c0021182 <SATAPI::detectMedia()>:
c0021182:	53                   	push   ebx
c0021183:	83 ec 14             	sub    esp,0x14
c0021186:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002118a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0021190:	e8 77 a2 fe ff       	call   c000b40c <VCache::writeWriteBuffer()>
c0021195:	59                   	pop    ecx
c0021196:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002119c:	e8 5b a2 fe ff       	call   c000b3fc <VCache::invalidateReadBuffer()>
c00211a1:	c7 04 24 53 66 02 c0 	mov    DWORD PTR [esp],0xc0026653
c00211a8:	e8 cf 5d fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00211ad:	83 c4 10             	add    esp,0x10
c00211b0:	31 c0                	xor    eax,eax
c00211b2:	8b 14 85 e0 ca 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3520]
c00211b9:	85 d2                	test   edx,edx
c00211bb:	74 0f                	je     c00211cc <SATAPI::detectMedia()+0x4a>
c00211bd:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c00211c3:	75 07                	jne    c00211cc <SATAPI::detectMedia()+0x4a>
c00211c5:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c00211cc:	40                   	inc    eax
c00211cd:	83 f8 1a             	cmp    eax,0x1a
c00211d0:	75 e0                	jne    c00211b2 <SATAPI::detectMedia()+0x30>
c00211d2:	83 c4 08             	add    esp,0x8
c00211d5:	5b                   	pop    ebx
c00211d6:	c3                   	ret    
c00211d7:	90                   	nop

c00211d8 <SATAPI::open(int, int, void*)>:
c00211d8:	56                   	push   esi
c00211d9:	53                   	push   ebx
c00211da:	51                   	push   ecx
c00211db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00211df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00211e3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00211ed:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00211f3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00211fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021201:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002120b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0021211:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0021218:	e8 bd ef fe ff       	call   c00101da <Phys::allocatePage()>
c002121d:	89 c6                	mov    esi,eax
c002121f:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0021225:	81 c6 00 10 00 00    	add    esi,0x1000
c002122b:	e8 aa ef fe ff       	call   c00101da <Phys::allocatePage()>
c0021230:	39 c6                	cmp    esi,eax
c0021232:	74 10                	je     c0021244 <SATAPI::open(int, int, void*)+0x6c>
c0021234:	83 ec 0c             	sub    esp,0xc
c0021237:	68 68 66 02 c0       	push   0xc0026668
c002123c:	e8 a5 ed fe ff       	call   c000ffe6 <KePanic(char const*)>
c0021241:	83 c4 10             	add    esp,0x10
c0021244:	83 ec 0c             	sub    esp,0xc
c0021247:	6a 02                	push   0x2
c0021249:	e8 4d 23 ff ff       	call   c001359b <Virt::allocateKernelVirtualPages(int)>
c002124e:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0021254:	6a 03                	push   0x3
c0021256:	50                   	push   eax
c0021257:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002125d:	ff 35 50 f2 02 c0    	push   DWORD PTR ds:0xc002f250
c0021263:	e8 16 2a ff ff       	call   c0013c7e <VAS::mapPage(unsigned long, unsigned long, int)>
c0021268:	83 c4 14             	add    esp,0x14
c002126b:	68 78 01 00 00       	push   0x178
c0021270:	e8 1a e9 fe ff       	call   c000fb8f <malloc>
c0021275:	83 c4 0c             	add    esp,0xc
c0021278:	89 c6                	mov    esi,eax
c002127a:	6a 00                	push   0x0
c002127c:	68 ff ff ff 7f       	push   0x7fffffff
c0021281:	6a 00                	push   0x0
c0021283:	6a 00                	push   0x0
c0021285:	53                   	push   ebx
c0021286:	68 7e 66 02 c0       	push   0xc002667e
c002128b:	50                   	push   eax
c002128c:	e8 db 95 fe ff       	call   c000a86c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0021291:	83 c4 14             	add    esp,0x14
c0021294:	56                   	push   esi
c0021295:	e8 92 96 fe ff       	call   c000a92c <LogicalDisk::assignDriveLetter()>
c002129a:	5a                   	pop    edx
c002129b:	0f be c0             	movsx  eax,al
c002129e:	59                   	pop    ecx
c002129f:	50                   	push   eax
c00212a0:	68 c4 64 02 c0       	push   0xc00264c4
c00212a5:	e8 d2 5c fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00212aa:	58                   	pop    eax
c00212ab:	5a                   	pop    edx
c00212ac:	56                   	push   esi
c00212ad:	53                   	push   ebx
c00212ae:	e8 a1 87 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c00212b3:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c00212b9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00212bc:	e8 dd 8b fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c00212c1:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00212c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00212cb:	e8 b2 fe ff ff       	call   c0021182 <SATAPI::detectMedia()>
c00212d0:	83 c4 14             	add    esp,0x14
c00212d3:	31 c0                	xor    eax,eax
c00212d5:	5b                   	pop    ebx
c00212d6:	5e                   	pop    esi
c00212d7:	c3                   	ret    

c00212d8 <SATAPI::read(unsigned long long, int, void*)>:
c00212d8:	57                   	push   edi
c00212d9:	56                   	push   esi
c00212da:	53                   	push   ebx
c00212db:	83 ec 30             	sub    esp,0x30
c00212de:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00212e2:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00212e6:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00212ea:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00212ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00212f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00212f6:	83 fe 04             	cmp    esi,0x4
c00212f9:	7e 10                	jle    c002130b <SATAPI::read(unsigned long long, int, void*)+0x33>
c00212fb:	83 ec 0c             	sub    esp,0xc
c00212fe:	68 8c 66 02 c0       	push   0xc002668c
c0021303:	e8 de ec fe ff       	call   c000ffe6 <KePanic(char const*)>
c0021308:	83 c4 10             	add    esp,0x10
c002130b:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0021311:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0021317:	51                   	push   ecx
c0021318:	50                   	push   eax
c0021319:	83 c0 02             	add    eax,0x2
c002131c:	c1 e0 07             	shl    eax,0x7
c002131f:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c0021325:	50                   	push   eax
c0021326:	52                   	push   edx
c0021327:	e8 c6 e6 ff ff       	call   c001f9f2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002132c:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0021330:	b9 03 00 00 00       	mov    ecx,0x3
c0021335:	fc                   	cld    
c0021336:	31 c0                	xor    eax,eax
c0021338:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002133a:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c002133f:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0021344:	83 c4 0c             	add    esp,0xc
c0021347:	6a 00                	push   0x0
c0021349:	6a 00                	push   0x0
c002134b:	6a 00                	push   0x0
c002134d:	6a 00                	push   0x0
c002134f:	6a 02                	push   0x2
c0021351:	8d 44 24 30          	lea    eax,[esp+0x30]
c0021355:	50                   	push   eax
c0021356:	53                   	push   ebx
c0021357:	e8 08 fb ff ff       	call   c0020e64 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002135c:	83 c4 20             	add    esp,0x20
c002135f:	85 c0                	test   eax,eax
c0021361:	75 44                	jne    c00213a7 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c0021363:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021367:	b9 03 00 00 00       	mov    ecx,0x3
c002136c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002136e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021372:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c0021377:	0f c8                	bswap  eax
c0021379:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c002137d:	89 f0                	mov    eax,esi
c002137f:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0021383:	50                   	push   eax
c0021384:	56                   	push   esi
c0021385:	c1 e6 0b             	shl    esi,0xb
c0021388:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002138c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021390:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021394:	56                   	push   esi
c0021395:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0021399:	50                   	push   eax
c002139a:	53                   	push   ebx
c002139b:	e8 c4 fa ff ff       	call   c0020e64 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00213a0:	83 c4 20             	add    esp,0x20
c00213a3:	85 c0                	test   eax,eax
c00213a5:	74 14                	je     c00213bb <SATAPI::read(unsigned long long, int, void*)+0xe3>
c00213a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00213ab:	83 ec 0c             	sub    esp,0xc
c00213ae:	53                   	push   ebx
c00213af:	e8 ce fd ff ff       	call   c0021182 <SATAPI::detectMedia()>
c00213b4:	83 c4 10             	add    esp,0x10
c00213b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00213bb:	83 c4 30             	add    esp,0x30
c00213be:	5b                   	pop    ebx
c00213bf:	5e                   	pop    esi
c00213c0:	5f                   	pop    edi
c00213c1:	c3                   	ret    
c00213c2:	66 90                	xchg   ax,ax

c00213c4 <APICTimer::close(int, int, void*)>:
c00213c4:	b8 00 00 00 00       	mov    eax,0x0
c00213c9:	c3                   	ret    
c00213ca:	66 90                	xchg   ax,ax

c00213cc <apicTimerHandler(regs*, void*)>:
c00213cc:	83 ec 0c             	sub    esp,0xc
c00213cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00213d3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00213d5:	b8 10 27 00 00       	mov    eax,0x2710
c00213da:	ba 00 00 00 00       	mov    edx,0x0
c00213df:	f7 f1                	div    ecx
c00213e1:	83 ec 0c             	sub    esp,0xc
c00213e4:	50                   	push   eax
c00213e5:	e8 3e 9d fe ff       	call   c000b128 <timerHandler(unsigned int)>
c00213ea:	83 c4 10             	add    esp,0x10
c00213ed:	90                   	nop
c00213ee:	83 c4 0c             	add    esp,0xc
c00213f1:	c3                   	ret    
c00213f2:	66 90                	xchg   ax,ax

c00213f4 <APICTimer::open(int, int, void*)>:
c00213f4:	83 ec 0c             	sub    esp,0xc
c00213f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00213fd:	83 c0 24             	add    eax,0x24
c0021400:	8b 00                	mov    eax,DWORD PTR [eax]
c0021402:	83 ec 08             	sub    esp,0x8
c0021405:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021409:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002140d:	ff d0                	call   eax
c002140f:	83 c4 10             	add    esp,0x10
c0021412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021416:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002141a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0021420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021424:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021428:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002142e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021432:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0021438:	83 ec 0c             	sub    esp,0xc
c002143b:	51                   	push   ecx
c002143c:	6a 01                	push   0x1
c002143e:	68 cc 13 02 c0       	push   0xc00213cc
c0021443:	52                   	push   edx
c0021444:	50                   	push   eax
c0021445:	e8 b6 85 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002144a:	83 c4 20             	add    esp,0x20
c002144d:	89 c2                	mov    edx,eax
c002144f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021453:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0021459:	b8 00 00 00 00       	mov    eax,0x0
c002145e:	83 c4 0c             	add    esp,0xc
c0021461:	c3                   	ret    
c0021462:	66 90                	xchg   ax,ax

c0021464 <APICTimer::write(int)>:
c0021464:	83 ec 0c             	sub    esp,0xc
c0021467:	83 ec 0c             	sub    esp,0xc
c002146a:	68 f0 66 02 c0       	push   0xc00266f0
c002146f:	e8 72 eb fe ff       	call   c000ffe6 <KePanic(char const*)>
c0021474:	83 c4 10             	add    esp,0x10
c0021477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002147b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002147f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021485:	90                   	nop
c0021486:	83 c4 0c             	add    esp,0xc
c0021489:	c3                   	ret    
c002148a:	66 90                	xchg   ax,ax

c002148c <APICTimer::APICTimer()>:
c002148c:	83 ec 0c             	sub    esp,0xc
c002148f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021493:	83 ec 08             	sub    esp,0x8
c0021496:	68 00 67 02 c0       	push   0xc0026700
c002149b:	50                   	push   eax
c002149c:	e8 bb 9b fe ff       	call   c000b05c <Timer::Timer(char const*)>
c00214a1:	83 c4 10             	add    esp,0x10
c00214a4:	ba 14 67 02 c0       	mov    edx,0xc0026714
c00214a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214ad:	89 10                	mov    DWORD PTR [eax],edx
c00214af:	90                   	nop
c00214b0:	83 c4 0c             	add    esp,0xc
c00214b3:	c3                   	ret    

c00214b4 <PIT::write(int)>:
c00214b4:	83 ec 10             	sub    esp,0x10
c00214b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00214bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00214bf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00214c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00214c9:	a3 98 04 03 c0       	mov    ds:0xc0030498,eax
c00214ce:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00214d3:	89 c2                	mov    edx,eax
c00214d5:	c1 fa 1f             	sar    edx,0x1f
c00214d8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00214dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00214e0:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00214e7:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00214ec:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00214f0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00214f5:	ee                   	out    dx,al
c00214f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00214fa:	0f b6 c0             	movzx  eax,al
c00214fd:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0021504:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0021508:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002150c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0021511:	ee                   	out    dx,al
c0021512:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021516:	c1 f8 08             	sar    eax,0x8
c0021519:	0f b6 c0             	movzx  eax,al
c002151c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0021523:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0021527:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002152b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0021530:	ee                   	out    dx,al
c0021531:	90                   	nop
c0021532:	83 c4 10             	add    esp,0x10
c0021535:	c3                   	ret    
c0021536:	66 90                	xchg   ax,ax

c0021538 <pitHandler(regs*, void*)>:
c0021538:	83 ec 0c             	sub    esp,0xc
c002153b:	8b 0d 98 04 03 c0    	mov    ecx,DWORD PTR ds:0xc0030498
c0021541:	b8 10 27 00 00       	mov    eax,0x2710
c0021546:	89 c2                	mov    edx,eax
c0021548:	c1 fa 1f             	sar    edx,0x1f
c002154b:	f7 f9                	idiv   ecx
c002154d:	83 ec 0c             	sub    esp,0xc
c0021550:	50                   	push   eax
c0021551:	e8 d2 9b fe ff       	call   c000b128 <timerHandler(unsigned int)>
c0021556:	83 c4 10             	add    esp,0x10
c0021559:	90                   	nop
c002155a:	83 c4 0c             	add    esp,0xc
c002155d:	c3                   	ret    
c002155e:	66 90                	xchg   ax,ax

c0021560 <PIT::open(int, int, void*)>:
c0021560:	83 ec 0c             	sub    esp,0xc
c0021563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021567:	8b 00                	mov    eax,DWORD PTR [eax]
c0021569:	83 c0 24             	add    eax,0x24
c002156c:	8b 00                	mov    eax,DWORD PTR [eax]
c002156e:	83 ec 08             	sub    esp,0x8
c0021571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021579:	ff d0                	call   eax
c002157b:	83 c4 10             	add    esp,0x10
c002157e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021582:	83 ec 0c             	sub    esp,0xc
c0021585:	6a 00                	push   0x0
c0021587:	6a 01                	push   0x1
c0021589:	68 38 15 02 c0       	push   0xc0021538
c002158e:	6a 00                	push   0x0
c0021590:	50                   	push   eax
c0021591:	e8 6a 84 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021596:	83 c4 20             	add    esp,0x20
c0021599:	89 c2                	mov    edx,eax
c002159b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002159f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00215a5:	b8 00 00 00 00       	mov    eax,0x0
c00215aa:	83 c4 0c             	add    esp,0xc
c00215ad:	c3                   	ret    
c00215ae:	66 90                	xchg   ax,ax

c00215b0 <PIT::close(int, int, void*)>:
c00215b0:	83 ec 0c             	sub    esp,0xc
c00215b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215b7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00215c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215c5:	6a 01                	push   0x1
c00215c7:	68 38 15 02 c0       	push   0xc0021538
c00215cc:	6a 00                	push   0x0
c00215ce:	50                   	push   eax
c00215cf:	e8 62 84 fe ff       	call   c0009a36 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00215d4:	83 c4 10             	add    esp,0x10
c00215d7:	b8 00 00 00 00       	mov    eax,0x0
c00215dc:	83 c4 0c             	add    esp,0xc
c00215df:	c3                   	ret    

c00215e0 <PIT::PIT()>:
c00215e0:	83 ec 0c             	sub    esp,0xc
c00215e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215e7:	83 ec 08             	sub    esp,0x8
c00215ea:	68 3c 67 02 c0       	push   0xc002673c
c00215ef:	50                   	push   eax
c00215f0:	e8 67 9a fe ff       	call   c000b05c <Timer::Timer(char const*)>
c00215f5:	83 c4 10             	add    esp,0x10
c00215f8:	ba 64 67 02 c0       	mov    edx,0xc0026764
c00215fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021601:	89 10                	mov    DWORD PTR [eax],edx
c0021603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021607:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002160d:	0f b6 d0             	movzx  edx,al
c0021610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021614:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002161b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002161f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021625:	0f b6 d0             	movzx  edx,al
c0021628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002162c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0021631:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021635:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002163b:	8d 50 01             	lea    edx,[eax+0x1]
c002163e:	88 d1                	mov    cl,dl
c0021640:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021644:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002164a:	0f b6 d0             	movzx  edx,al
c002164d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021651:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021655:	83 e1 3f             	and    ecx,0x3f
c0021658:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002165c:	90                   	nop
c002165d:	83 c4 0c             	add    esp,0xc
c0021660:	c3                   	ret    
c0021661:	66 90                	xchg   ax,ax
c0021663:	66 90                	xchg   ax,ax
c0021665:	66 90                	xchg   ax,ax
c0021667:	66 90                	xchg   ax,ax
c0021669:	66 90                	xchg   ax,ax
c002166b:	66 90                	xchg   ax,ax
c002166d:	66 90                	xchg   ax,ax
c002166f:	90                   	nop

c0021670 <avxDetect>:
c0021670:	b8 01 00 00 00       	mov    eax,0x1
c0021675:	0f a2                	cpuid  
c0021677:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002167d:	74 15                	je     c0021694 <avxDetect.noAVX>
c002167f:	b8 01 00 00 00       	mov    eax,0x1
c0021684:	0f a2                	cpuid  
c0021686:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002168c:	74 06                	je     c0021694 <avxDetect.noAVX>
c002168e:	b8 01 00 00 00       	mov    eax,0x1
c0021693:	c3                   	ret    

c0021694 <avxDetect.noAVX>:
c0021694:	b8 00 00 00 00       	mov    eax,0x0
c0021699:	c3                   	ret    

c002169a <avxSave>:
c002169a:	53                   	push   ebx
c002169b:	52                   	push   edx
c002169c:	31 c0                	xor    eax,eax
c002169e:	48                   	dec    eax
c002169f:	89 c2                	mov    edx,eax
c00216a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00216a5:	0f ae 23             	xsave  [ebx]
c00216a8:	5a                   	pop    edx
c00216a9:	5b                   	pop    ebx
c00216aa:	c3                   	ret    

c00216ab <avxLoad>:
c00216ab:	53                   	push   ebx
c00216ac:	52                   	push   edx
c00216ad:	31 c0                	xor    eax,eax
c00216af:	48                   	dec    eax
c00216b0:	89 c2                	mov    edx,eax
c00216b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00216b6:	0f ae 2b             	xrstor [ebx]
c00216b9:	5a                   	pop    edx
c00216ba:	5b                   	pop    ebx
c00216bb:	c3                   	ret    

c00216bc <avxInit>:
c00216bc:	e8 17 03 00 00       	call   c00219d8 <sseInit>
c00216c1:	50                   	push   eax
c00216c2:	51                   	push   ecx
c00216c3:	0f 20 e0             	mov    eax,cr4
c00216c6:	0d 00 00 04 00       	or     eax,0x40000
c00216cb:	0f 22 e0             	mov    cr4,eax
c00216ce:	31 c9                	xor    ecx,ecx
c00216d0:	0f 01 d0             	xgetbv 
c00216d3:	0d 07 00 00 00       	or     eax,0x7
c00216d8:	0f 01 d1             	xsetbv 
c00216db:	59                   	pop    ecx
c00216dc:	58                   	pop    eax
c00216dd:	c3                   	ret    

c00216de <avxClose>:
c00216de:	c3                   	ret    
c00216df:	90                   	nop

c00216e0 <isr0>:
c00216e0:	fa                   	cli    
c00216e1:	68 00 00 00 00       	push   0x0
c00216e6:	68 00 00 00 00       	push   0x0
c00216eb:	e9 56 01 00 00       	jmp    c0021846 <int_common_stub>

c00216f0 <isr1>:
c00216f0:	fa                   	cli    
c00216f1:	6a 00                	push   0x0
c00216f3:	6a 01                	push   0x1
c00216f5:	e9 4c 01 00 00       	jmp    c0021846 <int_common_stub>

c00216fa <isr2>:
c00216fa:	fa                   	cli    
c00216fb:	6a 00                	push   0x0
c00216fd:	6a 02                	push   0x2
c00216ff:	e9 42 01 00 00       	jmp    c0021846 <int_common_stub>

c0021704 <isr3>:
c0021704:	fa                   	cli    
c0021705:	6a 00                	push   0x0
c0021707:	6a 03                	push   0x3
c0021709:	e9 38 01 00 00       	jmp    c0021846 <int_common_stub>

c002170e <isr4>:
c002170e:	fa                   	cli    
c002170f:	6a 00                	push   0x0
c0021711:	6a 04                	push   0x4
c0021713:	e9 2e 01 00 00       	jmp    c0021846 <int_common_stub>

c0021718 <isr5>:
c0021718:	fa                   	cli    
c0021719:	6a 00                	push   0x0
c002171b:	6a 05                	push   0x5
c002171d:	e9 24 01 00 00       	jmp    c0021846 <int_common_stub>

c0021722 <isr6>:
c0021722:	fa                   	cli    
c0021723:	6a 00                	push   0x0
c0021725:	6a 06                	push   0x6
c0021727:	e9 1a 01 00 00       	jmp    c0021846 <int_common_stub>

c002172c <isr7>:
c002172c:	fa                   	cli    
c002172d:	6a 00                	push   0x0
c002172f:	6a 07                	push   0x7
c0021731:	e9 10 01 00 00       	jmp    c0021846 <int_common_stub>

c0021736 <isr8>:
c0021736:	fa                   	cli    
c0021737:	6a 08                	push   0x8
c0021739:	e9 08 01 00 00       	jmp    c0021846 <int_common_stub>

c002173e <isr9>:
c002173e:	fa                   	cli    
c002173f:	6a 00                	push   0x0
c0021741:	6a 09                	push   0x9
c0021743:	e9 fe 00 00 00       	jmp    c0021846 <int_common_stub>

c0021748 <isr10>:
c0021748:	fa                   	cli    
c0021749:	6a 0a                	push   0xa
c002174b:	e9 f6 00 00 00       	jmp    c0021846 <int_common_stub>

c0021750 <isr11>:
c0021750:	fa                   	cli    
c0021751:	6a 0b                	push   0xb
c0021753:	e9 ee 00 00 00       	jmp    c0021846 <int_common_stub>

c0021758 <isr12>:
c0021758:	fa                   	cli    
c0021759:	6a 0c                	push   0xc
c002175b:	e9 e6 00 00 00       	jmp    c0021846 <int_common_stub>

c0021760 <isr13>:
c0021760:	fa                   	cli    
c0021761:	6a 0d                	push   0xd
c0021763:	53                   	push   ebx
c0021764:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021768:	81 fb 05 19 02 c0    	cmp    ebx,0xc0021905
c002176e:	5b                   	pop    ebx
c002176f:	0f 84 92 01 00 00    	je     c0021907 <finishSignal2>
c0021775:	e9 cc 00 00 00       	jmp    c0021846 <int_common_stub>

c002177a <isr14>:
c002177a:	fa                   	cli    
c002177b:	6a 0e                	push   0xe
c002177d:	e9 c4 00 00 00       	jmp    c0021846 <int_common_stub>

c0021782 <isr15>:
c0021782:	fa                   	cli    
c0021783:	6a 00                	push   0x0
c0021785:	6a 0f                	push   0xf
c0021787:	e9 ba 00 00 00       	jmp    c0021846 <int_common_stub>

c002178c <isr16>:
c002178c:	fa                   	cli    
c002178d:	6a 00                	push   0x0
c002178f:	6a 10                	push   0x10
c0021791:	e9 b0 00 00 00       	jmp    c0021846 <int_common_stub>

c0021796 <isr17>:
c0021796:	fa                   	cli    
c0021797:	6a 00                	push   0x0
c0021799:	6a 11                	push   0x11
c002179b:	e9 a6 00 00 00       	jmp    c0021846 <int_common_stub>

c00217a0 <isr18>:
c00217a0:	fa                   	cli    
c00217a1:	6a 00                	push   0x0
c00217a3:	6a 12                	push   0x12
c00217a5:	e9 9c 00 00 00       	jmp    c0021846 <int_common_stub>

c00217aa <irq3>:
c00217aa:	fa                   	cli    
c00217ab:	6a 00                	push   0x0
c00217ad:	6a 23                	push   0x23
c00217af:	e9 92 00 00 00       	jmp    c0021846 <int_common_stub>

c00217b4 <irq4>:
c00217b4:	fa                   	cli    
c00217b5:	6a 00                	push   0x0
c00217b7:	6a 24                	push   0x24
c00217b9:	e9 88 00 00 00       	jmp    c0021846 <int_common_stub>

c00217be <irq5>:
c00217be:	fa                   	cli    
c00217bf:	6a 00                	push   0x0
c00217c1:	6a 25                	push   0x25
c00217c3:	e9 7e 00 00 00       	jmp    c0021846 <int_common_stub>

c00217c8 <irq6>:
c00217c8:	fa                   	cli    
c00217c9:	6a 00                	push   0x0
c00217cb:	6a 26                	push   0x26
c00217cd:	e9 74 00 00 00       	jmp    c0021846 <int_common_stub>

c00217d2 <irq7>:
c00217d2:	fa                   	cli    
c00217d3:	6a 00                	push   0x0
c00217d5:	6a 27                	push   0x27
c00217d7:	e9 6a 00 00 00       	jmp    c0021846 <int_common_stub>

c00217dc <irq8>:
c00217dc:	fa                   	cli    
c00217dd:	6a 00                	push   0x0
c00217df:	6a 28                	push   0x28
c00217e1:	e9 60 00 00 00       	jmp    c0021846 <int_common_stub>

c00217e6 <irq9>:
c00217e6:	fa                   	cli    
c00217e7:	6a 00                	push   0x0
c00217e9:	6a 29                	push   0x29
c00217eb:	e9 56 00 00 00       	jmp    c0021846 <int_common_stub>

c00217f0 <irq10>:
c00217f0:	fa                   	cli    
c00217f1:	6a 00                	push   0x0
c00217f3:	6a 2a                	push   0x2a
c00217f5:	e9 4c 00 00 00       	jmp    c0021846 <int_common_stub>

c00217fa <irq11>:
c00217fa:	fa                   	cli    
c00217fb:	6a 00                	push   0x0
c00217fd:	6a 2b                	push   0x2b
c00217ff:	e9 42 00 00 00       	jmp    c0021846 <int_common_stub>

c0021804 <irq12>:
c0021804:	fa                   	cli    
c0021805:	6a 00                	push   0x0
c0021807:	6a 2c                	push   0x2c
c0021809:	e9 38 00 00 00       	jmp    c0021846 <int_common_stub>

c002180e <irq13>:
c002180e:	fa                   	cli    
c002180f:	6a 00                	push   0x0
c0021811:	6a 2d                	push   0x2d
c0021813:	e9 2e 00 00 00       	jmp    c0021846 <int_common_stub>

c0021818 <irq14>:
c0021818:	fa                   	cli    
c0021819:	6a 00                	push   0x0
c002181b:	6a 2e                	push   0x2e
c002181d:	e9 24 00 00 00       	jmp    c0021846 <int_common_stub>

c0021822 <irq15>:
c0021822:	fa                   	cli    
c0021823:	6a 00                	push   0x0
c0021825:	6a 2f                	push   0x2f
c0021827:	e9 1a 00 00 00       	jmp    c0021846 <int_common_stub>

c002182c <irq1>:
c002182c:	fa                   	cli    
c002182d:	6a 00                	push   0x0
c002182f:	6a 21                	push   0x21
c0021831:	eb 13                	jmp    c0021846 <int_common_stub>

c0021833 <irq2>:
c0021833:	fa                   	cli    
c0021834:	6a 00                	push   0x0
c0021836:	6a 22                	push   0x22
c0021838:	eb 0c                	jmp    c0021846 <int_common_stub>

c002183a <isr96>:
c002183a:	6a 00                	push   0x0
c002183c:	6a 60                	push   0x60
c002183e:	fb                   	sti    
c002183f:	eb 05                	jmp    c0021846 <int_common_stub>

c0021841 <irq0>:
c0021841:	fa                   	cli    
c0021842:	6a 00                	push   0x0
c0021844:	6a 20                	push   0x20

c0021846 <int_common_stub>:
c0021846:	60                   	pusha  
c0021847:	1e                   	push   ds
c0021848:	06                   	push   es
c0021849:	0f a0                	push   fs
c002184b:	0f a8                	push   gs
c002184d:	66 b8 10 00          	mov    ax,0x10
c0021851:	66 8e d8             	mov    ds,ax
c0021854:	66 8e c0             	mov    es,ax
c0021857:	66 8e e0             	mov    fs,ax
c002185a:	66 8e e8             	mov    gs,ax
c002185d:	54                   	push   esp
c002185e:	fc                   	cld    
c002185f:	e8 94 d0 fe ff       	call   c000e8f8 <int_handler>
c0021864:	81 c4 04 00 00 00    	add    esp,0x4
c002186a:	0f a9                	pop    gs
c002186c:	0f a1                	pop    fs
c002186e:	07                   	pop    es
c002186f:	1f                   	pop    ds
c0021870:	e8 62 fb fe ff       	call   c00113d7 <KiCheckSignalZ>
c0021875:	85 c0                	test   eax,eax
c0021877:	75 08                	jne    c0021881 <doSignals>
c0021879:	61                   	popa   
c002187a:	81 c4 08 00 00 00    	add    esp,0x8
c0021880:	cf                   	iret   

c0021881 <doSignals>:
c0021881:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c0021886:	61                   	popa   
c0021887:	53                   	push   ebx
c0021888:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002188e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0021891:	5b                   	pop    ebx
c0021892:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c0021897:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002189a:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002189d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00218a0:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c00218a3:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c00218a6:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c00218a9:	81 c4 08 00 00 00    	add    esp,0x8
c00218af:	5e                   	pop    esi
c00218b0:	5b                   	pop    ebx
c00218b1:	59                   	pop    ecx
c00218b2:	5a                   	pop    edx
c00218b3:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c00218b6:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c00218b9:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00218bc:	52                   	push   edx
c00218bd:	51                   	push   ecx
c00218be:	53                   	push   ebx
c00218bf:	56                   	push   esi
c00218c0:	81 ec 08 00 00 00    	sub    esp,0x8
c00218c6:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00218c9:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00218cc:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c00218cf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00218d2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00218d5:	60                   	pusha  
c00218d6:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c00218dc:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c00218df:	89 e3                	mov    ebx,esp
c00218e1:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c00218e4:	52                   	push   edx
c00218e5:	68 05 19 02 c0       	push   0xc0021905
c00218ea:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c00218ed:	89 dc                	mov    esp,ebx
c00218ef:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00218f2:	68 23 00 00 00       	push   0x23
c00218f7:	51                   	push   ecx
c00218f8:	68 02 02 00 00       	push   0x202
c00218fd:	68 1b 00 00 00       	push   0x1b
c0021902:	ff 36                	push   DWORD PTR [esi]
c0021904:	cf                   	iret   

c0021905 <finishSignal>:
c0021905:	cd 0f                	int    0xf

c0021907 <finishSignal2>:
c0021907:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002190d:	e8 51 fb fe ff       	call   c0011463 <KiFinishSignalZ>
c0021912:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c0021918:	68 23 00 00 00       	push   0x23
c002191d:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0021920:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0021923:	68 1b 00 00 00       	push   0x1b
c0021928:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c002192b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002192e:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0021931:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0021934:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0021937:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c002193a:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c002193d:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c0021940:	cf                   	iret   
c0021941:	90                   	nop
c0021942:	90                   	nop
c0021943:	90                   	nop

c0021944 <irq16>:
c0021944:	fa                   	cli    
c0021945:	6a 00                	push   0x0
c0021947:	6a 30                	push   0x30
c0021949:	e9 f8 fe ff ff       	jmp    c0021846 <int_common_stub>

c002194e <irq17>:
c002194e:	fa                   	cli    
c002194f:	6a 00                	push   0x0
c0021951:	6a 31                	push   0x31
c0021953:	e9 ee fe ff ff       	jmp    c0021846 <int_common_stub>

c0021958 <irq18>:
c0021958:	fa                   	cli    
c0021959:	6a 00                	push   0x0
c002195b:	6a 32                	push   0x32
c002195d:	e9 e4 fe ff ff       	jmp    c0021846 <int_common_stub>

c0021962 <irq19>:
c0021962:	fa                   	cli    
c0021963:	6a 00                	push   0x0
c0021965:	6a 33                	push   0x33
c0021967:	e9 da fe ff ff       	jmp    c0021846 <int_common_stub>

c002196c <irq20>:
c002196c:	fa                   	cli    
c002196d:	6a 00                	push   0x0
c002196f:	6a 34                	push   0x34
c0021971:	e9 d0 fe ff ff       	jmp    c0021846 <int_common_stub>

c0021976 <irq21>:
c0021976:	fa                   	cli    
c0021977:	6a 00                	push   0x0
c0021979:	6a 35                	push   0x35
c002197b:	e9 c6 fe ff ff       	jmp    c0021846 <int_common_stub>

c0021980 <irq22>:
c0021980:	fa                   	cli    
c0021981:	6a 00                	push   0x0
c0021983:	6a 36                	push   0x36
c0021985:	e9 bc fe ff ff       	jmp    c0021846 <int_common_stub>

c002198a <irq23>:
c002198a:	fa                   	cli    
c002198b:	6a 00                	push   0x0
c002198d:	6a 37                	push   0x37
c002198f:	e9 b2 fe ff ff       	jmp    c0021846 <int_common_stub>
c0021994:	66 90                	xchg   ax,ax
c0021996:	66 90                	xchg   ax,ax
c0021998:	66 90                	xchg   ax,ax
c002199a:	66 90                	xchg   ax,ax
c002199c:	66 90                	xchg   ax,ax
c002199e:	66 90                	xchg   ax,ax

c00219a0 <i386GetRDRAND>:
c00219a0:	b9 64 00 00 00       	mov    ecx,0x64

c00219a5 <retry>:
c00219a5:	0f c7 f0             	rdrand eax
c00219a8:	72 05                	jb     c00219af <retry.done>
c00219aa:	e2 f9                	loop   c00219a5 <retry>

c00219ac <retry.fail>:
c00219ac:	31 c0                	xor    eax,eax
c00219ae:	c3                   	ret    

c00219af <retry.done>:
c00219af:	c3                   	ret    

c00219b0 <sseDetect>:
c00219b0:	b8 01 00 00 00       	mov    eax,0x1
c00219b5:	0f a2                	cpuid  
c00219b7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00219bd:	74 06                	je     c00219c5 <sseDetect.noSSE>
c00219bf:	b8 01 00 00 00       	mov    eax,0x1
c00219c4:	c3                   	ret    

c00219c5 <sseDetect.noSSE>:
c00219c5:	31 c0                	xor    eax,eax
c00219c7:	c3                   	ret    

c00219c8 <sseSave>:
c00219c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219cc:	0f ae 00             	fxsave [eax]
c00219cf:	c3                   	ret    

c00219d0 <sseLoad>:
c00219d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219d4:	0f ae 08             	fxrstor [eax]
c00219d7:	c3                   	ret    

c00219d8 <sseInit>:
c00219d8:	e8 48 00 00 00       	call   c0021a25 <x87Init>
c00219dd:	0f 20 e0             	mov    eax,cr4
c00219e0:	66 0d 00 06          	or     ax,0x600
c00219e4:	0f 22 e0             	mov    cr4,eax
c00219e7:	c3                   	ret    

c00219e8 <sseClose>:
c00219e8:	c3                   	ret    
c00219e9:	66 90                	xchg   ax,ax
c00219eb:	66 90                	xchg   ax,ax
c00219ed:	66 90                	xchg   ax,ax
c00219ef:	90                   	nop

c00219f0 <value_37F>:
c00219f0:	7f 03                	jg     c00219f5 <value_37A+0x1>

c00219f2 <value_37E>:
c00219f2:	7e 03                	jle    c00219f7 <x87Detect+0x1>

c00219f4 <value_37A>:
c00219f4:	7a 03                	jp     c00219f9 <x87Detect+0x3>

c00219f6 <x87Detect>:
c00219f6:	53                   	push   ebx
c00219f7:	51                   	push   ecx
c00219f8:	52                   	push   edx
c00219f9:	b8 01 00 00 00       	mov    eax,0x1
c00219fe:	0f a2                	cpuid  
c0021a00:	f7 c2 01 00 00 00    	test   edx,0x1
c0021a06:	74 06                	je     c0021a0e <x87Detect.nox87>
c0021a08:	b8 01 00 00 00       	mov    eax,0x1
c0021a0d:	c3                   	ret    

c0021a0e <x87Detect.nox87>:
c0021a0e:	b8 00 00 00 00       	mov    eax,0x0
c0021a13:	5a                   	pop    edx
c0021a14:	59                   	pop    ecx
c0021a15:	5b                   	pop    ebx
c0021a16:	c3                   	ret    

c0021a17 <x87Save>:
c0021a17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a1b:	dd 30                	fnsave [eax]
c0021a1d:	c3                   	ret    

c0021a1e <x87Load>:
c0021a1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a22:	dd 20                	frstor [eax]
c0021a24:	c3                   	ret    

c0021a25 <x87Init>:
c0021a25:	0f 20 c0             	mov    eax,cr0
c0021a28:	66 25 fb ff          	and    ax,0xfffb
c0021a2c:	66 0d 22 00          	or     ax,0x22
c0021a30:	0f 22 c0             	mov    cr0,eax
c0021a33:	db e3                	fninit 
c0021a35:	0f 06                	clts   
c0021a37:	d9 2d f4 19 02 c0    	fldcw  WORD PTR ds:0xc00219f4
c0021a3d:	c3                   	ret    

c0021a3e <x87Close>:
c0021a3e:	c3                   	ret    
c0021a3f:	90                   	nop

c0021a40 <__do_global_ctors_aux>:
c0021a40:	a1 f4 29 02 c0       	mov    eax,ds:0xc00229f4
c0021a45:	83 f8 ff             	cmp    eax,0xffffffff
c0021a48:	74 1a                	je     c0021a64 <__do_global_ctors_aux+0x24>
c0021a4a:	55                   	push   ebp
c0021a4b:	89 e5                	mov    ebp,esp
c0021a4d:	53                   	push   ebx
c0021a4e:	52                   	push   edx
c0021a4f:	bb f4 29 02 c0       	mov    ebx,0xc00229f4
c0021a54:	ff d0                	call   eax
c0021a56:	83 eb 04             	sub    ebx,0x4
c0021a59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021a5b:	83 f8 ff             	cmp    eax,0xffffffff
c0021a5e:	75 f4                	jne    c0021a54 <__do_global_ctors_aux+0x14>
c0021a60:	58                   	pop    eax
c0021a61:	5b                   	pop    ebx
c0021a62:	5d                   	pop    ebp
c0021a63:	c3                   	ret    
c0021a64:	c3                   	ret    
c0021a65:	66 90                	xchg   ax,ax
c0021a67:	90                   	nop

c0021a68 <__divdi3>:
c0021a68:	55                   	push   ebp
c0021a69:	57                   	push   edi
c0021a6a:	56                   	push   esi
c0021a6b:	53                   	push   ebx
c0021a6c:	83 ec 1c             	sub    esp,0x1c
c0021a6f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0021a73:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021a77:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021a7a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0021a7e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021a82:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021a86:	85 db                	test   ebx,ebx
c0021a88:	0f 88 8e 00 00 00    	js     c0021b1c <__divdi3+0xb4>
c0021a8e:	89 dd                	mov    ebp,ebx
c0021a90:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021a98:	89 d3                	mov    ebx,edx
c0021a9a:	85 d2                	test   edx,edx
c0021a9c:	79 0d                	jns    c0021aab <__divdi3+0x43>
c0021a9e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0021aa2:	f7 d8                	neg    eax
c0021aa4:	83 d2 00             	adc    edx,0x0
c0021aa7:	f7 da                	neg    edx
c0021aa9:	89 d3                	mov    ebx,edx
c0021aab:	89 c7                	mov    edi,eax
c0021aad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021ab0:	85 db                	test   ebx,ebx
c0021ab2:	75 48                	jne    c0021afc <__divdi3+0x94>
c0021ab4:	39 ef                	cmp    edi,ebp
c0021ab6:	76 24                	jbe    c0021adc <__divdi3+0x74>
c0021ab8:	89 ea                	mov    edx,ebp
c0021aba:	f7 f7                	div    edi
c0021abc:	89 c1                	mov    ecx,eax
c0021abe:	31 f6                	xor    esi,esi
c0021ac0:	89 c8                	mov    eax,ecx
c0021ac2:	89 f2                	mov    edx,esi
c0021ac4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021ac8:	85 c9                	test   ecx,ecx
c0021aca:	74 07                	je     c0021ad3 <__divdi3+0x6b>
c0021acc:	f7 d8                	neg    eax
c0021ace:	83 d2 00             	adc    edx,0x0
c0021ad1:	f7 da                	neg    edx
c0021ad3:	83 c4 1c             	add    esp,0x1c
c0021ad6:	5b                   	pop    ebx
c0021ad7:	5e                   	pop    esi
c0021ad8:	5f                   	pop    edi
c0021ad9:	5d                   	pop    ebp
c0021ada:	c3                   	ret    
c0021adb:	90                   	nop
c0021adc:	85 ff                	test   edi,edi
c0021ade:	75 0b                	jne    c0021aeb <__divdi3+0x83>
c0021ae0:	b8 01 00 00 00       	mov    eax,0x1
c0021ae5:	31 d2                	xor    edx,edx
c0021ae7:	f7 f3                	div    ebx
c0021ae9:	89 c7                	mov    edi,eax
c0021aeb:	31 d2                	xor    edx,edx
c0021aed:	89 e8                	mov    eax,ebp
c0021aef:	f7 f7                	div    edi
c0021af1:	89 c6                	mov    esi,eax
c0021af3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021af6:	f7 f7                	div    edi
c0021af8:	89 c1                	mov    ecx,eax
c0021afa:	eb c4                	jmp    c0021ac0 <__divdi3+0x58>
c0021afc:	39 eb                	cmp    ebx,ebp
c0021afe:	77 3c                	ja     c0021b3c <__divdi3+0xd4>
c0021b00:	0f bd f3             	bsr    esi,ebx
c0021b03:	83 f6 1f             	xor    esi,0x1f
c0021b06:	75 40                	jne    c0021b48 <__divdi3+0xe0>
c0021b08:	39 eb                	cmp    ebx,ebp
c0021b0a:	72 09                	jb     c0021b15 <__divdi3+0xad>
c0021b0c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021b0f:	0f 87 97 00 00 00    	ja     c0021bac <__divdi3+0x144>
c0021b15:	b9 01 00 00 00       	mov    ecx,0x1
c0021b1a:	eb a4                	jmp    c0021ac0 <__divdi3+0x58>
c0021b1c:	f7 d9                	neg    ecx
c0021b1e:	83 d3 00             	adc    ebx,0x0
c0021b21:	f7 db                	neg    ebx
c0021b23:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021b26:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0021b2a:	89 dd                	mov    ebp,ebx
c0021b2c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0021b34:	e9 5f ff ff ff       	jmp    c0021a98 <__divdi3+0x30>
c0021b39:	8d 76 00             	lea    esi,[esi+0x0]
c0021b3c:	31 f6                	xor    esi,esi
c0021b3e:	31 c9                	xor    ecx,ecx
c0021b40:	e9 7b ff ff ff       	jmp    c0021ac0 <__divdi3+0x58>
c0021b45:	8d 76 00             	lea    esi,[esi+0x0]
c0021b48:	b8 20 00 00 00       	mov    eax,0x20
c0021b4d:	29 f0                	sub    eax,esi
c0021b4f:	89 f1                	mov    ecx,esi
c0021b51:	d3 e3                	shl    ebx,cl
c0021b53:	89 fa                	mov    edx,edi
c0021b55:	88 c1                	mov    cl,al
c0021b57:	d3 ea                	shr    edx,cl
c0021b59:	09 da                	or     edx,ebx
c0021b5b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021b5f:	89 f1                	mov    ecx,esi
c0021b61:	d3 e7                	shl    edi,cl
c0021b63:	89 eb                	mov    ebx,ebp
c0021b65:	88 c1                	mov    cl,al
c0021b67:	d3 eb                	shr    ebx,cl
c0021b69:	89 f1                	mov    ecx,esi
c0021b6b:	d3 e5                	shl    ebp,cl
c0021b6d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0021b70:	88 c1                	mov    cl,al
c0021b72:	d3 ea                	shr    edx,cl
c0021b74:	09 d5                	or     ebp,edx
c0021b76:	89 e8                	mov    eax,ebp
c0021b78:	89 da                	mov    edx,ebx
c0021b7a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0021b7e:	89 d3                	mov    ebx,edx
c0021b80:	89 c5                	mov    ebp,eax
c0021b82:	f7 e7                	mul    edi
c0021b84:	39 d3                	cmp    ebx,edx
c0021b86:	72 18                	jb     c0021ba0 <__divdi3+0x138>
c0021b88:	74 0a                	je     c0021b94 <__divdi3+0x12c>
c0021b8a:	89 e9                	mov    ecx,ebp
c0021b8c:	31 f6                	xor    esi,esi
c0021b8e:	e9 2d ff ff ff       	jmp    c0021ac0 <__divdi3+0x58>
c0021b93:	90                   	nop
c0021b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0021b97:	89 f1                	mov    ecx,esi
c0021b99:	d3 e7                	shl    edi,cl
c0021b9b:	39 c7                	cmp    edi,eax
c0021b9d:	73 eb                	jae    c0021b8a <__divdi3+0x122>
c0021b9f:	90                   	nop
c0021ba0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0021ba3:	31 f6                	xor    esi,esi
c0021ba5:	e9 16 ff ff ff       	jmp    c0021ac0 <__divdi3+0x58>
c0021baa:	66 90                	xchg   ax,ax
c0021bac:	31 c9                	xor    ecx,ecx
c0021bae:	e9 0d ff ff ff       	jmp    c0021ac0 <__divdi3+0x58>
c0021bb3:	90                   	nop

c0021bb4 <__moddi3>:
c0021bb4:	55                   	push   ebp
c0021bb5:	57                   	push   edi
c0021bb6:	56                   	push   esi
c0021bb7:	53                   	push   ebx
c0021bb8:	83 ec 2c             	sub    esp,0x2c
c0021bbb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0021bbf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0021bc3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021bc7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0021bcb:	85 db                	test   ebx,ebx
c0021bcd:	0f 88 85 00 00 00    	js     c0021c58 <__moddi3+0xa4>
c0021bd3:	89 de                	mov    esi,ebx
c0021bd5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021bdd:	89 d7                	mov    edi,edx
c0021bdf:	85 d2                	test   edx,edx
c0021be1:	79 09                	jns    c0021bec <__moddi3+0x38>
c0021be3:	f7 d8                	neg    eax
c0021be5:	83 d2 00             	adc    edx,0x0
c0021be8:	f7 da                	neg    edx
c0021bea:	89 d7                	mov    edi,edx
c0021bec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021bf0:	89 cd                	mov    ebp,ecx
c0021bf2:	85 ff                	test   edi,edi
c0021bf4:	75 52                	jne    c0021c48 <__moddi3+0x94>
c0021bf6:	89 c3                	mov    ebx,eax
c0021bf8:	39 f0                	cmp    eax,esi
c0021bfa:	76 24                	jbe    c0021c20 <__moddi3+0x6c>
c0021bfc:	89 c8                	mov    eax,ecx
c0021bfe:	89 f2                	mov    edx,esi
c0021c00:	f7 f3                	div    ebx
c0021c02:	89 d6                	mov    esi,edx
c0021c04:	89 f0                	mov    eax,esi
c0021c06:	31 d2                	xor    edx,edx
c0021c08:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021c0c:	85 c9                	test   ecx,ecx
c0021c0e:	74 07                	je     c0021c17 <__moddi3+0x63>
c0021c10:	f7 d8                	neg    eax
c0021c12:	83 d2 00             	adc    edx,0x0
c0021c15:	f7 da                	neg    edx
c0021c17:	83 c4 2c             	add    esp,0x2c
c0021c1a:	5b                   	pop    ebx
c0021c1b:	5e                   	pop    esi
c0021c1c:	5f                   	pop    edi
c0021c1d:	5d                   	pop    ebp
c0021c1e:	c3                   	ret    
c0021c1f:	90                   	nop
c0021c20:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021c24:	85 db                	test   ebx,ebx
c0021c26:	75 0d                	jne    c0021c35 <__moddi3+0x81>
c0021c28:	b8 01 00 00 00       	mov    eax,0x1
c0021c2d:	31 d2                	xor    edx,edx
c0021c2f:	f7 f7                	div    edi
c0021c31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021c35:	89 f0                	mov    eax,esi
c0021c37:	31 d2                	xor    edx,edx
c0021c39:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021c3d:	f7 f7                	div    edi
c0021c3f:	89 e8                	mov    eax,ebp
c0021c41:	f7 f7                	div    edi
c0021c43:	89 d6                	mov    esi,edx
c0021c45:	eb bd                	jmp    c0021c04 <__moddi3+0x50>
c0021c47:	90                   	nop
c0021c48:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021c4c:	39 f7                	cmp    edi,esi
c0021c4e:	76 20                	jbe    c0021c70 <__moddi3+0xbc>
c0021c50:	89 c8                	mov    eax,ecx
c0021c52:	89 f2                	mov    edx,esi
c0021c54:	eb b2                	jmp    c0021c08 <__moddi3+0x54>
c0021c56:	66 90                	xchg   ax,ax
c0021c58:	f7 d9                	neg    ecx
c0021c5a:	83 d3 00             	adc    ebx,0x0
c0021c5d:	f7 db                	neg    ebx
c0021c5f:	89 de                	mov    esi,ebx
c0021c61:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0021c69:	e9 6f ff ff ff       	jmp    c0021bdd <__moddi3+0x29>
c0021c6e:	66 90                	xchg   ax,ax
c0021c70:	0f bd c7             	bsr    eax,edi
c0021c73:	83 f0 1f             	xor    eax,0x1f
c0021c76:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021c7a:	75 24                	jne    c0021ca0 <__moddi3+0xec>
c0021c7c:	39 f7                	cmp    edi,esi
c0021c7e:	72 06                	jb     c0021c86 <__moddi3+0xd2>
c0021c80:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0021c84:	77 0c                	ja     c0021c92 <__moddi3+0xde>
c0021c86:	89 e9                	mov    ecx,ebp
c0021c88:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0021c8c:	19 fe                	sbb    esi,edi
c0021c8e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021c92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021c96:	89 f2                	mov    edx,esi
c0021c98:	e9 6b ff ff ff       	jmp    c0021c08 <__moddi3+0x54>
c0021c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0021ca0:	b8 20 00 00 00       	mov    eax,0x20
c0021ca5:	89 c2                	mov    edx,eax
c0021ca7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0021cab:	29 da                	sub    edx,ebx
c0021cad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0021cb1:	88 d9                	mov    cl,bl
c0021cb3:	d3 e7                	shl    edi,cl
c0021cb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021cb9:	88 d1                	mov    cl,dl
c0021cbb:	d3 e8                	shr    eax,cl
c0021cbd:	09 c7                	or     edi,eax
c0021cbf:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021cc3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021cc7:	89 d8                	mov    eax,ebx
c0021cc9:	88 d9                	mov    cl,bl
c0021ccb:	d3 e7                	shl    edi,cl
c0021ccd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021cd1:	89 f3                	mov    ebx,esi
c0021cd3:	88 d1                	mov    cl,dl
c0021cd5:	d3 eb                	shr    ebx,cl
c0021cd7:	89 c7                	mov    edi,eax
c0021cd9:	88 c1                	mov    cl,al
c0021cdb:	d3 e6                	shl    esi,cl
c0021cdd:	89 e8                	mov    eax,ebp
c0021cdf:	88 d1                	mov    cl,dl
c0021ce1:	d3 e8                	shr    eax,cl
c0021ce3:	09 f0                	or     eax,esi
c0021ce5:	89 f9                	mov    ecx,edi
c0021ce7:	d3 e5                	shl    ebp,cl
c0021ce9:	89 da                	mov    edx,ebx
c0021ceb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0021cef:	89 d3                	mov    ebx,edx
c0021cf1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021cf5:	89 c6                	mov    esi,eax
c0021cf7:	89 d1                	mov    ecx,edx
c0021cf9:	39 d3                	cmp    ebx,edx
c0021cfb:	72 27                	jb     c0021d24 <__moddi3+0x170>
c0021cfd:	74 21                	je     c0021d20 <__moddi3+0x16c>
c0021cff:	29 f5                	sub    ebp,esi
c0021d01:	19 cb                	sbb    ebx,ecx
c0021d03:	89 de                	mov    esi,ebx
c0021d05:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0021d09:	d3 e6                	shl    esi,cl
c0021d0b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0021d0f:	89 f9                	mov    ecx,edi
c0021d11:	d3 ed                	shr    ebp,cl
c0021d13:	09 ee                	or     esi,ebp
c0021d15:	89 f0                	mov    eax,esi
c0021d17:	d3 eb                	shr    ebx,cl
c0021d19:	89 da                	mov    edx,ebx
c0021d1b:	e9 e8 fe ff ff       	jmp    c0021c08 <__moddi3+0x54>
c0021d20:	39 c5                	cmp    ebp,eax
c0021d22:	73 db                	jae    c0021cff <__moddi3+0x14b>
c0021d24:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021d28:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0021d2c:	89 d1                	mov    ecx,edx
c0021d2e:	89 c6                	mov    esi,eax
c0021d30:	eb cd                	jmp    c0021cff <__moddi3+0x14b>
c0021d32:	66 90                	xchg   ax,ax

c0021d34 <__udivdi3>:
c0021d34:	55                   	push   ebp
c0021d35:	57                   	push   edi
c0021d36:	56                   	push   esi
c0021d37:	53                   	push   ebx
c0021d38:	83 ec 1c             	sub    esp,0x1c
c0021d3b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021d3f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021d43:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021d47:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021d4b:	85 d2                	test   edx,edx
c0021d4d:	75 41                	jne    c0021d90 <__udivdi3+0x5c>
c0021d4f:	39 f7                	cmp    edi,esi
c0021d51:	76 15                	jbe    c0021d68 <__udivdi3+0x34>
c0021d53:	89 e8                	mov    eax,ebp
c0021d55:	89 f2                	mov    edx,esi
c0021d57:	f7 f7                	div    edi
c0021d59:	31 db                	xor    ebx,ebx
c0021d5b:	89 da                	mov    edx,ebx
c0021d5d:	83 c4 1c             	add    esp,0x1c
c0021d60:	5b                   	pop    ebx
c0021d61:	5e                   	pop    esi
c0021d62:	5f                   	pop    edi
c0021d63:	5d                   	pop    ebp
c0021d64:	c3                   	ret    
c0021d65:	8d 76 00             	lea    esi,[esi+0x0]
c0021d68:	89 f9                	mov    ecx,edi
c0021d6a:	85 ff                	test   edi,edi
c0021d6c:	75 0b                	jne    c0021d79 <__udivdi3+0x45>
c0021d6e:	b8 01 00 00 00       	mov    eax,0x1
c0021d73:	31 d2                	xor    edx,edx
c0021d75:	f7 f7                	div    edi
c0021d77:	89 c1                	mov    ecx,eax
c0021d79:	31 d2                	xor    edx,edx
c0021d7b:	89 f0                	mov    eax,esi
c0021d7d:	f7 f1                	div    ecx
c0021d7f:	89 c3                	mov    ebx,eax
c0021d81:	89 e8                	mov    eax,ebp
c0021d83:	f7 f1                	div    ecx
c0021d85:	89 da                	mov    edx,ebx
c0021d87:	83 c4 1c             	add    esp,0x1c
c0021d8a:	5b                   	pop    ebx
c0021d8b:	5e                   	pop    esi
c0021d8c:	5f                   	pop    edi
c0021d8d:	5d                   	pop    ebp
c0021d8e:	c3                   	ret    
c0021d8f:	90                   	nop
c0021d90:	39 f2                	cmp    edx,esi
c0021d92:	77 1c                	ja     c0021db0 <__udivdi3+0x7c>
c0021d94:	0f bd da             	bsr    ebx,edx
c0021d97:	83 f3 1f             	xor    ebx,0x1f
c0021d9a:	75 24                	jne    c0021dc0 <__udivdi3+0x8c>
c0021d9c:	39 f2                	cmp    edx,esi
c0021d9e:	72 08                	jb     c0021da8 <__udivdi3+0x74>
c0021da0:	39 ef                	cmp    edi,ebp
c0021da2:	0f 87 84 00 00 00    	ja     c0021e2c <__udivdi3+0xf8>
c0021da8:	b8 01 00 00 00       	mov    eax,0x1
c0021dad:	eb ac                	jmp    c0021d5b <__udivdi3+0x27>
c0021daf:	90                   	nop
c0021db0:	31 db                	xor    ebx,ebx
c0021db2:	31 c0                	xor    eax,eax
c0021db4:	89 da                	mov    edx,ebx
c0021db6:	83 c4 1c             	add    esp,0x1c
c0021db9:	5b                   	pop    ebx
c0021dba:	5e                   	pop    esi
c0021dbb:	5f                   	pop    edi
c0021dbc:	5d                   	pop    ebp
c0021dbd:	c3                   	ret    
c0021dbe:	66 90                	xchg   ax,ax
c0021dc0:	b8 20 00 00 00       	mov    eax,0x20
c0021dc5:	29 d8                	sub    eax,ebx
c0021dc7:	88 d9                	mov    cl,bl
c0021dc9:	d3 e2                	shl    edx,cl
c0021dcb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021dcf:	89 fa                	mov    edx,edi
c0021dd1:	88 c1                	mov    cl,al
c0021dd3:	d3 ea                	shr    edx,cl
c0021dd5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021dd9:	09 d1                	or     ecx,edx
c0021ddb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021ddf:	88 d9                	mov    cl,bl
c0021de1:	d3 e7                	shl    edi,cl
c0021de3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021de7:	89 f7                	mov    edi,esi
c0021de9:	88 c1                	mov    cl,al
c0021deb:	d3 ef                	shr    edi,cl
c0021ded:	88 d9                	mov    cl,bl
c0021def:	d3 e6                	shl    esi,cl
c0021df1:	89 ea                	mov    edx,ebp
c0021df3:	88 c1                	mov    cl,al
c0021df5:	d3 ea                	shr    edx,cl
c0021df7:	09 d6                	or     esi,edx
c0021df9:	89 f0                	mov    eax,esi
c0021dfb:	89 fa                	mov    edx,edi
c0021dfd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021e01:	89 d7                	mov    edi,edx
c0021e03:	89 c6                	mov    esi,eax
c0021e05:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021e09:	39 d7                	cmp    edi,edx
c0021e0b:	72 13                	jb     c0021e20 <__udivdi3+0xec>
c0021e0d:	74 09                	je     c0021e18 <__udivdi3+0xe4>
c0021e0f:	89 f0                	mov    eax,esi
c0021e11:	31 db                	xor    ebx,ebx
c0021e13:	e9 43 ff ff ff       	jmp    c0021d5b <__udivdi3+0x27>
c0021e18:	88 d9                	mov    cl,bl
c0021e1a:	d3 e5                	shl    ebp,cl
c0021e1c:	39 c5                	cmp    ebp,eax
c0021e1e:	73 ef                	jae    c0021e0f <__udivdi3+0xdb>
c0021e20:	8d 46 ff             	lea    eax,[esi-0x1]
c0021e23:	31 db                	xor    ebx,ebx
c0021e25:	e9 31 ff ff ff       	jmp    c0021d5b <__udivdi3+0x27>
c0021e2a:	66 90                	xchg   ax,ax
c0021e2c:	31 c0                	xor    eax,eax
c0021e2e:	e9 28 ff ff ff       	jmp    c0021d5b <__udivdi3+0x27>
c0021e33:	90                   	nop

c0021e34 <__umoddi3>:
c0021e34:	55                   	push   ebp
c0021e35:	57                   	push   edi
c0021e36:	56                   	push   esi
c0021e37:	53                   	push   ebx
c0021e38:	83 ec 1c             	sub    esp,0x1c
c0021e3b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021e3f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021e43:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021e47:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021e4b:	89 da                	mov    edx,ebx
c0021e4d:	85 c0                	test   eax,eax
c0021e4f:	75 37                	jne    c0021e88 <__umoddi3+0x54>
c0021e51:	39 df                	cmp    edi,ebx
c0021e53:	76 13                	jbe    c0021e68 <__umoddi3+0x34>
c0021e55:	89 f0                	mov    eax,esi
c0021e57:	f7 f7                	div    edi
c0021e59:	89 d0                	mov    eax,edx
c0021e5b:	31 d2                	xor    edx,edx
c0021e5d:	83 c4 1c             	add    esp,0x1c
c0021e60:	5b                   	pop    ebx
c0021e61:	5e                   	pop    esi
c0021e62:	5f                   	pop    edi
c0021e63:	5d                   	pop    ebp
c0021e64:	c3                   	ret    
c0021e65:	8d 76 00             	lea    esi,[esi+0x0]
c0021e68:	89 fd                	mov    ebp,edi
c0021e6a:	85 ff                	test   edi,edi
c0021e6c:	75 0b                	jne    c0021e79 <__umoddi3+0x45>
c0021e6e:	b8 01 00 00 00       	mov    eax,0x1
c0021e73:	31 d2                	xor    edx,edx
c0021e75:	f7 f7                	div    edi
c0021e77:	89 c5                	mov    ebp,eax
c0021e79:	89 d8                	mov    eax,ebx
c0021e7b:	31 d2                	xor    edx,edx
c0021e7d:	f7 f5                	div    ebp
c0021e7f:	89 f0                	mov    eax,esi
c0021e81:	f7 f5                	div    ebp
c0021e83:	89 d0                	mov    eax,edx
c0021e85:	eb d4                	jmp    c0021e5b <__umoddi3+0x27>
c0021e87:	90                   	nop
c0021e88:	89 f1                	mov    ecx,esi
c0021e8a:	39 d8                	cmp    eax,ebx
c0021e8c:	76 0a                	jbe    c0021e98 <__umoddi3+0x64>
c0021e8e:	89 f0                	mov    eax,esi
c0021e90:	83 c4 1c             	add    esp,0x1c
c0021e93:	5b                   	pop    ebx
c0021e94:	5e                   	pop    esi
c0021e95:	5f                   	pop    edi
c0021e96:	5d                   	pop    ebp
c0021e97:	c3                   	ret    
c0021e98:	0f bd e8             	bsr    ebp,eax
c0021e9b:	83 f5 1f             	xor    ebp,0x1f
c0021e9e:	75 1c                	jne    c0021ebc <__umoddi3+0x88>
c0021ea0:	39 d8                	cmp    eax,ebx
c0021ea2:	72 04                	jb     c0021ea8 <__umoddi3+0x74>
c0021ea4:	39 f7                	cmp    edi,esi
c0021ea6:	77 08                	ja     c0021eb0 <__umoddi3+0x7c>
c0021ea8:	89 da                	mov    edx,ebx
c0021eaa:	29 fe                	sub    esi,edi
c0021eac:	19 c2                	sbb    edx,eax
c0021eae:	89 f1                	mov    ecx,esi
c0021eb0:	89 c8                	mov    eax,ecx
c0021eb2:	83 c4 1c             	add    esp,0x1c
c0021eb5:	5b                   	pop    ebx
c0021eb6:	5e                   	pop    esi
c0021eb7:	5f                   	pop    edi
c0021eb8:	5d                   	pop    ebp
c0021eb9:	c3                   	ret    
c0021eba:	66 90                	xchg   ax,ax
c0021ebc:	ba 20 00 00 00       	mov    edx,0x20
c0021ec1:	29 ea                	sub    edx,ebp
c0021ec3:	89 e9                	mov    ecx,ebp
c0021ec5:	d3 e0                	shl    eax,cl
c0021ec7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021ecb:	89 f8                	mov    eax,edi
c0021ecd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021ed1:	88 d1                	mov    cl,dl
c0021ed3:	d3 e8                	shr    eax,cl
c0021ed5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021ed9:	09 c1                	or     ecx,eax
c0021edb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021edf:	89 e9                	mov    ecx,ebp
c0021ee1:	d3 e7                	shl    edi,cl
c0021ee3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021ee7:	89 d8                	mov    eax,ebx
c0021ee9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021eed:	88 d1                	mov    cl,dl
c0021eef:	d3 e8                	shr    eax,cl
c0021ef1:	89 c7                	mov    edi,eax
c0021ef3:	89 e9                	mov    ecx,ebp
c0021ef5:	d3 e3                	shl    ebx,cl
c0021ef7:	89 f0                	mov    eax,esi
c0021ef9:	88 d1                	mov    cl,dl
c0021efb:	d3 e8                	shr    eax,cl
c0021efd:	09 d8                	or     eax,ebx
c0021eff:	89 e9                	mov    ecx,ebp
c0021f01:	d3 e6                	shl    esi,cl
c0021f03:	89 f3                	mov    ebx,esi
c0021f05:	89 fa                	mov    edx,edi
c0021f07:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021f0b:	89 d1                	mov    ecx,edx
c0021f0d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021f11:	89 c6                	mov    esi,eax
c0021f13:	89 d7                	mov    edi,edx
c0021f15:	39 d1                	cmp    ecx,edx
c0021f17:	72 27                	jb     c0021f40 <__umoddi3+0x10c>
c0021f19:	74 21                	je     c0021f3c <__umoddi3+0x108>
c0021f1b:	89 ca                	mov    edx,ecx
c0021f1d:	29 f3                	sub    ebx,esi
c0021f1f:	19 fa                	sbb    edx,edi
c0021f21:	89 d0                	mov    eax,edx
c0021f23:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0021f27:	d3 e0                	shl    eax,cl
c0021f29:	89 e9                	mov    ecx,ebp
c0021f2b:	d3 eb                	shr    ebx,cl
c0021f2d:	09 d8                	or     eax,ebx
c0021f2f:	d3 ea                	shr    edx,cl
c0021f31:	83 c4 1c             	add    esp,0x1c
c0021f34:	5b                   	pop    ebx
c0021f35:	5e                   	pop    esi
c0021f36:	5f                   	pop    edi
c0021f37:	5d                   	pop    ebp
c0021f38:	c3                   	ret    
c0021f39:	8d 76 00             	lea    esi,[esi+0x0]
c0021f3c:	39 c3                	cmp    ebx,eax
c0021f3e:	73 db                	jae    c0021f1b <__umoddi3+0xe7>
c0021f40:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021f44:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0021f48:	89 d7                	mov    edi,edx
c0021f4a:	89 c6                	mov    esi,eax
c0021f4c:	eb cd                	jmp    c0021f1b <__umoddi3+0xe7>

Disassembly of section .init:

c0021f4e <_init>:
c0021f4e:	55                   	push   ebp
c0021f4f:	89 e5                	mov    ebp,esp
c0021f51:	e8 9e e1 fd ff       	call   c00000f4 <frame_dummy>
c0021f56:	e8 e5 fa ff ff       	call   c0021a40 <__do_global_ctors_aux>
c0021f5b:	5d                   	pop    ebp
c0021f5c:	c3                   	ret    

Disassembly of section .fini:

c0021f5d <_fini>:
c0021f5d:	55                   	push   ebp
c0021f5e:	89 e5                	mov    ebp,esp
c0021f60:	e8 1f e1 fd ff       	call   c0000084 <__do_global_dtors_aux>
c0021f65:	5d                   	pop    ebp
c0021f66:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0021f68 <DriverlessDevice::~DriverlessDevice()>:
c0021f68:	ba fc 39 02 c0       	mov    edx,0xc00239fc
c0021f6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f71:	89 10                	mov    DWORD PTR [eax],edx
c0021f73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f77:	50                   	push   eax
c0021f78:	e8 d9 79 fe ff       	call   c0009956 <Device::~Device()>
c0021f7d:	83 c4 04             	add    esp,0x4
c0021f80:	90                   	nop
c0021f81:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0021f82 <DriverlessDevice::~DriverlessDevice()>:
c0021f82:	83 ec 0c             	sub    esp,0xc
c0021f85:	83 ec 0c             	sub    esp,0xc
c0021f88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f8c:	e8 d7 ff ff ff       	call   c0021f68 <DriverlessDevice::~DriverlessDevice()>
c0021f91:	83 c4 10             	add    esp,0x10
c0021f94:	83 ec 08             	sub    esp,0x8
c0021f97:	68 58 01 00 00       	push   0x158
c0021f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021fa0:	e8 44 b4 fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0021fa5:	83 c4 10             	add    esp,0x10
c0021fa8:	83 c4 0c             	add    esp,0xc
c0021fab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0021fac <LinkedList<Device>::addElement(Device*)>:
c0021fac:	83 ec 0c             	sub    esp,0xc
c0021faf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021fb4:	75 10                	jne    c0021fc6 <LinkedList<Device>::addElement(Device*)+0x1a>
c0021fb6:	83 ec 0c             	sub    esp,0xc
c0021fb9:	68 90 39 02 c0       	push   0xc0023990
c0021fbe:	e8 23 e0 fe ff       	call   c000ffe6 <KePanic(char const*)>
c0021fc3:	83 c4 10             	add    esp,0x10
c0021fc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fca:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fcc:	85 c0                	test   eax,eax
c0021fce:	74 3a                	je     c002200a <LinkedList<Device>::addElement(Device*)+0x5e>
c0021fd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021fd7:	85 c0                	test   eax,eax
c0021fd9:	74 2f                	je     c002200a <LinkedList<Device>::addElement(Device*)+0x5e>
c0021fdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fdf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021fe2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021fe6:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0021fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ff0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021ff4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021ff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ffb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ffe:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022008:	eb 68                	jmp    c0022072 <LinkedList<Device>::addElement(Device*)+0xc6>
c002200a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002200e:	8b 00                	mov    eax,DWORD PTR [eax]
c0022010:	85 c0                	test   eax,eax
c0022012:	75 4e                	jne    c0022062 <LinkedList<Device>::addElement(Device*)+0xb6>
c0022014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022018:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002201b:	85 c0                	test   eax,eax
c002201d:	75 43                	jne    c0022062 <LinkedList<Device>::addElement(Device*)+0xb6>
c002201f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022023:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022027:	89 10                	mov    DWORD PTR [eax],edx
c0022029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002202d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022031:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022038:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002203b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022049:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002204c:	85 c0                	test   eax,eax
c002204e:	74 22                	je     c0022072 <LinkedList<Device>::addElement(Device*)+0xc6>
c0022050:	83 ec 0c             	sub    esp,0xc
c0022053:	68 b2 39 02 c0       	push   0xc00239b2
c0022058:	e8 89 df fe ff       	call   c000ffe6 <KePanic(char const*)>
c002205d:	83 c4 10             	add    esp,0x10
c0022060:	eb 10                	jmp    c0022072 <LinkedList<Device>::addElement(Device*)+0xc6>
c0022062:	83 ec 0c             	sub    esp,0xc
c0022065:	68 bc 39 02 c0       	push   0xc00239bc
c002206a:	e8 77 df fe ff       	call   c000ffe6 <KePanic(char const*)>
c002206f:	83 c4 10             	add    esp,0x10
c0022072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022076:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022079:	8d 50 01             	lea    edx,[eax+0x1]
c002207c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022080:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022083:	90                   	nop
c0022084:	83 c4 0c             	add    esp,0xc
c0022087:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0022088 <LinkedList<Device>::LinkedList()>:
c0022088:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002208c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022092:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022096:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002209d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220a1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00220a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00220b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220b6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00220bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220c1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00220c8:	90                   	nop
c00220c9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00220cc <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00220cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00220d2:	85 c0                	test   eax,eax
c00220d4:	75 0e                	jne    c00220e4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00220d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00220dd:	85 c0                	test   eax,eax
c00220df:	75 03                	jne    c00220e4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00220e1:	b0 01                	mov    al,0x1
c00220e3:	c3                   	ret    
c00220e4:	b0 00                	mov    al,0x0
c00220e6:	90                   	nop
c00220e7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00220e8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00220e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00220ee:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00220f0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00220f0:	83 ec 0c             	sub    esp,0xc
c00220f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00220f9:	85 c0                	test   eax,eax
c00220fb:	75 17                	jne    c0022114 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c00220fd:	83 ec 0c             	sub    esp,0xc
c0022100:	68 2c 3c 02 c0       	push   0xc0023c2c
c0022105:	e8 dc de fe ff       	call   c000ffe6 <KePanic(char const*)>
c002210a:	83 c4 10             	add    esp,0x10
c002210d:	e9 96 00 00 00       	jmp    c00221a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0022112:	66 90                	xchg   ax,ax
c0022114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022118:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002211b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002211e:	85 c0                	test   eax,eax
c0022120:	0f 95 c0             	setne  al
c0022123:	0f b6 c0             	movzx  eax,al
c0022126:	85 c0                	test   eax,eax
c0022128:	74 12                	je     c002213c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002212a:	83 ec 0c             	sub    esp,0xc
c002212d:	68 77 3c 02 c0       	push   0xc0023c77
c0022132:	e8 af de fe ff       	call   c000ffe6 <KePanic(char const*)>
c0022137:	83 c4 10             	add    esp,0x10
c002213a:	66 90                	xchg   ax,ax
c002213c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022140:	8b 00                	mov    eax,DWORD PTR [eax]
c0022142:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022145:	85 c0                	test   eax,eax
c0022147:	0f 94 c0             	sete   al
c002214a:	0f b6 c0             	movzx  eax,al
c002214d:	85 c0                	test   eax,eax
c002214f:	74 33                	je     c0022184 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0022151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022155:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002215b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002215f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002216a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002216d:	83 f8 01             	cmp    eax,0x1
c0022170:	74 22                	je     c0022194 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0022172:	83 ec 0c             	sub    esp,0xc
c0022175:	68 50 3c 02 c0       	push   0xc0023c50
c002217a:	e8 67 de fe ff       	call   c000ffe6 <KePanic(char const*)>
c002217f:	83 c4 10             	add    esp,0x10
c0022182:	eb 10                	jmp    c0022194 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0022184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022188:	8b 00                	mov    eax,DWORD PTR [eax]
c002218a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002218d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022191:	89 10                	mov    DWORD PTR [eax],edx
c0022193:	90                   	nop
c0022194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022198:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002219b:	8d 50 ff             	lea    edx,[eax-0x1]
c002219e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00221a5:	8d 76 00             	lea    esi,[esi+0x0]
c00221a8:	83 c4 0c             	add    esp,0xc
c00221ab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00221ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00221ac:	83 ec 0c             	sub    esp,0xc
c00221af:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00221b4:	75 12                	jne    c00221c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c00221b6:	83 ec 0c             	sub    esp,0xc
c00221b9:	68 90 39 02 c0       	push   0xc0023990
c00221be:	e8 23 de fe ff       	call   c000ffe6 <KePanic(char const*)>
c00221c3:	83 c4 10             	add    esp,0x10
c00221c6:	66 90                	xchg   ax,ax
c00221c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00221ce:	85 c0                	test   eax,eax
c00221d0:	74 36                	je     c0022208 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00221d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00221d9:	85 c0                	test   eax,eax
c00221db:	74 2b                	je     c0022208 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00221dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00221e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00221e8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00221eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221ef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00221f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00221f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00221fd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022204:	eb 6a                	jmp    c0022270 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022206:	66 90                	xchg   ax,ax
c0022208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002220c:	8b 00                	mov    eax,DWORD PTR [eax]
c002220e:	85 c0                	test   eax,eax
c0022210:	75 4e                	jne    c0022260 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022216:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022219:	85 c0                	test   eax,eax
c002221b:	75 43                	jne    c0022260 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002221d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022221:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022225:	89 10                	mov    DWORD PTR [eax],edx
c0022227:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002222b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002222f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022236:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022239:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022244:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022247:	85 c0                	test   eax,eax
c0022249:	74 25                	je     c0022270 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002224b:	83 ec 0c             	sub    esp,0xc
c002224e:	68 b2 39 02 c0       	push   0xc00239b2
c0022253:	e8 8e dd fe ff       	call   c000ffe6 <KePanic(char const*)>
c0022258:	83 c4 10             	add    esp,0x10
c002225b:	eb 13                	jmp    c0022270 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002225d:	8d 76 00             	lea    esi,[esi+0x0]
c0022260:	83 ec 0c             	sub    esp,0xc
c0022263:	68 bc 39 02 c0       	push   0xc00239bc
c0022268:	e8 79 dd fe ff       	call   c000ffe6 <KePanic(char const*)>
c002226d:	83 c4 10             	add    esp,0x10
c0022270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022274:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022277:	8d 50 01             	lea    edx,[eax+0x1]
c002227a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002227e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022281:	90                   	nop
c0022282:	83 c4 0c             	add    esp,0xc
c0022285:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0022288 <ACPI::~ACPI()>:
c0022288:	83 ec 0c             	sub    esp,0xc
c002228b:	ba a8 40 02 c0       	mov    edx,0xc00240a8
c0022290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022294:	89 10                	mov    DWORD PTR [eax],edx
c0022296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002229a:	83 ec 0c             	sub    esp,0xc
c002229d:	50                   	push   eax
c002229e:	e8 b3 76 fe ff       	call   c0009956 <Device::~Device()>
c00222a3:	83 c4 10             	add    esp,0x10
c00222a6:	90                   	nop
c00222a7:	83 c4 0c             	add    esp,0xc
c00222aa:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00222ac <ACPI::~ACPI()>:
c00222ac:	83 ec 0c             	sub    esp,0xc
c00222af:	83 ec 0c             	sub    esp,0xc
c00222b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222b6:	e8 cd ff ff ff       	call   c0022288 <ACPI::~ACPI()>
c00222bb:	83 c4 10             	add    esp,0x10
c00222be:	83 ec 08             	sub    esp,0x8
c00222c1:	68 64 12 00 00       	push   0x1264
c00222c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222ca:	e8 1a b1 fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c00222cf:	83 c4 10             	add    esp,0x10
c00222d2:	83 c4 0c             	add    esp,0xc
c00222d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00222d8 <LinkedList<Device>::~LinkedList()>:
c00222d8:	90                   	nop
c00222d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00222dc <LinkedList<Device>::isEmpty()>:
c00222dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00222e2:	85 c0                	test   eax,eax
c00222e4:	75 0e                	jne    c00222f4 <LinkedList<Device>::isEmpty()+0x18>
c00222e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222ed:	85 c0                	test   eax,eax
c00222ef:	75 03                	jne    c00222f4 <LinkedList<Device>::isEmpty()+0x18>
c00222f1:	b0 01                	mov    al,0x1
c00222f3:	c3                   	ret    
c00222f4:	b0 00                	mov    al,0x0
c00222f6:	90                   	nop
c00222f7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00222f8 <LinkedList<Device>::getFirstElement()>:
c00222f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00222fe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0022300 <LinkedList<Device>::removeFirst()>:
c0022300:	83 ec 0c             	sub    esp,0xc
c0022303:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022307:	8b 00                	mov    eax,DWORD PTR [eax]
c0022309:	85 c0                	test   eax,eax
c002230b:	75 17                	jne    c0022324 <LinkedList<Device>::removeFirst()+0x24>
c002230d:	83 ec 0c             	sub    esp,0xc
c0022310:	68 2c 3c 02 c0       	push   0xc0023c2c
c0022315:	e8 cc dc fe ff       	call   c000ffe6 <KePanic(char const*)>
c002231a:	83 c4 10             	add    esp,0x10
c002231d:	e9 92 00 00 00       	jmp    c00223b4 <LinkedList<Device>::removeFirst()+0xb4>
c0022322:	66 90                	xchg   ax,ax
c0022324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022328:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002232b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022331:	85 c0                	test   eax,eax
c0022333:	74 13                	je     c0022348 <LinkedList<Device>::removeFirst()+0x48>
c0022335:	83 ec 0c             	sub    esp,0xc
c0022338:	68 77 3c 02 c0       	push   0xc0023c77
c002233d:	e8 a4 dc fe ff       	call   c000ffe6 <KePanic(char const*)>
c0022342:	83 c4 10             	add    esp,0x10
c0022345:	8d 76 00             	lea    esi,[esi+0x0]
c0022348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002234c:	8b 00                	mov    eax,DWORD PTR [eax]
c002234e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022354:	85 c0                	test   eax,eax
c0022356:	75 34                	jne    c002238c <LinkedList<Device>::removeFirst()+0x8c>
c0022358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002235c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022366:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002236d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022371:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022374:	83 f8 01             	cmp    eax,0x1
c0022377:	74 27                	je     c00223a0 <LinkedList<Device>::removeFirst()+0xa0>
c0022379:	83 ec 0c             	sub    esp,0xc
c002237c:	68 50 3c 02 c0       	push   0xc0023c50
c0022381:	e8 60 dc fe ff       	call   c000ffe6 <KePanic(char const*)>
c0022386:	83 c4 10             	add    esp,0x10
c0022389:	eb 15                	jmp    c00223a0 <LinkedList<Device>::removeFirst()+0xa0>
c002238b:	90                   	nop
c002238c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022390:	8b 00                	mov    eax,DWORD PTR [eax]
c0022392:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0022398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002239c:	89 10                	mov    DWORD PTR [eax],edx
c002239e:	66 90                	xchg   ax,ax
c00223a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00223a7:	8d 50 ff             	lea    edx,[eax-0x1]
c00223aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223ae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00223b1:	8d 76 00             	lea    esi,[esi+0x0]
c00223b4:	83 c4 0c             	add    esp,0xc
c00223b7:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00223b8 <Computer::~Computer()>:
c00223b8:	83 ec 0c             	sub    esp,0xc
c00223bb:	ba 44 42 02 c0       	mov    edx,0xc0024244
c00223c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223c4:	89 10                	mov    DWORD PTR [eax],edx
c00223c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223ca:	83 ec 0c             	sub    esp,0xc
c00223cd:	50                   	push   eax
c00223ce:	e8 83 75 fe ff       	call   c0009956 <Device::~Device()>
c00223d3:	83 c4 10             	add    esp,0x10
c00223d6:	90                   	nop
c00223d7:	83 c4 0c             	add    esp,0xc
c00223da:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00223dc <Computer::~Computer()>:
c00223dc:	83 ec 0c             	sub    esp,0xc
c00223df:	83 ec 0c             	sub    esp,0xc
c00223e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223e6:	e8 cd ff ff ff       	call   c00223b8 <Computer::~Computer()>
c00223eb:	83 c4 10             	add    esp,0x10
c00223ee:	83 ec 08             	sub    esp,0x8
c00223f1:	68 68 01 00 00       	push   0x168
c00223f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223fa:	e8 ea af fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c00223ff:	83 c4 10             	add    esp,0x10
c0022402:	83 c4 0c             	add    esp,0xc
c0022405:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0022406 <idleCommon()>:
c0022406:	83 ec 0c             	sub    esp,0xc
c0022409:	fa                   	cli    
c002240a:	ff 05 30 fa 02 c0    	inc    DWORD PTR ds:0xc002fa30
c0022410:	e8 ff 4d ff ff       	call   c0017214 <schedule()>
c0022415:	f0 ff 0d 30 fa 02 c0 	lock dec DWORD PTR ds:0xc002fa30
c002241c:	83 3d 30 fa 02 c0 00 	cmp    DWORD PTR ds:0xc002fa30,0x0
c0022423:	75 01                	jne    c0022426 <idleCommon()+0x20>
c0022425:	fb                   	sti    
c0022426:	83 c4 0c             	add    esp,0xc
c0022429:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002242a <LinkedList<UnixFile>::~LinkedList()>:
c002242a:	90                   	nop
c002242b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002242c <LinkedList<UnixFile>::LinkedList()>:
c002242c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022430:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022436:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002243a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022441:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022445:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002244c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022450:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022456:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002245a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022461:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022465:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002246c:	90                   	nop
c002246d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002246e <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002246e:	83 ec 0c             	sub    esp,0xc
c0022471:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022476:	75 10                	jne    c0022488 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0022478:	83 ec 0c             	sub    esp,0xc
c002247b:	68 90 39 02 c0       	push   0xc0023990
c0022480:	e8 61 db fe ff       	call   c000ffe6 <KePanic(char const*)>
c0022485:	83 c4 10             	add    esp,0x10
c0022488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002248c:	8b 00                	mov    eax,DWORD PTR [eax]
c002248e:	85 c0                	test   eax,eax
c0022490:	74 34                	je     c00224c6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022496:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022499:	85 c0                	test   eax,eax
c002249b:	74 29                	je     c00224c6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002249d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224a1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00224a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00224a8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00224ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00224b3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00224b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00224bd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00224c4:	eb 65                	jmp    c002252b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00224c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00224cc:	85 c0                	test   eax,eax
c00224ce:	75 4b                	jne    c002251b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00224d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00224d7:	85 c0                	test   eax,eax
c00224d9:	75 40                	jne    c002251b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00224db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224df:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00224e3:	89 10                	mov    DWORD PTR [eax],edx
c00224e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00224ed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00224f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00224f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00224fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022502:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022505:	85 c0                	test   eax,eax
c0022507:	74 22                	je     c002252b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022509:	83 ec 0c             	sub    esp,0xc
c002250c:	68 b2 39 02 c0       	push   0xc00239b2
c0022511:	e8 d0 da fe ff       	call   c000ffe6 <KePanic(char const*)>
c0022516:	83 c4 10             	add    esp,0x10
c0022519:	eb 10                	jmp    c002252b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002251b:	83 ec 0c             	sub    esp,0xc
c002251e:	68 bc 39 02 c0       	push   0xc00239bc
c0022523:	e8 be da fe ff       	call   c000ffe6 <KePanic(char const*)>
c0022528:	83 c4 10             	add    esp,0x10
c002252b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002252f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022532:	8d 50 01             	lea    edx,[eax+0x1]
c0022535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022539:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002253c:	90                   	nop
c002253d:	83 c4 0c             	add    esp,0xc
c0022540:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0022542 <LinkedList<UnixFile>::getFirstElement()>:
c0022542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022546:	8b 00                	mov    eax,DWORD PTR [eax]
c0022548:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002254a <LinkedList<UnixFile>::removeFirst()>:
c002254a:	83 ec 0c             	sub    esp,0xc
c002254d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022551:	8b 00                	mov    eax,DWORD PTR [eax]
c0022553:	85 c0                	test   eax,eax
c0022555:	75 12                	jne    c0022569 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0022557:	83 ec 0c             	sub    esp,0xc
c002255a:	68 2c 3c 02 c0       	push   0xc0023c2c
c002255f:	e8 82 da fe ff       	call   c000ffe6 <KePanic(char const*)>
c0022564:	83 c4 10             	add    esp,0x10
c0022567:	eb 7e                	jmp    c00225e7 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0022569:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002256d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022570:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022573:	85 c0                	test   eax,eax
c0022575:	74 10                	je     c0022587 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0022577:	83 ec 0c             	sub    esp,0xc
c002257a:	68 77 3c 02 c0       	push   0xc0023c77
c002257f:	e8 62 da fe ff       	call   c000ffe6 <KePanic(char const*)>
c0022584:	83 c4 10             	add    esp,0x10
c0022587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002258b:	8b 00                	mov    eax,DWORD PTR [eax]
c002258d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022590:	85 c0                	test   eax,eax
c0022592:	75 33                	jne    c00225c7 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0022594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022598:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002259e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00225a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225ad:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00225b0:	83 f8 01             	cmp    eax,0x1
c00225b3:	74 21                	je     c00225d6 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00225b5:	83 ec 0c             	sub    esp,0xc
c00225b8:	68 50 3c 02 c0       	push   0xc0023c50
c00225bd:	e8 24 da fe ff       	call   c000ffe6 <KePanic(char const*)>
c00225c2:	83 c4 10             	add    esp,0x10
c00225c5:	eb 0f                	jmp    c00225d6 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00225c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00225cd:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00225d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225d4:	89 10                	mov    DWORD PTR [eax],edx
c00225d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00225dd:	8d 50 ff             	lea    edx,[eax-0x1]
c00225e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225e4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00225e7:	83 c4 0c             	add    esp,0xc
c00225ea:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00225ec <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00225ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00225f0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00225f3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00225f4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00225f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00225f8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00225fb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00225fc <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00225fc:	90                   	nop
c00225fd:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0022600 <ThreadControlBlock::ThreadControlBlock()>:
c0022600:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022604:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002260b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002260f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0022616:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002261a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0022621:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022625:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002262c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022630:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0022637:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002263b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c002263f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022643:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0022647:	90                   	nop
c0022648:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002264c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002264c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022650:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022656:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002265a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022661:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022665:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002266c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022670:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022676:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002267a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022681:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022685:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002268c:	90                   	nop
c002268d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002268e <IOAPIC::~IOAPIC()>:
c002268e:	83 ec 0c             	sub    esp,0xc
c0022691:	ba 34 59 02 c0       	mov    edx,0xc0025934
c0022696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002269a:	89 10                	mov    DWORD PTR [eax],edx
c002269c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226a0:	83 ec 0c             	sub    esp,0xc
c00226a3:	50                   	push   eax
c00226a4:	e8 ad 72 fe ff       	call   c0009956 <Device::~Device()>
c00226a9:	83 c4 10             	add    esp,0x10
c00226ac:	90                   	nop
c00226ad:	83 c4 0c             	add    esp,0xc
c00226b0:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00226b2 <IOAPIC::~IOAPIC()>:
c00226b2:	83 ec 0c             	sub    esp,0xc
c00226b5:	83 ec 0c             	sub    esp,0xc
c00226b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226bc:	e8 cd ff ff ff       	call   c002268e <IOAPIC::~IOAPIC()>
c00226c1:	83 c4 10             	add    esp,0x10
c00226c4:	83 ec 08             	sub    esp,0x8
c00226c7:	68 68 01 00 00       	push   0x168
c00226cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226d0:	e8 14 ad fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c00226d5:	83 c4 10             	add    esp,0x10
c00226d8:	83 c4 0c             	add    esp,0xc
c00226db:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00226dc <CPU::~CPU()>:
c00226dc:	83 ec 0c             	sub    esp,0xc
c00226df:	ba a8 5c 02 c0       	mov    edx,0xc0025ca8
c00226e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226e8:	89 10                	mov    DWORD PTR [eax],edx
c00226ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226ee:	83 ec 0c             	sub    esp,0xc
c00226f1:	50                   	push   eax
c00226f2:	e8 5f 72 fe ff       	call   c0009956 <Device::~Device()>
c00226f7:	83 c4 10             	add    esp,0x10
c00226fa:	90                   	nop
c00226fb:	83 c4 0c             	add    esp,0xc
c00226fe:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0022700 <CPU::~CPU()>:
c0022700:	83 ec 0c             	sub    esp,0xc
c0022703:	83 ec 0c             	sub    esp,0xc
c0022706:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002270a:	e8 cd ff ff ff       	call   c00226dc <CPU::~CPU()>
c002270f:	83 c4 10             	add    esp,0x10
c0022712:	83 ec 08             	sub    esp,0x8
c0022715:	68 78 11 00 00       	push   0x1178
c002271a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002271e:	e8 c6 ac fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0022723:	83 c4 10             	add    esp,0x10
c0022726:	83 c4 0c             	add    esp,0xc
c0022729:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002272a <PCI::~PCI()>:
c002272a:	83 ec 0c             	sub    esp,0xc
c002272d:	ba 0c 62 02 c0       	mov    edx,0xc002620c
c0022732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022736:	89 10                	mov    DWORD PTR [eax],edx
c0022738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002273c:	83 ec 0c             	sub    esp,0xc
c002273f:	50                   	push   eax
c0022740:	e8 57 62 fe ff       	call   c000899c <Bus::~Bus()>
c0022745:	83 c4 10             	add    esp,0x10
c0022748:	90                   	nop
c0022749:	83 c4 0c             	add    esp,0xc
c002274c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002274e <PCI::~PCI()>:
c002274e:	83 ec 0c             	sub    esp,0xc
c0022751:	83 ec 0c             	sub    esp,0xc
c0022754:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022758:	e8 cd ff ff ff       	call   c002272a <PCI::~PCI()>
c002275d:	83 c4 10             	add    esp,0x10
c0022760:	83 ec 08             	sub    esp,0x8
c0022763:	68 5c 01 00 00       	push   0x15c
c0022768:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002276c:	e8 78 ac fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0022771:	83 c4 10             	add    esp,0x10
c0022774:	83 c4 0c             	add    esp,0xc
c0022777:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0022778 <IDE::~IDE()>:
c0022778:	83 ec 0c             	sub    esp,0xc
c002277b:	ba 5c 63 02 c0       	mov    edx,0xc002635c
c0022780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022784:	89 10                	mov    DWORD PTR [eax],edx
c0022786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002278a:	83 ec 0c             	sub    esp,0xc
c002278d:	50                   	push   eax
c002278e:	e8 51 76 fe ff       	call   c0009de4 <HardDiskController::~HardDiskController()>
c0022793:	83 c4 10             	add    esp,0x10
c0022796:	90                   	nop
c0022797:	83 c4 0c             	add    esp,0xc
c002279a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002279c <IDE::~IDE()>:
c002279c:	83 ec 0c             	sub    esp,0xc
c002279f:	83 ec 0c             	sub    esp,0xc
c00227a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00227a6:	e8 cd ff ff ff       	call   c0022778 <IDE::~IDE()>
c00227ab:	83 c4 10             	add    esp,0x10
c00227ae:	83 ec 08             	sub    esp,0x8
c00227b1:	68 70 02 00 00       	push   0x270
c00227b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00227ba:	e8 2a ac fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c00227bf:	83 c4 10             	add    esp,0x10
c00227c2:	83 c4 0c             	add    esp,0xc
c00227c5:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00227c6 <SATABus::~SATABus()>:
c00227c6:	83 ec 0c             	sub    esp,0xc
c00227c9:	ba ac 63 02 c0       	mov    edx,0xc00263ac
c00227ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227d2:	89 10                	mov    DWORD PTR [eax],edx
c00227d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227d8:	83 ec 0c             	sub    esp,0xc
c00227db:	50                   	push   eax
c00227dc:	e8 03 76 fe ff       	call   c0009de4 <HardDiskController::~HardDiskController()>
c00227e1:	83 c4 10             	add    esp,0x10
c00227e4:	90                   	nop
c00227e5:	83 c4 0c             	add    esp,0xc
c00227e8:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00227ea <SATABus::~SATABus()>:
c00227ea:	83 ec 0c             	sub    esp,0xc
c00227ed:	83 ec 0c             	sub    esp,0xc
c00227f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00227f4:	e8 cd ff ff ff       	call   c00227c6 <SATABus::~SATABus()>
c00227f9:	83 c4 10             	add    esp,0x10
c00227fc:	83 ec 08             	sub    esp,0x8
c00227ff:	68 64 01 00 00       	push   0x164
c0022804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022808:	e8 dc ab fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c002280d:	83 c4 10             	add    esp,0x10
c0022810:	83 c4 0c             	add    esp,0xc
c0022813:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0022814 <ATA::~ATA()>:
c0022814:	83 ec 0c             	sub    esp,0xc
c0022817:	ba 94 64 02 c0       	mov    edx,0xc0026494
c002281c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022820:	89 10                	mov    DWORD PTR [eax],edx
c0022822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022826:	83 ec 0c             	sub    esp,0xc
c0022829:	50                   	push   eax
c002282a:	e8 97 76 fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c002282f:	83 c4 10             	add    esp,0x10
c0022832:	90                   	nop
c0022833:	83 c4 0c             	add    esp,0xc
c0022836:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0022838 <ATA::~ATA()>:
c0022838:	83 ec 0c             	sub    esp,0xc
c002283b:	83 ec 0c             	sub    esp,0xc
c002283e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022842:	e8 cd ff ff ff       	call   c0022814 <ATA::~ATA()>
c0022847:	83 c4 10             	add    esp,0x10
c002284a:	83 ec 08             	sub    esp,0x8
c002284d:	68 8c 01 00 00       	push   0x18c
c0022852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022856:	e8 8e ab fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c002285b:	83 c4 10             	add    esp,0x10
c002285e:	83 c4 0c             	add    esp,0xc
c0022861:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0022862 <ATAPI::~ATAPI()>:
c0022862:	83 ec 0c             	sub    esp,0xc
c0022865:	ba dc 64 02 c0       	mov    edx,0xc00264dc
c002286a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002286e:	89 10                	mov    DWORD PTR [eax],edx
c0022870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022874:	83 ec 0c             	sub    esp,0xc
c0022877:	50                   	push   eax
c0022878:	e8 49 76 fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c002287d:	83 c4 10             	add    esp,0x10
c0022880:	90                   	nop
c0022881:	83 c4 0c             	add    esp,0xc
c0022884:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0022886 <ATAPI::~ATAPI()>:
c0022886:	83 ec 0c             	sub    esp,0xc
c0022889:	83 ec 0c             	sub    esp,0xc
c002288c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022890:	e8 cd ff ff ff       	call   c0022862 <ATAPI::~ATAPI()>
c0022895:	83 c4 10             	add    esp,0x10
c0022898:	83 ec 08             	sub    esp,0x8
c002289b:	68 84 01 00 00       	push   0x184
c00228a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228a4:	e8 40 ab fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c00228a9:	83 c4 10             	add    esp,0x10
c00228ac:	83 c4 0c             	add    esp,0xc
c00228af:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00228b0 <SATA::~SATA()>:
c00228b0:	83 ec 0c             	sub    esp,0xc
c00228b3:	ba 9c 65 02 c0       	mov    edx,0xc002659c
c00228b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228bc:	89 10                	mov    DWORD PTR [eax],edx
c00228be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228c2:	83 ec 0c             	sub    esp,0xc
c00228c5:	50                   	push   eax
c00228c6:	e8 fb 75 fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c00228cb:	83 c4 10             	add    esp,0x10
c00228ce:	90                   	nop
c00228cf:	83 c4 0c             	add    esp,0xc
c00228d2:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00228d4 <SATA::~SATA()>:
c00228d4:	83 ec 0c             	sub    esp,0xc
c00228d7:	83 ec 0c             	sub    esp,0xc
c00228da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228de:	e8 cd ff ff ff       	call   c00228b0 <SATA::~SATA()>
c00228e3:	83 c4 10             	add    esp,0x10
c00228e6:	83 ec 08             	sub    esp,0x8
c00228e9:	68 7c 01 00 00       	push   0x17c
c00228ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228f2:	e8 f2 aa fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c00228f7:	83 c4 10             	add    esp,0x10
c00228fa:	83 c4 0c             	add    esp,0xc
c00228fd:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00228fe <SATAPI::~SATAPI()>:
c00228fe:	83 ec 0c             	sub    esp,0xc
c0022901:	ba c0 66 02 c0       	mov    edx,0xc00266c0
c0022906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002290a:	89 10                	mov    DWORD PTR [eax],edx
c002290c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022910:	83 ec 0c             	sub    esp,0xc
c0022913:	50                   	push   eax
c0022914:	e8 ad 75 fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c0022919:	83 c4 10             	add    esp,0x10
c002291c:	90                   	nop
c002291d:	83 c4 0c             	add    esp,0xc
c0022920:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0022922 <SATAPI::~SATAPI()>:
c0022922:	83 ec 0c             	sub    esp,0xc
c0022925:	83 ec 0c             	sub    esp,0xc
c0022928:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002292c:	e8 cd ff ff ff       	call   c00228fe <SATAPI::~SATAPI()>
c0022931:	83 c4 10             	add    esp,0x10
c0022934:	83 ec 08             	sub    esp,0x8
c0022937:	68 84 01 00 00       	push   0x184
c002293c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022940:	e8 a4 aa fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0022945:	83 c4 10             	add    esp,0x10
c0022948:	83 c4 0c             	add    esp,0xc
c002294b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002294c <APICTimer::~APICTimer()>:
c002294c:	83 ec 0c             	sub    esp,0xc
c002294f:	ba 14 67 02 c0       	mov    edx,0xc0026714
c0022954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022958:	89 10                	mov    DWORD PTR [eax],edx
c002295a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002295e:	83 ec 0c             	sub    esp,0xc
c0022961:	50                   	push   eax
c0022962:	e8 2d 87 fe ff       	call   c000b094 <Timer::~Timer()>
c0022967:	83 c4 10             	add    esp,0x10
c002296a:	90                   	nop
c002296b:	83 c4 0c             	add    esp,0xc
c002296e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0022970 <APICTimer::~APICTimer()>:
c0022970:	83 ec 0c             	sub    esp,0xc
c0022973:	83 ec 0c             	sub    esp,0xc
c0022976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002297a:	e8 cd ff ff ff       	call   c002294c <APICTimer::~APICTimer()>
c002297f:	83 c4 10             	add    esp,0x10
c0022982:	83 ec 08             	sub    esp,0x8
c0022985:	68 60 01 00 00       	push   0x160
c002298a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002298e:	e8 56 aa fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c0022993:	83 c4 10             	add    esp,0x10
c0022996:	83 c4 0c             	add    esp,0xc
c0022999:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002299c <PIT::~PIT()>:
c002299c:	83 ec 0c             	sub    esp,0xc
c002299f:	ba 64 67 02 c0       	mov    edx,0xc0026764
c00229a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229a8:	89 10                	mov    DWORD PTR [eax],edx
c00229aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229ae:	83 ec 0c             	sub    esp,0xc
c00229b1:	50                   	push   eax
c00229b2:	e8 dd 86 fe ff       	call   c000b094 <Timer::~Timer()>
c00229b7:	83 c4 10             	add    esp,0x10
c00229ba:	90                   	nop
c00229bb:	83 c4 0c             	add    esp,0xc
c00229be:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00229c0 <PIT::~PIT()>:
c00229c0:	83 ec 0c             	sub    esp,0xc
c00229c3:	83 ec 0c             	sub    esp,0xc
c00229c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00229ca:	e8 cd ff ff ff       	call   c002299c <PIT::~PIT()>
c00229cf:	83 c4 10             	add    esp,0x10
c00229d2:	83 ec 08             	sub    esp,0x8
c00229d5:	68 5c 01 00 00       	push   0x15c
c00229da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00229de:	e8 06 aa fe ff       	call   c000d3e9 <operator delete(void*, unsigned long)>
c00229e3:	83 c4 10             	add    esp,0x10
c00229e6:	83 c4 0c             	add    esp,0xc
c00229e9:	c3                   	ret    

Disassembly of section userkernel:

c0028000 <KiDefaultSignalHandlerAbort(int)>:
c0028000:	57                   	push   edi
c0028001:	b9 07 00 00 00       	mov    ecx,0x7
c0028006:	56                   	push   esi
c0028007:	be 1b 47 02 c0       	mov    esi,0xc002471b
c002800c:	83 ec 24             	sub    esp,0x24
c002800f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0028013:	fc                   	cld    
c0028014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0028016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002801a:	50                   	push   eax
c002801b:	6a 00                	push   0x0
c002801d:	6a 38                	push   0x38
c002801f:	6a 01                	push   0x1
c0028021:	e8 2c 00 00 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0028026:	83 c4 34             	add    esp,0x34
c0028029:	5e                   	pop    esi
c002802a:	5f                   	pop    edi
c002802b:	c3                   	ret    

c002802c <KiDefaultSignalHandlerTerminate(int)>:
c002802c:	57                   	push   edi
c002802d:	b9 08 00 00 00       	mov    ecx,0x8
c0028032:	56                   	push   esi
c0028033:	be 37 47 02 c0       	mov    esi,0xc0024737
c0028038:	83 ec 24             	sub    esp,0x24
c002803b:	89 e7                	mov    edi,esp
c002803d:	fc                   	cld    
c002803e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0028040:	54                   	push   esp
c0028041:	6a 00                	push   0x0
c0028043:	6a 37                	push   0x37
c0028045:	6a 01                	push   0x1
c0028047:	e8 06 00 00 00       	call   c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002804c:	83 c4 34             	add    esp,0x34
c002804f:	5e                   	pop    esi
c0028050:	5f                   	pop    edi
c0028051:	c3                   	ret    

c0028052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0028052:	53                   	push   ebx
c0028053:	83 ec 10             	sub    esp,0x10
c0028056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002805a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002805e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0028062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0028066:	cd 60                	int    0x60
c0028068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002806c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028078:	83 c4 10             	add    esp,0x10
c002807b:	5b                   	pop    ebx
c002807c:	c3                   	ret    

Disassembly of section align_previous:

c0029000 <DO_NOT_DELETE()>:
c0029000:	c3                   	ret    
